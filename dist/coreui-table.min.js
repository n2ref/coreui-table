(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
  typeof define === 'function' && define.amd ? define(factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, (global.CoreUI = global.CoreUI || {}, global.CoreUI.table = factory()));
})(this, (function () { 'use strict';

  function _typeof(o) {
    "@babel/helpers - typeof";

    return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) {
      return typeof o;
    } : function (o) {
      return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
    }, _typeof(o);
  }
  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
    }
  }
  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    Object.defineProperty(Constructor, "prototype", {
      writable: false
    });
    return Constructor;
  }
  function _defineProperty(obj, key, value) {
    key = _toPropertyKey(key);
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    Object.defineProperty(subClass, "prototype", {
      writable: false
    });
    if (superClass) _setPrototypeOf(subClass, superClass);
  }
  function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
      return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _getPrototypeOf(o);
  }
  function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
      o.__proto__ = p;
      return o;
    };
    return _setPrototypeOf(o, p);
  }
  function _assertThisInitialized(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self;
  }
  function _possibleConstructorReturn(self, call) {
    if (call && (typeof call === "object" || typeof call === "function")) {
      return call;
    } else if (call !== void 0) {
      throw new TypeError("Derived constructors may only return object or undefined");
    }
    return _assertThisInitialized(self);
  }
  function _toPrimitive(input, hint) {
    if (typeof input !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
      var res = prim.call(input, hint || "default");
      if (typeof res !== "object") return res;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
  }
  function _toPropertyKey(arg) {
    var key = _toPrimitive(arg, "string");
    return typeof key === "symbol" ? key : String(key);
  }

  var tpl = Object.create(null);
  tpl['columns/badge.html'] = '<span class="badge text-bg-<%= type %>"><%= text %></span>';
  tpl['columns/button.html'] = '<button type="button"<%- attr %>><%- content %></button>';
  tpl['columns/image.html'] = '<img <%- attr %>/>';
  tpl['columns/link.html'] = '<a <%- attr %>><%- content %></a>';
  tpl['columns/menu.html'] = ' <div class="btn-group" role="group"> <button type="button" data-bs-toggle="dropdown"<%- attr %>> <%- content %> </button> <ul class="dropdown-menu dropdown-menu-<%= position %>"> <% $.each(items, function(key, item) { %> <% if (item.type === \'link\') { %> <li><a href="<%= item.url %>"<%- item.attr %>><%= item.content %></a></li> <% } else if (item.type === \'button\') { %> <li> <button type="button" id="btn-dropdown-<%= item.id %>"<%- item.attr %>> <%- item.content %> </button> </li> <% } else if (item.type === \'divider\') { %> <li><hr class="dropdown-divider"></li> <% } else if (item.type === \'header\') { %> <li><h6 class="dropdown-header"><%= item.content %></h6></li> <% } %> <% }) %> </ul> </div>';
  tpl['columns/progress.html'] = '<% if (description !== null) { %> <small class="text-body-secondary"><%= description %></small> <% } %> <div class="d-inline-flex align-items-center"> <div <%- attr %>> <div class="progress-bar bg-<%= color %>" style="width:<%= percent %>%;"></div> </div> <span><%= percentText %></span> </div>';
  tpl['columns/select_label.html'] = '<input class="coreui-table__select-all form-check-input" type="checkbox" value="">';
  tpl['columns/select.html'] = '<input class="coreui-table__select form-check-input" type="checkbox" value="<%= index %>">';
  tpl['columns/switch.html'] = '<div class="form-switch"> <input class="form-check-input coreui-table__switch" type="checkbox" data-field="<%= field %>" value="<%= index %>"<% if (checked) { %> checked<% } %><% if (disabled) { %> disabled<% } %>> </div>';
  tpl['container.html'] = ' <div id="coreui-table-<%= id %>" class="coreui-table<%= classes %>"<% if (widthSizes) { %> style="<%= widthSizes.join(\';\') %>"<% } %>> <div class="coreui-table__container position-relative"> <div class="coreui-table__wrapper<%= classesWrapper %>" <% if (heightSizes) { %>style="<%= heightSizes.join(\';\') %>"<% } %>></div> </div> </div>';
  tpl['controls/button_group.html'] = '<div class="btn-group" role="group"></div>';
  tpl['controls/button_group/button.html'] = '<button type="button" <%- attr %>><%= content %></button>';
  tpl['controls/button_group/dropdown.html'] = '<div class="btn-group" role="group"> <button type="button" data-bs-toggle="dropdown"<%- attr %>><%- content %></button> <ul class="dropdown-menu dropdown-menu-<%= position %>"></ul> </div>';
  tpl['controls/button_group/dropdown/button.html'] = '<li> <button type="button" class="dropdown-item"><%= content %></button> </li>';
  tpl['controls/button_group/dropdown/divider.html'] = '<li><hr class="dropdown-divider"></li>';
  tpl['controls/button_group/dropdown/link.html'] = '<li><a class="dropdown-item" href="<%= url %>"><%= content %></a></li>';
  tpl['controls/button_group/link.html'] = '<a href="<%= url %>"<%- attr %>><%= content %></a>';
  tpl['controls/button.html'] = '<button type="button"<%- attr %>><%- content %></button>';
  tpl['controls/caption.html'] = '<div class="d-flex flex-column me-3"> <small class="text-body-secondary fw-medium"> <%= title %> <% if (description) { %> <i class="bi bi-question-circle coreui-table__cursor_help" title="<%= description %>"></i> <% } %> </small> <b class="text-nowrap"><%= value %></b> </div>';
  tpl['controls/columns.html'] = '<button type="button"<%- btnAttr %>><%-btnContent%></button>';
  tpl['controls/columns/list.html'] = ' <div class="coreui-table__columns px-3 pt-3 pb-4"> <div class="mb-3"> <div class="form-check coreui-table__check_all"> <label class="form-check-label"> <input class="form-check-input" type="checkbox" <% if (showAll === true) { %>checked<% } %>> <%= lang.all %> </label> </div> <% columns.map(function(column) { %> <div class="form-check coreui-table_check-column"> <label class="form-check-label"> <input class="form-check-input" type="checkbox" value="<%= column.field %>" <% if (column.show === true) { %>checked<% } %>> <%= column.label %> </label> </div> <% }); %> </div> <button type="button" <%- btnCompleteAttr %>> <%- btnCompleteContent %> </button> </div>';
  tpl['controls/divider.html'] = '<div <%- attr %>><%= text %></div>';
  tpl['controls/dropdown.html'] = ' <div class="btn-group" role="group"> <button type="button" data-bs-toggle="dropdown"<%- attr %>><%- content %></button> <ul class="dropdown-menu dropdown-menu-<%= position %>"></ul> </div>';
  tpl['controls/dropdown/button.html'] = '<li> <button type="button" class="dropdown-item"><%= content %></button> </li>';
  tpl['controls/dropdown/divider.html'] = '<li><hr class="dropdown-divider"></li>';
  tpl['controls/dropdown/link.html'] = '<li><a class="dropdown-item" href="<%= url %>"><%= content %></a></li>';
  tpl['controls/filter_clear.html'] = '<button type="button" <%- attr %>><%- content %></button>';
  tpl['controls/link.html'] = '<a href="<%- url %>"<%- attr %>><%- content %></a>';
  tpl['controls/page-jump.html'] = ' <div class="coreui-table__page_jump_container"> <div <%- attr %>> <input type="number" class="form-control border-secondary-subtle" min="1"> <button class="btn btn-outline-secondary border-secondary-subtle" type="button"> <i class="bi bi-chevron-compact-right"></i> </button> </div> </div>';
  tpl['controls/page-size.html'] = ' <select <%- attr %>> <% $.each(recordsPerPageList, function(key, count) { %> <option value="<%= count %>"<% if (recordsPerPage == count) { %>selected<% } %>> <% if (count == \'0\') { %><%= lang.all %><% } else { %><%= count %><% } %> </option> <% }); %> </select>';
  tpl['controls/pages.html'] = ' <nav> <ul <%- attr %>> <% if (showPrev) { %> <li class="page-item coreui-table__page_prev <% if ( ! isActivePrev) { %> disabled<% } %>"> <button type="button" class="page-link"> <i class="bi bi-chevron-left"></i> </button> </li> <% } %> <% if (showPageFirst) { %> <li class="page-item"> <button type="button" class="page-link coreui-table__page"> 1 </button> </li> <% } %> <% if (showDividerStart) { %> <li class="page-item disabled"> <span class="page-link px-1">...</span> </li> <% } %> <% pages.map(function(page) { %> <% if (page == currentPage) { %> <li class="page-item active"> <span class="page-link"><%= page %></span> </li> <% } else { %> <li class="page-item"> <button type="button" class="page-link coreui-table__page"> <%= page %> </button> </li> <% } %> <% }); %> <% if (showDividerEnd) { %> <li class="page-item disabled"> <span class="page-link px-1">...</span> </li> <% } %> <% if (showPageLast) { %> <li class="page-item"> <button type="button" class="page-link coreui-table__page"> <%= pagesTotal %> </button> </li> <% } %> <% if (showNext) { %> <li class="page-item coreui-table__page_next<% if ( ! isActiveNext) { %> disabled<% } %>"> <button type="button" class="page-link"> <i class="bi bi-chevron-right"></i> </button> </li> <% } %> </ul> </nav>';
  tpl['controls/search.html'] = '<div class="btn-group"> <button type="button"<%- btnAttr %>><%- btnContent %></button> <%- btnClear %> </div> ';
  tpl['controls/search/clear.html'] = '<button type="button" <%- attr %>><%- content %></button> ';
  tpl['controls/search/container.html'] = ' <div class="coreui-table__search px-3 pt-3 pb-4"> <div class="mb-3 coreui-table__search_controls"></div> <div class="d-flex flex-sm-wrap flex-md-nowrap"> <div class="d-none d-md-block" style="width:<%= labelWidth %>;min-width:<%= labelWidth %>"></div> <div class="d-flex justify-content-start flex-wrap gap-2"> <button type="button" <%- btnCompleteAttr %>> <%- btnCompleteContent %> </button> </div> </div> </div>';
  tpl['controls/search/control.html'] = '<div class="mb-2 d-flex flex-column flex-md-row "> <label class="col-form-label fw-medium text-start text-md-end pe-2" style="min-width:<%= labelWidth %>;width:<%= labelWidth %>"> <%= label %> <% if (descriptionLabel) { %> <div class="text-muted fw-normal"> <small><%= descriptionLabel %></small> </div> <% } %> </label> <div class="flex-fill coreui-table__search-control_content"> <% if (suffix) { %><%- suffix %><% } %> <% if (description) { %> <div class="text-muted fw-normal"> <small><%= description %></small> </div> <% } %> </div> </div>';
  tpl['controls/total.html'] = '<div <%- attr %>> <small><%= lang.total %>: <span class="coreui-table__count-total"><%= recordsTotal %></span></small> </div>';
  tpl['filters/checkbox.html'] = ' <div class="btn-group"> <% if (label) { %> <span class="input-group-text"><%= label %></span> <% } %> <% $.each(items, function(key, item) { %> <input type="checkbox" class="btn-check" autocomplete="off" id="<%= (field + key) %>" name="<%= field %>" value="<%= item.value %>" <%= item.checked ? \' checked\' : \'\' %>> <label class="<%= item.class %>" for="<%= (field + key) %>"><%= item.text %></label> <% }); %> </div>';
  tpl['filters/date_month.html'] = ' <div class="input-group"> <% if (label) { %> <span class="input-group-text"><%= label %></span> <% } %> <input type="month" <%- attr %>> </div>';
  tpl['filters/date_range.html'] = ' <div class="input-group"> <% if (label) { %> <span class="input-group-text"><%= label %></span> <% } %> <input type="date" <%- startAttr %>> <input type="date" <%- endAttr %>> </div>';
  tpl['filters/date.html'] = ' <div class="input-group"> <% if (label) { %> <span class="input-group-text"><%= label %></span> <% } %> <input type="date" <%- attr %>> </div>';
  tpl['filters/datetime_range.html'] = ' <div class="input-group"> <% if (label) { %> <span class="input-group-text"><%= label %></span> <% } %> <input type="datetime-local" <%- startAttr %>> <input type="datetime-local" <%- endAttr %>> </div>';
  tpl['filters/datetime.html'] = ' <div class="input-group"> <% if (label) { %> <span class="input-group-text"><%= label %></span> <% } %> <input type="datetime-local" <%- attr %>> </div>';
  tpl['filters/number.html'] = ' <div class="input-group"> <% if (label) { %> <span class="input-group-text"><%= label %></span> <% } %> <input type="number" <%- attrStart %>> <input type="number" <%- attrEnd %>> <button type="button" <%- btnAttr %>> <%- btnContent %> </button> </div>';
  tpl['filters/radio.html'] = ' <div class="btn-group"> <% if (label) { %> <span class="input-group-text"><%= label %></span> <% } %> <% $.each(items, function(key, item) { %> <input type="radio" class="btn-check" autocomplete="off" id="<%= (field + key) %>" name="<%= field %>" value="<%= item.value %>" <%= item.checked ? \' checked\' : \'\' %>> <label class="<%= item.class %>" for="<%= (field + key) %>"><%= item.text %></label> <% }); %> </div>';
  tpl['filters/select.html'] = '<div class="input-group flex-nowrap"> <% if (label) { %> <span class="input-group-text"><%= label %></span> <% } %> <select <%- attr %>> <option>--</option> <% $.each(options, function(key, option) { %> <% if (option.type === \'group\') { %> <optgroup<%- option.attr %>> <% $.each(option.options, function(key, groupOption) { %> <option <%- groupOption.attr %>><%= groupOption.text %></option> <% }); %> </optgroup> <% } else { %> <option <%- option.attr %>><%= option.text %></option> <% } %> <% }); %> </select> </div>';
  tpl['filters/switch.html'] = '<div class="form-check form-switch"> <input class="form-check-input" type="checkbox" id="<%= (field + id) %>" name="<%= field %>" value="<%= valueY %>" <%= checked ? \' checked\' : \'\' %>> <% if (label != \'\') { %> <label class="form-check-label" for="<%= (field + id) %>"><%= label %></label> <% } %> </div>';
  tpl['filters/text.html'] = ' <div class="input-group"> <% if (label) { %> <span class="input-group-text"><%= label %></span> <% } %> <input type="text" <%- attr %>> <button type="button" <%- btnAttr %>> <%- btnContent %> </button> </div>';
  tpl['search/checkbox-btn.html'] = ' <div class="pt-2"> <div class="btn-group"> <% options.map(function(option) { %> <input class="btn-check" type="checkbox" value="<%- option.value %>" id="<%= option.hash %>" autocomplete="off" <%= option.checked ? \' checked\' : \'\' %>> <label class="<%= option.optionsClass %>" for="<%= option.hash %>"><%= option.text %></label> <% }); %> </div> </div>';
  tpl['search/checkbox.html'] = ' <div class="pt-2"> <% options.map(function(option) { %> <div class="form-check"> <label class="form-check-label coreui-table_pointer"> <input class="form-check-input" type="checkbox" value="<%- option.value %>" <%= option.checked ? \' checked\' : \'\' %>> <%= option.text %> </label> </div> <% }); %> </div>';
  tpl['search/date_month.html'] = ' <input type="month" <%- attr %>>';
  tpl['search/date_range.html'] = '<div> <input type="date" <%- startAttr %>> <input type="date" <%- endAttr %>> </div>';
  tpl['search/date.html'] = ' <input type="date" <%- attr %>>';
  tpl['search/datetime_range.html'] = '<div> <input type="datetime-local" <%- startAttr %>> <input type="datetime-local" <%- endAttr %>> </div>';
  tpl['search/datetime.html'] = ' <input type="datetime-local" <%- attr %>>';
  tpl['search/number.html'] = ' <input type="number" <%- startAttr %>> <input type="number" <%- endAttr %>>';
  tpl['search/radio-btn.html'] = '<div class="pt-2"> <div class="btn-group"> <input class="btn-check coreui-table__all" type="radio" name="<%= field %>" value="" id="<%= optionAllHash %>" autocomplete="off" <%= checkedAll ? \' checked\' : \'\' %>> <label class="<%= optionOptionsClass %>" for="<%= optionAllHash %>"><%= lang.all %></label> <% options.map(function(option) { %> <input class="btn-check" type="radio" name="<%= field %>" value="<%- option.value %>" id="<%= option.hash %>" autocomplete="off" <%= option.checked ? \' checked="checked"\' : \'\' %>"> <label class="<%= option.optionsClass %>" for="<%= option.hash %>"><%= option.text %></label> <% }); %> </div> </div>';
  tpl['search/radio.html'] = '<div class="pt-2"> <div class="form-check"> <label class="form-check-label coreui-table_pointer"> <input class="form-check-input coreui-table__all" type="radio" name="<%= field %>" value=""<%= checkedAll ? \' checked\' : \'\' %>> <%= lang.all %> </label> </div> <% options.map(function(option) { %> <div class="form-check"> <label class="form-check-label coreui-table_pointer"> <input class="form-check-input" type="radio" name="<%= field %>" value="<%- option.value %>" <%= option.checked ? \' checked="checked"\' : \'\' %>> <%= option.text %> </label> </div> <% }); %> </div>';
  tpl['search/select.html'] = ' <select <%- attr %>> <option>--</option> <% $.each(options, function(key, option) { %> <% if (option.type === \'group\') { %> <optgroup<%- option.attr %>> <% $.each(option.options, function(key, groupOption) { %> <option <%- groupOption.attr %>><%= groupOption.text %></option> <% }); %> </optgroup> <% } else { %> <option <%- option.attr %>><%= option.text %></option> <% } %> <% }); %> </select>';
  tpl['search/switch.html'] = '<div class="form-check form-switch pt-2"> <input class="form-check-input" type="checkbox" id="<%= (field + id) %>" name="<%= field %>" value="<%= valueY %>" <%= checked ? \' checked\' : \'\' %>> </div>';
  tpl['search/text.html'] = '<input type="text" <%- attr %>>';
  tpl['table.html'] = ' <table class="table <%= classes %> mb-0"> <colgroup> <% $.each(colGroups, function(key, columnGroup) { %> <col<% if (columnGroup.style) { %> style="<%= columnGroup.style %>"<% } %>/> <% }); %> </colgroup> <% if (showHeaders) { %> <thead<% if (theadAttr) { %> <%- theadAttr %>"<% } %>> <%- columnsHeader %> </thead> <% } %> <tbody></tbody> <% if (columnsFooter != \'\') { %> <tfoot> <%- columnsFooter %> </tfoot> <% } %> </table>';
  tpl['table/columns/footer.html'] = '<tr> <% $.each(columns, function(key, column) { %> <td<%- column.attr%>><%- column.content %></td> <% }); %> </tr>';
  tpl['table/columns/header.html'] = '<tr class="fw-medium bg-white"> <% $.each(columns, function(key, column) { %> <td<%- column.attr%>><%- column.content %></td> <% }); %> </tr>';
  tpl['table/columns/menu/button.html'] = '<li><button <%- attr%>><%- text %></button></li>';
  tpl['table/columns/menu/divider.html'] = '<li><hr class="dropdown-divider"></li>';
  tpl['table/columns/menu/header.html'] = '<li><h6 class="dropdown-header"><%- text %></h6></li>';
  tpl['table/columns/menu/link.html'] = '<li><a <%- attr%>><%- text %></a></li>';
  tpl['table/columns/td.html'] = '<td<%- attr%>> <span class="coreui-table__column-label"><%- label %></span> <% if (description) { %> <small class="coreui-table__column-description bi bi-question-circle text-body-secondary" title="<%= description %>" data-bs-toggle="tooltip" data-bs-placement="bottom"></small> <% } %> <% if (sortable === \'asc\') { %> <i class="coreui-table__column-sort bi bi-sort-down-alt"></i> <% } else if (sortable === \'desc\') { %> <i class="coreui-table__column-sort bi bi-sort-down"></i> <% } %> <% if (issetMenu) { %> <div class="dropdown d-inline fw-normal coreui-table__column-menu"> <span class="dropdown-toggle <%= menuShowAlways %>" data-bs-toggle="dropdown"> <i class="bi bi-three-dots-vertical"></i> </span> <ul class="dropdown-menu dropdown-menu-<%= menuPosition %>"></ul> </div> <% } %> </td>';
  tpl['table/columns/tr.html'] = '<tr class="fw-medium bg-white"></tr>';
  tpl['table/control.html'] = '<div id="coreui-table-control-<%= id %>" class="coreui-table__control"></div>';
  tpl['table/controls/footer-out.html'] = ' <div class="coreui-table__footer d-flex justify-content-between"> <% if (controlsLeft.length) { %> <div class="coreui-table__controls coreui-table__controls_left d-flex justify-content-start gap-2 flex-wrap flex-fill mb-1 mt-2 align-items-center"></div> <% } %> <% if (controlsCenter.length) { %> <div class="coreui-table__controls coreui-table__controls_center d-flex justify-content-center gap-2 flex-wrap flex-fill mb-1 mt-2 align-items-center"></div> <% } %> <% if (controlsRight.length) { %> <div class="coreui-table__controls coreui-table__controls_right d-flex justify-content-end gap-2 flex-wrap flex-fill mb-1 mt-2 align-items-center"></div> <% } %> </div>';
  tpl['table/controls/footer.html'] = ' <div class="coreui-table__footer ps-1 pe-1 d-flex justify-content-between border-top border-secondary-subtle"> <% if (controlsLeft.length) { %> <div class="coreui-table__controls coreui-table__controls_left d-flex justify-content-start gap-2 flex-wrap flex-fill mb-1 mt-1 align-items-center"></div> <% } %> <% if (controlsCenter.length) { %> <div class="coreui-table__controls coreui-table__controls_center d-flex justify-content-center gap-2 flex-wrap flex-fill mb-1 mt-1 align-items-center"></div> <% } %> <% if (controlsRight.length) { %> <div class="coreui-table__controls coreui-table__controls_right d-flex justify-content-end gap-2 flex-wrap flex-fill mb-1 mt-1 align-items-center"></div> <% } %> </div>';
  tpl['table/controls/header-out.html'] = ' <div class="coreui-table__header d-flex justify-content-between"> <% if (controlsLeft.length) { %> <div class="coreui-table__controls coreui-table__controls_left d-flex justify-content-start gap-2 flex-wrap flex-fill mb-2 mt-1 align-items-center"></div> <% } %> <% if (controlsCenter.length) { %> <div class="coreui-table__controls coreui-table__controls_center d-flex justify-content-center gap-2 flex-wrap flex-fill mb-2 mt-1 align-items-center"></div> <% } %> <% if (controlsRight.length) { %> <div class="coreui-table__controls coreui-table__controls_right d-flex justify-content-end gap-2 flex-wrap flex-fill mb-2 mt-1 align-items-center"></div> <% } %> </div>';
  tpl['table/controls/header.html'] = ' <div class="coreui-table__header ps-1 pe-1 d-flex justify-content-between border-bottom border-secondary-subtle"> <% if (controlsLeft.length) { %> <div class="coreui-table__controls coreui-table__controls_left d-flex justify-content-start gap-2 flex-wrap flex-fill my-1 align-items-center"></div> <% } %> <% if (controlsCenter.length) { %> <div class="coreui-table__controls coreui-table__controls_center d-flex justify-content-center gap-2 flex-wrap flex-fill my-1 align-items-center"></div> <% } %> <% if (controlsRight.length) { %> <div class="coreui-table__controls coreui-table__controls_right d-flex justify-content-end gap-2 flex-wrap flex-fill my-1 align-items-center"></div> <% } %> </div>';
  tpl['table/loader.html'] = '<div class="coreui-table-lock position-absolute w-100 top-0 bottom-0"> <div class="coreui-table-block bg-secondary-subtle position-absolute opacity-50 w-100 top-0 bottom-0"></div> <div class="coreui-table-message position-relative d-flex align-content-center justify-content-start gap-2 mt-3 py-1 px-2 m-auto border border-secondary-subtle rounded-3 bg-body-secondary"> <div class="spinner-border text-secondary align-self-center"></div> <span class="lh-lg"><%= lang.loading %></span> </div> </div>';
  tpl['table/record.html'] = '<tr<%- attr %> data-record-index="<%= index %>"> <% fields.map(function(field) { %> <td<%- field.attr %>></td> <% }); %> </tr>';
  tpl['table/record/empty.html'] = '<tr class="coreui-table__record-empty"> <td class="text-center" colspan="<%= columnsCount %>"><%= lang.emptyRecords %></td> </tr>';
  tpl['table/record/expand.html'] = '<tr class="coreui-table__record-expanded" style="display: none"> <td colspan="<%= colspan %>"></td> </tr>';
  tpl['table/record/group.html'] = '<tr<%- attr %>> <td colspan="<%= colspan %>" class="border-end"></td> </tr>';

  (function (f) {
    if (typeof exports === "object" && typeof module !== "undefined") {
      module.exports = f();
    } else if (typeof define === "function" && define.amd) {
      define([], f);
    } else {
      var g;
      if (typeof window !== "undefined") {
        g = window;
      } else if (typeof global !== "undefined") {
        g = global;
      } else if (typeof self !== "undefined") {
        g = self;
      } else {
        g = this;
      }
      g.ejs = f();
    }
  })(function () {
    return function () {
      function r(e, n, t) {
        function o(i, f) {
          if (!n[i]) {
            if (!e[i]) {
              var c = "function" == typeof require && require;
              if (!f && c) return c(i, !0);
              if (u) return u(i, !0);
              var a = new Error("Cannot find module '" + i + "'");
              throw a.code = "MODULE_NOT_FOUND", a;
            }
            var p = n[i] = {
              exports: {}
            };
            e[i][0].call(p.exports, function (r) {
              var n = e[i][1][r];
              return o(n || r);
            }, p, p.exports, r, e, n, t);
          }
          return n[i].exports;
        }
        for (var u = "function" == typeof require && require, i = 0; i < t.length; i++) o(t[i]);
        return o;
      }
      return r;
    }()({
      1: [function (require, module, exports) {

        var fs = require("fs");
        var path = require("path");
        var utils = require("./utils");
        var scopeOptionWarned = false;
        var _VERSION_STRING = require("../package.json").version;
        var _DEFAULT_OPEN_DELIMITER = "<";
        var _DEFAULT_CLOSE_DELIMITER = ">";
        var _DEFAULT_DELIMITER = "%";
        var _DEFAULT_LOCALS_NAME = "locals";
        var _NAME = "ejs";
        var _REGEX_STRING = "(<%%|%%>|<%=|<%-|<%_|<%#|<%|%>|-%>|_%>)";
        var _OPTS_PASSABLE_WITH_DATA = ["delimiter", "scope", "context", "debug", "compileDebug", "client", "_with", "rmWhitespace", "strict", "filename", "async"];
        var _OPTS_PASSABLE_WITH_DATA_EXPRESS = _OPTS_PASSABLE_WITH_DATA.concat("cache");
        var _BOM = /^\uFEFF/;
        var _JS_IDENTIFIER = /^[a-zA-Z_$][0-9a-zA-Z_$]*$/;
        exports.cache = utils.cache;
        exports.fileLoader = fs.readFileSync;
        exports.localsName = _DEFAULT_LOCALS_NAME;
        exports.promiseImpl = new Function("return this;")().Promise;
        exports.resolveInclude = function (name, filename, isDir) {
          var dirname = path.dirname;
          var extname = path.extname;
          var resolve = path.resolve;
          var includePath = resolve(isDir ? filename : dirname(filename), name);
          var ext = extname(name);
          if (!ext) {
            includePath += ".ejs";
          }
          return includePath;
        };
        function resolvePaths(name, paths) {
          var filePath;
          if (paths.some(function (v) {
            filePath = exports.resolveInclude(name, v, true);
            return fs.existsSync(filePath);
          })) {
            return filePath;
          }
        }
        function getIncludePath(path, options) {
          var includePath;
          var filePath;
          var views = options.views;
          var match = /^[A-Za-z]+:\\|^\//.exec(path);
          if (match && match.length) {
            path = path.replace(/^\/*/, "");
            if (Array.isArray(options.root)) {
              includePath = resolvePaths(path, options.root);
            } else {
              includePath = exports.resolveInclude(path, options.root || "/", true);
            }
          } else {
            if (options.filename) {
              filePath = exports.resolveInclude(path, options.filename);
              if (fs.existsSync(filePath)) {
                includePath = filePath;
              }
            }
            if (!includePath && Array.isArray(views)) {
              includePath = resolvePaths(path, views);
            }
            if (!includePath && typeof options.includer !== "function") {
              throw new Error('Could not find the include file "' + options.escapeFunction(path) + '"');
            }
          }
          return includePath;
        }
        function handleCache(options, template) {
          var func;
          var filename = options.filename;
          var hasTemplate = arguments.length > 1;
          if (options.cache) {
            if (!filename) {
              throw new Error("cache option requires a filename");
            }
            func = exports.cache.get(filename);
            if (func) {
              return func;
            }
            if (!hasTemplate) {
              template = fileLoader(filename).toString().replace(_BOM, "");
            }
          } else if (!hasTemplate) {
            if (!filename) {
              throw new Error("Internal EJS error: no file name or template " + "provided");
            }
            template = fileLoader(filename).toString().replace(_BOM, "");
          }
          func = exports.compile(template, options);
          if (options.cache) {
            exports.cache.set(filename, func);
          }
          return func;
        }
        function tryHandleCache(options, data, cb) {
          var result;
          if (!cb) {
            if (typeof exports.promiseImpl == "function") {
              return new exports.promiseImpl(function (resolve, reject) {
                try {
                  result = handleCache(options)(data);
                  resolve(result);
                } catch (err) {
                  reject(err);
                }
              });
            } else {
              throw new Error("Please provide a callback function");
            }
          } else {
            try {
              result = handleCache(options)(data);
            } catch (err) {
              return cb(err);
            }
            cb(null, result);
          }
        }
        function fileLoader(filePath) {
          return exports.fileLoader(filePath);
        }
        function includeFile(path, options) {
          var opts = utils.shallowCopy(utils.createNullProtoObjWherePossible(), options);
          opts.filename = getIncludePath(path, opts);
          if (typeof options.includer === "function") {
            var includerResult = options.includer(path, opts.filename);
            if (includerResult) {
              if (includerResult.filename) {
                opts.filename = includerResult.filename;
              }
              if (includerResult.template) {
                return handleCache(opts, includerResult.template);
              }
            }
          }
          return handleCache(opts);
        }
        function rethrow(err, str, flnm, lineno, esc) {
          var lines = str.split("\n");
          var start = Math.max(lineno - 3, 0);
          var end = Math.min(lines.length, lineno + 3);
          var filename = esc(flnm);
          var context = lines.slice(start, end).map(function (line, i) {
            var curr = i + start + 1;
            return (curr == lineno ? " >> " : "    ") + curr + "| " + line;
          }).join("\n");
          err.path = filename;
          err.message = (filename || "ejs") + ":" + lineno + "\n" + context + "\n\n" + err.message;
          throw err;
        }
        function stripSemi(str) {
          return str.replace(/;(\s*$)/, "$1");
        }
        exports.compile = function compile(template, opts) {
          var templ;
          if (opts && opts.scope) {
            if (!scopeOptionWarned) {
              console.warn("`scope` option is deprecated and will be removed in EJS 3");
              scopeOptionWarned = true;
            }
            if (!opts.context) {
              opts.context = opts.scope;
            }
            delete opts.scope;
          }
          templ = new Template(template, opts);
          return templ.compile();
        };
        exports.render = function (template, d, o) {
          var data = d || utils.createNullProtoObjWherePossible();
          var opts = o || utils.createNullProtoObjWherePossible();
          if (arguments.length == 2) {
            utils.shallowCopyFromList(opts, data, _OPTS_PASSABLE_WITH_DATA);
          }
          return handleCache(opts, template)(data);
        };
        exports.renderFile = function () {
          var args = Array.prototype.slice.call(arguments);
          var filename = args.shift();
          var cb;
          var opts = {
            filename: filename
          };
          var data;
          var viewOpts;
          if (typeof arguments[arguments.length - 1] == "function") {
            cb = args.pop();
          }
          if (args.length) {
            data = args.shift();
            if (args.length) {
              utils.shallowCopy(opts, args.pop());
            } else {
              if (data.settings) {
                if (data.settings.views) {
                  opts.views = data.settings.views;
                }
                if (data.settings["view cache"]) {
                  opts.cache = true;
                }
                viewOpts = data.settings["view options"];
                if (viewOpts) {
                  utils.shallowCopy(opts, viewOpts);
                }
              }
              utils.shallowCopyFromList(opts, data, _OPTS_PASSABLE_WITH_DATA_EXPRESS);
            }
            opts.filename = filename;
          } else {
            data = utils.createNullProtoObjWherePossible();
          }
          return tryHandleCache(opts, data, cb);
        };
        exports.Template = Template;
        exports.clearCache = function () {
          exports.cache.reset();
        };
        function Template(text, optsParam) {
          var opts = utils.hasOwnOnlyObject(optsParam);
          var options = utils.createNullProtoObjWherePossible();
          this.templateText = text;
          this.mode = null;
          this.truncate = false;
          this.currentLine = 1;
          this.source = "";
          options.client = opts.client || false;
          options.escapeFunction = opts.escape || opts.escapeFunction || utils.escapeXML;
          options.compileDebug = opts.compileDebug !== false;
          options.debug = !!opts.debug;
          options.filename = opts.filename;
          options.openDelimiter = opts.openDelimiter || exports.openDelimiter || _DEFAULT_OPEN_DELIMITER;
          options.closeDelimiter = opts.closeDelimiter || exports.closeDelimiter || _DEFAULT_CLOSE_DELIMITER;
          options.delimiter = opts.delimiter || exports.delimiter || _DEFAULT_DELIMITER;
          options.strict = opts.strict || false;
          options.context = opts.context;
          options.cache = opts.cache || false;
          options.rmWhitespace = opts.rmWhitespace;
          options.root = opts.root;
          options.includer = opts.includer;
          options.outputFunctionName = opts.outputFunctionName;
          options.localsName = opts.localsName || exports.localsName || _DEFAULT_LOCALS_NAME;
          options.views = opts.views;
          options.async = opts.async;
          options.destructuredLocals = opts.destructuredLocals;
          options.legacyInclude = typeof opts.legacyInclude != "undefined" ? !!opts.legacyInclude : true;
          if (options.strict) {
            options._with = false;
          } else {
            options._with = typeof opts._with != "undefined" ? opts._with : true;
          }
          this.opts = options;
          this.regex = this.createRegex();
        }
        Template.modes = {
          EVAL: "eval",
          ESCAPED: "escaped",
          RAW: "raw",
          COMMENT: "comment",
          LITERAL: "literal"
        };
        Template.prototype = {
          createRegex: function () {
            var str = _REGEX_STRING;
            var delim = utils.escapeRegExpChars(this.opts.delimiter);
            var open = utils.escapeRegExpChars(this.opts.openDelimiter);
            var close = utils.escapeRegExpChars(this.opts.closeDelimiter);
            str = str.replace(/%/g, delim).replace(/</g, open).replace(/>/g, close);
            return new RegExp(str);
          },
          compile: function () {
            var src;
            var fn;
            var opts = this.opts;
            var prepended = "";
            var appended = "";
            var escapeFn = opts.escapeFunction;
            var ctor;
            var sanitizedFilename = opts.filename ? JSON.stringify(opts.filename) : "undefined";
            if (!this.source) {
              this.generateSource();
              prepended += '  var __output = "";\n' + "  function __append(s) { if (s !== undefined && s !== null) __output += s }\n";
              if (opts.outputFunctionName) {
                if (!_JS_IDENTIFIER.test(opts.outputFunctionName)) {
                  throw new Error("outputFunctionName is not a valid JS identifier.");
                }
                prepended += "  var " + opts.outputFunctionName + " = __append;" + "\n";
              }
              if (opts.localsName && !_JS_IDENTIFIER.test(opts.localsName)) {
                throw new Error("localsName is not a valid JS identifier.");
              }
              if (opts.destructuredLocals && opts.destructuredLocals.length) {
                var destructuring = "  var __locals = (" + opts.localsName + " || {}),\n";
                for (var i = 0; i < opts.destructuredLocals.length; i++) {
                  var name = opts.destructuredLocals[i];
                  if (!_JS_IDENTIFIER.test(name)) {
                    throw new Error("destructuredLocals[" + i + "] is not a valid JS identifier.");
                  }
                  if (i > 0) {
                    destructuring += ",\n  ";
                  }
                  destructuring += name + " = __locals." + name;
                }
                prepended += destructuring + ";\n";
              }
              if (opts._with !== false) {
                prepended += "  with (" + opts.localsName + " || {}) {" + "\n";
                appended += "  }" + "\n";
              }
              appended += "  return __output;" + "\n";
              this.source = prepended + this.source + appended;
            }
            if (opts.compileDebug) {
              src = "var __line = 1" + "\n" + "  , __lines = " + JSON.stringify(this.templateText) + "\n" + "  , __filename = " + sanitizedFilename + ";" + "\n" + "try {" + "\n" + this.source + "} catch (e) {" + "\n" + "  rethrow(e, __lines, __filename, __line, escapeFn);" + "\n" + "}" + "\n";
            } else {
              src = this.source;
            }
            if (opts.client) {
              src = "escapeFn = escapeFn || " + escapeFn.toString() + ";" + "\n" + src;
              if (opts.compileDebug) {
                src = "rethrow = rethrow || " + rethrow.toString() + ";" + "\n" + src;
              }
            }
            if (opts.strict) {
              src = '"use strict";\n' + src;
            }
            if (opts.debug) {
              console.log(src);
            }
            if (opts.compileDebug && opts.filename) {
              src = src + "\n" + "//# sourceURL=" + sanitizedFilename + "\n";
            }
            try {
              if (opts.async) {
                try {
                  ctor = new Function("return (async function(){}).constructor;")();
                } catch (e) {
                  if (e instanceof SyntaxError) {
                    throw new Error("This environment does not support async/await");
                  } else {
                    throw e;
                  }
                }
              } else {
                ctor = Function;
              }
              fn = new ctor(opts.localsName + ", escapeFn, include, rethrow", src);
            } catch (e) {
              if (e instanceof SyntaxError) {
                if (opts.filename) {
                  e.message += " in " + opts.filename;
                }
                e.message += " while compiling ejs\n\n";
                e.message += "If the above error is not helpful, you may want to try EJS-Lint:\n";
                e.message += "https://github.com/RyanZim/EJS-Lint";
                if (!opts.async) {
                  e.message += "\n";
                  e.message += "Or, if you meant to create an async function, pass `async: true` as an option.";
                }
              }
              throw e;
            }
            var returnedFn = opts.client ? fn : function anonymous(data) {
              var include = function (path, includeData) {
                var d = utils.shallowCopy(utils.createNullProtoObjWherePossible(), data);
                if (includeData) {
                  d = utils.shallowCopy(d, includeData);
                }
                return includeFile(path, opts)(d);
              };
              return fn.apply(opts.context, [data || utils.createNullProtoObjWherePossible(), escapeFn, include, rethrow]);
            };
            if (opts.filename && typeof Object.defineProperty === "function") {
              var filename = opts.filename;
              var basename = path.basename(filename, path.extname(filename));
              try {
                Object.defineProperty(returnedFn, "name", {
                  value: basename,
                  writable: false,
                  enumerable: false,
                  configurable: true
                });
              } catch (e) {}
            }
            return returnedFn;
          },
          generateSource: function () {
            var opts = this.opts;
            if (opts.rmWhitespace) {
              this.templateText = this.templateText.replace(/[\r\n]+/g, "\n").replace(/^\s+|\s+$/gm, "");
            }
            this.templateText = this.templateText.replace(/[ \t]*<%_/gm, "<%_").replace(/_%>[ \t]*/gm, "_%>");
            var self = this;
            var matches = this.parseTemplateText();
            var d = this.opts.delimiter;
            var o = this.opts.openDelimiter;
            var c = this.opts.closeDelimiter;
            if (matches && matches.length) {
              matches.forEach(function (line, index) {
                var closing;
                if (line.indexOf(o + d) === 0 && line.indexOf(o + d + d) !== 0) {
                  closing = matches[index + 2];
                  if (!(closing == d + c || closing == "-" + d + c || closing == "_" + d + c)) {
                    throw new Error('Could not find matching close tag for "' + line + '".');
                  }
                }
                self.scanLine(line);
              });
            }
          },
          parseTemplateText: function () {
            var str = this.templateText;
            var pat = this.regex;
            var result = pat.exec(str);
            var arr = [];
            var firstPos;
            while (result) {
              firstPos = result.index;
              if (firstPos !== 0) {
                arr.push(str.substring(0, firstPos));
                str = str.slice(firstPos);
              }
              arr.push(result[0]);
              str = str.slice(result[0].length);
              result = pat.exec(str);
            }
            if (str) {
              arr.push(str);
            }
            return arr;
          },
          _addOutput: function (line) {
            if (this.truncate) {
              line = line.replace(/^(?:\r\n|\r|\n)/, "");
              this.truncate = false;
            }
            if (!line) {
              return line;
            }
            line = line.replace(/\\/g, "\\\\");
            line = line.replace(/\n/g, "\\n");
            line = line.replace(/\r/g, "\\r");
            line = line.replace(/"/g, '\\"');
            this.source += '    ; __append("' + line + '")' + "\n";
          },
          scanLine: function (line) {
            var self = this;
            var d = this.opts.delimiter;
            var o = this.opts.openDelimiter;
            var c = this.opts.closeDelimiter;
            var newLineCount = 0;
            newLineCount = line.split("\n").length - 1;
            switch (line) {
              case o + d:
              case o + d + "_":
                this.mode = Template.modes.EVAL;
                break;
              case o + d + "=":
                this.mode = Template.modes.ESCAPED;
                break;
              case o + d + "-":
                this.mode = Template.modes.RAW;
                break;
              case o + d + "#":
                this.mode = Template.modes.COMMENT;
                break;
              case o + d + d:
                this.mode = Template.modes.LITERAL;
                this.source += '    ; __append("' + line.replace(o + d + d, o + d) + '")' + "\n";
                break;
              case d + d + c:
                this.mode = Template.modes.LITERAL;
                this.source += '    ; __append("' + line.replace(d + d + c, d + c) + '")' + "\n";
                break;
              case d + c:
              case "-" + d + c:
              case "_" + d + c:
                if (this.mode == Template.modes.LITERAL) {
                  this._addOutput(line);
                }
                this.mode = null;
                this.truncate = line.indexOf("-") === 0 || line.indexOf("_") === 0;
                break;
              default:
                if (this.mode) {
                  switch (this.mode) {
                    case Template.modes.EVAL:
                    case Template.modes.ESCAPED:
                    case Template.modes.RAW:
                      if (line.lastIndexOf("//") > line.lastIndexOf("\n")) {
                        line += "\n";
                      }
                  }
                  switch (this.mode) {
                    case Template.modes.EVAL:
                      this.source += "    ; " + line + "\n";
                      break;
                    case Template.modes.ESCAPED:
                      this.source += "    ; __append(escapeFn(" + stripSemi(line) + "))" + "\n";
                      break;
                    case Template.modes.RAW:
                      this.source += "    ; __append(" + stripSemi(line) + ")" + "\n";
                      break;
                    case Template.modes.COMMENT:
                      break;
                    case Template.modes.LITERAL:
                      this._addOutput(line);
                      break;
                  }
                } else {
                  this._addOutput(line);
                }
            }
            if (self.opts.compileDebug && newLineCount) {
              this.currentLine += newLineCount;
              this.source += "    ; __line = " + this.currentLine + "\n";
            }
          }
        };
        exports.escapeXML = utils.escapeXML;
        exports.__express = exports.renderFile;
        exports.VERSION = _VERSION_STRING;
        exports.name = _NAME;
        if (typeof window != "undefined") {
          window.ejs = exports;
        }
      }, {
        "../package.json": 6,
        "./utils": 2,
        fs: 3,
        path: 4
      }],
      2: [function (require, module, exports) {

        var regExpChars = /[|\\{}()[\]^$+*?.]/g;
        var hasOwnProperty = Object.prototype.hasOwnProperty;
        var hasOwn = function (obj, key) {
          return hasOwnProperty.apply(obj, [key]);
        };
        exports.escapeRegExpChars = function (string) {
          if (!string) {
            return "";
          }
          return String(string).replace(regExpChars, "\\$&");
        };
        var _ENCODE_HTML_RULES = {
          "&": "&amp;",
          "<": "&lt;",
          ">": "&gt;",
          '"': "&#34;",
          "'": "&#39;"
        };
        var _MATCH_HTML = /[&<>'"]/g;
        function encode_char(c) {
          return _ENCODE_HTML_RULES[c] || c;
        }
        var escapeFuncStr = "var _ENCODE_HTML_RULES = {\n" + '      "&": "&amp;"\n' + '    , "<": "&lt;"\n' + '    , ">": "&gt;"\n' + '    , \'"\': "&#34;"\n' + '    , "\'": "&#39;"\n' + "    }\n" + "  , _MATCH_HTML = /[&<>'\"]/g;\n" + "function encode_char(c) {\n" + "  return _ENCODE_HTML_RULES[c] || c;\n" + "};\n";
        exports.escapeXML = function (markup) {
          return markup == undefined ? "" : String(markup).replace(_MATCH_HTML, encode_char);
        };
        function escapeXMLToString() {
          return Function.prototype.toString.call(this) + ";\n" + escapeFuncStr;
        }
        try {
          if (typeof Object.defineProperty === "function") {
            Object.defineProperty(exports.escapeXML, "toString", {
              value: escapeXMLToString
            });
          } else {
            exports.escapeXML.toString = escapeXMLToString;
          }
        } catch (err) {
          console.warn("Unable to set escapeXML.toString (is the Function prototype frozen?)");
        }
        exports.shallowCopy = function (to, from) {
          from = from || {};
          if (to !== null && to !== undefined) {
            for (var p in from) {
              if (!hasOwn(from, p)) {
                continue;
              }
              if (p === "__proto__" || p === "constructor") {
                continue;
              }
              to[p] = from[p];
            }
          }
          return to;
        };
        exports.shallowCopyFromList = function (to, from, list) {
          list = list || [];
          from = from || {};
          if (to !== null && to !== undefined) {
            for (var i = 0; i < list.length; i++) {
              var p = list[i];
              if (typeof from[p] != "undefined") {
                if (!hasOwn(from, p)) {
                  continue;
                }
                if (p === "__proto__" || p === "constructor") {
                  continue;
                }
                to[p] = from[p];
              }
            }
          }
          return to;
        };
        exports.cache = {
          _data: {},
          set: function (key, val) {
            this._data[key] = val;
          },
          get: function (key) {
            return this._data[key];
          },
          remove: function (key) {
            delete this._data[key];
          },
          reset: function () {
            this._data = {};
          }
        };
        exports.hyphenToCamel = function (str) {
          return str.replace(/-[a-z]/g, function (match) {
            return match[1].toUpperCase();
          });
        };
        exports.createNullProtoObjWherePossible = function () {
          if (typeof Object.create == "function") {
            return function () {
              return Object.create(null);
            };
          }
          if (!({
            __proto__: null
          } instanceof Object)) {
            return function () {
              return {
                __proto__: null
              };
            };
          }
          return function () {
            return {};
          };
        }();
        exports.hasOwnOnlyObject = function (obj) {
          var o = exports.createNullProtoObjWherePossible();
          for (var p in obj) {
            if (hasOwn(obj, p)) {
              o[p] = obj[p];
            }
          }
          return o;
        };
      }, {}],
      3: [function (require, module, exports) {}, {}],
      4: [function (require, module, exports) {
        (function (process) {
          function normalizeArray(parts, allowAboveRoot) {
            var up = 0;
            for (var i = parts.length - 1; i >= 0; i--) {
              var last = parts[i];
              if (last === ".") {
                parts.splice(i, 1);
              } else if (last === "..") {
                parts.splice(i, 1);
                up++;
              } else if (up) {
                parts.splice(i, 1);
                up--;
              }
            }
            if (allowAboveRoot) {
              for (; up--; up) {
                parts.unshift("..");
              }
            }
            return parts;
          }
          exports.resolve = function () {
            var resolvedPath = "",
              resolvedAbsolute = false;
            for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
              var path = i >= 0 ? arguments[i] : process.cwd();
              if (typeof path !== "string") {
                throw new TypeError("Arguments to path.resolve must be strings");
              } else if (!path) {
                continue;
              }
              resolvedPath = path + "/" + resolvedPath;
              resolvedAbsolute = path.charAt(0) === "/";
            }
            resolvedPath = normalizeArray(filter(resolvedPath.split("/"), function (p) {
              return !!p;
            }), !resolvedAbsolute).join("/");
            return (resolvedAbsolute ? "/" : "") + resolvedPath || ".";
          };
          exports.normalize = function (path) {
            var isAbsolute = exports.isAbsolute(path),
              trailingSlash = substr(path, -1) === "/";
            path = normalizeArray(filter(path.split("/"), function (p) {
              return !!p;
            }), !isAbsolute).join("/");
            if (!path && !isAbsolute) {
              path = ".";
            }
            if (path && trailingSlash) {
              path += "/";
            }
            return (isAbsolute ? "/" : "") + path;
          };
          exports.isAbsolute = function (path) {
            return path.charAt(0) === "/";
          };
          exports.join = function () {
            var paths = Array.prototype.slice.call(arguments, 0);
            return exports.normalize(filter(paths, function (p, index) {
              if (typeof p !== "string") {
                throw new TypeError("Arguments to path.join must be strings");
              }
              return p;
            }).join("/"));
          };
          exports.relative = function (from, to) {
            from = exports.resolve(from).substr(1);
            to = exports.resolve(to).substr(1);
            function trim(arr) {
              var start = 0;
              for (; start < arr.length; start++) {
                if (arr[start] !== "") break;
              }
              var end = arr.length - 1;
              for (; end >= 0; end--) {
                if (arr[end] !== "") break;
              }
              if (start > end) return [];
              return arr.slice(start, end - start + 1);
            }
            var fromParts = trim(from.split("/"));
            var toParts = trim(to.split("/"));
            var length = Math.min(fromParts.length, toParts.length);
            var samePartsLength = length;
            for (var i = 0; i < length; i++) {
              if (fromParts[i] !== toParts[i]) {
                samePartsLength = i;
                break;
              }
            }
            var outputParts = [];
            for (var i = samePartsLength; i < fromParts.length; i++) {
              outputParts.push("..");
            }
            outputParts = outputParts.concat(toParts.slice(samePartsLength));
            return outputParts.join("/");
          };
          exports.sep = "/";
          exports.delimiter = ":";
          exports.dirname = function (path) {
            if (typeof path !== "string") path = path + "";
            if (path.length === 0) return ".";
            var code = path.charCodeAt(0);
            var hasRoot = code === 47;
            var end = -1;
            var matchedSlash = true;
            for (var i = path.length - 1; i >= 1; --i) {
              code = path.charCodeAt(i);
              if (code === 47) {
                if (!matchedSlash) {
                  end = i;
                  break;
                }
              } else {
                matchedSlash = false;
              }
            }
            if (end === -1) return hasRoot ? "/" : ".";
            if (hasRoot && end === 1) {
              return "/";
            }
            return path.slice(0, end);
          };
          function basename(path) {
            if (typeof path !== "string") path = path + "";
            var start = 0;
            var end = -1;
            var matchedSlash = true;
            var i;
            for (i = path.length - 1; i >= 0; --i) {
              if (path.charCodeAt(i) === 47) {
                if (!matchedSlash) {
                  start = i + 1;
                  break;
                }
              } else if (end === -1) {
                matchedSlash = false;
                end = i + 1;
              }
            }
            if (end === -1) return "";
            return path.slice(start, end);
          }
          exports.basename = function (path, ext) {
            var f = basename(path);
            if (ext && f.substr(-1 * ext.length) === ext) {
              f = f.substr(0, f.length - ext.length);
            }
            return f;
          };
          exports.extname = function (path) {
            if (typeof path !== "string") path = path + "";
            var startDot = -1;
            var startPart = 0;
            var end = -1;
            var matchedSlash = true;
            var preDotState = 0;
            for (var i = path.length - 1; i >= 0; --i) {
              var code = path.charCodeAt(i);
              if (code === 47) {
                if (!matchedSlash) {
                  startPart = i + 1;
                  break;
                }
                continue;
              }
              if (end === -1) {
                matchedSlash = false;
                end = i + 1;
              }
              if (code === 46) {
                if (startDot === -1) startDot = i;else if (preDotState !== 1) preDotState = 1;
              } else if (startDot !== -1) {
                preDotState = -1;
              }
            }
            if (startDot === -1 || end === -1 || preDotState === 0 || preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
              return "";
            }
            return path.slice(startDot, end);
          };
          function filter(xs, f) {
            if (xs.filter) return xs.filter(f);
            var res = [];
            for (var i = 0; i < xs.length; i++) {
              if (f(xs[i], i, xs)) res.push(xs[i]);
            }
            return res;
          }
          var substr = "ab".substr(-1) === "b" ? function (str, start, len) {
            return str.substr(start, len);
          } : function (str, start, len) {
            if (start < 0) start = str.length + start;
            return str.substr(start, len);
          };
        }).call(this, require("_process"));
      }, {
        _process: 5
      }],
      5: [function (require, module, exports) {
        var process = module.exports = {};
        var cachedSetTimeout;
        var cachedClearTimeout;
        function defaultSetTimout() {
          throw new Error("setTimeout has not been defined");
        }
        function defaultClearTimeout() {
          throw new Error("clearTimeout has not been defined");
        }
        (function () {
          try {
            if (typeof setTimeout === "function") {
              cachedSetTimeout = setTimeout;
            } else {
              cachedSetTimeout = defaultSetTimout;
            }
          } catch (e) {
            cachedSetTimeout = defaultSetTimout;
          }
          try {
            if (typeof clearTimeout === "function") {
              cachedClearTimeout = clearTimeout;
            } else {
              cachedClearTimeout = defaultClearTimeout;
            }
          } catch (e) {
            cachedClearTimeout = defaultClearTimeout;
          }
        })();
        function runTimeout(fun) {
          if (cachedSetTimeout === setTimeout) {
            return setTimeout(fun, 0);
          }
          if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
            cachedSetTimeout = setTimeout;
            return setTimeout(fun, 0);
          }
          try {
            return cachedSetTimeout(fun, 0);
          } catch (e) {
            try {
              return cachedSetTimeout.call(null, fun, 0);
            } catch (e) {
              return cachedSetTimeout.call(this, fun, 0);
            }
          }
        }
        function runClearTimeout(marker) {
          if (cachedClearTimeout === clearTimeout) {
            return clearTimeout(marker);
          }
          if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
            cachedClearTimeout = clearTimeout;
            return clearTimeout(marker);
          }
          try {
            return cachedClearTimeout(marker);
          } catch (e) {
            try {
              return cachedClearTimeout.call(null, marker);
            } catch (e) {
              return cachedClearTimeout.call(this, marker);
            }
          }
        }
        var queue = [];
        var draining = false;
        var currentQueue;
        var queueIndex = -1;
        function cleanUpNextTick() {
          if (!draining || !currentQueue) {
            return;
          }
          draining = false;
          if (currentQueue.length) {
            queue = currentQueue.concat(queue);
          } else {
            queueIndex = -1;
          }
          if (queue.length) {
            drainQueue();
          }
        }
        function drainQueue() {
          if (draining) {
            return;
          }
          var timeout = runTimeout(cleanUpNextTick);
          draining = true;
          var len = queue.length;
          while (len) {
            currentQueue = queue;
            queue = [];
            while (++queueIndex < len) {
              if (currentQueue) {
                currentQueue[queueIndex].run();
              }
            }
            queueIndex = -1;
            len = queue.length;
          }
          currentQueue = null;
          draining = false;
          runClearTimeout(timeout);
        }
        process.nextTick = function (fun) {
          var args = new Array(arguments.length - 1);
          if (arguments.length > 1) {
            for (var i = 1; i < arguments.length; i++) {
              args[i - 1] = arguments[i];
            }
          }
          queue.push(new Item(fun, args));
          if (queue.length === 1 && !draining) {
            runTimeout(drainQueue);
          }
        };
        function Item(fun, array) {
          this.fun = fun;
          this.array = array;
        }
        Item.prototype.run = function () {
          this.fun.apply(null, this.array);
        };
        process.title = "browser";
        process.browser = true;
        process.env = {};
        process.argv = [];
        process.version = "";
        process.versions = {};
        function noop() {}
        process.on = noop;
        process.addListener = noop;
        process.once = noop;
        process.off = noop;
        process.removeListener = noop;
        process.removeAllListeners = noop;
        process.emit = noop;
        process.prependListener = noop;
        process.prependOnceListener = noop;
        process.listeners = function (name) {
          return [];
        };
        process.binding = function (name) {
          throw new Error("process.binding is not supported");
        };
        process.cwd = function () {
          return "/";
        };
        process.chdir = function (dir) {
          throw new Error("process.chdir is not supported");
        };
        process.umask = function () {
          return 0;
        };
      }, {}],
      6: [function (require, module, exports) {
        module.exports = {
          name: "ejs",
          description: "Embedded JavaScript templates",
          keywords: ["template", "engine", "ejs"],
          version: "3.1.9",
          author: "Matthew Eernisse <mde@fleegix.org> (http://fleegix.org)",
          license: "Apache-2.0",
          bin: {
            ejs: "./bin/cli.js"
          },
          main: "./lib/ejs.js",
          jsdelivr: "ejs.min.js",
          unpkg: "ejs.min.js",
          repository: {
            type: "git",
            url: "git://github.com/mde/ejs.git"
          },
          bugs: "https://github.com/mde/ejs/issues",
          homepage: "https://github.com/mde/ejs",
          dependencies: {
            jake: "^10.8.5"
          },
          devDependencies: {
            browserify: "^16.5.1",
            eslint: "^6.8.0",
            "git-directory-deploy": "^1.5.1",
            jsdoc: "^4.0.2",
            "lru-cache": "^4.0.1",
            mocha: "^10.2.0",
            "uglify-js": "^3.3.16"
          },
          engines: {
            node: ">=0.10.0"
          },
          scripts: {
            test: "npx jake test"
          }
        };
      }, {}]
    }, {}, [1])(1);
  });

  var coreuiTableUtils = {
    _templates: {},
    /**
     * Объединение атрибутов
     * @param attr1
     * @param attr2
     * @returns {object}
     */
    mergeAttr: function mergeAttr(attr1, attr2) {
      var mergeAttr = Object.assign({}, attr1);
      if (_typeof(attr2) === 'object') {
        $.each(attr2, function (name, value) {
          if (mergeAttr.hasOwnProperty(name)) {
            if (name === 'class') {
              mergeAttr[name] += ' ' + value;
            } else if (name === 'style') {
              mergeAttr[name] += ';' + value;
            } else {
              mergeAttr[name] = value;
            }
          } else {
            mergeAttr[name] = value;
          }
        });
      }
      return mergeAttr;
    },
    /**
     * Проверка на число
     * @param num
     * @returns {boolean}
     * @private
     */
    isNumeric: function isNumeric(num) {
      return (typeof num === 'number' || typeof num === "string" && num.trim() !== '') && !isNaN(num);
    },
    /**
     * @returns {string}
     * @private
     */
    hashCode: function hashCode() {
      return this.crc32((new Date().getTime() + Math.random()).toString()).toString(16);
    },
    /**
     * Проверка на объект
     * @param value
     */
    isObject: function isObject(value) {
      return _typeof(value) === 'object' && !Array.isArray(value) && value !== null;
    },
    /**
     * @param str
     * @returns {number}
     */
    crc32: function crc32(str) {
      for (var a, o = [], c = 0; c < 256; c++) {
        a = c;
        for (var f = 0; f < 8; f++) {
          a = 1 & a ? 3988292384 ^ a >>> 1 : a >>> 1;
        }
        o[c] = a;
      }
      for (var n = -1, t = 0; t < str.length; t++) {
        n = n >>> 8 ^ o[255 & (n ^ str.charCodeAt(t))];
      }
      return (-1 ^ n) >>> 0;
    },
    /**
     * Рендер шаблона
     * @param {string} template
     * @param {object} options
     * @returns {string}
     */
    render: function render(template, options) {
      var tplName = this.crc32(template);
      if (!this._templates.hasOwnProperty(tplName)) {
        this._templates[tplName] = ejs.compile(template);
      }
      return this._templates[tplName](options);
    },
    /**
     * Размерность строки
     * @param {string} str
     * @param {int}    count
     * @param {string} repeat
     * @returns {string}
     */
    strPadLeft: function strPadLeft(str, count, repeat) {
      str = String(str);
      if (str.length >= count) {
        return str;
      }
      repeat = repeat ? repeat : '0';
      return (repeat.repeat(count) + str).slice(-count);
    }
  };

  var coreuiTableRender = {
    /**
     * Сборка таблицы
     * @param {object} table
     * @private
     */
    renderTable: function renderTable(table) {
      var options = table.getOptions();
      var recordsElements = [];
      var columnsHeader = '';
      var columnsFooter = '';
      var colGroups = [];
      var columnElements = $(tpl['table/columns/tr.html']);

      // Колонки
      if (table._columns.length > 0) {
        $.each(table._columns, function (key, column) {
          if (!column.isShow()) {
            return;
          }
          var columnOptions = column.getOptions();
          var attributes = [];
          var sortable = null;
          var menuElements = [];
          var menuShowAlways = '';
          var menuPosition = 'end';
          if (columnOptions.hasOwnProperty('field') && typeof columnOptions.field === 'string') {
            columnOptions.attrHeader = coreuiTableUtils.mergeAttr(columnOptions.attrHeader, {
              "data-field": columnOptions.field
            });
          }
          if (columnOptions.hasOwnProperty('fixed') && typeof columnOptions.fixed === 'string') {
            columnOptions.attrHeader = coreuiTableUtils.mergeAttr(columnOptions.attrHeader, {
              "class": 'coreui-table__fixed_' + columnOptions.fixed
            });
            columnOptions.attr = coreuiTableUtils.mergeAttr(columnOptions.attr, {
              "class": 'coreui-table__fixed_' + columnOptions.fixed
            });
          }
          if (columnOptions.type !== 'numbers') {
            if (columnOptions.hasOwnProperty('sortable') && columnOptions.sortable) {
              columnOptions.attrHeader = coreuiTableUtils.mergeAttr(columnOptions.attrHeader, {
                "class": 'coreui-table__sortable'
              });
            }
            if (table._sort.length > 0 && columnOptions.hasOwnProperty('field') && typeof columnOptions.field === 'string' && columnOptions.field) {
              $.each(table._sort, function (key, sortField) {
                if (columnOptions.field === sortField.field) {
                  if (sortField.order === 'asc') {
                    sortable = 'asc';
                  } else if (sortField.order === 'desc') {
                    sortable = 'desc';
                  }
                  return false;
                }
              });
            }
          }
          if (options.showHeaders && columnOptions.hasOwnProperty('menu') && coreuiTableUtils.isObject(columnOptions.menu) && columnOptions.menu.hasOwnProperty('items') && Array.isArray(columnOptions.menu.items)) {
            if (columnOptions.menu.hasOwnProperty('showAlways') && columnOptions.menu.showAlways) {
              menuShowAlways = 'coreui-table__column-menu-always';
            }
            if (columnOptions.menu.hasOwnProperty('position') && typeof columnOptions.menu.position === 'string') {
              menuPosition = columnOptions.menu.position;
            }
            columnOptions.menu.items.map(function (item) {
              if (coreuiTableUtils.isObject(item) && item.hasOwnProperty('type') && typeof item.type === 'string' && item.type) {
                switch (item.type.toLowerCase()) {
                  case 'button':
                    if (item.hasOwnProperty('text') && typeof item.text === 'string' && item.hasOwnProperty('onClick') && ['string', 'function'].indexOf(_typeof(item.onClick)) >= 0 && item.text.length > 0) {
                      var attrItem = [];
                      var attr = {
                        type: 'button',
                        "class": 'dropdown-item'
                      };
                      if (item.hasOwnProperty('attr') && coreuiTableUtils.isObject(item.attr)) {
                        attr = coreuiTableUtils.mergeAttr(attr, item.attr);
                      }
                      $.each(attr, function (name, value) {
                        attrItem.push(name + '="' + value + '"');
                      });
                      var menuElement = $(coreuiTableUtils.render(tpl['table/columns/menu/button.html'], {
                        text: item.text,
                        attr: attrItem.join(' ')
                      }));
                      menuElement.find('button').click(function () {
                        if (typeof item.onClick === 'function') {
                          item.onClick(table);
                        } else if (typeof item.onClick === 'string') {
                          new Function('table', item.onClick)(table);
                        }
                      });
                      menuElements.push(menuElement);
                    }
                    break;
                  case 'link':
                    if (item.hasOwnProperty('text') && item.hasOwnProperty('url') && typeof item.text === 'string' && typeof item.url === 'string' && item.text.length > 0 && item.url.length > 0) {
                      var _attrItem = [];
                      var _attr = {
                        href: item.url,
                        "class": 'dropdown-item'
                      };
                      if (item.hasOwnProperty('attr') && coreuiTableUtils.isObject(item.attr)) {
                        _attr = coreuiTableUtils.mergeAttr(_attr, item.attr);
                      }
                      $.each(_attr, function (name, value) {
                        _attrItem.push(name + '="' + value + '"');
                      });
                      menuElements.push($(coreuiTableUtils.render(tpl['table/columns/menu/link.html'], {
                        text: item.text,
                        attr: _attrItem.join(' ')
                      })));
                    }
                    break;
                  case 'divider':
                    menuElements.push($(tpl['table/columns/menu/divider.html']));
                    break;
                  case 'header':
                    menuElements.push($(coreuiTableUtils.render(tpl['table/columns/menu/header.html'], {
                      text: item.text
                    })));
                    break;
                }
              }
            });
          }
          if (columnOptions.attrHeader && coreuiTableUtils.isObject(columnOptions.attrHeader)) {
            $.each(columnOptions.attrHeader, function (name, value) {
              attributes.push(name + '="' + value + '"');
            });
          }
          var style = [];
          if (columnOptions.hasOwnProperty('width') && ['string', 'number'].indexOf(_typeof(columnOptions.width)) >= 0) {
            var unit = typeof columnOptions.width === 'number' ? 'px' : '';
            style.push('width:' + columnOptions.width + unit);
          }
          if (columnOptions.hasOwnProperty('minWidth') && ['string', 'number'].indexOf(_typeof(columnOptions.minWidth)) >= 0) {
            var _unit = typeof columnOptions.minWidth === 'number' ? 'px' : '';
            style.push('min-width:' + columnOptions.minWidth + _unit);
          }
          if (columnOptions.hasOwnProperty('maxWidth') && ['string', 'number'].indexOf(_typeof(columnOptions.maxWidth)) >= 0) {
            var _unit2 = typeof columnOptions.maxWidth === 'number' ? 'px' : '';
            style.push('max-width:' + columnOptions.maxWidth + _unit2);
          }
          colGroups.push({
            style: style.length > 0 ? style.join(';') : ''
          });
          if (options.showHeaders) {
            var label = '';
            var description = '';
            if (columnOptions.hasOwnProperty('label') && typeof columnOptions.label === 'string' && (!columnOptions.hasOwnProperty('showLabel') || columnOptions.showLabel)) {
              label = columnOptions.label;
            }
            if (columnOptions.hasOwnProperty('description') && typeof columnOptions.label === 'string') {
              description = columnOptions.description;
            }
            var columnElement = $(coreuiTableUtils.render(tpl['table/columns/td.html'], {
              attr: attributes.length > 0 ? ' ' + attributes.join(' ') : '',
              label: label,
              description: description,
              sortable: sortable,
              issetMenu: menuElements.length > 0,
              menuPosition: menuPosition,
              menuShowAlways: menuShowAlways ? ' ' + menuShowAlways : ''
            }));
            if (menuElements.length) {
              var menuContainer = columnElement.find('.coreui-table__column-menu ul');
              var menuButton = columnElement.find('.coreui-table__column-menu .dropdown-toggle');
              menuButton.click(function (event) {
                event.originalEvent.cancelBubble = true;
              });
              menuElements.map(function (element) {
                menuContainer.append(element);
              });
            }
            columnElements.append(columnElement);
          }
        });
      }

      // Строки
      if (table._records.length > 0) {
        table._recordsTotal = table.getRecordsCount();
        table._recordsNumber = table._page === 1 ? 1 : (table._page - 1) * table._recordsPerPage + 1;
        recordsElements = coreuiTableRender.renderRecords(table, table._records);
      } else {
        recordsElements = coreuiTableRender.renderRecords(table, []);
      }
      if (options.showHeaders && options.hasOwnProperty('columnsHeader') && Array.isArray(options.columnsHeader) && options.columnsHeader.length > 0) {
        var rows = [];
        $.each(options.columnsHeader, function (key, headerRow) {
          if (Array.isArray(headerRow)) {
            var cells = [];
            $.each(headerRow, function (key, headerColumn) {
              if (coreuiTableUtils.isObject(headerColumn)) {
                var attributes = [];
                if (headerColumn.hasOwnProperty('attr') && coreuiTableUtils.isObject(headerColumn.attr)) {
                  $.each(headerColumn.attr, function (name, value) {
                    attributes.push(name + '="' + value + '"');
                  });
                }
                cells.push({
                  content: headerColumn.hasOwnProperty('content') ? headerColumn.content : '',
                  description: headerColumn.hasOwnProperty('description') ? headerColumn.description : '',
                  attr: attributes.length > 0 ? ' ' + attributes.join(' ') : ''
                });
              }
            });
            rows.push(coreuiTableUtils.render(tpl['table/columns/header.html'], {
              columns: cells
            }));
          }
        });
        columnsHeader = rows.join('');
      }
      if (options.hasOwnProperty('columnsFooter') && Array.isArray(options.columnsFooter) && options.columnsFooter.length > 0) {
        var _rows = [];
        $.each(options.columnsFooter, function (key, footerRow) {
          if (Array.isArray(footerRow)) {
            var cells = [];
            $.each(footerRow, function (key, footerColumn) {
              if (coreuiTableUtils.isObject(footerColumn)) {
                var attributes = [];
                if (footerColumn.hasOwnProperty('attr') && coreuiTableUtils.isObject(footerColumn.attr)) {
                  $.each(footerColumn.attr, function (name, value) {
                    attributes.push(name + '="' + value + '"');
                  });
                }
                cells.push({
                  content: footerColumn.hasOwnProperty('content') ? footerColumn.content : '',
                  description: footerColumn.hasOwnProperty('description') ? footerColumn.description : '',
                  attr: attributes.length > 0 ? ' ' + attributes.join(' ') : ''
                });
              }
            });
            _rows.push(coreuiTableUtils.render(tpl['table/columns/footer.html'], {
              columns: cells
            }));
          }
        });
        columnsFooter = _rows.join('');
      }
      var classes = [];
      if (typeof options["class"] === 'string' && options["class"]) {
        classes.push(options["class"]);
      }
      if (!columnsFooter) {
        classes.push('empty-tfoot');
      }
      var theadAttr = [];
      if (options.hasOwnProperty('theadTop') && ['string', 'number'].indexOf(_typeof(options.theadTop)) >= 0) {
        var unit = coreuiTableUtils.isNumeric(options.theadTop) ? 'px' : '';
        theadAttr.push('style="top:' + options.theadTop + unit + '"');
      }
      var tableElement = $(coreuiTableUtils.render(tpl['table.html'], {
        classes: classes.join(' '),
        theadAttr: theadAttr.length > 0 ? theadAttr.join(' ') : '',
        showHeaders: options.showHeaders,
        columnsHeader: columnsHeader,
        colGroups: colGroups,
        columnsFooter: columnsFooter
      }));
      if (options.showHeaders) {
        tableElement.find('thead').append(columnElements);
      }
      var tbody = tableElement.find('tbody');
      recordsElements.map(function (recordElement) {
        tbody.append(recordElement);
      });
      return tableElement;
    },
    /**
     * Сборка записей таблицы
     * @param {object} table
     * @param {Array}  records
     * @return {Array}
     */
    renderRecords: function renderRecords(table, records) {
      var renderRecords = [];
      if (records.length > 0) {
        var that = this;
        var options = table.getOptions();
        var group = options.hasOwnProperty('group') && coreuiTableUtils.isObject(options.group) && options.group.hasOwnProperty('field') && typeof options.group.field === 'string' && options.group.field ? options.group : null;
        if (group) {
          var groupValue = null;
          var groupIndex = 0;
          var recordsGroups = {};
          records.map(function (record) {
            if (record.show) {
              if (record.data.hasOwnProperty(group.field) && ['string', 'number'].indexOf(_typeof(record.data[group.field])) >= 0 && groupValue != record.data[group.field]) {
                groupValue = record.data[group.field];
                groupIndex++;
              }
              if (!recordsGroups.hasOwnProperty(groupIndex)) {
                recordsGroups[groupIndex] = {
                  isGroup: groupIndex > 0,
                  records: []
                };
              }
              recordsGroups[groupIndex].records.push(record);
            }
          });
          $.each(recordsGroups, function (key, recordsGroup) {
            var renderRecordsGroup = [];
            recordsGroup.records.map(function (record) {
              renderRecordsGroup.push(that.renderRecord(table, record));
              table._recordsNumber++;
            });
            if (recordsGroup.isGroup) {
              renderRecords.push(that.renderGroup(table, group, recordsGroup.records[0], renderRecordsGroup));
            }
            renderRecordsGroup.map(function (record) {
              renderRecords.push(record);
            });
          });
        } else {
          records.map(function (record) {
            if (record.show) {
              renderRecords.push(that.renderRecord(table, record));
              table._recordsNumber++;
            }
          });
        }
      }
      if (renderRecords.length === 0) {
        renderRecords = [$(coreuiTableUtils.render(tpl['table/record/empty.html'], {
          columnsCount: table._countColumnsShow,
          lang: table.getLang()
        }))];
      }
      return renderRecords;
    },
    /**
     * Сборка записи таблицы
     * @param {object} table
     * @param {object} record
     * @returns {{ attr: (string), fields: (object) }}}
     * @private
     */
    renderRecord: function renderRecord(table, record) {
      var that = this;
      var options = table.getOptions();
      var fields = [];
      var recordAttr = {
        "class": 'coreui-table__record'
      };
      table._columns.map(function (column) {
        if (!column.isShow()) {
          return;
        }
        var fieldContent = that.renderField(table, column, record);
        if (fieldContent) {
          fields.push(fieldContent);
        }
      });
      if (typeof options.onClickUrl === 'string' && options.onClickUrl) {
        recordAttr["class"] += ' coreui-table_pointer';
      }
      if (record.meta) {
        recordAttr = coreuiTableUtils.mergeAttr(recordAttr, record.meta.attr);
      }
      var attributes = [];
      $.each(recordAttr, function (name, value) {
        attributes.push(name + '="' + value + '"');
      });
      var recordElement = $(coreuiTableUtils.render(tpl['table/record.html'], {
        attr: attributes.length > 0 ? ' ' + attributes.join(' ') : '',
        index: record.index,
        fields: fields
      }));
      fields.map(function (field, key) {
        $(recordElement[0].querySelector(':scope > td:nth-child(' + (key + 1) + ')')).append(field.content);
      });
      return recordElement;
    },
    /**
     * Сборка ячейки таблицы
     * @param {object} table
     * @param {object} column
     * @param {object} record
     * @returns {{ attr: (string), content: (string) }}
     * @private
     */
    renderField: function renderField(table, column, record) {
      var columnOptions = column.getOptions();
      var columnField = column.getField();
      var content = null;
      var fieldProps = record.meta && record.meta.hasOwnProperty('fields') && record.meta.fields.hasOwnProperty(columnField) ? record.meta.fields[columnField] : null;
      var fieldAttr = columnOptions.hasOwnProperty('attr') && coreuiTableUtils.isObject(columnOptions.attr) ? columnOptions.attr : {};
      if (fieldProps && coreuiTableUtils.isObject(fieldProps)) {
        if (fieldProps && fieldProps.hasOwnProperty('show') && !fieldProps.show) {
          return null;
        }
        if (coreuiTableUtils.isObject(fieldProps.attr)) {
          fieldAttr = coreuiTableUtils.mergeAttr(fieldAttr, fieldProps.attr);
        }
      }
      if (columnOptions.hasOwnProperty('fixed') && typeof columnOptions.fixed === 'string') {
        fieldAttr = coreuiTableUtils.mergeAttr(fieldAttr, {
          "class": 'coreui-table__fixed_' + columnOptions.fixed
        });
      }
      if (typeof columnOptions.render === 'function') {
        content = columnOptions.render({
          data: record.data,
          meta: record.meta,
          index: record.index
        }, table);
      } else {
        content = columnField && record.data.hasOwnProperty(columnField) ? record.data[columnField] : null;
      }
      content = column.render(content, record);
      var fieldAttrResult = [];
      $.each(fieldAttr, function (name, value) {
        fieldAttrResult.push(name + '="' + value + '"');
      });
      return {
        attr: fieldAttrResult.length > 0 ? ' ' + fieldAttrResult.join(' ') : '',
        content: content
      };
    },
    /**
     * Сборка записи-группы
     * @param {object} table
     * @param {object} group
     * @param {object} record
     * @param {Array}  renderRecords
     * @returns {{ attr: (string), fields: (object) }}}
     * @private
     */
    renderGroup: function renderGroup(table, group, record, renderRecords) {
      var attr = group.hasOwnProperty('attr') && coreuiTableUtils.isObject(group.attr) ? group.attr : {};
      if (attr.hasOwnProperty('class') && typeof attr["class"] === 'string') {
        attr["class"] += ' coreui-table__record-group';
      } else {
        attr["class"] = 'coreui-table__record-group';
      }
      var attributes = [];
      $.each(attr, function (name, value) {
        if (['string', 'number'].indexOf(_typeof(value)) >= 0) {
          attributes.push(name + '="' + value + '"');
        }
      });
      var isCollapsing = group.hasOwnProperty('isCollapsing') ? !!group.isCollapsing : false;
      var groupElement = $(coreuiTableUtils.render(tpl['table/record/group.html'], {
        attr: attributes.length > 0 ? ' ' + attributes.join(' ') : '',
        colspan: table._countColumnsShow,
        isCollapsing: isCollapsing
      }));
      var td = groupElement.find(' > td');
      var content = record.data[group.field];
      if (group.hasOwnProperty('render')) {
        var renderContent = null;
        if (typeof group.render === 'function') {
          renderContent = group.render(record);
        } else if (typeof group.render === 'string') {
          renderContent = new Function('record', group.render)(record);
        }
        if (renderContent) {
          content = renderContent;
        }
      }
      if (isCollapsing) {
        var collapsed = $('<i class="bi bi-chevron-down coreui-table_pointer me-1"></i>');
        collapsed.click(function () {
          if ($(this).hasClass('bi-chevron-down')) {
            $(this).removeClass('bi-chevron-down').addClass('bi-chevron-right');
            renderRecords.map(function (renderRecord) {
              $(renderRecord).fadeOut(100);
            });
          } else {
            $(this).removeClass('bi-chevron-right').addClass('bi-chevron-down');
            renderRecords.map(function (renderRecord) {
              $(renderRecord).fadeIn(100);
            });
          }
        });
        td.append(collapsed);
      }
      td.append(content);
      return groupElement;
    },
    /**
     * Сборка раскрывающейся строки
     * @param {object}       table
     * @param {Array|string} content
     */
    renderExpand: function renderExpand(table, content) {
      if (_typeof(content) === 'object') {
        content = coreuiTableRender.renderComponents(table, content, 'record_expand_show');
      }
      var expandRecord = $(coreuiTableUtils.render(tpl['table/record/expand.html'], {
        colspan: table._countColumnsShow
      }));
      if (['string', 'number'].indexOf(_typeof(content)) >= 0) {
        expandRecord.find('td').html(content);
      } else if (Array.isArray(content)) {
        $.each(content, function (key, item) {
          if (['string', 'number'].indexOf(_typeof(item)) >= 0 || item instanceof HTMLElement || window.hasOwnProperty('jQuery') && item instanceof jQuery) {
            expandRecord.find('td').append(item);
          }
        });
      }
      return expandRecord;
    },
    /**
     * Сборка элемента управления
     * @param {object} table
     * @param {object} control
     * @private
     * @returns {HTMLElement|jQuery}
     */
    renderControl: function renderControl(table, control) {
      if (coreuiTableUtils.isObject(control)) {
        var controlElement = $(coreuiTableUtils.render(tpl['table/control.html'], {
          id: control.getId()
        }));
        controlElement.append(control.render());
        return controlElement;
      }
    },
    /**
     * Формирование контента компонента
     * @param {object} table
     * @param {object} components
     * @param {string} eventName
     * @return {Array}
     */
    renderComponents: function renderComponents(table, components, eventName) {
      var result = [];
      if (components instanceof Object) {
        if (!Array.isArray(components)) {
          components = [components];
        }
        for (var i = 0; i < components.length; i++) {
          if (typeof components[i] === 'string') {
            result.push(components[i]);
          } else if (!Array.isArray(components[i]) && components[i].hasOwnProperty('component') && components[i].component.substring(0, 6) === 'coreui') {
            var name = components[i].component.split('.')[1];
            if (CoreUI.hasOwnProperty(name) && coreuiTableUtils.isObject(CoreUI[name])) {
              var instance = CoreUI[name].create(components[i]);
              result.push(instance.render());
              if (eventName) {
                table.on(eventName, instance.initEvents, instance, true);
              }
            }
          }
        }
      }
      return result;
    }
  };

  var coreuiTableElements = {
    /**
     * Получение контейнера таблицы
     * @param {string} tableId
     * @return {jQuery}
     */
    getContainer: function getContainer(tableId) {
      return $('#coreui-table-' + tableId + ' > .coreui-table__container');
    },
    /**
     * Получение обертки таблицы
     * @param {string} tableId
     * @return {jQuery}
     */
    getLock: function getLock(tableId) {
      return $('#coreui-table-' + tableId + ' > .coreui-table__container > .coreui-table-lock');
    },
    /**
     * Получение обертки таблицы
     * @param {string} tableId
     * @return {jQuery}
     */
    getWrapper: function getWrapper(tableId) {
      return $('#coreui-table-' + tableId + ' > .coreui-table__container > .coreui-table__wrapper');
    },
    /**
     * Получение поискового контейнера
     * @param {string} tableId
     * @return {jQuery}
     */
    getSearchContainer: function getSearchContainer(tableId) {
      return $('#coreui-table-' + tableId + ' > .coreui-table__container > .coreui-table__search');
    },
    /**
     * Получение поискового контейнера
     * @param {string} tableId
     * @return {jQuery}
     */
    getColumnsContainer: function getColumnsContainer(tableId) {
      return $('#coreui-table-' + tableId + ' > .coreui-table__container > .coreui-table__columns');
    },
    /**
     * Получение контейнера поискового контрола
     * @param {string} tableId
     * @param {string} controlId
     * @return {jQuery}
     */
    getSearchControl: function getSearchControl(tableId, controlId) {
      return $('#coreui-table-' + tableId + ' > .coreui-table__container > .coreui-table__search .search-control-' + controlId);
    },
    /**
     * Получение контейнера контрола
     * @param {string} tableId
     * @param {string} controlId
     * @return {jQuery}
     */
    getControl: function getControl(tableId, controlId) {
      return $('#coreui-table-' + tableId + '  #coreui-table-control-' + controlId);
    },
    /**
     * Получение таблицы
     * @param {string} tableId
     * @return {jQuery}
     */
    getTable: function getTable(tableId) {
      return $('#coreui-table-' + tableId + ' > .coreui-table__container > .coreui-table__wrapper > table');
    },
    /**
     * Получение тела таблицы
     * @param {string} tableId
     * @return {jQuery}
     */
    getTableTbody: function getTableTbody(tableId) {
      return $('#coreui-table-' + tableId + ' > .coreui-table__container > .coreui-table__wrapper > table > tbody');
    },
    /**
     * Получение заголовков таблицы
     * @param {string} tableId
     * @return {jQuery}
     */
    getTableThead: function getTableThead(tableId) {
      return $('#coreui-table-' + tableId + ' > .coreui-table__container > .coreui-table__wrapper > table > thead');
    },
    /**
     * Получение ячеек с сортировкой по таблице
     * @param {string} tableId
     * @return {jQuery}
     */
    getTableSortable: function getTableSortable(tableId) {
      return $('#coreui-table-' + tableId + ' > .coreui-table__container > .coreui-table__wrapper > table > thead > tr > td.coreui-table__sortable');
    },
    /**
     * Получение строк записей
     * @param {string} tableId
     * @return {jQuery}
     */
    getTrRecords: function getTrRecords(tableId) {
      return $('#coreui-table-' + tableId + ' > .coreui-table__container > .coreui-table__wrapper > table > tbody > tr.coreui-table__record');
    },
    /**
     * Получение элемента строки по ключу
     * @param {string} tableId
     * @param {int}    index
     * @return {jQuery}
     */
    getTrByIndex: function getTrByIndex(tableId, index) {
      return $('#coreui-table-' + tableId + ' > .coreui-table__container > .coreui-table__wrapper > table > tbody > tr[data-record-index="' + index + '"]');
    },
    /**
     * Получение элемента строки по ключу
     * @param {string} tableId
     * @return {jQuery}
     */
    getTrEmpty: function getTrEmpty(tableId) {
      return $('#coreui-table-' + tableId + ' > .coreui-table__container > .coreui-table__wrapper > table > tbody > tr.coreui-table__record-empty');
    },
    /**
     * Получение контента под строкой
     * @param {jQuery} recordElement
     * @return {jQuery}
     */
    getExpandRow: function getExpandRow(recordElement) {
      return recordElement.next().hasClass('coreui-table__record-expanded') ? recordElement.next() : null;
    },
    /**
     * Добавление контента под строкой
     * @param {object}       table
     * @param {jQuery}       recordElement
     * @param {Array|string} content
     * @return {jQuery}
     */
    addExpandRow: function addExpandRow(table, recordElement, content) {
      var expandRecord = coreuiTableRender.renderExpand(table, content, 'record_expand_show');
      recordElement.after(expandRecord);
      recordElement.next().show('fast');
      recordElement.addClass('record-expanded');
    },
    /**
     * Скрытие контента под строкой
     * @param {jQuery} recordExpanded
     * @return {jQuery}
     */
    hideExpandRow: function hideExpandRow(recordExpanded) {
      recordExpanded.hide('fast');
    },
    /**
     * Показ контента под строкой
     * @param {jQuery} recordExpanded
     * @return {jQuery}
     */
    showExpandRow: function showExpandRow(recordExpanded) {
      recordExpanded.show('fast');
    },
    /**
     * Удаление контента под строкой
     * @param {jQuery} recordExpanded
     * @return {jQuery}
     */
    removeExpandRow: function removeExpandRow(recordExpanded) {
      recordExpanded.hide('fast', function () {
        $(this).remove();
      });
    },
    /**
     * Получение выбранных на таблице элементов
     * @param {string} tableId
     * @return {Array}
     */
    getSelectedIndexes: function getSelectedIndexes(tableId) {
      var indexes = [];
      $('#coreui-table-' + tableId + ' > .coreui-table__container > .coreui-table__wrapper > table > tbody > tr.coreui-table__record > td.coreui-table__select_container > .coreui-table__select:checked').each(function (key, element) {
        indexes.push($(element).val());
      });
      return indexes;
    },
    /**
     * Получение выбранных на таблице элементов
     * @param {string} tableId
     * @return {Array}
     */
    getRowsSwitches: function getRowsSwitches(tableId) {
      return $('#coreui-table-' + tableId + ' > .coreui-table__container > .coreui-table__wrapper > table > tbody > tr.coreui-table__record > td.coreui-table__switch_container');
    },
    /**
     * Получение элементов выбора строк
     * @param {string} tableId
     * @return {Array}
     */
    getRowsSelects: function getRowsSelects(tableId) {
      return $('#coreui-table-' + tableId + ' > .coreui-table__container > .coreui-table__wrapper  > table > tbody > tr.coreui-table__record > td.coreui-table__select_container');
    },
    /**
     * Получение элемента для выбора всех строк
     * @param {string} tableId
     * @return {Array}
     */
    getRowsSelectAll: function getRowsSelectAll(tableId) {
      return $('#coreui-table-' + tableId + ' > .coreui-table__container > .coreui-table__wrapper  > table > thead > tr > td .coreui-table__select-all');
    },
    /**
     * Получение элементов для раскрытия ячеек
     * @param {string} tableId
     * @return {Array}
     */
    getNoWrapToggles: function getNoWrapToggles(tableId) {
      return $('#coreui-table-' + tableId + ' > .coreui-table__container > .coreui-table__wrapper  > table > tbody > tr > td.coreui_table__no-wrap > i.toggle');
    },
    /**
     * Выделение строки в таблице
     * @param {jQuery} tr
     */
    selectTr: function selectTr(tr) {
      tr.addClass('table-primary');
      $('.coreui-table__select', tr).prop('checked', true);
    },
    /**
     * Выделение всех строк в таблице
     * @param {string} tableId
     */
    selectTrAll: function selectTrAll(tableId) {
      var tableContainer = '#coreui-table-' + tableId + ' > .coreui-table__container > .coreui-table__wrapper > table';
      $(tableContainer + ' > thead > tr > td > .coreui-table__select-all').prop('checked', true);
      $(tableContainer + ' > tbody > tr.coreui-table__record').addClass('table-primary');
      $(tableContainer + ' > tbody > tr.coreui-table__record > td > .coreui-table__select').prop('checked', true);
    },
    /**
     * Снятие выделение строки в таблице
     * @param {jQuery} tr
     */
    unselectTr: function unselectTr(tr) {
      $(tr).removeClass('table-primary');
      $('.coreui-table__select', tr).prop('checked', false);
    },
    /**
     * Снятие выделение со всех строк в таблице
     * @param {string} tableId
     */
    unselectTrAll: function unselectTrAll(tableId) {
      var tableContainer = '#coreui-table-' + tableId + ' > .coreui-table__container > .coreui-table__wrapper > table';
      $(tableContainer + ' > thead > tr > td > .coreui-table__select-all').prop('checked', false);
      $(tableContainer + ' > tbody > tr.coreui-table__record').removeClass('table-primary');
      $(tableContainer + ' > tbody > tr.coreui-table__record > td.coreui-table__select_container > .coreui-table__select').prop('checked', false);
    },
    /**
     * Фиксация колонок слева
     * @param {string} tableId
     */
    fixedColsLeft: function fixedColsLeft(tableId) {
      var tableContainer = '#coreui-table-' + tableId + ' > .coreui-table__container';
      var tableWrapper = tableContainer + ' > .coreui-table__wrapper';
      var colOffset = 0;
      $(tableWrapper + ' > table > thead > tr:last-child > td.coreui-table__fixed_left').each(function () {
        var index = $(this).index() + 1;
        if (index !== 1) {
          $(tableWrapper + ' > table > thead > tr:last-child > td:nth-child(' + index + ')').css('left', colOffset + 'px');
          $(tableWrapper + ' > table > tbody > tr > td:nth-child(' + index + ')')
          //.addClass('coreui-table__fixed_left')
          .css('left', colOffset + 'px');
        }
        colOffset += $(this).outerWidth();
      });
      if (colOffset > 0) {
        $(tableContainer).addClass('fixed-columns');
      }
    },
    /**
     * Фиксация колонок справа
     * @param {string} tableId
     */
    fixedColsRight: function fixedColsRight(tableId) {
      var tableContainer = '#coreui-table-' + tableId + ' > .coreui-table__container';
      var tableWrapper = tableContainer + ' > .coreui-table__wrapper';
      var colOffset = 0;
      $($(tableWrapper + ' > table > thead > tr:last-child > td.coreui-table__fixed_right').get().reverse()).each(function () {
        var index = $(this).index() + 1;
        if (index !== 1) {
          $(tableWrapper + ' > table > thead > tr:last-child > td:nth-child(' + index + ')').css('right', colOffset + 'px');
          $(tableWrapper + ' > table > tbody > tr > td:nth-child(' + index + ')')
          //.addClass('coreui-table__fixed_left')
          .css('right', colOffset + 'px');
        }
        colOffset += $(this).outerWidth();
      });
      if (colOffset > 0) {
        $(tableContainer).addClass('fixed-columns');
      }
    }
  };

  var coreuiTablePrivate = {
    /**
     * Инициализация колонок
     * @param {object} tableWrapper
     * @param {object} table
     * @param {Array} columns
     * @private
     */
    initColumns: function initColumns(tableWrapper, table, columns) {
      var options = table.getOptions();
      var columnsStorage = options.saveState && options.id ? coreuiTablePrivate.getStorageField(table.getId(), 'columns') : null;
      $.each(columns, function (key, column) {
        if (typeof column.type === 'undefined' || !tableWrapper.columns.hasOwnProperty(column.type)) {
          column.type = 'text';
        }
        if (!column.hasOwnProperty('show') || typeof column.show !== 'boolean') {
          column.show = true;
        }
        if (columnsStorage) {
          $.each(columnsStorage, function (key2, columnStorage) {
            if (columnStorage && columnStorage.hasOwnProperty('field') && columnStorage.hasOwnProperty('isShow') && columnStorage.field === column.field) {
              column.show = !!columnStorage.isShow;
              return false;
            }
          });
        }
        if (column.hasOwnProperty('fixed') && typeof column.fixed === 'string') {
          table._options.overflow = true;
        }
        var columnInstance = new coreuiTable.columns[column.type](table, column);
        table._columns.push(columnInstance);
        if (columnInstance.isShow()) {
          table._countColumnsShow++;
        }
      });
    },
    /**
     * Инициализация поисковых полей
     * @param {object} tableWrapper
     * @param {Object} table
     * @param {Array}  searchControls
     * @private
     */
    initSearch: function initSearch(tableWrapper, table, searchControls) {
      var options = table.getOptions();
      var searchValues = options.saveState && options.id ? coreuiTablePrivate.getStorageField(table.getId(), 'search') : null;
      $.each(searchControls, function (key, control) {
        if (!coreuiTableUtils.isObject(control)) {
          control = {};
        }
        if (!control.hasOwnProperty('type') || typeof control.type !== 'string' || !tableWrapper.search.hasOwnProperty(control.type)) {
          control.type = 'text';
        }
        if (options.saveState && options.id) {
          control.value = null;
          if (Array.isArray(searchValues) && control.hasOwnProperty('field')) {
            $.each(searchValues, function (key, search) {
              if (coreuiTableUtils.isObject(search) && search.hasOwnProperty('field') && search.hasOwnProperty('value') && search.field && search.field === control.field) {
                control.value = search.value;
                return false;
              }
            });
          }
        }
        var controlInstance = new coreuiTable.search[control.type](table, control);
        table._search.push(controlInstance);
      });
    },
    /**
     * Инициализация контролов и фильтров
     * @param {Object} tableWrapper
     * @param {Object} table
     * @param {Array}  rows
     * @param {string} position
     * @private
     */
    initControls: function initControls(tableWrapper, table, rows, position) {
      var that = this;
      $.each(rows, function (key, row) {
        var type = 'in';
        var controlsLeft = [];
        var controlsCenter = [];
        var controlsRight = [];
        if (typeof row.type === 'string' && ['in', 'out'].indexOf(row.type.toLowerCase()) >= 0) {
          type = row.type.toLowerCase();
        }
        if (row.hasOwnProperty('left') && Array.isArray(row.left)) {
          $.each(row.left, function (key, control) {
            var instance = that.initControl(tableWrapper, table, control);
            if (coreuiTableUtils.isObject(instance)) {
              controlsLeft.push(instance);
            }
          });
        }
        if (row.hasOwnProperty('center') && Array.isArray(row.center)) {
          $.each(row.center, function (key, control) {
            var instance = that.initControl(tableWrapper, table, control);
            if (coreuiTableUtils.isObject(instance)) {
              controlsCenter.push(instance);
            }
          });
        }
        if (row.hasOwnProperty('right') && Array.isArray(row.right)) {
          $.each(row.right, function (key, control) {
            var instance = that.initControl(tableWrapper, table, control);
            if (coreuiTableUtils.isObject(instance)) {
              controlsRight.push(instance);
            }
          });
        }
        if (controlsLeft.length > 0 || controlsCenter.length > 0 || controlsRight.length > 0) {
          table._controlsPositions[position].push({
            type: type,
            left: controlsLeft,
            center: controlsCenter,
            right: controlsRight
          });
        }
      });
    },
    /**
     * Инициализация контрола или фильтра
     * @param {object} tableWrapper
     * @param {Object} table
     * @param {object} control
     * @private
     */
    initControl: function initControl(tableWrapper, table, control) {
      var instance = null;
      if (coreuiTableUtils.isObject(control) && typeof control.type === 'string') {
        if (tableWrapper.controls.hasOwnProperty(control.type)) {
          instance = new coreuiTable.controls[control.type](table, control);
          table._controls.push(instance);
        } else if (control.type.indexOf('filter:') === 0) {
          var filterName = control.type.substring(7);
          if (tableWrapper.filters.hasOwnProperty(filterName)) {
            if (control.hasOwnProperty('field')) {
              var options = table.getOptions();
              if (options.saveState && options.id) {
                var filterValues = options.saveState && options.id ? coreuiTablePrivate.getStorageField(table.getId(), 'filters') : null;
                control.value = null;
                if (Array.isArray(filterValues)) {
                  $.each(filterValues, function (key, filter) {
                    if (coreuiTableUtils.isObject(filter) && filter.hasOwnProperty('field') && filter.hasOwnProperty('value') && filter.field && filter.field === control.field) {
                      control.value = filter.value;
                      return false;
                    }
                  });
                }
              }
            }
            instance = new coreuiTable.filters[filterName](table, control);
            table._filters.push(instance);
          }
        }
      }
      return instance;
    },
    /**
     * Инициализация сортировки
     * @param {Object} table
     * @param {Array} sort
     * @private
     */
    initSort: function initSort(table, sort) {
      if (Array.isArray(sort) && sort.length > 0) {
        $.each(sort, function (key, sortField) {
          if (coreuiTableUtils.isObject(sortField) && sortField.hasOwnProperty('field') && sortField.hasOwnProperty('order') && typeof sortField.field === 'string' && typeof sortField.order === 'string' && sortField.field && sortField.order && ['asc', 'desc'].indexOf(sortField.order) >= 0) {
            table._sort.push({
              field: sortField.field,
              order: sortField.order
            });
          }
        });
      }
    },
    /**
     * Поиск по данным таблицы
     * @param {object} table
     */
    searchLocalRecords: function searchLocalRecords(table) {
      var searchData = table.getSearchData(true);
      var filterData = table.getFilterData(true);
      var columnsOptions = {};
      table._columns.map(function (column) {
        if (typeof column.convertToString === 'function' && typeof column.getField === 'function') {
          var field = column.getField();
          if (field) {
            columnsOptions[field] = {};
            columnsOptions[field].convertToString = column.convertToString;
          }
        }
      });
      table._records.map(function (record) {
        var isShow = true;
        if (searchData.length > 0) {
          isShow = coreuiTablePrivate.isFilteredRecord(searchData, record.data, columnsOptions);
        }
        if (isShow && filterData.length > 0) {
          isShow = coreuiTablePrivate.isFilteredRecord(filterData, record.data, columnsOptions);
        }
        record.show = isShow;
      });
    },
    /**
     * Установка записей
     * @param {Object} table
     * @param {Array}  records
     * @private
     */
    setRecords: function setRecords(table, records) {
      table._recordsIndex = 1;
      table._records = [];
      var that = this;
      $.each(records, function (key, record) {
        that.addRecord(table, record);
      });
    },
    /**
     * Добавление новой записи
     * @param {object} table
     * @param {object} data
     * @param {number} afterIndex
     * @return {object|null}
     * @private
     */
    addRecord: function addRecord(table, data, afterIndex) {
      if (coreuiTableUtils.isObject(data)) {
        data = $.extend(true, {}, data);
        var meta = data.hasOwnProperty('_meta') && coreuiTableUtils.isObject(data._meta) ? data._meta : null;
        if (meta) {
          delete data._meta;
        }
        var record = {
          index: table._recordsIndex++,
          data: data,
          show: true,
          meta: meta,
          seq: table._seq++
        };
        if (typeof afterIndex === 'number') {
          if (afterIndex === 0) {
            table._records.splice(0, 0, record);
            return record;
          } else {
            var index = null;
            $.each(table._records, function (key, record) {
              if (afterIndex === record.index) {
                index = key;
                return false;
              }
            });
            if (index !== null) {
              table._records.splice(index, 0, record);
              return record;
            }
          }
        } else {
          table._records.push(record);
          return record;
        }
      }
      return null;
    },
    /**
     * Добавление новой записи перед указанной
     * @param {object} table
     * @param {object} data
     * @param {number} index
     * @return {object|null}
     * @private
     */
    addRecordBefore: function addRecordBefore(table, data, index) {
      if (coreuiTableUtils.isObject(data) && typeof index === 'number') {
        data = $.extend(true, {}, data);
        var meta = data.hasOwnProperty('_meta') && coreuiTableUtils.isObject(data._meta) ? data._meta : null;
        if (meta) {
          delete data._meta;
        }
        var record = {
          index: table._recordsIndex++,
          data: data,
          show: true,
          meta: meta,
          seq: table._seq++
        };
        var issetKey = false;
        var keyBefore = null;
        $.each(table._records, function (key, record) {
          if (index === record.index) {
            issetKey = true;
            return false;
          }
          keyBefore = key;
        });
        if (issetKey && keyBefore) {
          table._records.splice(keyBefore, 0, record);
          return record;
        }
      }
      return null;
    },
    /**
     * Проверка подходит ли запись под поисковые данные
     * @param {Array}  filters
     * @param {object} recordData
     * @param {object} columnsOptions
     * @return {boolean}
     * @private
     */
    isFilteredRecord: function isFilteredRecord(filters, recordData, columnsOptions) {
      var isShow = true;
      $.each(filters, function (key, filter) {
        var fieldValue = null;
        if (recordData.hasOwnProperty(filter.field) && recordData[filter.field]) {
          if (columnsOptions && columnsOptions.hasOwnProperty(filter.field) && typeof columnsOptions[filter.field].convertToString === 'function') {
            fieldValue = columnsOptions[filter.field].convertToString(recordData[filter.field]);
          } else if (typeof recordData[filter.field] === 'string') {
            fieldValue = recordData[filter.field];
          } else if (typeof recordData[filter.field] === 'number') {
            fieldValue = String(recordData[filter.field]);
          }
        }
        if (fieldValue !== null) {
          if (!filter.filter(fieldValue, filter.value)) {
            isShow = false;
            return false;
          }
        } else {
          isShow = false;
          return false;
        }
      });
      return isShow;
    },
    /**
     * Выполнения зарегистрированных функций в указанном событии
     * @param {object} table
     * @param {string} name
     * @param {Array}  params
     * @private
     */
    _trigger: function _trigger(table, name, params) {
      params = params || [];
      if (table._events.hasOwnProperty(name) && table._events[name].length > 0) {
        for (var i = 0; i < table._events[name].length; i++) {
          var callback = table._events[name][i].callback;
          var context = table._events[name][i].context ? table._events[name][i].context : table;
          callback.apply(context, params);
          if (table._events[name][i].singleExec) {
            table._events[name].splice(i, 1);
            i--;
          }
        }
      }
    },
    /**
     * Сортировка записей по seq
     * @param {Array} records
     * @return {*}
     */
    sortRecordsBySeq: function sortRecordsBySeq(records) {
      return records.sort(function (a, b) {
        return a.seq - b.seq;
      });
    },
    /**
     * Сортировка записей по указанным полям
     * @param {Array}  records
     * @param {Array}  fields
     * @param {object} columnsConverters
     */
    sortRecordsByFields: function sortRecordsByFields(records, fields, columnsConverters) {
      return records.sort(function (a, b) {
        for (var i = 0; i < fields.length; i++) {
          var issetAField = a.data.hasOwnProperty(fields[i].field);
          var issetBField = b.data.hasOwnProperty(fields[i].field);
          if (!issetAField && !issetBField) {
            return 0;
          } else if (!issetAField) {
            return 1;
          } else if (!issetBField) {
            return -1;
          }
          var aVal = '';
          var bVal = '';
          if (a.data.hasOwnProperty(fields[i].field) && a.data[fields[i].field]) {
            if (columnsConverters && columnsConverters.hasOwnProperty(fields[i].field)) {
              aVal = columnsConverters[fields[i].field](a.data[fields[i].field]);
            } else if (['string', 'number'].indexOf(_typeof(a.data[fields[i].field])) >= 0) {
              aVal = String(a.data[fields[i].field]);
            }
          }
          if (b.data.hasOwnProperty(fields[i].field) && b.data[fields[i].field]) {
            if (columnsConverters && columnsConverters.hasOwnProperty(fields[i].field)) {
              bVal = columnsConverters[fields[i].field](b.data[fields[i].field]);
            } else if (['string', 'number'].indexOf(_typeof(b.data[fields[i].field])) >= 0) {
              bVal = String(b.data[fields[i].field]);
            }
          }
          if (aVal === null || aVal === undefined || typeof aVal === "function") {
            aVal = '';
          } else if (_typeof(aVal) === 'object') {
            aVal = JSON.stringify(aVal);
          }
          if (bVal === null || bVal === undefined || typeof bVal === "function") {
            bVal = '';
          } else if (_typeof(bVal) === 'object') {
            bVal = JSON.stringify(bVal);
          }
          var val = aVal < bVal ? -1 : aVal > bVal ? 1 : 0;
          if (fields[i].order === "desc") {
            val = val * -1;
          }
          if (val !== 0) {
            return val;
          }
        }
      });
    },
    /**
     * Установка сортировки для указанных колонок
     * @param {object} table
     * @param {Array}  sort
     */
    setColumnsSort: function setColumnsSort(table, sort) {
      var thead = coreuiTableElements.getTableThead(table.getId());
      $.each(table._columns, function (key, column) {
        var options = column.getOptions();
        if (options.hasOwnProperty('field') && options.hasOwnProperty('sortable') && typeof options.field === 'string' && options.sortable) {
          var sortColumn = null;
          if (Array.isArray(sort)) {
            $.each(sort, function (key, sortItem) {
              if (coreuiTableUtils.isObject(sortItem) && sortItem.hasOwnProperty('field') && sortItem.hasOwnProperty('order') && typeof sortItem.field === 'string' && typeof sortItem.order === 'string' && options.field === sortItem.field) {
                sortColumn = {
                  field: sortItem.field,
                  order: sortItem.order
                };
              }
            });
          }
          var columnElement = thead.find('[data-field="' + options.field + '"]');
          columnElement.find('.coreui-table__column-sort').remove();
          if (sortColumn !== null) {
            if (sortColumn.order === 'asc') {
              columnElement.append('<i class="coreui-table__column-sort bi bi-sort-down-alt"></i>');
            } else {
              columnElement.append('<i class="coreui-table__column-sort bi bi-sort-down"></i>');
            }
          }
        }
      });
    },
    /**
     * Получение данных из хранилища
     * @param {string} tableId
     * @return {object|null}
     */
    getStorage: function getStorage(tableId) {
      var storage = localStorage.getItem('coreui_table');
      try {
        if (typeof storage === 'string' && storage) {
          storage = JSON.parse(storage);
          if (coreuiTableUtils.isObject(storage)) {
            return tableId && typeof tableId === 'string' ? storage.hasOwnProperty(tableId) ? storage[tableId] : null : storage;
          }
        }
        return null;
      } catch (e) {
        return null;
      }
    },
    /**
     * Сохранение данных в хранилище
     * @param {string}      tableId
     * @param {object|null} storage
     */
    setStorage: function setStorage(tableId, storage) {
      if (typeof tableId !== 'string' || !tableId) {
        return;
      }
      var storageAll = this.getStorage();
      if (coreuiTableUtils.isObject(storageAll)) {
        if (storageAll.hasOwnProperty(tableId)) {
          if (storage) {
            storageAll[tableId] = storage;
          } else {
            delete storageAll[tableId];
          }
        } else if (storage) {
          storageAll[tableId] = storage;
        }
      }
      localStorage.setItem('coreui_table', JSON.stringify(storageAll || {}));
    },
    /**
     * Получение поля из хранилища
     * @param tableId
     * @param field
     * @return {*|null}
     */
    getStorageField: function getStorageField(tableId, field) {
      var storage = this.getStorage(tableId) || {};
      return storage.hasOwnProperty(field) ? storage[field] : null;
    },
    /**
     * Сохранение поля в хранилище
     * @param tableId
     * @param field
     * @param data
     */
    setStorageField: function setStorageField(tableId, field, data) {
      var storage = this.getStorage(tableId) || {};
      if (data === null) {
        if (storage.hasOwnProperty(field)) {
          delete storage[field];
        }
      } else {
        storage[field] = data;
      }
      this.setStorage(tableId, storage);
    }
  };

  var coreuiTableInstance = {
    _options: {
      id: null,
      "class": '',
      primaryKey: 'id',
      lang: 'en',
      langItems: {},
      width: null,
      minWidth: null,
      maxWidth: null,
      height: null,
      minHeight: null,
      naxHeight: null,
      overflow: false,
      page: 1,
      recordsPerPage: 25,
      theadTop: 0,
      saveState: false,
      noBorder: false,
      noWrap: false,
      noWrapToggle: false,
      showHeaders: true,
      showScrollShadow: false,
      recordsRequest: {
        method: 'GET',
        url: null // '/mod/index/orders/?page=[page]'
      },
      requestParams: {
        page: 'page',
        count: 'count',
        start: 'start',
        end: 'end',
        sort: 'sort',
        search: 'search'
      },
      group: {
        field: null,
        attr: {},
        render: null
      },
      onClick: null,
      onClickUrl: null,
      sort: [],
      header: [],
      footer: [],
      columnsHeader: [],
      search: {
        labelWidth: 200,
        controls: []
      },
      columns: [],
      columnsFooter: [],
      records: []
    },
    _id: '',
    _page: 1,
    _recordsIndex: 1,
    _recordsPerPage: 25,
    _recordsTotal: 0,
    _recordsNumber: 1,
    _seq: 1,
    _isRecordsRequest: false,
    _countColumnsShow: 0,
    _records: [],
    _sort: [],
    _columns: [],
    _search: [],
    _filters: [],
    _controls: [],
    _controlsPositions: {
      header: [],
      footer: []
    },
    _events: {},
    /**
     * Инициализация
     * @param {object} tableWrapper
     * @param {object} options
     * @private
     */
    _init: function _init(tableWrapper, options) {
      this._options = $.extend(true, {}, this._options, options);
      this._events = {};
      this._id = this._options.hasOwnProperty('id') && typeof this._options.id === 'string' && this._options.id ? this._options.id : coreuiTableUtils.hashCode();
      if (this._options.page > 0) {
        this._page = this._options.page;
      }
      if (this._options.recordsPerPage > 0) {
        this._recordsPerPage = this._options.recordsPerPage;
      }
      this._isRecordsRequest = this._options.hasOwnProperty('recordsRequest') && (typeof this._options.recordsRequest === 'function' || coreuiTableUtils.isObject(this._options.recordsRequest) && this._options.recordsRequest.hasOwnProperty('url') && typeof this._options.recordsRequest.url === 'string' && this._options.recordsRequest.url !== '' && this._options.recordsRequest.url !== '#');
      if (this._isRecordsRequest) {
        if (_typeof(this._options.recordsRequest) === 'object' && (!this._options.recordsRequest.hasOwnProperty('method') || typeof this._options.recordsRequest.method !== 'string')) {
          this._options.recordsRequest.method = 'GET';
        }
      } else if (Array.isArray(this._options.records)) {
        coreuiTablePrivate.setRecords(this, this._options.records);
      }

      // Очистка записей после инициализации
      this._options.records = [];

      // Инициализация колонок
      if (_typeof(this._options.columns) === 'object' && Array.isArray(this._options.columns) && this._options.columns.length > 0) {
        coreuiTablePrivate.initColumns(tableWrapper, this, this._options.columns);
      }

      // Инициализация поисковых полей
      if (coreuiTableUtils.isObject(this._options.search) && _typeof(this._options.search.controls) === 'object' && Array.isArray(this._options.search.controls) && this._options.search.controls.length > 0) {
        coreuiTablePrivate.initSearch(tableWrapper, this, this._options.search.controls);
      }

      // Инициализация контролов и фильтров
      if (this._options.hasOwnProperty('header') && Array.isArray(this._options.header) && this._options.header.length > 0) {
        coreuiTablePrivate.initControls(tableWrapper, this, this._options.header, 'header');
      }
      if (this._options.hasOwnProperty('footer') && Array.isArray(this._options.footer) && this._options.footer.length > 0) {
        coreuiTablePrivate.initControls(tableWrapper, this, this._options.footer, 'footer');
      }
      if (this._options.saveState && this._options.id) {
        // Поиск по сохраненным поисковым данным
        if (!this._isRecordsRequest) {
          coreuiTablePrivate.searchLocalRecords(this);
        }

        // Сортировка
        var sort = coreuiTablePrivate.getStorageField(this.getId(), 'sort');
        if (Array.isArray(sort) && sort.length > 0) {
          coreuiTablePrivate.initSort(this, sort);
          if (!this._isRecordsRequest && this._records.length > 0) {
            this._records = coreuiTablePrivate.sortRecordsByFields(this._records, this._sort);
          }
        }
      } else {
        if (this._options.hasOwnProperty('sort') && Array.isArray(this._options.sort) && this._options.sort.length > 0) {
          coreuiTablePrivate.initSort(this, this._options.sort);
        }
      }
    },
    /**
     * Инициализация событий таблицы
     */
    initEvents: function initEvents() {
      var that = this;

      // Показ строк
      this.on('records_show', function () {
        // Переход по ссылке
        if (typeof that._options.onClickUrl === 'string' && that._options.onClickUrl) {
          coreuiTableElements.getTrRecords(that.getId()).click(function () {
            var recordKey = $(this).data('record-index');
            var record = that.getRecordByIndex(recordKey);
            if (!record) {
              return;
            }
            var url = that._options.onClickUrl;
            $.each(record.data, function (field, value) {
              var fieldQuote = field.replace(/([^\w\d])/g, '\\$1');
              url = url.replace(new RegExp('\\[' + fieldQuote + '\\]', 'g'), value);
            });
            if (url && url !== '#') {
              location.href = url;
            }
          });
        }

        // Событие нажатия на строку
        if (['function', 'string'].indexOf(_typeof(that._options.onClick))) {
          coreuiTableElements.getTrRecords(that.getId()).click(function (event) {
            var recordKey = $(this).data('record-index');
            var record = that.getRecordByIndex(recordKey);
            if (!record) {
              return;
            }
            if (typeof that._options.onClick === 'function') {
              that._options.onClick(event, record);
            } else if (typeof that._options.onClick === 'string') {
              var func = new Function('event', 'record', that._options.onClick);
              func(event, record);
            }
          });
        }

        // Раскрытие строки
        coreuiTableElements.getNoWrapToggles(that.getId()).click(function (event) {
          event.cancelBubble = true;
          event.preventDefault();
          var parent = $(this).parent();
          if (parent.hasClass('shown')) {
            $(this).removeClass('bi-caret-up-fill');
            $(this).addClass('bi-caret-down-fill');
            parent.removeClass('shown');
          } else {
            $(this).removeClass('bi-caret-down-fill');
            $(this).addClass('bi-caret-up-fill');
            parent.addClass('shown');
          }
        });

        // Фиксация колонок
        coreuiTableElements.fixedColsLeft(that.getId());
        coreuiTableElements.fixedColsRight(that.getId());
      });

      // Показ таблицы
      this.on('table_show', function () {
        var sortableColumns = coreuiTableElements.getTableSortable(that.getId());
        if (sortableColumns[0]) {
          sortableColumns.click(function (event) {
            var field = $(this).data('field');
            if (field) {
              var sorting = [];
              var currentOrder = null;
              $.each(that._sort, function (key, sortField) {
                if (field === sortField.field) {
                  currentOrder = sortField.order;
                  return false;
                }
              });
              if (currentOrder === null) {
                sorting.push({
                  field: field,
                  order: 'asc'
                });
              } else if (currentOrder === 'asc') {
                sorting.push({
                  field: field,
                  order: 'desc'
                });
              }
              if (sorting.length === 0) {
                that.sortDefault();
              } else {
                that.sortFields(sorting);
              }
            }
          });
        }
        if (window.hasOwnProperty('bootstrap') && bootstrap.hasOwnProperty('Tooltip')) {
          $('.coreui-table__column-description', coreuiTableElements.getTableThead(that.getId())).each(function () {
            new bootstrap.Tooltip(this);
          });
        }
      });

      // События смены состояния
      if (this._options.saveState && this._options.id) {
        this.on('records_sort', function () {
          coreuiTablePrivate.setStorageField(that.getId(), 'sort', that._sort);
        });
        this.on('search_change', function () {
          coreuiTablePrivate.setStorageField(that.getId(), 'search', that.getSearchData());
        });
        this.on('filters_change', function () {
          coreuiTablePrivate.setStorageField(that.getId(), 'filters', that.getFilterData());
        });
        this.on('columns_change', function () {
          var columns = [];
          that._columns.map(function (column) {
            var columnOptions = column.getOptions();
            columns.push({
              field: columnOptions.field,
              isShow: column.isShow()
            });
          });
          coreuiTablePrivate.setStorageField(that.getId(), 'columns', columns);
        });
      }
      coreuiTablePrivate._trigger(this, 'table_show', [this]);
      coreuiTablePrivate._trigger(this, 'container_show');

      // Вызов события показа строк
      if (!this._isRecordsRequest) {
        coreuiTablePrivate._trigger(this, 'records_show', [this]);
      }
    },
    /**
     * Получение идентификатора таблицы
     * @returns {string}
     */
    getId: function getId() {
      return this._id;
    },
    /**
     * Получение опций таблицы
     * @returns {*}
     */
    getOptions: function getOptions() {
      return $.extend(true, {}, this._options);
    },
    /**
     *
     * @param element
     * @returns {*}
     */
    render: function render(element) {
      var that = this;
      var widthSizes = [];
      var heightSizes = [];
      var options = this.getOptions();
      var render = {
        headersOut: [],
        headersIn: [],
        footersIn: [],
        footersOut: []
      };
      this._recordsTotal = this._records.length;
      if (options.width > 0) {
        var unit = typeof options.width === 'number' ? 'px' : '';
        widthSizes.push('width:' + options.width + unit);
      }
      if (options.minWidth > 0) {
        var _unit = typeof options.minWidth === 'number' ? 'px' : '';
        widthSizes.push('min-width:' + options.minWidth + _unit);
      }
      if (options.maxWidth > 0) {
        var _unit2 = typeof options.maxWidth === 'number' ? 'px' : '';
        widthSizes.push('max-width:' + options.maxWidth + _unit2);
        options.overflow = true;
      }
      if (options.height > 0) {
        var _unit3 = typeof options.height === 'number' ? 'px' : '';
        heightSizes.push('height:' + options.height + _unit3);
      }
      if (options.minHeight > 0) {
        var _unit4 = typeof options.minHeight === 'number' ? 'px' : '';
        heightSizes.push('min-height:' + options.minHeight + _unit4);
      }
      if (options.maxHeight > 0) {
        var _unit5 = typeof options.maxHeight === 'number' ? 'px' : '';
        heightSizes.push('max-height:' + options.maxHeight + _unit5);
        options.overflow = true;
      }

      // Верхние элементы управления
      if (Array.isArray(this._controlsPositions.header) && this._controlsPositions.header.length > 0) {
        $.each(this._controlsPositions.header, function (key, header) {
          var controlsLeft = [];
          var controlsCenter = [];
          var controlsRight = [];
          if (Array.isArray(header.left) && header.left.length > 0) {
            $.each(header.left, function (key, control) {
              var controlRender = coreuiTableRender.renderControl(that, control);
              if (controlRender) {
                controlsLeft.push(controlRender);
              }
            });
          }
          if (Array.isArray(header.center) && header.center.length > 0) {
            $.each(header.center, function (key, control) {
              var controlRender = coreuiTableRender.renderControl(that, control);
              if (controlRender) {
                controlsCenter.push(controlRender);
              }
            });
          }
          if (Array.isArray(header.right) && header.right.length > 0) {
            $.each(header.right, function (key, control) {
              var controlRender = coreuiTableRender.renderControl(that, control);
              if (controlRender) {
                controlsRight.push(controlRender);
              }
            });
          }
          if (controlsLeft.length > 0 || controlsCenter.length > 0 || controlsRight.length > 0) {
            if (header.type === 'in') {
              var headerControls = $(coreuiTableUtils.render(tpl['table/controls/header.html'], {
                controlsLeft: controlsLeft,
                controlsCenter: controlsCenter,
                controlsRight: controlsRight
              }));
              if (controlsLeft.length > 0) {
                $.each(controlsLeft, function (key, control) {
                  headerControls.find('.coreui-table__controls_left').append(control);
                });
              }
              if (controlsCenter.length > 0) {
                $.each(controlsCenter, function (key, control) {
                  headerControls.find('.coreui-table__controls_center').append(control);
                });
              }
              if (controlsRight.length > 0) {
                $.each(controlsRight, function (key, control) {
                  headerControls.find('.coreui-table__controls_right').append(control);
                });
              }
              render.headersIn.push(headerControls);
            } else {
              var _headerControls = $(coreuiTableUtils.render(tpl['table/controls/header-out.html'], {
                controlsLeft: controlsLeft,
                controlsCenter: controlsCenter,
                controlsRight: controlsRight
              }));
              if (controlsLeft.length > 0) {
                $.each(controlsLeft, function (key, control) {
                  _headerControls.find('.coreui-table__controls_left').append(control);
                });
              }
              if (controlsCenter.length > 0) {
                $.each(controlsCenter, function (key, control) {
                  _headerControls.find('.coreui-table__controls_center').append(control);
                });
              }
              if (controlsRight.length > 0) {
                $.each(controlsRight, function (key, control) {
                  _headerControls.find('.coreui-table__controls_right').append(control);
                });
              }
              render.headersOut.push(_headerControls);
            }
          }
        });
      }

      // Нижние элементы управления
      if (Array.isArray(this._controlsPositions.footer) && this._controlsPositions.footer.length > 0) {
        $.each(this._controlsPositions.footer, function (key, footer) {
          var controlsLeft = [];
          var controlsCenter = [];
          var controlsRight = [];
          if (Array.isArray(footer.left) && footer.left.length > 0) {
            $.each(footer.left, function (key, control) {
              var controlRender = coreuiTableRender.renderControl(that, control);
              if (controlRender) {
                controlsLeft.push(controlRender);
              }
            });
          }
          if (Array.isArray(footer.center) && footer.center.length > 0) {
            $.each(footer.center, function (key, control) {
              var controlRender = coreuiTableRender.renderControl(that, control);
              if (controlRender) {
                controlsCenter.push(controlRender);
              }
            });
          }
          if (Array.isArray(footer.right) && footer.right.length > 0) {
            $.each(footer.right, function (key, control) {
              var controlRender = coreuiTableRender.renderControl(that, control);
              if (controlRender) {
                controlsRight.push(controlRender);
              }
            });
          }
          if (controlsLeft.length > 0 || controlsCenter.length > 0 || controlsRight.length > 0) {
            if (footer.type === 'in') {
              var footerControls = $(coreuiTableUtils.render(tpl['table/controls/footer.html'], {
                controlsLeft: controlsLeft,
                controlsCenter: controlsCenter,
                controlsRight: controlsRight
              }));
              if (controlsLeft.length > 0) {
                $.each(controlsLeft, function (key, control) {
                  footerControls.find('.coreui-table__controls_left').append(control);
                });
              }
              if (controlsCenter.length > 0) {
                $.each(controlsCenter, function (key, control) {
                  footerControls.find('.coreui-table__controls_center').append(control);
                });
              }
              if (controlsRight.length > 0) {
                $.each(controlsRight, function (key, control) {
                  footerControls.find('.coreui-table__controls_right').append(control);
                });
              }
              render.footersIn.push(footerControls);
            } else {
              var _footerControls = $(coreuiTableUtils.render(tpl['table/controls/footer-out.html'], {
                controlsLeft: controlsLeft,
                controlsCenter: controlsCenter,
                controlsRight: controlsRight
              }));
              if (controlsLeft.length > 0) {
                $.each(controlsLeft, function (key, control) {
                  _footerControls.find('.coreui-table__controls_left').append(control);
                });
              }
              if (controlsCenter.length > 0) {
                $.each(controlsCenter, function (key, control) {
                  _footerControls.find('.coreui-table__controls_center').append(control);
                });
              }
              if (controlsRight.length > 0) {
                $.each(controlsRight, function (key, control) {
                  _footerControls.find('.coreui-table__controls_right').append(control);
                });
              }
              render.footersOut.push(_footerControls);
            }
          }
        });
      }

      // Загрузка записей
      if (this._isRecordsRequest) {
        this.on('container_show', function () {
          if (typeof options.recordsRequest === 'function') {
            that.loadByFunction(options.recordsRequest);
          } else {
            that.load(options.recordsRequest.url, options.recordsRequest.method);
          }
        });
      }
      var classes = [];
      var classesWrapper = [];
      if (options.hasOwnProperty('noBorder') && typeof options.noBorder === 'boolean' && options.noBorder) {
        classes.push('coreui-table__no_border');
      }
      if (options.hasOwnProperty('showScrollShadow') && typeof options.showScrollShadow === 'boolean' && options.showScrollShadow) {
        classesWrapper.push('table-scroll-shadow');
      }
      if (options.hasOwnProperty('overflow') && typeof options.overflow === 'boolean' && options.overflow) {
        classesWrapper.push('overflow-x-auto');
      }
      var tableElement = coreuiTableRender.renderTable(this);
      var containerElement = $(coreuiTableUtils.render(tpl['container.html'], {
        id: this._id,
        classes: classes.length > 0 ? ' ' + classes.join(' ') : '',
        classesWrapper: classesWrapper.length > 0 ? ' ' + classesWrapper.join(' ') : '',
        widthSizes: widthSizes,
        heightSizes: heightSizes
      }));
      if (render.headersOut.length > 0) {
        containerElement.prepend(render.headersOut);
      }
      if (render.headersIn.length > 0) {
        containerElement.find('.coreui-table__container').prepend(render.headersIn);
      }
      if (render.footersIn.length > 0) {
        containerElement.find('.coreui-table__container').append(render.footersIn);
      }
      if (render.footersOut.length > 0) {
        containerElement.append(render.footersOut);
      }
      containerElement.find('.coreui-table__wrapper').html(tableElement);
      if (element === undefined) {
        return containerElement;
      }

      // Dom element
      var domElement = null;
      if (typeof element === 'string') {
        domElement = document.getElementById(element);
      } else if (element instanceof HTMLElement) {
        domElement = element;
      }
      if (domElement) {
        $(domElement).html(containerElement);
        this.initEvents();
      }
    },
    /**
     * Блокировка таблицы
     */
    lock: function lock() {
      var container = coreuiTableElements.getContainer(this.getId());
      if (container[0] && !container.find('.coreui-table-lock')[0]) {
        var html = coreuiTableUtils.render(tpl['table/loader.html'], {
          lang: this.getLang()
        });
        container.prepend(html);
      }
    },
    /**
     * Разблокировка таблицы
     */
    unlock: function unlock() {
      coreuiTableElements.getLock(this.getId()).hide(50, function () {
        $(this).remove();
      });
    },
    /**
     * Загрузка строк
     * @param {string} url
     * @param {string} method
     */
    load: function load(url, method) {
      this.lock();
      var that = this;
      var params = {};
      if (url.match(/\[page\]/)) {
        url = url.replace(/\[page\]/g, this._page);
      } else {
        var paramPage = coreuiTableUtils.isObject(this._options.requestParams) && this._options.requestParams.hasOwnProperty('page') ? this._options.requestParams.page : 'page';
        params[paramPage] = this._page;
      }
      if (url.match(/\[count\]/)) {
        url = url.replace(/\[count\]/g, this._recordsPerPage);
      } else {
        var paramCount = coreuiTableUtils.isObject(this._options.requestParams) && this._options.requestParams.hasOwnProperty('count') ? this._options.requestParams.count : 'count';
        params[paramCount] = this._recordsPerPage;
      }
      if (url.match(/\[start\]/)) {
        url = url.replace(/\[start\]/g, (this._page - 1) * this._recordsPerPage + 1);
      } else {
        var paramStart = coreuiTableUtils.isObject(this._options.requestParams) && this._options.requestParams.hasOwnProperty('start') ? this._options.requestParams.start : 'start';
        params[paramStart] = (this._page - 1) * this._recordsPerPage + 1;
      }
      if (url.match(/\[end\]/)) {
        url = url.replace(/\[end\]/g, (this._page - 1) * this._recordsPerPage + Number(this._recordsPerPage));
      } else {
        var paramEnd = coreuiTableUtils.isObject(this._options.requestParams) && this._options.requestParams.hasOwnProperty('end') ? this._options.requestParams.end : 'end';
        params[paramEnd] = (this._page - 1) * this._recordsPerPage + Number(this._recordsPerPage);
      }
      var searchData = this.getSearchData();
      var filterData = this.getFilterData();
      if (filterData.length > 0) {
        filterData.map(function (filter) {
          searchData.push(filter);
        });
      }
      if (searchData.length > 0) {
        var paramSearch = coreuiTableUtils.isObject(this._options.requestParams) && this._options.requestParams.hasOwnProperty('search') && typeof this._options.requestParams.search === 'string' ? this._options.requestParams.search : 'search';
        params[paramSearch] = {};
        searchData.map(function (searchItem) {
          params[paramSearch][searchItem.field] = searchItem.value;
        });
      }
      if (this._sort.length > 0) {
        var paramSort = coreuiTableUtils.isObject(this._options.requestParams) && this._options.requestParams.hasOwnProperty('sort') && typeof this._options.requestParams.sort === 'string' ? this._options.requestParams.sort : 'sort';
        params[paramSort] = this._sort;
      }
      $.ajax({
        url: url,
        method: method || 'GET',
        dataType: "json",
        data: params,
        beforeSend: function beforeSend(xhr) {
          coreuiTablePrivate._trigger(that, 'records_load_start', [that, xhr]);
        },
        success: function success(result) {
          if (result.hasOwnProperty('records') && _typeof(result.records) === 'object' && Array.isArray(result.records)) {
            var total = result.hasOwnProperty('total') && coreuiTableUtils.isNumeric(result.total) ? result.total : null;
            that.setRecords(result.records, total);
          } else {
            that.setRecords([]);
          }
        },
        error: function error(xhr, textStatus, errorThrown) {
          that.setRecords([]);
          coreuiTablePrivate._trigger(that, 'records_load_error', [that, xhr, textStatus, errorThrown]);
        },
        complete: function complete(xhr, textStatus) {
          that.unlock();
          coreuiTablePrivate._trigger(that, 'records_load_end', [that, xhr, textStatus]);
        }
      });
    },
    /**
     * Загрузка строк
     * @param {function} callback
     */
    loadByFunction: function loadByFunction(callback) {
      var that = this;
      var params = {};
      var paramPage = coreuiTableUtils.isObject(this._options.requestParams) && this._options.requestParams.hasOwnProperty('page') ? this._options.requestParams.page : 'page';
      var paramCount = coreuiTableUtils.isObject(this._options.requestParams) && this._options.requestParams.hasOwnProperty('count') ? this._options.requestParams.count : 'count';
      var paramStart = coreuiTableUtils.isObject(this._options.requestParams) && this._options.requestParams.hasOwnProperty('start') ? this._options.requestParams.start : 'start';
      var paramEnd = coreuiTableUtils.isObject(this._options.requestParams) && this._options.requestParams.hasOwnProperty('end') ? this._options.requestParams.end : 'end';
      params[paramCount] = this._recordsPerPage;
      params[paramPage] = this._page;
      params[paramStart] = (this._page - 1) * this._recordsPerPage + 1;
      params[paramEnd] = (this._page - 1) * this._recordsPerPage + Number(this._recordsPerPage);
      var searchData = this.getSearchData();
      var filterData = this.getFilterData();
      if (filterData.length > 0) {
        $.each(filterData, function (key, filter) {
          searchData.push(filter);
        });
      }
      if (searchData.length > 0) {
        var paramSearch = coreuiTableUtils.isObject(this._options.requestParams) && this._options.requestParams.hasOwnProperty('search') && typeof this._options.requestParams.search === 'string' ? this._options.requestParams.search : 'search';
        params[paramSearch] = {};
        searchData.map(function (searchItem) {
          params[paramSearch][searchItem.field] = searchItem.value;
        });
      }
      if (this._sort.length > 0) {
        var paramSort = coreuiTableUtils.isObject(this._options.requestParams) && this._options.requestParams.hasOwnProperty('sort') && typeof this._options.requestParams.sort === 'string' ? this._options.requestParams.sort : 'sort';
        params[paramSort] = this._sort;
      }
      var result = callback(params, this);

      /**
       * Установка записей
       * @param {Object} data
       */
      function setRecords(data) {
        if (data.hasOwnProperty('records') && _typeof(data.records) === 'object' && Array.isArray(data.records)) {
          var total = data.hasOwnProperty('total') && coreuiTableUtils.isNumeric(data.total) ? data.total : null;
          that.setRecords(data.records, total);
        } else {
          that.setRecords([]);
        }
      }
      if (result instanceof Promise) {
        this.lock();
        result.then(function (data) {
          that.unlock();
          setRecords(data);
        })["catch"](function () {
          that.unlock();
        });
      } else if (_typeof(result) === 'object') {
        setRecords(result);
      }
    },
    /**
     * Перезагрузка записей в таблице
     */
    reload: function reload() {
      if (this._isRecordsRequest) {
        if (typeof this._options.recordsRequest === 'function') {
          this.loadByFunction(this._options.recordsRequest);
        } else {
          this.load(this._options.recordsRequest.url, this._options.recordsRequest.method);
        }
      }
    },
    /**
     * Пересоздание тела таблицы
     */
    refresh: function refresh() {
      var table = coreuiTableRender.renderTable(this);
      coreuiTableElements.getTable(this.getId()).replaceWith(table);
      coreuiTablePrivate._trigger(this, 'table_show', [this]);
      coreuiTablePrivate._trigger(this, 'records_show', [this]);
    },
    /**
     * Установка общего количества записей на странице
     * @param recordsPerPage
     */
    setPageSize: function setPageSize(recordsPerPage) {
      this._recordsPerPage = recordsPerPage;
      coreuiTablePrivate._trigger(this, 'page_size_update');
    },
    /**
     * Выбор всех записей в таблице
     */
    selectAll: function selectAll() {
      coreuiTableElements.selectTrAll(this.getId());
      coreuiTablePrivate._trigger(this, 'record_select_all');
    },
    /**
     * Отмена выбор всех записей в таблице
     */
    unselectAll: function unselectAll() {
      coreuiTableElements.unselectTrAll(this.getId());
      coreuiTablePrivate._trigger(this, 'record_unselect_all');
    },
    /**
     * Выбор записи в таблице
     * @param {string} id
     */
    selectRecord: function selectRecord(id) {
      var record = this.getRecordById(id);
      if (!record) {
        return;
      }
      var tr = coreuiTableElements.getTrByIndex(this.getId(), record.index);
      if (tr.length === 0) {
        return;
      }
      coreuiTableElements.selectTr(tr);
      coreuiTablePrivate._trigger(this, 'record_select', [record]);
    },
    /**
     * Выбор записи в таблице по индексу
     * @param {int} index
     */
    selectRecordByIndex: function selectRecordByIndex(index) {
      var record = this.getRecordByIndex(index);
      if (!record) {
        return;
      }
      var tr = coreuiTableElements.getTrByIndex(this.getId(), record.index);
      if (tr.length === 0) {
        return;
      }
      coreuiTableElements.selectTr(tr);
      coreuiTablePrivate._trigger(this, 'record_select', [record]);
    },
    /**
     * Отмена выбора записи в таблице
     * @param {string} id
     */
    unselectRecord: function unselectRecord(id) {
      var record = this.getRecordById(id);
      if (!record) {
        return;
      }
      var tr = coreuiTableElements.getTrByIndex(this.getId(), record.index);
      if (!tr) {
        return;
      }
      coreuiTableElements.unselectTr(tr);
      coreuiTablePrivate._trigger(this, 'record_unselect', [record.data]);
    },
    /**
     * Получение выбранных id
     * @return {array}
     */
    getSelectedRecordsId: function getSelectedRecordsId() {
      var records = [];
      var that = this;
      var field = this._options.primaryKey;
      $.each(coreuiTableElements.getSelectedIndexes(this.getId()), function (key, index) {
        var record = that.getRecordByIndex(index);
        if (!record || !record.data.hasOwnProperty(field)) {
          return;
        }
        records.push(record.data[field]);
      });
      return records;
    },
    /**
     * Получение выбранных записей
     * @return {array}
     */
    getSelectedRecords: function getSelectedRecords() {
      var records = [];
      var that = this;
      $.each(coreuiTableElements.getSelectedIndexes(this.getId()), function (key, index) {
        var record = that.getRecordByIndex(index);
        if (!record) {
          return;
        }
        records.push(record);
      });
      return records;
    },
    /**
     * Получение записи по id
     * @param id
     * @return {object|null}
     */
    getRecord: function getRecord(id) {
      var record = this.getRecordById(id);
      if (!record) {
        return null;
      }
      return record.data;
    },
    /**
     * Получение записей
     */
    getRecords: function getRecords() {
      var records = [];
      $.each(this._records, function (key, record) {
        records.push($.extend(true, {}, record));
      });
      return records;
    },
    /**
     * Получение данных из существующих записей
     * @return {Array}
     */
    getData: function getData() {
      var data = [];
      $.each(this._records, function (key, record) {
        data.push($.extend(true, {}, record.data));
      });
      return data;
    },
    /**
     * Переход к предыдущей странице
     */
    prevPage: function prevPage() {
      if (this._page > 1) {
        this._page--;
        this.reload();
      }
    },
    /**
     * Переход к следующей странице
     * @return {array}
     */
    nextPage: function nextPage() {
      var totalPages = this._recordsTotal > 0 && this._recordsPerPage > 0 ? Math.ceil(this._recordsTotal / this._recordsPerPage) : 1;
      if (this._page < totalPages) {
        this._page++;
        this.reload();
      }
    },
    /**
     * Переход к указанной странице
     */
    goPage: function goPage(page) {
      if (page >= 1) {
        this._page = page;
        this.reload();
      }
    },
    /**
     * Регистрация функции на событие
     * @param {Array|string} eventName
     * @param {function}     callback
     * @param {*}            context
     * @param {boolean}      singleExec
     */
    on: function on(eventName, callback, context, singleExec) {
      var eventNames = [];
      if (Array.isArray(eventName)) {
        $.each(eventName, function (key, name) {
          if (typeof name === 'string' && name) {
            eventNames.push(name);
          }
        });
      } else if (typeof eventName === 'string' && eventName) {
        eventNames.push(eventName);
      } else {
        return;
      }
      var that = this;
      $.each(eventNames, function (key, name) {
        if (!Array.isArray(that._events[name])) {
          that._events[name] = [];
        }
        that._events[name].push({
          context: context ? context : that,
          callback: callback,
          singleExec: !!singleExec
        });
      });
    },
    /**
     * Получение переводов текущего языка
     * @return {object}
     */
    getLang: function getLang() {
      return $.extend(true, {}, this._options.langItems);
    },
    /**
     * Установка видимых колонок, не указанные колонки будут скрыты
     * @param {Array} columns
     */
    setColumnsShow: function setColumnsShow(columns) {
      if (!Array.isArray(columns)) {
        return;
      }
      var isChange = false;
      var table = this;
      this._countColumnsShow = 0;
      this._columns.map(function (column) {
        var options = column.getOptions();
        if (options.hasOwnProperty('field') && typeof options.field === 'string') {
          var isShow = columns.indexOf(options.field) >= 0;
          if (column.isShow() !== isShow) {
            column.setShow(isShow);
            isChange = true;
          }
        }
        if (column.isShow()) {
          table._countColumnsShow++;
        }
      });
      if (isChange) {
        coreuiTablePrivate._trigger(this, 'columns_change');
        this.refresh();
      }
    },
    /**
     * Показ колонок
     * @param {Array} columns
     */
    showColumns: function showColumns(columns) {
      if (!Array.isArray(columns)) {
        return;
      }
      var isChange = false;
      var table = this;
      this._countColumnsShow = 0;
      this._columns.map(function (column) {
        var options = column.getOptions();
        if (options.hasOwnProperty('field') && typeof options.field === 'string' && columns.indexOf(options.field) >= 0 && !column.isShow()) {
          column.setShow(true);
          isChange = true;
        }
        if (column.isShow()) {
          table._countColumnsShow++;
        }
      });
      if (isChange) {
        coreuiTablePrivate._trigger(this, 'columns_change');
        this.refresh();
      }
    },
    /**
     * Скрытие колонок
     * @param {Array} columns
     */
    hideColumns: function hideColumns(columns) {
      if (!Array.isArray(columns)) {
        return;
      }
      var isChange = false;
      var table = this;
      this._countColumnsShow = 0;
      this._columns.map(function (column) {
        var options = column.getOptions();
        if (options.hasOwnProperty('field') && typeof options.field === 'string' && columns.indexOf(options.field) >= 0 && column.isShow()) {
          column.setShow(false);
          isChange = true;
        }
        if (column.isShow()) {
          table._countColumnsShow++;
        }
      });
      if (isChange) {
        coreuiTablePrivate._trigger(this, 'columns_change');
        this.refresh();
      }
    },
    /**
     * Получение поисковых данных
     * @property {boolean} extOptions
     * @return {*[]}
     */
    getSearchData: function getSearchData(extOptions) {
      var searchData = [];
      this._search.map(function (control) {
        var field = control.getField();
        if (field) {
          var value = control.getValue();
          if (value !== null) {
            var search = {
              field: field,
              value: value
            };
            if (extOptions) {
              search.filter = typeof control.filter === 'function' ? control.filter : null;
              search.type = control._options.type;
            }
            searchData.push(search);
          }
        }
      });
      return searchData;
    },
    /**
     * Получение данных из фильтров
     * @property {boolean} extOptions
     * @return {*[]}
     */
    getFilterData: function getFilterData(extOptions) {
      var filterData = [];
      this._filters.map(function (control) {
        var field = control.getField();
        if (field) {
          var value = control.getValue();
          if (value !== null) {
            var filter = {
              field: field,
              value: value
            };
            if (extOptions) {
              filter.filter = typeof control.filter === 'function' ? control.filter : null;
            }
            filterData.push(filter);
          }
        }
      });
      return filterData;
    },
    /**
     * Поиск по таблице с использованием данных из поиска и фильтров
     */
    searchRecords: function searchRecords() {
      var searchData = this.getSearchData();
      var filterData = this.getFilterData();
      if (this._isRecordsRequest) {
        if (typeof this._options.recordsRequest === 'function') {
          this.loadByFunction(this._options.recordsRequest);
        } else {
          this.load(this._options.recordsRequest.url, this._options.recordsRequest.method);
        }
      } else {
        coreuiTablePrivate.searchLocalRecords(this);
        this.refresh();
      }
      coreuiTablePrivate._trigger(this, 'filters_change', [filterData]);
      coreuiTablePrivate._trigger(this, 'search_change', [searchData]);
    },
    /**
     * Очистка поисковых данных
     */
    clearSearch: function clearSearch() {
      $.each(this._search, function (key, search) {
        search.setValue(null);
      });
      this.searchRecords();
    },
    /**
     * Очистка поисковых данных в фильтрах
     */
    clearFilters: function clearFilters() {
      $.each(this._filters, function (key, filter) {
        filter.setValue(null);
      });
      this.searchRecords();
    },
    /**
     * Получение записи по индексу
     * @param {string|number} index
     * @return {object|null}
     */
    getRecordByIndex: function getRecordByIndex(index) {
      if (['string', 'number'].indexOf(_typeof(index)) < 0 || index === '') {
        return null;
      }
      index = Number(index);
      if (index <= 0) {
        return null;
      }
      var record = null;
      $.each(this._records, function (key, recordItem) {
        if (recordItem.index === index) {
          record = {
            index: recordItem.index,
            data: $.extend(true, {}, recordItem.data),
            meta: recordItem.meta ? $.extend(true, {}, recordItem.meta) : null
          };
          return false;
        }
      });
      return record;
    },
    /**
     * Получение записи по id
     * @param {string} id
     * @return {object|null}
     */
    getRecordById: function getRecordById(id) {
      return this.getRecordByField(this._options.primaryKey, id);
    },
    /**
     * Получение записи по полю
     * @param {string}        field
     * @param {string|number} value
     * @return {object|null}
     */
    getRecordByField: function getRecordByField(field, value) {
      if (['string', 'number'].indexOf(_typeof(field)) < 0 || field === '') {
        return null;
      }
      var record = null;
      $.each(this._records, function (key, recordItem) {
        if (recordItem.data.hasOwnProperty(field) && recordItem.data[field] === value) {
          record = $.extend(true, {}, recordItem);
          return false;
        }
      });
      return record;
    },
    /**
     * Получение контрола по его id
     * @param {string} id
     * @return {object}
     */
    getControlById: function getControlById(id) {
      var result = null;
      $.each(this._controls, function (key, control) {
        if (control.hasOwnProperty('getId') && typeof control.getId === 'function' && control.getId() === id) {
          result = control;
          return false;
        }
      });
      return result;
    },
    /**
     * Получение контрола поиска по его id
     * @param {string} id
     * @return {object}
     */
    getSearchControlById: function getSearchControlById(id) {
      var result = null;
      $.each(this._search, function (key, search) {
        if (search.hasOwnProperty('getId') && typeof search.getId === 'function' && search.getId() === id) {
          result = search;
          return false;
        }
      });
      return result;
    },
    /**
     * Сортировка по полям
     * @param {Array} sorting
     */
    sortFields: function sortFields(sorting) {
      if (!Array.isArray(sorting)) {
        return;
      }
      var that = this;
      var columnsConverters = {};
      this._sort = [];
      $.each(sorting, function (key, sort) {
        if (!coreuiTableUtils.isObject(sort) || !sort.hasOwnProperty('field') || !sort.hasOwnProperty('order') || typeof sort.field !== 'string' || typeof sort.order !== 'string' || !sort.field || !sort.order) {
          return;
        }
        var columnSortable = false;
        $.each(that._columns, function (key, column) {
          var options = column.getOptions();
          if (options.hasOwnProperty('field') && options.hasOwnProperty('sortable') && typeof options.field === 'string' && options.field === sort.field && options.sortable) {
            columnSortable = true;
            if (column.hasOwnProperty('convertToString') && typeof column.convertToString === 'function') {
              columnsConverters[options.field] = column.convertToString;
            }
            return false;
          }
        });
        if (columnSortable) {
          that._sort.push({
            field: sort.field,
            order: sort.order
          });
        }
      });
      if (this._sort.length >= 0) {
        if (this._isRecordsRequest) {
          if (typeof this._options.recordsRequest === 'function') {
            this.loadByFunction(this._options.recordsRequest);
          } else {
            this.load(this._options.recordsRequest.url, this._options.recordsRequest.method);
          }
          coreuiTablePrivate.setColumnsSort(this, this._sort);
        } else {
          this._records = coreuiTablePrivate.sortRecordsByFields(this._records, this._sort, columnsConverters);
          this.refresh();
        }
      }
      coreuiTablePrivate._trigger(this, 'records_sort', [this]);
    },
    /**
     * Сортировка по умолчанию
     */
    sortDefault: function sortDefault() {
      this._sort = [];
      if (this._isRecordsRequest) {
        if (typeof this._options.recordsRequest === 'function') {
          this.loadByFunction(this._options.recordsRequest);
        } else {
          this.load(this._options.recordsRequest.url, this._options.recordsRequest.method);
        }
        coreuiTablePrivate.setColumnsSort(this);
      } else {
        this._records = coreuiTablePrivate.sortRecordsBySeq(this._records);
        this.refresh();
      }
      coreuiTablePrivate._trigger(this, 'records_sort', [this]);
    },
    /**
     * Удаление строки из таблицы по индексу
     * @param index
     */
    removeRecordByIndex: function removeRecordByIndex(index) {
      var recordKey = null;
      $.each(this._records, function (key, recordItem) {
        if (recordItem.index === index) {
          recordKey = key;
          return false;
        }
      });
      if (recordKey !== null && recordKey >= 0) {
        this._records.splice(recordKey, 1);
        var that = this;
        var tr = coreuiTableElements.getTrByIndex(this.getId(), index);
        if (tr.length >= 0) {
          tr.fadeOut('fast', function () {
            tr.remove();
            if (that._records.length === 0) {
              var tbody = coreuiTableElements.getTableTbody(that.getId());
              tbody.append(coreuiTableUtils.render(tpl['table/record/empty.html'], {
                columnsCount: that._countColumnsShow,
                lang: that.getLang()
              }));
            }
          });
        }
        this._recordsNumber--;
      }
    },
    /**
     * Добавление строки в таблицу после строки с индексом
     * @param {object} recordData
     * @param {number} index
     */
    addRecordAfterIndex: function addRecordAfterIndex(recordData, index) {
      var tr = coreuiTableElements.getTrByIndex(this.getId(), index);
      if (tr.length >= 0) {
        var record = coreuiTablePrivate.addRecord(this, recordData, index);
        if (record) {
          coreuiTableElements.getTrEmpty(this.getId()).remove();
          tr.after(coreuiTableRender.renderRecord(this, record));
          this._recordsNumber++;
        }
      }
    },
    /**
     * Добавление строки в таблицу перед строкой с индексом
     * @param {object} recordData
     * @param {number} index
     */
    addRecordBeforeIndex: function addRecordBeforeIndex(recordData, index) {
      var tr = coreuiTableElements.getTrByIndex(this.getId(), index);
      if (tr.length >= 0) {
        var record = coreuiTablePrivate.addRecordBefore(this, recordData, index);
        if (record) {
          coreuiTableElements.getTrEmpty(this.getId()).remove();
          tr.before(coreuiTableRender.renderRecord(this, record));
          this._recordsNumber++;
        }
      }
    },
    /**
     * Добавление строки в начало таблицы
     * @param {object} recordData
     */
    addRecordFirst: function addRecordFirst(recordData) {
      var tbody = coreuiTableElements.getTableTbody(this.getId());
      if (tbody.length >= 0) {
        var record = coreuiTablePrivate.addRecord(this, recordData, 0);
        if (record) {
          coreuiTableElements.getTrEmpty(this.getId()).remove();
          tbody.prepend(coreuiTableRender.renderRecord(this, record));
          this._recordsNumber++;
        }
      }
    },
    /**
     * Добавление строки в конец таблицы
     * @param {object} recordData
     */
    addRecordLast: function addRecordLast(recordData) {
      var tbody = coreuiTableElements.getTableTbody(this.getId());
      if (tbody.length >= 0) {
        var record = coreuiTablePrivate.addRecord(this, recordData);
        if (record) {
          coreuiTableElements.getTrEmpty(this.getId()).remove();
          tbody.append(coreuiTableRender.renderRecord(this, record));
          this._recordsNumber++;
        }
      }
    },
    /**
     * Показ указанных записей в таблице
     * @param {Array}  records
     * @param {number} total
     */
    setRecords: function setRecords(records, total) {
      if (!Array.isArray(records)) {
        return;
      }
      this._recordsTotal = coreuiTableUtils.isNumeric(total) ? parseInt(total) : records.length;
      coreuiTablePrivate.setRecords(this, records);
      if (records.length > 0) {
        this._recordsNumber = this._page === 1 ? 1 : (this._page - 1) * this._recordsPerPage + 1;
      }
      var recordsElements = coreuiTableRender.renderRecords(this, this._records);
      var tableBody = coreuiTableElements.getTableTbody(this.getId());
      tableBody.html('');
      $.each(recordsElements, function (key, recordElement) {
        tableBody.append(recordElement);
      });
      coreuiTablePrivate._trigger(this, 'records_show', [this]);
    },
    /**
     * Получение количества строк
     * @return {number}
     */
    getRecordsCount: function getRecordsCount() {
      var count = 0;
      if (this._isRecordsRequest) {
        count = this._recordsTotal;
      } else {
        this._records.map(function (record) {
          if (record.show) {
            count++;
          }
        });
      }
      return count;
    },
    /**
     * Раскрытие / скрытие дополнительных данных строки
     * @param {number}                                   recordIndex
     * @param {HTMLElement|jQuery|string|Array|function} content
     * @param {boolean}                                  isRebuild - true default
     */
    expandRecordContent: function expandRecordContent(recordIndex, content, isRebuild) {
      var recordElement = coreuiTableElements.getTrByIndex(this.getId(), recordIndex);
      var recordExpanded = coreuiTableElements.getExpandRow(recordElement);
      if (recordElement.hasClass('record-expanded')) {
        if (recordExpanded) {
          if (isRebuild === undefined || isRebuild) {
            coreuiTableElements.removeExpandRow(recordExpanded);
          } else {
            coreuiTableElements.hideExpandRow(recordExpanded);
          }
        }
        recordElement.removeClass('record-expanded');
        coreuiTablePrivate._trigger(this, 'record_expand_hide', [recordIndex]);
      } else {
        if (recordExpanded) {
          coreuiTableElements.showExpandRow(recordExpanded);
          recordElement.addClass('record-expanded');
          coreuiTablePrivate._trigger(this, 'record_expand_show', [recordIndex]);
        } else {
          var _recordIndex = recordElement.data('record-index');
          if (typeof content === 'function') {
            var callbackResult = content();
            if (callbackResult instanceof Promise) {
              var that = this;
              callbackResult.then(function (result) {
                coreuiTableElements.addExpandRow(that, recordElement, result);
                coreuiTablePrivate._trigger(that, 'record_expand_show', [_recordIndex]);
              })["catch"](function () {
                coreuiTableElements.addExpandRow(that, recordElement, '');
                coreuiTablePrivate._trigger(that, 'record_expand_show', [_recordIndex]);
              });
            } else {
              coreuiTableElements.addExpandRow(this, recordElement, callbackResult);
              coreuiTablePrivate._trigger(this, 'record_expand_show', [_recordIndex]);
            }
          } else {
            coreuiTableElements.addExpandRow(this, recordElement, content);
            coreuiTablePrivate._trigger(this, 'record_expand_show', [_recordIndex]);
          }
        }
      }
    },
    /**
     * Раскрытие / скрытие дополнительных данных строки
     * @param {number}  recordIndex
     * @param {string}  url
     * @param {boolean} isRebuild
     */
    expandRecordUrl: function expandRecordUrl(recordIndex, url, isRebuild) {
      var that = this;
      this.expandRecordContent(recordIndex, function () {
        that.lock();
        return new Promise(function (resolve, reject) {
          $.ajax({
            method: 'get',
            url: url,
            success: function success(response, textStatus, xhr) {
              var result = response;
              if (typeof response === 'string') {
                if (String(xhr.getResponseHeader('Content-Type')).indexOf('application/json') === 0) {
                  try {
                    result = JSON.parse(response);
                  } catch (e) {
                    console.warn(e);
                  }
                }
              }
              resolve(result);
            },
            error: function error(xhr, textStatus, errorThrown) {
              reject(xhr, textStatus, errorThrown);
            },
            complete: function complete(xhr, textStatus) {
              that.unlock();
            }
          });
        });
      }, isRebuild);
    }
  };

  var coreuiTable = {
    columns: {},
    controls: {},
    filters: {},
    search: {},
    lang: {},
    _instances: {},
    _settings: {
      lang: 'en'
    },
    /**
     * @param {object} options
     * @returns {object}
     */
    create: function create(options) {
      if (!options.hasOwnProperty('lang') || typeof options.lang !== 'string') {
        options.lang = this.getSetting('lang');
      }
      var langItems = this.lang.hasOwnProperty(options.lang) ? this.lang[options.lang] : {};
      options.langItems = options.hasOwnProperty('langItems') && coreuiTableUtils.isObject(options.langItems) ? $.extend(true, {}, langItems, options.langItems) : langItems;
      var instance = $.extend(true, {}, coreuiTableInstance);
      instance._init(this, options instanceof Object ? options : {});
      var tableId = instance.getId();
      this._instances[tableId] = instance;
      return instance;
    },
    /**
     * @param {string} id
     * @returns {object|null}
     */
    get: function get(id) {
      if (!this._instances.hasOwnProperty(id)) {
        return null;
      }
      if (!$('#coreui-table-' + id)[0]) {
        delete this._instances[id];
        return null;
      }
      return this._instances[id];
    },
    /**
     * Установка настроек
     * @param {object} settings
     */
    setSettings: function setSettings(settings) {
      this._settings = $.extend(true, {}, this._settings, settings);
    },
    /**
     * Получение значения настройки
     * @param {string} name
     */
    getSetting: function getSetting(name) {
      var value = null;
      if (this._settings.hasOwnProperty(name)) {
        value = this._settings[name];
      }
      return value;
    }
  };

  var langEn = {
    "emptyRecords": "No records",
    "loading": "Loading...",
    "total": "Total",
    "all": "All",
    "complete": "Complete",
    "search": "Search",
    "searchAction": "Search",
    "clear": "Clear",
    "monthNames": ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
    "monthNamesShort": ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
    "dayNames": ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
    "dayNamesMin": ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
  };

  var langRu = {
    "emptyRecords": "Нет записей",
    "loading": "Загрузка...",
    "total": "Всего",
    "all": "Все",
    "complete": "Применить",
    "search": "Поиск",
    "searchAction": "Искать",
    "clear": "Очистить",
    "monthNames": ['Январь', 'Февраль', 'Март', 'Апрель', 'Май', 'Июнь', 'Июль', 'Август', 'Сентябрь', 'Октябрь', 'Ноябрь', 'Декабрь'],
    "monthNamesShort": ['Янв', 'Фев', 'Мар', 'Апр', 'Май', 'Июн', 'Июл', 'Авг', 'Сен', 'Окт', 'Ноя', 'Дек'],
    "dayNames": ['воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота'],
    "dayNamesMin": ['Вс', 'Пн', 'Вт', 'Ср', 'Чт', 'Пт', 'Сб']
  };

  var Control = /*#__PURE__*/function () {
    /**
     * Инициализация
     * @param {object} table
     * @param {object} options
     */
    function Control(table, options) {
      _classCallCheck(this, Control);
      _defineProperty(this, "_id", null);
      _defineProperty(this, "_table", null);
      _defineProperty(this, "_options", {
        type: '',
        id: ''
      });
      this._table = table;
      this._options = $.extend(true, this._options, options);
      this._id = this._options.hasOwnProperty('id') && typeof this._options.id === 'string' && this._options.id ? this._options.id : coreuiTableUtils.hashCode();
    }

    /**
     * Получение ID элемента управления
     * @returns {string}
     */
    return _createClass(Control, [{
      key: "getId",
      value: function getId() {
        return this._id;
      }

      /**
       * Получение параметров
       * @returns {object}
       */
    }, {
      key: "getOptions",
      value: function getOptions() {
        return $.extend(true, {}, this._options);
      }

      /**
       * Формирование контента для размещения на странице
       * @returns {*}
       */
    }, {
      key: "render",
      value: function render() {
        return '';
      }
    }]);
  }();

  function _callSuper$S(_this, derived, args) {
    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      } catch (e) {
        return false;
      }
    }
    derived = _getPrototypeOf(derived);
    return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));
  }
  var ControlLink = /*#__PURE__*/function (_Control) {
    /**
     * Инициализация
     * @param {coreuiTableInstance} table
     * @param {Object}              options
     */
    function ControlLink(table, options) {
      _classCallCheck(this, ControlLink);
      options = $.extend(true, {
        id: null,
        type: 'link',
        url: null,
        content: null,
        onClick: null,
        attr: null
      }, options);
      return _callSuper$S(this, ControlLink, [table, options]);
    }

    /**
     * Формирование контента для размещения на странице
     * @returns {jQuery}
     */
    _inherits(ControlLink, _Control);
    return _createClass(ControlLink, [{
      key: "render",
      value: function render() {
        var that = this;
        var attributes = [];
        if (_typeof(this._options.attr) === 'object') {
          $.each(this._options.attr, function (name, value) {
            if (['string', 'number'].indexOf(_typeof(value)) >= 0) {
              attributes.push(name + '="' + value + '"');
            }
          });
        }
        var link = $(coreuiTableUtils.render(tpl['controls/link.html'], {
          url: this._options.url,
          content: this._options.content,
          attr: attributes.length > 0 ? ' ' + attributes.join(' ') : ''
        }));
        if (typeof this._options.onClick === 'function' || typeof this._options.onClick === 'string') {
          link.click(function (event) {
            if (typeof that._options.onClick === 'function') {
              return that._options.onClick(event, that._table);
            } else if (typeof that._options.onClick === 'string') {
              var func = new Function('event', 'table', 'control', that._options.onClick);
              func(event, that._table, that);
            }
          });
        }
        return link;
      }
    }]);
  }(Control);

  function _callSuper$R(_this, derived, args) {
    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      } catch (e) {
        return false;
      }
    }
    derived = _getPrototypeOf(derived);
    return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));
  }
  var ControlButton = /*#__PURE__*/function (_Control) {
    /**
     * Инициализация
     * @param {coreuiTableInstance} table
     * @param {Object}              options
     */
    function ControlButton(table, options) {
      _classCallCheck(this, ControlButton);
      options = $.extend(true, {
        id: null,
        type: 'button',
        content: null,
        onClick: null,
        attr: {
          "class": 'btn btn-secondary'
        }
      }, options);
      return _callSuper$R(this, ControlButton, [table, options]);
    }

    /**
     * Формирование контента для размещения на странице
     * @returns {jQuery}
     */
    _inherits(ControlButton, _Control);
    return _createClass(ControlButton, [{
      key: "render",
      value: function render() {
        var attributes = [];
        if (coreuiTableUtils.isObject(this._options.attr)) {
          $.each(this._options.attr, function (name, value) {
            if (['string', 'number'].indexOf(_typeof(value)) >= 0) {
              attributes.push(name + '="' + value + '"');
            }
          });
        }
        var btn = $(coreuiTableUtils.render(tpl['controls/button.html'], {
          content: this._options.content,
          attr: attributes.length > 0 ? ' ' + attributes.join(' ') : ''
        }));
        if (typeof this._options.onClick === 'function' || typeof this._options.onClick === 'string') {
          var that = this;
          btn.click(function (event) {
            if (typeof that._options.onClick === 'function') {
              that._options.onClick(event, that._table, that);
            } else if (typeof that._options.onClick === 'string') {
              var func = new Function('event', 'table', 'control', that._options.onClick);
              func(event, that._table, that);
            }
          });
        }
        return btn;
      }
    }]);
  }(Control);

  function _callSuper$Q(_this, derived, args) {
    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      } catch (e) {
        return false;
      }
    }
    derived = _getPrototypeOf(derived);
    return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));
  }
  var ControlDropdown = /*#__PURE__*/function (_Control) {
    /**
     * Инициализация
     * @param {coreuiTableInstance} table
     * @param {Object}              options
     */
    function ControlDropdown(table, options) {
      _classCallCheck(this, ControlDropdown);
      options = $.extend(true, {
        id: null,
        type: 'dropdown',
        content: null,
        items: null,
        attr: {
          "class": 'btn btn-primary'
        }
      }, options);
      return _callSuper$Q(this, ControlDropdown, [table, options]);
    }

    /**
     * Формирование контента для размещения на странице
     * @returns {string}
     */
    _inherits(ControlDropdown, _Control);
    return _createClass(ControlDropdown, [{
      key: "render",
      value: function render() {
        var options = this.getOptions();
        var table = this._table;
        var that = this;
        var items = [];
        var attributes = [];
        if (Array.isArray(options.items)) {
          options.items.map(function (item) {
            if (coreuiTableUtils.isObject(item) && typeof item.type === 'string') {
              if (item.type === 'link') {
                if (item.hasOwnProperty('link') && item.hasOwnProperty('content') && typeof item.url === 'string' && typeof item.content === 'string') {
                  var link = coreuiTableUtils.render(tpl['controls/dropdown/link.html'], {
                    url: item.url,
                    content: item.content
                  });
                  items.push(link);
                }
              } else if (item.type === 'button') {
                if (item.hasOwnProperty('content') && item.hasOwnProperty('onClick') && typeof item.content === 'string' && ['string', 'function'].indexOf(_typeof(item.onClick)) >= 0) {
                  var button = $(coreuiTableUtils.render(tpl['controls/dropdown/button.html'], {
                    url: item.url,
                    content: item.content
                  }));
                  button.click(function (event) {
                    if (typeof item.onClick === 'function') {
                      item.onClick(event, table, that);
                    } else if (typeof item.onClick === 'string') {
                      var func = new Function('event', 'table', 'control', item.onClick);
                      func(event, table, that);
                    }
                  });
                  items.push(button);
                }
              } else if (item.type === 'divider') {
                items.push(tpl['controls/dropdown/divider.html']);
              }
            }
          });
        }
        if (coreuiTableUtils.isObject(options.attr)) {
          if (options.attr.hasOwnProperty('class') && ['string', 'number'].indexOf(_typeof(options.attr["class"])) >= 0) {
            options.attr["class"] += ' dropdown-toggle';
          }
          if (options.attr.hasOwnProperty('type')) {
            delete options.attr.type;
          }
          if (options.attr.hasOwnProperty('id')) {
            delete options.attr.id;
          }
          if (options.attr.hasOwnProperty('data-bs-toggle')) {
            delete options.attr['data-bs-toggle'];
          }
          $.each(options.attr, function (name, value) {
            attributes.push(name + '="' + value + '"');
          });
        }
        var dropdown = $(coreuiTableUtils.render(tpl['controls/dropdown.html'], {
          content: options.content,
          position: options.hasOwnProperty('position') && typeof options.position === 'string' ? options.position : 'end',
          attr: attributes.length > 0 ? ' ' + attributes.join(' ') : ''
        }));
        if (items.length > 0) {
          var menu = dropdown.find('.dropdown-menu');
          items.map(function (item) {
            menu.append(item);
          });
        }
        return dropdown;
      }
    }]);
  }(Control);

  function _callSuper$P(_this, derived, args) {
    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      } catch (e) {
        return false;
      }
    }
    derived = _getPrototypeOf(derived);
    return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));
  }
  var ControlButtonGroup = /*#__PURE__*/function (_Control) {
    /**
     * Инициализация
     * @param {coreuiTableInstance} table
     * @param {Object}              options
     */
    function ControlButtonGroup(table, options) {
      var _this2;
      _classCallCheck(this, ControlButtonGroup);
      options = $.extend(true, {
        id: null,
        type: 'button_group',
        buttons: null
      }, options);
      _this2 = _callSuper$P(this, ControlButtonGroup, [table, options]);
      _defineProperty(_this2, "_link", {
        attr: {
          "class": 'btn btn-secondary'
        }
      });
      _defineProperty(_this2, "_button", {
        attr: {
          "class": 'btn btn-secondary'
        }
      });
      _defineProperty(_this2, "_dropdown", {
        attr: {
          "class": 'btn btn-secondary'
        }
      });
      return _this2;
    }

    /**
     * Формирование контента для размещения на странице
     * @returns {string}
     */
    _inherits(ControlButtonGroup, _Control);
    return _createClass(ControlButtonGroup, [{
      key: "render",
      value: function render() {
        var options = this.getOptions();
        var buttons = [];
        var that = this;
        if (Array.isArray(options.buttons)) {
          /**
           * Создание ссылки
           * @param {Object} button
           */
          var makeLink = function makeLink(button) {
            var result = null;
            if (button.hasOwnProperty('link') && button.hasOwnProperty('content') && typeof button.link === 'string' && typeof button.content === 'string') {
              var attributes = [];
              if (!coreuiTableUtils.isObject(button.attr)) {
                button.attr = {};
              }
              if (button.attr.hasOwnProperty('href')) {
                delete button.attr.href;
              }
              if (!button.attr.hasOwnProperty('class')) {
                button.attr["class"] = that._link.attr["class"];
              }
              $.each(button.attr, function (name, value) {
                if (['string', 'number'].indexOf(_typeof(value)) >= 0) {
                  attributes.push(name + '="' + value + '"');
                }
              });
              result = coreuiTableUtils.render(tpl['controls/button_group/link.html'], {
                url: button.url,
                attr: attributes,
                content: button.content
              });
            }
            return result;
          };
          /**
           * Создание кнопки
           * @param {Object} button
           */
          var makeButton = function makeButton(button) {
            var result = null;
            if (button.hasOwnProperty('content') && button.hasOwnProperty('onClick') && typeof button.content === 'string' && ['string', 'function'].indexOf(_typeof(button.onClick)) >= 0) {
              var attributes = [];
              if (!coreuiTableUtils.isObject(button.attr)) {
                button.attr = {};
              }
              if (button.attr.hasOwnProperty('type')) {
                delete button.attr.type;
              }
              if (!button.attr.hasOwnProperty('class')) {
                button.attr["class"] = that._button.attr["class"];
              }
              $.each(button.attr, function (name, value) {
                if (['string', 'number'].indexOf(_typeof(value)) >= 0) {
                  attributes.push(name + '="' + value + '"');
                }
              });
              result = $(coreuiTableUtils.render(tpl['controls/button_group/button.html'], {
                content: button.content,
                attr: attributes
              }));
              if (button.hasOwnProperty('content') && button.hasOwnProperty('onClick') && ['string', 'function'].indexOf(_typeof(button.onClick)) >= 0 && typeof button.content === 'string') {
                result.click(function (event) {
                  if (typeof button.onClick === 'function') {
                    button.onClick(event, that._table, that);
                  } else if (typeof button.onClick === 'string') {
                    var func = new Function('event', 'table', 'control', button.onClick);
                    func(event, that._table, that);
                  }
                });
              }
            }
            return result;
          };
          /**
           * Создание выпадающего меню
           * @param {Object} button
           */
          var makeDropdown = function makeDropdown(button) {
            var result = null;
            if (Array.isArray(button.items)) {
              var attributes = [];
              var items = [];
              button.items.map(function (item) {
                if (coreuiTableUtils.isObject(item) && typeof item.type === 'string') {
                  if (item.type === 'link') {
                    if (item.hasOwnProperty('link') && item.hasOwnProperty('content') && typeof item.url === 'string' && typeof item.content === 'string' && item.url) {
                      items.push(coreuiTableUtils.render(tpl['controls/button_group/dropdown/link.html'], {
                        url: item.url,
                        content: item.content
                      }));
                    }
                  } else if (item.type === 'button') {
                    if (item.hasOwnProperty('content') && item.hasOwnProperty('onClick') && typeof item.content === 'string' && ['string', 'function'].indexOf(_typeof(item.onClick)) >= 0) {
                      var btn = $(coreuiTableUtils.render(tpl['controls/button_group/dropdown/button.html'], {
                        content: item.content
                      }));
                      btn.click(function (event) {
                        if (typeof item.onClick === 'function') {
                          item.onClick(event, that._table, that);
                        } else if (typeof item.onClick === 'string') {
                          var func = new Function('event', 'table', 'control', item.onClick);
                          func(event, that._table, that);
                        }
                      });
                      items.push(btn);
                    }
                  } else if (item.type === 'divider') {
                    items.push(tpl['controls/button_group/dropdown/divider.html']);
                  }
                }
              });
              if (!coreuiTableUtils.isObject(button.attr)) {
                button.attr = {};
              }
              if (button.attr.hasOwnProperty('type')) {
                delete button.attr.type;
              }
              if (!button.attr.hasOwnProperty('class')) {
                button.attr["class"] = that._dropdown.attr["class"];
              }
              if (button.attr.hasOwnProperty('class') && ['string', 'number'].indexOf(_typeof(button.attr["class"])) >= 0) {
                button.attr["class"] += ' dropdown-toggle';
              }
              $.each(button.attr, function (name, value) {
                if (['string', 'number'].indexOf(_typeof(value)) >= 0) {
                  attributes.push(name + '="' + value + '"');
                }
              });
              result = $(coreuiTableUtils.render(tpl['controls/button_group/link.html'], {
                attr: attributes,
                position: button.hasOwnProperty('position') && typeof button.position === 'string' ? button.position : 'end',
                content: button.content
              }));
              if (items.length > 0) {
                var menu = result.find('.dropdown-menu');
                items.map(function (item) {
                  menu.append(item);
                });
              }
            }
            return result;
          };
          options.buttons.map(function (key, button) {
            if (coreuiTableUtils.isObject(button) && typeof button.type === 'string') {
              if (button.type === 'link') {
                var linkElement = makeLink(button);
                if (linkElement) {
                  buttons.push(linkElement);
                }
              } else if (button.type === 'button') {
                var buttonElement = makeButton(button);
                if (buttonElement) {
                  buttons.push(buttonElement);
                }
              } else if (button.type === 'dropdown') {
                var dropdownElement = makeDropdown(button);
                if (dropdownElement) {
                  buttons.push(dropdownElement);
                }
              }
            }
          });
        }
        var btnGroup = $(tpl['controls/button_group.html']);
        buttons.map(function (button) {
          btnGroup.append(button);
        });
        return btnGroup;
      }
    }]);
  }(Control);

  function _callSuper$O(_this, derived, args) {
    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      } catch (e) {
        return false;
      }
    }
    derived = _getPrototypeOf(derived);
    return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));
  }
  var ControlCustom = /*#__PURE__*/function (_Control) {
    /**
     * Инициализация
     * @param {coreuiTableInstance} table
     * @param {Object}              options
     */
    function ControlCustom(table, options) {
      _classCallCheck(this, ControlCustom);
      options = $.extend(true, {
        id: null,
        type: 'custom',
        content: null
      }, options);
      return _callSuper$O(this, ControlCustom, [table, options]);
    }

    /**
     * Формирование контента для размещения на странице
     * @returns {string|HTMLElement|jQuery}
     */
    _inherits(ControlCustom, _Control);
    return _createClass(ControlCustom, [{
      key: "render",
      value: function render() {
        if (typeof this._options.content === 'string') {
          return this._options.content;
        } else if (typeof this._options.content === 'function') {
          return this._options.content();
        }
      }
    }]);
  }(Control);

  function _callSuper$N(_this, derived, args) {
    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      } catch (e) {
        return false;
      }
    }
    derived = _getPrototypeOf(derived);
    return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));
  }
  var ControlPageSize = /*#__PURE__*/function (_Control) {
    /**
     * Инициализация
     * @param {coreuiTableInstance} table
     * @param {Object}              options
     */
    function ControlPageSize(table, options) {
      var _this2;
      _classCallCheck(this, ControlPageSize);
      var optionsOriginal = {
        id: null,
        type: 'page_size',
        attr: {
          "class": 'form-select'
        },
        list: [25, 50, 100, 1000]
      };
      if (options.hasOwnProperty('attr') && coreuiTableUtils.isObject(options.attr)) {
        options.attr = coreuiTableUtils.mergeAttr(optionsOriginal.attr, options.attr);
      }
      options = $.extend(true, optionsOriginal, options);
      _this2 = _callSuper$N(this, ControlPageSize, [table, options]);
      if (!Array.isArray(_this2._options.list)) {
        _this2._options.list = [];
      }
      if (_this2._options.list.indexOf(_this2._table._recordsPerPage) < 0) {
        _this2._options.list.unshift(_this2._table._recordsPerPage);
      }
      return _this2;
    }

    /**
     * Формирование контента для размещения на странице
     * @returns {string}
     */
    _inherits(ControlPageSize, _Control);
    return _createClass(ControlPageSize, [{
      key: "render",
      value: function render() {
        var attributes = [];
        var table = this._table;
        if (coreuiTableUtils.isObject(this._options.attr)) {
          $.each(this._options.attr, function (name, value) {
            if (['string', 'number'].indexOf(_typeof(value)) >= 0) {
              attributes.push(name + '="' + value + '"');
            }
          });
        }
        var control = coreuiTableUtils.render(tpl['controls/page-size.html'], {
          recordsPerPageList: this._options.list,
          recordsPerPage: table._recordsPerPage,
          attr: attributes.length > 0 ? ' ' + attributes.join(' ') : '',
          lang: table.getLang()
        });
        var selectPageSize = $('select', control);
        selectPageSize.change(function () {
          table._page = 1;
          table.setPageSize(Number(selectPageSize.val()));
          table.reload();
        });
        table.on('page_size_update', function () {
          selectPageSize.val(table._recordsPerPage);
        });
        return control;
      }
    }]);
  }(Control);

  function _callSuper$M(_this, derived, args) {
    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      } catch (e) {
        return false;
      }
    }
    derived = _getPrototypeOf(derived);
    return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));
  }
  var ControlPageJump = /*#__PURE__*/function (_Control) {
    /**
     * Инициализация
     * @param {coreuiTableInstance} table
     * @param {Object}              options
     */
    function ControlPageJump(table, options) {
      _classCallCheck(this, ControlPageJump);
      var optionsOriginal = {
        id: null,
        type: 'page_jump',
        attr: {
          "class": 'input-group'
        }
      };
      if (options.hasOwnProperty('attr') && coreuiTableUtils.isObject(options.attr)) {
        options.attr = coreuiTableUtils.mergeAttr(optionsOriginal.attr, options.attr);
      }
      options = $.extend(true, optionsOriginal, options);
      return _callSuper$M(this, ControlPageJump, [table, options]);
    }

    /**
     * Формирование контента для размещения на странице
     * @returns {jQuery}
     */
    _inherits(ControlPageJump, _Control);
    return _createClass(ControlPageJump, [{
      key: "render",
      value: function render() {
        var attributes = [];
        var table = this._table;
        if (coreuiTableUtils.isObject(this._options.attr)) {
          $.each(this._options.attr, function (name, value) {
            if (['string', 'number'].indexOf(_typeof(value)) >= 0) {
              attributes.push(name + '="' + value + '"');
            }
          });
        }
        var control = $(coreuiTableUtils.render(tpl['controls/page-jump.html'], {
          attr: attributes.length > 0 ? ' ' + attributes.join(' ') : ''
        }));
        var input = $('input', control);
        var button = $('button', control);
        button.click(function () {
          table.goPage(input.val());
        });
        input.keyup(function (event) {
          if (event.key === 'Enter' || event.keyCode === 13) {
            table.goPage(input.val());
          }
        });
        return control;
      }
    }]);
  }(Control);

  var controlPages = {
    /**
     * Формирование контрола
     * @param table
     * @param options
     * @return {jQuery}
     */
    render: function render(table, options) {
      var attributes = [];
      var showPrev = !!options.show.prev;
      var showNext = !!options.show.next;
      var showDividerStart = false;
      var showDividerEnd = false;
      var showPageFirst = false;
      var showPageLast = false;
      var pages = [];
      var pagesTotal = table._recordsTotal > 0 && table._recordsPerPage > 0 ? Math.ceil(table._recordsTotal / table._recordsPerPage) : 1;
      if (coreuiTableUtils.isObject(options.attr)) {
        $.each(options.attr, function (name, value) {
          if (['string', 'number'].indexOf(_typeof(value)) >= 0) {
            attributes.push(name + '="' + value + '"');
          }
        });
      }
      if (table._recordsTotal > 0 && options.count > 0 && coreuiTableUtils.isNumeric(options.count)) {
        var count = Math.min(options.count, pagesTotal);
        var countHalf = Math.max(0, Math.floor(count / 2));
        if (count % 2 === 0) {
          countHalf -= 1;
        }
        var start = table._page > 1 ? Math.max(1, table._page - countHalf) : table._page;
        if (start + count > pagesTotal) {
          start = pagesTotal - (count - 1);
        }
        for (var i = 0; i < count; i++) {
          pages.push(start + i);
        }
      } else {
        if (options.count > 0 && table._page > 1) {
          pages.push(table._page);
        }
      }
      if (pages.length > 0) {
        if (pages[0] >= 2) {
          showPageFirst = true;
        }
        if (pages[0] >= 3) {
          showDividerStart = true;
        }
        if (pages[pages.length - 1] + 1 < pagesTotal) {
          showDividerEnd = true;
        }
        if (pages[pages.length - 1] < pagesTotal) {
          showPageLast = true;
        }
      }
      var control = $(coreuiTableUtils.render(tpl['controls/pages.html'], {
        currentPage: table._page,
        isActivePrev: table._page > 1,
        isActiveNext: table._page < pagesTotal,
        pagesTotal: pagesTotal,
        showPrev: showPrev,
        showPageFirst: showPageFirst,
        showDividerStart: showDividerStart,
        pages: pages,
        showDividerEnd: showDividerEnd,
        showPageLast: showPageLast,
        showNext: showNext,
        attr: attributes.length > 0 ? ' ' + attributes.join(' ') : '',
        lang: table.getLang()
      }));
      var btnPrev = control.find('.coreui-table__page_prev');
      if (btnPrev[0]) {
        if (table._page <= 1) {
          btnPrev.addClass('disabled');
        } else {
          btnPrev.click(function () {
            if (table._page > 1) {
              table.prevPage();
            }
          });
        }
      }
      var btnNext = control.find('.coreui-table__page_next');
      if (btnNext[0]) {
        btnNext.click(function () {
          table.nextPage();
        });
      }
      var btnPages = control.find('.coreui-table__page');
      if (btnPages[0]) {
        btnPages.click(function () {
          var page = Number($.trim($(this).text()));
          if (page > 0) {
            table.goPage(page);
          }
        });
      }
      return control;
    }
  };

  function _callSuper$L(_this, derived, args) {
    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      } catch (e) {
        return false;
      }
    }
    derived = _getPrototypeOf(derived);
    return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));
  }
  var ControlPages = /*#__PURE__*/function (_Control) {
    /**
     * Инициализация
     * @param {coreuiTableInstance} table
     * @param {Object}              options
     */
    function ControlPages(table, options) {
      var _this2;
      _classCallCheck(this, ControlPages);
      var optionsOriginal = {
        show: {
          prev: true,
          next: true
        },
        count: 3,
        attr: {
          "class": 'pagination mb-0'
        }
      };
      if (options.hasOwnProperty('attr') && coreuiTableUtils.isObject(options.attr)) {
        options.attr = coreuiTableUtils.mergeAttr(optionsOriginal.attr, options.attr);
      }
      options = $.extend(true, optionsOriginal, options);
      _this2 = _callSuper$L(this, ControlPages, [table, options]);
      _defineProperty(_this2, "_control", null);
      return _this2;
    }

    /**
     * Формирование контента для размещения на странице
     * @returns {jQuery}
     */
    _inherits(ControlPages, _Control);
    return _createClass(ControlPages, [{
      key: "render",
      value: function render() {
        var table = this._table;
        var options = this._options;
        var control = controlPages.render(table, options);
        table.on('records_show', function () {
          var controlUpdate = controlPages.render(table, options);
          control.replaceWith(controlUpdate);
          control = controlUpdate;
        });
        this._control = control;
        return control;
      }
    }]);
  }(Control);

  function _callSuper$K(_this, derived, args) {
    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      } catch (e) {
        return false;
      }
    }
    derived = _getPrototypeOf(derived);
    return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));
  }
  var ControlTotal = /*#__PURE__*/function (_Control) {
    /**
     * Инициализация
     * @param {coreuiTableInstance} table
     * @param {Object}              options
     */
    function ControlTotal(table, options) {
      _classCallCheck(this, ControlTotal);
      var optionsOriginal = {
        type: 'total',
        attr: {
          "class": 'px-1'
        }
      };
      if (options.hasOwnProperty('attr') && coreuiTableUtils.isObject(options.attr)) {
        options.attr = coreuiTableUtils.mergeAttr(optionsOriginal.attr, options.attr);
      }
      options = $.extend(true, optionsOriginal, options);
      return _callSuper$K(this, ControlTotal, [table, options]);
    }

    /**
     * Формирование контента для размещения на странице
     * @returns {string}
     */
    _inherits(ControlTotal, _Control);
    return _createClass(ControlTotal, [{
      key: "render",
      value: function render() {
        var attributes = [];
        var table = this._table;
        if (coreuiTableUtils.isObject(this._options.attr)) {
          $.each(this._options.attr, function (name, value) {
            if (['string', 'number'].indexOf(_typeof(value)) >= 0) {
              attributes.push(name + '="' + value + '"');
            }
          });
        }
        var control = $(coreuiTableUtils.render(tpl['controls/total.html'], {
          recordsTotal: table._recordsTotal,
          attr: attributes.length > 0 ? ' ' + attributes.join(' ') : '',
          lang: table.getLang()
        }));
        table.on('records_show', function () {
          control.find('.coreui-table__count-total').text(table._recordsTotal);
        });
        return control;
      }
    }]);
  }(Control);

  function _callSuper$J(_this, derived, args) {
    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      } catch (e) {
        return false;
      }
    }
    derived = _getPrototypeOf(derived);
    return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));
  }
  var ControlSearch = /*#__PURE__*/function (_Control) {
    /**
     * Инициализация
     * @param {coreuiTableInstance} table
     * @param {Object}              options
     */
    function ControlSearch(table, options) {
      var _this2;
      _classCallCheck(this, ControlSearch);
      options = $.extend(true, {
        btn: {
          attr: {
            "class": 'btn btn-outline-secondary'
          },
          content: null
        },
        btnClear: {
          content: "<i class=\"bi bi-x text-danger\"></i>",
          attr: {
            "class": 'btn btn-outline-secondary'
          }
        },
        btnComplete: {
          attr: {
            "class": 'btn btn-primary'
          },
          content: null
        }
      }, options);
      _this2 = _callSuper$J(this, ControlSearch, [table, options]);
      if (!coreuiTableUtils.isObject(_this2._options.btn)) {
        _this2._options.btn = {};
      }
      if (!_this2._options.btn.hasOwnProperty('content') || typeof _this2._options.btn.content !== 'string') {
        _this2._options.btn.content = '<i class="bi bi-search"></i> ' + table.getLang().search;
      }
      if (!coreuiTableUtils.isObject(_this2._options.btnClear)) {
        _this2._options.btnClear = {};
      }
      if (!_this2._options.btnClear.hasOwnProperty('content') || typeof _this2._options.btnClear.content !== 'string') {
        _this2._options.btnClear.content = table.getLang().clear;
      }
      if (!coreuiTableUtils.isObject(_this2._options.btnComplete)) {
        _this2._options.btnComplete = {};
      }
      if (!_this2._options.btnComplete.hasOwnProperty('content') || typeof _this2._options.btnComplete.content !== 'string') {
        _this2._options.btnComplete.content = table.getLang().searchAction;
      }
      return _this2;
    }

    /**
     * Формирование контента для размещения на странице
     * @returns {jQuery}
     */
    _inherits(ControlSearch, _Control);
    return _createClass(ControlSearch, [{
      key: "render",
      value: function render() {
        var btnAttr = [];
        var btnContent = '';
        var btnClear = '';
        var that = this;
        var table = this._table;
        if (!coreuiTableUtils.isObject(this._options.btn)) {
          this._options.btn = {};
        }
        if (!coreuiTableUtils.isObject(this._options.btn.attr)) {
          this._options.btn.attr = {};
        }
        if (!this._options.btn.attr.hasOwnProperty('class') || typeof this._options.btn.attr["class"] !== 'string') {
          this._options.btn.attr["class"] = 'btn-search-toggle';
        } else {
          this._options.btn.attr["class"] += ' btn-search-toggle';
        }
        $.each(this._options.btn.attr, function (name, value) {
          btnAttr.push(name + '="' + value + '"');
        });
        if (typeof this._options.btn.content === 'string') {
          btnContent = this._options.btn.content;
        }
        if (this._table.getSearchData().length > 0) {
          btnClear = this._renderBtnClear();
        }
        var control = $(coreuiTableUtils.render(tpl['controls/search.html'], {
          btnContent: btnContent,
          btnAttr: btnAttr.length > 0 ? ' ' + btnAttr.join(' ') : '',
          btnClear: btnClear
        }));
        var buttonToggle = control.find('.btn-search-toggle');
        var buttonClear = control.find('.btn-clear');
        buttonToggle.click(function () {
          var container = coreuiTableElements.getSearchContainer(table.getId());
          var columnsContainer = coreuiTableElements.getColumnsContainer(table.getId());
          if (columnsContainer[0]) {
            columnsContainer.hide();
          }
          if (container[0]) {
            container.fadeToggle('fast');
          } else {
            var controls = [];
            var btnCompleteAttr = [];
            var btnCompleteContent = '';
            var tableOptions = table.getOptions();
            var labelWidth = tableOptions.search.hasOwnProperty('labelWidth') && tableOptions.search.labelWidth ? tableOptions.search.labelWidth : 160;
            table._search.map(function (searchControl) {
              var options = searchControl.getOptions();
              if (options.hasOwnProperty('field') && typeof options.field === 'string' && options.field) {
                var descriptionLabel = options.hasOwnProperty('descriptionLabel') && options.descriptionLabel ? options.descriptionLabel : null;
                var controlContainer = $(coreuiTableUtils.render(tpl['controls/search/control.html'], {
                  labelWidth: labelWidth + (typeof labelWidth === 'number' ? 'px' : ''),
                  descriptionLabel: descriptionLabel,
                  label: options.hasOwnProperty('label') && typeof options.label === 'string' ? options.label : '',
                  description: options.hasOwnProperty('description') && typeof options.description === 'string' ? options.description : '',
                  suffix: options.hasOwnProperty('suffix') && typeof options.suffix === 'string' ? options.suffix : ''
                }));
                controlContainer.find('.coreui-table__search-control_content').prepend(searchControl.render());
                controls.push(controlContainer);
              }
            });
            if (!coreuiTableUtils.isObject(that._options.btnComplete)) {
              that._options.btnComplete = {};
            }
            if (!coreuiTableUtils.isObject(that._options.btnComplete.attr)) {
              that._options.btnComplete.attr = {};
            }
            if (that._options.btnComplete.attr.hasOwnProperty('type')) {
              delete that._options.btnComplete.attr.type;
            }
            if (!that._options.btnComplete.attr.hasOwnProperty('class') || typeof that._options.btnComplete.attr["class"] !== 'string') {
              that._options.btnComplete.attr["class"] = 'btn-complete';
            } else {
              that._options.btnComplete.attr["class"] += ' btn-complete';
            }
            if (coreuiTableUtils.isObject(that._options.btnComplete.attr)) {
              $.each(that._options.btnComplete.attr, function (name, value) {
                if (['string', 'number'].indexOf(_typeof(value)) >= 0) {
                  btnCompleteAttr.push(name + '="' + value + '"');
                }
              });
            }
            if (typeof that._options.btnComplete.content === 'string') {
              btnCompleteContent = that._options.btnComplete.content;
            }
            var searchContainer = $(coreuiTableUtils.render(tpl['controls/search/container.html'], {
              labelWidth: labelWidth + (typeof labelWidth === 'number' ? 'px' : ''),
              btnCompleteAttr: btnCompleteAttr.length > 0 ? ' ' + btnCompleteAttr.join(' ') : '',
              btnCompleteContent: btnCompleteContent
            }));
            $('.btn-complete', searchContainer).click(function () {
              table.searchRecords();
              var container = coreuiTableElements.getSearchContainer(table.getId());
              if (container[0]) {
                container.fadeOut(200);
              }
            });
            if (controls.length > 0) {
              var searchControls = searchContainer.find('.coreui-table__search_controls');
              controls.map(function (control) {
                searchControls.append(control);
              });
            }
            var wrapper = coreuiTableElements.getWrapper(table.getId());
            wrapper.before(searchContainer);
          }
        });
        buttonClear.click(function () {
          table.clearSearch();
          var container = coreuiTableElements.getSearchContainer(table.getId());
          if (container[0]) {
            container.fadeOut('fast');
          }
          buttonClear.remove();
        });
        table.on('search_change', function (searchData) {
          var buttonClear = $('button.btn-clear', control);
          if (searchData.length > 0) {
            if (!buttonClear[0]) {
              var _btnClear = $(that._renderBtnClear());
              _btnClear.click(function () {
                table.clearSearch();
                var container = coreuiTableElements.getSearchContainer(table.getId());
                if (container[0]) {
                  container.fadeOut('fast');
                }
                _btnClear.remove();
              });
              _btnClear.insertAfter(buttonToggle);
            }
          } else {
            buttonClear.remove();
            var container = coreuiTableElements.getSearchContainer(table.getId());
            if (container[0]) {
              container.fadeOut('fast');
            }
          }
        });
        return control;
      }

      /**
       * Рендер кнопки отмены
       * @private
       */
    }, {
      key: "_renderBtnClear",
      value: function _renderBtnClear() {
        var attributes = [];
        var content = '';
        if (!coreuiTableUtils.isObject(this._options.btnClear)) {
          this._options.btnClear = {};
        }
        if (!coreuiTableUtils.isObject(this._options.btnClear.attr)) {
          this._options.btnClear.attr = {};
        }
        if (!this._options.btnClear.attr.hasOwnProperty('class') || typeof this._options.btnClear.attr["class"] !== 'string') {
          this._options.btnClear.attr["class"] = 'btn-clear';
        } else {
          this._options.btnClear.attr["class"] += ' btn-clear';
        }
        $.each(this._options.btnClear.attr, function (name, value) {
          attributes.push(name + '="' + value + '"');
        });
        if (typeof this._options.btnClear.content === 'string') {
          content = this._options.btnClear.content;
        }
        return coreuiTableUtils.render(tpl['controls/search/clear.html'], {
          content: content,
          attr: attributes.length > 0 ? ' ' + attributes.join(' ') : ''
        });
      }
    }]);
  }(Control);

  function _callSuper$I(_this, derived, args) {
    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      } catch (e) {
        return false;
      }
    }
    derived = _getPrototypeOf(derived);
    return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));
  }
  var ControlColumns = /*#__PURE__*/function (_Control) {
    /**
     * Инициализация
     * @param {coreuiTableInstance} table
     * @param {Object}              options
     */
    function ControlColumns(table, options) {
      var _this2;
      _classCallCheck(this, ControlColumns);
      options = $.extend(true, {
        id: null,
        type: 'columns',
        btn: {
          content: '<i class="bi bi-layout-three-columns"></i>',
          attr: {
            "class": 'btn btn-outline-secondary'
          }
        },
        btnComplete: {
          content: null,
          attr: {
            "class": 'btn btn-primary'
          }
        }
      }, options);
      _this2 = _callSuper$I(this, ControlColumns, [table, options]);
      if (!coreuiTableUtils.isObject(_this2._options.btn)) {
        _this2._options.btn = {};
      }
      if (!coreuiTableUtils.isObject(_this2._options.btnComplete)) {
        _this2._options.btnComplete = {};
      }
      if (coreuiTableUtils.isObject(_this2._options.btnComplete) && typeof _this2._options.btnComplete.content !== 'string') {
        _this2._options.btnComplete.content = table.getLang().complete;
      }
      return _this2;
    }

    /**
     * Формирование контента для размещения на странице
     * @returns {jQuery}
     */
    _inherits(ControlColumns, _Control);
    return _createClass(ControlColumns, [{
      key: "render",
      value: function render() {
        var that = this;
        var table = this._table;
        var attributes = [];
        if (coreuiTableUtils.isObject(this._options.btn.attr)) {
          $.each(this._options.btn.attr, function (name, value) {
            if (['string', 'number'].indexOf(_typeof(value)) >= 0) {
              attributes.push(name + '="' + value + '"');
            }
          });
        }
        var btn = $(coreuiTableUtils.render(tpl['controls/columns.html'], {
          btnContent: this._options.btn.content,
          btnAttr: attributes.length > 0 ? ' ' + attributes.join(' ') : ''
        }));
        btn.click(function () {
          var container = coreuiTableElements.getColumnsContainer(table.getId());
          var containerSearch = coreuiTableElements.getSearchContainer(table.getId());
          if (containerSearch[0]) {
            containerSearch.hide();
          }
          if (container[0]) {
            container.fadeToggle('fast');
          } else {
            var columns = [];
            var showAll = true;
            var btnCompleteAttr = [];
            var btnCompleteContent = '';
            var wrapper = coreuiTableElements.getWrapper(table.getId());
            table._columns.map(function (column) {
              var options = column.getOptions();
              if (options.hasOwnProperty('field') && typeof options.field === 'string' && options.field) {
                var isShow = column.isShow();
                columns.push({
                  field: options.field,
                  label: options.hasOwnProperty('label') && typeof options.label === 'string' ? options.label : '',
                  show: isShow
                });
                if (!isShow) {
                  showAll = false;
                }
              }
            });
            var options = that.getOptions();
            if (!coreuiTableUtils.isObject(options.btnComplete)) {
              options.btnComplete = {};
            }
            if (!coreuiTableUtils.isObject(options.btnComplete.attr)) {
              options.btnComplete.attr = {};
            }
            if (options.btnComplete.attr.hasOwnProperty('type')) {
              delete options.btnComplete.attr.type;
            }
            if (!options.btnComplete.attr.hasOwnProperty('class') || typeof options.btnComplete.attr["class"] !== 'string') {
              options.btnComplete.attr["class"] = 'btn-complete';
            } else {
              options.btnComplete.attr["class"] += ' btn-complete';
            }
            if (coreuiTableUtils.isObject(options.btnComplete.attr)) {
              $.each(options.btnComplete.attr, function (name, value) {
                if (['string', 'number'].indexOf(_typeof(value)) >= 0) {
                  btnCompleteAttr.push(name + '="' + value + '"');
                }
              });
            }
            if (typeof options.btnComplete.content === 'string') {
              btnCompleteContent = options.btnComplete.content;
            }
            var containerList = $(coreuiTableUtils.render(tpl['controls/columns/list.html'], {
              showAll: showAll,
              columns: columns,
              btnCompleteAttr: btnCompleteAttr.length > 0 ? ' ' + btnCompleteAttr.join(' ') : '',
              btnCompleteContent: btnCompleteContent,
              lang: table.getLang()
            }));
            $('.coreui-table__check_all input', containerList).change(function () {
              $('.coreui-table_check-column input', containerList).prop('checked', $(this).is(":checked"));
            });
            $('.btn-complete', containerList).click(function () {
              var columns = [];
              $('.coreui-table_check-column input:checked', containerList).each(function (key, input) {
                columns.push($(input).val());
              });
              table.setColumnsShow(columns);
              containerList.fadeOut('fast');
            });
            wrapper.before(containerList);
          }
        });
        return btn;
      }
    }]);
  }(Control);

  function _callSuper$H(_this, derived, args) {
    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      } catch (e) {
        return false;
      }
    }
    derived = _getPrototypeOf(derived);
    return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));
  }
  var ControlCaption = /*#__PURE__*/function (_Control) {
    /**
     * Инициализация
     * @param {coreuiTableInstance} table
     * @param {Object}              options
     */
    function ControlCaption(table, options) {
      _classCallCheck(this, ControlCaption);
      options = $.extend(true, {
        id: null,
        type: 'caption',
        title: null,
        description: null,
        value: null
      }, options);
      return _callSuper$H(this, ControlCaption, [table, options]);
    }

    /**
     * Формирование контента для размещения на странице
     * @returns {string}
     */
    _inherits(ControlCaption, _Control);
    return _createClass(ControlCaption, [{
      key: "render",
      value: function render() {
        return coreuiTableUtils.render(tpl['controls/caption.html'], {
          title: this._options.title,
          description: this._options.description,
          value: this._options.value
        });
      }
    }]);
  }(Control);

  function _callSuper$G(_this, derived, args) {
    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      } catch (e) {
        return false;
      }
    }
    derived = _getPrototypeOf(derived);
    return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));
  }
  var ControlFilterClear = /*#__PURE__*/function (_Control) {
    /**
     * Инициализация
     * @param {coreuiTableInstance} table
     * @param {Object}              options
     */
    function ControlFilterClear(table, options) {
      var _this2;
      _classCallCheck(this, ControlFilterClear);
      options = $.extend(true, {
        id: null,
        type: 'filter_clear',
        content: null,
        attr: {
          "class": 'btn btn-secondary'
        }
      }, options);
      _this2 = _callSuper$G(this, ControlFilterClear, [table, options]);
      if (!_this2._options.hasOwnProperty('content') || typeof _this2._options.content !== 'string') {
        _this2._options.content = '<i class="bi bi-x"></i> ' + table.getLang().clear;
      }
      return _this2;
    }

    /**
     * Формирование контента
     * @returns {string}
     */
    _inherits(ControlFilterClear, _Control);
    return _createClass(ControlFilterClear, [{
      key: "render",
      value: function render() {
        var options = this.getOptions();
        var table = this._table;
        if (!coreuiTableUtils.isObject(options.attr)) {
          options.attr = {};
        }
        if (options.attr.hasOwnProperty('type')) {
          delete options.attr.type;
        }
        var filterData = table.getFilterData();
        if (filterData.length === 0) {
          if (options.attr.hasOwnProperty('style') && typeof options.attr.style === 'string') {
            options.attr.style += ';display:none;';
          } else {
            options.attr.style = "display:none";
          }
        }
        var attr = [];
        $.each(options.attr, function (name, value) {
          if (['string', 'number'].indexOf(_typeof(value)) >= 0) {
            attr.push(name + '="' + value + '"');
          }
        });
        var button = $(coreuiTableUtils.render(tpl['controls/filter_clear.html'], {
          attr: attr.length > 0 ? ' ' + attr.join(' ') : '',
          content: options.content ? options.content : ''
        }));
        button.click(function () {
          table.clearFilters();
        });
        table.on('filters_change', function (filterData) {
          if (filterData.length > 0) {
            button.show();
          } else {
            button.hide();
          }
        });
        return button;
      }
    }]);
  }(Control);

  function _callSuper$F(_this, derived, args) {
    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      } catch (e) {
        return false;
      }
    }
    derived = _getPrototypeOf(derived);
    return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));
  }
  var ControlDivider = /*#__PURE__*/function (_Control) {
    /**
     * Инициализация
     * @param {coreuiTableInstance} table
     * @param {Object}              options
     */
    function ControlDivider(table, options) {
      _classCallCheck(this, ControlDivider);
      options = $.extend(true, {
        type: 'divider',
        width: 40,
        text: '',
        attr: {
          "class": 'd-inline-block text-body-tertiary text-center',
          style: 'height:20px'
        }
      }, options);
      return _callSuper$F(this, ControlDivider, [table, options]);
    }

    /**
     * Формирование контента для размещения на странице
     * @returns {string}
     */
    _inherits(ControlDivider, _Control);
    return _createClass(ControlDivider, [{
      key: "render",
      value: function render() {
        var attributes = [];
        this._options.attr = coreuiTableUtils.mergeAttr(this._options.attr, {
          style: 'width:' + this._options.width + 'px'
        });
        $.each(this._options.attr, function (name, value) {
          if (['string', 'number'].indexOf(_typeof(value)) >= 0) {
            attributes.push(name + '="' + value + '"');
          }
        });
        return coreuiTableUtils.render(tpl['controls/divider.html'], {
          attr: attributes.length > 0 ? ' ' + attributes.join(' ') : '',
          text: typeof this._options.text === 'string' && this._options.text !== '' ? this._options.text : ''
        });
      }
    }]);
  }(Control);

  var Filter = /*#__PURE__*/function () {
    /**
     * Инициализация
     * @param {object} table
     * @param {object} options
     */
    function Filter(table, options) {
      _classCallCheck(this, Filter);
      _defineProperty(this, "_id", null);
      _defineProperty(this, "_table", null);
      _defineProperty(this, "_value", null);
      _defineProperty(this, "_control", null);
      _defineProperty(this, "_options", {
        id: '',
        type: '',
        field: null
      });
      this._table = table;
      this._options = $.extend(true, this._options, options);
      this._id = this._options.hasOwnProperty('id') && typeof this._options.id === 'string' && this._options.id ? this._options.id : coreuiTableUtils.hashCode();
    }

    /**
     * Получение параметров
     * @returns {object}
     */
    return _createClass(Filter, [{
      key: "getOptions",
      value: function getOptions() {
        return $.extend(true, {}, this._options);
      }

      /**
       * Получение id
       * @returns {string}
       */
    }, {
      key: "getId",
      value: function getId() {
        return this._id;
      }

      /**
       * Фильтрация данных
       * @returns {string} fieldValue
       * @returns {string} searchValue
       * @returns {boolean}
       */
    }, {
      key: "filter",
      value: function filter(fieldValue, searchValue) {
        if (['string', 'number'].indexOf(_typeof(fieldValue)) < 0 || ['string', 'number'].indexOf(_typeof(searchValue)) < 0) {
          return false;
        }
        return fieldValue.toString().toLowerCase().indexOf(searchValue.toString().toLowerCase()) >= 0;
      }

      /**
       * Установка значения
       * @param {string} value
       */
    }, {
      key: "setValue",
      value: function setValue(value) {}

      /**
       * Получение значения
       * @returns {string|null}
       */
    }, {
      key: "getValue",
      value: function getValue() {}

      /**
       * Получение название поля
       * @returns {string|null}
       */
    }, {
      key: "getField",
      value: function getField() {
        return this._options.field;
      }

      /**
       * Формирование контента
       * @returns {string}
       */
    }, {
      key: "render",
      value: function render() {}
    }]);
  }();

  function _callSuper$E(_this, derived, args) {
    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      } catch (e) {
        return false;
      }
    }
    derived = _getPrototypeOf(derived);
    return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));
  }
  var FilterText = /*#__PURE__*/function (_Filter) {
    /**
     * Инициализация
     * @param {coreuiTableInstance} table
     * @param {Object}              options
     */
    function FilterText(table, options) {
      var _this2;
      _classCallCheck(this, FilterText);
      options = $.extend(true, {
        id: null,
        type: 'text',
        field: null,
        label: null,
        value: null,
        width: 200,
        autoSearch: null,
        attr: {
          "class": "form-control"
        },
        btn: {
          attr: {
            "class": "btn btn-outline-secondary border-secondary-subtle"
          },
          content: '<i class="bi bi-search"></i>'
        }
      }, options);
      _this2 = _callSuper$E(this, FilterText, [table, options]);
      if (_this2._options.value !== null) {
        _this2.setValue(_this2._options.value);
      }
      return _this2;
    }

    /**
     * Установка значения
     * @param {string|number|null} value
     */
    _inherits(FilterText, _Filter);
    return _createClass(FilterText, [{
      key: "setValue",
      value: function setValue(value) {
        if (value !== null && typeof value !== 'string' && typeof value !== 'number') {
          return;
        }
        this._value = value;
        if (this._control) {
          $('input', this._control).val(this._value === null ? '' : this._value);
        }
      }

      /**
       * Получение значения
       * @returns {string|null}
       */
    }, {
      key: "getValue",
      value: function getValue() {
        if (this._control) {
          var value = $('input', this._control).val();
          if (typeof value === 'string' && value !== '') {
            return value;
          }
        }
        return this._value;
      }

      /**
       * Формирование контента
       * @returns {string}
       */
    }, {
      key: "render",
      value: function render() {
        var options = this.getOptions();
        var label = typeof options.label === 'string' || typeof options.label === 'number' ? options.label : '';
        if (!coreuiTableUtils.isObject(options.attr)) {
          options.attr = {};
        }
        if (options.hasOwnProperty('width') && coreuiTableUtils.isNumeric(options.width)) {
          if (options.attr.hasOwnProperty('style')) {
            options.attr['style'] += ';width:' + options.width + 'px';
          } else {
            options.attr['style'] = 'width:' + options.width + 'px';
          }
        }
        options.attr['value'] = typeof this._value === 'string' || typeof this._value === 'number' ? this._value : '';
        if (options.attr.hasOwnProperty('type')) {
          delete options.attr.type;
        }
        if (!coreuiTableUtils.isObject(options.btn)) {
          options.btn = {};
        }
        if (!coreuiTableUtils.isObject(options.btn.attr)) {
          options.btn.attr = {};
        }
        if (options.btn.attr.hasOwnProperty('type')) {
          delete options.btn.attr.type;
        }
        var attr = [];
        var attrBtn = [];
        var table = this._table;
        $.each(options.attr, function (name, value) {
          attr.push(name + '="' + value + '"');
        });
        $.each(options.btn.attr, function (name, value) {
          attrBtn.push(name + '="' + value + '"');
        });
        this._control = $(coreuiTableUtils.render(tpl['filters/text.html'], {
          attr: attr.length > 0 ? ' ' + attr.join(' ') : '',
          label: label,
          btnAttr: attrBtn.length > 0 ? ' ' + attrBtn.join(' ') : '',
          btnContent: options.btn.content ? options.btn.content : ''
        }));
        $('input', this._control).keyup(function (e) {
          if (e.key === 'Enter' || e.keyCode === 13) {
            table.searchRecords();
          } else if (typeof options.autoSearch === 'boolean' && options.autoSearch) {
            table.searchRecords();
          }
        });
        $('button', this._control).click(function (e) {
          table.searchRecords();
        });
        return this._control;
      }
    }]);
  }(Filter);

  function _callSuper$D(_this, derived, args) {
    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      } catch (e) {
        return false;
      }
    }
    derived = _getPrototypeOf(derived);
    return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));
  }
  var FilterNumber = /*#__PURE__*/function (_Filter) {
    /**
     * Инициализация
     * @param {coreuiTableInstance} table
     * @param {Object}              options
     */
    function FilterNumber(table, options) {
      var _this2;
      _classCallCheck(this, FilterNumber);
      options = $.extend(true, {
        id: null,
        type: 'number',
        field: null,
        label: null,
        value: null,
        width: 90,
        attr: {
          "class": "form-control"
        },
        btn: {
          attr: {
            "class": "btn btn-outline-secondary border-secondary-subtle"
          },
          content: '<i class="bi bi-search"></i>'
        }
      }, options);
      _this2 = _callSuper$D(this, FilterNumber, [table, options]);
      if (_this2._options.value !== null) {
        _this2.setValue(_this2._options.value);
      }
      return _this2;
    }

    /**
     * Установка значения
     * @param {object|null} value
     */
    _inherits(FilterNumber, _Filter);
    return _createClass(FilterNumber, [{
      key: "setValue",
      value: function setValue(value) {
        if (value) {
          if (!coreuiTableUtils.isObject(value)) {
            return;
          }
          var numberStart = null;
          var numberEnd = null;
          if (value.hasOwnProperty('start') && (typeof value.start === 'string' || typeof value.start !== 'number') && value.start !== '' && !isNaN(Number(value.start))) {
            numberStart = value.start;
          }
          if (value.hasOwnProperty('end') && (typeof value.end === 'string' || typeof value.end !== 'number') && value.end !== '' && !isNaN(Number(value.end))) {
            numberEnd = value.end;
          }
          if (numberStart === null && numberEnd === null) {
            this._value = null;
          } else {
            this._value = {
              start: numberStart,
              end: numberEnd
            };
          }
        } else {
          this._value = null;
        }
        if (this._control) {
          var inputStart = this._control.parent().find('input.number-start');
          var inputEnd = this._control.parent().find('input.number-end');
          if (this._value === null) {
            inputStart.val('');
            inputEnd.val('');
          } else if (coreuiTableUtils.isObject(this._value)) {
            inputStart.val(_typeof(this._value.start) !== null ? this._value.start : '');
            inputEnd.val(_typeof(this._value.end) !== null ? this._value.end : '');
          }
        }
      }

      /**
       * Получение значения
       * @returns {string}
       */
    }, {
      key: "getValue",
      value: function getValue() {
        if (this._control) {
          var inputStart = this._control.parent().find('input.number-start');
          var inputEnd = this._control.parent().find('input.number-end');
          if (inputStart[0] && inputEnd[0]) {
            var valueStart = inputStart.val();
            var valueEnd = inputEnd.val();
            if (typeof valueStart === 'string' && valueStart !== '' || typeof valueEnd === 'string' && valueEnd !== '') {
              return {
                start: valueStart !== '' && !isNaN(Number(valueStart)) ? Number(valueStart) : null,
                end: valueEnd !== '' && !isNaN(Number(valueEnd)) ? Number(valueEnd) : null
              };
            }
          }
          return null;
        }
        return this._value;
      }

      /**
       * Фильтрация данных
       * @returns {string}              fieldValue
       * @returns {Array|string|number} searchValue
       * @returns {boolean}
       */
    }, {
      key: "filter",
      value: function filter(fieldValue, searchValue) {
        if (['string', 'number'].indexOf(_typeof(fieldValue)) < 0 || !coreuiTableUtils.isObject(searchValue) || ['string', 'number'].indexOf(_typeof(searchValue.start)) < 0 && ['string', 'number'].indexOf(_typeof(searchValue.end)) < 0) {
          return false;
        }
        var issetStart = ['string', 'number'].indexOf(_typeof(searchValue.start)) >= 0;
        var issetEnd = ['string', 'number'].indexOf(_typeof(searchValue.end)) >= 0;
        if (issetStart && issetEnd) {
          return fieldValue >= searchValue.start && fieldValue <= searchValue.end;
        } else if (issetStart) {
          return fieldValue >= searchValue.start;
        } else {
          return fieldValue <= searchValue.end;
        }
      }

      /**
       * Формирование контента
       * @returns {string}
       */
    }, {
      key: "render",
      value: function render() {
        var options = this.getOptions();
        var label = typeof options.label === 'string' || typeof options.label === 'number' ? options.label : '';
        if (!coreuiTableUtils.isObject(options.attr)) {
          options.attr = {};
        }
        if (options.hasOwnProperty('width') && coreuiTableUtils.isNumeric(options.width)) {
          if (options.attr.hasOwnProperty('style')) {
            options.attr['style'] += ';width:' + options.width + 'px';
          } else {
            options.attr['style'] = 'width:' + options.width + 'px';
          }
        }
        if (options.attr.hasOwnProperty('type')) {
          delete options.attr.type;
        }
        if (options.attr.hasOwnProperty('value')) {
          delete options.attr.value;
        }
        var field = typeof options.field === 'string' ? options.field : '';
        var startAttr = [];
        var endAttr = [];
        var attrBtn = [];
        var table = this._table;
        $.each(options.attr, function (name, value) {
          if (['name', 'value', 'class'].indexOf(name) >= 0 || ['string', 'number'].indexOf(_typeof(value)) < 0) {
            return;
          }
          startAttr.push(name + '="' + value + '"');
          endAttr.push(name + '="' + value + '"');
        });
        if (options.attr.hasOwnProperty('class') && ['string', 'number'].indexOf(_typeof(options.attr["class"])) >= 0) {
          startAttr.push('class="' + options.attr["class"] + ' number-start"');
          endAttr.push('class="' + options.attr["class"] + ' number-end"');
        } else {
          startAttr.push('class="number-start"');
          endAttr.push('class="number-end"');
        }
        if (field) {
          startAttr.push('name="' + field + '[start]"');
          endAttr.push('name="' + field + '[end]"');
        }
        startAttr.push('value="' + (this._value ? this._value.start : '') + '"');
        endAttr.push('value="' + (this._value ? this._value.end : '') + '"');
        if (!coreuiTableUtils.isObject(options.btn)) {
          options.btn = {};
        }
        if (!coreuiTableUtils.isObject(options.btn.attr)) {
          options.btn.attr = {};
        }
        if (options.btn.attr.hasOwnProperty('type')) {
          delete options.btn.attr.type;
        }
        $.each(options.btn.attr, function (name, value) {
          attrBtn.push(name + '="' + value + '"');
        });
        this._control = $(coreuiTableUtils.render(tpl['filters/number.html'], {
          attrStart: startAttr.length > 0 ? ' ' + startAttr.join(' ') : '',
          attrEnd: endAttr.length > 0 ? ' ' + endAttr.join(' ') : '',
          label: label,
          btnAttr: attrBtn.length > 0 ? ' ' + attrBtn.join(' ') : '',
          btnContent: options.btn.content ? options.btn.content : ''
        }));
        $('input.number-start, input.number-end', this._control).keyup(function (e) {
          if (e.key === 'Enter' || e.keyCode === 13) {
            table.searchRecords();
          }
        });
        $('button', this._control).click(function (e) {
          table.searchRecords();
        });
        return this._control;
      }
    }]);
  }(Filter);

  function _callSuper$C(_this, derived, args) {
    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      } catch (e) {
        return false;
      }
    }
    derived = _getPrototypeOf(derived);
    return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));
  }
  var FilterDate = /*#__PURE__*/function (_Filter) {
    /**
     * Инициализация
     * @param {coreuiTableInstance} table
     * @param {Object}              options
     */
    function FilterDate(table, options) {
      var _this2;
      _classCallCheck(this, FilterDate);
      options = $.extend(true, {
        id: null,
        type: 'date',
        field: null,
        label: null,
        value: null,
        width: 200,
        attr: {
          "class": "form-control"
        }
      }, options);
      _this2 = _callSuper$C(this, FilterDate, [table, options]);
      if (_this2._options.value !== null) {
        _this2.setValue(_this2._options.value);
      }
      return _this2;
    }

    /**
     * Установка значения
     * @param {string} value
     */
    _inherits(FilterDate, _Filter);
    return _createClass(FilterDate, [{
      key: "setValue",
      value: function setValue(value) {
        if (typeof value !== 'string' && value !== null) {
          return;
        }
        if (value && (value.match(/^\d{4}\-\d{2}\-\d{2}$/) === null || isNaN(new Date(value)))) {
          return;
        }
        this._value = value;
        if (this._control) {
          $('input', this._control).val(this._value === null ? '' : this._value);
        }
      }

      /**
       * Получение значения
       * @returns {string}
       */
    }, {
      key: "getValue",
      value: function getValue() {
        if (this._control) {
          var value = $('input', this._control).val();
          if (typeof value === 'string' && value !== '') {
            return value;
          }
          return null;
        }
        return this._value;
      }

      /**
       * Фильтрация данных
       * @returns {string}              fieldValue
       * @returns {Array|string|number} searchValue
       * @returns {boolean}
       */
    }, {
      key: "filter",
      value: function filter(fieldValue, searchValue) {
        if (['string', 'number'].indexOf(_typeof(fieldValue)) < 0 || ['string', 'number'].indexOf(_typeof(searchValue)) < 0) {
          return false;
        }
        return fieldValue.toString().indexOf(searchValue.toString()) === 0;
      }

      /**
       * Формирование контента
       * @returns {string}
       */
    }, {
      key: "render",
      value: function render() {
        var options = this.getOptions();
        var label = typeof options.label === 'string' || typeof options.label === 'number' ? options.label : '';
        if (!coreuiTableUtils.isObject(options.attr)) {
          options.attr = {};
        }
        if (options.hasOwnProperty('width') && coreuiTableUtils.isNumeric(options.width)) {
          if (options.attr.hasOwnProperty('style')) {
            options.attr['style'] += ';width:' + options.width + 'px';
          } else {
            options.attr['style'] = 'width:' + options.width + 'px';
          }
        }
        options.attr['value'] = typeof this._value === 'string' || typeof this._value === 'number' ? this._value : '';
        if (options.attr.hasOwnProperty('type')) {
          delete options.attr.type;
        }
        var attr = [];
        var table = this._table;
        $.each(options.attr, function (name, value) {
          attr.push(name + '="' + value + '"');
        });
        this._control = $(coreuiTableUtils.render(tpl['filters/date.html'], {
          attr: attr.length > 0 ? ' ' + attr.join(' ') : '',
          label: label
        }));
        $('input', this._control).change(function (e) {
          table.searchRecords();
        });
        return this._control;
      }
    }]);
  }(Filter);

  function _callSuper$B(_this, derived, args) {
    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      } catch (e) {
        return false;
      }
    }
    derived = _getPrototypeOf(derived);
    return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));
  }
  var FilterDatetime = /*#__PURE__*/function (_Filter) {
    /**
     * Инициализация
     * @param {coreuiTableInstance} table
     * @param {Object}              options
     */
    function FilterDatetime(table, options) {
      var _this2;
      _classCallCheck(this, FilterDatetime);
      options = $.extend(true, {
        id: null,
        type: 'datetime',
        field: null,
        label: null,
        value: null,
        width: 200,
        attr: {
          "class": "form-control"
        }
      }, options);
      _this2 = _callSuper$B(this, FilterDatetime, [table, options]);
      if (_this2._options.value !== null) {
        _this2.setValue(_this2._options.value);
      }
      return _this2;
    }

    /**
     * Установка значения
     * @param {string|null} value
     */
    _inherits(FilterDatetime, _Filter);
    return _createClass(FilterDatetime, [{
      key: "setValue",
      value: function setValue(value) {
        if (typeof value !== 'string' && value !== null) {
          return;
        }
        if (value && (value.match(/^\d{4}\-\d{2}\-\d{2}(T| )\d{2}:\d{2}(:\d{2}|)$/) === null || isNaN(new Date(value)))) {
          return;
        }
        this._value = value;
        if (this._control) {
          $('input', this._control).val(this._value === null ? '' : this._value);
        }
      }

      /**
       * Получение значения
       * @returns {string|null}
       */
    }, {
      key: "getValue",
      value: function getValue() {
        if (this._control) {
          var value = $('input', this._control).val();
          if (typeof value === 'string' && value !== '') {
            return value;
          }
          return null;
        }
        return this._value;
      }

      /**
       * Фильтрация данных
       * @returns {string}              fieldValue
       * @returns {Array|string|number} searchValue
       * @returns {boolean}
       */
    }, {
      key: "filter",
      value: function filter(fieldValue, searchValue) {
        if (['string', 'number'].indexOf(_typeof(fieldValue)) < 0 || ['string', 'number'].indexOf(_typeof(searchValue)) < 0) {
          return false;
        }
        return fieldValue.toString() === searchValue.toString();
      }

      /**
       * Формирование контента
       * @returns {string}
       */
    }, {
      key: "render",
      value: function render() {
        var options = this.getOptions();
        var label = typeof options.label === 'string' || typeof options.label === 'number' ? options.label : '';
        if (!coreuiTableUtils.isObject(options.attr)) {
          options.attr = {};
        }
        if (options.hasOwnProperty('width') && coreuiTableUtils.isNumeric(options.width)) {
          if (options.attr.hasOwnProperty('style')) {
            options.attr['style'] += ';width:' + options.width + 'px';
          } else {
            options.attr['style'] = 'width:' + options.width + 'px';
          }
        }
        options.attr['value'] = typeof this._value === 'string' || typeof this._value === 'number' ? this._value : '';
        if (options.attr.hasOwnProperty('type')) {
          delete options.attr.type;
        }
        var attr = [];
        var table = this._table;
        $.each(options.attr, function (name, value) {
          attr.push(name + '="' + value + '"');
        });
        this._control = $(coreuiTableUtils.render(tpl['filters/datetime.html'], {
          attr: attr.length > 0 ? ' ' + attr.join(' ') : '',
          label: label
        }));
        $('input', this._control).change(function (e) {
          table.searchRecords();
        });
        return this._control;
      }
    }]);
  }(Filter);

  function _callSuper$A(_this, derived, args) {
    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      } catch (e) {
        return false;
      }
    }
    derived = _getPrototypeOf(derived);
    return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));
  }
  var FilterDateMonth = /*#__PURE__*/function (_Filter) {
    /**
     * Инициализация
     * @param {coreuiTableInstance} table
     * @param {Object}              options
     */
    function FilterDateMonth(table, options) {
      var _this2;
      _classCallCheck(this, FilterDateMonth);
      options = $.extend(true, {
        id: null,
        type: 'date_month',
        field: null,
        label: null,
        value: null,
        width: 200,
        attr: {
          "class": "form-control"
        }
      }, options);
      _this2 = _callSuper$A(this, FilterDateMonth, [table, options]);
      if (_this2._options.value !== null) {
        _this2.setValue(_this2._options.value);
      }
      return _this2;
    }

    /**
     * Установка значения
     * @param {string|null} value
     */
    _inherits(FilterDateMonth, _Filter);
    return _createClass(FilterDateMonth, [{
      key: "setValue",
      value: function setValue(value) {
        if (typeof value !== 'string' && value !== null) {
          return;
        }
        if (value && (value.match(/^\d{4}\-\d{2}$/) === null || isNaN(new Date(value)))) {
          return;
        }
        this._value = value;
        if (this._control) {
          $('input', this._control).val(this._value === null ? '' : this._value);
        }
      }

      /**
       * Получение значения
       * @returns {string|null}
       */
    }, {
      key: "getValue",
      value: function getValue() {
        if (this._control) {
          var value = $('input', this._control).val();
          if (typeof value === 'string' && value !== '') {
            return value;
          }
          return null;
        }
        return this._value;
      }

      /**
       * Фильтрация данных
       * @returns {string} fieldValue
       * @returns {string} searchValue
       * @returns {boolean}
       */
    }, {
      key: "filter",
      value: function filter(fieldValue, searchValue) {
        if (['string', 'number'].indexOf(_typeof(fieldValue)) < 0 || ['string', 'number'].indexOf(_typeof(searchValue)) < 0) {
          return false;
        }
        return fieldValue.toString().toLowerCase().indexOf(searchValue.toString().toLowerCase()) === 0;
      }

      /**
       * Формирование контента
       * @returns {jQuery}
       */
    }, {
      key: "render",
      value: function render() {
        var options = this.getOptions();
        var label = typeof options.label === 'string' || typeof options.label === 'number' ? options.label : '';
        if (!coreuiTableUtils.isObject(options.attr)) {
          options.attr = {};
        }
        if (options.hasOwnProperty('width') && coreuiTableUtils.isNumeric(options.width)) {
          if (options.attr.hasOwnProperty('style')) {
            options.attr['style'] += ';width:' + options.width + 'px';
          } else {
            options.attr['style'] = 'width:' + options.width + 'px';
          }
        }
        options.attr['value'] = typeof this._value === 'string' || typeof this._value === 'number' ? this._value : '';
        if (options.attr.hasOwnProperty('type')) {
          delete options.attr.type;
        }
        var attr = [];
        var table = this._table;
        $.each(options.attr, function (name, value) {
          attr.push(name + '="' + value + '"');
        });
        this._control = $(coreuiTableUtils.render(tpl['filters/date_month.html'], {
          attr: attr.length > 0 ? ' ' + attr.join(' ') : '',
          label: label
        }));
        $('input', this._control).change(function (e) {
          table.searchRecords();
        });
        return this._control;
      }
    }]);
  }(Filter);

  function _callSuper$z(_this, derived, args) {
    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      } catch (e) {
        return false;
      }
    }
    derived = _getPrototypeOf(derived);
    return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));
  }
  var FilterDateRange = /*#__PURE__*/function (_Filter) {
    /**
     * Инициализация
     * @param {coreuiTableInstance} table
     * @param {Object}              options
     */
    function FilterDateRange(table, options) {
      var _this2;
      _classCallCheck(this, FilterDateRange);
      options = $.extend(true, {
        id: null,
        type: 'date_range',
        field: null,
        label: null,
        value: null,
        width: 200,
        attr: {
          "class": "form-control d-inline-block"
        }
      }, options);
      _this2 = _callSuper$z(this, FilterDateRange, [table, options]);
      if (_this2._options.value !== null) {
        _this2.setValue(_this2._options.value);
      }
      return _this2;
    }

    /**
     * Установка значения
     * @param {object|null} value
     */
    _inherits(FilterDateRange, _Filter);
    return _createClass(FilterDateRange, [{
      key: "setValue",
      value: function setValue(value) {
        if (value) {
          if (!coreuiTableUtils.isObject(value)) {
            return;
          }
          var dateStart = null;
          var dateEnd = null;
          if (value.hasOwnProperty('start') && typeof value.start === 'string' && value.start.match(/^\d{4}\-\d{2}\-\d{2}$/) === null && isNaN(new Date(value.start))) {
            dateStart = value.start;
          }
          if (value.hasOwnProperty('end') && typeof value.end === 'string' && value.end.match(/^\d{4}\-\d{2}\-\d{2}$/) === null && isNaN(new Date(value.end))) {
            dateEnd = value.end;
          }
          if (dateStart === null && dateEnd === null) {
            this._value = null;
          } else {
            this._value = {
              start: dateStart,
              end: dateEnd
            };
          }
        } else {
          this._value = null;
        }
        if (this._control) {
          var inputStart = this._control.parent().find('input.date-start');
          var inputEnd = this._control.parent().find('input.date-end');
          if (this._value === null) {
            inputStart.val('');
            inputEnd.val('');
          } else if (coreuiTableUtils.isObject(this._value)) {
            inputStart.val(_typeof(this._value.start) !== null ? this._value.start : '');
            inputEnd.val(_typeof(this._value.end) !== null ? this._value.end : '');
          }
        }
      }

      /**
       * Получение значения
       * @returns {Object|null}
       */
    }, {
      key: "getValue",
      value: function getValue() {
        if (this._control) {
          var inputStart = this._control.parent().find('input.date-start');
          var inputEnd = this._control.parent().find('input.date-end');
          if (inputStart[0] && inputEnd[0]) {
            var valueStart = inputStart.val();
            var valueEnd = inputEnd.val();
            if (typeof valueStart === 'string' && valueStart !== '' || typeof valueEnd === 'string' && valueEnd !== '') {
              return {
                start: valueStart !== '' ? valueStart : null,
                end: valueEnd !== '' ? valueEnd : null
              };
            }
          }
          return null;
        }
        return this._value;
      }

      /**
       * Фильтрация данных
       * @returns {string}              fieldValue
       * @returns {Array|string|number} searchValue
       * @returns {boolean}
       */
    }, {
      key: "filter",
      value: function filter(fieldValue, searchValue) {
        if (['string', 'number'].indexOf(_typeof(fieldValue)) < 0 || !coreuiTableUtils.isObject(searchValue) || typeof searchValue.start !== 'string' && typeof searchValue.end !== 'string') {
          return false;
        }
        var issetStart = ['string', 'number'].indexOf(_typeof(searchValue.start)) >= 0;
        var issetEnd = ['string', 'number'].indexOf(_typeof(searchValue.end)) >= 0;
        if (issetStart && issetEnd) {
          return fieldValue >= searchValue.start && fieldValue <= searchValue.end;
        } else if (issetStart) {
          return fieldValue >= searchValue.start;
        } else {
          return fieldValue <= searchValue.end;
        }
      }

      /**
       * Формирование контента
       * @returns {string}
       */
    }, {
      key: "render",
      value: function render() {
        var options = this.getOptions();
        var label = typeof options.label === 'string' || typeof options.label === 'number' ? options.label : '';
        if (!coreuiTableUtils.isObject(options.attr)) {
          options.attr = {};
        }
        if (options.hasOwnProperty('width') && coreuiTableUtils.isNumeric(options.width)) {
          if (options.attr.hasOwnProperty('style')) {
            options.attr['style'] += ';width:' + options.width + 'px';
          } else {
            options.attr['style'] = 'width:' + options.width + 'px';
          }
        }
        if (options.attr.hasOwnProperty('type')) {
          delete options.attr.type;
        }
        if (options.attr.hasOwnProperty('value')) {
          delete options.attr.value;
        }
        var field = typeof options.field === 'string' ? options.field : '';
        var startAttr = [];
        var startEnd = [];
        var table = this._table;
        $.each(options.attr, function (name, value) {
          if (['name', 'value', 'class'].indexOf(name) >= 0 || ['string', 'number'].indexOf(_typeof(value)) < 0) {
            return;
          }
          startAttr.push(name + '="' + value + '"');
          startEnd.push(name + '="' + value + '"');
        });
        if (options.attr.hasOwnProperty('class') && ['string', 'number'].indexOf(_typeof(options.attr["class"])) >= 0) {
          startAttr.push('class="' + options.attr["class"] + ' date-start"');
          startEnd.push('class="' + options.attr["class"] + ' date-end"');
        } else {
          startAttr.push('class="date-start"');
          startEnd.push('class="date-end"');
        }
        if (field) {
          startAttr.push('name="' + field + '[start]"');
          startEnd.push('name="' + field + '[end]"');
        }
        startAttr.push('value="' + (this._value ? this._value.start : '') + '"');
        startEnd.push('value="' + (this._value ? this._value.end : '') + '"');
        var control = $(coreuiTableUtils.render(tpl['filters/date_range.html'], {
          label: label,
          startAttr: startAttr.length > 0 ? ' ' + startAttr.join(' ') : '',
          endAttr: startEnd.length > 0 ? ' ' + startEnd.join(' ') : ''
        }));
        $('input', control).change(function (e) {
          table.searchRecords();
        });
        $('input.date-start', control).change(function () {
          var dateEnd = $('input.date-end', control).attr('min', $(this).val());
          if ("showPicker" in HTMLInputElement.prototype) {
            $(dateEnd)[0].showPicker();
          }
        });
        $('input.date-end', control).change(function () {
          $('input.date-start', control).attr('max', $(this).val());
        });
        this._control = control;
        return this._control;
      }
    }]);
  }(Filter);

  function _callSuper$y(_this, derived, args) {
    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      } catch (e) {
        return false;
      }
    }
    derived = _getPrototypeOf(derived);
    return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));
  }
  var FilterDatetimeRange = /*#__PURE__*/function (_Filter) {
    /**
     * Инициализация
     * @param {coreuiTableInstance} table
     * @param {Object}              options
     */
    function FilterDatetimeRange(table, options) {
      var _this2;
      _classCallCheck(this, FilterDatetimeRange);
      options = $.extend(true, {
        id: null,
        type: 'datetime_range',
        field: null,
        label: null,
        value: null,
        width: 200,
        attr: {
          "class": "form-control d-inline-block"
        }
      }, options);
      _this2 = _callSuper$y(this, FilterDatetimeRange, [table, options]);
      if (_this2._options.value !== null) {
        _this2.setValue(_this2._options.value);
      }
      return _this2;
    }

    /**
     * Установка значения
     * @param {object|null} value
     */
    _inherits(FilterDatetimeRange, _Filter);
    return _createClass(FilterDatetimeRange, [{
      key: "setValue",
      value: function setValue(value) {
        if (value) {
          if (!coreuiTableUtils.isObject(value)) {
            return;
          }
          var dateStart = null;
          var dateEnd = null;
          if (value.hasOwnProperty('start') && typeof value.start === 'string' && value.start.match(/^\d{4}\-\d{2}\-\d{2}(T| )\d{2}:\d{2}(:\d{2}|)$/) === null && isNaN(new Date(value.start))) {
            dateStart = value.start;
          }
          if (value.hasOwnProperty('end') && typeof value.end === 'string' && value.end.match(/^\d{4}\-\d{2}\-\d{2}(T| )\d{2}:\d{2}(:\d{2}|)$/) === null && isNaN(new Date(value.end))) {
            dateEnd = value.end;
          }
          if (dateStart === null && dateEnd === null) {
            this._value = null;
          } else {
            this._value = {
              start: dateStart,
              end: dateEnd
            };
          }
        } else {
          this._value = null;
        }
        if (this._control) {
          var inputStart = this._control.parent().find('input.date-start');
          var inputEnd = this._control.parent().find('input.date-end');
          if (this._value === null) {
            inputStart.val('');
            inputEnd.val('');
          } else if (coreuiTableUtils.isObject(this._value)) {
            inputStart.val(_typeof(this._value.start) !== null ? this._value.start : '');
            inputEnd.val(_typeof(this._value.end) !== null ? this._value.end : '');
          }
        }
      }

      /**
       * Получение значения
       * @returns {Object|null}
       */
    }, {
      key: "getValue",
      value: function getValue() {
        if (this._control) {
          var inputStart = this._control.parent().find('input.date-start');
          var inputEnd = this._control.parent().find('input.date-end');
          if (inputStart[0] && inputEnd[0]) {
            var valueStart = inputStart.val();
            var valueEnd = inputEnd.val();
            if (typeof valueStart === 'string' && valueStart !== '' || typeof valueEnd === 'string' && valueEnd !== '') {
              return {
                start: valueStart !== '' ? valueStart : null,
                end: valueEnd !== '' ? valueEnd : null
              };
            }
          }
          return null;
        }
        return this._value;
      }

      /**
       * Фильтрация данных
       * @returns {string}              fieldValue
       * @returns {Array|string|number} searchValue
       * @returns {boolean}
       */
    }, {
      key: "filter",
      value: function filter(fieldValue, searchValue) {
        if (['string', 'number'].indexOf(_typeof(fieldValue)) < 0 || !coreuiTableUtils.isObject(searchValue) || typeof searchValue.start !== 'string' && typeof searchValue.end !== 'string') {
          return false;
        }
        var issetStart = ['string', 'number'].indexOf(_typeof(searchValue.start)) >= 0;
        var issetEnd = ['string', 'number'].indexOf(_typeof(searchValue.end)) >= 0;
        if (issetStart && issetEnd) {
          return fieldValue >= searchValue.start && fieldValue <= searchValue.end;
        } else if (issetStart) {
          return fieldValue >= searchValue.start;
        } else {
          return fieldValue <= searchValue.end;
        }
      }

      /**
       * Формирование контента
       * @returns {jQuery}
       */
    }, {
      key: "render",
      value: function render() {
        var options = this.getOptions();
        var label = typeof options.label === 'string' || typeof options.label === 'number' ? options.label : '';
        if (!coreuiTableUtils.isObject(options.attr)) {
          options.attr = {};
        }
        if (options.hasOwnProperty('width') && coreuiTableUtils.isNumeric(options.width)) {
          if (options.attr.hasOwnProperty('style')) {
            options.attr['style'] += ';width:' + options.width + 'px';
          } else {
            options.attr['style'] = 'width:' + options.width + 'px';
          }
        }
        if (options.attr.hasOwnProperty('type')) {
          delete options.attr.type;
        }
        if (options.attr.hasOwnProperty('value')) {
          delete options.attr.value;
        }
        var field = typeof options.field === 'string' ? options.field : '';
        var startAttr = [];
        var startEnd = [];
        var table = this._table;
        $.each(options.attr, function (name, value) {
          if (['name', 'value', 'class'].indexOf(name) >= 0 || ['string', 'number'].indexOf(_typeof(value)) < 0) {
            return;
          }
          startAttr.push(name + '="' + value + '"');
          startEnd.push(name + '="' + value + '"');
        });
        if (options.attr.hasOwnProperty('class') && ['string', 'number'].indexOf(_typeof(options.attr["class"])) >= 0) {
          startAttr.push('class="' + options.attr["class"] + ' date-start"');
          startEnd.push('class="' + options.attr["class"] + ' date-end"');
        } else {
          startAttr.push('class="date-start"');
          startEnd.push('class="date-end"');
        }
        if (field) {
          startAttr.push('name="' + field + '[start]"');
          startEnd.push('name="' + field + '[end]"');
        }
        startAttr.push('value="' + (this._value ? this._value.start : '') + '"');
        startEnd.push('value="' + (this._value ? this._value.end : '') + '"');
        var control = $(coreuiTableUtils.render(tpl['filters/datetime_range.html'], {
          label: label,
          startAttr: startAttr.length > 0 ? ' ' + startAttr.join(' ') : '',
          endAttr: startEnd.length > 0 ? ' ' + startEnd.join(' ') : ''
        }));
        $('input', control).change(function (e) {
          table.searchRecords();
        });
        $('input.date-start', control).change(function () {
          var dateEnd = $('input.date-end', control).attr('min', $(this).val());
          if ("showPicker" in HTMLInputElement.prototype) {
            $(dateEnd)[0].showPicker();
          }
        });
        $('input.date-end', control).change(function () {
          $('input.date-start', control).attr('max', $(this).val());
        });
        this._control = control;
        return this._control;
      }
    }]);
  }(Filter);

  function _callSuper$x(_this, derived, args) {
    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      } catch (e) {
        return false;
      }
    }
    derived = _getPrototypeOf(derived);
    return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));
  }
  var FilterCheckbox = /*#__PURE__*/function (_Filter) {
    /**
     * Инициализация
     * @param {coreuiTableInstance} table
     * @param {Object}              options
     */
    function FilterCheckbox(table, options) {
      var _this2;
      _classCallCheck(this, FilterCheckbox);
      options = $.extend(true, {
        id: null,
        type: 'checkbox',
        field: null,
        label: null,
        value: null,
        options: []
      }, options);
      _this2 = _callSuper$x(this, FilterCheckbox, [table, options]);
      _defineProperty(_this2, "_class", 'btn btn-outline-secondary');
      if (_this2._options.value !== null) {
        _this2.setValue(_this2._options.value);
      }
      return _this2;
    }

    /**
     * Установка значения
     * @param {Array|string|number|null} value
     */
    _inherits(FilterCheckbox, _Filter);
    return _createClass(FilterCheckbox, [{
      key: "setValue",
      value: function setValue(value) {
        if (['string', 'number', 'object'].indexOf(_typeof(value)) < 0) {
          return;
        }
        if (_typeof(value) === 'object') {
          if (Array.isArray(value)) {
            var items = [];
            $.each(value, function (key, item) {
              if (typeof value !== 'string' && typeof value !== 'number') {
                return;
              }
              items.push(item);
            });
            this._value = items;
          } else {
            this._value = null;
          }
        } else {
          this._value = [value];
        }
        if (this._control) {
          $('input:checked', this._control).prop('checked', false);
          if (Array.isArray(this._value)) {
            var control = this._control;
            this._value.map(function (value) {
              $('input[value="' + value + '"]', control).prop('checked', true);
            });
          }
        }
      }

      /**
       * Получение значения
       * @returns {Array|null}
       */
    }, {
      key: "getValue",
      value: function getValue() {
        if (this._control) {
          var inputs = $('input:checked', this._control);
          var items = [];
          $.each(inputs, function (key, input) {
            var value = $(input).attr('value');
            if (['string', 'number'].indexOf(_typeof(value)) >= 0 && value !== '') {
              items.push(value);
            }
          });
          return items.length > 0 ? items : null;
        } else {
          return this._value;
        }
      }

      /**
       * Фильтрация данных
       * @returns {string} fieldValue
       * @returns {Array}  searchValue
       * @returns {boolean}
       */
    }, {
      key: "filter",
      value: function filter(fieldValue, searchValue) {
        if (['string', 'number'].indexOf(_typeof(fieldValue)) < 0 || !Array.isArray(searchValue)) {
          return false;
        }
        return searchValue.indexOf(fieldValue) >= 0;
      }

      /**
       * Формирование контента
       * @returns {string}
       */
    }, {
      key: "render",
      value: function render() {
        var that = this;
        var options = this.getOptions();
        var field = typeof options.field === 'string' ? options.field : '';
        var items = [];
        var label = typeof options.label === 'string' || typeof options.label === 'number' ? options.label : '';
        $.each(options.options, function (key, option) {
          if (!coreuiTableUtils.isObject(option) || !option.hasOwnProperty('value') || ['string', 'numeric'].indexOf(_typeof(option.value)) === -1) {
            return;
          }
          var checked = Array.isArray(that._value) ? that._value.indexOf(option.value) >= 0 : false;
          var text = option.hasOwnProperty('text') ? option.text : option.value;
          items.push({
            text: text,
            value: option.value,
            "class": option.hasOwnProperty('class') && typeof option["class"] === 'string' ? option["class"] : that._class,
            checked: checked
          });
        });
        this._control = $(coreuiTableUtils.render(tpl['filters/checkbox.html'], {
          label: label,
          items: items,
          field: field + this.getId(),
          lang: this._table.getLang()
        }));
        $('input', this._control).change(function (e) {
          that._table.searchRecords();
        });
        return this._control;
      }
    }]);
  }(Filter);

  function _callSuper$w(_this, derived, args) {
    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      } catch (e) {
        return false;
      }
    }
    derived = _getPrototypeOf(derived);
    return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));
  }
  var FilterRadio = /*#__PURE__*/function (_Filter) {
    /**
     * Инициализация
     * @param {coreuiTableInstance} table
     * @param {Object}              options
     */
    function FilterRadio(table, options) {
      var _this2;
      _classCallCheck(this, FilterRadio);
      options = $.extend(true, {
        id: null,
        type: 'radio',
        field: null,
        label: null,
        value: null,
        options: []
      }, options);
      _this2 = _callSuper$w(this, FilterRadio, [table, options]);
      _defineProperty(_this2, "_class", 'btn btn-outline-secondary');
      if (_this2._options.value !== null) {
        _this2.setValue(_this2._options.value);
      }
      return _this2;
    }

    /**
     * Установка значения
     * @param {string|number|null} value
     */
    _inherits(FilterRadio, _Filter);
    return _createClass(FilterRadio, [{
      key: "setValue",
      value: function setValue(value) {
        if (value !== null && typeof value !== 'string' && typeof value !== 'number') {
          return;
        }
        this._value = value;
        if (this._control) {
          $('input', this._control).prop('checked', false);
          if (this._value !== null) {
            $('input[value="' + this._value + '"]', this._control).prop('checked', true);
          }
        }
      }

      /**
       * Получение значения
       * @returns {string|null}
       */
    }, {
      key: "getValue",
      value: function getValue() {
        if (this._control) {
          var input = $('input:checked', this._control);
          if (input && input[0]) {
            var value = input.val();
            return value === '' ? null : value;
          }
          return null;
        } else {
          return this._value;
        }
      }

      /**
       * Фильтрация данных
       * @returns {string}              fieldValue
       * @returns {Array|string|number} searchValue
       * @returns {boolean}
       */
    }, {
      key: "filter",
      value: function filter(fieldValue, searchValue) {
        if (['string', 'number'].indexOf(_typeof(fieldValue)) < 0 || ['string', 'number'].indexOf(_typeof(searchValue)) < 0) {
          return false;
        }
        return fieldValue.toString().toLowerCase() === searchValue.toString().toLowerCase();
      }

      /**
       * Формирование контента
       * @returns {string}
       */
    }, {
      key: "render",
      value: function render() {
        var that = this;
        var table = this._table;
        var options = this.getOptions();
        var field = typeof options.field === 'string' ? options.field : '';
        var items = [];
        var label = typeof options.label === 'string' || typeof options.label === 'number' ? options.label : '';
        $.each(options.options, function (key, option) {
          if (!coreuiTableUtils.isObject(option) || !option.hasOwnProperty('value') || ['string', 'numeric'].indexOf(_typeof(option.value)) === -1) {
            return;
          }
          var text = option.hasOwnProperty('text') ? option.text : option.value;
          items.push({
            text: text,
            value: option.value,
            "class": option.hasOwnProperty('class') && typeof option["class"] === 'string' ? option["class"] : that._class,
            checked: option.value == that._value
          });
        });
        this._control = $(coreuiTableUtils.render(tpl['filters/radio.html'], {
          label: label,
          items: items,
          field: field + this.getId(),
          lang: this._table.getLang()
        }));
        $('input', this._control).change(function (e) {
          table.searchRecords();
        });
        return this._control;
      }
    }]);
  }(Filter);

  function _callSuper$v(_this, derived, args) {
    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      } catch (e) {
        return false;
      }
    }
    derived = _getPrototypeOf(derived);
    return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));
  }
  var FilterSelect = /*#__PURE__*/function (_Filter) {
    /**
     * Инициализация
     * @param {coreuiTableInstance} table
     * @param {Object}              options
     */
    function FilterSelect(table, options) {
      var _this2;
      _classCallCheck(this, FilterSelect);
      options = $.extend(true, {
        id: null,
        type: 'select',
        field: null,
        label: null,
        width: null,
        value: null,
        attr: {
          "class": 'form-select d-inline-block'
        },
        options: []
      }, options);
      _this2 = _callSuper$v(this, FilterSelect, [table, options]);
      if (_this2._options.value !== null) {
        _this2.setValue(_this2._options.value);
      }
      return _this2;
    }

    /**
     * Установка значения
     * @param {Array|string|number|null} value
     */
    _inherits(FilterSelect, _Filter);
    return _createClass(FilterSelect, [{
      key: "setValue",
      value: function setValue(value) {
        if (['string', 'number', 'object'].indexOf(_typeof(value)) < 0) {
          return;
        }
        if (_typeof(value) === 'object') {
          if (Array.isArray(value)) {
            var items = [];
            $.each(value, function (key, item) {
              if (typeof value !== 'string' && typeof value !== 'number') {
                return;
              }
              items.push(item);
            });
            this._value = items;
          } else {
            this._value = null;
          }
        } else {
          this._value = [value];
        }
        if (this._control) {
          $('select option:selected', this._control).prop('selected', false);
          if (Array.isArray(this._value)) {
            var control = this._control;
            this._value.map(function (value) {
              $('select option[value="' + value + '"]', control).prop('selected', true);
            });
          }
        }
      }

      /**
       * Получение значения
       * @returns {Array|string|null}
       */
    }, {
      key: "getValue",
      value: function getValue() {
        if (this._control) {
          var isMultiple = !!$('select', this._control).attr('multiple');
          var options = $('select option:checked', this._control);
          var items = [];
          $.each(options, function (key, option) {
            var value = $(option).attr('value');
            if (['string', 'number'].indexOf(_typeof(value)) >= 0 && value !== '') {
              items.push(value);
            }
          });
          return items.length > 0 ? isMultiple ? items : items[0] : null;
        } else {
          return this._value;
        }
      }

      /**
       * Фильтрация данных
       * @returns {string}              fieldValue
       * @returns {Array|string|number} searchValue
       * @returns {boolean}
       */
    }, {
      key: "filter",
      value: function filter(fieldValue, searchValue) {
        if (['string', 'number'].indexOf(_typeof(fieldValue)) < 0 || ['string', 'number'].indexOf(_typeof(searchValue)) < 0 && !Array.isArray(searchValue)) {
          return false;
        }
        if (Array.isArray(searchValue)) {
          return searchValue.indexOf(fieldValue) >= 0;
        } else {
          return fieldValue.toString().toLowerCase() === searchValue.toString().toLowerCase();
        }
      }

      /**
       * Формирование контента
       * @returns {string}
       */
    }, {
      key: "render",
      value: function render() {
        var that = this;
        var options = this.getOptions();
        var selectOptions = [];
        var attributes = [];
        var table = this._table;
        var label = typeof options.label === 'string' || typeof options.label === 'number' ? options.label : '';
        if (!options.hasOwnProperty('attr') || !coreuiTableUtils.isObject(options.attr)) {
          options.attr = {};
        }
        if (options.field) {
          options.attr.name = this._options.field;
        }
        if (options.width) {
          options.attr = coreuiTableUtils.mergeAttr({
            style: 'width:' + options.width + 'px'
          }, options.attr);
        }
        if (options.hasOwnProperty('options') && _typeof(options.options) === 'object' && options.options !== null) {
          $.each(options.options, function (key, option) {
            if (typeof option === 'string' || typeof option === 'number') {
              selectOptions.push(that._buildOption({
                type: 'option',
                value: key,
                text: option
              }));
            } else if (coreuiTableUtils.isObject(option)) {
              var type = option.hasOwnProperty('type') && typeof option.type === 'string' ? option.type : 'option';
              if (type === 'group') {
                var renderAttr = [];
                var groupAttr = {};
                var groupOptions = [];
                if (option.hasOwnProperty('attr') && coreuiTableUtils.isObject(option.attr)) {
                  groupAttr = option.attr;
                }
                if (option.hasOwnProperty('label') && ['string', 'number'].indexOf(_typeof(option.label)) >= 0) {
                  groupAttr.label = option.label;
                }
                $.each(groupAttr, function (name, value) {
                  renderAttr.push(name + '="' + value + '"');
                });
                if (Array.isArray(option.options)) {
                  $.each(option.options, function (key, groupOption) {
                    groupOptions.push(that._buildOption(groupOption));
                  });
                }
                selectOptions.push({
                  type: 'group',
                  attr: renderAttr.length > 0 ? ' ' + renderAttr.join(' ') : '',
                  options: groupOptions
                });
              } else {
                selectOptions.push(that._buildOption(option));
              }
            }
          });
        }
        $.each(options.attr, function (name, value) {
          attributes.push(name + '="' + value + '"');
        });
        this._control = $(coreuiTableUtils.render(tpl['filters/select.html'], {
          label: label,
          attr: attributes.length > 0 ? ' ' + attributes.join(' ') : '',
          options: selectOptions
        }));
        $('select', this._control).change(function (e) {
          table.searchRecords();
        });
        return this._control;
      }

      /**
       * Сборка опции
       * @param option
       * @return {object}
       * @private
       */
    }, {
      key: "_buildOption",
      value: function _buildOption(option) {
        var optionAttr = [];
        var optionText = option.hasOwnProperty('text') && ['string', 'number'].indexOf(_typeof(option.text)) >= 0 ? option.text : '';
        $.each(option, function (name, value) {
          if (name !== 'text') {
            optionAttr.push(name + '="' + value + '"');
          }
        });
        if (Array.isArray(this._value)) {
          $.each(this._value, function (key, itemValue) {
            if (itemValue == option.value) {
              optionAttr.push('selected="selected"');
              return false;
            }
          });
        } else if (this._value == option.value) {
          optionAttr.push('selected="selected"');
        }
        return {
          type: 'option',
          text: optionText,
          attr: optionAttr.length > 0 ? ' ' + optionAttr.join(' ') : ''
        };
      }
    }]);
  }(Filter);

  function _callSuper$u(_this, derived, args) {
    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      } catch (e) {
        return false;
      }
    }
    derived = _getPrototypeOf(derived);
    return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));
  }
  var FilterSwitch = /*#__PURE__*/function (_Filter) {
    /**
     * Инициализация
     * @param {coreuiTableInstance} table
     * @param {Object}              options
     */
    function FilterSwitch(table, options) {
      var _this2;
      _classCallCheck(this, FilterSwitch);
      options = $.extend(true, {
        id: null,
        type: 'switch',
        field: null,
        label: null,
        value: null,
        valueY: 1
      }, options);
      _this2 = _callSuper$u(this, FilterSwitch, [table, options]);
      if (_this2._options.value !== null) {
        _this2.setValue(_this2._options.value);
      }
      return _this2;
    }

    /**
     * Фильтрация данных
     * @returns {string}              fieldValue
     * @returns {Array|string|number} searchValue
     * @returns {boolean}
     */
    _inherits(FilterSwitch, _Filter);
    return _createClass(FilterSwitch, [{
      key: "filter",
      value: function filter(fieldValue, searchValue) {
        if (['string', 'number'].indexOf(_typeof(fieldValue)) < 0 || ['string', 'number'].indexOf(_typeof(searchValue)) < 0) {
          return false;
        }
        return fieldValue.toString() === searchValue.toString();
      }

      /**
       * Установка значения
       * @param {string|number|null} value
       */
    }, {
      key: "setValue",
      value: function setValue(value) {
        if (value !== null && typeof value !== 'string' && typeof value !== 'number') {
          return;
        }
        this._value = value;
        if (this._control) {
          var valueY = typeof this._options.valueY === 'string' || typeof this._options.valueY === 'number' ? this._options.valueY : '';
          if (this._value === null) {
            $('input', this._control).prop('checked', false);
          } else if (this._value === valueY) {
            $('input', this._control).prop('checked', true);
          } else {
            $('input', this._control).prop('checked', false);
          }
        }
      }

      /**
       * Получение значения
       * @returns {string}
       */
    }, {
      key: "getValue",
      value: function getValue() {
        if (this._control) {
          var value = $('input:checked', this._control).val();
          if (typeof value === 'undefined') {
            return null;
          }
          if (typeof value === 'string' && value !== '') {
            return value;
          }
        }
        return this._value;
      }

      /**
       * Формирование контента
       * @returns {string}
       */
    }, {
      key: "render",
      value: function render() {
        var table = this._table;
        var options = this.getOptions();
        var valueY = typeof options.valueY === 'string' || typeof options.valueY === 'number' ? options.valueY : '';
        var label = typeof options.label === 'string' || typeof options.label === 'number' ? options.label : '';
        this._control = $(coreuiTableUtils.render(tpl['filters/switch.html'], {
          id: this._id,
          valueY: valueY,
          field: typeof options.field === 'string' ? options.field : '',
          checked: this._value == valueY,
          label: label
        }));
        $('input', this._control).change(function (e) {
          table.searchRecords();
        });
        return this._control;
      }
    }]);
  }(Filter);

  var Search = /*#__PURE__*/function () {
    /**
     * Инициализация
     * @param {object} table
     * @param {object} options
     */
    function Search(table, options) {
      _classCallCheck(this, Search);
      _defineProperty(this, "_id", null);
      _defineProperty(this, "_table", null);
      _defineProperty(this, "_value", null);
      _defineProperty(this, "_control", null);
      _defineProperty(this, "_options", {
        id: '',
        type: '',
        field: null,
        label: null
      });
      this._table = table;
      this._options = $.extend(true, this._options, options);
      this._id = this._options.hasOwnProperty('id') && typeof this._options.id === 'string' && this._options.id ? this._options.id : coreuiTableUtils.hashCode();
    }

    /**
     * Получение параметров
     * @returns {object}
     */
    return _createClass(Search, [{
      key: "getOptions",
      value: function getOptions() {
        return $.extend(true, {}, this._options);
      }

      /**
       * Получение id
       * @returns {string}
       */
    }, {
      key: "getId",
      value: function getId() {
        return this._id;
      }

      /**
       * Установка значения
       * @param {string} value
       */
    }, {
      key: "setValue",
      value: function setValue(value) {}

      /**
       * Получение значения
       * @returns {string|null}
       */
    }, {
      key: "getValue",
      value: function getValue() {}

      /**
       * Получение название поля
       * @returns {string|null}
       */
    }, {
      key: "getField",
      value: function getField() {
        return this._options.field;
      }

      /**
       * Фильтрация данных
       * @returns {string} fieldValue
       * @returns {string} searchValue
       * @returns {boolean}
       */
    }, {
      key: "filter",
      value: function filter(fieldValue, searchValue) {
        if (['string', 'number'].indexOf(_typeof(fieldValue)) < 0 || ['string', 'number'].indexOf(_typeof(searchValue)) < 0) {
          return false;
        }
        return fieldValue.toString().toLowerCase().indexOf(searchValue.toString().toLowerCase()) >= 0;
      }

      /**
       * Формирование контента
       * @returns {jQuery|string}
       */
    }, {
      key: "render",
      value: function render() {}
    }]);
  }();

  function _callSuper$t(_this, derived, args) {
    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      } catch (e) {
        return false;
      }
    }
    derived = _getPrototypeOf(derived);
    return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));
  }
  var SearchText = /*#__PURE__*/function (_Search) {
    /**
     * Инициализация
     * @param {coreuiTableInstance} table
     * @param {Object}              options
     */
    function SearchText(table, options) {
      var _this2;
      _classCallCheck(this, SearchText);
      options = $.extend(true, {
        id: null,
        type: 'text',
        field: null,
        label: null,
        value: null,
        width: 200,
        attr: {
          "class": "form-control d-inline-block"
        }
      }, options);
      _this2 = _callSuper$t(this, SearchText, [table, options]);
      if (_this2._options.value !== null) {
        _this2.setValue(_this2._options.value);
      }
      return _this2;
    }

    /**
     * Установка значения
     * @param {string} value
     */
    _inherits(SearchText, _Search);
    return _createClass(SearchText, [{
      key: "setValue",
      value: function setValue(value) {
        if (value !== null && typeof value !== 'string' && typeof value !== 'number') {
          return;
        }
        this._value = value;
        if (this._control) {
          this._control.val(this._value === null ? '' : this._value);
        }
      }

      /**
       * Получение значения
       * @returns {string|null}
       */
    }, {
      key: "getValue",
      value: function getValue() {
        if (this._control) {
          var value = this._control.val();
          if (typeof value === 'string' && value !== '') {
            return value;
          }
        }
        return this._value;
      }

      /**
       * Формирование контента
       * @returns {jQuery}
       */
    }, {
      key: "render",
      value: function render() {
        if (!coreuiTableUtils.isObject(this._options.attr)) {
          this._options.attr = {};
        }
        if (this._options.hasOwnProperty('width') && coreuiTableUtils.isNumeric(this._options.width)) {
          if (this._options.attr.hasOwnProperty('style')) {
            this._options.attr['style'] += ';width:' + this._options.width + 'px';
          } else {
            this._options.attr['style'] = 'width:' + this._options.width + 'px';
          }
        }
        this._options.attr['value'] = typeof this._value === 'string' || typeof this._value === 'number' ? this._value : '';
        if (this._options.attr.hasOwnProperty('type')) {
          delete this._options.attr.type;
        }
        var attributes = [];
        var table = this._table;
        $.each(this._options.attr, function (name, value) {
          if (['string', 'number'].indexOf(_typeof(value)) >= 0) {
            attributes.push(name + '="' + value + '"');
          }
        });
        this._control = $(coreuiTableUtils.render(tpl['search/text.html'], {
          attr: attributes.length > 0 ? ' ' + attributes.join(' ') : ''
        }));
        $('input', this._control).keyup(function (e) {
          if (e.key === 'Enter' || e.keyCode === 13) {
            table.searchRecords();
            var container = coreuiTableElements.getSearchContainer(table.getId());
            container.fadeOut('fast');
          }
        });
        return this._control;
      }
    }]);
  }(Search);

  function _callSuper$s(_this, derived, args) {
    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      } catch (e) {
        return false;
      }
    }
    derived = _getPrototypeOf(derived);
    return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));
  }
  var SearchNumber = /*#__PURE__*/function (_Search) {
    /**
     * Инициализация
     * @param {coreuiTableInstance} table
     * @param {Object}              options
     */
    function SearchNumber(table, options) {
      var _this2;
      _classCallCheck(this, SearchNumber);
      options = $.extend(true, {
        id: null,
        type: 'number',
        field: null,
        label: null,
        value: null,
        width: 200,
        attr: {
          "class": "form-control d-inline-block"
        }
      }, options);
      _this2 = _callSuper$s(this, SearchNumber, [table, options]);
      if (_this2._options.value !== null) {
        _this2.setValue(_this2._options.value);
      }
      return _this2;
    }

    /**
     * Установка значения
     * @param {Object} value
     */
    _inherits(SearchNumber, _Search);
    return _createClass(SearchNumber, [{
      key: "setValue",
      value: function setValue(value) {
        if (value) {
          if (!coreuiTableUtils.isObject(value)) {
            return;
          }
          var numberStart = null;
          var numberEnd = null;
          if (value.hasOwnProperty('start') && ['string', 'number'].indexOf(_typeof(value.start)) >= 0 && !isNaN(Number(value.start))) {
            numberStart = Number(value.start);
          }
          if (value.hasOwnProperty('end') && ['string', 'number'].indexOf(_typeof(value.end)) >= 0 && !isNaN(Number(value.end))) {
            numberEnd = Number(value.end);
          }
          if (numberStart === null && numberEnd === null) {
            this._value = null;
          } else {
            this._value = {
              start: numberStart,
              end: numberEnd
            };
          }
        } else {
          this._value = null;
        }
        if (this._control) {
          var inputStart = this._control.parent().find('input.number-start');
          var inputEnd = this._control.parent().find('input.number-end');
          if (this._value === null) {
            inputStart.val('');
            inputEnd.val('');
          } else if (coreuiTableUtils.isObject(this._value)) {
            inputStart.val(_typeof(this._value.start) !== null ? this._value.start : '');
            inputEnd.val(_typeof(this._value.end) !== null ? this._value.end : '');
          }
        }
      }

      /**
       * Получение значения
       * @returns {string|null}
       */
    }, {
      key: "getValue",
      value: function getValue() {
        if (this._control) {
          var inputStart = this._control.parent().find('input.number-start');
          var inputEnd = this._control.parent().find('input.number-end');
          if (inputStart[0] && inputEnd[0]) {
            var valueStart = inputStart.val();
            var valueEnd = inputEnd.val();
            if (typeof valueStart === 'string' && valueStart !== '' || typeof valueEnd === 'string' && valueEnd !== '') {
              return {
                start: valueStart !== '' && !isNaN(Number(valueStart)) ? Number(valueStart) : null,
                end: valueEnd !== '' && !isNaN(Number(valueEnd)) ? Number(valueEnd) : null
              };
            }
          }
        }
        return this._value;
      }

      /**
       * Фильтрация данных
       * @returns {string}              fieldValue
       * @returns {Array|string|number} searchValue
       * @returns {boolean}
       */
    }, {
      key: "filter",
      value: function filter(fieldValue, searchValue) {
        if (['string', 'number'].indexOf(_typeof(fieldValue)) < 0 || !coreuiTableUtils.isObject(searchValue) || ['string', 'number'].indexOf(_typeof(searchValue.start)) < 0 && ['string', 'number'].indexOf(_typeof(searchValue.end)) < 0) {
          return false;
        }
        var issetStart = ['string', 'number'].indexOf(_typeof(searchValue.start)) >= 0;
        var issetEnd = ['string', 'number'].indexOf(_typeof(searchValue.end)) >= 0;
        if (issetStart && issetEnd) {
          return fieldValue >= searchValue.start && fieldValue <= searchValue.end;
        } else if (issetStart) {
          return fieldValue >= searchValue.start;
        } else {
          return fieldValue <= searchValue.end;
        }
      }

      /**
       * Формирование контента
       * @returns {jQuery}
       */
    }, {
      key: "render",
      value: function render() {
        if (!coreuiTableUtils.isObject(this._options.attr)) {
          this._options.attr = {};
        }
        if (this._options.hasOwnProperty('width') && coreuiTableUtils.isNumeric(this._options.width)) {
          if (this._options.attr.hasOwnProperty('style')) {
            this._options.attr['style'] += ';width:' + this._options.width + 'px';
          } else {
            this._options.attr['style'] = 'width:' + this._options.width + 'px';
          }
        }
        if (this._options.attr.hasOwnProperty('type')) {
          delete this._options.attr.type;
        }
        if (this._options.attr.hasOwnProperty('value')) {
          delete this._options.attr.value;
        }
        var field = typeof this._options.field === 'string' ? this._options.field : '';
        var startAttr = [];
        var startEnd = [];
        var table = this._table;
        $.each(this._options.attr, function (name, value) {
          if (['name', 'value', 'class'].indexOf(name) >= 0 || ['string', 'number'].indexOf(_typeof(value)) < 0) {
            return;
          }
          startAttr.push(name + '="' + value + '"');
          startEnd.push(name + '="' + value + '"');
        });
        if (this._options.attr.hasOwnProperty('class') && ['string', 'number'].indexOf(_typeof(this._options.attr["class"])) >= 0) {
          startAttr.push('class="' + this._options.attr["class"] + ' number-start"');
          startEnd.push('class="' + this._options.attr["class"] + ' number-end"');
        } else {
          startAttr.push('class="number-start"');
          startEnd.push('class="number-end"');
        }
        if (field) {
          startAttr.push('name="' + field + '[start]"');
          startEnd.push('name="' + field + '[end]"');
        }
        startAttr.push('value="' + (this._value ? this._value.start : '') + '"');
        startEnd.push('value="' + (this._value ? this._value.end : '') + '"');
        this._control = $(coreuiTableUtils.render(tpl['search/number.html'], {
          startAttr: startAttr.length > 0 ? ' ' + startAttr.join(' ') : '',
          endAttr: startEnd.length > 0 ? ' ' + startEnd.join(' ') : ''
        }));
        $('input.number-start, input.number-end', this._control).keyup(function (e) {
          if (e.key === 'Enter' || e.keyCode === 13) {
            table.searchRecords();
            var container = coreuiTableElements.getSearchContainer(table.getId());
            container.fadeOut('fast');
          }
        });
        return this._control;
      }
    }]);
  }(Search);

  function _callSuper$r(_this, derived, args) {
    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      } catch (e) {
        return false;
      }
    }
    derived = _getPrototypeOf(derived);
    return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));
  }
  var SearchDate = /*#__PURE__*/function (_Search) {
    /**
     * Инициализация
     * @param {coreuiTableInstance} table
     * @param {Object}              options
     */
    function SearchDate(table, options) {
      var _this2;
      _classCallCheck(this, SearchDate);
      options = $.extend(true, {
        id: null,
        type: 'date',
        field: null,
        label: null,
        value: null,
        width: 200,
        attr: {
          "class": "form-control d-inline-block"
        }
      }, options);
      _this2 = _callSuper$r(this, SearchDate, [table, options]);
      if (_this2._options.value !== null) {
        _this2.setValue(_this2._options.value);
      }
      return _this2;
    }

    /**
     * Установка значения
     * @param {string} value
     */
    _inherits(SearchDate, _Search);
    return _createClass(SearchDate, [{
      key: "setValue",
      value: function setValue(value) {
        if (typeof value !== 'string' && value !== null) {
          return;
        }
        if (value && (value.match(/^\d{4}\-\d{2}\-\d{2}$/) === null || isNaN(new Date(value)))) {
          return;
        }
        this._value = value;
        if (this._control) {
          this._control.val(this._value === null ? '' : this._value);
        }
      }

      /**
       * Получение значения
       * @returns {string|null}
       */
    }, {
      key: "getValue",
      value: function getValue() {
        if (this._control) {
          var value = this._control.val();
          if (typeof value === 'string' && value !== '') {
            return value;
          }
        }
        return this._value;
      }

      /**
       * Фильтрация данных
       * @returns {string}              fieldValue
       * @returns {Array|string|number} searchValue
       * @returns {boolean}
       */
    }, {
      key: "filter",
      value: function filter(fieldValue, searchValue) {
        if (['string', 'number'].indexOf(_typeof(fieldValue)) < 0 || ['string', 'number'].indexOf(_typeof(searchValue)) < 0) {
          return false;
        }
        return fieldValue.toString().indexOf(searchValue.toString()) === 0;
      }

      /**
       * Формирование контента
       * @returns {jQuery}
       */
    }, {
      key: "render",
      value: function render() {
        if (!coreuiTableUtils.isObject(this._options.attr)) {
          this._options.attr = {};
        }
        if (this._options.hasOwnProperty('width') && coreuiTableUtils.isNumeric(this._options.width)) {
          if (this._options.attr.hasOwnProperty('style')) {
            this._options.attr['style'] += ';width:' + this._options.width + 'px';
          } else {
            this._options.attr['style'] = 'width:' + this._options.width + 'px';
          }
        }
        this._options.attr['value'] = typeof this._value === 'string' || typeof this._value === 'number' ? this._value : '';
        if (this._options.attr.hasOwnProperty('type')) {
          delete this._options.attr.type;
        }
        var attributes = [];
        var table = this._table;
        $.each(this._options.attr, function (name, value) {
          attributes.push(name + '="' + value + '"');
        });
        this._control = $(coreuiTableUtils.render(tpl['search/date.html'], {
          attr: attributes.length > 0 ? ' ' + attributes.join(' ') : ''
        }));
        this._control.keyup(function (e) {
          if (e.key === 'Enter' || e.keyCode === 13) {
            table.searchRecords();
            var container = coreuiTableElements.getSearchContainer(table.getId());
            container.fadeOut('fast');
          }
        });
        return this._control;
      }
    }]);
  }(Search);

  function _callSuper$q(_this, derived, args) {
    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      } catch (e) {
        return false;
      }
    }
    derived = _getPrototypeOf(derived);
    return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));
  }
  var SearchDateMonth = /*#__PURE__*/function (_Search) {
    /**
     * Инициализация
     * @param {coreuiTableInstance} table
     * @param {Object}              options
     */
    function SearchDateMonth(table, options) {
      var _this2;
      _classCallCheck(this, SearchDateMonth);
      options = $.extend(true, {
        id: null,
        type: 'date_month',
        field: null,
        label: null,
        value: null,
        width: 200,
        attr: {
          "class": "form-control d-inline-block"
        }
      }, options);
      _this2 = _callSuper$q(this, SearchDateMonth, [table, options]);
      if (_this2._options.value !== null) {
        _this2.setValue(_this2._options.value);
      }
      return _this2;
    }

    /**
     * Установка значения
     * @param {string|null} value
     */
    _inherits(SearchDateMonth, _Search);
    return _createClass(SearchDateMonth, [{
      key: "setValue",
      value: function setValue(value) {
        if (typeof value !== 'string' && value !== null) {
          return;
        }
        if (value && (value.match(/^\d{4}\-\d{2}$/) === null || isNaN(new Date(value)))) {
          return;
        }
        this._value = value;
        if (this._control) {
          this._control.val(this._value === null ? '' : this._value);
        }
      }

      /**
       * Получение значения
       * @returns {string|null}
       */
    }, {
      key: "getValue",
      value: function getValue() {
        if (this._control) {
          var value = this._control.val();
          if (typeof value === 'string' && value !== '') {
            return value;
          }
          return null;
        }
        return this._value;
      }

      /**
       * Фильтрация данных
       * @returns {string} fieldValue
       * @returns {string} searchValue
       * @returns {boolean}
       */
    }, {
      key: "filter",
      value: function filter(fieldValue, searchValue) {
        if (['string', 'number'].indexOf(_typeof(fieldValue)) < 0 || ['string', 'number'].indexOf(_typeof(searchValue)) < 0) {
          return false;
        }
        return fieldValue.toString().toLowerCase().indexOf(searchValue.toString().toLowerCase()) === 0;
      }

      /**
       * Формирование контента
       * @returns {jQuery}
       */
    }, {
      key: "render",
      value: function render() {
        if (!coreuiTableUtils.isObject(this._options.attr)) {
          this._options.attr = {};
        }
        if (this._options.hasOwnProperty('width') && coreuiTableUtils.isNumeric(this._options.width)) {
          if (this._options.attr.hasOwnProperty('style')) {
            this._options.attr['style'] += ';width:' + this._options.width + 'px';
          } else {
            this._options.attr['style'] = 'width:' + this._options.width + 'px';
          }
        }
        this._options.attr['value'] = typeof this._value === 'string' || typeof this._value === 'number' ? this._value : '';
        if (this._options.attr.hasOwnProperty('type')) {
          delete this._options.attr.type;
        }
        var attributes = [];
        var table = this._table;
        $.each(this._options.attr, function (name, value) {
          attributes.push(name + '="' + value + '"');
        });
        this._control = $(coreuiTableUtils.render(tpl['search/date_month.html'], {
          attr: attributes.length > 0 ? ' ' + attributes.join(' ') : ''
        }));
        this._control.keyup(function (e) {
          if (e.key === 'Enter' || e.keyCode === 13) {
            table.searchRecords();
            var container = coreuiTableElements.getSearchContainer(table.getId());
            container.fadeOut('fast');
          }
        });
        return this._control;
      }
    }]);
  }(Search);

  function _callSuper$p(_this, derived, args) {
    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      } catch (e) {
        return false;
      }
    }
    derived = _getPrototypeOf(derived);
    return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));
  }
  var SearchDatetime = /*#__PURE__*/function (_Search) {
    /**
     * Инициализация
     * @param {coreuiTableInstance} table
     * @param {Object}              options
     */
    function SearchDatetime(table, options) {
      var _this2;
      _classCallCheck(this, SearchDatetime);
      options = $.extend(true, {
        id: null,
        type: 'datetime',
        field: null,
        label: null,
        value: null,
        width: 200,
        attr: {
          "class": "form-control d-inline-block"
        }
      }, options);
      _this2 = _callSuper$p(this, SearchDatetime, [table, options]);
      if (_this2._options.value !== null) {
        _this2.setValue(_this2._options.value);
      }
      return _this2;
    }

    /**
     * Установка значения
     * @param {string} value
     */
    _inherits(SearchDatetime, _Search);
    return _createClass(SearchDatetime, [{
      key: "setValue",
      value: function setValue(value) {
        if (typeof value !== 'string' && value !== null) {
          return;
        }
        if (value && (value.match(/^\d{4}\-\d{2}\-\d{2}(T| )\d{2}:\d{2}(:\d{2}|)$/) === null || isNaN(new Date(value)))) {
          return;
        }
        this._value = value;
        if (this._control) {
          this._control.val(this._value === null ? '' : this._value);
        }
      }

      /**
       * Получение значения
       * @returns {string}
       */
    }, {
      key: "getValue",
      value: function getValue() {
        if (this._control) {
          var value = this._control.val();
          if (typeof value === 'string' && value !== '') {
            return value;
          }
        }
        return this._value;
      }

      /**
       * Фильтрация данных
       * @returns {string}              fieldValue
       * @returns {Array|string|number} searchValue
       * @returns {boolean}
       */
    }, {
      key: "filter",
      value: function filter(fieldValue, searchValue) {
        if (['string', 'number'].indexOf(_typeof(fieldValue)) < 0 || ['string', 'number'].indexOf(_typeof(searchValue)) < 0) {
          return false;
        }
        return fieldValue.toString() === searchValue.toString();
      }

      /**
       * Формирование контента
       * @returns {jQuery}
       */
    }, {
      key: "render",
      value: function render() {
        if (!coreuiTableUtils.isObject(this._options.attr)) {
          this._options.attr = {};
        }
        if (this._options.hasOwnProperty('width') && coreuiTableUtils.isNumeric(this._options.width)) {
          if (this._options.attr.hasOwnProperty('style')) {
            this._options.attr['style'] += ';width:' + this._options.width + 'px';
          } else {
            this._options.attr['style'] = 'width:' + this._options.width + 'px';
          }
        }
        this._options.attr['value'] = typeof this._value === 'string' || typeof this._value === 'number' ? this._value : '';
        if (this._options.attr.hasOwnProperty('type')) {
          delete this._options.attr.type;
        }
        var attributes = [];
        var table = this._table;
        $.each(this._options.attr, function (name, value) {
          if (['string', 'number'].indexOf(_typeof(value)) >= 0) {
            attributes.push(name + '="' + value + '"');
          }
        });
        this._control = $(coreuiTableUtils.render(tpl['search/datetime.html'], {
          attr: attributes.length > 0 ? ' ' + attributes.join(' ') : ''
        }));
        this._control.keyup(function (e) {
          if (e.key === 'Enter' || e.keyCode === 13) {
            table.searchRecords();
            var container = coreuiTableElements.getSearchContainer(table.getId());
            container.fadeOut('fast');
          }
        });
        return this._control;
      }
    }]);
  }(Search);

  function _callSuper$o(_this, derived, args) {
    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      } catch (e) {
        return false;
      }
    }
    derived = _getPrototypeOf(derived);
    return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));
  }
  var SearchDateRange = /*#__PURE__*/function (_Search) {
    /**
     * Инициализация
     * @param {coreuiTableInstance} table
     * @param {Object}              options
     */
    function SearchDateRange(table, options) {
      var _this2;
      _classCallCheck(this, SearchDateRange);
      options = $.extend(true, {
        id: null,
        type: 'date_range',
        field: null,
        label: null,
        value: null,
        width: 200,
        attr: {
          "class": "form-control d-inline-block"
        }
      }, options);
      _this2 = _callSuper$o(this, SearchDateRange, [table, options]);
      if (_this2._options.value !== null) {
        _this2.setValue(_this2._options.value);
      }
      return _this2;
    }

    /**
     * Установка значения
     * @param {Object} value
     */
    _inherits(SearchDateRange, _Search);
    return _createClass(SearchDateRange, [{
      key: "setValue",
      value: function setValue(value) {
        if (value) {
          if (!coreuiTableUtils.isObject(value)) {
            return;
          }
          var dateStart = null;
          var dateEnd = null;
          if (value.hasOwnProperty('start') && typeof value.start === 'string' && value.start.match(/^\d{4}\-\d{2}\-\d{2}$/) === null && isNaN(new Date(value.start))) {
            dateStart = value.start;
          }
          if (value.hasOwnProperty('end') && typeof value.end === 'string' && value.end.match(/^\d{4}\-\d{2}\-\d{2}$/) === null && isNaN(new Date(value.end))) {
            dateEnd = value.end;
          }
          if (dateStart === null && dateEnd === null) {
            this._value = null;
          } else {
            this._value = {
              start: dateStart,
              end: dateEnd
            };
          }
        } else {
          this._value = null;
        }
        if (this._control) {
          var inputStart = this._control.parent().find('input.date-start');
          var inputEnd = this._control.parent().find('input.date-end');
          if (this._value === null) {
            inputStart.val('');
            inputEnd.val('');
          } else if (coreuiTableUtils.isObject(this._value)) {
            inputStart.val(_typeof(this._value.start) !== null ? this._value.start : '');
            inputEnd.val(_typeof(this._value.end) !== null ? this._value.end : '');
          }
        }
      }

      /**
       * Получение значения
       * @returns {Object|null}
       */
    }, {
      key: "getValue",
      value: function getValue() {
        if (this._control) {
          var inputStart = this._control.parent().find('input.date-start');
          var inputEnd = this._control.parent().find('input.date-end');
          if (inputStart[0] && inputEnd[0]) {
            var valueStart = inputStart.val();
            var valueEnd = inputEnd.val();
            if (typeof valueStart === 'string' && valueStart !== '' || typeof valueEnd === 'string' && valueEnd !== '') {
              return {
                start: valueStart !== '' ? valueStart : null,
                end: valueEnd !== '' ? valueEnd : null
              };
            }
          }
        }
        return this._value;
      }

      /**
       * Фильтрация данных
       * @returns {string} fieldValue
       * @returns {Object} searchValue
       * @returns {boolean}
       */
    }, {
      key: "filter",
      value: function filter(fieldValue, searchValue) {
        if (['string', 'number'].indexOf(_typeof(fieldValue)) < 0 || !coreuiTableUtils.isObject(searchValue) || typeof searchValue.start !== 'string' && typeof searchValue.end !== 'string') {
          return false;
        }
        var issetStart = ['string', 'number'].indexOf(_typeof(searchValue.start)) >= 0;
        var issetEnd = ['string', 'number'].indexOf(_typeof(searchValue.end)) >= 0;
        if (issetStart && issetEnd) {
          return fieldValue >= searchValue.start && fieldValue <= searchValue.end;
        } else if (issetStart) {
          return fieldValue >= searchValue.start;
        } else {
          return fieldValue <= searchValue.end;
        }
      }

      /**
       * Формирование контента
       * @returns {string}
       */
    }, {
      key: "render",
      value: function render() {
        var options = this.getOptions();
        if (!coreuiTableUtils.isObject(options.attr)) {
          options.attr = {};
        }
        if (options.hasOwnProperty('width') && coreuiTableUtils.isNumeric(options.width)) {
          if (options.attr.hasOwnProperty('style')) {
            options.attr['style'] += ';width:' + options.width + 'px';
          } else {
            options.attr['style'] = 'width:' + options.width + 'px';
          }
        }
        if (options.attr.hasOwnProperty('type')) {
          delete options.attr.type;
        }
        if (options.attr.hasOwnProperty('value')) {
          delete options.attr.value;
        }
        var startAttr = [];
        var startEnd = [];
        $.each(options.attr, function (name, value) {
          if (['name', 'value', 'class'].indexOf(name) >= 0 || ['string', 'number'].indexOf(_typeof(value)) < 0) {
            return;
          }
          startAttr.push(name + '="' + value + '"');
          startEnd.push(name + '="' + value + '"');
        });
        if (options.attr.hasOwnProperty('class') && ['string', 'number'].indexOf(_typeof(options.attr["class"])) >= 0) {
          startAttr.push('class="' + options.attr["class"] + ' date-start"');
          startEnd.push('class="' + options.attr["class"] + ' date-end"');
        } else {
          startAttr.push('class="date-start"');
          startEnd.push('class="date-end"');
        }
        startAttr.push('value="' + (this._value ? this._value.start : '') + '"');
        startEnd.push('value="' + (this._value ? this._value.end : '') + '"');
        var control = $(coreuiTableUtils.render(tpl['search/date_range.html'], {
          startAttr: startAttr.length > 0 ? ' ' + startAttr.join(' ') : '',
          endAttr: startEnd.length > 0 ? ' ' + startEnd.join(' ') : ''
        }));
        $('input.date-start', control).change(function () {
          var dateEnd = $('input.date-end', control).attr('min', $(this).val());
          if ("showPicker" in HTMLInputElement.prototype) {
            $(dateEnd)[0].showPicker();
          }
        });
        $('input.date-end', control).change(function () {
          $('input.date-start', control).attr('max', $(this).val());
        });
        this._control = control;
        return this._control;
      }
    }]);
  }(Search);

  function _callSuper$n(_this, derived, args) {
    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      } catch (e) {
        return false;
      }
    }
    derived = _getPrototypeOf(derived);
    return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));
  }
  var SearchDatetimeRange = /*#__PURE__*/function (_Search) {
    /**
     * Инициализация
     * @param {coreuiTableInstance} table
     * @param {Object}              options
     */
    function SearchDatetimeRange(table, options) {
      var _this2;
      _classCallCheck(this, SearchDatetimeRange);
      options = $.extend(true, {
        id: null,
        type: 'datetime_range',
        field: null,
        label: null,
        value: null,
        width: 200,
        attr: {
          "class": "form-control d-inline-block"
        }
      }, options);
      _this2 = _callSuper$n(this, SearchDatetimeRange, [table, options]);
      if (_this2._options.value !== null) {
        _this2.setValue(_this2._options.value);
      }
      return _this2;
    }

    /**
     * Установка значения
     * @param {Object} value
     */
    _inherits(SearchDatetimeRange, _Search);
    return _createClass(SearchDatetimeRange, [{
      key: "setValue",
      value: function setValue(value) {
        if (value) {
          if (!coreuiTableUtils.isObject(value)) {
            return;
          }
          var dateStart = null;
          var dateEnd = null;
          if (value.hasOwnProperty('start') && typeof value.start === 'string' && value.start.match(/^\d{4}\-\d{2}\-\d{2} \d{2}:\d{2}:\d{2}$/) === null && isNaN(new Date(value.start))) {
            dateStart = value.start;
          }
          if (value.hasOwnProperty('end') && typeof value.end === 'string' && value.end.match(/^\d{4}\-\d{2}\-\d{2} \d{2}:\d{2}:\d{2}$/) === null && isNaN(new Date(value.end))) {
            dateEnd = value.end;
          }
          if (dateStart === null && dateEnd === null) {
            this._value = null;
          } else {
            this._value = {
              start: dateStart,
              end: dateEnd
            };
          }
        } else {
          this._value = null;
        }
        if (this._control) {
          var inputStart = this._control.parent().find('input.date-start');
          var inputEnd = this._control.parent().find('input.date-end');
          if (this._value === null) {
            inputStart.val('');
            inputEnd.val('');
          } else if (coreuiTableUtils.isObject(this._value)) {
            inputStart.val(_typeof(this._value.start) !== null ? this._value.start : '');
            inputEnd.val(_typeof(this._value.end) !== null ? this._value.end : '');
          }
        }
      }

      /**
       * Получение значения
       * @returns {Object|null}
       */
    }, {
      key: "getValue",
      value: function getValue() {
        if (this._control) {
          var inputStart = this._control.parent().find('input.date-start');
          var inputEnd = this._control.parent().find('input.date-end');
          if (inputStart[0] && inputEnd[0]) {
            var valueStart = inputStart.val();
            var valueEnd = inputEnd.val();
            if (typeof valueStart === 'string' && valueStart !== '' || typeof valueEnd === 'string' && valueEnd !== '') {
              return {
                start: valueStart !== '' ? valueStart : null,
                end: valueEnd !== '' ? valueEnd : null
              };
            }
          }
        }
        return this._value;
      }

      /**
       * Фильтрация данных
       * @returns {string}              fieldValue
       * @returns {Array|string|number} searchValue
       * @returns {boolean}
       */
    }, {
      key: "filter",
      value: function filter(fieldValue, searchValue) {
        if (['string', 'number'].indexOf(_typeof(fieldValue)) < 0 || !coreuiTableUtils.isObject(searchValue) || typeof searchValue.start !== 'string' && typeof searchValue.end !== 'string') {
          return false;
        }
        var issetStart = ['string', 'number'].indexOf(_typeof(searchValue.start)) >= 0;
        var issetEnd = ['string', 'number'].indexOf(_typeof(searchValue.end)) >= 0;
        if (issetStart && issetEnd) {
          return fieldValue >= searchValue.start && fieldValue <= searchValue.end;
        } else if (issetStart) {
          return fieldValue >= searchValue.start;
        } else {
          return fieldValue <= searchValue.end;
        }
      }

      /**
       * Формирование контента
       * @returns {string}
       */
    }, {
      key: "render",
      value: function render() {
        if (!coreuiTableUtils.isObject(this._options.attr)) {
          this._options.attr = {};
        }
        if (this._options.hasOwnProperty('width') && coreuiTableUtils.isNumeric(this._options.width)) {
          if (this._options.attr.hasOwnProperty('style')) {
            this._options.attr['style'] += ';width:' + this._options.width + 'px';
          } else {
            this._options.attr['style'] = 'width:' + this._options.width + 'px';
          }
        }
        if (this._options.attr.hasOwnProperty('type')) {
          delete this._options.attr.type;
        }
        if (this._options.attr.hasOwnProperty('value')) {
          delete this._options.attr.value;
        }
        var startAttr = [];
        var startEnd = [];
        this._table;
        $.each(this._options.attr, function (name, value) {
          if (['name', 'value', 'class'].indexOf(name) >= 0 || ['string', 'number'].indexOf(_typeof(value)) < 0) {
            return;
          }
          startAttr.push(name + '="' + value + '"');
          startEnd.push(name + '="' + value + '"');
        });
        if (this._options.attr.hasOwnProperty('class') && ['string', 'number'].indexOf(_typeof(this._options.attr["class"])) >= 0) {
          startAttr.push('class="' + this._options.attr["class"] + ' date-start"');
          startEnd.push('class="' + this._options.attr["class"] + ' date-end"');
        } else {
          startAttr.push('class="date-start"');
          startEnd.push('class="date-end"');
        }
        startAttr.push('value="' + (this._value ? this._value.start : '') + '"');
        startEnd.push('value="' + (this._value ? this._value.end : '') + '"');
        var control = $(coreuiTableUtils.render(tpl['search/datetime_range.html'], {
          startAttr: startAttr.length > 0 ? ' ' + startAttr.join(' ') : '',
          endAttr: startEnd.length > 0 ? ' ' + startEnd.join(' ') : ''
        }));
        $('input.date-start', control).change(function () {
          var dateEnd = $('input.date-end', control).attr('min', $(this).val());
          if ("showPicker" in HTMLInputElement.prototype) {
            $(dateEnd)[0].showPicker();
          }
        });
        $('input.date-end', control).change(function () {
          $('input.date-start', control).attr('max', $(this).val());
        });
        this._control = control;
        return this._control;
      }
    }]);
  }(Search);

  function _callSuper$m(_this, derived, args) {
    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      } catch (e) {
        return false;
      }
    }
    derived = _getPrototypeOf(derived);
    return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));
  }
  var SearchCheckbox = /*#__PURE__*/function (_Search) {
    /**
     * Инициализация
     * @param {coreuiTableInstance} table
     * @param {Object}              options
     */
    function SearchCheckbox(table, options) {
      var _this2;
      _classCallCheck(this, SearchCheckbox);
      options = $.extend(true, {
        id: null,
        type: 'checkbox',
        field: null,
        label: null,
        value: null,
        options: []
      }, options);
      _this2 = _callSuper$m(this, SearchCheckbox, [table, options]);
      if (_this2._options.value !== null) {
        _this2.setValue(_this2._options.value);
      }
      return _this2;
    }

    /**
     * Установка значения
     * @param {Array|null} value
     */
    _inherits(SearchCheckbox, _Search);
    return _createClass(SearchCheckbox, [{
      key: "setValue",
      value: function setValue(value) {
        if (['string', 'number', 'object'].indexOf(_typeof(value)) < 0) {
          return;
        }
        if (_typeof(value) === 'object') {
          if (Array.isArray(value)) {
            var items = [];
            $.each(value, function (key, item) {
              if (typeof item !== 'string' && typeof item !== 'number') {
                return;
              }
              items.push(item);
            });
            this._value = items;
          } else {
            this._value = null;
          }
        } else {
          this._value = [value];
        }
        if (this._control) {
          $('input:checked', this._control).prop('checked', false);
          if (Array.isArray(this._value)) {
            $.each(this._value, function (key, value) {
              $('input[value="' + value + '"]', this._control).prop('checked', true);
            });
          }
        }
      }

      /**
       * Получение значения
       * @returns {Array|null}
       */
    }, {
      key: "getValue",
      value: function getValue() {
        if (this._control) {
          var inputs = $('input:checked', this._control);
          var items = [];
          $.each(inputs, function (key, input) {
            var value = $(input).attr('value');
            if (['string', 'number'].indexOf(_typeof(value)) >= 0 && value !== '') {
              items.push(value);
            }
          });
          return items.length > 0 ? items : null;
        } else {
          return this._value;
        }
      }

      /**
       * Фильтрация данных
       * @returns {string} fieldValue
       * @returns {Array}  searchValue
       * @returns {boolean}
       */
    }, {
      key: "filter",
      value: function filter(fieldValue, searchValue) {
        if (['string', 'number'].indexOf(_typeof(fieldValue)) < 0 || !Array.isArray(searchValue)) {
          return false;
        }
        return searchValue.indexOf(fieldValue) >= 0;
      }

      /**
       * Формирование контента
       * @returns {string}
       */
    }, {
      key: "render",
      value: function render() {
        var that = this;
        var options = [];
        $.each(this._options.options, function (key, option) {
          if (['string', 'numeric'].indexOf(_typeof(option)) >= 0) {
            var checked = Array.isArray(that._value) ? that._value.indexOf(key) >= 0 : false;
            options.push({
              text: option,
              value: key,
              checked: checked
            });
          } else {
            if (!coreuiTableUtils.isObject(option) || !option.hasOwnProperty('value') || ['string', 'numeric'].indexOf(_typeof(option.value)) === -1) {
              return;
            }
            var _checked = Array.isArray(that._value) ? that._value.indexOf(option.value) >= 0 : false;
            var text = option.hasOwnProperty('text') ? option.text : option.value;
            options.push({
              text: text,
              value: option.value,
              checked: _checked
            });
          }
        });
        this._control = $(coreuiTableUtils.render(tpl['search/checkbox.html'], {
          options: options
        }));
        return this._control;
      }
    }]);
  }(Search);

  function _callSuper$l(_this, derived, args) {
    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      } catch (e) {
        return false;
      }
    }
    derived = _getPrototypeOf(derived);
    return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));
  }
  var SearchCheckboxBtn = /*#__PURE__*/function (_Search) {
    /**
     * Инициализация
     * @param {coreuiTableInstance} table
     * @param {Object}              options
     */
    function SearchCheckboxBtn(table, options) {
      var _this2;
      _classCallCheck(this, SearchCheckboxBtn);
      options = $.extend(true, {
        id: null,
        type: 'checkboxBtn',
        field: null,
        label: null,
        optionsClass: 'btn btn-outline-secondary',
        value: null,
        options: []
      }, options);
      _this2 = _callSuper$l(this, SearchCheckboxBtn, [table, options]);
      if (_this2._options.value !== null) {
        _this2.setValue(_this2._options.value);
      }
      return _this2;
    }

    /**
     * Установка значения
     * @param {Array|null} value
     */
    _inherits(SearchCheckboxBtn, _Search);
    return _createClass(SearchCheckboxBtn, [{
      key: "setValue",
      value: function setValue(value) {
        if (['string', 'number', 'object'].indexOf(_typeof(value)) < 0) {
          return;
        }
        if (_typeof(value) === 'object') {
          if (Array.isArray(value)) {
            var items = [];
            $.each(value, function (key, item) {
              if (typeof item !== 'string' && typeof item !== 'number') {
                return;
              }
              items.push(item);
            });
            this._value = items;
          } else {
            this._value = null;
          }
        } else {
          this._value = [value];
        }
        if (this._control) {
          $('input:checked', this._control).prop('checked', false);
          if (Array.isArray(this._value)) {
            this._value.map(function (value) {
              $('input[value="' + value + '"]', this._control).prop('checked', true);
            });
          }
        }
      }

      /**
       * Получение значения
       * @returns {Array|null}
       */
    }, {
      key: "getValue",
      value: function getValue() {
        if (this._control) {
          var inputs = $('input:checked', this._control);
          var items = [];
          $.each(inputs, function (key, input) {
            var value = $(input).attr('value');
            if (['string', 'number'].indexOf(_typeof(value)) >= 0 && value !== '') {
              items.push(value);
            }
          });
          return items.length > 0 ? items : null;
        } else {
          return this._value;
        }
      }

      /**
       * Фильтрация данных
       * @returns {string} fieldValue
       * @returns {Array}  searchValue
       * @returns {boolean}
       */
    }, {
      key: "filter",
      value: function filter(fieldValue, searchValue) {
        if (['string', 'number'].indexOf(_typeof(fieldValue)) < 0 || !Array.isArray(searchValue)) {
          return false;
        }
        return searchValue.indexOf(fieldValue) >= 0;
      }

      /**
       * Формирование контента
       * @returns {jQuery}
       */
    }, {
      key: "render",
      value: function render() {
        var that = this;
        var options = [];
        $.each(this._options.options, function (key, option) {
          if (['string', 'numeric'].indexOf(_typeof(option)) >= 0) {
            var checked = Array.isArray(that._value) ? that._value.indexOf(key) >= 0 : false;
            options.push({
              text: option,
              value: key,
              checked: checked,
              optionsClass: that._options.optionsClass,
              hash: coreuiTableUtils.hashCode()
            });
          } else {
            if (!coreuiTableUtils.isObject(option) || !option.hasOwnProperty('value') || ['string', 'numeric'].indexOf(_typeof(option.value)) === -1) {
              return;
            }
            var _checked = Array.isArray(that._value) ? that._value.indexOf(option.value) >= 0 : false;
            var text = option.hasOwnProperty('text') ? option.text : option.value;
            options.push({
              text: text,
              value: option.value,
              checked: _checked,
              optionsClass: that._options.optionsClass,
              hash: coreuiTableUtils.hashCode()
            });
          }
        });
        this._control = $(coreuiTableUtils.render(tpl['search/checkbox-btn.html'], {
          options: options
        }));
        return this._control;
      }
    }]);
  }(Search);

  function _callSuper$k(_this, derived, args) {
    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      } catch (e) {
        return false;
      }
    }
    derived = _getPrototypeOf(derived);
    return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));
  }
  var SearchRadio = /*#__PURE__*/function (_Search) {
    /**
     * Инициализация
     * @param {coreuiTableInstance} table
     * @param {Object}              options
     */
    function SearchRadio(table, options) {
      var _this2;
      _classCallCheck(this, SearchRadio);
      options = $.extend(true, {
        id: null,
        type: 'radio',
        field: null,
        label: null,
        value: null,
        options: []
      }, options);
      _this2 = _callSuper$k(this, SearchRadio, [table, options]);
      if (_this2._options.value !== null) {
        _this2.setValue(_this2._options.value);
      }
      return _this2;
    }

    /**
     * Установка значения
     * @param {string} value
     */
    _inherits(SearchRadio, _Search);
    return _createClass(SearchRadio, [{
      key: "setValue",
      value: function setValue(value) {
        if (value !== null && typeof value !== 'string' && typeof value !== 'number') {
          return;
        }
        this._value = value;
        if (this._control) {
          $('input', this._control).prop('checked', false);
          if (this._value !== null) {
            $('input[value="' + this._value + '"]', this._control).prop('checked', true);
          } else {
            $('input.coreui-table__all', this._control).prop('checked', true);
          }
        }
      }

      /**
       * Получение значения
       * @returns {string|null}
       */
    }, {
      key: "getValue",
      value: function getValue() {
        if (this._control) {
          var input = $('input:checked', this._control);
          if (input && input[0]) {
            var value = input.val();
            return value === '' ? null : value;
          } else {
            return null;
          }
        } else {
          return this._value;
        }
      }

      /**
       * Фильтрация данных
       * @returns {string}              fieldValue
       * @returns {Array|string|number} searchValue
       * @returns {boolean}
       */
    }, {
      key: "filter",
      value: function filter(fieldValue, searchValue) {
        if (['string', 'number'].indexOf(_typeof(fieldValue)) < 0 || ['string', 'number'].indexOf(_typeof(searchValue)) < 0) {
          return false;
        }
        return fieldValue.toString().toLowerCase() === searchValue.toString().toLowerCase();
      }

      /**
       * Формирование контента
       * @returns {jQuery}
       */
    }, {
      key: "render",
      value: function render() {
        var that = this;
        var checkedAll = true;
        var options = [];
        $.each(this._options.options, function (key, option) {
          if (['string', 'numeric'].indexOf(_typeof(option)) >= 0) {
            var checked = key == that._value;
            if (checked) {
              checkedAll = false;
            }
            options.push({
              text: option,
              value: key,
              checked: checked
            });
          } else {
            if (!coreuiTableUtils.isObject(option) || !option.hasOwnProperty('value') || ['string', 'numeric'].indexOf(_typeof(option.value)) === -1) {
              return;
            }
            var _checked = option.value == that._value;
            var text = option.hasOwnProperty('text') ? option.text : option.value;
            if (_checked) {
              checkedAll = false;
            }
            options.push({
              text: text,
              value: option.value,
              checked: _checked
            });
          }
        });
        this._control = $(coreuiTableUtils.render(tpl['search/radio.html'], {
          options: options,
          checkedAll: checkedAll,
          field: coreuiTableUtils.hashCode(),
          lang: this._table.getLang()
        }));
        return this._control;
      }
    }]);
  }(Search);

  function _callSuper$j(_this, derived, args) {
    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      } catch (e) {
        return false;
      }
    }
    derived = _getPrototypeOf(derived);
    return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));
  }
  var SearchRadioBtn = /*#__PURE__*/function (_Search) {
    /**
     * Инициализация
     * @param {coreuiTableInstance} table
     * @param {Object}              options
     */
    function SearchRadioBtn(table, options) {
      var _this2;
      _classCallCheck(this, SearchRadioBtn);
      options = $.extend(true, {
        id: null,
        type: 'radioBtn',
        field: null,
        optionsClass: 'btn btn-outline-secondary',
        label: null,
        value: null,
        options: []
      }, options);
      _this2 = _callSuper$j(this, SearchRadioBtn, [table, options]);
      if (_this2._options.value !== null) {
        _this2.setValue(_this2._options.value);
      }
      return _this2;
    }

    /**
     * Установка значения
     * @param {string|number} value
     */
    _inherits(SearchRadioBtn, _Search);
    return _createClass(SearchRadioBtn, [{
      key: "setValue",
      value: function setValue(value) {
        if (value !== null && typeof value !== 'string' && typeof value !== 'number') {
          return;
        }
        this._value = value;
        if (this._control) {
          $('input', this._control).prop('checked', false);
          if (this._value !== null) {
            $('input[value="' + this._value + '"]', this._control).prop('checked', true);
          } else {
            $('input.coreui-table__all', this._control).prop('checked', true);
          }
        }
      }

      /**
       * Получение значения
       * @returns {string|null}
       */
    }, {
      key: "getValue",
      value: function getValue() {
        if (this._control) {
          var input = $('input:checked', this._control);
          if (input && input[0]) {
            var value = input.val();
            return value === '' ? null : value;
          } else {
            return null;
          }
        } else {
          return this._value;
        }
      }

      /**
       * Фильтрация данных
       * @returns {string}              fieldValue
       * @returns {Array|string|number} searchValue
       * @returns {boolean}
       */
    }, {
      key: "filter",
      value: function filter(fieldValue, searchValue) {
        if (['string', 'number'].indexOf(_typeof(fieldValue)) < 0 || ['string', 'number'].indexOf(_typeof(searchValue)) < 0) {
          return false;
        }
        return fieldValue.toString().toLowerCase() === searchValue.toString().toLowerCase();
      }

      /**
       * Формирование контента
       * @returns {string}
       */
    }, {
      key: "render",
      value: function render() {
        var that = this;
        var checkedAll = true;
        var options = [];
        $.each(this._options.options, function (key, option) {
          if (['string', 'numeric'].indexOf(_typeof(option)) >= 0) {
            var checked = key == that._value;
            if (checked) {
              checkedAll = false;
            }
            options.push({
              text: option,
              value: key,
              checked: checked,
              optionsClass: that._options.optionsClass,
              hash: coreuiTableUtils.hashCode()
            });
          } else {
            if (!coreuiTableUtils.isObject(option) || !option.hasOwnProperty('value') || ['string', 'numeric'].indexOf(_typeof(option.value)) === -1) {
              return;
            }
            var _checked = option.value == that._value;
            var text = option.hasOwnProperty('text') ? option.text : option.value;
            if (_checked) {
              checkedAll = false;
            }
            options.push({
              text: text,
              value: option.value,
              checked: _checked,
              optionsClass: that._options.optionsClass,
              hash: coreuiTableUtils.hashCode()
            });
          }
        });
        this._control = $(coreuiTableUtils.render(tpl['search/radio-btn.html'], {
          options: options,
          checkedAll: checkedAll,
          optionAllHash: coreuiTableUtils.hashCode(),
          optionOptionsClass: that._options.optionsClass,
          field: coreuiTableUtils.hashCode(),
          lang: this._table.getLang()
        }));
        return this._control;
      }
    }]);
  }(Search);

  function _callSuper$i(_this, derived, args) {
    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      } catch (e) {
        return false;
      }
    }
    derived = _getPrototypeOf(derived);
    return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));
  }
  var SearchSelect = /*#__PURE__*/function (_Search) {
    /**
     * Инициализация
     * @param {coreuiTableInstance} table
     * @param {Object}              options
     */
    function SearchSelect(table, options) {
      var _this2;
      _classCallCheck(this, SearchSelect);
      options = $.extend(true, {
        id: null,
        type: 'select',
        field: null,
        label: null,
        width: null,
        value: null,
        attr: {
          "class": 'form-select d-inline-block'
        },
        options: []
      }, options);
      _this2 = _callSuper$i(this, SearchSelect, [table, options]);
      if (_this2._options.value !== null) {
        _this2.setValue(_this2._options.value);
      }
      return _this2;
    }

    /**
     * Установка значения
     * @param {string|number|Array} value
     */
    _inherits(SearchSelect, _Search);
    return _createClass(SearchSelect, [{
      key: "setValue",
      value: function setValue(value) {
        if (['string', 'number', 'object'].indexOf(_typeof(value)) < 0) {
          return;
        }
        if (_typeof(value) === 'object') {
          if (Array.isArray(value)) {
            var items = [];
            value.map(function (item) {
              if (typeof value !== 'string' && typeof value !== 'number') {
                return;
              }
              items.push(item);
            });
            this._value = items;
          } else {
            this._value = null;
          }
        } else {
          this._value = [value];
        }
        if (this._control) {
          $('option:selected', this._control).prop('selected', false);
          if (Array.isArray(this._value)) {
            this._value.map(function (value) {
              $('option[value="' + value + '"]', this._control).prop('selected', true);
            });
          }
        }
      }

      /**
       * Получение значения
       * @returns {Array|string|null}
       */
    }, {
      key: "getValue",
      value: function getValue() {
        if (this._control) {
          var isMultiple = !!this._control.attr('multiple');
          var options = $('option:selected', this._control);
          var items = [];
          $.each(options, function (key, option) {
            var value = $(option).attr('value');
            if (['string', 'number'].indexOf(_typeof(value)) >= 0 && value !== '') {
              items.push(value);
            }
          });
          return items.length > 0 ? isMultiple ? items : items[0] : null;
        } else {
          return this._value;
        }
      }

      /**
       * Фильтрация данных
       * @returns {string}              fieldValue
       * @returns {Array|string|number} searchValue
       * @returns {boolean}
       */
    }, {
      key: "filter",
      value: function filter(fieldValue, searchValue) {
        if (['string', 'number'].indexOf(_typeof(fieldValue)) < 0 || ['string', 'number'].indexOf(_typeof(searchValue)) < 0 && !Array.isArray(searchValue)) {
          return false;
        }
        if (Array.isArray(searchValue)) {
          return searchValue.indexOf(fieldValue) >= 0;
        } else {
          return fieldValue.toString().toLowerCase() === searchValue.toString().toLowerCase();
        }
      }

      /**
       * Формирование контента
       * @returns {string}
       */
    }, {
      key: "render",
      value: function render() {
        var that = this;
        var options = this.getOptions();
        var selectOptions = [];
        var attributes = [];
        if (!options.hasOwnProperty('attr') || !coreuiTableUtils.isObject(options.attr)) {
          options.attr = {};
        }
        if (options.field) {
          options.attr.name = this._options.field;
        }
        if (options.width) {
          options.attr = coreuiTableUtils.mergeAttr({
            style: 'width:' + options.width + 'px'
          }, options.attr);
        }
        if (options.hasOwnProperty('options') && _typeof(options.options) === 'object' && options.options !== null) {
          $.each(options.options, function (key, option) {
            if (typeof option === 'string' || typeof option === 'number') {
              selectOptions.push(that._buildOption({
                type: 'option',
                value: key,
                text: option
              }));
            } else if (coreuiTableUtils.isObject(option)) {
              var type = option.hasOwnProperty('type') && typeof option.type === 'string' ? option.type : 'option';
              if (type === 'group') {
                var renderAttr = [];
                var groupAttr = {};
                var groupOptions = [];
                if (option.hasOwnProperty('attr') && coreuiTableUtils.isObject(option.attr)) {
                  groupAttr = option.attr;
                }
                if (option.hasOwnProperty('label') && ['string', 'number'].indexOf(_typeof(option.label)) >= 0) {
                  groupAttr.label = option.label;
                }
                $.each(groupAttr, function (name, value) {
                  renderAttr.push(name + '="' + value + '"');
                });
                if (Array.isArray(option.options)) {
                  $.each(option.options, function (key, groupOption) {
                    groupOptions.push(that._buildOption(groupOption));
                  });
                }
                selectOptions.push({
                  type: 'group',
                  attr: renderAttr.length > 0 ? ' ' + renderAttr.join(' ') : '',
                  options: groupOptions
                });
              } else {
                selectOptions.push(that._buildOption(option));
              }
            }
          });
        }
        $.each(options.attr, function (name, value) {
          attributes.push(name + '="' + value + '"');
        });
        this._control = $(coreuiTableUtils.render(tpl['search/select.html'], {
          field: options,
          value: this._value,
          attr: attributes.length > 0 ? ' ' + attributes.join(' ') : '',
          options: selectOptions
        }));
        return this._control;
      }

      /**
       * Сборка опции
       * @param option
       * @return {object}
       * @private
       */
    }, {
      key: "_buildOption",
      value: function _buildOption(option) {
        var optionAttr = [];
        var optionText = option.hasOwnProperty('text') && ['string', 'number'].indexOf(_typeof(option.text)) >= 0 ? option.text : '';
        $.each(option, function (name, value) {
          if (name !== 'text') {
            optionAttr.push(name + '="' + value + '"');
          }
        });
        if (Array.isArray(this._value)) {
          $.each(this._value, function (key, itemValue) {
            if (itemValue == option.value) {
              optionAttr.push('selected="selected"');
              return false;
            }
          });
        } else if (this._value == option.value) {
          optionAttr.push('selected="selected"');
        }
        return {
          type: 'option',
          text: optionText,
          attr: optionAttr.length > 0 ? ' ' + optionAttr.join(' ') : ''
        };
      }
    }]);
  }(Search);

  function _callSuper$h(_this, derived, args) {
    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      } catch (e) {
        return false;
      }
    }
    derived = _getPrototypeOf(derived);
    return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));
  }
  var SearchSwitch = /*#__PURE__*/function (_Search) {
    /**
     * Инициализация
     * @param {coreuiTableInstance} table
     * @param {Object}              options
     */
    function SearchSwitch(table, options) {
      var _this2;
      _classCallCheck(this, SearchSwitch);
      options = $.extend(true, {
        id: null,
        type: 'switch',
        field: null,
        value: null,
        valueY: 1
      }, options);
      _this2 = _callSuper$h(this, SearchSwitch, [table, options]);
      if (_this2._options.value !== null) {
        _this2.setValue(_this2._options.value);
      }
      return _this2;
    }

    /**
     * Установка значения
     * @param {string|number|null} value
     */
    _inherits(SearchSwitch, _Search);
    return _createClass(SearchSwitch, [{
      key: "setValue",
      value: function setValue(value) {
        if (value !== null && typeof value !== 'string' && typeof value !== 'number') {
          return;
        }
        this._value = value;
        if (this._control) {
          var valueY = typeof this._options.valueY === 'string' || typeof this._options.valueY === 'number' ? this._options.valueY : '';
          if (this._value === null) {
            $('input', this._control).prop('checked', false);
          } else if (this._value === valueY) {
            $('input', this._control).prop('checked', true);
          } else {
            $('input', this._control).prop('checked', false);
          }
        }
      }

      /**
       * Получение значения
       * @returns {string|null}
       */
    }, {
      key: "getValue",
      value: function getValue() {
        if (this._control) {
          var value = $('input:checked', this._control).val();
          if (typeof value === 'undefined') {
            return null;
          }
          if (typeof value === 'string' && value !== '') {
            return value;
          }
        }
        return this._value;
      }

      /**
       * Фильтрация данных
       * @returns {string}              fieldValue
       * @returns {Array|string|number} searchValue
       * @returns {boolean}
       */
    }, {
      key: "filter",
      value: function filter(fieldValue, searchValue) {
        if (['string', 'number'].indexOf(_typeof(fieldValue)) < 0 || ['string', 'number'].indexOf(_typeof(searchValue)) < 0) {
          return false;
        }
        return fieldValue.toString().toLowerCase() === searchValue.toString().toLowerCase();
      }

      /**
       * Формирование контента
       * @returns {string}
       */
    }, {
      key: "render",
      value: function render() {
        var options = this.getOptions();
        var valueY = typeof options.valueY === 'string' || typeof options.valueY === 'number' ? options.valueY : '';
        this._control = $(coreuiTableUtils.render(tpl['search/switch.html'], {
          id: this._id,
          valueY: valueY,
          field: typeof options.field === 'string' ? options.field : '',
          checked: this._value == valueY
        }));
        return this._control;
      }
    }]);
  }(Search);

  var Column = /*#__PURE__*/function () {
    /**
     * Инициализация
     * @param {coreuiTableInstance} table
     * @param {Object}              options
     */
    function Column(table, options) {
      _classCallCheck(this, Column);
      _defineProperty(this, "_table", null);
      _defineProperty(this, "_options", {
        type: '',
        field: null,
        label: null,
        show: true,
        showLabel: true,
        width: null,
        minWidth: null,
        maxWidth: null,
        attr: null,
        attrHeader: null,
        render: null
      });
      this._table = table;
      this._options = $.extend(true, this._options, options);
    }

    /**
     * Установка видимости колонки
     * @param {boolean} isShow
     */
    return _createClass(Column, [{
      key: "setShow",
      value: function setShow(isShow) {
        this._options.show = !!isShow;
      }

      /**
       * Видимости колонки
       */
    }, {
      key: "isShow",
      value: function isShow() {
        return !!this._options.show;
      }

      /**
       * Получение параметров
       * @returns {object}
       */
    }, {
      key: "getOptions",
      value: function getOptions() {
        return $.extend({}, this._options);
      }

      /**
       * Получение имени поля
       * @returns {string|null}
       */
    }, {
      key: "getField",
      value: function getField() {
        return typeof this._options.field === 'string' ? this._options.field : null;
      }

      /**
       * Формирование контента
       * @param {*}      content
       * @param {object} record
       * @returns {string}
       */
    }, {
      key: "render",
      value: function render(content, record) {}
    }]);
  }();

  function _callSuper$g(_this, derived, args) {
    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      } catch (e) {
        return false;
      }
    }
    derived = _getPrototypeOf(derived);
    return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));
  }
  var ColumnsDate = /*#__PURE__*/function (_Column) {
    /**
     * Инициализация
     * @param {coreuiTableInstance} table
     * @param {Object}              options
     */
    function ColumnsDate(table, options) {
      _classCallCheck(this, ColumnsDate);
      options = $.extend(true, {
        type: 'date',
        field: null,
        label: null,
        show: true,
        width: null,
        format: 'DD.MM.YYYY',
        attr: {},
        attrHeader: {},
        render: null
      }, options);
      return _callSuper$g(this, ColumnsDate, [table, options]);
    }

    /**
     * Формирование контента
     * @param {string} content
     * @param {object} record
     * @returns {string}
     */
    _inherits(ColumnsDate, _Column);
    return _createClass(ColumnsDate, [{
      key: "render",
      value: function render(content, record) {
        if (typeof content !== 'string') {
          return '';
        }
        try {
          if (content !== '') {
            var lang = this._table.getLang();
            var date = new Date(content);
            content = this._options.format.replace(/YYYY/g, coreuiTableUtils.strPadLeft(date.getFullYear(), 4)).replace(/MMMM/g, lang.monthNames[date.getMonth() + 1]).replace(/MMM/g, lang.monthNamesShort[date.getMonth() + 1]).replace(/MM/g, coreuiTableUtils.strPadLeft(date.getMonth() + 1, 2)).replace(/M/g, date.getMonth() + 1).replace(/DD/g, coreuiTableUtils.strPadLeft(date.getDate(), 2)).replace(/D/g, date.getDate()).replace(/dddd/g, lang.dayNames[date.getMonth() + 1]).replace(/ddd/g, lang.dayNamesMin[date.getMonth() + 1]);
          }
        } catch (e) {
          content = '';
        }
        return content;
      }
    }]);
  }(Column);

  function _callSuper$f(_this, derived, args) {
    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      } catch (e) {
        return false;
      }
    }
    derived = _getPrototypeOf(derived);
    return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));
  }
  var ColumnsDatetime = /*#__PURE__*/function (_Column) {
    /**
     * Инициализация
     * @param {coreuiTableInstance} table
     * @param {Object}              options
     */
    function ColumnsDatetime(table, options) {
      _classCallCheck(this, ColumnsDatetime);
      options = $.extend(true, {
        type: 'datetime',
        field: null,
        label: null,
        show: true,
        width: null,
        format: 'DD.MM.YYYY hh:mm:ss',
        attr: {},
        attrHeader: {},
        render: null
      }, options);
      return _callSuper$f(this, ColumnsDatetime, [table, options]);
    }

    /**
     * Формирование контента
     * @param {string} content
     * @param {object} record
     * @returns {string}
     */
    _inherits(ColumnsDatetime, _Column);
    return _createClass(ColumnsDatetime, [{
      key: "render",
      value: function render(content, record) {
        if (typeof content !== 'string') {
          return '';
        }
        try {
          if (content !== '') {
            var lang = this._table.getLang();
            var date = new Date(content);
            content = this._options.format.replace(/YYYY/g, coreuiTableUtils.strPadLeft(date.getFullYear(), 4)).replace(/MMMM/g, lang.monthNames[date.getMonth() + 1]).replace(/MMM/g, lang.monthNamesShort[date.getMonth() + 1]).replace(/MM/g, coreuiTableUtils.strPadLeft(date.getMonth() + 1, 2)).replace(/M/g, date.getMonth() + 1).replace(/DD/g, coreuiTableUtils.strPadLeft(date.getDate(), 2)).replace(/D/g, date.getDate()).replace(/dddd/g, lang.dayNames[date.getMonth() + 1]).replace(/ddd/g, lang.dayNamesMin[date.getMonth() + 1]).replace(/hh/g, coreuiTableUtils.strPadLeft(date.getHours(), 2)).replace(/mm/g, coreuiTableUtils.strPadLeft(date.getMinutes(), 2)).replace(/m/g, date.getMinutes()).replace(/ss/g, coreuiTableUtils.strPadLeft(date.getSeconds(), 2)).replace(/s/g, date.getSeconds());
          }
        } catch (e) {
          content = '';
        }
        return content;
      }
    }]);
  }(Column);

  //! moment.js
  (function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : global.moment = factory();
  })(window, function () {

    var hookCallback;
    function hooks() {
      return hookCallback.apply(null, arguments);
    }

    // This is done to register the method called with moment()
    // without creating circular dependencies.
    function setHookCallback(callback) {
      hookCallback = callback;
    }
    function isArray(input) {
      return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';
    }
    function isObject(input) {
      // IE8 will treat undefined and null as object if it wasn't for
      // input != null
      return input != null && Object.prototype.toString.call(input) === '[object Object]';
    }
    function hasOwnProp(a, b) {
      return Object.prototype.hasOwnProperty.call(a, b);
    }
    function isObjectEmpty(obj) {
      if (Object.getOwnPropertyNames) {
        return Object.getOwnPropertyNames(obj).length === 0;
      } else {
        var k;
        for (k in obj) {
          if (hasOwnProp(obj, k)) {
            return false;
          }
        }
        return true;
      }
    }
    function isUndefined(input) {
      return input === void 0;
    }
    function isNumber(input) {
      return typeof input === 'number' || Object.prototype.toString.call(input) === '[object Number]';
    }
    function isDate(input) {
      return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';
    }
    function map(arr, fn) {
      var res = [],
        i,
        arrLen = arr.length;
      for (i = 0; i < arrLen; ++i) {
        res.push(fn(arr[i], i));
      }
      return res;
    }
    function extend(a, b) {
      for (var i in b) {
        if (hasOwnProp(b, i)) {
          a[i] = b[i];
        }
      }
      if (hasOwnProp(b, 'toString')) {
        a.toString = b.toString;
      }
      if (hasOwnProp(b, 'valueOf')) {
        a.valueOf = b.valueOf;
      }
      return a;
    }
    function createUTC(input, format, locale, strict) {
      return createLocalOrUTC(input, format, locale, strict, true).utc();
    }
    function defaultParsingFlags() {
      // We need to deep clone this object.
      return {
        empty: false,
        unusedTokens: [],
        unusedInput: [],
        overflow: -2,
        charsLeftOver: 0,
        nullInput: false,
        invalidEra: null,
        invalidMonth: null,
        invalidFormat: false,
        userInvalidated: false,
        iso: false,
        parsedDateParts: [],
        era: null,
        meridiem: null,
        rfc2822: false,
        weekdayMismatch: false
      };
    }
    function getParsingFlags(m) {
      if (m._pf == null) {
        m._pf = defaultParsingFlags();
      }
      return m._pf;
    }
    var some;
    if (Array.prototype.some) {
      some = Array.prototype.some;
    } else {
      some = function (fun) {
        var t = Object(this),
          len = t.length >>> 0,
          i;
        for (i = 0; i < len; i++) {
          if (i in t && fun.call(this, t[i], i, t)) {
            return true;
          }
        }
        return false;
      };
    }
    function isValid(m) {
      var flags = null,
        parsedParts = false,
        isNowValid = m._d && !isNaN(m._d.getTime());
      if (isNowValid) {
        flags = getParsingFlags(m);
        parsedParts = some.call(flags.parsedDateParts, function (i) {
          return i != null;
        });
        isNowValid = flags.overflow < 0 && !flags.empty && !flags.invalidEra && !flags.invalidMonth && !flags.invalidWeekday && !flags.weekdayMismatch && !flags.nullInput && !flags.invalidFormat && !flags.userInvalidated && (!flags.meridiem || flags.meridiem && parsedParts);
        if (m._strict) {
          isNowValid = isNowValid && flags.charsLeftOver === 0 && flags.unusedTokens.length === 0 && flags.bigHour === undefined;
        }
      }
      if (Object.isFrozen == null || !Object.isFrozen(m)) {
        m._isValid = isNowValid;
      } else {
        return isNowValid;
      }
      return m._isValid;
    }
    function createInvalid(flags) {
      var m = createUTC(NaN);
      if (flags != null) {
        extend(getParsingFlags(m), flags);
      } else {
        getParsingFlags(m).userInvalidated = true;
      }
      return m;
    }

    // Plugins that add properties should also add the key here (null value),
    // so we can properly clone ourselves.
    var momentProperties = hooks.momentProperties = [],
      updateInProgress = false;
    function copyConfig(to, from) {
      var i,
        prop,
        val,
        momentPropertiesLen = momentProperties.length;
      if (!isUndefined(from._isAMomentObject)) {
        to._isAMomentObject = from._isAMomentObject;
      }
      if (!isUndefined(from._i)) {
        to._i = from._i;
      }
      if (!isUndefined(from._f)) {
        to._f = from._f;
      }
      if (!isUndefined(from._l)) {
        to._l = from._l;
      }
      if (!isUndefined(from._strict)) {
        to._strict = from._strict;
      }
      if (!isUndefined(from._tzm)) {
        to._tzm = from._tzm;
      }
      if (!isUndefined(from._isUTC)) {
        to._isUTC = from._isUTC;
      }
      if (!isUndefined(from._offset)) {
        to._offset = from._offset;
      }
      if (!isUndefined(from._pf)) {
        to._pf = getParsingFlags(from);
      }
      if (!isUndefined(from._locale)) {
        to._locale = from._locale;
      }
      if (momentPropertiesLen > 0) {
        for (i = 0; i < momentPropertiesLen; i++) {
          prop = momentProperties[i];
          val = from[prop];
          if (!isUndefined(val)) {
            to[prop] = val;
          }
        }
      }
      return to;
    }

    // Moment prototype object
    function Moment(config) {
      copyConfig(this, config);
      this._d = new Date(config._d != null ? config._d.getTime() : NaN);
      if (!this.isValid()) {
        this._d = new Date(NaN);
      }
      // Prevent infinite loop in case updateOffset creates new moment
      // objects.
      if (updateInProgress === false) {
        updateInProgress = true;
        hooks.updateOffset(this);
        updateInProgress = false;
      }
    }
    function isMoment(obj) {
      return obj instanceof Moment || obj != null && obj._isAMomentObject != null;
    }
    function warn(msg) {
      if (hooks.suppressDeprecationWarnings === false && typeof console !== 'undefined' && console.warn) {
        console.warn('Deprecation warning: ' + msg);
      }
    }
    function deprecate(msg, fn) {
      var firstTime = true;
      return extend(function () {
        if (hooks.deprecationHandler != null) {
          hooks.deprecationHandler(null, msg);
        }
        if (firstTime) {
          var args = [],
            arg,
            i,
            key,
            argLen = arguments.length;
          for (i = 0; i < argLen; i++) {
            arg = '';
            if (typeof arguments[i] === 'object') {
              arg += '\n[' + i + '] ';
              for (key in arguments[0]) {
                if (hasOwnProp(arguments[0], key)) {
                  arg += key + ': ' + arguments[0][key] + ', ';
                }
              }
              arg = arg.slice(0, -2); // Remove trailing comma and space
            } else {
              arg = arguments[i];
            }
            args.push(arg);
          }
          warn(msg + '\nArguments: ' + Array.prototype.slice.call(args).join('') + '\n' + new Error().stack);
          firstTime = false;
        }
        return fn.apply(this, arguments);
      }, fn);
    }
    var deprecations = {};
    function deprecateSimple(name, msg) {
      if (hooks.deprecationHandler != null) {
        hooks.deprecationHandler(name, msg);
      }
      if (!deprecations[name]) {
        warn(msg);
        deprecations[name] = true;
      }
    }
    hooks.suppressDeprecationWarnings = false;
    hooks.deprecationHandler = null;
    function isFunction(input) {
      return typeof Function !== 'undefined' && input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';
    }
    function set(config) {
      var prop, i;
      for (i in config) {
        if (hasOwnProp(config, i)) {
          prop = config[i];
          if (isFunction(prop)) {
            this[i] = prop;
          } else {
            this['_' + i] = prop;
          }
        }
      }
      this._config = config;
      // Lenient ordinal parsing accepts just a number in addition to
      // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.
      // TODO: Remove "ordinalParse" fallback in next major release.
      this._dayOfMonthOrdinalParseLenient = new RegExp((this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) + '|' + /\d{1,2}/.source);
    }
    function mergeConfigs(parentConfig, childConfig) {
      var res = extend({}, parentConfig),
        prop;
      for (prop in childConfig) {
        if (hasOwnProp(childConfig, prop)) {
          if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
            res[prop] = {};
            extend(res[prop], parentConfig[prop]);
            extend(res[prop], childConfig[prop]);
          } else if (childConfig[prop] != null) {
            res[prop] = childConfig[prop];
          } else {
            delete res[prop];
          }
        }
      }
      for (prop in parentConfig) {
        if (hasOwnProp(parentConfig, prop) && !hasOwnProp(childConfig, prop) && isObject(parentConfig[prop])) {
          // make sure changes to properties don't modify parent config
          res[prop] = extend({}, res[prop]);
        }
      }
      return res;
    }
    function Locale(config) {
      if (config != null) {
        this.set(config);
      }
    }
    var keys;
    if (Object.keys) {
      keys = Object.keys;
    } else {
      keys = function (obj) {
        var i,
          res = [];
        for (i in obj) {
          if (hasOwnProp(obj, i)) {
            res.push(i);
          }
        }
        return res;
      };
    }
    var defaultCalendar = {
      sameDay: '[Today at] LT',
      nextDay: '[Tomorrow at] LT',
      nextWeek: 'dddd [at] LT',
      lastDay: '[Yesterday at] LT',
      lastWeek: '[Last] dddd [at] LT',
      sameElse: 'L'
    };
    function calendar(key, mom, now) {
      var output = this._calendar[key] || this._calendar['sameElse'];
      return isFunction(output) ? output.call(mom, now) : output;
    }
    function zeroFill(number, targetLength, forceSign) {
      var absNumber = '' + Math.abs(number),
        zerosToFill = targetLength - absNumber.length,
        sign = number >= 0;
      return (sign ? forceSign ? '+' : '' : '-') + Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
    }
    var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,
      localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,
      formatFunctions = {},
      formatTokenFunctions = {};

    // token:    'M'
    // padded:   ['MM', 2]
    // ordinal:  'Mo'
    // callback: function () { this.month() + 1 }
    function addFormatToken(token, padded, ordinal, callback) {
      var func = callback;
      if (typeof callback === 'string') {
        func = function () {
          return this[callback]();
        };
      }
      if (token) {
        formatTokenFunctions[token] = func;
      }
      if (padded) {
        formatTokenFunctions[padded[0]] = function () {
          return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
        };
      }
      if (ordinal) {
        formatTokenFunctions[ordinal] = function () {
          return this.localeData().ordinal(func.apply(this, arguments), token);
        };
      }
    }
    function removeFormattingTokens(input) {
      if (input.match(/\[[\s\S]/)) {
        return input.replace(/^\[|\]$/g, '');
      }
      return input.replace(/\\/g, '');
    }
    function makeFormatFunction(format) {
      var array = format.match(formattingTokens),
        i,
        length;
      for (i = 0, length = array.length; i < length; i++) {
        if (formatTokenFunctions[array[i]]) {
          array[i] = formatTokenFunctions[array[i]];
        } else {
          array[i] = removeFormattingTokens(array[i]);
        }
      }
      return function (mom) {
        var output = '',
          i;
        for (i = 0; i < length; i++) {
          output += isFunction(array[i]) ? array[i].call(mom, format) : array[i];
        }
        return output;
      };
    }

    // format date using native date object
    function formatMoment(m, format) {
      if (!m.isValid()) {
        return m.localeData().invalidDate();
      }
      format = expandFormat(format, m.localeData());
      formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);
      return formatFunctions[format](m);
    }
    function expandFormat(format, locale) {
      var i = 5;
      function replaceLongDateFormatTokens(input) {
        return locale.longDateFormat(input) || input;
      }
      localFormattingTokens.lastIndex = 0;
      while (i >= 0 && localFormattingTokens.test(format)) {
        format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
        localFormattingTokens.lastIndex = 0;
        i -= 1;
      }
      return format;
    }
    var defaultLongDateFormat = {
      LTS: 'h:mm:ss A',
      LT: 'h:mm A',
      L: 'MM/DD/YYYY',
      LL: 'MMMM D, YYYY',
      LLL: 'MMMM D, YYYY h:mm A',
      LLLL: 'dddd, MMMM D, YYYY h:mm A'
    };
    function longDateFormat(key) {
      var format = this._longDateFormat[key],
        formatUpper = this._longDateFormat[key.toUpperCase()];
      if (format || !formatUpper) {
        return format;
      }
      this._longDateFormat[key] = formatUpper.match(formattingTokens).map(function (tok) {
        if (tok === 'MMMM' || tok === 'MM' || tok === 'DD' || tok === 'dddd') {
          return tok.slice(1);
        }
        return tok;
      }).join('');
      return this._longDateFormat[key];
    }
    var defaultInvalidDate = 'Invalid date';
    function invalidDate() {
      return this._invalidDate;
    }
    var defaultOrdinal = '%d',
      defaultDayOfMonthOrdinalParse = /\d{1,2}/;
    function ordinal(number) {
      return this._ordinal.replace('%d', number);
    }
    var defaultRelativeTime = {
      future: 'in %s',
      past: '%s ago',
      s: 'a few seconds',
      ss: '%d seconds',
      m: 'a minute',
      mm: '%d minutes',
      h: 'an hour',
      hh: '%d hours',
      d: 'a day',
      dd: '%d days',
      w: 'a week',
      ww: '%d weeks',
      M: 'a month',
      MM: '%d months',
      y: 'a year',
      yy: '%d years'
    };
    function relativeTime(number, withoutSuffix, string, isFuture) {
      var output = this._relativeTime[string];
      return isFunction(output) ? output(number, withoutSuffix, string, isFuture) : output.replace(/%d/i, number);
    }
    function pastFuture(diff, output) {
      var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
      return isFunction(format) ? format(output) : format.replace(/%s/i, output);
    }
    var aliases = {
      D: 'date',
      dates: 'date',
      date: 'date',
      d: 'day',
      days: 'day',
      day: 'day',
      e: 'weekday',
      weekdays: 'weekday',
      weekday: 'weekday',
      E: 'isoWeekday',
      isoweekdays: 'isoWeekday',
      isoweekday: 'isoWeekday',
      DDD: 'dayOfYear',
      dayofyears: 'dayOfYear',
      dayofyear: 'dayOfYear',
      h: 'hour',
      hours: 'hour',
      hour: 'hour',
      ms: 'millisecond',
      milliseconds: 'millisecond',
      millisecond: 'millisecond',
      m: 'minute',
      minutes: 'minute',
      minute: 'minute',
      M: 'month',
      months: 'month',
      month: 'month',
      Q: 'quarter',
      quarters: 'quarter',
      quarter: 'quarter',
      s: 'second',
      seconds: 'second',
      second: 'second',
      gg: 'weekYear',
      weekyears: 'weekYear',
      weekyear: 'weekYear',
      GG: 'isoWeekYear',
      isoweekyears: 'isoWeekYear',
      isoweekyear: 'isoWeekYear',
      w: 'week',
      weeks: 'week',
      week: 'week',
      W: 'isoWeek',
      isoweeks: 'isoWeek',
      isoweek: 'isoWeek',
      y: 'year',
      years: 'year',
      year: 'year'
    };
    function normalizeUnits(units) {
      return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;
    }
    function normalizeObjectUnits(inputObject) {
      var normalizedInput = {},
        normalizedProp,
        prop;
      for (prop in inputObject) {
        if (hasOwnProp(inputObject, prop)) {
          normalizedProp = normalizeUnits(prop);
          if (normalizedProp) {
            normalizedInput[normalizedProp] = inputObject[prop];
          }
        }
      }
      return normalizedInput;
    }
    var priorities = {
      date: 9,
      day: 11,
      weekday: 11,
      isoWeekday: 11,
      dayOfYear: 4,
      hour: 13,
      millisecond: 16,
      minute: 14,
      month: 8,
      quarter: 7,
      second: 15,
      weekYear: 1,
      isoWeekYear: 1,
      week: 5,
      isoWeek: 5,
      year: 1
    };
    function getPrioritizedUnits(unitsObj) {
      var units = [],
        u;
      for (u in unitsObj) {
        if (hasOwnProp(unitsObj, u)) {
          units.push({
            unit: u,
            priority: priorities[u]
          });
        }
      }
      units.sort(function (a, b) {
        return a.priority - b.priority;
      });
      return units;
    }
    var match1 = /\d/,
      //       0 - 9
      match2 = /\d\d/,
      //      00 - 99
      match3 = /\d{3}/,
      //     000 - 999
      match4 = /\d{4}/,
      //    0000 - 9999
      match6 = /[+-]?\d{6}/,
      // -999999 - 999999
      match1to2 = /\d\d?/,
      //       0 - 99
      match3to4 = /\d\d\d\d?/,
      //     999 - 9999
      match5to6 = /\d\d\d\d\d\d?/,
      //   99999 - 999999
      match1to3 = /\d{1,3}/,
      //       0 - 999
      match1to4 = /\d{1,4}/,
      //       0 - 9999
      match1to6 = /[+-]?\d{1,6}/,
      // -999999 - 999999
      matchUnsigned = /\d+/,
      //       0 - inf
      matchSigned = /[+-]?\d+/,
      //    -inf - inf
      matchOffset = /Z|[+-]\d\d:?\d\d/gi,
      // +00:00 -00:00 +0000 -0000 or Z
      matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi,
      // +00 -00 +00:00 -00:00 +0000 -0000 or Z
      matchTimestamp = /[+-]?\d+(\.\d{1,3})?/,
      // 123456789 123456789.123
      // any word (or two) characters or numbers including two/three word month in arabic.
      // includes scottish gaelic two word and hyphenated months
      matchWord = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i,
      match1to2NoLeadingZero = /^[1-9]\d?/,
      //         1-99
      match1to2HasZero = /^([1-9]\d|\d)/,
      //           0-99
      regexes;
    regexes = {};
    function addRegexToken(token, regex, strictRegex) {
      regexes[token] = isFunction(regex) ? regex : function (isStrict, localeData) {
        return isStrict && strictRegex ? strictRegex : regex;
      };
    }
    function getParseRegexForToken(token, config) {
      if (!hasOwnProp(regexes, token)) {
        return new RegExp(unescapeFormat(token));
      }
      return regexes[token](config._strict, config._locale);
    }

    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
    function unescapeFormat(s) {
      return regexEscape(s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
        return p1 || p2 || p3 || p4;
      }));
    }
    function regexEscape(s) {
      return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
    }
    function absFloor(number) {
      if (number < 0) {
        // -0 -> 0
        return Math.ceil(number) || 0;
      } else {
        return Math.floor(number);
      }
    }
    function toInt(argumentForCoercion) {
      var coercedNumber = +argumentForCoercion,
        value = 0;
      if (coercedNumber !== 0 && isFinite(coercedNumber)) {
        value = absFloor(coercedNumber);
      }
      return value;
    }
    var tokens = {};
    function addParseToken(token, callback) {
      var i,
        func = callback,
        tokenLen;
      if (typeof token === 'string') {
        token = [token];
      }
      if (isNumber(callback)) {
        func = function (input, array) {
          array[callback] = toInt(input);
        };
      }
      tokenLen = token.length;
      for (i = 0; i < tokenLen; i++) {
        tokens[token[i]] = func;
      }
    }
    function addWeekParseToken(token, callback) {
      addParseToken(token, function (input, array, config, token) {
        config._w = config._w || {};
        callback(input, config._w, config, token);
      });
    }
    function addTimeToArrayFromToken(token, input, config) {
      if (input != null && hasOwnProp(tokens, token)) {
        tokens[token](input, config._a, config, token);
      }
    }
    function isLeapYear(year) {
      return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
    }
    var YEAR = 0,
      MONTH = 1,
      DATE = 2,
      HOUR = 3,
      MINUTE = 4,
      SECOND = 5,
      MILLISECOND = 6,
      WEEK = 7,
      WEEKDAY = 8;

    // FORMATTING

    addFormatToken('Y', 0, 0, function () {
      var y = this.year();
      return y <= 9999 ? zeroFill(y, 4) : '+' + y;
    });
    addFormatToken(0, ['YY', 2], 0, function () {
      return this.year() % 100;
    });
    addFormatToken(0, ['YYYY', 4], 0, 'year');
    addFormatToken(0, ['YYYYY', 5], 0, 'year');
    addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');

    // PARSING

    addRegexToken('Y', matchSigned);
    addRegexToken('YY', match1to2, match2);
    addRegexToken('YYYY', match1to4, match4);
    addRegexToken('YYYYY', match1to6, match6);
    addRegexToken('YYYYYY', match1to6, match6);
    addParseToken(['YYYYY', 'YYYYYY'], YEAR);
    addParseToken('YYYY', function (input, array) {
      array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
    });
    addParseToken('YY', function (input, array) {
      array[YEAR] = hooks.parseTwoDigitYear(input);
    });
    addParseToken('Y', function (input, array) {
      array[YEAR] = parseInt(input, 10);
    });

    // HELPERS

    function daysInYear(year) {
      return isLeapYear(year) ? 366 : 365;
    }

    // HOOKS

    hooks.parseTwoDigitYear = function (input) {
      return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
    };

    // MOMENTS

    var getSetYear = makeGetSet('FullYear', true);
    function getIsLeapYear() {
      return isLeapYear(this.year());
    }
    function makeGetSet(unit, keepTime) {
      return function (value) {
        if (value != null) {
          set$1(this, unit, value);
          hooks.updateOffset(this, keepTime);
          return this;
        } else {
          return get(this, unit);
        }
      };
    }
    function get(mom, unit) {
      if (!mom.isValid()) {
        return NaN;
      }
      var d = mom._d,
        isUTC = mom._isUTC;
      switch (unit) {
        case 'Milliseconds':
          return isUTC ? d.getUTCMilliseconds() : d.getMilliseconds();
        case 'Seconds':
          return isUTC ? d.getUTCSeconds() : d.getSeconds();
        case 'Minutes':
          return isUTC ? d.getUTCMinutes() : d.getMinutes();
        case 'Hours':
          return isUTC ? d.getUTCHours() : d.getHours();
        case 'Date':
          return isUTC ? d.getUTCDate() : d.getDate();
        case 'Day':
          return isUTC ? d.getUTCDay() : d.getDay();
        case 'Month':
          return isUTC ? d.getUTCMonth() : d.getMonth();
        case 'FullYear':
          return isUTC ? d.getUTCFullYear() : d.getFullYear();
        default:
          return NaN;
        // Just in case
      }
    }
    function set$1(mom, unit, value) {
      var d, isUTC, year, month, date;
      if (!mom.isValid() || isNaN(value)) {
        return;
      }
      d = mom._d;
      isUTC = mom._isUTC;
      switch (unit) {
        case 'Milliseconds':
          return void (isUTC ? d.setUTCMilliseconds(value) : d.setMilliseconds(value));
        case 'Seconds':
          return void (isUTC ? d.setUTCSeconds(value) : d.setSeconds(value));
        case 'Minutes':
          return void (isUTC ? d.setUTCMinutes(value) : d.setMinutes(value));
        case 'Hours':
          return void (isUTC ? d.setUTCHours(value) : d.setHours(value));
        case 'Date':
          return void (isUTC ? d.setUTCDate(value) : d.setDate(value));
        // case 'Day': // Not real
        //    return void (isUTC ? d.setUTCDay(value) : d.setDay(value));
        // case 'Month': // Not used because we need to pass two variables
        //     return void (isUTC ? d.setUTCMonth(value) : d.setMonth(value));
        case 'FullYear':
          break;
        // See below ...
        default:
          return;
        // Just in case
      }
      year = value;
      month = mom.month();
      date = mom.date();
      date = date === 29 && month === 1 && !isLeapYear(year) ? 28 : date;
      void (isUTC ? d.setUTCFullYear(year, month, date) : d.setFullYear(year, month, date));
    }

    // MOMENTS

    function stringGet(units) {
      units = normalizeUnits(units);
      if (isFunction(this[units])) {
        return this[units]();
      }
      return this;
    }
    function stringSet(units, value) {
      if (typeof units === 'object') {
        units = normalizeObjectUnits(units);
        var prioritized = getPrioritizedUnits(units),
          i,
          prioritizedLen = prioritized.length;
        for (i = 0; i < prioritizedLen; i++) {
          this[prioritized[i].unit](units[prioritized[i].unit]);
        }
      } else {
        units = normalizeUnits(units);
        if (isFunction(this[units])) {
          return this[units](value);
        }
      }
      return this;
    }
    function mod(n, x) {
      return (n % x + x) % x;
    }
    var indexOf;
    if (Array.prototype.indexOf) {
      indexOf = Array.prototype.indexOf;
    } else {
      indexOf = function (o) {
        // I know
        var i;
        for (i = 0; i < this.length; ++i) {
          if (this[i] === o) {
            return i;
          }
        }
        return -1;
      };
    }
    function daysInMonth(year, month) {
      if (isNaN(year) || isNaN(month)) {
        return NaN;
      }
      var modMonth = mod(month, 12);
      year += (month - modMonth) / 12;
      return modMonth === 1 ? isLeapYear(year) ? 29 : 28 : 31 - modMonth % 7 % 2;
    }

    // FORMATTING

    addFormatToken('M', ['MM', 2], 'Mo', function () {
      return this.month() + 1;
    });
    addFormatToken('MMM', 0, 0, function (format) {
      return this.localeData().monthsShort(this, format);
    });
    addFormatToken('MMMM', 0, 0, function (format) {
      return this.localeData().months(this, format);
    });

    // PARSING

    addRegexToken('M', match1to2, match1to2NoLeadingZero);
    addRegexToken('MM', match1to2, match2);
    addRegexToken('MMM', function (isStrict, locale) {
      return locale.monthsShortRegex(isStrict);
    });
    addRegexToken('MMMM', function (isStrict, locale) {
      return locale.monthsRegex(isStrict);
    });
    addParseToken(['M', 'MM'], function (input, array) {
      array[MONTH] = toInt(input) - 1;
    });
    addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
      var month = config._locale.monthsParse(input, token, config._strict);
      // if we didn't find a month name, mark the date as invalid.
      if (month != null) {
        array[MONTH] = month;
      } else {
        getParsingFlags(config).invalidMonth = input;
      }
    });

    // LOCALES

    var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
      defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
      MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,
      defaultMonthsShortRegex = matchWord,
      defaultMonthsRegex = matchWord;
    function localeMonths(m, format) {
      if (!m) {
        return isArray(this._months) ? this._months : this._months['standalone'];
      }
      return isArray(this._months) ? this._months[m.month()] : this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? 'format' : 'standalone'][m.month()];
    }
    function localeMonthsShort(m, format) {
      if (!m) {
        return isArray(this._monthsShort) ? this._monthsShort : this._monthsShort['standalone'];
      }
      return isArray(this._monthsShort) ? this._monthsShort[m.month()] : this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];
    }
    function handleStrictParse(monthName, format, strict) {
      var i,
        ii,
        mom,
        llc = monthName.toLocaleLowerCase();
      if (!this._monthsParse) {
        // this is not used
        this._monthsParse = [];
        this._longMonthsParse = [];
        this._shortMonthsParse = [];
        for (i = 0; i < 12; ++i) {
          mom = createUTC([2000, i]);
          this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();
          this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
        }
      }
      if (strict) {
        if (format === 'MMM') {
          ii = indexOf.call(this._shortMonthsParse, llc);
          return ii !== -1 ? ii : null;
        } else {
          ii = indexOf.call(this._longMonthsParse, llc);
          return ii !== -1 ? ii : null;
        }
      } else {
        if (format === 'MMM') {
          ii = indexOf.call(this._shortMonthsParse, llc);
          if (ii !== -1) {
            return ii;
          }
          ii = indexOf.call(this._longMonthsParse, llc);
          return ii !== -1 ? ii : null;
        } else {
          ii = indexOf.call(this._longMonthsParse, llc);
          if (ii !== -1) {
            return ii;
          }
          ii = indexOf.call(this._shortMonthsParse, llc);
          return ii !== -1 ? ii : null;
        }
      }
    }
    function localeMonthsParse(monthName, format, strict) {
      var i, mom, regex;
      if (this._monthsParseExact) {
        return handleStrictParse.call(this, monthName, format, strict);
      }
      if (!this._monthsParse) {
        this._monthsParse = [];
        this._longMonthsParse = [];
        this._shortMonthsParse = [];
      }

      // TODO: add sorting
      // Sorting makes sure if one month (or abbr) is a prefix of another
      // see sorting in computeMonthsParse
      for (i = 0; i < 12; i++) {
        // make the regex if we don't have it already
        mom = createUTC([2000, i]);
        if (strict && !this._longMonthsParse[i]) {
          this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
          this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
        }
        if (!strict && !this._monthsParse[i]) {
          regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
          this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
        }
        // test the regex
        if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
          return i;
        } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
          return i;
        } else if (!strict && this._monthsParse[i].test(monthName)) {
          return i;
        }
      }
    }

    // MOMENTS

    function setMonth(mom, value) {
      if (!mom.isValid()) {
        // No op
        return mom;
      }
      if (typeof value === 'string') {
        if (/^\d+$/.test(value)) {
          value = toInt(value);
        } else {
          value = mom.localeData().monthsParse(value);
          // TODO: Another silent failure?
          if (!isNumber(value)) {
            return mom;
          }
        }
      }
      var month = value,
        date = mom.date();
      date = date < 29 ? date : Math.min(date, daysInMonth(mom.year(), month));
      void (mom._isUTC ? mom._d.setUTCMonth(month, date) : mom._d.setMonth(month, date));
      return mom;
    }
    function getSetMonth(value) {
      if (value != null) {
        setMonth(this, value);
        hooks.updateOffset(this, true);
        return this;
      } else {
        return get(this, 'Month');
      }
    }
    function getDaysInMonth() {
      return daysInMonth(this.year(), this.month());
    }
    function monthsShortRegex(isStrict) {
      if (this._monthsParseExact) {
        if (!hasOwnProp(this, '_monthsRegex')) {
          computeMonthsParse.call(this);
        }
        if (isStrict) {
          return this._monthsShortStrictRegex;
        } else {
          return this._monthsShortRegex;
        }
      } else {
        if (!hasOwnProp(this, '_monthsShortRegex')) {
          this._monthsShortRegex = defaultMonthsShortRegex;
        }
        return this._monthsShortStrictRegex && isStrict ? this._monthsShortStrictRegex : this._monthsShortRegex;
      }
    }
    function monthsRegex(isStrict) {
      if (this._monthsParseExact) {
        if (!hasOwnProp(this, '_monthsRegex')) {
          computeMonthsParse.call(this);
        }
        if (isStrict) {
          return this._monthsStrictRegex;
        } else {
          return this._monthsRegex;
        }
      } else {
        if (!hasOwnProp(this, '_monthsRegex')) {
          this._monthsRegex = defaultMonthsRegex;
        }
        return this._monthsStrictRegex && isStrict ? this._monthsStrictRegex : this._monthsRegex;
      }
    }
    function computeMonthsParse() {
      function cmpLenRev(a, b) {
        return b.length - a.length;
      }
      var shortPieces = [],
        longPieces = [],
        mixedPieces = [],
        i,
        mom,
        shortP,
        longP;
      for (i = 0; i < 12; i++) {
        // make the regex if we don't have it already
        mom = createUTC([2000, i]);
        shortP = regexEscape(this.monthsShort(mom, ''));
        longP = regexEscape(this.months(mom, ''));
        shortPieces.push(shortP);
        longPieces.push(longP);
        mixedPieces.push(longP);
        mixedPieces.push(shortP);
      }
      // Sorting makes sure if one month (or abbr) is a prefix of another it
      // will match the longer piece.
      shortPieces.sort(cmpLenRev);
      longPieces.sort(cmpLenRev);
      mixedPieces.sort(cmpLenRev);
      this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
      this._monthsShortRegex = this._monthsRegex;
      this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
      this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
    }
    function createDate(y, m, d, h, M, s, ms) {
      // can't just apply() to create a date:
      // https://stackoverflow.com/q/181348
      var date;
      // the date constructor remaps years 0-99 to 1900-1999
      if (y < 100 && y >= 0) {
        // preserve leap years using a full 400 year cycle, then reset
        date = new Date(y + 400, m, d, h, M, s, ms);
        if (isFinite(date.getFullYear())) {
          date.setFullYear(y);
        }
      } else {
        date = new Date(y, m, d, h, M, s, ms);
      }
      return date;
    }
    function createUTCDate(y) {
      var date, args;
      // the Date.UTC function remaps years 0-99 to 1900-1999
      if (y < 100 && y >= 0) {
        args = Array.prototype.slice.call(arguments);
        // preserve leap years using a full 400 year cycle, then reset
        args[0] = y + 400;
        date = new Date(Date.UTC.apply(null, args));
        if (isFinite(date.getUTCFullYear())) {
          date.setUTCFullYear(y);
        }
      } else {
        date = new Date(Date.UTC.apply(null, arguments));
      }
      return date;
    }

    // start-of-first-week - start-of-year
    function firstWeekOffset(year, dow, doy) {
      var
        // first-week day -- which january is always in the first week (4 for iso, 1 for other)
        fwd = 7 + dow - doy,
        // first-week day local weekday -- which local weekday is fwd
        fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;
      return -fwdlw + fwd - 1;
    }

    // https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
    function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
      var localWeekday = (7 + weekday - dow) % 7,
        weekOffset = firstWeekOffset(year, dow, doy),
        dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
        resYear,
        resDayOfYear;
      if (dayOfYear <= 0) {
        resYear = year - 1;
        resDayOfYear = daysInYear(resYear) + dayOfYear;
      } else if (dayOfYear > daysInYear(year)) {
        resYear = year + 1;
        resDayOfYear = dayOfYear - daysInYear(year);
      } else {
        resYear = year;
        resDayOfYear = dayOfYear;
      }
      return {
        year: resYear,
        dayOfYear: resDayOfYear
      };
    }
    function weekOfYear(mom, dow, doy) {
      var weekOffset = firstWeekOffset(mom.year(), dow, doy),
        week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
        resWeek,
        resYear;
      if (week < 1) {
        resYear = mom.year() - 1;
        resWeek = week + weeksInYear(resYear, dow, doy);
      } else if (week > weeksInYear(mom.year(), dow, doy)) {
        resWeek = week - weeksInYear(mom.year(), dow, doy);
        resYear = mom.year() + 1;
      } else {
        resYear = mom.year();
        resWeek = week;
      }
      return {
        week: resWeek,
        year: resYear
      };
    }
    function weeksInYear(year, dow, doy) {
      var weekOffset = firstWeekOffset(year, dow, doy),
        weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
      return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
    }

    // FORMATTING

    addFormatToken('w', ['ww', 2], 'wo', 'week');
    addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');

    // PARSING

    addRegexToken('w', match1to2, match1to2NoLeadingZero);
    addRegexToken('ww', match1to2, match2);
    addRegexToken('W', match1to2, match1to2NoLeadingZero);
    addRegexToken('WW', match1to2, match2);
    addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {
      week[token.substr(0, 1)] = toInt(input);
    });

    // HELPERS

    // LOCALES

    function localeWeek(mom) {
      return weekOfYear(mom, this._week.dow, this._week.doy).week;
    }
    var defaultLocaleWeek = {
      dow: 0,
      // Sunday is the first day of the week.
      doy: 6 // The week that contains Jan 6th is the first week of the year.
    };
    function localeFirstDayOfWeek() {
      return this._week.dow;
    }
    function localeFirstDayOfYear() {
      return this._week.doy;
    }

    // MOMENTS

    function getSetWeek(input) {
      var week = this.localeData().week(this);
      return input == null ? week : this.add((input - week) * 7, 'd');
    }
    function getSetISOWeek(input) {
      var week = weekOfYear(this, 1, 4).week;
      return input == null ? week : this.add((input - week) * 7, 'd');
    }

    // FORMATTING

    addFormatToken('d', 0, 'do', 'day');
    addFormatToken('dd', 0, 0, function (format) {
      return this.localeData().weekdaysMin(this, format);
    });
    addFormatToken('ddd', 0, 0, function (format) {
      return this.localeData().weekdaysShort(this, format);
    });
    addFormatToken('dddd', 0, 0, function (format) {
      return this.localeData().weekdays(this, format);
    });
    addFormatToken('e', 0, 0, 'weekday');
    addFormatToken('E', 0, 0, 'isoWeekday');

    // PARSING

    addRegexToken('d', match1to2);
    addRegexToken('e', match1to2);
    addRegexToken('E', match1to2);
    addRegexToken('dd', function (isStrict, locale) {
      return locale.weekdaysMinRegex(isStrict);
    });
    addRegexToken('ddd', function (isStrict, locale) {
      return locale.weekdaysShortRegex(isStrict);
    });
    addRegexToken('dddd', function (isStrict, locale) {
      return locale.weekdaysRegex(isStrict);
    });
    addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
      var weekday = config._locale.weekdaysParse(input, token, config._strict);
      // if we didn't get a weekday name, mark the date as invalid
      if (weekday != null) {
        week.d = weekday;
      } else {
        getParsingFlags(config).invalidWeekday = input;
      }
    });
    addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
      week[token] = toInt(input);
    });

    // HELPERS

    function parseWeekday(input, locale) {
      if (typeof input !== 'string') {
        return input;
      }
      if (!isNaN(input)) {
        return parseInt(input, 10);
      }
      input = locale.weekdaysParse(input);
      if (typeof input === 'number') {
        return input;
      }
      return null;
    }
    function parseIsoWeekday(input, locale) {
      if (typeof input === 'string') {
        return locale.weekdaysParse(input) % 7 || 7;
      }
      return isNaN(input) ? null : input;
    }

    // LOCALES
    function shiftWeekdays(ws, n) {
      return ws.slice(n, 7).concat(ws.slice(0, n));
    }
    var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
      defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
      defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
      defaultWeekdaysRegex = matchWord,
      defaultWeekdaysShortRegex = matchWord,
      defaultWeekdaysMinRegex = matchWord;
    function localeWeekdays(m, format) {
      var weekdays = isArray(this._weekdays) ? this._weekdays : this._weekdays[m && m !== true && this._weekdays.isFormat.test(format) ? 'format' : 'standalone'];
      return m === true ? shiftWeekdays(weekdays, this._week.dow) : m ? weekdays[m.day()] : weekdays;
    }
    function localeWeekdaysShort(m) {
      return m === true ? shiftWeekdays(this._weekdaysShort, this._week.dow) : m ? this._weekdaysShort[m.day()] : this._weekdaysShort;
    }
    function localeWeekdaysMin(m) {
      return m === true ? shiftWeekdays(this._weekdaysMin, this._week.dow) : m ? this._weekdaysMin[m.day()] : this._weekdaysMin;
    }
    function handleStrictParse$1(weekdayName, format, strict) {
      var i,
        ii,
        mom,
        llc = weekdayName.toLocaleLowerCase();
      if (!this._weekdaysParse) {
        this._weekdaysParse = [];
        this._shortWeekdaysParse = [];
        this._minWeekdaysParse = [];
        for (i = 0; i < 7; ++i) {
          mom = createUTC([2000, 1]).day(i);
          this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();
          this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();
          this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
        }
      }
      if (strict) {
        if (format === 'dddd') {
          ii = indexOf.call(this._weekdaysParse, llc);
          return ii !== -1 ? ii : null;
        } else if (format === 'ddd') {
          ii = indexOf.call(this._shortWeekdaysParse, llc);
          return ii !== -1 ? ii : null;
        } else {
          ii = indexOf.call(this._minWeekdaysParse, llc);
          return ii !== -1 ? ii : null;
        }
      } else {
        if (format === 'dddd') {
          ii = indexOf.call(this._weekdaysParse, llc);
          if (ii !== -1) {
            return ii;
          }
          ii = indexOf.call(this._shortWeekdaysParse, llc);
          if (ii !== -1) {
            return ii;
          }
          ii = indexOf.call(this._minWeekdaysParse, llc);
          return ii !== -1 ? ii : null;
        } else if (format === 'ddd') {
          ii = indexOf.call(this._shortWeekdaysParse, llc);
          if (ii !== -1) {
            return ii;
          }
          ii = indexOf.call(this._weekdaysParse, llc);
          if (ii !== -1) {
            return ii;
          }
          ii = indexOf.call(this._minWeekdaysParse, llc);
          return ii !== -1 ? ii : null;
        } else {
          ii = indexOf.call(this._minWeekdaysParse, llc);
          if (ii !== -1) {
            return ii;
          }
          ii = indexOf.call(this._weekdaysParse, llc);
          if (ii !== -1) {
            return ii;
          }
          ii = indexOf.call(this._shortWeekdaysParse, llc);
          return ii !== -1 ? ii : null;
        }
      }
    }
    function localeWeekdaysParse(weekdayName, format, strict) {
      var i, mom, regex;
      if (this._weekdaysParseExact) {
        return handleStrictParse$1.call(this, weekdayName, format, strict);
      }
      if (!this._weekdaysParse) {
        this._weekdaysParse = [];
        this._minWeekdaysParse = [];
        this._shortWeekdaysParse = [];
        this._fullWeekdaysParse = [];
      }
      for (i = 0; i < 7; i++) {
        // make the regex if we don't have it already

        mom = createUTC([2000, 1]).day(i);
        if (strict && !this._fullWeekdaysParse[i]) {
          this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\\.?') + '$', 'i');
          this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\\.?') + '$', 'i');
          this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\\.?') + '$', 'i');
        }
        if (!this._weekdaysParse[i]) {
          regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
          this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
        }
        // test the regex
        if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {
          return i;
        } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {
          return i;
        } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {
          return i;
        } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
          return i;
        }
      }
    }

    // MOMENTS

    function getSetDayOfWeek(input) {
      if (!this.isValid()) {
        return input != null ? this : NaN;
      }
      var day = get(this, 'Day');
      if (input != null) {
        input = parseWeekday(input, this.localeData());
        return this.add(input - day, 'd');
      } else {
        return day;
      }
    }
    function getSetLocaleDayOfWeek(input) {
      if (!this.isValid()) {
        return input != null ? this : NaN;
      }
      var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
      return input == null ? weekday : this.add(input - weekday, 'd');
    }
    function getSetISODayOfWeek(input) {
      if (!this.isValid()) {
        return input != null ? this : NaN;
      }

      // behaves the same as moment#day except
      // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
      // as a setter, sunday should belong to the previous week.

      if (input != null) {
        var weekday = parseIsoWeekday(input, this.localeData());
        return this.day(this.day() % 7 ? weekday : weekday - 7);
      } else {
        return this.day() || 7;
      }
    }
    function weekdaysRegex(isStrict) {
      if (this._weekdaysParseExact) {
        if (!hasOwnProp(this, '_weekdaysRegex')) {
          computeWeekdaysParse.call(this);
        }
        if (isStrict) {
          return this._weekdaysStrictRegex;
        } else {
          return this._weekdaysRegex;
        }
      } else {
        if (!hasOwnProp(this, '_weekdaysRegex')) {
          this._weekdaysRegex = defaultWeekdaysRegex;
        }
        return this._weekdaysStrictRegex && isStrict ? this._weekdaysStrictRegex : this._weekdaysRegex;
      }
    }
    function weekdaysShortRegex(isStrict) {
      if (this._weekdaysParseExact) {
        if (!hasOwnProp(this, '_weekdaysRegex')) {
          computeWeekdaysParse.call(this);
        }
        if (isStrict) {
          return this._weekdaysShortStrictRegex;
        } else {
          return this._weekdaysShortRegex;
        }
      } else {
        if (!hasOwnProp(this, '_weekdaysShortRegex')) {
          this._weekdaysShortRegex = defaultWeekdaysShortRegex;
        }
        return this._weekdaysShortStrictRegex && isStrict ? this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
      }
    }
    function weekdaysMinRegex(isStrict) {
      if (this._weekdaysParseExact) {
        if (!hasOwnProp(this, '_weekdaysRegex')) {
          computeWeekdaysParse.call(this);
        }
        if (isStrict) {
          return this._weekdaysMinStrictRegex;
        } else {
          return this._weekdaysMinRegex;
        }
      } else {
        if (!hasOwnProp(this, '_weekdaysMinRegex')) {
          this._weekdaysMinRegex = defaultWeekdaysMinRegex;
        }
        return this._weekdaysMinStrictRegex && isStrict ? this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
      }
    }
    function computeWeekdaysParse() {
      function cmpLenRev(a, b) {
        return b.length - a.length;
      }
      var minPieces = [],
        shortPieces = [],
        longPieces = [],
        mixedPieces = [],
        i,
        mom,
        minp,
        shortp,
        longp;
      for (i = 0; i < 7; i++) {
        // make the regex if we don't have it already
        mom = createUTC([2000, 1]).day(i);
        minp = regexEscape(this.weekdaysMin(mom, ''));
        shortp = regexEscape(this.weekdaysShort(mom, ''));
        longp = regexEscape(this.weekdays(mom, ''));
        minPieces.push(minp);
        shortPieces.push(shortp);
        longPieces.push(longp);
        mixedPieces.push(minp);
        mixedPieces.push(shortp);
        mixedPieces.push(longp);
      }
      // Sorting makes sure if one weekday (or abbr) is a prefix of another it
      // will match the longer piece.
      minPieces.sort(cmpLenRev);
      shortPieces.sort(cmpLenRev);
      longPieces.sort(cmpLenRev);
      mixedPieces.sort(cmpLenRev);
      this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
      this._weekdaysShortRegex = this._weekdaysRegex;
      this._weekdaysMinRegex = this._weekdaysRegex;
      this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
      this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
      this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i');
    }

    // FORMATTING

    function hFormat() {
      return this.hours() % 12 || 12;
    }
    function kFormat() {
      return this.hours() || 24;
    }
    addFormatToken('H', ['HH', 2], 0, 'hour');
    addFormatToken('h', ['hh', 2], 0, hFormat);
    addFormatToken('k', ['kk', 2], 0, kFormat);
    addFormatToken('hmm', 0, 0, function () {
      return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
    });
    addFormatToken('hmmss', 0, 0, function () {
      return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
    });
    addFormatToken('Hmm', 0, 0, function () {
      return '' + this.hours() + zeroFill(this.minutes(), 2);
    });
    addFormatToken('Hmmss', 0, 0, function () {
      return '' + this.hours() + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
    });
    function meridiem(token, lowercase) {
      addFormatToken(token, 0, 0, function () {
        return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
      });
    }
    meridiem('a', true);
    meridiem('A', false);

    // PARSING

    function matchMeridiem(isStrict, locale) {
      return locale._meridiemParse;
    }
    addRegexToken('a', matchMeridiem);
    addRegexToken('A', matchMeridiem);
    addRegexToken('H', match1to2, match1to2HasZero);
    addRegexToken('h', match1to2, match1to2NoLeadingZero);
    addRegexToken('k', match1to2, match1to2NoLeadingZero);
    addRegexToken('HH', match1to2, match2);
    addRegexToken('hh', match1to2, match2);
    addRegexToken('kk', match1to2, match2);
    addRegexToken('hmm', match3to4);
    addRegexToken('hmmss', match5to6);
    addRegexToken('Hmm', match3to4);
    addRegexToken('Hmmss', match5to6);
    addParseToken(['H', 'HH'], HOUR);
    addParseToken(['k', 'kk'], function (input, array, config) {
      var kInput = toInt(input);
      array[HOUR] = kInput === 24 ? 0 : kInput;
    });
    addParseToken(['a', 'A'], function (input, array, config) {
      config._isPm = config._locale.isPM(input);
      config._meridiem = input;
    });
    addParseToken(['h', 'hh'], function (input, array, config) {
      array[HOUR] = toInt(input);
      getParsingFlags(config).bigHour = true;
    });
    addParseToken('hmm', function (input, array, config) {
      var pos = input.length - 2;
      array[HOUR] = toInt(input.substr(0, pos));
      array[MINUTE] = toInt(input.substr(pos));
      getParsingFlags(config).bigHour = true;
    });
    addParseToken('hmmss', function (input, array, config) {
      var pos1 = input.length - 4,
        pos2 = input.length - 2;
      array[HOUR] = toInt(input.substr(0, pos1));
      array[MINUTE] = toInt(input.substr(pos1, 2));
      array[SECOND] = toInt(input.substr(pos2));
      getParsingFlags(config).bigHour = true;
    });
    addParseToken('Hmm', function (input, array, config) {
      var pos = input.length - 2;
      array[HOUR] = toInt(input.substr(0, pos));
      array[MINUTE] = toInt(input.substr(pos));
    });
    addParseToken('Hmmss', function (input, array, config) {
      var pos1 = input.length - 4,
        pos2 = input.length - 2;
      array[HOUR] = toInt(input.substr(0, pos1));
      array[MINUTE] = toInt(input.substr(pos1, 2));
      array[SECOND] = toInt(input.substr(pos2));
    });

    // LOCALES

    function localeIsPM(input) {
      // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
      // Using charAt should be more compatible.
      return (input + '').toLowerCase().charAt(0) === 'p';
    }
    var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i,
      // Setting the hour should keep the time, because the user explicitly
      // specified which hour they want. So trying to maintain the same hour (in
      // a new timezone) makes sense. Adding/subtracting hours does not follow
      // this rule.
      getSetHour = makeGetSet('Hours', true);
    function localeMeridiem(hours, minutes, isLower) {
      if (hours > 11) {
        return isLower ? 'pm' : 'PM';
      } else {
        return isLower ? 'am' : 'AM';
      }
    }
    var baseConfig = {
      calendar: defaultCalendar,
      longDateFormat: defaultLongDateFormat,
      invalidDate: defaultInvalidDate,
      ordinal: defaultOrdinal,
      dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
      relativeTime: defaultRelativeTime,
      months: defaultLocaleMonths,
      monthsShort: defaultLocaleMonthsShort,
      week: defaultLocaleWeek,
      weekdays: defaultLocaleWeekdays,
      weekdaysMin: defaultLocaleWeekdaysMin,
      weekdaysShort: defaultLocaleWeekdaysShort,
      meridiemParse: defaultLocaleMeridiemParse
    };

    // internal storage for locale config files
    var locales = {},
      localeFamilies = {},
      globalLocale;
    function commonPrefix(arr1, arr2) {
      var i,
        minl = Math.min(arr1.length, arr2.length);
      for (i = 0; i < minl; i += 1) {
        if (arr1[i] !== arr2[i]) {
          return i;
        }
      }
      return minl;
    }
    function normalizeLocale(key) {
      return key ? key.toLowerCase().replace('_', '-') : key;
    }

    // pick the locale from the array
    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
    function chooseLocale(names) {
      var i = 0,
        j,
        next,
        locale,
        split;
      while (i < names.length) {
        split = normalizeLocale(names[i]).split('-');
        j = split.length;
        next = normalizeLocale(names[i + 1]);
        next = next ? next.split('-') : null;
        while (j > 0) {
          locale = loadLocale(split.slice(0, j).join('-'));
          if (locale) {
            return locale;
          }
          if (next && next.length >= j && commonPrefix(split, next) >= j - 1) {
            //the next array item is better than a shallower substring of this one
            break;
          }
          j--;
        }
        i++;
      }
      return globalLocale;
    }
    function isLocaleNameSane(name) {
      // Prevent names that look like filesystem paths, i.e contain '/' or '\'
      // Ensure name is available and function returns boolean
      return !!(name && name.match('^[^/\\\\]*$'));
    }
    function loadLocale(name) {
      var oldLocale = null,
        aliasedRequire;
      // TODO: Find a better way to register and load all the locales in Node
      if (locales[name] === undefined && typeof module !== 'undefined' && module && module.exports && isLocaleNameSane(name)) {
        try {
          oldLocale = globalLocale._abbr;
          aliasedRequire = require;
          aliasedRequire('./locale/' + name);
          getSetGlobalLocale(oldLocale);
        } catch (e) {
          // mark as not found to avoid repeating expensive file require call causing high CPU
          // when trying to find en-US, en_US, en-us for every format call
          locales[name] = null; // null means not found
        }
      }
      return locales[name];
    }

    // This function will load locale and then set the global locale.  If
    // no arguments are passed in, it will simply return the current global
    // locale key.
    function getSetGlobalLocale(key, values) {
      var data;
      if (key) {
        if (isUndefined(values)) {
          data = getLocale(key);
        } else {
          data = defineLocale(key, values);
        }
        if (data) {
          // moment.duration._locale = moment._locale = data;
          globalLocale = data;
        } else {
          if (typeof console !== 'undefined' && console.warn) {
            //warn user if arguments are passed but the locale could not be set
            console.warn('Locale ' + key + ' not found. Did you forget to load it?');
          }
        }
      }
      return globalLocale._abbr;
    }
    function defineLocale(name, config) {
      if (config !== null) {
        var locale,
          parentConfig = baseConfig;
        config.abbr = name;
        if (locales[name] != null) {
          deprecateSimple('defineLocaleOverride', 'use moment.updateLocale(localeName, config) to change ' + 'an existing locale. moment.defineLocale(localeName, ' + 'config) should only be used for creating a new locale ' + 'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');
          parentConfig = locales[name]._config;
        } else if (config.parentLocale != null) {
          if (locales[config.parentLocale] != null) {
            parentConfig = locales[config.parentLocale]._config;
          } else {
            locale = loadLocale(config.parentLocale);
            if (locale != null) {
              parentConfig = locale._config;
            } else {
              if (!localeFamilies[config.parentLocale]) {
                localeFamilies[config.parentLocale] = [];
              }
              localeFamilies[config.parentLocale].push({
                name: name,
                config: config
              });
              return null;
            }
          }
        }
        locales[name] = new Locale(mergeConfigs(parentConfig, config));
        if (localeFamilies[name]) {
          localeFamilies[name].forEach(function (x) {
            defineLocale(x.name, x.config);
          });
        }

        // backwards compat for now: also set the locale
        // make sure we set the locale AFTER all child locales have been
        // created, so we won't end up with the child locale set.
        getSetGlobalLocale(name);
        return locales[name];
      } else {
        // useful for testing
        delete locales[name];
        return null;
      }
    }
    function updateLocale(name, config) {
      if (config != null) {
        var locale,
          tmpLocale,
          parentConfig = baseConfig;
        if (locales[name] != null && locales[name].parentLocale != null) {
          // Update existing child locale in-place to avoid memory-leaks
          locales[name].set(mergeConfigs(locales[name]._config, config));
        } else {
          // MERGE
          tmpLocale = loadLocale(name);
          if (tmpLocale != null) {
            parentConfig = tmpLocale._config;
          }
          config = mergeConfigs(parentConfig, config);
          if (tmpLocale == null) {
            // updateLocale is called for creating a new locale
            // Set abbr so it will have a name (getters return
            // undefined otherwise).
            config.abbr = name;
          }
          locale = new Locale(config);
          locale.parentLocale = locales[name];
          locales[name] = locale;
        }

        // backwards compat for now: also set the locale
        getSetGlobalLocale(name);
      } else {
        // pass null for config to unupdate, useful for tests
        if (locales[name] != null) {
          if (locales[name].parentLocale != null) {
            locales[name] = locales[name].parentLocale;
            if (name === getSetGlobalLocale()) {
              getSetGlobalLocale(name);
            }
          } else if (locales[name] != null) {
            delete locales[name];
          }
        }
      }
      return locales[name];
    }

    // returns locale data
    function getLocale(key) {
      var locale;
      if (key && key._locale && key._locale._abbr) {
        key = key._locale._abbr;
      }
      if (!key) {
        return globalLocale;
      }
      if (!isArray(key)) {
        //short-circuit everything else
        locale = loadLocale(key);
        if (locale) {
          return locale;
        }
        key = [key];
      }
      return chooseLocale(key);
    }
    function listLocales() {
      return keys(locales);
    }
    function checkOverflow(m) {
      var overflow,
        a = m._a;
      if (a && getParsingFlags(m).overflow === -2) {
        overflow = a[MONTH] < 0 || a[MONTH] > 11 ? MONTH : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH]) ? DATE : a[HOUR] < 0 || a[HOUR] > 24 || a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0) ? HOUR : a[MINUTE] < 0 || a[MINUTE] > 59 ? MINUTE : a[SECOND] < 0 || a[SECOND] > 59 ? SECOND : a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND : -1;
        if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
          overflow = DATE;
        }
        if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
          overflow = WEEK;
        }
        if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
          overflow = WEEKDAY;
        }
        getParsingFlags(m).overflow = overflow;
      }
      return m;
    }

    // iso 8601 regex
    // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
    var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,
      basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,
      tzRegex = /Z|[+-]\d\d(?::?\d\d)?/,
      isoDates = [['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/], ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/], ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/], ['GGGG-[W]WW', /\d{4}-W\d\d/, false], ['YYYY-DDD', /\d{4}-\d{3}/], ['YYYY-MM', /\d{4}-\d\d/, false], ['YYYYYYMMDD', /[+-]\d{10}/], ['YYYYMMDD', /\d{8}/], ['GGGG[W]WWE', /\d{4}W\d{3}/], ['GGGG[W]WW', /\d{4}W\d{2}/, false], ['YYYYDDD', /\d{7}/], ['YYYYMM', /\d{6}/, false], ['YYYY', /\d{4}/, false]],
      // iso time formats and regexes
      isoTimes = [['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/], ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/], ['HH:mm:ss', /\d\d:\d\d:\d\d/], ['HH:mm', /\d\d:\d\d/], ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/], ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/], ['HHmmss', /\d\d\d\d\d\d/], ['HHmm', /\d\d\d\d/], ['HH', /\d\d/]],
      aspNetJsonRegex = /^\/?Date\((-?\d+)/i,
      // RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3
      rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/,
      obsOffsets = {
        UT: 0,
        GMT: 0,
        EDT: -4 * 60,
        EST: -5 * 60,
        CDT: -5 * 60,
        CST: -6 * 60,
        MDT: -6 * 60,
        MST: -7 * 60,
        PDT: -7 * 60,
        PST: -8 * 60
      };

    // date from iso format
    function configFromISO(config) {
      var i,
        l,
        string = config._i,
        match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
        allowTime,
        dateFormat,
        timeFormat,
        tzFormat,
        isoDatesLen = isoDates.length,
        isoTimesLen = isoTimes.length;
      if (match) {
        getParsingFlags(config).iso = true;
        for (i = 0, l = isoDatesLen; i < l; i++) {
          if (isoDates[i][1].exec(match[1])) {
            dateFormat = isoDates[i][0];
            allowTime = isoDates[i][2] !== false;
            break;
          }
        }
        if (dateFormat == null) {
          config._isValid = false;
          return;
        }
        if (match[3]) {
          for (i = 0, l = isoTimesLen; i < l; i++) {
            if (isoTimes[i][1].exec(match[3])) {
              // match[2] should be 'T' or space
              timeFormat = (match[2] || ' ') + isoTimes[i][0];
              break;
            }
          }
          if (timeFormat == null) {
            config._isValid = false;
            return;
          }
        }
        if (!allowTime && timeFormat != null) {
          config._isValid = false;
          return;
        }
        if (match[4]) {
          if (tzRegex.exec(match[4])) {
            tzFormat = 'Z';
          } else {
            config._isValid = false;
            return;
          }
        }
        config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
        configFromStringAndFormat(config);
      } else {
        config._isValid = false;
      }
    }
    function extractFromRFC2822Strings(yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
      var result = [untruncateYear(yearStr), defaultLocaleMonthsShort.indexOf(monthStr), parseInt(dayStr, 10), parseInt(hourStr, 10), parseInt(minuteStr, 10)];
      if (secondStr) {
        result.push(parseInt(secondStr, 10));
      }
      return result;
    }
    function untruncateYear(yearStr) {
      var year = parseInt(yearStr, 10);
      if (year <= 49) {
        return 2000 + year;
      } else if (year <= 999) {
        return 1900 + year;
      }
      return year;
    }
    function preprocessRFC2822(s) {
      // Remove comments and folding whitespace and replace multiple-spaces with a single space
      return s.replace(/\([^()]*\)|[\n\t]/g, ' ').replace(/(\s\s+)/g, ' ').replace(/^\s\s*/, '').replace(/\s\s*$/, '');
    }
    function checkWeekday(weekdayStr, parsedInput, config) {
      if (weekdayStr) {
        // TODO: Replace the vanilla JS Date object with an independent day-of-week check.
        var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr),
          weekdayActual = new Date(parsedInput[0], parsedInput[1], parsedInput[2]).getDay();
        if (weekdayProvided !== weekdayActual) {
          getParsingFlags(config).weekdayMismatch = true;
          config._isValid = false;
          return false;
        }
      }
      return true;
    }
    function calculateOffset(obsOffset, militaryOffset, numOffset) {
      if (obsOffset) {
        return obsOffsets[obsOffset];
      } else if (militaryOffset) {
        // the only allowed military tz is Z
        return 0;
      } else {
        var hm = parseInt(numOffset, 10),
          m = hm % 100,
          h = (hm - m) / 100;
        return h * 60 + m;
      }
    }

    // date and time from ref 2822 format
    function configFromRFC2822(config) {
      var match = rfc2822.exec(preprocessRFC2822(config._i)),
        parsedArray;
      if (match) {
        parsedArray = extractFromRFC2822Strings(match[4], match[3], match[2], match[5], match[6], match[7]);
        if (!checkWeekday(match[1], parsedArray, config)) {
          return;
        }
        config._a = parsedArray;
        config._tzm = calculateOffset(match[8], match[9], match[10]);
        config._d = createUTCDate.apply(null, config._a);
        config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
        getParsingFlags(config).rfc2822 = true;
      } else {
        config._isValid = false;
      }
    }

    // date from 1) ASP.NET, 2) ISO, 3) RFC 2822 formats, or 4) optional fallback if parsing isn't strict
    function configFromString(config) {
      var matched = aspNetJsonRegex.exec(config._i);
      if (matched !== null) {
        config._d = new Date(+matched[1]);
        return;
      }
      configFromISO(config);
      if (config._isValid === false) {
        delete config._isValid;
      } else {
        return;
      }
      configFromRFC2822(config);
      if (config._isValid === false) {
        delete config._isValid;
      } else {
        return;
      }
      if (config._strict) {
        config._isValid = false;
      } else {
        // Final attempt, use Input Fallback
        hooks.createFromInputFallback(config);
      }
    }
    hooks.createFromInputFallback = deprecate('value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' + 'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' + 'discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.', function (config) {
      config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
    });

    // Pick the first defined of two or three arguments.
    function defaults(a, b, c) {
      if (a != null) {
        return a;
      }
      if (b != null) {
        return b;
      }
      return c;
    }
    function currentDateArray(config) {
      // hooks is actually the exported moment object
      var nowValue = new Date(hooks.now());
      if (config._useUTC) {
        return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];
      }
      return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
    }

    // convert an array to a date.
    // the array should mirror the parameters below
    // note: all values past the year are optional and will default to the lowest possible value.
    // [year, month, day , hour, minute, second, millisecond]
    function configFromArray(config) {
      var i,
        date,
        input = [],
        currentDate,
        expectedWeekday,
        yearToUse;
      if (config._d) {
        return;
      }
      currentDate = currentDateArray(config);

      //compute day of the year from weeks and weekdays
      if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
        dayOfYearFromWeekInfo(config);
      }

      //if the day of the year is set, figure out what it is
      if (config._dayOfYear != null) {
        yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);
        if (config._dayOfYear > daysInYear(yearToUse) || config._dayOfYear === 0) {
          getParsingFlags(config)._overflowDayOfYear = true;
        }
        date = createUTCDate(yearToUse, 0, config._dayOfYear);
        config._a[MONTH] = date.getUTCMonth();
        config._a[DATE] = date.getUTCDate();
      }

      // Default to current date.
      // * if no year, month, day of month are given, default to today
      // * if day of month is given, default month and year
      // * if month is given, default only year
      // * if year is given, don't default anything
      for (i = 0; i < 3 && config._a[i] == null; ++i) {
        config._a[i] = input[i] = currentDate[i];
      }

      // Zero out whatever was not defaulted, including time
      for (; i < 7; i++) {
        config._a[i] = input[i] = config._a[i] == null ? i === 2 ? 1 : 0 : config._a[i];
      }

      // Check for 24:00:00.000
      if (config._a[HOUR] === 24 && config._a[MINUTE] === 0 && config._a[SECOND] === 0 && config._a[MILLISECOND] === 0) {
        config._nextDay = true;
        config._a[HOUR] = 0;
      }
      config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
      expectedWeekday = config._useUTC ? config._d.getUTCDay() : config._d.getDay();

      // Apply timezone offset from input. The actual utcOffset can be changed
      // with parseZone.
      if (config._tzm != null) {
        config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
      }
      if (config._nextDay) {
        config._a[HOUR] = 24;
      }

      // check for mismatching day of week
      if (config._w && typeof config._w.d !== 'undefined' && config._w.d !== expectedWeekday) {
        getParsingFlags(config).weekdayMismatch = true;
      }
    }
    function dayOfYearFromWeekInfo(config) {
      var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow, curWeek;
      w = config._w;
      if (w.GG != null || w.W != null || w.E != null) {
        dow = 1;
        doy = 4;

        // TODO: We need to take the current isoWeekYear, but that depends on
        // how we interpret now (local, utc, fixed offset). So create
        // a now version of current config (take local/utc/offset flags, and
        // create now).
        weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);
        week = defaults(w.W, 1);
        weekday = defaults(w.E, 1);
        if (weekday < 1 || weekday > 7) {
          weekdayOverflow = true;
        }
      } else {
        dow = config._locale._week.dow;
        doy = config._locale._week.doy;
        curWeek = weekOfYear(createLocal(), dow, doy);
        weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);

        // Default to current week.
        week = defaults(w.w, curWeek.week);
        if (w.d != null) {
          // weekday -- low day numbers are considered next week
          weekday = w.d;
          if (weekday < 0 || weekday > 6) {
            weekdayOverflow = true;
          }
        } else if (w.e != null) {
          // local weekday -- counting starts from beginning of week
          weekday = w.e + dow;
          if (w.e < 0 || w.e > 6) {
            weekdayOverflow = true;
          }
        } else {
          // default to beginning of week
          weekday = dow;
        }
      }
      if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
        getParsingFlags(config)._overflowWeeks = true;
      } else if (weekdayOverflow != null) {
        getParsingFlags(config)._overflowWeekday = true;
      } else {
        temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
        config._a[YEAR] = temp.year;
        config._dayOfYear = temp.dayOfYear;
      }
    }

    // constant that refers to the ISO standard
    hooks.ISO_8601 = function () {};

    // constant that refers to the RFC 2822 form
    hooks.RFC_2822 = function () {};

    // date from string and format string
    function configFromStringAndFormat(config) {
      // TODO: Move this to another part of the creation flow to prevent circular deps
      if (config._f === hooks.ISO_8601) {
        configFromISO(config);
        return;
      }
      if (config._f === hooks.RFC_2822) {
        configFromRFC2822(config);
        return;
      }
      config._a = [];
      getParsingFlags(config).empty = true;

      // This array is used to make a Date, either with `new Date` or `Date.UTC`
      var string = '' + config._i,
        i,
        parsedInput,
        tokens,
        token,
        skipped,
        stringLength = string.length,
        totalParsedInputLength = 0,
        era,
        tokenLen;
      tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];
      tokenLen = tokens.length;
      for (i = 0; i < tokenLen; i++) {
        token = tokens[i];
        parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
        if (parsedInput) {
          skipped = string.substr(0, string.indexOf(parsedInput));
          if (skipped.length > 0) {
            getParsingFlags(config).unusedInput.push(skipped);
          }
          string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
          totalParsedInputLength += parsedInput.length;
        }
        // don't parse if it's not a known token
        if (formatTokenFunctions[token]) {
          if (parsedInput) {
            getParsingFlags(config).empty = false;
          } else {
            getParsingFlags(config).unusedTokens.push(token);
          }
          addTimeToArrayFromToken(token, parsedInput, config);
        } else if (config._strict && !parsedInput) {
          getParsingFlags(config).unusedTokens.push(token);
        }
      }

      // add remaining unparsed input length to the string
      getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
      if (string.length > 0) {
        getParsingFlags(config).unusedInput.push(string);
      }

      // clear _12h flag if hour is <= 12
      if (config._a[HOUR] <= 12 && getParsingFlags(config).bigHour === true && config._a[HOUR] > 0) {
        getParsingFlags(config).bigHour = undefined;
      }
      getParsingFlags(config).parsedDateParts = config._a.slice(0);
      getParsingFlags(config).meridiem = config._meridiem;
      // handle meridiem
      config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);

      // handle era
      era = getParsingFlags(config).era;
      if (era !== null) {
        config._a[YEAR] = config._locale.erasConvertYear(era, config._a[YEAR]);
      }
      configFromArray(config);
      checkOverflow(config);
    }
    function meridiemFixWrap(locale, hour, meridiem) {
      var isPm;
      if (meridiem == null) {
        // nothing to do
        return hour;
      }
      if (locale.meridiemHour != null) {
        return locale.meridiemHour(hour, meridiem);
      } else if (locale.isPM != null) {
        // Fallback
        isPm = locale.isPM(meridiem);
        if (isPm && hour < 12) {
          hour += 12;
        }
        if (!isPm && hour === 12) {
          hour = 0;
        }
        return hour;
      } else {
        // this is not supposed to happen
        return hour;
      }
    }

    // date from string and array of format strings
    function configFromStringAndArray(config) {
      var tempConfig,
        bestMoment,
        scoreToBeat,
        i,
        currentScore,
        validFormatFound,
        bestFormatIsValid = false,
        configfLen = config._f.length;
      if (configfLen === 0) {
        getParsingFlags(config).invalidFormat = true;
        config._d = new Date(NaN);
        return;
      }
      for (i = 0; i < configfLen; i++) {
        currentScore = 0;
        validFormatFound = false;
        tempConfig = copyConfig({}, config);
        if (config._useUTC != null) {
          tempConfig._useUTC = config._useUTC;
        }
        tempConfig._f = config._f[i];
        configFromStringAndFormat(tempConfig);
        if (isValid(tempConfig)) {
          validFormatFound = true;
        }

        // if there is any input that was not parsed add a penalty for that format
        currentScore += getParsingFlags(tempConfig).charsLeftOver;

        //or tokens
        currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;
        getParsingFlags(tempConfig).score = currentScore;
        if (!bestFormatIsValid) {
          if (scoreToBeat == null || currentScore < scoreToBeat || validFormatFound) {
            scoreToBeat = currentScore;
            bestMoment = tempConfig;
            if (validFormatFound) {
              bestFormatIsValid = true;
            }
          }
        } else {
          if (currentScore < scoreToBeat) {
            scoreToBeat = currentScore;
            bestMoment = tempConfig;
          }
        }
      }
      extend(config, bestMoment || tempConfig);
    }
    function configFromObject(config) {
      if (config._d) {
        return;
      }
      var i = normalizeObjectUnits(config._i),
        dayOrDate = i.day === undefined ? i.date : i.day;
      config._a = map([i.year, i.month, dayOrDate, i.hour, i.minute, i.second, i.millisecond], function (obj) {
        return obj && parseInt(obj, 10);
      });
      configFromArray(config);
    }
    function createFromConfig(config) {
      var res = new Moment(checkOverflow(prepareConfig(config)));
      if (res._nextDay) {
        // Adding is smart enough around DST
        res.add(1, 'd');
        res._nextDay = undefined;
      }
      return res;
    }
    function prepareConfig(config) {
      var input = config._i,
        format = config._f;
      config._locale = config._locale || getLocale(config._l);
      if (input === null || format === undefined && input === '') {
        return createInvalid({
          nullInput: true
        });
      }
      if (typeof input === 'string') {
        config._i = input = config._locale.preparse(input);
      }
      if (isMoment(input)) {
        return new Moment(checkOverflow(input));
      } else if (isDate(input)) {
        config._d = input;
      } else if (isArray(format)) {
        configFromStringAndArray(config);
      } else if (format) {
        configFromStringAndFormat(config);
      } else {
        configFromInput(config);
      }
      if (!isValid(config)) {
        config._d = null;
      }
      return config;
    }
    function configFromInput(config) {
      var input = config._i;
      if (isUndefined(input)) {
        config._d = new Date(hooks.now());
      } else if (isDate(input)) {
        config._d = new Date(input.valueOf());
      } else if (typeof input === 'string') {
        configFromString(config);
      } else if (isArray(input)) {
        config._a = map(input.slice(0), function (obj) {
          return parseInt(obj, 10);
        });
        configFromArray(config);
      } else if (isObject(input)) {
        configFromObject(config);
      } else if (isNumber(input)) {
        // from milliseconds
        config._d = new Date(input);
      } else {
        hooks.createFromInputFallback(config);
      }
    }
    function createLocalOrUTC(input, format, locale, strict, isUTC) {
      var c = {};
      if (format === true || format === false) {
        strict = format;
        format = undefined;
      }
      if (locale === true || locale === false) {
        strict = locale;
        locale = undefined;
      }
      if (isObject(input) && isObjectEmpty(input) || isArray(input) && input.length === 0) {
        input = undefined;
      }
      // object construction must be done this way.
      // https://github.com/moment/moment/issues/1423
      c._isAMomentObject = true;
      c._useUTC = c._isUTC = isUTC;
      c._l = locale;
      c._i = input;
      c._f = format;
      c._strict = strict;
      return createFromConfig(c);
    }
    function createLocal(input, format, locale, strict) {
      return createLocalOrUTC(input, format, locale, strict, false);
    }
    var prototypeMin = deprecate('moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/', function () {
        var other = createLocal.apply(null, arguments);
        if (this.isValid() && other.isValid()) {
          return other < this ? this : other;
        } else {
          return createInvalid();
        }
      }),
      prototypeMax = deprecate('moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/', function () {
        var other = createLocal.apply(null, arguments);
        if (this.isValid() && other.isValid()) {
          return other > this ? this : other;
        } else {
          return createInvalid();
        }
      });

    // Pick a moment m from moments so that m[fn](other) is true for all
    // other. This relies on the function fn to be transitive.
    //
    // moments should either be an array of moment objects or an array, whose
    // first element is an array of moment objects.
    function pickBy(fn, moments) {
      var res, i;
      if (moments.length === 1 && isArray(moments[0])) {
        moments = moments[0];
      }
      if (!moments.length) {
        return createLocal();
      }
      res = moments[0];
      for (i = 1; i < moments.length; ++i) {
        if (!moments[i].isValid() || moments[i][fn](res)) {
          res = moments[i];
        }
      }
      return res;
    }

    // TODO: Use [].sort instead?
    function min() {
      var args = [].slice.call(arguments, 0);
      return pickBy('isBefore', args);
    }
    function max() {
      var args = [].slice.call(arguments, 0);
      return pickBy('isAfter', args);
    }
    var now = function () {
      return Date.now ? Date.now() : +new Date();
    };
    var ordering = ['year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', 'millisecond'];
    function isDurationValid(m) {
      var key,
        unitHasDecimal = false,
        i,
        orderLen = ordering.length;
      for (key in m) {
        if (hasOwnProp(m, key) && !(indexOf.call(ordering, key) !== -1 && (m[key] == null || !isNaN(m[key])))) {
          return false;
        }
      }
      for (i = 0; i < orderLen; ++i) {
        if (m[ordering[i]]) {
          if (unitHasDecimal) {
            return false; // only allow non-integers for smallest unit
          }
          if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
            unitHasDecimal = true;
          }
        }
      }
      return true;
    }
    function isValid$1() {
      return this._isValid;
    }
    function createInvalid$1() {
      return createDuration(NaN);
    }
    function Duration(duration) {
      var normalizedInput = normalizeObjectUnits(duration),
        years = normalizedInput.year || 0,
        quarters = normalizedInput.quarter || 0,
        months = normalizedInput.month || 0,
        weeks = normalizedInput.week || normalizedInput.isoWeek || 0,
        days = normalizedInput.day || 0,
        hours = normalizedInput.hour || 0,
        minutes = normalizedInput.minute || 0,
        seconds = normalizedInput.second || 0,
        milliseconds = normalizedInput.millisecond || 0;
      this._isValid = isDurationValid(normalizedInput);

      // representation for dateAddRemove
      this._milliseconds = +milliseconds + seconds * 1e3 +
      // 1000
      minutes * 6e4 +
      // 1000 * 60
      hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
      // Because of dateAddRemove treats 24 hours as different from a
      // day when working around DST, we need to store them separately
      this._days = +days + weeks * 7;
      // It is impossible to translate months into days without knowing
      // which months you are are talking about, so we have to store
      // it separately.
      this._months = +months + quarters * 3 + years * 12;
      this._data = {};
      this._locale = getLocale();
      this._bubble();
    }
    function isDuration(obj) {
      return obj instanceof Duration;
    }
    function absRound(number) {
      if (number < 0) {
        return Math.round(-1 * number) * -1;
      } else {
        return Math.round(number);
      }
    }

    // compare two arrays, return the number of differences
    function compareArrays(array1, array2, dontConvert) {
      var len = Math.min(array1.length, array2.length),
        lengthDiff = Math.abs(array1.length - array2.length),
        diffs = 0,
        i;
      for (i = 0; i < len; i++) {
        if (dontConvert && array1[i] !== array2[i] || !dontConvert && toInt(array1[i]) !== toInt(array2[i])) {
          diffs++;
        }
      }
      return diffs + lengthDiff;
    }

    // FORMATTING

    function offset(token, separator) {
      addFormatToken(token, 0, 0, function () {
        var offset = this.utcOffset(),
          sign = '+';
        if (offset < 0) {
          offset = -offset;
          sign = '-';
        }
        return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~offset % 60, 2);
      });
    }
    offset('Z', ':');
    offset('ZZ', '');

    // PARSING

    addRegexToken('Z', matchShortOffset);
    addRegexToken('ZZ', matchShortOffset);
    addParseToken(['Z', 'ZZ'], function (input, array, config) {
      config._useUTC = true;
      config._tzm = offsetFromString(matchShortOffset, input);
    });

    // HELPERS

    // timezone chunker
    // '+10:00' > ['10',  '00']
    // '-1530'  > ['-15', '30']
    var chunkOffset = /([\+\-]|\d\d)/gi;
    function offsetFromString(matcher, string) {
      var matches = (string || '').match(matcher),
        chunk,
        parts,
        minutes;
      if (matches === null) {
        return null;
      }
      chunk = matches[matches.length - 1] || [];
      parts = (chunk + '').match(chunkOffset) || ['-', 0, 0];
      minutes = +(parts[1] * 60) + toInt(parts[2]);
      return minutes === 0 ? 0 : parts[0] === '+' ? minutes : -minutes;
    }

    // Return a moment from input, that is local/utc/zone equivalent to model.
    function cloneWithOffset(input, model) {
      var res, diff;
      if (model._isUTC) {
        res = model.clone();
        diff = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();
        // Use low-level api, because this fn is low-level api.
        res._d.setTime(res._d.valueOf() + diff);
        hooks.updateOffset(res, false);
        return res;
      } else {
        return createLocal(input).local();
      }
    }
    function getDateOffset(m) {
      // On Firefox.24 Date#getTimezoneOffset returns a floating point.
      // https://github.com/moment/moment/pull/1871
      return -Math.round(m._d.getTimezoneOffset());
    }

    // HOOKS

    // This function will be called whenever a moment is mutated.
    // It is intended to keep the offset in sync with the timezone.
    hooks.updateOffset = function () {};

    // MOMENTS

    // keepLocalTime = true means only change the timezone, without
    // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
    // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
    // +0200, so we adjust the time as needed, to be valid.
    //
    // Keeping the time actually adds/subtracts (one hour)
    // from the actual represented time. That is why we call updateOffset
    // a second time. In case it wants us to change the offset again
    // _changeInProgress == true case, then we have to adjust, because
    // there is no such time in the given timezone.
    function getSetOffset(input, keepLocalTime, keepMinutes) {
      var offset = this._offset || 0,
        localAdjust;
      if (!this.isValid()) {
        return input != null ? this : NaN;
      }
      if (input != null) {
        if (typeof input === 'string') {
          input = offsetFromString(matchShortOffset, input);
          if (input === null) {
            return this;
          }
        } else if (Math.abs(input) < 16 && !keepMinutes) {
          input = input * 60;
        }
        if (!this._isUTC && keepLocalTime) {
          localAdjust = getDateOffset(this);
        }
        this._offset = input;
        this._isUTC = true;
        if (localAdjust != null) {
          this.add(localAdjust, 'm');
        }
        if (offset !== input) {
          if (!keepLocalTime || this._changeInProgress) {
            addSubtract(this, createDuration(input - offset, 'm'), 1, false);
          } else if (!this._changeInProgress) {
            this._changeInProgress = true;
            hooks.updateOffset(this, true);
            this._changeInProgress = null;
          }
        }
        return this;
      } else {
        return this._isUTC ? offset : getDateOffset(this);
      }
    }
    function getSetZone(input, keepLocalTime) {
      if (input != null) {
        if (typeof input !== 'string') {
          input = -input;
        }
        this.utcOffset(input, keepLocalTime);
        return this;
      } else {
        return -this.utcOffset();
      }
    }
    function setOffsetToUTC(keepLocalTime) {
      return this.utcOffset(0, keepLocalTime);
    }
    function setOffsetToLocal(keepLocalTime) {
      if (this._isUTC) {
        this.utcOffset(0, keepLocalTime);
        this._isUTC = false;
        if (keepLocalTime) {
          this.subtract(getDateOffset(this), 'm');
        }
      }
      return this;
    }
    function setOffsetToParsedOffset() {
      if (this._tzm != null) {
        this.utcOffset(this._tzm, false, true);
      } else if (typeof this._i === 'string') {
        var tZone = offsetFromString(matchOffset, this._i);
        if (tZone != null) {
          this.utcOffset(tZone);
        } else {
          this.utcOffset(0, true);
        }
      }
      return this;
    }
    function hasAlignedHourOffset(input) {
      if (!this.isValid()) {
        return false;
      }
      input = input ? createLocal(input).utcOffset() : 0;
      return (this.utcOffset() - input) % 60 === 0;
    }
    function isDaylightSavingTime() {
      return this.utcOffset() > this.clone().month(0).utcOffset() || this.utcOffset() > this.clone().month(5).utcOffset();
    }
    function isDaylightSavingTimeShifted() {
      if (!isUndefined(this._isDSTShifted)) {
        return this._isDSTShifted;
      }
      var c = {},
        other;
      copyConfig(c, this);
      c = prepareConfig(c);
      if (c._a) {
        other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
        this._isDSTShifted = this.isValid() && compareArrays(c._a, other.toArray()) > 0;
      } else {
        this._isDSTShifted = false;
      }
      return this._isDSTShifted;
    }
    function isLocal() {
      return this.isValid() ? !this._isUTC : false;
    }
    function isUtcOffset() {
      return this.isValid() ? this._isUTC : false;
    }
    function isUtc() {
      return this.isValid() ? this._isUTC && this._offset === 0 : false;
    }

    // ASP.NET json date format regex
    var aspNetRegex = /^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/,
      // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
      // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
      // and further modified to allow for strings containing both week and day
      isoRegex = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;
    function createDuration(input, key) {
      var duration = input,
        // matching against regexp is expensive, do it on demand
        match = null,
        sign,
        ret,
        diffRes;
      if (isDuration(input)) {
        duration = {
          ms: input._milliseconds,
          d: input._days,
          M: input._months
        };
      } else if (isNumber(input) || !isNaN(+input)) {
        duration = {};
        if (key) {
          duration[key] = +input;
        } else {
          duration.milliseconds = +input;
        }
      } else if (match = aspNetRegex.exec(input)) {
        sign = match[1] === '-' ? -1 : 1;
        duration = {
          y: 0,
          d: toInt(match[DATE]) * sign,
          h: toInt(match[HOUR]) * sign,
          m: toInt(match[MINUTE]) * sign,
          s: toInt(match[SECOND]) * sign,
          ms: toInt(absRound(match[MILLISECOND] * 1000)) * sign // the millisecond decimal point is included in the match
        };
      } else if (match = isoRegex.exec(input)) {
        sign = match[1] === '-' ? -1 : 1;
        duration = {
          y: parseIso(match[2], sign),
          M: parseIso(match[3], sign),
          w: parseIso(match[4], sign),
          d: parseIso(match[5], sign),
          h: parseIso(match[6], sign),
          m: parseIso(match[7], sign),
          s: parseIso(match[8], sign)
        };
      } else if (duration == null) {
        // checks for null or undefined
        duration = {};
      } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {
        diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));
        duration = {};
        duration.ms = diffRes.milliseconds;
        duration.M = diffRes.months;
      }
      ret = new Duration(duration);
      if (isDuration(input) && hasOwnProp(input, '_locale')) {
        ret._locale = input._locale;
      }
      if (isDuration(input) && hasOwnProp(input, '_isValid')) {
        ret._isValid = input._isValid;
      }
      return ret;
    }
    createDuration.fn = Duration.prototype;
    createDuration.invalid = createInvalid$1;
    function parseIso(inp, sign) {
      // We'd normally use ~~inp for this, but unfortunately it also
      // converts floats to ints.
      // inp may be undefined, so careful calling replace on it.
      var res = inp && parseFloat(inp.replace(',', '.'));
      // apply sign while we're at it
      return (isNaN(res) ? 0 : res) * sign;
    }
    function positiveMomentsDifference(base, other) {
      var res = {};
      res.months = other.month() - base.month() + (other.year() - base.year()) * 12;
      if (base.clone().add(res.months, 'M').isAfter(other)) {
        --res.months;
      }
      res.milliseconds = +other - +base.clone().add(res.months, 'M');
      return res;
    }
    function momentsDifference(base, other) {
      var res;
      if (!(base.isValid() && other.isValid())) {
        return {
          milliseconds: 0,
          months: 0
        };
      }
      other = cloneWithOffset(other, base);
      if (base.isBefore(other)) {
        res = positiveMomentsDifference(base, other);
      } else {
        res = positiveMomentsDifference(other, base);
        res.milliseconds = -res.milliseconds;
        res.months = -res.months;
      }
      return res;
    }

    // TODO: remove 'name' arg after deprecation is removed
    function createAdder(direction, name) {
      return function (val, period) {
        var dur, tmp;
        //invert the arguments, but complain about it
        if (period !== null && !isNaN(+period)) {
          deprecateSimple(name, 'moment().' + name + '(period, number) is deprecated. Please use moment().' + name + '(number, period). ' + 'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');
          tmp = val;
          val = period;
          period = tmp;
        }
        dur = createDuration(val, period);
        addSubtract(this, dur, direction);
        return this;
      };
    }
    function addSubtract(mom, duration, isAdding, updateOffset) {
      var milliseconds = duration._milliseconds,
        days = absRound(duration._days),
        months = absRound(duration._months);
      if (!mom.isValid()) {
        // No op
        return;
      }
      updateOffset = updateOffset == null ? true : updateOffset;
      if (months) {
        setMonth(mom, get(mom, 'Month') + months * isAdding);
      }
      if (days) {
        set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);
      }
      if (milliseconds) {
        mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
      }
      if (updateOffset) {
        hooks.updateOffset(mom, days || months);
      }
    }
    var add = createAdder(1, 'add'),
      subtract = createAdder(-1, 'subtract');
    function isString(input) {
      return typeof input === 'string' || input instanceof String;
    }

    // type MomentInput = Moment | Date | string | number | (number | string)[] | MomentInputObject | void; // null | undefined
    function isMomentInput(input) {
      return isMoment(input) || isDate(input) || isString(input) || isNumber(input) || isNumberOrStringArray(input) || isMomentInputObject(input) || input === null || input === undefined;
    }
    function isMomentInputObject(input) {
      var objectTest = isObject(input) && !isObjectEmpty(input),
        propertyTest = false,
        properties = ['years', 'year', 'y', 'months', 'month', 'M', 'days', 'day', 'd', 'dates', 'date', 'D', 'hours', 'hour', 'h', 'minutes', 'minute', 'm', 'seconds', 'second', 's', 'milliseconds', 'millisecond', 'ms'],
        i,
        property,
        propertyLen = properties.length;
      for (i = 0; i < propertyLen; i += 1) {
        property = properties[i];
        propertyTest = propertyTest || hasOwnProp(input, property);
      }
      return objectTest && propertyTest;
    }
    function isNumberOrStringArray(input) {
      var arrayTest = isArray(input),
        dataTypeTest = false;
      if (arrayTest) {
        dataTypeTest = input.filter(function (item) {
          return !isNumber(item) && isString(input);
        }).length === 0;
      }
      return arrayTest && dataTypeTest;
    }
    function isCalendarSpec(input) {
      var objectTest = isObject(input) && !isObjectEmpty(input),
        propertyTest = false,
        properties = ['sameDay', 'nextDay', 'lastDay', 'nextWeek', 'lastWeek', 'sameElse'],
        i,
        property;
      for (i = 0; i < properties.length; i += 1) {
        property = properties[i];
        propertyTest = propertyTest || hasOwnProp(input, property);
      }
      return objectTest && propertyTest;
    }
    function getCalendarFormat(myMoment, now) {
      var diff = myMoment.diff(now, 'days', true);
      return diff < -6 ? 'sameElse' : diff < -1 ? 'lastWeek' : diff < 0 ? 'lastDay' : diff < 1 ? 'sameDay' : diff < 2 ? 'nextDay' : diff < 7 ? 'nextWeek' : 'sameElse';
    }
    function calendar$1(time, formats) {
      // Support for single parameter, formats only overload to the calendar function
      if (arguments.length === 1) {
        if (!arguments[0]) {
          time = undefined;
          formats = undefined;
        } else if (isMomentInput(arguments[0])) {
          time = arguments[0];
          formats = undefined;
        } else if (isCalendarSpec(arguments[0])) {
          formats = arguments[0];
          time = undefined;
        }
      }
      // We want to compare the start of today, vs this.
      // Getting start-of-today depends on whether we're local/utc/offset or not.
      var now = time || createLocal(),
        sod = cloneWithOffset(now, this).startOf('day'),
        format = hooks.calendarFormat(this, sod) || 'sameElse',
        output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);
      return this.format(output || this.localeData().calendar(format, this, createLocal(now)));
    }
    function clone() {
      return new Moment(this);
    }
    function isAfter(input, units) {
      var localInput = isMoment(input) ? input : createLocal(input);
      if (!(this.isValid() && localInput.isValid())) {
        return false;
      }
      units = normalizeUnits(units) || 'millisecond';
      if (units === 'millisecond') {
        return this.valueOf() > localInput.valueOf();
      } else {
        return localInput.valueOf() < this.clone().startOf(units).valueOf();
      }
    }
    function isBefore(input, units) {
      var localInput = isMoment(input) ? input : createLocal(input);
      if (!(this.isValid() && localInput.isValid())) {
        return false;
      }
      units = normalizeUnits(units) || 'millisecond';
      if (units === 'millisecond') {
        return this.valueOf() < localInput.valueOf();
      } else {
        return this.clone().endOf(units).valueOf() < localInput.valueOf();
      }
    }
    function isBetween(from, to, units, inclusivity) {
      var localFrom = isMoment(from) ? from : createLocal(from),
        localTo = isMoment(to) ? to : createLocal(to);
      if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {
        return false;
      }
      inclusivity = inclusivity || '()';
      return (inclusivity[0] === '(' ? this.isAfter(localFrom, units) : !this.isBefore(localFrom, units)) && (inclusivity[1] === ')' ? this.isBefore(localTo, units) : !this.isAfter(localTo, units));
    }
    function isSame(input, units) {
      var localInput = isMoment(input) ? input : createLocal(input),
        inputMs;
      if (!(this.isValid() && localInput.isValid())) {
        return false;
      }
      units = normalizeUnits(units) || 'millisecond';
      if (units === 'millisecond') {
        return this.valueOf() === localInput.valueOf();
      } else {
        inputMs = localInput.valueOf();
        return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
      }
    }
    function isSameOrAfter(input, units) {
      return this.isSame(input, units) || this.isAfter(input, units);
    }
    function isSameOrBefore(input, units) {
      return this.isSame(input, units) || this.isBefore(input, units);
    }
    function diff(input, units, asFloat) {
      var that, zoneDelta, output;
      if (!this.isValid()) {
        return NaN;
      }
      that = cloneWithOffset(input, this);
      if (!that.isValid()) {
        return NaN;
      }
      zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;
      units = normalizeUnits(units);
      switch (units) {
        case 'year':
          output = monthDiff(this, that) / 12;
          break;
        case 'month':
          output = monthDiff(this, that);
          break;
        case 'quarter':
          output = monthDiff(this, that) / 3;
          break;
        case 'second':
          output = (this - that) / 1e3;
          break;
        // 1000
        case 'minute':
          output = (this - that) / 6e4;
          break;
        // 1000 * 60
        case 'hour':
          output = (this - that) / 36e5;
          break;
        // 1000 * 60 * 60
        case 'day':
          output = (this - that - zoneDelta) / 864e5;
          break;
        // 1000 * 60 * 60 * 24, negate dst
        case 'week':
          output = (this - that - zoneDelta) / 6048e5;
          break;
        // 1000 * 60 * 60 * 24 * 7, negate dst
        default:
          output = this - that;
      }
      return asFloat ? output : absFloor(output);
    }
    function monthDiff(a, b) {
      if (a.date() < b.date()) {
        // end-of-month calculations work correct when the start month has more
        // days than the end month.
        return -monthDiff(b, a);
      }
      // difference in months
      var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month()),
        // b is in (anchor - 1 month, anchor + 1 month)
        anchor = a.clone().add(wholeMonthDiff, 'months'),
        anchor2,
        adjust;
      if (b - anchor < 0) {
        anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
        // linear across the month
        adjust = (b - anchor) / (anchor - anchor2);
      } else {
        anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
        // linear across the month
        adjust = (b - anchor) / (anchor2 - anchor);
      }

      //check for negative zero, return zero if negative zero
      return -(wholeMonthDiff + adjust) || 0;
    }
    hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
    hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';
    function toString() {
      return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
    }
    function toISOString(keepOffset) {
      if (!this.isValid()) {
        return null;
      }
      var utc = keepOffset !== true,
        m = utc ? this.clone().utc() : this;
      if (m.year() < 0 || m.year() > 9999) {
        return formatMoment(m, utc ? 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYYYY-MM-DD[T]HH:mm:ss.SSSZ');
      }
      if (isFunction(Date.prototype.toISOString)) {
        // native implementation is ~50x faster, use it when we can
        if (utc) {
          return this.toDate().toISOString();
        } else {
          return new Date(this.valueOf() + this.utcOffset() * 60 * 1000).toISOString().replace('Z', formatMoment(m, 'Z'));
        }
      }
      return formatMoment(m, utc ? 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYY-MM-DD[T]HH:mm:ss.SSSZ');
    }

    /**
     * Return a human readable representation of a moment that can
     * also be evaluated to get a new moment which is the same
     *
     * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
     */
    function inspect() {
      if (!this.isValid()) {
        return 'moment.invalid(/* ' + this._i + ' */)';
      }
      var func = 'moment',
        zone = '',
        prefix,
        year,
        datetime,
        suffix;
      if (!this.isLocal()) {
        func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
        zone = 'Z';
      }
      prefix = '[' + func + '("]';
      year = 0 <= this.year() && this.year() <= 9999 ? 'YYYY' : 'YYYYYY';
      datetime = '-MM-DD[T]HH:mm:ss.SSS';
      suffix = zone + '[")]';
      return this.format(prefix + year + datetime + suffix);
    }
    function format(inputString) {
      if (!inputString) {
        inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
      }
      var output = formatMoment(this, inputString);
      return this.localeData().postformat(output);
    }
    function from(time, withoutSuffix) {
      if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {
        return createDuration({
          to: this,
          from: time
        }).locale(this.locale()).humanize(!withoutSuffix);
      } else {
        return this.localeData().invalidDate();
      }
    }
    function fromNow(withoutSuffix) {
      return this.from(createLocal(), withoutSuffix);
    }
    function to(time, withoutSuffix) {
      if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {
        return createDuration({
          from: this,
          to: time
        }).locale(this.locale()).humanize(!withoutSuffix);
      } else {
        return this.localeData().invalidDate();
      }
    }
    function toNow(withoutSuffix) {
      return this.to(createLocal(), withoutSuffix);
    }

    // If passed a locale key, it will set the locale for this
    // instance.  Otherwise, it will return the locale configuration
    // variables for this instance.
    function locale(key) {
      var newLocaleData;
      if (key === undefined) {
        return this._locale._abbr;
      } else {
        newLocaleData = getLocale(key);
        if (newLocaleData != null) {
          this._locale = newLocaleData;
        }
        return this;
      }
    }
    var lang = deprecate('moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.', function (key) {
      if (key === undefined) {
        return this.localeData();
      } else {
        return this.locale(key);
      }
    });
    function localeData() {
      return this._locale;
    }
    var MS_PER_SECOND = 1000,
      MS_PER_MINUTE = 60 * MS_PER_SECOND,
      MS_PER_HOUR = 60 * MS_PER_MINUTE,
      MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR;

    // actual modulo - handles negative numbers (for dates before 1970):
    function mod$1(dividend, divisor) {
      return (dividend % divisor + divisor) % divisor;
    }
    function localStartOfDate(y, m, d) {
      // the date constructor remaps years 0-99 to 1900-1999
      if (y < 100 && y >= 0) {
        // preserve leap years using a full 400 year cycle, then reset
        return new Date(y + 400, m, d) - MS_PER_400_YEARS;
      } else {
        return new Date(y, m, d).valueOf();
      }
    }
    function utcStartOfDate(y, m, d) {
      // Date.UTC remaps years 0-99 to 1900-1999
      if (y < 100 && y >= 0) {
        // preserve leap years using a full 400 year cycle, then reset
        return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;
      } else {
        return Date.UTC(y, m, d);
      }
    }
    function startOf(units) {
      var time, startOfDate;
      units = normalizeUnits(units);
      if (units === undefined || units === 'millisecond' || !this.isValid()) {
        return this;
      }
      startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;
      switch (units) {
        case 'year':
          time = startOfDate(this.year(), 0, 1);
          break;
        case 'quarter':
          time = startOfDate(this.year(), this.month() - this.month() % 3, 1);
          break;
        case 'month':
          time = startOfDate(this.year(), this.month(), 1);
          break;
        case 'week':
          time = startOfDate(this.year(), this.month(), this.date() - this.weekday());
          break;
        case 'isoWeek':
          time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1));
          break;
        case 'day':
        case 'date':
          time = startOfDate(this.year(), this.month(), this.date());
          break;
        case 'hour':
          time = this._d.valueOf();
          time -= mod$1(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR);
          break;
        case 'minute':
          time = this._d.valueOf();
          time -= mod$1(time, MS_PER_MINUTE);
          break;
        case 'second':
          time = this._d.valueOf();
          time -= mod$1(time, MS_PER_SECOND);
          break;
      }
      this._d.setTime(time);
      hooks.updateOffset(this, true);
      return this;
    }
    function endOf(units) {
      var time, startOfDate;
      units = normalizeUnits(units);
      if (units === undefined || units === 'millisecond' || !this.isValid()) {
        return this;
      }
      startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;
      switch (units) {
        case 'year':
          time = startOfDate(this.year() + 1, 0, 1) - 1;
          break;
        case 'quarter':
          time = startOfDate(this.year(), this.month() - this.month() % 3 + 3, 1) - 1;
          break;
        case 'month':
          time = startOfDate(this.year(), this.month() + 1, 1) - 1;
          break;
        case 'week':
          time = startOfDate(this.year(), this.month(), this.date() - this.weekday() + 7) - 1;
          break;
        case 'isoWeek':
          time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1) + 7) - 1;
          break;
        case 'day':
        case 'date':
          time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;
          break;
        case 'hour':
          time = this._d.valueOf();
          time += MS_PER_HOUR - mod$1(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR) - 1;
          break;
        case 'minute':
          time = this._d.valueOf();
          time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;
          break;
        case 'second':
          time = this._d.valueOf();
          time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;
          break;
      }
      this._d.setTime(time);
      hooks.updateOffset(this, true);
      return this;
    }
    function valueOf() {
      return this._d.valueOf() - (this._offset || 0) * 60000;
    }
    function unix() {
      return Math.floor(this.valueOf() / 1000);
    }
    function toDate() {
      return new Date(this.valueOf());
    }
    function toArray() {
      var m = this;
      return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];
    }
    function toObject() {
      var m = this;
      return {
        years: m.year(),
        months: m.month(),
        date: m.date(),
        hours: m.hours(),
        minutes: m.minutes(),
        seconds: m.seconds(),
        milliseconds: m.milliseconds()
      };
    }
    function toJSON() {
      // new Date(NaN).toJSON() === null
      return this.isValid() ? this.toISOString() : null;
    }
    function isValid$2() {
      return isValid(this);
    }
    function parsingFlags() {
      return extend({}, getParsingFlags(this));
    }
    function invalidAt() {
      return getParsingFlags(this).overflow;
    }
    function creationData() {
      return {
        input: this._i,
        format: this._f,
        locale: this._locale,
        isUTC: this._isUTC,
        strict: this._strict
      };
    }
    addFormatToken('N', 0, 0, 'eraAbbr');
    addFormatToken('NN', 0, 0, 'eraAbbr');
    addFormatToken('NNN', 0, 0, 'eraAbbr');
    addFormatToken('NNNN', 0, 0, 'eraName');
    addFormatToken('NNNNN', 0, 0, 'eraNarrow');
    addFormatToken('y', ['y', 1], 'yo', 'eraYear');
    addFormatToken('y', ['yy', 2], 0, 'eraYear');
    addFormatToken('y', ['yyy', 3], 0, 'eraYear');
    addFormatToken('y', ['yyyy', 4], 0, 'eraYear');
    addRegexToken('N', matchEraAbbr);
    addRegexToken('NN', matchEraAbbr);
    addRegexToken('NNN', matchEraAbbr);
    addRegexToken('NNNN', matchEraName);
    addRegexToken('NNNNN', matchEraNarrow);
    addParseToken(['N', 'NN', 'NNN', 'NNNN', 'NNNNN'], function (input, array, config, token) {
      var era = config._locale.erasParse(input, token, config._strict);
      if (era) {
        getParsingFlags(config).era = era;
      } else {
        getParsingFlags(config).invalidEra = input;
      }
    });
    addRegexToken('y', matchUnsigned);
    addRegexToken('yy', matchUnsigned);
    addRegexToken('yyy', matchUnsigned);
    addRegexToken('yyyy', matchUnsigned);
    addRegexToken('yo', matchEraYearOrdinal);
    addParseToken(['y', 'yy', 'yyy', 'yyyy'], YEAR);
    addParseToken(['yo'], function (input, array, config, token) {
      var match;
      if (config._locale._eraYearOrdinalRegex) {
        match = input.match(config._locale._eraYearOrdinalRegex);
      }
      if (config._locale.eraYearOrdinalParse) {
        array[YEAR] = config._locale.eraYearOrdinalParse(input, match);
      } else {
        array[YEAR] = parseInt(input, 10);
      }
    });
    function localeEras(m, format) {
      var i,
        l,
        date,
        eras = this._eras || getLocale('en')._eras;
      for (i = 0, l = eras.length; i < l; ++i) {
        switch (typeof eras[i].since) {
          case 'string':
            // truncate time
            date = hooks(eras[i].since).startOf('day');
            eras[i].since = date.valueOf();
            break;
        }
        switch (typeof eras[i].until) {
          case 'undefined':
            eras[i].until = +Infinity;
            break;
          case 'string':
            // truncate time
            date = hooks(eras[i].until).startOf('day').valueOf();
            eras[i].until = date.valueOf();
            break;
        }
      }
      return eras;
    }
    function localeErasParse(eraName, format, strict) {
      var i,
        l,
        eras = this.eras(),
        name,
        abbr,
        narrow;
      eraName = eraName.toUpperCase();
      for (i = 0, l = eras.length; i < l; ++i) {
        name = eras[i].name.toUpperCase();
        abbr = eras[i].abbr.toUpperCase();
        narrow = eras[i].narrow.toUpperCase();
        if (strict) {
          switch (format) {
            case 'N':
            case 'NN':
            case 'NNN':
              if (abbr === eraName) {
                return eras[i];
              }
              break;
            case 'NNNN':
              if (name === eraName) {
                return eras[i];
              }
              break;
            case 'NNNNN':
              if (narrow === eraName) {
                return eras[i];
              }
              break;
          }
        } else if ([name, abbr, narrow].indexOf(eraName) >= 0) {
          return eras[i];
        }
      }
    }
    function localeErasConvertYear(era, year) {
      var dir = era.since <= era.until ? +1 : -1;
      if (year === undefined) {
        return hooks(era.since).year();
      } else {
        return hooks(era.since).year() + (year - era.offset) * dir;
      }
    }
    function getEraName() {
      var i,
        l,
        val,
        eras = this.localeData().eras();
      for (i = 0, l = eras.length; i < l; ++i) {
        // truncate time
        val = this.clone().startOf('day').valueOf();
        if (eras[i].since <= val && val <= eras[i].until) {
          return eras[i].name;
        }
        if (eras[i].until <= val && val <= eras[i].since) {
          return eras[i].name;
        }
      }
      return '';
    }
    function getEraNarrow() {
      var i,
        l,
        val,
        eras = this.localeData().eras();
      for (i = 0, l = eras.length; i < l; ++i) {
        // truncate time
        val = this.clone().startOf('day').valueOf();
        if (eras[i].since <= val && val <= eras[i].until) {
          return eras[i].narrow;
        }
        if (eras[i].until <= val && val <= eras[i].since) {
          return eras[i].narrow;
        }
      }
      return '';
    }
    function getEraAbbr() {
      var i,
        l,
        val,
        eras = this.localeData().eras();
      for (i = 0, l = eras.length; i < l; ++i) {
        // truncate time
        val = this.clone().startOf('day').valueOf();
        if (eras[i].since <= val && val <= eras[i].until) {
          return eras[i].abbr;
        }
        if (eras[i].until <= val && val <= eras[i].since) {
          return eras[i].abbr;
        }
      }
      return '';
    }
    function getEraYear() {
      var i,
        l,
        dir,
        val,
        eras = this.localeData().eras();
      for (i = 0, l = eras.length; i < l; ++i) {
        dir = eras[i].since <= eras[i].until ? +1 : -1;

        // truncate time
        val = this.clone().startOf('day').valueOf();
        if (eras[i].since <= val && val <= eras[i].until || eras[i].until <= val && val <= eras[i].since) {
          return (this.year() - hooks(eras[i].since).year()) * dir + eras[i].offset;
        }
      }
      return this.year();
    }
    function erasNameRegex(isStrict) {
      if (!hasOwnProp(this, '_erasNameRegex')) {
        computeErasParse.call(this);
      }
      return isStrict ? this._erasNameRegex : this._erasRegex;
    }
    function erasAbbrRegex(isStrict) {
      if (!hasOwnProp(this, '_erasAbbrRegex')) {
        computeErasParse.call(this);
      }
      return isStrict ? this._erasAbbrRegex : this._erasRegex;
    }
    function erasNarrowRegex(isStrict) {
      if (!hasOwnProp(this, '_erasNarrowRegex')) {
        computeErasParse.call(this);
      }
      return isStrict ? this._erasNarrowRegex : this._erasRegex;
    }
    function matchEraAbbr(isStrict, locale) {
      return locale.erasAbbrRegex(isStrict);
    }
    function matchEraName(isStrict, locale) {
      return locale.erasNameRegex(isStrict);
    }
    function matchEraNarrow(isStrict, locale) {
      return locale.erasNarrowRegex(isStrict);
    }
    function matchEraYearOrdinal(isStrict, locale) {
      return locale._eraYearOrdinalRegex || matchUnsigned;
    }
    function computeErasParse() {
      var abbrPieces = [],
        namePieces = [],
        narrowPieces = [],
        mixedPieces = [],
        i,
        l,
        erasName,
        erasAbbr,
        erasNarrow,
        eras = this.eras();
      for (i = 0, l = eras.length; i < l; ++i) {
        erasName = regexEscape(eras[i].name);
        erasAbbr = regexEscape(eras[i].abbr);
        erasNarrow = regexEscape(eras[i].narrow);
        namePieces.push(erasName);
        abbrPieces.push(erasAbbr);
        narrowPieces.push(erasNarrow);
        mixedPieces.push(erasName);
        mixedPieces.push(erasAbbr);
        mixedPieces.push(erasNarrow);
      }
      this._erasRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
      this._erasNameRegex = new RegExp('^(' + namePieces.join('|') + ')', 'i');
      this._erasAbbrRegex = new RegExp('^(' + abbrPieces.join('|') + ')', 'i');
      this._erasNarrowRegex = new RegExp('^(' + narrowPieces.join('|') + ')', 'i');
    }

    // FORMATTING

    addFormatToken(0, ['gg', 2], 0, function () {
      return this.weekYear() % 100;
    });
    addFormatToken(0, ['GG', 2], 0, function () {
      return this.isoWeekYear() % 100;
    });
    function addWeekYearFormatToken(token, getter) {
      addFormatToken(0, [token, token.length], 0, getter);
    }
    addWeekYearFormatToken('gggg', 'weekYear');
    addWeekYearFormatToken('ggggg', 'weekYear');
    addWeekYearFormatToken('GGGG', 'isoWeekYear');
    addWeekYearFormatToken('GGGGG', 'isoWeekYear');

    // ALIASES

    // PARSING

    addRegexToken('G', matchSigned);
    addRegexToken('g', matchSigned);
    addRegexToken('GG', match1to2, match2);
    addRegexToken('gg', match1to2, match2);
    addRegexToken('GGGG', match1to4, match4);
    addRegexToken('gggg', match1to4, match4);
    addRegexToken('GGGGG', match1to6, match6);
    addRegexToken('ggggg', match1to6, match6);
    addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {
      week[token.substr(0, 2)] = toInt(input);
    });
    addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
      week[token] = hooks.parseTwoDigitYear(input);
    });

    // MOMENTS

    function getSetWeekYear(input) {
      return getSetWeekYearHelper.call(this, input, this.week(), this.weekday() + this.localeData()._week.dow, this.localeData()._week.dow, this.localeData()._week.doy);
    }
    function getSetISOWeekYear(input) {
      return getSetWeekYearHelper.call(this, input, this.isoWeek(), this.isoWeekday(), 1, 4);
    }
    function getISOWeeksInYear() {
      return weeksInYear(this.year(), 1, 4);
    }
    function getISOWeeksInISOWeekYear() {
      return weeksInYear(this.isoWeekYear(), 1, 4);
    }
    function getWeeksInYear() {
      var weekInfo = this.localeData()._week;
      return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
    }
    function getWeeksInWeekYear() {
      var weekInfo = this.localeData()._week;
      return weeksInYear(this.weekYear(), weekInfo.dow, weekInfo.doy);
    }
    function getSetWeekYearHelper(input, week, weekday, dow, doy) {
      var weeksTarget;
      if (input == null) {
        return weekOfYear(this, dow, doy).year;
      } else {
        weeksTarget = weeksInYear(input, dow, doy);
        if (week > weeksTarget) {
          week = weeksTarget;
        }
        return setWeekAll.call(this, input, week, weekday, dow, doy);
      }
    }
    function setWeekAll(weekYear, week, weekday, dow, doy) {
      var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
        date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);
      this.year(date.getUTCFullYear());
      this.month(date.getUTCMonth());
      this.date(date.getUTCDate());
      return this;
    }

    // FORMATTING

    addFormatToken('Q', 0, 'Qo', 'quarter');

    // PARSING

    addRegexToken('Q', match1);
    addParseToken('Q', function (input, array) {
      array[MONTH] = (toInt(input) - 1) * 3;
    });

    // MOMENTS

    function getSetQuarter(input) {
      return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
    }

    // FORMATTING

    addFormatToken('D', ['DD', 2], 'Do', 'date');

    // PARSING

    addRegexToken('D', match1to2, match1to2NoLeadingZero);
    addRegexToken('DD', match1to2, match2);
    addRegexToken('Do', function (isStrict, locale) {
      // TODO: Remove "ordinalParse" fallback in next major release.
      return isStrict ? locale._dayOfMonthOrdinalParse || locale._ordinalParse : locale._dayOfMonthOrdinalParseLenient;
    });
    addParseToken(['D', 'DD'], DATE);
    addParseToken('Do', function (input, array) {
      array[DATE] = toInt(input.match(match1to2)[0]);
    });

    // MOMENTS

    var getSetDayOfMonth = makeGetSet('Date', true);

    // FORMATTING

    addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');

    // PARSING

    addRegexToken('DDD', match1to3);
    addRegexToken('DDDD', match3);
    addParseToken(['DDD', 'DDDD'], function (input, array, config) {
      config._dayOfYear = toInt(input);
    });

    // HELPERS

    // MOMENTS

    function getSetDayOfYear(input) {
      var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;
      return input == null ? dayOfYear : this.add(input - dayOfYear, 'd');
    }

    // FORMATTING

    addFormatToken('m', ['mm', 2], 0, 'minute');

    // PARSING

    addRegexToken('m', match1to2, match1to2HasZero);
    addRegexToken('mm', match1to2, match2);
    addParseToken(['m', 'mm'], MINUTE);

    // MOMENTS

    var getSetMinute = makeGetSet('Minutes', false);

    // FORMATTING

    addFormatToken('s', ['ss', 2], 0, 'second');

    // PARSING

    addRegexToken('s', match1to2, match1to2HasZero);
    addRegexToken('ss', match1to2, match2);
    addParseToken(['s', 'ss'], SECOND);

    // MOMENTS

    var getSetSecond = makeGetSet('Seconds', false);

    // FORMATTING

    addFormatToken('S', 0, 0, function () {
      return ~~(this.millisecond() / 100);
    });
    addFormatToken(0, ['SS', 2], 0, function () {
      return ~~(this.millisecond() / 10);
    });
    addFormatToken(0, ['SSS', 3], 0, 'millisecond');
    addFormatToken(0, ['SSSS', 4], 0, function () {
      return this.millisecond() * 10;
    });
    addFormatToken(0, ['SSSSS', 5], 0, function () {
      return this.millisecond() * 100;
    });
    addFormatToken(0, ['SSSSSS', 6], 0, function () {
      return this.millisecond() * 1000;
    });
    addFormatToken(0, ['SSSSSSS', 7], 0, function () {
      return this.millisecond() * 10000;
    });
    addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
      return this.millisecond() * 100000;
    });
    addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
      return this.millisecond() * 1000000;
    });

    // PARSING

    addRegexToken('S', match1to3, match1);
    addRegexToken('SS', match1to3, match2);
    addRegexToken('SSS', match1to3, match3);
    var token, getSetMillisecond;
    for (token = 'SSSS'; token.length <= 9; token += 'S') {
      addRegexToken(token, matchUnsigned);
    }
    function parseMs(input, array) {
      array[MILLISECOND] = toInt(('0.' + input) * 1000);
    }
    for (token = 'S'; token.length <= 9; token += 'S') {
      addParseToken(token, parseMs);
    }
    getSetMillisecond = makeGetSet('Milliseconds', false);

    // FORMATTING

    addFormatToken('z', 0, 0, 'zoneAbbr');
    addFormatToken('zz', 0, 0, 'zoneName');

    // MOMENTS

    function getZoneAbbr() {
      return this._isUTC ? 'UTC' : '';
    }
    function getZoneName() {
      return this._isUTC ? 'Coordinated Universal Time' : '';
    }
    var proto = Moment.prototype;
    proto.add = add;
    proto.calendar = calendar$1;
    proto.clone = clone;
    proto.diff = diff;
    proto.endOf = endOf;
    proto.format = format;
    proto.from = from;
    proto.fromNow = fromNow;
    proto.to = to;
    proto.toNow = toNow;
    proto.get = stringGet;
    proto.invalidAt = invalidAt;
    proto.isAfter = isAfter;
    proto.isBefore = isBefore;
    proto.isBetween = isBetween;
    proto.isSame = isSame;
    proto.isSameOrAfter = isSameOrAfter;
    proto.isSameOrBefore = isSameOrBefore;
    proto.isValid = isValid$2;
    proto.lang = lang;
    proto.locale = locale;
    proto.localeData = localeData;
    proto.max = prototypeMax;
    proto.min = prototypeMin;
    proto.parsingFlags = parsingFlags;
    proto.set = stringSet;
    proto.startOf = startOf;
    proto.subtract = subtract;
    proto.toArray = toArray;
    proto.toObject = toObject;
    proto.toDate = toDate;
    proto.toISOString = toISOString;
    proto.inspect = inspect;
    if (typeof Symbol !== 'undefined' && Symbol.for != null) {
      proto[Symbol.for('nodejs.util.inspect.custom')] = function () {
        return 'Moment<' + this.format() + '>';
      };
    }
    proto.toJSON = toJSON;
    proto.toString = toString;
    proto.unix = unix;
    proto.valueOf = valueOf;
    proto.creationData = creationData;
    proto.eraName = getEraName;
    proto.eraNarrow = getEraNarrow;
    proto.eraAbbr = getEraAbbr;
    proto.eraYear = getEraYear;
    proto.year = getSetYear;
    proto.isLeapYear = getIsLeapYear;
    proto.weekYear = getSetWeekYear;
    proto.isoWeekYear = getSetISOWeekYear;
    proto.quarter = proto.quarters = getSetQuarter;
    proto.month = getSetMonth;
    proto.daysInMonth = getDaysInMonth;
    proto.week = proto.weeks = getSetWeek;
    proto.isoWeek = proto.isoWeeks = getSetISOWeek;
    proto.weeksInYear = getWeeksInYear;
    proto.weeksInWeekYear = getWeeksInWeekYear;
    proto.isoWeeksInYear = getISOWeeksInYear;
    proto.isoWeeksInISOWeekYear = getISOWeeksInISOWeekYear;
    proto.date = getSetDayOfMonth;
    proto.day = proto.days = getSetDayOfWeek;
    proto.weekday = getSetLocaleDayOfWeek;
    proto.isoWeekday = getSetISODayOfWeek;
    proto.dayOfYear = getSetDayOfYear;
    proto.hour = proto.hours = getSetHour;
    proto.minute = proto.minutes = getSetMinute;
    proto.second = proto.seconds = getSetSecond;
    proto.millisecond = proto.milliseconds = getSetMillisecond;
    proto.utcOffset = getSetOffset;
    proto.utc = setOffsetToUTC;
    proto.local = setOffsetToLocal;
    proto.parseZone = setOffsetToParsedOffset;
    proto.hasAlignedHourOffset = hasAlignedHourOffset;
    proto.isDST = isDaylightSavingTime;
    proto.isLocal = isLocal;
    proto.isUtcOffset = isUtcOffset;
    proto.isUtc = isUtc;
    proto.isUTC = isUtc;
    proto.zoneAbbr = getZoneAbbr;
    proto.zoneName = getZoneName;
    proto.dates = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);
    proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);
    proto.years = deprecate('years accessor is deprecated. Use year instead', getSetYear);
    proto.zone = deprecate('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/', getSetZone);
    proto.isDSTShifted = deprecate('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information', isDaylightSavingTimeShifted);
    function createUnix(input) {
      return createLocal(input * 1000);
    }
    function createInZone() {
      return createLocal.apply(null, arguments).parseZone();
    }
    function preParsePostFormat(string) {
      return string;
    }
    var proto$1 = Locale.prototype;
    proto$1.calendar = calendar;
    proto$1.longDateFormat = longDateFormat;
    proto$1.invalidDate = invalidDate;
    proto$1.ordinal = ordinal;
    proto$1.preparse = preParsePostFormat;
    proto$1.postformat = preParsePostFormat;
    proto$1.relativeTime = relativeTime;
    proto$1.pastFuture = pastFuture;
    proto$1.set = set;
    proto$1.eras = localeEras;
    proto$1.erasParse = localeErasParse;
    proto$1.erasConvertYear = localeErasConvertYear;
    proto$1.erasAbbrRegex = erasAbbrRegex;
    proto$1.erasNameRegex = erasNameRegex;
    proto$1.erasNarrowRegex = erasNarrowRegex;
    proto$1.months = localeMonths;
    proto$1.monthsShort = localeMonthsShort;
    proto$1.monthsParse = localeMonthsParse;
    proto$1.monthsRegex = monthsRegex;
    proto$1.monthsShortRegex = monthsShortRegex;
    proto$1.week = localeWeek;
    proto$1.firstDayOfYear = localeFirstDayOfYear;
    proto$1.firstDayOfWeek = localeFirstDayOfWeek;
    proto$1.weekdays = localeWeekdays;
    proto$1.weekdaysMin = localeWeekdaysMin;
    proto$1.weekdaysShort = localeWeekdaysShort;
    proto$1.weekdaysParse = localeWeekdaysParse;
    proto$1.weekdaysRegex = weekdaysRegex;
    proto$1.weekdaysShortRegex = weekdaysShortRegex;
    proto$1.weekdaysMinRegex = weekdaysMinRegex;
    proto$1.isPM = localeIsPM;
    proto$1.meridiem = localeMeridiem;
    function get$1(format, index, field, setter) {
      var locale = getLocale(),
        utc = createUTC().set(setter, index);
      return locale[field](utc, format);
    }
    function listMonthsImpl(format, index, field) {
      if (isNumber(format)) {
        index = format;
        format = undefined;
      }
      format = format || '';
      if (index != null) {
        return get$1(format, index, field, 'month');
      }
      var i,
        out = [];
      for (i = 0; i < 12; i++) {
        out[i] = get$1(format, i, field, 'month');
      }
      return out;
    }

    // ()
    // (5)
    // (fmt, 5)
    // (fmt)
    // (true)
    // (true, 5)
    // (true, fmt, 5)
    // (true, fmt)
    function listWeekdaysImpl(localeSorted, format, index, field) {
      if (typeof localeSorted === 'boolean') {
        if (isNumber(format)) {
          index = format;
          format = undefined;
        }
        format = format || '';
      } else {
        format = localeSorted;
        index = format;
        localeSorted = false;
        if (isNumber(format)) {
          index = format;
          format = undefined;
        }
        format = format || '';
      }
      var locale = getLocale(),
        shift = localeSorted ? locale._week.dow : 0,
        i,
        out = [];
      if (index != null) {
        return get$1(format, (index + shift) % 7, field, 'day');
      }
      for (i = 0; i < 7; i++) {
        out[i] = get$1(format, (i + shift) % 7, field, 'day');
      }
      return out;
    }
    function listMonths(format, index) {
      return listMonthsImpl(format, index, 'months');
    }
    function listMonthsShort(format, index) {
      return listMonthsImpl(format, index, 'monthsShort');
    }
    function listWeekdays(localeSorted, format, index) {
      return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
    }
    function listWeekdaysShort(localeSorted, format, index) {
      return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
    }
    function listWeekdaysMin(localeSorted, format, index) {
      return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
    }
    getSetGlobalLocale('en', {
      eras: [{
        since: '0001-01-01',
        until: +Infinity,
        offset: 1,
        name: 'Anno Domini',
        narrow: 'AD',
        abbr: 'AD'
      }, {
        since: '0000-12-31',
        until: -Infinity,
        offset: 1,
        name: 'Before Christ',
        narrow: 'BC',
        abbr: 'BC'
      }],
      dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
      ordinal: function (number) {
        var b = number % 10,
          output = toInt(number % 100 / 10) === 1 ? 'th' : b === 1 ? 'st' : b === 2 ? 'nd' : b === 3 ? 'rd' : 'th';
        return number + output;
      }
    });

    // Side effect imports

    hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', getSetGlobalLocale);
    hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', getLocale);
    var mathAbs = Math.abs;
    function abs() {
      var data = this._data;
      this._milliseconds = mathAbs(this._milliseconds);
      this._days = mathAbs(this._days);
      this._months = mathAbs(this._months);
      data.milliseconds = mathAbs(data.milliseconds);
      data.seconds = mathAbs(data.seconds);
      data.minutes = mathAbs(data.minutes);
      data.hours = mathAbs(data.hours);
      data.months = mathAbs(data.months);
      data.years = mathAbs(data.years);
      return this;
    }
    function addSubtract$1(duration, input, value, direction) {
      var other = createDuration(input, value);
      duration._milliseconds += direction * other._milliseconds;
      duration._days += direction * other._days;
      duration._months += direction * other._months;
      return duration._bubble();
    }

    // supports only 2.0-style add(1, 's') or add(duration)
    function add$1(input, value) {
      return addSubtract$1(this, input, value, 1);
    }

    // supports only 2.0-style subtract(1, 's') or subtract(duration)
    function subtract$1(input, value) {
      return addSubtract$1(this, input, value, -1);
    }
    function absCeil(number) {
      if (number < 0) {
        return Math.floor(number);
      } else {
        return Math.ceil(number);
      }
    }
    function bubble() {
      var milliseconds = this._milliseconds,
        days = this._days,
        months = this._months,
        data = this._data,
        seconds,
        minutes,
        hours,
        years,
        monthsFromDays;

      // if we have a mix of positive and negative values, bubble down first
      // check: https://github.com/moment/moment/issues/2166
      if (!(milliseconds >= 0 && days >= 0 && months >= 0 || milliseconds <= 0 && days <= 0 && months <= 0)) {
        milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
        days = 0;
        months = 0;
      }

      // The following code bubbles up values, see the tests for
      // examples of what that means.
      data.milliseconds = milliseconds % 1000;
      seconds = absFloor(milliseconds / 1000);
      data.seconds = seconds % 60;
      minutes = absFloor(seconds / 60);
      data.minutes = minutes % 60;
      hours = absFloor(minutes / 60);
      data.hours = hours % 24;
      days += absFloor(hours / 24);

      // convert days to months
      monthsFromDays = absFloor(daysToMonths(days));
      months += monthsFromDays;
      days -= absCeil(monthsToDays(monthsFromDays));

      // 12 months -> 1 year
      years = absFloor(months / 12);
      months %= 12;
      data.days = days;
      data.months = months;
      data.years = years;
      return this;
    }
    function daysToMonths(days) {
      // 400 years have 146097 days (taking into account leap year rules)
      // 400 years have 12 months === 4800
      return days * 4800 / 146097;
    }
    function monthsToDays(months) {
      // the reverse of daysToMonths
      return months * 146097 / 4800;
    }
    function as(units) {
      if (!this.isValid()) {
        return NaN;
      }
      var days,
        months,
        milliseconds = this._milliseconds;
      units = normalizeUnits(units);
      if (units === 'month' || units === 'quarter' || units === 'year') {
        days = this._days + milliseconds / 864e5;
        months = this._months + daysToMonths(days);
        switch (units) {
          case 'month':
            return months;
          case 'quarter':
            return months / 3;
          case 'year':
            return months / 12;
        }
      } else {
        // handle milliseconds separately because of floating point math errors (issue #1867)
        days = this._days + Math.round(monthsToDays(this._months));
        switch (units) {
          case 'week':
            return days / 7 + milliseconds / 6048e5;
          case 'day':
            return days + milliseconds / 864e5;
          case 'hour':
            return days * 24 + milliseconds / 36e5;
          case 'minute':
            return days * 1440 + milliseconds / 6e4;
          case 'second':
            return days * 86400 + milliseconds / 1000;
          // Math.floor prevents floating point math errors here
          case 'millisecond':
            return Math.floor(days * 864e5) + milliseconds;
          default:
            throw new Error('Unknown unit ' + units);
        }
      }
    }
    function makeAs(alias) {
      return function () {
        return this.as(alias);
      };
    }
    var asMilliseconds = makeAs('ms'),
      asSeconds = makeAs('s'),
      asMinutes = makeAs('m'),
      asHours = makeAs('h'),
      asDays = makeAs('d'),
      asWeeks = makeAs('w'),
      asMonths = makeAs('M'),
      asQuarters = makeAs('Q'),
      asYears = makeAs('y'),
      valueOf$1 = asMilliseconds;
    function clone$1() {
      return createDuration(this);
    }
    function get$2(units) {
      units = normalizeUnits(units);
      return this.isValid() ? this[units + 's']() : NaN;
    }
    function makeGetter(name) {
      return function () {
        return this.isValid() ? this._data[name] : NaN;
      };
    }
    var milliseconds = makeGetter('milliseconds'),
      seconds = makeGetter('seconds'),
      minutes = makeGetter('minutes'),
      hours = makeGetter('hours'),
      days = makeGetter('days'),
      months = makeGetter('months'),
      years = makeGetter('years');
    function weeks() {
      return absFloor(this.days() / 7);
    }
    var round = Math.round,
      thresholds = {
        ss: 44,
        // a few seconds to seconds
        s: 45,
        // seconds to minute
        m: 45,
        // minutes to hour
        h: 22,
        // hours to day
        d: 26,
        // days to month/week
        w: null,
        // weeks to month
        M: 11 // months to year
      };

    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
      return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
    }
    function relativeTime$1(posNegDuration, withoutSuffix, thresholds, locale) {
      var duration = createDuration(posNegDuration).abs(),
        seconds = round(duration.as('s')),
        minutes = round(duration.as('m')),
        hours = round(duration.as('h')),
        days = round(duration.as('d')),
        months = round(duration.as('M')),
        weeks = round(duration.as('w')),
        years = round(duration.as('y')),
        a = seconds <= thresholds.ss && ['s', seconds] || seconds < thresholds.s && ['ss', seconds] || minutes <= 1 && ['m'] || minutes < thresholds.m && ['mm', minutes] || hours <= 1 && ['h'] || hours < thresholds.h && ['hh', hours] || days <= 1 && ['d'] || days < thresholds.d && ['dd', days];
      if (thresholds.w != null) {
        a = a || weeks <= 1 && ['w'] || weeks < thresholds.w && ['ww', weeks];
      }
      a = a || months <= 1 && ['M'] || months < thresholds.M && ['MM', months] || years <= 1 && ['y'] || ['yy', years];
      a[2] = withoutSuffix;
      a[3] = +posNegDuration > 0;
      a[4] = locale;
      return substituteTimeAgo.apply(null, a);
    }

    // This function allows you to set the rounding function for relative time strings
    function getSetRelativeTimeRounding(roundingFunction) {
      if (roundingFunction === undefined) {
        return round;
      }
      if (typeof roundingFunction === 'function') {
        round = roundingFunction;
        return true;
      }
      return false;
    }

    // This function allows you to set a threshold for relative time strings
    function getSetRelativeTimeThreshold(threshold, limit) {
      if (thresholds[threshold] === undefined) {
        return false;
      }
      if (limit === undefined) {
        return thresholds[threshold];
      }
      thresholds[threshold] = limit;
      if (threshold === 's') {
        thresholds.ss = limit - 1;
      }
      return true;
    }
    function humanize(argWithSuffix, argThresholds) {
      if (!this.isValid()) {
        return this.localeData().invalidDate();
      }
      var withSuffix = false,
        th = thresholds,
        locale,
        output;
      if (typeof argWithSuffix === 'object') {
        argThresholds = argWithSuffix;
        argWithSuffix = false;
      }
      if (typeof argWithSuffix === 'boolean') {
        withSuffix = argWithSuffix;
      }
      if (typeof argThresholds === 'object') {
        th = Object.assign({}, thresholds, argThresholds);
        if (argThresholds.s != null && argThresholds.ss == null) {
          th.ss = argThresholds.s - 1;
        }
      }
      locale = this.localeData();
      output = relativeTime$1(this, !withSuffix, th, locale);
      if (withSuffix) {
        output = locale.pastFuture(+this, output);
      }
      return locale.postformat(output);
    }
    var abs$1 = Math.abs;
    function sign(x) {
      return (x > 0) - (x < 0) || +x;
    }
    function toISOString$1() {
      // for ISO strings we do not use the normal bubbling rules:
      //  * milliseconds bubble up until they become hours
      //  * days do not bubble at all
      //  * months bubble up until they become years
      // This is because there is no context-free conversion between hours and days
      // (think of clock changes)
      // and also not between days and months (28-31 days per month)
      if (!this.isValid()) {
        return this.localeData().invalidDate();
      }
      var seconds = abs$1(this._milliseconds) / 1000,
        days = abs$1(this._days),
        months = abs$1(this._months),
        minutes,
        hours,
        years,
        s,
        total = this.asSeconds(),
        totalSign,
        ymSign,
        daysSign,
        hmsSign;
      if (!total) {
        // this is the same as C#'s (Noda) and python (isodate)...
        // but not other JS (goog.date)
        return 'P0D';
      }

      // 3600 seconds -> 60 minutes -> 1 hour
      minutes = absFloor(seconds / 60);
      hours = absFloor(minutes / 60);
      seconds %= 60;
      minutes %= 60;

      // 12 months -> 1 year
      years = absFloor(months / 12);
      months %= 12;

      // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
      s = seconds ? seconds.toFixed(3).replace(/\.?0+$/, '') : '';
      totalSign = total < 0 ? '-' : '';
      ymSign = sign(this._months) !== sign(total) ? '-' : '';
      daysSign = sign(this._days) !== sign(total) ? '-' : '';
      hmsSign = sign(this._milliseconds) !== sign(total) ? '-' : '';
      return totalSign + 'P' + (years ? ymSign + years + 'Y' : '') + (months ? ymSign + months + 'M' : '') + (days ? daysSign + days + 'D' : '') + (hours || minutes || seconds ? 'T' : '') + (hours ? hmsSign + hours + 'H' : '') + (minutes ? hmsSign + minutes + 'M' : '') + (seconds ? hmsSign + s + 'S' : '');
    }
    var proto$2 = Duration.prototype;
    proto$2.isValid = isValid$1;
    proto$2.abs = abs;
    proto$2.add = add$1;
    proto$2.subtract = subtract$1;
    proto$2.as = as;
    proto$2.asMilliseconds = asMilliseconds;
    proto$2.asSeconds = asSeconds;
    proto$2.asMinutes = asMinutes;
    proto$2.asHours = asHours;
    proto$2.asDays = asDays;
    proto$2.asWeeks = asWeeks;
    proto$2.asMonths = asMonths;
    proto$2.asQuarters = asQuarters;
    proto$2.asYears = asYears;
    proto$2.valueOf = valueOf$1;
    proto$2._bubble = bubble;
    proto$2.clone = clone$1;
    proto$2.get = get$2;
    proto$2.milliseconds = milliseconds;
    proto$2.seconds = seconds;
    proto$2.minutes = minutes;
    proto$2.hours = hours;
    proto$2.days = days;
    proto$2.weeks = weeks;
    proto$2.months = months;
    proto$2.years = years;
    proto$2.humanize = humanize;
    proto$2.toISOString = toISOString$1;
    proto$2.toString = toISOString$1;
    proto$2.toJSON = toISOString$1;
    proto$2.locale = locale;
    proto$2.localeData = localeData;
    proto$2.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', toISOString$1);
    proto$2.lang = lang;

    // FORMATTING

    addFormatToken('X', 0, 0, 'unix');
    addFormatToken('x', 0, 0, 'valueOf');

    // PARSING

    addRegexToken('x', matchSigned);
    addRegexToken('X', matchTimestamp);
    addParseToken('X', function (input, array, config) {
      config._d = new Date(parseFloat(input) * 1000);
    });
    addParseToken('x', function (input, array, config) {
      config._d = new Date(toInt(input));
    });

    //! moment.js

    hooks.version = '2.30.1';
    setHookCallback(createLocal);
    hooks.fn = proto;
    hooks.min = min;
    hooks.max = max;
    hooks.now = now;
    hooks.utc = createUTC;
    hooks.unix = createUnix;
    hooks.months = listMonths;
    hooks.isDate = isDate;
    hooks.locale = getSetGlobalLocale;
    hooks.invalid = createInvalid;
    hooks.duration = createDuration;
    hooks.isMoment = isMoment;
    hooks.weekdays = listWeekdays;
    hooks.parseZone = createInZone;
    hooks.localeData = getLocale;
    hooks.isDuration = isDuration;
    hooks.monthsShort = listMonthsShort;
    hooks.weekdaysMin = listWeekdaysMin;
    hooks.defineLocale = defineLocale;
    hooks.updateLocale = updateLocale;
    hooks.locales = listLocales;
    hooks.weekdaysShort = listWeekdaysShort;
    hooks.normalizeUnits = normalizeUnits;
    hooks.relativeTimeRounding = getSetRelativeTimeRounding;
    hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
    hooks.calendarFormat = getCalendarFormat;
    hooks.prototype = proto;

    // currently HTML5 input type only supports 24-hour formats
    hooks.HTML5_FMT = {
      DATETIME_LOCAL: 'YYYY-MM-DDTHH:mm',
      // <input type="datetime-local" />
      DATETIME_LOCAL_SECONDS: 'YYYY-MM-DDTHH:mm:ss',
      // <input type="datetime-local" step="1" />
      DATETIME_LOCAL_MS: 'YYYY-MM-DDTHH:mm:ss.SSS',
      // <input type="datetime-local" step="0.001" />
      DATE: 'YYYY-MM-DD',
      // <input type="date" />
      TIME: 'HH:mm',
      // <input type="time" />
      TIME_SECONDS: 'HH:mm:ss',
      // <input type="time" step="1" />
      TIME_MS: 'HH:mm:ss.SSS',
      // <input type="time" step="0.001" />
      WEEK: 'GGGG-[W]WW',
      // <input type="week" />
      MONTH: 'YYYY-MM' // <input type="month" />
    };
    return hooks;
  });

  //! moment.js locale configuration
  (function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' && typeof require === 'function' ? factory(require('../moment')) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
  })(window, function (moment) {

    //! moment.js locale configuration
    function plural(word, num) {
      var forms = word.split('_');
      return num % 10 === 1 && num % 100 !== 11 ? forms[0] : num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20) ? forms[1] : forms[2];
    }
    function relativeTimeWithPlural(number, withoutSuffix, key) {
      var format = {
        ss: withoutSuffix ? 'секунда_секунды_секунд' : 'секунду_секунды_секунд',
        mm: withoutSuffix ? 'минута_минуты_минут' : 'минуту_минуты_минут',
        hh: 'час_часа_часов',
        dd: 'день_дня_дней',
        ww: 'неделя_недели_недель',
        MM: 'месяц_месяца_месяцев',
        yy: 'год_года_лет'
      };
      if (key === 'm') {
        return withoutSuffix ? 'минута' : 'минуту';
      } else {
        return number + ' ' + plural(format[key], +number);
      }
    }
    var monthsParse = [/^янв/i, /^фев/i, /^мар/i, /^апр/i, /^ма[йя]/i, /^июн/i, /^июл/i, /^авг/i, /^сен/i, /^окт/i, /^ноя/i, /^дек/i];

    // http://new.gramota.ru/spravka/rules/139-prop : § 103
    // Сокращения месяцев: http://new.gramota.ru/spravka/buro/search-answer?s=242637
    // CLDR data:          http://www.unicode.org/cldr/charts/28/summary/ru.html#1753
    var ru = moment.defineLocale('ru', {
      months: {
        format: 'января_февраля_марта_апреля_мая_июня_июля_августа_сентября_октября_ноября_декабря'.split('_'),
        standalone: 'январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь'.split('_')
      },
      monthsShort: {
        // по CLDR именно "июл." и "июн.", но какой смысл менять букву на точку?
        format: 'янв._февр._мар._апр._мая_июня_июля_авг._сент._окт._нояб._дек.'.split('_'),
        standalone: 'янв._февр._март_апр._май_июнь_июль_авг._сент._окт._нояб._дек.'.split('_')
      },
      weekdays: {
        standalone: 'воскресенье_понедельник_вторник_среда_четверг_пятница_суббота'.split('_'),
        format: 'воскресенье_понедельник_вторник_среду_четверг_пятницу_субботу'.split('_'),
        isFormat: /\[ ?[Вв] ?(?:прошлую|следующую|эту)? ?] ?dddd/
      },
      weekdaysShort: 'вс_пн_вт_ср_чт_пт_сб'.split('_'),
      weekdaysMin: 'вс_пн_вт_ср_чт_пт_сб'.split('_'),
      monthsParse: monthsParse,
      longMonthsParse: monthsParse,
      shortMonthsParse: monthsParse,
      // полные названия с падежами, по три буквы, для некоторых, по 4 буквы, сокращения с точкой и без точки
      monthsRegex: /^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,
      // копия предыдущего
      monthsShortRegex: /^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,
      // полные названия с падежами
      monthsStrictRegex: /^(январ[яь]|феврал[яь]|марта?|апрел[яь]|ма[яй]|июн[яь]|июл[яь]|августа?|сентябр[яь]|октябр[яь]|ноябр[яь]|декабр[яь])/i,
      // Выражение, которое соответствует только сокращённым формам
      monthsShortStrictRegex: /^(янв\.|февр?\.|мар[т.]|апр\.|ма[яй]|июн[ья.]|июл[ья.]|авг\.|сент?\.|окт\.|нояб?\.|дек\.)/i,
      longDateFormat: {
        LT: 'H:mm',
        LTS: 'H:mm:ss',
        L: 'DD.MM.YYYY',
        LL: 'D MMMM YYYY г.',
        LLL: 'D MMMM YYYY г., H:mm',
        LLLL: 'dddd, D MMMM YYYY г., H:mm'
      },
      calendar: {
        sameDay: '[Сегодня, в] LT',
        nextDay: '[Завтра, в] LT',
        lastDay: '[Вчера, в] LT',
        nextWeek: function (now) {
          if (now.week() !== this.week()) {
            switch (this.day()) {
              case 0:
                return '[В следующее] dddd, [в] LT';
              case 1:
              case 2:
              case 4:
                return '[В следующий] dddd, [в] LT';
              case 3:
              case 5:
              case 6:
                return '[В следующую] dddd, [в] LT';
            }
          } else {
            if (this.day() === 2) {
              return '[Во] dddd, [в] LT';
            } else {
              return '[В] dddd, [в] LT';
            }
          }
        },
        lastWeek: function (now) {
          if (now.week() !== this.week()) {
            switch (this.day()) {
              case 0:
                return '[В прошлое] dddd, [в] LT';
              case 1:
              case 2:
              case 4:
                return '[В прошлый] dddd, [в] LT';
              case 3:
              case 5:
              case 6:
                return '[В прошлую] dddd, [в] LT';
            }
          } else {
            if (this.day() === 2) {
              return '[Во] dddd, [в] LT';
            } else {
              return '[В] dddd, [в] LT';
            }
          }
        },
        sameElse: 'L'
      },
      relativeTime: {
        future: 'через %s',
        past: '%s назад',
        s: 'несколько секунд',
        ss: relativeTimeWithPlural,
        m: relativeTimeWithPlural,
        mm: relativeTimeWithPlural,
        h: 'час',
        hh: relativeTimeWithPlural,
        d: 'день',
        dd: relativeTimeWithPlural,
        w: 'неделя',
        ww: relativeTimeWithPlural,
        M: 'месяц',
        MM: relativeTimeWithPlural,
        y: 'год',
        yy: relativeTimeWithPlural
      },
      meridiemParse: /ночи|утра|дня|вечера/i,
      isPM: function (input) {
        return /^(дня|вечера)$/.test(input);
      },
      meridiem: function (hour, minute, isLower) {
        if (hour < 4) {
          return 'ночи';
        } else if (hour < 12) {
          return 'утра';
        } else if (hour < 17) {
          return 'дня';
        } else {
          return 'вечера';
        }
      },
      dayOfMonthOrdinalParse: /\d{1,2}-(й|го|я)/,
      ordinal: function (number, period) {
        switch (period) {
          case 'M':
          case 'd':
          case 'DDD':
            return number + '-й';
          case 'D':
            return number + '-го';
          case 'w':
          case 'W':
            return number + '-я';
          default:
            return number;
        }
      },
      week: {
        dow: 1,
        // Monday is the first day of the week.
        doy: 4 // The week that contains Jan 4th is the first week of the year.
      }
    });
    return ru;
  });

  function _callSuper$e(_this, derived, args) {
    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      } catch (e) {
        return false;
      }
    }
    derived = _getPrototypeOf(derived);
    return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));
  }
  var ColumnsDateHuman = /*#__PURE__*/function (_Column) {
    /**
     * Инициализация
     * @param {coreuiTableInstance} table
     * @param {Object}              options
     */
    function ColumnsDateHuman(table, options) {
      var _this2;
      _classCallCheck(this, ColumnsDateHuman);
      options = $.extend(true, {
        type: 'date',
        field: null,
        label: null,
        show: true,
        width: null,
        format: 'DD.MM.YYYY',
        attr: {},
        attrHeader: {},
        render: null
      }, options);
      _this2 = _callSuper$e(this, ColumnsDateHuman, [table, options]);
      _defineProperty(_this2, "_lang", null);
      _this2._lang = table.getOptions().lang;
      return _this2;
    }

    /**
     * Формирование контента
     * @param {string|number|Date} content
     * @param {object} record
     * @returns {string}
     */
    _inherits(ColumnsDateHuman, _Column);
    return _createClass(ColumnsDateHuman, [{
      key: "render",
      value: function render(content, record) {
        if (['string', 'number'].indexOf(_typeof(content)) < 0 || !content instanceof Date) {
          return '';
        }
        try {
          if (content !== '') {
            var dateContent = content instanceof Date ? content : new Date(content);
            var dateFormat = moment(dateContent).format('MM.DD.yyyy HH:mm:ss');
            content = moment(dateContent).locale(this._lang).fromNow();
            content = '<span title="' + dateFormat + '">' + content + '</span>';
          }
        } catch (e) {
          console.warn(e);
        }
        return content;
      }
    }]);
  }(Column);

  function _callSuper$d(_this, derived, args) {
    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      } catch (e) {
        return false;
      }
    }
    derived = _getPrototypeOf(derived);
    return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));
  }
  var ColumnsHtml = /*#__PURE__*/function (_Column) {
    /**
     * Инициализация
     * @param {coreuiTableInstance} table
     * @param {Object}              options
     */
    function ColumnsHtml(table, options) {
      var _this2;
      _classCallCheck(this, ColumnsHtml);
      options = $.extend(true, {
        type: 'html',
        field: null,
        label: null,
        show: true,
        width: null,
        minWidth: null,
        maxWidth: null,
        noWrap: null,
        noWrapToggle: null,
        attr: {},
        attrHeader: {},
        render: null
      }, options);
      _this2 = _callSuper$d(this, ColumnsHtml, [table, options]);
      var tableOptions = _this2._table.getOptions();
      if (_this2._options.noWrap || _this2._options.noWrap === null && tableOptions.noWrap) {
        if (!_this2._options.attr) {
          _this2._options.attr = {
            "class": 'coreui_table__no-wrap'
          };
        } else {
          _this2._options.attr = coreuiTableUtils.mergeAttr(_this2._options.attr, {
            "class": 'coreui_table__no-wrap'
          });
        }
        _this2._options.noWrap = true;
        if (_this2._options.noWrapToggle || _this2._options.noWrapToggle === null && tableOptions.noWrapToggle) {
          _this2._options.noWrapToggle = true;
        }
      }
      return _this2;
    }

    /**
     * Конвертирование значения колонки в текст
     * @param {*} columnValue
     * @returns {string}
     */
    _inherits(ColumnsHtml, _Column);
    return _createClass(ColumnsHtml, [{
      key: "convertToString",
      value: function convertToString(columnValue) {
        if (['string', 'number'].indexOf(_typeof(columnValue)) >= 0) {
          return String(columnValue).replace(/<[^>]*>?/gm, '');
        } else {
          return '';
        }
      }

      /**
       * Формирование контента
       * @param {string|HTMLElement|jQuery} content
       * @param {object}                    record
       * @returns {string}
       */
    }, {
      key: "render",
      value: function render(content, record) {
        if (['string', 'bigint', 'symbol', 'number'].indexOf(_typeof(content)) < 0 && !(content instanceof HTMLElement) && !(window.hasOwnProperty('jQuery') && content instanceof jQuery)) {
          return '';
        }
        if (this._options.noWrap) {
          content = $('<div></div>').append(content);
          if (this._options.noWrapToggle) {
            content = $(content).after('<i class="bi bi-caret-down-fill toggle"></i>');
          }
        }
        return content;
      }
    }]);
  }(Column);

  function _callSuper$c(_this, derived, args) {
    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      } catch (e) {
        return false;
      }
    }
    derived = _getPrototypeOf(derived);
    return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));
  }
  var ColumnsNumber = /*#__PURE__*/function (_Column) {
    /**
     * Инициализация
     * @param {coreuiTableInstance} table
     * @param {Object}              options
     */
    function ColumnsNumber(table, options) {
      var _this2;
      _classCallCheck(this, ColumnsNumber);
      options = $.extend(true, {
        type: 'number',
        field: null,
        label: null,
        show: true,
        width: null,
        minWidth: null,
        maxWidth: null,
        noWrap: null,
        noWrapToggle: null,
        attr: {},
        attrHeader: {},
        render: null
      }, options);
      _this2 = _callSuper$c(this, ColumnsNumber, [table, options]);
      var tableOptions = _this2._table.getOptions();
      if (_this2._options.noWrap || _this2._options.noWrap === null && tableOptions.noWrap) {
        if (!_this2._options.attr) {
          _this2._options.attr = {
            "class": 'coreui_table__no-wrap'
          };
        } else {
          _this2._options.attr = coreuiTableUtils.mergeAttr(_this2._options.attr, {
            "class": 'coreui_table__no-wrap'
          });
        }
        _this2._options.noWrap = true;
        if (_this2._options.noWrapToggle || _this2._options.noWrapToggle === null && tableOptions.noWrapToggle) {
          _this2._options.noWrapToggle = true;
        }
      }
      return _this2;
    }

    /**
     * Формирование контента
     * @param {string} content
     * @param {object} record
     * @returns {string}
     */
    _inherits(ColumnsNumber, _Column);
    return _createClass(ColumnsNumber, [{
      key: "render",
      value: function render(content, record) {
        if (['string', 'bigint', 'symbol', 'number'].indexOf(_typeof(content)) < 0) {
          return '';
        }
        content = String(content).replace(/,/g, '.').replace(/[^0-9\-\.]/g, '').replace(/[\s]{2,}/g, ' ').replace(/(?<!(\.\d*|^.{0}))(?=(\d{3})+(?!\d))/g, '$1 ').replace(/\- /g, '-');
        if (this._options.noWrap) {
          content = '<div>' + content + '</div>';
          if (this._options.noWrapToggle) {
            content += '<i class="bi bi-caret-down-fill toggle"></i>';
          }
        }
        return content;
      }
    }]);
  }(Column);

  function _callSuper$b(_this, derived, args) {
    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      } catch (e) {
        return false;
      }
    }
    derived = _getPrototypeOf(derived);
    return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));
  }
  var ColumnsMoney = /*#__PURE__*/function (_Column) {
    /**
     * Инициализация
     * @param {coreuiTableInstance} table
     * @param {Object}              options
     */
    function ColumnsMoney(table, options) {
      var _this2;
      _classCallCheck(this, ColumnsMoney);
      options = $.extend(true, {
        type: 'money',
        field: null,
        label: null,
        show: true,
        width: null,
        minWidth: null,
        maxWidth: null,
        noWrap: null,
        noWrapToggle: null,
        currency: null,
        attr: {
          "class": 'text-end'
        },
        attrHeader: {
          "class": 'text-end'
        },
        render: null
      }, options);
      _this2 = _callSuper$b(this, ColumnsMoney, [table, options]);
      var tableOptions = _this2._table.getOptions();
      if (_this2._options.noWrap || _this2._options.noWrap === null && tableOptions.noWrap) {
        if (!_this2._options.attr) {
          _this2._options.attr = {
            "class": 'coreui_table__no-wrap'
          };
        } else {
          _this2._options.attr = coreuiTableUtils.mergeAttr(_this2._options.attr, {
            "class": 'coreui_table__no-wrap'
          });
        }
        _this2._options.noWrap = true;
        if (_this2._options.noWrapToggle || _this2._options.noWrapToggle === null && tableOptions.noWrapToggle) {
          _this2._options.noWrapToggle = true;
        }
      }
      return _this2;
    }

    /**
     * Конвертирование значения колонки в текст
     * @param {*} columnValue
     * @returns {string}
     */
    _inherits(ColumnsMoney, _Column);
    return _createClass(ColumnsMoney, [{
      key: "convertToString",
      value: function convertToString(columnValue) {
        var content = '';
        if (['string', 'number'].indexOf(_typeof(columnValue)) >= 0) {
          if (isNaN(content)) {
            content = content.toString().replace(/(\d)(?=(\d\d\d)+([^\d]|$))/g, '$1 ');
          } else {
            content = Number(content).toFixed(2).toString();
            content = content.replace(/(\d)(?=(\d\d\d)+([^\d]|$))/g, '$1 ');
          }
        }
        return content;
      }

      /**
       * Формирование контента
       * @param {string} content
       * @param {object} record
       * @returns {string}
       */
    }, {
      key: "render",
      value: function render(content, record) {
        if (['string', 'bigint', 'symbol', 'number'].indexOf(_typeof(content)) < 0) {
          return '';
        }
        if (isNaN(content)) {
          content = content.toString().replace(/(\d)(?=(\d\d\d)+([^\d]|$))/g, '$1 ');
        } else {
          content = Number(content).toFixed(2).toString();
          content = content.replace(/(\d)(?=(\d\d\d)+([^\d]|$))/g, '$1 ');
        }
        if (this._options.currency && ['string', 'number'].indexOf(_typeof(this._options.currency)) >= 0) {
          content += ' <small class="text-muted">' + this._options.currency + '</small>';
        }
        if (this._options.noWrap) {
          content = '<div>' + content + '</div>';
          if (this._options.noWrapToggle) {
            content += '<i class="bi bi-caret-down-fill toggle"></i>';
          }
        }
        return content;
      }
    }]);
  }(Column);

  function _callSuper$a(_this, derived, args) {
    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      } catch (e) {
        return false;
      }
    }
    derived = _getPrototypeOf(derived);
    return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));
  }
  var ColumnsNumbers = /*#__PURE__*/function (_Column) {
    /**
     * Инициализация
     * @param {coreuiTableInstance} table
     * @param {Object}              options
     */
    function ColumnsNumbers(table, options) {
      _classCallCheck(this, ColumnsNumbers);
      options = $.extend(true, {
        type: 'numbers',
        label: '№',
        width: 20,
        attr: {
          "class": 'text-end'
        },
        attrHeader: null
      }, options);
      return _callSuper$a(this, ColumnsNumbers, [table, options]);
    }

    /**
     * Формирование контента
     * @param {string} content
     * @param {object} record
     * @returns {string}
     */
    _inherits(ColumnsNumbers, _Column);
    return _createClass(ColumnsNumbers, [{
      key: "render",
      value: function render(content, record) {
        return this._table._recordsNumber;
      }
    }]);
  }(Column);

  function _callSuper$9(_this, derived, args) {
    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      } catch (e) {
        return false;
      }
    }
    derived = _getPrototypeOf(derived);
    return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));
  }
  var ColumnsSelect = /*#__PURE__*/function (_Column) {
    /**
     * Инициализация
     * @param {coreuiTableInstance} table
     * @param {Object}              options
     */
    function ColumnsSelect(table, options) {
      var _this2;
      _classCallCheck(this, ColumnsSelect);
      var originalOptions = {
        type: 'select',
        field: null,
        label: '',
        show: true,
        width: 35,
        attr: {
          "class": 'coreui-table__select_container text-center'
        },
        attrHeader: {
          "class": 'text-center'
        }
      };
      if (options.hasOwnProperty('attr')) {
        options.attr = coreuiTableUtils.mergeAttr(originalOptions.attr, options.attr);
      }
      if (options.hasOwnProperty('attrHeader')) {
        options.attrHeader = coreuiTableUtils.mergeAttr(originalOptions.attrHeader, options.attrHeader);
      }
      options = $.extend(true, originalOptions, options);
      _this2 = _callSuper$9(this, ColumnsSelect, [table, options]);
      _this2._options.label = tpl['columns/select_label.html'];

      // Показ строк
      table.on('records_show', function () {
        var selects = coreuiTableElements.getRowsSelects(table.getId());
        var selectAll = coreuiTableElements.getRowsSelectAll(table.getId());

        // Отмена обработки нажатия в select колонках
        $(selects).click(function (event) {
          event.stopPropagation();
        });

        // Выбор всех строк
        selectAll.click(function (event) {
          if ($(this).is(':checked')) {
            table.selectAll();
          } else {
            table.unselectAll();
          }
        });
      });
      return _this2;
    }

    /**
     * Формирование контента
     * @param {string} content
     * @param {object} record
     * @returns {string}
     */
    _inherits(ColumnsSelect, _Column);
    return _createClass(ColumnsSelect, [{
      key: "render",
      value: function render(content, record) {
        var select = $(coreuiTableUtils.render(tpl['columns/select.html'], {
          index: record.index
        }));
        var that = this;

        // Выбор строки
        select.click(function () {
          var tr = coreuiTableElements.getTrByIndex(that._table.getId(), record.index);
          if (!tr) {
            return;
          }
          if ($(this).is(':checked')) {
            $(tr).addClass('table-primary');
            coreuiTablePrivate._trigger(that._table, 'record_select', [record]);
          } else {
            $(tr).removeClass('table-primary');
            coreuiTablePrivate._trigger(that._table, 'record_unselect', [record]);
          }
        });
        return select;
      }
    }]);
  }(Column);

  function _callSuper$8(_this, derived, args) {
    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      } catch (e) {
        return false;
      }
    }
    derived = _getPrototypeOf(derived);
    return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));
  }
  var ColumnsSwitch = /*#__PURE__*/function (_Column) {
    /**
     * Инициализация
     * @param {coreuiTableInstance} table
     * @param {Object}              options
     */
    function ColumnsSwitch(table, options) {
      var _this2;
      _classCallCheck(this, ColumnsSwitch);
      options = $.extend(true, {
        type: 'switch',
        label: '',
        field: '',
        show: true,
        disabled: false,
        width: 5,
        valueY: '1',
        valueN: '0',
        attr: {
          "class": 'coreui-table__switch_container'
        },
        attrHeader: {},
        onChange: null
      }, options);
      _this2 = _callSuper$8(this, ColumnsSwitch, [table, options]);

      // Показ строк
      table.on('records_show', function () {
        var containers = coreuiTableElements.getRowsSwitches(table.getId());

        // Отмена обработки нажатия в switch колонках
        containers.click(function (event) {
          event.stopPropagation();
        });
      });
      return _this2;
    }

    /**
     * Формирование контента
     * @param {string} content
     * @param {object} record
     * @returns {jQuery}
     */
    _inherits(ColumnsSwitch, _Column);
    return _createClass(ColumnsSwitch, [{
      key: "render",
      value: function render(content, record) {
        var isChecked = content === this._options.valueY;
        var formSwitch = $(coreuiTableUtils.render(tpl['columns/switch.html'], {
          index: record.index,
          field: this._options.field,
          disabled: this._options.disabled,
          checked: isChecked
        }));

        // События нажатия на переключатель
        var that = this;
        var table = this._table;
        $('.coreui-table__switch', formSwitch).change(function (event) {
          var input = this;
          table._records.map(function (recordTable) {
            if (record.index === recordTable.index) {
              recordTable.data[that._options.field] = input.checked ? that._options.valueY : that._options.valueN;
              return false;
            }
          });
          if (that._options.hasOwnProperty('onChange') && (typeof that._options.onChange === 'function' || typeof that._options.onChange === 'string')) {
            if (typeof that._options.onChange === 'function') {
              that._options.onChange(record, input);
            } else {
              var func = new Function('record', 'input', that._options.onChange);
              func(record, input);
            }
            return false;
          }
        });
        return formSwitch;
      }
    }]);
  }(Column);

  function _callSuper$7(_this, derived, args) {
    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      } catch (e) {
        return false;
      }
    }
    derived = _getPrototypeOf(derived);
    return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));
  }
  var ColumnsText = /*#__PURE__*/function (_Column) {
    /**
     * Инициализация
     * @param {coreuiTableInstance} table
     * @param {Object}              options
     */
    function ColumnsText(table, options) {
      var _this2;
      _classCallCheck(this, ColumnsText);
      options = $.extend(true, {
        type: 'text',
        field: null,
        label: null,
        show: true,
        showLabel: true,
        width: null,
        minWidth: null,
        maxWidth: null,
        attr: null,
        noWrap: null,
        noWrapToggle: null,
        attrHeader: null,
        render: null
      }, options);
      _this2 = _callSuper$7(this, ColumnsText, [table, options]);
      var tableOptions = _this2._table.getOptions();
      if (_this2._options.noWrap || _this2._options.noWrap === null && tableOptions.noWrap) {
        if (!_this2._options.attr) {
          _this2._options.attr = {
            "class": 'coreui_table__no-wrap'
          };
        } else {
          _this2._options.attr = coreuiTableUtils.mergeAttr(_this2._options.attr, {
            "class": 'coreui_table__no-wrap'
          });
        }
        _this2._options.noWrap = true;
        if (_this2._options.noWrapToggle || _this2._options.noWrapToggle === null && tableOptions.noWrapToggle) {
          _this2._options.noWrapToggle = true;
        }
      }
      return _this2;
    }

    /**
     * Формирование контента
     * @param {string} content
     * @param {object} record
     * @returns {string}
     */
    _inherits(ColumnsText, _Column);
    return _createClass(ColumnsText, [{
      key: "render",
      value: function render(content, record) {
        if (['string', 'bigint', 'symbol', 'number'].indexOf(_typeof(content)) < 0) {
          return '';
        }
        content = String(content).replace(/</g, '&lt;').replace(/>/g, '&gt;');
        if (this._options.noWrap) {
          content = '<div>' + content + '</div>';
          if (this._options.noWrapToggle) {
            content += '<i class="bi bi-caret-down-fill toggle"></i>';
          }
        }
        return content;
      }
    }]);
  }(Column);

  function _callSuper$6(_this, derived, args) {
    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      } catch (e) {
        return false;
      }
    }
    derived = _getPrototypeOf(derived);
    return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));
  }
  var ColumnsButton = /*#__PURE__*/function (_Column) {
    /**
     * Инициализация
     * @param {coreuiTableInstance} table
     * @param {Object}              options
     */
    function ColumnsButton(table, options) {
      _classCallCheck(this, ColumnsButton);
      options = $.extend(true, {
        type: 'button',
        field: null,
        label: null,
        show: true,
        width: null,
        minWidth: null,
        maxWidth: null
      }, options);
      return _callSuper$6(this, ColumnsButton, [table, options]);
    }

    /**
     * Формирование контента
     * @param {object} content
     * @param {object} record
     * @returns {string}
     */
    _inherits(ColumnsButton, _Column);
    return _createClass(ColumnsButton, [{
      key: "render",
      value: function render(content, record) {
        if (!coreuiTableUtils.isObject(content)) {
          return '';
        }
        if (!coreuiTableUtils.isObject(content.attr)) {
          content.attr = {};
        }
        if (!content.attr.hasOwnProperty('class')) {
          content.attr["class"] = 'btn btn-outline-secondary';
        }
        if (content.attr.hasOwnProperty('type')) {
          delete content.attr.type;
        }
        var attributes = [];
        $.each(content.attr, function (name, value) {
          if (['string', 'number'].indexOf(_typeof(value)) >= 0) {
            attributes.push(name + '="' + value + '"');
          }
        });
        var btn = $(coreuiTableUtils.render(tpl['columns/button.html'], {
          content: content.content,
          attr: attributes.length > 0 ? ' ' + attributes.join(' ') : ''
        }));
        if (content.hasOwnProperty('onClick')) {
          var that = this;
          if (typeof content.onClick === 'function') {
            btn.click(function (event) {
              event.cancelBubble = true;
              event.preventDefault();
              content.onClick(record, that._table);
            });
          } else if (typeof content.onClick === 'string') {
            var func = new Function('record', 'table', content.onClick);
            btn.click(function (event) {
              event.cancelBubble = true;
              event.preventDefault();
              func(record, that._table);
            });
          } else {
            btn.click(function (event) {
              event.cancelBubble = true;
              event.preventDefault();
            });
          }
        } else {
          btn.click(function (event) {
            event.cancelBubble = true;
            event.preventDefault();
          });
        }
        return btn;
      }
    }]);
  }(Column);

  function _callSuper$5(_this, derived, args) {
    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      } catch (e) {
        return false;
      }
    }
    derived = _getPrototypeOf(derived);
    return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));
  }
  var ColumnsLink = /*#__PURE__*/function (_Column) {
    /**
     * Инициализация
     * @param {coreuiTableInstance} table
     * @param {Object}              options
     */
    function ColumnsLink(table, options) {
      _classCallCheck(this, ColumnsLink);
      options = $.extend(true, {
        type: 'link',
        field: null,
        label: null,
        show: true,
        width: null,
        minWidth: null,
        maxWidth: null
      }, options);
      return _callSuper$5(this, ColumnsLink, [table, options]);
    }

    /**
     * Конвертирование значения колонки в текст
     * @param {*} columnValue
     * @returns {string}
     */
    _inherits(ColumnsLink, _Column);
    return _createClass(ColumnsLink, [{
      key: "convertToString",
      value: function convertToString(columnValue) {
        if (['string', 'number'].indexOf(_typeof(columnValue)) >= 0) {
          return String(columnValue);
        } else if (_typeof(columnValue) === 'object' && columnValue.hasOwnProperty('content') && typeof columnValue.content === 'string') {
          return columnValue.content;
        } else {
          return '';
        }
      }

      /**
       * Формирование контента
       * @param {object|string} content
       * @param {object}        record
       * @returns {string}
       */
    }, {
      key: "render",
      value: function render(content, record) {
        if ((typeof content !== 'string' || !content) && (!coreuiTableUtils.isObject(content) || !content.hasOwnProperty('url') || typeof content.url !== 'string' || !content.url)) {
          return '';
        }
        var linkContent = '';
        var attr = {};
        if (typeof content === 'string') {
          attr.href = content;
          linkContent = content;
        } else {
          if (content.hasOwnProperty('attr') && coreuiTableUtils.isObject(content.attr)) {
            attr = content.attr;
          }
          if (attr.hasOwnProperty('href')) {
            delete attr.href;
          }
          attr.href = content.url;
          if (content.hasOwnProperty('content') && typeof content.content === 'string' && content.content) {
            linkContent = content.content;
          } else {
            linkContent = content.url;
          }
        }
        var attributes = [];
        $.each(attr, function (name, value) {
          if (['string', 'number'].indexOf(_typeof(value)) >= 0) {
            attributes.push(name + '="' + value + '"');
          }
        });
        var link = $(coreuiTableUtils.render(tpl['columns/link.html'], {
          content: linkContent,
          attr: attributes.length > 0 ? ' ' + attributes.join(' ') : ''
        }));
        link.click(function (event) {
          event.cancelBubble = true;
          event.preventDefault();
        });
        return link;
      }
    }]);
  }(Column);

  function _callSuper$4(_this, derived, args) {
    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      } catch (e) {
        return false;
      }
    }
    derived = _getPrototypeOf(derived);
    return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));
  }
  var ColumnsMenu = /*#__PURE__*/function (_Column) {
    /**
     * Инициализация
     * @param {coreuiTableInstance} table
     * @param {Object}              options
     */
    function ColumnsMenu(table, options) {
      _classCallCheck(this, ColumnsMenu);
      options = $.extend(true, {
        type: 'menu',
        field: null,
        label: null,
        show: true,
        width: null,
        minWidth: null,
        maxWidth: null
      }, options);
      return _callSuper$4(this, ColumnsMenu, [table, options]);
    }

    /**
     * Формирование контента
     * @param {object|string} content
     * @param {object}        record
     * @returns {string}
     */
    _inherits(ColumnsMenu, _Column);
    return _createClass(ColumnsMenu, [{
      key: "render",
      value: function render(content, record) {
        if (!coreuiTableUtils.isObject(content) || !content.hasOwnProperty('items') || !Array.isArray(content.items) || content.items.length === 0) {
          return '';
        }
        var items = [];
        var attr = {};
        if (Array.isArray(content.items)) {
          $.each(content.items, function (key, item) {
            if (coreuiTableUtils.isObject(item) && typeof item.type === 'string') {
              if (item.type === 'link') {
                if (item.hasOwnProperty('url') && item.hasOwnProperty('content') && typeof item.url === 'string' && typeof item.content === 'string') {
                  var linkAttr = {};
                  if (item.hasOwnProperty('attr') || coreuiTableUtils.isObject(item.attr)) {
                    linkAttr = item.attr;
                  }
                  if (linkAttr.hasOwnProperty('href')) {
                    delete linkAttr.href;
                  }
                  if (!linkAttr.hasOwnProperty('class') || typeof linkAttr["class"] !== 'string') {
                    linkAttr["class"] = 'dropdown-item';
                  } else {
                    linkAttr["class"] += ' dropdown-item';
                  }
                  var linkAttributes = [];
                  $.each(linkAttr, function (name, value) {
                    if (['string', 'number'].indexOf(_typeof(value)) >= 0) {
                      linkAttributes.push(name + '="' + value + '"');
                    }
                  });
                  items.push({
                    type: 'link',
                    url: item.url,
                    content: item.content,
                    attr: linkAttributes
                  });
                }
              } else if (item.type === 'button') {
                if (item.hasOwnProperty('content') && item.hasOwnProperty('onClick') && typeof item.content === 'string' && ['string', 'function'].indexOf(_typeof(item.onClick)) >= 0) {
                  var btnAttr = {};
                  if (item.hasOwnProperty('attr') || coreuiTableUtils.isObject(item.attr)) {
                    btnAttr = item.attr;
                  }
                  if (btnAttr.hasOwnProperty('type')) {
                    delete btnAttr.type;
                  }
                  if (btnAttr.hasOwnProperty('id')) {
                    delete btnAttr['id'];
                  }
                  if (!btnAttr.hasOwnProperty('class') || typeof btnAttr["class"] !== 'string') {
                    btnAttr["class"] = 'dropdown-item';
                  } else {
                    btnAttr["class"] += ' dropdown-item';
                  }
                  var btnAttributes = [];
                  $.each(btnAttr, function (name, value) {
                    if (['string', 'number'].indexOf(_typeof(value)) >= 0) {
                      btnAttributes.push(name + '="' + value + '"');
                    }
                  });
                  items.push({
                    type: 'button',
                    id: coreuiTableUtils.hashCode(),
                    content: item.content,
                    onClick: item.onClick,
                    attr: btnAttributes.length > 0 ? ' ' + btnAttributes.join(' ') : ''
                  });
                }
              } else if (item.type === 'divider') {
                items.push({
                  type: 'divider'
                });
              } else if (item.type === 'header') {
                if (item.hasOwnProperty('content') && typeof item.content === 'string') {
                  items.push({
                    type: 'header',
                    content: item.content
                  });
                }
              }
            }
          });
        }
        if (content.hasOwnProperty('attr') || coreuiTableUtils.isObject(content.attr)) {
          attr = content.attr;
        }
        if (!attr.hasOwnProperty('class') || ['string', 'number'].indexOf(_typeof(attr["class"])) < 0) {
          attr["class"] = 'btn rounded-1';
        }
        if (attr.hasOwnProperty('type')) {
          delete attr.type;
        }
        if (attr.hasOwnProperty('data-bs-toggle')) {
          delete attr['data-bs-toggle'];
        }
        var attributes = [];
        $.each(attr, function (name, value) {
          if (['string', 'number'].indexOf(_typeof(value)) >= 0) {
            attributes.push(name + '="' + value + '"');
          }
        });
        var menuContent = content.hasOwnProperty('content') && typeof content.content === 'string' && content.content ? content.content : '<i class="bi bi-three-dots-vertical"></i>';
        var position = content.hasOwnProperty('position') && typeof content.position === 'string' && content.position ? content.position : 'end';
        var menu = $(coreuiTableUtils.render(tpl['columns/menu.html'], {
          content: menuContent,
          position: position,
          attr: attributes.length > 0 ? ' ' + attributes.join(' ') : '',
          items: items
        }));
        menu.click(function (event) {
          event.cancelBubble = true;
          event.preventDefault();
        });
        var dropdownMenu = null;
        $(menu).on('show.bs.dropdown', function (e) {
          dropdownMenu = $(menu).find('.dropdown-menu');
          $('body').append(dropdownMenu.detach());
          var eOffset = $(e.target).offset();
          dropdownMenu.css({
            'display': 'block',
            'top': eOffset.top + $(e.target).outerHeight(),
            'left': eOffset.left
          });
        });
        $(menu).on('hide.bs.dropdown', function (e) {
          $(menu).append(dropdownMenu.detach());
          dropdownMenu.hide();
        });
        if (Array.isArray(items)) {
          var that = this;
          $.each(items, function (key, item) {
            if (coreuiTableUtils.isObject(item) && typeof item.type === 'string') {
              if (item.type === 'button') {
                if (item.hasOwnProperty('content') && item.hasOwnProperty('onClick') && ['string', 'function'].indexOf(_typeof(item.onClick)) >= 0 && typeof item.content === 'string') {
                  $('button#btn-dropdown-' + item.id, menu).click(function (event) {
                    if (typeof item.onClick === 'function') {
                      item.onClick(record, that._table, event);
                    } else if (typeof item.onClick === 'string') {
                      new Function('record', 'table', 'event', item.onClick)(record, that._table, event);
                    }
                  });
                }
              }
            }
          });
        }
        return menu;
      }
    }]);
  }(Column);

  function _callSuper$3(_this, derived, args) {
    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      } catch (e) {
        return false;
      }
    }
    derived = _getPrototypeOf(derived);
    return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));
  }
  var ColumnsBadge = /*#__PURE__*/function (_Column) {
    /**
     * Инициализация
     * @param {coreuiTableInstance} table
     * @param {Object}              options
     */
    function ColumnsBadge(table, options) {
      _classCallCheck(this, ColumnsBadge);
      options = $.extend(true, {
        type: 'badge',
        field: null,
        label: null,
        show: true,
        width: null,
        minWidth: null,
        maxWidth: null
      }, options);
      return _callSuper$3(this, ColumnsBadge, [table, options]);
    }

    /**
     * Конвертирование значения колонки в текст
     * @param {*} columnValue
     * @returns {string}
     */
    _inherits(ColumnsBadge, _Column);
    return _createClass(ColumnsBadge, [{
      key: "convertToString",
      value: function convertToString(columnValue) {
        if (typeof columnValue === 'string') {
          return columnValue;
        } else if (typeof columnValue === 'number') {
          return String(columnValue);
        } else if (_typeof(columnValue) === 'object' && columnValue.hasOwnProperty('text') && ['string', 'number'].indexOf(_typeof(columnValue.text)) >= 0) {
          return String(columnValue.text);
        } else {
          return '';
        }
      }

      /**
       * Формирование контента
       * @param {object|string|number} content
       * @param {object}               record
       * @returns {string}
       */
    }, {
      key: "render",
      value: function render(content, record) {
        if (['string', 'number'].indexOf(_typeof(content)) >= 0) {
          content = {
            type: 'secondary',
            text: content
          };
        } else if (!coreuiTableUtils.isObject(content) || !content.hasOwnProperty('type') || !content.hasOwnProperty('text') || typeof content.type !== 'string' || typeof content.text !== 'string' || !content.text) {
          return '';
        }
        if (content.type === '' || content.type === 'none') {
          return content.text;
        }
        return coreuiTableUtils.render(tpl['columns/badge.html'], {
          type: content.type,
          text: content.text
        });
      }
    }]);
  }(Column);

  function _callSuper$2(_this, derived, args) {
    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      } catch (e) {
        return false;
      }
    }
    derived = _getPrototypeOf(derived);
    return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));
  }
  var ColumnsComponent = /*#__PURE__*/function (_Column) {
    /**
     * Инициализация
     * @param {coreuiTableInstance} table
     * @param {Object}              options
     */
    function ColumnsComponent(table, options) {
      _classCallCheck(this, ColumnsComponent);
      options = $.extend(true, {
        type: 'component',
        field: null,
        label: null,
        show: true,
        width: null,
        minWidth: null,
        maxWidth: null
      }, options);
      return _callSuper$2(this, ColumnsComponent, [table, options]);
    }

    /**
     * Формирование контента
     * @param {object|string} content
     * @param {object}        record
     * @returns {string}
     */
    _inherits(ColumnsComponent, _Column);
    return _createClass(ColumnsComponent, [{
      key: "render",
      value: function render(content, record) {
        if (!coreuiTableUtils.isObject(content) || !content.hasOwnProperty('component') || typeof content.component !== 'string' || !content.component) {
          return '';
        }
        return coreuiTableRender.renderComponents(this._table, content, 'records_show');
      }
    }]);
  }(Column);

  function _callSuper$1(_this, derived, args) {
    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      } catch (e) {
        return false;
      }
    }
    derived = _getPrototypeOf(derived);
    return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));
  }
  var ColumnsProgress = /*#__PURE__*/function (_Column) {
    /**
     * Инициализация
     * @param {coreuiTableInstance} table
     * @param {Object}              options
     */
    function ColumnsProgress(table, options) {
      _classCallCheck(this, ColumnsProgress);
      options = $.extend(true, {
        type: 'progress',
        field: null,
        label: null,
        show: true,
        width: null,
        minWidth: null,
        maxWidth: null,
        attr: {},
        showPercent: null,
        barColor: 'primary',
        barWidth: null,
        barHeight: null
      }, options);
      return _callSuper$1(this, ColumnsProgress, [table, options]);
    }

    /**
     * Конвертирование значения колонки в текст
     * @param {*} columnValue
     * @returns {string}
     */
    _inherits(ColumnsProgress, _Column);
    return _createClass(ColumnsProgress, [{
      key: "convertToString",
      value: function convertToString(columnValue) {
        if (['string', 'number'].indexOf(_typeof(columnValue)) >= 0) {
          return String(columnValue);
        } else if (_typeof(columnValue) === 'object' && columnValue.hasOwnProperty('percent') && ['string', 'number'].indexOf(_typeof(columnValue.percent)) >= 0) {
          return String(columnValue.percent);
        } else {
          return '';
        }
      }

      /**
       * Формирование контента
       * @param {object|string|number} content
       * @param {object}              record
       * @returns {string}
       */
    }, {
      key: "render",
      value: function render(content, record) {
        if (!coreuiTableUtils.isNumeric(content) && (!coreuiTableUtils.isObject(content) || !content.hasOwnProperty('percent') || !coreuiTableUtils.isNumeric(content.percent))) {
          return '';
        }
        var description = null;
        var percent = 0;
        var percentText = '';
        var color = typeof this._options.barColor === 'string' ? this._options.barColor : 'primary';
        var attr = this._options.attr;
        attr = coreuiTableUtils.mergeAttr(attr, {
          "class": 'progress me-1'
        });
        if (this._options.barWidth) {
          var barWidth = coreuiTableUtils.isNumeric(this._options.barWidth) ? this._options.barWidth + 'px' : this._options.barWidth;
          attr = coreuiTableUtils.mergeAttr(attr, {
            style: 'width:' + barWidth
          });
        }
        if (this._options.barHeight) {
          var barHeight = coreuiTableUtils.isNumeric(this._options.barHeight) ? this._options.barHeight + 'px' : this._options.barHeight;
          attr = coreuiTableUtils.mergeAttr(attr, {
            style: 'height:' + barHeight
          });
        }
        if (coreuiTableUtils.isNumeric(content)) {
          if (content < 0) {
            percent = 0;
          } else if (content > 100) {
            percent = 100;
          } else {
            percent = content;
          }
        } else {
          if (content.percent < 0) {
            percent = 0;
          } else if (content.percent > 100) {
            percent = 100;
          } else {
            percent = content.percent;
          }
          if (content.hasOwnProperty('color') && typeof content.color === 'string') {
            color = content.color;
          }
          if (content.hasOwnProperty('description') && typeof content.description === 'string' && content.description !== '') {
            description = content.description;
          }
        }
        if (this._options.showPercent) {
          percentText = percent + '%';
        }
        var attributes = [];
        $.each(attr, function (name, value) {
          if (['string', 'number'].indexOf(_typeof(value)) >= 0) {
            attributes.push(name + '="' + value + '"');
          }
        });
        return coreuiTableUtils.render(tpl['columns/progress.html'], {
          description: description,
          percent: percent,
          percentText: percentText,
          color: color,
          attr: attributes.length > 0 ? ' ' + attributes.join(' ') : ''
        });
      }
    }]);
  }(Column);

  function _callSuper(_this, derived, args) {
    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      } catch (e) {
        return false;
      }
    }
    derived = _getPrototypeOf(derived);
    return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));
  }
  var ColumnsImage = /*#__PURE__*/function (_Column) {
    /**
     * Инициализация
     * @param {coreuiTableInstance} table
     * @param {Object}              options
     */
    function ColumnsImage(table, options) {
      var _this2;
      _classCallCheck(this, ColumnsImage);
      options = $.extend(true, {
        type: 'image',
        field: null,
        label: null,
        show: true,
        width: null,
        minWidth: null,
        maxWidth: null,
        attr: {},
        imgWidth: null,
        imgHeight: null,
        imgBorder: null,
        imgStyle: null
      }, options);
      _this2 = _callSuper(this, ColumnsImage, [table, options]);
      _this2._table = table;
      _this2._options = $.extend(true, {}, _this2._options, options);
      return _this2;
    }

    /**
     * Формирование контента
     * @param {string} content
     * @param {object} record
     * @returns {string}
     */
    _inherits(ColumnsImage, _Column);
    return _createClass(ColumnsImage, [{
      key: "render",
      value: function render(content, record) {
        if (typeof content !== 'string' || content === '') {
          return '';
        }
        var attr = this._options.attr;
        attr.src = content;
        if (this._options.imgWidth) {
          var imgWidth = coreuiTableUtils.isNumeric(this._options.imgWidth) ? this._options.imgWidth + 'px' : this._options.imgWidth;
          attr = coreuiTableUtils.mergeAttr(attr, {
            style: 'width:' + imgWidth
          });
        }
        if (this._options.imgHeight) {
          var imgHeight = coreuiTableUtils.isNumeric(this._options.imgHeight) ? this._options.imgHeight + 'px' : this._options.imgHeight;
          attr = coreuiTableUtils.mergeAttr(attr, {
            style: 'height:' + imgHeight
          });
        }
        if (this._options.imgBorder) {
          attr = coreuiTableUtils.mergeAttr(attr, {
            "class": 'border border-secondary-subtle'
          });
        }
        if (this._options.imgStyle && typeof this._options.imgStyle === 'string') {
          switch (this._options.imgStyle) {
            case 'circle':
              attr = coreuiTableUtils.mergeAttr(attr, {
                "class": 'rounded-circle'
              });
              break;
            case 'thumb':
              attr = coreuiTableUtils.mergeAttr(attr, {
                "class": 'img-thumbnail'
              });
              break;
            case 'rounded':
              attr = coreuiTableUtils.mergeAttr(attr, {
                "class": 'rounded'
              });
              break;
          }
        }
        var attributes = [];
        $.each(attr, function (name, value) {
          if (['string', 'number'].indexOf(_typeof(value)) >= 0) {
            attributes.push(name + '="' + value + '"');
          }
        });
        return coreuiTableUtils.render(tpl['columns/image.html'], {
          attr: attributes.length > 0 ? ' ' + attributes.join(' ') : ''
        });
      }
    }]);
  }(Column);

  coreuiTable.lang.ru = langRu;
  coreuiTable.lang.en = langEn;
  coreuiTable.controls.link = ControlLink;
  coreuiTable.controls.button = ControlButton;
  coreuiTable.controls.dropdown = ControlDropdown;
  coreuiTable.controls.buttonGroup = ControlButtonGroup;
  coreuiTable.controls.custom = ControlCustom;
  coreuiTable.controls.pageSize = ControlPageSize;
  coreuiTable.controls.pageJump = ControlPageJump;
  coreuiTable.controls.pages = ControlPages;
  coreuiTable.controls.total = ControlTotal;
  coreuiTable.controls.search = ControlSearch;
  coreuiTable.controls.columns = ControlColumns;
  coreuiTable.controls.caption = ControlCaption;
  coreuiTable.controls.filterClear = ControlFilterClear;
  coreuiTable.controls.divider = ControlDivider;
  coreuiTable.filters.text = FilterText;
  coreuiTable.filters.number = FilterNumber;
  coreuiTable.filters.date = FilterDate;
  coreuiTable.filters.datetime = FilterDatetime;
  coreuiTable.filters.dateMonth = FilterDateMonth;
  coreuiTable.filters.dateRange = FilterDateRange;
  coreuiTable.filters.datetimeRange = FilterDatetimeRange;
  coreuiTable.filters.checkbox = FilterCheckbox;
  coreuiTable.filters.radio = FilterRadio;
  coreuiTable.filters.select = FilterSelect;
  coreuiTable.filters["switch"] = FilterSwitch;
  coreuiTable.search.text = SearchText;
  coreuiTable.search.number = SearchNumber;
  coreuiTable.search.date = SearchDate;
  coreuiTable.search.dateMonth = SearchDateMonth;
  coreuiTable.search.datetime = SearchDatetime;
  coreuiTable.search.dateRange = SearchDateRange;
  coreuiTable.search.datetimeRange = SearchDatetimeRange;
  coreuiTable.search.checkbox = SearchCheckbox;
  coreuiTable.search.checkboxBtn = SearchCheckboxBtn;
  coreuiTable.search.radio = SearchRadio;
  coreuiTable.search.radioBtn = SearchRadioBtn;
  coreuiTable.search.select = SearchSelect;
  coreuiTable.search["switch"] = SearchSwitch;
  coreuiTable.columns.date = ColumnsDate;
  coreuiTable.columns.datetime = ColumnsDatetime;
  coreuiTable.columns.dateHuman = ColumnsDateHuman;
  coreuiTable.columns.html = ColumnsHtml;
  coreuiTable.columns.number = ColumnsNumber;
  coreuiTable.columns.money = ColumnsMoney;
  coreuiTable.columns.numbers = ColumnsNumbers;
  coreuiTable.columns.select = ColumnsSelect;
  coreuiTable.columns["switch"] = ColumnsSwitch;
  coreuiTable.columns.text = ColumnsText;
  coreuiTable.columns.button = ColumnsButton;
  coreuiTable.columns.link = ColumnsLink;
  coreuiTable.columns.menu = ColumnsMenu;
  coreuiTable.columns.badge = ColumnsBadge;
  coreuiTable.columns.component = ColumnsComponent;
  coreuiTable.columns.progress = ColumnsProgress;
  coreuiTable.columns.image = ColumnsImage;

  return coreuiTable;

}));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXMiOlsic3JjL2pzL2NvcmV1aS50YWJsZS50ZW1wbGF0ZXMuanMiLCJub2RlX21vZHVsZXMvZWpzL2Vqcy5taW4uanMiLCJzcmMvanMvY29yZXVpLnRhYmxlLnV0aWxzLmpzIiwic3JjL2pzL2NvcmV1aS50YWJsZS5yZW5kZXIuanMiLCJzcmMvanMvY29yZXVpLnRhYmxlLmVsZW1lbnRzLmpzIiwic3JjL2pzL2NvcmV1aS50YWJsZS5wcml2YXRlLmpzIiwic3JjL2pzL2NvcmV1aS50YWJsZS5pbnN0YW5jZS5qcyIsInNyYy9qcy9jb3JldWkudGFibGUuanMiLCJzcmMvanMvbGFuZy9lbi5qcyIsInNyYy9qcy9sYW5nL3J1LmpzIiwic3JjL2pzL2Fic3RyYWN0L0NvbnRyb2wuanMiLCJzcmMvanMvY29udHJvbHMvbGluay5qcyIsInNyYy9qcy9jb250cm9scy9idXR0b24uanMiLCJzcmMvanMvY29udHJvbHMvZHJvcGRvd24uanMiLCJzcmMvanMvY29udHJvbHMvYnV0dG9uX2dyb3VwLmpzIiwic3JjL2pzL2NvbnRyb2xzL2N1c3RvbS5qcyIsInNyYy9qcy9jb250cm9scy9wYWdlX3NpemUuanMiLCJzcmMvanMvY29udHJvbHMvcGFnZV9qdW1wLmpzIiwic3JjL2pzL2NvbnRyb2xzL3BhZ2VzL2NvbnRyb2wuanMiLCJzcmMvanMvY29udHJvbHMvcGFnZXMuanMiLCJzcmMvanMvY29udHJvbHMvdG90YWwuanMiLCJzcmMvanMvY29udHJvbHMvc2VhcmNoLmpzIiwic3JjL2pzL2NvbnRyb2xzL2NvbHVtbnMuanMiLCJzcmMvanMvY29udHJvbHMvY2FwdGlvbi5qcyIsInNyYy9qcy9jb250cm9scy9maWx0ZXJfY2xlYXIuanMiLCJzcmMvanMvY29udHJvbHMvZGl2aWRlci5qcyIsInNyYy9qcy9hYnN0cmFjdC9GaWx0ZXIuanMiLCJzcmMvanMvZmlsdGVycy90ZXh0LmpzIiwic3JjL2pzL2ZpbHRlcnMvbnVtYmVyLmpzIiwic3JjL2pzL2ZpbHRlcnMvZGF0ZS5qcyIsInNyYy9qcy9maWx0ZXJzL2RhdGV0aW1lLmpzIiwic3JjL2pzL2ZpbHRlcnMvZGF0ZV9tb250aC5qcyIsInNyYy9qcy9maWx0ZXJzL2RhdGVfcmFuZ2UuanMiLCJzcmMvanMvZmlsdGVycy9kYXRldGltZV9yYW5nZS5qcyIsInNyYy9qcy9maWx0ZXJzL2NoZWNrYm94LmpzIiwic3JjL2pzL2ZpbHRlcnMvcmFkaW8uanMiLCJzcmMvanMvZmlsdGVycy9zZWxlY3QuanMiLCJzcmMvanMvZmlsdGVycy9zd2l0Y2guanMiLCJzcmMvanMvYWJzdHJhY3QvU2VhcmNoLmpzIiwic3JjL2pzL3NlYXJjaC90ZXh0LmpzIiwic3JjL2pzL3NlYXJjaC9udW1iZXIuanMiLCJzcmMvanMvc2VhcmNoL2RhdGUuanMiLCJzcmMvanMvc2VhcmNoL2RhdGVfbW9udGguanMiLCJzcmMvanMvc2VhcmNoL2RhdGV0aW1lLmpzIiwic3JjL2pzL3NlYXJjaC9kYXRlX3JhbmdlLmpzIiwic3JjL2pzL3NlYXJjaC9kYXRldGltZV9yYW5nZS5qcyIsInNyYy9qcy9zZWFyY2gvY2hlY2tib3guanMiLCJzcmMvanMvc2VhcmNoL2NoZWNrYm94QnRuLmpzIiwic3JjL2pzL3NlYXJjaC9yYWRpby5qcyIsInNyYy9qcy9zZWFyY2gvcmFkaW9CdG4uanMiLCJzcmMvanMvc2VhcmNoL3NlbGVjdC5qcyIsInNyYy9qcy9zZWFyY2gvc3dpdGNoLmpzIiwic3JjL2pzL2Fic3RyYWN0L0NvbHVtbi5qcyIsInNyYy9qcy9jb2x1bW5zL2RhdGUuanMiLCJzcmMvanMvY29sdW1ucy9kYXRldGltZS5qcyIsIm5vZGVfbW9kdWxlcy9tb21lbnQvbW9tZW50LmpzIiwibm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvcnUuanMiLCJzcmMvanMvY29sdW1ucy9kYXRlX2h1bWFuLmpzIiwic3JjL2pzL2NvbHVtbnMvaHRtbC5qcyIsInNyYy9qcy9jb2x1bW5zL251bWJlci5qcyIsInNyYy9qcy9jb2x1bW5zL21vbmV5LmpzIiwic3JjL2pzL2NvbHVtbnMvbnVtYmVycy5qcyIsInNyYy9qcy9jb2x1bW5zL3NlbGVjdC5qcyIsInNyYy9qcy9jb2x1bW5zL3N3aXRjaC5qcyIsInNyYy9qcy9jb2x1bW5zL3RleHQuanMiLCJzcmMvanMvY29sdW1ucy9idXR0b24uanMiLCJzcmMvanMvY29sdW1ucy9saW5rLmpzIiwic3JjL2pzL2NvbHVtbnMvbWVudS5qcyIsInNyYy9qcy9jb2x1bW5zL2JhZGdlLmpzIiwic3JjL2pzL2NvbHVtbnMvY29tcG9uZW50LmpzIiwic3JjL2pzL2NvbHVtbnMvcHJvZ3Jlc3MuanMiLCJzcmMvanMvY29sdW1ucy9pbWFnZS5qcyIsInNyYy9qcy9tYWluLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImxldCB0cGwgPSBPYmplY3QuY3JlYXRlKG51bGwpXG50cGxbJ2NvbHVtbnMvYmFkZ2UuaHRtbCddID0gJzxzcGFuIGNsYXNzPVwiYmFkZ2UgdGV4dC1iZy08JT0gdHlwZSAlPlwiPjwlPSB0ZXh0ICU+PC9zcGFuPidcbnRwbFsnY29sdW1ucy9idXR0b24uaHRtbCddID0gJzxidXR0b24gdHlwZT1cImJ1dHRvblwiPCUtIGF0dHIgJT4+PCUtIGNvbnRlbnQgJT48L2J1dHRvbj4nXG50cGxbJ2NvbHVtbnMvaW1hZ2UuaHRtbCddID0gJzxpbWcgPCUtIGF0dHIgJT4vPidcbnRwbFsnY29sdW1ucy9saW5rLmh0bWwnXSA9ICc8YSA8JS0gYXR0ciAlPj48JS0gY29udGVudCAlPjwvYT4nXG50cGxbJ2NvbHVtbnMvbWVudS5odG1sJ10gPSAnIDxkaXYgY2xhc3M9XCJidG4tZ3JvdXBcIiByb2xlPVwiZ3JvdXBcIj4gPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgZGF0YS1icy10b2dnbGU9XCJkcm9wZG93blwiPCUtIGF0dHIgJT4+IDwlLSBjb250ZW50ICU+IDwvYnV0dG9uPiA8dWwgY2xhc3M9XCJkcm9wZG93bi1tZW51IGRyb3Bkb3duLW1lbnUtPCU9IHBvc2l0aW9uICU+XCI+IDwlICQuZWFjaChpdGVtcywgZnVuY3Rpb24oa2V5LCBpdGVtKSB7ICU+IDwlIGlmIChpdGVtLnR5cGUgPT09IFxcJ2xpbmtcXCcpIHsgJT4gPGxpPjxhIGhyZWY9XCI8JT0gaXRlbS51cmwgJT5cIjwlLSBpdGVtLmF0dHIgJT4+PCU9IGl0ZW0uY29udGVudCAlPjwvYT48L2xpPiA8JSB9IGVsc2UgaWYgKGl0ZW0udHlwZSA9PT0gXFwnYnV0dG9uXFwnKSB7ICU+IDxsaT4gPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgaWQ9XCJidG4tZHJvcGRvd24tPCU9IGl0ZW0uaWQgJT5cIjwlLSBpdGVtLmF0dHIgJT4+IDwlLSBpdGVtLmNvbnRlbnQgJT4gPC9idXR0b24+IDwvbGk+IDwlIH0gZWxzZSBpZiAoaXRlbS50eXBlID09PSBcXCdkaXZpZGVyXFwnKSB7ICU+IDxsaT48aHIgY2xhc3M9XCJkcm9wZG93bi1kaXZpZGVyXCI+PC9saT4gPCUgfSBlbHNlIGlmIChpdGVtLnR5cGUgPT09IFxcJ2hlYWRlclxcJykgeyAlPiA8bGk+PGg2IGNsYXNzPVwiZHJvcGRvd24taGVhZGVyXCI+PCU9IGl0ZW0uY29udGVudCAlPjwvaDY+PC9saT4gPCUgfSAlPiA8JSB9KSAlPiA8L3VsPiA8L2Rpdj4nXG50cGxbJ2NvbHVtbnMvcHJvZ3Jlc3MuaHRtbCddID0gJzwlIGlmIChkZXNjcmlwdGlvbiAhPT0gbnVsbCkgeyAlPiA8c21hbGwgY2xhc3M9XCJ0ZXh0LWJvZHktc2Vjb25kYXJ5XCI+PCU9IGRlc2NyaXB0aW9uICU+PC9zbWFsbD4gPCUgfSAlPiA8ZGl2IGNsYXNzPVwiZC1pbmxpbmUtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXJcIj4gPGRpdiA8JS0gYXR0ciAlPj4gPGRpdiBjbGFzcz1cInByb2dyZXNzLWJhciBiZy08JT0gY29sb3IgJT5cIiBzdHlsZT1cIndpZHRoOjwlPSBwZXJjZW50ICU+JTtcIj48L2Rpdj4gPC9kaXY+IDxzcGFuPjwlPSBwZXJjZW50VGV4dCAlPjwvc3Bhbj4gPC9kaXY+J1xudHBsWydjb2x1bW5zL3NlbGVjdF9sYWJlbC5odG1sJ10gPSAnPGlucHV0IGNsYXNzPVwiY29yZXVpLXRhYmxlX19zZWxlY3QtYWxsIGZvcm0tY2hlY2staW5wdXRcIiB0eXBlPVwiY2hlY2tib3hcIiB2YWx1ZT1cIlwiPidcbnRwbFsnY29sdW1ucy9zZWxlY3QuaHRtbCddID0gJzxpbnB1dCBjbGFzcz1cImNvcmV1aS10YWJsZV9fc2VsZWN0IGZvcm0tY2hlY2staW5wdXRcIiB0eXBlPVwiY2hlY2tib3hcIiB2YWx1ZT1cIjwlPSBpbmRleCAlPlwiPidcbnRwbFsnY29sdW1ucy9zd2l0Y2guaHRtbCddID0gJzxkaXYgY2xhc3M9XCJmb3JtLXN3aXRjaFwiPiA8aW5wdXQgY2xhc3M9XCJmb3JtLWNoZWNrLWlucHV0IGNvcmV1aS10YWJsZV9fc3dpdGNoXCIgdHlwZT1cImNoZWNrYm94XCIgZGF0YS1maWVsZD1cIjwlPSBmaWVsZCAlPlwiIHZhbHVlPVwiPCU9IGluZGV4ICU+XCI8JSBpZiAoY2hlY2tlZCkgeyAlPiBjaGVja2VkPCUgfSAlPjwlIGlmIChkaXNhYmxlZCkgeyAlPiBkaXNhYmxlZDwlIH0gJT4+IDwvZGl2PidcbnRwbFsnY29udGFpbmVyLmh0bWwnXSA9ICcgPGRpdiBpZD1cImNvcmV1aS10YWJsZS08JT0gaWQgJT5cIiBjbGFzcz1cImNvcmV1aS10YWJsZTwlPSBjbGFzc2VzICU+XCI8JSBpZiAod2lkdGhTaXplcykgeyAlPiBzdHlsZT1cIjwlPSB3aWR0aFNpemVzLmpvaW4oXFwnO1xcJykgJT5cIjwlIH0gJT4+IDxkaXYgY2xhc3M9XCJjb3JldWktdGFibGVfX2NvbnRhaW5lciBwb3NpdGlvbi1yZWxhdGl2ZVwiPiA8ZGl2IGNsYXNzPVwiY29yZXVpLXRhYmxlX193cmFwcGVyPCU9IGNsYXNzZXNXcmFwcGVyICU+XCIgPCUgaWYgKGhlaWdodFNpemVzKSB7ICU+c3R5bGU9XCI8JT0gaGVpZ2h0U2l6ZXMuam9pbihcXCc7XFwnKSAlPlwiPCUgfSAlPj48L2Rpdj4gPC9kaXY+IDwvZGl2PidcbnRwbFsnY29udHJvbHMvYnV0dG9uX2dyb3VwLmh0bWwnXSA9ICc8ZGl2IGNsYXNzPVwiYnRuLWdyb3VwXCIgcm9sZT1cImdyb3VwXCI+PC9kaXY+J1xudHBsWydjb250cm9scy9idXR0b25fZ3JvdXAvYnV0dG9uLmh0bWwnXSA9ICc8YnV0dG9uIHR5cGU9XCJidXR0b25cIiA8JS0gYXR0ciAlPj48JT0gY29udGVudCAlPjwvYnV0dG9uPidcbnRwbFsnY29udHJvbHMvYnV0dG9uX2dyb3VwL2Ryb3Bkb3duLmh0bWwnXSA9ICc8ZGl2IGNsYXNzPVwiYnRuLWdyb3VwXCIgcm9sZT1cImdyb3VwXCI+IDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGRhdGEtYnMtdG9nZ2xlPVwiZHJvcGRvd25cIjwlLSBhdHRyICU+PjwlLSBjb250ZW50ICU+PC9idXR0b24+IDx1bCBjbGFzcz1cImRyb3Bkb3duLW1lbnUgZHJvcGRvd24tbWVudS08JT0gcG9zaXRpb24gJT5cIj48L3VsPiA8L2Rpdj4nXG50cGxbJ2NvbnRyb2xzL2J1dHRvbl9ncm91cC9kcm9wZG93bi9idXR0b24uaHRtbCddID0gJzxsaT4gPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJkcm9wZG93bi1pdGVtXCI+PCU9IGNvbnRlbnQgJT48L2J1dHRvbj4gPC9saT4nXG50cGxbJ2NvbnRyb2xzL2J1dHRvbl9ncm91cC9kcm9wZG93bi9kaXZpZGVyLmh0bWwnXSA9ICc8bGk+PGhyIGNsYXNzPVwiZHJvcGRvd24tZGl2aWRlclwiPjwvbGk+J1xudHBsWydjb250cm9scy9idXR0b25fZ3JvdXAvZHJvcGRvd24vbGluay5odG1sJ10gPSAnPGxpPjxhIGNsYXNzPVwiZHJvcGRvd24taXRlbVwiIGhyZWY9XCI8JT0gdXJsICU+XCI+PCU9IGNvbnRlbnQgJT48L2E+PC9saT4nXG50cGxbJ2NvbnRyb2xzL2J1dHRvbl9ncm91cC9saW5rLmh0bWwnXSA9ICc8YSBocmVmPVwiPCU9IHVybCAlPlwiPCUtIGF0dHIgJT4+PCU9IGNvbnRlbnQgJT48L2E+J1xudHBsWydjb250cm9scy9idXR0b24uaHRtbCddID0gJzxidXR0b24gdHlwZT1cImJ1dHRvblwiPCUtIGF0dHIgJT4+PCUtIGNvbnRlbnQgJT48L2J1dHRvbj4nXG50cGxbJ2NvbnRyb2xzL2NhcHRpb24uaHRtbCddID0gJzxkaXYgY2xhc3M9XCJkLWZsZXggZmxleC1jb2x1bW4gbWUtM1wiPiA8c21hbGwgY2xhc3M9XCJ0ZXh0LWJvZHktc2Vjb25kYXJ5IGZ3LW1lZGl1bVwiPiA8JT0gdGl0bGUgJT4gPCUgaWYgKGRlc2NyaXB0aW9uKSB7ICU+IDxpIGNsYXNzPVwiYmkgYmktcXVlc3Rpb24tY2lyY2xlIGNvcmV1aS10YWJsZV9fY3Vyc29yX2hlbHBcIiB0aXRsZT1cIjwlPSBkZXNjcmlwdGlvbiAlPlwiPjwvaT4gPCUgfSAlPiA8L3NtYWxsPiA8YiBjbGFzcz1cInRleHQtbm93cmFwXCI+PCU9IHZhbHVlICU+PC9iPiA8L2Rpdj4nXG50cGxbJ2NvbnRyb2xzL2NvbHVtbnMuaHRtbCddID0gJzxidXR0b24gdHlwZT1cImJ1dHRvblwiPCUtIGJ0bkF0dHIgJT4+PCUtYnRuQ29udGVudCU+PC9idXR0b24+J1xudHBsWydjb250cm9scy9jb2x1bW5zL2xpc3QuaHRtbCddID0gJyA8ZGl2IGNsYXNzPVwiY29yZXVpLXRhYmxlX19jb2x1bW5zIHB4LTMgcHQtMyBwYi00XCI+IDxkaXYgY2xhc3M9XCJtYi0zXCI+IDxkaXYgY2xhc3M9XCJmb3JtLWNoZWNrIGNvcmV1aS10YWJsZV9fY2hlY2tfYWxsXCI+IDxsYWJlbCBjbGFzcz1cImZvcm0tY2hlY2stbGFiZWxcIj4gPGlucHV0IGNsYXNzPVwiZm9ybS1jaGVjay1pbnB1dFwiIHR5cGU9XCJjaGVja2JveFwiIDwlIGlmIChzaG93QWxsID09PSB0cnVlKSB7ICU+Y2hlY2tlZDwlIH0gJT4+IDwlPSBsYW5nLmFsbCAlPiA8L2xhYmVsPiA8L2Rpdj4gPCUgY29sdW1ucy5tYXAoZnVuY3Rpb24oY29sdW1uKSB7ICU+IDxkaXYgY2xhc3M9XCJmb3JtLWNoZWNrIGNvcmV1aS10YWJsZV9jaGVjay1jb2x1bW5cIj4gPGxhYmVsIGNsYXNzPVwiZm9ybS1jaGVjay1sYWJlbFwiPiA8aW5wdXQgY2xhc3M9XCJmb3JtLWNoZWNrLWlucHV0XCIgdHlwZT1cImNoZWNrYm94XCIgdmFsdWU9XCI8JT0gY29sdW1uLmZpZWxkICU+XCIgPCUgaWYgKGNvbHVtbi5zaG93ID09PSB0cnVlKSB7ICU+Y2hlY2tlZDwlIH0gJT4+IDwlPSBjb2x1bW4ubGFiZWwgJT4gPC9sYWJlbD4gPC9kaXY+IDwlIH0pOyAlPiA8L2Rpdj4gPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgPCUtIGJ0bkNvbXBsZXRlQXR0ciAlPj4gPCUtIGJ0bkNvbXBsZXRlQ29udGVudCAlPiA8L2J1dHRvbj4gPC9kaXY+J1xudHBsWydjb250cm9scy9kaXZpZGVyLmh0bWwnXSA9ICc8ZGl2IDwlLSBhdHRyICU+PjwlPSB0ZXh0ICU+PC9kaXY+J1xudHBsWydjb250cm9scy9kcm9wZG93bi5odG1sJ10gPSAnIDxkaXYgY2xhc3M9XCJidG4tZ3JvdXBcIiByb2xlPVwiZ3JvdXBcIj4gPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgZGF0YS1icy10b2dnbGU9XCJkcm9wZG93blwiPCUtIGF0dHIgJT4+PCUtIGNvbnRlbnQgJT48L2J1dHRvbj4gPHVsIGNsYXNzPVwiZHJvcGRvd24tbWVudSBkcm9wZG93bi1tZW51LTwlPSBwb3NpdGlvbiAlPlwiPjwvdWw+IDwvZGl2PidcbnRwbFsnY29udHJvbHMvZHJvcGRvd24vYnV0dG9uLmh0bWwnXSA9ICc8bGk+IDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiZHJvcGRvd24taXRlbVwiPjwlPSBjb250ZW50ICU+PC9idXR0b24+IDwvbGk+J1xudHBsWydjb250cm9scy9kcm9wZG93bi9kaXZpZGVyLmh0bWwnXSA9ICc8bGk+PGhyIGNsYXNzPVwiZHJvcGRvd24tZGl2aWRlclwiPjwvbGk+J1xudHBsWydjb250cm9scy9kcm9wZG93bi9saW5rLmh0bWwnXSA9ICc8bGk+PGEgY2xhc3M9XCJkcm9wZG93bi1pdGVtXCIgaHJlZj1cIjwlPSB1cmwgJT5cIj48JT0gY29udGVudCAlPjwvYT48L2xpPidcbnRwbFsnY29udHJvbHMvZmlsdGVyX2NsZWFyLmh0bWwnXSA9ICc8YnV0dG9uIHR5cGU9XCJidXR0b25cIiA8JS0gYXR0ciAlPj48JS0gY29udGVudCAlPjwvYnV0dG9uPidcbnRwbFsnY29udHJvbHMvbGluay5odG1sJ10gPSAnPGEgaHJlZj1cIjwlLSB1cmwgJT5cIjwlLSBhdHRyICU+PjwlLSBjb250ZW50ICU+PC9hPidcbnRwbFsnY29udHJvbHMvcGFnZS1qdW1wLmh0bWwnXSA9ICcgPGRpdiBjbGFzcz1cImNvcmV1aS10YWJsZV9fcGFnZV9qdW1wX2NvbnRhaW5lclwiPiA8ZGl2IDwlLSBhdHRyICU+PiA8aW5wdXQgdHlwZT1cIm51bWJlclwiIGNsYXNzPVwiZm9ybS1jb250cm9sIGJvcmRlci1zZWNvbmRhcnktc3VidGxlXCIgbWluPVwiMVwiPiA8YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1vdXRsaW5lLXNlY29uZGFyeSBib3JkZXItc2Vjb25kYXJ5LXN1YnRsZVwiIHR5cGU9XCJidXR0b25cIj4gPGkgY2xhc3M9XCJiaSBiaS1jaGV2cm9uLWNvbXBhY3QtcmlnaHRcIj48L2k+IDwvYnV0dG9uPiA8L2Rpdj4gPC9kaXY+J1xudHBsWydjb250cm9scy9wYWdlLXNpemUuaHRtbCddID0gJyA8c2VsZWN0IDwlLSBhdHRyICU+PiA8JSAkLmVhY2gocmVjb3Jkc1BlclBhZ2VMaXN0LCBmdW5jdGlvbihrZXksIGNvdW50KSB7ICU+IDxvcHRpb24gdmFsdWU9XCI8JT0gY291bnQgJT5cIjwlIGlmIChyZWNvcmRzUGVyUGFnZSA9PSBjb3VudCkgeyAlPnNlbGVjdGVkPCUgfSAlPj4gPCUgaWYgKGNvdW50ID09IFxcJzBcXCcpIHsgJT48JT0gbGFuZy5hbGwgJT48JSB9IGVsc2UgeyAlPjwlPSBjb3VudCAlPjwlIH0gJT4gPC9vcHRpb24+IDwlIH0pOyAlPiA8L3NlbGVjdD4nXG50cGxbJ2NvbnRyb2xzL3BhZ2VzLmh0bWwnXSA9ICcgPG5hdj4gPHVsIDwlLSBhdHRyICU+PiA8JSBpZiAoc2hvd1ByZXYpIHsgJT4gPGxpIGNsYXNzPVwicGFnZS1pdGVtIGNvcmV1aS10YWJsZV9fcGFnZV9wcmV2IDwlIGlmICggISBpc0FjdGl2ZVByZXYpIHsgJT4gZGlzYWJsZWQ8JSB9ICU+XCI+IDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwicGFnZS1saW5rXCI+IDxpIGNsYXNzPVwiYmkgYmktY2hldnJvbi1sZWZ0XCI+PC9pPiA8L2J1dHRvbj4gPC9saT4gPCUgfSAlPiA8JSBpZiAoc2hvd1BhZ2VGaXJzdCkgeyAlPiA8bGkgY2xhc3M9XCJwYWdlLWl0ZW1cIj4gPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJwYWdlLWxpbmsgY29yZXVpLXRhYmxlX19wYWdlXCI+IDEgPC9idXR0b24+IDwvbGk+IDwlIH0gJT4gPCUgaWYgKHNob3dEaXZpZGVyU3RhcnQpIHsgJT4gPGxpIGNsYXNzPVwicGFnZS1pdGVtIGRpc2FibGVkXCI+IDxzcGFuIGNsYXNzPVwicGFnZS1saW5rIHB4LTFcIj4uLi48L3NwYW4+IDwvbGk+IDwlIH0gJT4gPCUgcGFnZXMubWFwKGZ1bmN0aW9uKHBhZ2UpIHsgJT4gPCUgaWYgKHBhZ2UgPT0gY3VycmVudFBhZ2UpIHsgJT4gPGxpIGNsYXNzPVwicGFnZS1pdGVtIGFjdGl2ZVwiPiA8c3BhbiBjbGFzcz1cInBhZ2UtbGlua1wiPjwlPSBwYWdlICU+PC9zcGFuPiA8L2xpPiA8JSB9IGVsc2UgeyAlPiA8bGkgY2xhc3M9XCJwYWdlLWl0ZW1cIj4gPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJwYWdlLWxpbmsgY29yZXVpLXRhYmxlX19wYWdlXCI+IDwlPSBwYWdlICU+IDwvYnV0dG9uPiA8L2xpPiA8JSB9ICU+IDwlIH0pOyAlPiA8JSBpZiAoc2hvd0RpdmlkZXJFbmQpIHsgJT4gPGxpIGNsYXNzPVwicGFnZS1pdGVtIGRpc2FibGVkXCI+IDxzcGFuIGNsYXNzPVwicGFnZS1saW5rIHB4LTFcIj4uLi48L3NwYW4+IDwvbGk+IDwlIH0gJT4gPCUgaWYgKHNob3dQYWdlTGFzdCkgeyAlPiA8bGkgY2xhc3M9XCJwYWdlLWl0ZW1cIj4gPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJwYWdlLWxpbmsgY29yZXVpLXRhYmxlX19wYWdlXCI+IDwlPSBwYWdlc1RvdGFsICU+IDwvYnV0dG9uPiA8L2xpPiA8JSB9ICU+IDwlIGlmIChzaG93TmV4dCkgeyAlPiA8bGkgY2xhc3M9XCJwYWdlLWl0ZW0gY29yZXVpLXRhYmxlX19wYWdlX25leHQ8JSBpZiAoICEgaXNBY3RpdmVOZXh0KSB7ICU+IGRpc2FibGVkPCUgfSAlPlwiPiA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cInBhZ2UtbGlua1wiPiA8aSBjbGFzcz1cImJpIGJpLWNoZXZyb24tcmlnaHRcIj48L2k+IDwvYnV0dG9uPiA8L2xpPiA8JSB9ICU+IDwvdWw+IDwvbmF2PidcbnRwbFsnY29udHJvbHMvc2VhcmNoLmh0bWwnXSA9ICc8ZGl2IGNsYXNzPVwiYnRuLWdyb3VwXCI+IDxidXR0b24gdHlwZT1cImJ1dHRvblwiPCUtIGJ0bkF0dHIgJT4+PCUtIGJ0bkNvbnRlbnQgJT48L2J1dHRvbj4gPCUtIGJ0bkNsZWFyICU+IDwvZGl2PiAnXG50cGxbJ2NvbnRyb2xzL3NlYXJjaC9jbGVhci5odG1sJ10gPSAnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgPCUtIGF0dHIgJT4+PCUtIGNvbnRlbnQgJT48L2J1dHRvbj4gJ1xudHBsWydjb250cm9scy9zZWFyY2gvY29udGFpbmVyLmh0bWwnXSA9ICcgPGRpdiBjbGFzcz1cImNvcmV1aS10YWJsZV9fc2VhcmNoIHB4LTMgcHQtMyBwYi00XCI+IDxkaXYgY2xhc3M9XCJtYi0zIGNvcmV1aS10YWJsZV9fc2VhcmNoX2NvbnRyb2xzXCI+PC9kaXY+IDxkaXYgY2xhc3M9XCJkLWZsZXggZmxleC1zbS13cmFwIGZsZXgtbWQtbm93cmFwXCI+IDxkaXYgY2xhc3M9XCJkLW5vbmUgZC1tZC1ibG9ja1wiIHN0eWxlPVwid2lkdGg6PCU9IGxhYmVsV2lkdGggJT47bWluLXdpZHRoOjwlPSBsYWJlbFdpZHRoICU+XCI+PC9kaXY+IDxkaXYgY2xhc3M9XCJkLWZsZXgganVzdGlmeS1jb250ZW50LXN0YXJ0IGZsZXgtd3JhcCBnYXAtMlwiPiA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiA8JS0gYnRuQ29tcGxldGVBdHRyICU+PiA8JS0gYnRuQ29tcGxldGVDb250ZW50ICU+IDwvYnV0dG9uPiA8L2Rpdj4gPC9kaXY+IDwvZGl2PidcbnRwbFsnY29udHJvbHMvc2VhcmNoL2NvbnRyb2wuaHRtbCddID0gJzxkaXYgY2xhc3M9XCJtYi0yIGQtZmxleCBmbGV4LWNvbHVtbiBmbGV4LW1kLXJvdyBcIj4gPGxhYmVsIGNsYXNzPVwiY29sLWZvcm0tbGFiZWwgZnctbWVkaXVtIHRleHQtc3RhcnQgdGV4dC1tZC1lbmQgcGUtMlwiIHN0eWxlPVwibWluLXdpZHRoOjwlPSBsYWJlbFdpZHRoICU+O3dpZHRoOjwlPSBsYWJlbFdpZHRoICU+XCI+IDwlPSBsYWJlbCAlPiA8JSBpZiAoZGVzY3JpcHRpb25MYWJlbCkgeyAlPiA8ZGl2IGNsYXNzPVwidGV4dC1tdXRlZCBmdy1ub3JtYWxcIj4gPHNtYWxsPjwlPSBkZXNjcmlwdGlvbkxhYmVsICU+PC9zbWFsbD4gPC9kaXY+IDwlIH0gJT4gPC9sYWJlbD4gPGRpdiBjbGFzcz1cImZsZXgtZmlsbCBjb3JldWktdGFibGVfX3NlYXJjaC1jb250cm9sX2NvbnRlbnRcIj4gPCUgaWYgKHN1ZmZpeCkgeyAlPjwlLSBzdWZmaXggJT48JSB9ICU+IDwlIGlmIChkZXNjcmlwdGlvbikgeyAlPiA8ZGl2IGNsYXNzPVwidGV4dC1tdXRlZCBmdy1ub3JtYWxcIj4gPHNtYWxsPjwlPSBkZXNjcmlwdGlvbiAlPjwvc21hbGw+IDwvZGl2PiA8JSB9ICU+IDwvZGl2PiA8L2Rpdj4nXG50cGxbJ2NvbnRyb2xzL3RvdGFsLmh0bWwnXSA9ICc8ZGl2IDwlLSBhdHRyICU+PiA8c21hbGw+PCU9IGxhbmcudG90YWwgJT46IDxzcGFuIGNsYXNzPVwiY29yZXVpLXRhYmxlX19jb3VudC10b3RhbFwiPjwlPSByZWNvcmRzVG90YWwgJT48L3NwYW4+PC9zbWFsbD4gPC9kaXY+J1xudHBsWydmaWx0ZXJzL2NoZWNrYm94Lmh0bWwnXSA9ICcgPGRpdiBjbGFzcz1cImJ0bi1ncm91cFwiPiA8JSBpZiAobGFiZWwpIHsgJT4gPHNwYW4gY2xhc3M9XCJpbnB1dC1ncm91cC10ZXh0XCI+PCU9IGxhYmVsICU+PC9zcGFuPiA8JSB9ICU+IDwlICQuZWFjaChpdGVtcywgZnVuY3Rpb24oa2V5LCBpdGVtKSB7ICU+IDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBjbGFzcz1cImJ0bi1jaGVja1wiIGF1dG9jb21wbGV0ZT1cIm9mZlwiIGlkPVwiPCU9IChmaWVsZCArIGtleSkgJT5cIiBuYW1lPVwiPCU9IGZpZWxkICU+XCIgdmFsdWU9XCI8JT0gaXRlbS52YWx1ZSAlPlwiIDwlPSBpdGVtLmNoZWNrZWQgPyBcXCcgY2hlY2tlZFxcJyA6IFxcJ1xcJyAlPj4gPGxhYmVsIGNsYXNzPVwiPCU9IGl0ZW0uY2xhc3MgJT5cIiBmb3I9XCI8JT0gKGZpZWxkICsga2V5KSAlPlwiPjwlPSBpdGVtLnRleHQgJT48L2xhYmVsPiA8JSB9KTsgJT4gPC9kaXY+J1xudHBsWydmaWx0ZXJzL2RhdGVfbW9udGguaHRtbCddID0gJyA8ZGl2IGNsYXNzPVwiaW5wdXQtZ3JvdXBcIj4gPCUgaWYgKGxhYmVsKSB7ICU+IDxzcGFuIGNsYXNzPVwiaW5wdXQtZ3JvdXAtdGV4dFwiPjwlPSBsYWJlbCAlPjwvc3Bhbj4gPCUgfSAlPiA8aW5wdXQgdHlwZT1cIm1vbnRoXCIgPCUtIGF0dHIgJT4+IDwvZGl2PidcbnRwbFsnZmlsdGVycy9kYXRlX3JhbmdlLmh0bWwnXSA9ICcgPGRpdiBjbGFzcz1cImlucHV0LWdyb3VwXCI+IDwlIGlmIChsYWJlbCkgeyAlPiA8c3BhbiBjbGFzcz1cImlucHV0LWdyb3VwLXRleHRcIj48JT0gbGFiZWwgJT48L3NwYW4+IDwlIH0gJT4gPGlucHV0IHR5cGU9XCJkYXRlXCIgPCUtIHN0YXJ0QXR0ciAlPj4gPGlucHV0IHR5cGU9XCJkYXRlXCIgPCUtIGVuZEF0dHIgJT4+IDwvZGl2PidcbnRwbFsnZmlsdGVycy9kYXRlLmh0bWwnXSA9ICcgPGRpdiBjbGFzcz1cImlucHV0LWdyb3VwXCI+IDwlIGlmIChsYWJlbCkgeyAlPiA8c3BhbiBjbGFzcz1cImlucHV0LWdyb3VwLXRleHRcIj48JT0gbGFiZWwgJT48L3NwYW4+IDwlIH0gJT4gPGlucHV0IHR5cGU9XCJkYXRlXCIgPCUtIGF0dHIgJT4+IDwvZGl2PidcbnRwbFsnZmlsdGVycy9kYXRldGltZV9yYW5nZS5odG1sJ10gPSAnIDxkaXYgY2xhc3M9XCJpbnB1dC1ncm91cFwiPiA8JSBpZiAobGFiZWwpIHsgJT4gPHNwYW4gY2xhc3M9XCJpbnB1dC1ncm91cC10ZXh0XCI+PCU9IGxhYmVsICU+PC9zcGFuPiA8JSB9ICU+IDxpbnB1dCB0eXBlPVwiZGF0ZXRpbWUtbG9jYWxcIiA8JS0gc3RhcnRBdHRyICU+PiA8aW5wdXQgdHlwZT1cImRhdGV0aW1lLWxvY2FsXCIgPCUtIGVuZEF0dHIgJT4+IDwvZGl2PidcbnRwbFsnZmlsdGVycy9kYXRldGltZS5odG1sJ10gPSAnIDxkaXYgY2xhc3M9XCJpbnB1dC1ncm91cFwiPiA8JSBpZiAobGFiZWwpIHsgJT4gPHNwYW4gY2xhc3M9XCJpbnB1dC1ncm91cC10ZXh0XCI+PCU9IGxhYmVsICU+PC9zcGFuPiA8JSB9ICU+IDxpbnB1dCB0eXBlPVwiZGF0ZXRpbWUtbG9jYWxcIiA8JS0gYXR0ciAlPj4gPC9kaXY+J1xudHBsWydmaWx0ZXJzL251bWJlci5odG1sJ10gPSAnIDxkaXYgY2xhc3M9XCJpbnB1dC1ncm91cFwiPiA8JSBpZiAobGFiZWwpIHsgJT4gPHNwYW4gY2xhc3M9XCJpbnB1dC1ncm91cC10ZXh0XCI+PCU9IGxhYmVsICU+PC9zcGFuPiA8JSB9ICU+IDxpbnB1dCB0eXBlPVwibnVtYmVyXCIgPCUtIGF0dHJTdGFydCAlPj4gPGlucHV0IHR5cGU9XCJudW1iZXJcIiA8JS0gYXR0ckVuZCAlPj4gPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgPCUtIGJ0bkF0dHIgJT4+IDwlLSBidG5Db250ZW50ICU+IDwvYnV0dG9uPiA8L2Rpdj4nXG50cGxbJ2ZpbHRlcnMvcmFkaW8uaHRtbCddID0gJyA8ZGl2IGNsYXNzPVwiYnRuLWdyb3VwXCI+IDwlIGlmIChsYWJlbCkgeyAlPiA8c3BhbiBjbGFzcz1cImlucHV0LWdyb3VwLXRleHRcIj48JT0gbGFiZWwgJT48L3NwYW4+IDwlIH0gJT4gPCUgJC5lYWNoKGl0ZW1zLCBmdW5jdGlvbihrZXksIGl0ZW0pIHsgJT4gPGlucHV0IHR5cGU9XCJyYWRpb1wiIGNsYXNzPVwiYnRuLWNoZWNrXCIgYXV0b2NvbXBsZXRlPVwib2ZmXCIgaWQ9XCI8JT0gKGZpZWxkICsga2V5KSAlPlwiIG5hbWU9XCI8JT0gZmllbGQgJT5cIiB2YWx1ZT1cIjwlPSBpdGVtLnZhbHVlICU+XCIgPCU9IGl0ZW0uY2hlY2tlZCA/IFxcJyBjaGVja2VkXFwnIDogXFwnXFwnICU+PiA8bGFiZWwgY2xhc3M9XCI8JT0gaXRlbS5jbGFzcyAlPlwiIGZvcj1cIjwlPSAoZmllbGQgKyBrZXkpICU+XCI+PCU9IGl0ZW0udGV4dCAlPjwvbGFiZWw+IDwlIH0pOyAlPiA8L2Rpdj4nXG50cGxbJ2ZpbHRlcnMvc2VsZWN0Lmh0bWwnXSA9ICc8ZGl2IGNsYXNzPVwiaW5wdXQtZ3JvdXAgZmxleC1ub3dyYXBcIj4gPCUgaWYgKGxhYmVsKSB7ICU+IDxzcGFuIGNsYXNzPVwiaW5wdXQtZ3JvdXAtdGV4dFwiPjwlPSBsYWJlbCAlPjwvc3Bhbj4gPCUgfSAlPiA8c2VsZWN0IDwlLSBhdHRyICU+PiA8b3B0aW9uPi0tPC9vcHRpb24+IDwlICQuZWFjaChvcHRpb25zLCBmdW5jdGlvbihrZXksIG9wdGlvbikgeyAlPiA8JSBpZiAob3B0aW9uLnR5cGUgPT09IFxcJ2dyb3VwXFwnKSB7ICU+IDxvcHRncm91cDwlLSBvcHRpb24uYXR0ciAlPj4gPCUgJC5lYWNoKG9wdGlvbi5vcHRpb25zLCBmdW5jdGlvbihrZXksIGdyb3VwT3B0aW9uKSB7ICU+IDxvcHRpb24gPCUtIGdyb3VwT3B0aW9uLmF0dHIgJT4+PCU9IGdyb3VwT3B0aW9uLnRleHQgJT48L29wdGlvbj4gPCUgfSk7ICU+IDwvb3B0Z3JvdXA+IDwlIH0gZWxzZSB7ICU+IDxvcHRpb24gPCUtIG9wdGlvbi5hdHRyICU+PjwlPSBvcHRpb24udGV4dCAlPjwvb3B0aW9uPiA8JSB9ICU+IDwlIH0pOyAlPiA8L3NlbGVjdD4gPC9kaXY+J1xudHBsWydmaWx0ZXJzL3N3aXRjaC5odG1sJ10gPSAnPGRpdiBjbGFzcz1cImZvcm0tY2hlY2sgZm9ybS1zd2l0Y2hcIj4gPGlucHV0IGNsYXNzPVwiZm9ybS1jaGVjay1pbnB1dFwiIHR5cGU9XCJjaGVja2JveFwiIGlkPVwiPCU9IChmaWVsZCArIGlkKSAlPlwiIG5hbWU9XCI8JT0gZmllbGQgJT5cIiB2YWx1ZT1cIjwlPSB2YWx1ZVkgJT5cIiA8JT0gY2hlY2tlZCA/IFxcJyBjaGVja2VkXFwnIDogXFwnXFwnICU+PiA8JSBpZiAobGFiZWwgIT0gXFwnXFwnKSB7ICU+IDxsYWJlbCBjbGFzcz1cImZvcm0tY2hlY2stbGFiZWxcIiBmb3I9XCI8JT0gKGZpZWxkICsgaWQpICU+XCI+PCU9IGxhYmVsICU+PC9sYWJlbD4gPCUgfSAlPiA8L2Rpdj4nXG50cGxbJ2ZpbHRlcnMvdGV4dC5odG1sJ10gPSAnIDxkaXYgY2xhc3M9XCJpbnB1dC1ncm91cFwiPiA8JSBpZiAobGFiZWwpIHsgJT4gPHNwYW4gY2xhc3M9XCJpbnB1dC1ncm91cC10ZXh0XCI+PCU9IGxhYmVsICU+PC9zcGFuPiA8JSB9ICU+IDxpbnB1dCB0eXBlPVwidGV4dFwiIDwlLSBhdHRyICU+PiA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiA8JS0gYnRuQXR0ciAlPj4gPCUtIGJ0bkNvbnRlbnQgJT4gPC9idXR0b24+IDwvZGl2PidcbnRwbFsnc2VhcmNoL2NoZWNrYm94LWJ0bi5odG1sJ10gPSAnIDxkaXYgY2xhc3M9XCJwdC0yXCI+IDxkaXYgY2xhc3M9XCJidG4tZ3JvdXBcIj4gPCUgb3B0aW9ucy5tYXAoZnVuY3Rpb24ob3B0aW9uKSB7ICU+IDxpbnB1dCBjbGFzcz1cImJ0bi1jaGVja1wiIHR5cGU9XCJjaGVja2JveFwiIHZhbHVlPVwiPCUtIG9wdGlvbi52YWx1ZSAlPlwiIGlkPVwiPCU9IG9wdGlvbi5oYXNoICU+XCIgYXV0b2NvbXBsZXRlPVwib2ZmXCIgPCU9IG9wdGlvbi5jaGVja2VkID8gXFwnIGNoZWNrZWRcXCcgOiBcXCdcXCcgJT4+IDxsYWJlbCBjbGFzcz1cIjwlPSBvcHRpb24ub3B0aW9uc0NsYXNzICU+XCIgZm9yPVwiPCU9IG9wdGlvbi5oYXNoICU+XCI+PCU9IG9wdGlvbi50ZXh0ICU+PC9sYWJlbD4gPCUgfSk7ICU+IDwvZGl2PiA8L2Rpdj4nXG50cGxbJ3NlYXJjaC9jaGVja2JveC5odG1sJ10gPSAnIDxkaXYgY2xhc3M9XCJwdC0yXCI+IDwlIG9wdGlvbnMubWFwKGZ1bmN0aW9uKG9wdGlvbikgeyAlPiA8ZGl2IGNsYXNzPVwiZm9ybS1jaGVja1wiPiA8bGFiZWwgY2xhc3M9XCJmb3JtLWNoZWNrLWxhYmVsIGNvcmV1aS10YWJsZV9wb2ludGVyXCI+IDxpbnB1dCBjbGFzcz1cImZvcm0tY2hlY2staW5wdXRcIiB0eXBlPVwiY2hlY2tib3hcIiB2YWx1ZT1cIjwlLSBvcHRpb24udmFsdWUgJT5cIiA8JT0gb3B0aW9uLmNoZWNrZWQgPyBcXCcgY2hlY2tlZFxcJyA6IFxcJ1xcJyAlPj4gPCU9IG9wdGlvbi50ZXh0ICU+IDwvbGFiZWw+IDwvZGl2PiA8JSB9KTsgJT4gPC9kaXY+J1xudHBsWydzZWFyY2gvZGF0ZV9tb250aC5odG1sJ10gPSAnIDxpbnB1dCB0eXBlPVwibW9udGhcIiA8JS0gYXR0ciAlPj4nXG50cGxbJ3NlYXJjaC9kYXRlX3JhbmdlLmh0bWwnXSA9ICc8ZGl2PiA8aW5wdXQgdHlwZT1cImRhdGVcIiA8JS0gc3RhcnRBdHRyICU+PiA8aW5wdXQgdHlwZT1cImRhdGVcIiA8JS0gZW5kQXR0ciAlPj4gPC9kaXY+J1xudHBsWydzZWFyY2gvZGF0ZS5odG1sJ10gPSAnIDxpbnB1dCB0eXBlPVwiZGF0ZVwiIDwlLSBhdHRyICU+PidcbnRwbFsnc2VhcmNoL2RhdGV0aW1lX3JhbmdlLmh0bWwnXSA9ICc8ZGl2PiA8aW5wdXQgdHlwZT1cImRhdGV0aW1lLWxvY2FsXCIgPCUtIHN0YXJ0QXR0ciAlPj4gPGlucHV0IHR5cGU9XCJkYXRldGltZS1sb2NhbFwiIDwlLSBlbmRBdHRyICU+PiA8L2Rpdj4nXG50cGxbJ3NlYXJjaC9kYXRldGltZS5odG1sJ10gPSAnIDxpbnB1dCB0eXBlPVwiZGF0ZXRpbWUtbG9jYWxcIiA8JS0gYXR0ciAlPj4nXG50cGxbJ3NlYXJjaC9udW1iZXIuaHRtbCddID0gJyA8aW5wdXQgdHlwZT1cIm51bWJlclwiIDwlLSBzdGFydEF0dHIgJT4+IDxpbnB1dCB0eXBlPVwibnVtYmVyXCIgPCUtIGVuZEF0dHIgJT4+J1xudHBsWydzZWFyY2gvcmFkaW8tYnRuLmh0bWwnXSA9ICc8ZGl2IGNsYXNzPVwicHQtMlwiPiA8ZGl2IGNsYXNzPVwiYnRuLWdyb3VwXCI+IDxpbnB1dCBjbGFzcz1cImJ0bi1jaGVjayBjb3JldWktdGFibGVfX2FsbFwiIHR5cGU9XCJyYWRpb1wiIG5hbWU9XCI8JT0gZmllbGQgJT5cIiB2YWx1ZT1cIlwiIGlkPVwiPCU9IG9wdGlvbkFsbEhhc2ggJT5cIiBhdXRvY29tcGxldGU9XCJvZmZcIiA8JT0gY2hlY2tlZEFsbCA/IFxcJyBjaGVja2VkXFwnIDogXFwnXFwnICU+PiA8bGFiZWwgY2xhc3M9XCI8JT0gb3B0aW9uT3B0aW9uc0NsYXNzICU+XCIgZm9yPVwiPCU9IG9wdGlvbkFsbEhhc2ggJT5cIj48JT0gbGFuZy5hbGwgJT48L2xhYmVsPiA8JSBvcHRpb25zLm1hcChmdW5jdGlvbihvcHRpb24pIHsgJT4gPGlucHV0IGNsYXNzPVwiYnRuLWNoZWNrXCIgdHlwZT1cInJhZGlvXCIgbmFtZT1cIjwlPSBmaWVsZCAlPlwiIHZhbHVlPVwiPCUtIG9wdGlvbi52YWx1ZSAlPlwiIGlkPVwiPCU9IG9wdGlvbi5oYXNoICU+XCIgYXV0b2NvbXBsZXRlPVwib2ZmXCIgPCU9IG9wdGlvbi5jaGVja2VkID8gXFwnIGNoZWNrZWQ9XCJjaGVja2VkXCJcXCcgOiBcXCdcXCcgJT5cIj4gPGxhYmVsIGNsYXNzPVwiPCU9IG9wdGlvbi5vcHRpb25zQ2xhc3MgJT5cIiBmb3I9XCI8JT0gb3B0aW9uLmhhc2ggJT5cIj48JT0gb3B0aW9uLnRleHQgJT48L2xhYmVsPiA8JSB9KTsgJT4gPC9kaXY+IDwvZGl2PidcbnRwbFsnc2VhcmNoL3JhZGlvLmh0bWwnXSA9ICc8ZGl2IGNsYXNzPVwicHQtMlwiPiA8ZGl2IGNsYXNzPVwiZm9ybS1jaGVja1wiPiA8bGFiZWwgY2xhc3M9XCJmb3JtLWNoZWNrLWxhYmVsIGNvcmV1aS10YWJsZV9wb2ludGVyXCI+IDxpbnB1dCBjbGFzcz1cImZvcm0tY2hlY2staW5wdXQgY29yZXVpLXRhYmxlX19hbGxcIiB0eXBlPVwicmFkaW9cIiBuYW1lPVwiPCU9IGZpZWxkICU+XCIgdmFsdWU9XCJcIjwlPSBjaGVja2VkQWxsID8gXFwnIGNoZWNrZWRcXCcgOiBcXCdcXCcgJT4+IDwlPSBsYW5nLmFsbCAlPiA8L2xhYmVsPiA8L2Rpdj4gPCUgb3B0aW9ucy5tYXAoZnVuY3Rpb24ob3B0aW9uKSB7ICU+IDxkaXYgY2xhc3M9XCJmb3JtLWNoZWNrXCI+IDxsYWJlbCBjbGFzcz1cImZvcm0tY2hlY2stbGFiZWwgY29yZXVpLXRhYmxlX3BvaW50ZXJcIj4gPGlucHV0IGNsYXNzPVwiZm9ybS1jaGVjay1pbnB1dFwiIHR5cGU9XCJyYWRpb1wiIG5hbWU9XCI8JT0gZmllbGQgJT5cIiB2YWx1ZT1cIjwlLSBvcHRpb24udmFsdWUgJT5cIiA8JT0gb3B0aW9uLmNoZWNrZWQgPyBcXCcgY2hlY2tlZD1cImNoZWNrZWRcIlxcJyA6IFxcJ1xcJyAlPj4gPCU9IG9wdGlvbi50ZXh0ICU+IDwvbGFiZWw+IDwvZGl2PiA8JSB9KTsgJT4gPC9kaXY+J1xudHBsWydzZWFyY2gvc2VsZWN0Lmh0bWwnXSA9ICcgPHNlbGVjdCA8JS0gYXR0ciAlPj4gPG9wdGlvbj4tLTwvb3B0aW9uPiA8JSAkLmVhY2gob3B0aW9ucywgZnVuY3Rpb24oa2V5LCBvcHRpb24pIHsgJT4gPCUgaWYgKG9wdGlvbi50eXBlID09PSBcXCdncm91cFxcJykgeyAlPiA8b3B0Z3JvdXA8JS0gb3B0aW9uLmF0dHIgJT4+IDwlICQuZWFjaChvcHRpb24ub3B0aW9ucywgZnVuY3Rpb24oa2V5LCBncm91cE9wdGlvbikgeyAlPiA8b3B0aW9uIDwlLSBncm91cE9wdGlvbi5hdHRyICU+PjwlPSBncm91cE9wdGlvbi50ZXh0ICU+PC9vcHRpb24+IDwlIH0pOyAlPiA8L29wdGdyb3VwPiA8JSB9IGVsc2UgeyAlPiA8b3B0aW9uIDwlLSBvcHRpb24uYXR0ciAlPj48JT0gb3B0aW9uLnRleHQgJT48L29wdGlvbj4gPCUgfSAlPiA8JSB9KTsgJT4gPC9zZWxlY3Q+J1xudHBsWydzZWFyY2gvc3dpdGNoLmh0bWwnXSA9ICc8ZGl2IGNsYXNzPVwiZm9ybS1jaGVjayBmb3JtLXN3aXRjaCBwdC0yXCI+IDxpbnB1dCBjbGFzcz1cImZvcm0tY2hlY2staW5wdXRcIiB0eXBlPVwiY2hlY2tib3hcIiBpZD1cIjwlPSAoZmllbGQgKyBpZCkgJT5cIiBuYW1lPVwiPCU9IGZpZWxkICU+XCIgdmFsdWU9XCI8JT0gdmFsdWVZICU+XCIgPCU9IGNoZWNrZWQgPyBcXCcgY2hlY2tlZFxcJyA6IFxcJ1xcJyAlPj4gPC9kaXY+J1xudHBsWydzZWFyY2gvdGV4dC5odG1sJ10gPSAnPGlucHV0IHR5cGU9XCJ0ZXh0XCIgPCUtIGF0dHIgJT4+J1xudHBsWyd0YWJsZS5odG1sJ10gPSAnIDx0YWJsZSBjbGFzcz1cInRhYmxlIDwlPSBjbGFzc2VzICU+IG1iLTBcIj4gPGNvbGdyb3VwPiA8JSAkLmVhY2goY29sR3JvdXBzLCBmdW5jdGlvbihrZXksIGNvbHVtbkdyb3VwKSB7ICU+IDxjb2w8JSBpZiAoY29sdW1uR3JvdXAuc3R5bGUpIHsgJT4gc3R5bGU9XCI8JT0gY29sdW1uR3JvdXAuc3R5bGUgJT5cIjwlIH0gJT4vPiA8JSB9KTsgJT4gPC9jb2xncm91cD4gPCUgaWYgKHNob3dIZWFkZXJzKSB7ICU+IDx0aGVhZDwlIGlmICh0aGVhZEF0dHIpIHsgJT4gPCUtIHRoZWFkQXR0ciAlPlwiPCUgfSAlPj4gPCUtIGNvbHVtbnNIZWFkZXIgJT4gPC90aGVhZD4gPCUgfSAlPiA8dGJvZHk+PC90Ym9keT4gPCUgaWYgKGNvbHVtbnNGb290ZXIgIT0gXFwnXFwnKSB7ICU+IDx0Zm9vdD4gPCUtIGNvbHVtbnNGb290ZXIgJT4gPC90Zm9vdD4gPCUgfSAlPiA8L3RhYmxlPidcbnRwbFsndGFibGUvY29sdW1ucy9mb290ZXIuaHRtbCddID0gJzx0cj4gPCUgJC5lYWNoKGNvbHVtbnMsIGZ1bmN0aW9uKGtleSwgY29sdW1uKSB7ICU+IDx0ZDwlLSBjb2x1bW4uYXR0ciU+PjwlLSBjb2x1bW4uY29udGVudCAlPjwvdGQ+IDwlIH0pOyAlPiA8L3RyPidcbnRwbFsndGFibGUvY29sdW1ucy9oZWFkZXIuaHRtbCddID0gJzx0ciBjbGFzcz1cImZ3LW1lZGl1bSBiZy13aGl0ZVwiPiA8JSAkLmVhY2goY29sdW1ucywgZnVuY3Rpb24oa2V5LCBjb2x1bW4pIHsgJT4gPHRkPCUtIGNvbHVtbi5hdHRyJT4+PCUtIGNvbHVtbi5jb250ZW50ICU+PC90ZD4gPCUgfSk7ICU+IDwvdHI+J1xudHBsWyd0YWJsZS9jb2x1bW5zL21lbnUvYnV0dG9uLmh0bWwnXSA9ICc8bGk+PGJ1dHRvbiA8JS0gYXR0ciU+PjwlLSB0ZXh0ICU+PC9idXR0b24+PC9saT4nXG50cGxbJ3RhYmxlL2NvbHVtbnMvbWVudS9kaXZpZGVyLmh0bWwnXSA9ICc8bGk+PGhyIGNsYXNzPVwiZHJvcGRvd24tZGl2aWRlclwiPjwvbGk+J1xudHBsWyd0YWJsZS9jb2x1bW5zL21lbnUvaGVhZGVyLmh0bWwnXSA9ICc8bGk+PGg2IGNsYXNzPVwiZHJvcGRvd24taGVhZGVyXCI+PCUtIHRleHQgJT48L2g2PjwvbGk+J1xudHBsWyd0YWJsZS9jb2x1bW5zL21lbnUvbGluay5odG1sJ10gPSAnPGxpPjxhIDwlLSBhdHRyJT4+PCUtIHRleHQgJT48L2E+PC9saT4nXG50cGxbJ3RhYmxlL2NvbHVtbnMvdGQuaHRtbCddID0gJzx0ZDwlLSBhdHRyJT4+IDxzcGFuIGNsYXNzPVwiY29yZXVpLXRhYmxlX19jb2x1bW4tbGFiZWxcIj48JS0gbGFiZWwgJT48L3NwYW4+IDwlIGlmIChkZXNjcmlwdGlvbikgeyAlPiA8c21hbGwgY2xhc3M9XCJjb3JldWktdGFibGVfX2NvbHVtbi1kZXNjcmlwdGlvbiBiaSBiaS1xdWVzdGlvbi1jaXJjbGUgdGV4dC1ib2R5LXNlY29uZGFyeVwiIHRpdGxlPVwiPCU9IGRlc2NyaXB0aW9uICU+XCIgZGF0YS1icy10b2dnbGU9XCJ0b29sdGlwXCIgZGF0YS1icy1wbGFjZW1lbnQ9XCJib3R0b21cIj48L3NtYWxsPiA8JSB9ICU+IDwlIGlmIChzb3J0YWJsZSA9PT0gXFwnYXNjXFwnKSB7ICU+IDxpIGNsYXNzPVwiY29yZXVpLXRhYmxlX19jb2x1bW4tc29ydCBiaSBiaS1zb3J0LWRvd24tYWx0XCI+PC9pPiA8JSB9IGVsc2UgaWYgKHNvcnRhYmxlID09PSBcXCdkZXNjXFwnKSB7ICU+IDxpIGNsYXNzPVwiY29yZXVpLXRhYmxlX19jb2x1bW4tc29ydCBiaSBiaS1zb3J0LWRvd25cIj48L2k+IDwlIH0gJT4gPCUgaWYgKGlzc2V0TWVudSkgeyAlPiA8ZGl2IGNsYXNzPVwiZHJvcGRvd24gZC1pbmxpbmUgZnctbm9ybWFsIGNvcmV1aS10YWJsZV9fY29sdW1uLW1lbnVcIj4gPHNwYW4gY2xhc3M9XCJkcm9wZG93bi10b2dnbGUgPCU9IG1lbnVTaG93QWx3YXlzICU+XCIgZGF0YS1icy10b2dnbGU9XCJkcm9wZG93blwiPiA8aSBjbGFzcz1cImJpIGJpLXRocmVlLWRvdHMtdmVydGljYWxcIj48L2k+IDwvc3Bhbj4gPHVsIGNsYXNzPVwiZHJvcGRvd24tbWVudSBkcm9wZG93bi1tZW51LTwlPSBtZW51UG9zaXRpb24gJT5cIj48L3VsPiA8L2Rpdj4gPCUgfSAlPiA8L3RkPidcbnRwbFsndGFibGUvY29sdW1ucy90ci5odG1sJ10gPSAnPHRyIGNsYXNzPVwiZnctbWVkaXVtIGJnLXdoaXRlXCI+PC90cj4nXG50cGxbJ3RhYmxlL2NvbnRyb2wuaHRtbCddID0gJzxkaXYgaWQ9XCJjb3JldWktdGFibGUtY29udHJvbC08JT0gaWQgJT5cIiBjbGFzcz1cImNvcmV1aS10YWJsZV9fY29udHJvbFwiPjwvZGl2PidcbnRwbFsndGFibGUvY29udHJvbHMvZm9vdGVyLW91dC5odG1sJ10gPSAnIDxkaXYgY2xhc3M9XCJjb3JldWktdGFibGVfX2Zvb3RlciBkLWZsZXgganVzdGlmeS1jb250ZW50LWJldHdlZW5cIj4gPCUgaWYgKGNvbnRyb2xzTGVmdC5sZW5ndGgpIHsgJT4gPGRpdiBjbGFzcz1cImNvcmV1aS10YWJsZV9fY29udHJvbHMgY29yZXVpLXRhYmxlX19jb250cm9sc19sZWZ0IGQtZmxleCBqdXN0aWZ5LWNvbnRlbnQtc3RhcnQgZ2FwLTIgZmxleC13cmFwIGZsZXgtZmlsbCBtYi0xIG10LTIgYWxpZ24taXRlbXMtY2VudGVyXCI+PC9kaXY+IDwlIH0gJT4gPCUgaWYgKGNvbnRyb2xzQ2VudGVyLmxlbmd0aCkgeyAlPiA8ZGl2IGNsYXNzPVwiY29yZXVpLXRhYmxlX19jb250cm9scyBjb3JldWktdGFibGVfX2NvbnRyb2xzX2NlbnRlciBkLWZsZXgganVzdGlmeS1jb250ZW50LWNlbnRlciBnYXAtMiBmbGV4LXdyYXAgZmxleC1maWxsIG1iLTEgbXQtMiBhbGlnbi1pdGVtcy1jZW50ZXJcIj48L2Rpdj4gPCUgfSAlPiA8JSBpZiAoY29udHJvbHNSaWdodC5sZW5ndGgpIHsgJT4gPGRpdiBjbGFzcz1cImNvcmV1aS10YWJsZV9fY29udHJvbHMgY29yZXVpLXRhYmxlX19jb250cm9sc19yaWdodCBkLWZsZXgganVzdGlmeS1jb250ZW50LWVuZCBnYXAtMiBmbGV4LXdyYXAgZmxleC1maWxsIG1iLTEgbXQtMiBhbGlnbi1pdGVtcy1jZW50ZXJcIj48L2Rpdj4gPCUgfSAlPiA8L2Rpdj4nXG50cGxbJ3RhYmxlL2NvbnRyb2xzL2Zvb3Rlci5odG1sJ10gPSAnIDxkaXYgY2xhc3M9XCJjb3JldWktdGFibGVfX2Zvb3RlciBwcy0xIHBlLTEgZC1mbGV4IGp1c3RpZnktY29udGVudC1iZXR3ZWVuIGJvcmRlci10b3AgYm9yZGVyLXNlY29uZGFyeS1zdWJ0bGVcIj4gPCUgaWYgKGNvbnRyb2xzTGVmdC5sZW5ndGgpIHsgJT4gPGRpdiBjbGFzcz1cImNvcmV1aS10YWJsZV9fY29udHJvbHMgY29yZXVpLXRhYmxlX19jb250cm9sc19sZWZ0IGQtZmxleCBqdXN0aWZ5LWNvbnRlbnQtc3RhcnQgZ2FwLTIgZmxleC13cmFwIGZsZXgtZmlsbCBtYi0xIG10LTEgYWxpZ24taXRlbXMtY2VudGVyXCI+PC9kaXY+IDwlIH0gJT4gPCUgaWYgKGNvbnRyb2xzQ2VudGVyLmxlbmd0aCkgeyAlPiA8ZGl2IGNsYXNzPVwiY29yZXVpLXRhYmxlX19jb250cm9scyBjb3JldWktdGFibGVfX2NvbnRyb2xzX2NlbnRlciBkLWZsZXgganVzdGlmeS1jb250ZW50LWNlbnRlciBnYXAtMiBmbGV4LXdyYXAgZmxleC1maWxsIG1iLTEgbXQtMSBhbGlnbi1pdGVtcy1jZW50ZXJcIj48L2Rpdj4gPCUgfSAlPiA8JSBpZiAoY29udHJvbHNSaWdodC5sZW5ndGgpIHsgJT4gPGRpdiBjbGFzcz1cImNvcmV1aS10YWJsZV9fY29udHJvbHMgY29yZXVpLXRhYmxlX19jb250cm9sc19yaWdodCBkLWZsZXgganVzdGlmeS1jb250ZW50LWVuZCBnYXAtMiBmbGV4LXdyYXAgZmxleC1maWxsIG1iLTEgbXQtMSBhbGlnbi1pdGVtcy1jZW50ZXJcIj48L2Rpdj4gPCUgfSAlPiA8L2Rpdj4nXG50cGxbJ3RhYmxlL2NvbnRyb2xzL2hlYWRlci1vdXQuaHRtbCddID0gJyA8ZGl2IGNsYXNzPVwiY29yZXVpLXRhYmxlX19oZWFkZXIgZC1mbGV4IGp1c3RpZnktY29udGVudC1iZXR3ZWVuXCI+IDwlIGlmIChjb250cm9sc0xlZnQubGVuZ3RoKSB7ICU+IDxkaXYgY2xhc3M9XCJjb3JldWktdGFibGVfX2NvbnRyb2xzIGNvcmV1aS10YWJsZV9fY29udHJvbHNfbGVmdCBkLWZsZXgganVzdGlmeS1jb250ZW50LXN0YXJ0IGdhcC0yIGZsZXgtd3JhcCBmbGV4LWZpbGwgbWItMiBtdC0xIGFsaWduLWl0ZW1zLWNlbnRlclwiPjwvZGl2PiA8JSB9ICU+IDwlIGlmIChjb250cm9sc0NlbnRlci5sZW5ndGgpIHsgJT4gPGRpdiBjbGFzcz1cImNvcmV1aS10YWJsZV9fY29udHJvbHMgY29yZXVpLXRhYmxlX19jb250cm9sc19jZW50ZXIgZC1mbGV4IGp1c3RpZnktY29udGVudC1jZW50ZXIgZ2FwLTIgZmxleC13cmFwIGZsZXgtZmlsbCBtYi0yIG10LTEgYWxpZ24taXRlbXMtY2VudGVyXCI+PC9kaXY+IDwlIH0gJT4gPCUgaWYgKGNvbnRyb2xzUmlnaHQubGVuZ3RoKSB7ICU+IDxkaXYgY2xhc3M9XCJjb3JldWktdGFibGVfX2NvbnRyb2xzIGNvcmV1aS10YWJsZV9fY29udHJvbHNfcmlnaHQgZC1mbGV4IGp1c3RpZnktY29udGVudC1lbmQgZ2FwLTIgZmxleC13cmFwIGZsZXgtZmlsbCBtYi0yIG10LTEgYWxpZ24taXRlbXMtY2VudGVyXCI+PC9kaXY+IDwlIH0gJT4gPC9kaXY+J1xudHBsWyd0YWJsZS9jb250cm9scy9oZWFkZXIuaHRtbCddID0gJyA8ZGl2IGNsYXNzPVwiY29yZXVpLXRhYmxlX19oZWFkZXIgcHMtMSBwZS0xIGQtZmxleCBqdXN0aWZ5LWNvbnRlbnQtYmV0d2VlbiBib3JkZXItYm90dG9tIGJvcmRlci1zZWNvbmRhcnktc3VidGxlXCI+IDwlIGlmIChjb250cm9sc0xlZnQubGVuZ3RoKSB7ICU+IDxkaXYgY2xhc3M9XCJjb3JldWktdGFibGVfX2NvbnRyb2xzIGNvcmV1aS10YWJsZV9fY29udHJvbHNfbGVmdCBkLWZsZXgganVzdGlmeS1jb250ZW50LXN0YXJ0IGdhcC0yIGZsZXgtd3JhcCBmbGV4LWZpbGwgbXktMSBhbGlnbi1pdGVtcy1jZW50ZXJcIj48L2Rpdj4gPCUgfSAlPiA8JSBpZiAoY29udHJvbHNDZW50ZXIubGVuZ3RoKSB7ICU+IDxkaXYgY2xhc3M9XCJjb3JldWktdGFibGVfX2NvbnRyb2xzIGNvcmV1aS10YWJsZV9fY29udHJvbHNfY2VudGVyIGQtZmxleCBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyIGdhcC0yIGZsZXgtd3JhcCBmbGV4LWZpbGwgbXktMSBhbGlnbi1pdGVtcy1jZW50ZXJcIj48L2Rpdj4gPCUgfSAlPiA8JSBpZiAoY29udHJvbHNSaWdodC5sZW5ndGgpIHsgJT4gPGRpdiBjbGFzcz1cImNvcmV1aS10YWJsZV9fY29udHJvbHMgY29yZXVpLXRhYmxlX19jb250cm9sc19yaWdodCBkLWZsZXgganVzdGlmeS1jb250ZW50LWVuZCBnYXAtMiBmbGV4LXdyYXAgZmxleC1maWxsIG15LTEgYWxpZ24taXRlbXMtY2VudGVyXCI+PC9kaXY+IDwlIH0gJT4gPC9kaXY+J1xudHBsWyd0YWJsZS9sb2FkZXIuaHRtbCddID0gJzxkaXYgY2xhc3M9XCJjb3JldWktdGFibGUtbG9jayBwb3NpdGlvbi1hYnNvbHV0ZSB3LTEwMCB0b3AtMCBib3R0b20tMFwiPiA8ZGl2IGNsYXNzPVwiY29yZXVpLXRhYmxlLWJsb2NrIGJnLXNlY29uZGFyeS1zdWJ0bGUgcG9zaXRpb24tYWJzb2x1dGUgb3BhY2l0eS01MCB3LTEwMCB0b3AtMCBib3R0b20tMFwiPjwvZGl2PiA8ZGl2IGNsYXNzPVwiY29yZXVpLXRhYmxlLW1lc3NhZ2UgcG9zaXRpb24tcmVsYXRpdmUgZC1mbGV4IGFsaWduLWNvbnRlbnQtY2VudGVyIGp1c3RpZnktY29udGVudC1zdGFydCBnYXAtMiBtdC0zIHB5LTEgcHgtMiBtLWF1dG8gYm9yZGVyIGJvcmRlci1zZWNvbmRhcnktc3VidGxlIHJvdW5kZWQtMyBiZy1ib2R5LXNlY29uZGFyeVwiPiA8ZGl2IGNsYXNzPVwic3Bpbm5lci1ib3JkZXIgdGV4dC1zZWNvbmRhcnkgYWxpZ24tc2VsZi1jZW50ZXJcIj48L2Rpdj4gPHNwYW4gY2xhc3M9XCJsaC1sZ1wiPjwlPSBsYW5nLmxvYWRpbmcgJT48L3NwYW4+IDwvZGl2PiA8L2Rpdj4nXG50cGxbJ3RhYmxlL3JlY29yZC5odG1sJ10gPSAnPHRyPCUtIGF0dHIgJT4gZGF0YS1yZWNvcmQtaW5kZXg9XCI8JT0gaW5kZXggJT5cIj4gPCUgZmllbGRzLm1hcChmdW5jdGlvbihmaWVsZCkgeyAlPiA8dGQ8JS0gZmllbGQuYXR0ciAlPj48L3RkPiA8JSB9KTsgJT4gPC90cj4nXG50cGxbJ3RhYmxlL3JlY29yZC9lbXB0eS5odG1sJ10gPSAnPHRyIGNsYXNzPVwiY29yZXVpLXRhYmxlX19yZWNvcmQtZW1wdHlcIj4gPHRkIGNsYXNzPVwidGV4dC1jZW50ZXJcIiBjb2xzcGFuPVwiPCU9IGNvbHVtbnNDb3VudCAlPlwiPjwlPSBsYW5nLmVtcHR5UmVjb3JkcyAlPjwvdGQ+IDwvdHI+J1xudHBsWyd0YWJsZS9yZWNvcmQvZXhwYW5kLmh0bWwnXSA9ICc8dHIgY2xhc3M9XCJjb3JldWktdGFibGVfX3JlY29yZC1leHBhbmRlZFwiIHN0eWxlPVwiZGlzcGxheTogbm9uZVwiPiA8dGQgY29sc3Bhbj1cIjwlPSBjb2xzcGFuICU+XCI+PC90ZD4gPC90cj4nXG50cGxbJ3RhYmxlL3JlY29yZC9ncm91cC5odG1sJ10gPSAnPHRyPCUtIGF0dHIgJT4+IDx0ZCBjb2xzcGFuPVwiPCU9IGNvbHNwYW4gJT5cIiBjbGFzcz1cImJvcmRlci1lbmRcIj48L3RkPiA8L3RyPic7XG5leHBvcnQgZGVmYXVsdCB0cGw7IiwiKGZ1bmN0aW9uKGYpe2lmKHR5cGVvZiBleHBvcnRzPT09XCJvYmplY3RcIiYmdHlwZW9mIG1vZHVsZSE9PVwidW5kZWZpbmVkXCIpe21vZHVsZS5leHBvcnRzPWYoKX1lbHNlIGlmKHR5cGVvZiBkZWZpbmU9PT1cImZ1bmN0aW9uXCImJmRlZmluZS5hbWQpe2RlZmluZShbXSxmKX1lbHNle3ZhciBnO2lmKHR5cGVvZiB3aW5kb3chPT1cInVuZGVmaW5lZFwiKXtnPXdpbmRvd31lbHNlIGlmKHR5cGVvZiBnbG9iYWwhPT1cInVuZGVmaW5lZFwiKXtnPWdsb2JhbH1lbHNlIGlmKHR5cGVvZiBzZWxmIT09XCJ1bmRlZmluZWRcIil7Zz1zZWxmfWVsc2V7Zz10aGlzfWcuZWpzPWYoKX19KShmdW5jdGlvbigpe3ZhciBkZWZpbmUsbW9kdWxlLGV4cG9ydHM7cmV0dXJuIGZ1bmN0aW9uKCl7ZnVuY3Rpb24gcihlLG4sdCl7ZnVuY3Rpb24gbyhpLGYpe2lmKCFuW2ldKXtpZighZVtpXSl7dmFyIGM9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZTtpZighZiYmYylyZXR1cm4gYyhpLCEwKTtpZih1KXJldHVybiB1KGksITApO3ZhciBhPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIraStcIidcIik7dGhyb3cgYS5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGF9dmFyIHA9bltpXT17ZXhwb3J0czp7fX07ZVtpXVswXS5jYWxsKHAuZXhwb3J0cyxmdW5jdGlvbihyKXt2YXIgbj1lW2ldWzFdW3JdO3JldHVybiBvKG58fHIpfSxwLHAuZXhwb3J0cyxyLGUsbix0KX1yZXR1cm4gbltpXS5leHBvcnRzfWZvcih2YXIgdT1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlLGk9MDtpPHQubGVuZ3RoO2krKylvKHRbaV0pO3JldHVybiBvfXJldHVybiByfSgpKHsxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcInVzZSBzdHJpY3RcIjt2YXIgZnM9cmVxdWlyZShcImZzXCIpO3ZhciBwYXRoPXJlcXVpcmUoXCJwYXRoXCIpO3ZhciB1dGlscz1yZXF1aXJlKFwiLi91dGlsc1wiKTt2YXIgc2NvcGVPcHRpb25XYXJuZWQ9ZmFsc2U7dmFyIF9WRVJTSU9OX1NUUklORz1yZXF1aXJlKFwiLi4vcGFja2FnZS5qc29uXCIpLnZlcnNpb247dmFyIF9ERUZBVUxUX09QRU5fREVMSU1JVEVSPVwiPFwiO3ZhciBfREVGQVVMVF9DTE9TRV9ERUxJTUlURVI9XCI+XCI7dmFyIF9ERUZBVUxUX0RFTElNSVRFUj1cIiVcIjt2YXIgX0RFRkFVTFRfTE9DQUxTX05BTUU9XCJsb2NhbHNcIjt2YXIgX05BTUU9XCJlanNcIjt2YXIgX1JFR0VYX1NUUklORz1cIig8JSV8JSU+fDwlPXw8JS18PCVffDwlI3w8JXwlPnwtJT58XyU+KVwiO3ZhciBfT1BUU19QQVNTQUJMRV9XSVRIX0RBVEE9W1wiZGVsaW1pdGVyXCIsXCJzY29wZVwiLFwiY29udGV4dFwiLFwiZGVidWdcIixcImNvbXBpbGVEZWJ1Z1wiLFwiY2xpZW50XCIsXCJfd2l0aFwiLFwicm1XaGl0ZXNwYWNlXCIsXCJzdHJpY3RcIixcImZpbGVuYW1lXCIsXCJhc3luY1wiXTt2YXIgX09QVFNfUEFTU0FCTEVfV0lUSF9EQVRBX0VYUFJFU1M9X09QVFNfUEFTU0FCTEVfV0lUSF9EQVRBLmNvbmNhdChcImNhY2hlXCIpO3ZhciBfQk9NPS9eXFx1RkVGRi87dmFyIF9KU19JREVOVElGSUVSPS9eW2EtekEtWl8kXVswLTlhLXpBLVpfJF0qJC87ZXhwb3J0cy5jYWNoZT11dGlscy5jYWNoZTtleHBvcnRzLmZpbGVMb2FkZXI9ZnMucmVhZEZpbGVTeW5jO2V4cG9ydHMubG9jYWxzTmFtZT1fREVGQVVMVF9MT0NBTFNfTkFNRTtleHBvcnRzLnByb21pc2VJbXBsPW5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzO1wiKSgpLlByb21pc2U7ZXhwb3J0cy5yZXNvbHZlSW5jbHVkZT1mdW5jdGlvbihuYW1lLGZpbGVuYW1lLGlzRGlyKXt2YXIgZGlybmFtZT1wYXRoLmRpcm5hbWU7dmFyIGV4dG5hbWU9cGF0aC5leHRuYW1lO3ZhciByZXNvbHZlPXBhdGgucmVzb2x2ZTt2YXIgaW5jbHVkZVBhdGg9cmVzb2x2ZShpc0Rpcj9maWxlbmFtZTpkaXJuYW1lKGZpbGVuYW1lKSxuYW1lKTt2YXIgZXh0PWV4dG5hbWUobmFtZSk7aWYoIWV4dCl7aW5jbHVkZVBhdGgrPVwiLmVqc1wifXJldHVybiBpbmNsdWRlUGF0aH07ZnVuY3Rpb24gcmVzb2x2ZVBhdGhzKG5hbWUscGF0aHMpe3ZhciBmaWxlUGF0aDtpZihwYXRocy5zb21lKGZ1bmN0aW9uKHYpe2ZpbGVQYXRoPWV4cG9ydHMucmVzb2x2ZUluY2x1ZGUobmFtZSx2LHRydWUpO3JldHVybiBmcy5leGlzdHNTeW5jKGZpbGVQYXRoKX0pKXtyZXR1cm4gZmlsZVBhdGh9fWZ1bmN0aW9uIGdldEluY2x1ZGVQYXRoKHBhdGgsb3B0aW9ucyl7dmFyIGluY2x1ZGVQYXRoO3ZhciBmaWxlUGF0aDt2YXIgdmlld3M9b3B0aW9ucy52aWV3czt2YXIgbWF0Y2g9L15bQS1aYS16XSs6XFxcXHxeXFwvLy5leGVjKHBhdGgpO2lmKG1hdGNoJiZtYXRjaC5sZW5ndGgpe3BhdGg9cGF0aC5yZXBsYWNlKC9eXFwvKi8sXCJcIik7aWYoQXJyYXkuaXNBcnJheShvcHRpb25zLnJvb3QpKXtpbmNsdWRlUGF0aD1yZXNvbHZlUGF0aHMocGF0aCxvcHRpb25zLnJvb3QpfWVsc2V7aW5jbHVkZVBhdGg9ZXhwb3J0cy5yZXNvbHZlSW5jbHVkZShwYXRoLG9wdGlvbnMucm9vdHx8XCIvXCIsdHJ1ZSl9fWVsc2V7aWYob3B0aW9ucy5maWxlbmFtZSl7ZmlsZVBhdGg9ZXhwb3J0cy5yZXNvbHZlSW5jbHVkZShwYXRoLG9wdGlvbnMuZmlsZW5hbWUpO2lmKGZzLmV4aXN0c1N5bmMoZmlsZVBhdGgpKXtpbmNsdWRlUGF0aD1maWxlUGF0aH19aWYoIWluY2x1ZGVQYXRoJiZBcnJheS5pc0FycmF5KHZpZXdzKSl7aW5jbHVkZVBhdGg9cmVzb2x2ZVBhdGhzKHBhdGgsdmlld3MpfWlmKCFpbmNsdWRlUGF0aCYmdHlwZW9mIG9wdGlvbnMuaW5jbHVkZXIhPT1cImZ1bmN0aW9uXCIpe3Rocm93IG5ldyBFcnJvcignQ291bGQgbm90IGZpbmQgdGhlIGluY2x1ZGUgZmlsZSBcIicrb3B0aW9ucy5lc2NhcGVGdW5jdGlvbihwYXRoKSsnXCInKX19cmV0dXJuIGluY2x1ZGVQYXRofWZ1bmN0aW9uIGhhbmRsZUNhY2hlKG9wdGlvbnMsdGVtcGxhdGUpe3ZhciBmdW5jO3ZhciBmaWxlbmFtZT1vcHRpb25zLmZpbGVuYW1lO3ZhciBoYXNUZW1wbGF0ZT1hcmd1bWVudHMubGVuZ3RoPjE7aWYob3B0aW9ucy5jYWNoZSl7aWYoIWZpbGVuYW1lKXt0aHJvdyBuZXcgRXJyb3IoXCJjYWNoZSBvcHRpb24gcmVxdWlyZXMgYSBmaWxlbmFtZVwiKX1mdW5jPWV4cG9ydHMuY2FjaGUuZ2V0KGZpbGVuYW1lKTtpZihmdW5jKXtyZXR1cm4gZnVuY31pZighaGFzVGVtcGxhdGUpe3RlbXBsYXRlPWZpbGVMb2FkZXIoZmlsZW5hbWUpLnRvU3RyaW5nKCkucmVwbGFjZShfQk9NLFwiXCIpfX1lbHNlIGlmKCFoYXNUZW1wbGF0ZSl7aWYoIWZpbGVuYW1lKXt0aHJvdyBuZXcgRXJyb3IoXCJJbnRlcm5hbCBFSlMgZXJyb3I6IG5vIGZpbGUgbmFtZSBvciB0ZW1wbGF0ZSBcIitcInByb3ZpZGVkXCIpfXRlbXBsYXRlPWZpbGVMb2FkZXIoZmlsZW5hbWUpLnRvU3RyaW5nKCkucmVwbGFjZShfQk9NLFwiXCIpfWZ1bmM9ZXhwb3J0cy5jb21waWxlKHRlbXBsYXRlLG9wdGlvbnMpO2lmKG9wdGlvbnMuY2FjaGUpe2V4cG9ydHMuY2FjaGUuc2V0KGZpbGVuYW1lLGZ1bmMpfXJldHVybiBmdW5jfWZ1bmN0aW9uIHRyeUhhbmRsZUNhY2hlKG9wdGlvbnMsZGF0YSxjYil7dmFyIHJlc3VsdDtpZighY2Ipe2lmKHR5cGVvZiBleHBvcnRzLnByb21pc2VJbXBsPT1cImZ1bmN0aW9uXCIpe3JldHVybiBuZXcgZXhwb3J0cy5wcm9taXNlSW1wbChmdW5jdGlvbihyZXNvbHZlLHJlamVjdCl7dHJ5e3Jlc3VsdD1oYW5kbGVDYWNoZShvcHRpb25zKShkYXRhKTtyZXNvbHZlKHJlc3VsdCl9Y2F0Y2goZXJyKXtyZWplY3QoZXJyKX19KX1lbHNle3Rocm93IG5ldyBFcnJvcihcIlBsZWFzZSBwcm92aWRlIGEgY2FsbGJhY2sgZnVuY3Rpb25cIil9fWVsc2V7dHJ5e3Jlc3VsdD1oYW5kbGVDYWNoZShvcHRpb25zKShkYXRhKX1jYXRjaChlcnIpe3JldHVybiBjYihlcnIpfWNiKG51bGwscmVzdWx0KX19ZnVuY3Rpb24gZmlsZUxvYWRlcihmaWxlUGF0aCl7cmV0dXJuIGV4cG9ydHMuZmlsZUxvYWRlcihmaWxlUGF0aCl9ZnVuY3Rpb24gaW5jbHVkZUZpbGUocGF0aCxvcHRpb25zKXt2YXIgb3B0cz11dGlscy5zaGFsbG93Q29weSh1dGlscy5jcmVhdGVOdWxsUHJvdG9PYmpXaGVyZVBvc3NpYmxlKCksb3B0aW9ucyk7b3B0cy5maWxlbmFtZT1nZXRJbmNsdWRlUGF0aChwYXRoLG9wdHMpO2lmKHR5cGVvZiBvcHRpb25zLmluY2x1ZGVyPT09XCJmdW5jdGlvblwiKXt2YXIgaW5jbHVkZXJSZXN1bHQ9b3B0aW9ucy5pbmNsdWRlcihwYXRoLG9wdHMuZmlsZW5hbWUpO2lmKGluY2x1ZGVyUmVzdWx0KXtpZihpbmNsdWRlclJlc3VsdC5maWxlbmFtZSl7b3B0cy5maWxlbmFtZT1pbmNsdWRlclJlc3VsdC5maWxlbmFtZX1pZihpbmNsdWRlclJlc3VsdC50ZW1wbGF0ZSl7cmV0dXJuIGhhbmRsZUNhY2hlKG9wdHMsaW5jbHVkZXJSZXN1bHQudGVtcGxhdGUpfX19cmV0dXJuIGhhbmRsZUNhY2hlKG9wdHMpfWZ1bmN0aW9uIHJldGhyb3coZXJyLHN0cixmbG5tLGxpbmVubyxlc2Mpe3ZhciBsaW5lcz1zdHIuc3BsaXQoXCJcXG5cIik7dmFyIHN0YXJ0PU1hdGgubWF4KGxpbmVuby0zLDApO3ZhciBlbmQ9TWF0aC5taW4obGluZXMubGVuZ3RoLGxpbmVubyszKTt2YXIgZmlsZW5hbWU9ZXNjKGZsbm0pO3ZhciBjb250ZXh0PWxpbmVzLnNsaWNlKHN0YXJ0LGVuZCkubWFwKGZ1bmN0aW9uKGxpbmUsaSl7dmFyIGN1cnI9aStzdGFydCsxO3JldHVybihjdXJyPT1saW5lbm8/XCIgPj4gXCI6XCIgICAgXCIpK2N1cnIrXCJ8IFwiK2xpbmV9KS5qb2luKFwiXFxuXCIpO2Vyci5wYXRoPWZpbGVuYW1lO2Vyci5tZXNzYWdlPShmaWxlbmFtZXx8XCJlanNcIikrXCI6XCIrbGluZW5vK1wiXFxuXCIrY29udGV4dCtcIlxcblxcblwiK2Vyci5tZXNzYWdlO3Rocm93IGVycn1mdW5jdGlvbiBzdHJpcFNlbWkoc3RyKXtyZXR1cm4gc3RyLnJlcGxhY2UoLzsoXFxzKiQpLyxcIiQxXCIpfWV4cG9ydHMuY29tcGlsZT1mdW5jdGlvbiBjb21waWxlKHRlbXBsYXRlLG9wdHMpe3ZhciB0ZW1wbDtpZihvcHRzJiZvcHRzLnNjb3BlKXtpZighc2NvcGVPcHRpb25XYXJuZWQpe2NvbnNvbGUud2FybihcImBzY29wZWAgb3B0aW9uIGlzIGRlcHJlY2F0ZWQgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiBFSlMgM1wiKTtzY29wZU9wdGlvbldhcm5lZD10cnVlfWlmKCFvcHRzLmNvbnRleHQpe29wdHMuY29udGV4dD1vcHRzLnNjb3BlfWRlbGV0ZSBvcHRzLnNjb3BlfXRlbXBsPW5ldyBUZW1wbGF0ZSh0ZW1wbGF0ZSxvcHRzKTtyZXR1cm4gdGVtcGwuY29tcGlsZSgpfTtleHBvcnRzLnJlbmRlcj1mdW5jdGlvbih0ZW1wbGF0ZSxkLG8pe3ZhciBkYXRhPWR8fHV0aWxzLmNyZWF0ZU51bGxQcm90b09ialdoZXJlUG9zc2libGUoKTt2YXIgb3B0cz1vfHx1dGlscy5jcmVhdGVOdWxsUHJvdG9PYmpXaGVyZVBvc3NpYmxlKCk7aWYoYXJndW1lbnRzLmxlbmd0aD09Mil7dXRpbHMuc2hhbGxvd0NvcHlGcm9tTGlzdChvcHRzLGRhdGEsX09QVFNfUEFTU0FCTEVfV0lUSF9EQVRBKX1yZXR1cm4gaGFuZGxlQ2FjaGUob3B0cyx0ZW1wbGF0ZSkoZGF0YSl9O2V4cG9ydHMucmVuZGVyRmlsZT1mdW5jdGlvbigpe3ZhciBhcmdzPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7dmFyIGZpbGVuYW1lPWFyZ3Muc2hpZnQoKTt2YXIgY2I7dmFyIG9wdHM9e2ZpbGVuYW1lOmZpbGVuYW1lfTt2YXIgZGF0YTt2YXIgdmlld09wdHM7aWYodHlwZW9mIGFyZ3VtZW50c1thcmd1bWVudHMubGVuZ3RoLTFdPT1cImZ1bmN0aW9uXCIpe2NiPWFyZ3MucG9wKCl9aWYoYXJncy5sZW5ndGgpe2RhdGE9YXJncy5zaGlmdCgpO2lmKGFyZ3MubGVuZ3RoKXt1dGlscy5zaGFsbG93Q29weShvcHRzLGFyZ3MucG9wKCkpfWVsc2V7aWYoZGF0YS5zZXR0aW5ncyl7aWYoZGF0YS5zZXR0aW5ncy52aWV3cyl7b3B0cy52aWV3cz1kYXRhLnNldHRpbmdzLnZpZXdzfWlmKGRhdGEuc2V0dGluZ3NbXCJ2aWV3IGNhY2hlXCJdKXtvcHRzLmNhY2hlPXRydWV9dmlld09wdHM9ZGF0YS5zZXR0aW5nc1tcInZpZXcgb3B0aW9uc1wiXTtpZih2aWV3T3B0cyl7dXRpbHMuc2hhbGxvd0NvcHkob3B0cyx2aWV3T3B0cyl9fXV0aWxzLnNoYWxsb3dDb3B5RnJvbUxpc3Qob3B0cyxkYXRhLF9PUFRTX1BBU1NBQkxFX1dJVEhfREFUQV9FWFBSRVNTKX1vcHRzLmZpbGVuYW1lPWZpbGVuYW1lfWVsc2V7ZGF0YT11dGlscy5jcmVhdGVOdWxsUHJvdG9PYmpXaGVyZVBvc3NpYmxlKCl9cmV0dXJuIHRyeUhhbmRsZUNhY2hlKG9wdHMsZGF0YSxjYil9O2V4cG9ydHMuVGVtcGxhdGU9VGVtcGxhdGU7ZXhwb3J0cy5jbGVhckNhY2hlPWZ1bmN0aW9uKCl7ZXhwb3J0cy5jYWNoZS5yZXNldCgpfTtmdW5jdGlvbiBUZW1wbGF0ZSh0ZXh0LG9wdHNQYXJhbSl7dmFyIG9wdHM9dXRpbHMuaGFzT3duT25seU9iamVjdChvcHRzUGFyYW0pO3ZhciBvcHRpb25zPXV0aWxzLmNyZWF0ZU51bGxQcm90b09ialdoZXJlUG9zc2libGUoKTt0aGlzLnRlbXBsYXRlVGV4dD10ZXh0O3RoaXMubW9kZT1udWxsO3RoaXMudHJ1bmNhdGU9ZmFsc2U7dGhpcy5jdXJyZW50TGluZT0xO3RoaXMuc291cmNlPVwiXCI7b3B0aW9ucy5jbGllbnQ9b3B0cy5jbGllbnR8fGZhbHNlO29wdGlvbnMuZXNjYXBlRnVuY3Rpb249b3B0cy5lc2NhcGV8fG9wdHMuZXNjYXBlRnVuY3Rpb258fHV0aWxzLmVzY2FwZVhNTDtvcHRpb25zLmNvbXBpbGVEZWJ1Zz1vcHRzLmNvbXBpbGVEZWJ1ZyE9PWZhbHNlO29wdGlvbnMuZGVidWc9ISFvcHRzLmRlYnVnO29wdGlvbnMuZmlsZW5hbWU9b3B0cy5maWxlbmFtZTtvcHRpb25zLm9wZW5EZWxpbWl0ZXI9b3B0cy5vcGVuRGVsaW1pdGVyfHxleHBvcnRzLm9wZW5EZWxpbWl0ZXJ8fF9ERUZBVUxUX09QRU5fREVMSU1JVEVSO29wdGlvbnMuY2xvc2VEZWxpbWl0ZXI9b3B0cy5jbG9zZURlbGltaXRlcnx8ZXhwb3J0cy5jbG9zZURlbGltaXRlcnx8X0RFRkFVTFRfQ0xPU0VfREVMSU1JVEVSO29wdGlvbnMuZGVsaW1pdGVyPW9wdHMuZGVsaW1pdGVyfHxleHBvcnRzLmRlbGltaXRlcnx8X0RFRkFVTFRfREVMSU1JVEVSO29wdGlvbnMuc3RyaWN0PW9wdHMuc3RyaWN0fHxmYWxzZTtvcHRpb25zLmNvbnRleHQ9b3B0cy5jb250ZXh0O29wdGlvbnMuY2FjaGU9b3B0cy5jYWNoZXx8ZmFsc2U7b3B0aW9ucy5ybVdoaXRlc3BhY2U9b3B0cy5ybVdoaXRlc3BhY2U7b3B0aW9ucy5yb290PW9wdHMucm9vdDtvcHRpb25zLmluY2x1ZGVyPW9wdHMuaW5jbHVkZXI7b3B0aW9ucy5vdXRwdXRGdW5jdGlvbk5hbWU9b3B0cy5vdXRwdXRGdW5jdGlvbk5hbWU7b3B0aW9ucy5sb2NhbHNOYW1lPW9wdHMubG9jYWxzTmFtZXx8ZXhwb3J0cy5sb2NhbHNOYW1lfHxfREVGQVVMVF9MT0NBTFNfTkFNRTtvcHRpb25zLnZpZXdzPW9wdHMudmlld3M7b3B0aW9ucy5hc3luYz1vcHRzLmFzeW5jO29wdGlvbnMuZGVzdHJ1Y3R1cmVkTG9jYWxzPW9wdHMuZGVzdHJ1Y3R1cmVkTG9jYWxzO29wdGlvbnMubGVnYWN5SW5jbHVkZT10eXBlb2Ygb3B0cy5sZWdhY3lJbmNsdWRlIT1cInVuZGVmaW5lZFwiPyEhb3B0cy5sZWdhY3lJbmNsdWRlOnRydWU7aWYob3B0aW9ucy5zdHJpY3Qpe29wdGlvbnMuX3dpdGg9ZmFsc2V9ZWxzZXtvcHRpb25zLl93aXRoPXR5cGVvZiBvcHRzLl93aXRoIT1cInVuZGVmaW5lZFwiP29wdHMuX3dpdGg6dHJ1ZX10aGlzLm9wdHM9b3B0aW9uczt0aGlzLnJlZ2V4PXRoaXMuY3JlYXRlUmVnZXgoKX1UZW1wbGF0ZS5tb2Rlcz17RVZBTDpcImV2YWxcIixFU0NBUEVEOlwiZXNjYXBlZFwiLFJBVzpcInJhd1wiLENPTU1FTlQ6XCJjb21tZW50XCIsTElURVJBTDpcImxpdGVyYWxcIn07VGVtcGxhdGUucHJvdG90eXBlPXtjcmVhdGVSZWdleDpmdW5jdGlvbigpe3ZhciBzdHI9X1JFR0VYX1NUUklORzt2YXIgZGVsaW09dXRpbHMuZXNjYXBlUmVnRXhwQ2hhcnModGhpcy5vcHRzLmRlbGltaXRlcik7dmFyIG9wZW49dXRpbHMuZXNjYXBlUmVnRXhwQ2hhcnModGhpcy5vcHRzLm9wZW5EZWxpbWl0ZXIpO3ZhciBjbG9zZT11dGlscy5lc2NhcGVSZWdFeHBDaGFycyh0aGlzLm9wdHMuY2xvc2VEZWxpbWl0ZXIpO3N0cj1zdHIucmVwbGFjZSgvJS9nLGRlbGltKS5yZXBsYWNlKC88L2csb3BlbikucmVwbGFjZSgvPi9nLGNsb3NlKTtyZXR1cm4gbmV3IFJlZ0V4cChzdHIpfSxjb21waWxlOmZ1bmN0aW9uKCl7dmFyIHNyYzt2YXIgZm47dmFyIG9wdHM9dGhpcy5vcHRzO3ZhciBwcmVwZW5kZWQ9XCJcIjt2YXIgYXBwZW5kZWQ9XCJcIjt2YXIgZXNjYXBlRm49b3B0cy5lc2NhcGVGdW5jdGlvbjt2YXIgY3Rvcjt2YXIgc2FuaXRpemVkRmlsZW5hbWU9b3B0cy5maWxlbmFtZT9KU09OLnN0cmluZ2lmeShvcHRzLmZpbGVuYW1lKTpcInVuZGVmaW5lZFwiO2lmKCF0aGlzLnNvdXJjZSl7dGhpcy5nZW5lcmF0ZVNvdXJjZSgpO3ByZXBlbmRlZCs9JyAgdmFyIF9fb3V0cHV0ID0gXCJcIjtcXG4nK1wiICBmdW5jdGlvbiBfX2FwcGVuZChzKSB7IGlmIChzICE9PSB1bmRlZmluZWQgJiYgcyAhPT0gbnVsbCkgX19vdXRwdXQgKz0gcyB9XFxuXCI7aWYob3B0cy5vdXRwdXRGdW5jdGlvbk5hbWUpe2lmKCFfSlNfSURFTlRJRklFUi50ZXN0KG9wdHMub3V0cHV0RnVuY3Rpb25OYW1lKSl7dGhyb3cgbmV3IEVycm9yKFwib3V0cHV0RnVuY3Rpb25OYW1lIGlzIG5vdCBhIHZhbGlkIEpTIGlkZW50aWZpZXIuXCIpfXByZXBlbmRlZCs9XCIgIHZhciBcIitvcHRzLm91dHB1dEZ1bmN0aW9uTmFtZStcIiA9IF9fYXBwZW5kO1wiK1wiXFxuXCJ9aWYob3B0cy5sb2NhbHNOYW1lJiYhX0pTX0lERU5USUZJRVIudGVzdChvcHRzLmxvY2Fsc05hbWUpKXt0aHJvdyBuZXcgRXJyb3IoXCJsb2NhbHNOYW1lIGlzIG5vdCBhIHZhbGlkIEpTIGlkZW50aWZpZXIuXCIpfWlmKG9wdHMuZGVzdHJ1Y3R1cmVkTG9jYWxzJiZvcHRzLmRlc3RydWN0dXJlZExvY2Fscy5sZW5ndGgpe3ZhciBkZXN0cnVjdHVyaW5nPVwiICB2YXIgX19sb2NhbHMgPSAoXCIrb3B0cy5sb2NhbHNOYW1lK1wiIHx8IHt9KSxcXG5cIjtmb3IodmFyIGk9MDtpPG9wdHMuZGVzdHJ1Y3R1cmVkTG9jYWxzLmxlbmd0aDtpKyspe3ZhciBuYW1lPW9wdHMuZGVzdHJ1Y3R1cmVkTG9jYWxzW2ldO2lmKCFfSlNfSURFTlRJRklFUi50ZXN0KG5hbWUpKXt0aHJvdyBuZXcgRXJyb3IoXCJkZXN0cnVjdHVyZWRMb2NhbHNbXCIraStcIl0gaXMgbm90IGEgdmFsaWQgSlMgaWRlbnRpZmllci5cIil9aWYoaT4wKXtkZXN0cnVjdHVyaW5nKz1cIixcXG4gIFwifWRlc3RydWN0dXJpbmcrPW5hbWUrXCIgPSBfX2xvY2Fscy5cIituYW1lfXByZXBlbmRlZCs9ZGVzdHJ1Y3R1cmluZytcIjtcXG5cIn1pZihvcHRzLl93aXRoIT09ZmFsc2Upe3ByZXBlbmRlZCs9XCIgIHdpdGggKFwiK29wdHMubG9jYWxzTmFtZStcIiB8fCB7fSkge1wiK1wiXFxuXCI7YXBwZW5kZWQrPVwiICB9XCIrXCJcXG5cIn1hcHBlbmRlZCs9XCIgIHJldHVybiBfX291dHB1dDtcIitcIlxcblwiO3RoaXMuc291cmNlPXByZXBlbmRlZCt0aGlzLnNvdXJjZSthcHBlbmRlZH1pZihvcHRzLmNvbXBpbGVEZWJ1Zyl7c3JjPVwidmFyIF9fbGluZSA9IDFcIitcIlxcblwiK1wiICAsIF9fbGluZXMgPSBcIitKU09OLnN0cmluZ2lmeSh0aGlzLnRlbXBsYXRlVGV4dCkrXCJcXG5cIitcIiAgLCBfX2ZpbGVuYW1lID0gXCIrc2FuaXRpemVkRmlsZW5hbWUrXCI7XCIrXCJcXG5cIitcInRyeSB7XCIrXCJcXG5cIit0aGlzLnNvdXJjZStcIn0gY2F0Y2ggKGUpIHtcIitcIlxcblwiK1wiICByZXRocm93KGUsIF9fbGluZXMsIF9fZmlsZW5hbWUsIF9fbGluZSwgZXNjYXBlRm4pO1wiK1wiXFxuXCIrXCJ9XCIrXCJcXG5cIn1lbHNle3NyYz10aGlzLnNvdXJjZX1pZihvcHRzLmNsaWVudCl7c3JjPVwiZXNjYXBlRm4gPSBlc2NhcGVGbiB8fCBcIitlc2NhcGVGbi50b1N0cmluZygpK1wiO1wiK1wiXFxuXCIrc3JjO2lmKG9wdHMuY29tcGlsZURlYnVnKXtzcmM9XCJyZXRocm93ID0gcmV0aHJvdyB8fCBcIityZXRocm93LnRvU3RyaW5nKCkrXCI7XCIrXCJcXG5cIitzcmN9fWlmKG9wdHMuc3RyaWN0KXtzcmM9J1widXNlIHN0cmljdFwiO1xcbicrc3JjfWlmKG9wdHMuZGVidWcpe2NvbnNvbGUubG9nKHNyYyl9aWYob3B0cy5jb21waWxlRGVidWcmJm9wdHMuZmlsZW5hbWUpe3NyYz1zcmMrXCJcXG5cIitcIi8vIyBzb3VyY2VVUkw9XCIrc2FuaXRpemVkRmlsZW5hbWUrXCJcXG5cIn10cnl7aWYob3B0cy5hc3luYyl7dHJ5e2N0b3I9bmV3IEZ1bmN0aW9uKFwicmV0dXJuIChhc3luYyBmdW5jdGlvbigpe30pLmNvbnN0cnVjdG9yO1wiKSgpfWNhdGNoKGUpe2lmKGUgaW5zdGFuY2VvZiBTeW50YXhFcnJvcil7dGhyb3cgbmV3IEVycm9yKFwiVGhpcyBlbnZpcm9ubWVudCBkb2VzIG5vdCBzdXBwb3J0IGFzeW5jL2F3YWl0XCIpfWVsc2V7dGhyb3cgZX19fWVsc2V7Y3Rvcj1GdW5jdGlvbn1mbj1uZXcgY3RvcihvcHRzLmxvY2Fsc05hbWUrXCIsIGVzY2FwZUZuLCBpbmNsdWRlLCByZXRocm93XCIsc3JjKX1jYXRjaChlKXtpZihlIGluc3RhbmNlb2YgU3ludGF4RXJyb3Ipe2lmKG9wdHMuZmlsZW5hbWUpe2UubWVzc2FnZSs9XCIgaW4gXCIrb3B0cy5maWxlbmFtZX1lLm1lc3NhZ2UrPVwiIHdoaWxlIGNvbXBpbGluZyBlanNcXG5cXG5cIjtlLm1lc3NhZ2UrPVwiSWYgdGhlIGFib3ZlIGVycm9yIGlzIG5vdCBoZWxwZnVsLCB5b3UgbWF5IHdhbnQgdG8gdHJ5IEVKUy1MaW50OlxcblwiO2UubWVzc2FnZSs9XCJodHRwczovL2dpdGh1Yi5jb20vUnlhblppbS9FSlMtTGludFwiO2lmKCFvcHRzLmFzeW5jKXtlLm1lc3NhZ2UrPVwiXFxuXCI7ZS5tZXNzYWdlKz1cIk9yLCBpZiB5b3UgbWVhbnQgdG8gY3JlYXRlIGFuIGFzeW5jIGZ1bmN0aW9uLCBwYXNzIGBhc3luYzogdHJ1ZWAgYXMgYW4gb3B0aW9uLlwifX10aHJvdyBlfXZhciByZXR1cm5lZEZuPW9wdHMuY2xpZW50P2ZuOmZ1bmN0aW9uIGFub255bW91cyhkYXRhKXt2YXIgaW5jbHVkZT1mdW5jdGlvbihwYXRoLGluY2x1ZGVEYXRhKXt2YXIgZD11dGlscy5zaGFsbG93Q29weSh1dGlscy5jcmVhdGVOdWxsUHJvdG9PYmpXaGVyZVBvc3NpYmxlKCksZGF0YSk7aWYoaW5jbHVkZURhdGEpe2Q9dXRpbHMuc2hhbGxvd0NvcHkoZCxpbmNsdWRlRGF0YSl9cmV0dXJuIGluY2x1ZGVGaWxlKHBhdGgsb3B0cykoZCl9O3JldHVybiBmbi5hcHBseShvcHRzLmNvbnRleHQsW2RhdGF8fHV0aWxzLmNyZWF0ZU51bGxQcm90b09ialdoZXJlUG9zc2libGUoKSxlc2NhcGVGbixpbmNsdWRlLHJldGhyb3ddKX07aWYob3B0cy5maWxlbmFtZSYmdHlwZW9mIE9iamVjdC5kZWZpbmVQcm9wZXJ0eT09PVwiZnVuY3Rpb25cIil7dmFyIGZpbGVuYW1lPW9wdHMuZmlsZW5hbWU7dmFyIGJhc2VuYW1lPXBhdGguYmFzZW5hbWUoZmlsZW5hbWUscGF0aC5leHRuYW1lKGZpbGVuYW1lKSk7dHJ5e09iamVjdC5kZWZpbmVQcm9wZXJ0eShyZXR1cm5lZEZuLFwibmFtZVwiLHt2YWx1ZTpiYXNlbmFtZSx3cml0YWJsZTpmYWxzZSxlbnVtZXJhYmxlOmZhbHNlLGNvbmZpZ3VyYWJsZTp0cnVlfSl9Y2F0Y2goZSl7fX1yZXR1cm4gcmV0dXJuZWRGbn0sZ2VuZXJhdGVTb3VyY2U6ZnVuY3Rpb24oKXt2YXIgb3B0cz10aGlzLm9wdHM7aWYob3B0cy5ybVdoaXRlc3BhY2Upe3RoaXMudGVtcGxhdGVUZXh0PXRoaXMudGVtcGxhdGVUZXh0LnJlcGxhY2UoL1tcXHJcXG5dKy9nLFwiXFxuXCIpLnJlcGxhY2UoL15cXHMrfFxccyskL2dtLFwiXCIpfXRoaXMudGVtcGxhdGVUZXh0PXRoaXMudGVtcGxhdGVUZXh0LnJlcGxhY2UoL1sgXFx0XSo8JV8vZ20sXCI8JV9cIikucmVwbGFjZSgvXyU+WyBcXHRdKi9nbSxcIl8lPlwiKTt2YXIgc2VsZj10aGlzO3ZhciBtYXRjaGVzPXRoaXMucGFyc2VUZW1wbGF0ZVRleHQoKTt2YXIgZD10aGlzLm9wdHMuZGVsaW1pdGVyO3ZhciBvPXRoaXMub3B0cy5vcGVuRGVsaW1pdGVyO3ZhciBjPXRoaXMub3B0cy5jbG9zZURlbGltaXRlcjtpZihtYXRjaGVzJiZtYXRjaGVzLmxlbmd0aCl7bWF0Y2hlcy5mb3JFYWNoKGZ1bmN0aW9uKGxpbmUsaW5kZXgpe3ZhciBjbG9zaW5nO2lmKGxpbmUuaW5kZXhPZihvK2QpPT09MCYmbGluZS5pbmRleE9mKG8rZCtkKSE9PTApe2Nsb3Npbmc9bWF0Y2hlc1tpbmRleCsyXTtpZighKGNsb3Npbmc9PWQrY3x8Y2xvc2luZz09XCItXCIrZCtjfHxjbG9zaW5nPT1cIl9cIitkK2MpKXt0aHJvdyBuZXcgRXJyb3IoJ0NvdWxkIG5vdCBmaW5kIG1hdGNoaW5nIGNsb3NlIHRhZyBmb3IgXCInK2xpbmUrJ1wiLicpfX1zZWxmLnNjYW5MaW5lKGxpbmUpfSl9fSxwYXJzZVRlbXBsYXRlVGV4dDpmdW5jdGlvbigpe3ZhciBzdHI9dGhpcy50ZW1wbGF0ZVRleHQ7dmFyIHBhdD10aGlzLnJlZ2V4O3ZhciByZXN1bHQ9cGF0LmV4ZWMoc3RyKTt2YXIgYXJyPVtdO3ZhciBmaXJzdFBvczt3aGlsZShyZXN1bHQpe2ZpcnN0UG9zPXJlc3VsdC5pbmRleDtpZihmaXJzdFBvcyE9PTApe2Fyci5wdXNoKHN0ci5zdWJzdHJpbmcoMCxmaXJzdFBvcykpO3N0cj1zdHIuc2xpY2UoZmlyc3RQb3MpfWFyci5wdXNoKHJlc3VsdFswXSk7c3RyPXN0ci5zbGljZShyZXN1bHRbMF0ubGVuZ3RoKTtyZXN1bHQ9cGF0LmV4ZWMoc3RyKX1pZihzdHIpe2Fyci5wdXNoKHN0cil9cmV0dXJuIGFycn0sX2FkZE91dHB1dDpmdW5jdGlvbihsaW5lKXtpZih0aGlzLnRydW5jYXRlKXtsaW5lPWxpbmUucmVwbGFjZSgvXig/OlxcclxcbnxcXHJ8XFxuKS8sXCJcIik7dGhpcy50cnVuY2F0ZT1mYWxzZX1pZighbGluZSl7cmV0dXJuIGxpbmV9bGluZT1saW5lLnJlcGxhY2UoL1xcXFwvZyxcIlxcXFxcXFxcXCIpO2xpbmU9bGluZS5yZXBsYWNlKC9cXG4vZyxcIlxcXFxuXCIpO2xpbmU9bGluZS5yZXBsYWNlKC9cXHIvZyxcIlxcXFxyXCIpO2xpbmU9bGluZS5yZXBsYWNlKC9cIi9nLCdcXFxcXCInKTt0aGlzLnNvdXJjZSs9JyAgICA7IF9fYXBwZW5kKFwiJytsaW5lKydcIiknK1wiXFxuXCJ9LHNjYW5MaW5lOmZ1bmN0aW9uKGxpbmUpe3ZhciBzZWxmPXRoaXM7dmFyIGQ9dGhpcy5vcHRzLmRlbGltaXRlcjt2YXIgbz10aGlzLm9wdHMub3BlbkRlbGltaXRlcjt2YXIgYz10aGlzLm9wdHMuY2xvc2VEZWxpbWl0ZXI7dmFyIG5ld0xpbmVDb3VudD0wO25ld0xpbmVDb3VudD1saW5lLnNwbGl0KFwiXFxuXCIpLmxlbmd0aC0xO3N3aXRjaChsaW5lKXtjYXNlIG8rZDpjYXNlIG8rZCtcIl9cIjp0aGlzLm1vZGU9VGVtcGxhdGUubW9kZXMuRVZBTDticmVhaztjYXNlIG8rZCtcIj1cIjp0aGlzLm1vZGU9VGVtcGxhdGUubW9kZXMuRVNDQVBFRDticmVhaztjYXNlIG8rZCtcIi1cIjp0aGlzLm1vZGU9VGVtcGxhdGUubW9kZXMuUkFXO2JyZWFrO2Nhc2UgbytkK1wiI1wiOnRoaXMubW9kZT1UZW1wbGF0ZS5tb2Rlcy5DT01NRU5UO2JyZWFrO2Nhc2UgbytkK2Q6dGhpcy5tb2RlPVRlbXBsYXRlLm1vZGVzLkxJVEVSQUw7dGhpcy5zb3VyY2UrPScgICAgOyBfX2FwcGVuZChcIicrbGluZS5yZXBsYWNlKG8rZCtkLG8rZCkrJ1wiKScrXCJcXG5cIjticmVhaztjYXNlIGQrZCtjOnRoaXMubW9kZT1UZW1wbGF0ZS5tb2Rlcy5MSVRFUkFMO3RoaXMuc291cmNlKz0nICAgIDsgX19hcHBlbmQoXCInK2xpbmUucmVwbGFjZShkK2QrYyxkK2MpKydcIiknK1wiXFxuXCI7YnJlYWs7Y2FzZSBkK2M6Y2FzZVwiLVwiK2QrYzpjYXNlXCJfXCIrZCtjOmlmKHRoaXMubW9kZT09VGVtcGxhdGUubW9kZXMuTElURVJBTCl7dGhpcy5fYWRkT3V0cHV0KGxpbmUpfXRoaXMubW9kZT1udWxsO3RoaXMudHJ1bmNhdGU9bGluZS5pbmRleE9mKFwiLVwiKT09PTB8fGxpbmUuaW5kZXhPZihcIl9cIik9PT0wO2JyZWFrO2RlZmF1bHQ6aWYodGhpcy5tb2RlKXtzd2l0Y2godGhpcy5tb2RlKXtjYXNlIFRlbXBsYXRlLm1vZGVzLkVWQUw6Y2FzZSBUZW1wbGF0ZS5tb2Rlcy5FU0NBUEVEOmNhc2UgVGVtcGxhdGUubW9kZXMuUkFXOmlmKGxpbmUubGFzdEluZGV4T2YoXCIvL1wiKT5saW5lLmxhc3RJbmRleE9mKFwiXFxuXCIpKXtsaW5lKz1cIlxcblwifX1zd2l0Y2godGhpcy5tb2RlKXtjYXNlIFRlbXBsYXRlLm1vZGVzLkVWQUw6dGhpcy5zb3VyY2UrPVwiICAgIDsgXCIrbGluZStcIlxcblwiO2JyZWFrO2Nhc2UgVGVtcGxhdGUubW9kZXMuRVNDQVBFRDp0aGlzLnNvdXJjZSs9XCIgICAgOyBfX2FwcGVuZChlc2NhcGVGbihcIitzdHJpcFNlbWkobGluZSkrXCIpKVwiK1wiXFxuXCI7YnJlYWs7Y2FzZSBUZW1wbGF0ZS5tb2Rlcy5SQVc6dGhpcy5zb3VyY2UrPVwiICAgIDsgX19hcHBlbmQoXCIrc3RyaXBTZW1pKGxpbmUpK1wiKVwiK1wiXFxuXCI7YnJlYWs7Y2FzZSBUZW1wbGF0ZS5tb2Rlcy5DT01NRU5UOmJyZWFrO2Nhc2UgVGVtcGxhdGUubW9kZXMuTElURVJBTDp0aGlzLl9hZGRPdXRwdXQobGluZSk7YnJlYWt9fWVsc2V7dGhpcy5fYWRkT3V0cHV0KGxpbmUpfX1pZihzZWxmLm9wdHMuY29tcGlsZURlYnVnJiZuZXdMaW5lQ291bnQpe3RoaXMuY3VycmVudExpbmUrPW5ld0xpbmVDb3VudDt0aGlzLnNvdXJjZSs9XCIgICAgOyBfX2xpbmUgPSBcIit0aGlzLmN1cnJlbnRMaW5lK1wiXFxuXCJ9fX07ZXhwb3J0cy5lc2NhcGVYTUw9dXRpbHMuZXNjYXBlWE1MO2V4cG9ydHMuX19leHByZXNzPWV4cG9ydHMucmVuZGVyRmlsZTtleHBvcnRzLlZFUlNJT049X1ZFUlNJT05fU1RSSU5HO2V4cG9ydHMubmFtZT1fTkFNRTtpZih0eXBlb2Ygd2luZG93IT1cInVuZGVmaW5lZFwiKXt3aW5kb3cuZWpzPWV4cG9ydHN9fSx7XCIuLi9wYWNrYWdlLmpzb25cIjo2LFwiLi91dGlsc1wiOjIsZnM6MyxwYXRoOjR9XSwyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcInVzZSBzdHJpY3RcIjt2YXIgcmVnRXhwQ2hhcnM9L1t8XFxcXHt9KClbXFxdXiQrKj8uXS9nO3ZhciBoYXNPd25Qcm9wZXJ0eT1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O3ZhciBoYXNPd249ZnVuY3Rpb24ob2JqLGtleSl7cmV0dXJuIGhhc093blByb3BlcnR5LmFwcGx5KG9iaixba2V5XSl9O2V4cG9ydHMuZXNjYXBlUmVnRXhwQ2hhcnM9ZnVuY3Rpb24oc3RyaW5nKXtpZighc3RyaW5nKXtyZXR1cm5cIlwifXJldHVybiBTdHJpbmcoc3RyaW5nKS5yZXBsYWNlKHJlZ0V4cENoYXJzLFwiXFxcXCQmXCIpfTt2YXIgX0VOQ09ERV9IVE1MX1JVTEVTPXtcIiZcIjpcIiZhbXA7XCIsXCI8XCI6XCImbHQ7XCIsXCI+XCI6XCImZ3Q7XCIsJ1wiJzpcIiYjMzQ7XCIsXCInXCI6XCImIzM5O1wifTt2YXIgX01BVENIX0hUTUw9L1smPD4nXCJdL2c7ZnVuY3Rpb24gZW5jb2RlX2NoYXIoYyl7cmV0dXJuIF9FTkNPREVfSFRNTF9SVUxFU1tjXXx8Y312YXIgZXNjYXBlRnVuY1N0cj1cInZhciBfRU5DT0RFX0hUTUxfUlVMRVMgPSB7XFxuXCIrJyAgICAgIFwiJlwiOiBcIiZhbXA7XCJcXG4nKycgICAgLCBcIjxcIjogXCImbHQ7XCJcXG4nKycgICAgLCBcIj5cIjogXCImZ3Q7XCJcXG4nKycgICAgLCBcXCdcIlxcJzogXCImIzM0O1wiXFxuJysnICAgICwgXCJcXCdcIjogXCImIzM5O1wiXFxuJytcIiAgICB9XFxuXCIrXCIgICwgX01BVENIX0hUTUwgPSAvWyY8PidcXFwiXS9nO1xcblwiK1wiZnVuY3Rpb24gZW5jb2RlX2NoYXIoYykge1xcblwiK1wiICByZXR1cm4gX0VOQ09ERV9IVE1MX1JVTEVTW2NdIHx8IGM7XFxuXCIrXCJ9O1xcblwiO2V4cG9ydHMuZXNjYXBlWE1MPWZ1bmN0aW9uKG1hcmt1cCl7cmV0dXJuIG1hcmt1cD09dW5kZWZpbmVkP1wiXCI6U3RyaW5nKG1hcmt1cCkucmVwbGFjZShfTUFUQ0hfSFRNTCxlbmNvZGVfY2hhcil9O2Z1bmN0aW9uIGVzY2FwZVhNTFRvU3RyaW5nKCl7cmV0dXJuIEZ1bmN0aW9uLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHRoaXMpK1wiO1xcblwiK2VzY2FwZUZ1bmNTdHJ9dHJ5e2lmKHR5cGVvZiBPYmplY3QuZGVmaW5lUHJvcGVydHk9PT1cImZ1bmN0aW9uXCIpe09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLmVzY2FwZVhNTCxcInRvU3RyaW5nXCIse3ZhbHVlOmVzY2FwZVhNTFRvU3RyaW5nfSl9ZWxzZXtleHBvcnRzLmVzY2FwZVhNTC50b1N0cmluZz1lc2NhcGVYTUxUb1N0cmluZ319Y2F0Y2goZXJyKXtjb25zb2xlLndhcm4oXCJVbmFibGUgdG8gc2V0IGVzY2FwZVhNTC50b1N0cmluZyAoaXMgdGhlIEZ1bmN0aW9uIHByb3RvdHlwZSBmcm96ZW4/KVwiKX1leHBvcnRzLnNoYWxsb3dDb3B5PWZ1bmN0aW9uKHRvLGZyb20pe2Zyb209ZnJvbXx8e307aWYodG8hPT1udWxsJiZ0byE9PXVuZGVmaW5lZCl7Zm9yKHZhciBwIGluIGZyb20pe2lmKCFoYXNPd24oZnJvbSxwKSl7Y29udGludWV9aWYocD09PVwiX19wcm90b19fXCJ8fHA9PT1cImNvbnN0cnVjdG9yXCIpe2NvbnRpbnVlfXRvW3BdPWZyb21bcF19fXJldHVybiB0b307ZXhwb3J0cy5zaGFsbG93Q29weUZyb21MaXN0PWZ1bmN0aW9uKHRvLGZyb20sbGlzdCl7bGlzdD1saXN0fHxbXTtmcm9tPWZyb218fHt9O2lmKHRvIT09bnVsbCYmdG8hPT11bmRlZmluZWQpe2Zvcih2YXIgaT0wO2k8bGlzdC5sZW5ndGg7aSsrKXt2YXIgcD1saXN0W2ldO2lmKHR5cGVvZiBmcm9tW3BdIT1cInVuZGVmaW5lZFwiKXtpZighaGFzT3duKGZyb20scCkpe2NvbnRpbnVlfWlmKHA9PT1cIl9fcHJvdG9fX1wifHxwPT09XCJjb25zdHJ1Y3RvclwiKXtjb250aW51ZX10b1twXT1mcm9tW3BdfX19cmV0dXJuIHRvfTtleHBvcnRzLmNhY2hlPXtfZGF0YTp7fSxzZXQ6ZnVuY3Rpb24oa2V5LHZhbCl7dGhpcy5fZGF0YVtrZXldPXZhbH0sZ2V0OmZ1bmN0aW9uKGtleSl7cmV0dXJuIHRoaXMuX2RhdGFba2V5XX0scmVtb3ZlOmZ1bmN0aW9uKGtleSl7ZGVsZXRlIHRoaXMuX2RhdGFba2V5XX0scmVzZXQ6ZnVuY3Rpb24oKXt0aGlzLl9kYXRhPXt9fX07ZXhwb3J0cy5oeXBoZW5Ub0NhbWVsPWZ1bmN0aW9uKHN0cil7cmV0dXJuIHN0ci5yZXBsYWNlKC8tW2Etel0vZyxmdW5jdGlvbihtYXRjaCl7cmV0dXJuIG1hdGNoWzFdLnRvVXBwZXJDYXNlKCl9KX07ZXhwb3J0cy5jcmVhdGVOdWxsUHJvdG9PYmpXaGVyZVBvc3NpYmxlPWZ1bmN0aW9uKCl7aWYodHlwZW9mIE9iamVjdC5jcmVhdGU9PVwiZnVuY3Rpb25cIil7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIE9iamVjdC5jcmVhdGUobnVsbCl9fWlmKCEoe19fcHJvdG9fXzpudWxsfWluc3RhbmNlb2YgT2JqZWN0KSl7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJue19fcHJvdG9fXzpudWxsfX19cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJue319fSgpO2V4cG9ydHMuaGFzT3duT25seU9iamVjdD1mdW5jdGlvbihvYmope3ZhciBvPWV4cG9ydHMuY3JlYXRlTnVsbFByb3RvT2JqV2hlcmVQb3NzaWJsZSgpO2Zvcih2YXIgcCBpbiBvYmope2lmKGhhc093bihvYmoscCkpe29bcF09b2JqW3BdfX1yZXR1cm4gb319LHt9XSwzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXt9LHt9XSw0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsoZnVuY3Rpb24ocHJvY2Vzcyl7ZnVuY3Rpb24gbm9ybWFsaXplQXJyYXkocGFydHMsYWxsb3dBYm92ZVJvb3Qpe3ZhciB1cD0wO2Zvcih2YXIgaT1wYXJ0cy5sZW5ndGgtMTtpPj0wO2ktLSl7dmFyIGxhc3Q9cGFydHNbaV07aWYobGFzdD09PVwiLlwiKXtwYXJ0cy5zcGxpY2UoaSwxKX1lbHNlIGlmKGxhc3Q9PT1cIi4uXCIpe3BhcnRzLnNwbGljZShpLDEpO3VwKyt9ZWxzZSBpZih1cCl7cGFydHMuc3BsaWNlKGksMSk7dXAtLX19aWYoYWxsb3dBYm92ZVJvb3Qpe2Zvcig7dXAtLTt1cCl7cGFydHMudW5zaGlmdChcIi4uXCIpfX1yZXR1cm4gcGFydHN9ZXhwb3J0cy5yZXNvbHZlPWZ1bmN0aW9uKCl7dmFyIHJlc29sdmVkUGF0aD1cIlwiLHJlc29sdmVkQWJzb2x1dGU9ZmFsc2U7Zm9yKHZhciBpPWFyZ3VtZW50cy5sZW5ndGgtMTtpPj0tMSYmIXJlc29sdmVkQWJzb2x1dGU7aS0tKXt2YXIgcGF0aD1pPj0wP2FyZ3VtZW50c1tpXTpwcm9jZXNzLmN3ZCgpO2lmKHR5cGVvZiBwYXRoIT09XCJzdHJpbmdcIil7dGhyb3cgbmV3IFR5cGVFcnJvcihcIkFyZ3VtZW50cyB0byBwYXRoLnJlc29sdmUgbXVzdCBiZSBzdHJpbmdzXCIpfWVsc2UgaWYoIXBhdGgpe2NvbnRpbnVlfXJlc29sdmVkUGF0aD1wYXRoK1wiL1wiK3Jlc29sdmVkUGF0aDtyZXNvbHZlZEFic29sdXRlPXBhdGguY2hhckF0KDApPT09XCIvXCJ9cmVzb2x2ZWRQYXRoPW5vcm1hbGl6ZUFycmF5KGZpbHRlcihyZXNvbHZlZFBhdGguc3BsaXQoXCIvXCIpLGZ1bmN0aW9uKHApe3JldHVybiEhcH0pLCFyZXNvbHZlZEFic29sdXRlKS5qb2luKFwiL1wiKTtyZXR1cm4ocmVzb2x2ZWRBYnNvbHV0ZT9cIi9cIjpcIlwiKStyZXNvbHZlZFBhdGh8fFwiLlwifTtleHBvcnRzLm5vcm1hbGl6ZT1mdW5jdGlvbihwYXRoKXt2YXIgaXNBYnNvbHV0ZT1leHBvcnRzLmlzQWJzb2x1dGUocGF0aCksdHJhaWxpbmdTbGFzaD1zdWJzdHIocGF0aCwtMSk9PT1cIi9cIjtwYXRoPW5vcm1hbGl6ZUFycmF5KGZpbHRlcihwYXRoLnNwbGl0KFwiL1wiKSxmdW5jdGlvbihwKXtyZXR1cm4hIXB9KSwhaXNBYnNvbHV0ZSkuam9pbihcIi9cIik7aWYoIXBhdGgmJiFpc0Fic29sdXRlKXtwYXRoPVwiLlwifWlmKHBhdGgmJnRyYWlsaW5nU2xhc2gpe3BhdGgrPVwiL1wifXJldHVybihpc0Fic29sdXRlP1wiL1wiOlwiXCIpK3BhdGh9O2V4cG9ydHMuaXNBYnNvbHV0ZT1mdW5jdGlvbihwYXRoKXtyZXR1cm4gcGF0aC5jaGFyQXQoMCk9PT1cIi9cIn07ZXhwb3J0cy5qb2luPWZ1bmN0aW9uKCl7dmFyIHBhdGhzPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywwKTtyZXR1cm4gZXhwb3J0cy5ub3JtYWxpemUoZmlsdGVyKHBhdGhzLGZ1bmN0aW9uKHAsaW5kZXgpe2lmKHR5cGVvZiBwIT09XCJzdHJpbmdcIil7dGhyb3cgbmV3IFR5cGVFcnJvcihcIkFyZ3VtZW50cyB0byBwYXRoLmpvaW4gbXVzdCBiZSBzdHJpbmdzXCIpfXJldHVybiBwfSkuam9pbihcIi9cIikpfTtleHBvcnRzLnJlbGF0aXZlPWZ1bmN0aW9uKGZyb20sdG8pe2Zyb209ZXhwb3J0cy5yZXNvbHZlKGZyb20pLnN1YnN0cigxKTt0bz1leHBvcnRzLnJlc29sdmUodG8pLnN1YnN0cigxKTtmdW5jdGlvbiB0cmltKGFycil7dmFyIHN0YXJ0PTA7Zm9yKDtzdGFydDxhcnIubGVuZ3RoO3N0YXJ0Kyspe2lmKGFycltzdGFydF0hPT1cIlwiKWJyZWFrfXZhciBlbmQ9YXJyLmxlbmd0aC0xO2Zvcig7ZW5kPj0wO2VuZC0tKXtpZihhcnJbZW5kXSE9PVwiXCIpYnJlYWt9aWYoc3RhcnQ+ZW5kKXJldHVybltdO3JldHVybiBhcnIuc2xpY2Uoc3RhcnQsZW5kLXN0YXJ0KzEpfXZhciBmcm9tUGFydHM9dHJpbShmcm9tLnNwbGl0KFwiL1wiKSk7dmFyIHRvUGFydHM9dHJpbSh0by5zcGxpdChcIi9cIikpO3ZhciBsZW5ndGg9TWF0aC5taW4oZnJvbVBhcnRzLmxlbmd0aCx0b1BhcnRzLmxlbmd0aCk7dmFyIHNhbWVQYXJ0c0xlbmd0aD1sZW5ndGg7Zm9yKHZhciBpPTA7aTxsZW5ndGg7aSsrKXtpZihmcm9tUGFydHNbaV0hPT10b1BhcnRzW2ldKXtzYW1lUGFydHNMZW5ndGg9aTticmVha319dmFyIG91dHB1dFBhcnRzPVtdO2Zvcih2YXIgaT1zYW1lUGFydHNMZW5ndGg7aTxmcm9tUGFydHMubGVuZ3RoO2krKyl7b3V0cHV0UGFydHMucHVzaChcIi4uXCIpfW91dHB1dFBhcnRzPW91dHB1dFBhcnRzLmNvbmNhdCh0b1BhcnRzLnNsaWNlKHNhbWVQYXJ0c0xlbmd0aCkpO3JldHVybiBvdXRwdXRQYXJ0cy5qb2luKFwiL1wiKX07ZXhwb3J0cy5zZXA9XCIvXCI7ZXhwb3J0cy5kZWxpbWl0ZXI9XCI6XCI7ZXhwb3J0cy5kaXJuYW1lPWZ1bmN0aW9uKHBhdGgpe2lmKHR5cGVvZiBwYXRoIT09XCJzdHJpbmdcIilwYXRoPXBhdGgrXCJcIjtpZihwYXRoLmxlbmd0aD09PTApcmV0dXJuXCIuXCI7dmFyIGNvZGU9cGF0aC5jaGFyQ29kZUF0KDApO3ZhciBoYXNSb290PWNvZGU9PT00Nzt2YXIgZW5kPS0xO3ZhciBtYXRjaGVkU2xhc2g9dHJ1ZTtmb3IodmFyIGk9cGF0aC5sZW5ndGgtMTtpPj0xOy0taSl7Y29kZT1wYXRoLmNoYXJDb2RlQXQoaSk7aWYoY29kZT09PTQ3KXtpZighbWF0Y2hlZFNsYXNoKXtlbmQ9aTticmVha319ZWxzZXttYXRjaGVkU2xhc2g9ZmFsc2V9fWlmKGVuZD09PS0xKXJldHVybiBoYXNSb290P1wiL1wiOlwiLlwiO2lmKGhhc1Jvb3QmJmVuZD09PTEpe3JldHVyblwiL1wifXJldHVybiBwYXRoLnNsaWNlKDAsZW5kKX07ZnVuY3Rpb24gYmFzZW5hbWUocGF0aCl7aWYodHlwZW9mIHBhdGghPT1cInN0cmluZ1wiKXBhdGg9cGF0aCtcIlwiO3ZhciBzdGFydD0wO3ZhciBlbmQ9LTE7dmFyIG1hdGNoZWRTbGFzaD10cnVlO3ZhciBpO2ZvcihpPXBhdGgubGVuZ3RoLTE7aT49MDstLWkpe2lmKHBhdGguY2hhckNvZGVBdChpKT09PTQ3KXtpZighbWF0Y2hlZFNsYXNoKXtzdGFydD1pKzE7YnJlYWt9fWVsc2UgaWYoZW5kPT09LTEpe21hdGNoZWRTbGFzaD1mYWxzZTtlbmQ9aSsxfX1pZihlbmQ9PT0tMSlyZXR1cm5cIlwiO3JldHVybiBwYXRoLnNsaWNlKHN0YXJ0LGVuZCl9ZXhwb3J0cy5iYXNlbmFtZT1mdW5jdGlvbihwYXRoLGV4dCl7dmFyIGY9YmFzZW5hbWUocGF0aCk7aWYoZXh0JiZmLnN1YnN0cigtMSpleHQubGVuZ3RoKT09PWV4dCl7Zj1mLnN1YnN0cigwLGYubGVuZ3RoLWV4dC5sZW5ndGgpfXJldHVybiBmfTtleHBvcnRzLmV4dG5hbWU9ZnVuY3Rpb24ocGF0aCl7aWYodHlwZW9mIHBhdGghPT1cInN0cmluZ1wiKXBhdGg9cGF0aCtcIlwiO3ZhciBzdGFydERvdD0tMTt2YXIgc3RhcnRQYXJ0PTA7dmFyIGVuZD0tMTt2YXIgbWF0Y2hlZFNsYXNoPXRydWU7dmFyIHByZURvdFN0YXRlPTA7Zm9yKHZhciBpPXBhdGgubGVuZ3RoLTE7aT49MDstLWkpe3ZhciBjb2RlPXBhdGguY2hhckNvZGVBdChpKTtpZihjb2RlPT09NDcpe2lmKCFtYXRjaGVkU2xhc2gpe3N0YXJ0UGFydD1pKzE7YnJlYWt9Y29udGludWV9aWYoZW5kPT09LTEpe21hdGNoZWRTbGFzaD1mYWxzZTtlbmQ9aSsxfWlmKGNvZGU9PT00Nil7aWYoc3RhcnREb3Q9PT0tMSlzdGFydERvdD1pO2Vsc2UgaWYocHJlRG90U3RhdGUhPT0xKXByZURvdFN0YXRlPTF9ZWxzZSBpZihzdGFydERvdCE9PS0xKXtwcmVEb3RTdGF0ZT0tMX19aWYoc3RhcnREb3Q9PT0tMXx8ZW5kPT09LTF8fHByZURvdFN0YXRlPT09MHx8cHJlRG90U3RhdGU9PT0xJiZzdGFydERvdD09PWVuZC0xJiZzdGFydERvdD09PXN0YXJ0UGFydCsxKXtyZXR1cm5cIlwifXJldHVybiBwYXRoLnNsaWNlKHN0YXJ0RG90LGVuZCl9O2Z1bmN0aW9uIGZpbHRlcih4cyxmKXtpZih4cy5maWx0ZXIpcmV0dXJuIHhzLmZpbHRlcihmKTt2YXIgcmVzPVtdO2Zvcih2YXIgaT0wO2k8eHMubGVuZ3RoO2krKyl7aWYoZih4c1tpXSxpLHhzKSlyZXMucHVzaCh4c1tpXSl9cmV0dXJuIHJlc312YXIgc3Vic3RyPVwiYWJcIi5zdWJzdHIoLTEpPT09XCJiXCI/ZnVuY3Rpb24oc3RyLHN0YXJ0LGxlbil7cmV0dXJuIHN0ci5zdWJzdHIoc3RhcnQsbGVuKX06ZnVuY3Rpb24oc3RyLHN0YXJ0LGxlbil7aWYoc3RhcnQ8MClzdGFydD1zdHIubGVuZ3RoK3N0YXJ0O3JldHVybiBzdHIuc3Vic3RyKHN0YXJ0LGxlbil9fSkuY2FsbCh0aGlzLHJlcXVpcmUoXCJfcHJvY2Vzc1wiKSl9LHtfcHJvY2Vzczo1fV0sNTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7dmFyIHByb2Nlc3M9bW9kdWxlLmV4cG9ydHM9e307dmFyIGNhY2hlZFNldFRpbWVvdXQ7dmFyIGNhY2hlZENsZWFyVGltZW91dDtmdW5jdGlvbiBkZWZhdWx0U2V0VGltb3V0KCl7dGhyb3cgbmV3IEVycm9yKFwic2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZFwiKX1mdW5jdGlvbiBkZWZhdWx0Q2xlYXJUaW1lb3V0KCl7dGhyb3cgbmV3IEVycm9yKFwiY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkXCIpfShmdW5jdGlvbigpe3RyeXtpZih0eXBlb2Ygc2V0VGltZW91dD09PVwiZnVuY3Rpb25cIil7Y2FjaGVkU2V0VGltZW91dD1zZXRUaW1lb3V0fWVsc2V7Y2FjaGVkU2V0VGltZW91dD1kZWZhdWx0U2V0VGltb3V0fX1jYXRjaChlKXtjYWNoZWRTZXRUaW1lb3V0PWRlZmF1bHRTZXRUaW1vdXR9dHJ5e2lmKHR5cGVvZiBjbGVhclRpbWVvdXQ9PT1cImZ1bmN0aW9uXCIpe2NhY2hlZENsZWFyVGltZW91dD1jbGVhclRpbWVvdXR9ZWxzZXtjYWNoZWRDbGVhclRpbWVvdXQ9ZGVmYXVsdENsZWFyVGltZW91dH19Y2F0Y2goZSl7Y2FjaGVkQ2xlYXJUaW1lb3V0PWRlZmF1bHRDbGVhclRpbWVvdXR9fSkoKTtmdW5jdGlvbiBydW5UaW1lb3V0KGZ1bil7aWYoY2FjaGVkU2V0VGltZW91dD09PXNldFRpbWVvdXQpe3JldHVybiBzZXRUaW1lb3V0KGZ1biwwKX1pZigoY2FjaGVkU2V0VGltZW91dD09PWRlZmF1bHRTZXRUaW1vdXR8fCFjYWNoZWRTZXRUaW1lb3V0KSYmc2V0VGltZW91dCl7Y2FjaGVkU2V0VGltZW91dD1zZXRUaW1lb3V0O3JldHVybiBzZXRUaW1lb3V0KGZ1biwwKX10cnl7cmV0dXJuIGNhY2hlZFNldFRpbWVvdXQoZnVuLDApfWNhdGNoKGUpe3RyeXtyZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKG51bGwsZnVuLDApfWNhdGNoKGUpe3JldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwodGhpcyxmdW4sMCl9fX1mdW5jdGlvbiBydW5DbGVhclRpbWVvdXQobWFya2VyKXtpZihjYWNoZWRDbGVhclRpbWVvdXQ9PT1jbGVhclRpbWVvdXQpe3JldHVybiBjbGVhclRpbWVvdXQobWFya2VyKX1pZigoY2FjaGVkQ2xlYXJUaW1lb3V0PT09ZGVmYXVsdENsZWFyVGltZW91dHx8IWNhY2hlZENsZWFyVGltZW91dCkmJmNsZWFyVGltZW91dCl7Y2FjaGVkQ2xlYXJUaW1lb3V0PWNsZWFyVGltZW91dDtyZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcil9dHJ5e3JldHVybiBjYWNoZWRDbGVhclRpbWVvdXQobWFya2VyKX1jYXRjaChlKXt0cnl7cmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsbWFya2VyKX1jYXRjaChlKXtyZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcyxtYXJrZXIpfX19dmFyIHF1ZXVlPVtdO3ZhciBkcmFpbmluZz1mYWxzZTt2YXIgY3VycmVudFF1ZXVlO3ZhciBxdWV1ZUluZGV4PS0xO2Z1bmN0aW9uIGNsZWFuVXBOZXh0VGljaygpe2lmKCFkcmFpbmluZ3x8IWN1cnJlbnRRdWV1ZSl7cmV0dXJufWRyYWluaW5nPWZhbHNlO2lmKGN1cnJlbnRRdWV1ZS5sZW5ndGgpe3F1ZXVlPWN1cnJlbnRRdWV1ZS5jb25jYXQocXVldWUpfWVsc2V7cXVldWVJbmRleD0tMX1pZihxdWV1ZS5sZW5ndGgpe2RyYWluUXVldWUoKX19ZnVuY3Rpb24gZHJhaW5RdWV1ZSgpe2lmKGRyYWluaW5nKXtyZXR1cm59dmFyIHRpbWVvdXQ9cnVuVGltZW91dChjbGVhblVwTmV4dFRpY2spO2RyYWluaW5nPXRydWU7dmFyIGxlbj1xdWV1ZS5sZW5ndGg7d2hpbGUobGVuKXtjdXJyZW50UXVldWU9cXVldWU7cXVldWU9W107d2hpbGUoKytxdWV1ZUluZGV4PGxlbil7aWYoY3VycmVudFF1ZXVlKXtjdXJyZW50UXVldWVbcXVldWVJbmRleF0ucnVuKCl9fXF1ZXVlSW5kZXg9LTE7bGVuPXF1ZXVlLmxlbmd0aH1jdXJyZW50UXVldWU9bnVsbDtkcmFpbmluZz1mYWxzZTtydW5DbGVhclRpbWVvdXQodGltZW91dCl9cHJvY2Vzcy5uZXh0VGljaz1mdW5jdGlvbihmdW4pe3ZhciBhcmdzPW5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoLTEpO2lmKGFyZ3VtZW50cy5sZW5ndGg+MSl7Zm9yKHZhciBpPTE7aTxhcmd1bWVudHMubGVuZ3RoO2krKyl7YXJnc1tpLTFdPWFyZ3VtZW50c1tpXX19cXVldWUucHVzaChuZXcgSXRlbShmdW4sYXJncykpO2lmKHF1ZXVlLmxlbmd0aD09PTEmJiFkcmFpbmluZyl7cnVuVGltZW91dChkcmFpblF1ZXVlKX19O2Z1bmN0aW9uIEl0ZW0oZnVuLGFycmF5KXt0aGlzLmZ1bj1mdW47dGhpcy5hcnJheT1hcnJheX1JdGVtLnByb3RvdHlwZS5ydW49ZnVuY3Rpb24oKXt0aGlzLmZ1bi5hcHBseShudWxsLHRoaXMuYXJyYXkpfTtwcm9jZXNzLnRpdGxlPVwiYnJvd3NlclwiO3Byb2Nlc3MuYnJvd3Nlcj10cnVlO3Byb2Nlc3MuZW52PXt9O3Byb2Nlc3MuYXJndj1bXTtwcm9jZXNzLnZlcnNpb249XCJcIjtwcm9jZXNzLnZlcnNpb25zPXt9O2Z1bmN0aW9uIG5vb3AoKXt9cHJvY2Vzcy5vbj1ub29wO3Byb2Nlc3MuYWRkTGlzdGVuZXI9bm9vcDtwcm9jZXNzLm9uY2U9bm9vcDtwcm9jZXNzLm9mZj1ub29wO3Byb2Nlc3MucmVtb3ZlTGlzdGVuZXI9bm9vcDtwcm9jZXNzLnJlbW92ZUFsbExpc3RlbmVycz1ub29wO3Byb2Nlc3MuZW1pdD1ub29wO3Byb2Nlc3MucHJlcGVuZExpc3RlbmVyPW5vb3A7cHJvY2Vzcy5wcmVwZW5kT25jZUxpc3RlbmVyPW5vb3A7cHJvY2Vzcy5saXN0ZW5lcnM9ZnVuY3Rpb24obmFtZSl7cmV0dXJuW119O3Byb2Nlc3MuYmluZGluZz1mdW5jdGlvbihuYW1lKXt0aHJvdyBuZXcgRXJyb3IoXCJwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZFwiKX07cHJvY2Vzcy5jd2Q9ZnVuY3Rpb24oKXtyZXR1cm5cIi9cIn07cHJvY2Vzcy5jaGRpcj1mdW5jdGlvbihkaXIpe3Rocm93IG5ldyBFcnJvcihcInByb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZFwiKX07cHJvY2Vzcy51bWFzaz1mdW5jdGlvbigpe3JldHVybiAwfX0se31dLDY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe21vZHVsZS5leHBvcnRzPXtuYW1lOlwiZWpzXCIsZGVzY3JpcHRpb246XCJFbWJlZGRlZCBKYXZhU2NyaXB0IHRlbXBsYXRlc1wiLGtleXdvcmRzOltcInRlbXBsYXRlXCIsXCJlbmdpbmVcIixcImVqc1wiXSx2ZXJzaW9uOlwiMy4xLjlcIixhdXRob3I6XCJNYXR0aGV3IEVlcm5pc3NlIDxtZGVAZmxlZWdpeC5vcmc+IChodHRwOi8vZmxlZWdpeC5vcmcpXCIsbGljZW5zZTpcIkFwYWNoZS0yLjBcIixiaW46e2VqczpcIi4vYmluL2NsaS5qc1wifSxtYWluOlwiLi9saWIvZWpzLmpzXCIsanNkZWxpdnI6XCJlanMubWluLmpzXCIsdW5wa2c6XCJlanMubWluLmpzXCIscmVwb3NpdG9yeTp7dHlwZTpcImdpdFwiLHVybDpcImdpdDovL2dpdGh1Yi5jb20vbWRlL2Vqcy5naXRcIn0sYnVnczpcImh0dHBzOi8vZ2l0aHViLmNvbS9tZGUvZWpzL2lzc3Vlc1wiLGhvbWVwYWdlOlwiaHR0cHM6Ly9naXRodWIuY29tL21kZS9lanNcIixkZXBlbmRlbmNpZXM6e2pha2U6XCJeMTAuOC41XCJ9LGRldkRlcGVuZGVuY2llczp7YnJvd3NlcmlmeTpcIl4xNi41LjFcIixlc2xpbnQ6XCJeNi44LjBcIixcImdpdC1kaXJlY3RvcnktZGVwbG95XCI6XCJeMS41LjFcIixqc2RvYzpcIl40LjAuMlwiLFwibHJ1LWNhY2hlXCI6XCJeNC4wLjFcIixtb2NoYTpcIl4xMC4yLjBcIixcInVnbGlmeS1qc1wiOlwiXjMuMy4xNlwifSxlbmdpbmVzOntub2RlOlwiPj0wLjEwLjBcIn0sc2NyaXB0czp7dGVzdDpcIm5weCBqYWtlIHRlc3RcIn19fSx7fV19LHt9LFsxXSkoMSl9KTtcbiIsIlxyXG5pbXBvcnQgJ2Vqcy9lanMubWluJztcclxuXHJcbmxldCBjb3JldWlUYWJsZVV0aWxzID0ge1xyXG5cclxuICAgIF90ZW1wbGF0ZXM6IHt9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCe0LHRitC10LTQuNC90LXQvdC40LUg0LDRgtGA0LjQsdGD0YLQvtCyXHJcbiAgICAgKiBAcGFyYW0gYXR0cjFcclxuICAgICAqIEBwYXJhbSBhdHRyMlxyXG4gICAgICogQHJldHVybnMge29iamVjdH1cclxuICAgICAqL1xyXG4gICAgbWVyZ2VBdHRyOiBmdW5jdGlvbiAoYXR0cjEsIGF0dHIyKSB7XHJcblxyXG4gICAgICAgIGxldCBtZXJnZUF0dHIgPSBPYmplY3QuYXNzaWduKHt9LCBhdHRyMSk7XHJcblxyXG4gICAgICAgIGlmICh0eXBlb2YgYXR0cjIgPT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgICAgICQuZWFjaChhdHRyMiwgZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAobWVyZ2VBdHRyLmhhc093blByb3BlcnR5KG5hbWUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5hbWUgPT09ICdjbGFzcycpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWVyZ2VBdHRyW25hbWVdICs9ICcgJyArIHZhbHVlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG5hbWUgPT09ICdzdHlsZScpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWVyZ2VBdHRyW25hbWVdICs9ICc7JyArIHZhbHVlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXJnZUF0dHJbbmFtZV0gPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBtZXJnZUF0dHJbbmFtZV0gPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gbWVyZ2VBdHRyO1xyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQn9GA0L7QstC10YDQutCwINC90LAg0YfQuNGB0LvQvlxyXG4gICAgICogQHBhcmFtIG51bVxyXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBpc051bWVyaWM6IGZ1bmN0aW9uKG51bSkge1xyXG4gICAgICAgIHJldHVybiAodHlwZW9mKG51bSkgPT09ICdudW1iZXInIHx8IHR5cGVvZihudW0pID09PSBcInN0cmluZ1wiICYmIG51bS50cmltKCkgIT09ICcnKSAmJiAhIGlzTmFOKG51bSk7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBoYXNoQ29kZTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY3JjMzIoKG5ldyBEYXRlKCkuZ2V0VGltZSgpICsgTWF0aC5yYW5kb20oKSkudG9TdHJpbmcoKSkudG9TdHJpbmcoMTYpO1xyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQn9GA0L7QstC10YDQutCwINC90LAg0L7QsdGK0LXQutGCXHJcbiAgICAgKiBAcGFyYW0gdmFsdWVcclxuICAgICAqL1xyXG4gICAgaXNPYmplY3Q6IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG5cclxuICAgICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJlxyXG4gICAgICAgICAgICAhIEFycmF5LmlzQXJyYXkodmFsdWUpICYmXHJcbiAgICAgICAgICAgIHZhbHVlICE9PSBudWxsO1xyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0gc3RyXHJcbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfVxyXG4gICAgICovXHJcbiAgICBjcmMzMjogZnVuY3Rpb24gKHN0cikge1xyXG5cclxuICAgICAgICBmb3IgKHZhciBhLCBvID0gW10sIGMgPSAwOyBjIDwgMjU2OyBjKyspIHtcclxuICAgICAgICAgICAgYSA9IGM7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGYgPSAwOyBmIDwgODsgZisrKSB7XHJcbiAgICAgICAgICAgICAgICBhID0gMSAmIGEgPyAzOTg4MjkyMzg0IF4gYSA+Pj4gMSA6IGEgPj4+IDFcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBvW2NdID0gYVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZm9yICh2YXIgbiA9IC0xLCB0ID0gMDsgdCA8IHN0ci5sZW5ndGg7IHQrKykge1xyXG4gICAgICAgICAgICBuID0gbiA+Pj4gOCBeIG9bMjU1ICYgKG4gXiBzdHIuY2hhckNvZGVBdCh0KSldXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gKC0xIF4gbikgPj4+IDA7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCg0LXQvdC00LXRgCDRiNCw0LHQu9C+0L3QsFxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRlbXBsYXRlXHJcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gb3B0aW9uc1xyXG4gICAgICogQHJldHVybnMge3N0cmluZ31cclxuICAgICAqL1xyXG4gICAgcmVuZGVyOiBmdW5jdGlvbiAodGVtcGxhdGUsIG9wdGlvbnMpIHtcclxuXHJcbiAgICAgICAgbGV0IHRwbE5hbWUgPSB0aGlzLmNyYzMyKHRlbXBsYXRlKTtcclxuXHJcbiAgICAgICAgaWYgKCAhIHRoaXMuX3RlbXBsYXRlcy5oYXNPd25Qcm9wZXJ0eSh0cGxOYW1lKSkge1xyXG4gICAgICAgICAgICB0aGlzLl90ZW1wbGF0ZXNbdHBsTmFtZV0gPSBlanMuY29tcGlsZSh0ZW1wbGF0ZSlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLl90ZW1wbGF0ZXNbdHBsTmFtZV0ob3B0aW9ucyk7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCg0LDQt9C80LXRgNC90L7RgdGC0Ywg0YHRgtGA0L7QutC4XHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyXHJcbiAgICAgKiBAcGFyYW0ge2ludH0gICAgY291bnRcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSByZXBlYXRcclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIHN0clBhZExlZnQ6IGZ1bmN0aW9uKHN0ciwgY291bnQsIHJlcGVhdCkge1xyXG5cclxuICAgICAgICBzdHIgPSBTdHJpbmcoc3RyKTtcclxuXHJcbiAgICAgICAgaWYgKHN0ci5sZW5ndGggPj0gY291bnQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHN0cjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJlcGVhdCA9IHJlcGVhdCA/IHJlcGVhdCA6ICcwJztcclxuXHJcbiAgICAgICAgcmV0dXJuIChyZXBlYXQucmVwZWF0KGNvdW50KSArIHN0cikuc2xpY2UoLShjb3VudCkpO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY29yZXVpVGFibGVVdGlsczsiLCJcclxuaW1wb3J0IGNvcmV1aVRhYmxlVHBsICAgZnJvbSAnLi9jb3JldWkudGFibGUudGVtcGxhdGVzJztcclxuaW1wb3J0IGNvcmV1aVRhYmxlVXRpbHMgZnJvbSBcIi4vY29yZXVpLnRhYmxlLnV0aWxzXCI7XHJcblxyXG5cclxubGV0IGNvcmV1aVRhYmxlUmVuZGVyID0ge1xyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCh0LHQvtGA0LrQsCDRgtCw0LHQu9C40YbRi1xyXG4gICAgICogQHBhcmFtIHtvYmplY3R9IHRhYmxlXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICByZW5kZXJUYWJsZTogZnVuY3Rpb24gKHRhYmxlKSB7XHJcblxyXG4gICAgICAgIGxldCBvcHRpb25zICAgICAgICAgPSB0YWJsZS5nZXRPcHRpb25zKCk7XHJcbiAgICAgICAgbGV0IHJlY29yZHNFbGVtZW50cyA9IFtdO1xyXG4gICAgICAgIGxldCBjb2x1bW5zSGVhZGVyICAgPSAnJztcclxuICAgICAgICBsZXQgY29sdW1uc0Zvb3RlciAgID0gJyc7XHJcbiAgICAgICAgbGV0IGNvbEdyb3VwcyAgICAgICA9IFtdO1xyXG4gICAgICAgIGxldCBjb2x1bW5FbGVtZW50cyAgPSAkKGNvcmV1aVRhYmxlVHBsWyd0YWJsZS9jb2x1bW5zL3RyLmh0bWwnXSk7XHJcblxyXG5cclxuICAgICAgICAvLyDQmtC+0LvQvtC90LrQuFxyXG4gICAgICAgIGlmICh0YWJsZS5fY29sdW1ucy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICQuZWFjaCh0YWJsZS5fY29sdW1ucywgZnVuY3Rpb24gKGtleSwgY29sdW1uKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoICEgY29sdW1uLmlzU2hvdygpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGxldCBjb2x1bW5PcHRpb25zICA9IGNvbHVtbi5nZXRPcHRpb25zKCk7XHJcbiAgICAgICAgICAgICAgICBsZXQgYXR0cmlidXRlcyAgICAgPSBbXTtcclxuICAgICAgICAgICAgICAgIGxldCBzb3J0YWJsZSAgICAgICA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICBsZXQgbWVudUVsZW1lbnRzICAgPSBbXTtcclxuICAgICAgICAgICAgICAgIGxldCBtZW51U2hvd0Fsd2F5cyA9ICcnO1xyXG4gICAgICAgICAgICAgICAgbGV0IG1lbnVQb3NpdGlvbiAgID0gJ2VuZCc7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGNvbHVtbk9wdGlvbnMuaGFzT3duUHJvcGVydHkoJ2ZpZWxkJykgJiYgdHlwZW9mIGNvbHVtbk9wdGlvbnMuZmllbGQgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29sdW1uT3B0aW9ucy5hdHRySGVhZGVyID0gY29yZXVpVGFibGVVdGlscy5tZXJnZUF0dHIoY29sdW1uT3B0aW9ucy5hdHRySGVhZGVyLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiZGF0YS1maWVsZFwiOiBjb2x1bW5PcHRpb25zLmZpZWxkXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGNvbHVtbk9wdGlvbnMuaGFzT3duUHJvcGVydHkoJ2ZpeGVkJykgJiYgdHlwZW9mIGNvbHVtbk9wdGlvbnMuZml4ZWQgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29sdW1uT3B0aW9ucy5hdHRySGVhZGVyID0gY29yZXVpVGFibGVVdGlscy5tZXJnZUF0dHIoY29sdW1uT3B0aW9ucy5hdHRySGVhZGVyLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzOiAnY29yZXVpLXRhYmxlX19maXhlZF8nICsgY29sdW1uT3B0aW9ucy5maXhlZFxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBjb2x1bW5PcHRpb25zLmF0dHIgPSBjb3JldWlUYWJsZVV0aWxzLm1lcmdlQXR0cihjb2x1bW5PcHRpb25zLmF0dHIsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M6ICdjb3JldWktdGFibGVfX2ZpeGVkXycgKyBjb2x1bW5PcHRpb25zLmZpeGVkXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGNvbHVtbk9wdGlvbnMudHlwZSAhPT0gJ251bWJlcnMnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbHVtbk9wdGlvbnMuaGFzT3duUHJvcGVydHkoJ3NvcnRhYmxlJykgJiYgY29sdW1uT3B0aW9ucy5zb3J0YWJsZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2x1bW5PcHRpb25zLmF0dHJIZWFkZXIgPSBjb3JldWlUYWJsZVV0aWxzLm1lcmdlQXR0cihjb2x1bW5PcHRpb25zLmF0dHJIZWFkZXIsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzOiAnY29yZXVpLXRhYmxlX19zb3J0YWJsZSdcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAodGFibGUuX3NvcnQubGVuZ3RoID4gMCAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2x1bW5PcHRpb25zLmhhc093blByb3BlcnR5KCdmaWVsZCcpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVvZiBjb2x1bW5PcHRpb25zLmZpZWxkID09PSAnc3RyaW5nJyAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2x1bW5PcHRpb25zLmZpZWxkXHJcbiAgICAgICAgICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICQuZWFjaCh0YWJsZS5fc29ydCwgZnVuY3Rpb24gKGtleSwgc29ydEZpZWxkKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbHVtbk9wdGlvbnMuZmllbGQgPT09IHNvcnRGaWVsZC5maWVsZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzb3J0RmllbGQub3JkZXIgPT09ICdhc2MnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvcnRhYmxlID0gJ2FzYyc7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc29ydEZpZWxkLm9yZGVyID09PSAnZGVzYycpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc29ydGFibGUgPSAnZGVzYyc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5zaG93SGVhZGVycyAmJlxyXG4gICAgICAgICAgICAgICAgICAgIGNvbHVtbk9wdGlvbnMuaGFzT3duUHJvcGVydHkoJ21lbnUnKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgIGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QoY29sdW1uT3B0aW9ucy5tZW51KSAmJlxyXG4gICAgICAgICAgICAgICAgICAgIGNvbHVtbk9wdGlvbnMubWVudS5oYXNPd25Qcm9wZXJ0eSgnaXRlbXMnKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgIEFycmF5LmlzQXJyYXkoY29sdW1uT3B0aW9ucy5tZW51Lml0ZW1zKVxyXG4gICAgICAgICAgICAgICAgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjb2x1bW5PcHRpb25zLm1lbnUuaGFzT3duUHJvcGVydHkoJ3Nob3dBbHdheXMnKSAmJiBjb2x1bW5PcHRpb25zLm1lbnUuc2hvd0Fsd2F5cykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtZW51U2hvd0Fsd2F5cyA9ICdjb3JldWktdGFibGVfX2NvbHVtbi1tZW51LWFsd2F5cyc7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoY29sdW1uT3B0aW9ucy5tZW51Lmhhc093blByb3BlcnR5KCdwb3NpdGlvbicpICYmIHR5cGVvZiBjb2x1bW5PcHRpb25zLm1lbnUucG9zaXRpb24gPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lbnVQb3NpdGlvbiA9IGNvbHVtbk9wdGlvbnMubWVudS5wb3NpdGlvbjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGNvbHVtbk9wdGlvbnMubWVudS5pdGVtcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KGl0ZW0pICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtLmhhc093blByb3BlcnR5KCd0eXBlJykgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVvZiBpdGVtLnR5cGUgPT09ICdzdHJpbmcnICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtLnR5cGVcclxuICAgICAgICAgICAgICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGl0ZW0udHlwZS50b0xvd2VyQ2FzZSgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnYnV0dG9uJzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0uaGFzT3duUHJvcGVydHkoJ3RleHQnKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGl0ZW0udGV4dCA9PT0gJ3N0cmluZycgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0uaGFzT3duUHJvcGVydHkoJ29uQ2xpY2snKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWydzdHJpbmcnLCAnZnVuY3Rpb24nXS5pbmRleE9mKHR5cGVvZiBpdGVtLm9uQ2xpY2spID49IDAgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0udGV4dC5sZW5ndGggPiAwXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGF0dHJJdGVtID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgYXR0ciAgICAgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2J1dHRvbicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M6ICdkcm9wZG93bi1pdGVtJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0uaGFzT3duUHJvcGVydHkoJ2F0dHInKSAmJiBjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KGl0ZW0uYXR0cikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyID0gY29yZXVpVGFibGVVdGlscy5tZXJnZUF0dHIoYXR0ciwgaXRlbS5hdHRyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLmVhY2goYXR0ciwgZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0ckl0ZW0ucHVzaChuYW1lICsgJz1cIicgKyB2YWx1ZSArICdcIicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG1lbnVFbGVtZW50ID0gJChjb3JldWlUYWJsZVV0aWxzLnJlbmRlcihjb3JldWlUYWJsZVRwbFsndGFibGUvY29sdW1ucy9tZW51L2J1dHRvbi5odG1sJ10sIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBpdGVtLnRleHQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cjogYXR0ckl0ZW0uam9pbignICcpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lbnVFbGVtZW50LmZpbmQoJ2J1dHRvbicpLmNsaWNrKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGl0ZW0ub25DbGljayA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtLm9uQ2xpY2sodGFibGUpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBpdGVtLm9uQ2xpY2sgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChuZXcgRnVuY3Rpb24oJ3RhYmxlJywgaXRlbS5vbkNsaWNrKSkodGFibGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lbnVFbGVtZW50cy5wdXNoKG1lbnVFbGVtZW50KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnbGluayc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpdGVtLmhhc093blByb3BlcnR5KCd0ZXh0JykgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0uaGFzT3duUHJvcGVydHkoJ3VybCcpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlb2YgaXRlbS50ZXh0ID09PSAnc3RyaW5nJyAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGl0ZW0udXJsID09PSAnc3RyaW5nJyAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS50ZXh0Lmxlbmd0aCA+IDAgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0udXJsLmxlbmd0aCA+IDBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgYXR0ckl0ZW0gPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBhdHRyICAgICA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBocmVmOiBpdGVtLnVybCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzczogJ2Ryb3Bkb3duLWl0ZW0nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbS5oYXNPd25Qcm9wZXJ0eSgnYXR0cicpICYmIGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QoaXRlbS5hdHRyKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHIgPSBjb3JldWlUYWJsZVV0aWxzLm1lcmdlQXR0cihhdHRyLCBpdGVtLmF0dHIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQuZWFjaChhdHRyLCBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRySXRlbS5wdXNoKG5hbWUgKyAnPVwiJyArIHZhbHVlICsgJ1wiJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZW51RWxlbWVudHMucHVzaCgkKGNvcmV1aVRhYmxlVXRpbHMucmVuZGVyKGNvcmV1aVRhYmxlVHBsWyd0YWJsZS9jb2x1bW5zL21lbnUvbGluay5odG1sJ10sIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBpdGVtLnRleHQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cjogYXR0ckl0ZW0uam9pbignICcpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnZGl2aWRlcic6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lbnVFbGVtZW50cy5wdXNoKCQoY29yZXVpVGFibGVUcGxbJ3RhYmxlL2NvbHVtbnMvbWVudS9kaXZpZGVyLmh0bWwnXSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnaGVhZGVyJzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVudUVsZW1lbnRzLnB1c2goJChjb3JldWlUYWJsZVV0aWxzLnJlbmRlcihjb3JldWlUYWJsZVRwbFsndGFibGUvY29sdW1ucy9tZW51L2hlYWRlci5odG1sJ10sIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IGl0ZW0udGV4dFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChjb2x1bW5PcHRpb25zLmF0dHJIZWFkZXIgJiYgY29yZXVpVGFibGVVdGlscy5pc09iamVjdChjb2x1bW5PcHRpb25zLmF0dHJIZWFkZXIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJC5lYWNoKGNvbHVtbk9wdGlvbnMuYXR0ckhlYWRlciwgZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXMucHVzaChuYW1lICsgJz1cIicgKyB2YWx1ZSArICdcIicpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgc3R5bGUgPSBbXTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY29sdW1uT3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnd2lkdGgnKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgIFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIGNvbHVtbk9wdGlvbnMud2lkdGgpID49IDBcclxuICAgICAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCB1bml0ID0gdHlwZW9mIGNvbHVtbk9wdGlvbnMud2lkdGggPT09ICdudW1iZXInID8gJ3B4JyA6ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlLnB1c2goJ3dpZHRoOicgKyBjb2x1bW5PcHRpb25zLndpZHRoICsgdW5pdCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoY29sdW1uT3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnbWluV2lkdGgnKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgIFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIGNvbHVtbk9wdGlvbnMubWluV2lkdGgpID49IDBcclxuICAgICAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCB1bml0ID0gdHlwZW9mIGNvbHVtbk9wdGlvbnMubWluV2lkdGggPT09ICdudW1iZXInID8gJ3B4JyA6ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlLnB1c2goJ21pbi13aWR0aDonICsgY29sdW1uT3B0aW9ucy5taW5XaWR0aCArIHVuaXQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGNvbHVtbk9wdGlvbnMuaGFzT3duUHJvcGVydHkoJ21heFdpZHRoJykgJiZcclxuICAgICAgICAgICAgICAgICAgICBbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiBjb2x1bW5PcHRpb25zLm1heFdpZHRoKSA+PSAwXHJcbiAgICAgICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgdW5pdCA9IHR5cGVvZiBjb2x1bW5PcHRpb25zLm1heFdpZHRoID09PSAnbnVtYmVyJyA/ICdweCcgOiAnJztcclxuICAgICAgICAgICAgICAgICAgICBzdHlsZS5wdXNoKCdtYXgtd2lkdGg6JyArIGNvbHVtbk9wdGlvbnMubWF4V2lkdGggKyB1bml0KTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBjb2xHcm91cHMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHN0eWxlLmxlbmd0aCA+IDAgPyBzdHlsZS5qb2luKCc7JykgOiAnJ1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG5cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5zaG93SGVhZGVycykge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBsYWJlbCA9ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBkZXNjcmlwdGlvbiA9ICcnO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoY29sdW1uT3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnbGFiZWwnKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlb2YgY29sdW1uT3B0aW9ucy5sYWJlbCA9PT0gJ3N0cmluZycgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgKCFjb2x1bW5PcHRpb25zLmhhc093blByb3BlcnR5KCdzaG93TGFiZWwnKSB8fCBjb2x1bW5PcHRpb25zLnNob3dMYWJlbClcclxuICAgICAgICAgICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWwgPSBjb2x1bW5PcHRpb25zLmxhYmVsO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbHVtbk9wdGlvbnMuaGFzT3duUHJvcGVydHkoJ2Rlc2NyaXB0aW9uJykgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGNvbHVtbk9wdGlvbnMubGFiZWwgPT09ICdzdHJpbmcnXHJcbiAgICAgICAgICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uID0gY29sdW1uT3B0aW9ucy5kZXNjcmlwdGlvbjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGxldCBjb2x1bW5FbGVtZW50ID0gJChjb3JldWlUYWJsZVV0aWxzLnJlbmRlcihjb3JldWlUYWJsZVRwbFsndGFibGUvY29sdW1ucy90ZC5odG1sJ10sIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXR0ciAgICAgICAgICA6IGF0dHJpYnV0ZXMubGVuZ3RoID4gMCA/ICgnICcgKyBhdHRyaWJ1dGVzLmpvaW4oJyAnKSkgOiAnJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWwgICAgICAgICA6IGxhYmVsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbiAgIDogZGVzY3JpcHRpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNvcnRhYmxlICAgICAgOiBzb3J0YWJsZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXNzZXRNZW51ICAgICA6IG1lbnVFbGVtZW50cy5sZW5ndGggPiAwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtZW51UG9zaXRpb24gIDogbWVudVBvc2l0aW9uLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtZW51U2hvd0Fsd2F5czogbWVudVNob3dBbHdheXMgPyAnICcgKyBtZW51U2hvd0Fsd2F5cyA6ICcnLFxyXG4gICAgICAgICAgICAgICAgICAgIH0pKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1lbnVFbGVtZW50cy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG1lbnVDb250YWluZXIgPSBjb2x1bW5FbGVtZW50LmZpbmQoJy5jb3JldWktdGFibGVfX2NvbHVtbi1tZW51IHVsJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBtZW51QnV0dG9uICAgID0gY29sdW1uRWxlbWVudC5maW5kKCcuY29yZXVpLXRhYmxlX19jb2x1bW4tbWVudSAuZHJvcGRvd24tdG9nZ2xlJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtZW51QnV0dG9uLmNsaWNrKGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQub3JpZ2luYWxFdmVudC5jYW5jZWxCdWJibGUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lbnVFbGVtZW50cy5tYXAoZnVuY3Rpb24gKGVsZW1lbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lbnVDb250YWluZXIuYXBwZW5kKGVsZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGNvbHVtbkVsZW1lbnRzLmFwcGVuZChjb2x1bW5FbGVtZW50KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgLy8g0KHRgtGA0L7QutC4XHJcbiAgICAgICAgaWYgKHRhYmxlLl9yZWNvcmRzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgdGFibGUuX3JlY29yZHNUb3RhbCAgPSB0YWJsZS5nZXRSZWNvcmRzQ291bnQoKTtcclxuICAgICAgICAgICAgdGFibGUuX3JlY29yZHNOdW1iZXIgPSB0YWJsZS5fcGFnZSA9PT0gMVxyXG4gICAgICAgICAgICAgICAgPyAxXHJcbiAgICAgICAgICAgICAgICA6ICgodGFibGUuX3BhZ2UgLSAxKSAqIHRhYmxlLl9yZWNvcmRzUGVyUGFnZSkgKyAxO1xyXG5cclxuICAgICAgICAgICAgcmVjb3Jkc0VsZW1lbnRzID0gY29yZXVpVGFibGVSZW5kZXIucmVuZGVyUmVjb3Jkcyh0YWJsZSwgdGFibGUuX3JlY29yZHMpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJlY29yZHNFbGVtZW50cyA9IGNvcmV1aVRhYmxlUmVuZGVyLnJlbmRlclJlY29yZHModGFibGUsIFtdKTtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICBpZiAob3B0aW9ucy5zaG93SGVhZGVycyAmJlxyXG4gICAgICAgICAgICBvcHRpb25zLmhhc093blByb3BlcnR5KCdjb2x1bW5zSGVhZGVyJykgJiZcclxuICAgICAgICAgICAgQXJyYXkuaXNBcnJheShvcHRpb25zLmNvbHVtbnNIZWFkZXIpICYmXHJcbiAgICAgICAgICAgIG9wdGlvbnMuY29sdW1uc0hlYWRlci5sZW5ndGggPiAwXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIGxldCByb3dzID0gW107XHJcblxyXG4gICAgICAgICAgICAkLmVhY2gob3B0aW9ucy5jb2x1bW5zSGVhZGVyLCBmdW5jdGlvbiAoa2V5LCBoZWFkZXJSb3cpIHtcclxuICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGhlYWRlclJvdykpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgY2VsbHMgPSBbXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgJC5lYWNoKGhlYWRlclJvdywgZnVuY3Rpb24gKGtleSwgaGVhZGVyQ29sdW1uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KGhlYWRlckNvbHVtbikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBhdHRyaWJ1dGVzID0gW107XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhlYWRlckNvbHVtbi5oYXNPd25Qcm9wZXJ0eSgnYXR0cicpICYmIGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QoaGVhZGVyQ29sdW1uLmF0dHIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJC5lYWNoKGhlYWRlckNvbHVtbi5hdHRyLCBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlcy5wdXNoKG5hbWUgKyAnPVwiJyArIHZhbHVlICsgJ1wiJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2VsbHMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudDogaGVhZGVyQ29sdW1uLmhhc093blByb3BlcnR5KCdjb250ZW50JykgPyBoZWFkZXJDb2x1bW4uY29udGVudCA6ICcnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBoZWFkZXJDb2x1bW4uaGFzT3duUHJvcGVydHkoJ2Rlc2NyaXB0aW9uJykgPyBoZWFkZXJDb2x1bW4uZGVzY3JpcHRpb24gOiAnJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyOiBhdHRyaWJ1dGVzLmxlbmd0aCA+IDAgPyAnICcgKyBhdHRyaWJ1dGVzLmpvaW4oJyAnKSA6ICcnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcm93cy5wdXNoKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb3JldWlUYWJsZVV0aWxzLnJlbmRlcihjb3JldWlUYWJsZVRwbFsndGFibGUvY29sdW1ucy9oZWFkZXIuaHRtbCddLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2x1bW5zOiBjZWxscyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIGNvbHVtbnNIZWFkZXIgPSByb3dzLmpvaW4oJycpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKG9wdGlvbnMuaGFzT3duUHJvcGVydHkoJ2NvbHVtbnNGb290ZXInKSAmJlxyXG4gICAgICAgICAgICBBcnJheS5pc0FycmF5KG9wdGlvbnMuY29sdW1uc0Zvb3RlcikgJiZcclxuICAgICAgICAgICAgb3B0aW9ucy5jb2x1bW5zRm9vdGVyLmxlbmd0aCA+IDBcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgbGV0IHJvd3MgPSBbXTtcclxuXHJcbiAgICAgICAgICAgICQuZWFjaChvcHRpb25zLmNvbHVtbnNGb290ZXIsIGZ1bmN0aW9uIChrZXksIGZvb3RlclJvdykge1xyXG4gICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZm9vdGVyUm93KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBjZWxscyA9IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAkLmVhY2goZm9vdGVyUm93LCBmdW5jdGlvbiAoa2V5LCBmb290ZXJDb2x1bW4pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QoZm9vdGVyQ29sdW1uKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGF0dHJpYnV0ZXMgPSBbXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZm9vdGVyQ29sdW1uLmhhc093blByb3BlcnR5KCdhdHRyJykgJiYgY29yZXVpVGFibGVVdGlscy5pc09iamVjdChmb290ZXJDb2x1bW4uYXR0cikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLmVhY2goZm9vdGVyQ29sdW1uLmF0dHIsIGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzLnB1c2gobmFtZSArICc9XCInICsgdmFsdWUgKyAnXCInKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZWxscy5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBmb290ZXJDb2x1bW4uaGFzT3duUHJvcGVydHkoJ2NvbnRlbnQnKSA/IGZvb3RlckNvbHVtbi5jb250ZW50IDogJycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IGZvb3RlckNvbHVtbi5oYXNPd25Qcm9wZXJ0eSgnZGVzY3JpcHRpb24nKSA/IGZvb3RlckNvbHVtbi5kZXNjcmlwdGlvbiA6ICcnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHI6IGF0dHJpYnV0ZXMubGVuZ3RoID4gMCA/ICcgJyArIGF0dHJpYnV0ZXMuam9pbignICcpIDogJycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICByb3dzLnB1c2goXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvcmV1aVRhYmxlVXRpbHMucmVuZGVyKGNvcmV1aVRhYmxlVHBsWyd0YWJsZS9jb2x1bW5zL2Zvb3Rlci5odG1sJ10sIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbHVtbnM6IGNlbGxzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgY29sdW1uc0Zvb3RlciA9IHJvd3Muam9pbignJyk7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcblxyXG4gICAgICAgIGxldCBjbGFzc2VzID0gW107XHJcblxyXG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5jbGFzcyA9PT0gJ3N0cmluZycgJiYgb3B0aW9ucy5jbGFzcykge1xyXG4gICAgICAgICAgICBjbGFzc2VzLnB1c2gob3B0aW9ucy5jbGFzcyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoICEgY29sdW1uc0Zvb3Rlcikge1xyXG4gICAgICAgICAgICBjbGFzc2VzLnB1c2goJ2VtcHR5LXRmb290Jyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgdGhlYWRBdHRyID0gW107XHJcblxyXG4gICAgICAgIGlmIChvcHRpb25zLmhhc093blByb3BlcnR5KCd0aGVhZFRvcCcpICYmXHJcbiAgICAgICAgICAgIFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIG9wdGlvbnMudGhlYWRUb3ApID49IDBcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgbGV0IHVuaXQgPSBjb3JldWlUYWJsZVV0aWxzLmlzTnVtZXJpYyhvcHRpb25zLnRoZWFkVG9wKSA/ICdweCcgOiAnJztcclxuICAgICAgICAgICAgdGhlYWRBdHRyLnB1c2goJ3N0eWxlPVwidG9wOicgKyBvcHRpb25zLnRoZWFkVG9wICsgdW5pdCArICdcIicpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IHRhYmxlRWxlbWVudCA9ICQoY29yZXVpVGFibGVVdGlscy5yZW5kZXIoY29yZXVpVGFibGVUcGxbJ3RhYmxlLmh0bWwnXSwge1xyXG4gICAgICAgICAgICBjbGFzc2VzOiBjbGFzc2VzLmpvaW4oJyAnKSxcclxuICAgICAgICAgICAgdGhlYWRBdHRyOiB0aGVhZEF0dHIubGVuZ3RoID4gMCA/IHRoZWFkQXR0ci5qb2luKCcgJykgOiAnJyxcclxuICAgICAgICAgICAgc2hvd0hlYWRlcnM6IG9wdGlvbnMuc2hvd0hlYWRlcnMsXHJcbiAgICAgICAgICAgIGNvbHVtbnNIZWFkZXIgOiBjb2x1bW5zSGVhZGVyLFxyXG4gICAgICAgICAgICBjb2xHcm91cHMgOiBjb2xHcm91cHMsXHJcbiAgICAgICAgICAgIGNvbHVtbnNGb290ZXIgOiBjb2x1bW5zRm9vdGVyLFxyXG4gICAgICAgIH0pKTtcclxuXHJcblxyXG4gICAgICAgIGlmIChvcHRpb25zLnNob3dIZWFkZXJzKSB7XHJcbiAgICAgICAgICAgIHRhYmxlRWxlbWVudC5maW5kKCd0aGVhZCcpLmFwcGVuZChjb2x1bW5FbGVtZW50cyk7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgbGV0IHRib2R5ID0gdGFibGVFbGVtZW50LmZpbmQoJ3Rib2R5Jyk7XHJcblxyXG4gICAgICAgIHJlY29yZHNFbGVtZW50cy5tYXAoZnVuY3Rpb24gKHJlY29yZEVsZW1lbnQpIHtcclxuICAgICAgICAgICAgdGJvZHkuYXBwZW5kKHJlY29yZEVsZW1lbnQpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gdGFibGVFbGVtZW50XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCh0LHQvtGA0LrQsCDQt9Cw0L/QuNGB0LXQuSDRgtCw0LHQu9C40YbRi1xyXG4gICAgICogQHBhcmFtIHtvYmplY3R9IHRhYmxlXHJcbiAgICAgKiBAcGFyYW0ge0FycmF5fSAgcmVjb3Jkc1xyXG4gICAgICogQHJldHVybiB7QXJyYXl9XHJcbiAgICAgKi9cclxuICAgIHJlbmRlclJlY29yZHM6IGZ1bmN0aW9uICh0YWJsZSwgcmVjb3Jkcykge1xyXG5cclxuICAgICAgICBsZXQgcmVuZGVyUmVjb3JkcyA9IFtdO1xyXG5cclxuICAgICAgICBpZiAocmVjb3Jkcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIGxldCB0aGF0ICAgID0gdGhpcztcclxuICAgICAgICAgICAgbGV0IG9wdGlvbnMgPSB0YWJsZS5nZXRPcHRpb25zKCk7XHJcbiAgICAgICAgICAgIGxldCBncm91cCAgID0gb3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnZ3JvdXAnKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3Qob3B0aW9ucy5ncm91cCkgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zLmdyb3VwLmhhc093blByb3BlcnR5KCdmaWVsZCcpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIG9wdGlvbnMuZ3JvdXAuZmllbGQgPT09ICdzdHJpbmcnICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5ncm91cC5maWVsZFxyXG4gICAgICAgICAgICAgICAgPyBvcHRpb25zLmdyb3VwXHJcbiAgICAgICAgICAgICAgICA6IG51bGw7XHJcblxyXG5cclxuICAgICAgICAgICAgaWYgKGdyb3VwKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgZ3JvdXBWYWx1ZSAgICA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICBsZXQgZ3JvdXBJbmRleCAgICA9IDA7XHJcbiAgICAgICAgICAgICAgICBsZXQgcmVjb3Jkc0dyb3VwcyA9IHt9O1xyXG5cclxuICAgICAgICAgICAgICAgIHJlY29yZHMubWFwKGZ1bmN0aW9uIChyZWNvcmQpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocmVjb3JkLnNob3cpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlY29yZC5kYXRhLmhhc093blByb3BlcnR5KGdyb3VwLmZpZWxkKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2YgcmVjb3JkLmRhdGFbZ3JvdXAuZmllbGRdKSA+PSAwICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBncm91cFZhbHVlICE9IHJlY29yZC5kYXRhW2dyb3VwLmZpZWxkXVxyXG4gICAgICAgICAgICAgICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdyb3VwVmFsdWUgPSByZWNvcmQuZGF0YVtncm91cC5maWVsZF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBncm91cEluZGV4Kys7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggISByZWNvcmRzR3JvdXBzLmhhc093blByb3BlcnR5KGdyb3VwSW5kZXgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWNvcmRzR3JvdXBzW2dyb3VwSW5kZXhdID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzR3JvdXA6IGdyb3VwSW5kZXggPiAwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlY29yZHM6IFtdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVjb3Jkc0dyb3Vwc1tncm91cEluZGV4XS5yZWNvcmRzLnB1c2gocmVjb3JkKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAkLmVhY2gocmVjb3Jkc0dyb3VwcywgZnVuY3Rpb24gKGtleSwgcmVjb3Jkc0dyb3VwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJlbmRlclJlY29yZHNHcm91cCA9IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICByZWNvcmRzR3JvdXAucmVjb3Jkcy5tYXAoZnVuY3Rpb24gKHJlY29yZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZW5kZXJSZWNvcmRzR3JvdXAucHVzaCh0aGF0LnJlbmRlclJlY29yZCh0YWJsZSwgcmVjb3JkKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhYmxlLl9yZWNvcmRzTnVtYmVyKys7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChyZWNvcmRzR3JvdXAuaXNHcm91cCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZW5kZXJSZWNvcmRzLnB1c2godGhhdC5yZW5kZXJHcm91cCh0YWJsZSwgZ3JvdXAsIHJlY29yZHNHcm91cC5yZWNvcmRzWzBdLCByZW5kZXJSZWNvcmRzR3JvdXApKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJlbmRlclJlY29yZHNHcm91cC5tYXAoZnVuY3Rpb24gKHJlY29yZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZW5kZXJSZWNvcmRzLnB1c2gocmVjb3JkKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJlY29yZHMubWFwKGZ1bmN0aW9uIChyZWNvcmQpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocmVjb3JkLnNob3cpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVyUmVjb3Jkcy5wdXNoKHRoYXQucmVuZGVyUmVjb3JkKHRhYmxlLCByZWNvcmQpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGFibGUuX3JlY29yZHNOdW1iZXIrKztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHJlbmRlclJlY29yZHMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgIHJlbmRlclJlY29yZHMgPSBbXHJcbiAgICAgICAgICAgICAgICAkKGNvcmV1aVRhYmxlVXRpbHMucmVuZGVyKGNvcmV1aVRhYmxlVHBsWyd0YWJsZS9yZWNvcmQvZW1wdHkuaHRtbCddLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29sdW1uc0NvdW50OiB0YWJsZS5fY291bnRDb2x1bW5zU2hvdyxcclxuICAgICAgICAgICAgICAgICAgICBsYW5nOiB0YWJsZS5nZXRMYW5nKCksXHJcbiAgICAgICAgICAgICAgICB9KSlcclxuICAgICAgICAgICAgXTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiByZW5kZXJSZWNvcmRzO1xyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQodCx0L7RgNC60LAg0LfQsNC/0LjRgdC4INGC0LDQsdC70LjRhtGLXHJcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gdGFibGVcclxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSByZWNvcmRcclxuICAgICAqIEByZXR1cm5zIHt7IGF0dHI6IChzdHJpbmcpLCBmaWVsZHM6IChvYmplY3QpIH19fVxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgcmVuZGVyUmVjb3JkOiBmdW5jdGlvbiAodGFibGUsIHJlY29yZCkge1xyXG5cclxuICAgICAgICBsZXQgdGhhdCAgICAgICA9IHRoaXM7XHJcbiAgICAgICAgbGV0IG9wdGlvbnMgICAgPSB0YWJsZS5nZXRPcHRpb25zKCk7XHJcbiAgICAgICAgbGV0IGZpZWxkcyAgICAgPSBbXTtcclxuICAgICAgICBsZXQgcmVjb3JkQXR0ciA9IHtcclxuICAgICAgICAgICAgY2xhc3M6ICdjb3JldWktdGFibGVfX3JlY29yZCdcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB0YWJsZS5fY29sdW1ucy5tYXAoZnVuY3Rpb24gKGNvbHVtbikge1xyXG4gICAgICAgICAgICBpZiAoICEgY29sdW1uLmlzU2hvdygpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGxldCBmaWVsZENvbnRlbnQgPSB0aGF0LnJlbmRlckZpZWxkKHRhYmxlLCBjb2x1bW4sIHJlY29yZCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoZmllbGRDb250ZW50KSB7XHJcbiAgICAgICAgICAgICAgICBmaWVsZHMucHVzaChmaWVsZENvbnRlbnQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5vbkNsaWNrVXJsID09PSAnc3RyaW5nJyAmJiBvcHRpb25zLm9uQ2xpY2tVcmwpIHtcclxuICAgICAgICAgICAgcmVjb3JkQXR0ci5jbGFzcyArPSAnIGNvcmV1aS10YWJsZV9wb2ludGVyJztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChyZWNvcmQubWV0YSkge1xyXG4gICAgICAgICAgICByZWNvcmRBdHRyID0gY29yZXVpVGFibGVVdGlscy5tZXJnZUF0dHIocmVjb3JkQXR0ciwgcmVjb3JkLm1ldGEuYXR0cik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgYXR0cmlidXRlcyA9IFtdO1xyXG5cclxuICAgICAgICAkLmVhY2gocmVjb3JkQXR0ciwgZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XHJcbiAgICAgICAgICAgIGF0dHJpYnV0ZXMucHVzaChuYW1lICsgJz1cIicgKyB2YWx1ZSArICdcIicpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBsZXQgcmVjb3JkRWxlbWVudCA9ICQoXHJcbiAgICAgICAgICAgIGNvcmV1aVRhYmxlVXRpbHMucmVuZGVyKGNvcmV1aVRhYmxlVHBsWyd0YWJsZS9yZWNvcmQuaHRtbCddLCB7XHJcbiAgICAgICAgICAgICAgICBhdHRyICA6IGF0dHJpYnV0ZXMubGVuZ3RoID4gMCA/ICgnICcgKyBhdHRyaWJ1dGVzLmpvaW4oJyAnKSkgOiAnJyxcclxuICAgICAgICAgICAgICAgIGluZGV4IDogcmVjb3JkLmluZGV4LFxyXG4gICAgICAgICAgICAgICAgZmllbGRzOiBmaWVsZHNcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICBmaWVsZHMubWFwKGZ1bmN0aW9uIChmaWVsZCwga2V5KSB7XHJcbiAgICAgICAgICAgICQocmVjb3JkRWxlbWVudFswXS5xdWVyeVNlbGVjdG9yKCc6c2NvcGUgPiB0ZDpudGgtY2hpbGQoJyArIChrZXkgKyAxKSArICcpJykpLmFwcGVuZChmaWVsZC5jb250ZW50KVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gcmVjb3JkRWxlbWVudDtcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KHQsdC+0YDQutCwINGP0YfQtdC50LrQuCDRgtCw0LHQu9C40YbRi1xyXG4gICAgICogQHBhcmFtIHtvYmplY3R9IHRhYmxlXHJcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gY29sdW1uXHJcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gcmVjb3JkXHJcbiAgICAgKiBAcmV0dXJucyB7eyBhdHRyOiAoc3RyaW5nKSwgY29udGVudDogKHN0cmluZykgfX1cclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIHJlbmRlckZpZWxkOiBmdW5jdGlvbiAodGFibGUsIGNvbHVtbiwgcmVjb3JkKSB7XHJcblxyXG4gICAgICAgIGxldCBjb2x1bW5PcHRpb25zID0gY29sdW1uLmdldE9wdGlvbnMoKTtcclxuICAgICAgICBsZXQgY29sdW1uRmllbGQgICA9IGNvbHVtbi5nZXRGaWVsZCgpO1xyXG4gICAgICAgIGxldCBjb250ZW50ICAgICAgID0gbnVsbDtcclxuICAgICAgICBsZXQgZmllbGRQcm9wcyAgICA9IHJlY29yZC5tZXRhICYmIHJlY29yZC5tZXRhLmhhc093blByb3BlcnR5KCdmaWVsZHMnKSAmJiByZWNvcmQubWV0YS5maWVsZHMuaGFzT3duUHJvcGVydHkoY29sdW1uRmllbGQpXHJcbiAgICAgICAgICAgID8gcmVjb3JkLm1ldGEuZmllbGRzW2NvbHVtbkZpZWxkXVxyXG4gICAgICAgICAgICA6IG51bGw7XHJcbiAgICAgICAgbGV0IGZpZWxkQXR0ciA9IGNvbHVtbk9wdGlvbnMuaGFzT3duUHJvcGVydHkoJ2F0dHInKSAmJiBjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KGNvbHVtbk9wdGlvbnMuYXR0cilcclxuICAgICAgICAgICAgPyBjb2x1bW5PcHRpb25zLmF0dHJcclxuICAgICAgICAgICAgOiB7fTtcclxuXHJcbiAgICAgICAgaWYgKGZpZWxkUHJvcHMgJiYgY29yZXVpVGFibGVVdGlscy5pc09iamVjdChmaWVsZFByb3BzKSkge1xyXG4gICAgICAgICAgICBpZiAoZmllbGRQcm9wcyAmJiBmaWVsZFByb3BzLmhhc093blByb3BlcnR5KCdzaG93JykgJiYgISBmaWVsZFByb3BzLnNob3cpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoY29yZXVpVGFibGVVdGlscy5pc09iamVjdChmaWVsZFByb3BzLmF0dHIpKSB7XHJcbiAgICAgICAgICAgICAgICBmaWVsZEF0dHIgPSBjb3JldWlUYWJsZVV0aWxzLm1lcmdlQXR0cihmaWVsZEF0dHIsIGZpZWxkUHJvcHMuYXR0cik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChjb2x1bW5PcHRpb25zLmhhc093blByb3BlcnR5KCdmaXhlZCcpICYmIHR5cGVvZiBjb2x1bW5PcHRpb25zLmZpeGVkID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICBmaWVsZEF0dHIgPSBjb3JldWlUYWJsZVV0aWxzLm1lcmdlQXR0cihmaWVsZEF0dHIsIHtcclxuICAgICAgICAgICAgICAgIGNsYXNzOiAnY29yZXVpLXRhYmxlX19maXhlZF8nICsgY29sdW1uT3B0aW9ucy5maXhlZFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0eXBlb2YgY29sdW1uT3B0aW9ucy5yZW5kZXIgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgY29udGVudCA9IGNvbHVtbk9wdGlvbnMucmVuZGVyKHtcclxuICAgICAgICAgICAgICAgIGRhdGE6IHJlY29yZC5kYXRhLFxyXG4gICAgICAgICAgICAgICAgbWV0YTogcmVjb3JkLm1ldGEsXHJcbiAgICAgICAgICAgICAgICBpbmRleDogcmVjb3JkLmluZGV4LFxyXG4gICAgICAgICAgICB9LCB0YWJsZSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY29udGVudCA9IGNvbHVtbkZpZWxkICYmIHJlY29yZC5kYXRhLmhhc093blByb3BlcnR5KGNvbHVtbkZpZWxkKVxyXG4gICAgICAgICAgICAgICAgPyByZWNvcmQuZGF0YVtjb2x1bW5GaWVsZF1cclxuICAgICAgICAgICAgICAgIDogbnVsbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnRlbnQgPSBjb2x1bW4ucmVuZGVyKGNvbnRlbnQsIHJlY29yZCk7XHJcblxyXG4gICAgICAgIGxldCBmaWVsZEF0dHJSZXN1bHQgPSBbXTtcclxuXHJcbiAgICAgICAgJC5lYWNoKGZpZWxkQXR0ciwgZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XHJcbiAgICAgICAgICAgIGZpZWxkQXR0clJlc3VsdC5wdXNoKG5hbWUgKyAnPVwiJyArIHZhbHVlICsgJ1wiJyk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGF0dHI6ICAgIGZpZWxkQXR0clJlc3VsdC5sZW5ndGggPiAwID8gKCcgJyArIGZpZWxkQXR0clJlc3VsdC5qb2luKCcgJykpIDogJycsXHJcbiAgICAgICAgICAgIGNvbnRlbnQ6IGNvbnRlbnQsXHJcbiAgICAgICAgfTtcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KHQsdC+0YDQutCwINC30LDQv9C40YHQuC3Qs9GA0YPQv9C/0YtcclxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSB0YWJsZVxyXG4gICAgICogQHBhcmFtIHtvYmplY3R9IGdyb3VwXHJcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gcmVjb3JkXHJcbiAgICAgKiBAcGFyYW0ge0FycmF5fSAgcmVuZGVyUmVjb3Jkc1xyXG4gICAgICogQHJldHVybnMge3sgYXR0cjogKHN0cmluZyksIGZpZWxkczogKG9iamVjdCkgfX19XHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICByZW5kZXJHcm91cDogZnVuY3Rpb24gKHRhYmxlLCBncm91cCwgcmVjb3JkLCByZW5kZXJSZWNvcmRzKSB7XHJcblxyXG4gICAgICAgIGxldCBhdHRyID0gZ3JvdXAuaGFzT3duUHJvcGVydHkoJ2F0dHInKSAmJiBjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KGdyb3VwLmF0dHIpXHJcbiAgICAgICAgICAgID8gZ3JvdXAuYXR0clxyXG4gICAgICAgICAgICA6IHt9O1xyXG5cclxuICAgICAgICBpZiAoYXR0ci5oYXNPd25Qcm9wZXJ0eSgnY2xhc3MnKSAmJiB0eXBlb2YgYXR0ci5jbGFzcyA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgYXR0ci5jbGFzcyArPSAnIGNvcmV1aS10YWJsZV9fcmVjb3JkLWdyb3VwJztcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBhdHRyLmNsYXNzID0gJ2NvcmV1aS10YWJsZV9fcmVjb3JkLWdyb3VwJztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBhdHRyaWJ1dGVzID0gW107XHJcblxyXG4gICAgICAgICQuZWFjaChhdHRyLCBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcclxuICAgICAgICAgICAgaWYgKFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIHZhbHVlKSA+PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzLnB1c2gobmFtZSArICc9XCInICsgdmFsdWUgKyAnXCInKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBsZXQgaXNDb2xsYXBzaW5nID0gZ3JvdXAuaGFzT3duUHJvcGVydHkoJ2lzQ29sbGFwc2luZycpID8gISEgZ3JvdXAuaXNDb2xsYXBzaW5nIDogZmFsc2U7XHJcblxyXG4gICAgICAgIGxldCBncm91cEVsZW1lbnQgPSAkKGNvcmV1aVRhYmxlVXRpbHMucmVuZGVyKGNvcmV1aVRhYmxlVHBsWyd0YWJsZS9yZWNvcmQvZ3JvdXAuaHRtbCddLCB7XHJcbiAgICAgICAgICAgIGF0dHI6IGF0dHJpYnV0ZXMubGVuZ3RoID4gMCA/ICgnICcgKyBhdHRyaWJ1dGVzLmpvaW4oJyAnKSkgOiAnJyxcclxuICAgICAgICAgICAgY29sc3BhbjogdGFibGUuX2NvdW50Q29sdW1uc1Nob3csXHJcbiAgICAgICAgICAgIGlzQ29sbGFwc2luZzogaXNDb2xsYXBzaW5nXHJcbiAgICAgICAgfSkpO1xyXG5cclxuICAgICAgICBsZXQgdGQgICAgICA9IGdyb3VwRWxlbWVudC5maW5kKCcgPiB0ZCcpO1xyXG4gICAgICAgIGxldCBjb250ZW50ID0gcmVjb3JkLmRhdGFbZ3JvdXAuZmllbGRdO1xyXG5cclxuXHJcbiAgICAgICAgaWYgKGdyb3VwLmhhc093blByb3BlcnR5KCdyZW5kZXInKSkge1xyXG4gICAgICAgICAgICBsZXQgcmVuZGVyQ29udGVudCA9IG51bGw7XHJcblxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGdyb3VwLnJlbmRlciA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICAgICAgcmVuZGVyQ29udGVudCA9IGdyb3VwLnJlbmRlcihyZWNvcmQpO1xyXG5cclxuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgZ3JvdXAucmVuZGVyID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICAgICAgcmVuZGVyQ29udGVudCA9IChuZXcgRnVuY3Rpb24oJ3JlY29yZCcsIGdyb3VwLnJlbmRlcikpKHJlY29yZCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChyZW5kZXJDb250ZW50KSB7XHJcbiAgICAgICAgICAgICAgICBjb250ZW50ID0gcmVuZGVyQ29udGVudDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIGlmIChpc0NvbGxhcHNpbmcpIHtcclxuICAgICAgICAgICAgbGV0IGNvbGxhcHNlZCA9ICQoJzxpIGNsYXNzPVwiYmkgYmktY2hldnJvbi1kb3duIGNvcmV1aS10YWJsZV9wb2ludGVyIG1lLTFcIj48L2k+Jyk7XHJcblxyXG4gICAgICAgICAgICBjb2xsYXBzZWQuY2xpY2soZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCQodGhpcykuaGFzQ2xhc3MoJ2JpLWNoZXZyb24tZG93bicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5yZW1vdmVDbGFzcygnYmktY2hldnJvbi1kb3duJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCdiaS1jaGV2cm9uLXJpZ2h0Jyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJlbmRlclJlY29yZHMubWFwKGZ1bmN0aW9uIChyZW5kZXJSZWNvcmQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJChyZW5kZXJSZWNvcmQpLmZhZGVPdXQoMTAwKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICQodGhpcykucmVtb3ZlQ2xhc3MoJ2JpLWNoZXZyb24tcmlnaHQnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ2JpLWNoZXZyb24tZG93bicpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICByZW5kZXJSZWNvcmRzLm1hcChmdW5jdGlvbiAocmVuZGVyUmVjb3JkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICQocmVuZGVyUmVjb3JkKS5mYWRlSW4oMTAwKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICB0ZC5hcHBlbmQoY29sbGFwc2VkKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRkLmFwcGVuZChjb250ZW50KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGdyb3VwRWxlbWVudDtcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KHQsdC+0YDQutCwINGA0LDRgdC60YDRi9Cy0LDRjtGJ0LXQudGB0Y8g0YHRgtGA0L7QutC4XHJcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gICAgICAgdGFibGVcclxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBjb250ZW50XHJcbiAgICAgKi9cclxuICAgIHJlbmRlckV4cGFuZDogZnVuY3Rpb24gKHRhYmxlLCBjb250ZW50KSB7XHJcblxyXG4gICAgICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgICAgICAgY29udGVudCA9IGNvcmV1aVRhYmxlUmVuZGVyLnJlbmRlckNvbXBvbmVudHModGFibGUsIGNvbnRlbnQsICdyZWNvcmRfZXhwYW5kX3Nob3cnKTtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICBsZXQgZXhwYW5kUmVjb3JkID0gJChjb3JldWlUYWJsZVV0aWxzLnJlbmRlcihjb3JldWlUYWJsZVRwbFsndGFibGUvcmVjb3JkL2V4cGFuZC5odG1sJ10sIHtcclxuICAgICAgICAgICAgY29sc3BhbjogdGFibGUuX2NvdW50Q29sdW1uc1Nob3csXHJcbiAgICAgICAgfSkpO1xyXG5cclxuICAgICAgICBpZiAoWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2YgY29udGVudCkgPj0gMCkge1xyXG4gICAgICAgICAgICBleHBhbmRSZWNvcmQuZmluZCgndGQnKS5odG1sKGNvbnRlbnQpXHJcblxyXG4gICAgICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShjb250ZW50KSkge1xyXG4gICAgICAgICAgICAkLmVhY2goY29udGVudCwgZnVuY3Rpb24gKGtleSwgaXRlbSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIGl0ZW0pID49IDAgfHxcclxuICAgICAgICAgICAgICAgICAgICBpdGVtIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQgfHxcclxuICAgICAgICAgICAgICAgICAgICAod2luZG93Lmhhc093blByb3BlcnR5KCdqUXVlcnknKSAmJiBpdGVtIGluc3RhbmNlb2YgalF1ZXJ5KVxyXG4gICAgICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZXhwYW5kUmVjb3JkLmZpbmQoJ3RkJykuYXBwZW5kKGl0ZW0pXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGV4cGFuZFJlY29yZDtcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KHQsdC+0YDQutCwINGN0LvQtdC80LXQvdGC0LAg0YPQv9GA0LDQstC70LXQvdC40Y9cclxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSB0YWJsZVxyXG4gICAgICogQHBhcmFtIHtvYmplY3R9IGNvbnRyb2xcclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKiBAcmV0dXJucyB7SFRNTEVsZW1lbnR8alF1ZXJ5fVxyXG4gICAgICovXHJcbiAgICByZW5kZXJDb250cm9sOiBmdW5jdGlvbiAodGFibGUsIGNvbnRyb2wpIHtcclxuXHJcbiAgICAgICAgaWYgKGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QoY29udHJvbCkpIHtcclxuICAgICAgICAgICAgbGV0IGNvbnRyb2xFbGVtZW50ID0gJChjb3JldWlUYWJsZVV0aWxzLnJlbmRlcihjb3JldWlUYWJsZVRwbFsndGFibGUvY29udHJvbC5odG1sJ10sIHtcclxuICAgICAgICAgICAgICAgIGlkOiBjb250cm9sLmdldElkKClcclxuICAgICAgICAgICAgfSkpO1xyXG5cclxuICAgICAgICAgICAgY29udHJvbEVsZW1lbnQuYXBwZW5kKGNvbnRyb2wucmVuZGVyKCkpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGNvbnRyb2xFbGVtZW50O1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KTQvtGA0LzQuNGA0L7QstCw0L3QuNC1INC60L7QvdGC0LXQvdGC0LAg0LrQvtC80L/QvtC90LXQvdGC0LBcclxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSB0YWJsZVxyXG4gICAgICogQHBhcmFtIHtvYmplY3R9IGNvbXBvbmVudHNcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudE5hbWVcclxuICAgICAqIEByZXR1cm4ge0FycmF5fVxyXG4gICAgICovXHJcbiAgICByZW5kZXJDb21wb25lbnRzOiBmdW5jdGlvbiAodGFibGUsIGNvbXBvbmVudHMsIGV2ZW50TmFtZSkge1xyXG5cclxuICAgICAgICBsZXQgcmVzdWx0ID0gW107XHJcblxyXG4gICAgICAgIGlmIChjb21wb25lbnRzIGluc3RhbmNlb2YgT2JqZWN0KSB7XHJcbiAgICAgICAgICAgIGlmICggISBBcnJheS5pc0FycmF5KGNvbXBvbmVudHMpKSB7XHJcbiAgICAgICAgICAgICAgICBjb21wb25lbnRzID0gWyBjb21wb25lbnRzIF07XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY29tcG9uZW50cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjb21wb25lbnRzW2ldID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKGNvbXBvbmVudHNbaV0pO1xyXG5cclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoICEgQXJyYXkuaXNBcnJheShjb21wb25lbnRzW2ldKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudHNbaV0uaGFzT3duUHJvcGVydHkoJ2NvbXBvbmVudCcpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50c1tpXS5jb21wb25lbnQuc3Vic3RyaW5nKDAsIDYpID09PSAnY29yZXVpJ1xyXG4gICAgICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IG5hbWUgPSBjb21wb25lbnRzW2ldLmNvbXBvbmVudC5zcGxpdCgnLicpWzFdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoQ29yZVVJLmhhc093blByb3BlcnR5KG5hbWUpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QoQ29yZVVJW25hbWVdKVxyXG4gICAgICAgICAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgaW5zdGFuY2UgPSBDb3JlVUlbbmFtZV0uY3JlYXRlKGNvbXBvbmVudHNbaV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChpbnN0YW5jZS5yZW5kZXIoKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnROYW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YWJsZS5vbihldmVudE5hbWUsIGluc3RhbmNlLmluaXRFdmVudHMsIGluc3RhbmNlLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNvcmV1aVRhYmxlUmVuZGVyOyIsIlxuaW1wb3J0IGNvcmV1aVRhYmxlUmVuZGVyICBmcm9tIFwiLi9jb3JldWkudGFibGUucmVuZGVyXCI7XG5cblxubGV0IGNvcmV1aVRhYmxlRWxlbWVudHMgPSB7XG5cbiAgICAvKipcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0LrQvtC90YLQtdC50L3QtdGA0LAg0YLQsNCx0LvQuNGG0YtcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGFibGVJZFxuICAgICAqIEByZXR1cm4ge2pRdWVyeX1cbiAgICAgKi9cbiAgICBnZXRDb250YWluZXI6IGZ1bmN0aW9uICh0YWJsZUlkKSB7XG5cbiAgICAgICAgcmV0dXJuICQoJyNjb3JldWktdGFibGUtJyArIHRhYmxlSWQgKyAnID4gLmNvcmV1aS10YWJsZV9fY29udGFpbmVyJyk7XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC+0LHQtdGA0YLQutC4INGC0LDQsdC70LjRhtGLXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRhYmxlSWRcbiAgICAgKiBAcmV0dXJuIHtqUXVlcnl9XG4gICAgICovXG4gICAgZ2V0TG9jazogZnVuY3Rpb24gKHRhYmxlSWQpIHtcblxuICAgICAgICByZXR1cm4gJCgnI2NvcmV1aS10YWJsZS0nICsgdGFibGVJZCArICcgPiAuY29yZXVpLXRhYmxlX19jb250YWluZXIgPiAuY29yZXVpLXRhYmxlLWxvY2snKTtcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0L7QsdC10YDRgtC60Lgg0YLQsNCx0LvQuNGG0YtcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGFibGVJZFxuICAgICAqIEByZXR1cm4ge2pRdWVyeX1cbiAgICAgKi9cbiAgICBnZXRXcmFwcGVyOiBmdW5jdGlvbiAodGFibGVJZCkge1xuXG4gICAgICAgIHJldHVybiAkKCcjY29yZXVpLXRhYmxlLScgKyB0YWJsZUlkICsgJyA+IC5jb3JldWktdGFibGVfX2NvbnRhaW5lciA+IC5jb3JldWktdGFibGVfX3dyYXBwZXInKTtcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0L/QvtC40YHQutC+0LLQvtCz0L4g0LrQvtC90YLQtdC50L3QtdGA0LBcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGFibGVJZFxuICAgICAqIEByZXR1cm4ge2pRdWVyeX1cbiAgICAgKi9cbiAgICBnZXRTZWFyY2hDb250YWluZXI6IGZ1bmN0aW9uICh0YWJsZUlkKSB7XG5cbiAgICAgICAgcmV0dXJuICQoJyNjb3JldWktdGFibGUtJyArIHRhYmxlSWQgKyAnID4gLmNvcmV1aS10YWJsZV9fY29udGFpbmVyID4gLmNvcmV1aS10YWJsZV9fc2VhcmNoJyk7XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC/0L7QuNGB0LrQvtCy0L7Qs9C+INC60L7QvdGC0LXQudC90LXRgNCwXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRhYmxlSWRcbiAgICAgKiBAcmV0dXJuIHtqUXVlcnl9XG4gICAgICovXG4gICAgZ2V0Q29sdW1uc0NvbnRhaW5lcjogZnVuY3Rpb24gKHRhYmxlSWQpIHtcblxuICAgICAgICByZXR1cm4gJCgnI2NvcmV1aS10YWJsZS0nICsgdGFibGVJZCArICcgPiAuY29yZXVpLXRhYmxlX19jb250YWluZXIgPiAuY29yZXVpLXRhYmxlX19jb2x1bW5zJyk7XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC60L7QvdGC0LXQudC90LXRgNCwINC/0L7QuNGB0LrQvtCy0L7Qs9C+INC60L7QvdGC0YDQvtC70LBcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGFibGVJZFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjb250cm9sSWRcbiAgICAgKiBAcmV0dXJuIHtqUXVlcnl9XG4gICAgICovXG4gICAgZ2V0U2VhcmNoQ29udHJvbDogZnVuY3Rpb24gKHRhYmxlSWQsIGNvbnRyb2xJZCkge1xuXG4gICAgICAgIHJldHVybiAkKCcjY29yZXVpLXRhYmxlLScgKyB0YWJsZUlkICsgJyA+IC5jb3JldWktdGFibGVfX2NvbnRhaW5lciA+IC5jb3JldWktdGFibGVfX3NlYXJjaCAuc2VhcmNoLWNvbnRyb2wtJyArIGNvbnRyb2xJZCk7XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC60L7QvdGC0LXQudC90LXRgNCwINC60L7QvdGC0YDQvtC70LBcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGFibGVJZFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjb250cm9sSWRcbiAgICAgKiBAcmV0dXJuIHtqUXVlcnl9XG4gICAgICovXG4gICAgZ2V0Q29udHJvbDogZnVuY3Rpb24gKHRhYmxlSWQsIGNvbnRyb2xJZCkge1xuXG4gICAgICAgIHJldHVybiAkKCcjY29yZXVpLXRhYmxlLScgKyB0YWJsZUlkICsgJyAgI2NvcmV1aS10YWJsZS1jb250cm9sLScgKyBjb250cm9sSWQpO1xuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSDRgtCw0LHQu9C40YbRi1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0YWJsZUlkXG4gICAgICogQHJldHVybiB7alF1ZXJ5fVxuICAgICAqL1xuICAgIGdldFRhYmxlOiBmdW5jdGlvbiAodGFibGVJZCkge1xuXG4gICAgICAgIHJldHVybiAkKCcjY29yZXVpLXRhYmxlLScgKyB0YWJsZUlkICsgJyA+IC5jb3JldWktdGFibGVfX2NvbnRhaW5lciA+IC5jb3JldWktdGFibGVfX3dyYXBwZXIgPiB0YWJsZScpO1xuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSDRgtC10LvQsCDRgtCw0LHQu9C40YbRi1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0YWJsZUlkXG4gICAgICogQHJldHVybiB7alF1ZXJ5fVxuICAgICAqL1xuICAgIGdldFRhYmxlVGJvZHk6IGZ1bmN0aW9uICh0YWJsZUlkKSB7XG5cbiAgICAgICAgcmV0dXJuICQoJyNjb3JldWktdGFibGUtJyArIHRhYmxlSWQgKyAnID4gLmNvcmV1aS10YWJsZV9fY29udGFpbmVyID4gLmNvcmV1aS10YWJsZV9fd3JhcHBlciA+IHRhYmxlID4gdGJvZHknKTtcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0LfQsNCz0L7Qu9C+0LLQutC+0LIg0YLQsNCx0LvQuNGG0YtcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGFibGVJZFxuICAgICAqIEByZXR1cm4ge2pRdWVyeX1cbiAgICAgKi9cbiAgICBnZXRUYWJsZVRoZWFkOiBmdW5jdGlvbiAodGFibGVJZCkge1xuXG4gICAgICAgIHJldHVybiAkKCcjY29yZXVpLXRhYmxlLScgKyB0YWJsZUlkICsgJyA+IC5jb3JldWktdGFibGVfX2NvbnRhaW5lciA+IC5jb3JldWktdGFibGVfX3dyYXBwZXIgPiB0YWJsZSA+IHRoZWFkJyk7XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INGP0YfQtdC10Log0YEg0YHQvtGA0YLQuNGA0L7QstC60L7QuSDQv9C+INGC0LDQsdC70LjRhtC1XG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRhYmxlSWRcbiAgICAgKiBAcmV0dXJuIHtqUXVlcnl9XG4gICAgICovXG4gICAgZ2V0VGFibGVTb3J0YWJsZTogZnVuY3Rpb24gKHRhYmxlSWQpIHtcblxuICAgICAgICByZXR1cm4gJCgnI2NvcmV1aS10YWJsZS0nICsgdGFibGVJZCArICcgPiAuY29yZXVpLXRhYmxlX19jb250YWluZXIgPiAuY29yZXVpLXRhYmxlX193cmFwcGVyID4gdGFibGUgPiB0aGVhZCA+IHRyID4gdGQuY29yZXVpLXRhYmxlX19zb3J0YWJsZScpO1xuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSDRgdGC0YDQvtC6INC30LDQv9C40YHQtdC5XG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRhYmxlSWRcbiAgICAgKiBAcmV0dXJuIHtqUXVlcnl9XG4gICAgICovXG4gICAgZ2V0VHJSZWNvcmRzOiBmdW5jdGlvbiAodGFibGVJZCkge1xuXG4gICAgICAgIHJldHVybiAkKCcjY29yZXVpLXRhYmxlLScgKyB0YWJsZUlkICsgJyA+IC5jb3JldWktdGFibGVfX2NvbnRhaW5lciA+IC5jb3JldWktdGFibGVfX3dyYXBwZXIgPiB0YWJsZSA+IHRib2R5ID4gdHIuY29yZXVpLXRhYmxlX19yZWNvcmQnKTtcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0Y3Qu9C10LzQtdC90YLQsCDRgdGC0YDQvtC60Lgg0L/QviDQutC70Y7Rh9GDXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRhYmxlSWRcbiAgICAgKiBAcGFyYW0ge2ludH0gICAgaW5kZXhcbiAgICAgKiBAcmV0dXJuIHtqUXVlcnl9XG4gICAgICovXG4gICAgZ2V0VHJCeUluZGV4OiBmdW5jdGlvbiAodGFibGVJZCwgaW5kZXgpIHtcblxuICAgICAgICByZXR1cm4gJCgnI2NvcmV1aS10YWJsZS0nICsgdGFibGVJZCArICcgPiAuY29yZXVpLXRhYmxlX19jb250YWluZXIgPiAuY29yZXVpLXRhYmxlX193cmFwcGVyID4gdGFibGUgPiB0Ym9keSA+IHRyW2RhdGEtcmVjb3JkLWluZGV4PVwiJyArIGluZGV4ICsgJ1wiXScpO1xuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSDRjdC70LXQvNC10L3RgtCwINGB0YLRgNC+0LrQuCDQv9C+INC60LvRjtGH0YNcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGFibGVJZFxuICAgICAqIEByZXR1cm4ge2pRdWVyeX1cbiAgICAgKi9cbiAgICBnZXRUckVtcHR5OiBmdW5jdGlvbiAodGFibGVJZCkge1xuXG4gICAgICAgIHJldHVybiAkKCcjY29yZXVpLXRhYmxlLScgKyB0YWJsZUlkICsgJyA+IC5jb3JldWktdGFibGVfX2NvbnRhaW5lciA+IC5jb3JldWktdGFibGVfX3dyYXBwZXIgPiB0YWJsZSA+IHRib2R5ID4gdHIuY29yZXVpLXRhYmxlX19yZWNvcmQtZW1wdHknKTtcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0LrQvtC90YLQtdC90YLQsCDQv9C+0LQg0YHRgtGA0L7QutC+0LlcbiAgICAgKiBAcGFyYW0ge2pRdWVyeX0gcmVjb3JkRWxlbWVudFxuICAgICAqIEByZXR1cm4ge2pRdWVyeX1cbiAgICAgKi9cbiAgICBnZXRFeHBhbmRSb3c6IGZ1bmN0aW9uIChyZWNvcmRFbGVtZW50KSB7XG5cbiAgICAgICAgcmV0dXJuIHJlY29yZEVsZW1lbnQubmV4dCgpLmhhc0NsYXNzKCdjb3JldWktdGFibGVfX3JlY29yZC1leHBhbmRlZCcpXG4gICAgICAgICAgICA/IHJlY29yZEVsZW1lbnQubmV4dCgpXG4gICAgICAgICAgICA6IG51bGw7XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICog0JTQvtCx0LDQstC70LXQvdC40LUg0LrQvtC90YLQtdC90YLQsCDQv9C+0LQg0YHRgtGA0L7QutC+0LlcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gICAgICAgdGFibGVcbiAgICAgKiBAcGFyYW0ge2pRdWVyeX0gICAgICAgcmVjb3JkRWxlbWVudFxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBjb250ZW50XG4gICAgICogQHJldHVybiB7alF1ZXJ5fVxuICAgICAqL1xuICAgIGFkZEV4cGFuZFJvdzogZnVuY3Rpb24gKHRhYmxlLCByZWNvcmRFbGVtZW50LCBjb250ZW50KSB7XG5cbiAgICAgICAgbGV0IGV4cGFuZFJlY29yZCA9IGNvcmV1aVRhYmxlUmVuZGVyLnJlbmRlckV4cGFuZCh0YWJsZSwgY29udGVudCwgJ3JlY29yZF9leHBhbmRfc2hvdycpO1xuXG4gICAgICAgIHJlY29yZEVsZW1lbnQuYWZ0ZXIoZXhwYW5kUmVjb3JkKTtcbiAgICAgICAgcmVjb3JkRWxlbWVudC5uZXh0KCkuc2hvdygnZmFzdCcpO1xuICAgICAgICByZWNvcmRFbGVtZW50LmFkZENsYXNzKCdyZWNvcmQtZXhwYW5kZWQnKTtcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiDQodC60YDRi9GC0LjQtSDQutC+0L3RgtC10L3RgtCwINC/0L7QtCDRgdGC0YDQvtC60L7QuVxuICAgICAqIEBwYXJhbSB7alF1ZXJ5fSByZWNvcmRFeHBhbmRlZFxuICAgICAqIEByZXR1cm4ge2pRdWVyeX1cbiAgICAgKi9cbiAgICBoaWRlRXhwYW5kUm93OiBmdW5jdGlvbiAocmVjb3JkRXhwYW5kZWQpIHtcblxuICAgICAgICByZWNvcmRFeHBhbmRlZC5oaWRlKCdmYXN0JylcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiDQn9C+0LrQsNC3INC60L7QvdGC0LXQvdGC0LAg0L/QvtC0INGB0YLRgNC+0LrQvtC5XG4gICAgICogQHBhcmFtIHtqUXVlcnl9IHJlY29yZEV4cGFuZGVkXG4gICAgICogQHJldHVybiB7alF1ZXJ5fVxuICAgICAqL1xuICAgIHNob3dFeHBhbmRSb3c6IGZ1bmN0aW9uIChyZWNvcmRFeHBhbmRlZCkge1xuXG4gICAgICAgIHJlY29yZEV4cGFuZGVkLnNob3coJ2Zhc3QnKVxuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqINCj0LTQsNC70LXQvdC40LUg0LrQvtC90YLQtdC90YLQsCDQv9C+0LQg0YHRgtGA0L7QutC+0LlcbiAgICAgKiBAcGFyYW0ge2pRdWVyeX0gcmVjb3JkRXhwYW5kZWRcbiAgICAgKiBAcmV0dXJuIHtqUXVlcnl9XG4gICAgICovXG4gICAgcmVtb3ZlRXhwYW5kUm93OiBmdW5jdGlvbiAocmVjb3JkRXhwYW5kZWQpIHtcblxuICAgICAgICByZWNvcmRFeHBhbmRlZC5oaWRlKCdmYXN0JywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgJCh0aGlzKS5yZW1vdmUoKTtcbiAgICAgICAgfSlcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0LLRi9Cx0YDQsNC90L3Ri9GFINC90LAg0YLQsNCx0LvQuNGG0LUg0Y3Qu9C10LzQtdC90YLQvtCyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRhYmxlSWRcbiAgICAgKiBAcmV0dXJuIHtBcnJheX1cbiAgICAgKi9cbiAgICBnZXRTZWxlY3RlZEluZGV4ZXM6IGZ1bmN0aW9uICh0YWJsZUlkKSB7XG5cbiAgICAgICAgbGV0IGluZGV4ZXMgPSBbXTtcblxuICAgICAgICAkKCcjY29yZXVpLXRhYmxlLScgKyB0YWJsZUlkICsgJyA+IC5jb3JldWktdGFibGVfX2NvbnRhaW5lciA+IC5jb3JldWktdGFibGVfX3dyYXBwZXIgPiB0YWJsZSA+IHRib2R5ID4gdHIuY29yZXVpLXRhYmxlX19yZWNvcmQgPiB0ZC5jb3JldWktdGFibGVfX3NlbGVjdF9jb250YWluZXIgPiAuY29yZXVpLXRhYmxlX19zZWxlY3Q6Y2hlY2tlZCcpXG4gICAgICAgICAgICAuZWFjaChmdW5jdGlvbiAoa2V5LCBlbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgaW5kZXhlcy5wdXNoKCQoZWxlbWVudCkudmFsKCkpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIGluZGV4ZXM7XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INCy0YvQsdGA0LDQvdC90YvRhSDQvdCwINGC0LDQsdC70LjRhtC1INGN0LvQtdC80LXQvdGC0L7QslxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0YWJsZUlkXG4gICAgICogQHJldHVybiB7QXJyYXl9XG4gICAgICovXG4gICAgZ2V0Um93c1N3aXRjaGVzOiBmdW5jdGlvbiAodGFibGVJZCkge1xuXG4gICAgICAgIHJldHVybiAkKCcjY29yZXVpLXRhYmxlLScgKyB0YWJsZUlkICsgJyA+IC5jb3JldWktdGFibGVfX2NvbnRhaW5lciA+IC5jb3JldWktdGFibGVfX3dyYXBwZXIgPiB0YWJsZSA+IHRib2R5ID4gdHIuY29yZXVpLXRhYmxlX19yZWNvcmQgPiB0ZC5jb3JldWktdGFibGVfX3N3aXRjaF9jb250YWluZXInKTtcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0Y3Qu9C10LzQtdC90YLQvtCyINCy0YvQsdC+0YDQsCDRgdGC0YDQvtC6XG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRhYmxlSWRcbiAgICAgKiBAcmV0dXJuIHtBcnJheX1cbiAgICAgKi9cbiAgICBnZXRSb3dzU2VsZWN0czogZnVuY3Rpb24gKHRhYmxlSWQpIHtcblxuICAgICAgICByZXR1cm4gJCgnI2NvcmV1aS10YWJsZS0nICsgdGFibGVJZCArICcgPiAuY29yZXVpLXRhYmxlX19jb250YWluZXIgPiAuY29yZXVpLXRhYmxlX193cmFwcGVyICA+IHRhYmxlID4gdGJvZHkgPiB0ci5jb3JldWktdGFibGVfX3JlY29yZCA+IHRkLmNvcmV1aS10YWJsZV9fc2VsZWN0X2NvbnRhaW5lcicpO1xuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSDRjdC70LXQvNC10L3RgtCwINC00LvRjyDQstGL0LHQvtGA0LAg0LLRgdC10YUg0YHRgtGA0L7QulxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0YWJsZUlkXG4gICAgICogQHJldHVybiB7QXJyYXl9XG4gICAgICovXG4gICAgZ2V0Um93c1NlbGVjdEFsbDogZnVuY3Rpb24gKHRhYmxlSWQpIHtcblxuICAgICAgICByZXR1cm4gJCgnI2NvcmV1aS10YWJsZS0nICsgdGFibGVJZCArICcgPiAuY29yZXVpLXRhYmxlX19jb250YWluZXIgPiAuY29yZXVpLXRhYmxlX193cmFwcGVyICA+IHRhYmxlID4gdGhlYWQgPiB0ciA+IHRkIC5jb3JldWktdGFibGVfX3NlbGVjdC1hbGwnKTtcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0Y3Qu9C10LzQtdC90YLQvtCyINC00LvRjyDRgNCw0YHQutGA0YvRgtC40Y8g0Y/Rh9C10LXQulxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0YWJsZUlkXG4gICAgICogQHJldHVybiB7QXJyYXl9XG4gICAgICovXG4gICAgZ2V0Tm9XcmFwVG9nZ2xlczogZnVuY3Rpb24gKHRhYmxlSWQpIHtcblxuICAgICAgICByZXR1cm4gJCgnI2NvcmV1aS10YWJsZS0nICsgdGFibGVJZCArICcgPiAuY29yZXVpLXRhYmxlX19jb250YWluZXIgPiAuY29yZXVpLXRhYmxlX193cmFwcGVyICA+IHRhYmxlID4gdGJvZHkgPiB0ciA+IHRkLmNvcmV1aV90YWJsZV9fbm8td3JhcCA+IGkudG9nZ2xlJyk7XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICog0JLRi9C00LXQu9C10L3QuNC1INGB0YLRgNC+0LrQuCDQsiDRgtCw0LHQu9C40YbQtVxuICAgICAqIEBwYXJhbSB7alF1ZXJ5fSB0clxuICAgICAqL1xuICAgIHNlbGVjdFRyKHRyKSB7XG5cbiAgICAgICAgdHIuYWRkQ2xhc3MoJ3RhYmxlLXByaW1hcnknKTtcbiAgICAgICAgJCgnLmNvcmV1aS10YWJsZV9fc2VsZWN0JywgdHIpLnByb3AoJ2NoZWNrZWQnLCB0cnVlKTtcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiDQktGL0LTQtdC70LXQvdC40LUg0LLRgdC10YUg0YHRgtGA0L7QuiDQsiDRgtCw0LHQu9C40YbQtVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0YWJsZUlkXG4gICAgICovXG4gICAgc2VsZWN0VHJBbGwodGFibGVJZCkge1xuXG4gICAgICAgIGxldCB0YWJsZUNvbnRhaW5lciA9ICcjY29yZXVpLXRhYmxlLScgKyB0YWJsZUlkICsgJyA+IC5jb3JldWktdGFibGVfX2NvbnRhaW5lciA+IC5jb3JldWktdGFibGVfX3dyYXBwZXIgPiB0YWJsZSc7XG5cbiAgICAgICAgJCh0YWJsZUNvbnRhaW5lciArICcgPiB0aGVhZCA+IHRyID4gdGQgPiAuY29yZXVpLXRhYmxlX19zZWxlY3QtYWxsJykucHJvcCgnY2hlY2tlZCcsIHRydWUpO1xuICAgICAgICAkKHRhYmxlQ29udGFpbmVyICsgJyA+IHRib2R5ID4gdHIuY29yZXVpLXRhYmxlX19yZWNvcmQnKS5hZGRDbGFzcygndGFibGUtcHJpbWFyeScpO1xuICAgICAgICAkKHRhYmxlQ29udGFpbmVyICsgJyA+IHRib2R5ID4gdHIuY29yZXVpLXRhYmxlX19yZWNvcmQgPiB0ZCA+IC5jb3JldWktdGFibGVfX3NlbGVjdCcpLnByb3AoJ2NoZWNrZWQnLCB0cnVlKTtcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiDQodC90Y/RgtC40LUg0LLRi9C00LXQu9C10L3QuNC1INGB0YLRgNC+0LrQuCDQsiDRgtCw0LHQu9C40YbQtVxuICAgICAqIEBwYXJhbSB7alF1ZXJ5fSB0clxuICAgICAqL1xuICAgIHVuc2VsZWN0VHIodHIpIHtcblxuICAgICAgICAkKHRyKS5yZW1vdmVDbGFzcygndGFibGUtcHJpbWFyeScpO1xuICAgICAgICAkKCcuY29yZXVpLXRhYmxlX19zZWxlY3QnLCB0cikucHJvcCgnY2hlY2tlZCcsIGZhbHNlKTtcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiDQodC90Y/RgtC40LUg0LLRi9C00LXQu9C10L3QuNC1INGB0L4g0LLRgdC10YUg0YHRgtGA0L7QuiDQsiDRgtCw0LHQu9C40YbQtVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0YWJsZUlkXG4gICAgICovXG4gICAgdW5zZWxlY3RUckFsbCh0YWJsZUlkKSB7XG5cbiAgICAgICAgbGV0IHRhYmxlQ29udGFpbmVyID0gJyNjb3JldWktdGFibGUtJyArIHRhYmxlSWQgKyAnID4gLmNvcmV1aS10YWJsZV9fY29udGFpbmVyID4gLmNvcmV1aS10YWJsZV9fd3JhcHBlciA+IHRhYmxlJztcblxuICAgICAgICAkKHRhYmxlQ29udGFpbmVyICsgJyA+IHRoZWFkID4gdHIgPiB0ZCA+IC5jb3JldWktdGFibGVfX3NlbGVjdC1hbGwnKS5wcm9wKCdjaGVja2VkJywgZmFsc2UpO1xuICAgICAgICAkKHRhYmxlQ29udGFpbmVyICsgJyA+IHRib2R5ID4gdHIuY29yZXVpLXRhYmxlX19yZWNvcmQnKS5yZW1vdmVDbGFzcygndGFibGUtcHJpbWFyeScpO1xuICAgICAgICAkKHRhYmxlQ29udGFpbmVyICsgJyA+IHRib2R5ID4gdHIuY29yZXVpLXRhYmxlX19yZWNvcmQgPiB0ZC5jb3JldWktdGFibGVfX3NlbGVjdF9jb250YWluZXIgPiAuY29yZXVpLXRhYmxlX19zZWxlY3QnKS5wcm9wKCdjaGVja2VkJywgZmFsc2UpO1xuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqINCk0LjQutGB0LDRhtC40Y8g0LrQvtC70L7QvdC+0Log0YHQu9C10LLQsFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0YWJsZUlkXG4gICAgICovXG4gICAgZml4ZWRDb2xzTGVmdDogZnVuY3Rpb24gKHRhYmxlSWQpIHtcblxuICAgICAgICBsZXQgdGFibGVDb250YWluZXIgPSAnI2NvcmV1aS10YWJsZS0nICsgdGFibGVJZCArICcgPiAuY29yZXVpLXRhYmxlX19jb250YWluZXInO1xuICAgICAgICBsZXQgdGFibGVXcmFwcGVyICAgPSB0YWJsZUNvbnRhaW5lciArICcgPiAuY29yZXVpLXRhYmxlX193cmFwcGVyJztcbiAgICAgICAgbGV0IGNvbE9mZnNldCAgICAgID0gMDtcblxuICAgICAgICAkKHRhYmxlV3JhcHBlciArICcgPiB0YWJsZSA+IHRoZWFkID4gdHI6bGFzdC1jaGlsZCA+IHRkLmNvcmV1aS10YWJsZV9fZml4ZWRfbGVmdCcpLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgbGV0IGluZGV4ID0gJCh0aGlzKS5pbmRleCgpICsgMTtcblxuICAgICAgICAgICAgaWYgKGluZGV4ICE9PSAxKSB7XG4gICAgICAgICAgICAgICAgJCh0YWJsZVdyYXBwZXIgKyAnID4gdGFibGUgPiB0aGVhZCA+IHRyOmxhc3QtY2hpbGQgPiB0ZDpudGgtY2hpbGQoJyArIGluZGV4ICsgJyknKS5jc3MoJ2xlZnQnLCBjb2xPZmZzZXQgKyAncHgnKTtcbiAgICAgICAgICAgICAgICAkKHRhYmxlV3JhcHBlciArICcgPiB0YWJsZSA+IHRib2R5ID4gdHIgPiB0ZDpudGgtY2hpbGQoJyArIGluZGV4ICsgJyknKVxuICAgICAgICAgICAgICAgICAgICAvLy5hZGRDbGFzcygnY29yZXVpLXRhYmxlX19maXhlZF9sZWZ0JylcbiAgICAgICAgICAgICAgICAgICAgLmNzcygnbGVmdCcsIGNvbE9mZnNldCArICdweCcpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb2xPZmZzZXQgKz0gJCh0aGlzKS5vdXRlcldpZHRoKCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChjb2xPZmZzZXQgPiAwKSB7XG4gICAgICAgICAgICAkKHRhYmxlQ29udGFpbmVyKS5hZGRDbGFzcygnZml4ZWQtY29sdW1ucycpO1xuICAgICAgICB9XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICog0KTQuNC60YHQsNGG0LjRjyDQutC+0LvQvtC90L7QuiDRgdC/0YDQsNCy0LBcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGFibGVJZFxuICAgICAqL1xuICAgIGZpeGVkQ29sc1JpZ2h0OiBmdW5jdGlvbiAodGFibGVJZCkge1xuXG4gICAgICAgIGxldCB0YWJsZUNvbnRhaW5lciA9ICcjY29yZXVpLXRhYmxlLScgKyB0YWJsZUlkICsgJyA+IC5jb3JldWktdGFibGVfX2NvbnRhaW5lcic7XG4gICAgICAgIGxldCB0YWJsZVdyYXBwZXIgICA9IHRhYmxlQ29udGFpbmVyICsgJyA+IC5jb3JldWktdGFibGVfX3dyYXBwZXInO1xuICAgICAgICBsZXQgY29sT2Zmc2V0ICAgICAgPSAwO1xuXG4gICAgICAgICQoJCh0YWJsZVdyYXBwZXIgKyAnID4gdGFibGUgPiB0aGVhZCA+IHRyOmxhc3QtY2hpbGQgPiB0ZC5jb3JldWktdGFibGVfX2ZpeGVkX3JpZ2h0JykuZ2V0KCkucmV2ZXJzZSgpKS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGxldCBpbmRleCAgPSAkKHRoaXMpLmluZGV4KCkgKyAxO1xuXG4gICAgICAgICAgICBpZiAoaW5kZXggIT09IDEpIHtcbiAgICAgICAgICAgICAgICAkKHRhYmxlV3JhcHBlciArICcgPiB0YWJsZSA+IHRoZWFkID4gdHI6bGFzdC1jaGlsZCA+IHRkOm50aC1jaGlsZCgnICsgaW5kZXggKyAnKScpLmNzcygncmlnaHQnLCBjb2xPZmZzZXQgKyAncHgnKTtcbiAgICAgICAgICAgICAgICAkKHRhYmxlV3JhcHBlciArICcgPiB0YWJsZSA+IHRib2R5ID4gdHIgPiB0ZDpudGgtY2hpbGQoJyArIGluZGV4ICsgJyknKVxuICAgICAgICAgICAgICAgICAgICAvLy5hZGRDbGFzcygnY29yZXVpLXRhYmxlX19maXhlZF9sZWZ0JylcbiAgICAgICAgICAgICAgICAgICAgLmNzcygncmlnaHQnLCBjb2xPZmZzZXQgKyAncHgnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29sT2Zmc2V0ICs9ICQodGhpcykub3V0ZXJXaWR0aCgpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoY29sT2Zmc2V0ID4gMCkge1xuICAgICAgICAgICAgJCh0YWJsZUNvbnRhaW5lcikuYWRkQ2xhc3MoJ2ZpeGVkLWNvbHVtbnMnKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgY29yZXVpVGFibGVFbGVtZW50czsiLCJcclxuaW1wb3J0IGNvcmV1aVRhYmxlVXRpbHMgICAgZnJvbSBcIi4vY29yZXVpLnRhYmxlLnV0aWxzXCI7XHJcbmltcG9ydCBjb3JldWlUYWJsZUVsZW1lbnRzIGZyb20gXCIuL2NvcmV1aS50YWJsZS5lbGVtZW50c1wiO1xyXG5pbXBvcnQgY29yZXVpVGFibGUgZnJvbSBcIi4vY29yZXVpLnRhYmxlXCI7XHJcblxyXG5cclxubGV0IGNvcmV1aVRhYmxlUHJpdmF0ZSA9IHtcclxuXHJcbiAgICAvKipcclxuICAgICAqINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPINC60L7Qu9C+0L3QvtC6XHJcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gdGFibGVXcmFwcGVyXHJcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gdGFibGVcclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGNvbHVtbnNcclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIGluaXRDb2x1bW5zKHRhYmxlV3JhcHBlciwgdGFibGUsIGNvbHVtbnMpIHtcclxuXHJcbiAgICAgICAgbGV0IG9wdGlvbnMgICAgICAgID0gdGFibGUuZ2V0T3B0aW9ucygpO1xyXG4gICAgICAgIGxldCBjb2x1bW5zU3RvcmFnZSA9IG9wdGlvbnMuc2F2ZVN0YXRlICYmIG9wdGlvbnMuaWRcclxuICAgICAgICAgICAgPyBjb3JldWlUYWJsZVByaXZhdGUuZ2V0U3RvcmFnZUZpZWxkKHRhYmxlLmdldElkKCksICdjb2x1bW5zJylcclxuICAgICAgICAgICAgOiBudWxsO1xyXG5cclxuICAgICAgICAkLmVhY2goY29sdW1ucywgZnVuY3Rpb24gKGtleSwgY29sdW1uKSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29sdW1uLnR5cGUgPT09ICd1bmRlZmluZWQnIHx8XHJcbiAgICAgICAgICAgICAgICAhIHRhYmxlV3JhcHBlci5jb2x1bW5zLmhhc093blByb3BlcnR5KGNvbHVtbi50eXBlKVxyXG4gICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgIGNvbHVtbi50eXBlID0gJ3RleHQnO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoICEgY29sdW1uLmhhc093blByb3BlcnR5KCdzaG93JykgfHwgdHlwZW9mIGNvbHVtbi5zaG93ICE9PSAnYm9vbGVhbicpIHtcclxuICAgICAgICAgICAgICAgIGNvbHVtbi5zaG93ID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGNvbHVtbnNTdG9yYWdlKSB7XHJcbiAgICAgICAgICAgICAgICAkLmVhY2goY29sdW1uc1N0b3JhZ2UsIGZ1bmN0aW9uIChrZXkyLCBjb2x1bW5TdG9yYWdlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbHVtblN0b3JhZ2UgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29sdW1uU3RvcmFnZS5oYXNPd25Qcm9wZXJ0eSgnZmllbGQnKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2x1bW5TdG9yYWdlLmhhc093blByb3BlcnR5KCdpc1Nob3cnKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2x1bW5TdG9yYWdlLmZpZWxkID09PSBjb2x1bW4uZmllbGRcclxuICAgICAgICAgICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29sdW1uLnNob3cgPSAhISBjb2x1bW5TdG9yYWdlLmlzU2hvdztcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICAgICAgaWYgKGNvbHVtbi5oYXNPd25Qcm9wZXJ0eSgnZml4ZWQnKSAmJiB0eXBlb2YgY29sdW1uLmZpeGVkID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICAgICAgdGFibGUuX29wdGlvbnMub3ZlcmZsb3cgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBsZXQgY29sdW1uSW5zdGFuY2UgPSBuZXcgY29yZXVpVGFibGUuY29sdW1uc1tjb2x1bW4udHlwZV0odGFibGUsIGNvbHVtbik7XHJcbiAgICAgICAgICAgIHRhYmxlLl9jb2x1bW5zLnB1c2goY29sdW1uSW5zdGFuY2UpO1xyXG5cclxuICAgICAgICAgICAgaWYgKGNvbHVtbkluc3RhbmNlLmlzU2hvdygpKSB7XHJcbiAgICAgICAgICAgICAgICB0YWJsZS5fY291bnRDb2x1bW5zU2hvdysrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPINC/0L7QuNGB0LrQvtCy0YvRhSDQv9C+0LvQtdC5XHJcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gdGFibGVXcmFwcGVyXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gdGFibGVcclxuICAgICAqIEBwYXJhbSB7QXJyYXl9ICBzZWFyY2hDb250cm9sc1xyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgaW5pdFNlYXJjaDogZnVuY3Rpb24gKHRhYmxlV3JhcHBlciwgdGFibGUsIHNlYXJjaENvbnRyb2xzKSB7XHJcblxyXG4gICAgICAgIGxldCBvcHRpb25zICAgICAgPSB0YWJsZS5nZXRPcHRpb25zKCk7XHJcbiAgICAgICAgbGV0IHNlYXJjaFZhbHVlcyA9IG9wdGlvbnMuc2F2ZVN0YXRlICYmIG9wdGlvbnMuaWRcclxuICAgICAgICAgICAgPyBjb3JldWlUYWJsZVByaXZhdGUuZ2V0U3RvcmFnZUZpZWxkKHRhYmxlLmdldElkKCksICdzZWFyY2gnKVxyXG4gICAgICAgICAgICA6IG51bGw7XHJcblxyXG4gICAgICAgICQuZWFjaChzZWFyY2hDb250cm9scywgZnVuY3Rpb24gKGtleSwgY29udHJvbCkge1xyXG4gICAgICAgICAgICBpZiAoICEgY29yZXVpVGFibGVVdGlscy5pc09iamVjdChjb250cm9sKSkge1xyXG4gICAgICAgICAgICAgICAgY29udHJvbCA9IHt9O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoICEgY29udHJvbC5oYXNPd25Qcm9wZXJ0eSgndHlwZScpIHx8XHJcbiAgICAgICAgICAgICAgICB0eXBlb2YgY29udHJvbC50eXBlICE9PSAnc3RyaW5nJyB8fFxyXG4gICAgICAgICAgICAgICAgISB0YWJsZVdyYXBwZXIuc2VhcmNoLmhhc093blByb3BlcnR5KGNvbnRyb2wudHlwZSlcclxuICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICBjb250cm9sLnR5cGUgPSAndGV4dCc7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChvcHRpb25zLnNhdmVTdGF0ZSAmJiBvcHRpb25zLmlkKSB7XHJcbiAgICAgICAgICAgICAgICBjb250cm9sLnZhbHVlID0gbnVsbDtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShzZWFyY2hWYWx1ZXMpICYmIGNvbnRyb2wuaGFzT3duUHJvcGVydHkoJ2ZpZWxkJykpIHtcclxuICAgICAgICAgICAgICAgICAgICAkLmVhY2goc2VhcmNoVmFsdWVzLCBmdW5jdGlvbiAoa2V5LCBzZWFyY2gpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3Qoc2VhcmNoKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VhcmNoLmhhc093blByb3BlcnR5KCdmaWVsZCcpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWFyY2guaGFzT3duUHJvcGVydHkoJ3ZhbHVlJykgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlYXJjaC5maWVsZCAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VhcmNoLmZpZWxkID09PSBjb250cm9sLmZpZWxkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbC52YWx1ZSA9IHNlYXJjaC52YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGxldCBjb250cm9sSW5zdGFuY2UgPSBuZXcgY29yZXVpVGFibGUuc2VhcmNoW2NvbnRyb2wudHlwZV0odGFibGUsIGNvbnRyb2wpO1xyXG4gICAgICAgICAgICB0YWJsZS5fc2VhcmNoLnB1c2goY29udHJvbEluc3RhbmNlKTtcclxuICAgICAgICB9KTtcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y8g0LrQvtC90YLRgNC+0LvQvtCyINC4INGE0LjQu9GM0YLRgNC+0LJcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSB0YWJsZVdyYXBwZXJcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSB0YWJsZVxyXG4gICAgICogQHBhcmFtIHtBcnJheX0gIHJvd3NcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwb3NpdGlvblxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgaW5pdENvbnRyb2xzOiBmdW5jdGlvbiAodGFibGVXcmFwcGVyLCB0YWJsZSwgcm93cywgcG9zaXRpb24pIHtcclxuXHJcbiAgICAgICAgbGV0IHRoYXQgPSB0aGlzO1xyXG5cclxuICAgICAgICAkLmVhY2gocm93cywgZnVuY3Rpb24gKGtleSwgcm93KSB7XHJcblxyXG4gICAgICAgICAgICBsZXQgdHlwZSAgICAgICAgICAgPSAnaW4nO1xyXG4gICAgICAgICAgICBsZXQgY29udHJvbHNMZWZ0ICAgPSBbXTtcclxuICAgICAgICAgICAgbGV0IGNvbnRyb2xzQ2VudGVyID0gW107XHJcbiAgICAgICAgICAgIGxldCBjb250cm9sc1JpZ2h0ICA9IFtdO1xyXG5cclxuICAgICAgICAgICAgaWYgKHR5cGVvZiByb3cudHlwZSA9PT0gJ3N0cmluZycgJiZcclxuICAgICAgICAgICAgICAgIFsnaW4nLCAnb3V0J10uaW5kZXhPZihyb3cudHlwZS50b0xvd2VyQ2FzZSgpKSA+PSAwXHJcbiAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgdHlwZSA9IHJvdy50eXBlLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChyb3cuaGFzT3duUHJvcGVydHkoJ2xlZnQnKSAmJiBBcnJheS5pc0FycmF5KHJvdy5sZWZ0KSkge1xyXG4gICAgICAgICAgICAgICAgJC5lYWNoKHJvdy5sZWZ0LCBmdW5jdGlvbiAoa2V5LCBjb250cm9sKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGluc3RhbmNlID0gdGhhdC5pbml0Q29udHJvbCh0YWJsZVdyYXBwZXIsIHRhYmxlLCBjb250cm9sKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QoaW5zdGFuY2UpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xzTGVmdC5wdXNoKGluc3RhbmNlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHJvdy5oYXNPd25Qcm9wZXJ0eSgnY2VudGVyJykgJiYgQXJyYXkuaXNBcnJheShyb3cuY2VudGVyKSkge1xyXG4gICAgICAgICAgICAgICAgJC5lYWNoKHJvdy5jZW50ZXIsIGZ1bmN0aW9uIChrZXksIGNvbnRyb2wpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgaW5zdGFuY2UgPSB0aGF0LmluaXRDb250cm9sKHRhYmxlV3JhcHBlciwgdGFibGUsIGNvbnRyb2wpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoY29yZXVpVGFibGVVdGlscy5pc09iamVjdChpbnN0YW5jZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbHNDZW50ZXIucHVzaChpbnN0YW5jZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChyb3cuaGFzT3duUHJvcGVydHkoJ3JpZ2h0JykgJiYgQXJyYXkuaXNBcnJheShyb3cucmlnaHQpKSB7XHJcbiAgICAgICAgICAgICAgICAkLmVhY2gocm93LnJpZ2h0LCBmdW5jdGlvbiAoa2V5LCBjb250cm9sKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGluc3RhbmNlID0gdGhhdC5pbml0Q29udHJvbCh0YWJsZVdyYXBwZXIsIHRhYmxlLCBjb250cm9sKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QoaW5zdGFuY2UpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xzUmlnaHQucHVzaChpbnN0YW5jZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChjb250cm9sc0xlZnQubGVuZ3RoID4gMCB8fCBjb250cm9sc0NlbnRlci5sZW5ndGggPiAwIHx8IGNvbnRyb2xzUmlnaHQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgdGFibGUuX2NvbnRyb2xzUG9zaXRpb25zW3Bvc2l0aW9uXS5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICB0eXBlOiB0eXBlLFxyXG4gICAgICAgICAgICAgICAgICAgIGxlZnQ6IGNvbnRyb2xzTGVmdCxcclxuICAgICAgICAgICAgICAgICAgICBjZW50ZXI6IGNvbnRyb2xzQ2VudGVyLFxyXG4gICAgICAgICAgICAgICAgICAgIHJpZ2h0OiBjb250cm9sc1JpZ2h0LFxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y8g0LrQvtC90YLRgNC+0LvQsCDQuNC70Lgg0YTQuNC70YzRgtGA0LBcclxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSB0YWJsZVdyYXBwZXJcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSB0YWJsZVxyXG4gICAgICogQHBhcmFtIHtvYmplY3R9IGNvbnRyb2xcclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIGluaXRDb250cm9sOiBmdW5jdGlvbiAodGFibGVXcmFwcGVyLCB0YWJsZSwgY29udHJvbCkge1xyXG5cclxuICAgICAgICBsZXQgaW5zdGFuY2UgPSBudWxsO1xyXG5cclxuICAgICAgICBpZiAoY29yZXVpVGFibGVVdGlscy5pc09iamVjdChjb250cm9sKSAmJiB0eXBlb2YgY29udHJvbC50eXBlID09PSAnc3RyaW5nJykge1xyXG5cclxuICAgICAgICAgICAgaWYgKHRhYmxlV3JhcHBlci5jb250cm9scy5oYXNPd25Qcm9wZXJ0eShjb250cm9sLnR5cGUpKSB7XHJcbiAgICAgICAgICAgICAgICBpbnN0YW5jZSA9IG5ldyBjb3JldWlUYWJsZS5jb250cm9sc1tjb250cm9sLnR5cGVdKHRhYmxlLCBjb250cm9sKTtcclxuICAgICAgICAgICAgICAgIHRhYmxlLl9jb250cm9scy5wdXNoKGluc3RhbmNlKTtcclxuXHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY29udHJvbC50eXBlLmluZGV4T2YoJ2ZpbHRlcjonKSA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgbGV0IGZpbHRlck5hbWUgPSBjb250cm9sLnR5cGUuc3Vic3RyaW5nKDcpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0YWJsZVdyYXBwZXIuZmlsdGVycy5oYXNPd25Qcm9wZXJ0eShmaWx0ZXJOYW1lKSkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoY29udHJvbC5oYXNPd25Qcm9wZXJ0eSgnZmllbGQnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgb3B0aW9ucyA9IHRhYmxlLmdldE9wdGlvbnMoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLnNhdmVTdGF0ZSAmJiBvcHRpb25zLmlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgZmlsdGVyVmFsdWVzID0gb3B0aW9ucy5zYXZlU3RhdGUgJiYgb3B0aW9ucy5pZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gY29yZXVpVGFibGVQcml2YXRlLmdldFN0b3JhZ2VGaWVsZCh0YWJsZS5nZXRJZCgpLCAnZmlsdGVycycpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBudWxsO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2wudmFsdWUgPSBudWxsO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGZpbHRlclZhbHVlcykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLmVhY2goZmlsdGVyVmFsdWVzLCBmdW5jdGlvbiAoa2V5LCBmaWx0ZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QoZmlsdGVyKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsdGVyLmhhc093blByb3BlcnR5KCdmaWVsZCcpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWx0ZXIuaGFzT3duUHJvcGVydHkoJ3ZhbHVlJykgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbHRlci5maWVsZCAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsdGVyLmZpZWxkID09PSBjb250cm9sLmZpZWxkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbC52YWx1ZSA9IGZpbHRlci52YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGluc3RhbmNlID0gbmV3IGNvcmV1aVRhYmxlLmZpbHRlcnNbZmlsdGVyTmFtZV0odGFibGUsIGNvbnRyb2wpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRhYmxlLl9maWx0ZXJzLnB1c2goaW5zdGFuY2UpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gaW5zdGFuY2U7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPINGB0L7RgNGC0LjRgNC+0LLQutC4XHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gdGFibGVcclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHNvcnRcclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIGluaXRTb3J0OiBmdW5jdGlvbiAodGFibGUsIHNvcnQpIHtcclxuXHJcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoc29ydCkgJiYgc29ydC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICQuZWFjaChzb3J0LCBmdW5jdGlvbiAoa2V5LCBzb3J0RmllbGQpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY29yZXVpVGFibGVVdGlscy5pc09iamVjdChzb3J0RmllbGQpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgc29ydEZpZWxkLmhhc093blByb3BlcnR5KCdmaWVsZCcpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgc29ydEZpZWxkLmhhc093blByb3BlcnR5KCdvcmRlcicpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZW9mIHNvcnRGaWVsZC5maWVsZCA9PT0gJ3N0cmluZycgJiZcclxuICAgICAgICAgICAgICAgICAgICB0eXBlb2Ygc29ydEZpZWxkLm9yZGVyID09PSAnc3RyaW5nJyAmJlxyXG4gICAgICAgICAgICAgICAgICAgIHNvcnRGaWVsZC5maWVsZCAmJlxyXG4gICAgICAgICAgICAgICAgICAgIHNvcnRGaWVsZC5vcmRlciAmJlxyXG4gICAgICAgICAgICAgICAgICAgIFsnYXNjJywgJ2Rlc2MnXS5pbmRleE9mKHNvcnRGaWVsZC5vcmRlcikgPj0gMFxyXG4gICAgICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGFibGUuX3NvcnQucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkOiBzb3J0RmllbGQuZmllbGQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9yZGVyOiBzb3J0RmllbGQub3JkZXJcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQn9C+0LjRgdC6INC/0L4g0LTQsNC90L3Ri9C8INGC0LDQsdC70LjRhtGLXHJcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gdGFibGVcclxuICAgICAqL1xyXG4gICAgc2VhcmNoTG9jYWxSZWNvcmRzOiBmdW5jdGlvbiAodGFibGUpIHtcclxuXHJcbiAgICAgICAgbGV0IHNlYXJjaERhdGEgICAgID0gdGFibGUuZ2V0U2VhcmNoRGF0YSh0cnVlKTtcclxuICAgICAgICBsZXQgZmlsdGVyRGF0YSAgICAgPSB0YWJsZS5nZXRGaWx0ZXJEYXRhKHRydWUpO1xyXG4gICAgICAgIGxldCBjb2x1bW5zT3B0aW9ucyA9IHt9O1xyXG5cclxuICAgICAgICB0YWJsZS5fY29sdW1ucy5tYXAoZnVuY3Rpb24gKGNvbHVtbikge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvbHVtbi5jb252ZXJ0VG9TdHJpbmcgPT09ICdmdW5jdGlvbicgJiZcclxuICAgICAgICAgICAgICAgIHR5cGVvZiBjb2x1bW4uZ2V0RmllbGQgPT09ICdmdW5jdGlvbidcclxuICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgZmllbGQgPSBjb2x1bW4uZ2V0RmllbGQoKVxyXG4gICAgICAgICAgICAgICAgaWYgKGZpZWxkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29sdW1uc09wdGlvbnNbZmllbGRdID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgY29sdW1uc09wdGlvbnNbZmllbGRdLmNvbnZlcnRUb1N0cmluZyA9IGNvbHVtbi5jb252ZXJ0VG9TdHJpbmc7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcblxyXG4gICAgICAgIHRhYmxlLl9yZWNvcmRzLm1hcChmdW5jdGlvbiAocmVjb3JkKSB7XHJcbiAgICAgICAgICAgIGxldCBpc1Nob3cgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgaWYgKHNlYXJjaERhdGEubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgaXNTaG93ID0gY29yZXVpVGFibGVQcml2YXRlLmlzRmlsdGVyZWRSZWNvcmQoc2VhcmNoRGF0YSwgcmVjb3JkLmRhdGEsIGNvbHVtbnNPcHRpb25zKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGlzU2hvdyAmJiBmaWx0ZXJEYXRhLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgIGlzU2hvdyA9IGNvcmV1aVRhYmxlUHJpdmF0ZS5pc0ZpbHRlcmVkUmVjb3JkKGZpbHRlckRhdGEsIHJlY29yZC5kYXRhLCBjb2x1bW5zT3B0aW9ucyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJlY29yZC5zaG93ID0gaXNTaG93O1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQo9GB0YLQsNC90L7QstC60LAg0LfQsNC/0LjRgdC10LlcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSB0YWJsZVxyXG4gICAgICogQHBhcmFtIHtBcnJheX0gIHJlY29yZHNcclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIHNldFJlY29yZHM6IGZ1bmN0aW9uICh0YWJsZSwgcmVjb3Jkcykge1xyXG5cclxuICAgICAgICB0YWJsZS5fcmVjb3Jkc0luZGV4ID0gMTtcclxuICAgICAgICB0YWJsZS5fcmVjb3JkcyAgICAgID0gW107XHJcblxyXG4gICAgICAgIGxldCB0aGF0ID0gdGhpcztcclxuXHJcbiAgICAgICAgJC5lYWNoKHJlY29yZHMsIGZ1bmN0aW9uIChrZXksIHJlY29yZCkge1xyXG5cclxuICAgICAgICAgICAgdGhhdC5hZGRSZWNvcmQodGFibGUsIHJlY29yZCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCU0L7QsdCw0LLQu9C10L3QuNC1INC90L7QstC+0Lkg0LfQsNC/0LjRgdC4XHJcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gdGFibGVcclxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBkYXRhXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYWZ0ZXJJbmRleFxyXG4gICAgICogQHJldHVybiB7b2JqZWN0fG51bGx9XHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBhZGRSZWNvcmQ6IGZ1bmN0aW9uICh0YWJsZSwgZGF0YSwgYWZ0ZXJJbmRleCkge1xyXG5cclxuICAgICAgICBpZiAoY29yZXVpVGFibGVVdGlscy5pc09iamVjdChkYXRhKSkge1xyXG4gICAgICAgICAgICBkYXRhID0gJC5leHRlbmQodHJ1ZSwge30sIGRhdGEpO1xyXG5cclxuICAgICAgICAgICAgbGV0IG1ldGEgPSBkYXRhLmhhc093blByb3BlcnR5KCdfbWV0YScpICYmIGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QoZGF0YS5fbWV0YSlcclxuICAgICAgICAgICAgICAgID8gZGF0YS5fbWV0YVxyXG4gICAgICAgICAgICAgICAgOiBudWxsO1xyXG5cclxuICAgICAgICAgICAgaWYgKG1ldGEpIHtcclxuICAgICAgICAgICAgICAgIGRlbGV0ZSBkYXRhLl9tZXRhO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBsZXQgcmVjb3JkID0ge1xyXG4gICAgICAgICAgICAgICAgaW5kZXg6IHRhYmxlLl9yZWNvcmRzSW5kZXgrKyxcclxuICAgICAgICAgICAgICAgIGRhdGE6IGRhdGEsXHJcbiAgICAgICAgICAgICAgICBzaG93OiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgbWV0YTogbWV0YSxcclxuICAgICAgICAgICAgICAgIHNlcTogdGFibGUuX3NlcSsrLFxyXG4gICAgICAgICAgICB9O1xyXG5cclxuXHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgYWZ0ZXJJbmRleCA9PT0gJ251bWJlcicpIHtcclxuICAgICAgICAgICAgICAgIGlmIChhZnRlckluZGV4ID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGFibGUuX3JlY29yZHMuc3BsaWNlKDAsIDAsIHJlY29yZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlY29yZDtcclxuXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBpbmRleCA9IG51bGw7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICQuZWFjaCh0YWJsZS5fcmVjb3JkcywgZnVuY3Rpb24gKGtleSwgcmVjb3JkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhZnRlckluZGV4ID09PSByZWNvcmQuaW5kZXgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4ID0ga2V5O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpbmRleCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0YWJsZS5fcmVjb3Jkcy5zcGxpY2UoaW5kZXgsIDAsIHJlY29yZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZWNvcmQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRhYmxlLl9yZWNvcmRzLnB1c2gocmVjb3JkKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiByZWNvcmQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0JTQvtCx0LDQstC70LXQvdC40LUg0L3QvtCy0L7QuSDQt9Cw0L/QuNGB0Lgg0L/QtdGA0LXQtCDRg9C60LDQt9Cw0L3QvdC+0LlcclxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSB0YWJsZVxyXG4gICAgICogQHBhcmFtIHtvYmplY3R9IGRhdGFcclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleFxyXG4gICAgICogQHJldHVybiB7b2JqZWN0fG51bGx9XHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBhZGRSZWNvcmRCZWZvcmU6IGZ1bmN0aW9uICh0YWJsZSwgZGF0YSwgaW5kZXgpIHtcclxuXHJcbiAgICAgICAgaWYgKGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QoZGF0YSkgJiYgdHlwZW9mIGluZGV4ID09PSAnbnVtYmVyJykge1xyXG4gICAgICAgICAgICBkYXRhID0gJC5leHRlbmQodHJ1ZSwge30sIGRhdGEpO1xyXG5cclxuICAgICAgICAgICAgbGV0IG1ldGEgPSBkYXRhLmhhc093blByb3BlcnR5KCdfbWV0YScpICYmIGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QoZGF0YS5fbWV0YSlcclxuICAgICAgICAgICAgICAgID8gZGF0YS5fbWV0YVxyXG4gICAgICAgICAgICAgICAgOiBudWxsO1xyXG5cclxuICAgICAgICAgICAgaWYgKG1ldGEpIHtcclxuICAgICAgICAgICAgICAgIGRlbGV0ZSBkYXRhLl9tZXRhO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBsZXQgcmVjb3JkID0ge1xyXG4gICAgICAgICAgICAgICAgaW5kZXg6IHRhYmxlLl9yZWNvcmRzSW5kZXgrKyxcclxuICAgICAgICAgICAgICAgIGRhdGE6IGRhdGEsXHJcbiAgICAgICAgICAgICAgICBzaG93OiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgbWV0YTogbWV0YSxcclxuICAgICAgICAgICAgICAgIHNlcTogdGFibGUuX3NlcSsrLFxyXG4gICAgICAgICAgICB9O1xyXG5cclxuXHJcbiAgICAgICAgICAgIGxldCBpc3NldEtleSAgPSBmYWxzZTtcclxuICAgICAgICAgICAgbGV0IGtleUJlZm9yZSA9IG51bGw7XHJcblxyXG4gICAgICAgICAgICAkLmVhY2godGFibGUuX3JlY29yZHMsIGZ1bmN0aW9uIChrZXksIHJlY29yZCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGluZGV4ID09PSByZWNvcmQuaW5kZXgpIHtcclxuICAgICAgICAgICAgICAgICAgICBpc3NldEtleSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGtleUJlZm9yZSA9IGtleTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBpZiAoaXNzZXRLZXkgJiYga2V5QmVmb3JlKSB7XHJcbiAgICAgICAgICAgICAgICB0YWJsZS5fcmVjb3Jkcy5zcGxpY2Uoa2V5QmVmb3JlLCAwLCByZWNvcmQpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlY29yZDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQn9GA0L7QstC10YDQutCwINC/0L7QtNGF0L7QtNC40YIg0LvQuCDQt9Cw0L/QuNGB0Ywg0L/QvtC0INC/0L7QuNGB0LrQvtCy0YvQtSDQtNCw0L3QvdGL0LVcclxuICAgICAqIEBwYXJhbSB7QXJyYXl9ICBmaWx0ZXJzXHJcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gcmVjb3JkRGF0YVxyXG4gICAgICogQHBhcmFtIHtvYmplY3R9IGNvbHVtbnNPcHRpb25zXHJcbiAgICAgKiBAcmV0dXJuIHtib29sZWFufVxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgaXNGaWx0ZXJlZFJlY29yZDogZnVuY3Rpb24gKGZpbHRlcnMsIHJlY29yZERhdGEsIGNvbHVtbnNPcHRpb25zKSB7XHJcblxyXG4gICAgICAgIGxldCBpc1Nob3cgPSB0cnVlO1xyXG4gICAgICAgICQuZWFjaChmaWx0ZXJzLCBmdW5jdGlvbiAoa2V5LCBmaWx0ZXIpIHtcclxuXHJcbiAgICAgICAgICAgIGxldCBmaWVsZFZhbHVlID0gbnVsbDtcclxuXHJcbiAgICAgICAgICAgIGlmIChyZWNvcmREYXRhLmhhc093blByb3BlcnR5KGZpbHRlci5maWVsZCkgJiYgcmVjb3JkRGF0YVtmaWx0ZXIuZmllbGRdKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoY29sdW1uc09wdGlvbnMgJiZcclxuICAgICAgICAgICAgICAgICAgICBjb2x1bW5zT3B0aW9ucy5oYXNPd25Qcm9wZXJ0eShmaWx0ZXIuZmllbGQpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGNvbHVtbnNPcHRpb25zW2ZpbHRlci5maWVsZF0uY29udmVydFRvU3RyaW5nID09PSAnZnVuY3Rpb24nXHJcbiAgICAgICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgICAgICBmaWVsZFZhbHVlID0gY29sdW1uc09wdGlvbnNbZmlsdGVyLmZpZWxkXS5jb252ZXJ0VG9TdHJpbmcocmVjb3JkRGF0YVtmaWx0ZXIuZmllbGRdKTtcclxuXHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiByZWNvcmREYXRhW2ZpbHRlci5maWVsZF0gPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZmllbGRWYWx1ZSA9IHJlY29yZERhdGFbZmlsdGVyLmZpZWxkXTtcclxuXHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiByZWNvcmREYXRhW2ZpbHRlci5maWVsZF0gPT09ICdudW1iZXInKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZmllbGRWYWx1ZSA9IFN0cmluZyhyZWNvcmREYXRhW2ZpbHRlci5maWVsZF0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICAgICAgaWYgKGZpZWxkVmFsdWUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIGlmICggISBmaWx0ZXIuZmlsdGVyKGZpZWxkVmFsdWUsIGZpbHRlci52YWx1ZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpc1Nob3cgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaXNTaG93ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGlzU2hvdztcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0JLRi9C/0L7Qu9C90LXQvdC40Y8g0LfQsNGA0LXQs9C40YHRgtGA0LjRgNC+0LLQsNC90L3Ri9GFINGE0YPQvdC60YbQuNC5INCyINGD0LrQsNC30LDQvdC90L7QvCDRgdC+0LHRi9GC0LjQuFxyXG4gICAgICogQHBhcmFtIHtvYmplY3R9IHRhYmxlXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxyXG4gICAgICogQHBhcmFtIHtBcnJheX0gIHBhcmFtc1xyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgX3RyaWdnZXI6IGZ1bmN0aW9uKHRhYmxlLCBuYW1lLCBwYXJhbXMpIHtcclxuXHJcbiAgICAgICAgcGFyYW1zID0gcGFyYW1zIHx8IFtdO1xyXG5cclxuICAgICAgICBpZiAodGFibGUuX2V2ZW50cy5oYXNPd25Qcm9wZXJ0eShuYW1lKSAmJiB0YWJsZS5fZXZlbnRzW25hbWVdLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0YWJsZS5fZXZlbnRzW25hbWVdLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgY2FsbGJhY2sgPSB0YWJsZS5fZXZlbnRzW25hbWVdW2ldLmNhbGxiYWNrO1xyXG4gICAgICAgICAgICAgICAgbGV0IGNvbnRleHQgID0gdGFibGUuX2V2ZW50c1tuYW1lXVtpXS5jb250ZXh0ID8gdGFibGUuX2V2ZW50c1tuYW1lXVtpXS5jb250ZXh0IDogdGFibGU7XHJcblxyXG4gICAgICAgICAgICAgICAgY2FsbGJhY2suYXBwbHkoY29udGV4dCwgcGFyYW1zKVxyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0YWJsZS5fZXZlbnRzW25hbWVdW2ldLnNpbmdsZUV4ZWMpIHtcclxuICAgICAgICAgICAgICAgICAgICB0YWJsZS5fZXZlbnRzW25hbWVdLnNwbGljZShpLCAxKTtcclxuICAgICAgICAgICAgICAgICAgICBpLS07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCh0L7RgNGC0LjRgNC+0LLQutCwINC30LDQv9C40YHQtdC5INC/0L4gc2VxXHJcbiAgICAgKiBAcGFyYW0ge0FycmF5fSByZWNvcmRzXHJcbiAgICAgKiBAcmV0dXJuIHsqfVxyXG4gICAgICovXHJcbiAgICBzb3J0UmVjb3Jkc0J5U2VxOiBmdW5jdGlvbiAocmVjb3Jkcykge1xyXG5cclxuICAgICAgICByZXR1cm4gcmVjb3Jkcy5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBhLnNlcSAtIGIuc2VxO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQodC+0YDRgtC40YDQvtCy0LrQsCDQt9Cw0L/QuNGB0LXQuSDQv9C+INGD0LrQsNC30LDQvdC90YvQvCDQv9C+0LvRj9C8XHJcbiAgICAgKiBAcGFyYW0ge0FycmF5fSAgcmVjb3Jkc1xyXG4gICAgICogQHBhcmFtIHtBcnJheX0gIGZpZWxkc1xyXG4gICAgICogQHBhcmFtIHtvYmplY3R9IGNvbHVtbnNDb252ZXJ0ZXJzXHJcbiAgICAgKi9cclxuICAgIHNvcnRSZWNvcmRzQnlGaWVsZHM6IGZ1bmN0aW9uIChyZWNvcmRzLCBmaWVsZHMsIGNvbHVtbnNDb252ZXJ0ZXJzKSB7XHJcblxyXG4gICAgICAgIHJldHVybiByZWNvcmRzLnNvcnQoZnVuY3Rpb24oYSwgYikge1xyXG5cclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmaWVsZHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGxldCBpc3NldEFGaWVsZCA9IGEuZGF0YS5oYXNPd25Qcm9wZXJ0eShmaWVsZHNbaV0uZmllbGQpO1xyXG4gICAgICAgICAgICAgICAgbGV0IGlzc2V0QkZpZWxkID0gYi5kYXRhLmhhc093blByb3BlcnR5KGZpZWxkc1tpXS5maWVsZCk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCAhIGlzc2V0QUZpZWxkICYmICEgaXNzZXRCRmllbGQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gMDtcclxuXHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCAhIGlzc2V0QUZpZWxkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDE7XHJcblxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICggISBpc3NldEJGaWVsZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAtMTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgYVZhbCA9ICcnO1xyXG4gICAgICAgICAgICAgICAgbGV0IGJWYWwgPSAnJztcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoYS5kYXRhLmhhc093blByb3BlcnR5KGZpZWxkc1tpXS5maWVsZCkgJiYgYS5kYXRhW2ZpZWxkc1tpXS5maWVsZF0pIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY29sdW1uc0NvbnZlcnRlcnMgJiYgY29sdW1uc0NvbnZlcnRlcnMuaGFzT3duUHJvcGVydHkoZmllbGRzW2ldLmZpZWxkKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhVmFsID0gY29sdW1uc0NvbnZlcnRlcnNbZmllbGRzW2ldLmZpZWxkXShhLmRhdGFbZmllbGRzW2ldLmZpZWxkXSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2YgYS5kYXRhW2ZpZWxkc1tpXS5maWVsZF0pID49IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYVZhbCA9IFN0cmluZyhhLmRhdGFbZmllbGRzW2ldLmZpZWxkXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChiLmRhdGEuaGFzT3duUHJvcGVydHkoZmllbGRzW2ldLmZpZWxkKSAmJiBiLmRhdGFbZmllbGRzW2ldLmZpZWxkXSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjb2x1bW5zQ29udmVydGVycyAmJiBjb2x1bW5zQ29udmVydGVycy5oYXNPd25Qcm9wZXJ0eShmaWVsZHNbaV0uZmllbGQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJWYWwgPSBjb2x1bW5zQ29udmVydGVyc1tmaWVsZHNbaV0uZmllbGRdKGIuZGF0YVtmaWVsZHNbaV0uZmllbGRdKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiBiLmRhdGFbZmllbGRzW2ldLmZpZWxkXSkgPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBiVmFsID0gU3RyaW5nKGIuZGF0YVtmaWVsZHNbaV0uZmllbGRdKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGFWYWwgPT09IG51bGwgfHwgYVZhbCA9PT0gdW5kZWZpbmVkIHx8IHR5cGVvZiBhVmFsID09PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBhVmFsID0gJyc7XHJcblxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgYVZhbCA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgICAgICAgICAgICAgICBhVmFsID0gSlNPTi5zdHJpbmdpZnkoYVZhbCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGJWYWwgPT09IG51bGwgfHwgYlZhbCA9PT0gdW5kZWZpbmVkIHx8IHR5cGVvZiBiVmFsID09PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBiVmFsID0gJyc7XHJcblxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgYlZhbCA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgICAgICAgICAgICAgICBiVmFsID0gSlNPTi5zdHJpbmdpZnkoYlZhbCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgbGV0IHZhbCA9IGFWYWwgPCBiVmFsXHJcbiAgICAgICAgICAgICAgICAgICAgPyAtMVxyXG4gICAgICAgICAgICAgICAgICAgIDogKGFWYWwgPiBiVmFsID8gMSA6IDApO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChmaWVsZHNbaV0ub3JkZXIgPT09IFwiZGVzY1wiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFsID0gdmFsICogLTE7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHZhbCAhPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWw7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQo9GB0YLQsNC90L7QstC60LAg0YHQvtGA0YLQuNGA0L7QstC60Lgg0LTQu9GPINGD0LrQsNC30LDQvdC90YvRhSDQutC+0LvQvtC90L7QulxyXG4gICAgICogQHBhcmFtIHtvYmplY3R9IHRhYmxlXHJcbiAgICAgKiBAcGFyYW0ge0FycmF5fSAgc29ydFxyXG4gICAgICovXHJcbiAgICBzZXRDb2x1bW5zU29ydDogZnVuY3Rpb24gKHRhYmxlLCBzb3J0KSB7XHJcblxyXG4gICAgICAgIGxldCB0aGVhZCA9IGNvcmV1aVRhYmxlRWxlbWVudHMuZ2V0VGFibGVUaGVhZCh0YWJsZS5nZXRJZCgpKTtcclxuXHJcbiAgICAgICAgJC5lYWNoKHRhYmxlLl9jb2x1bW5zLCBmdW5jdGlvbiAoa2V5LCBjb2x1bW4pIHtcclxuICAgICAgICAgICAgbGV0IG9wdGlvbnMgPSBjb2x1bW4uZ2V0T3B0aW9ucygpO1xyXG5cclxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuaGFzT3duUHJvcGVydHkoJ2ZpZWxkJykgJiZcclxuICAgICAgICAgICAgICAgIG9wdGlvbnMuaGFzT3duUHJvcGVydHkoJ3NvcnRhYmxlJykgJiZcclxuICAgICAgICAgICAgICAgIHR5cGVvZiBvcHRpb25zLmZpZWxkID09PSAnc3RyaW5nJyAmJlxyXG4gICAgICAgICAgICAgICAgb3B0aW9ucy5zb3J0YWJsZVxyXG4gICAgICAgICAgICApIHtcclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgc29ydENvbHVtbiA9IG51bGw7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoc29ydCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAkLmVhY2goc29ydCwgZnVuY3Rpb24gKGtleSwgc29ydEl0ZW0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3Qoc29ydEl0ZW0pICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3J0SXRlbS5oYXNPd25Qcm9wZXJ0eSgnZmllbGQnKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc29ydEl0ZW0uaGFzT3duUHJvcGVydHkoJ29yZGVyJykgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVvZiBzb3J0SXRlbS5maWVsZCA9PT0gJ3N0cmluZycgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVvZiBzb3J0SXRlbS5vcmRlciA9PT0gJ3N0cmluZycgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnMuZmllbGQgPT09IHNvcnRJdGVtLmZpZWxkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc29ydENvbHVtbiA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWVsZDogc29ydEl0ZW0uZmllbGQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3JkZXI6IHNvcnRJdGVtLm9yZGVyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgbGV0IGNvbHVtbkVsZW1lbnQgPSB0aGVhZC5maW5kKCdbZGF0YS1maWVsZD1cIicgKyBvcHRpb25zLmZpZWxkICsgJ1wiXScpO1xyXG4gICAgICAgICAgICAgICAgY29sdW1uRWxlbWVudC5maW5kKCcuY29yZXVpLXRhYmxlX19jb2x1bW4tc29ydCcpLnJlbW92ZSgpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChzb3J0Q29sdW1uICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNvcnRDb2x1bW4ub3JkZXIgPT09ICdhc2MnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbHVtbkVsZW1lbnQuYXBwZW5kKCc8aSBjbGFzcz1cImNvcmV1aS10YWJsZV9fY29sdW1uLXNvcnQgYmkgYmktc29ydC1kb3duLWFsdFwiPjwvaT4nKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2x1bW5FbGVtZW50LmFwcGVuZCgnPGkgY2xhc3M9XCJjb3JldWktdGFibGVfX2NvbHVtbi1zb3J0IGJpIGJpLXNvcnQtZG93blwiPjwvaT4nKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC00LDQvdC90YvRhSDQuNC3INGF0YDQsNC90LjQu9C40YnQsFxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRhYmxlSWRcclxuICAgICAqIEByZXR1cm4ge29iamVjdHxudWxsfVxyXG4gICAgICovXHJcbiAgICBnZXRTdG9yYWdlOiBmdW5jdGlvbiAodGFibGVJZCkge1xyXG5cclxuICAgICAgICBsZXQgc3RvcmFnZSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdjb3JldWlfdGFibGUnKTtcclxuXHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBzdG9yYWdlID09PSAnc3RyaW5nJyAmJiBzdG9yYWdlKSB7XHJcbiAgICAgICAgICAgICAgICBzdG9yYWdlID0gSlNPTi5wYXJzZShzdG9yYWdlKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY29yZXVpVGFibGVVdGlscy5pc09iamVjdChzdG9yYWdlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0YWJsZUlkICYmIHR5cGVvZiB0YWJsZUlkID09PSAnc3RyaW5nJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICA/IChzdG9yYWdlLmhhc093blByb3BlcnR5KHRhYmxlSWQpID8gc3RvcmFnZVt0YWJsZUlkXSA6IG51bGwpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDogc3RvcmFnZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcblxyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQodC+0YXRgNCw0L3QtdC90LjQtSDQtNCw0L3QvdGL0YUg0LIg0YXRgNCw0L3QuNC70LjRidC1XHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gICAgICB0YWJsZUlkXHJcbiAgICAgKiBAcGFyYW0ge29iamVjdHxudWxsfSBzdG9yYWdlXHJcbiAgICAgKi9cclxuICAgIHNldFN0b3JhZ2U6IGZ1bmN0aW9uICh0YWJsZUlkLCBzdG9yYWdlKSB7XHJcblxyXG4gICAgICAgIGlmICh0eXBlb2YgdGFibGVJZCAhPT0gJ3N0cmluZycgfHwgISB0YWJsZUlkKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBzdG9yYWdlQWxsID0gdGhpcy5nZXRTdG9yYWdlKCk7XHJcblxyXG4gICAgICAgIGlmIChjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KHN0b3JhZ2VBbGwpKSB7XHJcbiAgICAgICAgICAgIGlmIChzdG9yYWdlQWxsLmhhc093blByb3BlcnR5KHRhYmxlSWQpKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoc3RvcmFnZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0b3JhZ2VBbGxbdGFibGVJZF0gPSBzdG9yYWdlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBkZWxldGUgc3RvcmFnZUFsbFt0YWJsZUlkXTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc3RvcmFnZSkge1xyXG4gICAgICAgICAgICAgICAgc3RvcmFnZUFsbFt0YWJsZUlkXSA9IHN0b3JhZ2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdjb3JldWlfdGFibGUnLCBKU09OLnN0cmluZ2lmeShzdG9yYWdlQWxsIHx8IHt9KSk7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSDQv9C+0LvRjyDQuNC3INGF0YDQsNC90LjQu9C40YnQsFxyXG4gICAgICogQHBhcmFtIHRhYmxlSWRcclxuICAgICAqIEBwYXJhbSBmaWVsZFxyXG4gICAgICogQHJldHVybiB7KnxudWxsfVxyXG4gICAgICovXHJcbiAgICBnZXRTdG9yYWdlRmllbGQ6IGZ1bmN0aW9uICh0YWJsZUlkLCBmaWVsZCkge1xyXG5cclxuICAgICAgICBsZXQgc3RvcmFnZSA9IHRoaXMuZ2V0U3RvcmFnZSh0YWJsZUlkKSB8fCB7fTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHN0b3JhZ2UuaGFzT3duUHJvcGVydHkoZmllbGQpXHJcbiAgICAgICAgICAgID8gc3RvcmFnZVtmaWVsZF1cclxuICAgICAgICAgICAgOiBudWxsO1xyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQodC+0YXRgNCw0L3QtdC90LjQtSDQv9C+0LvRjyDQsiDRhdGA0LDQvdC40LvQuNGJ0LVcclxuICAgICAqIEBwYXJhbSB0YWJsZUlkXHJcbiAgICAgKiBAcGFyYW0gZmllbGRcclxuICAgICAqIEBwYXJhbSBkYXRhXHJcbiAgICAgKi9cclxuICAgIHNldFN0b3JhZ2VGaWVsZDogZnVuY3Rpb24gKHRhYmxlSWQsIGZpZWxkLCBkYXRhKSB7XHJcblxyXG4gICAgICAgIGxldCBzdG9yYWdlID0gdGhpcy5nZXRTdG9yYWdlKHRhYmxlSWQpIHx8IHt9O1xyXG5cclxuICAgICAgICBpZiAoZGF0YSA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICBpZiAoc3RvcmFnZS5oYXNPd25Qcm9wZXJ0eShmaWVsZCkpIHtcclxuICAgICAgICAgICAgICAgIGRlbGV0ZSBzdG9yYWdlW2ZpZWxkXTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBzdG9yYWdlW2ZpZWxkXSA9IGRhdGE7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnNldFN0b3JhZ2UodGFibGVJZCwgc3RvcmFnZSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNvcmV1aVRhYmxlUHJpdmF0ZTsiLCJcbmltcG9ydCBjb3JldWlUYWJsZVRwbCAgICAgIGZyb20gJy4vY29yZXVpLnRhYmxlLnRlbXBsYXRlcyc7XG5pbXBvcnQgY29yZXVpVGFibGVVdGlscyAgICBmcm9tIFwiLi9jb3JldWkudGFibGUudXRpbHNcIjtcbmltcG9ydCBjb3JldWlUYWJsZVJlbmRlciAgIGZyb20gXCIuL2NvcmV1aS50YWJsZS5yZW5kZXJcIjtcbmltcG9ydCBjb3JldWlUYWJsZUVsZW1lbnRzIGZyb20gXCIuL2NvcmV1aS50YWJsZS5lbGVtZW50c1wiO1xuaW1wb3J0IGNvcmV1aVRhYmxlUHJpdmF0ZSAgZnJvbSBcIi4vY29yZXVpLnRhYmxlLnByaXZhdGVcIjtcblxuXG5sZXQgY29yZXVpVGFibGVJbnN0YW5jZSA9IHtcblxuICAgIF9vcHRpb25zOiB7XG4gICAgICAgIGlkOiBudWxsLFxuICAgICAgICBjbGFzczogJycsXG4gICAgICAgIHByaW1hcnlLZXk6ICdpZCcsXG4gICAgICAgIGxhbmc6ICdlbicsXG4gICAgICAgIGxhbmdJdGVtczoge30sXG4gICAgICAgIHdpZHRoOiBudWxsLFxuICAgICAgICBtaW5XaWR0aDogbnVsbCxcbiAgICAgICAgbWF4V2lkdGg6IG51bGwsXG4gICAgICAgIGhlaWdodDogbnVsbCxcbiAgICAgICAgbWluSGVpZ2h0OiBudWxsLFxuICAgICAgICBuYXhIZWlnaHQ6IG51bGwsXG4gICAgICAgIG92ZXJmbG93OiBmYWxzZSxcbiAgICAgICAgcGFnZTogMSxcbiAgICAgICAgcmVjb3Jkc1BlclBhZ2U6IDI1LFxuICAgICAgICB0aGVhZFRvcDogMCxcbiAgICAgICAgc2F2ZVN0YXRlOiBmYWxzZSxcbiAgICAgICAgbm9Cb3JkZXI6IGZhbHNlLFxuICAgICAgICBub1dyYXA6IGZhbHNlLFxuICAgICAgICBub1dyYXBUb2dnbGU6IGZhbHNlLFxuICAgICAgICBzaG93SGVhZGVyczogdHJ1ZSxcbiAgICAgICAgc2hvd1Njcm9sbFNoYWRvdzogZmFsc2UsXG5cbiAgICAgICAgcmVjb3Jkc1JlcXVlc3Q6IHtcbiAgICAgICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgICAgICB1cmw6IG51bGwsICAvLyAnL21vZC9pbmRleC9vcmRlcnMvP3BhZ2U9W3BhZ2VdJ1xuICAgICAgICB9LFxuXG4gICAgICAgIHJlcXVlc3RQYXJhbXM6IHtcbiAgICAgICAgICAgIHBhZ2U6ICdwYWdlJyxcbiAgICAgICAgICAgIGNvdW50OiAnY291bnQnLFxuICAgICAgICAgICAgc3RhcnQ6ICdzdGFydCcsXG4gICAgICAgICAgICBlbmQ6ICdlbmQnLFxuICAgICAgICAgICAgc29ydDogJ3NvcnQnLFxuICAgICAgICAgICAgc2VhcmNoOiAnc2VhcmNoJ1xuICAgICAgICB9LFxuXG4gICAgICAgIGdyb3VwOiB7XG4gICAgICAgICAgICBmaWVsZDogbnVsbCxcbiAgICAgICAgICAgIGF0dHI6IHt9LFxuICAgICAgICAgICAgcmVuZGVyOiBudWxsXG4gICAgICAgIH0sXG5cbiAgICAgICAgb25DbGljazogbnVsbCxcbiAgICAgICAgb25DbGlja1VybDogbnVsbCxcbiAgICAgICAgc29ydDogW10sXG4gICAgICAgIGhlYWRlcjogW10sXG4gICAgICAgIGZvb3RlcjogW10sXG4gICAgICAgIGNvbHVtbnNIZWFkZXI6IFtdLFxuICAgICAgICBzZWFyY2g6IHtcbiAgICAgICAgICAgIGxhYmVsV2lkdGg6IDIwMCxcbiAgICAgICAgICAgIGNvbnRyb2xzOiBbXSxcbiAgICAgICAgfSxcbiAgICAgICAgY29sdW1uczogW10sXG4gICAgICAgIGNvbHVtbnNGb290ZXI6IFtdLFxuICAgICAgICByZWNvcmRzOiBbXVxuICAgIH0sXG5cbiAgICBfaWQ6ICcnLFxuICAgIF9wYWdlOiAxLFxuICAgIF9yZWNvcmRzSW5kZXg6IDEsXG4gICAgX3JlY29yZHNQZXJQYWdlOiAyNSxcbiAgICBfcmVjb3Jkc1RvdGFsOiAwLFxuICAgIF9yZWNvcmRzTnVtYmVyOiAxLFxuICAgIF9zZXE6IDEsXG4gICAgX2lzUmVjb3Jkc1JlcXVlc3Q6IGZhbHNlLFxuICAgIF9jb3VudENvbHVtbnNTaG93OiAwLFxuXG4gICAgX3JlY29yZHM6IFtdLFxuICAgIF9zb3J0OiBbXSxcbiAgICBfY29sdW1uczogW10sXG4gICAgX3NlYXJjaDogW10sXG4gICAgX2ZpbHRlcnM6IFtdLFxuICAgIF9jb250cm9sczogW10sXG4gICAgX2NvbnRyb2xzUG9zaXRpb25zOiB7XG4gICAgICAgIGhlYWRlcjogW10sXG4gICAgICAgIGZvb3RlcjogW10sXG4gICAgfSxcbiAgICBfZXZlbnRzOiB7fSxcblxuXG4gICAgLyoqXG4gICAgICog0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y9cbiAgICAgKiBAcGFyYW0ge29iamVjdH0gdGFibGVXcmFwcGVyXG4gICAgICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnNcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9pbml0OiBmdW5jdGlvbiAodGFibGVXcmFwcGVyLCBvcHRpb25zKSB7XG5cbiAgICAgICAgdGhpcy5fb3B0aW9ucyA9ICQuZXh0ZW5kKHRydWUsIHt9LCB0aGlzLl9vcHRpb25zLCBvcHRpb25zKTtcbiAgICAgICAgdGhpcy5fZXZlbnRzICA9IHt9O1xuICAgICAgICB0aGlzLl9pZCAgICAgID0gdGhpcy5fb3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnaWQnKSAmJiB0eXBlb2YgdGhpcy5fb3B0aW9ucy5pZCA9PT0gJ3N0cmluZycgJiYgdGhpcy5fb3B0aW9ucy5pZFxuICAgICAgICAgICAgPyB0aGlzLl9vcHRpb25zLmlkXG4gICAgICAgICAgICA6IGNvcmV1aVRhYmxlVXRpbHMuaGFzaENvZGUoKTtcblxuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy5wYWdlID4gMCkge1xuICAgICAgICAgICAgdGhpcy5fcGFnZSA9IHRoaXMuX29wdGlvbnMucGFnZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy5yZWNvcmRzUGVyUGFnZSA+IDApIHtcbiAgICAgICAgICAgIHRoaXMuX3JlY29yZHNQZXJQYWdlID0gdGhpcy5fb3B0aW9ucy5yZWNvcmRzUGVyUGFnZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2lzUmVjb3Jkc1JlcXVlc3QgPSAoXG4gICAgICAgICAgICB0aGlzLl9vcHRpb25zLmhhc093blByb3BlcnR5KCdyZWNvcmRzUmVxdWVzdCcpICYmXG4gICAgICAgICAgICAoXG4gICAgICAgICAgICAgICAgdHlwZW9mIHRoaXMuX29wdGlvbnMucmVjb3Jkc1JlcXVlc3QgPT09ICdmdW5jdGlvbicgfHxcbiAgICAgICAgICAgICAgICAoY29yZXVpVGFibGVVdGlscy5pc09iamVjdCh0aGlzLl9vcHRpb25zLnJlY29yZHNSZXF1ZXN0KSAmJlxuICAgICAgICAgICAgICAgIHRoaXMuX29wdGlvbnMucmVjb3Jkc1JlcXVlc3QuaGFzT3duUHJvcGVydHkoJ3VybCcpICYmXG4gICAgICAgICAgICAgICAgdHlwZW9mIHRoaXMuX29wdGlvbnMucmVjb3Jkc1JlcXVlc3QudXJsID09PSAnc3RyaW5nJyAmJlxuICAgICAgICAgICAgICAgIHRoaXMuX29wdGlvbnMucmVjb3Jkc1JlcXVlc3QudXJsICE9PSAnJyAmJlxuICAgICAgICAgICAgICAgIHRoaXMuX29wdGlvbnMucmVjb3Jkc1JlcXVlc3QudXJsICE9PSAnIycpXG4gICAgICAgICAgICApXG4gICAgICAgICk7XG5cbiAgICAgICAgaWYgKHRoaXMuX2lzUmVjb3Jkc1JlcXVlc3QpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdGhpcy5fb3B0aW9ucy5yZWNvcmRzUmVxdWVzdCA9PT0gJ29iamVjdCcgJiZcbiAgICAgICAgICAgICAgICAoICEgdGhpcy5fb3B0aW9ucy5yZWNvcmRzUmVxdWVzdC5oYXNPd25Qcm9wZXJ0eSgnbWV0aG9kJykgfHxcbiAgICAgICAgICAgICAgICAgdHlwZW9mIHRoaXMuX29wdGlvbnMucmVjb3Jkc1JlcXVlc3QubWV0aG9kICE9PSAnc3RyaW5nJylcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIHRoaXMuX29wdGlvbnMucmVjb3Jkc1JlcXVlc3QubWV0aG9kID0gJ0dFVCc7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHRoaXMuX29wdGlvbnMucmVjb3JkcykpIHtcbiAgICAgICAgICAgIGNvcmV1aVRhYmxlUHJpdmF0ZS5zZXRSZWNvcmRzKHRoaXMsIHRoaXMuX29wdGlvbnMucmVjb3Jkcyk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyDQntGH0LjRgdGC0LrQsCDQt9Cw0L/QuNGB0LXQuSDQv9C+0YHQu9C1INC40L3QuNGG0LjQsNC70LjQt9Cw0YbQuNC4XG4gICAgICAgIHRoaXMuX29wdGlvbnMucmVjb3JkcyA9IFtdO1xuXG4gICAgICAgIC8vINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPINC60L7Qu9C+0L3QvtC6XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5fb3B0aW9ucy5jb2x1bW5zID09PSAnb2JqZWN0JyAmJlxuICAgICAgICAgICAgQXJyYXkuaXNBcnJheSh0aGlzLl9vcHRpb25zLmNvbHVtbnMpICYmXG4gICAgICAgICAgICB0aGlzLl9vcHRpb25zLmNvbHVtbnMubGVuZ3RoID4gMFxuICAgICAgICApIHtcbiAgICAgICAgICAgIGNvcmV1aVRhYmxlUHJpdmF0ZS5pbml0Q29sdW1ucyh0YWJsZVdyYXBwZXIsIHRoaXMsIHRoaXMuX29wdGlvbnMuY29sdW1ucyk7XG4gICAgICAgIH1cblxuXG4gICAgICAgIC8vINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPINC/0L7QuNGB0LrQvtCy0YvRhSDQv9C+0LvQtdC5XG4gICAgICAgIGlmIChjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KHRoaXMuX29wdGlvbnMuc2VhcmNoKSAmJlxuICAgICAgICAgICAgdHlwZW9mIHRoaXMuX29wdGlvbnMuc2VhcmNoLmNvbnRyb2xzID09PSAnb2JqZWN0JyAmJlxuICAgICAgICAgICAgQXJyYXkuaXNBcnJheSh0aGlzLl9vcHRpb25zLnNlYXJjaC5jb250cm9scykgJiZcbiAgICAgICAgICAgIHRoaXMuX29wdGlvbnMuc2VhcmNoLmNvbnRyb2xzLmxlbmd0aCA+IDBcbiAgICAgICAgKSB7XG4gICAgICAgICAgICBjb3JldWlUYWJsZVByaXZhdGUuaW5pdFNlYXJjaCh0YWJsZVdyYXBwZXIsIHRoaXMsIHRoaXMuX29wdGlvbnMuc2VhcmNoLmNvbnRyb2xzKTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgLy8g0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y8g0LrQvtC90YLRgNC+0LvQvtCyINC4INGE0LjQu9GM0YLRgNC+0LJcbiAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMuaGFzT3duUHJvcGVydHkoJ2hlYWRlcicpICYmXG4gICAgICAgICAgICBBcnJheS5pc0FycmF5KHRoaXMuX29wdGlvbnMuaGVhZGVyKSAmJlxuICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy5oZWFkZXIubGVuZ3RoID4gMFxuICAgICAgICApIHtcbiAgICAgICAgICAgIGNvcmV1aVRhYmxlUHJpdmF0ZS5pbml0Q29udHJvbHModGFibGVXcmFwcGVyLCB0aGlzLCB0aGlzLl9vcHRpb25zLmhlYWRlciwgJ2hlYWRlcicpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMuaGFzT3duUHJvcGVydHkoJ2Zvb3RlcicpICYmXG4gICAgICAgICAgICBBcnJheS5pc0FycmF5KHRoaXMuX29wdGlvbnMuZm9vdGVyKSAmJlxuICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy5mb290ZXIubGVuZ3RoID4gMFxuICAgICAgICApIHtcbiAgICAgICAgICAgIGNvcmV1aVRhYmxlUHJpdmF0ZS5pbml0Q29udHJvbHModGFibGVXcmFwcGVyLCB0aGlzLCB0aGlzLl9vcHRpb25zLmZvb3RlciwgJ2Zvb3RlcicpO1xuICAgICAgICB9XG5cblxuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy5zYXZlU3RhdGUgJiYgdGhpcy5fb3B0aW9ucy5pZCkge1xuXG4gICAgICAgICAgICAvLyDQn9C+0LjRgdC6INC/0L4g0YHQvtGF0YDQsNC90LXQvdC90YvQvCDQv9C+0LjRgdC60L7QstGL0Lwg0LTQsNC90L3Ri9C8XG4gICAgICAgICAgICBpZiAoICEgdGhpcy5faXNSZWNvcmRzUmVxdWVzdCkge1xuICAgICAgICAgICAgICAgIGNvcmV1aVRhYmxlUHJpdmF0ZS5zZWFyY2hMb2NhbFJlY29yZHModGhpcyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vINCh0L7RgNGC0LjRgNC+0LLQutCwXG4gICAgICAgICAgICBsZXQgc29ydCA9IGNvcmV1aVRhYmxlUHJpdmF0ZS5nZXRTdG9yYWdlRmllbGQodGhpcy5nZXRJZCgpLCAnc29ydCcpO1xuXG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShzb3J0KSAmJiBzb3J0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBjb3JldWlUYWJsZVByaXZhdGUuaW5pdFNvcnQodGhpcywgc29ydCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoICEgdGhpcy5faXNSZWNvcmRzUmVxdWVzdCAmJiB0aGlzLl9yZWNvcmRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVjb3JkcyA9IGNvcmV1aVRhYmxlUHJpdmF0ZS5zb3J0UmVjb3Jkc0J5RmllbGRzKHRoaXMuX3JlY29yZHMsIHRoaXMuX3NvcnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMuaGFzT3duUHJvcGVydHkoJ3NvcnQnKSAmJlxuICAgICAgICAgICAgICAgIEFycmF5LmlzQXJyYXkodGhpcy5fb3B0aW9ucy5zb3J0KSAmJlxuICAgICAgICAgICAgICAgIHRoaXMuX29wdGlvbnMuc29ydC5sZW5ndGggPiAwXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBjb3JldWlUYWJsZVByaXZhdGUuaW5pdFNvcnQodGhpcywgdGhpcy5fb3B0aW9ucy5zb3J0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPINGB0L7QsdGL0YLQuNC5INGC0LDQsdC70LjRhtGLXG4gICAgICovXG4gICAgaW5pdEV2ZW50czogZnVuY3Rpb24gKCkge1xuXG4gICAgICAgIGxldCB0aGF0ID0gdGhpcztcblxuICAgICAgICAvLyDQn9C+0LrQsNC3INGB0YLRgNC+0LpcbiAgICAgICAgdGhpcy5vbigncmVjb3Jkc19zaG93JywgZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAvLyDQn9C10YDQtdGF0L7QtCDQv9C+INGB0YHRi9C70LrQtVxuICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGF0Ll9vcHRpb25zLm9uQ2xpY2tVcmwgPT09ICdzdHJpbmcnICYmIHRoYXQuX29wdGlvbnMub25DbGlja1VybCkge1xuICAgICAgICAgICAgICAgIGNvcmV1aVRhYmxlRWxlbWVudHMuZ2V0VHJSZWNvcmRzKHRoYXQuZ2V0SWQoKSkuY2xpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgcmVjb3JkS2V5ID0gJCh0aGlzKS5kYXRhKCdyZWNvcmQtaW5kZXgnKTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJlY29yZCAgICA9IHRoYXQuZ2V0UmVjb3JkQnlJbmRleChyZWNvcmRLZXkpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICggISByZWNvcmQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGxldCB1cmwgPSB0aGF0Ll9vcHRpb25zLm9uQ2xpY2tVcmw7XG5cbiAgICAgICAgICAgICAgICAgICAgJC5lYWNoKHJlY29yZC5kYXRhLCBmdW5jdGlvbiAoZmllbGQsIHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgZmllbGRRdW90ZSA9IGZpZWxkLnJlcGxhY2UoLyhbXlxcd1xcZF0pL2csICdcXFxcJDEnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybCA9IHVybC5yZXBsYWNlKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBSZWdFeHAoJ1xcXFxbJyArIGZpZWxkUXVvdGUgKyAnXFxcXF0nLCAnZycpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAodXJsICYmIHVybCAhPT0gJyMnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbi5ocmVmID0gdXJsO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vINCh0L7QsdGL0YLQuNC1INC90LDQttCw0YLQuNGPINC90LAg0YHRgtGA0L7QutGDXG4gICAgICAgICAgICBpZiAoWydmdW5jdGlvbicsICdzdHJpbmcnXS5pbmRleE9mKHR5cGVvZiB0aGF0Ll9vcHRpb25zLm9uQ2xpY2spKSB7XG5cbiAgICAgICAgICAgICAgICBjb3JldWlUYWJsZUVsZW1lbnRzLmdldFRyUmVjb3Jkcyh0aGF0LmdldElkKCkpLmNsaWNrKGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgcmVjb3JkS2V5ID0gJCh0aGlzKS5kYXRhKCdyZWNvcmQtaW5kZXgnKTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJlY29yZCAgICA9IHRoYXQuZ2V0UmVjb3JkQnlJbmRleChyZWNvcmRLZXkpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICggISByZWNvcmQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdGhhdC5fb3B0aW9ucy5vbkNsaWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGF0Ll9vcHRpb25zLm9uQ2xpY2soZXZlbnQsIHJlY29yZCk7XG5cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdGhhdC5fb3B0aW9ucy5vbkNsaWNrID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGZ1bmMgPSBuZXcgRnVuY3Rpb24oJ2V2ZW50JywgJ3JlY29yZCcsIHRoYXQuX29wdGlvbnMub25DbGljayk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmMoZXZlbnQsIHJlY29yZCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8g0KDQsNGB0LrRgNGL0YLQuNC1INGB0YLRgNC+0LrQuFxuICAgICAgICAgICAgY29yZXVpVGFibGVFbGVtZW50cy5nZXROb1dyYXBUb2dnbGVzKHRoYXQuZ2V0SWQoKSkuY2xpY2soZnVuY3Rpb24gKGV2ZW50KSB7XG5cbiAgICAgICAgICAgICAgICBldmVudC5jYW5jZWxCdWJibGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgICAgICAgICBsZXQgcGFyZW50ID0gJCh0aGlzKS5wYXJlbnQoKTtcblxuICAgICAgICAgICAgICAgIGlmIChwYXJlbnQuaGFzQ2xhc3MoJ3Nob3duJykpIHtcbiAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5yZW1vdmVDbGFzcygnYmktY2FyZXQtdXAtZmlsbCcpO1xuICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLmFkZENsYXNzKCdiaS1jYXJldC1kb3duLWZpbGwnKTtcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50LnJlbW92ZUNsYXNzKCdzaG93bicpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICQodGhpcykucmVtb3ZlQ2xhc3MoJ2JpLWNhcmV0LWRvd24tZmlsbCcpO1xuICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLmFkZENsYXNzKCdiaS1jYXJldC11cC1maWxsJyk7XG4gICAgICAgICAgICAgICAgICAgIHBhcmVudC5hZGRDbGFzcygnc2hvd24nKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8g0KTQuNC60YHQsNGG0LjRjyDQutC+0LvQvtC90L7QulxuICAgICAgICAgICAgY29yZXVpVGFibGVFbGVtZW50cy5maXhlZENvbHNMZWZ0KHRoYXQuZ2V0SWQoKSlcbiAgICAgICAgICAgIGNvcmV1aVRhYmxlRWxlbWVudHMuZml4ZWRDb2xzUmlnaHQodGhhdC5nZXRJZCgpKVxuICAgICAgICB9KTtcblxuXG4gICAgICAgIC8vINCf0L7QutCw0Lcg0YLQsNCx0LvQuNGG0YtcbiAgICAgICAgdGhpcy5vbigndGFibGVfc2hvdycsIGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgbGV0IHNvcnRhYmxlQ29sdW1ucyA9IGNvcmV1aVRhYmxlRWxlbWVudHMuZ2V0VGFibGVTb3J0YWJsZSh0aGF0LmdldElkKCkpO1xuICAgICAgICAgICAgaWYgKHNvcnRhYmxlQ29sdW1uc1swXSkge1xuICAgICAgICAgICAgICAgIHNvcnRhYmxlQ29sdW1ucy5jbGljayhmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGZpZWxkID0gJCh0aGlzKS5kYXRhKCdmaWVsZCcpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChmaWVsZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHNvcnRpbmcgICAgICA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGN1cnJlbnRPcmRlciA9IG51bGw7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICQuZWFjaCh0aGF0Ll9zb3J0LCBmdW5jdGlvbiAoa2V5LCBzb3J0RmllbGQpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmaWVsZCA9PT0gc29ydEZpZWxkLmZpZWxkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRPcmRlciA9IHNvcnRGaWVsZC5vcmRlcjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50T3JkZXIgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3J0aW5nLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWVsZDogZmllbGQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9yZGVyOiAnYXNjJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjdXJyZW50T3JkZXIgPT09ICdhc2MnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc29ydGluZy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmllbGQ6IGZpZWxkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcmRlcjogJ2Rlc2MnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzb3J0aW5nLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQuc29ydERlZmF1bHQoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGF0LnNvcnRGaWVsZHMoc29ydGluZyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuXG4gICAgICAgICAgICBpZiAod2luZG93Lmhhc093blByb3BlcnR5KCdib290c3RyYXAnKSAmJiBib290c3RyYXAuaGFzT3duUHJvcGVydHkoJ1Rvb2x0aXAnKSkge1xuICAgICAgICAgICAgICAgICQoJy5jb3JldWktdGFibGVfX2NvbHVtbi1kZXNjcmlwdGlvbicsIGNvcmV1aVRhYmxlRWxlbWVudHMuZ2V0VGFibGVUaGVhZCh0aGF0LmdldElkKCkpKS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgbmV3IGJvb3RzdHJhcC5Ub29sdGlwKHRoaXMpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuXG4gICAgICAgIC8vINCh0L7QsdGL0YLQuNGPINGB0LzQtdC90Ysg0YHQvtGB0YLQvtGP0L3QuNGPXG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLnNhdmVTdGF0ZSAmJiB0aGlzLl9vcHRpb25zLmlkKSB7XG4gICAgICAgICAgICB0aGlzLm9uKCdyZWNvcmRzX3NvcnQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgY29yZXVpVGFibGVQcml2YXRlLnNldFN0b3JhZ2VGaWVsZCh0aGF0LmdldElkKCksICdzb3J0JywgdGhhdC5fc29ydCk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdGhpcy5vbignc2VhcmNoX2NoYW5nZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBjb3JldWlUYWJsZVByaXZhdGUuc2V0U3RvcmFnZUZpZWxkKHRoYXQuZ2V0SWQoKSwgJ3NlYXJjaCcsIHRoYXQuZ2V0U2VhcmNoRGF0YSgpKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB0aGlzLm9uKCdmaWx0ZXJzX2NoYW5nZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBjb3JldWlUYWJsZVByaXZhdGUuc2V0U3RvcmFnZUZpZWxkKHRoYXQuZ2V0SWQoKSwgJ2ZpbHRlcnMnLCB0aGF0LmdldEZpbHRlckRhdGEoKSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdGhpcy5vbignY29sdW1uc19jaGFuZ2UnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgbGV0IGNvbHVtbnMgPSBbXTtcblxuICAgICAgICAgICAgICAgIHRoYXQuX2NvbHVtbnMubWFwKGZ1bmN0aW9uIChjb2x1bW4pIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNvbHVtbk9wdGlvbnMgPSBjb2x1bW4uZ2V0T3B0aW9ucygpO1xuXG4gICAgICAgICAgICAgICAgICAgIGNvbHVtbnMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBmaWVsZDogY29sdW1uT3B0aW9ucy5maWVsZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzU2hvdzogY29sdW1uLmlzU2hvdygpLFxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgY29yZXVpVGFibGVQcml2YXRlLnNldFN0b3JhZ2VGaWVsZCh0aGF0LmdldElkKCksICdjb2x1bW5zJywgY29sdW1ucyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgY29yZXVpVGFibGVQcml2YXRlLl90cmlnZ2VyKHRoaXMsICd0YWJsZV9zaG93JywgWyB0aGlzIF0pO1xuICAgICAgICBjb3JldWlUYWJsZVByaXZhdGUuX3RyaWdnZXIodGhpcywgJ2NvbnRhaW5lcl9zaG93Jyk7XG5cbiAgICAgICAgLy8g0JLRi9C30L7QsiDRgdC+0LHRi9GC0LjRjyDQv9C+0LrQsNC30LAg0YHRgtGA0L7QulxuICAgICAgICBpZiAoICEgdGhpcy5faXNSZWNvcmRzUmVxdWVzdCkge1xuICAgICAgICAgICAgY29yZXVpVGFibGVQcml2YXRlLl90cmlnZ2VyKHRoaXMsICdyZWNvcmRzX3Nob3cnLCBbIHRoaXMgXSk7XG4gICAgICAgIH1cbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0LjQtNC10L3RgtC40YTQuNC60LDRgtC+0YDQsCDRgtCw0LHQu9C40YbRi1xuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAgICovXG4gICAgZ2V0SWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lkO1xuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSDQvtC/0YbQuNC5INGC0LDQsdC70LjRhtGLXG4gICAgICogQHJldHVybnMgeyp9XG4gICAgICovXG4gICAgZ2V0T3B0aW9uczogZnVuY3Rpb24gKCkge1xuXG4gICAgICAgIHJldHVybiAkLmV4dGVuZCh0cnVlLCB7fSwgdGhpcy5fb3B0aW9ucyk7XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZWxlbWVudFxuICAgICAqIEByZXR1cm5zIHsqfVxuICAgICAqL1xuICAgIHJlbmRlcjogZnVuY3Rpb24oZWxlbWVudCkge1xuXG4gICAgICAgIGxldCB0aGF0ICAgICAgICA9IHRoaXM7XG4gICAgICAgIGxldCB3aWR0aFNpemVzICA9IFtdO1xuICAgICAgICBsZXQgaGVpZ2h0U2l6ZXMgPSBbXTtcbiAgICAgICAgbGV0IG9wdGlvbnMgICAgID0gdGhpcy5nZXRPcHRpb25zKCk7XG4gICAgICAgIGxldCByZW5kZXIgICAgICA9IHtcbiAgICAgICAgICAgIGhlYWRlcnNPdXQ6IFtdLFxuICAgICAgICAgICAgaGVhZGVyc0luOiBbXSxcbiAgICAgICAgICAgIGZvb3RlcnNJbjogW10sXG4gICAgICAgICAgICBmb290ZXJzT3V0OiBbXVxuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuX3JlY29yZHNUb3RhbCA9IHRoaXMuX3JlY29yZHMubGVuZ3RoO1xuXG5cbiAgICAgICAgaWYgKG9wdGlvbnMud2lkdGggPiAwKSB7XG4gICAgICAgICAgICBsZXQgdW5pdCA9IHR5cGVvZiBvcHRpb25zLndpZHRoID09PSAnbnVtYmVyJyA/ICdweCcgOiAnJztcbiAgICAgICAgICAgIHdpZHRoU2l6ZXMucHVzaCgnd2lkdGg6JyArIG9wdGlvbnMud2lkdGggKyB1bml0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvcHRpb25zLm1pbldpZHRoID4gMCkge1xuICAgICAgICAgICAgbGV0IHVuaXQgPSB0eXBlb2Ygb3B0aW9ucy5taW5XaWR0aCA9PT0gJ251bWJlcicgPyAncHgnIDogJyc7XG4gICAgICAgICAgICB3aWR0aFNpemVzLnB1c2goJ21pbi13aWR0aDonICsgb3B0aW9ucy5taW5XaWR0aCArIHVuaXQpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG9wdGlvbnMubWF4V2lkdGggPiAwKSB7XG4gICAgICAgICAgICBsZXQgdW5pdCA9IHR5cGVvZiBvcHRpb25zLm1heFdpZHRoID09PSAnbnVtYmVyJyA/ICdweCcgOiAnJztcbiAgICAgICAgICAgIHdpZHRoU2l6ZXMucHVzaCgnbWF4LXdpZHRoOicgKyBvcHRpb25zLm1heFdpZHRoICsgdW5pdCk7XG5cbiAgICAgICAgICAgIG9wdGlvbnMub3ZlcmZsb3cgPSB0cnVlO1xuICAgICAgICB9XG5cblxuICAgICAgICBpZiAob3B0aW9ucy5oZWlnaHQgPiAwKSB7XG4gICAgICAgICAgICBsZXQgdW5pdCA9IHR5cGVvZiBvcHRpb25zLmhlaWdodCA9PT0gJ251bWJlcicgPyAncHgnIDogJyc7XG4gICAgICAgICAgICBoZWlnaHRTaXplcy5wdXNoKCdoZWlnaHQ6JyArIG9wdGlvbnMuaGVpZ2h0ICsgdW5pdCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob3B0aW9ucy5taW5IZWlnaHQgPiAwKSB7XG4gICAgICAgICAgICBsZXQgdW5pdCA9IHR5cGVvZiBvcHRpb25zLm1pbkhlaWdodCA9PT0gJ251bWJlcicgPyAncHgnIDogJyc7XG4gICAgICAgICAgICBoZWlnaHRTaXplcy5wdXNoKCdtaW4taGVpZ2h0OicgKyBvcHRpb25zLm1pbkhlaWdodCArIHVuaXQpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG9wdGlvbnMubWF4SGVpZ2h0ID4gMCkge1xuICAgICAgICAgICAgbGV0IHVuaXQgPSB0eXBlb2Ygb3B0aW9ucy5tYXhIZWlnaHQgPT09ICdudW1iZXInID8gJ3B4JyA6ICcnO1xuICAgICAgICAgICAgaGVpZ2h0U2l6ZXMucHVzaCgnbWF4LWhlaWdodDonICsgb3B0aW9ucy5tYXhIZWlnaHQgKyB1bml0KTtcblxuICAgICAgICAgICAgb3B0aW9ucy5vdmVyZmxvdyA9IHRydWU7XG4gICAgICAgIH1cblxuXG5cbiAgICAgICAgLy8g0JLQtdGA0YXQvdC40LUg0Y3Qu9C10LzQtdC90YLRiyDRg9C/0YDQsNCy0LvQtdC90LjRj1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh0aGlzLl9jb250cm9sc1Bvc2l0aW9ucy5oZWFkZXIpICYmXG4gICAgICAgICAgICB0aGlzLl9jb250cm9sc1Bvc2l0aW9ucy5oZWFkZXIubGVuZ3RoID4gMFxuICAgICAgICApIHtcbiAgICAgICAgICAgICQuZWFjaCh0aGlzLl9jb250cm9sc1Bvc2l0aW9ucy5oZWFkZXIsIGZ1bmN0aW9uIChrZXksIGhlYWRlcikge1xuICAgICAgICAgICAgICAgIGxldCBjb250cm9sc0xlZnQgICA9IFtdO1xuICAgICAgICAgICAgICAgIGxldCBjb250cm9sc0NlbnRlciA9IFtdO1xuICAgICAgICAgICAgICAgIGxldCBjb250cm9sc1JpZ2h0ICA9IFtdO1xuXG4gICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoaGVhZGVyLmxlZnQpICYmIGhlYWRlci5sZWZ0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgJC5lYWNoKGhlYWRlci5sZWZ0LCBmdW5jdGlvbiAoa2V5LCBjb250cm9sKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgY29udHJvbFJlbmRlciA9IGNvcmV1aVRhYmxlUmVuZGVyLnJlbmRlckNvbnRyb2wodGhhdCwgY29udHJvbCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb250cm9sUmVuZGVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbHNMZWZ0LnB1c2goY29udHJvbFJlbmRlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGhlYWRlci5jZW50ZXIpICYmIGhlYWRlci5jZW50ZXIubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAkLmVhY2goaGVhZGVyLmNlbnRlciwgZnVuY3Rpb24gKGtleSwgY29udHJvbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGNvbnRyb2xSZW5kZXIgPSBjb3JldWlUYWJsZVJlbmRlci5yZW5kZXJDb250cm9sKHRoYXQsIGNvbnRyb2wpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29udHJvbFJlbmRlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xzQ2VudGVyLnB1c2goY29udHJvbFJlbmRlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGhlYWRlci5yaWdodCkgJiYgaGVhZGVyLnJpZ2h0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgJC5lYWNoKGhlYWRlci5yaWdodCwgZnVuY3Rpb24gKGtleSwgY29udHJvbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGNvbnRyb2xSZW5kZXIgPSBjb3JldWlUYWJsZVJlbmRlci5yZW5kZXJDb250cm9sKHRoYXQsIGNvbnRyb2wpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29udHJvbFJlbmRlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xzUmlnaHQucHVzaChjb250cm9sUmVuZGVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKGNvbnRyb2xzTGVmdC5sZW5ndGggPiAwIHx8IGNvbnRyb2xzQ2VudGVyLmxlbmd0aCA+IDAgfHwgY29udHJvbHNSaWdodC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChoZWFkZXIudHlwZSA9PT0gJ2luJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGhlYWRlckNvbnRyb2xzID0gJChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3JldWlUYWJsZVV0aWxzLnJlbmRlcihjb3JldWlUYWJsZVRwbFsndGFibGUvY29udHJvbHMvaGVhZGVyLmh0bWwnXSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sc0xlZnQ6IGNvbnRyb2xzTGVmdCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbHNDZW50ZXI6IGNvbnRyb2xzQ2VudGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sc1JpZ2h0OiBjb250cm9sc1JpZ2h0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29udHJvbHNMZWZ0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLmVhY2goY29udHJvbHNMZWZ0LCBmdW5jdGlvbiAoa2V5LCBjb250cm9sKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlckNvbnRyb2xzLmZpbmQoJy5jb3JldWktdGFibGVfX2NvbnRyb2xzX2xlZnQnKS5hcHBlbmQoY29udHJvbClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbnRyb2xzQ2VudGVyLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLmVhY2goY29udHJvbHNDZW50ZXIsIGZ1bmN0aW9uIChrZXksIGNvbnRyb2wpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyQ29udHJvbHMuZmluZCgnLmNvcmV1aS10YWJsZV9fY29udHJvbHNfY2VudGVyJykuYXBwZW5kKGNvbnRyb2wpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb250cm9sc1JpZ2h0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLmVhY2goY29udHJvbHNSaWdodCwgZnVuY3Rpb24gKGtleSwgY29udHJvbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJDb250cm9scy5maW5kKCcuY29yZXVpLXRhYmxlX19jb250cm9sc19yaWdodCcpLmFwcGVuZChjb250cm9sKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICByZW5kZXIuaGVhZGVyc0luLnB1c2goaGVhZGVyQ29udHJvbHMpO1xuXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgaGVhZGVyQ29udHJvbHMgPSAkKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvcmV1aVRhYmxlVXRpbHMucmVuZGVyKGNvcmV1aVRhYmxlVHBsWyd0YWJsZS9jb250cm9scy9oZWFkZXItb3V0Lmh0bWwnXSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sc0xlZnQ6IGNvbnRyb2xzTGVmdCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbHNDZW50ZXI6IGNvbnRyb2xzQ2VudGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sc1JpZ2h0OiBjb250cm9sc1JpZ2h0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29udHJvbHNMZWZ0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLmVhY2goY29udHJvbHNMZWZ0LCBmdW5jdGlvbiAoa2V5LCBjb250cm9sKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlckNvbnRyb2xzLmZpbmQoJy5jb3JldWktdGFibGVfX2NvbnRyb2xzX2xlZnQnKS5hcHBlbmQoY29udHJvbClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbnRyb2xzQ2VudGVyLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLmVhY2goY29udHJvbHNDZW50ZXIsIGZ1bmN0aW9uIChrZXksIGNvbnRyb2wpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyQ29udHJvbHMuZmluZCgnLmNvcmV1aS10YWJsZV9fY29udHJvbHNfY2VudGVyJykuYXBwZW5kKGNvbnRyb2wpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb250cm9sc1JpZ2h0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLmVhY2goY29udHJvbHNSaWdodCwgZnVuY3Rpb24gKGtleSwgY29udHJvbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJDb250cm9scy5maW5kKCcuY29yZXVpLXRhYmxlX19jb250cm9sc19yaWdodCcpLmFwcGVuZChjb250cm9sKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICByZW5kZXIuaGVhZGVyc091dC5wdXNoKGhlYWRlckNvbnRyb2xzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8g0J3QuNC20L3QuNC1INGN0LvQtdC80LXQvdGC0Ysg0YPQv9GA0LDQstC70LXQvdC40Y9cbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodGhpcy5fY29udHJvbHNQb3NpdGlvbnMuZm9vdGVyKSAmJlxuICAgICAgICAgICAgdGhpcy5fY29udHJvbHNQb3NpdGlvbnMuZm9vdGVyLmxlbmd0aCA+IDBcbiAgICAgICAgKSB7XG4gICAgICAgICAgICAkLmVhY2godGhpcy5fY29udHJvbHNQb3NpdGlvbnMuZm9vdGVyLCBmdW5jdGlvbiAoa2V5LCBmb290ZXIpIHtcbiAgICAgICAgICAgICAgICBsZXQgY29udHJvbHNMZWZ0ICAgPSBbXTtcbiAgICAgICAgICAgICAgICBsZXQgY29udHJvbHNDZW50ZXIgPSBbXTtcbiAgICAgICAgICAgICAgICBsZXQgY29udHJvbHNSaWdodCAgPSBbXTtcblxuICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGZvb3Rlci5sZWZ0KSAmJiBmb290ZXIubGVmdC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICQuZWFjaChmb290ZXIubGVmdCwgZnVuY3Rpb24gKGtleSwgY29udHJvbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGNvbnRyb2xSZW5kZXIgPSBjb3JldWlUYWJsZVJlbmRlci5yZW5kZXJDb250cm9sKHRoYXQsIGNvbnRyb2wpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29udHJvbFJlbmRlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xzTGVmdC5wdXNoKGNvbnRyb2xSZW5kZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShmb290ZXIuY2VudGVyKSAmJiBmb290ZXIuY2VudGVyLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgJC5lYWNoKGZvb3Rlci5jZW50ZXIsIGZ1bmN0aW9uIChrZXksIGNvbnRyb2wpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjb250cm9sUmVuZGVyID0gY29yZXVpVGFibGVSZW5kZXIucmVuZGVyQ29udHJvbCh0aGF0LCBjb250cm9sKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbnRyb2xSZW5kZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sc0NlbnRlci5wdXNoKGNvbnRyb2xSZW5kZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShmb290ZXIucmlnaHQpICYmIGZvb3Rlci5yaWdodC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICQuZWFjaChmb290ZXIucmlnaHQsIGZ1bmN0aW9uIChrZXksIGNvbnRyb2wpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjb250cm9sUmVuZGVyID0gY29yZXVpVGFibGVSZW5kZXIucmVuZGVyQ29udHJvbCh0aGF0LCBjb250cm9sKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbnRyb2xSZW5kZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sc1JpZ2h0LnB1c2goY29udHJvbFJlbmRlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChjb250cm9sc0xlZnQubGVuZ3RoID4gMCB8fCBjb250cm9sc0NlbnRlci5sZW5ndGggPiAwIHx8IGNvbnRyb2xzUmlnaHQubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZm9vdGVyLnR5cGUgPT09ICdpbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBmb290ZXJDb250cm9scyA9ICQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29yZXVpVGFibGVVdGlscy5yZW5kZXIoY29yZXVpVGFibGVUcGxbJ3RhYmxlL2NvbnRyb2xzL2Zvb3Rlci5odG1sJ10sIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbHNMZWZ0OiBjb250cm9sc0xlZnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xzQ2VudGVyOiBjb250cm9sc0NlbnRlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbHNSaWdodDogY29udHJvbHNSaWdodCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcblxuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29udHJvbHNMZWZ0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLmVhY2goY29udHJvbHNMZWZ0LCBmdW5jdGlvbiAoa2V5LCBjb250cm9sKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvb3RlckNvbnRyb2xzLmZpbmQoJy5jb3JldWktdGFibGVfX2NvbnRyb2xzX2xlZnQnKS5hcHBlbmQoY29udHJvbClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbnRyb2xzQ2VudGVyLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLmVhY2goY29udHJvbHNDZW50ZXIsIGZ1bmN0aW9uIChrZXksIGNvbnRyb2wpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9vdGVyQ29udHJvbHMuZmluZCgnLmNvcmV1aS10YWJsZV9fY29udHJvbHNfY2VudGVyJykuYXBwZW5kKGNvbnRyb2wpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb250cm9sc1JpZ2h0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLmVhY2goY29udHJvbHNSaWdodCwgZnVuY3Rpb24gKGtleSwgY29udHJvbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb290ZXJDb250cm9scy5maW5kKCcuY29yZXVpLXRhYmxlX19jb250cm9sc19yaWdodCcpLmFwcGVuZChjb250cm9sKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICByZW5kZXIuZm9vdGVyc0luLnB1c2goZm9vdGVyQ29udHJvbHMpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGZvb3RlckNvbnRyb2xzID0gJChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3JldWlUYWJsZVV0aWxzLnJlbmRlcihjb3JldWlUYWJsZVRwbFsndGFibGUvY29udHJvbHMvZm9vdGVyLW91dC5odG1sJ10sIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbHNMZWZ0OiBjb250cm9sc0xlZnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xzQ2VudGVyOiBjb250cm9sc0NlbnRlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbHNSaWdodDogY29udHJvbHNSaWdodCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcblxuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29udHJvbHNMZWZ0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLmVhY2goY29udHJvbHNMZWZ0LCBmdW5jdGlvbiAoa2V5LCBjb250cm9sKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvb3RlckNvbnRyb2xzLmZpbmQoJy5jb3JldWktdGFibGVfX2NvbnRyb2xzX2xlZnQnKS5hcHBlbmQoY29udHJvbClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbnRyb2xzQ2VudGVyLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLmVhY2goY29udHJvbHNDZW50ZXIsIGZ1bmN0aW9uIChrZXksIGNvbnRyb2wpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9vdGVyQ29udHJvbHMuZmluZCgnLmNvcmV1aS10YWJsZV9fY29udHJvbHNfY2VudGVyJykuYXBwZW5kKGNvbnRyb2wpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb250cm9sc1JpZ2h0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLmVhY2goY29udHJvbHNSaWdodCwgZnVuY3Rpb24gKGtleSwgY29udHJvbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb290ZXJDb250cm9scy5maW5kKCcuY29yZXVpLXRhYmxlX19jb250cm9sc19yaWdodCcpLmFwcGVuZChjb250cm9sKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICByZW5kZXIuZm9vdGVyc091dC5wdXNoKGZvb3RlckNvbnRyb2xzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cblxuICAgICAgICAvLyDQl9Cw0LPRgNGD0LfQutCwINC30LDQv9C40YHQtdC5XG4gICAgICAgIGlmICh0aGlzLl9pc1JlY29yZHNSZXF1ZXN0KSB7XG4gICAgICAgICAgICB0aGlzLm9uKCdjb250YWluZXJfc2hvdycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMucmVjb3Jkc1JlcXVlc3QgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhhdC5sb2FkQnlGdW5jdGlvbihvcHRpb25zLnJlY29yZHNSZXF1ZXN0KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGF0LmxvYWQob3B0aW9ucy5yZWNvcmRzUmVxdWVzdC51cmwsIG9wdGlvbnMucmVjb3Jkc1JlcXVlc3QubWV0aG9kKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgbGV0IGNsYXNzZXMgICAgICAgID0gW107XG4gICAgICAgIGxldCBjbGFzc2VzV3JhcHBlciA9IFtdO1xuXG4gICAgICAgIGlmIChvcHRpb25zLmhhc093blByb3BlcnR5KCdub0JvcmRlcicpICYmXG4gICAgICAgICAgICB0eXBlb2Ygb3B0aW9ucy5ub0JvcmRlciA9PT0gJ2Jvb2xlYW4nICYmXG4gICAgICAgICAgICBvcHRpb25zLm5vQm9yZGVyXG4gICAgICAgICkge1xuICAgICAgICAgICAgY2xhc3Nlcy5wdXNoKCdjb3JldWktdGFibGVfX25vX2JvcmRlcicpO1xuICAgICAgICB9XG5cblxuICAgICAgICBpZiAob3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnc2hvd1Njcm9sbFNoYWRvdycpICYmXG4gICAgICAgICAgICB0eXBlb2Ygb3B0aW9ucy5zaG93U2Nyb2xsU2hhZG93ID09PSAnYm9vbGVhbicgJiZcbiAgICAgICAgICAgIG9wdGlvbnMuc2hvd1Njcm9sbFNoYWRvd1xuICAgICAgICApIHtcbiAgICAgICAgICAgIGNsYXNzZXNXcmFwcGVyLnB1c2goJ3RhYmxlLXNjcm9sbC1zaGFkb3cnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvcHRpb25zLmhhc093blByb3BlcnR5KCdvdmVyZmxvdycpICYmXG4gICAgICAgICAgICB0eXBlb2Ygb3B0aW9ucy5vdmVyZmxvdyA9PT0gJ2Jvb2xlYW4nICYmXG4gICAgICAgICAgICBvcHRpb25zLm92ZXJmbG93XG4gICAgICAgICkge1xuICAgICAgICAgICAgY2xhc3Nlc1dyYXBwZXIucHVzaCgnb3ZlcmZsb3cteC1hdXRvJyk7XG4gICAgICAgIH1cblxuXG4gICAgICAgIGxldCB0YWJsZUVsZW1lbnQgICAgID0gY29yZXVpVGFibGVSZW5kZXIucmVuZGVyVGFibGUodGhpcyk7XG4gICAgICAgIGxldCBjb250YWluZXJFbGVtZW50ID0gJChcbiAgICAgICAgICAgIGNvcmV1aVRhYmxlVXRpbHMucmVuZGVyKGNvcmV1aVRhYmxlVHBsWydjb250YWluZXIuaHRtbCddLCB7XG4gICAgICAgICAgICAgICAgaWQ6IHRoaXMuX2lkLFxuICAgICAgICAgICAgICAgIGNsYXNzZXM6IGNsYXNzZXMubGVuZ3RoID4gMCA/ICcgJyArIGNsYXNzZXMuam9pbignICcpIDogJycsXG4gICAgICAgICAgICAgICAgY2xhc3Nlc1dyYXBwZXI6IGNsYXNzZXNXcmFwcGVyLmxlbmd0aCA+IDAgPyAnICcgKyBjbGFzc2VzV3JhcHBlci5qb2luKCcgJykgOiAnJyxcbiAgICAgICAgICAgICAgICB3aWR0aFNpemVzOiB3aWR0aFNpemVzLFxuICAgICAgICAgICAgICAgIGhlaWdodFNpemVzOiBoZWlnaHRTaXplcyxcbiAgICAgICAgICAgIH0pXG4gICAgICAgICk7XG5cblxuICAgICAgICBpZiAocmVuZGVyLmhlYWRlcnNPdXQubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgY29udGFpbmVyRWxlbWVudC5wcmVwZW5kKHJlbmRlci5oZWFkZXJzT3V0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVuZGVyLmhlYWRlcnNJbi5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBjb250YWluZXJFbGVtZW50LmZpbmQoJy5jb3JldWktdGFibGVfX2NvbnRhaW5lcicpLnByZXBlbmQocmVuZGVyLmhlYWRlcnNJbik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlbmRlci5mb290ZXJzSW4ubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgY29udGFpbmVyRWxlbWVudC5maW5kKCcuY29yZXVpLXRhYmxlX19jb250YWluZXInKS5hcHBlbmQocmVuZGVyLmZvb3RlcnNJbik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlbmRlci5mb290ZXJzT3V0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGNvbnRhaW5lckVsZW1lbnQuYXBwZW5kKHJlbmRlci5mb290ZXJzT3V0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnRhaW5lckVsZW1lbnQuZmluZCgnLmNvcmV1aS10YWJsZV9fd3JhcHBlcicpLmh0bWwodGFibGVFbGVtZW50KTtcblxuICAgICAgICBpZiAoZWxlbWVudCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gY29udGFpbmVyRWxlbWVudDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIERvbSBlbGVtZW50XG4gICAgICAgIGxldCBkb21FbGVtZW50ID0gbnVsbDtcblxuICAgICAgICBpZiAodHlwZW9mIGVsZW1lbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBkb21FbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoZWxlbWVudCk7XG5cbiAgICAgICAgfSBlbHNlIGlmIChlbGVtZW50IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpIHtcbiAgICAgICAgICAgIGRvbUVsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRvbUVsZW1lbnQpIHtcbiAgICAgICAgICAgICQoZG9tRWxlbWVudCkuaHRtbChjb250YWluZXJFbGVtZW50KTtcbiAgICAgICAgICAgIHRoaXMuaW5pdEV2ZW50cygpO1xuICAgICAgICB9XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICog0JHQu9C+0LrQuNGA0L7QstC60LAg0YLQsNCx0LvQuNGG0YtcbiAgICAgKi9cbiAgICBsb2NrOiBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgbGV0IGNvbnRhaW5lciA9IGNvcmV1aVRhYmxlRWxlbWVudHMuZ2V0Q29udGFpbmVyKHRoaXMuZ2V0SWQoKSk7XG5cbiAgICAgICAgaWYgKGNvbnRhaW5lclswXSAmJiAhIGNvbnRhaW5lci5maW5kKCcuY29yZXVpLXRhYmxlLWxvY2snKVswXSkge1xuICAgICAgICAgICAgbGV0IGh0bWwgPSAgY29yZXVpVGFibGVVdGlscy5yZW5kZXIoY29yZXVpVGFibGVUcGxbJ3RhYmxlL2xvYWRlci5odG1sJ10sIHtcbiAgICAgICAgICAgICAgICBsYW5nOiB0aGlzLmdldExhbmcoKVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGNvbnRhaW5lci5wcmVwZW5kKGh0bWwpO1xuICAgICAgICB9XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICog0KDQsNC30LHQu9C+0LrQuNGA0L7QstC60LAg0YLQsNCx0LvQuNGG0YtcbiAgICAgKi9cbiAgICB1bmxvY2s6IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICBjb3JldWlUYWJsZUVsZW1lbnRzLmdldExvY2sodGhpcy5nZXRJZCgpKS5oaWRlKDUwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAkKHRoaXMpLnJlbW92ZSgpXG4gICAgICAgIH0pO1xuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqINCX0LDQs9GA0YPQt9C60LAg0YHRgtGA0L7QulxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1cmxcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbWV0aG9kXG4gICAgICovXG4gICAgbG9hZDogZnVuY3Rpb24gKHVybCwgbWV0aG9kKSB7XG5cbiAgICAgICAgdGhpcy5sb2NrKCk7XG5cbiAgICAgICAgbGV0IHRoYXQgICA9IHRoaXM7XG4gICAgICAgIGxldCBwYXJhbXMgPSB7fTtcblxuICAgICAgICBpZiAodXJsLm1hdGNoKC9cXFtwYWdlXFxdLykpIHtcbiAgICAgICAgICAgIHVybCA9IHVybC5yZXBsYWNlKC9cXFtwYWdlXFxdL2csIHRoaXMuX3BhZ2UpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGV0IHBhcmFtUGFnZSA9IGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QodGhpcy5fb3B0aW9ucy5yZXF1ZXN0UGFyYW1zKSAmJiB0aGlzLl9vcHRpb25zLnJlcXVlc3RQYXJhbXMuaGFzT3duUHJvcGVydHkoJ3BhZ2UnKVxuICAgICAgICAgICAgICAgID8gdGhpcy5fb3B0aW9ucy5yZXF1ZXN0UGFyYW1zLnBhZ2VcbiAgICAgICAgICAgICAgICA6ICdwYWdlJztcbiAgICAgICAgICAgIHBhcmFtc1twYXJhbVBhZ2VdID0gdGhpcy5fcGFnZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh1cmwubWF0Y2goL1xcW2NvdW50XFxdLykpIHtcbiAgICAgICAgICAgIHVybCA9IHVybC5yZXBsYWNlKC9cXFtjb3VudFxcXS9nLCB0aGlzLl9yZWNvcmRzUGVyUGFnZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsZXQgcGFyYW1Db3VudCA9IGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QodGhpcy5fb3B0aW9ucy5yZXF1ZXN0UGFyYW1zKSAmJiB0aGlzLl9vcHRpb25zLnJlcXVlc3RQYXJhbXMuaGFzT3duUHJvcGVydHkoJ2NvdW50JylcbiAgICAgICAgICAgICAgICA/IHRoaXMuX29wdGlvbnMucmVxdWVzdFBhcmFtcy5jb3VudFxuICAgICAgICAgICAgICAgIDogJ2NvdW50JztcbiAgICAgICAgICAgIHBhcmFtc1twYXJhbUNvdW50XSA9IHRoaXMuX3JlY29yZHNQZXJQYWdlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHVybC5tYXRjaCgvXFxbc3RhcnRcXF0vKSkge1xuICAgICAgICAgICAgdXJsID0gdXJsLnJlcGxhY2UoL1xcW3N0YXJ0XFxdL2csICgodGhpcy5fcGFnZSAtIDEpICogdGhpcy5fcmVjb3Jkc1BlclBhZ2UpICsgMSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsZXQgcGFyYW1TdGFydCA9IGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QodGhpcy5fb3B0aW9ucy5yZXF1ZXN0UGFyYW1zKSAmJiB0aGlzLl9vcHRpb25zLnJlcXVlc3RQYXJhbXMuaGFzT3duUHJvcGVydHkoJ3N0YXJ0JylcbiAgICAgICAgICAgICAgICA/IHRoaXMuX29wdGlvbnMucmVxdWVzdFBhcmFtcy5zdGFydFxuICAgICAgICAgICAgICAgIDogJ3N0YXJ0JztcbiAgICAgICAgICAgIHBhcmFtc1twYXJhbVN0YXJ0XSA9ICgodGhpcy5fcGFnZSAtIDEpICogdGhpcy5fcmVjb3Jkc1BlclBhZ2UpICsgMTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh1cmwubWF0Y2goL1xcW2VuZFxcXS8pKSB7XG4gICAgICAgICAgICB1cmwgPSB1cmwucmVwbGFjZSgvXFxbZW5kXFxdL2csICgodGhpcy5fcGFnZSAtIDEpICogdGhpcy5fcmVjb3Jkc1BlclBhZ2UpICsgTnVtYmVyKHRoaXMuX3JlY29yZHNQZXJQYWdlKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsZXQgcGFyYW1FbmQgPSBjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KHRoaXMuX29wdGlvbnMucmVxdWVzdFBhcmFtcykgJiYgdGhpcy5fb3B0aW9ucy5yZXF1ZXN0UGFyYW1zLmhhc093blByb3BlcnR5KCdlbmQnKVxuICAgICAgICAgICAgICAgID8gdGhpcy5fb3B0aW9ucy5yZXF1ZXN0UGFyYW1zLmVuZFxuICAgICAgICAgICAgICAgIDogJ2VuZCc7XG4gICAgICAgICAgICBwYXJhbXNbcGFyYW1FbmRdID0gKCh0aGlzLl9wYWdlIC0gMSkgKiB0aGlzLl9yZWNvcmRzUGVyUGFnZSkgKyBOdW1iZXIodGhpcy5fcmVjb3Jkc1BlclBhZ2UpO1xuICAgICAgICB9XG5cblxuICAgICAgICBsZXQgc2VhcmNoRGF0YSA9IHRoaXMuZ2V0U2VhcmNoRGF0YSgpO1xuICAgICAgICBsZXQgZmlsdGVyRGF0YSA9IHRoaXMuZ2V0RmlsdGVyRGF0YSgpO1xuXG4gICAgICAgIGlmIChmaWx0ZXJEYXRhLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGZpbHRlckRhdGEubWFwKGZ1bmN0aW9uIChmaWx0ZXIpIHtcbiAgICAgICAgICAgICAgICBzZWFyY2hEYXRhLnB1c2goZmlsdGVyKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNlYXJjaERhdGEubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgbGV0IHBhcmFtU2VhcmNoID0gY29yZXVpVGFibGVVdGlscy5pc09iamVjdCh0aGlzLl9vcHRpb25zLnJlcXVlc3RQYXJhbXMpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9vcHRpb25zLnJlcXVlc3RQYXJhbXMuaGFzT3duUHJvcGVydHkoJ3NlYXJjaCcpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlb2YgdGhpcy5fb3B0aW9ucy5yZXF1ZXN0UGFyYW1zLnNlYXJjaCA9PT0gJ3N0cmluZydcbiAgICAgICAgICAgICAgICA/IHRoaXMuX29wdGlvbnMucmVxdWVzdFBhcmFtcy5zZWFyY2hcbiAgICAgICAgICAgICAgICA6ICdzZWFyY2gnO1xuXG4gICAgICAgICAgICBwYXJhbXNbcGFyYW1TZWFyY2hdID0ge307XG5cbiAgICAgICAgICAgIHNlYXJjaERhdGEubWFwKGZ1bmN0aW9uIChzZWFyY2hJdGVtKSB7XG4gICAgICAgICAgICAgICAgcGFyYW1zW3BhcmFtU2VhcmNoXVtzZWFyY2hJdGVtLmZpZWxkXSA9IHNlYXJjaEl0ZW0udmFsdWVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuX3NvcnQubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgbGV0IHBhcmFtU29ydCA9IGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QodGhpcy5fb3B0aW9ucy5yZXF1ZXN0UGFyYW1zKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX29wdGlvbnMucmVxdWVzdFBhcmFtcy5oYXNPd25Qcm9wZXJ0eSgnc29ydCcpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIHRoaXMuX29wdGlvbnMucmVxdWVzdFBhcmFtcy5zb3J0ID09PSAnc3RyaW5nJ1xuICAgICAgICAgICAgICAgID8gdGhpcy5fb3B0aW9ucy5yZXF1ZXN0UGFyYW1zLnNvcnRcbiAgICAgICAgICAgICAgICA6ICdzb3J0JztcblxuICAgICAgICAgICAgcGFyYW1zW3BhcmFtU29ydF0gPSB0aGlzLl9zb3J0O1xuICAgICAgICB9XG5cblxuICAgICAgICAkLmFqYXgoe1xuICAgICAgICAgICAgdXJsOiB1cmwsXG4gICAgICAgICAgICBtZXRob2Q6IG1ldGhvZCB8fCAnR0VUJyxcbiAgICAgICAgICAgIGRhdGFUeXBlOiBcImpzb25cIixcbiAgICAgICAgICAgIGRhdGE6IHBhcmFtcyxcbiAgICAgICAgICAgIGJlZm9yZVNlbmQ6IGZ1bmN0aW9uKHhocikge1xuICAgICAgICAgICAgICAgIGNvcmV1aVRhYmxlUHJpdmF0ZS5fdHJpZ2dlcih0aGF0LCAncmVjb3Jkc19sb2FkX3N0YXJ0JywgWyB0aGF0LCB4aHIgXSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24gKHJlc3VsdCkge1xuXG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdC5oYXNPd25Qcm9wZXJ0eSgncmVjb3JkcycpICYmXG4gICAgICAgICAgICAgICAgICAgIHR5cGVvZiByZXN1bHQucmVjb3JkcyA9PT0gJ29iamVjdCcgJiZcbiAgICAgICAgICAgICAgICAgICAgQXJyYXkuaXNBcnJheShyZXN1bHQucmVjb3JkcylcbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHRvdGFsID0gcmVzdWx0Lmhhc093blByb3BlcnR5KCd0b3RhbCcpICYmIGNvcmV1aVRhYmxlVXRpbHMuaXNOdW1lcmljKHJlc3VsdC50b3RhbClcbiAgICAgICAgICAgICAgICAgICAgICAgID8gcmVzdWx0LnRvdGFsXG4gICAgICAgICAgICAgICAgICAgICAgICA6IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIHRoYXQuc2V0UmVjb3JkcyhyZXN1bHQucmVjb3JkcywgdG90YWwpO1xuXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhhdC5zZXRSZWNvcmRzKFtdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uKHhociwgdGV4dFN0YXR1cywgZXJyb3JUaHJvd24pIHtcbiAgICAgICAgICAgICAgICB0aGF0LnNldFJlY29yZHMoW10pO1xuICAgICAgICAgICAgICAgIGNvcmV1aVRhYmxlUHJpdmF0ZS5fdHJpZ2dlcih0aGF0LCAncmVjb3Jkc19sb2FkX2Vycm9yJywgWyB0aGF0LCB4aHIsIHRleHRTdGF0dXMsIGVycm9yVGhyb3duIF0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNvbXBsZXRlOiBmdW5jdGlvbih4aHIsIHRleHRTdGF0dXMpIHtcbiAgICAgICAgICAgICAgICB0aGF0LnVubG9jaygpO1xuICAgICAgICAgICAgICAgIGNvcmV1aVRhYmxlUHJpdmF0ZS5fdHJpZ2dlcih0aGF0LCAncmVjb3Jkc19sb2FkX2VuZCcsIFsgdGhhdCwgeGhyLCB0ZXh0U3RhdHVzIF0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICog0JfQsNCz0YDRg9C30LrQsCDRgdGC0YDQvtC6XG4gICAgICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2tcbiAgICAgKi9cbiAgICBsb2FkQnlGdW5jdGlvbjogZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG5cbiAgICAgICAgbGV0IHRoYXQgICA9IHRoaXM7XG4gICAgICAgIGxldCBwYXJhbXMgPSB7fTtcblxuICAgICAgICBsZXQgcGFyYW1QYWdlID0gY29yZXVpVGFibGVVdGlscy5pc09iamVjdCh0aGlzLl9vcHRpb25zLnJlcXVlc3RQYXJhbXMpICYmIHRoaXMuX29wdGlvbnMucmVxdWVzdFBhcmFtcy5oYXNPd25Qcm9wZXJ0eSgncGFnZScpXG4gICAgICAgICAgICA/IHRoaXMuX29wdGlvbnMucmVxdWVzdFBhcmFtcy5wYWdlXG4gICAgICAgICAgICA6ICdwYWdlJztcblxuICAgICAgICBsZXQgcGFyYW1Db3VudCA9IGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QodGhpcy5fb3B0aW9ucy5yZXF1ZXN0UGFyYW1zKSAmJiB0aGlzLl9vcHRpb25zLnJlcXVlc3RQYXJhbXMuaGFzT3duUHJvcGVydHkoJ2NvdW50JylcbiAgICAgICAgICAgID8gdGhpcy5fb3B0aW9ucy5yZXF1ZXN0UGFyYW1zLmNvdW50XG4gICAgICAgICAgICA6ICdjb3VudCc7XG5cbiAgICAgICAgbGV0IHBhcmFtU3RhcnQgPSBjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KHRoaXMuX29wdGlvbnMucmVxdWVzdFBhcmFtcykgJiYgdGhpcy5fb3B0aW9ucy5yZXF1ZXN0UGFyYW1zLmhhc093blByb3BlcnR5KCdzdGFydCcpXG4gICAgICAgICAgICA/IHRoaXMuX29wdGlvbnMucmVxdWVzdFBhcmFtcy5zdGFydFxuICAgICAgICAgICAgOiAnc3RhcnQnO1xuXG4gICAgICAgIGxldCBwYXJhbUVuZCA9IGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QodGhpcy5fb3B0aW9ucy5yZXF1ZXN0UGFyYW1zKSAmJiB0aGlzLl9vcHRpb25zLnJlcXVlc3RQYXJhbXMuaGFzT3duUHJvcGVydHkoJ2VuZCcpXG4gICAgICAgICAgICA/IHRoaXMuX29wdGlvbnMucmVxdWVzdFBhcmFtcy5lbmRcbiAgICAgICAgICAgIDogJ2VuZCc7XG5cbiAgICAgICAgcGFyYW1zW3BhcmFtQ291bnRdID0gdGhpcy5fcmVjb3Jkc1BlclBhZ2U7XG4gICAgICAgIHBhcmFtc1twYXJhbVBhZ2VdICA9IHRoaXMuX3BhZ2U7XG4gICAgICAgIHBhcmFtc1twYXJhbVN0YXJ0XSA9ICgodGhpcy5fcGFnZSAtIDEpICogdGhpcy5fcmVjb3Jkc1BlclBhZ2UpICsgMTtcbiAgICAgICAgcGFyYW1zW3BhcmFtRW5kXSAgID0gKCh0aGlzLl9wYWdlIC0gMSkgKiB0aGlzLl9yZWNvcmRzUGVyUGFnZSkgKyBOdW1iZXIodGhpcy5fcmVjb3Jkc1BlclBhZ2UpO1xuXG5cblxuICAgICAgICBsZXQgc2VhcmNoRGF0YSA9IHRoaXMuZ2V0U2VhcmNoRGF0YSgpO1xuICAgICAgICBsZXQgZmlsdGVyRGF0YSA9IHRoaXMuZ2V0RmlsdGVyRGF0YSgpO1xuXG4gICAgICAgIGlmIChmaWx0ZXJEYXRhLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICQuZWFjaChmaWx0ZXJEYXRhLCBmdW5jdGlvbiAoa2V5LCBmaWx0ZXIpIHtcbiAgICAgICAgICAgICAgICBzZWFyY2hEYXRhLnB1c2goZmlsdGVyKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNlYXJjaERhdGEubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgbGV0IHBhcmFtU2VhcmNoID0gY29yZXVpVGFibGVVdGlscy5pc09iamVjdCh0aGlzLl9vcHRpb25zLnJlcXVlc3RQYXJhbXMpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9vcHRpb25zLnJlcXVlc3RQYXJhbXMuaGFzT3duUHJvcGVydHkoJ3NlYXJjaCcpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlb2YgdGhpcy5fb3B0aW9ucy5yZXF1ZXN0UGFyYW1zLnNlYXJjaCA9PT0gJ3N0cmluZydcbiAgICAgICAgICAgICAgICA/IHRoaXMuX29wdGlvbnMucmVxdWVzdFBhcmFtcy5zZWFyY2hcbiAgICAgICAgICAgICAgICA6ICdzZWFyY2gnO1xuXG4gICAgICAgICAgICBwYXJhbXNbcGFyYW1TZWFyY2hdID0ge307XG5cbiAgICAgICAgICAgIHNlYXJjaERhdGEubWFwKGZ1bmN0aW9uIChzZWFyY2hJdGVtKSB7XG4gICAgICAgICAgICAgICAgcGFyYW1zW3BhcmFtU2VhcmNoXVtzZWFyY2hJdGVtLmZpZWxkXSA9IHNlYXJjaEl0ZW0udmFsdWVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuX3NvcnQubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgbGV0IHBhcmFtU29ydCA9IGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QodGhpcy5fb3B0aW9ucy5yZXF1ZXN0UGFyYW1zKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX29wdGlvbnMucmVxdWVzdFBhcmFtcy5oYXNPd25Qcm9wZXJ0eSgnc29ydCcpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIHRoaXMuX29wdGlvbnMucmVxdWVzdFBhcmFtcy5zb3J0ID09PSAnc3RyaW5nJ1xuICAgICAgICAgICAgICAgID8gdGhpcy5fb3B0aW9ucy5yZXF1ZXN0UGFyYW1zLnNvcnRcbiAgICAgICAgICAgICAgICA6ICdzb3J0JztcblxuICAgICAgICAgICAgcGFyYW1zW3BhcmFtU29ydF0gPSB0aGlzLl9zb3J0O1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHJlc3VsdCA9IGNhbGxiYWNrKHBhcmFtcywgdGhpcyk7XG5cblxuICAgICAgICAvKipcbiAgICAgICAgICog0KPRgdGC0LDQvdC+0LLQutCwINC30LDQv9C40YHQtdC5XG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhXG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBzZXRSZWNvcmRzIChkYXRhKSB7XG5cbiAgICAgICAgICAgIGlmIChkYXRhLmhhc093blByb3BlcnR5KCdyZWNvcmRzJykgJiZcbiAgICAgICAgICAgICAgICB0eXBlb2YgZGF0YS5yZWNvcmRzID09PSAnb2JqZWN0JyAmJlxuICAgICAgICAgICAgICAgIEFycmF5LmlzQXJyYXkoZGF0YS5yZWNvcmRzKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgbGV0IHRvdGFsID0gZGF0YS5oYXNPd25Qcm9wZXJ0eSgndG90YWwnKSAmJiBjb3JldWlUYWJsZVV0aWxzLmlzTnVtZXJpYyhkYXRhLnRvdGFsKVxuICAgICAgICAgICAgICAgICAgICA/IGRhdGEudG90YWxcbiAgICAgICAgICAgICAgICAgICAgOiBudWxsO1xuICAgICAgICAgICAgICAgIHRoYXQuc2V0UmVjb3JkcyhkYXRhLnJlY29yZHMsIHRvdGFsKTtcblxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGF0LnNldFJlY29yZHMoW10pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cblxuXG4gICAgICAgIGlmIChyZXN1bHQgaW5zdGFuY2VvZiBQcm9taXNlKSB7XG4gICAgICAgICAgICB0aGlzLmxvY2soKTtcblxuICAgICAgICAgICAgcmVzdWx0XG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhhdC51bmxvY2soKTtcblxuICAgICAgICAgICAgICAgICAgICBzZXRSZWNvcmRzKGRhdGEpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmNhdGNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhhdC51bmxvY2soKTtcbiAgICAgICAgICAgICAgICB9KVxuXG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHJlc3VsdCA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIHNldFJlY29yZHMocmVzdWx0KTtcbiAgICAgICAgfVxuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqINCf0LXRgNC10LfQsNCz0YDRg9C30LrQsCDQt9Cw0L/QuNGB0LXQuSDQsiDRgtCw0LHQu9C40YbQtVxuICAgICAqL1xuICAgIHJlbG9hZDogZnVuY3Rpb24gKCkge1xuXG4gICAgICAgIGlmICh0aGlzLl9pc1JlY29yZHNSZXF1ZXN0KSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHRoaXMuX29wdGlvbnMucmVjb3Jkc1JlcXVlc3QgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmxvYWRCeUZ1bmN0aW9uKHRoaXMuX29wdGlvbnMucmVjb3Jkc1JlcXVlc3QpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmxvYWQodGhpcy5fb3B0aW9ucy5yZWNvcmRzUmVxdWVzdC51cmwsIHRoaXMuX29wdGlvbnMucmVjb3Jkc1JlcXVlc3QubWV0aG9kKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqINCf0LXRgNC10YHQvtC30LTQsNC90LjQtSDRgtC10LvQsCDRgtCw0LHQu9C40YbRi1xuICAgICAqL1xuICAgIHJlZnJlc2g6IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICBsZXQgdGFibGUgPSBjb3JldWlUYWJsZVJlbmRlci5yZW5kZXJUYWJsZSh0aGlzKTtcblxuICAgICAgICBjb3JldWlUYWJsZUVsZW1lbnRzLmdldFRhYmxlKHRoaXMuZ2V0SWQoKSkucmVwbGFjZVdpdGgodGFibGUpO1xuXG4gICAgICAgIGNvcmV1aVRhYmxlUHJpdmF0ZS5fdHJpZ2dlcih0aGlzLCAndGFibGVfc2hvdycsIFsgdGhpcyBdKTtcbiAgICAgICAgY29yZXVpVGFibGVQcml2YXRlLl90cmlnZ2VyKHRoaXMsICdyZWNvcmRzX3Nob3cnLCBbIHRoaXMgXSk7XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICog0KPRgdGC0LDQvdC+0LLQutCwINC+0LHRidC10LPQviDQutC+0LvQuNGH0LXRgdGC0LLQsCDQt9Cw0L/QuNGB0LXQuSDQvdCwINGB0YLRgNCw0L3QuNGG0LVcbiAgICAgKiBAcGFyYW0gcmVjb3Jkc1BlclBhZ2VcbiAgICAgKi9cbiAgICBzZXRQYWdlU2l6ZTogZnVuY3Rpb24gKHJlY29yZHNQZXJQYWdlKSB7XG5cbiAgICAgICAgdGhpcy5fcmVjb3Jkc1BlclBhZ2UgPSByZWNvcmRzUGVyUGFnZTtcblxuICAgICAgICBjb3JldWlUYWJsZVByaXZhdGUuX3RyaWdnZXIodGhpcywgJ3BhZ2Vfc2l6ZV91cGRhdGUnKTtcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiDQktGL0LHQvtGAINCy0YHQtdGFINC30LDQv9C40YHQtdC5INCyINGC0LDQsdC70LjRhtC1XG4gICAgICovXG4gICAgc2VsZWN0QWxsOiBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgY29yZXVpVGFibGVFbGVtZW50cy5zZWxlY3RUckFsbCh0aGlzLmdldElkKCkpXG5cbiAgICAgICAgY29yZXVpVGFibGVQcml2YXRlLl90cmlnZ2VyKHRoaXMsICdyZWNvcmRfc2VsZWN0X2FsbCcpO1xuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqINCe0YLQvNC10L3QsCDQstGL0LHQvtGAINCy0YHQtdGFINC30LDQv9C40YHQtdC5INCyINGC0LDQsdC70LjRhtC1XG4gICAgICovXG4gICAgdW5zZWxlY3RBbGw6IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICBjb3JldWlUYWJsZUVsZW1lbnRzLnVuc2VsZWN0VHJBbGwodGhpcy5nZXRJZCgpKVxuXG4gICAgICAgIGNvcmV1aVRhYmxlUHJpdmF0ZS5fdHJpZ2dlcih0aGlzLCAncmVjb3JkX3Vuc2VsZWN0X2FsbCcpO1xuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqINCS0YvQsdC+0YAg0LfQsNC/0LjRgdC4INCyINGC0LDQsdC70LjRhtC1XG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGlkXG4gICAgICovXG4gICAgc2VsZWN0UmVjb3JkOiBmdW5jdGlvbiAoaWQpIHtcblxuICAgICAgICBsZXQgcmVjb3JkID0gdGhpcy5nZXRSZWNvcmRCeUlkKGlkKTtcblxuICAgICAgICBpZiAoICEgcmVjb3JkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgdHIgPSBjb3JldWlUYWJsZUVsZW1lbnRzLmdldFRyQnlJbmRleCh0aGlzLmdldElkKCksIHJlY29yZC5pbmRleCk7XG5cbiAgICAgICAgaWYgKHRyLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29yZXVpVGFibGVFbGVtZW50cy5zZWxlY3RUcih0cilcblxuICAgICAgICBjb3JldWlUYWJsZVByaXZhdGUuX3RyaWdnZXIodGhpcywgJ3JlY29yZF9zZWxlY3QnLCBbIHJlY29yZCBdKTtcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiDQktGL0LHQvtGAINC30LDQv9C40YHQuCDQsiDRgtCw0LHQu9C40YbQtSDQv9C+INC40L3QtNC10LrRgdGDXG4gICAgICogQHBhcmFtIHtpbnR9IGluZGV4XG4gICAgICovXG4gICAgc2VsZWN0UmVjb3JkQnlJbmRleDogZnVuY3Rpb24gKGluZGV4KSB7XG5cbiAgICAgICAgbGV0IHJlY29yZCA9IHRoaXMuZ2V0UmVjb3JkQnlJbmRleChpbmRleCk7XG5cbiAgICAgICAgaWYgKCAhIHJlY29yZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHRyID0gY29yZXVpVGFibGVFbGVtZW50cy5nZXRUckJ5SW5kZXgodGhpcy5nZXRJZCgpLCByZWNvcmQuaW5kZXgpO1xuXG4gICAgICAgIGlmICh0ci5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvcmV1aVRhYmxlRWxlbWVudHMuc2VsZWN0VHIodHIpXG5cbiAgICAgICAgY29yZXVpVGFibGVQcml2YXRlLl90cmlnZ2VyKHRoaXMsICdyZWNvcmRfc2VsZWN0JywgWyByZWNvcmQgXSk7XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICog0J7RgtC80LXQvdCwINCy0YvQsdC+0YDQsCDQt9Cw0L/QuNGB0Lgg0LIg0YLQsNCx0LvQuNGG0LVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWRcbiAgICAgKi9cbiAgICB1bnNlbGVjdFJlY29yZDogZnVuY3Rpb24gKGlkKSB7XG5cbiAgICAgICAgbGV0IHJlY29yZCA9IHRoaXMuZ2V0UmVjb3JkQnlJZChpZCk7XG5cbiAgICAgICAgaWYgKCAhIHJlY29yZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHRyID0gY29yZXVpVGFibGVFbGVtZW50cy5nZXRUckJ5SW5kZXgodGhpcy5nZXRJZCgpLCByZWNvcmQuaW5kZXgpO1xuXG4gICAgICAgIGlmICggISB0cikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29yZXVpVGFibGVFbGVtZW50cy51bnNlbGVjdFRyKHRyKVxuXG4gICAgICAgIGNvcmV1aVRhYmxlUHJpdmF0ZS5fdHJpZ2dlcih0aGlzLCAncmVjb3JkX3Vuc2VsZWN0JywgWyByZWNvcmQuZGF0YSBdKTtcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0LLRi9Cx0YDQsNC90L3Ri9GFIGlkXG4gICAgICogQHJldHVybiB7YXJyYXl9XG4gICAgICovXG4gICAgZ2V0U2VsZWN0ZWRSZWNvcmRzSWQ6IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICBsZXQgcmVjb3JkcyA9IFtdO1xuICAgICAgICBsZXQgdGhhdCAgICA9IHRoaXM7XG4gICAgICAgIGxldCBmaWVsZCAgID0gdGhpcy5fb3B0aW9ucy5wcmltYXJ5S2V5O1xuXG4gICAgICAgICQuZWFjaChjb3JldWlUYWJsZUVsZW1lbnRzLmdldFNlbGVjdGVkSW5kZXhlcyh0aGlzLmdldElkKCkpLCBmdW5jdGlvbiAoa2V5LCBpbmRleCkge1xuICAgICAgICAgICAgbGV0IHJlY29yZCA9IHRoYXQuZ2V0UmVjb3JkQnlJbmRleChpbmRleCk7XG5cbiAgICAgICAgICAgIGlmICggISByZWNvcmQgfHwgISByZWNvcmQuZGF0YS5oYXNPd25Qcm9wZXJ0eShmaWVsZCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJlY29yZHMucHVzaChyZWNvcmQuZGF0YVtmaWVsZF0pO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gcmVjb3JkcztcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0LLRi9Cx0YDQsNC90L3Ri9GFINC30LDQv9C40YHQtdC5XG4gICAgICogQHJldHVybiB7YXJyYXl9XG4gICAgICovXG4gICAgZ2V0U2VsZWN0ZWRSZWNvcmRzOiBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgbGV0IHJlY29yZHMgPSBbXTtcbiAgICAgICAgbGV0IHRoYXQgICAgPSB0aGlzO1xuXG4gICAgICAgICQuZWFjaChjb3JldWlUYWJsZUVsZW1lbnRzLmdldFNlbGVjdGVkSW5kZXhlcyh0aGlzLmdldElkKCkpLCBmdW5jdGlvbiAoa2V5LCBpbmRleCkge1xuICAgICAgICAgICAgbGV0IHJlY29yZCA9IHRoYXQuZ2V0UmVjb3JkQnlJbmRleChpbmRleCk7XG5cbiAgICAgICAgICAgIGlmICggISByZWNvcmQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJlY29yZHMucHVzaChyZWNvcmQpO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gcmVjb3JkcztcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0LfQsNC/0LjRgdC4INC/0L4gaWRcbiAgICAgKiBAcGFyYW0gaWRcbiAgICAgKiBAcmV0dXJuIHtvYmplY3R8bnVsbH1cbiAgICAgKi9cbiAgICBnZXRSZWNvcmQ6IGZ1bmN0aW9uIChpZCkge1xuXG4gICAgICAgIGxldCByZWNvcmQgPSB0aGlzLmdldFJlY29yZEJ5SWQoaWQpO1xuXG4gICAgICAgIGlmICggISByZWNvcmQpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlY29yZC5kYXRhO1xuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSDQt9Cw0L/QuNGB0LXQuVxuICAgICAqL1xuICAgIGdldFJlY29yZHM6IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICBsZXQgcmVjb3JkcyA9IFtdXG5cbiAgICAgICAgJC5lYWNoKHRoaXMuX3JlY29yZHMsIGZ1bmN0aW9uIChrZXksIHJlY29yZCkge1xuICAgICAgICAgICAgcmVjb3Jkcy5wdXNoKCQuZXh0ZW5kKHRydWUsIHt9LCByZWNvcmQpKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHJlY29yZHM7XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC00LDQvdC90YvRhSDQuNC3INGB0YPRidC10YHRgtCy0YPRjtGJ0LjRhSDQt9Cw0L/QuNGB0LXQuVxuICAgICAqIEByZXR1cm4ge0FycmF5fVxuICAgICAqL1xuICAgIGdldERhdGE6IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICBsZXQgZGF0YSA9IFtdXG5cbiAgICAgICAgJC5lYWNoKHRoaXMuX3JlY29yZHMsIGZ1bmN0aW9uIChrZXksIHJlY29yZCkge1xuICAgICAgICAgICAgZGF0YS5wdXNoKCQuZXh0ZW5kKHRydWUsIHt9LCByZWNvcmQuZGF0YSkpO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiDQn9C10YDQtdGF0L7QtCDQuiDQv9GA0LXQtNGL0LTRg9GJ0LXQuSDRgdGC0YDQsNC90LjRhtC1XG4gICAgICovXG4gICAgcHJldlBhZ2U6IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICBpZiAodGhpcy5fcGFnZSA+IDEpIHtcbiAgICAgICAgICAgIHRoaXMuX3BhZ2UtLTtcbiAgICAgICAgICAgIHRoaXMucmVsb2FkKCk7XG4gICAgICAgIH1cbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiDQn9C10YDQtdGF0L7QtCDQuiDRgdC70LXQtNGD0Y7RidC10Lkg0YHRgtGA0LDQvdC40YbQtVxuICAgICAqIEByZXR1cm4ge2FycmF5fVxuICAgICAqL1xuICAgIG5leHRQYWdlOiBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgbGV0IHRvdGFsUGFnZXMgPSB0aGlzLl9yZWNvcmRzVG90YWwgPiAwICYmIHRoaXMuX3JlY29yZHNQZXJQYWdlID4gMFxuICAgICAgICAgICAgPyBNYXRoLmNlaWwodGhpcy5fcmVjb3Jkc1RvdGFsIC8gdGhpcy5fcmVjb3Jkc1BlclBhZ2UpXG4gICAgICAgICAgICA6IDE7XG5cbiAgICAgICAgaWYgKHRoaXMuX3BhZ2UgPCB0b3RhbFBhZ2VzKSB7XG4gICAgICAgICAgICB0aGlzLl9wYWdlKys7XG4gICAgICAgICAgICB0aGlzLnJlbG9hZCgpO1xuICAgICAgICB9XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICog0J/QtdGA0LXRhdC+0LQg0Log0YPQutCw0LfQsNC90L3QvtC5INGB0YLRgNCw0L3QuNGG0LVcbiAgICAgKi9cbiAgICBnb1BhZ2U6IGZ1bmN0aW9uIChwYWdlKSB7XG5cbiAgICAgICAgaWYgKHBhZ2UgPj0gMSkge1xuICAgICAgICAgICAgdGhpcy5fcGFnZSA9IHBhZ2U7XG4gICAgICAgICAgICB0aGlzLnJlbG9hZCgpO1xuICAgICAgICB9XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICog0KDQtdCz0LjRgdGC0YDQsNGG0LjRjyDRhNGD0L3QutGG0LjQuCDQvdCwINGB0L7QsdGL0YLQuNC1XG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IGV2ZW50TmFtZVxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259ICAgICBjYWxsYmFja1xuICAgICAqIEBwYXJhbSB7Kn0gICAgICAgICAgICBjb250ZXh0XG4gICAgICogQHBhcmFtIHtib29sZWFufSAgICAgIHNpbmdsZUV4ZWNcbiAgICAgKi9cbiAgICBvbjogZnVuY3Rpb24oZXZlbnROYW1lLCBjYWxsYmFjaywgY29udGV4dCwgc2luZ2xlRXhlYykge1xuXG4gICAgICAgIGxldCBldmVudE5hbWVzID0gW107XG5cbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZXZlbnROYW1lKSkge1xuICAgICAgICAgICAgJC5lYWNoKGV2ZW50TmFtZSwgZnVuY3Rpb24gKGtleSwgbmFtZSkge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbmFtZSA9PT0gJ3N0cmluZycgJiYgbmFtZSkge1xuICAgICAgICAgICAgICAgICAgICBldmVudE5hbWVzLnB1c2gobmFtZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgZXZlbnROYW1lID09PSAnc3RyaW5nJyAmJiBldmVudE5hbWUpIHtcbiAgICAgICAgICAgIGV2ZW50TmFtZXMucHVzaChldmVudE5hbWUpO1xuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgdGhhdCA9IHRoaXM7XG5cbiAgICAgICAgJC5lYWNoKGV2ZW50TmFtZXMsIGZ1bmN0aW9uIChrZXksIG5hbWUpIHtcblxuICAgICAgICAgICAgaWYgKCAhIEFycmF5LmlzQXJyYXkodGhhdC5fZXZlbnRzW25hbWVdKSkge1xuICAgICAgICAgICAgICAgIHRoYXQuX2V2ZW50c1tuYW1lXSA9IFtdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGF0Ll9ldmVudHNbbmFtZV0ucHVzaCh7XG4gICAgICAgICAgICAgICAgY29udGV4dCA6IGNvbnRleHQgPyBjb250ZXh0IDogdGhhdCxcbiAgICAgICAgICAgICAgICBjYWxsYmFjazogY2FsbGJhY2ssXG4gICAgICAgICAgICAgICAgc2luZ2xlRXhlYzogISEgc2luZ2xlRXhlYyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0L/QtdGA0LXQstC+0LTQvtCyINGC0LXQutGD0YnQtdCz0L4g0Y/Qt9GL0LrQsFxuICAgICAqIEByZXR1cm4ge29iamVjdH1cbiAgICAgKi9cbiAgICBnZXRMYW5nOiBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgcmV0dXJuICQuZXh0ZW5kKHRydWUsIHt9LCB0aGlzLl9vcHRpb25zLmxhbmdJdGVtcyk7XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICog0KPRgdGC0LDQvdC+0LLQutCwINCy0LjQtNC40LzRi9GFINC60L7Qu9C+0L3QvtC6LCDQvdC1INGD0LrQsNC30LDQvdC90YvQtSDQutC+0LvQvtC90LrQuCDQsdGD0LTRg9GCINGB0LrRgNGL0YLRi1xuICAgICAqIEBwYXJhbSB7QXJyYXl9IGNvbHVtbnNcbiAgICAgKi9cbiAgICBzZXRDb2x1bW5zU2hvdzogZnVuY3Rpb24gKGNvbHVtbnMpIHtcblxuICAgICAgICBpZiAoICEgQXJyYXkuaXNBcnJheShjb2x1bW5zKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGlzQ2hhbmdlID0gZmFsc2U7XG4gICAgICAgIGxldCB0YWJsZSAgICA9IHRoaXM7XG5cbiAgICAgICAgdGhpcy5fY291bnRDb2x1bW5zU2hvdyA9IDA7XG5cblxuICAgICAgICB0aGlzLl9jb2x1bW5zLm1hcChmdW5jdGlvbiAoY29sdW1uKSB7XG4gICAgICAgICAgICBsZXQgb3B0aW9ucyA9IGNvbHVtbi5nZXRPcHRpb25zKCk7XG5cbiAgICAgICAgICAgIGlmIChvcHRpb25zLmhhc093blByb3BlcnR5KCdmaWVsZCcpICYmIHR5cGVvZiBvcHRpb25zLmZpZWxkID09PSAnc3RyaW5nJykge1xuXG4gICAgICAgICAgICAgICAgbGV0IGlzU2hvdyA9IGNvbHVtbnMuaW5kZXhPZihvcHRpb25zLmZpZWxkKSA+PSAwO1xuXG4gICAgICAgICAgICAgICAgaWYgKGNvbHVtbi5pc1Nob3coKSAhPT0gaXNTaG93KSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbHVtbi5zZXRTaG93KGlzU2hvdyk7XG4gICAgICAgICAgICAgICAgICAgIGlzQ2hhbmdlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChjb2x1bW4uaXNTaG93KCkpIHtcbiAgICAgICAgICAgICAgICB0YWJsZS5fY291bnRDb2x1bW5zU2hvdysrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuXG4gICAgICAgIGlmIChpc0NoYW5nZSkge1xuICAgICAgICAgICAgY29yZXVpVGFibGVQcml2YXRlLl90cmlnZ2VyKHRoaXMsICdjb2x1bW5zX2NoYW5nZScpO1xuICAgICAgICAgICAgdGhpcy5yZWZyZXNoKCk7XG4gICAgICAgIH1cbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiDQn9C+0LrQsNC3INC60L7Qu9C+0L3QvtC6XG4gICAgICogQHBhcmFtIHtBcnJheX0gY29sdW1uc1xuICAgICAqL1xuICAgIHNob3dDb2x1bW5zOiBmdW5jdGlvbiAoY29sdW1ucykge1xuXG4gICAgICAgIGlmICggISBBcnJheS5pc0FycmF5KGNvbHVtbnMpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgaXNDaGFuZ2UgPSBmYWxzZTtcbiAgICAgICAgbGV0IHRhYmxlICAgID0gdGhpcztcblxuICAgICAgICB0aGlzLl9jb3VudENvbHVtbnNTaG93ID0gMDtcblxuXG4gICAgICAgIHRoaXMuX2NvbHVtbnMubWFwKGZ1bmN0aW9uIChjb2x1bW4pIHtcbiAgICAgICAgICAgIGxldCBvcHRpb25zID0gY29sdW1uLmdldE9wdGlvbnMoKTtcblxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuaGFzT3duUHJvcGVydHkoJ2ZpZWxkJykgJiZcbiAgICAgICAgICAgICAgICB0eXBlb2Ygb3B0aW9ucy5maWVsZCA9PT0gJ3N0cmluZycgJiZcbiAgICAgICAgICAgICAgICBjb2x1bW5zLmluZGV4T2Yob3B0aW9ucy5maWVsZCkgPj0gMCAmJlxuICAgICAgICAgICAgICAgICEgY29sdW1uLmlzU2hvdygpXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBjb2x1bW4uc2V0U2hvdyh0cnVlKTtcbiAgICAgICAgICAgICAgICBpc0NoYW5nZSA9IHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChjb2x1bW4uaXNTaG93KCkpIHtcbiAgICAgICAgICAgICAgICB0YWJsZS5fY291bnRDb2x1bW5zU2hvdysrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuXG4gICAgICAgIGlmIChpc0NoYW5nZSkge1xuICAgICAgICAgICAgY29yZXVpVGFibGVQcml2YXRlLl90cmlnZ2VyKHRoaXMsICdjb2x1bW5zX2NoYW5nZScpO1xuICAgICAgICAgICAgdGhpcy5yZWZyZXNoKCk7XG4gICAgICAgIH1cbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiDQodC60YDRi9GC0LjQtSDQutC+0LvQvtC90L7QulxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGNvbHVtbnNcbiAgICAgKi9cbiAgICBoaWRlQ29sdW1uczogZnVuY3Rpb24gKGNvbHVtbnMpIHtcblxuICAgICAgICBpZiAoICEgQXJyYXkuaXNBcnJheShjb2x1bW5zKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGlzQ2hhbmdlID0gZmFsc2U7XG4gICAgICAgIGxldCB0YWJsZSAgICA9IHRoaXM7XG5cbiAgICAgICAgdGhpcy5fY291bnRDb2x1bW5zU2hvdyA9IDA7XG5cblxuICAgICAgICB0aGlzLl9jb2x1bW5zLm1hcChmdW5jdGlvbiAoY29sdW1uKSB7XG4gICAgICAgICAgICBsZXQgb3B0aW9ucyA9IGNvbHVtbi5nZXRPcHRpb25zKCk7XG5cbiAgICAgICAgICAgIGlmIChvcHRpb25zLmhhc093blByb3BlcnR5KCdmaWVsZCcpICYmXG4gICAgICAgICAgICAgICAgdHlwZW9mIG9wdGlvbnMuZmllbGQgPT09ICdzdHJpbmcnICYmXG4gICAgICAgICAgICAgICAgY29sdW1ucy5pbmRleE9mKG9wdGlvbnMuZmllbGQpID49IDAgJiZcbiAgICAgICAgICAgICAgICBjb2x1bW4uaXNTaG93KClcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIGNvbHVtbi5zZXRTaG93KGZhbHNlKTtcbiAgICAgICAgICAgICAgICBpc0NoYW5nZSA9IHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChjb2x1bW4uaXNTaG93KCkpIHtcbiAgICAgICAgICAgICAgICB0YWJsZS5fY291bnRDb2x1bW5zU2hvdysrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoaXNDaGFuZ2UpIHtcbiAgICAgICAgICAgIGNvcmV1aVRhYmxlUHJpdmF0ZS5fdHJpZ2dlcih0aGlzLCAnY29sdW1uc19jaGFuZ2UnKTtcbiAgICAgICAgICAgIHRoaXMucmVmcmVzaCgpO1xuICAgICAgICB9XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC/0L7QuNGB0LrQvtCy0YvRhSDQtNCw0L3QvdGL0YVcbiAgICAgKiBAcHJvcGVydHkge2Jvb2xlYW59IGV4dE9wdGlvbnNcbiAgICAgKiBAcmV0dXJuIHsqW119XG4gICAgICovXG4gICAgZ2V0U2VhcmNoRGF0YTogZnVuY3Rpb24gKGV4dE9wdGlvbnMpIHtcblxuICAgICAgICBsZXQgc2VhcmNoRGF0YSA9IFtdO1xuXG4gICAgICAgIHRoaXMuX3NlYXJjaC5tYXAoZnVuY3Rpb24gKGNvbnRyb2wpIHtcbiAgICAgICAgICAgIGxldCBmaWVsZCA9IGNvbnRyb2wuZ2V0RmllbGQoKTtcblxuICAgICAgICAgICAgaWYgKGZpZWxkKSB7XG4gICAgICAgICAgICAgICAgbGV0IHZhbHVlID0gY29udHJvbC5nZXRWYWx1ZSgpO1xuXG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBzZWFyY2ggPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmaWVsZDogZmllbGQsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAoZXh0T3B0aW9ucykge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VhcmNoLmZpbHRlciA9IHR5cGVvZiBjb250cm9sLmZpbHRlciA9PT0gJ2Z1bmN0aW9uJyA/IGNvbnRyb2wuZmlsdGVyIDogbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlYXJjaC50eXBlICAgPSBjb250cm9sLl9vcHRpb25zLnR5cGU7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBzZWFyY2hEYXRhLnB1c2goc2VhcmNoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBzZWFyY2hEYXRhO1xuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSDQtNCw0L3QvdGL0YUg0LjQtyDRhNC40LvRjNGC0YDQvtCyXG4gICAgICogQHByb3BlcnR5IHtib29sZWFufSBleHRPcHRpb25zXG4gICAgICogQHJldHVybiB7KltdfVxuICAgICAqL1xuICAgIGdldEZpbHRlckRhdGE6IGZ1bmN0aW9uIChleHRPcHRpb25zKSB7XG5cbiAgICAgICAgbGV0IGZpbHRlckRhdGEgPSBbXTtcblxuICAgICAgICB0aGlzLl9maWx0ZXJzLm1hcChmdW5jdGlvbiAoY29udHJvbCkge1xuICAgICAgICAgICAgbGV0IGZpZWxkID0gY29udHJvbC5nZXRGaWVsZCgpO1xuXG4gICAgICAgICAgICBpZiAoZmllbGQpIHtcbiAgICAgICAgICAgICAgICBsZXQgdmFsdWUgPSBjb250cm9sLmdldFZhbHVlKCk7XG5cbiAgICAgICAgICAgICAgICBpZiAodmFsdWUgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGZpbHRlciA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkOiBmaWVsZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmIChleHRPcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmaWx0ZXIuZmlsdGVyID0gdHlwZW9mIGNvbnRyb2wuZmlsdGVyID09PSAnZnVuY3Rpb24nID8gY29udHJvbC5maWx0ZXIgOiBudWxsO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyRGF0YS5wdXNoKGZpbHRlcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gZmlsdGVyRGF0YTtcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiDQn9C+0LjRgdC6INC/0L4g0YLQsNCx0LvQuNGG0LUg0YEg0LjRgdC/0L7Qu9GM0LfQvtCy0LDQvdC40LXQvCDQtNCw0L3QvdGL0YUg0LjQtyDQv9C+0LjRgdC60LAg0Lgg0YTQuNC70YzRgtGA0L7QslxuICAgICAqL1xuICAgIHNlYXJjaFJlY29yZHM6IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICBsZXQgc2VhcmNoRGF0YSA9IHRoaXMuZ2V0U2VhcmNoRGF0YSgpO1xuICAgICAgICBsZXQgZmlsdGVyRGF0YSA9IHRoaXMuZ2V0RmlsdGVyRGF0YSgpO1xuXG4gICAgICAgIGlmICh0aGlzLl9pc1JlY29yZHNSZXF1ZXN0KSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHRoaXMuX29wdGlvbnMucmVjb3Jkc1JlcXVlc3QgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmxvYWRCeUZ1bmN0aW9uKHRoaXMuX29wdGlvbnMucmVjb3Jkc1JlcXVlc3QpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmxvYWQodGhpcy5fb3B0aW9ucy5yZWNvcmRzUmVxdWVzdC51cmwsIHRoaXMuX29wdGlvbnMucmVjb3Jkc1JlcXVlc3QubWV0aG9kKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvcmV1aVRhYmxlUHJpdmF0ZS5zZWFyY2hMb2NhbFJlY29yZHModGhpcyk7XG4gICAgICAgICAgICB0aGlzLnJlZnJlc2goKTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgY29yZXVpVGFibGVQcml2YXRlLl90cmlnZ2VyKHRoaXMsICdmaWx0ZXJzX2NoYW5nZScsIFsgZmlsdGVyRGF0YSBdKTtcbiAgICAgICAgY29yZXVpVGFibGVQcml2YXRlLl90cmlnZ2VyKHRoaXMsICdzZWFyY2hfY2hhbmdlJywgWyBzZWFyY2hEYXRhIF0pO1xuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqINCe0YfQuNGB0YLQutCwINC/0L7QuNGB0LrQvtCy0YvRhSDQtNCw0L3QvdGL0YVcbiAgICAgKi9cbiAgICBjbGVhclNlYXJjaDogZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICQuZWFjaCh0aGlzLl9zZWFyY2gsIGZ1bmN0aW9uIChrZXksIHNlYXJjaCkge1xuICAgICAgICAgICAgc2VhcmNoLnNldFZhbHVlKG51bGwpO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLnNlYXJjaFJlY29yZHMoKTtcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiDQntGH0LjRgdGC0LrQsCDQv9C+0LjRgdC60L7QstGL0YUg0LTQsNC90L3Ri9GFINCyINGE0LjQu9GM0YLRgNCw0YVcbiAgICAgKi9cbiAgICBjbGVhckZpbHRlcnM6IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAkLmVhY2godGhpcy5fZmlsdGVycywgZnVuY3Rpb24gKGtleSwgZmlsdGVyKSB7XG4gICAgICAgICAgICBmaWx0ZXIuc2V0VmFsdWUobnVsbCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuc2VhcmNoUmVjb3JkcygpO1xuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSDQt9Cw0L/QuNGB0Lgg0L/QviDQuNC90LTQtdC60YHRg1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfG51bWJlcn0gaW5kZXhcbiAgICAgKiBAcmV0dXJuIHtvYmplY3R8bnVsbH1cbiAgICAgKi9cbiAgICBnZXRSZWNvcmRCeUluZGV4OiBmdW5jdGlvbiAoaW5kZXgpIHtcblxuICAgICAgICBpZiAoWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2YgaW5kZXgpIDwgMCB8fCBpbmRleCA9PT0gJycpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgaW5kZXggPSBOdW1iZXIoaW5kZXgpO1xuXG4gICAgICAgIGlmIChpbmRleCA8PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCByZWNvcmQgPSBudWxsO1xuXG4gICAgICAgICQuZWFjaCh0aGlzLl9yZWNvcmRzLCBmdW5jdGlvbiAoa2V5LCByZWNvcmRJdGVtKSB7XG4gICAgICAgICAgICBpZiAocmVjb3JkSXRlbS5pbmRleCA9PT0gaW5kZXgpIHtcbiAgICAgICAgICAgICAgICByZWNvcmQgPSB7XG4gICAgICAgICAgICAgICAgICAgIGluZGV4OiByZWNvcmRJdGVtLmluZGV4LFxuICAgICAgICAgICAgICAgICAgICBkYXRhOiAkLmV4dGVuZCh0cnVlLCB7fSwgcmVjb3JkSXRlbS5kYXRhKSxcbiAgICAgICAgICAgICAgICAgICAgbWV0YTogcmVjb3JkSXRlbS5tZXRhID8gJC5leHRlbmQodHJ1ZSwge30sIHJlY29yZEl0ZW0ubWV0YSkgOiBudWxsLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gcmVjb3JkO1xuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSDQt9Cw0L/QuNGB0Lgg0L/QviBpZFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZFxuICAgICAqIEByZXR1cm4ge29iamVjdHxudWxsfVxuICAgICAqL1xuICAgIGdldFJlY29yZEJ5SWQ6IGZ1bmN0aW9uIChpZCkge1xuXG4gICAgICAgIHJldHVybiB0aGlzLmdldFJlY29yZEJ5RmllbGQodGhpcy5fb3B0aW9ucy5wcmltYXJ5S2V5LCBpZCk7XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC30LDQv9C40YHQuCDQv9C+INC/0L7Qu9GOXG4gICAgICogQHBhcmFtIHtzdHJpbmd9ICAgICAgICBmaWVsZFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfG51bWJlcn0gdmFsdWVcbiAgICAgKiBAcmV0dXJuIHtvYmplY3R8bnVsbH1cbiAgICAgKi9cbiAgICBnZXRSZWNvcmRCeUZpZWxkOiBmdW5jdGlvbiAoZmllbGQsIHZhbHVlKSB7XG5cbiAgICAgICAgaWYgKFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIGZpZWxkKSA8IDAgfHwgZmllbGQgPT09ICcnKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCByZWNvcmQgPSBudWxsO1xuXG4gICAgICAgICQuZWFjaCh0aGlzLl9yZWNvcmRzLCBmdW5jdGlvbiAoa2V5LCByZWNvcmRJdGVtKSB7XG4gICAgICAgICAgICBpZiAocmVjb3JkSXRlbS5kYXRhLmhhc093blByb3BlcnR5KGZpZWxkKSAmJiByZWNvcmRJdGVtLmRhdGFbZmllbGRdID09PSB2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHJlY29yZCA9ICQuZXh0ZW5kKHRydWUsIHt9LCByZWNvcmRJdGVtKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHJlY29yZDtcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0LrQvtC90YLRgNC+0LvQsCDQv9C+INC10LPQviBpZFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZFxuICAgICAqIEByZXR1cm4ge29iamVjdH1cbiAgICAgKi9cbiAgICBnZXRDb250cm9sQnlJZDogZnVuY3Rpb24gKGlkKSB7XG5cbiAgICAgICAgbGV0IHJlc3VsdCA9IG51bGw7XG5cbiAgICAgICAgJC5lYWNoKHRoaXMuX2NvbnRyb2xzLCBmdW5jdGlvbiAoa2V5LCBjb250cm9sKSB7XG4gICAgICAgICAgICBpZiAoY29udHJvbC5oYXNPd25Qcm9wZXJ0eSgnZ2V0SWQnKSAmJlxuICAgICAgICAgICAgICAgIHR5cGVvZiBjb250cm9sLmdldElkID09PSAnZnVuY3Rpb24nICYmXG4gICAgICAgICAgICAgICAgY29udHJvbC5nZXRJZCgpID09PSBpZFxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gY29udHJvbDtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC60L7QvdGC0YDQvtC70LAg0L/QvtC40YHQutCwINC/0L4g0LXQs9C+IGlkXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGlkXG4gICAgICogQHJldHVybiB7b2JqZWN0fVxuICAgICAqL1xuICAgIGdldFNlYXJjaENvbnRyb2xCeUlkOiBmdW5jdGlvbiAoaWQpIHtcblxuICAgICAgICBsZXQgcmVzdWx0ID0gbnVsbDtcblxuICAgICAgICAkLmVhY2godGhpcy5fc2VhcmNoLCBmdW5jdGlvbiAoa2V5LCBzZWFyY2gpIHtcbiAgICAgICAgICAgIGlmIChzZWFyY2guaGFzT3duUHJvcGVydHkoJ2dldElkJykgJiZcbiAgICAgICAgICAgICAgICB0eXBlb2Ygc2VhcmNoLmdldElkID09PSAnZnVuY3Rpb24nICYmXG4gICAgICAgICAgICAgICAgc2VhcmNoLmdldElkKCkgPT09IGlkXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBzZWFyY2g7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqINCh0L7RgNGC0LjRgNC+0LLQutCwINC/0L4g0L/QvtC70Y/QvFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHNvcnRpbmdcbiAgICAgKi9cbiAgICBzb3J0RmllbGRzOiBmdW5jdGlvbiAoc29ydGluZykge1xuXG4gICAgICAgIGlmICggISBBcnJheS5pc0FycmF5KHNvcnRpbmcpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgdGhhdCAgICAgICAgICAgICAgPSB0aGlzO1xuICAgICAgICBsZXQgY29sdW1uc0NvbnZlcnRlcnMgPSB7fTtcblxuICAgICAgICB0aGlzLl9zb3J0ID0gW107XG5cbiAgICAgICAgJC5lYWNoKHNvcnRpbmcsIGZ1bmN0aW9uIChrZXksIHNvcnQpIHtcbiAgICAgICAgICAgIGlmICggISBjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KHNvcnQpIHx8XG4gICAgICAgICAgICAgICAgICEgc29ydC5oYXNPd25Qcm9wZXJ0eSgnZmllbGQnKSB8fFxuICAgICAgICAgICAgICAgICAhIHNvcnQuaGFzT3duUHJvcGVydHkoJ29yZGVyJykgfHxcbiAgICAgICAgICAgICAgICB0eXBlb2Ygc29ydC5maWVsZCAhPT0gJ3N0cmluZycgfHxcbiAgICAgICAgICAgICAgICB0eXBlb2Ygc29ydC5vcmRlciAhPT0gJ3N0cmluZycgfHxcbiAgICAgICAgICAgICAgICAgISBzb3J0LmZpZWxkIHx8XG4gICAgICAgICAgICAgICAgICEgc29ydC5vcmRlclxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgIGxldCBjb2x1bW5Tb3J0YWJsZSA9IGZhbHNlO1xuXG4gICAgICAgICAgICAkLmVhY2godGhhdC5fY29sdW1ucywgZnVuY3Rpb24gKGtleSwgY29sdW1uKSB7XG4gICAgICAgICAgICAgICAgbGV0IG9wdGlvbnMgPSBjb2x1bW4uZ2V0T3B0aW9ucygpO1xuXG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuaGFzT3duUHJvcGVydHkoJ2ZpZWxkJykgJiZcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnc29ydGFibGUnKSAmJlxuICAgICAgICAgICAgICAgICAgICB0eXBlb2Ygb3B0aW9ucy5maWVsZCA9PT0gJ3N0cmluZycgJiZcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5maWVsZCA9PT0gc29ydC5maWVsZCAmJlxuICAgICAgICAgICAgICAgICAgICBvcHRpb25zLnNvcnRhYmxlXG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbHVtblNvcnRhYmxlID0gdHJ1ZTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoY29sdW1uLmhhc093blByb3BlcnR5KCdjb252ZXJ0VG9TdHJpbmcnKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGNvbHVtbi5jb252ZXJ0VG9TdHJpbmcgPT09ICdmdW5jdGlvbidcbiAgICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2x1bW5zQ29udmVydGVyc1tvcHRpb25zLmZpZWxkXSA9IGNvbHVtbi5jb252ZXJ0VG9TdHJpbmc7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cblxuICAgICAgICAgICAgaWYgKGNvbHVtblNvcnRhYmxlKSB7XG4gICAgICAgICAgICAgICAgdGhhdC5fc29ydC5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgZmllbGQ6IHNvcnQuZmllbGQsXG4gICAgICAgICAgICAgICAgICAgIG9yZGVyOiBzb3J0Lm9yZGVyLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuXG4gICAgICAgIGlmICh0aGlzLl9zb3J0Lmxlbmd0aCA+PSAwKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5faXNSZWNvcmRzUmVxdWVzdCkge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdGhpcy5fb3B0aW9ucy5yZWNvcmRzUmVxdWVzdCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmxvYWRCeUZ1bmN0aW9uKHRoaXMuX29wdGlvbnMucmVjb3Jkc1JlcXVlc3QpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubG9hZCh0aGlzLl9vcHRpb25zLnJlY29yZHNSZXF1ZXN0LnVybCwgdGhpcy5fb3B0aW9ucy5yZWNvcmRzUmVxdWVzdC5tZXRob2QpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb3JldWlUYWJsZVByaXZhdGUuc2V0Q29sdW1uc1NvcnQodGhpcywgdGhpcy5fc29ydCk7XG5cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fcmVjb3JkcyA9IGNvcmV1aVRhYmxlUHJpdmF0ZS5zb3J0UmVjb3Jkc0J5RmllbGRzKHRoaXMuX3JlY29yZHMsIHRoaXMuX3NvcnQsIGNvbHVtbnNDb252ZXJ0ZXJzKTtcbiAgICAgICAgICAgICAgICB0aGlzLnJlZnJlc2goKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvcmV1aVRhYmxlUHJpdmF0ZS5fdHJpZ2dlcih0aGlzLCAncmVjb3Jkc19zb3J0JywgWyB0aGlzIF0pO1xuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqINCh0L7RgNGC0LjRgNC+0LLQutCwINC/0L4g0YPQvNC+0LvRh9Cw0L3QuNGOXG4gICAgICovXG4gICAgc29ydERlZmF1bHQ6IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICB0aGlzLl9zb3J0ID0gW107XG5cbiAgICAgICAgaWYgKHRoaXMuX2lzUmVjb3Jkc1JlcXVlc3QpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdGhpcy5fb3B0aW9ucy5yZWNvcmRzUmVxdWVzdCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIHRoaXMubG9hZEJ5RnVuY3Rpb24odGhpcy5fb3B0aW9ucy5yZWNvcmRzUmVxdWVzdCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMubG9hZCh0aGlzLl9vcHRpb25zLnJlY29yZHNSZXF1ZXN0LnVybCwgdGhpcy5fb3B0aW9ucy5yZWNvcmRzUmVxdWVzdC5tZXRob2QpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29yZXVpVGFibGVQcml2YXRlLnNldENvbHVtbnNTb3J0KHRoaXMpO1xuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9yZWNvcmRzID0gY29yZXVpVGFibGVQcml2YXRlLnNvcnRSZWNvcmRzQnlTZXEodGhpcy5fcmVjb3Jkcyk7XG4gICAgICAgICAgICB0aGlzLnJlZnJlc2goKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvcmV1aVRhYmxlUHJpdmF0ZS5fdHJpZ2dlcih0aGlzLCAncmVjb3Jkc19zb3J0JywgWyB0aGlzIF0pO1xuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqINCj0LTQsNC70LXQvdC40LUg0YHRgtGA0L7QutC4INC40Lcg0YLQsNCx0LvQuNGG0Ysg0L/QviDQuNC90LTQtdC60YHRg1xuICAgICAqIEBwYXJhbSBpbmRleFxuICAgICAqL1xuICAgIHJlbW92ZVJlY29yZEJ5SW5kZXg6IGZ1bmN0aW9uIChpbmRleCkge1xuXG4gICAgICAgIGxldCByZWNvcmRLZXkgPSBudWxsO1xuXG4gICAgICAgICQuZWFjaCh0aGlzLl9yZWNvcmRzLCBmdW5jdGlvbiAoa2V5LCByZWNvcmRJdGVtKSB7XG4gICAgICAgICAgICBpZiAocmVjb3JkSXRlbS5pbmRleCA9PT0gaW5kZXgpIHtcbiAgICAgICAgICAgICAgICByZWNvcmRLZXkgPSBrZXk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAocmVjb3JkS2V5ICE9PSBudWxsICYmIHJlY29yZEtleSA+PSAwKSB7XG4gICAgICAgICAgICB0aGlzLl9yZWNvcmRzLnNwbGljZShyZWNvcmRLZXksIDEpO1xuXG4gICAgICAgICAgICBsZXQgdGhhdCA9IHRoaXM7XG4gICAgICAgICAgICBsZXQgdHIgICA9IGNvcmV1aVRhYmxlRWxlbWVudHMuZ2V0VHJCeUluZGV4KHRoaXMuZ2V0SWQoKSwgaW5kZXgpO1xuXG4gICAgICAgICAgICBpZiAodHIubGVuZ3RoID49IDApIHtcbiAgICAgICAgICAgICAgICB0ci5mYWRlT3V0KCdmYXN0JywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB0ci5yZW1vdmUoKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAodGhhdC5fcmVjb3Jkcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0Ym9keSA9IGNvcmV1aVRhYmxlRWxlbWVudHMuZ2V0VGFibGVUYm9keSh0aGF0LmdldElkKCkpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB0Ym9keS5hcHBlbmQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29yZXVpVGFibGVVdGlscy5yZW5kZXIoY29yZXVpVGFibGVUcGxbJ3RhYmxlL3JlY29yZC9lbXB0eS5odG1sJ10sIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sdW1uc0NvdW50OiB0aGF0Ll9jb3VudENvbHVtbnNTaG93LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYW5nOiB0aGF0LmdldExhbmcoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLl9yZWNvcmRzTnVtYmVyLS07XG4gICAgICAgIH1cbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiDQlNC+0LHQsNCy0LvQtdC90LjQtSDRgdGC0YDQvtC60Lgg0LIg0YLQsNCx0LvQuNGG0YMg0L/QvtGB0LvQtSDRgdGC0YDQvtC60Lgg0YEg0LjQvdC00LXQutGB0L7QvFxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSByZWNvcmREYXRhXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGluZGV4XG4gICAgICovXG4gICAgYWRkUmVjb3JkQWZ0ZXJJbmRleDogZnVuY3Rpb24gKHJlY29yZERhdGEsIGluZGV4KSB7XG5cbiAgICAgICAgbGV0IHRyID0gY29yZXVpVGFibGVFbGVtZW50cy5nZXRUckJ5SW5kZXgodGhpcy5nZXRJZCgpLCBpbmRleCk7XG5cbiAgICAgICAgaWYgKHRyLmxlbmd0aCA+PSAwKSB7XG4gICAgICAgICAgICBsZXQgcmVjb3JkID0gY29yZXVpVGFibGVQcml2YXRlLmFkZFJlY29yZCh0aGlzLCByZWNvcmREYXRhLCBpbmRleCk7XG5cbiAgICAgICAgICAgIGlmIChyZWNvcmQpIHtcbiAgICAgICAgICAgICAgICBjb3JldWlUYWJsZUVsZW1lbnRzLmdldFRyRW1wdHkodGhpcy5nZXRJZCgpKS5yZW1vdmUoKTtcblxuICAgICAgICAgICAgICAgIHRyLmFmdGVyKFxuICAgICAgICAgICAgICAgICAgICBjb3JldWlUYWJsZVJlbmRlci5yZW5kZXJSZWNvcmQodGhpcywgcmVjb3JkKVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgdGhpcy5fcmVjb3Jkc051bWJlcisrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICog0JTQvtCx0LDQstC70LXQvdC40LUg0YHRgtGA0L7QutC4INCyINGC0LDQsdC70LjRhtGDINC/0LXRgNC10LQg0YHRgtGA0L7QutC+0Lkg0YEg0LjQvdC00LXQutGB0L7QvFxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSByZWNvcmREYXRhXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGluZGV4XG4gICAgICovXG4gICAgYWRkUmVjb3JkQmVmb3JlSW5kZXg6IGZ1bmN0aW9uIChyZWNvcmREYXRhLCBpbmRleCkge1xuXG4gICAgICAgIGxldCB0ciA9IGNvcmV1aVRhYmxlRWxlbWVudHMuZ2V0VHJCeUluZGV4KHRoaXMuZ2V0SWQoKSwgaW5kZXgpO1xuXG4gICAgICAgIGlmICh0ci5sZW5ndGggPj0gMCkge1xuICAgICAgICAgICAgbGV0IHJlY29yZCA9IGNvcmV1aVRhYmxlUHJpdmF0ZS5hZGRSZWNvcmRCZWZvcmUodGhpcywgcmVjb3JkRGF0YSwgaW5kZXgpO1xuXG4gICAgICAgICAgICBpZiAocmVjb3JkKSB7XG4gICAgICAgICAgICAgICAgY29yZXVpVGFibGVFbGVtZW50cy5nZXRUckVtcHR5KHRoaXMuZ2V0SWQoKSkucmVtb3ZlKCk7XG5cbiAgICAgICAgICAgICAgICB0ci5iZWZvcmUoXG4gICAgICAgICAgICAgICAgICAgIGNvcmV1aVRhYmxlUmVuZGVyLnJlbmRlclJlY29yZCh0aGlzLCByZWNvcmQpXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9yZWNvcmRzTnVtYmVyKys7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiDQlNC+0LHQsNCy0LvQtdC90LjQtSDRgdGC0YDQvtC60Lgg0LIg0L3QsNGH0LDQu9C+INGC0LDQsdC70LjRhtGLXG4gICAgICogQHBhcmFtIHtvYmplY3R9IHJlY29yZERhdGFcbiAgICAgKi9cbiAgICBhZGRSZWNvcmRGaXJzdDogZnVuY3Rpb24gKHJlY29yZERhdGEpIHtcblxuICAgICAgICBsZXQgdGJvZHkgPSBjb3JldWlUYWJsZUVsZW1lbnRzLmdldFRhYmxlVGJvZHkodGhpcy5nZXRJZCgpKTtcblxuICAgICAgICBpZiAodGJvZHkubGVuZ3RoID49IDApIHtcbiAgICAgICAgICAgIGxldCByZWNvcmQgPSBjb3JldWlUYWJsZVByaXZhdGUuYWRkUmVjb3JkKHRoaXMsIHJlY29yZERhdGEsIDApO1xuXG4gICAgICAgICAgICBpZiAocmVjb3JkKSB7XG4gICAgICAgICAgICAgICAgY29yZXVpVGFibGVFbGVtZW50cy5nZXRUckVtcHR5KHRoaXMuZ2V0SWQoKSkucmVtb3ZlKCk7XG5cbiAgICAgICAgICAgICAgICB0Ym9keS5wcmVwZW5kKFxuICAgICAgICAgICAgICAgICAgICBjb3JldWlUYWJsZVJlbmRlci5yZW5kZXJSZWNvcmQodGhpcywgcmVjb3JkKVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgdGhpcy5fcmVjb3Jkc051bWJlcisrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICog0JTQvtCx0LDQstC70LXQvdC40LUg0YHRgtGA0L7QutC4INCyINC60L7QvdC10YYg0YLQsNCx0LvQuNGG0YtcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gcmVjb3JkRGF0YVxuICAgICAqL1xuICAgIGFkZFJlY29yZExhc3Q6IGZ1bmN0aW9uIChyZWNvcmREYXRhKSB7XG5cbiAgICAgICAgbGV0IHRib2R5ID0gY29yZXVpVGFibGVFbGVtZW50cy5nZXRUYWJsZVRib2R5KHRoaXMuZ2V0SWQoKSk7XG5cbiAgICAgICAgaWYgKHRib2R5Lmxlbmd0aCA+PSAwKSB7XG4gICAgICAgICAgICBsZXQgcmVjb3JkID0gY29yZXVpVGFibGVQcml2YXRlLmFkZFJlY29yZCh0aGlzLCByZWNvcmREYXRhKTtcblxuICAgICAgICAgICAgaWYgKHJlY29yZCkge1xuICAgICAgICAgICAgICAgIGNvcmV1aVRhYmxlRWxlbWVudHMuZ2V0VHJFbXB0eSh0aGlzLmdldElkKCkpLnJlbW92ZSgpO1xuXG4gICAgICAgICAgICAgICAgdGJvZHkuYXBwZW5kKFxuICAgICAgICAgICAgICAgICAgICBjb3JldWlUYWJsZVJlbmRlci5yZW5kZXJSZWNvcmQodGhpcywgcmVjb3JkKVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgdGhpcy5fcmVjb3Jkc051bWJlcisrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICog0J/QvtC60LDQtyDRg9C60LDQt9Cw0L3QvdGL0YUg0LfQsNC/0LjRgdC10Lkg0LIg0YLQsNCx0LvQuNGG0LVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSAgcmVjb3Jkc1xuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB0b3RhbFxuICAgICAqL1xuICAgIHNldFJlY29yZHM6IGZ1bmN0aW9uIChyZWNvcmRzLCB0b3RhbCkge1xuXG4gICAgICAgIGlmICggISBBcnJheS5pc0FycmF5KHJlY29yZHMpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9yZWNvcmRzVG90YWwgPSBjb3JldWlUYWJsZVV0aWxzLmlzTnVtZXJpYyh0b3RhbCkgPyBwYXJzZUludCh0b3RhbCkgOiByZWNvcmRzLmxlbmd0aDtcblxuICAgICAgICBjb3JldWlUYWJsZVByaXZhdGUuc2V0UmVjb3Jkcyh0aGlzLCByZWNvcmRzKTtcblxuICAgICAgICBpZiAocmVjb3Jkcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB0aGlzLl9yZWNvcmRzTnVtYmVyID0gdGhpcy5fcGFnZSA9PT0gMVxuICAgICAgICAgICAgICAgID8gMVxuICAgICAgICAgICAgICAgIDogKCh0aGlzLl9wYWdlIC0gMSkgKiB0aGlzLl9yZWNvcmRzUGVyUGFnZSkgKyAxO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHJlY29yZHNFbGVtZW50cyA9IGNvcmV1aVRhYmxlUmVuZGVyLnJlbmRlclJlY29yZHModGhpcywgdGhpcy5fcmVjb3Jkcyk7XG4gICAgICAgIGxldCB0YWJsZUJvZHkgICAgICAgPSBjb3JldWlUYWJsZUVsZW1lbnRzLmdldFRhYmxlVGJvZHkodGhpcy5nZXRJZCgpKTtcblxuICAgICAgICB0YWJsZUJvZHkuaHRtbCgnJyk7XG5cbiAgICAgICAgJC5lYWNoKHJlY29yZHNFbGVtZW50cywgZnVuY3Rpb24gKGtleSwgcmVjb3JkRWxlbWVudCkge1xuICAgICAgICAgICAgdGFibGVCb2R5LmFwcGVuZChyZWNvcmRFbGVtZW50KTtcbiAgICAgICAgfSk7XG5cblxuICAgICAgICBjb3JldWlUYWJsZVByaXZhdGUuX3RyaWdnZXIodGhpcywgJ3JlY29yZHNfc2hvdycsIFsgdGhpcyBdKTtcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0LrQvtC70LjRh9C10YHRgtCy0LAg0YHRgtGA0L7QulxuICAgICAqIEByZXR1cm4ge251bWJlcn1cbiAgICAgKi9cbiAgICBnZXRSZWNvcmRzQ291bnQ6IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICBsZXQgY291bnQgPSAwO1xuXG4gICAgICAgIGlmICh0aGlzLl9pc1JlY29yZHNSZXF1ZXN0KSB7XG4gICAgICAgICAgICBjb3VudCA9IHRoaXMuX3JlY29yZHNUb3RhbDtcblxuICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICB0aGlzLl9yZWNvcmRzLm1hcChmdW5jdGlvbiAocmVjb3JkKSB7XG4gICAgICAgICAgICAgICAgaWYgKHJlY29yZC5zaG93KSB7XG4gICAgICAgICAgICAgICAgICAgIGNvdW50Kys7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY291bnQ7XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICog0KDQsNGB0LrRgNGL0YLQuNC1IC8g0YHQutGA0YvRgtC40LUg0LTQvtC/0L7Qu9C90LjRgtC10LvRjNC90YvRhSDQtNCw0L3QvdGL0YUg0YHRgtGA0L7QutC4XG4gICAgICogQHBhcmFtIHtudW1iZXJ9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWNvcmRJbmRleFxuICAgICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR8alF1ZXJ5fHN0cmluZ3xBcnJheXxmdW5jdGlvbn0gY29udGVudFxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNSZWJ1aWxkIC0gdHJ1ZSBkZWZhdWx0XG4gICAgICovXG4gICAgZXhwYW5kUmVjb3JkQ29udGVudDogZnVuY3Rpb24gKHJlY29yZEluZGV4LCBjb250ZW50LCBpc1JlYnVpbGQpIHtcblxuICAgICAgICBsZXQgcmVjb3JkRWxlbWVudCAgPSBjb3JldWlUYWJsZUVsZW1lbnRzLmdldFRyQnlJbmRleCh0aGlzLmdldElkKCksIHJlY29yZEluZGV4KTtcbiAgICAgICAgbGV0IHJlY29yZEV4cGFuZGVkID0gY29yZXVpVGFibGVFbGVtZW50cy5nZXRFeHBhbmRSb3cocmVjb3JkRWxlbWVudCk7XG5cbiAgICAgICAgaWYgKHJlY29yZEVsZW1lbnQuaGFzQ2xhc3MoJ3JlY29yZC1leHBhbmRlZCcpKSB7XG5cbiAgICAgICAgICAgIGlmIChyZWNvcmRFeHBhbmRlZCkge1xuICAgICAgICAgICAgICAgIGlmIChpc1JlYnVpbGQgPT09IHVuZGVmaW5lZCB8fCBpc1JlYnVpbGQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29yZXVpVGFibGVFbGVtZW50cy5yZW1vdmVFeHBhbmRSb3cocmVjb3JkRXhwYW5kZWQpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvcmV1aVRhYmxlRWxlbWVudHMuaGlkZUV4cGFuZFJvdyhyZWNvcmRFeHBhbmRlZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZWNvcmRFbGVtZW50LnJlbW92ZUNsYXNzKCdyZWNvcmQtZXhwYW5kZWQnKTtcbiAgICAgICAgICAgIGNvcmV1aVRhYmxlUHJpdmF0ZS5fdHJpZ2dlcih0aGlzLCAncmVjb3JkX2V4cGFuZF9oaWRlJywgW3JlY29yZEluZGV4XSk7XG5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChyZWNvcmRFeHBhbmRlZCkge1xuICAgICAgICAgICAgICAgIGNvcmV1aVRhYmxlRWxlbWVudHMuc2hvd0V4cGFuZFJvdyhyZWNvcmRFeHBhbmRlZCk7XG4gICAgICAgICAgICAgICAgcmVjb3JkRWxlbWVudC5hZGRDbGFzcygncmVjb3JkLWV4cGFuZGVkJyk7XG4gICAgICAgICAgICAgICAgY29yZXVpVGFibGVQcml2YXRlLl90cmlnZ2VyKHRoaXMsICdyZWNvcmRfZXhwYW5kX3Nob3cnLCBbcmVjb3JkSW5kZXhdKTtcblxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBsZXQgcmVjb3JkSW5kZXggPSByZWNvcmRFbGVtZW50LmRhdGEoJ3JlY29yZC1pbmRleCcpO1xuXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjb250ZW50ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBjYWxsYmFja1Jlc3VsdCA9IGNvbnRlbnQoKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoY2FsbGJhY2tSZXN1bHQgaW5zdGFuY2VvZiBQcm9taXNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdGhhdCA9IHRoaXM7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrUmVzdWx0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3JldWlUYWJsZUVsZW1lbnRzLmFkZEV4cGFuZFJvdyh0aGF0LCByZWNvcmRFbGVtZW50LCByZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3JldWlUYWJsZVByaXZhdGUuX3RyaWdnZXIodGhhdCwgJ3JlY29yZF9leHBhbmRfc2hvdycsIFtyZWNvcmRJbmRleF0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3JldWlUYWJsZUVsZW1lbnRzLmFkZEV4cGFuZFJvdyh0aGF0LCByZWNvcmRFbGVtZW50LCAnJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvcmV1aVRhYmxlUHJpdmF0ZS5fdHJpZ2dlcih0aGF0LCAncmVjb3JkX2V4cGFuZF9zaG93JywgW3JlY29yZEluZGV4XSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNle1xuICAgICAgICAgICAgICAgICAgICAgICAgY29yZXVpVGFibGVFbGVtZW50cy5hZGRFeHBhbmRSb3codGhpcywgcmVjb3JkRWxlbWVudCwgY2FsbGJhY2tSZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29yZXVpVGFibGVQcml2YXRlLl90cmlnZ2VyKHRoaXMsICdyZWNvcmRfZXhwYW5kX3Nob3cnLCBbcmVjb3JkSW5kZXhdKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY29yZXVpVGFibGVFbGVtZW50cy5hZGRFeHBhbmRSb3codGhpcywgcmVjb3JkRWxlbWVudCwgY29udGVudCk7XG4gICAgICAgICAgICAgICAgICAgIGNvcmV1aVRhYmxlUHJpdmF0ZS5fdHJpZ2dlcih0aGlzLCAncmVjb3JkX2V4cGFuZF9zaG93JywgW3JlY29yZEluZGV4XSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICog0KDQsNGB0LrRgNGL0YLQuNC1IC8g0YHQutGA0YvRgtC40LUg0LTQvtC/0L7Qu9C90LjRgtC10LvRjNC90YvRhSDQtNCw0L3QvdGL0YUg0YHRgtGA0L7QutC4XG4gICAgICogQHBhcmFtIHtudW1iZXJ9ICByZWNvcmRJbmRleFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSAgdXJsXG4gICAgICogQHBhcmFtIHtib29sZWFufSBpc1JlYnVpbGRcbiAgICAgKi9cbiAgICBleHBhbmRSZWNvcmRVcmw6IGZ1bmN0aW9uIChyZWNvcmRJbmRleCwgdXJsLCBpc1JlYnVpbGQpIHtcblxuICAgICAgICBsZXQgdGhhdCA9IHRoaXM7XG5cbiAgICAgICAgdGhpcy5leHBhbmRSZWNvcmRDb250ZW50KHJlY29yZEluZGV4LCBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgIHRoYXQubG9jaygpO1xuXG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuXG4gICAgICAgICAgICAgICAgJC5hamF4KHtcbiAgICAgICAgICAgICAgICAgICAgbWV0aG9kIDogJ2dldCcsXG4gICAgICAgICAgICAgICAgICAgIHVybCAgICA6IHVybCxcbiAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24gKHJlc3BvbnNlLCB0ZXh0U3RhdHVzLCB4aHIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCByZXN1bHQgPSByZXNwb25zZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiByZXNwb25zZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoU3RyaW5nKHhoci5nZXRSZXNwb25zZUhlYWRlcignQ29udGVudC1UeXBlJykpLmluZGV4T2YoJ2FwcGxpY2F0aW9uL2pzb24nKSA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gSlNPTi5wYXJzZShyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24oeGhyLCB0ZXh0U3RhdHVzLCBlcnJvclRocm93bikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KHhociwgdGV4dFN0YXR1cywgZXJyb3JUaHJvd24pO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZTogZnVuY3Rpb24oeGhyLCB0ZXh0U3RhdHVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGF0LnVubG9jaygpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgfSwgaXNSZWJ1aWxkKTtcbiAgICB9XG59XG5cblxuZXhwb3J0IGRlZmF1bHQgY29yZXVpVGFibGVJbnN0YW5jZTsiLCJcclxuaW1wb3J0IGNvcmV1aVRhYmxlSW5zdGFuY2UgZnJvbSAnLi9jb3JldWkudGFibGUuaW5zdGFuY2UnO1xyXG5pbXBvcnQgY29yZXVpVGFibGVVdGlscyAgICBmcm9tIFwiLi9jb3JldWkudGFibGUudXRpbHNcIjtcclxuXHJcbmxldCBjb3JldWlUYWJsZSA9IHtcclxuXHJcbiAgICBjb2x1bW5zOiB7fSxcclxuICAgIGNvbnRyb2xzOiB7fSxcclxuICAgIGZpbHRlcnM6IHt9LFxyXG4gICAgc2VhcmNoOiB7fSxcclxuICAgIGxhbmc6IHt9LFxyXG5cclxuICAgIF9pbnN0YW5jZXM6IHt9LFxyXG4gICAgX3NldHRpbmdzOiB7XHJcbiAgICAgICAgbGFuZzogJ2VuJyxcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gb3B0aW9uc1xyXG4gICAgICogQHJldHVybnMge29iamVjdH1cclxuICAgICAqL1xyXG4gICAgY3JlYXRlOiBmdW5jdGlvbiAob3B0aW9ucykge1xyXG5cclxuICAgICAgICBpZiAoICEgb3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnbGFuZycpIHx8IHR5cGVvZiBvcHRpb25zLmxhbmcgIT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgIG9wdGlvbnMubGFuZyA9IHRoaXMuZ2V0U2V0dGluZygnbGFuZycpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IGxhbmdJdGVtcyAgICAgPSB0aGlzLmxhbmcuaGFzT3duUHJvcGVydHkob3B0aW9ucy5sYW5nKSA/IHRoaXMubGFuZ1tvcHRpb25zLmxhbmddIDoge307XHJcbiAgICAgICAgb3B0aW9ucy5sYW5nSXRlbXMgPSBvcHRpb25zLmhhc093blByb3BlcnR5KCdsYW5nSXRlbXMnKSAmJiBjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KG9wdGlvbnMubGFuZ0l0ZW1zKVxyXG4gICAgICAgICAgICA/ICQuZXh0ZW5kKHRydWUsIHt9LCBsYW5nSXRlbXMsIG9wdGlvbnMubGFuZ0l0ZW1zKVxyXG4gICAgICAgICAgICA6IGxhbmdJdGVtcztcclxuXHJcblxyXG4gICAgICAgIGxldCBpbnN0YW5jZSA9ICQuZXh0ZW5kKHRydWUsIHt9LCBjb3JldWlUYWJsZUluc3RhbmNlKTtcclxuICAgICAgICBpbnN0YW5jZS5faW5pdCh0aGlzLCBvcHRpb25zIGluc3RhbmNlb2YgT2JqZWN0ID8gb3B0aW9ucyA6IHt9KTtcclxuXHJcbiAgICAgICAgbGV0IHRhYmxlSWQgPSBpbnN0YW5jZS5nZXRJZCgpO1xyXG4gICAgICAgIHRoaXMuX2luc3RhbmNlc1t0YWJsZUlkXSA9IGluc3RhbmNlO1xyXG5cclxuICAgICAgICByZXR1cm4gaW5zdGFuY2U7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZFxyXG4gICAgICogQHJldHVybnMge29iamVjdHxudWxsfVxyXG4gICAgICovXHJcbiAgICBnZXQ6IGZ1bmN0aW9uIChpZCkge1xyXG5cclxuICAgICAgICBpZiAoICEgdGhpcy5faW5zdGFuY2VzLmhhc093blByb3BlcnR5KGlkKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICggISAkKCcjY29yZXVpLXRhYmxlLScgKyBpZClbMF0pIHtcclxuICAgICAgICAgICAgZGVsZXRlIHRoaXMuX2luc3RhbmNlc1tpZF07XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2luc3RhbmNlc1tpZF07XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCj0YHRgtCw0L3QvtCy0LrQsCDQvdCw0YHRgtGA0L7QtdC6XHJcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gc2V0dGluZ3NcclxuICAgICAqL1xyXG4gICAgc2V0U2V0dGluZ3M6IGZ1bmN0aW9uKHNldHRpbmdzKSB7XHJcblxyXG4gICAgICAgIHRoaXMuX3NldHRpbmdzID0gJC5leHRlbmQodHJ1ZSwge30sIHRoaXMuX3NldHRpbmdzLCBzZXR0aW5ncyk7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSDQt9C90LDRh9C10L3QuNGPINC90LDRgdGC0YDQvtC50LrQuFxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcclxuICAgICAqL1xyXG4gICAgZ2V0U2V0dGluZzogZnVuY3Rpb24obmFtZSkge1xyXG5cclxuICAgICAgICBsZXQgdmFsdWUgPSBudWxsO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5fc2V0dGluZ3MuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcclxuICAgICAgICAgICAgdmFsdWUgPSB0aGlzLl9zZXR0aW5nc1tuYW1lXTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY29yZXVpVGFibGU7IiwiXHJcbmxldCBsYW5nRW4gPSB7XHJcbiAgICBcImVtcHR5UmVjb3Jkc1wiOiBcIk5vIHJlY29yZHNcIixcclxuICAgIFwibG9hZGluZ1wiOiBcIkxvYWRpbmcuLi5cIixcclxuICAgIFwidG90YWxcIjogXCJUb3RhbFwiLFxyXG4gICAgXCJhbGxcIjogXCJBbGxcIixcclxuICAgIFwiY29tcGxldGVcIjogXCJDb21wbGV0ZVwiLFxyXG4gICAgXCJzZWFyY2hcIjogXCJTZWFyY2hcIixcclxuICAgIFwic2VhcmNoQWN0aW9uXCI6IFwiU2VhcmNoXCIsXHJcbiAgICBcImNsZWFyXCI6IFwiQ2xlYXJcIixcclxuICAgIFwibW9udGhOYW1lc1wiOiBbJ0phbnVhcnknLCdGZWJydWFyeScsJ01hcmNoJywnQXByaWwnLCdNYXknLCdKdW5lJywnSnVseScsJ0F1Z3VzdCcsJ1NlcHRlbWJlcicsJ09jdG9iZXInLCdOb3ZlbWJlcicsJ0RlY2VtYmVyJ10sXHJcbiAgICBcIm1vbnRoTmFtZXNTaG9ydFwiOiBbJ0phbicsJ0ZlYicsJ01hcicsJ0FwcicsJ01heScsJ0p1bicsJ0p1bCcsJ0F1ZycsJ1NlcCcsJ09jdCcsJ05vdicsJ0RlYyddLFxyXG4gICAgXCJkYXlOYW1lc1wiOiBbJ1N1bmRheScsJ01vbmRheScsJ1R1ZXNkYXknLCdXZWRuZXNkYXknLCdUaHVyc2RheScsJ0ZyaWRheScsJ1NhdHVyZGF5J10sXHJcbiAgICBcImRheU5hbWVzTWluXCI6IFsnU3VuJywnTW9uJywnVHVlJywnV2VkJywnVGh1JywnRnJpJywnU2F0J10sXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGxhbmdFbjsiLCJcclxubGV0IGxhbmdSdSA9IHtcclxuICAgIFwiZW1wdHlSZWNvcmRzXCI6IFwi0J3QtdGCINC30LDQv9C40YHQtdC5XCIsXHJcbiAgICBcImxvYWRpbmdcIjogXCLQl9Cw0LPRgNGD0LfQutCwLi4uXCIsXHJcbiAgICBcInRvdGFsXCI6IFwi0JLRgdC10LPQvlwiLFxyXG4gICAgXCJhbGxcIjogXCLQktGB0LVcIixcclxuICAgIFwiY29tcGxldGVcIjogXCLQn9GA0LjQvNC10L3QuNGC0YxcIixcclxuICAgIFwic2VhcmNoXCI6IFwi0J/QvtC40YHQulwiLFxyXG4gICAgXCJzZWFyY2hBY3Rpb25cIjogXCLQmNGB0LrQsNGC0YxcIixcclxuICAgIFwiY2xlYXJcIjogXCLQntGH0LjRgdGC0LjRgtGMXCIsXHJcbiAgICBcIm1vbnRoTmFtZXNcIjogWyfQr9C90LLQsNGA0YwnLCfQpNC10LLRgNCw0LvRjCcsJ9Cc0LDRgNGCJywn0JDQv9GA0LXQu9GMJywn0JzQsNC5Jywn0JjRjtC90YwnLCfQmNGO0LvRjCcsJ9CQ0LLQs9GD0YHRgicsJ9Ch0LXQvdGC0Y/QsdGA0YwnLCfQntC60YLRj9Cx0YDRjCcsJ9Cd0L7Rj9Cx0YDRjCcsJ9CU0LXQutCw0LHRgNGMJ10sXHJcbiAgICBcIm1vbnRoTmFtZXNTaG9ydFwiOiBbJ9Cv0L3QsicsJ9Ck0LXQsicsJ9Cc0LDRgCcsJ9CQ0L/RgCcsJ9Cc0LDQuScsJ9CY0Y7QvScsJ9CY0Y7QuycsJ9CQ0LLQsycsJ9Ch0LXQvScsJ9Ce0LrRgicsJ9Cd0L7RjycsJ9CU0LXQuiddLFxyXG4gICAgXCJkYXlOYW1lc1wiOiBbJ9Cy0L7RgdC60YDQtdGB0LXQvdGM0LUnLCfQv9C+0L3QtdC00LXQu9GM0L3QuNC6Jywn0LLRgtC+0YDQvdC40LonLCfRgdGA0LXQtNCwJywn0YfQtdGC0LLQtdGA0LMnLCfQv9GP0YLQvdC40YbQsCcsJ9GB0YPQsdCx0L7RgtCwJ10sXHJcbiAgICBcImRheU5hbWVzTWluXCI6IFsn0JLRgScsJ9Cf0L0nLCfQktGCJywn0KHRgCcsJ9Cn0YInLCfQn9GCJywn0KHQsSddXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGxhbmdSdTsiLCJpbXBvcnQgY29yZXVpVGFibGVVdGlscyBmcm9tIFwiLi4vY29yZXVpLnRhYmxlLnV0aWxzXCI7XHJcbmltcG9ydCBjb3JldWlUYWJsZUVsZW1lbnRzIGZyb20gXCIuLi9jb3JldWkudGFibGUuZWxlbWVudHNcIjtcclxuXHJcblxyXG5jbGFzcyBDb250cm9sIHtcclxuXHJcbiAgICBfaWQgICAgICA9IG51bGw7XHJcbiAgICBfdGFibGUgICA9IG51bGw7XHJcbiAgICBfb3B0aW9ucyA9IHtcclxuICAgICAgICB0eXBlOiAnJyxcclxuICAgICAgICBpZDogJydcclxuICAgIH07XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y9cclxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSB0YWJsZVxyXG4gICAgICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnNcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IodGFibGUsIG9wdGlvbnMpIHtcclxuXHJcbiAgICAgICAgdGhpcy5fdGFibGUgICA9IHRhYmxlO1xyXG4gICAgICAgIHRoaXMuX29wdGlvbnMgPSAkLmV4dGVuZCh0cnVlLCB0aGlzLl9vcHRpb25zLCBvcHRpb25zKTtcclxuICAgICAgICB0aGlzLl9pZCAgICAgID0gdGhpcy5fb3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnaWQnKSAmJiB0eXBlb2YgdGhpcy5fb3B0aW9ucy5pZCA9PT0gJ3N0cmluZycgJiYgdGhpcy5fb3B0aW9ucy5pZFxyXG4gICAgICAgICAgICA/IHRoaXMuX29wdGlvbnMuaWRcclxuICAgICAgICAgICAgOiBjb3JldWlUYWJsZVV0aWxzLmhhc2hDb2RlKCk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1IElEINGN0LvQtdC80LXQvdGC0LAg0YPQv9GA0LDQstC70LXQvdC40Y9cclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIGdldElkKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9pZDtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0L/QsNGA0LDQvNC10YLRgNC+0LJcclxuICAgICAqIEByZXR1cm5zIHtvYmplY3R9XHJcbiAgICAgKi9cclxuICAgIGdldE9wdGlvbnMoKSB7XHJcbiAgICAgICAgcmV0dXJuICQuZXh0ZW5kKHRydWUsIHt9LCB0aGlzLl9vcHRpb25zKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQpNC+0YDQvNC40YDQvtCy0LDQvdC40LUg0LrQvtC90YLQtdC90YLQsCDQtNC70Y8g0YDQsNC30LzQtdGJ0LXQvdC40Y8g0L3QsCDRgdGC0YDQsNC90LjRhtC1XHJcbiAgICAgKiBAcmV0dXJucyB7Kn1cclxuICAgICAqL1xyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIHJldHVybiAnJztcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgQ29udHJvbDsiLCJcclxuaW1wb3J0IGNvcmV1aVRhYmxlVHBsICAgZnJvbSAnLi4vY29yZXVpLnRhYmxlLnRlbXBsYXRlcyc7XHJcbmltcG9ydCBjb3JldWlUYWJsZVV0aWxzIGZyb20gJy4uL2NvcmV1aS50YWJsZS51dGlscyc7XHJcbmltcG9ydCBDb250cm9sICAgICAgICAgIGZyb20gXCIuLi9hYnN0cmFjdC9Db250cm9sXCI7XHJcblxyXG5jbGFzcyBDb250cm9sTGluayBleHRlbmRzIENvbnRyb2wge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y9cclxuICAgICAqIEBwYXJhbSB7Y29yZXVpVGFibGVJbnN0YW5jZX0gdGFibGVcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSAgICAgICAgICAgICAgb3B0aW9uc1xyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3Rvcih0YWJsZSwgb3B0aW9ucykge1xyXG5cclxuICAgICAgICBvcHRpb25zID0gJC5leHRlbmQodHJ1ZSwge1xyXG4gICAgICAgICAgICBpZDogbnVsbCxcclxuICAgICAgICAgICAgdHlwZTogJ2xpbmsnLFxyXG4gICAgICAgICAgICB1cmw6IG51bGwsXHJcbiAgICAgICAgICAgIGNvbnRlbnQ6IG51bGwsXHJcbiAgICAgICAgICAgIG9uQ2xpY2s6IG51bGwsXHJcbiAgICAgICAgICAgIGF0dHI6IG51bGxcclxuICAgICAgICB9LCBvcHRpb25zKTtcclxuXHJcbiAgICAgICAgc3VwZXIodGFibGUsIG9wdGlvbnMpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCk0L7RgNC80LjRgNC+0LLQsNC90LjQtSDQutC+0L3RgtC10L3RgtCwINC00LvRjyDRgNCw0LfQvNC10YnQtdC90LjRjyDQvdCwINGB0YLRgNCw0L3QuNGG0LVcclxuICAgICAqIEByZXR1cm5zIHtqUXVlcnl9XHJcbiAgICAgKi9cclxuICAgIHJlbmRlcigpIHtcclxuXHJcbiAgICAgICAgbGV0IHRoYXQgICAgICAgPSB0aGlzO1xyXG4gICAgICAgIGxldCBhdHRyaWJ1dGVzID0gW107XHJcblxyXG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5fb3B0aW9ucy5hdHRyID09PSAnb2JqZWN0Jykge1xyXG4gICAgICAgICAgICAkLmVhY2godGhpcy5fb3B0aW9ucy5hdHRyLCBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIGlmIChbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiB2YWx1ZSkgPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXMucHVzaChuYW1lICsgJz1cIicgKyB2YWx1ZSArICdcIicpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBsaW5rID0gJChjb3JldWlUYWJsZVV0aWxzLnJlbmRlcihjb3JldWlUYWJsZVRwbFsnY29udHJvbHMvbGluay5odG1sJ10sIHtcclxuICAgICAgICAgICAgdXJsOiB0aGlzLl9vcHRpb25zLnVybCxcclxuICAgICAgICAgICAgY29udGVudDogdGhpcy5fb3B0aW9ucy5jb250ZW50LFxyXG4gICAgICAgICAgICBhdHRyOiBhdHRyaWJ1dGVzLmxlbmd0aCA+IDAgPyAoJyAnICsgYXR0cmlidXRlcy5qb2luKCcgJykpIDogJycsXHJcbiAgICAgICAgfSkpO1xyXG5cclxuXHJcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLl9vcHRpb25zLm9uQ2xpY2sgPT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIHRoaXMuX29wdGlvbnMub25DbGljayA9PT0gJ3N0cmluZycpIHtcclxuXHJcbiAgICAgICAgICAgIGxpbmsuY2xpY2soZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHRoYXQuX29wdGlvbnMub25DbGljayA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGF0Ll9vcHRpb25zLm9uQ2xpY2soZXZlbnQsIHRoYXQuX3RhYmxlKTtcclxuXHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiB0aGF0Ll9vcHRpb25zLm9uQ2xpY2sgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGZ1bmMgPSBuZXcgRnVuY3Rpb24oJ2V2ZW50JywgJ3RhYmxlJywgJ2NvbnRyb2wnLCB0aGF0Ll9vcHRpb25zLm9uQ2xpY2spO1xyXG4gICAgICAgICAgICAgICAgICAgIGZ1bmMoZXZlbnQsIHRoYXQuX3RhYmxlLCB0aGF0KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gbGluaztcclxuICAgIH1cclxufVxyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IENvbnRyb2xMaW5rOyIsIlxyXG5pbXBvcnQgY29yZXVpVGFibGVUcGwgICBmcm9tICcuLi9jb3JldWkudGFibGUudGVtcGxhdGVzJztcclxuaW1wb3J0IGNvcmV1aVRhYmxlVXRpbHMgZnJvbSAnLi4vY29yZXVpLnRhYmxlLnV0aWxzJztcclxuaW1wb3J0IENvbnRyb2wgICAgICAgICAgZnJvbSBcIi4uL2Fic3RyYWN0L0NvbnRyb2xcIjtcclxuXHJcbmNsYXNzIENvbnRyb2xCdXR0b24gZXh0ZW5kcyBDb250cm9sIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPXHJcbiAgICAgKiBAcGFyYW0ge2NvcmV1aVRhYmxlSW5zdGFuY2V9IHRhYmxlXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gICAgICAgICAgICAgIG9wdGlvbnNcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IodGFibGUsIG9wdGlvbnMpIHtcclxuXHJcbiAgICAgICAgb3B0aW9ucyA9ICQuZXh0ZW5kKHRydWUsIHtcclxuICAgICAgICAgICAgaWQ6IG51bGwsXHJcbiAgICAgICAgICAgIHR5cGU6ICdidXR0b24nLFxyXG4gICAgICAgICAgICBjb250ZW50OiBudWxsLFxyXG4gICAgICAgICAgICBvbkNsaWNrOiBudWxsLFxyXG4gICAgICAgICAgICBhdHRyOiB7XHJcbiAgICAgICAgICAgICAgICBjbGFzczogJ2J0biBidG4tc2Vjb25kYXJ5J1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSwgb3B0aW9ucyk7XHJcblxyXG4gICAgICAgIHN1cGVyKHRhYmxlLCBvcHRpb25zKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQpNC+0YDQvNC40YDQvtCy0LDQvdC40LUg0LrQvtC90YLQtdC90YLQsCDQtNC70Y8g0YDQsNC30LzQtdGJ0LXQvdC40Y8g0L3QsCDRgdGC0YDQsNC90LjRhtC1XHJcbiAgICAgKiBAcmV0dXJucyB7alF1ZXJ5fVxyXG4gICAgICovXHJcbiAgICByZW5kZXIoKSB7XHJcblxyXG4gICAgICAgIGxldCBhdHRyaWJ1dGVzID0gW107XHJcblxyXG4gICAgICAgIGlmIChjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KHRoaXMuX29wdGlvbnMuYXR0cikpIHtcclxuICAgICAgICAgICAgJC5lYWNoKHRoaXMuX29wdGlvbnMuYXR0ciwgZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2YgdmFsdWUpID49IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzLnB1c2gobmFtZSArICc9XCInICsgdmFsdWUgKyAnXCInKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgYnRuID0gJChjb3JldWlUYWJsZVV0aWxzLnJlbmRlcihjb3JldWlUYWJsZVRwbFsnY29udHJvbHMvYnV0dG9uLmh0bWwnXSwge1xyXG4gICAgICAgICAgICBjb250ZW50OiB0aGlzLl9vcHRpb25zLmNvbnRlbnQsXHJcbiAgICAgICAgICAgIGF0dHI6IGF0dHJpYnV0ZXMubGVuZ3RoID4gMCA/ICgnICcgKyBhdHRyaWJ1dGVzLmpvaW4oJyAnKSkgOiAnJyxcclxuICAgICAgICB9KSk7XHJcblxyXG5cclxuICAgICAgICBpZiAodHlwZW9mIHRoaXMuX29wdGlvbnMub25DbGljayA9PT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2YgdGhpcy5fb3B0aW9ucy5vbkNsaWNrID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICBsZXQgdGhhdCA9IHRoaXM7XHJcblxyXG4gICAgICAgICAgICBidG4uY2xpY2soZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHRoYXQuX29wdGlvbnMub25DbGljayA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoYXQuX29wdGlvbnMub25DbGljayhldmVudCwgdGhhdC5fdGFibGUsIHRoYXQpO1xyXG5cclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHRoYXQuX29wdGlvbnMub25DbGljayA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgZnVuYyA9IG5ldyBGdW5jdGlvbignZXZlbnQnLCAndGFibGUnLCAnY29udHJvbCcsIHRoYXQuX29wdGlvbnMub25DbGljayk7XHJcbiAgICAgICAgICAgICAgICAgICAgZnVuYyhldmVudCwgdGhhdC5fdGFibGUsIHRoYXQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBidG47XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IENvbnRyb2xCdXR0b247IiwiXHJcbmltcG9ydCBjb3JldWlUYWJsZVRwbCAgIGZyb20gJy4uL2NvcmV1aS50YWJsZS50ZW1wbGF0ZXMnO1xyXG5pbXBvcnQgY29yZXVpVGFibGVVdGlscyBmcm9tICcuLi9jb3JldWkudGFibGUudXRpbHMnO1xyXG5pbXBvcnQgQ29yZXVpVGFibGVVdGlscyBmcm9tIFwiLi4vY29yZXVpLnRhYmxlLnV0aWxzXCI7XHJcbmltcG9ydCBDb250cm9sICAgICAgICAgIGZyb20gXCIuLi9hYnN0cmFjdC9Db250cm9sXCI7XHJcblxyXG5jbGFzcyBDb250cm9sRHJvcGRvd24gZXh0ZW5kcyBDb250cm9sIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPXHJcbiAgICAgKiBAcGFyYW0ge2NvcmV1aVRhYmxlSW5zdGFuY2V9IHRhYmxlXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gICAgICAgICAgICAgIG9wdGlvbnNcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IodGFibGUsIG9wdGlvbnMpIHtcclxuXHJcbiAgICAgICAgb3B0aW9ucyA9ICQuZXh0ZW5kKHRydWUsIHtcclxuICAgICAgICAgICAgaWQ6IG51bGwsXHJcbiAgICAgICAgICAgIHR5cGU6ICdkcm9wZG93bicsXHJcbiAgICAgICAgICAgIGNvbnRlbnQ6IG51bGwsXHJcbiAgICAgICAgICAgIGl0ZW1zOiBudWxsLFxyXG4gICAgICAgICAgICBhdHRyOiB7XHJcbiAgICAgICAgICAgICAgICBjbGFzczogJ2J0biBidG4tcHJpbWFyeScsXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LCBvcHRpb25zKTtcclxuXHJcbiAgICAgICAgc3VwZXIodGFibGUsIG9wdGlvbnMpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCk0L7RgNC80LjRgNC+0LLQsNC90LjQtSDQutC+0L3RgtC10L3RgtCwINC00LvRjyDRgNCw0LfQvNC10YnQtdC90LjRjyDQvdCwINGB0YLRgNCw0L3QuNGG0LVcclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIHJlbmRlcigpIHtcclxuXHJcbiAgICAgICAgbGV0IG9wdGlvbnMgICAgPSB0aGlzLmdldE9wdGlvbnMoKTtcclxuICAgICAgICBsZXQgdGFibGUgICAgICA9IHRoaXMuX3RhYmxlO1xyXG4gICAgICAgIGxldCB0aGF0ICAgICAgID0gdGhpcztcclxuICAgICAgICBsZXQgaXRlbXMgICAgICA9IFtdO1xyXG4gICAgICAgIGxldCBhdHRyaWJ1dGVzID0gW107XHJcblxyXG5cclxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShvcHRpb25zLml0ZW1zKSkge1xyXG4gICAgICAgICAgICBvcHRpb25zLml0ZW1zLm1hcChmdW5jdGlvbiAoaXRlbSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKENvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QoaXRlbSkgJiYgdHlwZW9mIGl0ZW0udHlwZSA9PT0gJ3N0cmluZycpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0udHlwZSA9PT0gJ2xpbmsnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpdGVtLmhhc093blByb3BlcnR5KCdsaW5rJykgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0uaGFzT3duUHJvcGVydHkoJ2NvbnRlbnQnKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGl0ZW0udXJsID09PSAnc3RyaW5nJyAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGl0ZW0uY29udGVudCA9PT0gJ3N0cmluZydcclxuICAgICAgICAgICAgICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgbGluayA9IGNvcmV1aVRhYmxlVXRpbHMucmVuZGVyKGNvcmV1aVRhYmxlVHBsWydjb250cm9scy9kcm9wZG93bi9saW5rLmh0bWwnXSwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybDogaXRlbS51cmwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudDogaXRlbS5jb250ZW50LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXMucHVzaChsaW5rKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGl0ZW0udHlwZSA9PT0gJ2J1dHRvbicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0uaGFzT3duUHJvcGVydHkoJ2NvbnRlbnQnKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5oYXNPd25Qcm9wZXJ0eSgnb25DbGljaycpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlb2YgaXRlbS5jb250ZW50ID09PSAnc3RyaW5nJyAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgWydzdHJpbmcnLCAnZnVuY3Rpb24nXS5pbmRleE9mKHR5cGVvZiBpdGVtLm9uQ2xpY2spID49IDBcclxuICAgICAgICAgICAgICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgYnV0dG9uID0gJChjb3JldWlUYWJsZVV0aWxzLnJlbmRlcihjb3JldWlUYWJsZVRwbFsnY29udHJvbHMvZHJvcGRvd24vYnV0dG9uLmh0bWwnXSwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybDogaXRlbS51cmwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudDogaXRlbS5jb250ZW50LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbi5jbGljayhmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGl0ZW0ub25DbGljayA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtLm9uQ2xpY2soZXZlbnQsIHRhYmxlLCB0aGF0KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgaXRlbS5vbkNsaWNrID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgZnVuYyA9IG5ldyBGdW5jdGlvbignZXZlbnQnLCAndGFibGUnLCAnY29udHJvbCcsIGl0ZW0ub25DbGljayk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmMoZXZlbnQsIHRhYmxlLCB0aGF0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtcy5wdXNoKGJ1dHRvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaXRlbS50eXBlID09PSAnZGl2aWRlcicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXMucHVzaChjb3JldWlUYWJsZVRwbFsnY29udHJvbHMvZHJvcGRvd24vZGl2aWRlci5odG1sJ10pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoY29yZXVpVGFibGVVdGlscy5pc09iamVjdChvcHRpb25zLmF0dHIpKSB7XHJcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmF0dHIuaGFzT3duUHJvcGVydHkoJ2NsYXNzJykgJiZcclxuICAgICAgICAgICAgICAgIFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIG9wdGlvbnMuYXR0ci5jbGFzcykgPj0gMFxyXG4gICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgIG9wdGlvbnMuYXR0ci5jbGFzcyArPSAnIGRyb3Bkb3duLXRvZ2dsZSc7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmF0dHIuaGFzT3duUHJvcGVydHkoJ3R5cGUnKSkge1xyXG4gICAgICAgICAgICAgICAgZGVsZXRlIG9wdGlvbnMuYXR0ci50eXBlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmF0dHIuaGFzT3duUHJvcGVydHkoJ2lkJykpIHtcclxuICAgICAgICAgICAgICAgIGRlbGV0ZSBvcHRpb25zLmF0dHIuaWQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuYXR0ci5oYXNPd25Qcm9wZXJ0eSgnZGF0YS1icy10b2dnbGUnKSkge1xyXG4gICAgICAgICAgICAgICAgZGVsZXRlIG9wdGlvbnMuYXR0clsnZGF0YS1icy10b2dnbGUnXTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgJC5lYWNoKG9wdGlvbnMuYXR0ciwgZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzLnB1c2gobmFtZSArICc9XCInICsgdmFsdWUgKyAnXCInKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgZHJvcGRvd24gPSAkKGNvcmV1aVRhYmxlVXRpbHMucmVuZGVyKGNvcmV1aVRhYmxlVHBsWydjb250cm9scy9kcm9wZG93bi5odG1sJ10sIHtcclxuICAgICAgICAgICAgY29udGVudDogb3B0aW9ucy5jb250ZW50LFxyXG4gICAgICAgICAgICBwb3NpdGlvbjogb3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgncG9zaXRpb24nKSAmJiB0eXBlb2Ygb3B0aW9ucy5wb3NpdGlvbiA9PT0gJ3N0cmluZycgPyBvcHRpb25zLnBvc2l0aW9uIDogJ2VuZCcsXHJcbiAgICAgICAgICAgIGF0dHI6IGF0dHJpYnV0ZXMubGVuZ3RoID4gMCA/ICgnICcgKyBhdHRyaWJ1dGVzLmpvaW4oJyAnKSkgOiAnJyxcclxuICAgICAgICB9KSk7XHJcblxyXG5cclxuICAgICAgICBpZiAoaXRlbXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICBsZXQgbWVudSA9IGRyb3Bkb3duLmZpbmQoJy5kcm9wZG93bi1tZW51Jyk7XHJcblxyXG4gICAgICAgICAgICBpdGVtcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcclxuICAgICAgICAgICAgICAgIG1lbnUuYXBwZW5kKGl0ZW0pXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIHJldHVybiBkcm9wZG93bjtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgQ29udHJvbERyb3Bkb3duOyIsIlxyXG5pbXBvcnQgY29yZXVpVGFibGVUcGwgICBmcm9tICcuLi9jb3JldWkudGFibGUudGVtcGxhdGVzJztcclxuaW1wb3J0IGNvcmV1aVRhYmxlVXRpbHMgZnJvbSAnLi4vY29yZXVpLnRhYmxlLnV0aWxzJztcclxuaW1wb3J0IENvbnRyb2wgICAgICAgICAgZnJvbSBcIi4uL2Fic3RyYWN0L0NvbnRyb2xcIjtcclxuXHJcbmNsYXNzIENvbnRyb2xCdXR0b25Hcm91cCBleHRlbmRzIENvbnRyb2wge1xyXG5cclxuICAgIF9saW5rID0ge1xyXG4gICAgICAgIGF0dHI6IHsgY2xhc3M6ICdidG4gYnRuLXNlY29uZGFyeScgfVxyXG4gICAgfVxyXG5cclxuICAgIF9idXR0b24gPSAge1xyXG4gICAgICAgIGF0dHI6IHsgY2xhc3M6ICdidG4gYnRuLXNlY29uZGFyeScgfVxyXG4gICAgfVxyXG5cclxuICAgIF9kcm9wZG93biA9IHtcclxuICAgICAgICBhdHRyOiB7IGNsYXNzOiAnYnRuIGJ0bi1zZWNvbmRhcnknIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQmNC90LjRhtC40LDQu9C40LfQsNGG0LjRj1xyXG4gICAgICogQHBhcmFtIHtjb3JldWlUYWJsZUluc3RhbmNlfSB0YWJsZVxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9ICAgICAgICAgICAgICBvcHRpb25zXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKHRhYmxlLCBvcHRpb25zKSB7XHJcblxyXG4gICAgICAgIG9wdGlvbnMgPSAkLmV4dGVuZCh0cnVlLCB7XHJcbiAgICAgICAgICAgIGlkOiBudWxsLFxyXG4gICAgICAgICAgICB0eXBlOiAnYnV0dG9uX2dyb3VwJyxcclxuICAgICAgICAgICAgYnV0dG9uczogbnVsbFxyXG4gICAgICAgIH0sIG9wdGlvbnMpO1xyXG5cclxuICAgICAgICBzdXBlcih0YWJsZSwgb3B0aW9ucyk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KTQvtGA0LzQuNGA0L7QstCw0L3QuNC1INC60L7QvdGC0LXQvdGC0LAg0LTQu9GPINGA0LDQt9C80LXRidC10L3QuNGPINC90LAg0YHRgtGA0LDQvdC40YbQtVxyXG4gICAgICogQHJldHVybnMge3N0cmluZ31cclxuICAgICAqL1xyXG4gICAgcmVuZGVyKCkge1xyXG5cclxuICAgICAgICBsZXQgb3B0aW9ucyA9IHRoaXMuZ2V0T3B0aW9ucygpO1xyXG4gICAgICAgIGxldCBidXR0b25zID0gW107XHJcbiAgICAgICAgbGV0IHRoYXQgICAgPSB0aGlzO1xyXG5cclxuXHJcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkob3B0aW9ucy5idXR0b25zKSkge1xyXG5cclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqINCh0L7Qt9C00LDQvdC40LUg0YHRgdGL0LvQutC4XHJcbiAgICAgICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBidXR0b25cclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIG1ha2VMaW5rKGJ1dHRvbikge1xyXG5cclxuICAgICAgICAgICAgICAgIGxldCByZXN1bHQgPSBudWxsO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChidXR0b24uaGFzT3duUHJvcGVydHkoJ2xpbmsnKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgIGJ1dHRvbi5oYXNPd25Qcm9wZXJ0eSgnY29udGVudCcpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGJ1dHRvbi5saW5rID09PSAnc3RyaW5nJyAmJlxyXG4gICAgICAgICAgICAgICAgICAgIHR5cGVvZiBidXR0b24uY29udGVudCA9PT0gJ3N0cmluZydcclxuICAgICAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBhdHRyaWJ1dGVzID0gW107XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICggISBjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KGJ1dHRvbi5hdHRyKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBidXR0b24uYXR0ciA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJ1dHRvbi5hdHRyLmhhc093blByb3BlcnR5KCdocmVmJykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGJ1dHRvbi5hdHRyLmhyZWY7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoICEgYnV0dG9uLmF0dHIuaGFzT3duUHJvcGVydHkoJ2NsYXNzJykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnV0dG9uLmF0dHIuY2xhc3MgPSB0aGF0Ll9saW5rLmF0dHIuY2xhc3M7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAkLmVhY2goYnV0dG9uLmF0dHIsIGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2YgdmFsdWUpID49IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXMucHVzaChuYW1lICsgJz1cIicgKyB2YWx1ZSArICdcIicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IGNvcmV1aVRhYmxlVXRpbHMucmVuZGVyKGNvcmV1aVRhYmxlVHBsWydjb250cm9scy9idXR0b25fZ3JvdXAvbGluay5odG1sJ10sIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiBidXR0b24udXJsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyOiBhdHRyaWJ1dGVzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBidXR0b24uY29udGVudFxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICog0KHQvtC30LTQsNC90LjQtSDQutC90L7Qv9C60LhcclxuICAgICAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGJ1dHRvblxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgZnVuY3Rpb24gbWFrZUJ1dHRvbihidXR0b24pIHtcclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgcmVzdWx0ID0gbnVsbDtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoYnV0dG9uLmhhc093blByb3BlcnR5KCdjb250ZW50JykgJiZcclxuICAgICAgICAgICAgICAgICAgICBidXR0b24uaGFzT3duUHJvcGVydHkoJ29uQ2xpY2snKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgIHR5cGVvZiBidXR0b24uY29udGVudCA9PT0gJ3N0cmluZycgJiZcclxuICAgICAgICAgICAgICAgICAgICBbJ3N0cmluZycsICdmdW5jdGlvbiddLmluZGV4T2YodHlwZW9mIGJ1dHRvbi5vbkNsaWNrKSA+PSAwXHJcbiAgICAgICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgYXR0cmlidXRlcyA9IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoICEgY29yZXVpVGFibGVVdGlscy5pc09iamVjdChidXR0b24uYXR0cikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnV0dG9uLmF0dHIgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChidXR0b24uYXR0ci5oYXNPd25Qcm9wZXJ0eSgndHlwZScpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBidXR0b24uYXR0ci50eXBlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCAhIGJ1dHRvbi5hdHRyLmhhc093blByb3BlcnR5KCdjbGFzcycpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbi5hdHRyLmNsYXNzID0gdGhhdC5fYnV0dG9uLmF0dHIuY2xhc3M7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAkLmVhY2goYnV0dG9uLmF0dHIsIGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2YgdmFsdWUpID49IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXMucHVzaChuYW1lICsgJz1cIicgKyB2YWx1ZSArICdcIicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG5cclxuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSAkKGNvcmV1aVRhYmxlVXRpbHMucmVuZGVyKGNvcmV1aVRhYmxlVHBsWydjb250cm9scy9idXR0b25fZ3JvdXAvYnV0dG9uLmh0bWwnXSwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBidXR0b24uY29udGVudCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cjogYXR0cmlidXRlc1xyXG4gICAgICAgICAgICAgICAgICAgIH0pKTtcclxuXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChidXR0b24uaGFzT3duUHJvcGVydHkoJ2NvbnRlbnQnKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBidXR0b24uaGFzT3duUHJvcGVydHkoJ29uQ2xpY2snKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ3N0cmluZycsICdmdW5jdGlvbiddLmluZGV4T2YodHlwZW9mIGJ1dHRvbi5vbkNsaWNrKSA+PSAwICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVvZiBidXR0b24uY29udGVudCA9PT0gJ3N0cmluZydcclxuICAgICAgICAgICAgICAgICAgICApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5jbGljayhmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgYnV0dG9uLm9uQ2xpY2sgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBidXR0b24ub25DbGljayhldmVudCwgdGhhdC5fdGFibGUsIHRoYXQpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGJ1dHRvbi5vbkNsaWNrID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBmdW5jID0gbmV3IEZ1bmN0aW9uKCdldmVudCcsICd0YWJsZScsICdjb250cm9sJywgYnV0dG9uLm9uQ2xpY2spO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmMoZXZlbnQsIHRoYXQuX3RhYmxlLCB0aGF0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICog0KHQvtC30LTQsNC90LjQtSDQstGL0L/QsNC00LDRjtGJ0LXQs9C+INC80LXQvdGOXHJcbiAgICAgICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBidXR0b25cclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIG1ha2VEcm9wZG93bihidXR0b24pIHtcclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgcmVzdWx0ID0gbnVsbDtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShidXR0b24uaXRlbXMpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGF0dHJpYnV0ZXMgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgaXRlbXMgICAgICA9IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBidXR0b24uaXRlbXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KGl0ZW0pICYmIHR5cGVvZiBpdGVtLnR5cGUgPT09ICdzdHJpbmcnKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0udHlwZSA9PT0gJ2xpbmsnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0uaGFzT3duUHJvcGVydHkoJ2xpbmsnKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtLmhhc093blByb3BlcnR5KCdjb250ZW50JykgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGl0ZW0udXJsID09PSAnc3RyaW5nJyAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlb2YgaXRlbS5jb250ZW50ID09PSAnc3RyaW5nJyAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtLnVybFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtcy5wdXNoKGNvcmV1aVRhYmxlVXRpbHMucmVuZGVyKGNvcmV1aVRhYmxlVHBsWydjb250cm9scy9idXR0b25fZ3JvdXAvZHJvcGRvd24vbGluay5odG1sJ10sIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybDogaXRlbS51cmwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBpdGVtLmNvbnRlbnQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpdGVtLnR5cGUgPT09ICdidXR0b24nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0uaGFzT3duUHJvcGVydHkoJ2NvbnRlbnQnKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtLmhhc093blByb3BlcnR5KCdvbkNsaWNrJykgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGl0ZW0uY29udGVudCA9PT0gJ3N0cmluZycgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWydzdHJpbmcnLCAnZnVuY3Rpb24nXS5pbmRleE9mKHR5cGVvZiBpdGVtLm9uQ2xpY2spID49IDBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGJ0biA9ICQoY29yZXVpVGFibGVVdGlscy5yZW5kZXIoY29yZXVpVGFibGVUcGxbJ2NvbnRyb2xzL2J1dHRvbl9ncm91cC9kcm9wZG93bi9idXR0b24uaHRtbCddLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBpdGVtLmNvbnRlbnQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ0bi5jbGljayhmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgaXRlbS5vbkNsaWNrID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5vbkNsaWNrKGV2ZW50LCB0aGF0Ll90YWJsZSwgdGhhdCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgaXRlbS5vbkNsaWNrID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBmdW5jID0gbmV3IEZ1bmN0aW9uKCdldmVudCcsICd0YWJsZScsICdjb250cm9sJywgaXRlbS5vbkNsaWNrKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jKGV2ZW50LCB0aGF0Ll90YWJsZSwgdGhhdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXMucHVzaChidG4pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpdGVtLnR5cGUgPT09ICdkaXZpZGVyJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zLnB1c2goY29yZXVpVGFibGVUcGxbJ2NvbnRyb2xzL2J1dHRvbl9ncm91cC9kcm9wZG93bi9kaXZpZGVyLmh0bWwnXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICggISBjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KGJ1dHRvbi5hdHRyKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBidXR0b24uYXR0ciA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJ1dHRvbi5hdHRyLmhhc093blByb3BlcnR5KCd0eXBlJykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGJ1dHRvbi5hdHRyLnR5cGU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoICEgYnV0dG9uLmF0dHIuaGFzT3duUHJvcGVydHkoJ2NsYXNzJykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnV0dG9uLmF0dHIuY2xhc3MgPSB0aGF0Ll9kcm9wZG93bi5hdHRyLmNsYXNzO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJ1dHRvbi5hdHRyLmhhc093blByb3BlcnR5KCdjbGFzcycpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIGJ1dHRvbi5hdHRyLmNsYXNzKSA+PSAwXHJcbiAgICAgICAgICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbi5hdHRyLmNsYXNzICs9ICcgZHJvcGRvd24tdG9nZ2xlJztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICAgICAgICAgICAgICAkLmVhY2goYnV0dG9uLmF0dHIsIGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2YgdmFsdWUpID49IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXMucHVzaChuYW1lICsgJz1cIicgKyB2YWx1ZSArICdcIicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9ICQoY29yZXVpVGFibGVVdGlscy5yZW5kZXIoY29yZXVpVGFibGVUcGxbJ2NvbnRyb2xzL2J1dHRvbl9ncm91cC9saW5rLmh0bWwnXSwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyOiBhdHRyaWJ1dGVzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogYnV0dG9uLmhhc093blByb3BlcnR5KCdwb3NpdGlvbicpICYmIHR5cGVvZiBidXR0b24ucG9zaXRpb24gPT09ICdzdHJpbmcnID8gYnV0dG9uLnBvc2l0aW9uIDogJ2VuZCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IGJ1dHRvbi5jb250ZW50LFxyXG4gICAgICAgICAgICAgICAgICAgIH0pKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW1zLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG1lbnUgPSByZXN1bHQuZmluZCgnLmRyb3Bkb3duLW1lbnUnKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zLm1hcChmdW5jdGlvbiAoaXRlbSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVudS5hcHBlbmQoaXRlbSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgICAgIH1cclxuXHJcblxyXG5cclxuICAgICAgICAgICAgb3B0aW9ucy5idXR0b25zLm1hcChmdW5jdGlvbiAoa2V5LCBidXR0b24pIHtcclxuICAgICAgICAgICAgICAgIGlmIChjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KGJ1dHRvbikgJiYgdHlwZW9mIGJ1dHRvbi50eXBlID09PSAnc3RyaW5nJykge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoYnV0dG9uLnR5cGUgPT09ICdsaW5rJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgbGlua0VsZW1lbnQgPSBtYWtlTGluayhidXR0b24pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxpbmtFbGVtZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBidXR0b25zLnB1c2gobGlua0VsZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYnV0dG9uLnR5cGUgPT09ICdidXR0b24nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBidXR0b25FbGVtZW50ID0gbWFrZUJ1dHRvbihidXR0b24pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGJ1dHRvbkVsZW1lbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbnMucHVzaChidXR0b25FbGVtZW50KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGJ1dHRvbi50eXBlID09PSAnZHJvcGRvd24nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBkcm9wZG93bkVsZW1lbnQgPSBtYWtlRHJvcGRvd24oYnV0dG9uKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkcm9wZG93bkVsZW1lbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbnMucHVzaChkcm9wZG93bkVsZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICBsZXQgYnRuR3JvdXAgPSAkKGNvcmV1aVRhYmxlVHBsWydjb250cm9scy9idXR0b25fZ3JvdXAuaHRtbCddKTtcclxuXHJcbiAgICAgICAgYnV0dG9ucy5tYXAoZnVuY3Rpb24gKGJ1dHRvbikge1xyXG4gICAgICAgICAgICBidG5Hcm91cC5hcHBlbmQoYnV0dG9uKTtcclxuICAgICAgICB9KVxyXG5cclxuICAgICAgICByZXR1cm4gYnRuR3JvdXA7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IENvbnRyb2xCdXR0b25Hcm91cDsiLCJpbXBvcnQgQ29udHJvbCBmcm9tIFwiLi4vYWJzdHJhY3QvQ29udHJvbFwiO1xyXG5cclxuY2xhc3MgQ29udHJvbEN1c3RvbSBleHRlbmRzIENvbnRyb2wge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y9cclxuICAgICAqIEBwYXJhbSB7Y29yZXVpVGFibGVJbnN0YW5jZX0gdGFibGVcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSAgICAgICAgICAgICAgb3B0aW9uc1xyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3Rvcih0YWJsZSwgb3B0aW9ucykge1xyXG5cclxuICAgICAgICBvcHRpb25zID0gJC5leHRlbmQodHJ1ZSwge1xyXG4gICAgICAgICAgICBpZDogbnVsbCxcclxuICAgICAgICAgICAgdHlwZTogJ2N1c3RvbScsXHJcbiAgICAgICAgICAgIGNvbnRlbnQ6IG51bGxcclxuICAgICAgICB9LCBvcHRpb25zKTtcclxuXHJcbiAgICAgICAgc3VwZXIodGFibGUsIG9wdGlvbnMpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCk0L7RgNC80LjRgNC+0LLQsNC90LjQtSDQutC+0L3RgtC10L3RgtCwINC00LvRjyDRgNCw0LfQvNC10YnQtdC90LjRjyDQvdCwINGB0YLRgNCw0L3QuNGG0LVcclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd8SFRNTEVsZW1lbnR8alF1ZXJ5fVxyXG4gICAgICovXHJcbiAgICByZW5kZXIoKSB7XHJcblxyXG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5fb3B0aW9ucy5jb250ZW50ID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fb3B0aW9ucy5jb250ZW50O1xyXG5cclxuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiB0aGlzLl9vcHRpb25zLmNvbnRlbnQgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX29wdGlvbnMuY29udGVudCgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IENvbnRyb2xDdXN0b207IiwiXHJcbmltcG9ydCBjb3JldWlUYWJsZVRwbCAgIGZyb20gXCIuLi9jb3JldWkudGFibGUudGVtcGxhdGVzXCI7XHJcbmltcG9ydCBjb3JldWlUYWJsZVV0aWxzIGZyb20gJy4uL2NvcmV1aS50YWJsZS51dGlscyc7XHJcbmltcG9ydCBDb250cm9sICAgICAgICAgIGZyb20gXCIuLi9hYnN0cmFjdC9Db250cm9sXCI7XHJcblxyXG5cclxuY2xhc3MgQ29udHJvbFBhZ2VTaXplIGV4dGVuZHMgQ29udHJvbCB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQmNC90LjRhtC40LDQu9C40LfQsNGG0LjRj1xyXG4gICAgICogQHBhcmFtIHtjb3JldWlUYWJsZUluc3RhbmNlfSB0YWJsZVxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9ICAgICAgICAgICAgICBvcHRpb25zXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKHRhYmxlLCBvcHRpb25zKSB7XHJcblxyXG4gICAgICAgIGxldCBvcHRpb25zT3JpZ2luYWwgPSB7XHJcbiAgICAgICAgICAgIGlkOiBudWxsLFxyXG4gICAgICAgICAgICB0eXBlOiAncGFnZV9zaXplJyxcclxuICAgICAgICAgICAgYXR0cjoge1xyXG4gICAgICAgICAgICAgICAgY2xhc3M6ICdmb3JtLXNlbGVjdCdcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgbGlzdDogWyAyNSwgNTAsIDEwMCwgMTAwMCBdXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgaWYgKG9wdGlvbnMuaGFzT3duUHJvcGVydHkoJ2F0dHInKSAmJiBjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KG9wdGlvbnMuYXR0cikpIHtcclxuICAgICAgICAgICAgb3B0aW9ucy5hdHRyID0gY29yZXVpVGFibGVVdGlscy5tZXJnZUF0dHIob3B0aW9uc09yaWdpbmFsLmF0dHIsIG9wdGlvbnMuYXR0cik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBvcHRpb25zID0gJC5leHRlbmQodHJ1ZSwgb3B0aW9uc09yaWdpbmFsLCBvcHRpb25zKTtcclxuXHJcbiAgICAgICAgc3VwZXIodGFibGUsIG9wdGlvbnMpO1xyXG5cclxuXHJcbiAgICAgICAgaWYgKCAhIEFycmF5LmlzQXJyYXkodGhpcy5fb3B0aW9ucy5saXN0KSkge1xyXG4gICAgICAgICAgICB0aGlzLl9vcHRpb25zLmxpc3QgPSBbXTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLmxpc3QuaW5kZXhPZih0aGlzLl90YWJsZS5fcmVjb3Jkc1BlclBhZ2UpIDwgMCkge1xyXG4gICAgICAgICAgICB0aGlzLl9vcHRpb25zLmxpc3QudW5zaGlmdCh0aGlzLl90YWJsZS5fcmVjb3Jkc1BlclBhZ2UpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQpNC+0YDQvNC40YDQvtCy0LDQvdC40LUg0LrQvtC90YLQtdC90YLQsCDQtNC70Y8g0YDQsNC30LzQtdGJ0LXQvdC40Y8g0L3QsCDRgdGC0YDQsNC90LjRhtC1XHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxyXG4gICAgICovXHJcbiAgICByZW5kZXIoKSB7XHJcblxyXG4gICAgICAgIGxldCBhdHRyaWJ1dGVzID0gW107XHJcbiAgICAgICAgbGV0IHRhYmxlICAgICAgPSB0aGlzLl90YWJsZTtcclxuXHJcbiAgICAgICAgaWYgKGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QodGhpcy5fb3B0aW9ucy5hdHRyKSkge1xyXG4gICAgICAgICAgICAkLmVhY2godGhpcy5fb3B0aW9ucy5hdHRyLCBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIGlmIChbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiB2YWx1ZSkgPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXMucHVzaChuYW1lICsgJz1cIicgKyB2YWx1ZSArICdcIicpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBjb250cm9sID0gY29yZXVpVGFibGVVdGlscy5yZW5kZXIoY29yZXVpVGFibGVUcGxbJ2NvbnRyb2xzL3BhZ2Utc2l6ZS5odG1sJ10sIHtcclxuICAgICAgICAgICAgcmVjb3Jkc1BlclBhZ2VMaXN0OiB0aGlzLl9vcHRpb25zLmxpc3QsXHJcbiAgICAgICAgICAgIHJlY29yZHNQZXJQYWdlOiB0YWJsZS5fcmVjb3Jkc1BlclBhZ2UsXHJcbiAgICAgICAgICAgIGF0dHI6IGF0dHJpYnV0ZXMubGVuZ3RoID4gMCA/ICgnICcgKyBhdHRyaWJ1dGVzLmpvaW4oJyAnKSkgOiAnJyxcclxuICAgICAgICAgICAgbGFuZzogdGFibGUuZ2V0TGFuZygpLFxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBsZXQgc2VsZWN0UGFnZVNpemUgPSAkKCdzZWxlY3QnLCBjb250cm9sKTtcclxuXHJcbiAgICAgICAgc2VsZWN0UGFnZVNpemUuY2hhbmdlKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdGFibGUuX3BhZ2UgPSAxO1xyXG4gICAgICAgICAgICB0YWJsZS5zZXRQYWdlU2l6ZShOdW1iZXIoc2VsZWN0UGFnZVNpemUudmFsKCkpKTtcclxuICAgICAgICAgICAgdGFibGUucmVsb2FkKCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRhYmxlLm9uKCdwYWdlX3NpemVfdXBkYXRlJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBzZWxlY3RQYWdlU2l6ZS52YWwodGFibGUuX3JlY29yZHNQZXJQYWdlKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGNvbnRyb2w7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IENvbnRyb2xQYWdlU2l6ZTsiLCJcclxuaW1wb3J0IGNvcmV1aVRhYmxlVXRpbHMgZnJvbSAnLi4vY29yZXVpLnRhYmxlLnV0aWxzJztcclxuaW1wb3J0IGNvcmV1aVRhYmxlVHBsICAgZnJvbSBcIi4uL2NvcmV1aS50YWJsZS50ZW1wbGF0ZXNcIjtcclxuaW1wb3J0IENvbnRyb2wgICAgICAgICAgZnJvbSBcIi4uL2Fic3RyYWN0L0NvbnRyb2xcIjtcclxuXHJcblxyXG5jbGFzcyBDb250cm9sUGFnZUp1bXAgZXh0ZW5kcyBDb250cm9sIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPXHJcbiAgICAgKiBAcGFyYW0ge2NvcmV1aVRhYmxlSW5zdGFuY2V9IHRhYmxlXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gICAgICAgICAgICAgIG9wdGlvbnNcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IodGFibGUsIG9wdGlvbnMpIHtcclxuXHJcbiAgICAgICAgbGV0IG9wdGlvbnNPcmlnaW5hbCA9IHtcclxuICAgICAgICAgICAgaWQ6IG51bGwsXHJcbiAgICAgICAgICAgIHR5cGU6ICdwYWdlX2p1bXAnLFxyXG4gICAgICAgICAgICBhdHRyOiB7XHJcbiAgICAgICAgICAgICAgICBjbGFzczogJ2lucHV0LWdyb3VwJ1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGlmIChvcHRpb25zLmhhc093blByb3BlcnR5KCdhdHRyJykgJiYgY29yZXVpVGFibGVVdGlscy5pc09iamVjdChvcHRpb25zLmF0dHIpKSB7XHJcbiAgICAgICAgICAgIG9wdGlvbnMuYXR0ciA9IGNvcmV1aVRhYmxlVXRpbHMubWVyZ2VBdHRyKG9wdGlvbnNPcmlnaW5hbC5hdHRyLCBvcHRpb25zLmF0dHIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgb3B0aW9ucyA9ICQuZXh0ZW5kKHRydWUsIG9wdGlvbnNPcmlnaW5hbCwgb3B0aW9ucyk7XHJcblxyXG4gICAgICAgIHN1cGVyKHRhYmxlLCBvcHRpb25zKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQpNC+0YDQvNC40YDQvtCy0LDQvdC40LUg0LrQvtC90YLQtdC90YLQsCDQtNC70Y8g0YDQsNC30LzQtdGJ0LXQvdC40Y8g0L3QsCDRgdGC0YDQsNC90LjRhtC1XHJcbiAgICAgKiBAcmV0dXJucyB7alF1ZXJ5fVxyXG4gICAgICovXHJcbiAgICByZW5kZXIoKSB7XHJcblxyXG4gICAgICAgIGxldCBhdHRyaWJ1dGVzID0gW107XHJcbiAgICAgICAgbGV0IHRhYmxlICAgICAgPSB0aGlzLl90YWJsZTtcclxuXHJcbiAgICAgICAgaWYgKGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QodGhpcy5fb3B0aW9ucy5hdHRyKSkge1xyXG4gICAgICAgICAgICAkLmVhY2godGhpcy5fb3B0aW9ucy5hdHRyLCBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIGlmIChbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiB2YWx1ZSkgPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXMucHVzaChuYW1lICsgJz1cIicgKyB2YWx1ZSArICdcIicpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBjb250cm9sID0gJChjb3JldWlUYWJsZVV0aWxzLnJlbmRlcihjb3JldWlUYWJsZVRwbFsnY29udHJvbHMvcGFnZS1qdW1wLmh0bWwnXSwge1xyXG4gICAgICAgICAgICBhdHRyOiBhdHRyaWJ1dGVzLmxlbmd0aCA+IDAgPyAoJyAnICsgYXR0cmlidXRlcy5qb2luKCcgJykpIDogJydcclxuICAgICAgICB9KSk7XHJcblxyXG4gICAgICAgIGxldCBpbnB1dCAgID0gJCgnaW5wdXQnLCBjb250cm9sKTtcclxuICAgICAgICBsZXQgYnV0dG9uICA9ICQoJ2J1dHRvbicsIGNvbnRyb2wpO1xyXG5cclxuICAgICAgICBidXR0b24uY2xpY2soZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB0YWJsZS5nb1BhZ2UoaW5wdXQudmFsKCkpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBpbnB1dC5rZXl1cChmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAgICAgaWYgKGV2ZW50LmtleSA9PT0gJ0VudGVyJyB8fCBldmVudC5rZXlDb2RlID09PSAxMykge1xyXG4gICAgICAgICAgICAgICAgdGFibGUuZ29QYWdlKGlucHV0LnZhbCgpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gY29udHJvbDtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgQ29udHJvbFBhZ2VKdW1wOyIsImltcG9ydCBjb3JldWlUYWJsZVV0aWxzIGZyb20gXCIuLi8uLi9jb3JldWkudGFibGUudXRpbHNcIjtcclxuaW1wb3J0IGNvcmV1aVRhYmxlVHBsICAgZnJvbSBcIi4uLy4uL2NvcmV1aS50YWJsZS50ZW1wbGF0ZXNcIjtcclxuXHJcblxyXG5sZXQgY29udHJvbFBhZ2VzID0ge1xyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCk0L7RgNC80LjRgNC+0LLQsNC90LjQtSDQutC+0L3RgtGA0L7Qu9CwXHJcbiAgICAgKiBAcGFyYW0gdGFibGVcclxuICAgICAqIEBwYXJhbSBvcHRpb25zXHJcbiAgICAgKiBAcmV0dXJuIHtqUXVlcnl9XHJcbiAgICAgKi9cclxuICAgIHJlbmRlcjogZnVuY3Rpb24gKHRhYmxlLCBvcHRpb25zKSB7XHJcblxyXG4gICAgICAgIGxldCBhdHRyaWJ1dGVzICAgICAgID0gW107XHJcbiAgICAgICAgbGV0IHNob3dQcmV2ICAgICAgICAgPSAhISBvcHRpb25zLnNob3cucHJldjtcclxuICAgICAgICBsZXQgc2hvd05leHQgICAgICAgICA9ICEhIG9wdGlvbnMuc2hvdy5uZXh0O1xyXG4gICAgICAgIGxldCBzaG93RGl2aWRlclN0YXJ0ID0gZmFsc2U7XHJcbiAgICAgICAgbGV0IHNob3dEaXZpZGVyRW5kICAgPSBmYWxzZTtcclxuICAgICAgICBsZXQgc2hvd1BhZ2VGaXJzdCAgICA9IGZhbHNlO1xyXG4gICAgICAgIGxldCBzaG93UGFnZUxhc3QgICAgID0gZmFsc2U7XHJcbiAgICAgICAgbGV0IHBhZ2VzICAgICAgICAgICAgPSBbXTtcclxuICAgICAgICBsZXQgcGFnZXNUb3RhbCAgICAgICA9IHRhYmxlLl9yZWNvcmRzVG90YWwgPiAwICYmIHRhYmxlLl9yZWNvcmRzUGVyUGFnZSA+IDBcclxuICAgICAgICAgICAgPyBNYXRoLmNlaWwodGFibGUuX3JlY29yZHNUb3RhbCAvIHRhYmxlLl9yZWNvcmRzUGVyUGFnZSlcclxuICAgICAgICAgICAgOiAxO1xyXG5cclxuXHJcbiAgICAgICAgaWYgKGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3Qob3B0aW9ucy5hdHRyKSkge1xyXG4gICAgICAgICAgICAkLmVhY2gob3B0aW9ucy5hdHRyLCBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIGlmIChbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiB2YWx1ZSkgPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXMucHVzaChuYW1lICsgJz1cIicgKyB2YWx1ZSArICdcIicpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0YWJsZS5fcmVjb3Jkc1RvdGFsID4gMCAmJlxyXG4gICAgICAgICAgICBvcHRpb25zLmNvdW50ID4gMCAmJlxyXG4gICAgICAgICAgICBjb3JldWlUYWJsZVV0aWxzLmlzTnVtZXJpYyhvcHRpb25zLmNvdW50KVxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICBsZXQgY291bnQgICAgID0gTWF0aC5taW4ob3B0aW9ucy5jb3VudCwgcGFnZXNUb3RhbCk7XHJcbiAgICAgICAgICAgIGxldCBjb3VudEhhbGYgPSBNYXRoLm1heCgwLCBNYXRoLmZsb29yKGNvdW50IC8gMikpO1xyXG5cclxuICAgICAgICAgICAgaWYgKGNvdW50ICUgMiA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgY291bnRIYWxmIC09IDE7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGxldCBzdGFydCA9IHRhYmxlLl9wYWdlID4gMVxyXG4gICAgICAgICAgICAgICAgPyBNYXRoLm1heCgxLCB0YWJsZS5fcGFnZSAtIGNvdW50SGFsZilcclxuICAgICAgICAgICAgICAgIDogdGFibGUuX3BhZ2U7XHJcblxyXG4gICAgICAgICAgICBpZiAoc3RhcnQgKyBjb3VudCA+IHBhZ2VzVG90YWwpIHtcclxuICAgICAgICAgICAgICAgIHN0YXJ0ID0gcGFnZXNUb3RhbCAtIChjb3VudCAtIDEpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvdW50OyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHBhZ2VzLnB1c2goc3RhcnQgKyBpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmNvdW50ID4gMCAmJlxyXG4gICAgICAgICAgICAgICAgdGFibGUuX3BhZ2UgPiAxXHJcbiAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgcGFnZXMucHVzaCh0YWJsZS5fcGFnZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChwYWdlcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIGlmIChwYWdlc1swXSA+PSAyKSB7XHJcbiAgICAgICAgICAgICAgICBzaG93UGFnZUZpcnN0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAocGFnZXNbMF0gPj0gMykge1xyXG4gICAgICAgICAgICAgICAgc2hvd0RpdmlkZXJTdGFydCA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChwYWdlc1twYWdlcy5sZW5ndGggLSAxXSArIDEgPCBwYWdlc1RvdGFsKSB7XHJcbiAgICAgICAgICAgICAgICBzaG93RGl2aWRlckVuZCA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHBhZ2VzW3BhZ2VzLmxlbmd0aCAtIDFdIDwgcGFnZXNUb3RhbCkge1xyXG4gICAgICAgICAgICAgICAgc2hvd1BhZ2VMYXN0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IGNvbnRyb2wgPSAkKGNvcmV1aVRhYmxlVXRpbHMucmVuZGVyKGNvcmV1aVRhYmxlVHBsWydjb250cm9scy9wYWdlcy5odG1sJ10sIHtcclxuICAgICAgICAgICAgY3VycmVudFBhZ2U6IHRhYmxlLl9wYWdlLFxyXG4gICAgICAgICAgICBpc0FjdGl2ZVByZXY6IHRhYmxlLl9wYWdlID4gMSxcclxuICAgICAgICAgICAgaXNBY3RpdmVOZXh0OiB0YWJsZS5fcGFnZSA8IHBhZ2VzVG90YWwsXHJcbiAgICAgICAgICAgIHBhZ2VzVG90YWw6IHBhZ2VzVG90YWwsXHJcblxyXG4gICAgICAgICAgICBzaG93UHJldjogc2hvd1ByZXYsXHJcbiAgICAgICAgICAgIHNob3dQYWdlRmlyc3Q6IHNob3dQYWdlRmlyc3QsXHJcbiAgICAgICAgICAgIHNob3dEaXZpZGVyU3RhcnQ6IHNob3dEaXZpZGVyU3RhcnQsXHJcblxyXG4gICAgICAgICAgICBwYWdlczogcGFnZXMsXHJcblxyXG4gICAgICAgICAgICBzaG93RGl2aWRlckVuZDogc2hvd0RpdmlkZXJFbmQsXHJcbiAgICAgICAgICAgIHNob3dQYWdlTGFzdDogc2hvd1BhZ2VMYXN0LFxyXG4gICAgICAgICAgICBzaG93TmV4dDogc2hvd05leHQsXHJcblxyXG4gICAgICAgICAgICBhdHRyOiBhdHRyaWJ1dGVzLmxlbmd0aCA+IDAgPyAoJyAnICsgYXR0cmlidXRlcy5qb2luKCcgJykpIDogJycsXHJcbiAgICAgICAgICAgIGxhbmc6IHRhYmxlLmdldExhbmcoKSxcclxuICAgICAgICB9KSk7XHJcblxyXG5cclxuICAgICAgICBsZXQgYnRuUHJldiA9IGNvbnRyb2wuZmluZCgnLmNvcmV1aS10YWJsZV9fcGFnZV9wcmV2JylcclxuICAgICAgICBpZiAoYnRuUHJldlswXSkge1xyXG4gICAgICAgICAgICBpZiAodGFibGUuX3BhZ2UgPD0gMSkge1xyXG4gICAgICAgICAgICAgICAgYnRuUHJldi5hZGRDbGFzcygnZGlzYWJsZWQnKTtcclxuXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBidG5QcmV2LmNsaWNrKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGFibGUuX3BhZ2UgPiAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhYmxlLnByZXZQYWdlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIGxldCBidG5OZXh0ID0gY29udHJvbC5maW5kKCcuY29yZXVpLXRhYmxlX19wYWdlX25leHQnKVxyXG4gICAgICAgIGlmIChidG5OZXh0WzBdKSB7XHJcbiAgICAgICAgICAgIGJ0bk5leHQuY2xpY2soZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgdGFibGUubmV4dFBhZ2UoKTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICBsZXQgYnRuUGFnZXMgPSBjb250cm9sLmZpbmQoJy5jb3JldWktdGFibGVfX3BhZ2UnKVxyXG4gICAgICAgIGlmIChidG5QYWdlc1swXSkge1xyXG4gICAgICAgICAgICBidG5QYWdlcy5jbGljayhmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgcGFnZSA9IE51bWJlcigkLnRyaW0oJCh0aGlzKS50ZXh0KCkpKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAocGFnZSA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICB0YWJsZS5nb1BhZ2UocGFnZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gY29udHJvbDtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY29udHJvbFBhZ2VzOyIsIlxyXG5pbXBvcnQgY29yZXVpVGFibGVVdGlscyBmcm9tICcuLi9jb3JldWkudGFibGUudXRpbHMnO1xyXG5pbXBvcnQgQ29udHJvbCAgICAgICAgICBmcm9tIFwiLi4vYWJzdHJhY3QvQ29udHJvbFwiO1xyXG5pbXBvcnQgY29udHJvbFBhZ2VzICAgICBmcm9tIFwiLi9wYWdlcy9jb250cm9sXCI7XHJcblxyXG5jbGFzcyBDb250cm9sUGFnZXMgZXh0ZW5kcyBDb250cm9sIHtcclxuXHJcbiAgICBfY29udHJvbCA9IG51bGw7XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y9cclxuICAgICAqIEBwYXJhbSB7Y29yZXVpVGFibGVJbnN0YW5jZX0gdGFibGVcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSAgICAgICAgICAgICAgb3B0aW9uc1xyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3Rvcih0YWJsZSwgb3B0aW9ucykge1xyXG5cclxuICAgICAgICBsZXQgb3B0aW9uc09yaWdpbmFsID0ge1xyXG4gICAgICAgICAgICBzaG93OiB7XHJcbiAgICAgICAgICAgICAgICBwcmV2OiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgbmV4dDogdHJ1ZSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgY291bnQ6IDMsXHJcbiAgICAgICAgICAgIGF0dHI6IHtcclxuICAgICAgICAgICAgICAgIGNsYXNzOiAncGFnaW5hdGlvbiBtYi0wJ1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgaWYgKG9wdGlvbnMuaGFzT3duUHJvcGVydHkoJ2F0dHInKSAmJiBjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KG9wdGlvbnMuYXR0cikpIHtcclxuICAgICAgICAgICAgb3B0aW9ucy5hdHRyID0gY29yZXVpVGFibGVVdGlscy5tZXJnZUF0dHIob3B0aW9uc09yaWdpbmFsLmF0dHIsIG9wdGlvbnMuYXR0cik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBvcHRpb25zID0gJC5leHRlbmQodHJ1ZSwgb3B0aW9uc09yaWdpbmFsLCBvcHRpb25zKTtcclxuXHJcbiAgICAgICAgc3VwZXIodGFibGUsIG9wdGlvbnMpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCk0L7RgNC80LjRgNC+0LLQsNC90LjQtSDQutC+0L3RgtC10L3RgtCwINC00LvRjyDRgNCw0LfQvNC10YnQtdC90LjRjyDQvdCwINGB0YLRgNCw0L3QuNGG0LVcclxuICAgICAqIEByZXR1cm5zIHtqUXVlcnl9XHJcbiAgICAgKi9cclxuICAgIHJlbmRlcigpIHtcclxuXHJcbiAgICAgICAgbGV0IHRhYmxlICAgPSB0aGlzLl90YWJsZTtcclxuICAgICAgICBsZXQgb3B0aW9ucyA9IHRoaXMuX29wdGlvbnM7XHJcbiAgICAgICAgbGV0IGNvbnRyb2wgPSBjb250cm9sUGFnZXMucmVuZGVyKHRhYmxlLCBvcHRpb25zKTtcclxuXHJcbiAgICAgICAgdGFibGUub24oJ3JlY29yZHNfc2hvdycsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgbGV0IGNvbnRyb2xVcGRhdGUgPSBjb250cm9sUGFnZXMucmVuZGVyKHRhYmxlLCBvcHRpb25zKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnRyb2wucmVwbGFjZVdpdGgoY29udHJvbFVwZGF0ZSk7XHJcblxyXG4gICAgICAgICAgICBjb250cm9sID0gY29udHJvbFVwZGF0ZTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5fY29udHJvbCA9IGNvbnRyb2w7XHJcblxyXG4gICAgICAgIHJldHVybiBjb250cm9sO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBDb250cm9sUGFnZXM7IiwiXHJcbmltcG9ydCBjb3JldWlUYWJsZVRwbCAgICAgIGZyb20gXCIuLi9jb3JldWkudGFibGUudGVtcGxhdGVzXCI7XHJcbmltcG9ydCBjb3JldWlUYWJsZVV0aWxzICAgIGZyb20gJy4uL2NvcmV1aS50YWJsZS51dGlscyc7XHJcbmltcG9ydCBjb3JldWlUYWJsZUVsZW1lbnRzIGZyb20gXCIuLi9jb3JldWkudGFibGUuZWxlbWVudHNcIjtcclxuaW1wb3J0IENvbnRyb2wgICAgICAgICAgICAgZnJvbSBcIi4uL2Fic3RyYWN0L0NvbnRyb2xcIjtcclxuXHJcbmNsYXNzIENvbnRyb2xUb3RhbCBleHRlbmRzIENvbnRyb2wge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y9cclxuICAgICAqIEBwYXJhbSB7Y29yZXVpVGFibGVJbnN0YW5jZX0gdGFibGVcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSAgICAgICAgICAgICAgb3B0aW9uc1xyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3Rvcih0YWJsZSwgb3B0aW9ucykge1xyXG5cclxuICAgICAgICBsZXQgb3B0aW9uc09yaWdpbmFsID0ge1xyXG4gICAgICAgICAgICB0eXBlOiAndG90YWwnLFxyXG4gICAgICAgICAgICBhdHRyOiB7XHJcbiAgICAgICAgICAgICAgICBjbGFzczogJ3B4LTEnXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBpZiAob3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnYXR0cicpICYmIGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3Qob3B0aW9ucy5hdHRyKSkge1xyXG4gICAgICAgICAgICBvcHRpb25zLmF0dHIgPSBjb3JldWlUYWJsZVV0aWxzLm1lcmdlQXR0cihvcHRpb25zT3JpZ2luYWwuYXR0ciwgb3B0aW9ucy5hdHRyKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIG9wdGlvbnMgPSAkLmV4dGVuZCh0cnVlLCBvcHRpb25zT3JpZ2luYWwsIG9wdGlvbnMpO1xyXG5cclxuICAgICAgICBzdXBlcih0YWJsZSwgb3B0aW9ucyk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KTQvtGA0LzQuNGA0L7QstCw0L3QuNC1INC60L7QvdGC0LXQvdGC0LAg0LTQu9GPINGA0LDQt9C80LXRidC10L3QuNGPINC90LAg0YHRgtGA0LDQvdC40YbQtVxyXG4gICAgICogQHJldHVybnMge3N0cmluZ31cclxuICAgICAqL1xyXG4gICAgcmVuZGVyKCkge1xyXG5cclxuICAgICAgICBsZXQgYXR0cmlidXRlcyA9IFtdO1xyXG4gICAgICAgIGxldCB0YWJsZSAgICAgID0gdGhpcy5fdGFibGU7XHJcblxyXG4gICAgICAgIGlmIChjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KHRoaXMuX29wdGlvbnMuYXR0cikpIHtcclxuICAgICAgICAgICAgJC5lYWNoKHRoaXMuX29wdGlvbnMuYXR0ciwgZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2YgdmFsdWUpID49IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzLnB1c2gobmFtZSArICc9XCInICsgdmFsdWUgKyAnXCInKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgY29udHJvbCA9ICQoY29yZXVpVGFibGVVdGlscy5yZW5kZXIoY29yZXVpVGFibGVUcGxbJ2NvbnRyb2xzL3RvdGFsLmh0bWwnXSwge1xyXG4gICAgICAgICAgICByZWNvcmRzVG90YWw6IHRhYmxlLl9yZWNvcmRzVG90YWwsXHJcbiAgICAgICAgICAgIGF0dHI6IGF0dHJpYnV0ZXMubGVuZ3RoID4gMCA/ICgnICcgKyBhdHRyaWJ1dGVzLmpvaW4oJyAnKSkgOiAnJyxcclxuICAgICAgICAgICAgbGFuZzogdGFibGUuZ2V0TGFuZygpLFxyXG4gICAgICAgIH0pKTtcclxuXHJcbiAgICAgICAgdGFibGUub24oJ3JlY29yZHNfc2hvdycsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgY29udHJvbC5maW5kKCcuY29yZXVpLXRhYmxlX19jb3VudC10b3RhbCcpLnRleHQodGFibGUuX3JlY29yZHNUb3RhbCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiBjb250cm9sO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBDb250cm9sVG90YWw7IiwiXHJcbmltcG9ydCBjb3JldWlUYWJsZVV0aWxzICAgIGZyb20gJy4uL2NvcmV1aS50YWJsZS51dGlscyc7XHJcbmltcG9ydCBjb3JldWlUYWJsZVRwbCAgICAgIGZyb20gXCIuLi9jb3JldWkudGFibGUudGVtcGxhdGVzXCI7XHJcbmltcG9ydCBDb3JldWlUYWJsZVV0aWxzICAgIGZyb20gXCIuLi9jb3JldWkudGFibGUudXRpbHNcIjtcclxuaW1wb3J0IGNvcmV1aVRhYmxlRWxlbWVudHMgZnJvbSBcIi4uL2NvcmV1aS50YWJsZS5lbGVtZW50c1wiO1xyXG5pbXBvcnQgQ29udHJvbCBmcm9tIFwiLi4vYWJzdHJhY3QvQ29udHJvbFwiO1xyXG5cclxuXHJcbmNsYXNzIENvbnRyb2xTZWFyY2ggZXh0ZW5kcyBDb250cm9sIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPXHJcbiAgICAgKiBAcGFyYW0ge2NvcmV1aVRhYmxlSW5zdGFuY2V9IHRhYmxlXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gICAgICAgICAgICAgIG9wdGlvbnNcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IodGFibGUsIG9wdGlvbnMpIHtcclxuXHJcbiAgICAgICAgb3B0aW9ucyA9ICQuZXh0ZW5kKHRydWUsIHtcclxuICAgICAgICAgICAgYnRuOiB7XHJcbiAgICAgICAgICAgICAgICBhdHRyOiB7IGNsYXNzOiAnYnRuIGJ0bi1vdXRsaW5lLXNlY29uZGFyeScgfSxcclxuICAgICAgICAgICAgICAgIGNvbnRlbnQ6IG51bGwsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGJ0bkNsZWFyOiB7XHJcbiAgICAgICAgICAgICAgICBjb250ZW50OiBcIjxpIGNsYXNzPVxcXCJiaSBiaS14IHRleHQtZGFuZ2VyXFxcIj48L2k+XCIsXHJcbiAgICAgICAgICAgICAgICBhdHRyOiB7IGNsYXNzOiAnYnRuIGJ0bi1vdXRsaW5lLXNlY29uZGFyeScgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBidG5Db21wbGV0ZToge1xyXG4gICAgICAgICAgICAgICAgYXR0cjogeyBjbGFzczogJ2J0biBidG4tcHJpbWFyeScgfSxcclxuICAgICAgICAgICAgICAgIGNvbnRlbnQ6IG51bGxcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sIG9wdGlvbnMpO1xyXG5cclxuICAgICAgICBzdXBlcih0YWJsZSwgb3B0aW9ucyk7XHJcblxyXG5cclxuICAgICAgICBpZiAoICEgQ29yZXVpVGFibGVVdGlscy5pc09iamVjdCh0aGlzLl9vcHRpb25zLmJ0bikpIHtcclxuICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy5idG4gPSB7fTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICggISB0aGlzLl9vcHRpb25zLmJ0bi5oYXNPd25Qcm9wZXJ0eSgnY29udGVudCcpIHx8XHJcbiAgICAgICAgICAgIHR5cGVvZiB0aGlzLl9vcHRpb25zLmJ0bi5jb250ZW50ICE9PSAnc3RyaW5nJ1xyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICB0aGlzLl9vcHRpb25zLmJ0bi5jb250ZW50ID0gJzxpIGNsYXNzPVwiYmkgYmktc2VhcmNoXCI+PC9pPiAnICsgdGFibGUuZ2V0TGFuZygpLnNlYXJjaFxyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIGlmICggISBDb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KHRoaXMuX29wdGlvbnMuYnRuQ2xlYXIpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX29wdGlvbnMuYnRuQ2xlYXIgPSB7fTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICggISB0aGlzLl9vcHRpb25zLmJ0bkNsZWFyLmhhc093blByb3BlcnR5KCdjb250ZW50JykgfHxcclxuICAgICAgICAgICAgdHlwZW9mIHRoaXMuX29wdGlvbnMuYnRuQ2xlYXIuY29udGVudCAhPT0gJ3N0cmluZydcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy5idG5DbGVhci5jb250ZW50ID0gdGFibGUuZ2V0TGFuZygpLmNsZWFyXHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgaWYgKCAhIENvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QodGhpcy5fb3B0aW9ucy5idG5Db21wbGV0ZSkpIHtcclxuICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy5idG5Db21wbGV0ZSA9IHt9O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCAhIHRoaXMuX29wdGlvbnMuYnRuQ29tcGxldGUuaGFzT3duUHJvcGVydHkoJ2NvbnRlbnQnKSB8fFxyXG4gICAgICAgICAgICB0eXBlb2YgdGhpcy5fb3B0aW9ucy5idG5Db21wbGV0ZS5jb250ZW50ICE9PSAnc3RyaW5nJ1xyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICB0aGlzLl9vcHRpb25zLmJ0bkNvbXBsZXRlLmNvbnRlbnQgPSB0YWJsZS5nZXRMYW5nKCkuc2VhcmNoQWN0aW9uXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCk0L7RgNC80LjRgNC+0LLQsNC90LjQtSDQutC+0L3RgtC10L3RgtCwINC00LvRjyDRgNCw0LfQvNC10YnQtdC90LjRjyDQvdCwINGB0YLRgNCw0L3QuNGG0LVcclxuICAgICAqIEByZXR1cm5zIHtqUXVlcnl9XHJcbiAgICAgKi9cclxuICAgIHJlbmRlcigpIHtcclxuXHJcbiAgICAgICAgbGV0IGJ0bkF0dHIgICAgPSBbXTtcclxuICAgICAgICBsZXQgYnRuQ29udGVudCA9ICcnO1xyXG4gICAgICAgIGxldCBidG5DbGVhciAgID0gJyc7XHJcbiAgICAgICAgbGV0IHRoYXQgICAgICAgPSB0aGlzO1xyXG4gICAgICAgIGxldCB0YWJsZSAgICAgID0gdGhpcy5fdGFibGU7XHJcblxyXG5cclxuICAgICAgICBpZiAoICEgY29yZXVpVGFibGVVdGlscy5pc09iamVjdCh0aGlzLl9vcHRpb25zLmJ0bikpIHtcclxuICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy5idG4gPSB7fTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCAhIGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QodGhpcy5fb3B0aW9ucy5idG4uYXR0cikpIHtcclxuICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy5idG4uYXR0ciA9IHt9O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCAhIHRoaXMuX29wdGlvbnMuYnRuLmF0dHIuaGFzT3duUHJvcGVydHkoJ2NsYXNzJykgfHxcclxuICAgICAgICAgICAgdHlwZW9mIHRoaXMuX29wdGlvbnMuYnRuLmF0dHIuY2xhc3MgIT09ICdzdHJpbmcnXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX29wdGlvbnMuYnRuLmF0dHIuY2xhc3MgPSAnYnRuLXNlYXJjaC10b2dnbGUnO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuX29wdGlvbnMuYnRuLmF0dHIuY2xhc3MgKz0gJyBidG4tc2VhcmNoLXRvZ2dsZSc7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAkLmVhY2godGhpcy5fb3B0aW9ucy5idG4uYXR0ciwgZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XHJcbiAgICAgICAgICAgIGJ0bkF0dHIucHVzaChuYW1lICsgJz1cIicgKyB2YWx1ZSArICdcIicpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBpZiAodHlwZW9mIHRoaXMuX29wdGlvbnMuYnRuLmNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgIGJ0bkNvbnRlbnQgPSB0aGlzLl9vcHRpb25zLmJ0bi5jb250ZW50O1xyXG4gICAgICAgIH1cclxuXHJcblxyXG5cclxuICAgICAgICBpZiAodGhpcy5fdGFibGUuZ2V0U2VhcmNoRGF0YSgpLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgYnRuQ2xlYXIgPSB0aGlzLl9yZW5kZXJCdG5DbGVhcigpO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIGxldCBjb250cm9sID0gJChjb3JldWlUYWJsZVV0aWxzLnJlbmRlcihjb3JldWlUYWJsZVRwbFsnY29udHJvbHMvc2VhcmNoLmh0bWwnXSwge1xyXG4gICAgICAgICAgICBidG5Db250ZW50OiBidG5Db250ZW50LFxyXG4gICAgICAgICAgICBidG5BdHRyOiBidG5BdHRyLmxlbmd0aCA+IDAgPyAoJyAnICsgYnRuQXR0ci5qb2luKCcgJykpIDogJycsXHJcbiAgICAgICAgICAgIGJ0bkNsZWFyOiBidG5DbGVhclxyXG4gICAgICAgIH0pKTtcclxuXHJcbiAgICAgICAgbGV0IGJ1dHRvblRvZ2dsZSA9IGNvbnRyb2wuZmluZCgnLmJ0bi1zZWFyY2gtdG9nZ2xlJyk7XHJcbiAgICAgICAgbGV0IGJ1dHRvbkNsZWFyICA9IGNvbnRyb2wuZmluZCgnLmJ0bi1jbGVhcicpO1xyXG5cclxuICAgICAgICBidXR0b25Ub2dnbGUuY2xpY2soZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBsZXQgY29udGFpbmVyICAgICAgICA9IGNvcmV1aVRhYmxlRWxlbWVudHMuZ2V0U2VhcmNoQ29udGFpbmVyKHRhYmxlLmdldElkKCkpO1xyXG4gICAgICAgICAgICBsZXQgY29sdW1uc0NvbnRhaW5lciA9IGNvcmV1aVRhYmxlRWxlbWVudHMuZ2V0Q29sdW1uc0NvbnRhaW5lcih0YWJsZS5nZXRJZCgpKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChjb2x1bW5zQ29udGFpbmVyWzBdKSB7XHJcbiAgICAgICAgICAgICAgICBjb2x1bW5zQ29udGFpbmVyLmhpZGUoKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGNvbnRhaW5lclswXSkge1xyXG4gICAgICAgICAgICAgICAgY29udGFpbmVyLmZhZGVUb2dnbGUoJ2Zhc3QnKTtcclxuXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgY29udHJvbHMgICAgICAgICAgID0gW107XHJcbiAgICAgICAgICAgICAgICBsZXQgYnRuQ29tcGxldGVBdHRyICAgID0gW107XHJcbiAgICAgICAgICAgICAgICBsZXQgYnRuQ29tcGxldGVDb250ZW50ID0gJyc7XHJcbiAgICAgICAgICAgICAgICBsZXQgdGFibGVPcHRpb25zICAgICAgID0gdGFibGUuZ2V0T3B0aW9ucygpO1xyXG4gICAgICAgICAgICAgICAgbGV0IGxhYmVsV2lkdGggICAgICAgICA9IHRhYmxlT3B0aW9ucy5zZWFyY2guaGFzT3duUHJvcGVydHkoJ2xhYmVsV2lkdGgnKSAmJiB0YWJsZU9wdGlvbnMuc2VhcmNoLmxhYmVsV2lkdGhcclxuICAgICAgICAgICAgICAgICAgICA/IHRhYmxlT3B0aW9ucy5zZWFyY2gubGFiZWxXaWR0aFxyXG4gICAgICAgICAgICAgICAgICAgIDogMTYwO1xyXG5cclxuICAgICAgICAgICAgICAgIHRhYmxlLl9zZWFyY2gubWFwKGZ1bmN0aW9uIChzZWFyY2hDb250cm9sKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IG9wdGlvbnMgPSBzZWFyY2hDb250cm9sLmdldE9wdGlvbnMoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuaGFzT3duUHJvcGVydHkoJ2ZpZWxkJykgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIG9wdGlvbnMuZmllbGQgPT09ICdzdHJpbmcnICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnMuZmllbGRcclxuICAgICAgICAgICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGRlc2NyaXB0aW9uTGFiZWwgPSBvcHRpb25zLmhhc093blByb3BlcnR5KCdkZXNjcmlwdGlvbkxhYmVsJykgJiYgb3B0aW9ucy5kZXNjcmlwdGlvbkxhYmVsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IG9wdGlvbnMuZGVzY3JpcHRpb25MYWJlbFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBudWxsO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGNvbnRyb2xDb250YWluZXIgPSAkKGNvcmV1aVRhYmxlVXRpbHMucmVuZGVyKGNvcmV1aVRhYmxlVHBsWydjb250cm9scy9zZWFyY2gvY29udHJvbC5odG1sJ10sIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsV2lkdGg6ICAgICAgIGxhYmVsV2lkdGggKyAodHlwZW9mIGxhYmVsV2lkdGggPT09ICdudW1iZXInID8gJ3B4JyA6ICcnKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uTGFiZWw6IGRlc2NyaXB0aW9uTGFiZWwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogICAgICAgICAgICBvcHRpb25zLmhhc093blByb3BlcnR5KCdsYWJlbCcpICYmIHR5cGVvZiBvcHRpb25zLmxhYmVsID09PSAnc3RyaW5nJyA/IG9wdGlvbnMubGFiZWwgOiAnJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAgICAgIG9wdGlvbnMuaGFzT3duUHJvcGVydHkoJ2Rlc2NyaXB0aW9uJykgJiYgdHlwZW9mIG9wdGlvbnMuZGVzY3JpcHRpb24gPT09ICdzdHJpbmcnID8gb3B0aW9ucy5kZXNjcmlwdGlvbiA6ICcnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VmZml4OiAgICAgICAgICAgb3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnc3VmZml4JykgJiYgdHlwZW9mIG9wdGlvbnMuc3VmZml4ID09PSAnc3RyaW5nJyA/IG9wdGlvbnMuc3VmZml4IDogJycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xDb250YWluZXIuZmluZCgnLmNvcmV1aS10YWJsZV9fc2VhcmNoLWNvbnRyb2xfY29udGVudCcpLnByZXBlbmQoc2VhcmNoQ29udHJvbC5yZW5kZXIoKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9scy5wdXNoKGNvbnRyb2xDb250YWluZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuXHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCAhIGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QodGhhdC5fb3B0aW9ucy5idG5Db21wbGV0ZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGF0Ll9vcHRpb25zLmJ0bkNvbXBsZXRlID0ge307XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCAhIGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QodGhhdC5fb3B0aW9ucy5idG5Db21wbGV0ZS5hdHRyKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoYXQuX29wdGlvbnMuYnRuQ29tcGxldGUuYXR0ciA9IHt9O1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0aGF0Ll9vcHRpb25zLmJ0bkNvbXBsZXRlLmF0dHIuaGFzT3duUHJvcGVydHkoJ3R5cGUnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGF0Ll9vcHRpb25zLmJ0bkNvbXBsZXRlLmF0dHIudHlwZTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoICEgdGhhdC5fb3B0aW9ucy5idG5Db21wbGV0ZS5hdHRyLmhhc093blByb3BlcnR5KCdjbGFzcycpIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZW9mIHRoYXQuX29wdGlvbnMuYnRuQ29tcGxldGUuYXR0ci5jbGFzcyAhPT0gJ3N0cmluZydcclxuICAgICAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoYXQuX29wdGlvbnMuYnRuQ29tcGxldGUuYXR0ci5jbGFzcyA9ICdidG4tY29tcGxldGUnO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGF0Ll9vcHRpb25zLmJ0bkNvbXBsZXRlLmF0dHIuY2xhc3MgKz0gJyBidG4tY29tcGxldGUnO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KHRoYXQuX29wdGlvbnMuYnRuQ29tcGxldGUuYXR0cikpIHtcclxuICAgICAgICAgICAgICAgICAgICAkLmVhY2godGhhdC5fb3B0aW9ucy5idG5Db21wbGV0ZS5hdHRyLCBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIHZhbHVlKSA+PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBidG5Db21wbGV0ZUF0dHIucHVzaChuYW1lICsgJz1cIicgKyB2YWx1ZSArICdcIicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHRoYXQuX29wdGlvbnMuYnRuQ29tcGxldGUuY29udGVudCA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgICAgICAgICBidG5Db21wbGV0ZUNvbnRlbnQgPSB0aGF0Ll9vcHRpb25zLmJ0bkNvbXBsZXRlLmNvbnRlbnQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgbGV0IHNlYXJjaENvbnRhaW5lciA9ICQoY29yZXVpVGFibGVVdGlscy5yZW5kZXIoY29yZXVpVGFibGVUcGxbJ2NvbnRyb2xzL3NlYXJjaC9jb250YWluZXIuaHRtbCddLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGFiZWxXaWR0aDogbGFiZWxXaWR0aCArICh0eXBlb2YgbGFiZWxXaWR0aCA9PT0gJ251bWJlcicgPyAncHgnIDogJycpLFxyXG4gICAgICAgICAgICAgICAgICAgIGJ0bkNvbXBsZXRlQXR0cjogICAgYnRuQ29tcGxldGVBdHRyLmxlbmd0aCA+IDAgPyAoJyAnICsgYnRuQ29tcGxldGVBdHRyLmpvaW4oJyAnKSkgOiAnJyxcclxuICAgICAgICAgICAgICAgICAgICBidG5Db21wbGV0ZUNvbnRlbnQ6IGJ0bkNvbXBsZXRlQ29udGVudCxcclxuICAgICAgICAgICAgICAgIH0pKTtcclxuXHJcbiAgICAgICAgICAgICAgICAkKCcuYnRuLWNvbXBsZXRlJywgc2VhcmNoQ29udGFpbmVyKS5jbGljayhmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGFibGUuc2VhcmNoUmVjb3JkcygpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBsZXQgY29udGFpbmVyID0gY29yZXVpVGFibGVFbGVtZW50cy5nZXRTZWFyY2hDb250YWluZXIodGFibGUuZ2V0SWQoKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjb250YWluZXJbMF0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyLmZhZGVPdXQoMjAwKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY29udHJvbHMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBzZWFyY2hDb250cm9scyA9IHNlYXJjaENvbnRhaW5lci5maW5kKCcuY29yZXVpLXRhYmxlX19zZWFyY2hfY29udHJvbHMnKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbHMubWFwKGZ1bmN0aW9uIChjb250cm9sKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlYXJjaENvbnRyb2xzLmFwcGVuZChjb250cm9sKTtcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGxldCB3cmFwcGVyID0gY29yZXVpVGFibGVFbGVtZW50cy5nZXRXcmFwcGVyKHRhYmxlLmdldElkKCkpO1xyXG4gICAgICAgICAgICAgICAgd3JhcHBlci5iZWZvcmUoc2VhcmNoQ29udGFpbmVyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuXHJcbiAgICAgICAgYnV0dG9uQ2xlYXIuY2xpY2soZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB0YWJsZS5jbGVhclNlYXJjaCgpO1xyXG5cclxuICAgICAgICAgICAgbGV0IGNvbnRhaW5lciA9IGNvcmV1aVRhYmxlRWxlbWVudHMuZ2V0U2VhcmNoQ29udGFpbmVyKHRhYmxlLmdldElkKCkpO1xyXG5cclxuICAgICAgICAgICAgaWYgKGNvbnRhaW5lclswXSkge1xyXG4gICAgICAgICAgICAgICAgY29udGFpbmVyLmZhZGVPdXQoJ2Zhc3QnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBidXR0b25DbGVhci5yZW1vdmUoKTtcclxuICAgICAgICB9KTtcclxuXHJcblxyXG4gICAgICAgIHRhYmxlLm9uKCdzZWFyY2hfY2hhbmdlJywgZnVuY3Rpb24gKHNlYXJjaERhdGEpIHtcclxuICAgICAgICAgICAgbGV0IGJ1dHRvbkNsZWFyID0gJCgnYnV0dG9uLmJ0bi1jbGVhcicsIGNvbnRyb2wpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHNlYXJjaERhdGEubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCAhIGJ1dHRvbkNsZWFyWzBdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGJ0bkNsZWFyID0gJCh0aGF0Ll9yZW5kZXJCdG5DbGVhcigpKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgYnRuQ2xlYXIuY2xpY2soZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0YWJsZS5jbGVhclNlYXJjaCgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGNvbnRhaW5lciA9IGNvcmV1aVRhYmxlRWxlbWVudHMuZ2V0U2VhcmNoQ29udGFpbmVyKHRhYmxlLmdldElkKCkpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbnRhaW5lclswXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyLmZhZGVPdXQoJ2Zhc3QnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBidG5DbGVhci5yZW1vdmUoKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgYnRuQ2xlYXIuaW5zZXJ0QWZ0ZXIoYnV0dG9uVG9nZ2xlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBidXR0b25DbGVhci5yZW1vdmUoKTtcclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgY29udGFpbmVyID0gY29yZXVpVGFibGVFbGVtZW50cy5nZXRTZWFyY2hDb250YWluZXIodGFibGUuZ2V0SWQoKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGNvbnRhaW5lclswXSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lci5mYWRlT3V0KCdmYXN0Jyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcblxyXG4gICAgICAgIHJldHVybiBjb250cm9sO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCg0LXQvdC00LXRgCDQutC90L7Qv9C60Lgg0L7RgtC80LXQvdGLXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBfcmVuZGVyQnRuQ2xlYXIgKCkge1xyXG5cclxuICAgICAgICBsZXQgYXR0cmlidXRlcyA9IFtdO1xyXG4gICAgICAgIGxldCBjb250ZW50ICAgID0gJyc7XHJcblxyXG4gICAgICAgIGlmICggISBjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KHRoaXMuX29wdGlvbnMuYnRuQ2xlYXIpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX29wdGlvbnMuYnRuQ2xlYXIgPSB7fTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCAhIGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QodGhpcy5fb3B0aW9ucy5idG5DbGVhci5hdHRyKSkge1xyXG4gICAgICAgICAgICB0aGlzLl9vcHRpb25zLmJ0bkNsZWFyLmF0dHIgPSB7fTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICggISB0aGlzLl9vcHRpb25zLmJ0bkNsZWFyLmF0dHIuaGFzT3duUHJvcGVydHkoJ2NsYXNzJykgfHxcclxuICAgICAgICAgICAgdHlwZW9mIHRoaXMuX29wdGlvbnMuYnRuQ2xlYXIuYXR0ci5jbGFzcyAhPT0gJ3N0cmluZydcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy5idG5DbGVhci5hdHRyLmNsYXNzID0gJ2J0bi1jbGVhcic7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy5idG5DbGVhci5hdHRyLmNsYXNzICs9ICcgYnRuLWNsZWFyJztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICQuZWFjaCh0aGlzLl9vcHRpb25zLmJ0bkNsZWFyLmF0dHIsIGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xyXG4gICAgICAgICAgICBhdHRyaWJ1dGVzLnB1c2gobmFtZSArICc9XCInICsgdmFsdWUgKyAnXCInKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLl9vcHRpb25zLmJ0bkNsZWFyLmNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgIGNvbnRlbnQgPSB0aGlzLl9vcHRpb25zLmJ0bkNsZWFyLmNvbnRlbnQ7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgcmV0dXJuIGNvcmV1aVRhYmxlVXRpbHMucmVuZGVyKGNvcmV1aVRhYmxlVHBsWydjb250cm9scy9zZWFyY2gvY2xlYXIuaHRtbCddLCB7XHJcbiAgICAgICAgICAgIGNvbnRlbnQ6IGNvbnRlbnQsXHJcbiAgICAgICAgICAgIGF0dHI6IGF0dHJpYnV0ZXMubGVuZ3RoID4gMCA/ICgnICcgKyBhdHRyaWJ1dGVzLmpvaW4oJyAnKSkgOiAnJyxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgQ29udHJvbFNlYXJjaDsiLCJcclxuaW1wb3J0IGNvcmV1aVRhYmxlVXRpbHMgICAgZnJvbSAnLi4vY29yZXVpLnRhYmxlLnV0aWxzJztcclxuaW1wb3J0IGNvcmV1aVRhYmxlVHBsICAgICAgZnJvbSBcIi4uL2NvcmV1aS50YWJsZS50ZW1wbGF0ZXNcIjtcclxuaW1wb3J0IENvcmV1aVRhYmxlVXRpbHMgICAgZnJvbSBcIi4uL2NvcmV1aS50YWJsZS51dGlsc1wiO1xyXG5pbXBvcnQgY29yZXVpVGFibGVFbGVtZW50cyBmcm9tIFwiLi4vY29yZXVpLnRhYmxlLmVsZW1lbnRzXCI7XHJcbmltcG9ydCBDb250cm9sICAgICAgICAgICAgIGZyb20gXCIuLi9hYnN0cmFjdC9Db250cm9sXCI7XHJcblxyXG5cclxuY2xhc3MgQ29udHJvbENvbHVtbnMgZXh0ZW5kcyBDb250cm9sIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPXHJcbiAgICAgKiBAcGFyYW0ge2NvcmV1aVRhYmxlSW5zdGFuY2V9IHRhYmxlXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gICAgICAgICAgICAgIG9wdGlvbnNcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IodGFibGUsIG9wdGlvbnMpIHtcclxuXHJcbiAgICAgICAgb3B0aW9ucyA9ICQuZXh0ZW5kKHRydWUsIHtcclxuICAgICAgICAgICAgaWQ6IG51bGwsXHJcbiAgICAgICAgICAgIHR5cGU6ICdjb2x1bW5zJyxcclxuICAgICAgICAgICAgYnRuOiB7XHJcbiAgICAgICAgICAgICAgICBjb250ZW50OiAnPGkgY2xhc3M9XCJiaSBiaS1sYXlvdXQtdGhyZWUtY29sdW1uc1wiPjwvaT4nLFxyXG4gICAgICAgICAgICAgICAgYXR0cjoge1xyXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzOiAnYnRuIGJ0bi1vdXRsaW5lLXNlY29uZGFyeSdcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgYnRuQ29tcGxldGU6IHtcclxuICAgICAgICAgICAgICAgIGNvbnRlbnQ6IG51bGwsXHJcbiAgICAgICAgICAgICAgICBhdHRyOiB7IGNsYXNzOiAnYnRuIGJ0bi1wcmltYXJ5JyB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LCBvcHRpb25zKTtcclxuXHJcbiAgICAgICAgc3VwZXIodGFibGUsIG9wdGlvbnMpO1xyXG5cclxuXHJcbiAgICAgICAgaWYgKCAhIENvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QodGhpcy5fb3B0aW9ucy5idG4pKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX29wdGlvbnMuYnRuID0ge307XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoICEgQ29yZXVpVGFibGVVdGlscy5pc09iamVjdCh0aGlzLl9vcHRpb25zLmJ0bkNvbXBsZXRlKSkge1xyXG4gICAgICAgICAgICB0aGlzLl9vcHRpb25zLmJ0bkNvbXBsZXRlID0ge307XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoQ29yZXVpVGFibGVVdGlscy5pc09iamVjdCh0aGlzLl9vcHRpb25zLmJ0bkNvbXBsZXRlKSAmJlxyXG4gICAgICAgICAgICB0eXBlb2YgdGhpcy5fb3B0aW9ucy5idG5Db21wbGV0ZS5jb250ZW50ICE9PSAnc3RyaW5nJ1xyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICB0aGlzLl9vcHRpb25zLmJ0bkNvbXBsZXRlLmNvbnRlbnQgPSB0YWJsZS5nZXRMYW5nKCkuY29tcGxldGVcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KTQvtGA0LzQuNGA0L7QstCw0L3QuNC1INC60L7QvdGC0LXQvdGC0LAg0LTQu9GPINGA0LDQt9C80LXRidC10L3QuNGPINC90LAg0YHRgtGA0LDQvdC40YbQtVxyXG4gICAgICogQHJldHVybnMge2pRdWVyeX1cclxuICAgICAqL1xyXG4gICAgcmVuZGVyKCkge1xyXG5cclxuICAgICAgICBsZXQgdGhhdCAgICAgICA9IHRoaXM7XHJcbiAgICAgICAgbGV0IHRhYmxlICAgICAgPSB0aGlzLl90YWJsZTtcclxuICAgICAgICBsZXQgYXR0cmlidXRlcyA9IFtdO1xyXG5cclxuICAgICAgICBpZiAoY29yZXVpVGFibGVVdGlscy5pc09iamVjdCh0aGlzLl9vcHRpb25zLmJ0bi5hdHRyKSkge1xyXG4gICAgICAgICAgICAkLmVhY2godGhpcy5fb3B0aW9ucy5idG4uYXR0ciwgZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2YgdmFsdWUpID49IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzLnB1c2gobmFtZSArICc9XCInICsgdmFsdWUgKyAnXCInKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgYnRuID0gJChjb3JldWlUYWJsZVV0aWxzLnJlbmRlcihjb3JldWlUYWJsZVRwbFsnY29udHJvbHMvY29sdW1ucy5odG1sJ10sIHtcclxuICAgICAgICAgICAgYnRuQ29udGVudDogdGhpcy5fb3B0aW9ucy5idG4uY29udGVudCxcclxuICAgICAgICAgICAgYnRuQXR0cjogYXR0cmlidXRlcy5sZW5ndGggPiAwID8gKCcgJyArIGF0dHJpYnV0ZXMuam9pbignICcpKSA6ICcnLFxyXG4gICAgICAgIH0pKTtcclxuXHJcblxyXG4gICAgICAgIGJ0bi5jbGljayhmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGxldCBjb250YWluZXIgICAgICAgPSBjb3JldWlUYWJsZUVsZW1lbnRzLmdldENvbHVtbnNDb250YWluZXIodGFibGUuZ2V0SWQoKSk7XHJcbiAgICAgICAgICAgIGxldCBjb250YWluZXJTZWFyY2ggPSBjb3JldWlUYWJsZUVsZW1lbnRzLmdldFNlYXJjaENvbnRhaW5lcih0YWJsZS5nZXRJZCgpKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChjb250YWluZXJTZWFyY2hbMF0pIHtcclxuICAgICAgICAgICAgICAgIGNvbnRhaW5lclNlYXJjaC5oaWRlKCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChjb250YWluZXJbMF0pIHtcclxuICAgICAgICAgICAgICAgIGNvbnRhaW5lci5mYWRlVG9nZ2xlKCdmYXN0Jyk7XHJcblxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgbGV0IGNvbHVtbnMgICAgICAgICAgICA9IFtdO1xyXG4gICAgICAgICAgICAgICAgbGV0IHNob3dBbGwgICAgICAgICAgICA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBsZXQgYnRuQ29tcGxldGVBdHRyICAgID0gW107XHJcbiAgICAgICAgICAgICAgICBsZXQgYnRuQ29tcGxldGVDb250ZW50ID0gJyc7XHJcbiAgICAgICAgICAgICAgICBsZXQgd3JhcHBlciAgICAgICAgICAgID0gY29yZXVpVGFibGVFbGVtZW50cy5nZXRXcmFwcGVyKHRhYmxlLmdldElkKCkpO1xyXG5cclxuICAgICAgICAgICAgICAgIHRhYmxlLl9jb2x1bW5zLm1hcChmdW5jdGlvbiAoY29sdW1uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IG9wdGlvbnMgPSBjb2x1bW4uZ2V0T3B0aW9ucygpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnZmllbGQnKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlb2Ygb3B0aW9ucy5maWVsZCA9PT0gJ3N0cmluZycgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5maWVsZFxyXG4gICAgICAgICAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgaXNTaG93ID0gY29sdW1uLmlzU2hvdygpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgY29sdW1ucy5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkOiBvcHRpb25zLmZpZWxkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6IG9wdGlvbnMuaGFzT3duUHJvcGVydHkoJ2xhYmVsJykgJiYgdHlwZW9mIG9wdGlvbnMubGFiZWwgPT09ICdzdHJpbmcnID8gb3B0aW9ucy5sYWJlbCA6ICcnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvdzogaXNTaG93LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggISBpc1Nob3cpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3dBbGwgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgb3B0aW9ucyA9IHRoYXQuZ2V0T3B0aW9ucygpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICggISBjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KG9wdGlvbnMuYnRuQ29tcGxldGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5idG5Db21wbGV0ZSA9IHt9O1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmICggISBjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KG9wdGlvbnMuYnRuQ29tcGxldGUuYXR0cikpIHtcclxuICAgICAgICAgICAgICAgICAgICBvcHRpb25zLmJ0bkNvbXBsZXRlLmF0dHIgPSB7fTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5idG5Db21wbGV0ZS5hdHRyLmhhc093blByb3BlcnR5KCd0eXBlJykpIHtcclxuICAgICAgICAgICAgICAgICAgICBkZWxldGUgb3B0aW9ucy5idG5Db21wbGV0ZS5hdHRyLnR5cGU7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCAhIG9wdGlvbnMuYnRuQ29tcGxldGUuYXR0ci5oYXNPd25Qcm9wZXJ0eSgnY2xhc3MnKSB8fFxyXG4gICAgICAgICAgICAgICAgICAgIHR5cGVvZiBvcHRpb25zLmJ0bkNvbXBsZXRlLmF0dHIuY2xhc3MgIT09ICdzdHJpbmcnXHJcbiAgICAgICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgICAgICBvcHRpb25zLmJ0bkNvbXBsZXRlLmF0dHIuY2xhc3MgPSAnYnRuLWNvbXBsZXRlJztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5idG5Db21wbGV0ZS5hdHRyLmNsYXNzICs9ICcgYnRuLWNvbXBsZXRlJztcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY29yZXVpVGFibGVVdGlscy5pc09iamVjdChvcHRpb25zLmJ0bkNvbXBsZXRlLmF0dHIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJC5lYWNoKG9wdGlvbnMuYnRuQ29tcGxldGUuYXR0ciwgZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiB2YWx1ZSkgPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnRuQ29tcGxldGVBdHRyLnB1c2gobmFtZSArICc9XCInICsgdmFsdWUgKyAnXCInKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5idG5Db21wbGV0ZS5jb250ZW50ID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICAgICAgICAgIGJ0bkNvbXBsZXRlQ29udGVudCA9IG9wdGlvbnMuYnRuQ29tcGxldGUuY29udGVudDtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgICAgICAgICAgbGV0IGNvbnRhaW5lckxpc3QgPSAkKGNvcmV1aVRhYmxlVXRpbHMucmVuZGVyKGNvcmV1aVRhYmxlVHBsWydjb250cm9scy9jb2x1bW5zL2xpc3QuaHRtbCddLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2hvd0FsbDogICAgICAgICAgICBzaG93QWxsLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbHVtbnM6ICAgICAgICAgICAgY29sdW1ucyxcclxuICAgICAgICAgICAgICAgICAgICBidG5Db21wbGV0ZUF0dHI6ICAgIGJ0bkNvbXBsZXRlQXR0ci5sZW5ndGggPiAwID8gKCcgJyArIGJ0bkNvbXBsZXRlQXR0ci5qb2luKCcgJykpIDogJycsXHJcbiAgICAgICAgICAgICAgICAgICAgYnRuQ29tcGxldGVDb250ZW50OiBidG5Db21wbGV0ZUNvbnRlbnQsXHJcbiAgICAgICAgICAgICAgICAgICAgbGFuZzogICAgICAgICAgICAgICB0YWJsZS5nZXRMYW5nKCksXHJcbiAgICAgICAgICAgICAgICB9KSk7XHJcblxyXG5cclxuICAgICAgICAgICAgICAgICQoJy5jb3JldWktdGFibGVfX2NoZWNrX2FsbCBpbnB1dCcsIGNvbnRhaW5lckxpc3QpLmNoYW5nZShmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJCgnLmNvcmV1aS10YWJsZV9jaGVjay1jb2x1bW4gaW5wdXQnLCBjb250YWluZXJMaXN0KS5wcm9wKCdjaGVja2VkJywgJCh0aGlzKS5pcyhcIjpjaGVja2VkXCIpKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuXHJcbiAgICAgICAgICAgICAgICAkKCcuYnRuLWNvbXBsZXRlJywgY29udGFpbmVyTGlzdCkuY2xpY2soZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBjb2x1bW5zID0gW107XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICQoJy5jb3JldWktdGFibGVfY2hlY2stY29sdW1uIGlucHV0OmNoZWNrZWQnLCBjb250YWluZXJMaXN0KS5lYWNoKGZ1bmN0aW9uIChrZXksIGlucHV0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbHVtbnMucHVzaCgkKGlucHV0KS52YWwoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHRhYmxlLnNldENvbHVtbnNTaG93KGNvbHVtbnMpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBjb250YWluZXJMaXN0LmZhZGVPdXQoJ2Zhc3QnKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuXHJcbiAgICAgICAgICAgICAgICB3cmFwcGVyLmJlZm9yZShjb250YWluZXJMaXN0KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gYnRuO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBDb250cm9sQ29sdW1uczsiLCJcclxuaW1wb3J0IGNvcmV1aVRhYmxlVHBsICAgZnJvbSAnLi4vY29yZXVpLnRhYmxlLnRlbXBsYXRlcyc7XHJcbmltcG9ydCBjb3JldWlUYWJsZVV0aWxzIGZyb20gJy4uL2NvcmV1aS50YWJsZS51dGlscyc7XHJcbmltcG9ydCBDb250cm9sICAgICAgICAgIGZyb20gXCIuLi9hYnN0cmFjdC9Db250cm9sXCI7XHJcblxyXG5jbGFzcyBDb250cm9sQ2FwdGlvbiBleHRlbmRzIENvbnRyb2wge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y9cclxuICAgICAqIEBwYXJhbSB7Y29yZXVpVGFibGVJbnN0YW5jZX0gdGFibGVcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSAgICAgICAgICAgICAgb3B0aW9uc1xyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3Rvcih0YWJsZSwgb3B0aW9ucykge1xyXG5cclxuICAgICAgICBvcHRpb25zID0gJC5leHRlbmQodHJ1ZSwge1xyXG4gICAgICAgICAgICBpZDogbnVsbCxcclxuICAgICAgICAgICAgdHlwZTogJ2NhcHRpb24nLFxyXG4gICAgICAgICAgICB0aXRsZTogbnVsbCxcclxuICAgICAgICAgICAgZGVzY3JpcHRpb246IG51bGwsXHJcbiAgICAgICAgICAgIHZhbHVlOiBudWxsLFxyXG4gICAgICAgIH0sIG9wdGlvbnMpO1xyXG5cclxuICAgICAgICBzdXBlcih0YWJsZSwgb3B0aW9ucyk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KTQvtGA0LzQuNGA0L7QstCw0L3QuNC1INC60L7QvdGC0LXQvdGC0LAg0LTQu9GPINGA0LDQt9C80LXRidC10L3QuNGPINC90LAg0YHRgtGA0LDQvdC40YbQtVxyXG4gICAgICogQHJldHVybnMge3N0cmluZ31cclxuICAgICAqL1xyXG4gICAgcmVuZGVyKCkge1xyXG5cclxuICAgICAgICByZXR1cm4gY29yZXVpVGFibGVVdGlscy5yZW5kZXIoY29yZXVpVGFibGVUcGxbJ2NvbnRyb2xzL2NhcHRpb24uaHRtbCddLCB7XHJcbiAgICAgICAgICAgIHRpdGxlOiB0aGlzLl9vcHRpb25zLnRpdGxlLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogdGhpcy5fb3B0aW9ucy5kZXNjcmlwdGlvbixcclxuICAgICAgICAgICAgdmFsdWU6IHRoaXMuX29wdGlvbnMudmFsdWUsXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IENvbnRyb2xDYXB0aW9uOyIsIlxyXG5pbXBvcnQgY29yZXVpVGFibGVUcGwgICBmcm9tIFwiLi4vY29yZXVpLnRhYmxlLnRlbXBsYXRlc1wiO1xyXG5pbXBvcnQgY29yZXVpVGFibGVVdGlscyBmcm9tIFwiLi4vY29yZXVpLnRhYmxlLnV0aWxzXCI7XHJcbmltcG9ydCBDb250cm9sICAgICAgICAgIGZyb20gXCIuLi9hYnN0cmFjdC9Db250cm9sXCI7XHJcblxyXG5cclxuY2xhc3MgQ29udHJvbEZpbHRlckNsZWFyIGV4dGVuZHMgQ29udHJvbCB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQmNC90LjRhtC40LDQu9C40LfQsNGG0LjRj1xyXG4gICAgICogQHBhcmFtIHtjb3JldWlUYWJsZUluc3RhbmNlfSB0YWJsZVxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9ICAgICAgICAgICAgICBvcHRpb25zXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKHRhYmxlLCBvcHRpb25zKSB7XHJcblxyXG4gICAgICAgIG9wdGlvbnMgPSAkLmV4dGVuZCh0cnVlLCB7XHJcbiAgICAgICAgICAgIGlkOiBudWxsLFxyXG4gICAgICAgICAgICB0eXBlOiAnZmlsdGVyX2NsZWFyJyxcclxuICAgICAgICAgICAgY29udGVudDogbnVsbCxcclxuICAgICAgICAgICAgYXR0cjoge1xyXG4gICAgICAgICAgICAgICAgY2xhc3M6ICdidG4gYnRuLXNlY29uZGFyeSdcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9LCBvcHRpb25zKTtcclxuXHJcbiAgICAgICAgc3VwZXIodGFibGUsIG9wdGlvbnMpO1xyXG5cclxuICAgICAgICBpZiAoICEgdGhpcy5fb3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnY29udGVudCcpIHx8XHJcbiAgICAgICAgICAgIHR5cGVvZiB0aGlzLl9vcHRpb25zLmNvbnRlbnQgIT09ICdzdHJpbmcnXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX29wdGlvbnMuY29udGVudCA9ICc8aSBjbGFzcz1cImJpIGJpLXhcIj48L2k+ICcgKyB0YWJsZS5nZXRMYW5nKCkuY2xlYXJcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KTQvtGA0LzQuNGA0L7QstCw0L3QuNC1INC60L7QvdGC0LXQvdGC0LBcclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIHJlbmRlcigpIHtcclxuXHJcbiAgICAgICAgbGV0IG9wdGlvbnMgPSB0aGlzLmdldE9wdGlvbnMoKTtcclxuICAgICAgICBsZXQgdGFibGUgICA9IHRoaXMuX3RhYmxlO1xyXG5cclxuICAgICAgICBpZiAoICEgY29yZXVpVGFibGVVdGlscy5pc09iamVjdChvcHRpb25zLmF0dHIpKSB7XHJcbiAgICAgICAgICAgIG9wdGlvbnMuYXR0ciA9IHt9O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKG9wdGlvbnMuYXR0ci5oYXNPd25Qcm9wZXJ0eSgndHlwZScpKSB7XHJcbiAgICAgICAgICAgIGRlbGV0ZSBvcHRpb25zLmF0dHIudHlwZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBmaWx0ZXJEYXRhID0gdGFibGUuZ2V0RmlsdGVyRGF0YSgpO1xyXG5cclxuICAgICAgICBpZiAoZmlsdGVyRGF0YS5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuYXR0ci5oYXNPd25Qcm9wZXJ0eSgnc3R5bGUnKSAmJiB0eXBlb2Ygb3B0aW9ucy5hdHRyLnN0eWxlID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICAgICAgb3B0aW9ucy5hdHRyLnN0eWxlICs9ICc7ZGlzcGxheTpub25lOydcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIG9wdGlvbnMuYXR0ci5zdHlsZSA9IFwiZGlzcGxheTpub25lXCJcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IGF0dHIgPSBbXTtcclxuXHJcbiAgICAgICAgJC5lYWNoKG9wdGlvbnMuYXR0ciwgZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XHJcbiAgICAgICAgICAgIGlmIChbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiB2YWx1ZSkgPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgYXR0ci5wdXNoKG5hbWUgKyAnPVwiJyArIHZhbHVlICsgJ1wiJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcblxyXG4gICAgICAgIGxldCBidXR0b24gPSAkKGNvcmV1aVRhYmxlVXRpbHMucmVuZGVyKGNvcmV1aVRhYmxlVHBsWydjb250cm9scy9maWx0ZXJfY2xlYXIuaHRtbCddLCB7XHJcbiAgICAgICAgICAgIGF0dHI6IGF0dHIubGVuZ3RoID4gMCA/ICgnICcgKyBhdHRyLmpvaW4oJyAnKSkgOiAnJyxcclxuICAgICAgICAgICAgY29udGVudDogb3B0aW9ucy5jb250ZW50ID8gb3B0aW9ucy5jb250ZW50IDogJycsXHJcbiAgICAgICAgfSkpO1xyXG5cclxuXHJcbiAgICAgICAgYnV0dG9uLmNsaWNrKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdGFibGUuY2xlYXJGaWx0ZXJzKCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG5cclxuICAgICAgICB0YWJsZS5vbignZmlsdGVyc19jaGFuZ2UnLCBmdW5jdGlvbiAoZmlsdGVyRGF0YSkge1xyXG4gICAgICAgICAgICBpZiAoZmlsdGVyRGF0YS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICBidXR0b24uc2hvdygpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgYnV0dG9uLmhpZGUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gYnV0dG9uO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBDb250cm9sRmlsdGVyQ2xlYXI7IiwiXHJcbmltcG9ydCBjb3JldWlUYWJsZVRwbCAgIGZyb20gXCIuLi9jb3JldWkudGFibGUudGVtcGxhdGVzXCI7XHJcbmltcG9ydCBjb3JldWlUYWJsZVV0aWxzIGZyb20gJy4uL2NvcmV1aS50YWJsZS51dGlscyc7XHJcbmltcG9ydCBDb250cm9sICAgICAgICAgIGZyb20gXCIuLi9hYnN0cmFjdC9Db250cm9sXCI7XHJcblxyXG5jbGFzcyBDb250cm9sRGl2aWRlciBleHRlbmRzIENvbnRyb2wge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y9cclxuICAgICAqIEBwYXJhbSB7Y29yZXVpVGFibGVJbnN0YW5jZX0gdGFibGVcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSAgICAgICAgICAgICAgb3B0aW9uc1xyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3Rvcih0YWJsZSwgb3B0aW9ucykge1xyXG5cclxuICAgICAgICBvcHRpb25zID0gJC5leHRlbmQodHJ1ZSwge1xyXG4gICAgICAgICAgICB0eXBlOiAnZGl2aWRlcicsXHJcbiAgICAgICAgICAgIHdpZHRoOiA0MCxcclxuICAgICAgICAgICAgdGV4dDogJycsXHJcbiAgICAgICAgICAgIGF0dHI6IHtcclxuICAgICAgICAgICAgICAgIGNsYXNzOiAnZC1pbmxpbmUtYmxvY2sgdGV4dC1ib2R5LXRlcnRpYXJ5IHRleHQtY2VudGVyJyxcclxuICAgICAgICAgICAgICAgIHN0eWxlOiAnaGVpZ2h0OjIwcHgnXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LCBvcHRpb25zKTtcclxuXHJcbiAgICAgICAgc3VwZXIodGFibGUsIG9wdGlvbnMpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCk0L7RgNC80LjRgNC+0LLQsNC90LjQtSDQutC+0L3RgtC10L3RgtCwINC00LvRjyDRgNCw0LfQvNC10YnQtdC90LjRjyDQvdCwINGB0YLRgNCw0L3QuNGG0LVcclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIHJlbmRlcigpIHtcclxuXHJcbiAgICAgICAgbGV0IGF0dHJpYnV0ZXMgPSBbXTtcclxuXHJcbiAgICAgICAgdGhpcy5fb3B0aW9ucy5hdHRyID0gY29yZXVpVGFibGVVdGlscy5tZXJnZUF0dHIodGhpcy5fb3B0aW9ucy5hdHRyLCB7IHN0eWxlOiAnd2lkdGg6JyArIHRoaXMuX29wdGlvbnMud2lkdGggKyAncHgnIH0pO1xyXG5cclxuICAgICAgICAkLmVhY2godGhpcy5fb3B0aW9ucy5hdHRyLCBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcclxuICAgICAgICAgICAgaWYgKFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIHZhbHVlKSA+PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzLnB1c2gobmFtZSArICc9XCInICsgdmFsdWUgKyAnXCInKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gY29yZXVpVGFibGVVdGlscy5yZW5kZXIoY29yZXVpVGFibGVUcGxbJ2NvbnRyb2xzL2RpdmlkZXIuaHRtbCddLCB7XHJcbiAgICAgICAgICAgIGF0dHI6IGF0dHJpYnV0ZXMubGVuZ3RoID4gMCA/ICgnICcgKyBhdHRyaWJ1dGVzLmpvaW4oJyAnKSkgOiAnJyxcclxuICAgICAgICAgICAgdGV4dDogdHlwZW9mIHRoaXMuX29wdGlvbnMudGV4dCA9PT0gJ3N0cmluZycgJiYgdGhpcy5fb3B0aW9ucy50ZXh0ICE9PSAnJyA/IHRoaXMuX29wdGlvbnMudGV4dCA6ICcnLFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBDb250cm9sRGl2aWRlcjsiLCJpbXBvcnQgY29yZXVpVGFibGVVdGlscyBmcm9tIFwiLi4vY29yZXVpLnRhYmxlLnV0aWxzXCI7XHJcblxyXG5cclxuY2xhc3MgRmlsdGVyIHtcclxuXHJcbiAgICBfaWQgICAgICA9IG51bGw7XHJcbiAgICBfdGFibGUgICA9IG51bGw7XHJcbiAgICBfdmFsdWUgICA9IG51bGw7XHJcbiAgICBfY29udHJvbCA9IG51bGw7XHJcbiAgICBfb3B0aW9ucyA9IHtcclxuICAgICAgICBpZDogJycsXHJcbiAgICAgICAgdHlwZTogJycsXHJcbiAgICAgICAgZmllbGQ6IG51bGxcclxuICAgIH07XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y9cclxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSB0YWJsZVxyXG4gICAgICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnNcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IodGFibGUsIG9wdGlvbnMpIHtcclxuXHJcbiAgICAgICAgdGhpcy5fdGFibGUgICA9IHRhYmxlO1xyXG4gICAgICAgIHRoaXMuX29wdGlvbnMgPSAkLmV4dGVuZCh0cnVlLCB0aGlzLl9vcHRpb25zLCBvcHRpb25zKTtcclxuICAgICAgICB0aGlzLl9pZCAgICAgID0gdGhpcy5fb3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnaWQnKSAmJiB0eXBlb2YgdGhpcy5fb3B0aW9ucy5pZCA9PT0gJ3N0cmluZycgJiYgdGhpcy5fb3B0aW9ucy5pZFxyXG4gICAgICAgICAgICA/IHRoaXMuX29wdGlvbnMuaWRcclxuICAgICAgICAgICAgOiBjb3JldWlUYWJsZVV0aWxzLmhhc2hDb2RlKCk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC/0LDRgNCw0LzQtdGC0YDQvtCyXHJcbiAgICAgKiBAcmV0dXJucyB7b2JqZWN0fVxyXG4gICAgICovXHJcbiAgICBnZXRPcHRpb25zKCkge1xyXG4gICAgICAgIHJldHVybiAkLmV4dGVuZCh0cnVlLCB7fSwgdGhpcy5fb3B0aW9ucyk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1IGlkXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxyXG4gICAgICovXHJcbiAgICBnZXRJZCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5faWQ7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KTQuNC70YzRgtGA0LDRhtC40Y8g0LTQsNC90L3Ri9GFXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBmaWVsZFZhbHVlXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBzZWFyY2hWYWx1ZVxyXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAgICAgKi9cclxuICAgIGZpbHRlcihmaWVsZFZhbHVlLCBzZWFyY2hWYWx1ZSkge1xyXG5cclxuICAgICAgICBpZiAoWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2YgZmllbGRWYWx1ZSkgPCAwIHx8XHJcbiAgICAgICAgICAgIFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIHNlYXJjaFZhbHVlKSA8IDBcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGZpZWxkVmFsdWUudG9TdHJpbmcoKS50b0xvd2VyQ2FzZSgpLmluZGV4T2YoXHJcbiAgICAgICAgICAgIHNlYXJjaFZhbHVlLnRvU3RyaW5nKCkudG9Mb3dlckNhc2UoKVxyXG4gICAgICAgICkgPj0gMDtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQo9GB0YLQsNC90L7QstC60LAg0LfQvdCw0YfQtdC90LjRj1xyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXHJcbiAgICAgKi9cclxuICAgIHNldFZhbHVlKHZhbHVlKSB7fVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSDQt9C90LDRh9C10L3QuNGPXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfG51bGx9XHJcbiAgICAgKi9cclxuICAgIGdldFZhbHVlICgpIHt9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC90LDQt9Cy0LDQvdC40LUg0L/QvtC70Y9cclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd8bnVsbH1cclxuICAgICAqL1xyXG4gICAgZ2V0RmllbGQgKCkge1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5fb3B0aW9ucy5maWVsZDtcclxuICAgIH1cclxuXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KTQvtGA0LzQuNGA0L7QstCw0L3QuNC1INC60L7QvdGC0LXQvdGC0LBcclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIHJlbmRlciAoKSB7fVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBGaWx0ZXI7IiwiXHJcbmltcG9ydCBjb3JldWlUYWJsZVRwbCAgICAgIGZyb20gXCIuLi9jb3JldWkudGFibGUudGVtcGxhdGVzXCI7XHJcbmltcG9ydCBjb3JldWlUYWJsZVV0aWxzICAgIGZyb20gXCIuLi9jb3JldWkudGFibGUudXRpbHNcIjtcclxuaW1wb3J0IGNvcmV1aVRhYmxlRWxlbWVudHMgZnJvbSBcIi4uL2NvcmV1aS50YWJsZS5lbGVtZW50c1wiO1xyXG5pbXBvcnQgRmlsdGVyICAgICAgICAgICAgICBmcm9tIFwiLi4vYWJzdHJhY3QvRmlsdGVyXCI7XHJcblxyXG5jbGFzcyBGaWx0ZXJUZXh0IGV4dGVuZHMgRmlsdGVyIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPXHJcbiAgICAgKiBAcGFyYW0ge2NvcmV1aVRhYmxlSW5zdGFuY2V9IHRhYmxlXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gICAgICAgICAgICAgIG9wdGlvbnNcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IodGFibGUsIG9wdGlvbnMpIHtcclxuXHJcbiAgICAgICAgb3B0aW9ucyA9ICQuZXh0ZW5kKHRydWUsIHtcclxuICAgICAgICAgICAgaWQ6IG51bGwsXHJcbiAgICAgICAgICAgIHR5cGU6ICd0ZXh0JyxcclxuICAgICAgICAgICAgZmllbGQ6IG51bGwsXHJcbiAgICAgICAgICAgIGxhYmVsOiBudWxsLFxyXG4gICAgICAgICAgICB2YWx1ZTogbnVsbCxcclxuICAgICAgICAgICAgd2lkdGg6IDIwMCxcclxuICAgICAgICAgICAgYXV0b1NlYXJjaDogbnVsbCxcclxuICAgICAgICAgICAgYXR0cjoge1xyXG4gICAgICAgICAgICAgICAgY2xhc3M6IFwiZm9ybS1jb250cm9sXCIsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGJ0bjoge1xyXG4gICAgICAgICAgICAgICAgYXR0cjogeyBjbGFzczogXCJidG4gYnRuLW91dGxpbmUtc2Vjb25kYXJ5IGJvcmRlci1zZWNvbmRhcnktc3VidGxlXCIgfSxcclxuICAgICAgICAgICAgICAgIGNvbnRlbnQ6ICc8aSBjbGFzcz1cImJpIGJpLXNlYXJjaFwiPjwvaT4nXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LCBvcHRpb25zKTtcclxuXHJcbiAgICAgICAgc3VwZXIodGFibGUsIG9wdGlvbnMpO1xyXG5cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMudmFsdWUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5zZXRWYWx1ZSh0aGlzLl9vcHRpb25zLnZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KPRgdGC0LDQvdC+0LLQutCwINC30L3QsNGH0LXQvdC40Y9cclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfG51bWJlcnxudWxsfSB2YWx1ZVxyXG4gICAgICovXHJcbiAgICBzZXRWYWx1ZSh2YWx1ZSkge1xyXG5cclxuICAgICAgICBpZiAodmFsdWUgIT09IG51bGwgJiZcclxuICAgICAgICAgICAgdHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJyAmJlxyXG4gICAgICAgICAgICB0eXBlb2YgdmFsdWUgIT09ICdudW1iZXInXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX3ZhbHVlID0gdmFsdWVcclxuXHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9jb250cm9sKSB7XHJcbiAgICAgICAgICAgICQoJ2lucHV0JywgdGhpcy5fY29udHJvbCkudmFsKFxyXG4gICAgICAgICAgICAgICAgdGhpcy5fdmFsdWUgPT09IG51bGwgPyAnJyA6IHRoaXMuX3ZhbHVlXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSDQt9C90LDRh9C10L3QuNGPXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfG51bGx9XHJcbiAgICAgKi9cclxuICAgIGdldFZhbHVlKCkge1xyXG5cclxuICAgICAgICBpZiAodGhpcy5fY29udHJvbCkge1xyXG4gICAgICAgICAgICBsZXQgdmFsdWUgPSAkKCdpbnB1dCcsIHRoaXMuX2NvbnRyb2wpLnZhbCgpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYgdmFsdWUgIT09ICcnKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLl92YWx1ZTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQpNC+0YDQvNC40YDQvtCy0LDQvdC40LUg0LrQvtC90YLQtdC90YLQsFxyXG4gICAgICogQHJldHVybnMge3N0cmluZ31cclxuICAgICAqL1xyXG4gICAgcmVuZGVyKCkge1xyXG5cclxuICAgICAgICBsZXQgb3B0aW9ucyA9IHRoaXMuZ2V0T3B0aW9ucygpO1xyXG4gICAgICAgIGxldCBsYWJlbCAgID0gdHlwZW9mIG9wdGlvbnMubGFiZWwgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBvcHRpb25zLmxhYmVsID09PSAnbnVtYmVyJ1xyXG4gICAgICAgICAgICA/IG9wdGlvbnMubGFiZWxcclxuICAgICAgICAgICAgOiAnJztcclxuXHJcbiAgICAgICAgaWYgKCAhIGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3Qob3B0aW9ucy5hdHRyKSkge1xyXG4gICAgICAgICAgICBvcHRpb25zLmF0dHIgPSB7fTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChvcHRpb25zLmhhc093blByb3BlcnR5KCd3aWR0aCcpICYmXHJcbiAgICAgICAgICAgIGNvcmV1aVRhYmxlVXRpbHMuaXNOdW1lcmljKG9wdGlvbnMud2lkdGgpXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmF0dHIuaGFzT3duUHJvcGVydHkoJ3N0eWxlJykpIHtcclxuICAgICAgICAgICAgICAgIG9wdGlvbnMuYXR0clsnc3R5bGUnXSArPSAnO3dpZHRoOicgKyBvcHRpb25zLndpZHRoICsgJ3B4JztcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIG9wdGlvbnMuYXR0clsnc3R5bGUnXSA9ICd3aWR0aDonICsgb3B0aW9ucy53aWR0aCArICdweCc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIG9wdGlvbnMuYXR0clsndmFsdWUnXSA9IHR5cGVvZiB0aGlzLl92YWx1ZSA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIHRoaXMuX3ZhbHVlID09PSAnbnVtYmVyJ1xyXG4gICAgICAgICAgICA/IHRoaXMuX3ZhbHVlXHJcbiAgICAgICAgICAgIDogJyc7XHJcblxyXG4gICAgICAgIGlmIChvcHRpb25zLmF0dHIuaGFzT3duUHJvcGVydHkoJ3R5cGUnKSkge1xyXG4gICAgICAgICAgICBkZWxldGUgb3B0aW9ucy5hdHRyLnR5cGU7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcblxyXG4gICAgICAgIGlmICggISBjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KG9wdGlvbnMuYnRuKSkge1xyXG4gICAgICAgICAgICBvcHRpb25zLmJ0biA9IHt9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoICEgY29yZXVpVGFibGVVdGlscy5pc09iamVjdChvcHRpb25zLmJ0bi5hdHRyKSkge1xyXG4gICAgICAgICAgICBvcHRpb25zLmJ0bi5hdHRyID0ge307XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAob3B0aW9ucy5idG4uYXR0ci5oYXNPd25Qcm9wZXJ0eSgndHlwZScpKSB7XHJcbiAgICAgICAgICAgIGRlbGV0ZSBvcHRpb25zLmJ0bi5hdHRyLnR5cGU7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgbGV0IGF0dHIgICAgPSBbXTtcclxuICAgICAgICBsZXQgYXR0ckJ0biA9IFtdO1xyXG4gICAgICAgIGxldCB0YWJsZSAgID0gdGhpcy5fdGFibGU7XHJcblxyXG4gICAgICAgICQuZWFjaChvcHRpb25zLmF0dHIsIGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xyXG4gICAgICAgICAgICBhdHRyLnB1c2gobmFtZSArICc9XCInICsgdmFsdWUgKyAnXCInKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICAkLmVhY2gob3B0aW9ucy5idG4uYXR0ciwgZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XHJcbiAgICAgICAgICAgIGF0dHJCdG4ucHVzaChuYW1lICsgJz1cIicgKyB2YWx1ZSArICdcIicpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLl9jb250cm9sID0gJChjb3JldWlUYWJsZVV0aWxzLnJlbmRlcihjb3JldWlUYWJsZVRwbFsnZmlsdGVycy90ZXh0Lmh0bWwnXSwge1xyXG4gICAgICAgICAgICBhdHRyOiBhdHRyLmxlbmd0aCA+IDAgPyAoJyAnICsgYXR0ci5qb2luKCcgJykpIDogJycsXHJcbiAgICAgICAgICAgIGxhYmVsOiBsYWJlbCxcclxuICAgICAgICAgICAgYnRuQXR0cjogYXR0ckJ0bi5sZW5ndGggPiAwID8gKCcgJyArIGF0dHJCdG4uam9pbignICcpKSA6ICcnLFxyXG4gICAgICAgICAgICBidG5Db250ZW50OiBvcHRpb25zLmJ0bi5jb250ZW50ID8gb3B0aW9ucy5idG4uY29udGVudCA6ICcnLFxyXG4gICAgICAgIH0pKTtcclxuXHJcbiAgICAgICAgJCgnaW5wdXQnLCB0aGlzLl9jb250cm9sKS5rZXl1cChmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgIGlmIChlLmtleSA9PT0gJ0VudGVyJyB8fCBlLmtleUNvZGUgPT09IDEzKSB7XHJcbiAgICAgICAgICAgICAgICB0YWJsZS5zZWFyY2hSZWNvcmRzKCk7XHJcblxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBvcHRpb25zLmF1dG9TZWFyY2ggPT09ICdib29sZWFuJyAmJiBvcHRpb25zLmF1dG9TZWFyY2gpIHtcclxuICAgICAgICAgICAgICAgIHRhYmxlLnNlYXJjaFJlY29yZHMoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAkKCdidXR0b24nLCB0aGlzLl9jb250cm9sKS5jbGljayhmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgIHRhYmxlLnNlYXJjaFJlY29yZHMoKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbnRyb2w7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IEZpbHRlclRleHQ7IiwiXHJcbmltcG9ydCBjb3JldWlUYWJsZVRwbCAgIGZyb20gXCIuLi9jb3JldWkudGFibGUudGVtcGxhdGVzXCI7XHJcbmltcG9ydCBjb3JldWlUYWJsZVV0aWxzIGZyb20gXCIuLi9jb3JldWkudGFibGUudXRpbHNcIjtcclxuaW1wb3J0IEZpbHRlciAgICAgICAgICAgZnJvbSBcIi4uL2Fic3RyYWN0L0ZpbHRlclwiO1xyXG5cclxuY2xhc3MgRmlsdGVyTnVtYmVyIGV4dGVuZHMgRmlsdGVyIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPXHJcbiAgICAgKiBAcGFyYW0ge2NvcmV1aVRhYmxlSW5zdGFuY2V9IHRhYmxlXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gICAgICAgICAgICAgIG9wdGlvbnNcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IodGFibGUsIG9wdGlvbnMpIHtcclxuXHJcbiAgICAgICAgb3B0aW9ucyA9ICQuZXh0ZW5kKHRydWUsIHtcclxuICAgICAgICAgICAgaWQ6IG51bGwsXHJcbiAgICAgICAgICAgIHR5cGU6ICdudW1iZXInLFxyXG4gICAgICAgICAgICBmaWVsZDogbnVsbCxcclxuICAgICAgICAgICAgbGFiZWw6IG51bGwsXHJcbiAgICAgICAgICAgIHZhbHVlOiBudWxsLFxyXG4gICAgICAgICAgICB3aWR0aDogOTAsXHJcbiAgICAgICAgICAgIGF0dHI6IHtcclxuICAgICAgICAgICAgICAgIGNsYXNzOiBcImZvcm0tY29udHJvbFwiLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBidG46IHtcclxuICAgICAgICAgICAgICAgIGF0dHI6IHsgY2xhc3M6IFwiYnRuIGJ0bi1vdXRsaW5lLXNlY29uZGFyeSBib3JkZXItc2Vjb25kYXJ5LXN1YnRsZVwiIH0sXHJcbiAgICAgICAgICAgICAgICBjb250ZW50OiAnPGkgY2xhc3M9XCJiaSBiaS1zZWFyY2hcIj48L2k+J1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSwgb3B0aW9ucyk7XHJcblxyXG4gICAgICAgIHN1cGVyKHRhYmxlLCBvcHRpb25zKTtcclxuXHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLnZhbHVlICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0VmFsdWUodGhpcy5fb3B0aW9ucy52YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCj0YHRgtCw0L3QvtCy0LrQsCDQt9C90LDRh9C10L3QuNGPXHJcbiAgICAgKiBAcGFyYW0ge29iamVjdHxudWxsfSB2YWx1ZVxyXG4gICAgICovXHJcbiAgICBzZXRWYWx1ZSh2YWx1ZSkge1xyXG5cclxuICAgICAgICBpZiAodmFsdWUpIHtcclxuICAgICAgICAgICAgaWYgKCAhIGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QodmFsdWUpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGxldCBudW1iZXJTdGFydCA9IG51bGw7XHJcbiAgICAgICAgICAgIGxldCBudW1iZXJFbmQgICA9IG51bGw7XHJcblxyXG4gICAgICAgICAgICBpZiAodmFsdWUuaGFzT3duUHJvcGVydHkoJ3N0YXJ0JykgJiZcclxuICAgICAgICAgICAgICAgICh0eXBlb2YgdmFsdWUuc3RhcnQgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiB2YWx1ZS5zdGFydCAhPT0gJ251bWJlcicpICYmXHJcbiAgICAgICAgICAgICAgICB2YWx1ZS5zdGFydCAhPT0gJycgJiZcclxuICAgICAgICAgICAgICAgICEgaXNOYU4oTnVtYmVyKHZhbHVlLnN0YXJ0KSlcclxuICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICBudW1iZXJTdGFydCA9IHZhbHVlLnN0YXJ0O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodmFsdWUuaGFzT3duUHJvcGVydHkoJ2VuZCcpICYmXHJcbiAgICAgICAgICAgICAgICAodHlwZW9mIHZhbHVlLmVuZCA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIHZhbHVlLmVuZCAhPT0gJ251bWJlcicpICYmXHJcbiAgICAgICAgICAgICAgICB2YWx1ZS5lbmQgIT09ICcnICYmXHJcbiAgICAgICAgICAgICAgICAhIGlzTmFOKE51bWJlcih2YWx1ZS5lbmQpKVxyXG4gICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgIG51bWJlckVuZCA9IHZhbHVlLmVuZDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKG51bWJlclN0YXJ0ID09PSBudWxsICYmIG51bWJlckVuZCA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fdmFsdWUgPSBudWxsO1xyXG5cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3ZhbHVlID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0OiBudW1iZXJTdGFydCxcclxuICAgICAgICAgICAgICAgICAgICBlbmQ6ICAgbnVtYmVyRW5kXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3ZhbHVlID0gbnVsbDtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICBpZiAodGhpcy5fY29udHJvbCkge1xyXG4gICAgICAgICAgICBsZXQgaW5wdXRTdGFydCA9IHRoaXMuX2NvbnRyb2wucGFyZW50KCkuZmluZCgnaW5wdXQubnVtYmVyLXN0YXJ0Jyk7XHJcbiAgICAgICAgICAgIGxldCBpbnB1dEVuZCAgID0gdGhpcy5fY29udHJvbC5wYXJlbnQoKS5maW5kKCdpbnB1dC5udW1iZXItZW5kJyk7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5fdmFsdWUgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIGlucHV0U3RhcnQudmFsKCcnKTtcclxuICAgICAgICAgICAgICAgIGlucHV0RW5kLnZhbCgnJyk7XHJcblxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QodGhpcy5fdmFsdWUpKSB7XHJcbiAgICAgICAgICAgICAgICBpbnB1dFN0YXJ0LnZhbCh0eXBlb2YgdGhpcy5fdmFsdWUuc3RhcnQgIT09IG51bGwgPyB0aGlzLl92YWx1ZS5zdGFydCA6ICcnKTtcclxuICAgICAgICAgICAgICAgIGlucHV0RW5kLnZhbCh0eXBlb2YgdGhpcy5fdmFsdWUuZW5kICE9PSBudWxsID8gdGhpcy5fdmFsdWUuZW5kIDogJycpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSDQt9C90LDRh9C10L3QuNGPXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxyXG4gICAgICovXHJcbiAgICBnZXRWYWx1ZSgpIHtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX2NvbnRyb2wpIHtcclxuICAgICAgICAgICAgbGV0IGlucHV0U3RhcnQgPSB0aGlzLl9jb250cm9sLnBhcmVudCgpLmZpbmQoJ2lucHV0Lm51bWJlci1zdGFydCcpO1xyXG4gICAgICAgICAgICBsZXQgaW5wdXRFbmQgICA9IHRoaXMuX2NvbnRyb2wucGFyZW50KCkuZmluZCgnaW5wdXQubnVtYmVyLWVuZCcpO1xyXG5cclxuICAgICAgICAgICAgaWYgKGlucHV0U3RhcnRbMF0gJiYgaW5wdXRFbmRbMF0pIHtcclxuICAgICAgICAgICAgICAgIGxldCB2YWx1ZVN0YXJ0ID0gaW5wdXRTdGFydC52YWwoKTtcclxuICAgICAgICAgICAgICAgIGxldCB2YWx1ZUVuZCAgID0gaW5wdXRFbmQudmFsKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICAgICAgICAgICh0eXBlb2YgdmFsdWVTdGFydCA9PT0gJ3N0cmluZycgJiYgdmFsdWVTdGFydCAhPT0gJycpIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgKHR5cGVvZiB2YWx1ZUVuZCA9PT0gJ3N0cmluZycgJiYgdmFsdWVFbmQgIT09ICcnKVxyXG4gICAgICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IHZhbHVlU3RhcnQgIT09ICcnICYmICEgaXNOYU4oTnVtYmVyKHZhbHVlU3RhcnQpKSA/IE51bWJlcih2YWx1ZVN0YXJ0KSA6IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuZDogdmFsdWVFbmQgIT09ICcnICYmICEgaXNOYU4oTnVtYmVyKHZhbHVlRW5kKSkgPyBOdW1iZXIodmFsdWVFbmQpIDogbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLl92YWx1ZTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQpNC40LvRjNGC0YDQsNGG0LjRjyDQtNCw0L3QvdGL0YVcclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9ICAgICAgICAgICAgICBmaWVsZFZhbHVlXHJcbiAgICAgKiBAcmV0dXJucyB7QXJyYXl8c3RyaW5nfG51bWJlcn0gc2VhcmNoVmFsdWVcclxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gICAgICovXHJcbiAgICBmaWx0ZXIoZmllbGRWYWx1ZSwgc2VhcmNoVmFsdWUpIHtcclxuXHJcbiAgICAgICAgaWYgKFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIGZpZWxkVmFsdWUpIDwgMCB8fFxyXG4gICAgICAgICAgICAhIGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3Qoc2VhcmNoVmFsdWUpIHx8XHJcbiAgICAgICAgICAgIChcclxuICAgICAgICAgICAgICAgIFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIHNlYXJjaFZhbHVlLnN0YXJ0KSA8IDAgJiZcclxuICAgICAgICAgICAgICAgIFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIHNlYXJjaFZhbHVlLmVuZCkgPCAwXHJcbiAgICAgICAgICAgIClcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIGxldCBpc3NldFN0YXJ0ID0gWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2Ygc2VhcmNoVmFsdWUuc3RhcnQpID49IDA7XHJcbiAgICAgICAgbGV0IGlzc2V0RW5kICAgPSBbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiBzZWFyY2hWYWx1ZS5lbmQpID49IDA7XHJcblxyXG4gICAgICAgIGlmIChpc3NldFN0YXJ0ICYmIGlzc2V0RW5kKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmaWVsZFZhbHVlID49IHNlYXJjaFZhbHVlLnN0YXJ0ICYmIGZpZWxkVmFsdWUgPD0gc2VhcmNoVmFsdWUuZW5kO1xyXG5cclxuICAgICAgICB9IGVsc2UgaWYgKGlzc2V0U3RhcnQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZpZWxkVmFsdWUgPj0gc2VhcmNoVmFsdWUuc3RhcnQ7XHJcblxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmaWVsZFZhbHVlIDw9IHNlYXJjaFZhbHVlLmVuZDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KTQvtGA0LzQuNGA0L7QstCw0L3QuNC1INC60L7QvdGC0LXQvdGC0LBcclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIHJlbmRlcigpIHtcclxuXHJcbiAgICAgICAgbGV0IG9wdGlvbnMgPSB0aGlzLmdldE9wdGlvbnMoKTtcclxuICAgICAgICBsZXQgbGFiZWwgICA9IHR5cGVvZiBvcHRpb25zLmxhYmVsID09PSAnc3RyaW5nJyB8fCB0eXBlb2Ygb3B0aW9ucy5sYWJlbCA9PT0gJ251bWJlcidcclxuICAgICAgICAgICAgPyBvcHRpb25zLmxhYmVsXHJcbiAgICAgICAgICAgIDogJyc7XHJcblxyXG4gICAgICAgIGlmICggISBjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KG9wdGlvbnMuYXR0cikpIHtcclxuICAgICAgICAgICAgb3B0aW9ucy5hdHRyID0ge307XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAob3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnd2lkdGgnKSAmJlxyXG4gICAgICAgICAgICBjb3JldWlUYWJsZVV0aWxzLmlzTnVtZXJpYyhvcHRpb25zLndpZHRoKVxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5hdHRyLmhhc093blByb3BlcnR5KCdzdHlsZScpKSB7XHJcbiAgICAgICAgICAgICAgICBvcHRpb25zLmF0dHJbJ3N0eWxlJ10gKz0gJzt3aWR0aDonICsgb3B0aW9ucy53aWR0aCArICdweCc7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBvcHRpb25zLmF0dHJbJ3N0eWxlJ10gPSAnd2lkdGg6JyArIG9wdGlvbnMud2lkdGggKyAncHgnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAob3B0aW9ucy5hdHRyLmhhc093blByb3BlcnR5KCd0eXBlJykpIHtcclxuICAgICAgICAgICAgZGVsZXRlIG9wdGlvbnMuYXR0ci50eXBlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKG9wdGlvbnMuYXR0ci5oYXNPd25Qcm9wZXJ0eSgndmFsdWUnKSkge1xyXG4gICAgICAgICAgICBkZWxldGUgb3B0aW9ucy5hdHRyLnZhbHVlO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIGxldCBmaWVsZCAgICAgPSB0eXBlb2Ygb3B0aW9ucy5maWVsZCA9PT0gJ3N0cmluZycgPyBvcHRpb25zLmZpZWxkIDogJyc7XHJcbiAgICAgICAgbGV0IHN0YXJ0QXR0ciA9IFtdO1xyXG4gICAgICAgIGxldCBlbmRBdHRyICAgPSBbXTtcclxuICAgICAgICBsZXQgYXR0ckJ0biAgID0gW107XHJcbiAgICAgICAgbGV0IHRhYmxlICAgICA9IHRoaXMuX3RhYmxlO1xyXG5cclxuXHJcbiAgICAgICAgJC5lYWNoKG9wdGlvbnMuYXR0ciwgZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XHJcbiAgICAgICAgICAgIGlmIChbJ25hbWUnLCAndmFsdWUnLCAnY2xhc3MnXS5pbmRleE9mKG5hbWUpID49IDAgfHxcclxuICAgICAgICAgICAgICAgIFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIHZhbHVlKSA8IDBcclxuICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHN0YXJ0QXR0ci5wdXNoKG5hbWUgKyAnPVwiJyArIHZhbHVlICsgJ1wiJyk7XHJcbiAgICAgICAgICAgIGVuZEF0dHIucHVzaChuYW1lICsgJz1cIicgKyB2YWx1ZSArICdcIicpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBpZiAob3B0aW9ucy5hdHRyLmhhc093blByb3BlcnR5KCdjbGFzcycpICYmXHJcbiAgICAgICAgICAgIFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIG9wdGlvbnMuYXR0ci5jbGFzcykgPj0gMFxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICBzdGFydEF0dHIucHVzaCgnY2xhc3M9XCInICsgb3B0aW9ucy5hdHRyLmNsYXNzICsgJyBudW1iZXItc3RhcnRcIicpO1xyXG4gICAgICAgICAgICBlbmRBdHRyLnB1c2goJ2NsYXNzPVwiJyArIG9wdGlvbnMuYXR0ci5jbGFzcyArICcgbnVtYmVyLWVuZFwiJyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgc3RhcnRBdHRyLnB1c2goJ2NsYXNzPVwibnVtYmVyLXN0YXJ0XCInKTtcclxuICAgICAgICAgICAgZW5kQXR0ci5wdXNoKCdjbGFzcz1cIm51bWJlci1lbmRcIicpO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIGlmIChmaWVsZCkge1xyXG4gICAgICAgICAgICBzdGFydEF0dHIucHVzaCgnbmFtZT1cIicgKyBmaWVsZCArICdbc3RhcnRdXCInKTtcclxuICAgICAgICAgICAgZW5kQXR0ci5wdXNoKCduYW1lPVwiJyArIGZpZWxkICsgJ1tlbmRdXCInKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHN0YXJ0QXR0ci5wdXNoKCd2YWx1ZT1cIicgKyAodGhpcy5fdmFsdWUgPyB0aGlzLl92YWx1ZS5zdGFydCA6ICcnKSArICdcIicpO1xyXG4gICAgICAgIGVuZEF0dHIucHVzaCgndmFsdWU9XCInICsgKHRoaXMuX3ZhbHVlID8gdGhpcy5fdmFsdWUuZW5kIDogJycpICsgJ1wiJyk7XHJcblxyXG5cclxuXHJcbiAgICAgICAgaWYgKCAhIGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3Qob3B0aW9ucy5idG4pKSB7XHJcbiAgICAgICAgICAgIG9wdGlvbnMuYnRuID0ge307XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICggISBjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KG9wdGlvbnMuYnRuLmF0dHIpKSB7XHJcbiAgICAgICAgICAgIG9wdGlvbnMuYnRuLmF0dHIgPSB7fTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChvcHRpb25zLmJ0bi5hdHRyLmhhc093blByb3BlcnR5KCd0eXBlJykpIHtcclxuICAgICAgICAgICAgZGVsZXRlIG9wdGlvbnMuYnRuLmF0dHIudHlwZTtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICAkLmVhY2gob3B0aW9ucy5idG4uYXR0ciwgZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XHJcbiAgICAgICAgICAgIGF0dHJCdG4ucHVzaChuYW1lICsgJz1cIicgKyB2YWx1ZSArICdcIicpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLl9jb250cm9sID0gJChjb3JldWlUYWJsZVV0aWxzLnJlbmRlcihjb3JldWlUYWJsZVRwbFsnZmlsdGVycy9udW1iZXIuaHRtbCddLCB7XHJcbiAgICAgICAgICAgIGF0dHJTdGFydDogc3RhcnRBdHRyLmxlbmd0aCA+IDAgPyAoJyAnICsgc3RhcnRBdHRyLmpvaW4oJyAnKSkgOiAnJyxcclxuICAgICAgICAgICAgYXR0ckVuZDogZW5kQXR0ci5sZW5ndGggPiAwID8gKCcgJyArIGVuZEF0dHIuam9pbignICcpKSA6ICcnLFxyXG4gICAgICAgICAgICBsYWJlbDogbGFiZWwsXHJcbiAgICAgICAgICAgIGJ0bkF0dHI6IGF0dHJCdG4ubGVuZ3RoID4gMCA/ICgnICcgKyBhdHRyQnRuLmpvaW4oJyAnKSkgOiAnJyxcclxuICAgICAgICAgICAgYnRuQ29udGVudDogb3B0aW9ucy5idG4uY29udGVudCA/IG9wdGlvbnMuYnRuLmNvbnRlbnQgOiAnJyxcclxuICAgICAgICB9KSk7XHJcblxyXG5cclxuICAgICAgICAkKCdpbnB1dC5udW1iZXItc3RhcnQsIGlucHV0Lm51bWJlci1lbmQnLCB0aGlzLl9jb250cm9sKS5rZXl1cChmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgIGlmIChlLmtleSA9PT0gJ0VudGVyJyB8fCBlLmtleUNvZGUgPT09IDEzKSB7XHJcbiAgICAgICAgICAgICAgICB0YWJsZS5zZWFyY2hSZWNvcmRzKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgJCgnYnV0dG9uJywgdGhpcy5fY29udHJvbCkuY2xpY2soZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICB0YWJsZS5zZWFyY2hSZWNvcmRzKCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLl9jb250cm9sO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBGaWx0ZXJOdW1iZXI7IiwiXHJcbmltcG9ydCBjb3JldWlUYWJsZVRwbCAgIGZyb20gXCIuLi9jb3JldWkudGFibGUudGVtcGxhdGVzXCI7XHJcbmltcG9ydCBjb3JldWlUYWJsZVV0aWxzIGZyb20gXCIuLi9jb3JldWkudGFibGUudXRpbHNcIjtcclxuaW1wb3J0IEZpbHRlciAgICAgICAgICAgZnJvbSBcIi4uL2Fic3RyYWN0L0ZpbHRlclwiO1xyXG5cclxuY2xhc3MgRmlsdGVyRGF0ZSBleHRlbmRzIEZpbHRlciB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQmNC90LjRhtC40LDQu9C40LfQsNGG0LjRj1xyXG4gICAgICogQHBhcmFtIHtjb3JldWlUYWJsZUluc3RhbmNlfSB0YWJsZVxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9ICAgICAgICAgICAgICBvcHRpb25zXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKHRhYmxlLCBvcHRpb25zKSB7XHJcblxyXG4gICAgICAgIG9wdGlvbnMgPSAkLmV4dGVuZCh0cnVlLCB7XHJcbiAgICAgICAgICAgIGlkOiBudWxsLFxyXG4gICAgICAgICAgICB0eXBlOiAnZGF0ZScsXHJcbiAgICAgICAgICAgIGZpZWxkOiBudWxsLFxyXG4gICAgICAgICAgICBsYWJlbDogbnVsbCxcclxuICAgICAgICAgICAgdmFsdWU6IG51bGwsXHJcbiAgICAgICAgICAgIHdpZHRoOiAyMDAsXHJcbiAgICAgICAgICAgIGF0dHI6IHtcclxuICAgICAgICAgICAgICAgIGNsYXNzOiBcImZvcm0tY29udHJvbFwiLFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSwgb3B0aW9ucyk7XHJcblxyXG4gICAgICAgIHN1cGVyKHRhYmxlLCBvcHRpb25zKTtcclxuXHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLnZhbHVlICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0VmFsdWUodGhpcy5fb3B0aW9ucy52YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCj0YHRgtCw0L3QvtCy0LrQsCDQt9C90LDRh9C10L3QuNGPXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcclxuICAgICAqL1xyXG4gICAgc2V0VmFsdWUodmFsdWUpIHtcclxuXHJcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycgJiYgdmFsdWUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHZhbHVlICYmXHJcbiAgICAgICAgICAgIChcclxuICAgICAgICAgICAgICAgIHZhbHVlLm1hdGNoKC9eXFxkezR9XFwtXFxkezJ9XFwtXFxkezJ9JC8pID09PSBudWxsIHx8XHJcbiAgICAgICAgICAgICAgICBpc05hTihuZXcgRGF0ZSh2YWx1ZSkpXHJcbiAgICAgICAgICAgIClcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIHRoaXMuX3ZhbHVlID0gdmFsdWU7XHJcblxyXG5cclxuICAgICAgICBpZiAodGhpcy5fY29udHJvbCkge1xyXG4gICAgICAgICAgICAkKCdpbnB1dCcsIHRoaXMuX2NvbnRyb2wpLnZhbChcclxuICAgICAgICAgICAgICAgIHRoaXMuX3ZhbHVlID09PSBudWxsID8gJycgOiB0aGlzLl92YWx1ZVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0LfQvdCw0YfQtdC90LjRj1xyXG4gICAgICogQHJldHVybnMge3N0cmluZ31cclxuICAgICAqL1xyXG4gICAgZ2V0VmFsdWUoKSB7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9jb250cm9sKSB7XHJcbiAgICAgICAgICAgIGxldCB2YWx1ZSA9ICQoJ2lucHV0JywgdGhpcy5fY29udHJvbCkudmFsKCk7XHJcblxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJiB2YWx1ZSAhPT0gJycpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5fdmFsdWU7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KTQuNC70YzRgtGA0LDRhtC40Y8g0LTQsNC90L3Ri9GFXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSAgICAgICAgICAgICAgZmllbGRWYWx1ZVxyXG4gICAgICogQHJldHVybnMge0FycmF5fHN0cmluZ3xudW1iZXJ9IHNlYXJjaFZhbHVlXHJcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICAgICAqL1xyXG4gICAgZmlsdGVyKGZpZWxkVmFsdWUsIHNlYXJjaFZhbHVlKSB7XHJcblxyXG4gICAgICAgIGlmIChbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiBmaWVsZFZhbHVlKSA8IDAgfHxcclxuICAgICAgICAgICAgWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2Ygc2VhcmNoVmFsdWUpIDwgMFxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gZmllbGRWYWx1ZS50b1N0cmluZygpLmluZGV4T2Yoc2VhcmNoVmFsdWUudG9TdHJpbmcoKSkgPT09IDA7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KTQvtGA0LzQuNGA0L7QstCw0L3QuNC1INC60L7QvdGC0LXQvdGC0LBcclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIHJlbmRlcigpIHtcclxuXHJcbiAgICAgICAgbGV0IG9wdGlvbnMgPSB0aGlzLmdldE9wdGlvbnMoKTtcclxuICAgICAgICBsZXQgbGFiZWwgICA9IHR5cGVvZiBvcHRpb25zLmxhYmVsID09PSAnc3RyaW5nJyB8fCB0eXBlb2Ygb3B0aW9ucy5sYWJlbCA9PT0gJ251bWJlcidcclxuICAgICAgICAgICAgPyBvcHRpb25zLmxhYmVsXHJcbiAgICAgICAgICAgIDogJyc7XHJcblxyXG4gICAgICAgIGlmICggISBjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KG9wdGlvbnMuYXR0cikpIHtcclxuICAgICAgICAgICAgb3B0aW9ucy5hdHRyID0ge307XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAob3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnd2lkdGgnKSAmJlxyXG4gICAgICAgICAgICBjb3JldWlUYWJsZVV0aWxzLmlzTnVtZXJpYyhvcHRpb25zLndpZHRoKVxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5hdHRyLmhhc093blByb3BlcnR5KCdzdHlsZScpKSB7XHJcbiAgICAgICAgICAgICAgICBvcHRpb25zLmF0dHJbJ3N0eWxlJ10gKz0gJzt3aWR0aDonICsgb3B0aW9ucy53aWR0aCArICdweCc7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBvcHRpb25zLmF0dHJbJ3N0eWxlJ10gPSAnd2lkdGg6JyArIG9wdGlvbnMud2lkdGggKyAncHgnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBvcHRpb25zLmF0dHJbJ3ZhbHVlJ10gPSB0eXBlb2YgdGhpcy5fdmFsdWUgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiB0aGlzLl92YWx1ZSA9PT0gJ251bWJlcidcclxuICAgICAgICAgICAgPyB0aGlzLl92YWx1ZVxyXG4gICAgICAgICAgICA6ICcnO1xyXG5cclxuICAgICAgICBpZiAob3B0aW9ucy5hdHRyLmhhc093blByb3BlcnR5KCd0eXBlJykpIHtcclxuICAgICAgICAgICAgZGVsZXRlIG9wdGlvbnMuYXR0ci50eXBlO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIGxldCBhdHRyICA9IFtdO1xyXG4gICAgICAgIGxldCB0YWJsZSA9IHRoaXMuX3RhYmxlO1xyXG5cclxuICAgICAgICAkLmVhY2gob3B0aW9ucy5hdHRyLCBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcclxuICAgICAgICAgICAgYXR0ci5wdXNoKG5hbWUgKyAnPVwiJyArIHZhbHVlICsgJ1wiJyk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuX2NvbnRyb2wgPSAkKGNvcmV1aVRhYmxlVXRpbHMucmVuZGVyKGNvcmV1aVRhYmxlVHBsWydmaWx0ZXJzL2RhdGUuaHRtbCddLCB7XHJcbiAgICAgICAgICAgIGF0dHI6IGF0dHIubGVuZ3RoID4gMCA/ICgnICcgKyBhdHRyLmpvaW4oJyAnKSkgOiAnJyxcclxuICAgICAgICAgICAgbGFiZWw6IGxhYmVsXHJcbiAgICAgICAgfSkpO1xyXG5cclxuICAgICAgICAkKCdpbnB1dCcsIHRoaXMuX2NvbnRyb2wpLmNoYW5nZShmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgIHRhYmxlLnNlYXJjaFJlY29yZHMoKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbnRyb2w7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IEZpbHRlckRhdGU7IiwiXHJcbmltcG9ydCBjb3JldWlUYWJsZVRwbCAgICAgIGZyb20gXCIuLi9jb3JldWkudGFibGUudGVtcGxhdGVzXCI7XHJcbmltcG9ydCBjb3JldWlUYWJsZVV0aWxzICAgIGZyb20gXCIuLi9jb3JldWkudGFibGUudXRpbHNcIjtcclxuaW1wb3J0IGNvcmV1aVRhYmxlRWxlbWVudHMgZnJvbSBcIi4uL2NvcmV1aS50YWJsZS5lbGVtZW50c1wiO1xyXG5pbXBvcnQgRmlsdGVyICAgICAgICAgICAgICBmcm9tIFwiLi4vYWJzdHJhY3QvRmlsdGVyXCI7XHJcblxyXG5jbGFzcyBGaWx0ZXJEYXRldGltZSBleHRlbmRzIEZpbHRlciB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQmNC90LjRhtC40LDQu9C40LfQsNGG0LjRj1xyXG4gICAgICogQHBhcmFtIHtjb3JldWlUYWJsZUluc3RhbmNlfSB0YWJsZVxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9ICAgICAgICAgICAgICBvcHRpb25zXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKHRhYmxlLCBvcHRpb25zKSB7XHJcblxyXG4gICAgICAgIG9wdGlvbnMgPSAkLmV4dGVuZCh0cnVlLCB7XHJcbiAgICAgICAgICAgIGlkOiBudWxsLFxyXG4gICAgICAgICAgICB0eXBlOiAnZGF0ZXRpbWUnLFxyXG4gICAgICAgICAgICBmaWVsZDogbnVsbCxcclxuICAgICAgICAgICAgbGFiZWw6IG51bGwsXHJcbiAgICAgICAgICAgIHZhbHVlOiBudWxsLFxyXG4gICAgICAgICAgICB3aWR0aDogMjAwLFxyXG4gICAgICAgICAgICBhdHRyOiB7XHJcbiAgICAgICAgICAgICAgICBjbGFzczogXCJmb3JtLWNvbnRyb2xcIixcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sIG9wdGlvbnMpO1xyXG5cclxuICAgICAgICBzdXBlcih0YWJsZSwgb3B0aW9ucyk7XHJcblxyXG5cclxuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy52YWx1ZSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLnNldFZhbHVlKHRoaXMuX29wdGlvbnMudmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQo9GB0YLQsNC90L7QstC60LAg0LfQvdCw0YfQtdC90LjRj1xyXG4gICAgICogQHBhcmFtIHtzdHJpbmd8bnVsbH0gdmFsdWVcclxuICAgICAqL1xyXG4gICAgc2V0VmFsdWUodmFsdWUpIHtcclxuXHJcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycgJiYgdmFsdWUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHZhbHVlICYmXHJcbiAgICAgICAgICAgIChcclxuICAgICAgICAgICAgICAgIHZhbHVlLm1hdGNoKC9eXFxkezR9XFwtXFxkezJ9XFwtXFxkezJ9KFR8IClcXGR7Mn06XFxkezJ9KDpcXGR7Mn18KSQvKSA9PT0gbnVsbCB8fFxyXG4gICAgICAgICAgICAgICAgaXNOYU4obmV3IERhdGUodmFsdWUpKVxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX3ZhbHVlID0gdmFsdWU7XHJcblxyXG5cclxuICAgICAgICBpZiAodGhpcy5fY29udHJvbCkge1xyXG4gICAgICAgICAgICAkKCdpbnB1dCcsIHRoaXMuX2NvbnRyb2wpLnZhbChcclxuICAgICAgICAgICAgICAgIHRoaXMuX3ZhbHVlID09PSBudWxsID8gJycgOiB0aGlzLl92YWx1ZVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0LfQvdCw0YfQtdC90LjRj1xyXG4gICAgICogQHJldHVybnMge3N0cmluZ3xudWxsfVxyXG4gICAgICovXHJcbiAgICBnZXRWYWx1ZSgpIHtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX2NvbnRyb2wpIHtcclxuICAgICAgICAgICAgbGV0IHZhbHVlID0gJCgnaW5wdXQnLCB0aGlzLl9jb250cm9sKS52YWwoKTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnICYmIHZhbHVlICE9PSAnJykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLl92YWx1ZTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQpNC40LvRjNGC0YDQsNGG0LjRjyDQtNCw0L3QvdGL0YVcclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9ICAgICAgICAgICAgICBmaWVsZFZhbHVlXHJcbiAgICAgKiBAcmV0dXJucyB7QXJyYXl8c3RyaW5nfG51bWJlcn0gc2VhcmNoVmFsdWVcclxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gICAgICovXHJcbiAgICBmaWx0ZXIoZmllbGRWYWx1ZSwgc2VhcmNoVmFsdWUpIHtcclxuXHJcbiAgICAgICAgaWYgKFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIGZpZWxkVmFsdWUpIDwgMCB8fFxyXG4gICAgICAgICAgICBbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiBzZWFyY2hWYWx1ZSkgPCAwXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBmaWVsZFZhbHVlLnRvU3RyaW5nKCkgPT09IHNlYXJjaFZhbHVlLnRvU3RyaW5nKCk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KTQvtGA0LzQuNGA0L7QstCw0L3QuNC1INC60L7QvdGC0LXQvdGC0LBcclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIHJlbmRlcigpIHtcclxuXHJcbiAgICAgICAgbGV0IG9wdGlvbnMgPSB0aGlzLmdldE9wdGlvbnMoKTtcclxuICAgICAgICBsZXQgbGFiZWwgICA9IHR5cGVvZiBvcHRpb25zLmxhYmVsID09PSAnc3RyaW5nJyB8fCB0eXBlb2Ygb3B0aW9ucy5sYWJlbCA9PT0gJ251bWJlcidcclxuICAgICAgICAgICAgPyBvcHRpb25zLmxhYmVsXHJcbiAgICAgICAgICAgIDogJyc7XHJcblxyXG4gICAgICAgIGlmICggISBjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KG9wdGlvbnMuYXR0cikpIHtcclxuICAgICAgICAgICAgb3B0aW9ucy5hdHRyID0ge307XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAob3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnd2lkdGgnKSAmJlxyXG4gICAgICAgICAgICBjb3JldWlUYWJsZVV0aWxzLmlzTnVtZXJpYyhvcHRpb25zLndpZHRoKVxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5hdHRyLmhhc093blByb3BlcnR5KCdzdHlsZScpKSB7XHJcbiAgICAgICAgICAgICAgICBvcHRpb25zLmF0dHJbJ3N0eWxlJ10gKz0gJzt3aWR0aDonICsgb3B0aW9ucy53aWR0aCArICdweCc7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBvcHRpb25zLmF0dHJbJ3N0eWxlJ10gPSAnd2lkdGg6JyArIG9wdGlvbnMud2lkdGggKyAncHgnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBvcHRpb25zLmF0dHJbJ3ZhbHVlJ10gPSB0eXBlb2YgdGhpcy5fdmFsdWUgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiB0aGlzLl92YWx1ZSA9PT0gJ251bWJlcidcclxuICAgICAgICAgICAgPyB0aGlzLl92YWx1ZVxyXG4gICAgICAgICAgICA6ICcnO1xyXG5cclxuICAgICAgICBpZiAob3B0aW9ucy5hdHRyLmhhc093blByb3BlcnR5KCd0eXBlJykpIHtcclxuICAgICAgICAgICAgZGVsZXRlIG9wdGlvbnMuYXR0ci50eXBlO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIGxldCBhdHRyICA9IFtdO1xyXG4gICAgICAgIGxldCB0YWJsZSA9IHRoaXMuX3RhYmxlO1xyXG5cclxuICAgICAgICAkLmVhY2gob3B0aW9ucy5hdHRyLCBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcclxuICAgICAgICAgICAgYXR0ci5wdXNoKG5hbWUgKyAnPVwiJyArIHZhbHVlICsgJ1wiJyk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuX2NvbnRyb2wgPSAkKGNvcmV1aVRhYmxlVXRpbHMucmVuZGVyKGNvcmV1aVRhYmxlVHBsWydmaWx0ZXJzL2RhdGV0aW1lLmh0bWwnXSwge1xyXG4gICAgICAgICAgICBhdHRyOiBhdHRyLmxlbmd0aCA+IDAgPyAoJyAnICsgYXR0ci5qb2luKCcgJykpIDogJycsXHJcbiAgICAgICAgICAgIGxhYmVsOiBsYWJlbFxyXG4gICAgICAgIH0pKTtcclxuXHJcbiAgICAgICAgJCgnaW5wdXQnLCB0aGlzLl9jb250cm9sKS5jaGFuZ2UoZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICB0YWJsZS5zZWFyY2hSZWNvcmRzKCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLl9jb250cm9sO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBGaWx0ZXJEYXRldGltZTsiLCJcclxuaW1wb3J0IGNvcmV1aVRhYmxlVHBsICAgICAgZnJvbSBcIi4uL2NvcmV1aS50YWJsZS50ZW1wbGF0ZXNcIjtcclxuaW1wb3J0IGNvcmV1aVRhYmxlVXRpbHMgICAgZnJvbSBcIi4uL2NvcmV1aS50YWJsZS51dGlsc1wiO1xyXG5pbXBvcnQgY29yZXVpVGFibGVFbGVtZW50cyBmcm9tIFwiLi4vY29yZXVpLnRhYmxlLmVsZW1lbnRzXCI7XHJcbmltcG9ydCBGaWx0ZXIgICAgICAgICAgICAgIGZyb20gXCIuLi9hYnN0cmFjdC9GaWx0ZXJcIjtcclxuXHJcbmNsYXNzIEZpbHRlckRhdGVNb250aCBleHRlbmRzIEZpbHRlciB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQmNC90LjRhtC40LDQu9C40LfQsNGG0LjRj1xyXG4gICAgICogQHBhcmFtIHtjb3JldWlUYWJsZUluc3RhbmNlfSB0YWJsZVxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9ICAgICAgICAgICAgICBvcHRpb25zXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKHRhYmxlLCBvcHRpb25zKSB7XHJcblxyXG4gICAgICAgIG9wdGlvbnMgPSAkLmV4dGVuZCh0cnVlLCB7XHJcbiAgICAgICAgICAgIGlkOiBudWxsLFxyXG4gICAgICAgICAgICB0eXBlOiAnZGF0ZV9tb250aCcsXHJcbiAgICAgICAgICAgIGZpZWxkOiBudWxsLFxyXG4gICAgICAgICAgICBsYWJlbDogbnVsbCxcclxuICAgICAgICAgICAgdmFsdWU6IG51bGwsXHJcbiAgICAgICAgICAgIHdpZHRoOiAyMDAsXHJcbiAgICAgICAgICAgIGF0dHI6IHtcclxuICAgICAgICAgICAgICAgIGNsYXNzOiBcImZvcm0tY29udHJvbFwiLFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSwgb3B0aW9ucyk7XHJcblxyXG4gICAgICAgIHN1cGVyKHRhYmxlLCBvcHRpb25zKTtcclxuXHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLnZhbHVlICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0VmFsdWUodGhpcy5fb3B0aW9ucy52YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCj0YHRgtCw0L3QvtCy0LrQsCDQt9C90LDRh9C10L3QuNGPXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ3xudWxsfSB2YWx1ZVxyXG4gICAgICovXHJcbiAgICBzZXRWYWx1ZSh2YWx1ZSkge1xyXG5cclxuICAgICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJyAmJiB2YWx1ZSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodmFsdWUgJiZcclxuICAgICAgICAgICAgKFxyXG4gICAgICAgICAgICAgICAgdmFsdWUubWF0Y2goL15cXGR7NH1cXC1cXGR7Mn0kLykgPT09IG51bGwgfHxcclxuICAgICAgICAgICAgICAgIGlzTmFOKG5ldyBEYXRlKHZhbHVlKSlcclxuICAgICAgICAgICAgKVxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl92YWx1ZSA9IHZhbHVlO1xyXG5cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX2NvbnRyb2wpIHtcclxuICAgICAgICAgICAgJCgnaW5wdXQnLCB0aGlzLl9jb250cm9sKS52YWwoXHJcbiAgICAgICAgICAgICAgICB0aGlzLl92YWx1ZSA9PT0gbnVsbCA/ICcnIDogdGhpcy5fdmFsdWVcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC30L3QsNGH0LXQvdC40Y9cclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd8bnVsbH1cclxuICAgICAqL1xyXG4gICAgZ2V0VmFsdWUoKSB7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9jb250cm9sKSB7XHJcbiAgICAgICAgICAgIGxldCB2YWx1ZSA9ICQoJ2lucHV0JywgdGhpcy5fY29udHJvbCkudmFsKCk7XHJcblxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJiB2YWx1ZSAhPT0gJycpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5fdmFsdWU7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KTQuNC70YzRgtGA0LDRhtC40Y8g0LTQsNC90L3Ri9GFXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBmaWVsZFZhbHVlXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBzZWFyY2hWYWx1ZVxyXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAgICAgKi9cclxuICAgIGZpbHRlcihmaWVsZFZhbHVlLCBzZWFyY2hWYWx1ZSkge1xyXG5cclxuICAgICAgICBpZiAoWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2YgZmllbGRWYWx1ZSkgPCAwIHx8XHJcbiAgICAgICAgICAgIFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIHNlYXJjaFZhbHVlKSA8IDBcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGZpZWxkVmFsdWUudG9TdHJpbmcoKS50b0xvd2VyQ2FzZSgpLmluZGV4T2YoXHJcbiAgICAgICAgICAgIHNlYXJjaFZhbHVlLnRvU3RyaW5nKCkudG9Mb3dlckNhc2UoKVxyXG4gICAgICAgICkgPT09IDBcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQpNC+0YDQvNC40YDQvtCy0LDQvdC40LUg0LrQvtC90YLQtdC90YLQsFxyXG4gICAgICogQHJldHVybnMge2pRdWVyeX1cclxuICAgICAqL1xyXG4gICAgcmVuZGVyKCkge1xyXG5cclxuICAgICAgICBsZXQgb3B0aW9ucyA9IHRoaXMuZ2V0T3B0aW9ucygpO1xyXG4gICAgICAgIGxldCBsYWJlbCAgID0gdHlwZW9mIG9wdGlvbnMubGFiZWwgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBvcHRpb25zLmxhYmVsID09PSAnbnVtYmVyJ1xyXG4gICAgICAgICAgICA/IG9wdGlvbnMubGFiZWxcclxuICAgICAgICAgICAgOiAnJztcclxuXHJcbiAgICAgICAgaWYgKCAhIGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3Qob3B0aW9ucy5hdHRyKSkge1xyXG4gICAgICAgICAgICBvcHRpb25zLmF0dHIgPSB7fTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChvcHRpb25zLmhhc093blByb3BlcnR5KCd3aWR0aCcpICYmXHJcbiAgICAgICAgICAgIGNvcmV1aVRhYmxlVXRpbHMuaXNOdW1lcmljKG9wdGlvbnMud2lkdGgpXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmF0dHIuaGFzT3duUHJvcGVydHkoJ3N0eWxlJykpIHtcclxuICAgICAgICAgICAgICAgIG9wdGlvbnMuYXR0clsnc3R5bGUnXSArPSAnO3dpZHRoOicgKyBvcHRpb25zLndpZHRoICsgJ3B4JztcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIG9wdGlvbnMuYXR0clsnc3R5bGUnXSA9ICd3aWR0aDonICsgb3B0aW9ucy53aWR0aCArICdweCc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIG9wdGlvbnMuYXR0clsndmFsdWUnXSA9IHR5cGVvZiB0aGlzLl92YWx1ZSA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIHRoaXMuX3ZhbHVlID09PSAnbnVtYmVyJ1xyXG4gICAgICAgICAgICA/IHRoaXMuX3ZhbHVlXHJcbiAgICAgICAgICAgIDogJyc7XHJcblxyXG4gICAgICAgIGlmIChvcHRpb25zLmF0dHIuaGFzT3duUHJvcGVydHkoJ3R5cGUnKSkge1xyXG4gICAgICAgICAgICBkZWxldGUgb3B0aW9ucy5hdHRyLnR5cGU7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgbGV0IGF0dHIgID0gW107XHJcbiAgICAgICAgbGV0IHRhYmxlID0gdGhpcy5fdGFibGU7XHJcblxyXG4gICAgICAgICQuZWFjaChvcHRpb25zLmF0dHIsIGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xyXG4gICAgICAgICAgICBhdHRyLnB1c2gobmFtZSArICc9XCInICsgdmFsdWUgKyAnXCInKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5fY29udHJvbCA9ICQoY29yZXVpVGFibGVVdGlscy5yZW5kZXIoY29yZXVpVGFibGVUcGxbJ2ZpbHRlcnMvZGF0ZV9tb250aC5odG1sJ10sIHtcclxuICAgICAgICAgICAgYXR0cjogYXR0ci5sZW5ndGggPiAwID8gKCcgJyArIGF0dHIuam9pbignICcpKSA6ICcnLFxyXG4gICAgICAgICAgICBsYWJlbDogbGFiZWxcclxuICAgICAgICB9KSk7XHJcblxyXG4gICAgICAgICQoJ2lucHV0JywgdGhpcy5fY29udHJvbCkuY2hhbmdlKGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgdGFibGUuc2VhcmNoUmVjb3JkcygpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5fY29udHJvbDtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgRmlsdGVyRGF0ZU1vbnRoOyIsIlxyXG5pbXBvcnQgY29yZXVpVGFibGVUcGwgICAgICBmcm9tIFwiLi4vY29yZXVpLnRhYmxlLnRlbXBsYXRlc1wiO1xyXG5pbXBvcnQgY29yZXVpVGFibGVVdGlscyAgICBmcm9tIFwiLi4vY29yZXVpLnRhYmxlLnV0aWxzXCI7XHJcbmltcG9ydCBjb3JldWlUYWJsZUVsZW1lbnRzIGZyb20gXCIuLi9jb3JldWkudGFibGUuZWxlbWVudHNcIjtcclxuaW1wb3J0IEZpbHRlciAgICAgICAgICAgICAgZnJvbSBcIi4uL2Fic3RyYWN0L0ZpbHRlclwiO1xyXG5cclxuY2xhc3MgRmlsdGVyRGF0ZVJhbmdlIGV4dGVuZHMgRmlsdGVyIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPXHJcbiAgICAgKiBAcGFyYW0ge2NvcmV1aVRhYmxlSW5zdGFuY2V9IHRhYmxlXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gICAgICAgICAgICAgIG9wdGlvbnNcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IodGFibGUsIG9wdGlvbnMpIHtcclxuXHJcbiAgICAgICAgb3B0aW9ucyA9ICQuZXh0ZW5kKHRydWUsIHtcclxuICAgICAgICAgICAgaWQ6IG51bGwsXHJcbiAgICAgICAgICAgIHR5cGU6ICdkYXRlX3JhbmdlJyxcclxuICAgICAgICAgICAgZmllbGQ6IG51bGwsXHJcbiAgICAgICAgICAgIGxhYmVsOiBudWxsLFxyXG4gICAgICAgICAgICB2YWx1ZTogbnVsbCxcclxuICAgICAgICAgICAgd2lkdGg6IDIwMCxcclxuICAgICAgICAgICAgYXR0cjoge1xyXG4gICAgICAgICAgICAgICAgY2xhc3M6IFwiZm9ybS1jb250cm9sIGQtaW5saW5lLWJsb2NrXCIsXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LCBvcHRpb25zKTtcclxuXHJcbiAgICAgICAgc3VwZXIodGFibGUsIG9wdGlvbnMpO1xyXG5cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMudmFsdWUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5zZXRWYWx1ZSh0aGlzLl9vcHRpb25zLnZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KPRgdGC0LDQvdC+0LLQutCwINC30L3QsNGH0LXQvdC40Y9cclxuICAgICAqIEBwYXJhbSB7b2JqZWN0fG51bGx9IHZhbHVlXHJcbiAgICAgKi9cclxuICAgIHNldFZhbHVlKHZhbHVlKSB7XHJcblxyXG4gICAgICAgIGlmICh2YWx1ZSkge1xyXG4gICAgICAgICAgICBpZiAoICEgY29yZXVpVGFibGVVdGlscy5pc09iamVjdCh2YWx1ZSkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgbGV0IGRhdGVTdGFydCA9IG51bGw7XHJcbiAgICAgICAgICAgIGxldCBkYXRlRW5kICAgPSBudWxsO1xyXG5cclxuICAgICAgICAgICAgaWYgKHZhbHVlLmhhc093blByb3BlcnR5KCdzdGFydCcpICYmXHJcbiAgICAgICAgICAgICAgICB0eXBlb2YgdmFsdWUuc3RhcnQgPT09ICdzdHJpbmcnICYmXHJcbiAgICAgICAgICAgICAgICB2YWx1ZS5zdGFydC5tYXRjaCgvXlxcZHs0fVxcLVxcZHsyfVxcLVxcZHsyfSQvKSA9PT0gbnVsbCAmJlxyXG4gICAgICAgICAgICAgICAgaXNOYU4obmV3IERhdGUodmFsdWUuc3RhcnQpKVxyXG4gICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgIGRhdGVTdGFydCA9IHZhbHVlLnN0YXJ0O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodmFsdWUuaGFzT3duUHJvcGVydHkoJ2VuZCcpICYmXHJcbiAgICAgICAgICAgICAgICB0eXBlb2YgdmFsdWUuZW5kID09PSAnc3RyaW5nJyAmJlxyXG4gICAgICAgICAgICAgICAgdmFsdWUuZW5kLm1hdGNoKC9eXFxkezR9XFwtXFxkezJ9XFwtXFxkezJ9JC8pID09PSBudWxsICYmXHJcbiAgICAgICAgICAgICAgICBpc05hTihuZXcgRGF0ZSh2YWx1ZS5lbmQpKVxyXG4gICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgIGRhdGVFbmQgPSB2YWx1ZS5lbmQ7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChkYXRlU3RhcnQgPT09IG51bGwgJiYgZGF0ZUVuZCA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fdmFsdWUgPSBudWxsO1xyXG5cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3ZhbHVlID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0OiBkYXRlU3RhcnQsXHJcbiAgICAgICAgICAgICAgICAgICAgZW5kOiBkYXRlRW5kXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3ZhbHVlID0gbnVsbDtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICBpZiAodGhpcy5fY29udHJvbCkge1xyXG4gICAgICAgICAgICBsZXQgaW5wdXRTdGFydCA9IHRoaXMuX2NvbnRyb2wucGFyZW50KCkuZmluZCgnaW5wdXQuZGF0ZS1zdGFydCcpO1xyXG4gICAgICAgICAgICBsZXQgaW5wdXRFbmQgICA9IHRoaXMuX2NvbnRyb2wucGFyZW50KCkuZmluZCgnaW5wdXQuZGF0ZS1lbmQnKTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLl92YWx1ZSA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgaW5wdXRTdGFydC52YWwoJycpO1xyXG4gICAgICAgICAgICAgICAgaW5wdXRFbmQudmFsKCcnKTtcclxuXHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY29yZXVpVGFibGVVdGlscy5pc09iamVjdCh0aGlzLl92YWx1ZSkpIHtcclxuICAgICAgICAgICAgICAgIGlucHV0U3RhcnQudmFsKHR5cGVvZiB0aGlzLl92YWx1ZS5zdGFydCAhPT0gbnVsbCA/IHRoaXMuX3ZhbHVlLnN0YXJ0IDogJycpO1xyXG4gICAgICAgICAgICAgICAgaW5wdXRFbmQudmFsKHR5cGVvZiB0aGlzLl92YWx1ZS5lbmQgIT09IG51bGwgPyB0aGlzLl92YWx1ZS5lbmQgOiAnJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC30L3QsNGH0LXQvdC40Y9cclxuICAgICAqIEByZXR1cm5zIHtPYmplY3R8bnVsbH1cclxuICAgICAqL1xyXG4gICAgZ2V0VmFsdWUoKSB7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9jb250cm9sKSB7XHJcbiAgICAgICAgICAgIGxldCBpbnB1dFN0YXJ0ID0gdGhpcy5fY29udHJvbC5wYXJlbnQoKS5maW5kKCdpbnB1dC5kYXRlLXN0YXJ0Jyk7XHJcbiAgICAgICAgICAgIGxldCBpbnB1dEVuZCAgID0gdGhpcy5fY29udHJvbC5wYXJlbnQoKS5maW5kKCdpbnB1dC5kYXRlLWVuZCcpO1xyXG5cclxuICAgICAgICAgICAgaWYgKGlucHV0U3RhcnRbMF0gJiYgaW5wdXRFbmRbMF0pIHtcclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgdmFsdWVTdGFydCA9IGlucHV0U3RhcnQudmFsKCk7XHJcbiAgICAgICAgICAgICAgICBsZXQgdmFsdWVFbmQgICA9IGlucHV0RW5kLnZhbCgpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChcclxuICAgICAgICAgICAgICAgICAgICAodHlwZW9mIHZhbHVlU3RhcnQgPT09ICdzdHJpbmcnICYmIHZhbHVlU3RhcnQgIT09ICcnKSB8fFxyXG4gICAgICAgICAgICAgICAgICAgICh0eXBlb2YgdmFsdWVFbmQgPT09ICdzdHJpbmcnICYmIHZhbHVlRW5kICE9PSAnJylcclxuICAgICAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0OiB2YWx1ZVN0YXJ0ICE9PSAnJyA/IHZhbHVlU3RhcnQgOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbmQ6IHZhbHVlRW5kICE9PSAnJyA/IHZhbHVlRW5kIDogbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCk0LjQu9GM0YLRgNCw0YbQuNGPINC00LDQvdC90YvRhVxyXG4gICAgICogQHJldHVybnMge3N0cmluZ30gICAgICAgICAgICAgIGZpZWxkVmFsdWVcclxuICAgICAqIEByZXR1cm5zIHtBcnJheXxzdHJpbmd8bnVtYmVyfSBzZWFyY2hWYWx1ZVxyXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAgICAgKi9cclxuICAgIGZpbHRlcihmaWVsZFZhbHVlLCBzZWFyY2hWYWx1ZSkge1xyXG5cclxuICAgICAgICBpZiAoWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2YgZmllbGRWYWx1ZSkgPCAwIHx8XHJcbiAgICAgICAgICAgICEgY29yZXVpVGFibGVVdGlscy5pc09iamVjdChzZWFyY2hWYWx1ZSkgfHxcclxuICAgICAgICAgICAgKHR5cGVvZiBzZWFyY2hWYWx1ZS5zdGFydCAhPT0gJ3N0cmluZycgJiYgdHlwZW9mIHNlYXJjaFZhbHVlLmVuZCAhPT0gJ3N0cmluZycpXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICBsZXQgaXNzZXRTdGFydCA9IFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIHNlYXJjaFZhbHVlLnN0YXJ0KSA+PSAwO1xyXG4gICAgICAgIGxldCBpc3NldEVuZCAgID0gWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2Ygc2VhcmNoVmFsdWUuZW5kKSA+PSAwO1xyXG5cclxuICAgICAgICBpZiAoaXNzZXRTdGFydCAmJiBpc3NldEVuZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmllbGRWYWx1ZSA+PSBzZWFyY2hWYWx1ZS5zdGFydCAmJiBmaWVsZFZhbHVlIDw9IHNlYXJjaFZhbHVlLmVuZDtcclxuXHJcbiAgICAgICAgfSBlbHNlIGlmIChpc3NldFN0YXJ0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmaWVsZFZhbHVlID49IHNlYXJjaFZhbHVlLnN0YXJ0O1xyXG5cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gZmllbGRWYWx1ZSA8PSBzZWFyY2hWYWx1ZS5lbmQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCk0L7RgNC80LjRgNC+0LLQsNC90LjQtSDQutC+0L3RgtC10L3RgtCwXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxyXG4gICAgICovXHJcbiAgICByZW5kZXIoKSB7XHJcblxyXG4gICAgICAgIGxldCBvcHRpb25zID0gdGhpcy5nZXRPcHRpb25zKCk7XHJcbiAgICAgICAgbGV0IGxhYmVsICAgPSB0eXBlb2Ygb3B0aW9ucy5sYWJlbCA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIG9wdGlvbnMubGFiZWwgPT09ICdudW1iZXInXHJcbiAgICAgICAgICAgID8gb3B0aW9ucy5sYWJlbFxyXG4gICAgICAgICAgICA6ICcnO1xyXG5cclxuICAgICAgICBpZiAoICEgY29yZXVpVGFibGVVdGlscy5pc09iamVjdChvcHRpb25zLmF0dHIpKSB7XHJcbiAgICAgICAgICAgIG9wdGlvbnMuYXR0ciA9IHt9O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKG9wdGlvbnMuaGFzT3duUHJvcGVydHkoJ3dpZHRoJykgJiZcclxuICAgICAgICAgICAgY29yZXVpVGFibGVVdGlscy5pc051bWVyaWMob3B0aW9ucy53aWR0aClcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuYXR0ci5oYXNPd25Qcm9wZXJ0eSgnc3R5bGUnKSkge1xyXG4gICAgICAgICAgICAgICAgb3B0aW9ucy5hdHRyWydzdHlsZSddICs9ICc7d2lkdGg6JyArIG9wdGlvbnMud2lkdGggKyAncHgnO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgb3B0aW9ucy5hdHRyWydzdHlsZSddID0gJ3dpZHRoOicgKyBvcHRpb25zLndpZHRoICsgJ3B4JztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKG9wdGlvbnMuYXR0ci5oYXNPd25Qcm9wZXJ0eSgndHlwZScpKSB7XHJcbiAgICAgICAgICAgIGRlbGV0ZSBvcHRpb25zLmF0dHIudHlwZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChvcHRpb25zLmF0dHIuaGFzT3duUHJvcGVydHkoJ3ZhbHVlJykpIHtcclxuICAgICAgICAgICAgZGVsZXRlIG9wdGlvbnMuYXR0ci52YWx1ZTtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICBsZXQgZmllbGQgICAgID0gdHlwZW9mIG9wdGlvbnMuZmllbGQgPT09ICdzdHJpbmcnID8gb3B0aW9ucy5maWVsZCA6ICcnO1xyXG4gICAgICAgIGxldCBzdGFydEF0dHIgPSBbXTtcclxuICAgICAgICBsZXQgc3RhcnRFbmQgID0gW107XHJcbiAgICAgICAgbGV0IHRhYmxlICAgICA9IHRoaXMuX3RhYmxlO1xyXG5cclxuXHJcbiAgICAgICAgJC5lYWNoKG9wdGlvbnMuYXR0ciwgZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XHJcbiAgICAgICAgICAgIGlmIChbJ25hbWUnLCAndmFsdWUnLCAnY2xhc3MnXS5pbmRleE9mKG5hbWUpID49IDAgfHxcclxuICAgICAgICAgICAgICAgIFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIHZhbHVlKSA8IDBcclxuICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHN0YXJ0QXR0ci5wdXNoKG5hbWUgKyAnPVwiJyArIHZhbHVlICsgJ1wiJyk7XHJcbiAgICAgICAgICAgIHN0YXJ0RW5kLnB1c2gobmFtZSArICc9XCInICsgdmFsdWUgKyAnXCInKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgaWYgKG9wdGlvbnMuYXR0ci5oYXNPd25Qcm9wZXJ0eSgnY2xhc3MnKSAmJlxyXG4gICAgICAgICAgICBbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiBvcHRpb25zLmF0dHIuY2xhc3MpID49IDBcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgc3RhcnRBdHRyLnB1c2goJ2NsYXNzPVwiJyArIG9wdGlvbnMuYXR0ci5jbGFzcyArICcgZGF0ZS1zdGFydFwiJyk7XHJcbiAgICAgICAgICAgIHN0YXJ0RW5kLnB1c2goJ2NsYXNzPVwiJyArIG9wdGlvbnMuYXR0ci5jbGFzcyArICcgZGF0ZS1lbmRcIicpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHN0YXJ0QXR0ci5wdXNoKCdjbGFzcz1cImRhdGUtc3RhcnRcIicpO1xyXG4gICAgICAgICAgICBzdGFydEVuZC5wdXNoKCdjbGFzcz1cImRhdGUtZW5kXCInKTtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICBpZiAoZmllbGQpIHtcclxuICAgICAgICAgICAgc3RhcnRBdHRyLnB1c2goJ25hbWU9XCInICsgZmllbGQgKyAnW3N0YXJ0XVwiJyk7XHJcbiAgICAgICAgICAgIHN0YXJ0RW5kLnB1c2goJ25hbWU9XCInICsgZmllbGQgKyAnW2VuZF1cIicpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc3RhcnRBdHRyLnB1c2goJ3ZhbHVlPVwiJyArICh0aGlzLl92YWx1ZSA/IHRoaXMuX3ZhbHVlLnN0YXJ0IDogJycpICsgJ1wiJyk7XHJcbiAgICAgICAgc3RhcnRFbmQucHVzaCgndmFsdWU9XCInICsgKHRoaXMuX3ZhbHVlID8gdGhpcy5fdmFsdWUuZW5kIDogJycpICsgJ1wiJyk7XHJcblxyXG5cclxuICAgICAgICBsZXQgY29udHJvbCA9ICQoY29yZXVpVGFibGVVdGlscy5yZW5kZXIoY29yZXVpVGFibGVUcGxbJ2ZpbHRlcnMvZGF0ZV9yYW5nZS5odG1sJ10sIHtcclxuICAgICAgICAgICAgbGFiZWw6IGxhYmVsLFxyXG4gICAgICAgICAgICBzdGFydEF0dHI6IHN0YXJ0QXR0ci5sZW5ndGggPiAwID8gKCcgJyArIHN0YXJ0QXR0ci5qb2luKCcgJykpIDogJycsXHJcbiAgICAgICAgICAgIGVuZEF0dHI6IHN0YXJ0RW5kLmxlbmd0aCA+IDAgPyAoJyAnICsgc3RhcnRFbmQuam9pbignICcpKSA6ICcnLFxyXG4gICAgICAgIH0pKTtcclxuXHJcbiAgICAgICAgJCgnaW5wdXQnLCBjb250cm9sKS5jaGFuZ2UoZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICB0YWJsZS5zZWFyY2hSZWNvcmRzKCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG5cclxuICAgICAgICAkKCdpbnB1dC5kYXRlLXN0YXJ0JywgY29udHJvbCkuY2hhbmdlKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBsZXQgZGF0ZUVuZCA9ICQoJ2lucHV0LmRhdGUtZW5kJywgY29udHJvbCkuYXR0cignbWluJywgJCh0aGlzKS52YWwoKSk7XHJcblxyXG4gICAgICAgICAgICBpZiAoXCJzaG93UGlja2VyXCIgaW4gSFRNTElucHV0RWxlbWVudC5wcm90b3R5cGUpIHtcclxuICAgICAgICAgICAgICAgICQoZGF0ZUVuZClbMF0uc2hvd1BpY2tlcigpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgJCgnaW5wdXQuZGF0ZS1lbmQnLCBjb250cm9sKS5jaGFuZ2UoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICQoJ2lucHV0LmRhdGUtc3RhcnQnLCBjb250cm9sKS5hdHRyKCdtYXgnLCAkKHRoaXMpLnZhbCgpKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5fY29udHJvbCA9IGNvbnRyb2w7XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLl9jb250cm9sO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBGaWx0ZXJEYXRlUmFuZ2U7IiwiXHJcbmltcG9ydCBjb3JldWlUYWJsZVRwbCAgICAgIGZyb20gXCIuLi9jb3JldWkudGFibGUudGVtcGxhdGVzXCI7XHJcbmltcG9ydCBjb3JldWlUYWJsZVV0aWxzICAgIGZyb20gXCIuLi9jb3JldWkudGFibGUudXRpbHNcIjtcclxuaW1wb3J0IGNvcmV1aVRhYmxlRWxlbWVudHMgZnJvbSBcIi4uL2NvcmV1aS50YWJsZS5lbGVtZW50c1wiO1xyXG5pbXBvcnQgRmlsdGVyICAgICAgICAgICAgICBmcm9tIFwiLi4vYWJzdHJhY3QvRmlsdGVyXCI7XHJcblxyXG5jbGFzcyBGaWx0ZXJEYXRldGltZVJhbmdlIGV4dGVuZHMgRmlsdGVyIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPXHJcbiAgICAgKiBAcGFyYW0ge2NvcmV1aVRhYmxlSW5zdGFuY2V9IHRhYmxlXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gICAgICAgICAgICAgIG9wdGlvbnNcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IodGFibGUsIG9wdGlvbnMpIHtcclxuXHJcbiAgICAgICAgb3B0aW9ucyA9ICQuZXh0ZW5kKHRydWUsIHtcclxuICAgICAgICAgICAgaWQ6IG51bGwsXHJcbiAgICAgICAgICAgIHR5cGU6ICdkYXRldGltZV9yYW5nZScsXHJcbiAgICAgICAgICAgIGZpZWxkOiBudWxsLFxyXG4gICAgICAgICAgICBsYWJlbDogbnVsbCxcclxuICAgICAgICAgICAgdmFsdWU6IG51bGwsXHJcbiAgICAgICAgICAgIHdpZHRoOiAyMDAsXHJcbiAgICAgICAgICAgIGF0dHI6IHtcclxuICAgICAgICAgICAgICAgIGNsYXNzOiBcImZvcm0tY29udHJvbCBkLWlubGluZS1ibG9ja1wiLFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSwgb3B0aW9ucyk7XHJcblxyXG4gICAgICAgIHN1cGVyKHRhYmxlLCBvcHRpb25zKTtcclxuXHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLnZhbHVlICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0VmFsdWUodGhpcy5fb3B0aW9ucy52YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCj0YHRgtCw0L3QvtCy0LrQsCDQt9C90LDRh9C10L3QuNGPXHJcbiAgICAgKiBAcGFyYW0ge29iamVjdHxudWxsfSB2YWx1ZVxyXG4gICAgICovXHJcbiAgICBzZXRWYWx1ZSh2YWx1ZSkge1xyXG5cclxuICAgICAgICBpZiAodmFsdWUpIHtcclxuICAgICAgICAgICAgaWYgKCAhIGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QodmFsdWUpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGxldCBkYXRlU3RhcnQgPSBudWxsO1xyXG4gICAgICAgICAgICBsZXQgZGF0ZUVuZCAgID0gbnVsbDtcclxuXHJcbiAgICAgICAgICAgIGlmICh2YWx1ZS5oYXNPd25Qcm9wZXJ0eSgnc3RhcnQnKSAmJlxyXG4gICAgICAgICAgICAgICAgdHlwZW9mIHZhbHVlLnN0YXJ0ID09PSAnc3RyaW5nJyAmJlxyXG4gICAgICAgICAgICAgICAgdmFsdWUuc3RhcnQubWF0Y2goL15cXGR7NH1cXC1cXGR7Mn1cXC1cXGR7Mn0oVHwgKVxcZHsyfTpcXGR7Mn0oOlxcZHsyfXwpJC8pID09PSBudWxsICYmXHJcbiAgICAgICAgICAgICAgICBpc05hTihuZXcgRGF0ZSh2YWx1ZS5zdGFydCkpXHJcbiAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgZGF0ZVN0YXJ0ID0gdmFsdWUuc3RhcnQ7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh2YWx1ZS5oYXNPd25Qcm9wZXJ0eSgnZW5kJykgJiZcclxuICAgICAgICAgICAgICAgIHR5cGVvZiB2YWx1ZS5lbmQgPT09ICdzdHJpbmcnICYmXHJcbiAgICAgICAgICAgICAgICB2YWx1ZS5lbmQubWF0Y2goL15cXGR7NH1cXC1cXGR7Mn1cXC1cXGR7Mn0oVHwgKVxcZHsyfTpcXGR7Mn0oOlxcZHsyfXwpJC8pID09PSBudWxsICYmXHJcbiAgICAgICAgICAgICAgICBpc05hTihuZXcgRGF0ZSh2YWx1ZS5lbmQpKVxyXG4gICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgIGRhdGVFbmQgPSB2YWx1ZS5lbmQ7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChkYXRlU3RhcnQgPT09IG51bGwgJiYgZGF0ZUVuZCA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fdmFsdWUgPSBudWxsO1xyXG5cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3ZhbHVlID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0OiBkYXRlU3RhcnQsXHJcbiAgICAgICAgICAgICAgICAgICAgZW5kOiAgIGRhdGVFbmRcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5fdmFsdWUgPSBudWxsO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9jb250cm9sKSB7XHJcbiAgICAgICAgICAgIGxldCBpbnB1dFN0YXJ0ID0gdGhpcy5fY29udHJvbC5wYXJlbnQoKS5maW5kKCdpbnB1dC5kYXRlLXN0YXJ0Jyk7XHJcbiAgICAgICAgICAgIGxldCBpbnB1dEVuZCAgID0gdGhpcy5fY29udHJvbC5wYXJlbnQoKS5maW5kKCdpbnB1dC5kYXRlLWVuZCcpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuX3ZhbHVlID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBpbnB1dFN0YXJ0LnZhbCgnJyk7XHJcbiAgICAgICAgICAgICAgICBpbnB1dEVuZC52YWwoJycpO1xyXG5cclxuICAgICAgICAgICAgfSBlbHNlIGlmIChjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KHRoaXMuX3ZhbHVlKSkge1xyXG4gICAgICAgICAgICAgICAgaW5wdXRTdGFydC52YWwodHlwZW9mIHRoaXMuX3ZhbHVlLnN0YXJ0ICE9PSBudWxsID8gdGhpcy5fdmFsdWUuc3RhcnQgOiAnJyk7XHJcbiAgICAgICAgICAgICAgICBpbnB1dEVuZC52YWwodHlwZW9mIHRoaXMuX3ZhbHVlLmVuZCAhPT0gbnVsbCA/IHRoaXMuX3ZhbHVlLmVuZCA6ICcnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0LfQvdCw0YfQtdC90LjRj1xyXG4gICAgICogQHJldHVybnMge09iamVjdHxudWxsfVxyXG4gICAgICovXHJcbiAgICBnZXRWYWx1ZSgpIHtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX2NvbnRyb2wpIHtcclxuICAgICAgICAgICAgbGV0IGlucHV0U3RhcnQgPSB0aGlzLl9jb250cm9sLnBhcmVudCgpLmZpbmQoJ2lucHV0LmRhdGUtc3RhcnQnKTtcclxuICAgICAgICAgICAgbGV0IGlucHV0RW5kICAgPSB0aGlzLl9jb250cm9sLnBhcmVudCgpLmZpbmQoJ2lucHV0LmRhdGUtZW5kJyk7XHJcblxyXG4gICAgICAgICAgICBpZiAoaW5wdXRTdGFydFswXSAmJiBpbnB1dEVuZFswXSkge1xyXG4gICAgICAgICAgICAgICAgbGV0IHZhbHVlU3RhcnQgPSBpbnB1dFN0YXJ0LnZhbCgpO1xyXG4gICAgICAgICAgICAgICAgbGV0IHZhbHVlRW5kICAgPSBpbnB1dEVuZC52YWwoKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoKHR5cGVvZiB2YWx1ZVN0YXJ0ID09PSAnc3RyaW5nJyAmJiB2YWx1ZVN0YXJ0ICE9PSAnJykgfHxcclxuICAgICAgICAgICAgICAgICAgICAodHlwZW9mIHZhbHVlRW5kID09PSAnc3RyaW5nJyAmJiB2YWx1ZUVuZCAhPT0gJycpXHJcbiAgICAgICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFydDogdmFsdWVTdGFydCAhPT0gJycgPyB2YWx1ZVN0YXJ0IDogbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZW5kOiB2YWx1ZUVuZCAhPT0gJycgPyB2YWx1ZUVuZCA6IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5fdmFsdWU7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KTQuNC70YzRgtGA0LDRhtC40Y8g0LTQsNC90L3Ri9GFXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSAgICAgICAgICAgICAgZmllbGRWYWx1ZVxyXG4gICAgICogQHJldHVybnMge0FycmF5fHN0cmluZ3xudW1iZXJ9IHNlYXJjaFZhbHVlXHJcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICAgICAqL1xyXG4gICAgZmlsdGVyKGZpZWxkVmFsdWUsIHNlYXJjaFZhbHVlKSB7XHJcblxyXG4gICAgICAgIGlmIChbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiBmaWVsZFZhbHVlKSA8IDAgfHxcclxuICAgICAgICAgICAgISBjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KHNlYXJjaFZhbHVlKSB8fFxyXG4gICAgICAgICAgICAodHlwZW9mIHNlYXJjaFZhbHVlLnN0YXJ0ICE9PSAnc3RyaW5nJyAmJiB0eXBlb2Ygc2VhcmNoVmFsdWUuZW5kICE9PSAnc3RyaW5nJylcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIGxldCBpc3NldFN0YXJ0ID0gWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2Ygc2VhcmNoVmFsdWUuc3RhcnQpID49IDA7XHJcbiAgICAgICAgbGV0IGlzc2V0RW5kICAgPSBbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiBzZWFyY2hWYWx1ZS5lbmQpID49IDA7XHJcblxyXG4gICAgICAgIGlmIChpc3NldFN0YXJ0ICYmIGlzc2V0RW5kKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmaWVsZFZhbHVlID49IHNlYXJjaFZhbHVlLnN0YXJ0ICYmIGZpZWxkVmFsdWUgPD0gc2VhcmNoVmFsdWUuZW5kO1xyXG5cclxuICAgICAgICB9IGVsc2UgaWYgKGlzc2V0U3RhcnQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZpZWxkVmFsdWUgPj0gc2VhcmNoVmFsdWUuc3RhcnQ7XHJcblxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmaWVsZFZhbHVlIDw9IHNlYXJjaFZhbHVlLmVuZDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KTQvtGA0LzQuNGA0L7QstCw0L3QuNC1INC60L7QvdGC0LXQvdGC0LBcclxuICAgICAqIEByZXR1cm5zIHtqUXVlcnl9XHJcbiAgICAgKi9cclxuICAgIHJlbmRlcigpIHtcclxuXHJcbiAgICAgICAgbGV0IG9wdGlvbnMgPSB0aGlzLmdldE9wdGlvbnMoKTtcclxuICAgICAgICBsZXQgbGFiZWwgICA9IHR5cGVvZiBvcHRpb25zLmxhYmVsID09PSAnc3RyaW5nJyB8fCB0eXBlb2Ygb3B0aW9ucy5sYWJlbCA9PT0gJ251bWJlcidcclxuICAgICAgICAgICAgPyBvcHRpb25zLmxhYmVsXHJcbiAgICAgICAgICAgIDogJyc7XHJcblxyXG4gICAgICAgIGlmICggISBjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KG9wdGlvbnMuYXR0cikpIHtcclxuICAgICAgICAgICAgb3B0aW9ucy5hdHRyID0ge307XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAob3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnd2lkdGgnKSAmJlxyXG4gICAgICAgICAgICBjb3JldWlUYWJsZVV0aWxzLmlzTnVtZXJpYyhvcHRpb25zLndpZHRoKVxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5hdHRyLmhhc093blByb3BlcnR5KCdzdHlsZScpKSB7XHJcbiAgICAgICAgICAgICAgICBvcHRpb25zLmF0dHJbJ3N0eWxlJ10gKz0gJzt3aWR0aDonICsgb3B0aW9ucy53aWR0aCArICdweCc7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBvcHRpb25zLmF0dHJbJ3N0eWxlJ10gPSAnd2lkdGg6JyArIG9wdGlvbnMud2lkdGggKyAncHgnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAob3B0aW9ucy5hdHRyLmhhc093blByb3BlcnR5KCd0eXBlJykpIHtcclxuICAgICAgICAgICAgZGVsZXRlIG9wdGlvbnMuYXR0ci50eXBlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKG9wdGlvbnMuYXR0ci5oYXNPd25Qcm9wZXJ0eSgndmFsdWUnKSkge1xyXG4gICAgICAgICAgICBkZWxldGUgb3B0aW9ucy5hdHRyLnZhbHVlO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIGxldCBmaWVsZCAgICAgPSB0eXBlb2Ygb3B0aW9ucy5maWVsZCA9PT0gJ3N0cmluZycgPyBvcHRpb25zLmZpZWxkIDogJyc7XHJcbiAgICAgICAgbGV0IHN0YXJ0QXR0ciA9IFtdO1xyXG4gICAgICAgIGxldCBzdGFydEVuZCAgPSBbXTtcclxuICAgICAgICBsZXQgdGFibGUgICAgID0gdGhpcy5fdGFibGU7XHJcblxyXG5cclxuICAgICAgICAkLmVhY2gob3B0aW9ucy5hdHRyLCBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcclxuICAgICAgICAgICAgaWYgKFsnbmFtZScsICd2YWx1ZScsICdjbGFzcyddLmluZGV4T2YobmFtZSkgPj0gMCB8fFxyXG4gICAgICAgICAgICAgICAgWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2YgdmFsdWUpIDwgMFxyXG4gICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgc3RhcnRBdHRyLnB1c2gobmFtZSArICc9XCInICsgdmFsdWUgKyAnXCInKTtcclxuICAgICAgICAgICAgc3RhcnRFbmQucHVzaChuYW1lICsgJz1cIicgKyB2YWx1ZSArICdcIicpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBpZiAob3B0aW9ucy5hdHRyLmhhc093blByb3BlcnR5KCdjbGFzcycpICYmXHJcbiAgICAgICAgICAgIFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIG9wdGlvbnMuYXR0ci5jbGFzcykgPj0gMFxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICBzdGFydEF0dHIucHVzaCgnY2xhc3M9XCInICsgb3B0aW9ucy5hdHRyLmNsYXNzICsgJyBkYXRlLXN0YXJ0XCInKTtcclxuICAgICAgICAgICAgc3RhcnRFbmQucHVzaCgnY2xhc3M9XCInICsgb3B0aW9ucy5hdHRyLmNsYXNzICsgJyBkYXRlLWVuZFwiJyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgc3RhcnRBdHRyLnB1c2goJ2NsYXNzPVwiZGF0ZS1zdGFydFwiJyk7XHJcbiAgICAgICAgICAgIHN0YXJ0RW5kLnB1c2goJ2NsYXNzPVwiZGF0ZS1lbmRcIicpO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIGlmIChmaWVsZCkge1xyXG4gICAgICAgICAgICBzdGFydEF0dHIucHVzaCgnbmFtZT1cIicgKyBmaWVsZCArICdbc3RhcnRdXCInKTtcclxuICAgICAgICAgICAgc3RhcnRFbmQucHVzaCgnbmFtZT1cIicgKyBmaWVsZCArICdbZW5kXVwiJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzdGFydEF0dHIucHVzaCgndmFsdWU9XCInICsgKHRoaXMuX3ZhbHVlID8gdGhpcy5fdmFsdWUuc3RhcnQgOiAnJykgKyAnXCInKTtcclxuICAgICAgICBzdGFydEVuZC5wdXNoKCd2YWx1ZT1cIicgKyAodGhpcy5fdmFsdWUgPyB0aGlzLl92YWx1ZS5lbmQgOiAnJykgKyAnXCInKTtcclxuXHJcblxyXG4gICAgICAgIGxldCBjb250cm9sID0gJChjb3JldWlUYWJsZVV0aWxzLnJlbmRlcihjb3JldWlUYWJsZVRwbFsnZmlsdGVycy9kYXRldGltZV9yYW5nZS5odG1sJ10sIHtcclxuICAgICAgICAgICAgbGFiZWw6IGxhYmVsLFxyXG4gICAgICAgICAgICBzdGFydEF0dHI6IHN0YXJ0QXR0ci5sZW5ndGggPiAwID8gKCcgJyArIHN0YXJ0QXR0ci5qb2luKCcgJykpIDogJycsXHJcbiAgICAgICAgICAgIGVuZEF0dHI6IHN0YXJ0RW5kLmxlbmd0aCA+IDAgPyAoJyAnICsgc3RhcnRFbmQuam9pbignICcpKSA6ICcnLFxyXG4gICAgICAgIH0pKTtcclxuXHJcbiAgICAgICAgJCgnaW5wdXQnLCBjb250cm9sKS5jaGFuZ2UoZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICB0YWJsZS5zZWFyY2hSZWNvcmRzKCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG5cclxuICAgICAgICAkKCdpbnB1dC5kYXRlLXN0YXJ0JywgY29udHJvbCkuY2hhbmdlKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBsZXQgZGF0ZUVuZCA9ICQoJ2lucHV0LmRhdGUtZW5kJywgY29udHJvbCkuYXR0cignbWluJywgJCh0aGlzKS52YWwoKSk7XHJcblxyXG4gICAgICAgICAgICBpZiAoXCJzaG93UGlja2VyXCIgaW4gSFRNTElucHV0RWxlbWVudC5wcm90b3R5cGUpIHtcclxuICAgICAgICAgICAgICAgICQoZGF0ZUVuZClbMF0uc2hvd1BpY2tlcigpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgJCgnaW5wdXQuZGF0ZS1lbmQnLCBjb250cm9sKS5jaGFuZ2UoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICQoJ2lucHV0LmRhdGUtc3RhcnQnLCBjb250cm9sKS5hdHRyKCdtYXgnLCAkKHRoaXMpLnZhbCgpKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5fY29udHJvbCA9IGNvbnRyb2w7XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLl9jb250cm9sO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBGaWx0ZXJEYXRldGltZVJhbmdlOyIsIlxyXG5pbXBvcnQgY29yZXVpVGFibGVUcGwgICAgICBmcm9tIFwiLi4vY29yZXVpLnRhYmxlLnRlbXBsYXRlc1wiO1xyXG5pbXBvcnQgY29yZXVpVGFibGVVdGlscyAgICBmcm9tIFwiLi4vY29yZXVpLnRhYmxlLnV0aWxzXCI7XHJcbmltcG9ydCBjb3JldWlUYWJsZUVsZW1lbnRzIGZyb20gXCIuLi9jb3JldWkudGFibGUuZWxlbWVudHNcIjtcclxuaW1wb3J0IEZpbHRlciAgICAgICAgICAgICAgZnJvbSBcIi4uL2Fic3RyYWN0L0ZpbHRlclwiO1xyXG5cclxuY2xhc3MgRmlsdGVyQ2hlY2tib3ggZXh0ZW5kcyBGaWx0ZXIge1xyXG5cclxuICAgIF9jbGFzcyA9ICdidG4gYnRuLW91dGxpbmUtc2Vjb25kYXJ5JztcclxuXHJcbiAgICAvKipcclxuICAgICAqINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPXHJcbiAgICAgKiBAcGFyYW0ge2NvcmV1aVRhYmxlSW5zdGFuY2V9IHRhYmxlXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gICAgICAgICAgICAgIG9wdGlvbnNcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IodGFibGUsIG9wdGlvbnMpIHtcclxuXHJcbiAgICAgICAgb3B0aW9ucyA9ICQuZXh0ZW5kKHRydWUsIHtcclxuICAgICAgICAgICAgaWQ6IG51bGwsXHJcbiAgICAgICAgICAgIHR5cGU6ICdjaGVja2JveCcsXHJcbiAgICAgICAgICAgIGZpZWxkOiBudWxsLFxyXG4gICAgICAgICAgICBsYWJlbDogbnVsbCxcclxuICAgICAgICAgICAgdmFsdWU6IG51bGwsXHJcbiAgICAgICAgICAgIG9wdGlvbnM6IFtdLFxyXG4gICAgICAgIH0sIG9wdGlvbnMpO1xyXG5cclxuICAgICAgICBzdXBlcih0YWJsZSwgb3B0aW9ucyk7XHJcblxyXG5cclxuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy52YWx1ZSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLnNldFZhbHVlKHRoaXMuX29wdGlvbnMudmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQo9GB0YLQsNC90L7QstC60LAg0LfQvdCw0YfQtdC90LjRj1xyXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd8bnVtYmVyfG51bGx9IHZhbHVlXHJcbiAgICAgKi9cclxuICAgIHNldFZhbHVlICh2YWx1ZSkge1xyXG5cclxuICAgICAgICBpZiAoWydzdHJpbmcnLCAnbnVtYmVyJywgJ29iamVjdCddLmluZGV4T2YodHlwZW9mIHZhbHVlKSA8IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgaXRlbXMgPSBbXTtcclxuXHJcbiAgICAgICAgICAgICAgICAkLmVhY2godmFsdWUsIGZ1bmN0aW9uIChrZXksIGl0ZW0pIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJyAmJiB0eXBlb2YgdmFsdWUgIT09ICdudW1iZXInKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGl0ZW1zLnB1c2goaXRlbSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLl92YWx1ZSA9IGl0ZW1zO1xyXG5cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3ZhbHVlID0gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLl92YWx1ZSA9IFsgdmFsdWUgXTtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICBpZiAodGhpcy5fY29udHJvbCkge1xyXG4gICAgICAgICAgICAkKCdpbnB1dDpjaGVja2VkJywgdGhpcy5fY29udHJvbCkucHJvcCgnY2hlY2tlZCcsIGZhbHNlKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHRoaXMuX3ZhbHVlKSkge1xyXG4gICAgICAgICAgICAgICAgbGV0IGNvbnRyb2wgPSB0aGlzLl9jb250cm9sO1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuX3ZhbHVlLm1hcChmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAkKCdpbnB1dFt2YWx1ZT1cIicgKyB2YWx1ZSArICdcIl0nLCBjb250cm9sKS5wcm9wKCdjaGVja2VkJywgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSDQt9C90LDRh9C10L3QuNGPXHJcbiAgICAgKiBAcmV0dXJucyB7QXJyYXl8bnVsbH1cclxuICAgICAqL1xyXG4gICAgZ2V0VmFsdWUoKSB7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9jb250cm9sKSB7XHJcbiAgICAgICAgICAgIGxldCBpbnB1dHMgPSAkKCdpbnB1dDpjaGVja2VkJywgdGhpcy5fY29udHJvbCk7XHJcbiAgICAgICAgICAgIGxldCBpdGVtcyAgPSBbXTtcclxuXHJcbiAgICAgICAgICAgICQuZWFjaChpbnB1dHMsIGZ1bmN0aW9uIChrZXksIGlucHV0KSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgdmFsdWUgPSAkKGlucHV0KS5hdHRyKCd2YWx1ZScpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiB2YWx1ZSkgPj0gMCAmJlxyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlICE9PSAnJ1xyXG4gICAgICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaXRlbXMucHVzaCh2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGl0ZW1zLmxlbmd0aCA+IDAgPyBpdGVtcyA6IG51bGw7XHJcblxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl92YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KTQuNC70YzRgtGA0LDRhtC40Y8g0LTQsNC90L3Ri9GFXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBmaWVsZFZhbHVlXHJcbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9ICBzZWFyY2hWYWx1ZVxyXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAgICAgKi9cclxuICAgIGZpbHRlcihmaWVsZFZhbHVlLCBzZWFyY2hWYWx1ZSkge1xyXG5cclxuICAgICAgICBpZiAoWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2YgZmllbGRWYWx1ZSkgPCAwIHx8XHJcbiAgICAgICAgICAgICEgQXJyYXkuaXNBcnJheShzZWFyY2hWYWx1ZSlcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHNlYXJjaFZhbHVlLmluZGV4T2YoZmllbGRWYWx1ZSkgPj0gMDtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQpNC+0YDQvNC40YDQvtCy0LDQvdC40LUg0LrQvtC90YLQtdC90YLQsFxyXG4gICAgICogQHJldHVybnMge3N0cmluZ31cclxuICAgICAqL1xyXG4gICAgcmVuZGVyKCkge1xyXG5cclxuICAgICAgICBsZXQgdGhhdCAgICA9IHRoaXM7XHJcbiAgICAgICAgbGV0IG9wdGlvbnMgPSB0aGlzLmdldE9wdGlvbnMoKTtcclxuICAgICAgICBsZXQgZmllbGQgICA9IHR5cGVvZiBvcHRpb25zLmZpZWxkID09PSAnc3RyaW5nJyA/IG9wdGlvbnMuZmllbGQgOiAnJztcclxuICAgICAgICBsZXQgaXRlbXMgICA9IFtdO1xyXG4gICAgICAgIGxldCBsYWJlbCAgID0gdHlwZW9mIG9wdGlvbnMubGFiZWwgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBvcHRpb25zLmxhYmVsID09PSAnbnVtYmVyJ1xyXG4gICAgICAgICAgICA/IG9wdGlvbnMubGFiZWxcclxuICAgICAgICAgICAgOiAnJztcclxuXHJcbiAgICAgICAgJC5lYWNoKG9wdGlvbnMub3B0aW9ucywgZnVuY3Rpb24gKGtleSwgb3B0aW9uKSB7XHJcbiAgICAgICAgICAgIGlmICggISBjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KG9wdGlvbikgfHxcclxuICAgICAgICAgICAgICAgICEgb3B0aW9uLmhhc093blByb3BlcnR5KCd2YWx1ZScpIHx8XHJcbiAgICAgICAgICAgICAgICBbJ3N0cmluZycsICdudW1lcmljJ10uaW5kZXhPZih0eXBlb2Ygb3B0aW9uLnZhbHVlKSA9PT0gLTFcclxuICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGxldCBjaGVja2VkID0gQXJyYXkuaXNBcnJheSh0aGF0Ll92YWx1ZSkgPyB0aGF0Ll92YWx1ZS5pbmRleE9mKG9wdGlvbi52YWx1ZSkgPj0gMCA6IGZhbHNlO1xyXG4gICAgICAgICAgICBsZXQgdGV4dCAgICA9IG9wdGlvbi5oYXNPd25Qcm9wZXJ0eSgndGV4dCcpXHJcbiAgICAgICAgICAgICAgICA/IG9wdGlvbi50ZXh0XHJcbiAgICAgICAgICAgICAgICA6IG9wdGlvbi52YWx1ZTtcclxuXHJcbiAgICAgICAgICAgIGl0ZW1zLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgdGV4dDogICAgdGV4dCxcclxuICAgICAgICAgICAgICAgIHZhbHVlOiAgIG9wdGlvbi52YWx1ZSxcclxuICAgICAgICAgICAgICAgIGNsYXNzOiAgIG9wdGlvbi5oYXNPd25Qcm9wZXJ0eSgnY2xhc3MnKSAmJiB0eXBlb2Ygb3B0aW9uLmNsYXNzID09PSAnc3RyaW5nJyA/IG9wdGlvbi5jbGFzcyA6IHRoYXQuX2NsYXNzLFxyXG4gICAgICAgICAgICAgICAgY2hlY2tlZDogY2hlY2tlZCxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuX2NvbnRyb2wgPSAkKGNvcmV1aVRhYmxlVXRpbHMucmVuZGVyKGNvcmV1aVRhYmxlVHBsWydmaWx0ZXJzL2NoZWNrYm94Lmh0bWwnXSwge1xyXG4gICAgICAgICAgICBsYWJlbDogbGFiZWwsXHJcbiAgICAgICAgICAgIGl0ZW1zOiBpdGVtcyxcclxuICAgICAgICAgICAgZmllbGQ6IGZpZWxkICsgdGhpcy5nZXRJZCgpLFxyXG4gICAgICAgICAgICBsYW5nOiB0aGlzLl90YWJsZS5nZXRMYW5nKClcclxuICAgICAgICB9KSk7XHJcblxyXG4gICAgICAgICQoJ2lucHV0JywgdGhpcy5fY29udHJvbCkuY2hhbmdlKGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgdGhhdC5fdGFibGUuc2VhcmNoUmVjb3JkcygpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5fY29udHJvbDtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgRmlsdGVyQ2hlY2tib3g7IiwiXHJcbmltcG9ydCBjb3JldWlUYWJsZVRwbCAgICAgIGZyb20gXCIuLi9jb3JldWkudGFibGUudGVtcGxhdGVzXCI7XHJcbmltcG9ydCBjb3JldWlUYWJsZVV0aWxzICAgIGZyb20gXCIuLi9jb3JldWkudGFibGUudXRpbHNcIjtcclxuaW1wb3J0IGNvcmV1aVRhYmxlRWxlbWVudHMgZnJvbSBcIi4uL2NvcmV1aS50YWJsZS5lbGVtZW50c1wiO1xyXG5pbXBvcnQgRmlsdGVyICAgICAgICAgICAgICBmcm9tIFwiLi4vYWJzdHJhY3QvRmlsdGVyXCI7XHJcblxyXG5jbGFzcyBGaWx0ZXJSYWRpbyBleHRlbmRzIEZpbHRlciB7XHJcblxyXG4gICAgX2NsYXNzID0gJ2J0biBidG4tb3V0bGluZS1zZWNvbmRhcnknO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y9cclxuICAgICAqIEBwYXJhbSB7Y29yZXVpVGFibGVJbnN0YW5jZX0gdGFibGVcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSAgICAgICAgICAgICAgb3B0aW9uc1xyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3Rvcih0YWJsZSwgb3B0aW9ucykge1xyXG5cclxuICAgICAgICBvcHRpb25zID0gJC5leHRlbmQodHJ1ZSwge1xyXG4gICAgICAgICAgICBpZDogbnVsbCxcclxuICAgICAgICAgICAgdHlwZTogJ3JhZGlvJyxcclxuICAgICAgICAgICAgZmllbGQ6IG51bGwsXHJcbiAgICAgICAgICAgIGxhYmVsOiBudWxsLFxyXG4gICAgICAgICAgICB2YWx1ZTogbnVsbCxcclxuICAgICAgICAgICAgb3B0aW9uczogW10sXHJcbiAgICAgICAgfSwgb3B0aW9ucyk7XHJcblxyXG4gICAgICAgIHN1cGVyKHRhYmxlLCBvcHRpb25zKTtcclxuXHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLnZhbHVlICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0VmFsdWUodGhpcy5fb3B0aW9ucy52YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCj0YHRgtCw0L3QvtCy0LrQsCDQt9C90LDRh9C10L3QuNGPXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ3xudW1iZXJ8bnVsbH0gdmFsdWVcclxuICAgICAqL1xyXG4gICAgc2V0VmFsdWUodmFsdWUpIHtcclxuXHJcbiAgICAgICAgaWYgKHZhbHVlICE9PSBudWxsICYmXHJcbiAgICAgICAgICAgIHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycgJiZcclxuICAgICAgICAgICAgdHlwZW9mIHZhbHVlICE9PSAnbnVtYmVyJ1xyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl92YWx1ZSA9IHZhbHVlO1xyXG5cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX2NvbnRyb2wpIHtcclxuICAgICAgICAgICAgJCgnaW5wdXQnLCB0aGlzLl9jb250cm9sKS5wcm9wKCdjaGVja2VkJywgZmFsc2UpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuX3ZhbHVlICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAkKCdpbnB1dFt2YWx1ZT1cIicgKyB0aGlzLl92YWx1ZSArICdcIl0nLCB0aGlzLl9jb250cm9sKS5wcm9wKCdjaGVja2VkJywgdHJ1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC30L3QsNGH0LXQvdC40Y9cclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd8bnVsbH1cclxuICAgICAqL1xyXG4gICAgZ2V0VmFsdWUoKSB7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9jb250cm9sKSB7XHJcbiAgICAgICAgICAgIGxldCBpbnB1dCA9ICQoJ2lucHV0OmNoZWNrZWQnLCB0aGlzLl9jb250cm9sKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChpbnB1dCAmJiBpbnB1dFswXSkge1xyXG4gICAgICAgICAgICAgICAgbGV0IHZhbHVlID0gaW5wdXQudmFsKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlID09PSAnJ1xyXG4gICAgICAgICAgICAgICAgICAgID8gbnVsbFxyXG4gICAgICAgICAgICAgICAgICAgIDogdmFsdWVcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcblxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl92YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KTQuNC70YzRgtGA0LDRhtC40Y8g0LTQsNC90L3Ri9GFXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSAgICAgICAgICAgICAgZmllbGRWYWx1ZVxyXG4gICAgICogQHJldHVybnMge0FycmF5fHN0cmluZ3xudW1iZXJ9IHNlYXJjaFZhbHVlXHJcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICAgICAqL1xyXG4gICAgZmlsdGVyKGZpZWxkVmFsdWUsIHNlYXJjaFZhbHVlKSB7XHJcblxyXG4gICAgICAgIGlmIChbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiBmaWVsZFZhbHVlKSA8IDAgfHxcclxuICAgICAgICAgICAgWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2Ygc2VhcmNoVmFsdWUpIDwgMFxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gZmllbGRWYWx1ZS50b1N0cmluZygpLnRvTG93ZXJDYXNlKCkgPT09IHNlYXJjaFZhbHVlLnRvU3RyaW5nKCkudG9Mb3dlckNhc2UoKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQpNC+0YDQvNC40YDQvtCy0LDQvdC40LUg0LrQvtC90YLQtdC90YLQsFxyXG4gICAgICogQHJldHVybnMge3N0cmluZ31cclxuICAgICAqL1xyXG4gICAgcmVuZGVyKCkge1xyXG5cclxuICAgICAgICBsZXQgdGhhdCAgICA9IHRoaXM7XHJcbiAgICAgICAgbGV0IHRhYmxlICAgPSB0aGlzLl90YWJsZTtcclxuICAgICAgICBsZXQgb3B0aW9ucyA9IHRoaXMuZ2V0T3B0aW9ucygpO1xyXG4gICAgICAgIGxldCBmaWVsZCAgID0gdHlwZW9mIG9wdGlvbnMuZmllbGQgPT09ICdzdHJpbmcnID8gb3B0aW9ucy5maWVsZCA6ICcnO1xyXG4gICAgICAgIGxldCBpdGVtcyAgID0gW107XHJcbiAgICAgICAgbGV0IGxhYmVsICAgPSB0eXBlb2Ygb3B0aW9ucy5sYWJlbCA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIG9wdGlvbnMubGFiZWwgPT09ICdudW1iZXInXHJcbiAgICAgICAgICAgID8gb3B0aW9ucy5sYWJlbFxyXG4gICAgICAgICAgICA6ICcnO1xyXG5cclxuICAgICAgICAkLmVhY2gob3B0aW9ucy5vcHRpb25zLCBmdW5jdGlvbiAoa2V5LCBvcHRpb24pIHtcclxuICAgICAgICAgICAgaWYgKCAhIGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3Qob3B0aW9uKSB8fFxyXG4gICAgICAgICAgICAgICAgISBvcHRpb24uaGFzT3duUHJvcGVydHkoJ3ZhbHVlJykgfHxcclxuICAgICAgICAgICAgICAgIFsnc3RyaW5nJywgJ251bWVyaWMnXS5pbmRleE9mKHR5cGVvZiBvcHRpb24udmFsdWUpID09PSAtMVxyXG4gICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgbGV0IHRleHQgPSBvcHRpb24uaGFzT3duUHJvcGVydHkoJ3RleHQnKVxyXG4gICAgICAgICAgICAgICAgPyBvcHRpb24udGV4dFxyXG4gICAgICAgICAgICAgICAgOiBvcHRpb24udmFsdWU7XHJcblxyXG4gICAgICAgICAgICBpdGVtcy5wdXNoKHtcclxuICAgICAgICAgICAgICAgIHRleHQ6ICAgIHRleHQsXHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogICBvcHRpb24udmFsdWUsXHJcbiAgICAgICAgICAgICAgICBjbGFzczogICBvcHRpb24uaGFzT3duUHJvcGVydHkoJ2NsYXNzJykgJiYgdHlwZW9mIG9wdGlvbi5jbGFzcyA9PT0gJ3N0cmluZycgPyBvcHRpb24uY2xhc3MgOiB0aGF0Ll9jbGFzcyxcclxuICAgICAgICAgICAgICAgIGNoZWNrZWQ6IG9wdGlvbi52YWx1ZSA9PSB0aGF0Ll92YWx1ZSxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuX2NvbnRyb2wgPSAkKGNvcmV1aVRhYmxlVXRpbHMucmVuZGVyKGNvcmV1aVRhYmxlVHBsWydmaWx0ZXJzL3JhZGlvLmh0bWwnXSwge1xyXG4gICAgICAgICAgICBsYWJlbDogbGFiZWwsXHJcbiAgICAgICAgICAgIGl0ZW1zOiBpdGVtcyxcclxuICAgICAgICAgICAgZmllbGQ6IGZpZWxkICsgdGhpcy5nZXRJZCgpLFxyXG4gICAgICAgICAgICBsYW5nOiB0aGlzLl90YWJsZS5nZXRMYW5nKClcclxuICAgICAgICB9KSk7XHJcblxyXG5cclxuICAgICAgICAkKCdpbnB1dCcsIHRoaXMuX2NvbnRyb2wpLmNoYW5nZShmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgIHRhYmxlLnNlYXJjaFJlY29yZHMoKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbnRyb2w7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IEZpbHRlclJhZGlvOyIsIlxyXG5pbXBvcnQgY29yZXVpVGFibGVUcGwgICBmcm9tIFwiLi4vY29yZXVpLnRhYmxlLnRlbXBsYXRlc1wiO1xyXG5pbXBvcnQgY29yZXVpVGFibGVVdGlscyBmcm9tIFwiLi4vY29yZXVpLnRhYmxlLnV0aWxzXCI7XHJcbmltcG9ydCBGaWx0ZXIgICAgICAgICAgIGZyb20gXCIuLi9hYnN0cmFjdC9GaWx0ZXJcIjtcclxuXHJcbmNsYXNzIEZpbHRlclNlbGVjdCBleHRlbmRzIEZpbHRlciB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQmNC90LjRhtC40LDQu9C40LfQsNGG0LjRj1xyXG4gICAgICogQHBhcmFtIHtjb3JldWlUYWJsZUluc3RhbmNlfSB0YWJsZVxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9ICAgICAgICAgICAgICBvcHRpb25zXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKHRhYmxlLCBvcHRpb25zKSB7XHJcblxyXG4gICAgICAgIG9wdGlvbnMgPSAkLmV4dGVuZCh0cnVlLCB7XHJcbiAgICAgICAgICAgIGlkOiBudWxsLFxyXG4gICAgICAgICAgICB0eXBlOiAnc2VsZWN0JyxcclxuICAgICAgICAgICAgZmllbGQ6IG51bGwsXHJcbiAgICAgICAgICAgIGxhYmVsOiBudWxsLFxyXG4gICAgICAgICAgICB3aWR0aDogbnVsbCxcclxuICAgICAgICAgICAgdmFsdWU6IG51bGwsXHJcbiAgICAgICAgICAgIGF0dHI6IHtcclxuICAgICAgICAgICAgICAgIGNsYXNzOiAnZm9ybS1zZWxlY3QgZC1pbmxpbmUtYmxvY2snXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIG9wdGlvbnM6IFtdXHJcbiAgICAgICAgfSwgb3B0aW9ucyk7XHJcblxyXG4gICAgICAgIHN1cGVyKHRhYmxlLCBvcHRpb25zKTtcclxuXHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLnZhbHVlICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0VmFsdWUodGhpcy5fb3B0aW9ucy52YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCj0YHRgtCw0L3QvtCy0LrQsCDQt9C90LDRh9C10L3QuNGPXHJcbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ3xudW1iZXJ8bnVsbH0gdmFsdWVcclxuICAgICAqL1xyXG4gICAgc2V0VmFsdWUodmFsdWUpIHtcclxuXHJcbiAgICAgICAgaWYgKFsnc3RyaW5nJywgJ251bWJlcicsICdvYmplY3QnXS5pbmRleE9mKHR5cGVvZiB2YWx1ZSkgPCAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xyXG4gICAgICAgICAgICAgICAgbGV0IGl0ZW1zID0gW107XHJcblxyXG4gICAgICAgICAgICAgICAgJC5lYWNoKHZhbHVlLCBmdW5jdGlvbiAoa2V5LCBpdGVtKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycgJiYgdHlwZW9mIHZhbHVlICE9PSAnbnVtYmVyJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpdGVtcy5wdXNoKGl0ZW0pO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5fdmFsdWUgPSBpdGVtcztcclxuXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl92YWx1ZSA9IG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5fdmFsdWUgPSBbIHZhbHVlIF07XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX2NvbnRyb2wpIHtcclxuICAgICAgICAgICAgJCgnc2VsZWN0IG9wdGlvbjpzZWxlY3RlZCcsIHRoaXMuX2NvbnRyb2wpLnByb3AoJ3NlbGVjdGVkJywgZmFsc2UpO1xyXG5cclxuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodGhpcy5fdmFsdWUpKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgY29udHJvbCA9IHRoaXMuX2NvbnRyb2w7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5fdmFsdWUubWFwKGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICQoJ3NlbGVjdCBvcHRpb25bdmFsdWU9XCInICsgdmFsdWUgKyAnXCJdJywgY29udHJvbCkucHJvcCgnc2VsZWN0ZWQnLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC30L3QsNGH0LXQvdC40Y9cclxuICAgICAqIEByZXR1cm5zIHtBcnJheXxzdHJpbmd8bnVsbH1cclxuICAgICAqL1xyXG4gICAgZ2V0VmFsdWUoKSB7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9jb250cm9sKSB7XHJcbiAgICAgICAgICAgIGxldCBpc011bHRpcGxlID0gISEgJCgnc2VsZWN0JywgdGhpcy5fY29udHJvbCkuYXR0cignbXVsdGlwbGUnKTtcclxuICAgICAgICAgICAgbGV0IG9wdGlvbnMgICAgPSAkKCdzZWxlY3Qgb3B0aW9uOmNoZWNrZWQnLCB0aGlzLl9jb250cm9sKTtcclxuICAgICAgICAgICAgbGV0IGl0ZW1zICAgICAgPSBbXTtcclxuXHJcbiAgICAgICAgICAgICQuZWFjaChvcHRpb25zLCBmdW5jdGlvbiAoa2V5LCBvcHRpb24pIHtcclxuICAgICAgICAgICAgICAgIGxldCB2YWx1ZSA9ICQob3B0aW9uKS5hdHRyKCd2YWx1ZScpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiB2YWx1ZSkgPj0gMCAmJlxyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlICE9PSAnJ1xyXG4gICAgICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaXRlbXMucHVzaCh2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGl0ZW1zLmxlbmd0aCA+IDBcclxuICAgICAgICAgICAgICAgID8gKGlzTXVsdGlwbGUgPyBpdGVtcyA6IGl0ZW1zWzBdKVxyXG4gICAgICAgICAgICAgICAgOiBudWxsO1xyXG5cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fdmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCk0LjQu9GM0YLRgNCw0YbQuNGPINC00LDQvdC90YvRhVxyXG4gICAgICogQHJldHVybnMge3N0cmluZ30gICAgICAgICAgICAgIGZpZWxkVmFsdWVcclxuICAgICAqIEByZXR1cm5zIHtBcnJheXxzdHJpbmd8bnVtYmVyfSBzZWFyY2hWYWx1ZVxyXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAgICAgKi9cclxuICAgIGZpbHRlcihmaWVsZFZhbHVlLCBzZWFyY2hWYWx1ZSkge1xyXG5cclxuICAgICAgICBpZiAoWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2YgZmllbGRWYWx1ZSkgPCAwIHx8XHJcbiAgICAgICAgICAgIChbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiBzZWFyY2hWYWx1ZSkgPCAwICYmICEgQXJyYXkuaXNBcnJheShzZWFyY2hWYWx1ZSkpXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShzZWFyY2hWYWx1ZSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHNlYXJjaFZhbHVlLmluZGV4T2YoZmllbGRWYWx1ZSkgPj0gMDtcclxuXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZpZWxkVmFsdWUudG9TdHJpbmcoKS50b0xvd2VyQ2FzZSgpID09PSBzZWFyY2hWYWx1ZS50b1N0cmluZygpLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCk0L7RgNC80LjRgNC+0LLQsNC90LjQtSDQutC+0L3RgtC10L3RgtCwXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxyXG4gICAgICovXHJcbiAgICByZW5kZXIoKSB7XHJcblxyXG4gICAgICAgIGxldCB0aGF0ICAgICAgICAgID0gdGhpcztcclxuICAgICAgICBsZXQgb3B0aW9ucyAgICAgICA9IHRoaXMuZ2V0T3B0aW9ucygpO1xyXG4gICAgICAgIGxldCBzZWxlY3RPcHRpb25zID0gW107XHJcbiAgICAgICAgbGV0IGF0dHJpYnV0ZXMgICAgPSBbXTtcclxuICAgICAgICBsZXQgdGFibGUgICAgICAgICA9IHRoaXMuX3RhYmxlO1xyXG4gICAgICAgIGxldCBsYWJlbCAgICAgICAgID0gdHlwZW9mIG9wdGlvbnMubGFiZWwgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBvcHRpb25zLmxhYmVsID09PSAnbnVtYmVyJ1xyXG4gICAgICAgICAgICA/IG9wdGlvbnMubGFiZWxcclxuICAgICAgICAgICAgOiAnJztcclxuXHJcbiAgICAgICAgaWYgKCAhIG9wdGlvbnMuaGFzT3duUHJvcGVydHkoJ2F0dHInKSB8fFxyXG4gICAgICAgICAgICAhIGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3Qob3B0aW9ucy5hdHRyKVxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICBvcHRpb25zLmF0dHIgPSB7fTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChvcHRpb25zLmZpZWxkKSB7XHJcbiAgICAgICAgICAgIG9wdGlvbnMuYXR0ci5uYW1lID0gdGhpcy5fb3B0aW9ucy5maWVsZDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChvcHRpb25zLndpZHRoKSB7XHJcbiAgICAgICAgICAgIG9wdGlvbnMuYXR0ciA9IGNvcmV1aVRhYmxlVXRpbHMubWVyZ2VBdHRyKFxyXG4gICAgICAgICAgICAgICAgeyBzdHlsZTogJ3dpZHRoOicgKyBvcHRpb25zLndpZHRoICsgJ3B4JyB9LFxyXG4gICAgICAgICAgICAgICAgb3B0aW9ucy5hdHRyXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAob3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnb3B0aW9ucycpICYmXHJcbiAgICAgICAgICAgIHR5cGVvZiBvcHRpb25zLm9wdGlvbnMgPT09ICdvYmplY3QnICYmXHJcbiAgICAgICAgICAgIG9wdGlvbnMub3B0aW9ucyAhPT0gbnVsbFxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICAkLmVhY2gob3B0aW9ucy5vcHRpb25zLCBmdW5jdGlvbiAoa2V5LCBvcHRpb24pIHtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG9wdGlvbiA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIG9wdGlvbiA9PT0gJ251bWJlcicpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZWxlY3RPcHRpb25zLnB1c2godGhhdC5fYnVpbGRPcHRpb24oe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnb3B0aW9uJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGtleSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogb3B0aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgfSkpO1xyXG5cclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY29yZXVpVGFibGVVdGlscy5pc09iamVjdChvcHRpb24pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHR5cGUgPSBvcHRpb24uaGFzT3duUHJvcGVydHkoJ3R5cGUnKSAmJiB0eXBlb2Ygb3B0aW9uLnR5cGUgPT09ICdzdHJpbmcnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgID8gb3B0aW9uLnR5cGVcclxuICAgICAgICAgICAgICAgICAgICAgICAgOiAnb3B0aW9uJztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGUgPT09ICdncm91cCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHJlbmRlckF0dHIgICA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgZ3JvdXBBdHRyICAgID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBncm91cE9wdGlvbnMgPSBbXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcHRpb24uaGFzT3duUHJvcGVydHkoJ2F0dHInKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29yZXVpVGFibGVVdGlscy5pc09iamVjdChvcHRpb24uYXR0cilcclxuICAgICAgICAgICAgICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBncm91cEF0dHIgPSBvcHRpb24uYXR0cjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbi5oYXNPd25Qcm9wZXJ0eSgnbGFiZWwnKSAmJiBbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZihvcHRpb24ubGFiZWwpKSA+PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBncm91cEF0dHIubGFiZWwgPSBvcHRpb24ubGFiZWw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICQuZWFjaChncm91cEF0dHIsIGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVyQXR0ci5wdXNoKG5hbWUgKyAnPVwiJyArIHZhbHVlICsgJ1wiJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkob3B0aW9uLm9wdGlvbnMpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLmVhY2gob3B0aW9uLm9wdGlvbnMsIGZ1bmN0aW9uIChrZXksIGdyb3VwT3B0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3JvdXBPcHRpb25zLnB1c2godGhhdC5fYnVpbGRPcHRpb24oZ3JvdXBPcHRpb24pKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RPcHRpb25zLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2dyb3VwJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHI6IHJlbmRlckF0dHIubGVuZ3RoID4gMCA/ICgnICcgKyByZW5kZXJBdHRyLmpvaW4oJyAnKSkgOiAnJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnM6IGdyb3VwT3B0aW9ucyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdE9wdGlvbnMucHVzaCh0aGF0Ll9idWlsZE9wdGlvbihvcHRpb24pKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgJC5lYWNoKG9wdGlvbnMuYXR0ciwgZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XHJcbiAgICAgICAgICAgIGF0dHJpYnV0ZXMucHVzaChuYW1lICsgJz1cIicgKyB2YWx1ZSArICdcIicpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLl9jb250cm9sID0gJChjb3JldWlUYWJsZVV0aWxzLnJlbmRlcihjb3JldWlUYWJsZVRwbFsnZmlsdGVycy9zZWxlY3QuaHRtbCddLCB7XHJcbiAgICAgICAgICAgIGxhYmVsOiBsYWJlbCxcclxuICAgICAgICAgICAgYXR0cjogYXR0cmlidXRlcy5sZW5ndGggPiAwID8gKCcgJyArIGF0dHJpYnV0ZXMuam9pbignICcpKSA6ICcnLFxyXG4gICAgICAgICAgICBvcHRpb25zOiBzZWxlY3RPcHRpb25zXHJcbiAgICAgICAgfSkpO1xyXG5cclxuICAgICAgICAkKCdzZWxlY3QnLCB0aGlzLl9jb250cm9sKS5jaGFuZ2UoZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICB0YWJsZS5zZWFyY2hSZWNvcmRzKCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLl9jb250cm9sO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCh0LHQvtGA0LrQsCDQvtC/0YbQuNC4XHJcbiAgICAgKiBAcGFyYW0gb3B0aW9uXHJcbiAgICAgKiBAcmV0dXJuIHtvYmplY3R9XHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBfYnVpbGRPcHRpb24ob3B0aW9uKSB7XHJcblxyXG4gICAgICAgIGxldCBvcHRpb25BdHRyID0gW107XHJcbiAgICAgICAgbGV0IG9wdGlvblRleHQgPSBvcHRpb24uaGFzT3duUHJvcGVydHkoJ3RleHQnKSAmJiBbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZihvcHRpb24udGV4dCkpID49IDBcclxuICAgICAgICAgICAgPyBvcHRpb24udGV4dFxyXG4gICAgICAgICAgICA6ICcnO1xyXG5cclxuICAgICAgICAkLmVhY2gob3B0aW9uLCBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcclxuICAgICAgICAgICAgaWYgKG5hbWUgIT09ICd0ZXh0Jykge1xyXG4gICAgICAgICAgICAgICAgb3B0aW9uQXR0ci5wdXNoKG5hbWUgKyAnPVwiJyArIHZhbHVlICsgJ1wiJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcblxyXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHRoaXMuX3ZhbHVlKSkge1xyXG4gICAgICAgICAgICAkLmVhY2godGhpcy5fdmFsdWUsIGZ1bmN0aW9uIChrZXksIGl0ZW1WYWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGl0ZW1WYWx1ZSA9PSBvcHRpb24udmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICBvcHRpb25BdHRyLnB1c2goJ3NlbGVjdGVkPVwic2VsZWN0ZWRcIicpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fdmFsdWUgPT0gb3B0aW9uLnZhbHVlKSB7XHJcbiAgICAgICAgICAgIG9wdGlvbkF0dHIucHVzaCgnc2VsZWN0ZWQ9XCJzZWxlY3RlZFwiJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICB0eXBlOiAnb3B0aW9uJyxcclxuICAgICAgICAgICAgdGV4dDogb3B0aW9uVGV4dCxcclxuICAgICAgICAgICAgYXR0cjogb3B0aW9uQXR0ci5sZW5ndGggPiAwID8gKCcgJyArIG9wdGlvbkF0dHIuam9pbignICcpKSA6ICcnXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgRmlsdGVyU2VsZWN0OyIsIlxyXG5pbXBvcnQgY29yZXVpVGFibGVUcGwgICBmcm9tIFwiLi4vY29yZXVpLnRhYmxlLnRlbXBsYXRlc1wiO1xyXG5pbXBvcnQgY29yZXVpVGFibGVVdGlscyBmcm9tIFwiLi4vY29yZXVpLnRhYmxlLnV0aWxzXCI7XHJcbmltcG9ydCBGaWx0ZXIgICAgICAgICAgIGZyb20gXCIuLi9hYnN0cmFjdC9GaWx0ZXJcIjtcclxuXHJcbmNsYXNzIEZpbHRlclN3aXRjaCBleHRlbmRzIEZpbHRlciB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQmNC90LjRhtC40LDQu9C40LfQsNGG0LjRj1xyXG4gICAgICogQHBhcmFtIHtjb3JldWlUYWJsZUluc3RhbmNlfSB0YWJsZVxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9ICAgICAgICAgICAgICBvcHRpb25zXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKHRhYmxlLCBvcHRpb25zKSB7XHJcblxyXG4gICAgICAgIG9wdGlvbnMgPSAkLmV4dGVuZCh0cnVlLCB7XHJcbiAgICAgICAgICAgIGlkOiBudWxsLFxyXG4gICAgICAgICAgICB0eXBlOiAnc3dpdGNoJyxcclxuICAgICAgICAgICAgZmllbGQ6IG51bGwsXHJcbiAgICAgICAgICAgIGxhYmVsOiBudWxsLFxyXG4gICAgICAgICAgICB2YWx1ZTogbnVsbCxcclxuICAgICAgICAgICAgdmFsdWVZOiAxXHJcbiAgICAgICAgfSwgb3B0aW9ucyk7XHJcblxyXG4gICAgICAgIHN1cGVyKHRhYmxlLCBvcHRpb25zKTtcclxuXHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLnZhbHVlICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0VmFsdWUodGhpcy5fb3B0aW9ucy52YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCk0LjQu9GM0YLRgNCw0YbQuNGPINC00LDQvdC90YvRhVxyXG4gICAgICogQHJldHVybnMge3N0cmluZ30gICAgICAgICAgICAgIGZpZWxkVmFsdWVcclxuICAgICAqIEByZXR1cm5zIHtBcnJheXxzdHJpbmd8bnVtYmVyfSBzZWFyY2hWYWx1ZVxyXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAgICAgKi9cclxuICAgIGZpbHRlcihmaWVsZFZhbHVlLCBzZWFyY2hWYWx1ZSkge1xyXG5cclxuICAgICAgICBpZiAoWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2YgZmllbGRWYWx1ZSkgPCAwIHx8XHJcbiAgICAgICAgICAgIFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIHNlYXJjaFZhbHVlKSA8IDBcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGZpZWxkVmFsdWUudG9TdHJpbmcoKSA9PT0gc2VhcmNoVmFsdWUudG9TdHJpbmcoKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQo9GB0YLQsNC90L7QstC60LAg0LfQvdCw0YfQtdC90LjRj1xyXG4gICAgICogQHBhcmFtIHtzdHJpbmd8bnVtYmVyfG51bGx9IHZhbHVlXHJcbiAgICAgKi9cclxuICAgIHNldFZhbHVlKHZhbHVlKSB7XHJcblxyXG4gICAgICAgIGlmICh2YWx1ZSAhPT0gbnVsbCAmJlxyXG4gICAgICAgICAgICB0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnICYmXHJcbiAgICAgICAgICAgIHR5cGVvZiB2YWx1ZSAhPT0gJ251bWJlcidcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fdmFsdWUgPSB2YWx1ZVxyXG5cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX2NvbnRyb2wpIHtcclxuICAgICAgICAgICAgbGV0IHZhbHVlWSA9IHR5cGVvZiB0aGlzLl9vcHRpb25zLnZhbHVlWSA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIHRoaXMuX29wdGlvbnMudmFsdWVZID09PSAnbnVtYmVyJ1xyXG4gICAgICAgICAgICAgICAgPyB0aGlzLl9vcHRpb25zLnZhbHVlWVxyXG4gICAgICAgICAgICAgICAgOiAnJ1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuX3ZhbHVlID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAkKCdpbnB1dCcsIHRoaXMuX2NvbnRyb2wpLnByb3AoJ2NoZWNrZWQnLCBmYWxzZSk7XHJcblxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX3ZhbHVlID09PSB2YWx1ZVkpIHtcclxuICAgICAgICAgICAgICAgICQoJ2lucHV0JywgdGhpcy5fY29udHJvbCkucHJvcCgnY2hlY2tlZCcsIHRydWUpO1xyXG5cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICQoJ2lucHV0JywgdGhpcy5fY29udHJvbCkucHJvcCgnY2hlY2tlZCcsIGZhbHNlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0LfQvdCw0YfQtdC90LjRj1xyXG4gICAgICogQHJldHVybnMge3N0cmluZ31cclxuICAgICAqL1xyXG4gICAgZ2V0VmFsdWUoKSB7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9jb250cm9sKSB7XHJcbiAgICAgICAgICAgIGxldCB2YWx1ZSA9ICQoJ2lucHV0OmNoZWNrZWQnLCB0aGlzLl9jb250cm9sKS52YWwoKTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYgdmFsdWUgIT09ICcnKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLl92YWx1ZTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQpNC+0YDQvNC40YDQvtCy0LDQvdC40LUg0LrQvtC90YLQtdC90YLQsFxyXG4gICAgICogQHJldHVybnMge3N0cmluZ31cclxuICAgICAqL1xyXG4gICAgcmVuZGVyKCkge1xyXG5cclxuICAgICAgICBsZXQgdGFibGUgICA9IHRoaXMuX3RhYmxlO1xyXG4gICAgICAgIGxldCBvcHRpb25zID0gdGhpcy5nZXRPcHRpb25zKCk7XHJcbiAgICAgICAgbGV0IHZhbHVlWSAgPSB0eXBlb2Ygb3B0aW9ucy52YWx1ZVkgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBvcHRpb25zLnZhbHVlWSA9PT0gJ251bWJlcidcclxuICAgICAgICAgICAgPyBvcHRpb25zLnZhbHVlWVxyXG4gICAgICAgICAgICA6ICcnXHJcbiAgICAgICAgbGV0IGxhYmVsID0gdHlwZW9mIG9wdGlvbnMubGFiZWwgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBvcHRpb25zLmxhYmVsID09PSAnbnVtYmVyJ1xyXG4gICAgICAgICAgICA/IG9wdGlvbnMubGFiZWxcclxuICAgICAgICAgICAgOiAnJztcclxuXHJcblxyXG4gICAgICAgIHRoaXMuX2NvbnRyb2wgPSAkKGNvcmV1aVRhYmxlVXRpbHMucmVuZGVyKGNvcmV1aVRhYmxlVHBsWydmaWx0ZXJzL3N3aXRjaC5odG1sJ10sIHtcclxuICAgICAgICAgICAgaWQ6IHRoaXMuX2lkLFxyXG4gICAgICAgICAgICB2YWx1ZVk6IHZhbHVlWSxcclxuICAgICAgICAgICAgZmllbGQ6IHR5cGVvZiBvcHRpb25zLmZpZWxkID09PSAnc3RyaW5nJyA/IG9wdGlvbnMuZmllbGQgOiAnJyxcclxuICAgICAgICAgICAgY2hlY2tlZDogdGhpcy5fdmFsdWUgPT0gdmFsdWVZLFxyXG4gICAgICAgICAgICBsYWJlbDogbGFiZWwsXHJcbiAgICAgICAgfSkpO1xyXG5cclxuXHJcbiAgICAgICAgJCgnaW5wdXQnLCB0aGlzLl9jb250cm9sKS5jaGFuZ2UoZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICB0YWJsZS5zZWFyY2hSZWNvcmRzKCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLl9jb250cm9sO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBGaWx0ZXJTd2l0Y2g7IiwiaW1wb3J0IGNvcmV1aVRhYmxlVXRpbHMgZnJvbSBcIi4uL2NvcmV1aS50YWJsZS51dGlsc1wiO1xyXG5cclxuY2xhc3MgU2VhcmNoIHtcclxuXHJcbiAgICBfaWQgICAgICA9IG51bGw7XHJcbiAgICBfdGFibGUgICA9IG51bGw7XHJcbiAgICBfdmFsdWUgICA9IG51bGw7XHJcbiAgICBfY29udHJvbCA9IG51bGw7XHJcbiAgICBfb3B0aW9ucyA9IHtcclxuICAgICAgICBpZDogJycsXHJcbiAgICAgICAgdHlwZTogJycsXHJcbiAgICAgICAgZmllbGQ6IG51bGwsXHJcbiAgICAgICAgbGFiZWw6IG51bGxcclxuICAgIH07XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y9cclxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSB0YWJsZVxyXG4gICAgICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnNcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IodGFibGUsIG9wdGlvbnMpIHtcclxuXHJcbiAgICAgICAgdGhpcy5fdGFibGUgICA9IHRhYmxlO1xyXG4gICAgICAgIHRoaXMuX29wdGlvbnMgPSAkLmV4dGVuZCh0cnVlLCB0aGlzLl9vcHRpb25zLCBvcHRpb25zKTtcclxuICAgICAgICB0aGlzLl9pZCAgICAgID0gdGhpcy5fb3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnaWQnKSAmJiB0eXBlb2YgdGhpcy5fb3B0aW9ucy5pZCA9PT0gJ3N0cmluZycgJiYgdGhpcy5fb3B0aW9ucy5pZFxyXG4gICAgICAgICAgICA/IHRoaXMuX29wdGlvbnMuaWRcclxuICAgICAgICAgICAgOiBjb3JldWlUYWJsZVV0aWxzLmhhc2hDb2RlKCk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC/0LDRgNCw0LzQtdGC0YDQvtCyXHJcbiAgICAgKiBAcmV0dXJucyB7b2JqZWN0fVxyXG4gICAgICovXHJcbiAgICBnZXRPcHRpb25zKCkge1xyXG4gICAgICAgIHJldHVybiAkLmV4dGVuZCh0cnVlLCB7fSwgdGhpcy5fb3B0aW9ucyk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1IGlkXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxyXG4gICAgICovXHJcbiAgICBnZXRJZCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5faWQ7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KPRgdGC0LDQvdC+0LLQutCwINC30L3QsNGH0LXQvdC40Y9cclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxyXG4gICAgICovXHJcbiAgICBzZXRWYWx1ZSh2YWx1ZSkge31cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0LfQvdCw0YfQtdC90LjRj1xyXG4gICAgICogQHJldHVybnMge3N0cmluZ3xudWxsfVxyXG4gICAgICovXHJcbiAgICBnZXRWYWx1ZSAoKSB7fVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSDQvdCw0LfQstCw0L3QuNC1INC/0L7Qu9GPXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfG51bGx9XHJcbiAgICAgKi9cclxuICAgIGdldEZpZWxkICgpIHtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX29wdGlvbnMuZmllbGQ7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KTQuNC70YzRgtGA0LDRhtC40Y8g0LTQsNC90L3Ri9GFXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBmaWVsZFZhbHVlXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBzZWFyY2hWYWx1ZVxyXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAgICAgKi9cclxuICAgIGZpbHRlcihmaWVsZFZhbHVlLCBzZWFyY2hWYWx1ZSkge1xyXG5cclxuICAgICAgICBpZiAoWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2YgZmllbGRWYWx1ZSkgPCAwIHx8XHJcbiAgICAgICAgICAgIFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIHNlYXJjaFZhbHVlKSA8IDBcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGZpZWxkVmFsdWUudG9TdHJpbmcoKS50b0xvd2VyQ2FzZSgpLmluZGV4T2YoXHJcbiAgICAgICAgICAgIHNlYXJjaFZhbHVlLnRvU3RyaW5nKCkudG9Mb3dlckNhc2UoKVxyXG4gICAgICAgICkgPj0gMDtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQpNC+0YDQvNC40YDQvtCy0LDQvdC40LUg0LrQvtC90YLQtdC90YLQsFxyXG4gICAgICogQHJldHVybnMge2pRdWVyeXxzdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIHJlbmRlciAoKSB7fVxyXG59XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgU2VhcmNoOyIsIlxyXG5pbXBvcnQgY29yZXVpVGFibGVUcGwgICAgICBmcm9tIFwiLi4vY29yZXVpLnRhYmxlLnRlbXBsYXRlc1wiO1xyXG5pbXBvcnQgY29yZXVpVGFibGVVdGlscyAgICBmcm9tIFwiLi4vY29yZXVpLnRhYmxlLnV0aWxzXCI7XHJcbmltcG9ydCBjb3JldWlUYWJsZUVsZW1lbnRzIGZyb20gXCIuLi9jb3JldWkudGFibGUuZWxlbWVudHNcIjtcclxuaW1wb3J0IFNlYXJjaCAgICAgICAgICAgICAgZnJvbSBcIi4uL2Fic3RyYWN0L1NlYXJjaFwiO1xyXG5cclxuXHJcbmNsYXNzIFNlYXJjaFRleHQgZXh0ZW5kcyBTZWFyY2gge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y9cclxuICAgICAqIEBwYXJhbSB7Y29yZXVpVGFibGVJbnN0YW5jZX0gdGFibGVcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSAgICAgICAgICAgICAgb3B0aW9uc1xyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3Rvcih0YWJsZSwgb3B0aW9ucykge1xyXG5cclxuICAgICAgICBvcHRpb25zID0gJC5leHRlbmQodHJ1ZSwge1xyXG4gICAgICAgICAgICBpZDogbnVsbCxcclxuICAgICAgICAgICAgdHlwZTogJ3RleHQnLFxyXG4gICAgICAgICAgICBmaWVsZDogbnVsbCxcclxuICAgICAgICAgICAgbGFiZWw6IG51bGwsXHJcbiAgICAgICAgICAgIHZhbHVlOiBudWxsLFxyXG4gICAgICAgICAgICB3aWR0aDogMjAwLFxyXG4gICAgICAgICAgICBhdHRyOiB7XHJcbiAgICAgICAgICAgICAgICBjbGFzczogXCJmb3JtLWNvbnRyb2wgZC1pbmxpbmUtYmxvY2tcIixcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sIG9wdGlvbnMpO1xyXG5cclxuICAgICAgICBzdXBlcih0YWJsZSwgb3B0aW9ucyk7XHJcblxyXG5cclxuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy52YWx1ZSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLnNldFZhbHVlKHRoaXMuX29wdGlvbnMudmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQo9GB0YLQsNC90L7QstC60LAg0LfQvdCw0YfQtdC90LjRj1xyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXHJcbiAgICAgKi9cclxuICAgIHNldFZhbHVlKHZhbHVlKSB7XHJcblxyXG4gICAgICAgIGlmICh2YWx1ZSAhPT0gbnVsbCAmJlxyXG4gICAgICAgICAgICB0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnICYmXHJcbiAgICAgICAgICAgIHR5cGVvZiB2YWx1ZSAhPT0gJ251bWJlcidcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fdmFsdWUgPSB2YWx1ZVxyXG5cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX2NvbnRyb2wpIHtcclxuICAgICAgICAgICAgdGhpcy5fY29udHJvbC52YWwoXHJcbiAgICAgICAgICAgICAgICB0aGlzLl92YWx1ZSA9PT0gbnVsbCA/ICcnIDogdGhpcy5fdmFsdWVcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC30L3QsNGH0LXQvdC40Y9cclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd8bnVsbH1cclxuICAgICAqL1xyXG4gICAgZ2V0VmFsdWUoKSB7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9jb250cm9sKSB7XHJcbiAgICAgICAgICAgIGxldCB2YWx1ZSA9IHRoaXMuX2NvbnRyb2wudmFsKCk7XHJcblxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJiB2YWx1ZSAhPT0gJycpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCk0L7RgNC80LjRgNC+0LLQsNC90LjQtSDQutC+0L3RgtC10L3RgtCwXHJcbiAgICAgKiBAcmV0dXJucyB7alF1ZXJ5fVxyXG4gICAgICovXHJcbiAgICByZW5kZXIoKSB7XHJcblxyXG4gICAgICAgIGlmICggISBjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KHRoaXMuX29wdGlvbnMuYXR0cikpIHtcclxuICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy5hdHRyID0ge307XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnd2lkdGgnKSAmJlxyXG4gICAgICAgICAgICBjb3JldWlUYWJsZVV0aWxzLmlzTnVtZXJpYyh0aGlzLl9vcHRpb25zLndpZHRoKVxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy5hdHRyLmhhc093blByb3BlcnR5KCdzdHlsZScpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9vcHRpb25zLmF0dHJbJ3N0eWxlJ10gKz0gJzt3aWR0aDonICsgdGhpcy5fb3B0aW9ucy53aWR0aCArICdweCc7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9vcHRpb25zLmF0dHJbJ3N0eWxlJ10gPSAnd2lkdGg6JyArIHRoaXMuX29wdGlvbnMud2lkdGggKyAncHgnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9vcHRpb25zLmF0dHJbJ3ZhbHVlJ10gPSB0eXBlb2YgdGhpcy5fdmFsdWUgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiB0aGlzLl92YWx1ZSA9PT0gJ251bWJlcidcclxuICAgICAgICAgICAgPyB0aGlzLl92YWx1ZVxyXG4gICAgICAgICAgICA6ICcnO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy5hdHRyLmhhc093blByb3BlcnR5KCd0eXBlJykpIHtcclxuICAgICAgICAgICAgZGVsZXRlIHRoaXMuX29wdGlvbnMuYXR0ci50eXBlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IGF0dHJpYnV0ZXMgPSBbXTtcclxuICAgICAgICBsZXQgdGFibGUgICAgICA9IHRoaXMuX3RhYmxlO1xyXG5cclxuICAgICAgICAkLmVhY2godGhpcy5fb3B0aW9ucy5hdHRyLCBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcclxuICAgICAgICAgICAgaWYgKFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIHZhbHVlKSA+PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzLnB1c2gobmFtZSArICc9XCInICsgdmFsdWUgKyAnXCInKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLl9jb250cm9sID0gJChjb3JldWlUYWJsZVV0aWxzLnJlbmRlcihjb3JldWlUYWJsZVRwbFsnc2VhcmNoL3RleHQuaHRtbCddLCB7XHJcbiAgICAgICAgICAgIGF0dHI6IGF0dHJpYnV0ZXMubGVuZ3RoID4gMCA/ICgnICcgKyBhdHRyaWJ1dGVzLmpvaW4oJyAnKSkgOiAnJyxcclxuICAgICAgICB9KSk7XHJcblxyXG5cclxuICAgICAgICAkKCdpbnB1dCcsIHRoaXMuX2NvbnRyb2wpLmtleXVwKGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgaWYgKGUua2V5ID09PSAnRW50ZXInIHx8IGUua2V5Q29kZSA9PT0gMTMpIHtcclxuICAgICAgICAgICAgICAgIHRhYmxlLnNlYXJjaFJlY29yZHMoKTtcclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgY29udGFpbmVyID0gY29yZXVpVGFibGVFbGVtZW50cy5nZXRTZWFyY2hDb250YWluZXIodGFibGUuZ2V0SWQoKSk7XHJcbiAgICAgICAgICAgICAgICBjb250YWluZXIuZmFkZU91dCgnZmFzdCcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLl9jb250cm9sO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBTZWFyY2hUZXh0OyIsIlxyXG5pbXBvcnQgY29yZXVpVGFibGVUcGwgICAgICBmcm9tIFwiLi4vY29yZXVpLnRhYmxlLnRlbXBsYXRlc1wiO1xyXG5pbXBvcnQgY29yZXVpVGFibGVVdGlscyAgICBmcm9tIFwiLi4vY29yZXVpLnRhYmxlLnV0aWxzXCI7XHJcbmltcG9ydCBjb3JldWlUYWJsZUVsZW1lbnRzIGZyb20gXCIuLi9jb3JldWkudGFibGUuZWxlbWVudHNcIjtcclxuaW1wb3J0IFNlYXJjaCAgICAgICAgICAgICAgZnJvbSBcIi4uL2Fic3RyYWN0L1NlYXJjaFwiO1xyXG5cclxuY2xhc3MgU2VhcmNoTnVtYmVyIGV4dGVuZHMgU2VhcmNoIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPXHJcbiAgICAgKiBAcGFyYW0ge2NvcmV1aVRhYmxlSW5zdGFuY2V9IHRhYmxlXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gICAgICAgICAgICAgIG9wdGlvbnNcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IodGFibGUsIG9wdGlvbnMpIHtcclxuXHJcbiAgICAgICAgb3B0aW9ucyA9ICQuZXh0ZW5kKHRydWUsIHtcclxuICAgICAgICAgICAgaWQ6IG51bGwsXHJcbiAgICAgICAgICAgIHR5cGU6ICdudW1iZXInLFxyXG4gICAgICAgICAgICBmaWVsZDogbnVsbCxcclxuICAgICAgICAgICAgbGFiZWw6IG51bGwsXHJcbiAgICAgICAgICAgIHZhbHVlOiBudWxsLFxyXG4gICAgICAgICAgICB3aWR0aDogMjAwLFxyXG4gICAgICAgICAgICBhdHRyOiB7XHJcbiAgICAgICAgICAgICAgICBjbGFzczogXCJmb3JtLWNvbnRyb2wgZC1pbmxpbmUtYmxvY2tcIixcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sIG9wdGlvbnMpO1xyXG5cclxuICAgICAgICBzdXBlcih0YWJsZSwgb3B0aW9ucyk7XHJcblxyXG5cclxuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy52YWx1ZSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLnNldFZhbHVlKHRoaXMuX29wdGlvbnMudmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQo9GB0YLQsNC90L7QstC60LAg0LfQvdCw0YfQtdC90LjRj1xyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHZhbHVlXHJcbiAgICAgKi9cclxuICAgIHNldFZhbHVlICh2YWx1ZSkge1xyXG5cclxuICAgICAgICBpZiAodmFsdWUpIHtcclxuICAgICAgICAgICAgaWYgKCAhIGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QodmFsdWUpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGxldCBudW1iZXJTdGFydCA9IG51bGw7XHJcbiAgICAgICAgICAgIGxldCBudW1iZXJFbmQgICA9IG51bGw7XHJcblxyXG4gICAgICAgICAgICBpZiAodmFsdWUuaGFzT3duUHJvcGVydHkoJ3N0YXJ0JykgJiZcclxuICAgICAgICAgICAgICAgIFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIHZhbHVlLnN0YXJ0KSA+PSAwICYmXHJcbiAgICAgICAgICAgICAgICAhIGlzTmFOKE51bWJlcih2YWx1ZS5zdGFydCkpXHJcbiAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgbnVtYmVyU3RhcnQgPSBOdW1iZXIodmFsdWUuc3RhcnQpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodmFsdWUuaGFzT3duUHJvcGVydHkoJ2VuZCcpICYmXHJcbiAgICAgICAgICAgICAgICBbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiB2YWx1ZS5lbmQpID49IDAgJiZcclxuICAgICAgICAgICAgICAgICEgaXNOYU4oTnVtYmVyKHZhbHVlLmVuZCkpXHJcbiAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgbnVtYmVyRW5kID0gTnVtYmVyKHZhbHVlLmVuZCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChudW1iZXJTdGFydCA9PT0gbnVsbCAmJiBudW1iZXJFbmQgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3ZhbHVlID0gbnVsbDtcclxuXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl92YWx1ZSA9IHtcclxuICAgICAgICAgICAgICAgICAgICBzdGFydDogbnVtYmVyU3RhcnQsXHJcbiAgICAgICAgICAgICAgICAgICAgZW5kOiBudW1iZXJFbmRcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5fdmFsdWUgPSBudWxsO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9jb250cm9sKSB7XHJcbiAgICAgICAgICAgIGxldCBpbnB1dFN0YXJ0ID0gdGhpcy5fY29udHJvbC5wYXJlbnQoKS5maW5kKCdpbnB1dC5udW1iZXItc3RhcnQnKTtcclxuICAgICAgICAgICAgbGV0IGlucHV0RW5kICAgPSB0aGlzLl9jb250cm9sLnBhcmVudCgpLmZpbmQoJ2lucHV0Lm51bWJlci1lbmQnKTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLl92YWx1ZSA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgaW5wdXRTdGFydC52YWwoJycpO1xyXG4gICAgICAgICAgICAgICAgaW5wdXRFbmQudmFsKCcnKTtcclxuXHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY29yZXVpVGFibGVVdGlscy5pc09iamVjdCh0aGlzLl92YWx1ZSkpIHtcclxuICAgICAgICAgICAgICAgIGlucHV0U3RhcnQudmFsKHR5cGVvZiB0aGlzLl92YWx1ZS5zdGFydCAhPT0gbnVsbCA/IHRoaXMuX3ZhbHVlLnN0YXJ0IDogJycpO1xyXG4gICAgICAgICAgICAgICAgaW5wdXRFbmQudmFsKHR5cGVvZiB0aGlzLl92YWx1ZS5lbmQgIT09IG51bGwgPyB0aGlzLl92YWx1ZS5lbmQgOiAnJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC30L3QsNGH0LXQvdC40Y9cclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd8bnVsbH1cclxuICAgICAqL1xyXG4gICAgZ2V0VmFsdWUoKSB7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9jb250cm9sKSB7XHJcbiAgICAgICAgICAgIGxldCBpbnB1dFN0YXJ0ID0gdGhpcy5fY29udHJvbC5wYXJlbnQoKS5maW5kKCdpbnB1dC5udW1iZXItc3RhcnQnKTtcclxuICAgICAgICAgICAgbGV0IGlucHV0RW5kICAgPSB0aGlzLl9jb250cm9sLnBhcmVudCgpLmZpbmQoJ2lucHV0Lm51bWJlci1lbmQnKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChpbnB1dFN0YXJ0WzBdICYmIGlucHV0RW5kWzBdKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgbGV0IHZhbHVlU3RhcnQgPSBpbnB1dFN0YXJ0LnZhbCgpO1xyXG4gICAgICAgICAgICAgICAgbGV0IHZhbHVlRW5kICAgPSBpbnB1dEVuZC52YWwoKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgICAgICAgICAgKHR5cGVvZiB2YWx1ZVN0YXJ0ID09PSAnc3RyaW5nJyAmJiB2YWx1ZVN0YXJ0ICE9PSAnJykgfHxcclxuICAgICAgICAgICAgICAgICAgICAodHlwZW9mIHZhbHVlRW5kID09PSAnc3RyaW5nJyAmJiB2YWx1ZUVuZCAhPT0gJycpXHJcbiAgICAgICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFydDogdmFsdWVTdGFydCAhPT0gJycgJiYgISBpc05hTihOdW1iZXIodmFsdWVTdGFydCkpID8gTnVtYmVyKHZhbHVlU3RhcnQpIDogbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZW5kOiB2YWx1ZUVuZCAhPT0gJycgJiYgISBpc05hTihOdW1iZXIodmFsdWVFbmQpKSA/IE51bWJlcih2YWx1ZUVuZCkgOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLl92YWx1ZTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQpNC40LvRjNGC0YDQsNGG0LjRjyDQtNCw0L3QvdGL0YVcclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9ICAgICAgICAgICAgICBmaWVsZFZhbHVlXHJcbiAgICAgKiBAcmV0dXJucyB7QXJyYXl8c3RyaW5nfG51bWJlcn0gc2VhcmNoVmFsdWVcclxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gICAgICovXHJcbiAgICBmaWx0ZXIoZmllbGRWYWx1ZSwgc2VhcmNoVmFsdWUpIHtcclxuXHJcbiAgICAgICAgaWYgKFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIGZpZWxkVmFsdWUpIDwgMCB8fFxyXG4gICAgICAgICAgICAhIGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3Qoc2VhcmNoVmFsdWUpIHx8XHJcbiAgICAgICAgICAgIChcclxuICAgICAgICAgICAgICAgIFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIHNlYXJjaFZhbHVlLnN0YXJ0KSA8IDAgJiZcclxuICAgICAgICAgICAgICAgIFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIHNlYXJjaFZhbHVlLmVuZCkgPCAwXHJcbiAgICAgICAgICAgIClcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIGxldCBpc3NldFN0YXJ0ID0gWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2Ygc2VhcmNoVmFsdWUuc3RhcnQpID49IDA7XHJcbiAgICAgICAgbGV0IGlzc2V0RW5kICAgPSBbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiBzZWFyY2hWYWx1ZS5lbmQpID49IDA7XHJcblxyXG4gICAgICAgIGlmIChpc3NldFN0YXJ0ICYmIGlzc2V0RW5kKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmaWVsZFZhbHVlID49IHNlYXJjaFZhbHVlLnN0YXJ0ICYmIGZpZWxkVmFsdWUgPD0gc2VhcmNoVmFsdWUuZW5kO1xyXG5cclxuICAgICAgICB9IGVsc2UgaWYgKGlzc2V0U3RhcnQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZpZWxkVmFsdWUgPj0gc2VhcmNoVmFsdWUuc3RhcnQ7XHJcblxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmaWVsZFZhbHVlIDw9IHNlYXJjaFZhbHVlLmVuZDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KTQvtGA0LzQuNGA0L7QstCw0L3QuNC1INC60L7QvdGC0LXQvdGC0LBcclxuICAgICAqIEByZXR1cm5zIHtqUXVlcnl9XHJcbiAgICAgKi9cclxuICAgIHJlbmRlcigpIHtcclxuXHJcbiAgICAgICAgaWYgKCAhIGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QodGhpcy5fb3B0aW9ucy5hdHRyKSkge1xyXG4gICAgICAgICAgICB0aGlzLl9vcHRpb25zLmF0dHIgPSB7fTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLmhhc093blByb3BlcnR5KCd3aWR0aCcpICYmXHJcbiAgICAgICAgICAgIGNvcmV1aVRhYmxlVXRpbHMuaXNOdW1lcmljKHRoaXMuX29wdGlvbnMud2lkdGgpXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9vcHRpb25zLmF0dHIuaGFzT3duUHJvcGVydHkoJ3N0eWxlJykpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX29wdGlvbnMuYXR0clsnc3R5bGUnXSArPSAnO3dpZHRoOicgKyB0aGlzLl9vcHRpb25zLndpZHRoICsgJ3B4JztcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX29wdGlvbnMuYXR0clsnc3R5bGUnXSA9ICd3aWR0aDonICsgdGhpcy5fb3B0aW9ucy53aWR0aCArICdweCc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLmF0dHIuaGFzT3duUHJvcGVydHkoJ3R5cGUnKSkge1xyXG4gICAgICAgICAgICBkZWxldGUgdGhpcy5fb3B0aW9ucy5hdHRyLnR5cGU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy5hdHRyLmhhc093blByb3BlcnR5KCd2YWx1ZScpKSB7XHJcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9vcHRpb25zLmF0dHIudmFsdWU7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgbGV0IGZpZWxkICAgICA9IHR5cGVvZiB0aGlzLl9vcHRpb25zLmZpZWxkID09PSAnc3RyaW5nJyA/IHRoaXMuX29wdGlvbnMuZmllbGQgOiAnJztcclxuICAgICAgICBsZXQgc3RhcnRBdHRyID0gW107XHJcbiAgICAgICAgbGV0IHN0YXJ0RW5kICA9IFtdO1xyXG4gICAgICAgIGxldCB0YWJsZSAgICAgPSB0aGlzLl90YWJsZTtcclxuXHJcblxyXG4gICAgICAgICQuZWFjaCh0aGlzLl9vcHRpb25zLmF0dHIsIGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xyXG4gICAgICAgICAgICBpZiAoWyduYW1lJywgJ3ZhbHVlJywgJ2NsYXNzJ10uaW5kZXhPZihuYW1lKSA+PSAwIHx8XHJcbiAgICAgICAgICAgICAgICBbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiB2YWx1ZSkgPCAwXHJcbiAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzdGFydEF0dHIucHVzaChuYW1lICsgJz1cIicgKyB2YWx1ZSArICdcIicpO1xyXG4gICAgICAgICAgICBzdGFydEVuZC5wdXNoKG5hbWUgKyAnPVwiJyArIHZhbHVlICsgJ1wiJyk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLmF0dHIuaGFzT3duUHJvcGVydHkoJ2NsYXNzJykgJiZcclxuICAgICAgICAgICAgWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2YgdGhpcy5fb3B0aW9ucy5hdHRyLmNsYXNzKSA+PSAwXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIHN0YXJ0QXR0ci5wdXNoKCdjbGFzcz1cIicgKyB0aGlzLl9vcHRpb25zLmF0dHIuY2xhc3MgKyAnIG51bWJlci1zdGFydFwiJyk7XHJcbiAgICAgICAgICAgIHN0YXJ0RW5kLnB1c2goJ2NsYXNzPVwiJyArIHRoaXMuX29wdGlvbnMuYXR0ci5jbGFzcyArICcgbnVtYmVyLWVuZFwiJyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgc3RhcnRBdHRyLnB1c2goJ2NsYXNzPVwibnVtYmVyLXN0YXJ0XCInKTtcclxuICAgICAgICAgICAgc3RhcnRFbmQucHVzaCgnY2xhc3M9XCJudW1iZXItZW5kXCInKTtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICBpZiAoZmllbGQpIHtcclxuICAgICAgICAgICAgc3RhcnRBdHRyLnB1c2goJ25hbWU9XCInICsgZmllbGQgKyAnW3N0YXJ0XVwiJyk7XHJcbiAgICAgICAgICAgIHN0YXJ0RW5kLnB1c2goJ25hbWU9XCInICsgZmllbGQgKyAnW2VuZF1cIicpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc3RhcnRBdHRyLnB1c2goJ3ZhbHVlPVwiJyArICh0aGlzLl92YWx1ZSA/IHRoaXMuX3ZhbHVlLnN0YXJ0IDogJycpICsgJ1wiJyk7XHJcbiAgICAgICAgc3RhcnRFbmQucHVzaCgndmFsdWU9XCInICsgKHRoaXMuX3ZhbHVlID8gdGhpcy5fdmFsdWUuZW5kIDogJycpICsgJ1wiJyk7XHJcblxyXG5cclxuICAgICAgICB0aGlzLl9jb250cm9sID0gJChjb3JldWlUYWJsZVV0aWxzLnJlbmRlcihjb3JldWlUYWJsZVRwbFsnc2VhcmNoL251bWJlci5odG1sJ10sIHtcclxuICAgICAgICAgICAgc3RhcnRBdHRyOiBzdGFydEF0dHIubGVuZ3RoID4gMCA/ICgnICcgKyBzdGFydEF0dHIuam9pbignICcpKSA6ICcnLFxyXG4gICAgICAgICAgICBlbmRBdHRyOiBzdGFydEVuZC5sZW5ndGggPiAwID8gKCcgJyArIHN0YXJ0RW5kLmpvaW4oJyAnKSkgOiAnJyxcclxuICAgICAgICB9KSk7XHJcblxyXG4gICAgICAgICQoJ2lucHV0Lm51bWJlci1zdGFydCwgaW5wdXQubnVtYmVyLWVuZCcsIHRoaXMuX2NvbnRyb2wpLmtleXVwKGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgaWYgKGUua2V5ID09PSAnRW50ZXInIHx8IGUua2V5Q29kZSA9PT0gMTMpIHtcclxuICAgICAgICAgICAgICAgIHRhYmxlLnNlYXJjaFJlY29yZHMoKTtcclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgY29udGFpbmVyID0gY29yZXVpVGFibGVFbGVtZW50cy5nZXRTZWFyY2hDb250YWluZXIodGFibGUuZ2V0SWQoKSk7XHJcbiAgICAgICAgICAgICAgICBjb250YWluZXIuZmFkZU91dCgnZmFzdCcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLl9jb250cm9sO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBTZWFyY2hOdW1iZXI7IiwiXHJcbmltcG9ydCBjb3JldWlUYWJsZVRwbCAgICAgIGZyb20gXCIuLi9jb3JldWkudGFibGUudGVtcGxhdGVzXCI7XHJcbmltcG9ydCBjb3JldWlUYWJsZVV0aWxzICAgIGZyb20gXCIuLi9jb3JldWkudGFibGUudXRpbHNcIjtcclxuaW1wb3J0IGNvcmV1aVRhYmxlRWxlbWVudHMgZnJvbSBcIi4uL2NvcmV1aS50YWJsZS5lbGVtZW50c1wiO1xyXG5pbXBvcnQgU2VhcmNoICAgICAgICAgICAgICBmcm9tIFwiLi4vYWJzdHJhY3QvU2VhcmNoXCI7XHJcblxyXG5jbGFzcyBTZWFyY2hEYXRlIGV4dGVuZHMgU2VhcmNoIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPXHJcbiAgICAgKiBAcGFyYW0ge2NvcmV1aVRhYmxlSW5zdGFuY2V9IHRhYmxlXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gICAgICAgICAgICAgIG9wdGlvbnNcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IodGFibGUsIG9wdGlvbnMpIHtcclxuXHJcbiAgICAgICAgb3B0aW9ucyA9ICQuZXh0ZW5kKHRydWUsIHtcclxuICAgICAgICAgICAgaWQ6IG51bGwsXHJcbiAgICAgICAgICAgIHR5cGU6ICdkYXRlJyxcclxuICAgICAgICAgICAgZmllbGQ6IG51bGwsXHJcbiAgICAgICAgICAgIGxhYmVsOiBudWxsLFxyXG4gICAgICAgICAgICB2YWx1ZTogbnVsbCxcclxuICAgICAgICAgICAgd2lkdGg6IDIwMCxcclxuICAgICAgICAgICAgYXR0cjoge1xyXG4gICAgICAgICAgICAgICAgY2xhc3M6IFwiZm9ybS1jb250cm9sIGQtaW5saW5lLWJsb2NrXCIsXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LCBvcHRpb25zKTtcclxuXHJcbiAgICAgICAgc3VwZXIodGFibGUsIG9wdGlvbnMpO1xyXG5cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMudmFsdWUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5zZXRWYWx1ZSh0aGlzLl9vcHRpb25zLnZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KPRgdGC0LDQvdC+0LLQutCwINC30L3QsNGH0LXQvdC40Y9cclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxyXG4gICAgICovXHJcbiAgICBzZXRWYWx1ZSh2YWx1ZSkge1xyXG5cclxuICAgICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJyAmJiB2YWx1ZSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodmFsdWUgJiZcclxuICAgICAgICAgICAgKFxyXG4gICAgICAgICAgICAgICAgdmFsdWUubWF0Y2goL15cXGR7NH1cXC1cXGR7Mn1cXC1cXGR7Mn0kLykgPT09IG51bGwgfHxcclxuICAgICAgICAgICAgICAgIGlzTmFOKG5ldyBEYXRlKHZhbHVlKSlcclxuICAgICAgICAgICAgKVxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl92YWx1ZSA9IHZhbHVlO1xyXG5cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX2NvbnRyb2wpIHtcclxuICAgICAgICAgICAgdGhpcy5fY29udHJvbC52YWwoXHJcbiAgICAgICAgICAgICAgICB0aGlzLl92YWx1ZSA9PT0gbnVsbCA/ICcnIDogdGhpcy5fdmFsdWVcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC30L3QsNGH0LXQvdC40Y9cclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd8bnVsbH1cclxuICAgICAqL1xyXG4gICAgZ2V0VmFsdWUoKSB7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9jb250cm9sKSB7XHJcbiAgICAgICAgICAgIGxldCB2YWx1ZSA9IHRoaXMuX2NvbnRyb2wudmFsKCk7XHJcblxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJiB2YWx1ZSAhPT0gJycpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCk0LjQu9GM0YLRgNCw0YbQuNGPINC00LDQvdC90YvRhVxyXG4gICAgICogQHJldHVybnMge3N0cmluZ30gICAgICAgICAgICAgIGZpZWxkVmFsdWVcclxuICAgICAqIEByZXR1cm5zIHtBcnJheXxzdHJpbmd8bnVtYmVyfSBzZWFyY2hWYWx1ZVxyXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAgICAgKi9cclxuICAgIGZpbHRlcihmaWVsZFZhbHVlLCBzZWFyY2hWYWx1ZSkge1xyXG5cclxuICAgICAgICBpZiAoWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2YgZmllbGRWYWx1ZSkgPCAwIHx8XHJcbiAgICAgICAgICAgIFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIHNlYXJjaFZhbHVlKSA8IDBcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGZpZWxkVmFsdWUudG9TdHJpbmcoKS5pbmRleE9mKHNlYXJjaFZhbHVlLnRvU3RyaW5nKCkpID09PSAwO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCk0L7RgNC80LjRgNC+0LLQsNC90LjQtSDQutC+0L3RgtC10L3RgtCwXHJcbiAgICAgKiBAcmV0dXJucyB7alF1ZXJ5fVxyXG4gICAgICovXHJcbiAgICByZW5kZXIoKSB7XHJcblxyXG4gICAgICAgIGlmICggISBjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KHRoaXMuX29wdGlvbnMuYXR0cikpIHtcclxuICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy5hdHRyID0ge307XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnd2lkdGgnKSAmJlxyXG4gICAgICAgICAgICBjb3JldWlUYWJsZVV0aWxzLmlzTnVtZXJpYyh0aGlzLl9vcHRpb25zLndpZHRoKVxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy5hdHRyLmhhc093blByb3BlcnR5KCdzdHlsZScpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9vcHRpb25zLmF0dHJbJ3N0eWxlJ10gKz0gJzt3aWR0aDonICsgdGhpcy5fb3B0aW9ucy53aWR0aCArICdweCc7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9vcHRpb25zLmF0dHJbJ3N0eWxlJ10gPSAnd2lkdGg6JyArIHRoaXMuX29wdGlvbnMud2lkdGggKyAncHgnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9vcHRpb25zLmF0dHJbJ3ZhbHVlJ10gPSB0eXBlb2YgdGhpcy5fdmFsdWUgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiB0aGlzLl92YWx1ZSA9PT0gJ251bWJlcidcclxuICAgICAgICAgICAgPyB0aGlzLl92YWx1ZVxyXG4gICAgICAgICAgICA6ICcnO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy5hdHRyLmhhc093blByb3BlcnR5KCd0eXBlJykpIHtcclxuICAgICAgICAgICAgZGVsZXRlIHRoaXMuX29wdGlvbnMuYXR0ci50eXBlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IGF0dHJpYnV0ZXMgPSBbXTtcclxuICAgICAgICBsZXQgdGFibGUgICAgICA9IHRoaXMuX3RhYmxlO1xyXG5cclxuICAgICAgICAkLmVhY2godGhpcy5fb3B0aW9ucy5hdHRyLCBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcclxuICAgICAgICAgICAgYXR0cmlidXRlcy5wdXNoKG5hbWUgKyAnPVwiJyArIHZhbHVlICsgJ1wiJyk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuX2NvbnRyb2wgPSAkKGNvcmV1aVRhYmxlVXRpbHMucmVuZGVyKGNvcmV1aVRhYmxlVHBsWydzZWFyY2gvZGF0ZS5odG1sJ10sIHtcclxuICAgICAgICAgICAgYXR0cjogYXR0cmlidXRlcy5sZW5ndGggPiAwID8gKCcgJyArIGF0dHJpYnV0ZXMuam9pbignICcpKSA6ICcnLFxyXG4gICAgICAgIH0pKTtcclxuXHJcblxyXG4gICAgICAgIHRoaXMuX2NvbnRyb2wua2V5dXAoZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICBpZiAoZS5rZXkgPT09ICdFbnRlcicgfHwgZS5rZXlDb2RlID09PSAxMykge1xyXG4gICAgICAgICAgICAgICAgdGFibGUuc2VhcmNoUmVjb3JkcygpO1xyXG5cclxuICAgICAgICAgICAgICAgIGxldCBjb250YWluZXIgPSBjb3JldWlUYWJsZUVsZW1lbnRzLmdldFNlYXJjaENvbnRhaW5lcih0YWJsZS5nZXRJZCgpKTtcclxuICAgICAgICAgICAgICAgIGNvbnRhaW5lci5mYWRlT3V0KCdmYXN0Jyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbnRyb2w7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IFNlYXJjaERhdGU7IiwiXHJcbmltcG9ydCBjb3JldWlUYWJsZVRwbCAgICAgIGZyb20gXCIuLi9jb3JldWkudGFibGUudGVtcGxhdGVzXCI7XHJcbmltcG9ydCBjb3JldWlUYWJsZVV0aWxzICAgIGZyb20gXCIuLi9jb3JldWkudGFibGUudXRpbHNcIjtcclxuaW1wb3J0IGNvcmV1aVRhYmxlRWxlbWVudHMgZnJvbSBcIi4uL2NvcmV1aS50YWJsZS5lbGVtZW50c1wiO1xyXG5pbXBvcnQgU2VhcmNoICAgICAgICAgICAgICBmcm9tIFwiLi4vYWJzdHJhY3QvU2VhcmNoXCI7XHJcblxyXG5jbGFzcyBTZWFyY2hEYXRlTW9udGggZXh0ZW5kcyBTZWFyY2gge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y9cclxuICAgICAqIEBwYXJhbSB7Y29yZXVpVGFibGVJbnN0YW5jZX0gdGFibGVcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSAgICAgICAgICAgICAgb3B0aW9uc1xyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3Rvcih0YWJsZSwgb3B0aW9ucykge1xyXG5cclxuICAgICAgICBvcHRpb25zID0gJC5leHRlbmQodHJ1ZSwge1xyXG4gICAgICAgICAgICBpZDogbnVsbCxcclxuICAgICAgICAgICAgdHlwZTogJ2RhdGVfbW9udGgnLFxyXG4gICAgICAgICAgICBmaWVsZDogbnVsbCxcclxuICAgICAgICAgICAgbGFiZWw6IG51bGwsXHJcbiAgICAgICAgICAgIHZhbHVlOiBudWxsLFxyXG4gICAgICAgICAgICB3aWR0aDogMjAwLFxyXG4gICAgICAgICAgICBhdHRyOiB7XHJcbiAgICAgICAgICAgICAgICBjbGFzczogXCJmb3JtLWNvbnRyb2wgZC1pbmxpbmUtYmxvY2tcIixcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sIG9wdGlvbnMpO1xyXG5cclxuICAgICAgICBzdXBlcih0YWJsZSwgb3B0aW9ucyk7XHJcblxyXG5cclxuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy52YWx1ZSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLnNldFZhbHVlKHRoaXMuX29wdGlvbnMudmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQo9GB0YLQsNC90L7QstC60LAg0LfQvdCw0YfQtdC90LjRj1xyXG4gICAgICogQHBhcmFtIHtzdHJpbmd8bnVsbH0gdmFsdWVcclxuICAgICAqL1xyXG4gICAgc2V0VmFsdWUodmFsdWUpIHtcclxuXHJcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycgJiYgdmFsdWUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHZhbHVlICYmXHJcbiAgICAgICAgICAgIChcclxuICAgICAgICAgICAgICAgIHZhbHVlLm1hdGNoKC9eXFxkezR9XFwtXFxkezJ9JC8pID09PSBudWxsIHx8XHJcbiAgICAgICAgICAgICAgICBpc05hTihuZXcgRGF0ZSh2YWx1ZSkpXHJcbiAgICAgICAgICAgIClcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fdmFsdWUgPSB2YWx1ZTtcclxuXHJcblxyXG5cclxuICAgICAgICBpZiAodGhpcy5fY29udHJvbCkge1xyXG4gICAgICAgICAgICB0aGlzLl9jb250cm9sLnZhbChcclxuICAgICAgICAgICAgICAgIHRoaXMuX3ZhbHVlID09PSBudWxsID8gJycgOiB0aGlzLl92YWx1ZVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0LfQvdCw0YfQtdC90LjRj1xyXG4gICAgICogQHJldHVybnMge3N0cmluZ3xudWxsfVxyXG4gICAgICovXHJcbiAgICBnZXRWYWx1ZSgpIHtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX2NvbnRyb2wpIHtcclxuICAgICAgICAgICAgbGV0IHZhbHVlID0gdGhpcy5fY29udHJvbC52YWwoKTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnICYmIHZhbHVlICE9PSAnJykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLl92YWx1ZTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQpNC40LvRjNGC0YDQsNGG0LjRjyDQtNCw0L3QvdGL0YVcclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IGZpZWxkVmFsdWVcclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IHNlYXJjaFZhbHVlXHJcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICAgICAqL1xyXG4gICAgZmlsdGVyKGZpZWxkVmFsdWUsIHNlYXJjaFZhbHVlKSB7XHJcblxyXG4gICAgICAgIGlmIChbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiBmaWVsZFZhbHVlKSA8IDAgfHxcclxuICAgICAgICAgICAgWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2Ygc2VhcmNoVmFsdWUpIDwgMFxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gZmllbGRWYWx1ZS50b1N0cmluZygpLnRvTG93ZXJDYXNlKCkuaW5kZXhPZihcclxuICAgICAgICAgICAgc2VhcmNoVmFsdWUudG9TdHJpbmcoKS50b0xvd2VyQ2FzZSgpXHJcbiAgICAgICAgKSA9PT0gMFxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCk0L7RgNC80LjRgNC+0LLQsNC90LjQtSDQutC+0L3RgtC10L3RgtCwXHJcbiAgICAgKiBAcmV0dXJucyB7alF1ZXJ5fVxyXG4gICAgICovXHJcbiAgICByZW5kZXIoKSB7XHJcblxyXG4gICAgICAgIGlmICggISBjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KHRoaXMuX29wdGlvbnMuYXR0cikpIHtcclxuICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy5hdHRyID0ge307XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnd2lkdGgnKSAmJlxyXG4gICAgICAgICAgICBjb3JldWlUYWJsZVV0aWxzLmlzTnVtZXJpYyh0aGlzLl9vcHRpb25zLndpZHRoKVxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy5hdHRyLmhhc093blByb3BlcnR5KCdzdHlsZScpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9vcHRpb25zLmF0dHJbJ3N0eWxlJ10gKz0gJzt3aWR0aDonICsgdGhpcy5fb3B0aW9ucy53aWR0aCArICdweCc7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9vcHRpb25zLmF0dHJbJ3N0eWxlJ10gPSAnd2lkdGg6JyArIHRoaXMuX29wdGlvbnMud2lkdGggKyAncHgnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9vcHRpb25zLmF0dHJbJ3ZhbHVlJ10gPSB0eXBlb2YgdGhpcy5fdmFsdWUgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiB0aGlzLl92YWx1ZSA9PT0gJ251bWJlcidcclxuICAgICAgICAgICAgPyB0aGlzLl92YWx1ZVxyXG4gICAgICAgICAgICA6ICcnO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy5hdHRyLmhhc093blByb3BlcnR5KCd0eXBlJykpIHtcclxuICAgICAgICAgICAgZGVsZXRlIHRoaXMuX29wdGlvbnMuYXR0ci50eXBlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IGF0dHJpYnV0ZXMgPSBbXTtcclxuICAgICAgICBsZXQgdGFibGUgICAgICA9IHRoaXMuX3RhYmxlO1xyXG5cclxuICAgICAgICAkLmVhY2godGhpcy5fb3B0aW9ucy5hdHRyLCBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcclxuICAgICAgICAgICAgYXR0cmlidXRlcy5wdXNoKG5hbWUgKyAnPVwiJyArIHZhbHVlICsgJ1wiJyk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuX2NvbnRyb2wgPSAkKGNvcmV1aVRhYmxlVXRpbHMucmVuZGVyKGNvcmV1aVRhYmxlVHBsWydzZWFyY2gvZGF0ZV9tb250aC5odG1sJ10sIHtcclxuICAgICAgICAgICAgYXR0cjogYXR0cmlidXRlcy5sZW5ndGggPiAwID8gKCcgJyArIGF0dHJpYnV0ZXMuam9pbignICcpKSA6ICcnLFxyXG4gICAgICAgIH0pKTtcclxuXHJcbiAgICAgICAgdGhpcy5fY29udHJvbC5rZXl1cChmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgIGlmIChlLmtleSA9PT0gJ0VudGVyJyB8fCBlLmtleUNvZGUgPT09IDEzKSB7XHJcbiAgICAgICAgICAgICAgICB0YWJsZS5zZWFyY2hSZWNvcmRzKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgbGV0IGNvbnRhaW5lciA9IGNvcmV1aVRhYmxlRWxlbWVudHMuZ2V0U2VhcmNoQ29udGFpbmVyKHRhYmxlLmdldElkKCkpO1xyXG4gICAgICAgICAgICAgICAgY29udGFpbmVyLmZhZGVPdXQoJ2Zhc3QnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5fY29udHJvbDtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgU2VhcmNoRGF0ZU1vbnRoOyIsIlxyXG5pbXBvcnQgY29yZXVpVGFibGVUcGwgICAgICBmcm9tIFwiLi4vY29yZXVpLnRhYmxlLnRlbXBsYXRlc1wiO1xyXG5pbXBvcnQgY29yZXVpVGFibGVVdGlscyAgICBmcm9tIFwiLi4vY29yZXVpLnRhYmxlLnV0aWxzXCI7XHJcbmltcG9ydCBjb3JldWlUYWJsZUVsZW1lbnRzIGZyb20gXCIuLi9jb3JldWkudGFibGUuZWxlbWVudHNcIjtcclxuaW1wb3J0IFNlYXJjaCAgICAgICAgICAgICAgZnJvbSBcIi4uL2Fic3RyYWN0L1NlYXJjaFwiO1xyXG5cclxuY2xhc3MgU2VhcmNoRGF0ZXRpbWUgZXh0ZW5kcyBTZWFyY2gge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y9cclxuICAgICAqIEBwYXJhbSB7Y29yZXVpVGFibGVJbnN0YW5jZX0gdGFibGVcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSAgICAgICAgICAgICAgb3B0aW9uc1xyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3Rvcih0YWJsZSwgb3B0aW9ucykge1xyXG5cclxuICAgICAgICBvcHRpb25zID0gJC5leHRlbmQodHJ1ZSwge1xyXG4gICAgICAgICAgICBpZDogbnVsbCxcclxuICAgICAgICAgICAgdHlwZTogJ2RhdGV0aW1lJyxcclxuICAgICAgICAgICAgZmllbGQ6IG51bGwsXHJcbiAgICAgICAgICAgIGxhYmVsOiBudWxsLFxyXG4gICAgICAgICAgICB2YWx1ZTogbnVsbCxcclxuICAgICAgICAgICAgd2lkdGg6IDIwMCxcclxuICAgICAgICAgICAgYXR0cjoge1xyXG4gICAgICAgICAgICAgICAgY2xhc3M6IFwiZm9ybS1jb250cm9sIGQtaW5saW5lLWJsb2NrXCIsXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LCBvcHRpb25zKTtcclxuXHJcbiAgICAgICAgc3VwZXIodGFibGUsIG9wdGlvbnMpO1xyXG5cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMudmFsdWUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5zZXRWYWx1ZSh0aGlzLl9vcHRpb25zLnZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KPRgdGC0LDQvdC+0LLQutCwINC30L3QsNGH0LXQvdC40Y9cclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxyXG4gICAgICovXHJcbiAgICBzZXRWYWx1ZSh2YWx1ZSkge1xyXG5cclxuICAgICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJyAmJiB2YWx1ZSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodmFsdWUgJiZcclxuICAgICAgICAgICAgKFxyXG4gICAgICAgICAgICAgICAgdmFsdWUubWF0Y2goL15cXGR7NH1cXC1cXGR7Mn1cXC1cXGR7Mn0oVHwgKVxcZHsyfTpcXGR7Mn0oOlxcZHsyfXwpJC8pID09PSBudWxsIHx8XHJcbiAgICAgICAgICAgICAgICBpc05hTihuZXcgRGF0ZSh2YWx1ZSkpXHJcbiAgICAgICAgICAgIClcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fdmFsdWUgPSB2YWx1ZTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX2NvbnRyb2wpIHtcclxuICAgICAgICAgICAgdGhpcy5fY29udHJvbC52YWwoXHJcbiAgICAgICAgICAgICAgICB0aGlzLl92YWx1ZSA9PT0gbnVsbCA/ICcnIDogdGhpcy5fdmFsdWVcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC30L3QsNGH0LXQvdC40Y9cclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIGdldFZhbHVlKCkge1xyXG5cclxuICAgICAgICBpZiAodGhpcy5fY29udHJvbCkge1xyXG4gICAgICAgICAgICBsZXQgdmFsdWUgPSB0aGlzLl9jb250cm9sLnZhbCgpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYgdmFsdWUgIT09ICcnKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLl92YWx1ZTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQpNC40LvRjNGC0YDQsNGG0LjRjyDQtNCw0L3QvdGL0YVcclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9ICAgICAgICAgICAgICBmaWVsZFZhbHVlXHJcbiAgICAgKiBAcmV0dXJucyB7QXJyYXl8c3RyaW5nfG51bWJlcn0gc2VhcmNoVmFsdWVcclxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gICAgICovXHJcbiAgICBmaWx0ZXIoZmllbGRWYWx1ZSwgc2VhcmNoVmFsdWUpIHtcclxuXHJcbiAgICAgICAgaWYgKFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIGZpZWxkVmFsdWUpIDwgMCB8fFxyXG4gICAgICAgICAgICBbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiBzZWFyY2hWYWx1ZSkgPCAwXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBmaWVsZFZhbHVlLnRvU3RyaW5nKCkgPT09IHNlYXJjaFZhbHVlLnRvU3RyaW5nKCk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KTQvtGA0LzQuNGA0L7QstCw0L3QuNC1INC60L7QvdGC0LXQvdGC0LBcclxuICAgICAqIEByZXR1cm5zIHtqUXVlcnl9XHJcbiAgICAgKi9cclxuICAgIHJlbmRlcigpIHtcclxuXHJcbiAgICAgICAgaWYgKCAhIGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QodGhpcy5fb3B0aW9ucy5hdHRyKSkge1xyXG4gICAgICAgICAgICB0aGlzLl9vcHRpb25zLmF0dHIgPSB7fTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLmhhc093blByb3BlcnR5KCd3aWR0aCcpICYmXHJcbiAgICAgICAgICAgIGNvcmV1aVRhYmxlVXRpbHMuaXNOdW1lcmljKHRoaXMuX29wdGlvbnMud2lkdGgpXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9vcHRpb25zLmF0dHIuaGFzT3duUHJvcGVydHkoJ3N0eWxlJykpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX29wdGlvbnMuYXR0clsnc3R5bGUnXSArPSAnO3dpZHRoOicgKyB0aGlzLl9vcHRpb25zLndpZHRoICsgJ3B4JztcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX29wdGlvbnMuYXR0clsnc3R5bGUnXSA9ICd3aWR0aDonICsgdGhpcy5fb3B0aW9ucy53aWR0aCArICdweCc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX29wdGlvbnMuYXR0clsndmFsdWUnXSA9IHR5cGVvZiB0aGlzLl92YWx1ZSA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIHRoaXMuX3ZhbHVlID09PSAnbnVtYmVyJ1xyXG4gICAgICAgICAgICA/IHRoaXMuX3ZhbHVlXHJcbiAgICAgICAgICAgIDogJyc7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLmF0dHIuaGFzT3duUHJvcGVydHkoJ3R5cGUnKSkge1xyXG4gICAgICAgICAgICBkZWxldGUgdGhpcy5fb3B0aW9ucy5hdHRyLnR5cGU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgYXR0cmlidXRlcyA9IFtdO1xyXG4gICAgICAgIGxldCB0YWJsZSAgICAgID0gdGhpcy5fdGFibGU7XHJcblxyXG4gICAgICAgICQuZWFjaCh0aGlzLl9vcHRpb25zLmF0dHIsIGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xyXG4gICAgICAgICAgICBpZiAoWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2YgdmFsdWUpID49IDApIHtcclxuICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXMucHVzaChuYW1lICsgJz1cIicgKyB2YWx1ZSArICdcIicpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuX2NvbnRyb2wgPSAkKGNvcmV1aVRhYmxlVXRpbHMucmVuZGVyKGNvcmV1aVRhYmxlVHBsWydzZWFyY2gvZGF0ZXRpbWUuaHRtbCddLCB7XHJcbiAgICAgICAgICAgIGF0dHI6IGF0dHJpYnV0ZXMubGVuZ3RoID4gMCA/ICgnICcgKyBhdHRyaWJ1dGVzLmpvaW4oJyAnKSkgOiAnJyxcclxuICAgICAgICB9KSk7XHJcblxyXG4gICAgICAgIHRoaXMuX2NvbnRyb2wua2V5dXAoZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICBpZiAoZS5rZXkgPT09ICdFbnRlcicgfHwgZS5rZXlDb2RlID09PSAxMykge1xyXG4gICAgICAgICAgICAgICAgdGFibGUuc2VhcmNoUmVjb3JkcygpO1xyXG5cclxuICAgICAgICAgICAgICAgIGxldCBjb250YWluZXIgPSBjb3JldWlUYWJsZUVsZW1lbnRzLmdldFNlYXJjaENvbnRhaW5lcih0YWJsZS5nZXRJZCgpKTtcclxuICAgICAgICAgICAgICAgIGNvbnRhaW5lci5mYWRlT3V0KCdmYXN0Jyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbnRyb2w7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IFNlYXJjaERhdGV0aW1lOyIsIlxyXG5pbXBvcnQgY29yZXVpVGFibGVUcGwgICAgICBmcm9tIFwiLi4vY29yZXVpLnRhYmxlLnRlbXBsYXRlc1wiO1xyXG5pbXBvcnQgY29yZXVpVGFibGVVdGlscyAgICBmcm9tIFwiLi4vY29yZXVpLnRhYmxlLnV0aWxzXCI7XHJcbmltcG9ydCBjb3JldWlUYWJsZUVsZW1lbnRzIGZyb20gXCIuLi9jb3JldWkudGFibGUuZWxlbWVudHNcIjtcclxuaW1wb3J0IFNlYXJjaCAgICAgICAgICAgICAgZnJvbSBcIi4uL2Fic3RyYWN0L1NlYXJjaFwiO1xyXG5cclxuY2xhc3MgU2VhcmNoRGF0ZVJhbmdlIGV4dGVuZHMgU2VhcmNoIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPXHJcbiAgICAgKiBAcGFyYW0ge2NvcmV1aVRhYmxlSW5zdGFuY2V9IHRhYmxlXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gICAgICAgICAgICAgIG9wdGlvbnNcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IodGFibGUsIG9wdGlvbnMpIHtcclxuXHJcbiAgICAgICAgb3B0aW9ucyA9ICQuZXh0ZW5kKHRydWUsIHtcclxuICAgICAgICAgICAgaWQ6IG51bGwsXHJcbiAgICAgICAgICAgIHR5cGU6ICdkYXRlX3JhbmdlJyxcclxuICAgICAgICAgICAgZmllbGQ6IG51bGwsXHJcbiAgICAgICAgICAgIGxhYmVsOiBudWxsLFxyXG4gICAgICAgICAgICB2YWx1ZTogbnVsbCxcclxuICAgICAgICAgICAgd2lkdGg6IDIwMCxcclxuICAgICAgICAgICAgYXR0cjoge1xyXG4gICAgICAgICAgICAgICAgY2xhc3M6IFwiZm9ybS1jb250cm9sIGQtaW5saW5lLWJsb2NrXCIsXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LCBvcHRpb25zKTtcclxuXHJcbiAgICAgICAgc3VwZXIodGFibGUsIG9wdGlvbnMpO1xyXG5cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMudmFsdWUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5zZXRWYWx1ZSh0aGlzLl9vcHRpb25zLnZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KPRgdGC0LDQvdC+0LLQutCwINC30L3QsNGH0LXQvdC40Y9cclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSB2YWx1ZVxyXG4gICAgICovXHJcbiAgICBzZXRWYWx1ZSh2YWx1ZSkge1xyXG5cclxuICAgICAgICBpZiAodmFsdWUpIHtcclxuICAgICAgICAgICAgaWYgKCAhIGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QodmFsdWUpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGxldCBkYXRlU3RhcnQgPSBudWxsO1xyXG4gICAgICAgICAgICBsZXQgZGF0ZUVuZCAgID0gbnVsbDtcclxuXHJcbiAgICAgICAgICAgIGlmICh2YWx1ZS5oYXNPd25Qcm9wZXJ0eSgnc3RhcnQnKSAmJlxyXG4gICAgICAgICAgICAgICAgdHlwZW9mIHZhbHVlLnN0YXJ0ID09PSAnc3RyaW5nJyAmJlxyXG4gICAgICAgICAgICAgICAgdmFsdWUuc3RhcnQubWF0Y2goL15cXGR7NH1cXC1cXGR7Mn1cXC1cXGR7Mn0kLykgPT09IG51bGwgJiZcclxuICAgICAgICAgICAgICAgIGlzTmFOKG5ldyBEYXRlKHZhbHVlLnN0YXJ0KSlcclxuICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICBkYXRlU3RhcnQgPSB2YWx1ZS5zdGFydDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHZhbHVlLmhhc093blByb3BlcnR5KCdlbmQnKSAmJlxyXG4gICAgICAgICAgICAgICAgdHlwZW9mIHZhbHVlLmVuZCA9PT0gJ3N0cmluZycgJiZcclxuICAgICAgICAgICAgICAgIHZhbHVlLmVuZC5tYXRjaCgvXlxcZHs0fVxcLVxcZHsyfVxcLVxcZHsyfSQvKSA9PT0gbnVsbCAmJlxyXG4gICAgICAgICAgICAgICAgaXNOYU4obmV3IERhdGUodmFsdWUuZW5kKSlcclxuICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICBkYXRlRW5kID0gdmFsdWUuZW5kO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoZGF0ZVN0YXJ0ID09PSBudWxsICYmIGRhdGVFbmQgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3ZhbHVlID0gbnVsbDtcclxuXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl92YWx1ZSA9IHtcclxuICAgICAgICAgICAgICAgICAgICBzdGFydDogZGF0ZVN0YXJ0LFxyXG4gICAgICAgICAgICAgICAgICAgIGVuZDogZGF0ZUVuZFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLl92YWx1ZSA9IG51bGw7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX2NvbnRyb2wpIHtcclxuICAgICAgICAgICAgbGV0IGlucHV0U3RhcnQgPSB0aGlzLl9jb250cm9sLnBhcmVudCgpLmZpbmQoJ2lucHV0LmRhdGUtc3RhcnQnKTtcclxuICAgICAgICAgICAgbGV0IGlucHV0RW5kICAgPSB0aGlzLl9jb250cm9sLnBhcmVudCgpLmZpbmQoJ2lucHV0LmRhdGUtZW5kJyk7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5fdmFsdWUgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIGlucHV0U3RhcnQudmFsKCcnKTtcclxuICAgICAgICAgICAgICAgIGlucHV0RW5kLnZhbCgnJyk7XHJcblxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QodGhpcy5fdmFsdWUpKSB7XHJcbiAgICAgICAgICAgICAgICBpbnB1dFN0YXJ0LnZhbCh0eXBlb2YgdGhpcy5fdmFsdWUuc3RhcnQgIT09IG51bGwgPyB0aGlzLl92YWx1ZS5zdGFydCA6ICcnKTtcclxuICAgICAgICAgICAgICAgIGlucHV0RW5kLnZhbCh0eXBlb2YgdGhpcy5fdmFsdWUuZW5kICE9PSBudWxsID8gdGhpcy5fdmFsdWUuZW5kIDogJycpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSDQt9C90LDRh9C10L3QuNGPXHJcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fG51bGx9XHJcbiAgICAgKi9cclxuICAgIGdldFZhbHVlKCkge1xyXG5cclxuICAgICAgICBpZiAodGhpcy5fY29udHJvbCkge1xyXG4gICAgICAgICAgICBsZXQgaW5wdXRTdGFydCA9IHRoaXMuX2NvbnRyb2wucGFyZW50KCkuZmluZCgnaW5wdXQuZGF0ZS1zdGFydCcpO1xyXG4gICAgICAgICAgICBsZXQgaW5wdXRFbmQgICA9IHRoaXMuX2NvbnRyb2wucGFyZW50KCkuZmluZCgnaW5wdXQuZGF0ZS1lbmQnKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChpbnB1dFN0YXJ0WzBdICYmIGlucHV0RW5kWzBdKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgbGV0IHZhbHVlU3RhcnQgPSBpbnB1dFN0YXJ0LnZhbCgpO1xyXG4gICAgICAgICAgICAgICAgbGV0IHZhbHVlRW5kICAgPSBpbnB1dEVuZC52YWwoKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgICAgICAgICAgKHR5cGVvZiB2YWx1ZVN0YXJ0ID09PSAnc3RyaW5nJyAmJiB2YWx1ZVN0YXJ0ICE9PSAnJykgfHxcclxuICAgICAgICAgICAgICAgICAgICAodHlwZW9mIHZhbHVlRW5kID09PSAnc3RyaW5nJyAmJiB2YWx1ZUVuZCAhPT0gJycpXHJcbiAgICAgICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFydDogdmFsdWVTdGFydCAhPT0gJycgPyB2YWx1ZVN0YXJ0IDogbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZW5kOiB2YWx1ZUVuZCAhPT0gJycgPyB2YWx1ZUVuZCA6IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5fdmFsdWU7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KTQuNC70YzRgtGA0LDRhtC40Y8g0LTQsNC90L3Ri9GFXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBmaWVsZFZhbHVlXHJcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBzZWFyY2hWYWx1ZVxyXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAgICAgKi9cclxuICAgIGZpbHRlcihmaWVsZFZhbHVlLCBzZWFyY2hWYWx1ZSkge1xyXG5cclxuICAgICAgICBpZiAoWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2YgZmllbGRWYWx1ZSkgPCAwIHx8XHJcbiAgICAgICAgICAgICEgY29yZXVpVGFibGVVdGlscy5pc09iamVjdChzZWFyY2hWYWx1ZSkgfHxcclxuICAgICAgICAgICAgKHR5cGVvZiBzZWFyY2hWYWx1ZS5zdGFydCAhPT0gJ3N0cmluZycgJiYgdHlwZW9mIHNlYXJjaFZhbHVlLmVuZCAhPT0gJ3N0cmluZycpXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICBsZXQgaXNzZXRTdGFydCA9IFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIHNlYXJjaFZhbHVlLnN0YXJ0KSA+PSAwO1xyXG4gICAgICAgIGxldCBpc3NldEVuZCAgID0gWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2Ygc2VhcmNoVmFsdWUuZW5kKSA+PSAwO1xyXG5cclxuICAgICAgICBpZiAoaXNzZXRTdGFydCAmJiBpc3NldEVuZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmllbGRWYWx1ZSA+PSBzZWFyY2hWYWx1ZS5zdGFydCAmJiBmaWVsZFZhbHVlIDw9IHNlYXJjaFZhbHVlLmVuZDtcclxuXHJcbiAgICAgICAgfSBlbHNlIGlmIChpc3NldFN0YXJ0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmaWVsZFZhbHVlID49IHNlYXJjaFZhbHVlLnN0YXJ0O1xyXG5cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gZmllbGRWYWx1ZSA8PSBzZWFyY2hWYWx1ZS5lbmQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCk0L7RgNC80LjRgNC+0LLQsNC90LjQtSDQutC+0L3RgtC10L3RgtCwXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxyXG4gICAgICovXHJcbiAgICByZW5kZXIoKSB7XHJcblxyXG4gICAgICAgIGxldCBvcHRpb25zID0gdGhpcy5nZXRPcHRpb25zKCk7XHJcblxyXG4gICAgICAgIGlmICggISBjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KG9wdGlvbnMuYXR0cikpIHtcclxuICAgICAgICAgICAgb3B0aW9ucy5hdHRyID0ge307XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAob3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnd2lkdGgnKSAmJlxyXG4gICAgICAgICAgICBjb3JldWlUYWJsZVV0aWxzLmlzTnVtZXJpYyhvcHRpb25zLndpZHRoKVxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5hdHRyLmhhc093blByb3BlcnR5KCdzdHlsZScpKSB7XHJcbiAgICAgICAgICAgICAgICBvcHRpb25zLmF0dHJbJ3N0eWxlJ10gKz0gJzt3aWR0aDonICsgb3B0aW9ucy53aWR0aCArICdweCc7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBvcHRpb25zLmF0dHJbJ3N0eWxlJ10gPSAnd2lkdGg6JyArIG9wdGlvbnMud2lkdGggKyAncHgnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAob3B0aW9ucy5hdHRyLmhhc093blByb3BlcnR5KCd0eXBlJykpIHtcclxuICAgICAgICAgICAgZGVsZXRlIG9wdGlvbnMuYXR0ci50eXBlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKG9wdGlvbnMuYXR0ci5oYXNPd25Qcm9wZXJ0eSgndmFsdWUnKSkge1xyXG4gICAgICAgICAgICBkZWxldGUgb3B0aW9ucy5hdHRyLnZhbHVlO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIGxldCBzdGFydEF0dHIgPSBbXTtcclxuICAgICAgICBsZXQgc3RhcnRFbmQgID0gW107XHJcblxyXG5cclxuICAgICAgICAkLmVhY2gob3B0aW9ucy5hdHRyLCBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcclxuICAgICAgICAgICAgaWYgKFsnbmFtZScsICd2YWx1ZScsICdjbGFzcyddLmluZGV4T2YobmFtZSkgPj0gMCB8fFxyXG4gICAgICAgICAgICAgICAgWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2YgdmFsdWUpIDwgMFxyXG4gICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgc3RhcnRBdHRyLnB1c2gobmFtZSArICc9XCInICsgdmFsdWUgKyAnXCInKTtcclxuICAgICAgICAgICAgc3RhcnRFbmQucHVzaChuYW1lICsgJz1cIicgKyB2YWx1ZSArICdcIicpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBpZiAob3B0aW9ucy5hdHRyLmhhc093blByb3BlcnR5KCdjbGFzcycpICYmXHJcbiAgICAgICAgICAgIFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIG9wdGlvbnMuYXR0ci5jbGFzcykgPj0gMFxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICBzdGFydEF0dHIucHVzaCgnY2xhc3M9XCInICsgb3B0aW9ucy5hdHRyLmNsYXNzICsgJyBkYXRlLXN0YXJ0XCInKTtcclxuICAgICAgICAgICAgc3RhcnRFbmQucHVzaCgnY2xhc3M9XCInICsgb3B0aW9ucy5hdHRyLmNsYXNzICsgJyBkYXRlLWVuZFwiJyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgc3RhcnRBdHRyLnB1c2goJ2NsYXNzPVwiZGF0ZS1zdGFydFwiJyk7XHJcbiAgICAgICAgICAgIHN0YXJ0RW5kLnB1c2goJ2NsYXNzPVwiZGF0ZS1lbmRcIicpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc3RhcnRBdHRyLnB1c2goJ3ZhbHVlPVwiJyArICh0aGlzLl92YWx1ZSA/IHRoaXMuX3ZhbHVlLnN0YXJ0IDogJycpICsgJ1wiJyk7XHJcbiAgICAgICAgc3RhcnRFbmQucHVzaCgndmFsdWU9XCInICsgKHRoaXMuX3ZhbHVlID8gdGhpcy5fdmFsdWUuZW5kIDogJycpICsgJ1wiJyk7XHJcblxyXG5cclxuICAgICAgICBsZXQgY29udHJvbCA9ICQoY29yZXVpVGFibGVVdGlscy5yZW5kZXIoY29yZXVpVGFibGVUcGxbJ3NlYXJjaC9kYXRlX3JhbmdlLmh0bWwnXSwge1xyXG4gICAgICAgICAgICBzdGFydEF0dHI6IHN0YXJ0QXR0ci5sZW5ndGggPiAwID8gKCcgJyArIHN0YXJ0QXR0ci5qb2luKCcgJykpIDogJycsXHJcbiAgICAgICAgICAgIGVuZEF0dHI6IHN0YXJ0RW5kLmxlbmd0aCA+IDAgPyAoJyAnICsgc3RhcnRFbmQuam9pbignICcpKSA6ICcnLFxyXG4gICAgICAgIH0pKTtcclxuXHJcbiAgICAgICAgJCgnaW5wdXQuZGF0ZS1zdGFydCcsIGNvbnRyb2wpLmNoYW5nZShmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgbGV0IGRhdGVFbmQgPSAkKCdpbnB1dC5kYXRlLWVuZCcsIGNvbnRyb2wpLmF0dHIoJ21pbicsICQodGhpcykudmFsKCkpO1xyXG5cclxuICAgICAgICAgICAgaWYgKFwic2hvd1BpY2tlclwiIGluIEhUTUxJbnB1dEVsZW1lbnQucHJvdG90eXBlKSB7XHJcbiAgICAgICAgICAgICAgICAkKGRhdGVFbmQpWzBdLnNob3dQaWNrZXIoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgICQoJ2lucHV0LmRhdGUtZW5kJywgY29udHJvbCkuY2hhbmdlKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAkKCdpbnB1dC5kYXRlLXN0YXJ0JywgY29udHJvbCkuYXR0cignbWF4JywgJCh0aGlzKS52YWwoKSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuX2NvbnRyb2wgPSBjb250cm9sO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5fY29udHJvbDtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgU2VhcmNoRGF0ZVJhbmdlOyIsIlxyXG5pbXBvcnQgY29yZXVpVGFibGVUcGwgICAgICBmcm9tIFwiLi4vY29yZXVpLnRhYmxlLnRlbXBsYXRlc1wiO1xyXG5pbXBvcnQgY29yZXVpVGFibGVVdGlscyAgICBmcm9tIFwiLi4vY29yZXVpLnRhYmxlLnV0aWxzXCI7XHJcbmltcG9ydCBjb3JldWlUYWJsZUVsZW1lbnRzIGZyb20gXCIuLi9jb3JldWkudGFibGUuZWxlbWVudHNcIjtcclxuaW1wb3J0IFNlYXJjaCAgICAgICAgICAgICAgZnJvbSBcIi4uL2Fic3RyYWN0L1NlYXJjaFwiO1xyXG5cclxuY2xhc3MgU2VhcmNoRGF0ZXRpbWVSYW5nZSBleHRlbmRzIFNlYXJjaCB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQmNC90LjRhtC40LDQu9C40LfQsNGG0LjRj1xyXG4gICAgICogQHBhcmFtIHtjb3JldWlUYWJsZUluc3RhbmNlfSB0YWJsZVxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9ICAgICAgICAgICAgICBvcHRpb25zXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKHRhYmxlLCBvcHRpb25zKSB7XHJcblxyXG4gICAgICAgIG9wdGlvbnMgPSAkLmV4dGVuZCh0cnVlLCB7XHJcbiAgICAgICAgICAgIGlkOiBudWxsLFxyXG4gICAgICAgICAgICB0eXBlOiAnZGF0ZXRpbWVfcmFuZ2UnLFxyXG4gICAgICAgICAgICBmaWVsZDogbnVsbCxcclxuICAgICAgICAgICAgbGFiZWw6IG51bGwsXHJcbiAgICAgICAgICAgIHZhbHVlOiBudWxsLFxyXG4gICAgICAgICAgICB3aWR0aDogMjAwLFxyXG4gICAgICAgICAgICBhdHRyOiB7XHJcbiAgICAgICAgICAgICAgICBjbGFzczogXCJmb3JtLWNvbnRyb2wgZC1pbmxpbmUtYmxvY2tcIixcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sIG9wdGlvbnMpO1xyXG5cclxuICAgICAgICBzdXBlcih0YWJsZSwgb3B0aW9ucyk7XHJcblxyXG5cclxuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy52YWx1ZSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLnNldFZhbHVlKHRoaXMuX29wdGlvbnMudmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQo9GB0YLQsNC90L7QstC60LAg0LfQvdCw0YfQtdC90LjRj1xyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHZhbHVlXHJcbiAgICAgKi9cclxuICAgIHNldFZhbHVlKHZhbHVlKSB7XHJcblxyXG4gICAgICAgIGlmICh2YWx1ZSkge1xyXG4gICAgICAgICAgICBpZiAoICEgY29yZXVpVGFibGVVdGlscy5pc09iamVjdCh2YWx1ZSkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgbGV0IGRhdGVTdGFydCA9IG51bGw7XHJcbiAgICAgICAgICAgIGxldCBkYXRlRW5kICAgPSBudWxsO1xyXG5cclxuICAgICAgICAgICAgaWYgKHZhbHVlLmhhc093blByb3BlcnR5KCdzdGFydCcpICYmXHJcbiAgICAgICAgICAgICAgICB0eXBlb2YgdmFsdWUuc3RhcnQgPT09ICdzdHJpbmcnICYmXHJcbiAgICAgICAgICAgICAgICB2YWx1ZS5zdGFydC5tYXRjaCgvXlxcZHs0fVxcLVxcZHsyfVxcLVxcZHsyfSBcXGR7Mn06XFxkezJ9OlxcZHsyfSQvKSA9PT0gbnVsbCAmJlxyXG4gICAgICAgICAgICAgICAgaXNOYU4obmV3IERhdGUodmFsdWUuc3RhcnQpKVxyXG4gICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgIGRhdGVTdGFydCA9IHZhbHVlLnN0YXJ0O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodmFsdWUuaGFzT3duUHJvcGVydHkoJ2VuZCcpICYmXHJcbiAgICAgICAgICAgICAgICB0eXBlb2YgdmFsdWUuZW5kID09PSAnc3RyaW5nJyAmJlxyXG4gICAgICAgICAgICAgICAgdmFsdWUuZW5kLm1hdGNoKC9eXFxkezR9XFwtXFxkezJ9XFwtXFxkezJ9IFxcZHsyfTpcXGR7Mn06XFxkezJ9JC8pID09PSBudWxsICYmXHJcbiAgICAgICAgICAgICAgICBpc05hTihuZXcgRGF0ZSh2YWx1ZS5lbmQpKVxyXG4gICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgIGRhdGVFbmQgPSB2YWx1ZS5lbmQ7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChkYXRlU3RhcnQgPT09IG51bGwgJiYgZGF0ZUVuZCA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fdmFsdWUgPSBudWxsO1xyXG5cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3ZhbHVlID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0OiBkYXRlU3RhcnQsXHJcbiAgICAgICAgICAgICAgICAgICAgZW5kOiBkYXRlRW5kXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3ZhbHVlID0gbnVsbDtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICBpZiAodGhpcy5fY29udHJvbCkge1xyXG4gICAgICAgICAgICBsZXQgaW5wdXRTdGFydCA9IHRoaXMuX2NvbnRyb2wucGFyZW50KCkuZmluZCgnaW5wdXQuZGF0ZS1zdGFydCcpO1xyXG4gICAgICAgICAgICBsZXQgaW5wdXRFbmQgICA9IHRoaXMuX2NvbnRyb2wucGFyZW50KCkuZmluZCgnaW5wdXQuZGF0ZS1lbmQnKTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLl92YWx1ZSA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgaW5wdXRTdGFydC52YWwoJycpO1xyXG4gICAgICAgICAgICAgICAgaW5wdXRFbmQudmFsKCcnKTtcclxuXHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY29yZXVpVGFibGVVdGlscy5pc09iamVjdCh0aGlzLl92YWx1ZSkpIHtcclxuICAgICAgICAgICAgICAgIGlucHV0U3RhcnQudmFsKHR5cGVvZiB0aGlzLl92YWx1ZS5zdGFydCAhPT0gbnVsbCA/IHRoaXMuX3ZhbHVlLnN0YXJ0IDogJycpO1xyXG4gICAgICAgICAgICAgICAgaW5wdXRFbmQudmFsKHR5cGVvZiB0aGlzLl92YWx1ZS5lbmQgIT09IG51bGwgPyB0aGlzLl92YWx1ZS5lbmQgOiAnJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC30L3QsNGH0LXQvdC40Y9cclxuICAgICAqIEByZXR1cm5zIHtPYmplY3R8bnVsbH1cclxuICAgICAqL1xyXG4gICAgZ2V0VmFsdWUoKSB7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9jb250cm9sKSB7XHJcbiAgICAgICAgICAgIGxldCBpbnB1dFN0YXJ0ID0gdGhpcy5fY29udHJvbC5wYXJlbnQoKS5maW5kKCdpbnB1dC5kYXRlLXN0YXJ0Jyk7XHJcbiAgICAgICAgICAgIGxldCBpbnB1dEVuZCAgID0gdGhpcy5fY29udHJvbC5wYXJlbnQoKS5maW5kKCdpbnB1dC5kYXRlLWVuZCcpO1xyXG5cclxuICAgICAgICAgICAgaWYgKGlucHV0U3RhcnRbMF0gJiYgaW5wdXRFbmRbMF0pIHtcclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgdmFsdWVTdGFydCA9IGlucHV0U3RhcnQudmFsKCk7XHJcbiAgICAgICAgICAgICAgICBsZXQgdmFsdWVFbmQgICA9IGlucHV0RW5kLnZhbCgpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChcclxuICAgICAgICAgICAgICAgICAgICAodHlwZW9mIHZhbHVlU3RhcnQgPT09ICdzdHJpbmcnICYmIHZhbHVlU3RhcnQgIT09ICcnKSB8fFxyXG4gICAgICAgICAgICAgICAgICAgICh0eXBlb2YgdmFsdWVFbmQgPT09ICdzdHJpbmcnICYmIHZhbHVlRW5kICE9PSAnJylcclxuICAgICAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0OiB2YWx1ZVN0YXJ0ICE9PSAnJyA/IHZhbHVlU3RhcnQgOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbmQ6IHZhbHVlRW5kICE9PSAnJyA/IHZhbHVlRW5kIDogbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLl92YWx1ZTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQpNC40LvRjNGC0YDQsNGG0LjRjyDQtNCw0L3QvdGL0YVcclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9ICAgICAgICAgICAgICBmaWVsZFZhbHVlXHJcbiAgICAgKiBAcmV0dXJucyB7QXJyYXl8c3RyaW5nfG51bWJlcn0gc2VhcmNoVmFsdWVcclxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gICAgICovXHJcbiAgICBmaWx0ZXIoZmllbGRWYWx1ZSwgc2VhcmNoVmFsdWUpIHtcclxuXHJcbiAgICAgICAgaWYgKFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIGZpZWxkVmFsdWUpIDwgMCB8fFxyXG4gICAgICAgICAgICAhIGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3Qoc2VhcmNoVmFsdWUpIHx8XHJcbiAgICAgICAgICAgICh0eXBlb2Ygc2VhcmNoVmFsdWUuc3RhcnQgIT09ICdzdHJpbmcnICYmIHR5cGVvZiBzZWFyY2hWYWx1ZS5lbmQgIT09ICdzdHJpbmcnKVxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgbGV0IGlzc2V0U3RhcnQgPSBbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiBzZWFyY2hWYWx1ZS5zdGFydCkgPj0gMDtcclxuICAgICAgICBsZXQgaXNzZXRFbmQgICA9IFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIHNlYXJjaFZhbHVlLmVuZCkgPj0gMDtcclxuXHJcbiAgICAgICAgaWYgKGlzc2V0U3RhcnQgJiYgaXNzZXRFbmQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZpZWxkVmFsdWUgPj0gc2VhcmNoVmFsdWUuc3RhcnQgJiYgZmllbGRWYWx1ZSA8PSBzZWFyY2hWYWx1ZS5lbmQ7XHJcblxyXG4gICAgICAgIH0gZWxzZSBpZiAoaXNzZXRTdGFydCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmllbGRWYWx1ZSA+PSBzZWFyY2hWYWx1ZS5zdGFydDtcclxuXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZpZWxkVmFsdWUgPD0gc2VhcmNoVmFsdWUuZW5kO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQpNC+0YDQvNC40YDQvtCy0LDQvdC40LUg0LrQvtC90YLQtdC90YLQsFxyXG4gICAgICogQHJldHVybnMge3N0cmluZ31cclxuICAgICAqL1xyXG4gICAgcmVuZGVyKCkge1xyXG5cclxuICAgICAgICBpZiAoICEgY29yZXVpVGFibGVVdGlscy5pc09iamVjdCh0aGlzLl9vcHRpb25zLmF0dHIpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX29wdGlvbnMuYXR0ciA9IHt9O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMuaGFzT3duUHJvcGVydHkoJ3dpZHRoJykgJiZcclxuICAgICAgICAgICAgY29yZXVpVGFibGVVdGlscy5pc051bWVyaWModGhpcy5fb3B0aW9ucy53aWR0aClcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMuYXR0ci5oYXNPd25Qcm9wZXJ0eSgnc3R5bGUnKSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy5hdHRyWydzdHlsZSddICs9ICc7d2lkdGg6JyArIHRoaXMuX29wdGlvbnMud2lkdGggKyAncHgnO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy5hdHRyWydzdHlsZSddID0gJ3dpZHRoOicgKyB0aGlzLl9vcHRpb25zLndpZHRoICsgJ3B4JztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMuYXR0ci5oYXNPd25Qcm9wZXJ0eSgndHlwZScpKSB7XHJcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9vcHRpb25zLmF0dHIudHlwZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLmF0dHIuaGFzT3duUHJvcGVydHkoJ3ZhbHVlJykpIHtcclxuICAgICAgICAgICAgZGVsZXRlIHRoaXMuX29wdGlvbnMuYXR0ci52YWx1ZTtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICBsZXQgc3RhcnRBdHRyID0gW107XHJcbiAgICAgICAgbGV0IHN0YXJ0RW5kICA9IFtdO1xyXG4gICAgICAgIGxldCB0YWJsZSAgICAgPSB0aGlzLl90YWJsZTtcclxuXHJcblxyXG4gICAgICAgICQuZWFjaCh0aGlzLl9vcHRpb25zLmF0dHIsIGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xyXG4gICAgICAgICAgICBpZiAoWyduYW1lJywgJ3ZhbHVlJywgJ2NsYXNzJ10uaW5kZXhPZihuYW1lKSA+PSAwIHx8XHJcbiAgICAgICAgICAgICAgICBbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiB2YWx1ZSkgPCAwXHJcbiAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzdGFydEF0dHIucHVzaChuYW1lICsgJz1cIicgKyB2YWx1ZSArICdcIicpO1xyXG4gICAgICAgICAgICBzdGFydEVuZC5wdXNoKG5hbWUgKyAnPVwiJyArIHZhbHVlICsgJ1wiJyk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLmF0dHIuaGFzT3duUHJvcGVydHkoJ2NsYXNzJykgJiZcclxuICAgICAgICAgICAgWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2YgdGhpcy5fb3B0aW9ucy5hdHRyLmNsYXNzKSA+PSAwXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIHN0YXJ0QXR0ci5wdXNoKCdjbGFzcz1cIicgKyB0aGlzLl9vcHRpb25zLmF0dHIuY2xhc3MgKyAnIGRhdGUtc3RhcnRcIicpO1xyXG4gICAgICAgICAgICBzdGFydEVuZC5wdXNoKCdjbGFzcz1cIicgKyB0aGlzLl9vcHRpb25zLmF0dHIuY2xhc3MgKyAnIGRhdGUtZW5kXCInKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBzdGFydEF0dHIucHVzaCgnY2xhc3M9XCJkYXRlLXN0YXJ0XCInKTtcclxuICAgICAgICAgICAgc3RhcnRFbmQucHVzaCgnY2xhc3M9XCJkYXRlLWVuZFwiJyk7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgc3RhcnRBdHRyLnB1c2goJ3ZhbHVlPVwiJyArICh0aGlzLl92YWx1ZSA/IHRoaXMuX3ZhbHVlLnN0YXJ0IDogJycpICsgJ1wiJyk7XHJcbiAgICAgICAgc3RhcnRFbmQucHVzaCgndmFsdWU9XCInICsgKHRoaXMuX3ZhbHVlID8gdGhpcy5fdmFsdWUuZW5kIDogJycpICsgJ1wiJyk7XHJcblxyXG5cclxuICAgICAgICBsZXQgY29udHJvbCA9ICQoY29yZXVpVGFibGVVdGlscy5yZW5kZXIoY29yZXVpVGFibGVUcGxbJ3NlYXJjaC9kYXRldGltZV9yYW5nZS5odG1sJ10sIHtcclxuICAgICAgICAgICAgc3RhcnRBdHRyOiBzdGFydEF0dHIubGVuZ3RoID4gMCA/ICgnICcgKyBzdGFydEF0dHIuam9pbignICcpKSA6ICcnLFxyXG4gICAgICAgICAgICBlbmRBdHRyOiBzdGFydEVuZC5sZW5ndGggPiAwID8gKCcgJyArIHN0YXJ0RW5kLmpvaW4oJyAnKSkgOiAnJyxcclxuICAgICAgICB9KSk7XHJcblxyXG4gICAgICAgICQoJ2lucHV0LmRhdGUtc3RhcnQnLCBjb250cm9sKS5jaGFuZ2UoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGxldCBkYXRlRW5kID0gJCgnaW5wdXQuZGF0ZS1lbmQnLCBjb250cm9sKS5hdHRyKCdtaW4nLCAkKHRoaXMpLnZhbCgpKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChcInNob3dQaWNrZXJcIiBpbiBIVE1MSW5wdXRFbGVtZW50LnByb3RvdHlwZSkge1xyXG4gICAgICAgICAgICAgICAgJChkYXRlRW5kKVswXS5zaG93UGlja2VyKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICAkKCdpbnB1dC5kYXRlLWVuZCcsIGNvbnRyb2wpLmNoYW5nZShmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgJCgnaW5wdXQuZGF0ZS1zdGFydCcsIGNvbnRyb2wpLmF0dHIoJ21heCcsICQodGhpcykudmFsKCkpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLl9jb250cm9sID0gY29udHJvbDtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbnRyb2w7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IFNlYXJjaERhdGV0aW1lUmFuZ2U7IiwiXHJcbmltcG9ydCBjb3JldWlUYWJsZVRwbCAgIGZyb20gXCIuLi9jb3JldWkudGFibGUudGVtcGxhdGVzXCI7XHJcbmltcG9ydCBjb3JldWlUYWJsZVV0aWxzIGZyb20gXCIuLi9jb3JldWkudGFibGUudXRpbHNcIjtcclxuaW1wb3J0IFNlYXJjaCAgICAgICAgICAgZnJvbSBcIi4uL2Fic3RyYWN0L1NlYXJjaFwiO1xyXG5cclxuY2xhc3MgU2VhcmNoQ2hlY2tib3ggZXh0ZW5kcyBTZWFyY2gge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y9cclxuICAgICAqIEBwYXJhbSB7Y29yZXVpVGFibGVJbnN0YW5jZX0gdGFibGVcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSAgICAgICAgICAgICAgb3B0aW9uc1xyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3Rvcih0YWJsZSwgb3B0aW9ucykge1xyXG5cclxuICAgICAgICBvcHRpb25zID0gJC5leHRlbmQodHJ1ZSwge1xyXG4gICAgICAgICAgICBpZDogbnVsbCxcclxuICAgICAgICAgICAgdHlwZTogJ2NoZWNrYm94JyxcclxuICAgICAgICAgICAgZmllbGQ6IG51bGwsXHJcbiAgICAgICAgICAgIGxhYmVsOiBudWxsLFxyXG4gICAgICAgICAgICB2YWx1ZTogbnVsbCxcclxuICAgICAgICAgICAgb3B0aW9uczogW11cclxuICAgICAgICB9LCBvcHRpb25zKTtcclxuXHJcbiAgICAgICAgc3VwZXIodGFibGUsIG9wdGlvbnMpO1xyXG5cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMudmFsdWUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5zZXRWYWx1ZSh0aGlzLl9vcHRpb25zLnZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KPRgdGC0LDQvdC+0LLQutCwINC30L3QsNGH0LXQvdC40Y9cclxuICAgICAqIEBwYXJhbSB7QXJyYXl8bnVsbH0gdmFsdWVcclxuICAgICAqL1xyXG4gICAgc2V0VmFsdWUodmFsdWUpIHtcclxuXHJcbiAgICAgICAgaWYgKFsnc3RyaW5nJywgJ251bWJlcicsICdvYmplY3QnXS5pbmRleE9mKHR5cGVvZiB2YWx1ZSkgPCAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xyXG4gICAgICAgICAgICAgICAgbGV0IGl0ZW1zID0gW107XHJcblxyXG4gICAgICAgICAgICAgICAgJC5lYWNoKHZhbHVlLCBmdW5jdGlvbiAoa2V5LCBpdGVtKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBpdGVtICE9PSAnc3RyaW5nJyAmJiB0eXBlb2YgaXRlbSAhPT0gJ251bWJlcicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaXRlbXMucHVzaChpdGVtKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuX3ZhbHVlID0gaXRlbXM7XHJcblxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fdmFsdWUgPSBudWxsO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3ZhbHVlID0gWyB2YWx1ZSBdO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9jb250cm9sKSB7XHJcbiAgICAgICAgICAgICQoJ2lucHV0OmNoZWNrZWQnLCB0aGlzLl9jb250cm9sKS5wcm9wKCdjaGVja2VkJywgZmFsc2UpO1xyXG5cclxuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodGhpcy5fdmFsdWUpKSB7XHJcbiAgICAgICAgICAgICAgICAkLmVhY2godGhpcy5fdmFsdWUsIGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJCgnaW5wdXRbdmFsdWU9XCInICsgdmFsdWUgKyAnXCJdJywgdGhpcy5fY29udHJvbCkucHJvcCgnY2hlY2tlZCcsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0LfQvdCw0YfQtdC90LjRj1xyXG4gICAgICogQHJldHVybnMge0FycmF5fG51bGx9XHJcbiAgICAgKi9cclxuICAgIGdldFZhbHVlKCkge1xyXG5cclxuICAgICAgICBpZiAodGhpcy5fY29udHJvbCkge1xyXG4gICAgICAgICAgICBsZXQgaW5wdXRzID0gJCgnaW5wdXQ6Y2hlY2tlZCcsIHRoaXMuX2NvbnRyb2wpO1xyXG4gICAgICAgICAgICBsZXQgaXRlbXMgID0gW107XHJcblxyXG4gICAgICAgICAgICAkLmVhY2goaW5wdXRzLCBmdW5jdGlvbiAoa2V5LCBpbnB1dCkge1xyXG4gICAgICAgICAgICAgICAgbGV0IHZhbHVlID0gJChpbnB1dCkuYXR0cigndmFsdWUnKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2YgdmFsdWUpID49IDAgJiZcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZSAhPT0gJydcclxuICAgICAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgICAgIGl0ZW1zLnB1c2godmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBpdGVtcy5sZW5ndGggPiAwID8gaXRlbXMgOiBudWxsO1xyXG5cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fdmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCk0LjQu9GM0YLRgNCw0YbQuNGPINC00LDQvdC90YvRhVxyXG4gICAgICogQHJldHVybnMge3N0cmluZ30gZmllbGRWYWx1ZVxyXG4gICAgICogQHJldHVybnMge0FycmF5fSAgc2VhcmNoVmFsdWVcclxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gICAgICovXHJcbiAgICBmaWx0ZXIoZmllbGRWYWx1ZSwgc2VhcmNoVmFsdWUpIHtcclxuXHJcbiAgICAgICAgaWYgKFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIGZpZWxkVmFsdWUpIDwgMCB8fFxyXG4gICAgICAgICAgICAhIEFycmF5LmlzQXJyYXkoc2VhcmNoVmFsdWUpXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBzZWFyY2hWYWx1ZS5pbmRleE9mKGZpZWxkVmFsdWUpID49IDA7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KTQvtGA0LzQuNGA0L7QstCw0L3QuNC1INC60L7QvdGC0LXQvdGC0LBcclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIHJlbmRlcigpIHtcclxuXHJcbiAgICAgICAgbGV0IHRoYXQgICAgPSB0aGlzO1xyXG4gICAgICAgIGxldCBvcHRpb25zID0gW107XHJcblxyXG4gICAgICAgICQuZWFjaCh0aGlzLl9vcHRpb25zLm9wdGlvbnMsIGZ1bmN0aW9uIChrZXksIG9wdGlvbikge1xyXG5cclxuICAgICAgICAgICAgaWYgKFsnc3RyaW5nJywgJ251bWVyaWMnXS5pbmRleE9mKHR5cGVvZiBvcHRpb24pID49IDApIHtcclxuICAgICAgICAgICAgICAgIGxldCBjaGVja2VkID0gQXJyYXkuaXNBcnJheSh0aGF0Ll92YWx1ZSkgPyB0aGF0Ll92YWx1ZS5pbmRleE9mKGtleSkgPj0gMCA6IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgICAgIG9wdGlvbnMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgdGV4dDogICAgb3B0aW9uLFxyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiAgIGtleSxcclxuICAgICAgICAgICAgICAgICAgICBjaGVja2VkOiBjaGVja2VkLFxyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaWYgKCAhIGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3Qob3B0aW9uKSB8fFxyXG4gICAgICAgICAgICAgICAgICAgICEgb3B0aW9uLmhhc093blByb3BlcnR5KCd2YWx1ZScpIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgWydzdHJpbmcnLCAnbnVtZXJpYyddLmluZGV4T2YodHlwZW9mIG9wdGlvbi52YWx1ZSkgPT09IC0xXHJcbiAgICAgICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgbGV0IGNoZWNrZWQgPSBBcnJheS5pc0FycmF5KHRoYXQuX3ZhbHVlKSA/IHRoYXQuX3ZhbHVlLmluZGV4T2Yob3B0aW9uLnZhbHVlKSA+PSAwIDogZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBsZXQgdGV4dCAgICA9IG9wdGlvbi5oYXNPd25Qcm9wZXJ0eSgndGV4dCcpXHJcbiAgICAgICAgICAgICAgICAgICAgPyBvcHRpb24udGV4dFxyXG4gICAgICAgICAgICAgICAgICAgIDogb3B0aW9uLnZhbHVlO1xyXG5cclxuICAgICAgICAgICAgICAgIG9wdGlvbnMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgdGV4dDogICAgdGV4dCxcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogICBvcHRpb24udmFsdWUsXHJcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tlZDogY2hlY2tlZCxcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuX2NvbnRyb2wgPSAkKGNvcmV1aVRhYmxlVXRpbHMucmVuZGVyKGNvcmV1aVRhYmxlVHBsWydzZWFyY2gvY2hlY2tib3guaHRtbCddLCB7XHJcbiAgICAgICAgICAgIG9wdGlvbnM6IG9wdGlvbnMsXHJcbiAgICAgICAgfSkpO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5fY29udHJvbDtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgU2VhcmNoQ2hlY2tib3g7IiwiXHJcbmltcG9ydCBjb3JldWlUYWJsZVRwbCAgIGZyb20gXCIuLi9jb3JldWkudGFibGUudGVtcGxhdGVzXCI7XHJcbmltcG9ydCBjb3JldWlUYWJsZVV0aWxzIGZyb20gXCIuLi9jb3JldWkudGFibGUudXRpbHNcIjtcclxuaW1wb3J0IFNlYXJjaCAgICAgICAgICAgZnJvbSBcIi4uL2Fic3RyYWN0L1NlYXJjaFwiO1xyXG5cclxuY2xhc3MgU2VhcmNoQ2hlY2tib3hCdG4gZXh0ZW5kcyBTZWFyY2gge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y9cclxuICAgICAqIEBwYXJhbSB7Y29yZXVpVGFibGVJbnN0YW5jZX0gdGFibGVcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSAgICAgICAgICAgICAgb3B0aW9uc1xyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3Rvcih0YWJsZSwgb3B0aW9ucykge1xyXG5cclxuICAgICAgICBvcHRpb25zID0gJC5leHRlbmQodHJ1ZSwge1xyXG4gICAgICAgICAgICBpZDogbnVsbCxcclxuICAgICAgICAgICAgdHlwZTogJ2NoZWNrYm94QnRuJyxcclxuICAgICAgICAgICAgZmllbGQ6IG51bGwsXHJcbiAgICAgICAgICAgIGxhYmVsOiBudWxsLFxyXG4gICAgICAgICAgICBvcHRpb25zQ2xhc3M6ICdidG4gYnRuLW91dGxpbmUtc2Vjb25kYXJ5JyxcclxuICAgICAgICAgICAgdmFsdWU6IG51bGwsXHJcbiAgICAgICAgICAgIG9wdGlvbnM6IFtdXHJcbiAgICAgICAgfSwgb3B0aW9ucyk7XHJcblxyXG4gICAgICAgIHN1cGVyKHRhYmxlLCBvcHRpb25zKTtcclxuXHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLnZhbHVlICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0VmFsdWUodGhpcy5fb3B0aW9ucy52YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCj0YHRgtCw0L3QvtCy0LrQsCDQt9C90LDRh9C10L3QuNGPXHJcbiAgICAgKiBAcGFyYW0ge0FycmF5fG51bGx9IHZhbHVlXHJcbiAgICAgKi9cclxuICAgIHNldFZhbHVlKHZhbHVlKSB7XHJcblxyXG4gICAgICAgIGlmIChbJ3N0cmluZycsICdudW1iZXInLCAnb2JqZWN0J10uaW5kZXhPZih0eXBlb2YgdmFsdWUpIDwgMCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0Jykge1xyXG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcclxuICAgICAgICAgICAgICAgIGxldCBpdGVtcyA9IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgICQuZWFjaCh2YWx1ZSwgZnVuY3Rpb24gKGtleSwgaXRlbSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgaXRlbSAhPT0gJ3N0cmluZycgJiYgdHlwZW9mIGl0ZW0gIT09ICdudW1iZXInKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGl0ZW1zLnB1c2goaXRlbSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLl92YWx1ZSA9IGl0ZW1zO1xyXG5cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3ZhbHVlID0gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLl92YWx1ZSA9IFsgdmFsdWUgXTtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICBpZiAodGhpcy5fY29udHJvbCkge1xyXG4gICAgICAgICAgICAkKCdpbnB1dDpjaGVja2VkJywgdGhpcy5fY29udHJvbCkucHJvcCgnY2hlY2tlZCcsIGZhbHNlKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHRoaXMuX3ZhbHVlKSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fdmFsdWUubWFwKGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICQoJ2lucHV0W3ZhbHVlPVwiJyArIHZhbHVlICsgJ1wiXScsIHRoaXMuX2NvbnRyb2wpLnByb3AoJ2NoZWNrZWQnLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC30L3QsNGH0LXQvdC40Y9cclxuICAgICAqIEByZXR1cm5zIHtBcnJheXxudWxsfVxyXG4gICAgICovXHJcbiAgICBnZXRWYWx1ZSgpIHtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX2NvbnRyb2wpIHtcclxuICAgICAgICAgICAgbGV0IGlucHV0cyA9ICQoJ2lucHV0OmNoZWNrZWQnLCB0aGlzLl9jb250cm9sKTtcclxuICAgICAgICAgICAgbGV0IGl0ZW1zICA9IFtdO1xyXG5cclxuICAgICAgICAgICAgJC5lYWNoKGlucHV0cywgZnVuY3Rpb24gKGtleSwgaW5wdXQpIHtcclxuICAgICAgICAgICAgICAgIGxldCB2YWx1ZSA9ICQoaW5wdXQpLmF0dHIoJ3ZhbHVlJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKChbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiB2YWx1ZSkgPj0gMCkgJiZcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZSAhPT0gJydcclxuICAgICAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgICAgIGl0ZW1zLnB1c2godmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBpdGVtcy5sZW5ndGggPiAwID8gaXRlbXMgOiBudWxsO1xyXG5cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fdmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCk0LjQu9GM0YLRgNCw0YbQuNGPINC00LDQvdC90YvRhVxyXG4gICAgICogQHJldHVybnMge3N0cmluZ30gZmllbGRWYWx1ZVxyXG4gICAgICogQHJldHVybnMge0FycmF5fSAgc2VhcmNoVmFsdWVcclxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gICAgICovXHJcbiAgICBmaWx0ZXIoZmllbGRWYWx1ZSwgc2VhcmNoVmFsdWUpIHtcclxuXHJcbiAgICAgICAgaWYgKFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIGZpZWxkVmFsdWUpIDwgMCB8fFxyXG4gICAgICAgICAgICAhIEFycmF5LmlzQXJyYXkoc2VhcmNoVmFsdWUpXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBzZWFyY2hWYWx1ZS5pbmRleE9mKGZpZWxkVmFsdWUpID49IDA7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KTQvtGA0LzQuNGA0L7QstCw0L3QuNC1INC60L7QvdGC0LXQvdGC0LBcclxuICAgICAqIEByZXR1cm5zIHtqUXVlcnl9XHJcbiAgICAgKi9cclxuICAgIHJlbmRlcigpIHtcclxuXHJcbiAgICAgICAgbGV0IHRoYXQgICAgPSB0aGlzO1xyXG4gICAgICAgIGxldCBvcHRpb25zID0gW107XHJcblxyXG4gICAgICAgICQuZWFjaCh0aGlzLl9vcHRpb25zLm9wdGlvbnMsIGZ1bmN0aW9uIChrZXksIG9wdGlvbikge1xyXG5cclxuICAgICAgICAgICAgaWYgKFsnc3RyaW5nJywgJ251bWVyaWMnXS5pbmRleE9mKHR5cGVvZiBvcHRpb24pID49IDApIHtcclxuICAgICAgICAgICAgICAgIGxldCBjaGVja2VkID0gQXJyYXkuaXNBcnJheSh0aGF0Ll92YWx1ZSkgPyB0aGF0Ll92YWx1ZS5pbmRleE9mKGtleSkgPj0gMCA6IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgICAgIG9wdGlvbnMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgdGV4dDogICAgb3B0aW9uLFxyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiAgIGtleSxcclxuICAgICAgICAgICAgICAgICAgICBjaGVja2VkOiBjaGVja2VkLFxyXG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnNDbGFzczogdGhhdC5fb3B0aW9ucy5vcHRpb25zQ2xhc3MsXHJcbiAgICAgICAgICAgICAgICAgICAgaGFzaDogY29yZXVpVGFibGVVdGlscy5oYXNoQ29kZSgpXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoICEgY29yZXVpVGFibGVVdGlscy5pc09iamVjdChvcHRpb24pIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgISBvcHRpb24uaGFzT3duUHJvcGVydHkoJ3ZhbHVlJykgfHxcclxuICAgICAgICAgICAgICAgICAgICBbJ3N0cmluZycsICdudW1lcmljJ10uaW5kZXhPZih0eXBlb2Ygb3B0aW9uLnZhbHVlKSA9PT0gLTFcclxuICAgICAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgY2hlY2tlZCA9IEFycmF5LmlzQXJyYXkodGhhdC5fdmFsdWUpID8gdGhhdC5fdmFsdWUuaW5kZXhPZihvcHRpb24udmFsdWUpID49IDAgOiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIGxldCB0ZXh0ICAgID0gb3B0aW9uLmhhc093blByb3BlcnR5KCd0ZXh0JylcclxuICAgICAgICAgICAgICAgICAgICA/IG9wdGlvbi50ZXh0XHJcbiAgICAgICAgICAgICAgICAgICAgOiBvcHRpb24udmFsdWU7XHJcblxyXG4gICAgICAgICAgICAgICAgb3B0aW9ucy5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICB0ZXh0OiAgICB0ZXh0LFxyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiAgIG9wdGlvbi52YWx1ZSxcclxuICAgICAgICAgICAgICAgICAgICBjaGVja2VkOiBjaGVja2VkLFxyXG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnNDbGFzczogdGhhdC5fb3B0aW9ucy5vcHRpb25zQ2xhc3MsXHJcbiAgICAgICAgICAgICAgICAgICAgaGFzaDogY29yZXVpVGFibGVVdGlscy5oYXNoQ29kZSgpLFxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5fY29udHJvbCA9ICQoY29yZXVpVGFibGVVdGlscy5yZW5kZXIoY29yZXVpVGFibGVUcGxbJ3NlYXJjaC9jaGVja2JveC1idG4uaHRtbCddLCB7XHJcbiAgICAgICAgICAgIG9wdGlvbnM6IG9wdGlvbnNcclxuICAgICAgICB9KSk7XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLl9jb250cm9sO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBTZWFyY2hDaGVja2JveEJ0bjsiLCJcclxuaW1wb3J0IGNvcmV1aVRhYmxlVHBsICAgZnJvbSBcIi4uL2NvcmV1aS50YWJsZS50ZW1wbGF0ZXNcIjtcclxuaW1wb3J0IGNvcmV1aVRhYmxlVXRpbHMgZnJvbSBcIi4uL2NvcmV1aS50YWJsZS51dGlsc1wiO1xyXG5pbXBvcnQgU2VhcmNoICAgICAgICAgICBmcm9tIFwiLi4vYWJzdHJhY3QvU2VhcmNoXCI7XHJcblxyXG5jbGFzcyBTZWFyY2hSYWRpbyBleHRlbmRzIFNlYXJjaCB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQmNC90LjRhtC40LDQu9C40LfQsNGG0LjRj1xyXG4gICAgICogQHBhcmFtIHtjb3JldWlUYWJsZUluc3RhbmNlfSB0YWJsZVxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9ICAgICAgICAgICAgICBvcHRpb25zXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKHRhYmxlLCBvcHRpb25zKSB7XHJcblxyXG4gICAgICAgIG9wdGlvbnMgPSAkLmV4dGVuZCh0cnVlLCB7XHJcbiAgICAgICAgICAgIGlkOiBudWxsLFxyXG4gICAgICAgICAgICB0eXBlOiAncmFkaW8nLFxyXG4gICAgICAgICAgICBmaWVsZDogbnVsbCxcclxuICAgICAgICAgICAgbGFiZWw6IG51bGwsXHJcbiAgICAgICAgICAgIHZhbHVlOiBudWxsLFxyXG4gICAgICAgICAgICBvcHRpb25zOiBbXSxcclxuICAgICAgICB9LCBvcHRpb25zKTtcclxuXHJcbiAgICAgICAgc3VwZXIodGFibGUsIG9wdGlvbnMpO1xyXG5cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMudmFsdWUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5zZXRWYWx1ZSh0aGlzLl9vcHRpb25zLnZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KPRgdGC0LDQvdC+0LLQutCwINC30L3QsNGH0LXQvdC40Y9cclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxyXG4gICAgICovXHJcbiAgICBzZXRWYWx1ZSh2YWx1ZSkge1xyXG5cclxuICAgICAgICBpZiAodmFsdWUgIT09IG51bGwgJiZcclxuICAgICAgICAgICAgdHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJyAmJlxyXG4gICAgICAgICAgICB0eXBlb2YgdmFsdWUgIT09ICdudW1iZXInXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX3ZhbHVlID0gdmFsdWU7XHJcblxyXG5cclxuICAgICAgICBpZiAodGhpcy5fY29udHJvbCkge1xyXG4gICAgICAgICAgICAkKCdpbnB1dCcsICB0aGlzLl9jb250cm9sKS5wcm9wKCdjaGVja2VkJywgZmFsc2UpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuX3ZhbHVlICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAkKCdpbnB1dFt2YWx1ZT1cIicgKyB0aGlzLl92YWx1ZSArICdcIl0nLCAgdGhpcy5fY29udHJvbCkucHJvcCgnY2hlY2tlZCcsIHRydWUpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgJCgnaW5wdXQuY29yZXVpLXRhYmxlX19hbGwnLCAgdGhpcy5fY29udHJvbCkucHJvcCgnY2hlY2tlZCcsIHRydWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSDQt9C90LDRh9C10L3QuNGPXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfG51bGx9XHJcbiAgICAgKi9cclxuICAgIGdldFZhbHVlKCkge1xyXG5cclxuICAgICAgICBpZiAodGhpcy5fY29udHJvbCkge1xyXG4gICAgICAgICAgICBsZXQgaW5wdXQgPSAkKCdpbnB1dDpjaGVja2VkJywgdGhpcy5fY29udHJvbCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoaW5wdXQgJiYgaW5wdXRbMF0pIHtcclxuICAgICAgICAgICAgICAgIGxldCB2YWx1ZSA9IGlucHV0LnZhbCgpO1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZSA9PT0gJydcclxuICAgICAgICAgICAgICAgICAgICA/IG51bGxcclxuICAgICAgICAgICAgICAgICAgICA6IHZhbHVlXHJcblxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQpNC40LvRjNGC0YDQsNGG0LjRjyDQtNCw0L3QvdGL0YVcclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9ICAgICAgICAgICAgICBmaWVsZFZhbHVlXHJcbiAgICAgKiBAcmV0dXJucyB7QXJyYXl8c3RyaW5nfG51bWJlcn0gc2VhcmNoVmFsdWVcclxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gICAgICovXHJcbiAgICBmaWx0ZXIoZmllbGRWYWx1ZSwgc2VhcmNoVmFsdWUpIHtcclxuXHJcbiAgICAgICAgaWYgKFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIGZpZWxkVmFsdWUpIDwgMCB8fFxyXG4gICAgICAgICAgICBbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiBzZWFyY2hWYWx1ZSkgPCAwXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBmaWVsZFZhbHVlLnRvU3RyaW5nKCkudG9Mb3dlckNhc2UoKSA9PT0gc2VhcmNoVmFsdWUudG9TdHJpbmcoKS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCk0L7RgNC80LjRgNC+0LLQsNC90LjQtSDQutC+0L3RgtC10L3RgtCwXHJcbiAgICAgKiBAcmV0dXJucyB7alF1ZXJ5fVxyXG4gICAgICovXHJcbiAgICByZW5kZXIoKSB7XHJcblxyXG4gICAgICAgIGxldCB0aGF0ICAgICAgID0gdGhpcztcclxuICAgICAgICBsZXQgY2hlY2tlZEFsbCA9IHRydWU7XHJcbiAgICAgICAgbGV0IG9wdGlvbnMgICAgPSBbXTtcclxuXHJcbiAgICAgICAgJC5lYWNoKHRoaXMuX29wdGlvbnMub3B0aW9ucywgZnVuY3Rpb24gKGtleSwgb3B0aW9uKSB7XHJcblxyXG4gICAgICAgICAgICBpZiAoWydzdHJpbmcnLCAnbnVtZXJpYyddLmluZGV4T2YodHlwZW9mIG9wdGlvbikgPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgbGV0IGNoZWNrZWQgPSBrZXkgPT0gdGhhdC5fdmFsdWU7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGNoZWNrZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBjaGVja2VkQWxsID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgb3B0aW9ucy5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICB0ZXh0OiAgICBvcHRpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICAga2V5LFxyXG4gICAgICAgICAgICAgICAgICAgIGNoZWNrZWQ6IGNoZWNrZWQsXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoICEgY29yZXVpVGFibGVVdGlscy5pc09iamVjdChvcHRpb24pIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgISBvcHRpb24uaGFzT3duUHJvcGVydHkoJ3ZhbHVlJykgfHxcclxuICAgICAgICAgICAgICAgICAgICBbJ3N0cmluZycsICdudW1lcmljJ10uaW5kZXhPZih0eXBlb2Ygb3B0aW9uLnZhbHVlKSA9PT0gLTFcclxuICAgICAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgY2hlY2tlZCA9IG9wdGlvbi52YWx1ZSA9PSB0aGF0Ll92YWx1ZTtcclxuICAgICAgICAgICAgICAgIGxldCB0ZXh0ICAgID0gb3B0aW9uLmhhc093blByb3BlcnR5KCd0ZXh0JylcclxuICAgICAgICAgICAgICAgICAgICA/IG9wdGlvbi50ZXh0XHJcbiAgICAgICAgICAgICAgICAgICAgOiBvcHRpb24udmFsdWU7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGNoZWNrZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBjaGVja2VkQWxsID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgb3B0aW9ucy5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICB0ZXh0OiAgICB0ZXh0LFxyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiAgIG9wdGlvbi52YWx1ZSxcclxuICAgICAgICAgICAgICAgICAgICBjaGVja2VkOiBjaGVja2VkLFxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5fY29udHJvbCA9ICQoY29yZXVpVGFibGVVdGlscy5yZW5kZXIoY29yZXVpVGFibGVUcGxbJ3NlYXJjaC9yYWRpby5odG1sJ10sIHtcclxuICAgICAgICAgICAgb3B0aW9uczogb3B0aW9ucyxcclxuICAgICAgICAgICAgY2hlY2tlZEFsbDogY2hlY2tlZEFsbCxcclxuICAgICAgICAgICAgZmllbGQ6IGNvcmV1aVRhYmxlVXRpbHMuaGFzaENvZGUoKSxcclxuICAgICAgICAgICAgbGFuZzogdGhpcy5fdGFibGUuZ2V0TGFuZygpXHJcbiAgICAgICAgfSkpO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5fY29udHJvbDtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgU2VhcmNoUmFkaW87IiwiXHJcbmltcG9ydCBjb3JldWlUYWJsZVRwbCAgIGZyb20gXCIuLi9jb3JldWkudGFibGUudGVtcGxhdGVzXCI7XHJcbmltcG9ydCBjb3JldWlUYWJsZVV0aWxzIGZyb20gXCIuLi9jb3JldWkudGFibGUudXRpbHNcIjtcclxuaW1wb3J0IFNlYXJjaCAgICAgICAgICAgZnJvbSBcIi4uL2Fic3RyYWN0L1NlYXJjaFwiO1xyXG5cclxuY2xhc3MgU2VhcmNoUmFkaW9CdG4gZXh0ZW5kcyBTZWFyY2gge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y9cclxuICAgICAqIEBwYXJhbSB7Y29yZXVpVGFibGVJbnN0YW5jZX0gdGFibGVcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSAgICAgICAgICAgICAgb3B0aW9uc1xyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3Rvcih0YWJsZSwgb3B0aW9ucykge1xyXG5cclxuICAgICAgICBvcHRpb25zID0gJC5leHRlbmQodHJ1ZSwge1xyXG4gICAgICAgICAgICBpZDogbnVsbCxcclxuICAgICAgICAgICAgdHlwZTogJ3JhZGlvQnRuJyxcclxuICAgICAgICAgICAgZmllbGQ6IG51bGwsXHJcbiAgICAgICAgICAgIG9wdGlvbnNDbGFzczogJ2J0biBidG4tb3V0bGluZS1zZWNvbmRhcnknLFxyXG4gICAgICAgICAgICBsYWJlbDogbnVsbCxcclxuICAgICAgICAgICAgdmFsdWU6IG51bGwsXHJcbiAgICAgICAgICAgIG9wdGlvbnM6IFtdLFxyXG4gICAgICAgIH0sIG9wdGlvbnMpO1xyXG5cclxuICAgICAgICBzdXBlcih0YWJsZSwgb3B0aW9ucyk7XHJcblxyXG5cclxuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy52YWx1ZSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLnNldFZhbHVlKHRoaXMuX29wdGlvbnMudmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQo9GB0YLQsNC90L7QstC60LAg0LfQvdCw0YfQtdC90LjRj1xyXG4gICAgICogQHBhcmFtIHtzdHJpbmd8bnVtYmVyfSB2YWx1ZVxyXG4gICAgICovXHJcbiAgICBzZXRWYWx1ZSh2YWx1ZSkge1xyXG5cclxuICAgICAgICBpZiAodmFsdWUgIT09IG51bGwgJiZcclxuICAgICAgICAgICAgdHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJyAmJlxyXG4gICAgICAgICAgICB0eXBlb2YgdmFsdWUgIT09ICdudW1iZXInXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX3ZhbHVlID0gdmFsdWU7XHJcblxyXG5cclxuICAgICAgICBpZiAodGhpcy5fY29udHJvbCkge1xyXG4gICAgICAgICAgICAkKCdpbnB1dCcsIHRoaXMuX2NvbnRyb2wpLnByb3AoJ2NoZWNrZWQnLCBmYWxzZSk7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5fdmFsdWUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICQoJ2lucHV0W3ZhbHVlPVwiJyArIHRoaXMuX3ZhbHVlICsgJ1wiXScsIHRoaXMuX2NvbnRyb2wpLnByb3AoJ2NoZWNrZWQnLCB0cnVlKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICQoJ2lucHV0LmNvcmV1aS10YWJsZV9fYWxsJywgdGhpcy5fY29udHJvbCkucHJvcCgnY2hlY2tlZCcsIHRydWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSDQt9C90LDRh9C10L3QuNGPXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfG51bGx9XHJcbiAgICAgKi9cclxuICAgIGdldFZhbHVlKCkge1xyXG5cclxuICAgICAgICBpZiAodGhpcy5fY29udHJvbCkge1xyXG4gICAgICAgICAgICBsZXQgaW5wdXQgPSAkKCdpbnB1dDpjaGVja2VkJywgdGhpcy5fY29udHJvbCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoaW5wdXQgJiYgaW5wdXRbMF0pIHtcclxuICAgICAgICAgICAgICAgIGxldCB2YWx1ZSA9IGlucHV0LnZhbCgpO1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZSA9PT0gJydcclxuICAgICAgICAgICAgICAgICAgICA/IG51bGxcclxuICAgICAgICAgICAgICAgICAgICA6IHZhbHVlXHJcblxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQpNC40LvRjNGC0YDQsNGG0LjRjyDQtNCw0L3QvdGL0YVcclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9ICAgICAgICAgICAgICBmaWVsZFZhbHVlXHJcbiAgICAgKiBAcmV0dXJucyB7QXJyYXl8c3RyaW5nfG51bWJlcn0gc2VhcmNoVmFsdWVcclxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gICAgICovXHJcbiAgICBmaWx0ZXIoZmllbGRWYWx1ZSwgc2VhcmNoVmFsdWUpIHtcclxuXHJcbiAgICAgICAgaWYgKFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIGZpZWxkVmFsdWUpIDwgMCB8fFxyXG4gICAgICAgICAgICBbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiBzZWFyY2hWYWx1ZSkgPCAwXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBmaWVsZFZhbHVlLnRvU3RyaW5nKCkudG9Mb3dlckNhc2UoKSA9PT0gc2VhcmNoVmFsdWUudG9TdHJpbmcoKS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCk0L7RgNC80LjRgNC+0LLQsNC90LjQtSDQutC+0L3RgtC10L3RgtCwXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxyXG4gICAgICovXHJcbiAgICByZW5kZXIoKSB7XHJcblxyXG4gICAgICAgIGxldCB0aGF0ICAgICAgID0gdGhpcztcclxuICAgICAgICBsZXQgY2hlY2tlZEFsbCA9IHRydWU7XHJcbiAgICAgICAgbGV0IG9wdGlvbnMgICAgPSBbXTtcclxuXHJcbiAgICAgICAgJC5lYWNoKHRoaXMuX29wdGlvbnMub3B0aW9ucywgZnVuY3Rpb24gKGtleSwgb3B0aW9uKSB7XHJcblxyXG4gICAgICAgICAgICBpZiAoWydzdHJpbmcnLCAnbnVtZXJpYyddLmluZGV4T2YodHlwZW9mIG9wdGlvbikgPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgbGV0IGNoZWNrZWQgPSBrZXkgPT0gdGhhdC5fdmFsdWU7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGNoZWNrZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBjaGVja2VkQWxsID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgb3B0aW9ucy5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICB0ZXh0OiAgICBvcHRpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICAga2V5LFxyXG4gICAgICAgICAgICAgICAgICAgIGNoZWNrZWQ6IGNoZWNrZWQsXHJcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9uc0NsYXNzOiB0aGF0Ll9vcHRpb25zLm9wdGlvbnNDbGFzcyxcclxuICAgICAgICAgICAgICAgICAgICBoYXNoOiBjb3JldWlUYWJsZVV0aWxzLmhhc2hDb2RlKCksXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoICEgY29yZXVpVGFibGVVdGlscy5pc09iamVjdChvcHRpb24pIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgISBvcHRpb24uaGFzT3duUHJvcGVydHkoJ3ZhbHVlJykgfHxcclxuICAgICAgICAgICAgICAgICAgICBbJ3N0cmluZycsICdudW1lcmljJ10uaW5kZXhPZih0eXBlb2Ygb3B0aW9uLnZhbHVlKSA9PT0gLTFcclxuICAgICAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgY2hlY2tlZCA9IG9wdGlvbi52YWx1ZSA9PSB0aGF0Ll92YWx1ZTtcclxuICAgICAgICAgICAgICAgIGxldCB0ZXh0ICAgID0gb3B0aW9uLmhhc093blByb3BlcnR5KCd0ZXh0JylcclxuICAgICAgICAgICAgICAgICAgICA/IG9wdGlvbi50ZXh0XHJcbiAgICAgICAgICAgICAgICAgICAgOiBvcHRpb24udmFsdWU7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGNoZWNrZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBjaGVja2VkQWxsID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgb3B0aW9ucy5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICB0ZXh0OiAgICB0ZXh0LFxyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiAgIG9wdGlvbi52YWx1ZSxcclxuICAgICAgICAgICAgICAgICAgICBjaGVja2VkOiBjaGVja2VkLFxyXG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnNDbGFzczogdGhhdC5fb3B0aW9ucy5vcHRpb25zQ2xhc3MsXHJcbiAgICAgICAgICAgICAgICAgICAgaGFzaDogY29yZXVpVGFibGVVdGlscy5oYXNoQ29kZSgpLFxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5fY29udHJvbCA9ICQoY29yZXVpVGFibGVVdGlscy5yZW5kZXIoY29yZXVpVGFibGVUcGxbJ3NlYXJjaC9yYWRpby1idG4uaHRtbCddLCB7XHJcbiAgICAgICAgICAgIG9wdGlvbnM6IG9wdGlvbnMsXHJcbiAgICAgICAgICAgIGNoZWNrZWRBbGw6IGNoZWNrZWRBbGwsXHJcbiAgICAgICAgICAgIG9wdGlvbkFsbEhhc2g6IGNvcmV1aVRhYmxlVXRpbHMuaGFzaENvZGUoKSxcclxuICAgICAgICAgICAgb3B0aW9uT3B0aW9uc0NsYXNzOiB0aGF0Ll9vcHRpb25zLm9wdGlvbnNDbGFzcyxcclxuICAgICAgICAgICAgZmllbGQ6IGNvcmV1aVRhYmxlVXRpbHMuaGFzaENvZGUoKSxcclxuICAgICAgICAgICAgbGFuZzogdGhpcy5fdGFibGUuZ2V0TGFuZygpXHJcbiAgICAgICAgfSkpO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5fY29udHJvbDtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgU2VhcmNoUmFkaW9CdG47IiwiXHJcbmltcG9ydCBjb3JldWlUYWJsZVRwbCAgIGZyb20gXCIuLi9jb3JldWkudGFibGUudGVtcGxhdGVzXCI7XHJcbmltcG9ydCBjb3JldWlUYWJsZVV0aWxzIGZyb20gXCIuLi9jb3JldWkudGFibGUudXRpbHNcIjtcclxuaW1wb3J0IFNlYXJjaCAgICAgICAgICAgZnJvbSBcIi4uL2Fic3RyYWN0L1NlYXJjaFwiO1xyXG5cclxuY2xhc3MgU2VhcmNoU2VsZWN0IGV4dGVuZHMgU2VhcmNoIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPXHJcbiAgICAgKiBAcGFyYW0ge2NvcmV1aVRhYmxlSW5zdGFuY2V9IHRhYmxlXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gICAgICAgICAgICAgIG9wdGlvbnNcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IodGFibGUsIG9wdGlvbnMpIHtcclxuXHJcbiAgICAgICAgb3B0aW9ucyA9ICQuZXh0ZW5kKHRydWUsIHtcclxuICAgICAgICAgICAgaWQ6IG51bGwsXHJcbiAgICAgICAgICAgIHR5cGU6ICdzZWxlY3QnLFxyXG4gICAgICAgICAgICBmaWVsZDogbnVsbCxcclxuICAgICAgICAgICAgbGFiZWw6IG51bGwsXHJcbiAgICAgICAgICAgIHdpZHRoOiBudWxsLFxyXG4gICAgICAgICAgICB2YWx1ZTogbnVsbCxcclxuICAgICAgICAgICAgYXR0cjoge1xyXG4gICAgICAgICAgICAgICAgY2xhc3M6ICdmb3JtLXNlbGVjdCBkLWlubGluZS1ibG9jaydcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgb3B0aW9uczogW11cclxuICAgICAgICB9LCBvcHRpb25zKTtcclxuXHJcbiAgICAgICAgc3VwZXIodGFibGUsIG9wdGlvbnMpO1xyXG5cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMudmFsdWUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5zZXRWYWx1ZSh0aGlzLl9vcHRpb25zLnZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KPRgdGC0LDQvdC+0LLQutCwINC30L3QsNGH0LXQvdC40Y9cclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfG51bWJlcnxBcnJheX0gdmFsdWVcclxuICAgICAqL1xyXG4gICAgc2V0VmFsdWUodmFsdWUpIHtcclxuXHJcbiAgICAgICAgaWYgKFsnc3RyaW5nJywgJ251bWJlcicsICdvYmplY3QnXS5pbmRleE9mKHR5cGVvZiB2YWx1ZSkgPCAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xyXG4gICAgICAgICAgICAgICAgbGV0IGl0ZW1zID0gW107XHJcblxyXG4gICAgICAgICAgICAgICAgdmFsdWUubWFwKGZ1bmN0aW9uIChpdGVtKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycgJiYgdHlwZW9mIHZhbHVlICE9PSAnbnVtYmVyJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpdGVtcy5wdXNoKGl0ZW0pO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5fdmFsdWUgPSBpdGVtcztcclxuXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl92YWx1ZSA9IG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5fdmFsdWUgPSBbIHZhbHVlIF07XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX2NvbnRyb2wpIHtcclxuICAgICAgICAgICAgJCgnb3B0aW9uOnNlbGVjdGVkJywgdGhpcy5fY29udHJvbCkucHJvcCgnc2VsZWN0ZWQnLCBmYWxzZSk7XHJcblxyXG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh0aGlzLl92YWx1ZSkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3ZhbHVlLm1hcChmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAkKCdvcHRpb25bdmFsdWU9XCInICsgdmFsdWUgKyAnXCJdJywgdGhpcy5fY29udHJvbCkucHJvcCgnc2VsZWN0ZWQnLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSDQt9C90LDRh9C10L3QuNGPXHJcbiAgICAgKiBAcmV0dXJucyB7QXJyYXl8c3RyaW5nfG51bGx9XHJcbiAgICAgKi9cclxuICAgIGdldFZhbHVlKCkge1xyXG5cclxuICAgICAgICBpZiAodGhpcy5fY29udHJvbCkge1xyXG4gICAgICAgICAgICBsZXQgaXNNdWx0aXBsZSA9ICEhIHRoaXMuX2NvbnRyb2wuYXR0cignbXVsdGlwbGUnKTtcclxuICAgICAgICAgICAgbGV0IG9wdGlvbnMgICAgPSAkKCdvcHRpb246c2VsZWN0ZWQnLCB0aGlzLl9jb250cm9sKTtcclxuICAgICAgICAgICAgbGV0IGl0ZW1zICAgICAgPSBbXTtcclxuXHJcbiAgICAgICAgICAgICQuZWFjaChvcHRpb25zLCBmdW5jdGlvbiAoa2V5LCBvcHRpb24pIHtcclxuICAgICAgICAgICAgICAgIGxldCB2YWx1ZSA9ICQob3B0aW9uKS5hdHRyKCd2YWx1ZScpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiB2YWx1ZSkgPj0gMCAmJlxyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlICE9PSAnJ1xyXG4gICAgICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaXRlbXMucHVzaCh2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGl0ZW1zLmxlbmd0aCA+IDBcclxuICAgICAgICAgICAgICAgID8gKGlzTXVsdGlwbGUgPyBpdGVtcyA6IGl0ZW1zWzBdKVxyXG4gICAgICAgICAgICAgICAgOiBudWxsO1xyXG5cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fdmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCk0LjQu9GM0YLRgNCw0YbQuNGPINC00LDQvdC90YvRhVxyXG4gICAgICogQHJldHVybnMge3N0cmluZ30gICAgICAgICAgICAgIGZpZWxkVmFsdWVcclxuICAgICAqIEByZXR1cm5zIHtBcnJheXxzdHJpbmd8bnVtYmVyfSBzZWFyY2hWYWx1ZVxyXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAgICAgKi9cclxuICAgIGZpbHRlcihmaWVsZFZhbHVlLCBzZWFyY2hWYWx1ZSkge1xyXG5cclxuICAgICAgICBpZiAoWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2YgZmllbGRWYWx1ZSkgPCAwIHx8XHJcbiAgICAgICAgICAgIChbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiBzZWFyY2hWYWx1ZSkgPCAwICYmICEgQXJyYXkuaXNBcnJheShzZWFyY2hWYWx1ZSkpXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShzZWFyY2hWYWx1ZSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHNlYXJjaFZhbHVlLmluZGV4T2YoZmllbGRWYWx1ZSkgPj0gMDtcclxuXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZpZWxkVmFsdWUudG9TdHJpbmcoKS50b0xvd2VyQ2FzZSgpID09PSBzZWFyY2hWYWx1ZS50b1N0cmluZygpLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCk0L7RgNC80LjRgNC+0LLQsNC90LjQtSDQutC+0L3RgtC10L3RgtCwXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxyXG4gICAgICovXHJcbiAgICByZW5kZXIoKSB7XHJcblxyXG4gICAgICAgIGxldCB0aGF0ICAgICAgICAgID0gdGhpcztcclxuICAgICAgICBsZXQgb3B0aW9ucyAgICAgICA9IHRoaXMuZ2V0T3B0aW9ucygpO1xyXG4gICAgICAgIGxldCBzZWxlY3RPcHRpb25zID0gW107XHJcbiAgICAgICAgbGV0IGF0dHJpYnV0ZXMgICAgPSBbXTtcclxuXHJcbiAgICAgICAgaWYgKCAhIG9wdGlvbnMuaGFzT3duUHJvcGVydHkoJ2F0dHInKSB8fFxyXG4gICAgICAgICAgICAgISBjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KG9wdGlvbnMuYXR0cilcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgb3B0aW9ucy5hdHRyID0ge307XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAob3B0aW9ucy5maWVsZCkge1xyXG4gICAgICAgICAgICBvcHRpb25zLmF0dHIubmFtZSA9IHRoaXMuX29wdGlvbnMuZmllbGQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAob3B0aW9ucy53aWR0aCkge1xyXG4gICAgICAgICAgICBvcHRpb25zLmF0dHIgPSBjb3JldWlUYWJsZVV0aWxzLm1lcmdlQXR0cihcclxuICAgICAgICAgICAgICAgIHsgc3R5bGU6ICd3aWR0aDonICsgb3B0aW9ucy53aWR0aCArICdweCcgfSxcclxuICAgICAgICAgICAgICAgIG9wdGlvbnMuYXR0clxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKG9wdGlvbnMuaGFzT3duUHJvcGVydHkoJ29wdGlvbnMnKSAmJlxyXG4gICAgICAgICAgICB0eXBlb2Ygb3B0aW9ucy5vcHRpb25zID09PSAnb2JqZWN0JyAmJlxyXG4gICAgICAgICAgICBvcHRpb25zLm9wdGlvbnMgIT09IG51bGxcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgJC5lYWNoKG9wdGlvbnMub3B0aW9ucywgZnVuY3Rpb24gKGtleSwgb3B0aW9uKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBvcHRpb24gPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBvcHRpb24gPT09ICdudW1iZXInKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0T3B0aW9ucy5wdXNoKHRoYXQuX2J1aWxkT3B0aW9uKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ29wdGlvbicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBrZXksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IG9wdGlvblxyXG4gICAgICAgICAgICAgICAgICAgIH0pKTtcclxuXHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3Qob3B0aW9uKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCB0eXBlID0gb3B0aW9uLmhhc093blByb3BlcnR5KCd0eXBlJykgJiYgdHlwZW9mIG9wdGlvbi50eXBlID09PSAnc3RyaW5nJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICA/IG9wdGlvbi50eXBlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDogJ29wdGlvbic7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlID09PSAnZ3JvdXAnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCByZW5kZXJBdHRyICAgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGdyb3VwQXR0ciAgICA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgZ3JvdXBPcHRpb25zID0gW107XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob3B0aW9uLmhhc093blByb3BlcnR5KCdhdHRyJykgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3Qob3B0aW9uLmF0dHIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3JvdXBBdHRyID0gb3B0aW9uLmF0dHI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcHRpb24uaGFzT3duUHJvcGVydHkoJ2xhYmVsJykgJiYgWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2Yob3B0aW9uLmxhYmVsKSkgPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3JvdXBBdHRyLmxhYmVsID0gb3B0aW9uLmxhYmVsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkLmVhY2goZ3JvdXBBdHRyLCBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlckF0dHIucHVzaChuYW1lICsgJz1cIicgKyB2YWx1ZSArICdcIicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KG9wdGlvbi5vcHRpb25zKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJC5lYWNoKG9wdGlvbi5vcHRpb25zLCBmdW5jdGlvbiAoa2V5LCBncm91cE9wdGlvbikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdyb3VwT3B0aW9ucy5wdXNoKHRoYXQuX2J1aWxkT3B0aW9uKGdyb3VwT3B0aW9uKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0T3B0aW9ucy5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdncm91cCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyOiByZW5kZXJBdHRyLmxlbmd0aCA+IDAgPyAoJyAnICsgcmVuZGVyQXR0ci5qb2luKCcgJykpIDogJycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zOiBncm91cE9wdGlvbnMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RPcHRpb25zLnB1c2godGhhdC5fYnVpbGRPcHRpb24ob3B0aW9uKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICQuZWFjaChvcHRpb25zLmF0dHIsIGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xyXG4gICAgICAgICAgICBhdHRyaWJ1dGVzLnB1c2gobmFtZSArICc9XCInICsgdmFsdWUgKyAnXCInKTtcclxuICAgICAgICB9KTtcclxuXHJcblxyXG4gICAgICAgIHRoaXMuX2NvbnRyb2wgPSAkKGNvcmV1aVRhYmxlVXRpbHMucmVuZGVyKGNvcmV1aVRhYmxlVHBsWydzZWFyY2gvc2VsZWN0Lmh0bWwnXSwge1xyXG4gICAgICAgICAgICBmaWVsZDogb3B0aW9ucyxcclxuICAgICAgICAgICAgdmFsdWU6IHRoaXMuX3ZhbHVlLFxyXG4gICAgICAgICAgICBhdHRyOiBhdHRyaWJ1dGVzLmxlbmd0aCA+IDAgPyAoJyAnICsgYXR0cmlidXRlcy5qb2luKCcgJykpIDogJycsXHJcbiAgICAgICAgICAgIG9wdGlvbnM6IHNlbGVjdE9wdGlvbnNcclxuICAgICAgICB9KSk7XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLl9jb250cm9sO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCh0LHQvtGA0LrQsCDQvtC/0YbQuNC4XHJcbiAgICAgKiBAcGFyYW0gb3B0aW9uXHJcbiAgICAgKiBAcmV0dXJuIHtvYmplY3R9XHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBfYnVpbGRPcHRpb24ob3B0aW9uKSB7XHJcblxyXG4gICAgICAgIGxldCBvcHRpb25BdHRyID0gW107XHJcbiAgICAgICAgbGV0IG9wdGlvblRleHQgPSBvcHRpb24uaGFzT3duUHJvcGVydHkoJ3RleHQnKSAmJiBbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZihvcHRpb24udGV4dCkpID49IDBcclxuICAgICAgICAgICAgPyBvcHRpb24udGV4dFxyXG4gICAgICAgICAgICA6ICcnO1xyXG5cclxuICAgICAgICAkLmVhY2gob3B0aW9uLCBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcclxuICAgICAgICAgICAgaWYgKG5hbWUgIT09ICd0ZXh0Jykge1xyXG4gICAgICAgICAgICAgICAgb3B0aW9uQXR0ci5wdXNoKG5hbWUgKyAnPVwiJyArIHZhbHVlICsgJ1wiJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcblxyXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHRoaXMuX3ZhbHVlKSkge1xyXG4gICAgICAgICAgICAkLmVhY2godGhpcy5fdmFsdWUsIGZ1bmN0aW9uIChrZXksIGl0ZW1WYWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGl0ZW1WYWx1ZSA9PSBvcHRpb24udmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICBvcHRpb25BdHRyLnB1c2goJ3NlbGVjdGVkPVwic2VsZWN0ZWRcIicpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fdmFsdWUgPT0gb3B0aW9uLnZhbHVlKSB7XHJcbiAgICAgICAgICAgIG9wdGlvbkF0dHIucHVzaCgnc2VsZWN0ZWQ9XCJzZWxlY3RlZFwiJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICB0eXBlOiAnb3B0aW9uJyxcclxuICAgICAgICAgICAgdGV4dDogb3B0aW9uVGV4dCxcclxuICAgICAgICAgICAgYXR0cjogb3B0aW9uQXR0ci5sZW5ndGggPiAwID8gKCcgJyArIG9wdGlvbkF0dHIuam9pbignICcpKSA6ICcnXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgU2VhcmNoU2VsZWN0OyIsIlxyXG5pbXBvcnQgY29yZXVpVGFibGVUcGwgICBmcm9tIFwiLi4vY29yZXVpLnRhYmxlLnRlbXBsYXRlc1wiO1xyXG5pbXBvcnQgY29yZXVpVGFibGVVdGlscyBmcm9tIFwiLi4vY29yZXVpLnRhYmxlLnV0aWxzXCI7XHJcbmltcG9ydCBTZWFyY2ggICAgICAgICAgIGZyb20gXCIuLi9hYnN0cmFjdC9TZWFyY2hcIjtcclxuXHJcbmNsYXNzIFNlYXJjaFN3aXRjaCBleHRlbmRzIFNlYXJjaCB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQmNC90LjRhtC40LDQu9C40LfQsNGG0LjRj1xyXG4gICAgICogQHBhcmFtIHtjb3JldWlUYWJsZUluc3RhbmNlfSB0YWJsZVxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9ICAgICAgICAgICAgICBvcHRpb25zXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKHRhYmxlLCBvcHRpb25zKSB7XHJcblxyXG4gICAgICAgIG9wdGlvbnMgPSAkLmV4dGVuZCh0cnVlLCB7XHJcbiAgICAgICAgICAgIGlkOiBudWxsLFxyXG4gICAgICAgICAgICB0eXBlOiAnc3dpdGNoJyxcclxuICAgICAgICAgICAgZmllbGQ6IG51bGwsXHJcbiAgICAgICAgICAgIHZhbHVlOiBudWxsLFxyXG4gICAgICAgICAgICB2YWx1ZVk6IDFcclxuICAgICAgICB9LCBvcHRpb25zKTtcclxuXHJcbiAgICAgICAgc3VwZXIodGFibGUsIG9wdGlvbnMpO1xyXG5cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMudmFsdWUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5zZXRWYWx1ZSh0aGlzLl9vcHRpb25zLnZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KPRgdGC0LDQvdC+0LLQutCwINC30L3QsNGH0LXQvdC40Y9cclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfG51bWJlcnxudWxsfSB2YWx1ZVxyXG4gICAgICovXHJcbiAgICBzZXRWYWx1ZSh2YWx1ZSkge1xyXG5cclxuICAgICAgICBpZiAodmFsdWUgIT09IG51bGwgJiZcclxuICAgICAgICAgICAgdHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJyAmJlxyXG4gICAgICAgICAgICB0eXBlb2YgdmFsdWUgIT09ICdudW1iZXInXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX3ZhbHVlID0gdmFsdWVcclxuXHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9jb250cm9sKSB7XHJcbiAgICAgICAgICAgIGxldCB2YWx1ZVkgPSB0eXBlb2YgdGhpcy5fb3B0aW9ucy52YWx1ZVkgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiB0aGlzLl9vcHRpb25zLnZhbHVlWSA9PT0gJ251bWJlcidcclxuICAgICAgICAgICAgICAgID8gdGhpcy5fb3B0aW9ucy52YWx1ZVlcclxuICAgICAgICAgICAgICAgIDogJydcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLl92YWx1ZSA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgJCgnaW5wdXQnLCB0aGlzLl9jb250cm9sKS5wcm9wKCdjaGVja2VkJywgZmFsc2UpO1xyXG5cclxuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLl92YWx1ZSA9PT0gdmFsdWVZKSB7XHJcbiAgICAgICAgICAgICAgICAkKCdpbnB1dCcsIHRoaXMuX2NvbnRyb2wpLnByb3AoJ2NoZWNrZWQnLCB0cnVlKTtcclxuXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAkKCdpbnB1dCcsIHRoaXMuX2NvbnRyb2wpLnByb3AoJ2NoZWNrZWQnLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC30L3QsNGH0LXQvdC40Y9cclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd8bnVsbH1cclxuICAgICAqL1xyXG4gICAgZ2V0VmFsdWUoKSB7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9jb250cm9sKSB7XHJcbiAgICAgICAgICAgIGxldCB2YWx1ZSA9ICQoJ2lucHV0OmNoZWNrZWQnLCB0aGlzLl9jb250cm9sKS52YWwoKTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYgdmFsdWUgIT09ICcnKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLl92YWx1ZTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQpNC40LvRjNGC0YDQsNGG0LjRjyDQtNCw0L3QvdGL0YVcclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9ICAgICAgICAgICAgICBmaWVsZFZhbHVlXHJcbiAgICAgKiBAcmV0dXJucyB7QXJyYXl8c3RyaW5nfG51bWJlcn0gc2VhcmNoVmFsdWVcclxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gICAgICovXHJcbiAgICBmaWx0ZXIoZmllbGRWYWx1ZSwgc2VhcmNoVmFsdWUpIHtcclxuXHJcbiAgICAgICAgaWYgKFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIGZpZWxkVmFsdWUpIDwgMCB8fFxyXG4gICAgICAgICAgICBbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiBzZWFyY2hWYWx1ZSkgPCAwXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBmaWVsZFZhbHVlLnRvU3RyaW5nKCkudG9Mb3dlckNhc2UoKSA9PT0gc2VhcmNoVmFsdWUudG9TdHJpbmcoKS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCk0L7RgNC80LjRgNC+0LLQsNC90LjQtSDQutC+0L3RgtC10L3RgtCwXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxyXG4gICAgICovXHJcbiAgICByZW5kZXIoKSB7XHJcblxyXG4gICAgICAgIGxldCBvcHRpb25zID0gdGhpcy5nZXRPcHRpb25zKCk7XHJcbiAgICAgICAgbGV0IHZhbHVlWSAgPSB0eXBlb2Ygb3B0aW9ucy52YWx1ZVkgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBvcHRpb25zLnZhbHVlWSA9PT0gJ251bWJlcidcclxuICAgICAgICAgICAgPyBvcHRpb25zLnZhbHVlWVxyXG4gICAgICAgICAgICA6ICcnXHJcblxyXG4gICAgICAgIHRoaXMuX2NvbnRyb2wgPSAkKGNvcmV1aVRhYmxlVXRpbHMucmVuZGVyKGNvcmV1aVRhYmxlVHBsWydzZWFyY2gvc3dpdGNoLmh0bWwnXSwge1xyXG4gICAgICAgICAgICBpZDogdGhpcy5faWQsXHJcbiAgICAgICAgICAgIHZhbHVlWTogdmFsdWVZLFxyXG4gICAgICAgICAgICBmaWVsZDogdHlwZW9mIG9wdGlvbnMuZmllbGQgPT09ICdzdHJpbmcnID8gb3B0aW9ucy5maWVsZCA6ICcnLFxyXG4gICAgICAgICAgICBjaGVja2VkOiB0aGlzLl92YWx1ZSA9PSB2YWx1ZVksXHJcbiAgICAgICAgfSkpO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5fY29udHJvbDtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgU2VhcmNoU3dpdGNoOyIsIlxyXG5cclxuY2xhc3MgQ29sdW1uIHtcclxuXHJcbiAgICBfdGFibGUgICA9IG51bGw7XHJcbiAgICBfb3B0aW9ucyA9IHtcclxuICAgICAgICB0eXBlOiAnJyxcclxuICAgICAgICBmaWVsZDogbnVsbCxcclxuICAgICAgICBsYWJlbDogbnVsbCxcclxuICAgICAgICBzaG93OiB0cnVlLFxyXG4gICAgICAgIHNob3dMYWJlbDogdHJ1ZSxcclxuICAgICAgICB3aWR0aDogbnVsbCxcclxuICAgICAgICBtaW5XaWR0aDogbnVsbCxcclxuICAgICAgICBtYXhXaWR0aDogbnVsbCxcclxuICAgICAgICBhdHRyOiBudWxsLFxyXG4gICAgICAgIGF0dHJIZWFkZXI6IG51bGwsXHJcbiAgICAgICAgcmVuZGVyOiBudWxsXHJcbiAgICB9O1xyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPXHJcbiAgICAgKiBAcGFyYW0ge2NvcmV1aVRhYmxlSW5zdGFuY2V9IHRhYmxlXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gICAgICAgICAgICAgIG9wdGlvbnNcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IodGFibGUsIG9wdGlvbnMpIHtcclxuXHJcbiAgICAgICAgdGhpcy5fdGFibGUgICA9IHRhYmxlO1xyXG4gICAgICAgIHRoaXMuX29wdGlvbnMgPSAkLmV4dGVuZCh0cnVlLCB0aGlzLl9vcHRpb25zLCBvcHRpb25zKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQo9GB0YLQsNC90L7QstC60LAg0LLQuNC00LjQvNC+0YHRgtC4INC60L7Qu9C+0L3QutC4XHJcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGlzU2hvd1xyXG4gICAgICovXHJcbiAgICBzZXRTaG93KGlzU2hvdykge1xyXG4gICAgICAgIHRoaXMuX29wdGlvbnMuc2hvdyA9ICEhIGlzU2hvdztcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQktC40LTQuNC80L7RgdGC0Lgg0LrQvtC70L7QvdC60LhcclxuICAgICAqL1xyXG4gICAgaXNTaG93KCkge1xyXG4gICAgICAgIHJldHVybiAhISB0aGlzLl9vcHRpb25zLnNob3c7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC/0LDRgNCw0LzQtdGC0YDQvtCyXHJcbiAgICAgKiBAcmV0dXJucyB7b2JqZWN0fVxyXG4gICAgICovXHJcbiAgICBnZXRPcHRpb25zKCkge1xyXG4gICAgICAgIHJldHVybiAkLmV4dGVuZCh7fSwgdGhpcy5fb3B0aW9ucyk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC40LzQtdC90Lgg0L/QvtC70Y9cclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd8bnVsbH1cclxuICAgICAqL1xyXG4gICAgZ2V0RmllbGQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHR5cGVvZiB0aGlzLl9vcHRpb25zLmZpZWxkID09PSAnc3RyaW5nJyA/IHRoaXMuX29wdGlvbnMuZmllbGQgOiBudWxsO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCk0L7RgNC80LjRgNC+0LLQsNC90LjQtSDQutC+0L3RgtC10L3RgtCwXHJcbiAgICAgKiBAcGFyYW0geyp9ICAgICAgY29udGVudFxyXG4gICAgICogQHBhcmFtIHtvYmplY3R9IHJlY29yZFxyXG4gICAgICogQHJldHVybnMge3N0cmluZ31cclxuICAgICAqL1xyXG4gICAgcmVuZGVyKGNvbnRlbnQsIHJlY29yZCkge31cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgQ29sdW1uOyIsIlxyXG5pbXBvcnQgQ29sdW1uICAgICAgICAgICBmcm9tIFwiLi4vYWJzdHJhY3QvQ29sdW1uXCI7XHJcbmltcG9ydCBjb3JldWlUYWJsZVV0aWxzIGZyb20gXCIuLi9jb3JldWkudGFibGUudXRpbHNcIjtcclxuXHJcblxyXG5jbGFzcyBDb2x1bW5zRGF0ZSBleHRlbmRzIENvbHVtbiB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQmNC90LjRhtC40LDQu9C40LfQsNGG0LjRj1xyXG4gICAgICogQHBhcmFtIHtjb3JldWlUYWJsZUluc3RhbmNlfSB0YWJsZVxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9ICAgICAgICAgICAgICBvcHRpb25zXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKHRhYmxlLCBvcHRpb25zKSB7XHJcblxyXG4gICAgICAgIG9wdGlvbnMgPSAkLmV4dGVuZCh0cnVlLCB7XHJcbiAgICAgICAgICAgIHR5cGU6ICdkYXRlJyxcclxuICAgICAgICAgICAgZmllbGQ6IG51bGwsXHJcbiAgICAgICAgICAgIGxhYmVsOiBudWxsLFxyXG4gICAgICAgICAgICBzaG93OiB0cnVlLFxyXG4gICAgICAgICAgICB3aWR0aDogbnVsbCxcclxuICAgICAgICAgICAgZm9ybWF0OiAnREQuTU0uWVlZWScsXHJcbiAgICAgICAgICAgIGF0dHI6IHt9LFxyXG4gICAgICAgICAgICBhdHRySGVhZGVyOiB7fSxcclxuICAgICAgICAgICAgcmVuZGVyOiBudWxsXHJcbiAgICAgICAgfSwgb3B0aW9ucyk7XHJcblxyXG4gICAgICAgIHN1cGVyKHRhYmxlLCBvcHRpb25zKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQpNC+0YDQvNC40YDQvtCy0LDQvdC40LUg0LrQvtC90YLQtdC90YLQsFxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGNvbnRlbnRcclxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSByZWNvcmRcclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIHJlbmRlcihjb250ZW50LCByZWNvcmQpIHtcclxuXHJcbiAgICAgICAgaWYgKHR5cGVvZiBjb250ZW50ICE9PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICByZXR1cm4gJyc7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKGNvbnRlbnQgIT09ICcnKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgbGFuZyA9IHRoaXMuX3RhYmxlLmdldExhbmcoKVxyXG4gICAgICAgICAgICAgICAgbGV0IGRhdGUgPSBuZXcgRGF0ZShjb250ZW50KTtcclxuXHJcbiAgICAgICAgICAgICAgICBjb250ZW50ID0gdGhpcy5fb3B0aW9ucy5mb3JtYXRcclxuICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvWVlZWS9nLCBjb3JldWlUYWJsZVV0aWxzLnN0clBhZExlZnQoZGF0ZS5nZXRGdWxsWWVhcigpLCA0KSlcclxuICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvTU1NTS9nLCBsYW5nLm1vbnRoTmFtZXNbZGF0ZS5nZXRNb250aCgpICsgMV0pXHJcbiAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL01NTS9nLCBsYW5nLm1vbnRoTmFtZXNTaG9ydFtkYXRlLmdldE1vbnRoKCkgKyAxXSlcclxuICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvTU0vZywgY29yZXVpVGFibGVVdGlscy5zdHJQYWRMZWZ0KGRhdGUuZ2V0TW9udGgoKSArIDEsIDIpKVxyXG4gICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9NL2csIGRhdGUuZ2V0TW9udGgoKSArIDEpXHJcbiAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL0REL2csIGNvcmV1aVRhYmxlVXRpbHMuc3RyUGFkTGVmdChkYXRlLmdldERhdGUoKSwgMikpXHJcbiAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL0QvZywgZGF0ZS5nZXREYXRlKCkpXHJcbiAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL2RkZGQvZywgbGFuZy5kYXlOYW1lc1tkYXRlLmdldE1vbnRoKCkgKyAxXSlcclxuICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvZGRkL2csIGxhbmcuZGF5TmFtZXNNaW5bZGF0ZS5nZXRNb250aCgpICsgMV0pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgY29udGVudCA9ICcnO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIHJldHVybiBjb250ZW50O1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgQ29sdW1uc0RhdGU7IiwiXHJcbmltcG9ydCBDb2x1bW4gICAgICAgICAgIGZyb20gXCIuLi9hYnN0cmFjdC9Db2x1bW5cIjtcclxuaW1wb3J0IGNvcmV1aVRhYmxlVXRpbHMgZnJvbSBcIi4uL2NvcmV1aS50YWJsZS51dGlsc1wiO1xyXG5cclxuXHJcbmNsYXNzIENvbHVtbnNEYXRldGltZSBleHRlbmRzIENvbHVtbiB7XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y9cclxuICAgICAqIEBwYXJhbSB7Y29yZXVpVGFibGVJbnN0YW5jZX0gdGFibGVcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSAgICAgICAgICAgICAgb3B0aW9uc1xyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3Rvcih0YWJsZSwgb3B0aW9ucykge1xyXG5cclxuICAgICAgICBvcHRpb25zID0gJC5leHRlbmQodHJ1ZSwgeyB0eXBlOiAnZGF0ZXRpbWUnLFxyXG4gICAgICAgICAgICBmaWVsZDogbnVsbCxcclxuICAgICAgICAgICAgbGFiZWw6IG51bGwsXHJcbiAgICAgICAgICAgIHNob3c6IHRydWUsXHJcbiAgICAgICAgICAgIHdpZHRoOiBudWxsLFxyXG4gICAgICAgICAgICBmb3JtYXQ6ICdERC5NTS5ZWVlZIGhoOm1tOnNzJyxcclxuICAgICAgICAgICAgYXR0cjoge30sXHJcbiAgICAgICAgICAgIGF0dHJIZWFkZXI6IHt9LFxyXG4gICAgICAgICAgICByZW5kZXI6IG51bGxcclxuICAgICAgICB9LCBvcHRpb25zKTtcclxuXHJcbiAgICAgICAgc3VwZXIodGFibGUsIG9wdGlvbnMpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCk0L7RgNC80LjRgNC+0LLQsNC90LjQtSDQutC+0L3RgtC10L3RgtCwXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gY29udGVudFxyXG4gICAgICogQHBhcmFtIHtvYmplY3R9IHJlY29yZFxyXG4gICAgICogQHJldHVybnMge3N0cmluZ31cclxuICAgICAqL1xyXG4gICAgcmVuZGVyKGNvbnRlbnQsIHJlY29yZCkge1xyXG5cclxuICAgICAgICBpZiAodHlwZW9mIGNvbnRlbnQgIT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAnJztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChjb250ZW50ICE9PSAnJykge1xyXG4gICAgICAgICAgICAgICAgbGV0IGxhbmcgPSB0aGlzLl90YWJsZS5nZXRMYW5nKClcclxuICAgICAgICAgICAgICAgIGxldCBkYXRlID0gbmV3IERhdGUoY29udGVudCk7XHJcblxyXG4gICAgICAgICAgICAgICAgY29udGVudCA9IHRoaXMuX29wdGlvbnMuZm9ybWF0XHJcbiAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL1lZWVkvZywgY29yZXVpVGFibGVVdGlscy5zdHJQYWRMZWZ0KGRhdGUuZ2V0RnVsbFllYXIoKSwgNCkpXHJcbiAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL01NTU0vZywgbGFuZy5tb250aE5hbWVzW2RhdGUuZ2V0TW9udGgoKSArIDFdKVxyXG4gICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9NTU0vZywgbGFuZy5tb250aE5hbWVzU2hvcnRbZGF0ZS5nZXRNb250aCgpICsgMV0pXHJcbiAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL01NL2csIGNvcmV1aVRhYmxlVXRpbHMuc3RyUGFkTGVmdChkYXRlLmdldE1vbnRoKCkgKyAxLCAyKSlcclxuICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvTS9nLCBkYXRlLmdldE1vbnRoKCkgKyAxKVxyXG4gICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9ERC9nLCBjb3JldWlUYWJsZVV0aWxzLnN0clBhZExlZnQoZGF0ZS5nZXREYXRlKCksIDIpKVxyXG4gICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9EL2csIGRhdGUuZ2V0RGF0ZSgpKVxyXG4gICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9kZGRkL2csIGxhbmcuZGF5TmFtZXNbZGF0ZS5nZXRNb250aCgpICsgMV0pXHJcbiAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL2RkZC9nLCBsYW5nLmRheU5hbWVzTWluW2RhdGUuZ2V0TW9udGgoKSArIDFdKVxyXG4gICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9oaC9nLCBjb3JldWlUYWJsZVV0aWxzLnN0clBhZExlZnQoZGF0ZS5nZXRIb3VycygpLCAyKSlcclxuICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvbW0vZywgY29yZXVpVGFibGVVdGlscy5zdHJQYWRMZWZ0KGRhdGUuZ2V0TWludXRlcygpLCAyKSlcclxuICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvbS9nLCBkYXRlLmdldE1pbnV0ZXMoKSlcclxuICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvc3MvZywgY29yZXVpVGFibGVVdGlscy5zdHJQYWRMZWZ0KGRhdGUuZ2V0U2Vjb25kcygpLCAyKSlcclxuICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvcy9nLCBkYXRlLmdldFNlY29uZHMoKSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICBjb250ZW50ID0gJyc7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gY29udGVudDtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgQ29sdW1uc0RhdGV0aW1lOyIsIi8vISBtb21lbnQuanNcbi8vISB2ZXJzaW9uIDogMi4zMC4xXG4vLyEgYXV0aG9ycyA6IFRpbSBXb29kLCBJc2tyZW4gQ2hlcm5ldiwgTW9tZW50LmpzIGNvbnRyaWJ1dG9yc1xuLy8hIGxpY2Vuc2UgOiBNSVRcbi8vISBtb21lbnRqcy5jb21cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCkgOlxuICAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShmYWN0b3J5KSA6XG4gICAgZ2xvYmFsLm1vbWVudCA9IGZhY3RvcnkoKVxufSh0aGlzLCAoZnVuY3Rpb24gKCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICB2YXIgaG9va0NhbGxiYWNrO1xuXG4gICAgZnVuY3Rpb24gaG9va3MoKSB7XG4gICAgICAgIHJldHVybiBob29rQ2FsbGJhY2suYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICB9XG5cbiAgICAvLyBUaGlzIGlzIGRvbmUgdG8gcmVnaXN0ZXIgdGhlIG1ldGhvZCBjYWxsZWQgd2l0aCBtb21lbnQoKVxuICAgIC8vIHdpdGhvdXQgY3JlYXRpbmcgY2lyY3VsYXIgZGVwZW5kZW5jaWVzLlxuICAgIGZ1bmN0aW9uIHNldEhvb2tDYWxsYmFjayhjYWxsYmFjaykge1xuICAgICAgICBob29rQ2FsbGJhY2sgPSBjYWxsYmFjaztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0FycmF5KGlucHV0KSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICBpbnB1dCBpbnN0YW5jZW9mIEFycmF5IHx8XG4gICAgICAgICAgICBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaW5wdXQpID09PSAnW29iamVjdCBBcnJheV0nXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNPYmplY3QoaW5wdXQpIHtcbiAgICAgICAgLy8gSUU4IHdpbGwgdHJlYXQgdW5kZWZpbmVkIGFuZCBudWxsIGFzIG9iamVjdCBpZiBpdCB3YXNuJ3QgZm9yXG4gICAgICAgIC8vIGlucHV0ICE9IG51bGxcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIGlucHV0ICE9IG51bGwgJiZcbiAgICAgICAgICAgIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpbnB1dCkgPT09ICdbb2JqZWN0IE9iamVjdF0nXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaGFzT3duUHJvcChhLCBiKSB7XG4gICAgICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYSwgYik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNPYmplY3RFbXB0eShvYmopIHtcbiAgICAgICAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKSB7XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMob2JqKS5sZW5ndGggPT09IDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgaztcbiAgICAgICAgICAgIGZvciAoayBpbiBvYmopIHtcbiAgICAgICAgICAgICAgICBpZiAoaGFzT3duUHJvcChvYmosIGspKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzVW5kZWZpbmVkKGlucHV0KSB7XG4gICAgICAgIHJldHVybiBpbnB1dCA9PT0gdm9pZCAwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzTnVtYmVyKGlucHV0KSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICB0eXBlb2YgaW5wdXQgPT09ICdudW1iZXInIHx8XG4gICAgICAgICAgICBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaW5wdXQpID09PSAnW29iamVjdCBOdW1iZXJdJ1xuICAgICAgICApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzRGF0ZShpbnB1dCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgaW5wdXQgaW5zdGFuY2VvZiBEYXRlIHx8XG4gICAgICAgICAgICBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaW5wdXQpID09PSAnW29iamVjdCBEYXRlXSdcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtYXAoYXJyLCBmbikge1xuICAgICAgICB2YXIgcmVzID0gW10sXG4gICAgICAgICAgICBpLFxuICAgICAgICAgICAgYXJyTGVuID0gYXJyLmxlbmd0aDtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGFyckxlbjsgKytpKSB7XG4gICAgICAgICAgICByZXMucHVzaChmbihhcnJbaV0sIGkpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGV4dGVuZChhLCBiKSB7XG4gICAgICAgIGZvciAodmFyIGkgaW4gYikge1xuICAgICAgICAgICAgaWYgKGhhc093blByb3AoYiwgaSkpIHtcbiAgICAgICAgICAgICAgICBhW2ldID0gYltpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChoYXNPd25Qcm9wKGIsICd0b1N0cmluZycpKSB7XG4gICAgICAgICAgICBhLnRvU3RyaW5nID0gYi50b1N0cmluZztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChoYXNPd25Qcm9wKGIsICd2YWx1ZU9mJykpIHtcbiAgICAgICAgICAgIGEudmFsdWVPZiA9IGIudmFsdWVPZjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBhO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZVVUQyhpbnB1dCwgZm9ybWF0LCBsb2NhbGUsIHN0cmljdCkge1xuICAgICAgICByZXR1cm4gY3JlYXRlTG9jYWxPclVUQyhpbnB1dCwgZm9ybWF0LCBsb2NhbGUsIHN0cmljdCwgdHJ1ZSkudXRjKCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGVmYXVsdFBhcnNpbmdGbGFncygpIHtcbiAgICAgICAgLy8gV2UgbmVlZCB0byBkZWVwIGNsb25lIHRoaXMgb2JqZWN0LlxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZW1wdHk6IGZhbHNlLFxuICAgICAgICAgICAgdW51c2VkVG9rZW5zOiBbXSxcbiAgICAgICAgICAgIHVudXNlZElucHV0OiBbXSxcbiAgICAgICAgICAgIG92ZXJmbG93OiAtMixcbiAgICAgICAgICAgIGNoYXJzTGVmdE92ZXI6IDAsXG4gICAgICAgICAgICBudWxsSW5wdXQ6IGZhbHNlLFxuICAgICAgICAgICAgaW52YWxpZEVyYTogbnVsbCxcbiAgICAgICAgICAgIGludmFsaWRNb250aDogbnVsbCxcbiAgICAgICAgICAgIGludmFsaWRGb3JtYXQ6IGZhbHNlLFxuICAgICAgICAgICAgdXNlckludmFsaWRhdGVkOiBmYWxzZSxcbiAgICAgICAgICAgIGlzbzogZmFsc2UsXG4gICAgICAgICAgICBwYXJzZWREYXRlUGFydHM6IFtdLFxuICAgICAgICAgICAgZXJhOiBudWxsLFxuICAgICAgICAgICAgbWVyaWRpZW06IG51bGwsXG4gICAgICAgICAgICByZmMyODIyOiBmYWxzZSxcbiAgICAgICAgICAgIHdlZWtkYXlNaXNtYXRjaDogZmFsc2UsXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0UGFyc2luZ0ZsYWdzKG0pIHtcbiAgICAgICAgaWYgKG0uX3BmID09IG51bGwpIHtcbiAgICAgICAgICAgIG0uX3BmID0gZGVmYXVsdFBhcnNpbmdGbGFncygpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtLl9wZjtcbiAgICB9XG5cbiAgICB2YXIgc29tZTtcbiAgICBpZiAoQXJyYXkucHJvdG90eXBlLnNvbWUpIHtcbiAgICAgICAgc29tZSA9IEFycmF5LnByb3RvdHlwZS5zb21lO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHNvbWUgPSBmdW5jdGlvbiAoZnVuKSB7XG4gICAgICAgICAgICB2YXIgdCA9IE9iamVjdCh0aGlzKSxcbiAgICAgICAgICAgICAgICBsZW4gPSB0Lmxlbmd0aCA+Pj4gMCxcbiAgICAgICAgICAgICAgICBpO1xuXG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoaSBpbiB0ICYmIGZ1bi5jYWxsKHRoaXMsIHRbaV0sIGksIHQpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzVmFsaWQobSkge1xuICAgICAgICB2YXIgZmxhZ3MgPSBudWxsLFxuICAgICAgICAgICAgcGFyc2VkUGFydHMgPSBmYWxzZSxcbiAgICAgICAgICAgIGlzTm93VmFsaWQgPSBtLl9kICYmICFpc05hTihtLl9kLmdldFRpbWUoKSk7XG4gICAgICAgIGlmIChpc05vd1ZhbGlkKSB7XG4gICAgICAgICAgICBmbGFncyA9IGdldFBhcnNpbmdGbGFncyhtKTtcbiAgICAgICAgICAgIHBhcnNlZFBhcnRzID0gc29tZS5jYWxsKGZsYWdzLnBhcnNlZERhdGVQYXJ0cywgZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaSAhPSBudWxsO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpc05vd1ZhbGlkID1cbiAgICAgICAgICAgICAgICBmbGFncy5vdmVyZmxvdyA8IDAgJiZcbiAgICAgICAgICAgICAgICAhZmxhZ3MuZW1wdHkgJiZcbiAgICAgICAgICAgICAgICAhZmxhZ3MuaW52YWxpZEVyYSAmJlxuICAgICAgICAgICAgICAgICFmbGFncy5pbnZhbGlkTW9udGggJiZcbiAgICAgICAgICAgICAgICAhZmxhZ3MuaW52YWxpZFdlZWtkYXkgJiZcbiAgICAgICAgICAgICAgICAhZmxhZ3Mud2Vla2RheU1pc21hdGNoICYmXG4gICAgICAgICAgICAgICAgIWZsYWdzLm51bGxJbnB1dCAmJlxuICAgICAgICAgICAgICAgICFmbGFncy5pbnZhbGlkRm9ybWF0ICYmXG4gICAgICAgICAgICAgICAgIWZsYWdzLnVzZXJJbnZhbGlkYXRlZCAmJlxuICAgICAgICAgICAgICAgICghZmxhZ3MubWVyaWRpZW0gfHwgKGZsYWdzLm1lcmlkaWVtICYmIHBhcnNlZFBhcnRzKSk7XG4gICAgICAgICAgICBpZiAobS5fc3RyaWN0KSB7XG4gICAgICAgICAgICAgICAgaXNOb3dWYWxpZCA9XG4gICAgICAgICAgICAgICAgICAgIGlzTm93VmFsaWQgJiZcbiAgICAgICAgICAgICAgICAgICAgZmxhZ3MuY2hhcnNMZWZ0T3ZlciA9PT0gMCAmJlxuICAgICAgICAgICAgICAgICAgICBmbGFncy51bnVzZWRUb2tlbnMubGVuZ3RoID09PSAwICYmXG4gICAgICAgICAgICAgICAgICAgIGZsYWdzLmJpZ0hvdXIgPT09IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoT2JqZWN0LmlzRnJvemVuID09IG51bGwgfHwgIU9iamVjdC5pc0Zyb3plbihtKSkge1xuICAgICAgICAgICAgbS5faXNWYWxpZCA9IGlzTm93VmFsaWQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gaXNOb3dWYWxpZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbS5faXNWYWxpZDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVJbnZhbGlkKGZsYWdzKSB7XG4gICAgICAgIHZhciBtID0gY3JlYXRlVVRDKE5hTik7XG4gICAgICAgIGlmIChmbGFncyAhPSBudWxsKSB7XG4gICAgICAgICAgICBleHRlbmQoZ2V0UGFyc2luZ0ZsYWdzKG0pLCBmbGFncyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MobSkudXNlckludmFsaWRhdGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBtO1xuICAgIH1cblxuICAgIC8vIFBsdWdpbnMgdGhhdCBhZGQgcHJvcGVydGllcyBzaG91bGQgYWxzbyBhZGQgdGhlIGtleSBoZXJlIChudWxsIHZhbHVlKSxcbiAgICAvLyBzbyB3ZSBjYW4gcHJvcGVybHkgY2xvbmUgb3Vyc2VsdmVzLlxuICAgIHZhciBtb21lbnRQcm9wZXJ0aWVzID0gKGhvb2tzLm1vbWVudFByb3BlcnRpZXMgPSBbXSksXG4gICAgICAgIHVwZGF0ZUluUHJvZ3Jlc3MgPSBmYWxzZTtcblxuICAgIGZ1bmN0aW9uIGNvcHlDb25maWcodG8sIGZyb20pIHtcbiAgICAgICAgdmFyIGksXG4gICAgICAgICAgICBwcm9wLFxuICAgICAgICAgICAgdmFsLFxuICAgICAgICAgICAgbW9tZW50UHJvcGVydGllc0xlbiA9IG1vbWVudFByb3BlcnRpZXMubGVuZ3RoO1xuXG4gICAgICAgIGlmICghaXNVbmRlZmluZWQoZnJvbS5faXNBTW9tZW50T2JqZWN0KSkge1xuICAgICAgICAgICAgdG8uX2lzQU1vbWVudE9iamVjdCA9IGZyb20uX2lzQU1vbWVudE9iamVjdDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20uX2kpKSB7XG4gICAgICAgICAgICB0by5faSA9IGZyb20uX2k7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc1VuZGVmaW5lZChmcm9tLl9mKSkge1xuICAgICAgICAgICAgdG8uX2YgPSBmcm9tLl9mO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNVbmRlZmluZWQoZnJvbS5fbCkpIHtcbiAgICAgICAgICAgIHRvLl9sID0gZnJvbS5fbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20uX3N0cmljdCkpIHtcbiAgICAgICAgICAgIHRvLl9zdHJpY3QgPSBmcm9tLl9zdHJpY3Q7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc1VuZGVmaW5lZChmcm9tLl90em0pKSB7XG4gICAgICAgICAgICB0by5fdHptID0gZnJvbS5fdHptO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNVbmRlZmluZWQoZnJvbS5faXNVVEMpKSB7XG4gICAgICAgICAgICB0by5faXNVVEMgPSBmcm9tLl9pc1VUQztcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20uX29mZnNldCkpIHtcbiAgICAgICAgICAgIHRvLl9vZmZzZXQgPSBmcm9tLl9vZmZzZXQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc1VuZGVmaW5lZChmcm9tLl9wZikpIHtcbiAgICAgICAgICAgIHRvLl9wZiA9IGdldFBhcnNpbmdGbGFncyhmcm9tKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20uX2xvY2FsZSkpIHtcbiAgICAgICAgICAgIHRvLl9sb2NhbGUgPSBmcm9tLl9sb2NhbGU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobW9tZW50UHJvcGVydGllc0xlbiA+IDApIHtcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBtb21lbnRQcm9wZXJ0aWVzTGVuOyBpKyspIHtcbiAgICAgICAgICAgICAgICBwcm9wID0gbW9tZW50UHJvcGVydGllc1tpXTtcbiAgICAgICAgICAgICAgICB2YWwgPSBmcm9tW3Byb3BdO1xuICAgICAgICAgICAgICAgIGlmICghaXNVbmRlZmluZWQodmFsKSkge1xuICAgICAgICAgICAgICAgICAgICB0b1twcm9wXSA9IHZhbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdG87XG4gICAgfVxuXG4gICAgLy8gTW9tZW50IHByb3RvdHlwZSBvYmplY3RcbiAgICBmdW5jdGlvbiBNb21lbnQoY29uZmlnKSB7XG4gICAgICAgIGNvcHlDb25maWcodGhpcywgY29uZmlnKTtcbiAgICAgICAgdGhpcy5fZCA9IG5ldyBEYXRlKGNvbmZpZy5fZCAhPSBudWxsID8gY29uZmlnLl9kLmdldFRpbWUoKSA6IE5hTik7XG4gICAgICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHRoaXMuX2QgPSBuZXcgRGF0ZShOYU4pO1xuICAgICAgICB9XG4gICAgICAgIC8vIFByZXZlbnQgaW5maW5pdGUgbG9vcCBpbiBjYXNlIHVwZGF0ZU9mZnNldCBjcmVhdGVzIG5ldyBtb21lbnRcbiAgICAgICAgLy8gb2JqZWN0cy5cbiAgICAgICAgaWYgKHVwZGF0ZUluUHJvZ3Jlc3MgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICB1cGRhdGVJblByb2dyZXNzID0gdHJ1ZTtcbiAgICAgICAgICAgIGhvb2tzLnVwZGF0ZU9mZnNldCh0aGlzKTtcbiAgICAgICAgICAgIHVwZGF0ZUluUHJvZ3Jlc3MgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzTW9tZW50KG9iaikge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgb2JqIGluc3RhbmNlb2YgTW9tZW50IHx8IChvYmogIT0gbnVsbCAmJiBvYmouX2lzQU1vbWVudE9iamVjdCAhPSBudWxsKVxuICAgICAgICApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHdhcm4obXNnKSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIGhvb2tzLnN1cHByZXNzRGVwcmVjYXRpb25XYXJuaW5ncyA9PT0gZmFsc2UgJiZcbiAgICAgICAgICAgIHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICAgICAgY29uc29sZS53YXJuXG4gICAgICAgICkge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKCdEZXByZWNhdGlvbiB3YXJuaW5nOiAnICsgbXNnKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRlcHJlY2F0ZShtc2csIGZuKSB7XG4gICAgICAgIHZhciBmaXJzdFRpbWUgPSB0cnVlO1xuXG4gICAgICAgIHJldHVybiBleHRlbmQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKGhvb2tzLmRlcHJlY2F0aW9uSGFuZGxlciAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaG9va3MuZGVwcmVjYXRpb25IYW5kbGVyKG51bGwsIG1zZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZmlyc3RUaW1lKSB7XG4gICAgICAgICAgICAgICAgdmFyIGFyZ3MgPSBbXSxcbiAgICAgICAgICAgICAgICAgICAgYXJnLFxuICAgICAgICAgICAgICAgICAgICBpLFxuICAgICAgICAgICAgICAgICAgICBrZXksXG4gICAgICAgICAgICAgICAgICAgIGFyZ0xlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGFyZ0xlbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGFyZyA9ICcnO1xuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGFyZ3VtZW50c1tpXSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZyArPSAnXFxuWycgKyBpICsgJ10gJztcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoa2V5IGluIGFyZ3VtZW50c1swXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wKGFyZ3VtZW50c1swXSwga2V5KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmcgKz0ga2V5ICsgJzogJyArIGFyZ3VtZW50c1swXVtrZXldICsgJywgJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmcgPSBhcmcuc2xpY2UoMCwgLTIpOyAvLyBSZW1vdmUgdHJhaWxpbmcgY29tbWEgYW5kIHNwYWNlXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmcgPSBhcmd1bWVudHNbaV07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYXJncy5wdXNoKGFyZyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHdhcm4oXG4gICAgICAgICAgICAgICAgICAgIG1zZyArXG4gICAgICAgICAgICAgICAgICAgICAgICAnXFxuQXJndW1lbnRzOiAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3MpLmpvaW4oJycpICtcbiAgICAgICAgICAgICAgICAgICAgICAgICdcXG4nICtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBFcnJvcigpLnN0YWNrXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBmaXJzdFRpbWUgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICB9LCBmbik7XG4gICAgfVxuXG4gICAgdmFyIGRlcHJlY2F0aW9ucyA9IHt9O1xuXG4gICAgZnVuY3Rpb24gZGVwcmVjYXRlU2ltcGxlKG5hbWUsIG1zZykge1xuICAgICAgICBpZiAoaG9va3MuZGVwcmVjYXRpb25IYW5kbGVyICE9IG51bGwpIHtcbiAgICAgICAgICAgIGhvb2tzLmRlcHJlY2F0aW9uSGFuZGxlcihuYW1lLCBtc2cpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghZGVwcmVjYXRpb25zW25hbWVdKSB7XG4gICAgICAgICAgICB3YXJuKG1zZyk7XG4gICAgICAgICAgICBkZXByZWNhdGlvbnNbbmFtZV0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaG9va3Muc3VwcHJlc3NEZXByZWNhdGlvbldhcm5pbmdzID0gZmFsc2U7XG4gICAgaG9va3MuZGVwcmVjYXRpb25IYW5kbGVyID0gbnVsbDtcblxuICAgIGZ1bmN0aW9uIGlzRnVuY3Rpb24oaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICh0eXBlb2YgRnVuY3Rpb24gIT09ICd1bmRlZmluZWQnICYmIGlucHV0IGluc3RhbmNlb2YgRnVuY3Rpb24pIHx8XG4gICAgICAgICAgICBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaW5wdXQpID09PSAnW29iamVjdCBGdW5jdGlvbl0nXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0KGNvbmZpZykge1xuICAgICAgICB2YXIgcHJvcCwgaTtcbiAgICAgICAgZm9yIChpIGluIGNvbmZpZykge1xuICAgICAgICAgICAgaWYgKGhhc093blByb3AoY29uZmlnLCBpKSkge1xuICAgICAgICAgICAgICAgIHByb3AgPSBjb25maWdbaV07XG4gICAgICAgICAgICAgICAgaWYgKGlzRnVuY3Rpb24ocHJvcCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpc1tpXSA9IHByb3A7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpc1snXycgKyBpXSA9IHByb3A7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2NvbmZpZyA9IGNvbmZpZztcbiAgICAgICAgLy8gTGVuaWVudCBvcmRpbmFsIHBhcnNpbmcgYWNjZXB0cyBqdXN0IGEgbnVtYmVyIGluIGFkZGl0aW9uIHRvXG4gICAgICAgIC8vIG51bWJlciArIChwb3NzaWJseSkgc3R1ZmYgY29taW5nIGZyb20gX2RheU9mTW9udGhPcmRpbmFsUGFyc2UuXG4gICAgICAgIC8vIFRPRE86IFJlbW92ZSBcIm9yZGluYWxQYXJzZVwiIGZhbGxiYWNrIGluIG5leHQgbWFqb3IgcmVsZWFzZS5cbiAgICAgICAgdGhpcy5fZGF5T2ZNb250aE9yZGluYWxQYXJzZUxlbmllbnQgPSBuZXcgUmVnRXhwKFxuICAgICAgICAgICAgKHRoaXMuX2RheU9mTW9udGhPcmRpbmFsUGFyc2Uuc291cmNlIHx8IHRoaXMuX29yZGluYWxQYXJzZS5zb3VyY2UpICtcbiAgICAgICAgICAgICAgICAnfCcgK1xuICAgICAgICAgICAgICAgIC9cXGR7MSwyfS8uc291cmNlXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWVyZ2VDb25maWdzKHBhcmVudENvbmZpZywgY2hpbGRDb25maWcpIHtcbiAgICAgICAgdmFyIHJlcyA9IGV4dGVuZCh7fSwgcGFyZW50Q29uZmlnKSxcbiAgICAgICAgICAgIHByb3A7XG4gICAgICAgIGZvciAocHJvcCBpbiBjaGlsZENvbmZpZykge1xuICAgICAgICAgICAgaWYgKGhhc093blByb3AoY2hpbGRDb25maWcsIHByb3ApKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlzT2JqZWN0KHBhcmVudENvbmZpZ1twcm9wXSkgJiYgaXNPYmplY3QoY2hpbGRDb25maWdbcHJvcF0pKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc1twcm9wXSA9IHt9O1xuICAgICAgICAgICAgICAgICAgICBleHRlbmQocmVzW3Byb3BdLCBwYXJlbnRDb25maWdbcHJvcF0pO1xuICAgICAgICAgICAgICAgICAgICBleHRlbmQocmVzW3Byb3BdLCBjaGlsZENvbmZpZ1twcm9wXSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjaGlsZENvbmZpZ1twcm9wXSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc1twcm9wXSA9IGNoaWxkQ29uZmlnW3Byb3BdO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSByZXNbcHJvcF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZvciAocHJvcCBpbiBwYXJlbnRDb25maWcpIHtcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICBoYXNPd25Qcm9wKHBhcmVudENvbmZpZywgcHJvcCkgJiZcbiAgICAgICAgICAgICAgICAhaGFzT3duUHJvcChjaGlsZENvbmZpZywgcHJvcCkgJiZcbiAgICAgICAgICAgICAgICBpc09iamVjdChwYXJlbnRDb25maWdbcHJvcF0pXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAvLyBtYWtlIHN1cmUgY2hhbmdlcyB0byBwcm9wZXJ0aWVzIGRvbid0IG1vZGlmeSBwYXJlbnQgY29uZmlnXG4gICAgICAgICAgICAgICAgcmVzW3Byb3BdID0gZXh0ZW5kKHt9LCByZXNbcHJvcF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gTG9jYWxlKGNvbmZpZykge1xuICAgICAgICBpZiAoY29uZmlnICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0KGNvbmZpZyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIga2V5cztcblxuICAgIGlmIChPYmplY3Qua2V5cykge1xuICAgICAgICBrZXlzID0gT2JqZWN0LmtleXM7XG4gICAgfSBlbHNlIHtcbiAgICAgICAga2V5cyA9IGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgICAgIHZhciBpLFxuICAgICAgICAgICAgICAgIHJlcyA9IFtdO1xuICAgICAgICAgICAgZm9yIChpIGluIG9iaikge1xuICAgICAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wKG9iaiwgaSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzLnB1c2goaSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdENhbGVuZGFyID0ge1xuICAgICAgICBzYW1lRGF5OiAnW1RvZGF5IGF0XSBMVCcsXG4gICAgICAgIG5leHREYXk6ICdbVG9tb3Jyb3cgYXRdIExUJyxcbiAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFthdF0gTFQnLFxuICAgICAgICBsYXN0RGF5OiAnW1llc3RlcmRheSBhdF0gTFQnLFxuICAgICAgICBsYXN0V2VlazogJ1tMYXN0XSBkZGRkIFthdF0gTFQnLFxuICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBjYWxlbmRhcihrZXksIG1vbSwgbm93KSB7XG4gICAgICAgIHZhciBvdXRwdXQgPSB0aGlzLl9jYWxlbmRhcltrZXldIHx8IHRoaXMuX2NhbGVuZGFyWydzYW1lRWxzZSddO1xuICAgICAgICByZXR1cm4gaXNGdW5jdGlvbihvdXRwdXQpID8gb3V0cHV0LmNhbGwobW9tLCBub3cpIDogb3V0cHV0O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHplcm9GaWxsKG51bWJlciwgdGFyZ2V0TGVuZ3RoLCBmb3JjZVNpZ24pIHtcbiAgICAgICAgdmFyIGFic051bWJlciA9ICcnICsgTWF0aC5hYnMobnVtYmVyKSxcbiAgICAgICAgICAgIHplcm9zVG9GaWxsID0gdGFyZ2V0TGVuZ3RoIC0gYWJzTnVtYmVyLmxlbmd0aCxcbiAgICAgICAgICAgIHNpZ24gPSBudW1iZXIgPj0gMDtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIChzaWduID8gKGZvcmNlU2lnbiA/ICcrJyA6ICcnKSA6ICctJykgK1xuICAgICAgICAgICAgTWF0aC5wb3coMTAsIE1hdGgubWF4KDAsIHplcm9zVG9GaWxsKSkudG9TdHJpbmcoKS5zdWJzdHIoMSkgK1xuICAgICAgICAgICAgYWJzTnVtYmVyXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgdmFyIGZvcm1hdHRpbmdUb2tlbnMgPVxuICAgICAgICAgICAgLyhcXFtbXlxcW10qXFxdKXwoXFxcXCk/KFtIaF1tbShzcyk/fE1vfE1NP00/TT98RG98REREb3xERD9EP0Q/fGRkZD9kP3xkbz98d1tvfHddP3xXW298V10/fFFvP3xOezEsNX18WVlZWVlZfFlZWVlZfFlZWVl8WVl8eXsyLDR9fHlvP3xnZyhnZ2c/KT98R0coR0dHPyk/fGV8RXxhfEF8aGg/fEhIP3xraz98bW0/fHNzP3xTezEsOX18eHxYfHp6P3xaWj98LikvZyxcbiAgICAgICAgbG9jYWxGb3JtYXR0aW5nVG9rZW5zID0gLyhcXFtbXlxcW10qXFxdKXwoXFxcXCk/KExUU3xMVHxMTD9MP0w/fGx7MSw0fSkvZyxcbiAgICAgICAgZm9ybWF0RnVuY3Rpb25zID0ge30sXG4gICAgICAgIGZvcm1hdFRva2VuRnVuY3Rpb25zID0ge307XG5cbiAgICAvLyB0b2tlbjogICAgJ00nXG4gICAgLy8gcGFkZGVkOiAgIFsnTU0nLCAyXVxuICAgIC8vIG9yZGluYWw6ICAnTW8nXG4gICAgLy8gY2FsbGJhY2s6IGZ1bmN0aW9uICgpIHsgdGhpcy5tb250aCgpICsgMSB9XG4gICAgZnVuY3Rpb24gYWRkRm9ybWF0VG9rZW4odG9rZW4sIHBhZGRlZCwgb3JkaW5hbCwgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIGZ1bmMgPSBjYWxsYmFjaztcbiAgICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGZ1bmMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXNbY2FsbGJhY2tdKCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGlmICh0b2tlbikge1xuICAgICAgICAgICAgZm9ybWF0VG9rZW5GdW5jdGlvbnNbdG9rZW5dID0gZnVuYztcbiAgICAgICAgfVxuICAgICAgICBpZiAocGFkZGVkKSB7XG4gICAgICAgICAgICBmb3JtYXRUb2tlbkZ1bmN0aW9uc1twYWRkZWRbMF1dID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB6ZXJvRmlsbChmdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksIHBhZGRlZFsxXSwgcGFkZGVkWzJdKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9yZGluYWwpIHtcbiAgICAgICAgICAgIGZvcm1hdFRva2VuRnVuY3Rpb25zW29yZGluYWxdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS5vcmRpbmFsKFxuICAgICAgICAgICAgICAgICAgICBmdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksXG4gICAgICAgICAgICAgICAgICAgIHRva2VuXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZW1vdmVGb3JtYXR0aW5nVG9rZW5zKGlucHV0KSB7XG4gICAgICAgIGlmIChpbnB1dC5tYXRjaCgvXFxbW1xcc1xcU10vKSkge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0LnJlcGxhY2UoL15cXFt8XFxdJC9nLCAnJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGlucHV0LnJlcGxhY2UoL1xcXFwvZywgJycpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1ha2VGb3JtYXRGdW5jdGlvbihmb3JtYXQpIHtcbiAgICAgICAgdmFyIGFycmF5ID0gZm9ybWF0Lm1hdGNoKGZvcm1hdHRpbmdUb2tlbnMpLFxuICAgICAgICAgICAgaSxcbiAgICAgICAgICAgIGxlbmd0aDtcblxuICAgICAgICBmb3IgKGkgPSAwLCBsZW5ndGggPSBhcnJheS5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKGZvcm1hdFRva2VuRnVuY3Rpb25zW2FycmF5W2ldXSkge1xuICAgICAgICAgICAgICAgIGFycmF5W2ldID0gZm9ybWF0VG9rZW5GdW5jdGlvbnNbYXJyYXlbaV1dO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBhcnJheVtpXSA9IHJlbW92ZUZvcm1hdHRpbmdUb2tlbnMoYXJyYXlbaV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChtb20pIHtcbiAgICAgICAgICAgIHZhciBvdXRwdXQgPSAnJyxcbiAgICAgICAgICAgICAgICBpO1xuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgb3V0cHV0ICs9IGlzRnVuY3Rpb24oYXJyYXlbaV0pXG4gICAgICAgICAgICAgICAgICAgID8gYXJyYXlbaV0uY2FsbChtb20sIGZvcm1hdClcbiAgICAgICAgICAgICAgICAgICAgOiBhcnJheVtpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBvdXRwdXQ7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gZm9ybWF0IGRhdGUgdXNpbmcgbmF0aXZlIGRhdGUgb2JqZWN0XG4gICAgZnVuY3Rpb24gZm9ybWF0TW9tZW50KG0sIGZvcm1hdCkge1xuICAgICAgICBpZiAoIW0uaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gbS5sb2NhbGVEYXRhKCkuaW52YWxpZERhdGUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvcm1hdCA9IGV4cGFuZEZvcm1hdChmb3JtYXQsIG0ubG9jYWxlRGF0YSgpKTtcbiAgICAgICAgZm9ybWF0RnVuY3Rpb25zW2Zvcm1hdF0gPVxuICAgICAgICAgICAgZm9ybWF0RnVuY3Rpb25zW2Zvcm1hdF0gfHwgbWFrZUZvcm1hdEZ1bmN0aW9uKGZvcm1hdCk7XG5cbiAgICAgICAgcmV0dXJuIGZvcm1hdEZ1bmN0aW9uc1tmb3JtYXRdKG0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGV4cGFuZEZvcm1hdChmb3JtYXQsIGxvY2FsZSkge1xuICAgICAgICB2YXIgaSA9IDU7XG5cbiAgICAgICAgZnVuY3Rpb24gcmVwbGFjZUxvbmdEYXRlRm9ybWF0VG9rZW5zKGlucHV0KSB7XG4gICAgICAgICAgICByZXR1cm4gbG9jYWxlLmxvbmdEYXRlRm9ybWF0KGlucHV0KSB8fCBpbnB1dDtcbiAgICAgICAgfVxuXG4gICAgICAgIGxvY2FsRm9ybWF0dGluZ1Rva2Vucy5sYXN0SW5kZXggPSAwO1xuICAgICAgICB3aGlsZSAoaSA+PSAwICYmIGxvY2FsRm9ybWF0dGluZ1Rva2Vucy50ZXN0KGZvcm1hdCkpIHtcbiAgICAgICAgICAgIGZvcm1hdCA9IGZvcm1hdC5yZXBsYWNlKFxuICAgICAgICAgICAgICAgIGxvY2FsRm9ybWF0dGluZ1Rva2VucyxcbiAgICAgICAgICAgICAgICByZXBsYWNlTG9uZ0RhdGVGb3JtYXRUb2tlbnNcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBsb2NhbEZvcm1hdHRpbmdUb2tlbnMubGFzdEluZGV4ID0gMDtcbiAgICAgICAgICAgIGkgLT0gMTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmb3JtYXQ7XG4gICAgfVxuXG4gICAgdmFyIGRlZmF1bHRMb25nRGF0ZUZvcm1hdCA9IHtcbiAgICAgICAgTFRTOiAnaDptbTpzcyBBJyxcbiAgICAgICAgTFQ6ICdoOm1tIEEnLFxuICAgICAgICBMOiAnTU0vREQvWVlZWScsXG4gICAgICAgIExMOiAnTU1NTSBELCBZWVlZJyxcbiAgICAgICAgTExMOiAnTU1NTSBELCBZWVlZIGg6bW0gQScsXG4gICAgICAgIExMTEw6ICdkZGRkLCBNTU1NIEQsIFlZWVkgaDptbSBBJyxcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gbG9uZ0RhdGVGb3JtYXQoa2V5KSB7XG4gICAgICAgIHZhciBmb3JtYXQgPSB0aGlzLl9sb25nRGF0ZUZvcm1hdFtrZXldLFxuICAgICAgICAgICAgZm9ybWF0VXBwZXIgPSB0aGlzLl9sb25nRGF0ZUZvcm1hdFtrZXkudG9VcHBlckNhc2UoKV07XG5cbiAgICAgICAgaWYgKGZvcm1hdCB8fCAhZm9ybWF0VXBwZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBmb3JtYXQ7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9sb25nRGF0ZUZvcm1hdFtrZXldID0gZm9ybWF0VXBwZXJcbiAgICAgICAgICAgIC5tYXRjaChmb3JtYXR0aW5nVG9rZW5zKVxuICAgICAgICAgICAgLm1hcChmdW5jdGlvbiAodG9rKSB7XG4gICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICB0b2sgPT09ICdNTU1NJyB8fFxuICAgICAgICAgICAgICAgICAgICB0b2sgPT09ICdNTScgfHxcbiAgICAgICAgICAgICAgICAgICAgdG9rID09PSAnREQnIHx8XG4gICAgICAgICAgICAgICAgICAgIHRvayA9PT0gJ2RkZGQnXG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0b2suc2xpY2UoMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB0b2s7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmpvaW4oJycpO1xuXG4gICAgICAgIHJldHVybiB0aGlzLl9sb25nRGF0ZUZvcm1hdFtrZXldO1xuICAgIH1cblxuICAgIHZhciBkZWZhdWx0SW52YWxpZERhdGUgPSAnSW52YWxpZCBkYXRlJztcblxuICAgIGZ1bmN0aW9uIGludmFsaWREYXRlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faW52YWxpZERhdGU7XG4gICAgfVxuXG4gICAgdmFyIGRlZmF1bHRPcmRpbmFsID0gJyVkJyxcbiAgICAgICAgZGVmYXVsdERheU9mTW9udGhPcmRpbmFsUGFyc2UgPSAvXFxkezEsMn0vO1xuXG4gICAgZnVuY3Rpb24gb3JkaW5hbChudW1iZXIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX29yZGluYWwucmVwbGFjZSgnJWQnLCBudW1iZXIpO1xuICAgIH1cblxuICAgIHZhciBkZWZhdWx0UmVsYXRpdmVUaW1lID0ge1xuICAgICAgICBmdXR1cmU6ICdpbiAlcycsXG4gICAgICAgIHBhc3Q6ICclcyBhZ28nLFxuICAgICAgICBzOiAnYSBmZXcgc2Vjb25kcycsXG4gICAgICAgIHNzOiAnJWQgc2Vjb25kcycsXG4gICAgICAgIG06ICdhIG1pbnV0ZScsXG4gICAgICAgIG1tOiAnJWQgbWludXRlcycsXG4gICAgICAgIGg6ICdhbiBob3VyJyxcbiAgICAgICAgaGg6ICclZCBob3VycycsXG4gICAgICAgIGQ6ICdhIGRheScsXG4gICAgICAgIGRkOiAnJWQgZGF5cycsXG4gICAgICAgIHc6ICdhIHdlZWsnLFxuICAgICAgICB3dzogJyVkIHdlZWtzJyxcbiAgICAgICAgTTogJ2EgbW9udGgnLFxuICAgICAgICBNTTogJyVkIG1vbnRocycsXG4gICAgICAgIHk6ICdhIHllYXInLFxuICAgICAgICB5eTogJyVkIHllYXJzJyxcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gcmVsYXRpdmVUaW1lKG51bWJlciwgd2l0aG91dFN1ZmZpeCwgc3RyaW5nLCBpc0Z1dHVyZSkge1xuICAgICAgICB2YXIgb3V0cHV0ID0gdGhpcy5fcmVsYXRpdmVUaW1lW3N0cmluZ107XG4gICAgICAgIHJldHVybiBpc0Z1bmN0aW9uKG91dHB1dClcbiAgICAgICAgICAgID8gb3V0cHV0KG51bWJlciwgd2l0aG91dFN1ZmZpeCwgc3RyaW5nLCBpc0Z1dHVyZSlcbiAgICAgICAgICAgIDogb3V0cHV0LnJlcGxhY2UoLyVkL2ksIG51bWJlcik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGFzdEZ1dHVyZShkaWZmLCBvdXRwdXQpIHtcbiAgICAgICAgdmFyIGZvcm1hdCA9IHRoaXMuX3JlbGF0aXZlVGltZVtkaWZmID4gMCA/ICdmdXR1cmUnIDogJ3Bhc3QnXTtcbiAgICAgICAgcmV0dXJuIGlzRnVuY3Rpb24oZm9ybWF0KSA/IGZvcm1hdChvdXRwdXQpIDogZm9ybWF0LnJlcGxhY2UoLyVzL2ksIG91dHB1dCk7XG4gICAgfVxuXG4gICAgdmFyIGFsaWFzZXMgPSB7XG4gICAgICAgIEQ6ICdkYXRlJyxcbiAgICAgICAgZGF0ZXM6ICdkYXRlJyxcbiAgICAgICAgZGF0ZTogJ2RhdGUnLFxuICAgICAgICBkOiAnZGF5JyxcbiAgICAgICAgZGF5czogJ2RheScsXG4gICAgICAgIGRheTogJ2RheScsXG4gICAgICAgIGU6ICd3ZWVrZGF5JyxcbiAgICAgICAgd2Vla2RheXM6ICd3ZWVrZGF5JyxcbiAgICAgICAgd2Vla2RheTogJ3dlZWtkYXknLFxuICAgICAgICBFOiAnaXNvV2Vla2RheScsXG4gICAgICAgIGlzb3dlZWtkYXlzOiAnaXNvV2Vla2RheScsXG4gICAgICAgIGlzb3dlZWtkYXk6ICdpc29XZWVrZGF5JyxcbiAgICAgICAgREREOiAnZGF5T2ZZZWFyJyxcbiAgICAgICAgZGF5b2Z5ZWFyczogJ2RheU9mWWVhcicsXG4gICAgICAgIGRheW9meWVhcjogJ2RheU9mWWVhcicsXG4gICAgICAgIGg6ICdob3VyJyxcbiAgICAgICAgaG91cnM6ICdob3VyJyxcbiAgICAgICAgaG91cjogJ2hvdXInLFxuICAgICAgICBtczogJ21pbGxpc2Vjb25kJyxcbiAgICAgICAgbWlsbGlzZWNvbmRzOiAnbWlsbGlzZWNvbmQnLFxuICAgICAgICBtaWxsaXNlY29uZDogJ21pbGxpc2Vjb25kJyxcbiAgICAgICAgbTogJ21pbnV0ZScsXG4gICAgICAgIG1pbnV0ZXM6ICdtaW51dGUnLFxuICAgICAgICBtaW51dGU6ICdtaW51dGUnLFxuICAgICAgICBNOiAnbW9udGgnLFxuICAgICAgICBtb250aHM6ICdtb250aCcsXG4gICAgICAgIG1vbnRoOiAnbW9udGgnLFxuICAgICAgICBROiAncXVhcnRlcicsXG4gICAgICAgIHF1YXJ0ZXJzOiAncXVhcnRlcicsXG4gICAgICAgIHF1YXJ0ZXI6ICdxdWFydGVyJyxcbiAgICAgICAgczogJ3NlY29uZCcsXG4gICAgICAgIHNlY29uZHM6ICdzZWNvbmQnLFxuICAgICAgICBzZWNvbmQ6ICdzZWNvbmQnLFxuICAgICAgICBnZzogJ3dlZWtZZWFyJyxcbiAgICAgICAgd2Vla3llYXJzOiAnd2Vla1llYXInLFxuICAgICAgICB3ZWVreWVhcjogJ3dlZWtZZWFyJyxcbiAgICAgICAgR0c6ICdpc29XZWVrWWVhcicsXG4gICAgICAgIGlzb3dlZWt5ZWFyczogJ2lzb1dlZWtZZWFyJyxcbiAgICAgICAgaXNvd2Vla3llYXI6ICdpc29XZWVrWWVhcicsXG4gICAgICAgIHc6ICd3ZWVrJyxcbiAgICAgICAgd2Vla3M6ICd3ZWVrJyxcbiAgICAgICAgd2VlazogJ3dlZWsnLFxuICAgICAgICBXOiAnaXNvV2VlaycsXG4gICAgICAgIGlzb3dlZWtzOiAnaXNvV2VlaycsXG4gICAgICAgIGlzb3dlZWs6ICdpc29XZWVrJyxcbiAgICAgICAgeTogJ3llYXInLFxuICAgICAgICB5ZWFyczogJ3llYXInLFxuICAgICAgICB5ZWFyOiAneWVhcicsXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIG5vcm1hbGl6ZVVuaXRzKHVuaXRzKSB7XG4gICAgICAgIHJldHVybiB0eXBlb2YgdW5pdHMgPT09ICdzdHJpbmcnXG4gICAgICAgICAgICA/IGFsaWFzZXNbdW5pdHNdIHx8IGFsaWFzZXNbdW5pdHMudG9Mb3dlckNhc2UoKV1cbiAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG5vcm1hbGl6ZU9iamVjdFVuaXRzKGlucHV0T2JqZWN0KSB7XG4gICAgICAgIHZhciBub3JtYWxpemVkSW5wdXQgPSB7fSxcbiAgICAgICAgICAgIG5vcm1hbGl6ZWRQcm9wLFxuICAgICAgICAgICAgcHJvcDtcblxuICAgICAgICBmb3IgKHByb3AgaW4gaW5wdXRPYmplY3QpIHtcbiAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wKGlucHV0T2JqZWN0LCBwcm9wKSkge1xuICAgICAgICAgICAgICAgIG5vcm1hbGl6ZWRQcm9wID0gbm9ybWFsaXplVW5pdHMocHJvcCk7XG4gICAgICAgICAgICAgICAgaWYgKG5vcm1hbGl6ZWRQcm9wKSB7XG4gICAgICAgICAgICAgICAgICAgIG5vcm1hbGl6ZWRJbnB1dFtub3JtYWxpemVkUHJvcF0gPSBpbnB1dE9iamVjdFtwcm9wXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbm9ybWFsaXplZElucHV0O1xuICAgIH1cblxuICAgIHZhciBwcmlvcml0aWVzID0ge1xuICAgICAgICBkYXRlOiA5LFxuICAgICAgICBkYXk6IDExLFxuICAgICAgICB3ZWVrZGF5OiAxMSxcbiAgICAgICAgaXNvV2Vla2RheTogMTEsXG4gICAgICAgIGRheU9mWWVhcjogNCxcbiAgICAgICAgaG91cjogMTMsXG4gICAgICAgIG1pbGxpc2Vjb25kOiAxNixcbiAgICAgICAgbWludXRlOiAxNCxcbiAgICAgICAgbW9udGg6IDgsXG4gICAgICAgIHF1YXJ0ZXI6IDcsXG4gICAgICAgIHNlY29uZDogMTUsXG4gICAgICAgIHdlZWtZZWFyOiAxLFxuICAgICAgICBpc29XZWVrWWVhcjogMSxcbiAgICAgICAgd2VlazogNSxcbiAgICAgICAgaXNvV2VlazogNSxcbiAgICAgICAgeWVhcjogMSxcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gZ2V0UHJpb3JpdGl6ZWRVbml0cyh1bml0c09iaikge1xuICAgICAgICB2YXIgdW5pdHMgPSBbXSxcbiAgICAgICAgICAgIHU7XG4gICAgICAgIGZvciAodSBpbiB1bml0c09iaikge1xuICAgICAgICAgICAgaWYgKGhhc093blByb3AodW5pdHNPYmosIHUpKSB7XG4gICAgICAgICAgICAgICAgdW5pdHMucHVzaCh7IHVuaXQ6IHUsIHByaW9yaXR5OiBwcmlvcml0aWVzW3VdIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHVuaXRzLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgICAgIHJldHVybiBhLnByaW9yaXR5IC0gYi5wcmlvcml0eTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB1bml0cztcbiAgICB9XG5cbiAgICB2YXIgbWF0Y2gxID0gL1xcZC8sIC8vICAgICAgIDAgLSA5XG4gICAgICAgIG1hdGNoMiA9IC9cXGRcXGQvLCAvLyAgICAgIDAwIC0gOTlcbiAgICAgICAgbWF0Y2gzID0gL1xcZHszfS8sIC8vICAgICAwMDAgLSA5OTlcbiAgICAgICAgbWF0Y2g0ID0gL1xcZHs0fS8sIC8vICAgIDAwMDAgLSA5OTk5XG4gICAgICAgIG1hdGNoNiA9IC9bKy1dP1xcZHs2fS8sIC8vIC05OTk5OTkgLSA5OTk5OTlcbiAgICAgICAgbWF0Y2gxdG8yID0gL1xcZFxcZD8vLCAvLyAgICAgICAwIC0gOTlcbiAgICAgICAgbWF0Y2gzdG80ID0gL1xcZFxcZFxcZFxcZD8vLCAvLyAgICAgOTk5IC0gOTk5OVxuICAgICAgICBtYXRjaDV0bzYgPSAvXFxkXFxkXFxkXFxkXFxkXFxkPy8sIC8vICAgOTk5OTkgLSA5OTk5OTlcbiAgICAgICAgbWF0Y2gxdG8zID0gL1xcZHsxLDN9LywgLy8gICAgICAgMCAtIDk5OVxuICAgICAgICBtYXRjaDF0bzQgPSAvXFxkezEsNH0vLCAvLyAgICAgICAwIC0gOTk5OVxuICAgICAgICBtYXRjaDF0bzYgPSAvWystXT9cXGR7MSw2fS8sIC8vIC05OTk5OTkgLSA5OTk5OTlcbiAgICAgICAgbWF0Y2hVbnNpZ25lZCA9IC9cXGQrLywgLy8gICAgICAgMCAtIGluZlxuICAgICAgICBtYXRjaFNpZ25lZCA9IC9bKy1dP1xcZCsvLCAvLyAgICAtaW5mIC0gaW5mXG4gICAgICAgIG1hdGNoT2Zmc2V0ID0gL1p8WystXVxcZFxcZDo/XFxkXFxkL2dpLCAvLyArMDA6MDAgLTAwOjAwICswMDAwIC0wMDAwIG9yIFpcbiAgICAgICAgbWF0Y2hTaG9ydE9mZnNldCA9IC9afFsrLV1cXGRcXGQoPzo6P1xcZFxcZCk/L2dpLCAvLyArMDAgLTAwICswMDowMCAtMDA6MDAgKzAwMDAgLTAwMDAgb3IgWlxuICAgICAgICBtYXRjaFRpbWVzdGFtcCA9IC9bKy1dP1xcZCsoXFwuXFxkezEsM30pPy8sIC8vIDEyMzQ1Njc4OSAxMjM0NTY3ODkuMTIzXG4gICAgICAgIC8vIGFueSB3b3JkIChvciB0d28pIGNoYXJhY3RlcnMgb3IgbnVtYmVycyBpbmNsdWRpbmcgdHdvL3RocmVlIHdvcmQgbW9udGggaW4gYXJhYmljLlxuICAgICAgICAvLyBpbmNsdWRlcyBzY290dGlzaCBnYWVsaWMgdHdvIHdvcmQgYW5kIGh5cGhlbmF0ZWQgbW9udGhzXG4gICAgICAgIG1hdGNoV29yZCA9XG4gICAgICAgICAgICAvWzAtOV17MCwyNTZ9WydhLXpcXHUwMEEwLVxcdTA1RkZcXHUwNzAwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGMDdcXHVGRjEwLVxcdUZGRUZdezEsMjU2fXxbXFx1MDYwMC1cXHUwNkZGXFwvXXsxLDI1Nn0oXFxzKj9bXFx1MDYwMC1cXHUwNkZGXXsxLDI1Nn0pezEsMn0vaSxcbiAgICAgICAgbWF0Y2gxdG8yTm9MZWFkaW5nWmVybyA9IC9eWzEtOV1cXGQ/LywgLy8gICAgICAgICAxLTk5XG4gICAgICAgIG1hdGNoMXRvMkhhc1plcm8gPSAvXihbMS05XVxcZHxcXGQpLywgLy8gICAgICAgICAgIDAtOTlcbiAgICAgICAgcmVnZXhlcztcblxuICAgIHJlZ2V4ZXMgPSB7fTtcblxuICAgIGZ1bmN0aW9uIGFkZFJlZ2V4VG9rZW4odG9rZW4sIHJlZ2V4LCBzdHJpY3RSZWdleCkge1xuICAgICAgICByZWdleGVzW3Rva2VuXSA9IGlzRnVuY3Rpb24ocmVnZXgpXG4gICAgICAgICAgICA/IHJlZ2V4XG4gICAgICAgICAgICA6IGZ1bmN0aW9uIChpc1N0cmljdCwgbG9jYWxlRGF0YSkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGlzU3RyaWN0ICYmIHN0cmljdFJlZ2V4ID8gc3RyaWN0UmVnZXggOiByZWdleDtcbiAgICAgICAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRQYXJzZVJlZ2V4Rm9yVG9rZW4odG9rZW4sIGNvbmZpZykge1xuICAgICAgICBpZiAoIWhhc093blByb3AocmVnZXhlcywgdG9rZW4pKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFJlZ0V4cCh1bmVzY2FwZUZvcm1hdCh0b2tlbikpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlZ2V4ZXNbdG9rZW5dKGNvbmZpZy5fc3RyaWN0LCBjb25maWcuX2xvY2FsZSk7XG4gICAgfVxuXG4gICAgLy8gQ29kZSBmcm9tIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMzU2MTQ5My9pcy10aGVyZS1hLXJlZ2V4cC1lc2NhcGUtZnVuY3Rpb24taW4tamF2YXNjcmlwdFxuICAgIGZ1bmN0aW9uIHVuZXNjYXBlRm9ybWF0KHMpIHtcbiAgICAgICAgcmV0dXJuIHJlZ2V4RXNjYXBlKFxuICAgICAgICAgICAgc1xuICAgICAgICAgICAgICAgIC5yZXBsYWNlKCdcXFxcJywgJycpXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoXG4gICAgICAgICAgICAgICAgICAgIC9cXFxcKFxcWyl8XFxcXChcXF0pfFxcWyhbXlxcXVxcW10qKVxcXXxcXFxcKC4pL2csXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChtYXRjaGVkLCBwMSwgcDIsIHAzLCBwNCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHAxIHx8IHAyIHx8IHAzIHx8IHA0O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgKVxuICAgICAgICApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlZ2V4RXNjYXBlKHMpIHtcbiAgICAgICAgcmV0dXJuIHMucmVwbGFjZSgvWy1cXC9cXFxcXiQqKz8uKCl8W1xcXXt9XS9nLCAnXFxcXCQmJyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYWJzRmxvb3IobnVtYmVyKSB7XG4gICAgICAgIGlmIChudW1iZXIgPCAwKSB7XG4gICAgICAgICAgICAvLyAtMCAtPiAwXG4gICAgICAgICAgICByZXR1cm4gTWF0aC5jZWlsKG51bWJlcikgfHwgMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBNYXRoLmZsb29yKG51bWJlcik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0b0ludChhcmd1bWVudEZvckNvZXJjaW9uKSB7XG4gICAgICAgIHZhciBjb2VyY2VkTnVtYmVyID0gK2FyZ3VtZW50Rm9yQ29lcmNpb24sXG4gICAgICAgICAgICB2YWx1ZSA9IDA7XG5cbiAgICAgICAgaWYgKGNvZXJjZWROdW1iZXIgIT09IDAgJiYgaXNGaW5pdGUoY29lcmNlZE51bWJlcikpIHtcbiAgICAgICAgICAgIHZhbHVlID0gYWJzRmxvb3IoY29lcmNlZE51bWJlcik7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgdmFyIHRva2VucyA9IHt9O1xuXG4gICAgZnVuY3Rpb24gYWRkUGFyc2VUb2tlbih0b2tlbiwgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIGksXG4gICAgICAgICAgICBmdW5jID0gY2FsbGJhY2ssXG4gICAgICAgICAgICB0b2tlbkxlbjtcbiAgICAgICAgaWYgKHR5cGVvZiB0b2tlbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHRva2VuID0gW3Rva2VuXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNOdW1iZXIoY2FsbGJhY2spKSB7XG4gICAgICAgICAgICBmdW5jID0gZnVuY3Rpb24gKGlucHV0LCBhcnJheSkge1xuICAgICAgICAgICAgICAgIGFycmF5W2NhbGxiYWNrXSA9IHRvSW50KGlucHV0KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgdG9rZW5MZW4gPSB0b2tlbi5sZW5ndGg7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCB0b2tlbkxlbjsgaSsrKSB7XG4gICAgICAgICAgICB0b2tlbnNbdG9rZW5baV1dID0gZnVuYztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFkZFdlZWtQYXJzZVRva2VuKHRva2VuLCBjYWxsYmFjaykge1xuICAgICAgICBhZGRQYXJzZVRva2VuKHRva2VuLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcsIHRva2VuKSB7XG4gICAgICAgICAgICBjb25maWcuX3cgPSBjb25maWcuX3cgfHwge307XG4gICAgICAgICAgICBjYWxsYmFjayhpbnB1dCwgY29uZmlnLl93LCBjb25maWcsIHRva2VuKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYWRkVGltZVRvQXJyYXlGcm9tVG9rZW4odG9rZW4sIGlucHV0LCBjb25maWcpIHtcbiAgICAgICAgaWYgKGlucHV0ICE9IG51bGwgJiYgaGFzT3duUHJvcCh0b2tlbnMsIHRva2VuKSkge1xuICAgICAgICAgICAgdG9rZW5zW3Rva2VuXShpbnB1dCwgY29uZmlnLl9hLCBjb25maWcsIHRva2VuKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzTGVhcFllYXIoeWVhcikge1xuICAgICAgICByZXR1cm4gKHllYXIgJSA0ID09PSAwICYmIHllYXIgJSAxMDAgIT09IDApIHx8IHllYXIgJSA0MDAgPT09IDA7XG4gICAgfVxuXG4gICAgdmFyIFlFQVIgPSAwLFxuICAgICAgICBNT05USCA9IDEsXG4gICAgICAgIERBVEUgPSAyLFxuICAgICAgICBIT1VSID0gMyxcbiAgICAgICAgTUlOVVRFID0gNCxcbiAgICAgICAgU0VDT05EID0gNSxcbiAgICAgICAgTUlMTElTRUNPTkQgPSA2LFxuICAgICAgICBXRUVLID0gNyxcbiAgICAgICAgV0VFS0RBWSA9IDg7XG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBhZGRGb3JtYXRUb2tlbignWScsIDAsIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHkgPSB0aGlzLnllYXIoKTtcbiAgICAgICAgcmV0dXJuIHkgPD0gOTk5OSA/IHplcm9GaWxsKHksIDQpIDogJysnICsgeTtcbiAgICB9KTtcblxuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnWVknLCAyXSwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy55ZWFyKCkgJSAxMDA7XG4gICAgfSk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ1lZWVknLCA0XSwgMCwgJ3llYXInKTtcbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ1lZWVlZJywgNV0sIDAsICd5ZWFyJyk7XG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydZWVlZWVknLCA2LCB0cnVlXSwgMCwgJ3llYXInKTtcblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ1knLCBtYXRjaFNpZ25lZCk7XG4gICAgYWRkUmVnZXhUb2tlbignWVknLCBtYXRjaDF0bzIsIG1hdGNoMik7XG4gICAgYWRkUmVnZXhUb2tlbignWVlZWScsIG1hdGNoMXRvNCwgbWF0Y2g0KTtcbiAgICBhZGRSZWdleFRva2VuKCdZWVlZWScsIG1hdGNoMXRvNiwgbWF0Y2g2KTtcbiAgICBhZGRSZWdleFRva2VuKCdZWVlZWVknLCBtYXRjaDF0bzYsIG1hdGNoNik7XG5cbiAgICBhZGRQYXJzZVRva2VuKFsnWVlZWVknLCAnWVlZWVlZJ10sIFlFQVIpO1xuICAgIGFkZFBhcnNlVG9rZW4oJ1lZWVknLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5KSB7XG4gICAgICAgIGFycmF5W1lFQVJdID1cbiAgICAgICAgICAgIGlucHV0Lmxlbmd0aCA9PT0gMiA/IGhvb2tzLnBhcnNlVHdvRGlnaXRZZWFyKGlucHV0KSA6IHRvSW50KGlucHV0KTtcbiAgICB9KTtcbiAgICBhZGRQYXJzZVRva2VuKCdZWScsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXkpIHtcbiAgICAgICAgYXJyYXlbWUVBUl0gPSBob29rcy5wYXJzZVR3b0RpZ2l0WWVhcihpbnB1dCk7XG4gICAgfSk7XG4gICAgYWRkUGFyc2VUb2tlbignWScsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXkpIHtcbiAgICAgICAgYXJyYXlbWUVBUl0gPSBwYXJzZUludChpbnB1dCwgMTApO1xuICAgIH0pO1xuXG4gICAgLy8gSEVMUEVSU1xuXG4gICAgZnVuY3Rpb24gZGF5c0luWWVhcih5ZWFyKSB7XG4gICAgICAgIHJldHVybiBpc0xlYXBZZWFyKHllYXIpID8gMzY2IDogMzY1O1xuICAgIH1cblxuICAgIC8vIEhPT0tTXG5cbiAgICBob29rcy5wYXJzZVR3b0RpZ2l0WWVhciA9IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICByZXR1cm4gdG9JbnQoaW5wdXQpICsgKHRvSW50KGlucHV0KSA+IDY4ID8gMTkwMCA6IDIwMDApO1xuICAgIH07XG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICB2YXIgZ2V0U2V0WWVhciA9IG1ha2VHZXRTZXQoJ0Z1bGxZZWFyJywgdHJ1ZSk7XG5cbiAgICBmdW5jdGlvbiBnZXRJc0xlYXBZZWFyKCkge1xuICAgICAgICByZXR1cm4gaXNMZWFwWWVhcih0aGlzLnllYXIoKSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWFrZUdldFNldCh1bml0LCBrZWVwVGltZSkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHNldCQxKHRoaXMsIHVuaXQsIHZhbHVlKTtcbiAgICAgICAgICAgICAgICBob29rcy51cGRhdGVPZmZzZXQodGhpcywga2VlcFRpbWUpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZ2V0KHRoaXMsIHVuaXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldChtb20sIHVuaXQpIHtcbiAgICAgICAgaWYgKCFtb20uaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gTmFOO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGQgPSBtb20uX2QsXG4gICAgICAgICAgICBpc1VUQyA9IG1vbS5faXNVVEM7XG5cbiAgICAgICAgc3dpdGNoICh1bml0KSB7XG4gICAgICAgICAgICBjYXNlICdNaWxsaXNlY29uZHMnOlxuICAgICAgICAgICAgICAgIHJldHVybiBpc1VUQyA/IGQuZ2V0VVRDTWlsbGlzZWNvbmRzKCkgOiBkLmdldE1pbGxpc2Vjb25kcygpO1xuICAgICAgICAgICAgY2FzZSAnU2Vjb25kcyc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzVVRDID8gZC5nZXRVVENTZWNvbmRzKCkgOiBkLmdldFNlY29uZHMoKTtcbiAgICAgICAgICAgIGNhc2UgJ01pbnV0ZXMnOlxuICAgICAgICAgICAgICAgIHJldHVybiBpc1VUQyA/IGQuZ2V0VVRDTWludXRlcygpIDogZC5nZXRNaW51dGVzKCk7XG4gICAgICAgICAgICBjYXNlICdIb3Vycyc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzVVRDID8gZC5nZXRVVENIb3VycygpIDogZC5nZXRIb3VycygpO1xuICAgICAgICAgICAgY2FzZSAnRGF0ZSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzVVRDID8gZC5nZXRVVENEYXRlKCkgOiBkLmdldERhdGUoKTtcbiAgICAgICAgICAgIGNhc2UgJ0RheSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzVVRDID8gZC5nZXRVVENEYXkoKSA6IGQuZ2V0RGF5KCk7XG4gICAgICAgICAgICBjYXNlICdNb250aCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzVVRDID8gZC5nZXRVVENNb250aCgpIDogZC5nZXRNb250aCgpO1xuICAgICAgICAgICAgY2FzZSAnRnVsbFllYXInOlxuICAgICAgICAgICAgICAgIHJldHVybiBpc1VUQyA/IGQuZ2V0VVRDRnVsbFllYXIoKSA6IGQuZ2V0RnVsbFllYXIoKTtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIE5hTjsgLy8gSnVzdCBpbiBjYXNlXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXQkMShtb20sIHVuaXQsIHZhbHVlKSB7XG4gICAgICAgIHZhciBkLCBpc1VUQywgeWVhciwgbW9udGgsIGRhdGU7XG5cbiAgICAgICAgaWYgKCFtb20uaXNWYWxpZCgpIHx8IGlzTmFOKHZhbHVlKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgZCA9IG1vbS5fZDtcbiAgICAgICAgaXNVVEMgPSBtb20uX2lzVVRDO1xuXG4gICAgICAgIHN3aXRjaCAodW5pdCkge1xuICAgICAgICAgICAgY2FzZSAnTWlsbGlzZWNvbmRzJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gdm9pZCAoaXNVVENcbiAgICAgICAgICAgICAgICAgICAgPyBkLnNldFVUQ01pbGxpc2Vjb25kcyh2YWx1ZSlcbiAgICAgICAgICAgICAgICAgICAgOiBkLnNldE1pbGxpc2Vjb25kcyh2YWx1ZSkpO1xuICAgICAgICAgICAgY2FzZSAnU2Vjb25kcyc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZvaWQgKGlzVVRDID8gZC5zZXRVVENTZWNvbmRzKHZhbHVlKSA6IGQuc2V0U2Vjb25kcyh2YWx1ZSkpO1xuICAgICAgICAgICAgY2FzZSAnTWludXRlcyc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZvaWQgKGlzVVRDID8gZC5zZXRVVENNaW51dGVzKHZhbHVlKSA6IGQuc2V0TWludXRlcyh2YWx1ZSkpO1xuICAgICAgICAgICAgY2FzZSAnSG91cnMnOlxuICAgICAgICAgICAgICAgIHJldHVybiB2b2lkIChpc1VUQyA/IGQuc2V0VVRDSG91cnModmFsdWUpIDogZC5zZXRIb3Vycyh2YWx1ZSkpO1xuICAgICAgICAgICAgY2FzZSAnRGF0ZSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZvaWQgKGlzVVRDID8gZC5zZXRVVENEYXRlKHZhbHVlKSA6IGQuc2V0RGF0ZSh2YWx1ZSkpO1xuICAgICAgICAgICAgLy8gY2FzZSAnRGF5JzogLy8gTm90IHJlYWxcbiAgICAgICAgICAgIC8vICAgIHJldHVybiB2b2lkIChpc1VUQyA/IGQuc2V0VVRDRGF5KHZhbHVlKSA6IGQuc2V0RGF5KHZhbHVlKSk7XG4gICAgICAgICAgICAvLyBjYXNlICdNb250aCc6IC8vIE5vdCB1c2VkIGJlY2F1c2Ugd2UgbmVlZCB0byBwYXNzIHR3byB2YXJpYWJsZXNcbiAgICAgICAgICAgIC8vICAgICByZXR1cm4gdm9pZCAoaXNVVEMgPyBkLnNldFVUQ01vbnRoKHZhbHVlKSA6IGQuc2V0TW9udGgodmFsdWUpKTtcbiAgICAgICAgICAgIGNhc2UgJ0Z1bGxZZWFyJzpcbiAgICAgICAgICAgICAgICBicmVhazsgLy8gU2VlIGJlbG93IC4uLlxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm47IC8vIEp1c3QgaW4gY2FzZVxuICAgICAgICB9XG5cbiAgICAgICAgeWVhciA9IHZhbHVlO1xuICAgICAgICBtb250aCA9IG1vbS5tb250aCgpO1xuICAgICAgICBkYXRlID0gbW9tLmRhdGUoKTtcbiAgICAgICAgZGF0ZSA9IGRhdGUgPT09IDI5ICYmIG1vbnRoID09PSAxICYmICFpc0xlYXBZZWFyKHllYXIpID8gMjggOiBkYXRlO1xuICAgICAgICB2b2lkIChpc1VUQ1xuICAgICAgICAgICAgPyBkLnNldFVUQ0Z1bGxZZWFyKHllYXIsIG1vbnRoLCBkYXRlKVxuICAgICAgICAgICAgOiBkLnNldEZ1bGxZZWFyKHllYXIsIG1vbnRoLCBkYXRlKSk7XG4gICAgfVxuXG4gICAgLy8gTU9NRU5UU1xuXG4gICAgZnVuY3Rpb24gc3RyaW5nR2V0KHVuaXRzKSB7XG4gICAgICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpO1xuICAgICAgICBpZiAoaXNGdW5jdGlvbih0aGlzW3VuaXRzXSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzW3VuaXRzXSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHN0cmluZ1NldCh1bml0cywgdmFsdWUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB1bml0cyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIHVuaXRzID0gbm9ybWFsaXplT2JqZWN0VW5pdHModW5pdHMpO1xuICAgICAgICAgICAgdmFyIHByaW9yaXRpemVkID0gZ2V0UHJpb3JpdGl6ZWRVbml0cyh1bml0cyksXG4gICAgICAgICAgICAgICAgaSxcbiAgICAgICAgICAgICAgICBwcmlvcml0aXplZExlbiA9IHByaW9yaXRpemVkLmxlbmd0aDtcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBwcmlvcml0aXplZExlbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdGhpc1twcmlvcml0aXplZFtpXS51bml0XSh1bml0c1twcmlvcml0aXplZFtpXS51bml0XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKTtcbiAgICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKHRoaXNbdW5pdHNdKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzW3VuaXRzXSh2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbW9kKG4sIHgpIHtcbiAgICAgICAgcmV0dXJuICgobiAlIHgpICsgeCkgJSB4O1xuICAgIH1cblxuICAgIHZhciBpbmRleE9mO1xuXG4gICAgaWYgKEFycmF5LnByb3RvdHlwZS5pbmRleE9mKSB7XG4gICAgICAgIGluZGV4T2YgPSBBcnJheS5wcm90b3R5cGUuaW5kZXhPZjtcbiAgICB9IGVsc2Uge1xuICAgICAgICBpbmRleE9mID0gZnVuY3Rpb24gKG8pIHtcbiAgICAgICAgICAgIC8vIEkga25vd1xuICAgICAgICAgICAgdmFyIGk7XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzW2ldID09PSBvKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkYXlzSW5Nb250aCh5ZWFyLCBtb250aCkge1xuICAgICAgICBpZiAoaXNOYU4oeWVhcikgfHwgaXNOYU4obW9udGgpKSB7XG4gICAgICAgICAgICByZXR1cm4gTmFOO1xuICAgICAgICB9XG4gICAgICAgIHZhciBtb2RNb250aCA9IG1vZChtb250aCwgMTIpO1xuICAgICAgICB5ZWFyICs9IChtb250aCAtIG1vZE1vbnRoKSAvIDEyO1xuICAgICAgICByZXR1cm4gbW9kTW9udGggPT09IDFcbiAgICAgICAgICAgID8gaXNMZWFwWWVhcih5ZWFyKVxuICAgICAgICAgICAgICAgID8gMjlcbiAgICAgICAgICAgICAgICA6IDI4XG4gICAgICAgICAgICA6IDMxIC0gKChtb2RNb250aCAlIDcpICUgMik7XG4gICAgfVxuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ00nLCBbJ01NJywgMl0sICdNbycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubW9udGgoKSArIDE7XG4gICAgfSk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbignTU1NJywgMCwgMCwgZnVuY3Rpb24gKGZvcm1hdCkge1xuICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkubW9udGhzU2hvcnQodGhpcywgZm9ybWF0KTtcbiAgICB9KTtcblxuICAgIGFkZEZvcm1hdFRva2VuKCdNTU1NJywgMCwgMCwgZnVuY3Rpb24gKGZvcm1hdCkge1xuICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkubW9udGhzKHRoaXMsIGZvcm1hdCk7XG4gICAgfSk7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBhZGRSZWdleFRva2VuKCdNJywgbWF0Y2gxdG8yLCBtYXRjaDF0bzJOb0xlYWRpbmdaZXJvKTtcbiAgICBhZGRSZWdleFRva2VuKCdNTScsIG1hdGNoMXRvMiwgbWF0Y2gyKTtcbiAgICBhZGRSZWdleFRva2VuKCdNTU0nLCBmdW5jdGlvbiAoaXNTdHJpY3QsIGxvY2FsZSkge1xuICAgICAgICByZXR1cm4gbG9jYWxlLm1vbnRoc1Nob3J0UmVnZXgoaXNTdHJpY3QpO1xuICAgIH0pO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ01NTU0nLCBmdW5jdGlvbiAoaXNTdHJpY3QsIGxvY2FsZSkge1xuICAgICAgICByZXR1cm4gbG9jYWxlLm1vbnRoc1JlZ2V4KGlzU3RyaWN0KTtcbiAgICB9KTtcblxuICAgIGFkZFBhcnNlVG9rZW4oWydNJywgJ01NJ10sIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXkpIHtcbiAgICAgICAgYXJyYXlbTU9OVEhdID0gdG9JbnQoaW5wdXQpIC0gMTtcbiAgICB9KTtcblxuICAgIGFkZFBhcnNlVG9rZW4oWydNTU0nLCAnTU1NTSddLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcsIHRva2VuKSB7XG4gICAgICAgIHZhciBtb250aCA9IGNvbmZpZy5fbG9jYWxlLm1vbnRoc1BhcnNlKGlucHV0LCB0b2tlbiwgY29uZmlnLl9zdHJpY3QpO1xuICAgICAgICAvLyBpZiB3ZSBkaWRuJ3QgZmluZCBhIG1vbnRoIG5hbWUsIG1hcmsgdGhlIGRhdGUgYXMgaW52YWxpZC5cbiAgICAgICAgaWYgKG1vbnRoICE9IG51bGwpIHtcbiAgICAgICAgICAgIGFycmF5W01PTlRIXSA9IG1vbnRoO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuaW52YWxpZE1vbnRoID0gaW5wdXQ7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIExPQ0FMRVNcblxuICAgIHZhciBkZWZhdWx0TG9jYWxlTW9udGhzID1cbiAgICAgICAgICAgICdKYW51YXJ5X0ZlYnJ1YXJ5X01hcmNoX0FwcmlsX01heV9KdW5lX0p1bHlfQXVndXN0X1NlcHRlbWJlcl9PY3RvYmVyX05vdmVtYmVyX0RlY2VtYmVyJy5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgIGRlZmF1bHRMb2NhbGVNb250aHNTaG9ydCA9XG4gICAgICAgICAgICAnSmFuX0ZlYl9NYXJfQXByX01heV9KdW5fSnVsX0F1Z19TZXBfT2N0X05vdl9EZWMnLnNwbGl0KCdfJyksXG4gICAgICAgIE1PTlRIU19JTl9GT1JNQVQgPSAvRFtvRF0/KFxcW1teXFxbXFxdXSpcXF18XFxzKStNTU1NPy8sXG4gICAgICAgIGRlZmF1bHRNb250aHNTaG9ydFJlZ2V4ID0gbWF0Y2hXb3JkLFxuICAgICAgICBkZWZhdWx0TW9udGhzUmVnZXggPSBtYXRjaFdvcmQ7XG5cbiAgICBmdW5jdGlvbiBsb2NhbGVNb250aHMobSwgZm9ybWF0KSB7XG4gICAgICAgIGlmICghbSkge1xuICAgICAgICAgICAgcmV0dXJuIGlzQXJyYXkodGhpcy5fbW9udGhzKVxuICAgICAgICAgICAgICAgID8gdGhpcy5fbW9udGhzXG4gICAgICAgICAgICAgICAgOiB0aGlzLl9tb250aHNbJ3N0YW5kYWxvbmUnXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaXNBcnJheSh0aGlzLl9tb250aHMpXG4gICAgICAgICAgICA/IHRoaXMuX21vbnRoc1ttLm1vbnRoKCldXG4gICAgICAgICAgICA6IHRoaXMuX21vbnRoc1tcbiAgICAgICAgICAgICAgICAgICh0aGlzLl9tb250aHMuaXNGb3JtYXQgfHwgTU9OVEhTX0lOX0ZPUk1BVCkudGVzdChmb3JtYXQpXG4gICAgICAgICAgICAgICAgICAgICAgPyAnZm9ybWF0J1xuICAgICAgICAgICAgICAgICAgICAgIDogJ3N0YW5kYWxvbmUnXG4gICAgICAgICAgICAgIF1bbS5tb250aCgpXTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsb2NhbGVNb250aHNTaG9ydChtLCBmb3JtYXQpIHtcbiAgICAgICAgaWYgKCFtKSB7XG4gICAgICAgICAgICByZXR1cm4gaXNBcnJheSh0aGlzLl9tb250aHNTaG9ydClcbiAgICAgICAgICAgICAgICA/IHRoaXMuX21vbnRoc1Nob3J0XG4gICAgICAgICAgICAgICAgOiB0aGlzLl9tb250aHNTaG9ydFsnc3RhbmRhbG9uZSddO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpc0FycmF5KHRoaXMuX21vbnRoc1Nob3J0KVxuICAgICAgICAgICAgPyB0aGlzLl9tb250aHNTaG9ydFttLm1vbnRoKCldXG4gICAgICAgICAgICA6IHRoaXMuX21vbnRoc1Nob3J0W1xuICAgICAgICAgICAgICAgICAgTU9OVEhTX0lOX0ZPUk1BVC50ZXN0KGZvcm1hdCkgPyAnZm9ybWF0JyA6ICdzdGFuZGFsb25lJ1xuICAgICAgICAgICAgICBdW20ubW9udGgoKV07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaGFuZGxlU3RyaWN0UGFyc2UobW9udGhOYW1lLCBmb3JtYXQsIHN0cmljdCkge1xuICAgICAgICB2YXIgaSxcbiAgICAgICAgICAgIGlpLFxuICAgICAgICAgICAgbW9tLFxuICAgICAgICAgICAgbGxjID0gbW9udGhOYW1lLnRvTG9jYWxlTG93ZXJDYXNlKCk7XG4gICAgICAgIGlmICghdGhpcy5fbW9udGhzUGFyc2UpIHtcbiAgICAgICAgICAgIC8vIHRoaXMgaXMgbm90IHVzZWRcbiAgICAgICAgICAgIHRoaXMuX21vbnRoc1BhcnNlID0gW107XG4gICAgICAgICAgICB0aGlzLl9sb25nTW9udGhzUGFyc2UgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuX3Nob3J0TW9udGhzUGFyc2UgPSBbXTtcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCAxMjsgKytpKSB7XG4gICAgICAgICAgICAgICAgbW9tID0gY3JlYXRlVVRDKFsyMDAwLCBpXSk7XG4gICAgICAgICAgICAgICAgdGhpcy5fc2hvcnRNb250aHNQYXJzZVtpXSA9IHRoaXMubW9udGhzU2hvcnQoXG4gICAgICAgICAgICAgICAgICAgIG1vbSxcbiAgICAgICAgICAgICAgICAgICAgJydcbiAgICAgICAgICAgICAgICApLnRvTG9jYWxlTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fbG9uZ01vbnRoc1BhcnNlW2ldID0gdGhpcy5tb250aHMobW9tLCAnJykudG9Mb2NhbGVMb3dlckNhc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzdHJpY3QpIHtcbiAgICAgICAgICAgIGlmIChmb3JtYXQgPT09ICdNTU0nKSB7XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fc2hvcnRNb250aHNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gaWkgIT09IC0xID8gaWkgOiBudWxsO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9sb25nTW9udGhzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlpICE9PSAtMSA/IGlpIDogbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChmb3JtYXQgPT09ICdNTU0nKSB7XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fc2hvcnRNb250aHNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICBpZiAoaWkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpaTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fbG9uZ01vbnRoc1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBpaSAhPT0gLTEgPyBpaSA6IG51bGw7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX2xvbmdNb250aHNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICBpZiAoaWkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpaTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fc2hvcnRNb250aHNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gaWkgIT09IC0xID8gaWkgOiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbG9jYWxlTW9udGhzUGFyc2UobW9udGhOYW1lLCBmb3JtYXQsIHN0cmljdCkge1xuICAgICAgICB2YXIgaSwgbW9tLCByZWdleDtcblxuICAgICAgICBpZiAodGhpcy5fbW9udGhzUGFyc2VFeGFjdCkge1xuICAgICAgICAgICAgcmV0dXJuIGhhbmRsZVN0cmljdFBhcnNlLmNhbGwodGhpcywgbW9udGhOYW1lLCBmb3JtYXQsIHN0cmljdCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXRoaXMuX21vbnRoc1BhcnNlKSB7XG4gICAgICAgICAgICB0aGlzLl9tb250aHNQYXJzZSA9IFtdO1xuICAgICAgICAgICAgdGhpcy5fbG9uZ01vbnRoc1BhcnNlID0gW107XG4gICAgICAgICAgICB0aGlzLl9zaG9ydE1vbnRoc1BhcnNlID0gW107XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUT0RPOiBhZGQgc29ydGluZ1xuICAgICAgICAvLyBTb3J0aW5nIG1ha2VzIHN1cmUgaWYgb25lIG1vbnRoIChvciBhYmJyKSBpcyBhIHByZWZpeCBvZiBhbm90aGVyXG4gICAgICAgIC8vIHNlZSBzb3J0aW5nIGluIGNvbXB1dGVNb250aHNQYXJzZVxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgMTI7IGkrKykge1xuICAgICAgICAgICAgLy8gbWFrZSB0aGUgcmVnZXggaWYgd2UgZG9uJ3QgaGF2ZSBpdCBhbHJlYWR5XG4gICAgICAgICAgICBtb20gPSBjcmVhdGVVVEMoWzIwMDAsIGldKTtcbiAgICAgICAgICAgIGlmIChzdHJpY3QgJiYgIXRoaXMuX2xvbmdNb250aHNQYXJzZVtpXSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2xvbmdNb250aHNQYXJzZVtpXSA9IG5ldyBSZWdFeHAoXG4gICAgICAgICAgICAgICAgICAgICdeJyArIHRoaXMubW9udGhzKG1vbSwgJycpLnJlcGxhY2UoJy4nLCAnJykgKyAnJCcsXG4gICAgICAgICAgICAgICAgICAgICdpJ1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgdGhpcy5fc2hvcnRNb250aHNQYXJzZVtpXSA9IG5ldyBSZWdFeHAoXG4gICAgICAgICAgICAgICAgICAgICdeJyArIHRoaXMubW9udGhzU2hvcnQobW9tLCAnJykucmVwbGFjZSgnLicsICcnKSArICckJyxcbiAgICAgICAgICAgICAgICAgICAgJ2knXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghc3RyaWN0ICYmICF0aGlzLl9tb250aHNQYXJzZVtpXSkge1xuICAgICAgICAgICAgICAgIHJlZ2V4ID1cbiAgICAgICAgICAgICAgICAgICAgJ14nICsgdGhpcy5tb250aHMobW9tLCAnJykgKyAnfF4nICsgdGhpcy5tb250aHNTaG9ydChtb20sICcnKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9tb250aHNQYXJzZVtpXSA9IG5ldyBSZWdFeHAocmVnZXgucmVwbGFjZSgnLicsICcnKSwgJ2knKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHRlc3QgdGhlIHJlZ2V4XG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgc3RyaWN0ICYmXG4gICAgICAgICAgICAgICAgZm9ybWF0ID09PSAnTU1NTScgJiZcbiAgICAgICAgICAgICAgICB0aGlzLl9sb25nTW9udGhzUGFyc2VbaV0udGVzdChtb250aE5hbWUpXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgICAgICAgc3RyaWN0ICYmXG4gICAgICAgICAgICAgICAgZm9ybWF0ID09PSAnTU1NJyAmJlxuICAgICAgICAgICAgICAgIHRoaXMuX3Nob3J0TW9udGhzUGFyc2VbaV0udGVzdChtb250aE5hbWUpXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIXN0cmljdCAmJiB0aGlzLl9tb250aHNQYXJzZVtpXS50ZXN0KG1vbnRoTmFtZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIE1PTUVOVFNcblxuICAgIGZ1bmN0aW9uIHNldE1vbnRoKG1vbSwgdmFsdWUpIHtcbiAgICAgICAgaWYgKCFtb20uaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICAvLyBObyBvcFxuICAgICAgICAgICAgcmV0dXJuIG1vbTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBpZiAoL15cXGQrJC8udGVzdCh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHRvSW50KHZhbHVlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSBtb20ubG9jYWxlRGF0YSgpLm1vbnRoc1BhcnNlKHZhbHVlKTtcbiAgICAgICAgICAgICAgICAvLyBUT0RPOiBBbm90aGVyIHNpbGVudCBmYWlsdXJlP1xuICAgICAgICAgICAgICAgIGlmICghaXNOdW1iZXIodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBtb207XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdmFyIG1vbnRoID0gdmFsdWUsXG4gICAgICAgICAgICBkYXRlID0gbW9tLmRhdGUoKTtcblxuICAgICAgICBkYXRlID0gZGF0ZSA8IDI5ID8gZGF0ZSA6IE1hdGgubWluKGRhdGUsIGRheXNJbk1vbnRoKG1vbS55ZWFyKCksIG1vbnRoKSk7XG4gICAgICAgIHZvaWQgKG1vbS5faXNVVENcbiAgICAgICAgICAgID8gbW9tLl9kLnNldFVUQ01vbnRoKG1vbnRoLCBkYXRlKVxuICAgICAgICAgICAgOiBtb20uX2Quc2V0TW9udGgobW9udGgsIGRhdGUpKTtcbiAgICAgICAgcmV0dXJuIG1vbTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRTZXRNb250aCh2YWx1ZSkge1xuICAgICAgICBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgICAgICAgICAgc2V0TW9udGgodGhpcywgdmFsdWUpO1xuICAgICAgICAgICAgaG9va3MudXBkYXRlT2Zmc2V0KHRoaXMsIHRydWUpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0KHRoaXMsICdNb250aCcpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0RGF5c0luTW9udGgoKSB7XG4gICAgICAgIHJldHVybiBkYXlzSW5Nb250aCh0aGlzLnllYXIoKSwgdGhpcy5tb250aCgpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtb250aHNTaG9ydFJlZ2V4KGlzU3RyaWN0KSB7XG4gICAgICAgIGlmICh0aGlzLl9tb250aHNQYXJzZUV4YWN0KSB7XG4gICAgICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ19tb250aHNSZWdleCcpKSB7XG4gICAgICAgICAgICAgICAgY29tcHV0ZU1vbnRoc1BhcnNlLmNhbGwodGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXNTdHJpY3QpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fbW9udGhzU2hvcnRTdHJpY3RSZWdleDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21vbnRoc1Nob3J0UmVnZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ19tb250aHNTaG9ydFJlZ2V4JykpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9tb250aHNTaG9ydFJlZ2V4ID0gZGVmYXVsdE1vbnRoc1Nob3J0UmVnZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbW9udGhzU2hvcnRTdHJpY3RSZWdleCAmJiBpc1N0cmljdFxuICAgICAgICAgICAgICAgID8gdGhpcy5fbW9udGhzU2hvcnRTdHJpY3RSZWdleFxuICAgICAgICAgICAgICAgIDogdGhpcy5fbW9udGhzU2hvcnRSZWdleDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1vbnRoc1JlZ2V4KGlzU3RyaWN0KSB7XG4gICAgICAgIGlmICh0aGlzLl9tb250aHNQYXJzZUV4YWN0KSB7XG4gICAgICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ19tb250aHNSZWdleCcpKSB7XG4gICAgICAgICAgICAgICAgY29tcHV0ZU1vbnRoc1BhcnNlLmNhbGwodGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXNTdHJpY3QpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fbW9udGhzU3RyaWN0UmVnZXg7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9tb250aHNSZWdleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX21vbnRoc1JlZ2V4JykpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9tb250aHNSZWdleCA9IGRlZmF1bHRNb250aHNSZWdleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9tb250aHNTdHJpY3RSZWdleCAmJiBpc1N0cmljdFxuICAgICAgICAgICAgICAgID8gdGhpcy5fbW9udGhzU3RyaWN0UmVnZXhcbiAgICAgICAgICAgICAgICA6IHRoaXMuX21vbnRoc1JlZ2V4O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY29tcHV0ZU1vbnRoc1BhcnNlKCkge1xuICAgICAgICBmdW5jdGlvbiBjbXBMZW5SZXYoYSwgYikge1xuICAgICAgICAgICAgcmV0dXJuIGIubGVuZ3RoIC0gYS5sZW5ndGg7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgc2hvcnRQaWVjZXMgPSBbXSxcbiAgICAgICAgICAgIGxvbmdQaWVjZXMgPSBbXSxcbiAgICAgICAgICAgIG1peGVkUGllY2VzID0gW10sXG4gICAgICAgICAgICBpLFxuICAgICAgICAgICAgbW9tLFxuICAgICAgICAgICAgc2hvcnRQLFxuICAgICAgICAgICAgbG9uZ1A7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCAxMjsgaSsrKSB7XG4gICAgICAgICAgICAvLyBtYWtlIHRoZSByZWdleCBpZiB3ZSBkb24ndCBoYXZlIGl0IGFscmVhZHlcbiAgICAgICAgICAgIG1vbSA9IGNyZWF0ZVVUQyhbMjAwMCwgaV0pO1xuICAgICAgICAgICAgc2hvcnRQID0gcmVnZXhFc2NhcGUodGhpcy5tb250aHNTaG9ydChtb20sICcnKSk7XG4gICAgICAgICAgICBsb25nUCA9IHJlZ2V4RXNjYXBlKHRoaXMubW9udGhzKG1vbSwgJycpKTtcbiAgICAgICAgICAgIHNob3J0UGllY2VzLnB1c2goc2hvcnRQKTtcbiAgICAgICAgICAgIGxvbmdQaWVjZXMucHVzaChsb25nUCk7XG4gICAgICAgICAgICBtaXhlZFBpZWNlcy5wdXNoKGxvbmdQKTtcbiAgICAgICAgICAgIG1peGVkUGllY2VzLnB1c2goc2hvcnRQKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBTb3J0aW5nIG1ha2VzIHN1cmUgaWYgb25lIG1vbnRoIChvciBhYmJyKSBpcyBhIHByZWZpeCBvZiBhbm90aGVyIGl0XG4gICAgICAgIC8vIHdpbGwgbWF0Y2ggdGhlIGxvbmdlciBwaWVjZS5cbiAgICAgICAgc2hvcnRQaWVjZXMuc29ydChjbXBMZW5SZXYpO1xuICAgICAgICBsb25nUGllY2VzLnNvcnQoY21wTGVuUmV2KTtcbiAgICAgICAgbWl4ZWRQaWVjZXMuc29ydChjbXBMZW5SZXYpO1xuXG4gICAgICAgIHRoaXMuX21vbnRoc1JlZ2V4ID0gbmV3IFJlZ0V4cCgnXignICsgbWl4ZWRQaWVjZXMuam9pbignfCcpICsgJyknLCAnaScpO1xuICAgICAgICB0aGlzLl9tb250aHNTaG9ydFJlZ2V4ID0gdGhpcy5fbW9udGhzUmVnZXg7XG4gICAgICAgIHRoaXMuX21vbnRoc1N0cmljdFJlZ2V4ID0gbmV3IFJlZ0V4cChcbiAgICAgICAgICAgICdeKCcgKyBsb25nUGllY2VzLmpvaW4oJ3wnKSArICcpJyxcbiAgICAgICAgICAgICdpJ1xuICAgICAgICApO1xuICAgICAgICB0aGlzLl9tb250aHNTaG9ydFN0cmljdFJlZ2V4ID0gbmV3IFJlZ0V4cChcbiAgICAgICAgICAgICdeKCcgKyBzaG9ydFBpZWNlcy5qb2luKCd8JykgKyAnKScsXG4gICAgICAgICAgICAnaSdcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVEYXRlKHksIG0sIGQsIGgsIE0sIHMsIG1zKSB7XG4gICAgICAgIC8vIGNhbid0IGp1c3QgYXBwbHkoKSB0byBjcmVhdGUgYSBkYXRlOlxuICAgICAgICAvLyBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3EvMTgxMzQ4XG4gICAgICAgIHZhciBkYXRlO1xuICAgICAgICAvLyB0aGUgZGF0ZSBjb25zdHJ1Y3RvciByZW1hcHMgeWVhcnMgMC05OSB0byAxOTAwLTE5OTlcbiAgICAgICAgaWYgKHkgPCAxMDAgJiYgeSA+PSAwKSB7XG4gICAgICAgICAgICAvLyBwcmVzZXJ2ZSBsZWFwIHllYXJzIHVzaW5nIGEgZnVsbCA0MDAgeWVhciBjeWNsZSwgdGhlbiByZXNldFxuICAgICAgICAgICAgZGF0ZSA9IG5ldyBEYXRlKHkgKyA0MDAsIG0sIGQsIGgsIE0sIHMsIG1zKTtcbiAgICAgICAgICAgIGlmIChpc0Zpbml0ZShkYXRlLmdldEZ1bGxZZWFyKCkpKSB7XG4gICAgICAgICAgICAgICAgZGF0ZS5zZXRGdWxsWWVhcih5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRhdGUgPSBuZXcgRGF0ZSh5LCBtLCBkLCBoLCBNLCBzLCBtcyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZGF0ZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVVVENEYXRlKHkpIHtcbiAgICAgICAgdmFyIGRhdGUsIGFyZ3M7XG4gICAgICAgIC8vIHRoZSBEYXRlLlVUQyBmdW5jdGlvbiByZW1hcHMgeWVhcnMgMC05OSB0byAxOTAwLTE5OTlcbiAgICAgICAgaWYgKHkgPCAxMDAgJiYgeSA+PSAwKSB7XG4gICAgICAgICAgICBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTtcbiAgICAgICAgICAgIC8vIHByZXNlcnZlIGxlYXAgeWVhcnMgdXNpbmcgYSBmdWxsIDQwMCB5ZWFyIGN5Y2xlLCB0aGVuIHJlc2V0XG4gICAgICAgICAgICBhcmdzWzBdID0geSArIDQwMDtcbiAgICAgICAgICAgIGRhdGUgPSBuZXcgRGF0ZShEYXRlLlVUQy5hcHBseShudWxsLCBhcmdzKSk7XG4gICAgICAgICAgICBpZiAoaXNGaW5pdGUoZGF0ZS5nZXRVVENGdWxsWWVhcigpKSkge1xuICAgICAgICAgICAgICAgIGRhdGUuc2V0VVRDRnVsbFllYXIoeSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkYXRlID0gbmV3IERhdGUoRGF0ZS5VVEMuYXBwbHkobnVsbCwgYXJndW1lbnRzKSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZGF0ZTtcbiAgICB9XG5cbiAgICAvLyBzdGFydC1vZi1maXJzdC13ZWVrIC0gc3RhcnQtb2YteWVhclxuICAgIGZ1bmN0aW9uIGZpcnN0V2Vla09mZnNldCh5ZWFyLCBkb3csIGRveSkge1xuICAgICAgICB2YXIgLy8gZmlyc3Qtd2VlayBkYXkgLS0gd2hpY2ggamFudWFyeSBpcyBhbHdheXMgaW4gdGhlIGZpcnN0IHdlZWsgKDQgZm9yIGlzbywgMSBmb3Igb3RoZXIpXG4gICAgICAgICAgICBmd2QgPSA3ICsgZG93IC0gZG95LFxuICAgICAgICAgICAgLy8gZmlyc3Qtd2VlayBkYXkgbG9jYWwgd2Vla2RheSAtLSB3aGljaCBsb2NhbCB3ZWVrZGF5IGlzIGZ3ZFxuICAgICAgICAgICAgZndkbHcgPSAoNyArIGNyZWF0ZVVUQ0RhdGUoeWVhciwgMCwgZndkKS5nZXRVVENEYXkoKSAtIGRvdykgJSA3O1xuXG4gICAgICAgIHJldHVybiAtZndkbHcgKyBmd2QgLSAxO1xuICAgIH1cblxuICAgIC8vIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0lTT193ZWVrX2RhdGUjQ2FsY3VsYXRpbmdfYV9kYXRlX2dpdmVuX3RoZV95ZWFyLjJDX3dlZWtfbnVtYmVyX2FuZF93ZWVrZGF5XG4gICAgZnVuY3Rpb24gZGF5T2ZZZWFyRnJvbVdlZWtzKHllYXIsIHdlZWssIHdlZWtkYXksIGRvdywgZG95KSB7XG4gICAgICAgIHZhciBsb2NhbFdlZWtkYXkgPSAoNyArIHdlZWtkYXkgLSBkb3cpICUgNyxcbiAgICAgICAgICAgIHdlZWtPZmZzZXQgPSBmaXJzdFdlZWtPZmZzZXQoeWVhciwgZG93LCBkb3kpLFxuICAgICAgICAgICAgZGF5T2ZZZWFyID0gMSArIDcgKiAod2VlayAtIDEpICsgbG9jYWxXZWVrZGF5ICsgd2Vla09mZnNldCxcbiAgICAgICAgICAgIHJlc1llYXIsXG4gICAgICAgICAgICByZXNEYXlPZlllYXI7XG5cbiAgICAgICAgaWYgKGRheU9mWWVhciA8PSAwKSB7XG4gICAgICAgICAgICByZXNZZWFyID0geWVhciAtIDE7XG4gICAgICAgICAgICByZXNEYXlPZlllYXIgPSBkYXlzSW5ZZWFyKHJlc1llYXIpICsgZGF5T2ZZZWFyO1xuICAgICAgICB9IGVsc2UgaWYgKGRheU9mWWVhciA+IGRheXNJblllYXIoeWVhcikpIHtcbiAgICAgICAgICAgIHJlc1llYXIgPSB5ZWFyICsgMTtcbiAgICAgICAgICAgIHJlc0RheU9mWWVhciA9IGRheU9mWWVhciAtIGRheXNJblllYXIoeWVhcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXNZZWFyID0geWVhcjtcbiAgICAgICAgICAgIHJlc0RheU9mWWVhciA9IGRheU9mWWVhcjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB5ZWFyOiByZXNZZWFyLFxuICAgICAgICAgICAgZGF5T2ZZZWFyOiByZXNEYXlPZlllYXIsXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gd2Vla09mWWVhcihtb20sIGRvdywgZG95KSB7XG4gICAgICAgIHZhciB3ZWVrT2Zmc2V0ID0gZmlyc3RXZWVrT2Zmc2V0KG1vbS55ZWFyKCksIGRvdywgZG95KSxcbiAgICAgICAgICAgIHdlZWsgPSBNYXRoLmZsb29yKChtb20uZGF5T2ZZZWFyKCkgLSB3ZWVrT2Zmc2V0IC0gMSkgLyA3KSArIDEsXG4gICAgICAgICAgICByZXNXZWVrLFxuICAgICAgICAgICAgcmVzWWVhcjtcblxuICAgICAgICBpZiAod2VlayA8IDEpIHtcbiAgICAgICAgICAgIHJlc1llYXIgPSBtb20ueWVhcigpIC0gMTtcbiAgICAgICAgICAgIHJlc1dlZWsgPSB3ZWVrICsgd2Vla3NJblllYXIocmVzWWVhciwgZG93LCBkb3kpO1xuICAgICAgICB9IGVsc2UgaWYgKHdlZWsgPiB3ZWVrc0luWWVhcihtb20ueWVhcigpLCBkb3csIGRveSkpIHtcbiAgICAgICAgICAgIHJlc1dlZWsgPSB3ZWVrIC0gd2Vla3NJblllYXIobW9tLnllYXIoKSwgZG93LCBkb3kpO1xuICAgICAgICAgICAgcmVzWWVhciA9IG1vbS55ZWFyKCkgKyAxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzWWVhciA9IG1vbS55ZWFyKCk7XG4gICAgICAgICAgICByZXNXZWVrID0gd2VlaztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB3ZWVrOiByZXNXZWVrLFxuICAgICAgICAgICAgeWVhcjogcmVzWWVhcixcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB3ZWVrc0luWWVhcih5ZWFyLCBkb3csIGRveSkge1xuICAgICAgICB2YXIgd2Vla09mZnNldCA9IGZpcnN0V2Vla09mZnNldCh5ZWFyLCBkb3csIGRveSksXG4gICAgICAgICAgICB3ZWVrT2Zmc2V0TmV4dCA9IGZpcnN0V2Vla09mZnNldCh5ZWFyICsgMSwgZG93LCBkb3kpO1xuICAgICAgICByZXR1cm4gKGRheXNJblllYXIoeWVhcikgLSB3ZWVrT2Zmc2V0ICsgd2Vla09mZnNldE5leHQpIC8gNztcbiAgICB9XG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBhZGRGb3JtYXRUb2tlbigndycsIFsnd3cnLCAyXSwgJ3dvJywgJ3dlZWsnKTtcbiAgICBhZGRGb3JtYXRUb2tlbignVycsIFsnV1cnLCAyXSwgJ1dvJywgJ2lzb1dlZWsnKTtcblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ3cnLCBtYXRjaDF0bzIsIG1hdGNoMXRvMk5vTGVhZGluZ1plcm8pO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ3d3JywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ1cnLCBtYXRjaDF0bzIsIG1hdGNoMXRvMk5vTGVhZGluZ1plcm8pO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ1dXJywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuXG4gICAgYWRkV2Vla1BhcnNlVG9rZW4oXG4gICAgICAgIFsndycsICd3dycsICdXJywgJ1dXJ10sXG4gICAgICAgIGZ1bmN0aW9uIChpbnB1dCwgd2VlaywgY29uZmlnLCB0b2tlbikge1xuICAgICAgICAgICAgd2Vla1t0b2tlbi5zdWJzdHIoMCwgMSldID0gdG9JbnQoaW5wdXQpO1xuICAgICAgICB9XG4gICAgKTtcblxuICAgIC8vIEhFTFBFUlNcblxuICAgIC8vIExPQ0FMRVNcblxuICAgIGZ1bmN0aW9uIGxvY2FsZVdlZWsobW9tKSB7XG4gICAgICAgIHJldHVybiB3ZWVrT2ZZZWFyKG1vbSwgdGhpcy5fd2Vlay5kb3csIHRoaXMuX3dlZWsuZG95KS53ZWVrO1xuICAgIH1cblxuICAgIHZhciBkZWZhdWx0TG9jYWxlV2VlayA9IHtcbiAgICAgICAgZG93OiAwLCAvLyBTdW5kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgZG95OiA2LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA2dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGxvY2FsZUZpcnN0RGF5T2ZXZWVrKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fd2Vlay5kb3c7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbG9jYWxlRmlyc3REYXlPZlllYXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl93ZWVrLmRveTtcbiAgICB9XG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICBmdW5jdGlvbiBnZXRTZXRXZWVrKGlucHV0KSB7XG4gICAgICAgIHZhciB3ZWVrID0gdGhpcy5sb2NhbGVEYXRhKCkud2Vlayh0aGlzKTtcbiAgICAgICAgcmV0dXJuIGlucHV0ID09IG51bGwgPyB3ZWVrIDogdGhpcy5hZGQoKGlucHV0IC0gd2VlaykgKiA3LCAnZCcpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFNldElTT1dlZWsoaW5wdXQpIHtcbiAgICAgICAgdmFyIHdlZWsgPSB3ZWVrT2ZZZWFyKHRoaXMsIDEsIDQpLndlZWs7XG4gICAgICAgIHJldHVybiBpbnB1dCA9PSBudWxsID8gd2VlayA6IHRoaXMuYWRkKChpbnB1dCAtIHdlZWspICogNywgJ2QnKTtcbiAgICB9XG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBhZGRGb3JtYXRUb2tlbignZCcsIDAsICdkbycsICdkYXknKTtcblxuICAgIGFkZEZvcm1hdFRva2VuKCdkZCcsIDAsIDAsIGZ1bmN0aW9uIChmb3JtYXQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLndlZWtkYXlzTWluKHRoaXMsIGZvcm1hdCk7XG4gICAgfSk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbignZGRkJywgMCwgMCwgZnVuY3Rpb24gKGZvcm1hdCkge1xuICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkud2Vla2RheXNTaG9ydCh0aGlzLCBmb3JtYXQpO1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ2RkZGQnLCAwLCAwLCBmdW5jdGlvbiAoZm9ybWF0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS53ZWVrZGF5cyh0aGlzLCBmb3JtYXQpO1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ2UnLCAwLCAwLCAnd2Vla2RheScpO1xuICAgIGFkZEZvcm1hdFRva2VuKCdFJywgMCwgMCwgJ2lzb1dlZWtkYXknKTtcblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ2QnLCBtYXRjaDF0bzIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ2UnLCBtYXRjaDF0bzIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ0UnLCBtYXRjaDF0bzIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ2RkJywgZnVuY3Rpb24gKGlzU3RyaWN0LCBsb2NhbGUpIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsZS53ZWVrZGF5c01pblJlZ2V4KGlzU3RyaWN0KTtcbiAgICB9KTtcbiAgICBhZGRSZWdleFRva2VuKCdkZGQnLCBmdW5jdGlvbiAoaXNTdHJpY3QsIGxvY2FsZSkge1xuICAgICAgICByZXR1cm4gbG9jYWxlLndlZWtkYXlzU2hvcnRSZWdleChpc1N0cmljdCk7XG4gICAgfSk7XG4gICAgYWRkUmVnZXhUb2tlbignZGRkZCcsIGZ1bmN0aW9uIChpc1N0cmljdCwgbG9jYWxlKSB7XG4gICAgICAgIHJldHVybiBsb2NhbGUud2Vla2RheXNSZWdleChpc1N0cmljdCk7XG4gICAgfSk7XG5cbiAgICBhZGRXZWVrUGFyc2VUb2tlbihbJ2RkJywgJ2RkZCcsICdkZGRkJ10sIGZ1bmN0aW9uIChpbnB1dCwgd2VlaywgY29uZmlnLCB0b2tlbikge1xuICAgICAgICB2YXIgd2Vla2RheSA9IGNvbmZpZy5fbG9jYWxlLndlZWtkYXlzUGFyc2UoaW5wdXQsIHRva2VuLCBjb25maWcuX3N0cmljdCk7XG4gICAgICAgIC8vIGlmIHdlIGRpZG4ndCBnZXQgYSB3ZWVrZGF5IG5hbWUsIG1hcmsgdGhlIGRhdGUgYXMgaW52YWxpZFxuICAgICAgICBpZiAod2Vla2RheSAhPSBudWxsKSB7XG4gICAgICAgICAgICB3ZWVrLmQgPSB3ZWVrZGF5O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuaW52YWxpZFdlZWtkYXkgPSBpbnB1dDtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgYWRkV2Vla1BhcnNlVG9rZW4oWydkJywgJ2UnLCAnRSddLCBmdW5jdGlvbiAoaW5wdXQsIHdlZWssIGNvbmZpZywgdG9rZW4pIHtcbiAgICAgICAgd2Vla1t0b2tlbl0gPSB0b0ludChpbnB1dCk7XG4gICAgfSk7XG5cbiAgICAvLyBIRUxQRVJTXG5cbiAgICBmdW5jdGlvbiBwYXJzZVdlZWtkYXkoaW5wdXQsIGxvY2FsZSkge1xuICAgICAgICBpZiAodHlwZW9mIGlucHV0ICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFpc05hTihpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBwYXJzZUludChpbnB1dCwgMTApO1xuICAgICAgICB9XG5cbiAgICAgICAgaW5wdXQgPSBsb2NhbGUud2Vla2RheXNQYXJzZShpbnB1dCk7XG4gICAgICAgIGlmICh0eXBlb2YgaW5wdXQgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICByZXR1cm4gaW5wdXQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwYXJzZUlzb1dlZWtkYXkoaW5wdXQsIGxvY2FsZSkge1xuICAgICAgICBpZiAodHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgcmV0dXJuIGxvY2FsZS53ZWVrZGF5c1BhcnNlKGlucHV0KSAlIDcgfHwgNztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaXNOYU4oaW5wdXQpID8gbnVsbCA6IGlucHV0O1xuICAgIH1cblxuICAgIC8vIExPQ0FMRVNcbiAgICBmdW5jdGlvbiBzaGlmdFdlZWtkYXlzKHdzLCBuKSB7XG4gICAgICAgIHJldHVybiB3cy5zbGljZShuLCA3KS5jb25jYXQod3Muc2xpY2UoMCwgbikpO1xuICAgIH1cblxuICAgIHZhciBkZWZhdWx0TG9jYWxlV2Vla2RheXMgPVxuICAgICAgICAgICAgJ1N1bmRheV9Nb25kYXlfVHVlc2RheV9XZWRuZXNkYXlfVGh1cnNkYXlfRnJpZGF5X1NhdHVyZGF5Jy5zcGxpdCgnXycpLFxuICAgICAgICBkZWZhdWx0TG9jYWxlV2Vla2RheXNTaG9ydCA9ICdTdW5fTW9uX1R1ZV9XZWRfVGh1X0ZyaV9TYXQnLnNwbGl0KCdfJyksXG4gICAgICAgIGRlZmF1bHRMb2NhbGVXZWVrZGF5c01pbiA9ICdTdV9Nb19UdV9XZV9UaF9Gcl9TYScuc3BsaXQoJ18nKSxcbiAgICAgICAgZGVmYXVsdFdlZWtkYXlzUmVnZXggPSBtYXRjaFdvcmQsXG4gICAgICAgIGRlZmF1bHRXZWVrZGF5c1Nob3J0UmVnZXggPSBtYXRjaFdvcmQsXG4gICAgICAgIGRlZmF1bHRXZWVrZGF5c01pblJlZ2V4ID0gbWF0Y2hXb3JkO1xuXG4gICAgZnVuY3Rpb24gbG9jYWxlV2Vla2RheXMobSwgZm9ybWF0KSB7XG4gICAgICAgIHZhciB3ZWVrZGF5cyA9IGlzQXJyYXkodGhpcy5fd2Vla2RheXMpXG4gICAgICAgICAgICA/IHRoaXMuX3dlZWtkYXlzXG4gICAgICAgICAgICA6IHRoaXMuX3dlZWtkYXlzW1xuICAgICAgICAgICAgICAgICAgbSAmJiBtICE9PSB0cnVlICYmIHRoaXMuX3dlZWtkYXlzLmlzRm9ybWF0LnRlc3QoZm9ybWF0KVxuICAgICAgICAgICAgICAgICAgICAgID8gJ2Zvcm1hdCdcbiAgICAgICAgICAgICAgICAgICAgICA6ICdzdGFuZGFsb25lJ1xuICAgICAgICAgICAgICBdO1xuICAgICAgICByZXR1cm4gbSA9PT0gdHJ1ZVxuICAgICAgICAgICAgPyBzaGlmdFdlZWtkYXlzKHdlZWtkYXlzLCB0aGlzLl93ZWVrLmRvdylcbiAgICAgICAgICAgIDogbVxuICAgICAgICAgICAgICA/IHdlZWtkYXlzW20uZGF5KCldXG4gICAgICAgICAgICAgIDogd2Vla2RheXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbG9jYWxlV2Vla2RheXNTaG9ydChtKSB7XG4gICAgICAgIHJldHVybiBtID09PSB0cnVlXG4gICAgICAgICAgICA/IHNoaWZ0V2Vla2RheXModGhpcy5fd2Vla2RheXNTaG9ydCwgdGhpcy5fd2Vlay5kb3cpXG4gICAgICAgICAgICA6IG1cbiAgICAgICAgICAgICAgPyB0aGlzLl93ZWVrZGF5c1Nob3J0W20uZGF5KCldXG4gICAgICAgICAgICAgIDogdGhpcy5fd2Vla2RheXNTaG9ydDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsb2NhbGVXZWVrZGF5c01pbihtKSB7XG4gICAgICAgIHJldHVybiBtID09PSB0cnVlXG4gICAgICAgICAgICA/IHNoaWZ0V2Vla2RheXModGhpcy5fd2Vla2RheXNNaW4sIHRoaXMuX3dlZWsuZG93KVxuICAgICAgICAgICAgOiBtXG4gICAgICAgICAgICAgID8gdGhpcy5fd2Vla2RheXNNaW5bbS5kYXkoKV1cbiAgICAgICAgICAgICAgOiB0aGlzLl93ZWVrZGF5c01pbjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBoYW5kbGVTdHJpY3RQYXJzZSQxKHdlZWtkYXlOYW1lLCBmb3JtYXQsIHN0cmljdCkge1xuICAgICAgICB2YXIgaSxcbiAgICAgICAgICAgIGlpLFxuICAgICAgICAgICAgbW9tLFxuICAgICAgICAgICAgbGxjID0gd2Vla2RheU5hbWUudG9Mb2NhbGVMb3dlckNhc2UoKTtcbiAgICAgICAgaWYgKCF0aGlzLl93ZWVrZGF5c1BhcnNlKSB7XG4gICAgICAgICAgICB0aGlzLl93ZWVrZGF5c1BhcnNlID0gW107XG4gICAgICAgICAgICB0aGlzLl9zaG9ydFdlZWtkYXlzUGFyc2UgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuX21pbldlZWtkYXlzUGFyc2UgPSBbXTtcblxuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IDc7ICsraSkge1xuICAgICAgICAgICAgICAgIG1vbSA9IGNyZWF0ZVVUQyhbMjAwMCwgMV0pLmRheShpKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9taW5XZWVrZGF5c1BhcnNlW2ldID0gdGhpcy53ZWVrZGF5c01pbihcbiAgICAgICAgICAgICAgICAgICAgbW9tLFxuICAgICAgICAgICAgICAgICAgICAnJ1xuICAgICAgICAgICAgICAgICkudG9Mb2NhbGVMb3dlckNhc2UoKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9zaG9ydFdlZWtkYXlzUGFyc2VbaV0gPSB0aGlzLndlZWtkYXlzU2hvcnQoXG4gICAgICAgICAgICAgICAgICAgIG1vbSxcbiAgICAgICAgICAgICAgICAgICAgJydcbiAgICAgICAgICAgICAgICApLnRvTG9jYWxlTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fd2Vla2RheXNQYXJzZVtpXSA9IHRoaXMud2Vla2RheXMobW9tLCAnJykudG9Mb2NhbGVMb3dlckNhc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzdHJpY3QpIHtcbiAgICAgICAgICAgIGlmIChmb3JtYXQgPT09ICdkZGRkJykge1xuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX3dlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlpICE9PSAtMSA/IGlpIDogbnVsbDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZm9ybWF0ID09PSAnZGRkJykge1xuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX3Nob3J0V2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gaWkgIT09IC0xID8gaWkgOiBudWxsO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9taW5XZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBpaSAhPT0gLTEgPyBpaSA6IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoZm9ybWF0ID09PSAnZGRkZCcpIHtcbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl93ZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIGlmIChpaSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9zaG9ydFdlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgaWYgKGlpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaWk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX21pbldlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlpICE9PSAtMSA/IGlpIDogbnVsbDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZm9ybWF0ID09PSAnZGRkJykge1xuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX3Nob3J0V2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICBpZiAoaWkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpaTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fd2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICBpZiAoaWkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpaTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fbWluV2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gaWkgIT09IC0xID8gaWkgOiBudWxsO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9taW5XZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIGlmIChpaSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl93ZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIGlmIChpaSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9zaG9ydFdlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlpICE9PSAtMSA/IGlpIDogbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxvY2FsZVdlZWtkYXlzUGFyc2Uod2Vla2RheU5hbWUsIGZvcm1hdCwgc3RyaWN0KSB7XG4gICAgICAgIHZhciBpLCBtb20sIHJlZ2V4O1xuXG4gICAgICAgIGlmICh0aGlzLl93ZWVrZGF5c1BhcnNlRXhhY3QpIHtcbiAgICAgICAgICAgIHJldHVybiBoYW5kbGVTdHJpY3RQYXJzZSQxLmNhbGwodGhpcywgd2Vla2RheU5hbWUsIGZvcm1hdCwgc3RyaWN0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdGhpcy5fd2Vla2RheXNQYXJzZSkge1xuICAgICAgICAgICAgdGhpcy5fd2Vla2RheXNQYXJzZSA9IFtdO1xuICAgICAgICAgICAgdGhpcy5fbWluV2Vla2RheXNQYXJzZSA9IFtdO1xuICAgICAgICAgICAgdGhpcy5fc2hvcnRXZWVrZGF5c1BhcnNlID0gW107XG4gICAgICAgICAgICB0aGlzLl9mdWxsV2Vla2RheXNQYXJzZSA9IFtdO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IDc7IGkrKykge1xuICAgICAgICAgICAgLy8gbWFrZSB0aGUgcmVnZXggaWYgd2UgZG9uJ3QgaGF2ZSBpdCBhbHJlYWR5XG5cbiAgICAgICAgICAgIG1vbSA9IGNyZWF0ZVVUQyhbMjAwMCwgMV0pLmRheShpKTtcbiAgICAgICAgICAgIGlmIChzdHJpY3QgJiYgIXRoaXMuX2Z1bGxXZWVrZGF5c1BhcnNlW2ldKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZnVsbFdlZWtkYXlzUGFyc2VbaV0gPSBuZXcgUmVnRXhwKFxuICAgICAgICAgICAgICAgICAgICAnXicgKyB0aGlzLndlZWtkYXlzKG1vbSwgJycpLnJlcGxhY2UoJy4nLCAnXFxcXC4/JykgKyAnJCcsXG4gICAgICAgICAgICAgICAgICAgICdpJ1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgdGhpcy5fc2hvcnRXZWVrZGF5c1BhcnNlW2ldID0gbmV3IFJlZ0V4cChcbiAgICAgICAgICAgICAgICAgICAgJ14nICsgdGhpcy53ZWVrZGF5c1Nob3J0KG1vbSwgJycpLnJlcGxhY2UoJy4nLCAnXFxcXC4/JykgKyAnJCcsXG4gICAgICAgICAgICAgICAgICAgICdpJ1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgdGhpcy5fbWluV2Vla2RheXNQYXJzZVtpXSA9IG5ldyBSZWdFeHAoXG4gICAgICAgICAgICAgICAgICAgICdeJyArIHRoaXMud2Vla2RheXNNaW4obW9tLCAnJykucmVwbGFjZSgnLicsICdcXFxcLj8nKSArICckJyxcbiAgICAgICAgICAgICAgICAgICAgJ2knXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghdGhpcy5fd2Vla2RheXNQYXJzZVtpXSkge1xuICAgICAgICAgICAgICAgIHJlZ2V4ID1cbiAgICAgICAgICAgICAgICAgICAgJ14nICtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy53ZWVrZGF5cyhtb20sICcnKSArXG4gICAgICAgICAgICAgICAgICAgICd8XicgK1xuICAgICAgICAgICAgICAgICAgICB0aGlzLndlZWtkYXlzU2hvcnQobW9tLCAnJykgK1xuICAgICAgICAgICAgICAgICAgICAnfF4nICtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy53ZWVrZGF5c01pbihtb20sICcnKTtcbiAgICAgICAgICAgICAgICB0aGlzLl93ZWVrZGF5c1BhcnNlW2ldID0gbmV3IFJlZ0V4cChyZWdleC5yZXBsYWNlKCcuJywgJycpLCAnaScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gdGVzdCB0aGUgcmVnZXhcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICBzdHJpY3QgJiZcbiAgICAgICAgICAgICAgICBmb3JtYXQgPT09ICdkZGRkJyAmJlxuICAgICAgICAgICAgICAgIHRoaXMuX2Z1bGxXZWVrZGF5c1BhcnNlW2ldLnRlc3Qod2Vla2RheU5hbWUpXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgICAgICAgc3RyaWN0ICYmXG4gICAgICAgICAgICAgICAgZm9ybWF0ID09PSAnZGRkJyAmJlxuICAgICAgICAgICAgICAgIHRoaXMuX3Nob3J0V2Vla2RheXNQYXJzZVtpXS50ZXN0KHdlZWtkYXlOYW1lKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgICAgICAgIHN0cmljdCAmJlxuICAgICAgICAgICAgICAgIGZvcm1hdCA9PT0gJ2RkJyAmJlxuICAgICAgICAgICAgICAgIHRoaXMuX21pbldlZWtkYXlzUGFyc2VbaV0udGVzdCh3ZWVrZGF5TmFtZSlcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICghc3RyaWN0ICYmIHRoaXMuX3dlZWtkYXlzUGFyc2VbaV0udGVzdCh3ZWVrZGF5TmFtZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIE1PTUVOVFNcblxuICAgIGZ1bmN0aW9uIGdldFNldERheU9mV2VlayhpbnB1dCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gaW5wdXQgIT0gbnVsbCA/IHRoaXMgOiBOYU47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZGF5ID0gZ2V0KHRoaXMsICdEYXknKTtcbiAgICAgICAgaWYgKGlucHV0ICE9IG51bGwpIHtcbiAgICAgICAgICAgIGlucHV0ID0gcGFyc2VXZWVrZGF5KGlucHV0LCB0aGlzLmxvY2FsZURhdGEoKSk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5hZGQoaW5wdXQgLSBkYXksICdkJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZGF5O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0U2V0TG9jYWxlRGF5T2ZXZWVrKGlucHV0KSB7XG4gICAgICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dCAhPSBudWxsID8gdGhpcyA6IE5hTjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgd2Vla2RheSA9ICh0aGlzLmRheSgpICsgNyAtIHRoaXMubG9jYWxlRGF0YSgpLl93ZWVrLmRvdykgJSA3O1xuICAgICAgICByZXR1cm4gaW5wdXQgPT0gbnVsbCA/IHdlZWtkYXkgOiB0aGlzLmFkZChpbnB1dCAtIHdlZWtkYXksICdkJyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0U2V0SVNPRGF5T2ZXZWVrKGlucHV0KSB7XG4gICAgICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dCAhPSBudWxsID8gdGhpcyA6IE5hTjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGJlaGF2ZXMgdGhlIHNhbWUgYXMgbW9tZW50I2RheSBleGNlcHRcbiAgICAgICAgLy8gYXMgYSBnZXR0ZXIsIHJldHVybnMgNyBpbnN0ZWFkIG9mIDAgKDEtNyByYW5nZSBpbnN0ZWFkIG9mIDAtNilcbiAgICAgICAgLy8gYXMgYSBzZXR0ZXIsIHN1bmRheSBzaG91bGQgYmVsb25nIHRvIHRoZSBwcmV2aW91cyB3ZWVrLlxuXG4gICAgICAgIGlmIChpbnB1dCAhPSBudWxsKSB7XG4gICAgICAgICAgICB2YXIgd2Vla2RheSA9IHBhcnNlSXNvV2Vla2RheShpbnB1dCwgdGhpcy5sb2NhbGVEYXRhKCkpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGF5KHRoaXMuZGF5KCkgJSA3ID8gd2Vla2RheSA6IHdlZWtkYXkgLSA3KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRheSgpIHx8IDc7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiB3ZWVrZGF5c1JlZ2V4KGlzU3RyaWN0KSB7XG4gICAgICAgIGlmICh0aGlzLl93ZWVrZGF5c1BhcnNlRXhhY3QpIHtcbiAgICAgICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX3dlZWtkYXlzUmVnZXgnKSkge1xuICAgICAgICAgICAgICAgIGNvbXB1dGVXZWVrZGF5c1BhcnNlLmNhbGwodGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXNTdHJpY3QpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fd2Vla2RheXNTdHJpY3RSZWdleDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWtkYXlzUmVnZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ193ZWVrZGF5c1JlZ2V4JykpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl93ZWVrZGF5c1JlZ2V4ID0gZGVmYXVsdFdlZWtkYXlzUmVnZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fd2Vla2RheXNTdHJpY3RSZWdleCAmJiBpc1N0cmljdFxuICAgICAgICAgICAgICAgID8gdGhpcy5fd2Vla2RheXNTdHJpY3RSZWdleFxuICAgICAgICAgICAgICAgIDogdGhpcy5fd2Vla2RheXNSZWdleDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHdlZWtkYXlzU2hvcnRSZWdleChpc1N0cmljdCkge1xuICAgICAgICBpZiAodGhpcy5fd2Vla2RheXNQYXJzZUV4YWN0KSB7XG4gICAgICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ193ZWVrZGF5c1JlZ2V4JykpIHtcbiAgICAgICAgICAgICAgICBjb21wdXRlV2Vla2RheXNQYXJzZS5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlzU3RyaWN0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWtkYXlzU2hvcnRTdHJpY3RSZWdleDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWtkYXlzU2hvcnRSZWdleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX3dlZWtkYXlzU2hvcnRSZWdleCcpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fd2Vla2RheXNTaG9ydFJlZ2V4ID0gZGVmYXVsdFdlZWtkYXlzU2hvcnRSZWdleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLl93ZWVrZGF5c1Nob3J0U3RyaWN0UmVnZXggJiYgaXNTdHJpY3RcbiAgICAgICAgICAgICAgICA/IHRoaXMuX3dlZWtkYXlzU2hvcnRTdHJpY3RSZWdleFxuICAgICAgICAgICAgICAgIDogdGhpcy5fd2Vla2RheXNTaG9ydFJlZ2V4O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gd2Vla2RheXNNaW5SZWdleChpc1N0cmljdCkge1xuICAgICAgICBpZiAodGhpcy5fd2Vla2RheXNQYXJzZUV4YWN0KSB7XG4gICAgICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ193ZWVrZGF5c1JlZ2V4JykpIHtcbiAgICAgICAgICAgICAgICBjb21wdXRlV2Vla2RheXNQYXJzZS5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlzU3RyaWN0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWtkYXlzTWluU3RyaWN0UmVnZXg7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl93ZWVrZGF5c01pblJlZ2V4O1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfd2Vla2RheXNNaW5SZWdleCcpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fd2Vla2RheXNNaW5SZWdleCA9IGRlZmF1bHRXZWVrZGF5c01pblJlZ2V4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWtkYXlzTWluU3RyaWN0UmVnZXggJiYgaXNTdHJpY3RcbiAgICAgICAgICAgICAgICA/IHRoaXMuX3dlZWtkYXlzTWluU3RyaWN0UmVnZXhcbiAgICAgICAgICAgICAgICA6IHRoaXMuX3dlZWtkYXlzTWluUmVnZXg7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb21wdXRlV2Vla2RheXNQYXJzZSgpIHtcbiAgICAgICAgZnVuY3Rpb24gY21wTGVuUmV2KGEsIGIpIHtcbiAgICAgICAgICAgIHJldHVybiBiLmxlbmd0aCAtIGEubGVuZ3RoO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIG1pblBpZWNlcyA9IFtdLFxuICAgICAgICAgICAgc2hvcnRQaWVjZXMgPSBbXSxcbiAgICAgICAgICAgIGxvbmdQaWVjZXMgPSBbXSxcbiAgICAgICAgICAgIG1peGVkUGllY2VzID0gW10sXG4gICAgICAgICAgICBpLFxuICAgICAgICAgICAgbW9tLFxuICAgICAgICAgICAgbWlucCxcbiAgICAgICAgICAgIHNob3J0cCxcbiAgICAgICAgICAgIGxvbmdwO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgNzsgaSsrKSB7XG4gICAgICAgICAgICAvLyBtYWtlIHRoZSByZWdleCBpZiB3ZSBkb24ndCBoYXZlIGl0IGFscmVhZHlcbiAgICAgICAgICAgIG1vbSA9IGNyZWF0ZVVUQyhbMjAwMCwgMV0pLmRheShpKTtcbiAgICAgICAgICAgIG1pbnAgPSByZWdleEVzY2FwZSh0aGlzLndlZWtkYXlzTWluKG1vbSwgJycpKTtcbiAgICAgICAgICAgIHNob3J0cCA9IHJlZ2V4RXNjYXBlKHRoaXMud2Vla2RheXNTaG9ydChtb20sICcnKSk7XG4gICAgICAgICAgICBsb25ncCA9IHJlZ2V4RXNjYXBlKHRoaXMud2Vla2RheXMobW9tLCAnJykpO1xuICAgICAgICAgICAgbWluUGllY2VzLnB1c2gobWlucCk7XG4gICAgICAgICAgICBzaG9ydFBpZWNlcy5wdXNoKHNob3J0cCk7XG4gICAgICAgICAgICBsb25nUGllY2VzLnB1c2gobG9uZ3ApO1xuICAgICAgICAgICAgbWl4ZWRQaWVjZXMucHVzaChtaW5wKTtcbiAgICAgICAgICAgIG1peGVkUGllY2VzLnB1c2goc2hvcnRwKTtcbiAgICAgICAgICAgIG1peGVkUGllY2VzLnB1c2gobG9uZ3ApO1xuICAgICAgICB9XG4gICAgICAgIC8vIFNvcnRpbmcgbWFrZXMgc3VyZSBpZiBvbmUgd2Vla2RheSAob3IgYWJicikgaXMgYSBwcmVmaXggb2YgYW5vdGhlciBpdFxuICAgICAgICAvLyB3aWxsIG1hdGNoIHRoZSBsb25nZXIgcGllY2UuXG4gICAgICAgIG1pblBpZWNlcy5zb3J0KGNtcExlblJldik7XG4gICAgICAgIHNob3J0UGllY2VzLnNvcnQoY21wTGVuUmV2KTtcbiAgICAgICAgbG9uZ1BpZWNlcy5zb3J0KGNtcExlblJldik7XG4gICAgICAgIG1peGVkUGllY2VzLnNvcnQoY21wTGVuUmV2KTtcblxuICAgICAgICB0aGlzLl93ZWVrZGF5c1JlZ2V4ID0gbmV3IFJlZ0V4cCgnXignICsgbWl4ZWRQaWVjZXMuam9pbignfCcpICsgJyknLCAnaScpO1xuICAgICAgICB0aGlzLl93ZWVrZGF5c1Nob3J0UmVnZXggPSB0aGlzLl93ZWVrZGF5c1JlZ2V4O1xuICAgICAgICB0aGlzLl93ZWVrZGF5c01pblJlZ2V4ID0gdGhpcy5fd2Vla2RheXNSZWdleDtcblxuICAgICAgICB0aGlzLl93ZWVrZGF5c1N0cmljdFJlZ2V4ID0gbmV3IFJlZ0V4cChcbiAgICAgICAgICAgICdeKCcgKyBsb25nUGllY2VzLmpvaW4oJ3wnKSArICcpJyxcbiAgICAgICAgICAgICdpJ1xuICAgICAgICApO1xuICAgICAgICB0aGlzLl93ZWVrZGF5c1Nob3J0U3RyaWN0UmVnZXggPSBuZXcgUmVnRXhwKFxuICAgICAgICAgICAgJ14oJyArIHNob3J0UGllY2VzLmpvaW4oJ3wnKSArICcpJyxcbiAgICAgICAgICAgICdpJ1xuICAgICAgICApO1xuICAgICAgICB0aGlzLl93ZWVrZGF5c01pblN0cmljdFJlZ2V4ID0gbmV3IFJlZ0V4cChcbiAgICAgICAgICAgICdeKCcgKyBtaW5QaWVjZXMuam9pbignfCcpICsgJyknLFxuICAgICAgICAgICAgJ2knXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgZnVuY3Rpb24gaEZvcm1hdCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaG91cnMoKSAlIDEyIHx8IDEyO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGtGb3JtYXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmhvdXJzKCkgfHwgMjQ7XG4gICAgfVxuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ0gnLCBbJ0hIJywgMl0sIDAsICdob3VyJyk7XG4gICAgYWRkRm9ybWF0VG9rZW4oJ2gnLCBbJ2hoJywgMl0sIDAsIGhGb3JtYXQpO1xuICAgIGFkZEZvcm1hdFRva2VuKCdrJywgWydraycsIDJdLCAwLCBrRm9ybWF0KTtcblxuICAgIGFkZEZvcm1hdFRva2VuKCdobW0nLCAwLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAnJyArIGhGb3JtYXQuYXBwbHkodGhpcykgKyB6ZXJvRmlsbCh0aGlzLm1pbnV0ZXMoKSwgMik7XG4gICAgfSk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbignaG1tc3MnLCAwLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAnJyArXG4gICAgICAgICAgICBoRm9ybWF0LmFwcGx5KHRoaXMpICtcbiAgICAgICAgICAgIHplcm9GaWxsKHRoaXMubWludXRlcygpLCAyKSArXG4gICAgICAgICAgICB6ZXJvRmlsbCh0aGlzLnNlY29uZHMoKSwgMilcbiAgICAgICAgKTtcbiAgICB9KTtcblxuICAgIGFkZEZvcm1hdFRva2VuKCdIbW0nLCAwLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAnJyArIHRoaXMuaG91cnMoKSArIHplcm9GaWxsKHRoaXMubWludXRlcygpLCAyKTtcbiAgICB9KTtcblxuICAgIGFkZEZvcm1hdFRva2VuKCdIbW1zcycsIDAsIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICcnICtcbiAgICAgICAgICAgIHRoaXMuaG91cnMoKSArXG4gICAgICAgICAgICB6ZXJvRmlsbCh0aGlzLm1pbnV0ZXMoKSwgMikgK1xuICAgICAgICAgICAgemVyb0ZpbGwodGhpcy5zZWNvbmRzKCksIDIpXG4gICAgICAgICk7XG4gICAgfSk7XG5cbiAgICBmdW5jdGlvbiBtZXJpZGllbSh0b2tlbiwgbG93ZXJjYXNlKSB7XG4gICAgICAgIGFkZEZvcm1hdFRva2VuKHRva2VuLCAwLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkubWVyaWRpZW0oXG4gICAgICAgICAgICAgICAgdGhpcy5ob3VycygpLFxuICAgICAgICAgICAgICAgIHRoaXMubWludXRlcygpLFxuICAgICAgICAgICAgICAgIGxvd2VyY2FzZVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgbWVyaWRpZW0oJ2EnLCB0cnVlKTtcbiAgICBtZXJpZGllbSgnQScsIGZhbHNlKTtcblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGZ1bmN0aW9uIG1hdGNoTWVyaWRpZW0oaXNTdHJpY3QsIGxvY2FsZSkge1xuICAgICAgICByZXR1cm4gbG9jYWxlLl9tZXJpZGllbVBhcnNlO1xuICAgIH1cblxuICAgIGFkZFJlZ2V4VG9rZW4oJ2EnLCBtYXRjaE1lcmlkaWVtKTtcbiAgICBhZGRSZWdleFRva2VuKCdBJywgbWF0Y2hNZXJpZGllbSk7XG4gICAgYWRkUmVnZXhUb2tlbignSCcsIG1hdGNoMXRvMiwgbWF0Y2gxdG8ySGFzWmVybyk7XG4gICAgYWRkUmVnZXhUb2tlbignaCcsIG1hdGNoMXRvMiwgbWF0Y2gxdG8yTm9MZWFkaW5nWmVybyk7XG4gICAgYWRkUmVnZXhUb2tlbignaycsIG1hdGNoMXRvMiwgbWF0Y2gxdG8yTm9MZWFkaW5nWmVybyk7XG4gICAgYWRkUmVnZXhUb2tlbignSEgnLCBtYXRjaDF0bzIsIG1hdGNoMik7XG4gICAgYWRkUmVnZXhUb2tlbignaGgnLCBtYXRjaDF0bzIsIG1hdGNoMik7XG4gICAgYWRkUmVnZXhUb2tlbigna2snLCBtYXRjaDF0bzIsIG1hdGNoMik7XG5cbiAgICBhZGRSZWdleFRva2VuKCdobW0nLCBtYXRjaDN0bzQpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ2htbXNzJywgbWF0Y2g1dG82KTtcbiAgICBhZGRSZWdleFRva2VuKCdIbW0nLCBtYXRjaDN0bzQpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ0htbXNzJywgbWF0Y2g1dG82KTtcblxuICAgIGFkZFBhcnNlVG9rZW4oWydIJywgJ0hIJ10sIEhPVVIpO1xuICAgIGFkZFBhcnNlVG9rZW4oWydrJywgJ2trJ10sIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgICAgICB2YXIga0lucHV0ID0gdG9JbnQoaW5wdXQpO1xuICAgICAgICBhcnJheVtIT1VSXSA9IGtJbnB1dCA9PT0gMjQgPyAwIDoga0lucHV0O1xuICAgIH0pO1xuICAgIGFkZFBhcnNlVG9rZW4oWydhJywgJ0EnXSwgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgICAgIGNvbmZpZy5faXNQbSA9IGNvbmZpZy5fbG9jYWxlLmlzUE0oaW5wdXQpO1xuICAgICAgICBjb25maWcuX21lcmlkaWVtID0gaW5wdXQ7XG4gICAgfSk7XG4gICAgYWRkUGFyc2VUb2tlbihbJ2gnLCAnaGgnXSwgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgICAgIGFycmF5W0hPVVJdID0gdG9JbnQoaW5wdXQpO1xuICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5iaWdIb3VyID0gdHJ1ZTtcbiAgICB9KTtcbiAgICBhZGRQYXJzZVRva2VuKCdobW0nLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICAgICAgdmFyIHBvcyA9IGlucHV0Lmxlbmd0aCAtIDI7XG4gICAgICAgIGFycmF5W0hPVVJdID0gdG9JbnQoaW5wdXQuc3Vic3RyKDAsIHBvcykpO1xuICAgICAgICBhcnJheVtNSU5VVEVdID0gdG9JbnQoaW5wdXQuc3Vic3RyKHBvcykpO1xuICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5iaWdIb3VyID0gdHJ1ZTtcbiAgICB9KTtcbiAgICBhZGRQYXJzZVRva2VuKCdobW1zcycsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgICAgICB2YXIgcG9zMSA9IGlucHV0Lmxlbmd0aCAtIDQsXG4gICAgICAgICAgICBwb3MyID0gaW5wdXQubGVuZ3RoIC0gMjtcbiAgICAgICAgYXJyYXlbSE9VUl0gPSB0b0ludChpbnB1dC5zdWJzdHIoMCwgcG9zMSkpO1xuICAgICAgICBhcnJheVtNSU5VVEVdID0gdG9JbnQoaW5wdXQuc3Vic3RyKHBvczEsIDIpKTtcbiAgICAgICAgYXJyYXlbU0VDT05EXSA9IHRvSW50KGlucHV0LnN1YnN0cihwb3MyKSk7XG4gICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmJpZ0hvdXIgPSB0cnVlO1xuICAgIH0pO1xuICAgIGFkZFBhcnNlVG9rZW4oJ0htbScsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgICAgICB2YXIgcG9zID0gaW5wdXQubGVuZ3RoIC0gMjtcbiAgICAgICAgYXJyYXlbSE9VUl0gPSB0b0ludChpbnB1dC5zdWJzdHIoMCwgcG9zKSk7XG4gICAgICAgIGFycmF5W01JTlVURV0gPSB0b0ludChpbnB1dC5zdWJzdHIocG9zKSk7XG4gICAgfSk7XG4gICAgYWRkUGFyc2VUb2tlbignSG1tc3MnLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICAgICAgdmFyIHBvczEgPSBpbnB1dC5sZW5ndGggLSA0LFxuICAgICAgICAgICAgcG9zMiA9IGlucHV0Lmxlbmd0aCAtIDI7XG4gICAgICAgIGFycmF5W0hPVVJdID0gdG9JbnQoaW5wdXQuc3Vic3RyKDAsIHBvczEpKTtcbiAgICAgICAgYXJyYXlbTUlOVVRFXSA9IHRvSW50KGlucHV0LnN1YnN0cihwb3MxLCAyKSk7XG4gICAgICAgIGFycmF5W1NFQ09ORF0gPSB0b0ludChpbnB1dC5zdWJzdHIocG9zMikpO1xuICAgIH0pO1xuXG4gICAgLy8gTE9DQUxFU1xuXG4gICAgZnVuY3Rpb24gbG9jYWxlSXNQTShpbnB1dCkge1xuICAgICAgICAvLyBJRTggUXVpcmtzIE1vZGUgJiBJRTcgU3RhbmRhcmRzIE1vZGUgZG8gbm90IGFsbG93IGFjY2Vzc2luZyBzdHJpbmdzIGxpa2UgYXJyYXlzXG4gICAgICAgIC8vIFVzaW5nIGNoYXJBdCBzaG91bGQgYmUgbW9yZSBjb21wYXRpYmxlLlxuICAgICAgICByZXR1cm4gKGlucHV0ICsgJycpLnRvTG93ZXJDYXNlKCkuY2hhckF0KDApID09PSAncCc7XG4gICAgfVxuXG4gICAgdmFyIGRlZmF1bHRMb2NhbGVNZXJpZGllbVBhcnNlID0gL1thcF1cXC4/bT9cXC4/L2ksXG4gICAgICAgIC8vIFNldHRpbmcgdGhlIGhvdXIgc2hvdWxkIGtlZXAgdGhlIHRpbWUsIGJlY2F1c2UgdGhlIHVzZXIgZXhwbGljaXRseVxuICAgICAgICAvLyBzcGVjaWZpZWQgd2hpY2ggaG91ciB0aGV5IHdhbnQuIFNvIHRyeWluZyB0byBtYWludGFpbiB0aGUgc2FtZSBob3VyIChpblxuICAgICAgICAvLyBhIG5ldyB0aW1lem9uZSkgbWFrZXMgc2Vuc2UuIEFkZGluZy9zdWJ0cmFjdGluZyBob3VycyBkb2VzIG5vdCBmb2xsb3dcbiAgICAgICAgLy8gdGhpcyBydWxlLlxuICAgICAgICBnZXRTZXRIb3VyID0gbWFrZUdldFNldCgnSG91cnMnLCB0cnVlKTtcblxuICAgIGZ1bmN0aW9uIGxvY2FsZU1lcmlkaWVtKGhvdXJzLCBtaW51dGVzLCBpc0xvd2VyKSB7XG4gICAgICAgIGlmIChob3VycyA+IDExKSB7XG4gICAgICAgICAgICByZXR1cm4gaXNMb3dlciA/ICdwbScgOiAnUE0nO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGlzTG93ZXIgPyAnYW0nIDogJ0FNJztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBiYXNlQ29uZmlnID0ge1xuICAgICAgICBjYWxlbmRhcjogZGVmYXVsdENhbGVuZGFyLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDogZGVmYXVsdExvbmdEYXRlRm9ybWF0LFxuICAgICAgICBpbnZhbGlkRGF0ZTogZGVmYXVsdEludmFsaWREYXRlLFxuICAgICAgICBvcmRpbmFsOiBkZWZhdWx0T3JkaW5hbCxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogZGVmYXVsdERheU9mTW9udGhPcmRpbmFsUGFyc2UsXG4gICAgICAgIHJlbGF0aXZlVGltZTogZGVmYXVsdFJlbGF0aXZlVGltZSxcblxuICAgICAgICBtb250aHM6IGRlZmF1bHRMb2NhbGVNb250aHMsXG4gICAgICAgIG1vbnRoc1Nob3J0OiBkZWZhdWx0TG9jYWxlTW9udGhzU2hvcnQsXG5cbiAgICAgICAgd2VlazogZGVmYXVsdExvY2FsZVdlZWssXG5cbiAgICAgICAgd2Vla2RheXM6IGRlZmF1bHRMb2NhbGVXZWVrZGF5cyxcbiAgICAgICAgd2Vla2RheXNNaW46IGRlZmF1bHRMb2NhbGVXZWVrZGF5c01pbixcbiAgICAgICAgd2Vla2RheXNTaG9ydDogZGVmYXVsdExvY2FsZVdlZWtkYXlzU2hvcnQsXG5cbiAgICAgICAgbWVyaWRpZW1QYXJzZTogZGVmYXVsdExvY2FsZU1lcmlkaWVtUGFyc2UsXG4gICAgfTtcblxuICAgIC8vIGludGVybmFsIHN0b3JhZ2UgZm9yIGxvY2FsZSBjb25maWcgZmlsZXNcbiAgICB2YXIgbG9jYWxlcyA9IHt9LFxuICAgICAgICBsb2NhbGVGYW1pbGllcyA9IHt9LFxuICAgICAgICBnbG9iYWxMb2NhbGU7XG5cbiAgICBmdW5jdGlvbiBjb21tb25QcmVmaXgoYXJyMSwgYXJyMikge1xuICAgICAgICB2YXIgaSxcbiAgICAgICAgICAgIG1pbmwgPSBNYXRoLm1pbihhcnIxLmxlbmd0aCwgYXJyMi5sZW5ndGgpO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbWlubDsgaSArPSAxKSB7XG4gICAgICAgICAgICBpZiAoYXJyMVtpXSAhPT0gYXJyMltpXSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtaW5sO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG5vcm1hbGl6ZUxvY2FsZShrZXkpIHtcbiAgICAgICAgcmV0dXJuIGtleSA/IGtleS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoJ18nLCAnLScpIDoga2V5O1xuICAgIH1cblxuICAgIC8vIHBpY2sgdGhlIGxvY2FsZSBmcm9tIHRoZSBhcnJheVxuICAgIC8vIHRyeSBbJ2VuLWF1JywgJ2VuLWdiJ10gYXMgJ2VuLWF1JywgJ2VuLWdiJywgJ2VuJywgYXMgaW4gbW92ZSB0aHJvdWdoIHRoZSBsaXN0IHRyeWluZyBlYWNoXG4gICAgLy8gc3Vic3RyaW5nIGZyb20gbW9zdCBzcGVjaWZpYyB0byBsZWFzdCwgYnV0IG1vdmUgdG8gdGhlIG5leHQgYXJyYXkgaXRlbSBpZiBpdCdzIGEgbW9yZSBzcGVjaWZpYyB2YXJpYW50IHRoYW4gdGhlIGN1cnJlbnQgcm9vdFxuICAgIGZ1bmN0aW9uIGNob29zZUxvY2FsZShuYW1lcykge1xuICAgICAgICB2YXIgaSA9IDAsXG4gICAgICAgICAgICBqLFxuICAgICAgICAgICAgbmV4dCxcbiAgICAgICAgICAgIGxvY2FsZSxcbiAgICAgICAgICAgIHNwbGl0O1xuXG4gICAgICAgIHdoaWxlIChpIDwgbmFtZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICBzcGxpdCA9IG5vcm1hbGl6ZUxvY2FsZShuYW1lc1tpXSkuc3BsaXQoJy0nKTtcbiAgICAgICAgICAgIGogPSBzcGxpdC5sZW5ndGg7XG4gICAgICAgICAgICBuZXh0ID0gbm9ybWFsaXplTG9jYWxlKG5hbWVzW2kgKyAxXSk7XG4gICAgICAgICAgICBuZXh0ID0gbmV4dCA/IG5leHQuc3BsaXQoJy0nKSA6IG51bGw7XG4gICAgICAgICAgICB3aGlsZSAoaiA+IDApIHtcbiAgICAgICAgICAgICAgICBsb2NhbGUgPSBsb2FkTG9jYWxlKHNwbGl0LnNsaWNlKDAsIGopLmpvaW4oJy0nKSk7XG4gICAgICAgICAgICAgICAgaWYgKGxvY2FsZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbG9jYWxlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgIG5leHQgJiZcbiAgICAgICAgICAgICAgICAgICAgbmV4dC5sZW5ndGggPj0gaiAmJlxuICAgICAgICAgICAgICAgICAgICBjb21tb25QcmVmaXgoc3BsaXQsIG5leHQpID49IGogLSAxXG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vdGhlIG5leHQgYXJyYXkgaXRlbSBpcyBiZXR0ZXIgdGhhbiBhIHNoYWxsb3dlciBzdWJzdHJpbmcgb2YgdGhpcyBvbmVcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGotLTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGkrKztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZ2xvYmFsTG9jYWxlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzTG9jYWxlTmFtZVNhbmUobmFtZSkge1xuICAgICAgICAvLyBQcmV2ZW50IG5hbWVzIHRoYXQgbG9vayBsaWtlIGZpbGVzeXN0ZW0gcGF0aHMsIGkuZSBjb250YWluICcvJyBvciAnXFwnXG4gICAgICAgIC8vIEVuc3VyZSBuYW1lIGlzIGF2YWlsYWJsZSBhbmQgZnVuY3Rpb24gcmV0dXJucyBib29sZWFuXG4gICAgICAgIHJldHVybiAhIShuYW1lICYmIG5hbWUubWF0Y2goJ15bXi9cXFxcXFxcXF0qJCcpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsb2FkTG9jYWxlKG5hbWUpIHtcbiAgICAgICAgdmFyIG9sZExvY2FsZSA9IG51bGwsXG4gICAgICAgICAgICBhbGlhc2VkUmVxdWlyZTtcbiAgICAgICAgLy8gVE9ETzogRmluZCBhIGJldHRlciB3YXkgdG8gcmVnaXN0ZXIgYW5kIGxvYWQgYWxsIHRoZSBsb2NhbGVzIGluIE5vZGVcbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgbG9jYWxlc1tuYW1lXSA9PT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICAgICAgbW9kdWxlICYmXG4gICAgICAgICAgICBtb2R1bGUuZXhwb3J0cyAmJlxuICAgICAgICAgICAgaXNMb2NhbGVOYW1lU2FuZShuYW1lKVxuICAgICAgICApIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgb2xkTG9jYWxlID0gZ2xvYmFsTG9jYWxlLl9hYmJyO1xuICAgICAgICAgICAgICAgIGFsaWFzZWRSZXF1aXJlID0gcmVxdWlyZTtcbiAgICAgICAgICAgICAgICBhbGlhc2VkUmVxdWlyZSgnLi9sb2NhbGUvJyArIG5hbWUpO1xuICAgICAgICAgICAgICAgIGdldFNldEdsb2JhbExvY2FsZShvbGRMb2NhbGUpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIC8vIG1hcmsgYXMgbm90IGZvdW5kIHRvIGF2b2lkIHJlcGVhdGluZyBleHBlbnNpdmUgZmlsZSByZXF1aXJlIGNhbGwgY2F1c2luZyBoaWdoIENQVVxuICAgICAgICAgICAgICAgIC8vIHdoZW4gdHJ5aW5nIHRvIGZpbmQgZW4tVVMsIGVuX1VTLCBlbi11cyBmb3IgZXZlcnkgZm9ybWF0IGNhbGxcbiAgICAgICAgICAgICAgICBsb2NhbGVzW25hbWVdID0gbnVsbDsgLy8gbnVsbCBtZWFucyBub3QgZm91bmRcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbG9jYWxlc1tuYW1lXTtcbiAgICB9XG5cbiAgICAvLyBUaGlzIGZ1bmN0aW9uIHdpbGwgbG9hZCBsb2NhbGUgYW5kIHRoZW4gc2V0IHRoZSBnbG9iYWwgbG9jYWxlLiAgSWZcbiAgICAvLyBubyBhcmd1bWVudHMgYXJlIHBhc3NlZCBpbiwgaXQgd2lsbCBzaW1wbHkgcmV0dXJuIHRoZSBjdXJyZW50IGdsb2JhbFxuICAgIC8vIGxvY2FsZSBrZXkuXG4gICAgZnVuY3Rpb24gZ2V0U2V0R2xvYmFsTG9jYWxlKGtleSwgdmFsdWVzKSB7XG4gICAgICAgIHZhciBkYXRhO1xuICAgICAgICBpZiAoa2V5KSB7XG4gICAgICAgICAgICBpZiAoaXNVbmRlZmluZWQodmFsdWVzKSkge1xuICAgICAgICAgICAgICAgIGRhdGEgPSBnZXRMb2NhbGUoa2V5KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZGF0YSA9IGRlZmluZUxvY2FsZShrZXksIHZhbHVlcyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgLy8gbW9tZW50LmR1cmF0aW9uLl9sb2NhbGUgPSBtb21lbnQuX2xvY2FsZSA9IGRhdGE7XG4gICAgICAgICAgICAgICAgZ2xvYmFsTG9jYWxlID0gZGF0YTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJiBjb25zb2xlLndhcm4pIHtcbiAgICAgICAgICAgICAgICAgICAgLy93YXJuIHVzZXIgaWYgYXJndW1lbnRzIGFyZSBwYXNzZWQgYnV0IHRoZSBsb2NhbGUgY291bGQgbm90IGJlIHNldFxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgICAgICAgICAgICAgICAnTG9jYWxlICcgKyBrZXkgKyAnIG5vdCBmb3VuZC4gRGlkIHlvdSBmb3JnZXQgdG8gbG9hZCBpdD8nXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGdsb2JhbExvY2FsZS5fYWJicjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkZWZpbmVMb2NhbGUobmFtZSwgY29uZmlnKSB7XG4gICAgICAgIGlmIChjb25maWcgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHZhciBsb2NhbGUsXG4gICAgICAgICAgICAgICAgcGFyZW50Q29uZmlnID0gYmFzZUNvbmZpZztcbiAgICAgICAgICAgIGNvbmZpZy5hYmJyID0gbmFtZTtcbiAgICAgICAgICAgIGlmIChsb2NhbGVzW25hbWVdICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBkZXByZWNhdGVTaW1wbGUoXG4gICAgICAgICAgICAgICAgICAgICdkZWZpbmVMb2NhbGVPdmVycmlkZScsXG4gICAgICAgICAgICAgICAgICAgICd1c2UgbW9tZW50LnVwZGF0ZUxvY2FsZShsb2NhbGVOYW1lLCBjb25maWcpIHRvIGNoYW5nZSAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICdhbiBleGlzdGluZyBsb2NhbGUuIG1vbWVudC5kZWZpbmVMb2NhbGUobG9jYWxlTmFtZSwgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAnY29uZmlnKSBzaG91bGQgb25seSBiZSB1c2VkIGZvciBjcmVhdGluZyBhIG5ldyBsb2NhbGUgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAnU2VlIGh0dHA6Ly9tb21lbnRqcy5jb20vZ3VpZGVzLyMvd2FybmluZ3MvZGVmaW5lLWxvY2FsZS8gZm9yIG1vcmUgaW5mby4nXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBwYXJlbnRDb25maWcgPSBsb2NhbGVzW25hbWVdLl9jb25maWc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNvbmZpZy5wYXJlbnRMb2NhbGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGlmIChsb2NhbGVzW2NvbmZpZy5wYXJlbnRMb2NhbGVdICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50Q29uZmlnID0gbG9jYWxlc1tjb25maWcucGFyZW50TG9jYWxlXS5fY29uZmlnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGxvY2FsZSA9IGxvYWRMb2NhbGUoY29uZmlnLnBhcmVudExvY2FsZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChsb2NhbGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50Q29uZmlnID0gbG9jYWxlLl9jb25maWc7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWxvY2FsZUZhbWlsaWVzW2NvbmZpZy5wYXJlbnRMb2NhbGVdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWxlRmFtaWxpZXNbY29uZmlnLnBhcmVudExvY2FsZV0gPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsZUZhbWlsaWVzW2NvbmZpZy5wYXJlbnRMb2NhbGVdLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlnOiBjb25maWcsXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbG9jYWxlc1tuYW1lXSA9IG5ldyBMb2NhbGUobWVyZ2VDb25maWdzKHBhcmVudENvbmZpZywgY29uZmlnKSk7XG5cbiAgICAgICAgICAgIGlmIChsb2NhbGVGYW1pbGllc1tuYW1lXSkge1xuICAgICAgICAgICAgICAgIGxvY2FsZUZhbWlsaWVzW25hbWVdLmZvckVhY2goZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVmaW5lTG9jYWxlKHgubmFtZSwgeC5jb25maWcpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBiYWNrd2FyZHMgY29tcGF0IGZvciBub3c6IGFsc28gc2V0IHRoZSBsb2NhbGVcbiAgICAgICAgICAgIC8vIG1ha2Ugc3VyZSB3ZSBzZXQgdGhlIGxvY2FsZSBBRlRFUiBhbGwgY2hpbGQgbG9jYWxlcyBoYXZlIGJlZW5cbiAgICAgICAgICAgIC8vIGNyZWF0ZWQsIHNvIHdlIHdvbid0IGVuZCB1cCB3aXRoIHRoZSBjaGlsZCBsb2NhbGUgc2V0LlxuICAgICAgICAgICAgZ2V0U2V0R2xvYmFsTG9jYWxlKG5hbWUpO1xuXG4gICAgICAgICAgICByZXR1cm4gbG9jYWxlc1tuYW1lXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIHVzZWZ1bCBmb3IgdGVzdGluZ1xuICAgICAgICAgICAgZGVsZXRlIGxvY2FsZXNbbmFtZV07XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHVwZGF0ZUxvY2FsZShuYW1lLCBjb25maWcpIHtcbiAgICAgICAgaWYgKGNvbmZpZyAhPSBudWxsKSB7XG4gICAgICAgICAgICB2YXIgbG9jYWxlLFxuICAgICAgICAgICAgICAgIHRtcExvY2FsZSxcbiAgICAgICAgICAgICAgICBwYXJlbnRDb25maWcgPSBiYXNlQ29uZmlnO1xuXG4gICAgICAgICAgICBpZiAobG9jYWxlc1tuYW1lXSAhPSBudWxsICYmIGxvY2FsZXNbbmFtZV0ucGFyZW50TG9jYWxlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAvLyBVcGRhdGUgZXhpc3RpbmcgY2hpbGQgbG9jYWxlIGluLXBsYWNlIHRvIGF2b2lkIG1lbW9yeS1sZWFrc1xuICAgICAgICAgICAgICAgIGxvY2FsZXNbbmFtZV0uc2V0KG1lcmdlQ29uZmlncyhsb2NhbGVzW25hbWVdLl9jb25maWcsIGNvbmZpZykpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBNRVJHRVxuICAgICAgICAgICAgICAgIHRtcExvY2FsZSA9IGxvYWRMb2NhbGUobmFtZSk7XG4gICAgICAgICAgICAgICAgaWYgKHRtcExvY2FsZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHBhcmVudENvbmZpZyA9IHRtcExvY2FsZS5fY29uZmlnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25maWcgPSBtZXJnZUNvbmZpZ3MocGFyZW50Q29uZmlnLCBjb25maWcpO1xuICAgICAgICAgICAgICAgIGlmICh0bXBMb2NhbGUgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAvLyB1cGRhdGVMb2NhbGUgaXMgY2FsbGVkIGZvciBjcmVhdGluZyBhIG5ldyBsb2NhbGVcbiAgICAgICAgICAgICAgICAgICAgLy8gU2V0IGFiYnIgc28gaXQgd2lsbCBoYXZlIGEgbmFtZSAoZ2V0dGVycyByZXR1cm5cbiAgICAgICAgICAgICAgICAgICAgLy8gdW5kZWZpbmVkIG90aGVyd2lzZSkuXG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZy5hYmJyID0gbmFtZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbG9jYWxlID0gbmV3IExvY2FsZShjb25maWcpO1xuICAgICAgICAgICAgICAgIGxvY2FsZS5wYXJlbnRMb2NhbGUgPSBsb2NhbGVzW25hbWVdO1xuICAgICAgICAgICAgICAgIGxvY2FsZXNbbmFtZV0gPSBsb2NhbGU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGJhY2t3YXJkcyBjb21wYXQgZm9yIG5vdzogYWxzbyBzZXQgdGhlIGxvY2FsZVxuICAgICAgICAgICAgZ2V0U2V0R2xvYmFsTG9jYWxlKG5hbWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gcGFzcyBudWxsIGZvciBjb25maWcgdG8gdW51cGRhdGUsIHVzZWZ1bCBmb3IgdGVzdHNcbiAgICAgICAgICAgIGlmIChsb2NhbGVzW25hbWVdICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpZiAobG9jYWxlc1tuYW1lXS5wYXJlbnRMb2NhbGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBsb2NhbGVzW25hbWVdID0gbG9jYWxlc1tuYW1lXS5wYXJlbnRMb2NhbGU7XG4gICAgICAgICAgICAgICAgICAgIGlmIChuYW1lID09PSBnZXRTZXRHbG9iYWxMb2NhbGUoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2V0U2V0R2xvYmFsTG9jYWxlKG5hbWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChsb2NhbGVzW25hbWVdICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGxvY2FsZXNbbmFtZV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBsb2NhbGVzW25hbWVdO1xuICAgIH1cblxuICAgIC8vIHJldHVybnMgbG9jYWxlIGRhdGFcbiAgICBmdW5jdGlvbiBnZXRMb2NhbGUoa2V5KSB7XG4gICAgICAgIHZhciBsb2NhbGU7XG5cbiAgICAgICAgaWYgKGtleSAmJiBrZXkuX2xvY2FsZSAmJiBrZXkuX2xvY2FsZS5fYWJicikge1xuICAgICAgICAgICAga2V5ID0ga2V5Ll9sb2NhbGUuX2FiYnI7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWtleSkge1xuICAgICAgICAgICAgcmV0dXJuIGdsb2JhbExvY2FsZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghaXNBcnJheShrZXkpKSB7XG4gICAgICAgICAgICAvL3Nob3J0LWNpcmN1aXQgZXZlcnl0aGluZyBlbHNlXG4gICAgICAgICAgICBsb2NhbGUgPSBsb2FkTG9jYWxlKGtleSk7XG4gICAgICAgICAgICBpZiAobG9jYWxlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxvY2FsZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGtleSA9IFtrZXldO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNob29zZUxvY2FsZShrZXkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpc3RMb2NhbGVzKCkge1xuICAgICAgICByZXR1cm4ga2V5cyhsb2NhbGVzKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjaGVja092ZXJmbG93KG0pIHtcbiAgICAgICAgdmFyIG92ZXJmbG93LFxuICAgICAgICAgICAgYSA9IG0uX2E7XG5cbiAgICAgICAgaWYgKGEgJiYgZ2V0UGFyc2luZ0ZsYWdzKG0pLm92ZXJmbG93ID09PSAtMikge1xuICAgICAgICAgICAgb3ZlcmZsb3cgPVxuICAgICAgICAgICAgICAgIGFbTU9OVEhdIDwgMCB8fCBhW01PTlRIXSA+IDExXG4gICAgICAgICAgICAgICAgICAgID8gTU9OVEhcbiAgICAgICAgICAgICAgICAgICAgOiBhW0RBVEVdIDwgMSB8fCBhW0RBVEVdID4gZGF5c0luTW9udGgoYVtZRUFSXSwgYVtNT05USF0pXG4gICAgICAgICAgICAgICAgICAgICAgPyBEQVRFXG4gICAgICAgICAgICAgICAgICAgICAgOiBhW0hPVVJdIDwgMCB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICBhW0hPVVJdID4gMjQgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKGFbSE9VUl0gPT09IDI0ICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoYVtNSU5VVEVdICE9PSAwIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYVtTRUNPTkRdICE9PSAwIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYVtNSUxMSVNFQ09ORF0gIT09IDApKVxuICAgICAgICAgICAgICAgICAgICAgICAgPyBIT1VSXG4gICAgICAgICAgICAgICAgICAgICAgICA6IGFbTUlOVVRFXSA8IDAgfHwgYVtNSU5VVEVdID4gNTlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPyBNSU5VVEVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgOiBhW1NFQ09ORF0gPCAwIHx8IGFbU0VDT05EXSA+IDU5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBTRUNPTkRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGFbTUlMTElTRUNPTkRdIDwgMCB8fCBhW01JTExJU0VDT05EXSA+IDk5OVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBNSUxMSVNFQ09ORFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAtMTtcblxuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhtKS5fb3ZlcmZsb3dEYXlPZlllYXIgJiZcbiAgICAgICAgICAgICAgICAob3ZlcmZsb3cgPCBZRUFSIHx8IG92ZXJmbG93ID4gREFURSlcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIG92ZXJmbG93ID0gREFURTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChnZXRQYXJzaW5nRmxhZ3MobSkuX292ZXJmbG93V2Vla3MgJiYgb3ZlcmZsb3cgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgb3ZlcmZsb3cgPSBXRUVLO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGdldFBhcnNpbmdGbGFncyhtKS5fb3ZlcmZsb3dXZWVrZGF5ICYmIG92ZXJmbG93ID09PSAtMSkge1xuICAgICAgICAgICAgICAgIG92ZXJmbG93ID0gV0VFS0RBWTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKG0pLm92ZXJmbG93ID0gb3ZlcmZsb3c7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbTtcbiAgICB9XG5cbiAgICAvLyBpc28gODYwMSByZWdleFxuICAgIC8vIDAwMDAtMDAtMDAgMDAwMC1XMDAgb3IgMDAwMC1XMDAtMCArIFQgKyAwMCBvciAwMDowMCBvciAwMDowMDowMCBvciAwMDowMDowMC4wMDAgKyArMDA6MDAgb3IgKzAwMDAgb3IgKzAwKVxuICAgIHZhciBleHRlbmRlZElzb1JlZ2V4ID1cbiAgICAgICAgICAgIC9eXFxzKigoPzpbKy1dXFxkezZ9fFxcZHs0fSktKD86XFxkXFxkLVxcZFxcZHxXXFxkXFxkLVxcZHxXXFxkXFxkfFxcZFxcZFxcZHxcXGRcXGQpKSg/OihUfCApKFxcZFxcZCg/OjpcXGRcXGQoPzo6XFxkXFxkKD86Wy4sXVxcZCspPyk/KT8pKFsrLV1cXGRcXGQoPzo6P1xcZFxcZCk/fFxccypaKT8pPyQvLFxuICAgICAgICBiYXNpY0lzb1JlZ2V4ID1cbiAgICAgICAgICAgIC9eXFxzKigoPzpbKy1dXFxkezZ9fFxcZHs0fSkoPzpcXGRcXGRcXGRcXGR8V1xcZFxcZFxcZHxXXFxkXFxkfFxcZFxcZFxcZHxcXGRcXGR8KSkoPzooVHwgKShcXGRcXGQoPzpcXGRcXGQoPzpcXGRcXGQoPzpbLixdXFxkKyk/KT8pPykoWystXVxcZFxcZCg/Ojo/XFxkXFxkKT98XFxzKlopPyk/JC8sXG4gICAgICAgIHR6UmVnZXggPSAvWnxbKy1dXFxkXFxkKD86Oj9cXGRcXGQpPy8sXG4gICAgICAgIGlzb0RhdGVzID0gW1xuICAgICAgICAgICAgWydZWVlZWVktTU0tREQnLCAvWystXVxcZHs2fS1cXGRcXGQtXFxkXFxkL10sXG4gICAgICAgICAgICBbJ1lZWVktTU0tREQnLCAvXFxkezR9LVxcZFxcZC1cXGRcXGQvXSxcbiAgICAgICAgICAgIFsnR0dHRy1bV11XVy1FJywgL1xcZHs0fS1XXFxkXFxkLVxcZC9dLFxuICAgICAgICAgICAgWydHR0dHLVtXXVdXJywgL1xcZHs0fS1XXFxkXFxkLywgZmFsc2VdLFxuICAgICAgICAgICAgWydZWVlZLURERCcsIC9cXGR7NH0tXFxkezN9L10sXG4gICAgICAgICAgICBbJ1lZWVktTU0nLCAvXFxkezR9LVxcZFxcZC8sIGZhbHNlXSxcbiAgICAgICAgICAgIFsnWVlZWVlZTU1ERCcsIC9bKy1dXFxkezEwfS9dLFxuICAgICAgICAgICAgWydZWVlZTU1ERCcsIC9cXGR7OH0vXSxcbiAgICAgICAgICAgIFsnR0dHR1tXXVdXRScsIC9cXGR7NH1XXFxkezN9L10sXG4gICAgICAgICAgICBbJ0dHR0dbV11XVycsIC9cXGR7NH1XXFxkezJ9LywgZmFsc2VdLFxuICAgICAgICAgICAgWydZWVlZREREJywgL1xcZHs3fS9dLFxuICAgICAgICAgICAgWydZWVlZTU0nLCAvXFxkezZ9LywgZmFsc2VdLFxuICAgICAgICAgICAgWydZWVlZJywgL1xcZHs0fS8sIGZhbHNlXSxcbiAgICAgICAgXSxcbiAgICAgICAgLy8gaXNvIHRpbWUgZm9ybWF0cyBhbmQgcmVnZXhlc1xuICAgICAgICBpc29UaW1lcyA9IFtcbiAgICAgICAgICAgIFsnSEg6bW06c3MuU1NTUycsIC9cXGRcXGQ6XFxkXFxkOlxcZFxcZFxcLlxcZCsvXSxcbiAgICAgICAgICAgIFsnSEg6bW06c3MsU1NTUycsIC9cXGRcXGQ6XFxkXFxkOlxcZFxcZCxcXGQrL10sXG4gICAgICAgICAgICBbJ0hIOm1tOnNzJywgL1xcZFxcZDpcXGRcXGQ6XFxkXFxkL10sXG4gICAgICAgICAgICBbJ0hIOm1tJywgL1xcZFxcZDpcXGRcXGQvXSxcbiAgICAgICAgICAgIFsnSEhtbXNzLlNTU1MnLCAvXFxkXFxkXFxkXFxkXFxkXFxkXFwuXFxkKy9dLFxuICAgICAgICAgICAgWydISG1tc3MsU1NTUycsIC9cXGRcXGRcXGRcXGRcXGRcXGQsXFxkKy9dLFxuICAgICAgICAgICAgWydISG1tc3MnLCAvXFxkXFxkXFxkXFxkXFxkXFxkL10sXG4gICAgICAgICAgICBbJ0hIbW0nLCAvXFxkXFxkXFxkXFxkL10sXG4gICAgICAgICAgICBbJ0hIJywgL1xcZFxcZC9dLFxuICAgICAgICBdLFxuICAgICAgICBhc3BOZXRKc29uUmVnZXggPSAvXlxcLz9EYXRlXFwoKC0/XFxkKykvaSxcbiAgICAgICAgLy8gUkZDIDI4MjIgcmVnZXg6IEZvciBkZXRhaWxzIHNlZSBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjMjgyMiNzZWN0aW9uLTMuM1xuICAgICAgICByZmMyODIyID1cbiAgICAgICAgICAgIC9eKD86KE1vbnxUdWV8V2VkfFRodXxGcml8U2F0fFN1biksP1xccyk/KFxcZHsxLDJ9KVxccyhKYW58RmVifE1hcnxBcHJ8TWF5fEp1bnxKdWx8QXVnfFNlcHxPY3R8Tm92fERlYylcXHMoXFxkezIsNH0pXFxzKFxcZFxcZCk6KFxcZFxcZCkoPzo6KFxcZFxcZCkpP1xccyg/OihVVHxHTVR8W0VDTVBdW1NEXVQpfChbWnpdKXwoWystXVxcZHs0fSkpJC8sXG4gICAgICAgIG9ic09mZnNldHMgPSB7XG4gICAgICAgICAgICBVVDogMCxcbiAgICAgICAgICAgIEdNVDogMCxcbiAgICAgICAgICAgIEVEVDogLTQgKiA2MCxcbiAgICAgICAgICAgIEVTVDogLTUgKiA2MCxcbiAgICAgICAgICAgIENEVDogLTUgKiA2MCxcbiAgICAgICAgICAgIENTVDogLTYgKiA2MCxcbiAgICAgICAgICAgIE1EVDogLTYgKiA2MCxcbiAgICAgICAgICAgIE1TVDogLTcgKiA2MCxcbiAgICAgICAgICAgIFBEVDogLTcgKiA2MCxcbiAgICAgICAgICAgIFBTVDogLTggKiA2MCxcbiAgICAgICAgfTtcblxuICAgIC8vIGRhdGUgZnJvbSBpc28gZm9ybWF0XG4gICAgZnVuY3Rpb24gY29uZmlnRnJvbUlTTyhjb25maWcpIHtcbiAgICAgICAgdmFyIGksXG4gICAgICAgICAgICBsLFxuICAgICAgICAgICAgc3RyaW5nID0gY29uZmlnLl9pLFxuICAgICAgICAgICAgbWF0Y2ggPSBleHRlbmRlZElzb1JlZ2V4LmV4ZWMoc3RyaW5nKSB8fCBiYXNpY0lzb1JlZ2V4LmV4ZWMoc3RyaW5nKSxcbiAgICAgICAgICAgIGFsbG93VGltZSxcbiAgICAgICAgICAgIGRhdGVGb3JtYXQsXG4gICAgICAgICAgICB0aW1lRm9ybWF0LFxuICAgICAgICAgICAgdHpGb3JtYXQsXG4gICAgICAgICAgICBpc29EYXRlc0xlbiA9IGlzb0RhdGVzLmxlbmd0aCxcbiAgICAgICAgICAgIGlzb1RpbWVzTGVuID0gaXNvVGltZXMubGVuZ3RoO1xuXG4gICAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuaXNvID0gdHJ1ZTtcbiAgICAgICAgICAgIGZvciAoaSA9IDAsIGwgPSBpc29EYXRlc0xlbjsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmIChpc29EYXRlc1tpXVsxXS5leGVjKG1hdGNoWzFdKSkge1xuICAgICAgICAgICAgICAgICAgICBkYXRlRm9ybWF0ID0gaXNvRGF0ZXNbaV1bMF07XG4gICAgICAgICAgICAgICAgICAgIGFsbG93VGltZSA9IGlzb0RhdGVzW2ldWzJdICE9PSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGRhdGVGb3JtYXQgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGNvbmZpZy5faXNWYWxpZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtYXRjaFszXSkge1xuICAgICAgICAgICAgICAgIGZvciAoaSA9IDAsIGwgPSBpc29UaW1lc0xlbjsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNvVGltZXNbaV1bMV0uZXhlYyhtYXRjaFszXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG1hdGNoWzJdIHNob3VsZCBiZSAnVCcgb3Igc3BhY2VcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVGb3JtYXQgPSAobWF0Y2hbMl0gfHwgJyAnKSArIGlzb1RpbWVzW2ldWzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHRpbWVGb3JtYXQgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBjb25maWcuX2lzVmFsaWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghYWxsb3dUaW1lICYmIHRpbWVGb3JtYXQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGNvbmZpZy5faXNWYWxpZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtYXRjaFs0XSkge1xuICAgICAgICAgICAgICAgIGlmICh0elJlZ2V4LmV4ZWMobWF0Y2hbNF0pKSB7XG4gICAgICAgICAgICAgICAgICAgIHR6Rm9ybWF0ID0gJ1onO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZy5faXNWYWxpZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uZmlnLl9mID0gZGF0ZUZvcm1hdCArICh0aW1lRm9ybWF0IHx8ICcnKSArICh0ekZvcm1hdCB8fCAnJyk7XG4gICAgICAgICAgICBjb25maWdGcm9tU3RyaW5nQW5kRm9ybWF0KGNvbmZpZyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25maWcuX2lzVmFsaWQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGV4dHJhY3RGcm9tUkZDMjgyMlN0cmluZ3MoXG4gICAgICAgIHllYXJTdHIsXG4gICAgICAgIG1vbnRoU3RyLFxuICAgICAgICBkYXlTdHIsXG4gICAgICAgIGhvdXJTdHIsXG4gICAgICAgIG1pbnV0ZVN0cixcbiAgICAgICAgc2Vjb25kU3RyXG4gICAgKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBbXG4gICAgICAgICAgICB1bnRydW5jYXRlWWVhcih5ZWFyU3RyKSxcbiAgICAgICAgICAgIGRlZmF1bHRMb2NhbGVNb250aHNTaG9ydC5pbmRleE9mKG1vbnRoU3RyKSxcbiAgICAgICAgICAgIHBhcnNlSW50KGRheVN0ciwgMTApLFxuICAgICAgICAgICAgcGFyc2VJbnQoaG91clN0ciwgMTApLFxuICAgICAgICAgICAgcGFyc2VJbnQobWludXRlU3RyLCAxMCksXG4gICAgICAgIF07XG5cbiAgICAgICAgaWYgKHNlY29uZFN0cikge1xuICAgICAgICAgICAgcmVzdWx0LnB1c2gocGFyc2VJbnQoc2Vjb25kU3RyLCAxMCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB1bnRydW5jYXRlWWVhcih5ZWFyU3RyKSB7XG4gICAgICAgIHZhciB5ZWFyID0gcGFyc2VJbnQoeWVhclN0ciwgMTApO1xuICAgICAgICBpZiAoeWVhciA8PSA0OSkge1xuICAgICAgICAgICAgcmV0dXJuIDIwMDAgKyB5ZWFyO1xuICAgICAgICB9IGVsc2UgaWYgKHllYXIgPD0gOTk5KSB7XG4gICAgICAgICAgICByZXR1cm4gMTkwMCArIHllYXI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHllYXI7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcHJlcHJvY2Vzc1JGQzI4MjIocykge1xuICAgICAgICAvLyBSZW1vdmUgY29tbWVudHMgYW5kIGZvbGRpbmcgd2hpdGVzcGFjZSBhbmQgcmVwbGFjZSBtdWx0aXBsZS1zcGFjZXMgd2l0aCBhIHNpbmdsZSBzcGFjZVxuICAgICAgICByZXR1cm4gc1xuICAgICAgICAgICAgLnJlcGxhY2UoL1xcKFteKCldKlxcKXxbXFxuXFx0XS9nLCAnICcpXG4gICAgICAgICAgICAucmVwbGFjZSgvKFxcc1xccyspL2csICcgJylcbiAgICAgICAgICAgIC5yZXBsYWNlKC9eXFxzXFxzKi8sICcnKVxuICAgICAgICAgICAgLnJlcGxhY2UoL1xcc1xccyokLywgJycpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNoZWNrV2Vla2RheSh3ZWVrZGF5U3RyLCBwYXJzZWRJbnB1dCwgY29uZmlnKSB7XG4gICAgICAgIGlmICh3ZWVrZGF5U3RyKSB7XG4gICAgICAgICAgICAvLyBUT0RPOiBSZXBsYWNlIHRoZSB2YW5pbGxhIEpTIERhdGUgb2JqZWN0IHdpdGggYW4gaW5kZXBlbmRlbnQgZGF5LW9mLXdlZWsgY2hlY2suXG4gICAgICAgICAgICB2YXIgd2Vla2RheVByb3ZpZGVkID0gZGVmYXVsdExvY2FsZVdlZWtkYXlzU2hvcnQuaW5kZXhPZih3ZWVrZGF5U3RyKSxcbiAgICAgICAgICAgICAgICB3ZWVrZGF5QWN0dWFsID0gbmV3IERhdGUoXG4gICAgICAgICAgICAgICAgICAgIHBhcnNlZElucHV0WzBdLFxuICAgICAgICAgICAgICAgICAgICBwYXJzZWRJbnB1dFsxXSxcbiAgICAgICAgICAgICAgICAgICAgcGFyc2VkSW5wdXRbMl1cbiAgICAgICAgICAgICAgICApLmdldERheSgpO1xuICAgICAgICAgICAgaWYgKHdlZWtkYXlQcm92aWRlZCAhPT0gd2Vla2RheUFjdHVhbCkge1xuICAgICAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLndlZWtkYXlNaXNtYXRjaCA9IHRydWU7XG4gICAgICAgICAgICAgICAgY29uZmlnLl9pc1ZhbGlkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNhbGN1bGF0ZU9mZnNldChvYnNPZmZzZXQsIG1pbGl0YXJ5T2Zmc2V0LCBudW1PZmZzZXQpIHtcbiAgICAgICAgaWYgKG9ic09mZnNldCkge1xuICAgICAgICAgICAgcmV0dXJuIG9ic09mZnNldHNbb2JzT2Zmc2V0XTtcbiAgICAgICAgfSBlbHNlIGlmIChtaWxpdGFyeU9mZnNldCkge1xuICAgICAgICAgICAgLy8gdGhlIG9ubHkgYWxsb3dlZCBtaWxpdGFyeSB0eiBpcyBaXG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciBobSA9IHBhcnNlSW50KG51bU9mZnNldCwgMTApLFxuICAgICAgICAgICAgICAgIG0gPSBobSAlIDEwMCxcbiAgICAgICAgICAgICAgICBoID0gKGhtIC0gbSkgLyAxMDA7XG4gICAgICAgICAgICByZXR1cm4gaCAqIDYwICsgbTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIGRhdGUgYW5kIHRpbWUgZnJvbSByZWYgMjgyMiBmb3JtYXRcbiAgICBmdW5jdGlvbiBjb25maWdGcm9tUkZDMjgyMihjb25maWcpIHtcbiAgICAgICAgdmFyIG1hdGNoID0gcmZjMjgyMi5leGVjKHByZXByb2Nlc3NSRkMyODIyKGNvbmZpZy5faSkpLFxuICAgICAgICAgICAgcGFyc2VkQXJyYXk7XG4gICAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICAgICAgcGFyc2VkQXJyYXkgPSBleHRyYWN0RnJvbVJGQzI4MjJTdHJpbmdzKFxuICAgICAgICAgICAgICAgIG1hdGNoWzRdLFxuICAgICAgICAgICAgICAgIG1hdGNoWzNdLFxuICAgICAgICAgICAgICAgIG1hdGNoWzJdLFxuICAgICAgICAgICAgICAgIG1hdGNoWzVdLFxuICAgICAgICAgICAgICAgIG1hdGNoWzZdLFxuICAgICAgICAgICAgICAgIG1hdGNoWzddXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgaWYgKCFjaGVja1dlZWtkYXkobWF0Y2hbMV0sIHBhcnNlZEFycmF5LCBjb25maWcpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25maWcuX2EgPSBwYXJzZWRBcnJheTtcbiAgICAgICAgICAgIGNvbmZpZy5fdHptID0gY2FsY3VsYXRlT2Zmc2V0KG1hdGNoWzhdLCBtYXRjaFs5XSwgbWF0Y2hbMTBdKTtcblxuICAgICAgICAgICAgY29uZmlnLl9kID0gY3JlYXRlVVRDRGF0ZS5hcHBseShudWxsLCBjb25maWcuX2EpO1xuICAgICAgICAgICAgY29uZmlnLl9kLnNldFVUQ01pbnV0ZXMoY29uZmlnLl9kLmdldFVUQ01pbnV0ZXMoKSAtIGNvbmZpZy5fdHptKTtcblxuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykucmZjMjgyMiA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25maWcuX2lzVmFsaWQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIGRhdGUgZnJvbSAxKSBBU1AuTkVULCAyKSBJU08sIDMpIFJGQyAyODIyIGZvcm1hdHMsIG9yIDQpIG9wdGlvbmFsIGZhbGxiYWNrIGlmIHBhcnNpbmcgaXNuJ3Qgc3RyaWN0XG4gICAgZnVuY3Rpb24gY29uZmlnRnJvbVN0cmluZyhjb25maWcpIHtcbiAgICAgICAgdmFyIG1hdGNoZWQgPSBhc3BOZXRKc29uUmVnZXguZXhlYyhjb25maWcuX2kpO1xuICAgICAgICBpZiAobWF0Y2hlZCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgY29uZmlnLl9kID0gbmV3IERhdGUoK21hdGNoZWRbMV0pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uZmlnRnJvbUlTTyhjb25maWcpO1xuICAgICAgICBpZiAoY29uZmlnLl9pc1ZhbGlkID09PSBmYWxzZSkge1xuICAgICAgICAgICAgZGVsZXRlIGNvbmZpZy5faXNWYWxpZDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbmZpZ0Zyb21SRkMyODIyKGNvbmZpZyk7XG4gICAgICAgIGlmIChjb25maWcuX2lzVmFsaWQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBkZWxldGUgY29uZmlnLl9pc1ZhbGlkO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbmZpZy5fc3RyaWN0KSB7XG4gICAgICAgICAgICBjb25maWcuX2lzVmFsaWQgPSBmYWxzZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIEZpbmFsIGF0dGVtcHQsIHVzZSBJbnB1dCBGYWxsYmFja1xuICAgICAgICAgICAgaG9va3MuY3JlYXRlRnJvbUlucHV0RmFsbGJhY2soY29uZmlnKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGhvb2tzLmNyZWF0ZUZyb21JbnB1dEZhbGxiYWNrID0gZGVwcmVjYXRlKFxuICAgICAgICAndmFsdWUgcHJvdmlkZWQgaXMgbm90IGluIGEgcmVjb2duaXplZCBSRkMyODIyIG9yIElTTyBmb3JtYXQuIG1vbWVudCBjb25zdHJ1Y3Rpb24gZmFsbHMgYmFjayB0byBqcyBEYXRlKCksICcgK1xuICAgICAgICAgICAgJ3doaWNoIGlzIG5vdCByZWxpYWJsZSBhY3Jvc3MgYWxsIGJyb3dzZXJzIGFuZCB2ZXJzaW9ucy4gTm9uIFJGQzI4MjIvSVNPIGRhdGUgZm9ybWF0cyBhcmUgJyArXG4gICAgICAgICAgICAnZGlzY291cmFnZWQuIFBsZWFzZSByZWZlciB0byBodHRwOi8vbW9tZW50anMuY29tL2d1aWRlcy8jL3dhcm5pbmdzL2pzLWRhdGUvIGZvciBtb3JlIGluZm8uJyxcbiAgICAgICAgZnVuY3Rpb24gKGNvbmZpZykge1xuICAgICAgICAgICAgY29uZmlnLl9kID0gbmV3IERhdGUoY29uZmlnLl9pICsgKGNvbmZpZy5fdXNlVVRDID8gJyBVVEMnIDogJycpKTtcbiAgICAgICAgfVxuICAgICk7XG5cbiAgICAvLyBQaWNrIHRoZSBmaXJzdCBkZWZpbmVkIG9mIHR3byBvciB0aHJlZSBhcmd1bWVudHMuXG4gICAgZnVuY3Rpb24gZGVmYXVsdHMoYSwgYiwgYykge1xuICAgICAgICBpZiAoYSAhPSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gYTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYiAhPSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gYjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjdXJyZW50RGF0ZUFycmF5KGNvbmZpZykge1xuICAgICAgICAvLyBob29rcyBpcyBhY3R1YWxseSB0aGUgZXhwb3J0ZWQgbW9tZW50IG9iamVjdFxuICAgICAgICB2YXIgbm93VmFsdWUgPSBuZXcgRGF0ZShob29rcy5ub3coKSk7XG4gICAgICAgIGlmIChjb25maWcuX3VzZVVUQykge1xuICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICBub3dWYWx1ZS5nZXRVVENGdWxsWWVhcigpLFxuICAgICAgICAgICAgICAgIG5vd1ZhbHVlLmdldFVUQ01vbnRoKCksXG4gICAgICAgICAgICAgICAgbm93VmFsdWUuZ2V0VVRDRGF0ZSgpLFxuICAgICAgICAgICAgXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gW25vd1ZhbHVlLmdldEZ1bGxZZWFyKCksIG5vd1ZhbHVlLmdldE1vbnRoKCksIG5vd1ZhbHVlLmdldERhdGUoKV07XG4gICAgfVxuXG4gICAgLy8gY29udmVydCBhbiBhcnJheSB0byBhIGRhdGUuXG4gICAgLy8gdGhlIGFycmF5IHNob3VsZCBtaXJyb3IgdGhlIHBhcmFtZXRlcnMgYmVsb3dcbiAgICAvLyBub3RlOiBhbGwgdmFsdWVzIHBhc3QgdGhlIHllYXIgYXJlIG9wdGlvbmFsIGFuZCB3aWxsIGRlZmF1bHQgdG8gdGhlIGxvd2VzdCBwb3NzaWJsZSB2YWx1ZS5cbiAgICAvLyBbeWVhciwgbW9udGgsIGRheSAsIGhvdXIsIG1pbnV0ZSwgc2Vjb25kLCBtaWxsaXNlY29uZF1cbiAgICBmdW5jdGlvbiBjb25maWdGcm9tQXJyYXkoY29uZmlnKSB7XG4gICAgICAgIHZhciBpLFxuICAgICAgICAgICAgZGF0ZSxcbiAgICAgICAgICAgIGlucHV0ID0gW10sXG4gICAgICAgICAgICBjdXJyZW50RGF0ZSxcbiAgICAgICAgICAgIGV4cGVjdGVkV2Vla2RheSxcbiAgICAgICAgICAgIHllYXJUb1VzZTtcblxuICAgICAgICBpZiAoY29uZmlnLl9kKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjdXJyZW50RGF0ZSA9IGN1cnJlbnREYXRlQXJyYXkoY29uZmlnKTtcblxuICAgICAgICAvL2NvbXB1dGUgZGF5IG9mIHRoZSB5ZWFyIGZyb20gd2Vla3MgYW5kIHdlZWtkYXlzXG4gICAgICAgIGlmIChjb25maWcuX3cgJiYgY29uZmlnLl9hW0RBVEVdID09IG51bGwgJiYgY29uZmlnLl9hW01PTlRIXSA9PSBudWxsKSB7XG4gICAgICAgICAgICBkYXlPZlllYXJGcm9tV2Vla0luZm8oY29uZmlnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vaWYgdGhlIGRheSBvZiB0aGUgeWVhciBpcyBzZXQsIGZpZ3VyZSBvdXQgd2hhdCBpdCBpc1xuICAgICAgICBpZiAoY29uZmlnLl9kYXlPZlllYXIgIT0gbnVsbCkge1xuICAgICAgICAgICAgeWVhclRvVXNlID0gZGVmYXVsdHMoY29uZmlnLl9hW1lFQVJdLCBjdXJyZW50RGF0ZVtZRUFSXSk7XG5cbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICBjb25maWcuX2RheU9mWWVhciA+IGRheXNJblllYXIoeWVhclRvVXNlKSB8fFxuICAgICAgICAgICAgICAgIGNvbmZpZy5fZGF5T2ZZZWFyID09PSAwXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5fb3ZlcmZsb3dEYXlPZlllYXIgPSB0cnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBkYXRlID0gY3JlYXRlVVRDRGF0ZSh5ZWFyVG9Vc2UsIDAsIGNvbmZpZy5fZGF5T2ZZZWFyKTtcbiAgICAgICAgICAgIGNvbmZpZy5fYVtNT05USF0gPSBkYXRlLmdldFVUQ01vbnRoKCk7XG4gICAgICAgICAgICBjb25maWcuX2FbREFURV0gPSBkYXRlLmdldFVUQ0RhdGUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIERlZmF1bHQgdG8gY3VycmVudCBkYXRlLlxuICAgICAgICAvLyAqIGlmIG5vIHllYXIsIG1vbnRoLCBkYXkgb2YgbW9udGggYXJlIGdpdmVuLCBkZWZhdWx0IHRvIHRvZGF5XG4gICAgICAgIC8vICogaWYgZGF5IG9mIG1vbnRoIGlzIGdpdmVuLCBkZWZhdWx0IG1vbnRoIGFuZCB5ZWFyXG4gICAgICAgIC8vICogaWYgbW9udGggaXMgZ2l2ZW4sIGRlZmF1bHQgb25seSB5ZWFyXG4gICAgICAgIC8vICogaWYgeWVhciBpcyBnaXZlbiwgZG9uJ3QgZGVmYXVsdCBhbnl0aGluZ1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgMyAmJiBjb25maWcuX2FbaV0gPT0gbnVsbDsgKytpKSB7XG4gICAgICAgICAgICBjb25maWcuX2FbaV0gPSBpbnB1dFtpXSA9IGN1cnJlbnREYXRlW2ldO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gWmVybyBvdXQgd2hhdGV2ZXIgd2FzIG5vdCBkZWZhdWx0ZWQsIGluY2x1ZGluZyB0aW1lXG4gICAgICAgIGZvciAoOyBpIDwgNzsgaSsrKSB7XG4gICAgICAgICAgICBjb25maWcuX2FbaV0gPSBpbnB1dFtpXSA9XG4gICAgICAgICAgICAgICAgY29uZmlnLl9hW2ldID09IG51bGwgPyAoaSA9PT0gMiA/IDEgOiAwKSA6IGNvbmZpZy5fYVtpXTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENoZWNrIGZvciAyNDowMDowMC4wMDBcbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgY29uZmlnLl9hW0hPVVJdID09PSAyNCAmJlxuICAgICAgICAgICAgY29uZmlnLl9hW01JTlVURV0gPT09IDAgJiZcbiAgICAgICAgICAgIGNvbmZpZy5fYVtTRUNPTkRdID09PSAwICYmXG4gICAgICAgICAgICBjb25maWcuX2FbTUlMTElTRUNPTkRdID09PSAwXG4gICAgICAgICkge1xuICAgICAgICAgICAgY29uZmlnLl9uZXh0RGF5ID0gdHJ1ZTtcbiAgICAgICAgICAgIGNvbmZpZy5fYVtIT1VSXSA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICBjb25maWcuX2QgPSAoY29uZmlnLl91c2VVVEMgPyBjcmVhdGVVVENEYXRlIDogY3JlYXRlRGF0ZSkuYXBwbHkoXG4gICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgaW5wdXRcbiAgICAgICAgKTtcbiAgICAgICAgZXhwZWN0ZWRXZWVrZGF5ID0gY29uZmlnLl91c2VVVENcbiAgICAgICAgICAgID8gY29uZmlnLl9kLmdldFVUQ0RheSgpXG4gICAgICAgICAgICA6IGNvbmZpZy5fZC5nZXREYXkoKTtcblxuICAgICAgICAvLyBBcHBseSB0aW1lem9uZSBvZmZzZXQgZnJvbSBpbnB1dC4gVGhlIGFjdHVhbCB1dGNPZmZzZXQgY2FuIGJlIGNoYW5nZWRcbiAgICAgICAgLy8gd2l0aCBwYXJzZVpvbmUuXG4gICAgICAgIGlmIChjb25maWcuX3R6bSAhPSBudWxsKSB7XG4gICAgICAgICAgICBjb25maWcuX2Quc2V0VVRDTWludXRlcyhjb25maWcuX2QuZ2V0VVRDTWludXRlcygpIC0gY29uZmlnLl90em0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbmZpZy5fbmV4dERheSkge1xuICAgICAgICAgICAgY29uZmlnLl9hW0hPVVJdID0gMjQ7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBjaGVjayBmb3IgbWlzbWF0Y2hpbmcgZGF5IG9mIHdlZWtcbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgY29uZmlnLl93ICYmXG4gICAgICAgICAgICB0eXBlb2YgY29uZmlnLl93LmQgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgICAgICBjb25maWcuX3cuZCAhPT0gZXhwZWN0ZWRXZWVrZGF5XG4gICAgICAgICkge1xuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykud2Vla2RheU1pc21hdGNoID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRheU9mWWVhckZyb21XZWVrSW5mbyhjb25maWcpIHtcbiAgICAgICAgdmFyIHcsIHdlZWtZZWFyLCB3ZWVrLCB3ZWVrZGF5LCBkb3csIGRveSwgdGVtcCwgd2Vla2RheU92ZXJmbG93LCBjdXJXZWVrO1xuXG4gICAgICAgIHcgPSBjb25maWcuX3c7XG4gICAgICAgIGlmICh3LkdHICE9IG51bGwgfHwgdy5XICE9IG51bGwgfHwgdy5FICE9IG51bGwpIHtcbiAgICAgICAgICAgIGRvdyA9IDE7XG4gICAgICAgICAgICBkb3kgPSA0O1xuXG4gICAgICAgICAgICAvLyBUT0RPOiBXZSBuZWVkIHRvIHRha2UgdGhlIGN1cnJlbnQgaXNvV2Vla1llYXIsIGJ1dCB0aGF0IGRlcGVuZHMgb25cbiAgICAgICAgICAgIC8vIGhvdyB3ZSBpbnRlcnByZXQgbm93IChsb2NhbCwgdXRjLCBmaXhlZCBvZmZzZXQpLiBTbyBjcmVhdGVcbiAgICAgICAgICAgIC8vIGEgbm93IHZlcnNpb24gb2YgY3VycmVudCBjb25maWcgKHRha2UgbG9jYWwvdXRjL29mZnNldCBmbGFncywgYW5kXG4gICAgICAgICAgICAvLyBjcmVhdGUgbm93KS5cbiAgICAgICAgICAgIHdlZWtZZWFyID0gZGVmYXVsdHMoXG4gICAgICAgICAgICAgICAgdy5HRyxcbiAgICAgICAgICAgICAgICBjb25maWcuX2FbWUVBUl0sXG4gICAgICAgICAgICAgICAgd2Vla09mWWVhcihjcmVhdGVMb2NhbCgpLCAxLCA0KS55ZWFyXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgd2VlayA9IGRlZmF1bHRzKHcuVywgMSk7XG4gICAgICAgICAgICB3ZWVrZGF5ID0gZGVmYXVsdHMody5FLCAxKTtcbiAgICAgICAgICAgIGlmICh3ZWVrZGF5IDwgMSB8fCB3ZWVrZGF5ID4gNykge1xuICAgICAgICAgICAgICAgIHdlZWtkYXlPdmVyZmxvdyA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkb3cgPSBjb25maWcuX2xvY2FsZS5fd2Vlay5kb3c7XG4gICAgICAgICAgICBkb3kgPSBjb25maWcuX2xvY2FsZS5fd2Vlay5kb3k7XG5cbiAgICAgICAgICAgIGN1cldlZWsgPSB3ZWVrT2ZZZWFyKGNyZWF0ZUxvY2FsKCksIGRvdywgZG95KTtcblxuICAgICAgICAgICAgd2Vla1llYXIgPSBkZWZhdWx0cyh3LmdnLCBjb25maWcuX2FbWUVBUl0sIGN1cldlZWsueWVhcik7XG5cbiAgICAgICAgICAgIC8vIERlZmF1bHQgdG8gY3VycmVudCB3ZWVrLlxuICAgICAgICAgICAgd2VlayA9IGRlZmF1bHRzKHcudywgY3VyV2Vlay53ZWVrKTtcblxuICAgICAgICAgICAgaWYgKHcuZCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgLy8gd2Vla2RheSAtLSBsb3cgZGF5IG51bWJlcnMgYXJlIGNvbnNpZGVyZWQgbmV4dCB3ZWVrXG4gICAgICAgICAgICAgICAgd2Vla2RheSA9IHcuZDtcbiAgICAgICAgICAgICAgICBpZiAod2Vla2RheSA8IDAgfHwgd2Vla2RheSA+IDYpIHtcbiAgICAgICAgICAgICAgICAgICAgd2Vla2RheU92ZXJmbG93ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHcuZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgLy8gbG9jYWwgd2Vla2RheSAtLSBjb3VudGluZyBzdGFydHMgZnJvbSBiZWdpbm5pbmcgb2Ygd2Vla1xuICAgICAgICAgICAgICAgIHdlZWtkYXkgPSB3LmUgKyBkb3c7XG4gICAgICAgICAgICAgICAgaWYgKHcuZSA8IDAgfHwgdy5lID4gNikge1xuICAgICAgICAgICAgICAgICAgICB3ZWVrZGF5T3ZlcmZsb3cgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gZGVmYXVsdCB0byBiZWdpbm5pbmcgb2Ygd2Vla1xuICAgICAgICAgICAgICAgIHdlZWtkYXkgPSBkb3c7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHdlZWsgPCAxIHx8IHdlZWsgPiB3ZWVrc0luWWVhcih3ZWVrWWVhciwgZG93LCBkb3kpKSB7XG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5fb3ZlcmZsb3dXZWVrcyA9IHRydWU7XG4gICAgICAgIH0gZWxzZSBpZiAod2Vla2RheU92ZXJmbG93ICE9IG51bGwpIHtcbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLl9vdmVyZmxvd1dlZWtkYXkgPSB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGVtcCA9IGRheU9mWWVhckZyb21XZWVrcyh3ZWVrWWVhciwgd2Vlaywgd2Vla2RheSwgZG93LCBkb3kpO1xuICAgICAgICAgICAgY29uZmlnLl9hW1lFQVJdID0gdGVtcC55ZWFyO1xuICAgICAgICAgICAgY29uZmlnLl9kYXlPZlllYXIgPSB0ZW1wLmRheU9mWWVhcjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIGNvbnN0YW50IHRoYXQgcmVmZXJzIHRvIHRoZSBJU08gc3RhbmRhcmRcbiAgICBob29rcy5JU09fODYwMSA9IGZ1bmN0aW9uICgpIHt9O1xuXG4gICAgLy8gY29uc3RhbnQgdGhhdCByZWZlcnMgdG8gdGhlIFJGQyAyODIyIGZvcm1cbiAgICBob29rcy5SRkNfMjgyMiA9IGZ1bmN0aW9uICgpIHt9O1xuXG4gICAgLy8gZGF0ZSBmcm9tIHN0cmluZyBhbmQgZm9ybWF0IHN0cmluZ1xuICAgIGZ1bmN0aW9uIGNvbmZpZ0Zyb21TdHJpbmdBbmRGb3JtYXQoY29uZmlnKSB7XG4gICAgICAgIC8vIFRPRE86IE1vdmUgdGhpcyB0byBhbm90aGVyIHBhcnQgb2YgdGhlIGNyZWF0aW9uIGZsb3cgdG8gcHJldmVudCBjaXJjdWxhciBkZXBzXG4gICAgICAgIGlmIChjb25maWcuX2YgPT09IGhvb2tzLklTT184NjAxKSB7XG4gICAgICAgICAgICBjb25maWdGcm9tSVNPKGNvbmZpZyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvbmZpZy5fZiA9PT0gaG9va3MuUkZDXzI4MjIpIHtcbiAgICAgICAgICAgIGNvbmZpZ0Zyb21SRkMyODIyKGNvbmZpZyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uZmlnLl9hID0gW107XG4gICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmVtcHR5ID0gdHJ1ZTtcblxuICAgICAgICAvLyBUaGlzIGFycmF5IGlzIHVzZWQgdG8gbWFrZSBhIERhdGUsIGVpdGhlciB3aXRoIGBuZXcgRGF0ZWAgb3IgYERhdGUuVVRDYFxuICAgICAgICB2YXIgc3RyaW5nID0gJycgKyBjb25maWcuX2ksXG4gICAgICAgICAgICBpLFxuICAgICAgICAgICAgcGFyc2VkSW5wdXQsXG4gICAgICAgICAgICB0b2tlbnMsXG4gICAgICAgICAgICB0b2tlbixcbiAgICAgICAgICAgIHNraXBwZWQsXG4gICAgICAgICAgICBzdHJpbmdMZW5ndGggPSBzdHJpbmcubGVuZ3RoLFxuICAgICAgICAgICAgdG90YWxQYXJzZWRJbnB1dExlbmd0aCA9IDAsXG4gICAgICAgICAgICBlcmEsXG4gICAgICAgICAgICB0b2tlbkxlbjtcblxuICAgICAgICB0b2tlbnMgPVxuICAgICAgICAgICAgZXhwYW5kRm9ybWF0KGNvbmZpZy5fZiwgY29uZmlnLl9sb2NhbGUpLm1hdGNoKGZvcm1hdHRpbmdUb2tlbnMpIHx8IFtdO1xuICAgICAgICB0b2tlbkxlbiA9IHRva2Vucy5sZW5ndGg7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCB0b2tlbkxlbjsgaSsrKSB7XG4gICAgICAgICAgICB0b2tlbiA9IHRva2Vuc1tpXTtcbiAgICAgICAgICAgIHBhcnNlZElucHV0ID0gKHN0cmluZy5tYXRjaChnZXRQYXJzZVJlZ2V4Rm9yVG9rZW4odG9rZW4sIGNvbmZpZykpIHx8XG4gICAgICAgICAgICAgICAgW10pWzBdO1xuICAgICAgICAgICAgaWYgKHBhcnNlZElucHV0KSB7XG4gICAgICAgICAgICAgICAgc2tpcHBlZCA9IHN0cmluZy5zdWJzdHIoMCwgc3RyaW5nLmluZGV4T2YocGFyc2VkSW5wdXQpKTtcbiAgICAgICAgICAgICAgICBpZiAoc2tpcHBlZC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLnVudXNlZElucHV0LnB1c2goc2tpcHBlZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHN0cmluZyA9IHN0cmluZy5zbGljZShcbiAgICAgICAgICAgICAgICAgICAgc3RyaW5nLmluZGV4T2YocGFyc2VkSW5wdXQpICsgcGFyc2VkSW5wdXQubGVuZ3RoXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB0b3RhbFBhcnNlZElucHV0TGVuZ3RoICs9IHBhcnNlZElucHV0Lmxlbmd0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGRvbid0IHBhcnNlIGlmIGl0J3Mgbm90IGEga25vd24gdG9rZW5cbiAgICAgICAgICAgIGlmIChmb3JtYXRUb2tlbkZ1bmN0aW9uc1t0b2tlbl0pIHtcbiAgICAgICAgICAgICAgICBpZiAocGFyc2VkSW5wdXQpIHtcbiAgICAgICAgICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuZW1wdHkgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS51bnVzZWRUb2tlbnMucHVzaCh0b2tlbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGFkZFRpbWVUb0FycmF5RnJvbVRva2VuKHRva2VuLCBwYXJzZWRJbnB1dCwgY29uZmlnKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY29uZmlnLl9zdHJpY3QgJiYgIXBhcnNlZElucHV0KSB7XG4gICAgICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykudW51c2VkVG9rZW5zLnB1c2godG9rZW4pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gYWRkIHJlbWFpbmluZyB1bnBhcnNlZCBpbnB1dCBsZW5ndGggdG8gdGhlIHN0cmluZ1xuICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5jaGFyc0xlZnRPdmVyID1cbiAgICAgICAgICAgIHN0cmluZ0xlbmd0aCAtIHRvdGFsUGFyc2VkSW5wdXRMZW5ndGg7XG4gICAgICAgIGlmIChzdHJpbmcubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykudW51c2VkSW5wdXQucHVzaChzdHJpbmcpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gY2xlYXIgXzEyaCBmbGFnIGlmIGhvdXIgaXMgPD0gMTJcbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgY29uZmlnLl9hW0hPVVJdIDw9IDEyICYmXG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5iaWdIb3VyID09PSB0cnVlICYmXG4gICAgICAgICAgICBjb25maWcuX2FbSE9VUl0gPiAwXG4gICAgICAgICkge1xuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuYmlnSG91ciA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLnBhcnNlZERhdGVQYXJ0cyA9IGNvbmZpZy5fYS5zbGljZSgwKTtcbiAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykubWVyaWRpZW0gPSBjb25maWcuX21lcmlkaWVtO1xuICAgICAgICAvLyBoYW5kbGUgbWVyaWRpZW1cbiAgICAgICAgY29uZmlnLl9hW0hPVVJdID0gbWVyaWRpZW1GaXhXcmFwKFxuICAgICAgICAgICAgY29uZmlnLl9sb2NhbGUsXG4gICAgICAgICAgICBjb25maWcuX2FbSE9VUl0sXG4gICAgICAgICAgICBjb25maWcuX21lcmlkaWVtXG4gICAgICAgICk7XG5cbiAgICAgICAgLy8gaGFuZGxlIGVyYVxuICAgICAgICBlcmEgPSBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5lcmE7XG4gICAgICAgIGlmIChlcmEgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbmZpZy5fYVtZRUFSXSA9IGNvbmZpZy5fbG9jYWxlLmVyYXNDb252ZXJ0WWVhcihlcmEsIGNvbmZpZy5fYVtZRUFSXSk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25maWdGcm9tQXJyYXkoY29uZmlnKTtcbiAgICAgICAgY2hlY2tPdmVyZmxvdyhjb25maWcpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1lcmlkaWVtRml4V3JhcChsb2NhbGUsIGhvdXIsIG1lcmlkaWVtKSB7XG4gICAgICAgIHZhciBpc1BtO1xuXG4gICAgICAgIGlmIChtZXJpZGllbSA9PSBudWxsKSB7XG4gICAgICAgICAgICAvLyBub3RoaW5nIHRvIGRvXG4gICAgICAgICAgICByZXR1cm4gaG91cjtcbiAgICAgICAgfVxuICAgICAgICBpZiAobG9jYWxlLm1lcmlkaWVtSG91ciAhPSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gbG9jYWxlLm1lcmlkaWVtSG91cihob3VyLCBtZXJpZGllbSk7XG4gICAgICAgIH0gZWxzZSBpZiAobG9jYWxlLmlzUE0gIT0gbnVsbCkge1xuICAgICAgICAgICAgLy8gRmFsbGJhY2tcbiAgICAgICAgICAgIGlzUG0gPSBsb2NhbGUuaXNQTShtZXJpZGllbSk7XG4gICAgICAgICAgICBpZiAoaXNQbSAmJiBob3VyIDwgMTIpIHtcbiAgICAgICAgICAgICAgICBob3VyICs9IDEyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFpc1BtICYmIGhvdXIgPT09IDEyKSB7XG4gICAgICAgICAgICAgICAgaG91ciA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gaG91cjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIHRoaXMgaXMgbm90IHN1cHBvc2VkIHRvIGhhcHBlblxuICAgICAgICAgICAgcmV0dXJuIGhvdXI7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBkYXRlIGZyb20gc3RyaW5nIGFuZCBhcnJheSBvZiBmb3JtYXQgc3RyaW5nc1xuICAgIGZ1bmN0aW9uIGNvbmZpZ0Zyb21TdHJpbmdBbmRBcnJheShjb25maWcpIHtcbiAgICAgICAgdmFyIHRlbXBDb25maWcsXG4gICAgICAgICAgICBiZXN0TW9tZW50LFxuICAgICAgICAgICAgc2NvcmVUb0JlYXQsXG4gICAgICAgICAgICBpLFxuICAgICAgICAgICAgY3VycmVudFNjb3JlLFxuICAgICAgICAgICAgdmFsaWRGb3JtYXRGb3VuZCxcbiAgICAgICAgICAgIGJlc3RGb3JtYXRJc1ZhbGlkID0gZmFsc2UsXG4gICAgICAgICAgICBjb25maWdmTGVuID0gY29uZmlnLl9mLmxlbmd0aDtcblxuICAgICAgICBpZiAoY29uZmlnZkxlbiA9PT0gMCkge1xuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuaW52YWxpZEZvcm1hdCA9IHRydWU7XG4gICAgICAgICAgICBjb25maWcuX2QgPSBuZXcgRGF0ZShOYU4pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGNvbmZpZ2ZMZW47IGkrKykge1xuICAgICAgICAgICAgY3VycmVudFNjb3JlID0gMDtcbiAgICAgICAgICAgIHZhbGlkRm9ybWF0Rm91bmQgPSBmYWxzZTtcbiAgICAgICAgICAgIHRlbXBDb25maWcgPSBjb3B5Q29uZmlnKHt9LCBjb25maWcpO1xuICAgICAgICAgICAgaWYgKGNvbmZpZy5fdXNlVVRDICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0ZW1wQ29uZmlnLl91c2VVVEMgPSBjb25maWcuX3VzZVVUQztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRlbXBDb25maWcuX2YgPSBjb25maWcuX2ZbaV07XG4gICAgICAgICAgICBjb25maWdGcm9tU3RyaW5nQW5kRm9ybWF0KHRlbXBDb25maWcpO1xuXG4gICAgICAgICAgICBpZiAoaXNWYWxpZCh0ZW1wQ29uZmlnKSkge1xuICAgICAgICAgICAgICAgIHZhbGlkRm9ybWF0Rm91bmQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBpZiB0aGVyZSBpcyBhbnkgaW5wdXQgdGhhdCB3YXMgbm90IHBhcnNlZCBhZGQgYSBwZW5hbHR5IGZvciB0aGF0IGZvcm1hdFxuICAgICAgICAgICAgY3VycmVudFNjb3JlICs9IGdldFBhcnNpbmdGbGFncyh0ZW1wQ29uZmlnKS5jaGFyc0xlZnRPdmVyO1xuXG4gICAgICAgICAgICAvL29yIHRva2Vuc1xuICAgICAgICAgICAgY3VycmVudFNjb3JlICs9IGdldFBhcnNpbmdGbGFncyh0ZW1wQ29uZmlnKS51bnVzZWRUb2tlbnMubGVuZ3RoICogMTA7XG5cbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyh0ZW1wQ29uZmlnKS5zY29yZSA9IGN1cnJlbnRTY29yZTtcblxuICAgICAgICAgICAgaWYgKCFiZXN0Rm9ybWF0SXNWYWxpZCkge1xuICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgc2NvcmVUb0JlYXQgPT0gbnVsbCB8fFxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50U2NvcmUgPCBzY29yZVRvQmVhdCB8fFxuICAgICAgICAgICAgICAgICAgICB2YWxpZEZvcm1hdEZvdW5kXG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgIHNjb3JlVG9CZWF0ID0gY3VycmVudFNjb3JlO1xuICAgICAgICAgICAgICAgICAgICBiZXN0TW9tZW50ID0gdGVtcENvbmZpZztcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbGlkRm9ybWF0Rm91bmQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJlc3RGb3JtYXRJc1ZhbGlkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRTY29yZSA8IHNjb3JlVG9CZWF0KSB7XG4gICAgICAgICAgICAgICAgICAgIHNjb3JlVG9CZWF0ID0gY3VycmVudFNjb3JlO1xuICAgICAgICAgICAgICAgICAgICBiZXN0TW9tZW50ID0gdGVtcENvbmZpZztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBleHRlbmQoY29uZmlnLCBiZXN0TW9tZW50IHx8IHRlbXBDb25maWcpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNvbmZpZ0Zyb21PYmplY3QoY29uZmlnKSB7XG4gICAgICAgIGlmIChjb25maWcuX2QpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBpID0gbm9ybWFsaXplT2JqZWN0VW5pdHMoY29uZmlnLl9pKSxcbiAgICAgICAgICAgIGRheU9yRGF0ZSA9IGkuZGF5ID09PSB1bmRlZmluZWQgPyBpLmRhdGUgOiBpLmRheTtcbiAgICAgICAgY29uZmlnLl9hID0gbWFwKFxuICAgICAgICAgICAgW2kueWVhciwgaS5tb250aCwgZGF5T3JEYXRlLCBpLmhvdXIsIGkubWludXRlLCBpLnNlY29uZCwgaS5taWxsaXNlY29uZF0sXG4gICAgICAgICAgICBmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9iaiAmJiBwYXJzZUludChvYmosIDEwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcblxuICAgICAgICBjb25maWdGcm9tQXJyYXkoY29uZmlnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVGcm9tQ29uZmlnKGNvbmZpZykge1xuICAgICAgICB2YXIgcmVzID0gbmV3IE1vbWVudChjaGVja092ZXJmbG93KHByZXBhcmVDb25maWcoY29uZmlnKSkpO1xuICAgICAgICBpZiAocmVzLl9uZXh0RGF5KSB7XG4gICAgICAgICAgICAvLyBBZGRpbmcgaXMgc21hcnQgZW5vdWdoIGFyb3VuZCBEU1RcbiAgICAgICAgICAgIHJlcy5hZGQoMSwgJ2QnKTtcbiAgICAgICAgICAgIHJlcy5fbmV4dERheSA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcHJlcGFyZUNvbmZpZyhjb25maWcpIHtcbiAgICAgICAgdmFyIGlucHV0ID0gY29uZmlnLl9pLFxuICAgICAgICAgICAgZm9ybWF0ID0gY29uZmlnLl9mO1xuXG4gICAgICAgIGNvbmZpZy5fbG9jYWxlID0gY29uZmlnLl9sb2NhbGUgfHwgZ2V0TG9jYWxlKGNvbmZpZy5fbCk7XG5cbiAgICAgICAgaWYgKGlucHV0ID09PSBudWxsIHx8IChmb3JtYXQgPT09IHVuZGVmaW5lZCAmJiBpbnB1dCA9PT0gJycpKSB7XG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlSW52YWxpZCh7IG51bGxJbnB1dDogdHJ1ZSB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBjb25maWcuX2kgPSBpbnB1dCA9IGNvbmZpZy5fbG9jYWxlLnByZXBhcnNlKGlucHV0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc01vbWVudChpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgTW9tZW50KGNoZWNrT3ZlcmZsb3coaW5wdXQpKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc0RhdGUoaW5wdXQpKSB7XG4gICAgICAgICAgICBjb25maWcuX2QgPSBpbnB1dDtcbiAgICAgICAgfSBlbHNlIGlmIChpc0FycmF5KGZvcm1hdCkpIHtcbiAgICAgICAgICAgIGNvbmZpZ0Zyb21TdHJpbmdBbmRBcnJheShjb25maWcpO1xuICAgICAgICB9IGVsc2UgaWYgKGZvcm1hdCkge1xuICAgICAgICAgICAgY29uZmlnRnJvbVN0cmluZ0FuZEZvcm1hdChjb25maWcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uZmlnRnJvbUlucHV0KGNvbmZpZyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWlzVmFsaWQoY29uZmlnKSkge1xuICAgICAgICAgICAgY29uZmlnLl9kID0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjb25maWc7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY29uZmlnRnJvbUlucHV0KGNvbmZpZykge1xuICAgICAgICB2YXIgaW5wdXQgPSBjb25maWcuX2k7XG4gICAgICAgIGlmIChpc1VuZGVmaW5lZChpbnB1dCkpIHtcbiAgICAgICAgICAgIGNvbmZpZy5fZCA9IG5ldyBEYXRlKGhvb2tzLm5vdygpKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc0RhdGUoaW5wdXQpKSB7XG4gICAgICAgICAgICBjb25maWcuX2QgPSBuZXcgRGF0ZShpbnB1dC52YWx1ZU9mKCkpO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGNvbmZpZ0Zyb21TdHJpbmcoY29uZmlnKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc0FycmF5KGlucHV0KSkge1xuICAgICAgICAgICAgY29uZmlnLl9hID0gbWFwKGlucHV0LnNsaWNlKDApLCBmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBhcnNlSW50KG9iaiwgMTApO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjb25maWdGcm9tQXJyYXkoY29uZmlnKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc09iamVjdChpbnB1dCkpIHtcbiAgICAgICAgICAgIGNvbmZpZ0Zyb21PYmplY3QoY29uZmlnKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc051bWJlcihpbnB1dCkpIHtcbiAgICAgICAgICAgIC8vIGZyb20gbWlsbGlzZWNvbmRzXG4gICAgICAgICAgICBjb25maWcuX2QgPSBuZXcgRGF0ZShpbnB1dCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBob29rcy5jcmVhdGVGcm9tSW5wdXRGYWxsYmFjayhjb25maWcpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlTG9jYWxPclVUQyhpbnB1dCwgZm9ybWF0LCBsb2NhbGUsIHN0cmljdCwgaXNVVEMpIHtcbiAgICAgICAgdmFyIGMgPSB7fTtcblxuICAgICAgICBpZiAoZm9ybWF0ID09PSB0cnVlIHx8IGZvcm1hdCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHN0cmljdCA9IGZvcm1hdDtcbiAgICAgICAgICAgIGZvcm1hdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChsb2NhbGUgPT09IHRydWUgfHwgbG9jYWxlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgc3RyaWN0ID0gbG9jYWxlO1xuICAgICAgICAgICAgbG9jYWxlID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgKGlzT2JqZWN0KGlucHV0KSAmJiBpc09iamVjdEVtcHR5KGlucHV0KSkgfHxcbiAgICAgICAgICAgIChpc0FycmF5KGlucHV0KSAmJiBpbnB1dC5sZW5ndGggPT09IDApXG4gICAgICAgICkge1xuICAgICAgICAgICAgaW5wdXQgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgLy8gb2JqZWN0IGNvbnN0cnVjdGlvbiBtdXN0IGJlIGRvbmUgdGhpcyB3YXkuXG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9tb21lbnQvbW9tZW50L2lzc3Vlcy8xNDIzXG4gICAgICAgIGMuX2lzQU1vbWVudE9iamVjdCA9IHRydWU7XG4gICAgICAgIGMuX3VzZVVUQyA9IGMuX2lzVVRDID0gaXNVVEM7XG4gICAgICAgIGMuX2wgPSBsb2NhbGU7XG4gICAgICAgIGMuX2kgPSBpbnB1dDtcbiAgICAgICAgYy5fZiA9IGZvcm1hdDtcbiAgICAgICAgYy5fc3RyaWN0ID0gc3RyaWN0O1xuXG4gICAgICAgIHJldHVybiBjcmVhdGVGcm9tQ29uZmlnKGMpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUxvY2FsKGlucHV0LCBmb3JtYXQsIGxvY2FsZSwgc3RyaWN0KSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVMb2NhbE9yVVRDKGlucHV0LCBmb3JtYXQsIGxvY2FsZSwgc3RyaWN0LCBmYWxzZSk7XG4gICAgfVxuXG4gICAgdmFyIHByb3RvdHlwZU1pbiA9IGRlcHJlY2F0ZShcbiAgICAgICAgICAgICdtb21lbnQoKS5taW4gaXMgZGVwcmVjYXRlZCwgdXNlIG1vbWVudC5tYXggaW5zdGVhZC4gaHR0cDovL21vbWVudGpzLmNvbS9ndWlkZXMvIy93YXJuaW5ncy9taW4tbWF4LycsXG4gICAgICAgICAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIG90aGVyID0gY3JlYXRlTG9jYWwuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pc1ZhbGlkKCkgJiYgb3RoZXIuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBvdGhlciA8IHRoaXMgPyB0aGlzIDogb3RoZXI7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUludmFsaWQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICksXG4gICAgICAgIHByb3RvdHlwZU1heCA9IGRlcHJlY2F0ZShcbiAgICAgICAgICAgICdtb21lbnQoKS5tYXggaXMgZGVwcmVjYXRlZCwgdXNlIG1vbWVudC5taW4gaW5zdGVhZC4gaHR0cDovL21vbWVudGpzLmNvbS9ndWlkZXMvIy93YXJuaW5ncy9taW4tbWF4LycsXG4gICAgICAgICAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIG90aGVyID0gY3JlYXRlTG9jYWwuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pc1ZhbGlkKCkgJiYgb3RoZXIuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBvdGhlciA+IHRoaXMgPyB0aGlzIDogb3RoZXI7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUludmFsaWQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG5cbiAgICAvLyBQaWNrIGEgbW9tZW50IG0gZnJvbSBtb21lbnRzIHNvIHRoYXQgbVtmbl0ob3RoZXIpIGlzIHRydWUgZm9yIGFsbFxuICAgIC8vIG90aGVyLiBUaGlzIHJlbGllcyBvbiB0aGUgZnVuY3Rpb24gZm4gdG8gYmUgdHJhbnNpdGl2ZS5cbiAgICAvL1xuICAgIC8vIG1vbWVudHMgc2hvdWxkIGVpdGhlciBiZSBhbiBhcnJheSBvZiBtb21lbnQgb2JqZWN0cyBvciBhbiBhcnJheSwgd2hvc2VcbiAgICAvLyBmaXJzdCBlbGVtZW50IGlzIGFuIGFycmF5IG9mIG1vbWVudCBvYmplY3RzLlxuICAgIGZ1bmN0aW9uIHBpY2tCeShmbiwgbW9tZW50cykge1xuICAgICAgICB2YXIgcmVzLCBpO1xuICAgICAgICBpZiAobW9tZW50cy5sZW5ndGggPT09IDEgJiYgaXNBcnJheShtb21lbnRzWzBdKSkge1xuICAgICAgICAgICAgbW9tZW50cyA9IG1vbWVudHNbMF07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFtb21lbnRzLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUxvY2FsKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmVzID0gbW9tZW50c1swXTtcbiAgICAgICAgZm9yIChpID0gMTsgaSA8IG1vbWVudHMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGlmICghbW9tZW50c1tpXS5pc1ZhbGlkKCkgfHwgbW9tZW50c1tpXVtmbl0ocmVzKSkge1xuICAgICAgICAgICAgICAgIHJlcyA9IG1vbWVudHNbaV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG5cbiAgICAvLyBUT0RPOiBVc2UgW10uc29ydCBpbnN0ZWFkP1xuICAgIGZ1bmN0aW9uIG1pbigpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMCk7XG5cbiAgICAgICAgcmV0dXJuIHBpY2tCeSgnaXNCZWZvcmUnLCBhcmdzKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtYXgoKSB7XG4gICAgICAgIHZhciBhcmdzID0gW10uc2xpY2UuY2FsbChhcmd1bWVudHMsIDApO1xuXG4gICAgICAgIHJldHVybiBwaWNrQnkoJ2lzQWZ0ZXInLCBhcmdzKTtcbiAgICB9XG5cbiAgICB2YXIgbm93ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gRGF0ZS5ub3cgPyBEYXRlLm5vdygpIDogK25ldyBEYXRlKCk7XG4gICAgfTtcblxuICAgIHZhciBvcmRlcmluZyA9IFtcbiAgICAgICAgJ3llYXInLFxuICAgICAgICAncXVhcnRlcicsXG4gICAgICAgICdtb250aCcsXG4gICAgICAgICd3ZWVrJyxcbiAgICAgICAgJ2RheScsXG4gICAgICAgICdob3VyJyxcbiAgICAgICAgJ21pbnV0ZScsXG4gICAgICAgICdzZWNvbmQnLFxuICAgICAgICAnbWlsbGlzZWNvbmQnLFxuICAgIF07XG5cbiAgICBmdW5jdGlvbiBpc0R1cmF0aW9uVmFsaWQobSkge1xuICAgICAgICB2YXIga2V5LFxuICAgICAgICAgICAgdW5pdEhhc0RlY2ltYWwgPSBmYWxzZSxcbiAgICAgICAgICAgIGksXG4gICAgICAgICAgICBvcmRlckxlbiA9IG9yZGVyaW5nLmxlbmd0aDtcbiAgICAgICAgZm9yIChrZXkgaW4gbSkge1xuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIGhhc093blByb3AobSwga2V5KSAmJlxuICAgICAgICAgICAgICAgICEoXG4gICAgICAgICAgICAgICAgICAgIGluZGV4T2YuY2FsbChvcmRlcmluZywga2V5KSAhPT0gLTEgJiZcbiAgICAgICAgICAgICAgICAgICAgKG1ba2V5XSA9PSBudWxsIHx8ICFpc05hTihtW2tleV0pKVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBvcmRlckxlbjsgKytpKSB7XG4gICAgICAgICAgICBpZiAobVtvcmRlcmluZ1tpXV0pIHtcbiAgICAgICAgICAgICAgICBpZiAodW5pdEhhc0RlY2ltYWwpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOyAvLyBvbmx5IGFsbG93IG5vbi1pbnRlZ2VycyBmb3Igc21hbGxlc3QgdW5pdFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocGFyc2VGbG9hdChtW29yZGVyaW5nW2ldXSkgIT09IHRvSW50KG1bb3JkZXJpbmdbaV1dKSkge1xuICAgICAgICAgICAgICAgICAgICB1bml0SGFzRGVjaW1hbCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNWYWxpZCQxKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faXNWYWxpZDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVJbnZhbGlkJDEoKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVEdXJhdGlvbihOYU4pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIER1cmF0aW9uKGR1cmF0aW9uKSB7XG4gICAgICAgIHZhciBub3JtYWxpemVkSW5wdXQgPSBub3JtYWxpemVPYmplY3RVbml0cyhkdXJhdGlvbiksXG4gICAgICAgICAgICB5ZWFycyA9IG5vcm1hbGl6ZWRJbnB1dC55ZWFyIHx8IDAsXG4gICAgICAgICAgICBxdWFydGVycyA9IG5vcm1hbGl6ZWRJbnB1dC5xdWFydGVyIHx8IDAsXG4gICAgICAgICAgICBtb250aHMgPSBub3JtYWxpemVkSW5wdXQubW9udGggfHwgMCxcbiAgICAgICAgICAgIHdlZWtzID0gbm9ybWFsaXplZElucHV0LndlZWsgfHwgbm9ybWFsaXplZElucHV0Lmlzb1dlZWsgfHwgMCxcbiAgICAgICAgICAgIGRheXMgPSBub3JtYWxpemVkSW5wdXQuZGF5IHx8IDAsXG4gICAgICAgICAgICBob3VycyA9IG5vcm1hbGl6ZWRJbnB1dC5ob3VyIHx8IDAsXG4gICAgICAgICAgICBtaW51dGVzID0gbm9ybWFsaXplZElucHV0Lm1pbnV0ZSB8fCAwLFxuICAgICAgICAgICAgc2Vjb25kcyA9IG5vcm1hbGl6ZWRJbnB1dC5zZWNvbmQgfHwgMCxcbiAgICAgICAgICAgIG1pbGxpc2Vjb25kcyA9IG5vcm1hbGl6ZWRJbnB1dC5taWxsaXNlY29uZCB8fCAwO1xuXG4gICAgICAgIHRoaXMuX2lzVmFsaWQgPSBpc0R1cmF0aW9uVmFsaWQobm9ybWFsaXplZElucHV0KTtcblxuICAgICAgICAvLyByZXByZXNlbnRhdGlvbiBmb3IgZGF0ZUFkZFJlbW92ZVxuICAgICAgICB0aGlzLl9taWxsaXNlY29uZHMgPVxuICAgICAgICAgICAgK21pbGxpc2Vjb25kcyArXG4gICAgICAgICAgICBzZWNvbmRzICogMWUzICsgLy8gMTAwMFxuICAgICAgICAgICAgbWludXRlcyAqIDZlNCArIC8vIDEwMDAgKiA2MFxuICAgICAgICAgICAgaG91cnMgKiAxMDAwICogNjAgKiA2MDsgLy91c2luZyAxMDAwICogNjAgKiA2MCBpbnN0ZWFkIG9mIDM2ZTUgdG8gYXZvaWQgZmxvYXRpbmcgcG9pbnQgcm91bmRpbmcgZXJyb3JzIGh0dHBzOi8vZ2l0aHViLmNvbS9tb21lbnQvbW9tZW50L2lzc3Vlcy8yOTc4XG4gICAgICAgIC8vIEJlY2F1c2Ugb2YgZGF0ZUFkZFJlbW92ZSB0cmVhdHMgMjQgaG91cnMgYXMgZGlmZmVyZW50IGZyb20gYVxuICAgICAgICAvLyBkYXkgd2hlbiB3b3JraW5nIGFyb3VuZCBEU1QsIHdlIG5lZWQgdG8gc3RvcmUgdGhlbSBzZXBhcmF0ZWx5XG4gICAgICAgIHRoaXMuX2RheXMgPSArZGF5cyArIHdlZWtzICogNztcbiAgICAgICAgLy8gSXQgaXMgaW1wb3NzaWJsZSB0byB0cmFuc2xhdGUgbW9udGhzIGludG8gZGF5cyB3aXRob3V0IGtub3dpbmdcbiAgICAgICAgLy8gd2hpY2ggbW9udGhzIHlvdSBhcmUgYXJlIHRhbGtpbmcgYWJvdXQsIHNvIHdlIGhhdmUgdG8gc3RvcmVcbiAgICAgICAgLy8gaXQgc2VwYXJhdGVseS5cbiAgICAgICAgdGhpcy5fbW9udGhzID0gK21vbnRocyArIHF1YXJ0ZXJzICogMyArIHllYXJzICogMTI7XG5cbiAgICAgICAgdGhpcy5fZGF0YSA9IHt9O1xuXG4gICAgICAgIHRoaXMuX2xvY2FsZSA9IGdldExvY2FsZSgpO1xuXG4gICAgICAgIHRoaXMuX2J1YmJsZSgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzRHVyYXRpb24ob2JqKSB7XG4gICAgICAgIHJldHVybiBvYmogaW5zdGFuY2VvZiBEdXJhdGlvbjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhYnNSb3VuZChudW1iZXIpIHtcbiAgICAgICAgaWYgKG51bWJlciA8IDApIHtcbiAgICAgICAgICAgIHJldHVybiBNYXRoLnJvdW5kKC0xICogbnVtYmVyKSAqIC0xO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIE1hdGgucm91bmQobnVtYmVyKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIGNvbXBhcmUgdHdvIGFycmF5cywgcmV0dXJuIHRoZSBudW1iZXIgb2YgZGlmZmVyZW5jZXNcbiAgICBmdW5jdGlvbiBjb21wYXJlQXJyYXlzKGFycmF5MSwgYXJyYXkyLCBkb250Q29udmVydCkge1xuICAgICAgICB2YXIgbGVuID0gTWF0aC5taW4oYXJyYXkxLmxlbmd0aCwgYXJyYXkyLmxlbmd0aCksXG4gICAgICAgICAgICBsZW5ndGhEaWZmID0gTWF0aC5hYnMoYXJyYXkxLmxlbmd0aCAtIGFycmF5Mi5sZW5ndGgpLFxuICAgICAgICAgICAgZGlmZnMgPSAwLFxuICAgICAgICAgICAgaTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgKGRvbnRDb252ZXJ0ICYmIGFycmF5MVtpXSAhPT0gYXJyYXkyW2ldKSB8fFxuICAgICAgICAgICAgICAgICghZG9udENvbnZlcnQgJiYgdG9JbnQoYXJyYXkxW2ldKSAhPT0gdG9JbnQoYXJyYXkyW2ldKSlcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIGRpZmZzKys7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRpZmZzICsgbGVuZ3RoRGlmZjtcbiAgICB9XG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBmdW5jdGlvbiBvZmZzZXQodG9rZW4sIHNlcGFyYXRvcikge1xuICAgICAgICBhZGRGb3JtYXRUb2tlbih0b2tlbiwgMCwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIG9mZnNldCA9IHRoaXMudXRjT2Zmc2V0KCksXG4gICAgICAgICAgICAgICAgc2lnbiA9ICcrJztcbiAgICAgICAgICAgIGlmIChvZmZzZXQgPCAwKSB7XG4gICAgICAgICAgICAgICAgb2Zmc2V0ID0gLW9mZnNldDtcbiAgICAgICAgICAgICAgICBzaWduID0gJy0nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICBzaWduICtcbiAgICAgICAgICAgICAgICB6ZXJvRmlsbCh+fihvZmZzZXQgLyA2MCksIDIpICtcbiAgICAgICAgICAgICAgICBzZXBhcmF0b3IgK1xuICAgICAgICAgICAgICAgIHplcm9GaWxsKH5+b2Zmc2V0ICUgNjAsIDIpXG4gICAgICAgICAgICApO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBvZmZzZXQoJ1onLCAnOicpO1xuICAgIG9mZnNldCgnWlonLCAnJyk7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBhZGRSZWdleFRva2VuKCdaJywgbWF0Y2hTaG9ydE9mZnNldCk7XG4gICAgYWRkUmVnZXhUb2tlbignWlonLCBtYXRjaFNob3J0T2Zmc2V0KTtcbiAgICBhZGRQYXJzZVRva2VuKFsnWicsICdaWiddLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICAgICAgY29uZmlnLl91c2VVVEMgPSB0cnVlO1xuICAgICAgICBjb25maWcuX3R6bSA9IG9mZnNldEZyb21TdHJpbmcobWF0Y2hTaG9ydE9mZnNldCwgaW5wdXQpO1xuICAgIH0pO1xuXG4gICAgLy8gSEVMUEVSU1xuXG4gICAgLy8gdGltZXpvbmUgY2h1bmtlclxuICAgIC8vICcrMTA6MDAnID4gWycxMCcsICAnMDAnXVxuICAgIC8vICctMTUzMCcgID4gWyctMTUnLCAnMzAnXVxuICAgIHZhciBjaHVua09mZnNldCA9IC8oW1xcK1xcLV18XFxkXFxkKS9naTtcblxuICAgIGZ1bmN0aW9uIG9mZnNldEZyb21TdHJpbmcobWF0Y2hlciwgc3RyaW5nKSB7XG4gICAgICAgIHZhciBtYXRjaGVzID0gKHN0cmluZyB8fCAnJykubWF0Y2gobWF0Y2hlciksXG4gICAgICAgICAgICBjaHVuayxcbiAgICAgICAgICAgIHBhcnRzLFxuICAgICAgICAgICAgbWludXRlcztcblxuICAgICAgICBpZiAobWF0Y2hlcyA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBjaHVuayA9IG1hdGNoZXNbbWF0Y2hlcy5sZW5ndGggLSAxXSB8fCBbXTtcbiAgICAgICAgcGFydHMgPSAoY2h1bmsgKyAnJykubWF0Y2goY2h1bmtPZmZzZXQpIHx8IFsnLScsIDAsIDBdO1xuICAgICAgICBtaW51dGVzID0gKyhwYXJ0c1sxXSAqIDYwKSArIHRvSW50KHBhcnRzWzJdKTtcblxuICAgICAgICByZXR1cm4gbWludXRlcyA9PT0gMCA/IDAgOiBwYXJ0c1swXSA9PT0gJysnID8gbWludXRlcyA6IC1taW51dGVzO1xuICAgIH1cblxuICAgIC8vIFJldHVybiBhIG1vbWVudCBmcm9tIGlucHV0LCB0aGF0IGlzIGxvY2FsL3V0Yy96b25lIGVxdWl2YWxlbnQgdG8gbW9kZWwuXG4gICAgZnVuY3Rpb24gY2xvbmVXaXRoT2Zmc2V0KGlucHV0LCBtb2RlbCkge1xuICAgICAgICB2YXIgcmVzLCBkaWZmO1xuICAgICAgICBpZiAobW9kZWwuX2lzVVRDKSB7XG4gICAgICAgICAgICByZXMgPSBtb2RlbC5jbG9uZSgpO1xuICAgICAgICAgICAgZGlmZiA9XG4gICAgICAgICAgICAgICAgKGlzTW9tZW50KGlucHV0KSB8fCBpc0RhdGUoaW5wdXQpXG4gICAgICAgICAgICAgICAgICAgID8gaW5wdXQudmFsdWVPZigpXG4gICAgICAgICAgICAgICAgICAgIDogY3JlYXRlTG9jYWwoaW5wdXQpLnZhbHVlT2YoKSkgLSByZXMudmFsdWVPZigpO1xuICAgICAgICAgICAgLy8gVXNlIGxvdy1sZXZlbCBhcGksIGJlY2F1c2UgdGhpcyBmbiBpcyBsb3ctbGV2ZWwgYXBpLlxuICAgICAgICAgICAgcmVzLl9kLnNldFRpbWUocmVzLl9kLnZhbHVlT2YoKSArIGRpZmYpO1xuICAgICAgICAgICAgaG9va3MudXBkYXRlT2Zmc2V0KHJlcywgZmFsc2UpO1xuICAgICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVMb2NhbChpbnB1dCkubG9jYWwoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldERhdGVPZmZzZXQobSkge1xuICAgICAgICAvLyBPbiBGaXJlZm94LjI0IERhdGUjZ2V0VGltZXpvbmVPZmZzZXQgcmV0dXJucyBhIGZsb2F0aW5nIHBvaW50LlxuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vbW9tZW50L21vbWVudC9wdWxsLzE4NzFcbiAgICAgICAgcmV0dXJuIC1NYXRoLnJvdW5kKG0uX2QuZ2V0VGltZXpvbmVPZmZzZXQoKSk7XG4gICAgfVxuXG4gICAgLy8gSE9PS1NcblxuICAgIC8vIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSBjYWxsZWQgd2hlbmV2ZXIgYSBtb21lbnQgaXMgbXV0YXRlZC5cbiAgICAvLyBJdCBpcyBpbnRlbmRlZCB0byBrZWVwIHRoZSBvZmZzZXQgaW4gc3luYyB3aXRoIHRoZSB0aW1lem9uZS5cbiAgICBob29rcy51cGRhdGVPZmZzZXQgPSBmdW5jdGlvbiAoKSB7fTtcblxuICAgIC8vIE1PTUVOVFNcblxuICAgIC8vIGtlZXBMb2NhbFRpbWUgPSB0cnVlIG1lYW5zIG9ubHkgY2hhbmdlIHRoZSB0aW1lem9uZSwgd2l0aG91dFxuICAgIC8vIGFmZmVjdGluZyB0aGUgbG9jYWwgaG91ci4gU28gNTozMToyNiArMDMwMCAtLVt1dGNPZmZzZXQoMiwgdHJ1ZSldLS0+XG4gICAgLy8gNTozMToyNiArMDIwMCBJdCBpcyBwb3NzaWJsZSB0aGF0IDU6MzE6MjYgZG9lc24ndCBleGlzdCB3aXRoIG9mZnNldFxuICAgIC8vICswMjAwLCBzbyB3ZSBhZGp1c3QgdGhlIHRpbWUgYXMgbmVlZGVkLCB0byBiZSB2YWxpZC5cbiAgICAvL1xuICAgIC8vIEtlZXBpbmcgdGhlIHRpbWUgYWN0dWFsbHkgYWRkcy9zdWJ0cmFjdHMgKG9uZSBob3VyKVxuICAgIC8vIGZyb20gdGhlIGFjdHVhbCByZXByZXNlbnRlZCB0aW1lLiBUaGF0IGlzIHdoeSB3ZSBjYWxsIHVwZGF0ZU9mZnNldFxuICAgIC8vIGEgc2Vjb25kIHRpbWUuIEluIGNhc2UgaXQgd2FudHMgdXMgdG8gY2hhbmdlIHRoZSBvZmZzZXQgYWdhaW5cbiAgICAvLyBfY2hhbmdlSW5Qcm9ncmVzcyA9PSB0cnVlIGNhc2UsIHRoZW4gd2UgaGF2ZSB0byBhZGp1c3QsIGJlY2F1c2VcbiAgICAvLyB0aGVyZSBpcyBubyBzdWNoIHRpbWUgaW4gdGhlIGdpdmVuIHRpbWV6b25lLlxuICAgIGZ1bmN0aW9uIGdldFNldE9mZnNldChpbnB1dCwga2VlcExvY2FsVGltZSwga2VlcE1pbnV0ZXMpIHtcbiAgICAgICAgdmFyIG9mZnNldCA9IHRoaXMuX29mZnNldCB8fCAwLFxuICAgICAgICAgICAgbG9jYWxBZGp1c3Q7XG4gICAgICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dCAhPSBudWxsID8gdGhpcyA6IE5hTjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaW5wdXQgIT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICBpbnB1dCA9IG9mZnNldEZyb21TdHJpbmcobWF0Y2hTaG9ydE9mZnNldCwgaW5wdXQpO1xuICAgICAgICAgICAgICAgIGlmIChpbnB1dCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKE1hdGguYWJzKGlucHV0KSA8IDE2ICYmICFrZWVwTWludXRlcykge1xuICAgICAgICAgICAgICAgIGlucHV0ID0gaW5wdXQgKiA2MDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghdGhpcy5faXNVVEMgJiYga2VlcExvY2FsVGltZSkge1xuICAgICAgICAgICAgICAgIGxvY2FsQWRqdXN0ID0gZ2V0RGF0ZU9mZnNldCh0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX29mZnNldCA9IGlucHV0O1xuICAgICAgICAgICAgdGhpcy5faXNVVEMgPSB0cnVlO1xuICAgICAgICAgICAgaWYgKGxvY2FsQWRqdXN0ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFkZChsb2NhbEFkanVzdCwgJ20nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChvZmZzZXQgIT09IGlucHV0KSB7XG4gICAgICAgICAgICAgICAgaWYgKCFrZWVwTG9jYWxUaW1lIHx8IHRoaXMuX2NoYW5nZUluUHJvZ3Jlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgYWRkU3VidHJhY3QoXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLFxuICAgICAgICAgICAgICAgICAgICAgICAgY3JlYXRlRHVyYXRpb24oaW5wdXQgLSBvZmZzZXQsICdtJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCF0aGlzLl9jaGFuZ2VJblByb2dyZXNzKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2NoYW5nZUluUHJvZ3Jlc3MgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBob29rcy51cGRhdGVPZmZzZXQodGhpcywgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2NoYW5nZUluUHJvZ3Jlc3MgPSBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2lzVVRDID8gb2Zmc2V0IDogZ2V0RGF0ZU9mZnNldCh0aGlzKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFNldFpvbmUoaW5wdXQsIGtlZXBMb2NhbFRpbWUpIHtcbiAgICAgICAgaWYgKGlucHV0ICE9IG51bGwpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgaW5wdXQgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgaW5wdXQgPSAtaW5wdXQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMudXRjT2Zmc2V0KGlucHV0LCBrZWVwTG9jYWxUaW1lKTtcblxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gLXRoaXMudXRjT2Zmc2V0KCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXRPZmZzZXRUb1VUQyhrZWVwTG9jYWxUaW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnV0Y09mZnNldCgwLCBrZWVwTG9jYWxUaW1lKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXRPZmZzZXRUb0xvY2FsKGtlZXBMb2NhbFRpbWUpIHtcbiAgICAgICAgaWYgKHRoaXMuX2lzVVRDKSB7XG4gICAgICAgICAgICB0aGlzLnV0Y09mZnNldCgwLCBrZWVwTG9jYWxUaW1lKTtcbiAgICAgICAgICAgIHRoaXMuX2lzVVRDID0gZmFsc2U7XG5cbiAgICAgICAgICAgIGlmIChrZWVwTG9jYWxUaW1lKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdWJ0cmFjdChnZXREYXRlT2Zmc2V0KHRoaXMpLCAnbScpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldE9mZnNldFRvUGFyc2VkT2Zmc2V0KCkge1xuICAgICAgICBpZiAodGhpcy5fdHptICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMudXRjT2Zmc2V0KHRoaXMuX3R6bSwgZmFsc2UsIHRydWUpO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiB0aGlzLl9pID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgdmFyIHRab25lID0gb2Zmc2V0RnJvbVN0cmluZyhtYXRjaE9mZnNldCwgdGhpcy5faSk7XG4gICAgICAgICAgICBpZiAodFpvbmUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoaXMudXRjT2Zmc2V0KHRab25lKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy51dGNPZmZzZXQoMCwgdHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaGFzQWxpZ25lZEhvdXJPZmZzZXQoaW5wdXQpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlucHV0ID0gaW5wdXQgPyBjcmVhdGVMb2NhbChpbnB1dCkudXRjT2Zmc2V0KCkgOiAwO1xuXG4gICAgICAgIHJldHVybiAodGhpcy51dGNPZmZzZXQoKSAtIGlucHV0KSAlIDYwID09PSAwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzRGF5bGlnaHRTYXZpbmdUaW1lKCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgdGhpcy51dGNPZmZzZXQoKSA+IHRoaXMuY2xvbmUoKS5tb250aCgwKS51dGNPZmZzZXQoKSB8fFxuICAgICAgICAgICAgdGhpcy51dGNPZmZzZXQoKSA+IHRoaXMuY2xvbmUoKS5tb250aCg1KS51dGNPZmZzZXQoKVxuICAgICAgICApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzRGF5bGlnaHRTYXZpbmdUaW1lU2hpZnRlZCgpIHtcbiAgICAgICAgaWYgKCFpc1VuZGVmaW5lZCh0aGlzLl9pc0RTVFNoaWZ0ZWQpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5faXNEU1RTaGlmdGVkO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGMgPSB7fSxcbiAgICAgICAgICAgIG90aGVyO1xuXG4gICAgICAgIGNvcHlDb25maWcoYywgdGhpcyk7XG4gICAgICAgIGMgPSBwcmVwYXJlQ29uZmlnKGMpO1xuXG4gICAgICAgIGlmIChjLl9hKSB7XG4gICAgICAgICAgICBvdGhlciA9IGMuX2lzVVRDID8gY3JlYXRlVVRDKGMuX2EpIDogY3JlYXRlTG9jYWwoYy5fYSk7XG4gICAgICAgICAgICB0aGlzLl9pc0RTVFNoaWZ0ZWQgPVxuICAgICAgICAgICAgICAgIHRoaXMuaXNWYWxpZCgpICYmIGNvbXBhcmVBcnJheXMoYy5fYSwgb3RoZXIudG9BcnJheSgpKSA+IDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9pc0RTVFNoaWZ0ZWQgPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLl9pc0RTVFNoaWZ0ZWQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNMb2NhbCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNWYWxpZCgpID8gIXRoaXMuX2lzVVRDIDogZmFsc2U7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNVdGNPZmZzZXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzVmFsaWQoKSA/IHRoaXMuX2lzVVRDIDogZmFsc2U7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNVdGMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzVmFsaWQoKSA/IHRoaXMuX2lzVVRDICYmIHRoaXMuX29mZnNldCA9PT0gMCA6IGZhbHNlO1xuICAgIH1cblxuICAgIC8vIEFTUC5ORVQganNvbiBkYXRlIGZvcm1hdCByZWdleFxuICAgIHZhciBhc3BOZXRSZWdleCA9IC9eKC18XFwrKT8oPzooXFxkKilbLiBdKT8oXFxkKyk6KFxcZCspKD86OihcXGQrKShcXC5cXGQqKT8pPyQvLFxuICAgICAgICAvLyBmcm9tIGh0dHA6Ly9kb2NzLmNsb3N1cmUtbGlicmFyeS5nb29nbGVjb2RlLmNvbS9naXQvY2xvc3VyZV9nb29nX2RhdGVfZGF0ZS5qcy5zb3VyY2UuaHRtbFxuICAgICAgICAvLyBzb21ld2hhdCBtb3JlIGluIGxpbmUgd2l0aCA0LjQuMy4yIDIwMDQgc3BlYywgYnV0IGFsbG93cyBkZWNpbWFsIGFueXdoZXJlXG4gICAgICAgIC8vIGFuZCBmdXJ0aGVyIG1vZGlmaWVkIHRvIGFsbG93IGZvciBzdHJpbmdzIGNvbnRhaW5pbmcgYm90aCB3ZWVrIGFuZCBkYXlcbiAgICAgICAgaXNvUmVnZXggPVxuICAgICAgICAgICAgL14oLXxcXCspP1AoPzooWy0rXT9bMC05LC5dKilZKT8oPzooWy0rXT9bMC05LC5dKilNKT8oPzooWy0rXT9bMC05LC5dKilXKT8oPzooWy0rXT9bMC05LC5dKilEKT8oPzpUKD86KFstK10/WzAtOSwuXSopSCk/KD86KFstK10/WzAtOSwuXSopTSk/KD86KFstK10/WzAtOSwuXSopUyk/KT8kLztcblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUR1cmF0aW9uKGlucHV0LCBrZXkpIHtcbiAgICAgICAgdmFyIGR1cmF0aW9uID0gaW5wdXQsXG4gICAgICAgICAgICAvLyBtYXRjaGluZyBhZ2FpbnN0IHJlZ2V4cCBpcyBleHBlbnNpdmUsIGRvIGl0IG9uIGRlbWFuZFxuICAgICAgICAgICAgbWF0Y2ggPSBudWxsLFxuICAgICAgICAgICAgc2lnbixcbiAgICAgICAgICAgIHJldCxcbiAgICAgICAgICAgIGRpZmZSZXM7XG5cbiAgICAgICAgaWYgKGlzRHVyYXRpb24oaW5wdXQpKSB7XG4gICAgICAgICAgICBkdXJhdGlvbiA9IHtcbiAgICAgICAgICAgICAgICBtczogaW5wdXQuX21pbGxpc2Vjb25kcyxcbiAgICAgICAgICAgICAgICBkOiBpbnB1dC5fZGF5cyxcbiAgICAgICAgICAgICAgICBNOiBpbnB1dC5fbW9udGhzLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIGlmIChpc051bWJlcihpbnB1dCkgfHwgIWlzTmFOKCtpbnB1dCkpIHtcbiAgICAgICAgICAgIGR1cmF0aW9uID0ge307XG4gICAgICAgICAgICBpZiAoa2V5KSB7XG4gICAgICAgICAgICAgICAgZHVyYXRpb25ba2V5XSA9ICtpbnB1dDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZHVyYXRpb24ubWlsbGlzZWNvbmRzID0gK2lucHV0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKChtYXRjaCA9IGFzcE5ldFJlZ2V4LmV4ZWMoaW5wdXQpKSkge1xuICAgICAgICAgICAgc2lnbiA9IG1hdGNoWzFdID09PSAnLScgPyAtMSA6IDE7XG4gICAgICAgICAgICBkdXJhdGlvbiA9IHtcbiAgICAgICAgICAgICAgICB5OiAwLFxuICAgICAgICAgICAgICAgIGQ6IHRvSW50KG1hdGNoW0RBVEVdKSAqIHNpZ24sXG4gICAgICAgICAgICAgICAgaDogdG9JbnQobWF0Y2hbSE9VUl0pICogc2lnbixcbiAgICAgICAgICAgICAgICBtOiB0b0ludChtYXRjaFtNSU5VVEVdKSAqIHNpZ24sXG4gICAgICAgICAgICAgICAgczogdG9JbnQobWF0Y2hbU0VDT05EXSkgKiBzaWduLFxuICAgICAgICAgICAgICAgIG1zOiB0b0ludChhYnNSb3VuZChtYXRjaFtNSUxMSVNFQ09ORF0gKiAxMDAwKSkgKiBzaWduLCAvLyB0aGUgbWlsbGlzZWNvbmQgZGVjaW1hbCBwb2ludCBpcyBpbmNsdWRlZCBpbiB0aGUgbWF0Y2hcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSBpZiAoKG1hdGNoID0gaXNvUmVnZXguZXhlYyhpbnB1dCkpKSB7XG4gICAgICAgICAgICBzaWduID0gbWF0Y2hbMV0gPT09ICctJyA/IC0xIDogMTtcbiAgICAgICAgICAgIGR1cmF0aW9uID0ge1xuICAgICAgICAgICAgICAgIHk6IHBhcnNlSXNvKG1hdGNoWzJdLCBzaWduKSxcbiAgICAgICAgICAgICAgICBNOiBwYXJzZUlzbyhtYXRjaFszXSwgc2lnbiksXG4gICAgICAgICAgICAgICAgdzogcGFyc2VJc28obWF0Y2hbNF0sIHNpZ24pLFxuICAgICAgICAgICAgICAgIGQ6IHBhcnNlSXNvKG1hdGNoWzVdLCBzaWduKSxcbiAgICAgICAgICAgICAgICBoOiBwYXJzZUlzbyhtYXRjaFs2XSwgc2lnbiksXG4gICAgICAgICAgICAgICAgbTogcGFyc2VJc28obWF0Y2hbN10sIHNpZ24pLFxuICAgICAgICAgICAgICAgIHM6IHBhcnNlSXNvKG1hdGNoWzhdLCBzaWduKSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSBpZiAoZHVyYXRpb24gPT0gbnVsbCkge1xuICAgICAgICAgICAgLy8gY2hlY2tzIGZvciBudWxsIG9yIHVuZGVmaW5lZFxuICAgICAgICAgICAgZHVyYXRpb24gPSB7fTtcbiAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICAgIHR5cGVvZiBkdXJhdGlvbiA9PT0gJ29iamVjdCcgJiZcbiAgICAgICAgICAgICgnZnJvbScgaW4gZHVyYXRpb24gfHwgJ3RvJyBpbiBkdXJhdGlvbilcbiAgICAgICAgKSB7XG4gICAgICAgICAgICBkaWZmUmVzID0gbW9tZW50c0RpZmZlcmVuY2UoXG4gICAgICAgICAgICAgICAgY3JlYXRlTG9jYWwoZHVyYXRpb24uZnJvbSksXG4gICAgICAgICAgICAgICAgY3JlYXRlTG9jYWwoZHVyYXRpb24udG8pXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBkdXJhdGlvbiA9IHt9O1xuICAgICAgICAgICAgZHVyYXRpb24ubXMgPSBkaWZmUmVzLm1pbGxpc2Vjb25kcztcbiAgICAgICAgICAgIGR1cmF0aW9uLk0gPSBkaWZmUmVzLm1vbnRocztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldCA9IG5ldyBEdXJhdGlvbihkdXJhdGlvbik7XG5cbiAgICAgICAgaWYgKGlzRHVyYXRpb24oaW5wdXQpICYmIGhhc093blByb3AoaW5wdXQsICdfbG9jYWxlJykpIHtcbiAgICAgICAgICAgIHJldC5fbG9jYWxlID0gaW5wdXQuX2xvY2FsZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc0R1cmF0aW9uKGlucHV0KSAmJiBoYXNPd25Qcm9wKGlucHV0LCAnX2lzVmFsaWQnKSkge1xuICAgICAgICAgICAgcmV0Ll9pc1ZhbGlkID0gaW5wdXQuX2lzVmFsaWQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmV0O1xuICAgIH1cblxuICAgIGNyZWF0ZUR1cmF0aW9uLmZuID0gRHVyYXRpb24ucHJvdG90eXBlO1xuICAgIGNyZWF0ZUR1cmF0aW9uLmludmFsaWQgPSBjcmVhdGVJbnZhbGlkJDE7XG5cbiAgICBmdW5jdGlvbiBwYXJzZUlzbyhpbnAsIHNpZ24pIHtcbiAgICAgICAgLy8gV2UnZCBub3JtYWxseSB1c2Ugfn5pbnAgZm9yIHRoaXMsIGJ1dCB1bmZvcnR1bmF0ZWx5IGl0IGFsc29cbiAgICAgICAgLy8gY29udmVydHMgZmxvYXRzIHRvIGludHMuXG4gICAgICAgIC8vIGlucCBtYXkgYmUgdW5kZWZpbmVkLCBzbyBjYXJlZnVsIGNhbGxpbmcgcmVwbGFjZSBvbiBpdC5cbiAgICAgICAgdmFyIHJlcyA9IGlucCAmJiBwYXJzZUZsb2F0KGlucC5yZXBsYWNlKCcsJywgJy4nKSk7XG4gICAgICAgIC8vIGFwcGx5IHNpZ24gd2hpbGUgd2UncmUgYXQgaXRcbiAgICAgICAgcmV0dXJuIChpc05hTihyZXMpID8gMCA6IHJlcykgKiBzaWduO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBvc2l0aXZlTW9tZW50c0RpZmZlcmVuY2UoYmFzZSwgb3RoZXIpIHtcbiAgICAgICAgdmFyIHJlcyA9IHt9O1xuXG4gICAgICAgIHJlcy5tb250aHMgPVxuICAgICAgICAgICAgb3RoZXIubW9udGgoKSAtIGJhc2UubW9udGgoKSArIChvdGhlci55ZWFyKCkgLSBiYXNlLnllYXIoKSkgKiAxMjtcbiAgICAgICAgaWYgKGJhc2UuY2xvbmUoKS5hZGQocmVzLm1vbnRocywgJ00nKS5pc0FmdGVyKG90aGVyKSkge1xuICAgICAgICAgICAgLS1yZXMubW9udGhzO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVzLm1pbGxpc2Vjb25kcyA9ICtvdGhlciAtICtiYXNlLmNsb25lKCkuYWRkKHJlcy5tb250aHMsICdNJyk7XG5cbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtb21lbnRzRGlmZmVyZW5jZShiYXNlLCBvdGhlcikge1xuICAgICAgICB2YXIgcmVzO1xuICAgICAgICBpZiAoIShiYXNlLmlzVmFsaWQoKSAmJiBvdGhlci5pc1ZhbGlkKCkpKSB7XG4gICAgICAgICAgICByZXR1cm4geyBtaWxsaXNlY29uZHM6IDAsIG1vbnRoczogMCB9O1xuICAgICAgICB9XG5cbiAgICAgICAgb3RoZXIgPSBjbG9uZVdpdGhPZmZzZXQob3RoZXIsIGJhc2UpO1xuICAgICAgICBpZiAoYmFzZS5pc0JlZm9yZShvdGhlcikpIHtcbiAgICAgICAgICAgIHJlcyA9IHBvc2l0aXZlTW9tZW50c0RpZmZlcmVuY2UoYmFzZSwgb3RoZXIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzID0gcG9zaXRpdmVNb21lbnRzRGlmZmVyZW5jZShvdGhlciwgYmFzZSk7XG4gICAgICAgICAgICByZXMubWlsbGlzZWNvbmRzID0gLXJlcy5taWxsaXNlY29uZHM7XG4gICAgICAgICAgICByZXMubW9udGhzID0gLXJlcy5tb250aHM7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cblxuICAgIC8vIFRPRE86IHJlbW92ZSAnbmFtZScgYXJnIGFmdGVyIGRlcHJlY2F0aW9uIGlzIHJlbW92ZWRcbiAgICBmdW5jdGlvbiBjcmVhdGVBZGRlcihkaXJlY3Rpb24sIG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICh2YWwsIHBlcmlvZCkge1xuICAgICAgICAgICAgdmFyIGR1ciwgdG1wO1xuICAgICAgICAgICAgLy9pbnZlcnQgdGhlIGFyZ3VtZW50cywgYnV0IGNvbXBsYWluIGFib3V0IGl0XG4gICAgICAgICAgICBpZiAocGVyaW9kICE9PSBudWxsICYmICFpc05hTigrcGVyaW9kKSkge1xuICAgICAgICAgICAgICAgIGRlcHJlY2F0ZVNpbXBsZShcbiAgICAgICAgICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgICAgICAgICAgJ21vbWVudCgpLicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZSArXG4gICAgICAgICAgICAgICAgICAgICAgICAnKHBlcmlvZCwgbnVtYmVyKSBpcyBkZXByZWNhdGVkLiBQbGVhc2UgdXNlIG1vbWVudCgpLicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZSArXG4gICAgICAgICAgICAgICAgICAgICAgICAnKG51bWJlciwgcGVyaW9kKS4gJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAnU2VlIGh0dHA6Ly9tb21lbnRqcy5jb20vZ3VpZGVzLyMvd2FybmluZ3MvYWRkLWludmVydGVkLXBhcmFtLyBmb3IgbW9yZSBpbmZvLidcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIHRtcCA9IHZhbDtcbiAgICAgICAgICAgICAgICB2YWwgPSBwZXJpb2Q7XG4gICAgICAgICAgICAgICAgcGVyaW9kID0gdG1wO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBkdXIgPSBjcmVhdGVEdXJhdGlvbih2YWwsIHBlcmlvZCk7XG4gICAgICAgICAgICBhZGRTdWJ0cmFjdCh0aGlzLCBkdXIsIGRpcmVjdGlvbik7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhZGRTdWJ0cmFjdChtb20sIGR1cmF0aW9uLCBpc0FkZGluZywgdXBkYXRlT2Zmc2V0KSB7XG4gICAgICAgIHZhciBtaWxsaXNlY29uZHMgPSBkdXJhdGlvbi5fbWlsbGlzZWNvbmRzLFxuICAgICAgICAgICAgZGF5cyA9IGFic1JvdW5kKGR1cmF0aW9uLl9kYXlzKSxcbiAgICAgICAgICAgIG1vbnRocyA9IGFic1JvdW5kKGR1cmF0aW9uLl9tb250aHMpO1xuXG4gICAgICAgIGlmICghbW9tLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgLy8gTm8gb3BcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHVwZGF0ZU9mZnNldCA9IHVwZGF0ZU9mZnNldCA9PSBudWxsID8gdHJ1ZSA6IHVwZGF0ZU9mZnNldDtcblxuICAgICAgICBpZiAobW9udGhzKSB7XG4gICAgICAgICAgICBzZXRNb250aChtb20sIGdldChtb20sICdNb250aCcpICsgbW9udGhzICogaXNBZGRpbmcpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkYXlzKSB7XG4gICAgICAgICAgICBzZXQkMShtb20sICdEYXRlJywgZ2V0KG1vbSwgJ0RhdGUnKSArIGRheXMgKiBpc0FkZGluZyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1pbGxpc2Vjb25kcykge1xuICAgICAgICAgICAgbW9tLl9kLnNldFRpbWUobW9tLl9kLnZhbHVlT2YoKSArIG1pbGxpc2Vjb25kcyAqIGlzQWRkaW5nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodXBkYXRlT2Zmc2V0KSB7XG4gICAgICAgICAgICBob29rcy51cGRhdGVPZmZzZXQobW9tLCBkYXlzIHx8IG1vbnRocyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgYWRkID0gY3JlYXRlQWRkZXIoMSwgJ2FkZCcpLFxuICAgICAgICBzdWJ0cmFjdCA9IGNyZWF0ZUFkZGVyKC0xLCAnc3VidHJhY3QnKTtcblxuICAgIGZ1bmN0aW9uIGlzU3RyaW5nKGlucHV0KSB7XG4gICAgICAgIHJldHVybiB0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnIHx8IGlucHV0IGluc3RhbmNlb2YgU3RyaW5nO1xuICAgIH1cblxuICAgIC8vIHR5cGUgTW9tZW50SW5wdXQgPSBNb21lbnQgfCBEYXRlIHwgc3RyaW5nIHwgbnVtYmVyIHwgKG51bWJlciB8IHN0cmluZylbXSB8IE1vbWVudElucHV0T2JqZWN0IHwgdm9pZDsgLy8gbnVsbCB8IHVuZGVmaW5lZFxuICAgIGZ1bmN0aW9uIGlzTW9tZW50SW5wdXQoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIGlzTW9tZW50KGlucHV0KSB8fFxuICAgICAgICAgICAgaXNEYXRlKGlucHV0KSB8fFxuICAgICAgICAgICAgaXNTdHJpbmcoaW5wdXQpIHx8XG4gICAgICAgICAgICBpc051bWJlcihpbnB1dCkgfHxcbiAgICAgICAgICAgIGlzTnVtYmVyT3JTdHJpbmdBcnJheShpbnB1dCkgfHxcbiAgICAgICAgICAgIGlzTW9tZW50SW5wdXRPYmplY3QoaW5wdXQpIHx8XG4gICAgICAgICAgICBpbnB1dCA9PT0gbnVsbCB8fFxuICAgICAgICAgICAgaW5wdXQgPT09IHVuZGVmaW5lZFxuICAgICAgICApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzTW9tZW50SW5wdXRPYmplY3QoaW5wdXQpIHtcbiAgICAgICAgdmFyIG9iamVjdFRlc3QgPSBpc09iamVjdChpbnB1dCkgJiYgIWlzT2JqZWN0RW1wdHkoaW5wdXQpLFxuICAgICAgICAgICAgcHJvcGVydHlUZXN0ID0gZmFsc2UsXG4gICAgICAgICAgICBwcm9wZXJ0aWVzID0gW1xuICAgICAgICAgICAgICAgICd5ZWFycycsXG4gICAgICAgICAgICAgICAgJ3llYXInLFxuICAgICAgICAgICAgICAgICd5JyxcbiAgICAgICAgICAgICAgICAnbW9udGhzJyxcbiAgICAgICAgICAgICAgICAnbW9udGgnLFxuICAgICAgICAgICAgICAgICdNJyxcbiAgICAgICAgICAgICAgICAnZGF5cycsXG4gICAgICAgICAgICAgICAgJ2RheScsXG4gICAgICAgICAgICAgICAgJ2QnLFxuICAgICAgICAgICAgICAgICdkYXRlcycsXG4gICAgICAgICAgICAgICAgJ2RhdGUnLFxuICAgICAgICAgICAgICAgICdEJyxcbiAgICAgICAgICAgICAgICAnaG91cnMnLFxuICAgICAgICAgICAgICAgICdob3VyJyxcbiAgICAgICAgICAgICAgICAnaCcsXG4gICAgICAgICAgICAgICAgJ21pbnV0ZXMnLFxuICAgICAgICAgICAgICAgICdtaW51dGUnLFxuICAgICAgICAgICAgICAgICdtJyxcbiAgICAgICAgICAgICAgICAnc2Vjb25kcycsXG4gICAgICAgICAgICAgICAgJ3NlY29uZCcsXG4gICAgICAgICAgICAgICAgJ3MnLFxuICAgICAgICAgICAgICAgICdtaWxsaXNlY29uZHMnLFxuICAgICAgICAgICAgICAgICdtaWxsaXNlY29uZCcsXG4gICAgICAgICAgICAgICAgJ21zJyxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBpLFxuICAgICAgICAgICAgcHJvcGVydHksXG4gICAgICAgICAgICBwcm9wZXJ0eUxlbiA9IHByb3BlcnRpZXMubGVuZ3RoO1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBwcm9wZXJ0eUxlbjsgaSArPSAxKSB7XG4gICAgICAgICAgICBwcm9wZXJ0eSA9IHByb3BlcnRpZXNbaV07XG4gICAgICAgICAgICBwcm9wZXJ0eVRlc3QgPSBwcm9wZXJ0eVRlc3QgfHwgaGFzT3duUHJvcChpbnB1dCwgcHJvcGVydHkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG9iamVjdFRlc3QgJiYgcHJvcGVydHlUZXN0O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzTnVtYmVyT3JTdHJpbmdBcnJheShpbnB1dCkge1xuICAgICAgICB2YXIgYXJyYXlUZXN0ID0gaXNBcnJheShpbnB1dCksXG4gICAgICAgICAgICBkYXRhVHlwZVRlc3QgPSBmYWxzZTtcbiAgICAgICAgaWYgKGFycmF5VGVzdCkge1xuICAgICAgICAgICAgZGF0YVR5cGVUZXN0ID1cbiAgICAgICAgICAgICAgICBpbnB1dC5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICFpc051bWJlcihpdGVtKSAmJiBpc1N0cmluZyhpbnB1dCk7XG4gICAgICAgICAgICAgICAgfSkubGVuZ3RoID09PSAwO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhcnJheVRlc3QgJiYgZGF0YVR5cGVUZXN0O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzQ2FsZW5kYXJTcGVjKGlucHV0KSB7XG4gICAgICAgIHZhciBvYmplY3RUZXN0ID0gaXNPYmplY3QoaW5wdXQpICYmICFpc09iamVjdEVtcHR5KGlucHV0KSxcbiAgICAgICAgICAgIHByb3BlcnR5VGVzdCA9IGZhbHNlLFxuICAgICAgICAgICAgcHJvcGVydGllcyA9IFtcbiAgICAgICAgICAgICAgICAnc2FtZURheScsXG4gICAgICAgICAgICAgICAgJ25leHREYXknLFxuICAgICAgICAgICAgICAgICdsYXN0RGF5JyxcbiAgICAgICAgICAgICAgICAnbmV4dFdlZWsnLFxuICAgICAgICAgICAgICAgICdsYXN0V2VlaycsXG4gICAgICAgICAgICAgICAgJ3NhbWVFbHNlJyxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBpLFxuICAgICAgICAgICAgcHJvcGVydHk7XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHByb3BlcnRpZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgIHByb3BlcnR5ID0gcHJvcGVydGllc1tpXTtcbiAgICAgICAgICAgIHByb3BlcnR5VGVzdCA9IHByb3BlcnR5VGVzdCB8fCBoYXNPd25Qcm9wKGlucHV0LCBwcm9wZXJ0eSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gb2JqZWN0VGVzdCAmJiBwcm9wZXJ0eVRlc3Q7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0Q2FsZW5kYXJGb3JtYXQobXlNb21lbnQsIG5vdykge1xuICAgICAgICB2YXIgZGlmZiA9IG15TW9tZW50LmRpZmYobm93LCAnZGF5cycsIHRydWUpO1xuICAgICAgICByZXR1cm4gZGlmZiA8IC02XG4gICAgICAgICAgICA/ICdzYW1lRWxzZSdcbiAgICAgICAgICAgIDogZGlmZiA8IC0xXG4gICAgICAgICAgICAgID8gJ2xhc3RXZWVrJ1xuICAgICAgICAgICAgICA6IGRpZmYgPCAwXG4gICAgICAgICAgICAgICAgPyAnbGFzdERheSdcbiAgICAgICAgICAgICAgICA6IGRpZmYgPCAxXG4gICAgICAgICAgICAgICAgICA/ICdzYW1lRGF5J1xuICAgICAgICAgICAgICAgICAgOiBkaWZmIDwgMlxuICAgICAgICAgICAgICAgICAgICA/ICduZXh0RGF5J1xuICAgICAgICAgICAgICAgICAgICA6IGRpZmYgPCA3XG4gICAgICAgICAgICAgICAgICAgICAgPyAnbmV4dFdlZWsnXG4gICAgICAgICAgICAgICAgICAgICAgOiAnc2FtZUVsc2UnO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNhbGVuZGFyJDEodGltZSwgZm9ybWF0cykge1xuICAgICAgICAvLyBTdXBwb3J0IGZvciBzaW5nbGUgcGFyYW1ldGVyLCBmb3JtYXRzIG9ubHkgb3ZlcmxvYWQgdG8gdGhlIGNhbGVuZGFyIGZ1bmN0aW9uXG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICBpZiAoIWFyZ3VtZW50c1swXSkge1xuICAgICAgICAgICAgICAgIHRpbWUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgZm9ybWF0cyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNNb21lbnRJbnB1dChhcmd1bWVudHNbMF0pKSB7XG4gICAgICAgICAgICAgICAgdGltZSA9IGFyZ3VtZW50c1swXTtcbiAgICAgICAgICAgICAgICBmb3JtYXRzID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChpc0NhbGVuZGFyU3BlYyhhcmd1bWVudHNbMF0pKSB7XG4gICAgICAgICAgICAgICAgZm9ybWF0cyA9IGFyZ3VtZW50c1swXTtcbiAgICAgICAgICAgICAgICB0aW1lID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIFdlIHdhbnQgdG8gY29tcGFyZSB0aGUgc3RhcnQgb2YgdG9kYXksIHZzIHRoaXMuXG4gICAgICAgIC8vIEdldHRpbmcgc3RhcnQtb2YtdG9kYXkgZGVwZW5kcyBvbiB3aGV0aGVyIHdlJ3JlIGxvY2FsL3V0Yy9vZmZzZXQgb3Igbm90LlxuICAgICAgICB2YXIgbm93ID0gdGltZSB8fCBjcmVhdGVMb2NhbCgpLFxuICAgICAgICAgICAgc29kID0gY2xvbmVXaXRoT2Zmc2V0KG5vdywgdGhpcykuc3RhcnRPZignZGF5JyksXG4gICAgICAgICAgICBmb3JtYXQgPSBob29rcy5jYWxlbmRhckZvcm1hdCh0aGlzLCBzb2QpIHx8ICdzYW1lRWxzZScsXG4gICAgICAgICAgICBvdXRwdXQgPVxuICAgICAgICAgICAgICAgIGZvcm1hdHMgJiZcbiAgICAgICAgICAgICAgICAoaXNGdW5jdGlvbihmb3JtYXRzW2Zvcm1hdF0pXG4gICAgICAgICAgICAgICAgICAgID8gZm9ybWF0c1tmb3JtYXRdLmNhbGwodGhpcywgbm93KVxuICAgICAgICAgICAgICAgICAgICA6IGZvcm1hdHNbZm9ybWF0XSk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuZm9ybWF0KFxuICAgICAgICAgICAgb3V0cHV0IHx8IHRoaXMubG9jYWxlRGF0YSgpLmNhbGVuZGFyKGZvcm1hdCwgdGhpcywgY3JlYXRlTG9jYWwobm93KSlcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjbG9uZSgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBNb21lbnQodGhpcyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNBZnRlcihpbnB1dCwgdW5pdHMpIHtcbiAgICAgICAgdmFyIGxvY2FsSW5wdXQgPSBpc01vbWVudChpbnB1dCkgPyBpbnB1dCA6IGNyZWF0ZUxvY2FsKGlucHV0KTtcbiAgICAgICAgaWYgKCEodGhpcy5pc1ZhbGlkKCkgJiYgbG9jYWxJbnB1dC5pc1ZhbGlkKCkpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgdW5pdHMgPSBub3JtYWxpemVVbml0cyh1bml0cykgfHwgJ21pbGxpc2Vjb25kJztcbiAgICAgICAgaWYgKHVuaXRzID09PSAnbWlsbGlzZWNvbmQnKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy52YWx1ZU9mKCkgPiBsb2NhbElucHV0LnZhbHVlT2YoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBsb2NhbElucHV0LnZhbHVlT2YoKSA8IHRoaXMuY2xvbmUoKS5zdGFydE9mKHVuaXRzKS52YWx1ZU9mKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0JlZm9yZShpbnB1dCwgdW5pdHMpIHtcbiAgICAgICAgdmFyIGxvY2FsSW5wdXQgPSBpc01vbWVudChpbnB1dCkgPyBpbnB1dCA6IGNyZWF0ZUxvY2FsKGlucHV0KTtcbiAgICAgICAgaWYgKCEodGhpcy5pc1ZhbGlkKCkgJiYgbG9jYWxJbnB1dC5pc1ZhbGlkKCkpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgdW5pdHMgPSBub3JtYWxpemVVbml0cyh1bml0cykgfHwgJ21pbGxpc2Vjb25kJztcbiAgICAgICAgaWYgKHVuaXRzID09PSAnbWlsbGlzZWNvbmQnKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy52YWx1ZU9mKCkgPCBsb2NhbElucHV0LnZhbHVlT2YoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNsb25lKCkuZW5kT2YodW5pdHMpLnZhbHVlT2YoKSA8IGxvY2FsSW5wdXQudmFsdWVPZigpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNCZXR3ZWVuKGZyb20sIHRvLCB1bml0cywgaW5jbHVzaXZpdHkpIHtcbiAgICAgICAgdmFyIGxvY2FsRnJvbSA9IGlzTW9tZW50KGZyb20pID8gZnJvbSA6IGNyZWF0ZUxvY2FsKGZyb20pLFxuICAgICAgICAgICAgbG9jYWxUbyA9IGlzTW9tZW50KHRvKSA/IHRvIDogY3JlYXRlTG9jYWwodG8pO1xuICAgICAgICBpZiAoISh0aGlzLmlzVmFsaWQoKSAmJiBsb2NhbEZyb20uaXNWYWxpZCgpICYmIGxvY2FsVG8uaXNWYWxpZCgpKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGluY2x1c2l2aXR5ID0gaW5jbHVzaXZpdHkgfHwgJygpJztcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIChpbmNsdXNpdml0eVswXSA9PT0gJygnXG4gICAgICAgICAgICAgICAgPyB0aGlzLmlzQWZ0ZXIobG9jYWxGcm9tLCB1bml0cylcbiAgICAgICAgICAgICAgICA6ICF0aGlzLmlzQmVmb3JlKGxvY2FsRnJvbSwgdW5pdHMpKSAmJlxuICAgICAgICAgICAgKGluY2x1c2l2aXR5WzFdID09PSAnKSdcbiAgICAgICAgICAgICAgICA/IHRoaXMuaXNCZWZvcmUobG9jYWxUbywgdW5pdHMpXG4gICAgICAgICAgICAgICAgOiAhdGhpcy5pc0FmdGVyKGxvY2FsVG8sIHVuaXRzKSlcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc1NhbWUoaW5wdXQsIHVuaXRzKSB7XG4gICAgICAgIHZhciBsb2NhbElucHV0ID0gaXNNb21lbnQoaW5wdXQpID8gaW5wdXQgOiBjcmVhdGVMb2NhbChpbnB1dCksXG4gICAgICAgICAgICBpbnB1dE1zO1xuICAgICAgICBpZiAoISh0aGlzLmlzVmFsaWQoKSAmJiBsb2NhbElucHV0LmlzVmFsaWQoKSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKSB8fCAnbWlsbGlzZWNvbmQnO1xuICAgICAgICBpZiAodW5pdHMgPT09ICdtaWxsaXNlY29uZCcpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnZhbHVlT2YoKSA9PT0gbG9jYWxJbnB1dC52YWx1ZU9mKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpbnB1dE1zID0gbG9jYWxJbnB1dC52YWx1ZU9mKCk7XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgIHRoaXMuY2xvbmUoKS5zdGFydE9mKHVuaXRzKS52YWx1ZU9mKCkgPD0gaW5wdXRNcyAmJlxuICAgICAgICAgICAgICAgIGlucHV0TXMgPD0gdGhpcy5jbG9uZSgpLmVuZE9mKHVuaXRzKS52YWx1ZU9mKClcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc1NhbWVPckFmdGVyKGlucHV0LCB1bml0cykge1xuICAgICAgICByZXR1cm4gdGhpcy5pc1NhbWUoaW5wdXQsIHVuaXRzKSB8fCB0aGlzLmlzQWZ0ZXIoaW5wdXQsIHVuaXRzKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc1NhbWVPckJlZm9yZShpbnB1dCwgdW5pdHMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNTYW1lKGlucHV0LCB1bml0cykgfHwgdGhpcy5pc0JlZm9yZShpbnB1dCwgdW5pdHMpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRpZmYoaW5wdXQsIHVuaXRzLCBhc0Zsb2F0KSB7XG4gICAgICAgIHZhciB0aGF0LCB6b25lRGVsdGEsIG91dHB1dDtcblxuICAgICAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gTmFOO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhhdCA9IGNsb25lV2l0aE9mZnNldChpbnB1dCwgdGhpcyk7XG5cbiAgICAgICAgaWYgKCF0aGF0LmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIE5hTjtcbiAgICAgICAgfVxuXG4gICAgICAgIHpvbmVEZWx0YSA9ICh0aGF0LnV0Y09mZnNldCgpIC0gdGhpcy51dGNPZmZzZXQoKSkgKiA2ZTQ7XG5cbiAgICAgICAgdW5pdHMgPSBub3JtYWxpemVVbml0cyh1bml0cyk7XG5cbiAgICAgICAgc3dpdGNoICh1bml0cykge1xuICAgICAgICAgICAgY2FzZSAneWVhcic6XG4gICAgICAgICAgICAgICAgb3V0cHV0ID0gbW9udGhEaWZmKHRoaXMsIHRoYXQpIC8gMTI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdtb250aCc6XG4gICAgICAgICAgICAgICAgb3V0cHV0ID0gbW9udGhEaWZmKHRoaXMsIHRoYXQpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAncXVhcnRlcic6XG4gICAgICAgICAgICAgICAgb3V0cHV0ID0gbW9udGhEaWZmKHRoaXMsIHRoYXQpIC8gMztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3NlY29uZCc6XG4gICAgICAgICAgICAgICAgb3V0cHV0ID0gKHRoaXMgLSB0aGF0KSAvIDFlMztcbiAgICAgICAgICAgICAgICBicmVhazsgLy8gMTAwMFxuICAgICAgICAgICAgY2FzZSAnbWludXRlJzpcbiAgICAgICAgICAgICAgICBvdXRwdXQgPSAodGhpcyAtIHRoYXQpIC8gNmU0O1xuICAgICAgICAgICAgICAgIGJyZWFrOyAvLyAxMDAwICogNjBcbiAgICAgICAgICAgIGNhc2UgJ2hvdXInOlxuICAgICAgICAgICAgICAgIG91dHB1dCA9ICh0aGlzIC0gdGhhdCkgLyAzNmU1O1xuICAgICAgICAgICAgICAgIGJyZWFrOyAvLyAxMDAwICogNjAgKiA2MFxuICAgICAgICAgICAgY2FzZSAnZGF5JzpcbiAgICAgICAgICAgICAgICBvdXRwdXQgPSAodGhpcyAtIHRoYXQgLSB6b25lRGVsdGEpIC8gODY0ZTU7XG4gICAgICAgICAgICAgICAgYnJlYWs7IC8vIDEwMDAgKiA2MCAqIDYwICogMjQsIG5lZ2F0ZSBkc3RcbiAgICAgICAgICAgIGNhc2UgJ3dlZWsnOlxuICAgICAgICAgICAgICAgIG91dHB1dCA9ICh0aGlzIC0gdGhhdCAtIHpvbmVEZWx0YSkgLyA2MDQ4ZTU7XG4gICAgICAgICAgICAgICAgYnJlYWs7IC8vIDEwMDAgKiA2MCAqIDYwICogMjQgKiA3LCBuZWdhdGUgZHN0XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIG91dHB1dCA9IHRoaXMgLSB0aGF0O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGFzRmxvYXQgPyBvdXRwdXQgOiBhYnNGbG9vcihvdXRwdXQpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1vbnRoRGlmZihhLCBiKSB7XG4gICAgICAgIGlmIChhLmRhdGUoKSA8IGIuZGF0ZSgpKSB7XG4gICAgICAgICAgICAvLyBlbmQtb2YtbW9udGggY2FsY3VsYXRpb25zIHdvcmsgY29ycmVjdCB3aGVuIHRoZSBzdGFydCBtb250aCBoYXMgbW9yZVxuICAgICAgICAgICAgLy8gZGF5cyB0aGFuIHRoZSBlbmQgbW9udGguXG4gICAgICAgICAgICByZXR1cm4gLW1vbnRoRGlmZihiLCBhKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBkaWZmZXJlbmNlIGluIG1vbnRoc1xuICAgICAgICB2YXIgd2hvbGVNb250aERpZmYgPSAoYi55ZWFyKCkgLSBhLnllYXIoKSkgKiAxMiArIChiLm1vbnRoKCkgLSBhLm1vbnRoKCkpLFxuICAgICAgICAgICAgLy8gYiBpcyBpbiAoYW5jaG9yIC0gMSBtb250aCwgYW5jaG9yICsgMSBtb250aClcbiAgICAgICAgICAgIGFuY2hvciA9IGEuY2xvbmUoKS5hZGQod2hvbGVNb250aERpZmYsICdtb250aHMnKSxcbiAgICAgICAgICAgIGFuY2hvcjIsXG4gICAgICAgICAgICBhZGp1c3Q7XG5cbiAgICAgICAgaWYgKGIgLSBhbmNob3IgPCAwKSB7XG4gICAgICAgICAgICBhbmNob3IyID0gYS5jbG9uZSgpLmFkZCh3aG9sZU1vbnRoRGlmZiAtIDEsICdtb250aHMnKTtcbiAgICAgICAgICAgIC8vIGxpbmVhciBhY3Jvc3MgdGhlIG1vbnRoXG4gICAgICAgICAgICBhZGp1c3QgPSAoYiAtIGFuY2hvcikgLyAoYW5jaG9yIC0gYW5jaG9yMik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhbmNob3IyID0gYS5jbG9uZSgpLmFkZCh3aG9sZU1vbnRoRGlmZiArIDEsICdtb250aHMnKTtcbiAgICAgICAgICAgIC8vIGxpbmVhciBhY3Jvc3MgdGhlIG1vbnRoXG4gICAgICAgICAgICBhZGp1c3QgPSAoYiAtIGFuY2hvcikgLyAoYW5jaG9yMiAtIGFuY2hvcik7XG4gICAgICAgIH1cblxuICAgICAgICAvL2NoZWNrIGZvciBuZWdhdGl2ZSB6ZXJvLCByZXR1cm4gemVybyBpZiBuZWdhdGl2ZSB6ZXJvXG4gICAgICAgIHJldHVybiAtKHdob2xlTW9udGhEaWZmICsgYWRqdXN0KSB8fCAwO1xuICAgIH1cblxuICAgIGhvb2tzLmRlZmF1bHRGb3JtYXQgPSAnWVlZWS1NTS1ERFRISDptbTpzc1onO1xuICAgIGhvb2tzLmRlZmF1bHRGb3JtYXRVdGMgPSAnWVlZWS1NTS1ERFRISDptbTpzc1taXSc7XG5cbiAgICBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5sb2NhbGUoJ2VuJykuZm9ybWF0KCdkZGQgTU1NIEREIFlZWVkgSEg6bW06c3MgW0dNVF1aWicpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRvSVNPU3RyaW5nKGtlZXBPZmZzZXQpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHV0YyA9IGtlZXBPZmZzZXQgIT09IHRydWUsXG4gICAgICAgICAgICBtID0gdXRjID8gdGhpcy5jbG9uZSgpLnV0YygpIDogdGhpcztcbiAgICAgICAgaWYgKG0ueWVhcigpIDwgMCB8fCBtLnllYXIoKSA+IDk5OTkpIHtcbiAgICAgICAgICAgIHJldHVybiBmb3JtYXRNb21lbnQoXG4gICAgICAgICAgICAgICAgbSxcbiAgICAgICAgICAgICAgICB1dGNcbiAgICAgICAgICAgICAgICAgICAgPyAnWVlZWVlZLU1NLUREW1RdSEg6bW06c3MuU1NTW1pdJ1xuICAgICAgICAgICAgICAgICAgICA6ICdZWVlZWVktTU0tRERbVF1ISDptbTpzcy5TU1NaJ1xuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNGdW5jdGlvbihEYXRlLnByb3RvdHlwZS50b0lTT1N0cmluZykpIHtcbiAgICAgICAgICAgIC8vIG5hdGl2ZSBpbXBsZW1lbnRhdGlvbiBpcyB+NTB4IGZhc3RlciwgdXNlIGl0IHdoZW4gd2UgY2FuXG4gICAgICAgICAgICBpZiAodXRjKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudG9EYXRlKCkudG9JU09TdHJpbmcoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBEYXRlKHRoaXMudmFsdWVPZigpICsgdGhpcy51dGNPZmZzZXQoKSAqIDYwICogMTAwMClcbiAgICAgICAgICAgICAgICAgICAgLnRvSVNPU3RyaW5nKClcbiAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoJ1onLCBmb3JtYXRNb21lbnQobSwgJ1onKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZvcm1hdE1vbWVudChcbiAgICAgICAgICAgIG0sXG4gICAgICAgICAgICB1dGMgPyAnWVlZWS1NTS1ERFtUXUhIOm1tOnNzLlNTU1taXScgOiAnWVlZWS1NTS1ERFtUXUhIOm1tOnNzLlNTU1onXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJuIGEgaHVtYW4gcmVhZGFibGUgcmVwcmVzZW50YXRpb24gb2YgYSBtb21lbnQgdGhhdCBjYW5cbiAgICAgKiBhbHNvIGJlIGV2YWx1YXRlZCB0byBnZXQgYSBuZXcgbW9tZW50IHdoaWNoIGlzIHRoZSBzYW1lXG4gICAgICpcbiAgICAgKiBAbGluayBodHRwczovL25vZGVqcy5vcmcvZGlzdC9sYXRlc3QvZG9jcy9hcGkvdXRpbC5odG1sI3V0aWxfY3VzdG9tX2luc3BlY3RfZnVuY3Rpb25fb25fb2JqZWN0c1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGluc3BlY3QoKSB7XG4gICAgICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiAnbW9tZW50LmludmFsaWQoLyogJyArIHRoaXMuX2kgKyAnICovKSc7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGZ1bmMgPSAnbW9tZW50JyxcbiAgICAgICAgICAgIHpvbmUgPSAnJyxcbiAgICAgICAgICAgIHByZWZpeCxcbiAgICAgICAgICAgIHllYXIsXG4gICAgICAgICAgICBkYXRldGltZSxcbiAgICAgICAgICAgIHN1ZmZpeDtcbiAgICAgICAgaWYgKCF0aGlzLmlzTG9jYWwoKSkge1xuICAgICAgICAgICAgZnVuYyA9IHRoaXMudXRjT2Zmc2V0KCkgPT09IDAgPyAnbW9tZW50LnV0YycgOiAnbW9tZW50LnBhcnNlWm9uZSc7XG4gICAgICAgICAgICB6b25lID0gJ1onO1xuICAgICAgICB9XG4gICAgICAgIHByZWZpeCA9ICdbJyArIGZ1bmMgKyAnKFwiXSc7XG4gICAgICAgIHllYXIgPSAwIDw9IHRoaXMueWVhcigpICYmIHRoaXMueWVhcigpIDw9IDk5OTkgPyAnWVlZWScgOiAnWVlZWVlZJztcbiAgICAgICAgZGF0ZXRpbWUgPSAnLU1NLUREW1RdSEg6bW06c3MuU1NTJztcbiAgICAgICAgc3VmZml4ID0gem9uZSArICdbXCIpXSc7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuZm9ybWF0KHByZWZpeCArIHllYXIgKyBkYXRldGltZSArIHN1ZmZpeCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZm9ybWF0KGlucHV0U3RyaW5nKSB7XG4gICAgICAgIGlmICghaW5wdXRTdHJpbmcpIHtcbiAgICAgICAgICAgIGlucHV0U3RyaW5nID0gdGhpcy5pc1V0YygpXG4gICAgICAgICAgICAgICAgPyBob29rcy5kZWZhdWx0Rm9ybWF0VXRjXG4gICAgICAgICAgICAgICAgOiBob29rcy5kZWZhdWx0Rm9ybWF0O1xuICAgICAgICB9XG4gICAgICAgIHZhciBvdXRwdXQgPSBmb3JtYXRNb21lbnQodGhpcywgaW5wdXRTdHJpbmcpO1xuICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkucG9zdGZvcm1hdChvdXRwdXQpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGZyb20odGltZSwgd2l0aG91dFN1ZmZpeCkge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgICB0aGlzLmlzVmFsaWQoKSAmJlxuICAgICAgICAgICAgKChpc01vbWVudCh0aW1lKSAmJiB0aW1lLmlzVmFsaWQoKSkgfHwgY3JlYXRlTG9jYWwodGltZSkuaXNWYWxpZCgpKVxuICAgICAgICApIHtcbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVEdXJhdGlvbih7IHRvOiB0aGlzLCBmcm9tOiB0aW1lIH0pXG4gICAgICAgICAgICAgICAgLmxvY2FsZSh0aGlzLmxvY2FsZSgpKVxuICAgICAgICAgICAgICAgIC5odW1hbml6ZSghd2l0aG91dFN1ZmZpeCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkuaW52YWxpZERhdGUoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGZyb21Ob3cod2l0aG91dFN1ZmZpeCkge1xuICAgICAgICByZXR1cm4gdGhpcy5mcm9tKGNyZWF0ZUxvY2FsKCksIHdpdGhvdXRTdWZmaXgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRvKHRpbWUsIHdpdGhvdXRTdWZmaXgpIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgdGhpcy5pc1ZhbGlkKCkgJiZcbiAgICAgICAgICAgICgoaXNNb21lbnQodGltZSkgJiYgdGltZS5pc1ZhbGlkKCkpIHx8IGNyZWF0ZUxvY2FsKHRpbWUpLmlzVmFsaWQoKSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlRHVyYXRpb24oeyBmcm9tOiB0aGlzLCB0bzogdGltZSB9KVxuICAgICAgICAgICAgICAgIC5sb2NhbGUodGhpcy5sb2NhbGUoKSlcbiAgICAgICAgICAgICAgICAuaHVtYW5pemUoIXdpdGhvdXRTdWZmaXgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLmludmFsaWREYXRlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0b05vdyh3aXRob3V0U3VmZml4KSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRvKGNyZWF0ZUxvY2FsKCksIHdpdGhvdXRTdWZmaXgpO1xuICAgIH1cblxuICAgIC8vIElmIHBhc3NlZCBhIGxvY2FsZSBrZXksIGl0IHdpbGwgc2V0IHRoZSBsb2NhbGUgZm9yIHRoaXNcbiAgICAvLyBpbnN0YW5jZS4gIE90aGVyd2lzZSwgaXQgd2lsbCByZXR1cm4gdGhlIGxvY2FsZSBjb25maWd1cmF0aW9uXG4gICAgLy8gdmFyaWFibGVzIGZvciB0aGlzIGluc3RhbmNlLlxuICAgIGZ1bmN0aW9uIGxvY2FsZShrZXkpIHtcbiAgICAgICAgdmFyIG5ld0xvY2FsZURhdGE7XG5cbiAgICAgICAgaWYgKGtleSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbG9jYWxlLl9hYmJyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbmV3TG9jYWxlRGF0YSA9IGdldExvY2FsZShrZXkpO1xuICAgICAgICAgICAgaWYgKG5ld0xvY2FsZURhdGEgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2xvY2FsZSA9IG5ld0xvY2FsZURhdGE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBsYW5nID0gZGVwcmVjYXRlKFxuICAgICAgICAnbW9tZW50KCkubGFuZygpIGlzIGRlcHJlY2F0ZWQuIEluc3RlYWQsIHVzZSBtb21lbnQoKS5sb2NhbGVEYXRhKCkgdG8gZ2V0IHRoZSBsYW5ndWFnZSBjb25maWd1cmF0aW9uLiBVc2UgbW9tZW50KCkubG9jYWxlKCkgdG8gY2hhbmdlIGxhbmd1YWdlcy4nLFxuICAgICAgICBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICBpZiAoa2V5ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmxvY2FsZShrZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgKTtcblxuICAgIGZ1bmN0aW9uIGxvY2FsZURhdGEoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9sb2NhbGU7XG4gICAgfVxuXG4gICAgdmFyIE1TX1BFUl9TRUNPTkQgPSAxMDAwLFxuICAgICAgICBNU19QRVJfTUlOVVRFID0gNjAgKiBNU19QRVJfU0VDT05ELFxuICAgICAgICBNU19QRVJfSE9VUiA9IDYwICogTVNfUEVSX01JTlVURSxcbiAgICAgICAgTVNfUEVSXzQwMF9ZRUFSUyA9ICgzNjUgKiA0MDAgKyA5NykgKiAyNCAqIE1TX1BFUl9IT1VSO1xuXG4gICAgLy8gYWN0dWFsIG1vZHVsbyAtIGhhbmRsZXMgbmVnYXRpdmUgbnVtYmVycyAoZm9yIGRhdGVzIGJlZm9yZSAxOTcwKTpcbiAgICBmdW5jdGlvbiBtb2QkMShkaXZpZGVuZCwgZGl2aXNvcikge1xuICAgICAgICByZXR1cm4gKChkaXZpZGVuZCAlIGRpdmlzb3IpICsgZGl2aXNvcikgJSBkaXZpc29yO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxvY2FsU3RhcnRPZkRhdGUoeSwgbSwgZCkge1xuICAgICAgICAvLyB0aGUgZGF0ZSBjb25zdHJ1Y3RvciByZW1hcHMgeWVhcnMgMC05OSB0byAxOTAwLTE5OTlcbiAgICAgICAgaWYgKHkgPCAxMDAgJiYgeSA+PSAwKSB7XG4gICAgICAgICAgICAvLyBwcmVzZXJ2ZSBsZWFwIHllYXJzIHVzaW5nIGEgZnVsbCA0MDAgeWVhciBjeWNsZSwgdGhlbiByZXNldFxuICAgICAgICAgICAgcmV0dXJuIG5ldyBEYXRlKHkgKyA0MDAsIG0sIGQpIC0gTVNfUEVSXzQwMF9ZRUFSUztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgRGF0ZSh5LCBtLCBkKS52YWx1ZU9mKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiB1dGNTdGFydE9mRGF0ZSh5LCBtLCBkKSB7XG4gICAgICAgIC8vIERhdGUuVVRDIHJlbWFwcyB5ZWFycyAwLTk5IHRvIDE5MDAtMTk5OVxuICAgICAgICBpZiAoeSA8IDEwMCAmJiB5ID49IDApIHtcbiAgICAgICAgICAgIC8vIHByZXNlcnZlIGxlYXAgeWVhcnMgdXNpbmcgYSBmdWxsIDQwMCB5ZWFyIGN5Y2xlLCB0aGVuIHJlc2V0XG4gICAgICAgICAgICByZXR1cm4gRGF0ZS5VVEMoeSArIDQwMCwgbSwgZCkgLSBNU19QRVJfNDAwX1lFQVJTO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIERhdGUuVVRDKHksIG0sIGQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc3RhcnRPZih1bml0cykge1xuICAgICAgICB2YXIgdGltZSwgc3RhcnRPZkRhdGU7XG4gICAgICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpO1xuICAgICAgICBpZiAodW5pdHMgPT09IHVuZGVmaW5lZCB8fCB1bml0cyA9PT0gJ21pbGxpc2Vjb25kJyB8fCAhdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhcnRPZkRhdGUgPSB0aGlzLl9pc1VUQyA/IHV0Y1N0YXJ0T2ZEYXRlIDogbG9jYWxTdGFydE9mRGF0ZTtcblxuICAgICAgICBzd2l0Y2ggKHVuaXRzKSB7XG4gICAgICAgICAgICBjYXNlICd5ZWFyJzpcbiAgICAgICAgICAgICAgICB0aW1lID0gc3RhcnRPZkRhdGUodGhpcy55ZWFyKCksIDAsIDEpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAncXVhcnRlcic6XG4gICAgICAgICAgICAgICAgdGltZSA9IHN0YXJ0T2ZEYXRlKFxuICAgICAgICAgICAgICAgICAgICB0aGlzLnllYXIoKSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tb250aCgpIC0gKHRoaXMubW9udGgoKSAlIDMpLFxuICAgICAgICAgICAgICAgICAgICAxXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ21vbnRoJzpcbiAgICAgICAgICAgICAgICB0aW1lID0gc3RhcnRPZkRhdGUodGhpcy55ZWFyKCksIHRoaXMubW9udGgoKSwgMSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICd3ZWVrJzpcbiAgICAgICAgICAgICAgICB0aW1lID0gc3RhcnRPZkRhdGUoXG4gICAgICAgICAgICAgICAgICAgIHRoaXMueWVhcigpLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLm1vbnRoKCksXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0ZSgpIC0gdGhpcy53ZWVrZGF5KClcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnaXNvV2Vlayc6XG4gICAgICAgICAgICAgICAgdGltZSA9IHN0YXJ0T2ZEYXRlKFxuICAgICAgICAgICAgICAgICAgICB0aGlzLnllYXIoKSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tb250aCgpLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGUoKSAtICh0aGlzLmlzb1dlZWtkYXkoKSAtIDEpXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2RheSc6XG4gICAgICAgICAgICBjYXNlICdkYXRlJzpcbiAgICAgICAgICAgICAgICB0aW1lID0gc3RhcnRPZkRhdGUodGhpcy55ZWFyKCksIHRoaXMubW9udGgoKSwgdGhpcy5kYXRlKCkpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnaG91cic6XG4gICAgICAgICAgICAgICAgdGltZSA9IHRoaXMuX2QudmFsdWVPZigpO1xuICAgICAgICAgICAgICAgIHRpbWUgLT0gbW9kJDEoXG4gICAgICAgICAgICAgICAgICAgIHRpbWUgKyAodGhpcy5faXNVVEMgPyAwIDogdGhpcy51dGNPZmZzZXQoKSAqIE1TX1BFUl9NSU5VVEUpLFxuICAgICAgICAgICAgICAgICAgICBNU19QRVJfSE9VUlxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdtaW51dGUnOlxuICAgICAgICAgICAgICAgIHRpbWUgPSB0aGlzLl9kLnZhbHVlT2YoKTtcbiAgICAgICAgICAgICAgICB0aW1lIC09IG1vZCQxKHRpbWUsIE1TX1BFUl9NSU5VVEUpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnc2Vjb25kJzpcbiAgICAgICAgICAgICAgICB0aW1lID0gdGhpcy5fZC52YWx1ZU9mKCk7XG4gICAgICAgICAgICAgICAgdGltZSAtPSBtb2QkMSh0aW1lLCBNU19QRVJfU0VDT05EKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2Quc2V0VGltZSh0aW1lKTtcbiAgICAgICAgaG9va3MudXBkYXRlT2Zmc2V0KHRoaXMsIHRydWUpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBlbmRPZih1bml0cykge1xuICAgICAgICB2YXIgdGltZSwgc3RhcnRPZkRhdGU7XG4gICAgICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpO1xuICAgICAgICBpZiAodW5pdHMgPT09IHVuZGVmaW5lZCB8fCB1bml0cyA9PT0gJ21pbGxpc2Vjb25kJyB8fCAhdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhcnRPZkRhdGUgPSB0aGlzLl9pc1VUQyA/IHV0Y1N0YXJ0T2ZEYXRlIDogbG9jYWxTdGFydE9mRGF0ZTtcblxuICAgICAgICBzd2l0Y2ggKHVuaXRzKSB7XG4gICAgICAgICAgICBjYXNlICd5ZWFyJzpcbiAgICAgICAgICAgICAgICB0aW1lID0gc3RhcnRPZkRhdGUodGhpcy55ZWFyKCkgKyAxLCAwLCAxKSAtIDE7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdxdWFydGVyJzpcbiAgICAgICAgICAgICAgICB0aW1lID1cbiAgICAgICAgICAgICAgICAgICAgc3RhcnRPZkRhdGUoXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnllYXIoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubW9udGgoKSAtICh0aGlzLm1vbnRoKCkgJSAzKSArIDMsXG4gICAgICAgICAgICAgICAgICAgICAgICAxXG4gICAgICAgICAgICAgICAgICAgICkgLSAxO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnbW9udGgnOlxuICAgICAgICAgICAgICAgIHRpbWUgPSBzdGFydE9mRGF0ZSh0aGlzLnllYXIoKSwgdGhpcy5tb250aCgpICsgMSwgMSkgLSAxO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnd2Vlayc6XG4gICAgICAgICAgICAgICAgdGltZSA9XG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0T2ZEYXRlKFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy55ZWFyKCksXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1vbnRoKCksXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGUoKSAtIHRoaXMud2Vla2RheSgpICsgN1xuICAgICAgICAgICAgICAgICAgICApIC0gMTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2lzb1dlZWsnOlxuICAgICAgICAgICAgICAgIHRpbWUgPVxuICAgICAgICAgICAgICAgICAgICBzdGFydE9mRGF0ZShcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMueWVhcigpLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tb250aCgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRlKCkgLSAodGhpcy5pc29XZWVrZGF5KCkgLSAxKSArIDdcbiAgICAgICAgICAgICAgICAgICAgKSAtIDE7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdkYXknOlxuICAgICAgICAgICAgY2FzZSAnZGF0ZSc6XG4gICAgICAgICAgICAgICAgdGltZSA9IHN0YXJ0T2ZEYXRlKHRoaXMueWVhcigpLCB0aGlzLm1vbnRoKCksIHRoaXMuZGF0ZSgpICsgMSkgLSAxO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnaG91cic6XG4gICAgICAgICAgICAgICAgdGltZSA9IHRoaXMuX2QudmFsdWVPZigpO1xuICAgICAgICAgICAgICAgIHRpbWUgKz1cbiAgICAgICAgICAgICAgICAgICAgTVNfUEVSX0hPVVIgLVxuICAgICAgICAgICAgICAgICAgICBtb2QkMShcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpbWUgKyAodGhpcy5faXNVVEMgPyAwIDogdGhpcy51dGNPZmZzZXQoKSAqIE1TX1BFUl9NSU5VVEUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgTVNfUEVSX0hPVVJcbiAgICAgICAgICAgICAgICAgICAgKSAtXG4gICAgICAgICAgICAgICAgICAgIDE7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdtaW51dGUnOlxuICAgICAgICAgICAgICAgIHRpbWUgPSB0aGlzLl9kLnZhbHVlT2YoKTtcbiAgICAgICAgICAgICAgICB0aW1lICs9IE1TX1BFUl9NSU5VVEUgLSBtb2QkMSh0aW1lLCBNU19QRVJfTUlOVVRFKSAtIDE7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdzZWNvbmQnOlxuICAgICAgICAgICAgICAgIHRpbWUgPSB0aGlzLl9kLnZhbHVlT2YoKTtcbiAgICAgICAgICAgICAgICB0aW1lICs9IE1TX1BFUl9TRUNPTkQgLSBtb2QkMSh0aW1lLCBNU19QRVJfU0VDT05EKSAtIDE7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9kLnNldFRpbWUodGltZSk7XG4gICAgICAgIGhvb2tzLnVwZGF0ZU9mZnNldCh0aGlzLCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdmFsdWVPZigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2QudmFsdWVPZigpIC0gKHRoaXMuX29mZnNldCB8fCAwKSAqIDYwMDAwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHVuaXgoKSB7XG4gICAgICAgIHJldHVybiBNYXRoLmZsb29yKHRoaXMudmFsdWVPZigpIC8gMTAwMCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9EYXRlKCkge1xuICAgICAgICByZXR1cm4gbmV3IERhdGUodGhpcy52YWx1ZU9mKCkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRvQXJyYXkoKSB7XG4gICAgICAgIHZhciBtID0gdGhpcztcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIG0ueWVhcigpLFxuICAgICAgICAgICAgbS5tb250aCgpLFxuICAgICAgICAgICAgbS5kYXRlKCksXG4gICAgICAgICAgICBtLmhvdXIoKSxcbiAgICAgICAgICAgIG0ubWludXRlKCksXG4gICAgICAgICAgICBtLnNlY29uZCgpLFxuICAgICAgICAgICAgbS5taWxsaXNlY29uZCgpLFxuICAgICAgICBdO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRvT2JqZWN0KCkge1xuICAgICAgICB2YXIgbSA9IHRoaXM7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB5ZWFyczogbS55ZWFyKCksXG4gICAgICAgICAgICBtb250aHM6IG0ubW9udGgoKSxcbiAgICAgICAgICAgIGRhdGU6IG0uZGF0ZSgpLFxuICAgICAgICAgICAgaG91cnM6IG0uaG91cnMoKSxcbiAgICAgICAgICAgIG1pbnV0ZXM6IG0ubWludXRlcygpLFxuICAgICAgICAgICAgc2Vjb25kczogbS5zZWNvbmRzKCksXG4gICAgICAgICAgICBtaWxsaXNlY29uZHM6IG0ubWlsbGlzZWNvbmRzKCksXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9KU09OKCkge1xuICAgICAgICAvLyBuZXcgRGF0ZShOYU4pLnRvSlNPTigpID09PSBudWxsXG4gICAgICAgIHJldHVybiB0aGlzLmlzVmFsaWQoKSA/IHRoaXMudG9JU09TdHJpbmcoKSA6IG51bGw7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNWYWxpZCQyKCkge1xuICAgICAgICByZXR1cm4gaXNWYWxpZCh0aGlzKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwYXJzaW5nRmxhZ3MoKSB7XG4gICAgICAgIHJldHVybiBleHRlbmQoe30sIGdldFBhcnNpbmdGbGFncyh0aGlzKSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW52YWxpZEF0KCkge1xuICAgICAgICByZXR1cm4gZ2V0UGFyc2luZ0ZsYWdzKHRoaXMpLm92ZXJmbG93O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0aW9uRGF0YSgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGlucHV0OiB0aGlzLl9pLFxuICAgICAgICAgICAgZm9ybWF0OiB0aGlzLl9mLFxuICAgICAgICAgICAgbG9jYWxlOiB0aGlzLl9sb2NhbGUsXG4gICAgICAgICAgICBpc1VUQzogdGhpcy5faXNVVEMsXG4gICAgICAgICAgICBzdHJpY3Q6IHRoaXMuX3N0cmljdCxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBhZGRGb3JtYXRUb2tlbignTicsIDAsIDAsICdlcmFBYmJyJyk7XG4gICAgYWRkRm9ybWF0VG9rZW4oJ05OJywgMCwgMCwgJ2VyYUFiYnInKTtcbiAgICBhZGRGb3JtYXRUb2tlbignTk5OJywgMCwgMCwgJ2VyYUFiYnInKTtcbiAgICBhZGRGb3JtYXRUb2tlbignTk5OTicsIDAsIDAsICdlcmFOYW1lJyk7XG4gICAgYWRkRm9ybWF0VG9rZW4oJ05OTk5OJywgMCwgMCwgJ2VyYU5hcnJvdycpO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ3knLCBbJ3knLCAxXSwgJ3lvJywgJ2VyYVllYXInKTtcbiAgICBhZGRGb3JtYXRUb2tlbigneScsIFsneXknLCAyXSwgMCwgJ2VyYVllYXInKTtcbiAgICBhZGRGb3JtYXRUb2tlbigneScsIFsneXl5JywgM10sIDAsICdlcmFZZWFyJyk7XG4gICAgYWRkRm9ybWF0VG9rZW4oJ3knLCBbJ3l5eXknLCA0XSwgMCwgJ2VyYVllYXInKTtcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ04nLCBtYXRjaEVyYUFiYnIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ05OJywgbWF0Y2hFcmFBYmJyKTtcbiAgICBhZGRSZWdleFRva2VuKCdOTk4nLCBtYXRjaEVyYUFiYnIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ05OTk4nLCBtYXRjaEVyYU5hbWUpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ05OTk5OJywgbWF0Y2hFcmFOYXJyb3cpO1xuXG4gICAgYWRkUGFyc2VUb2tlbihcbiAgICAgICAgWydOJywgJ05OJywgJ05OTicsICdOTk5OJywgJ05OTk5OJ10sXG4gICAgICAgIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZywgdG9rZW4pIHtcbiAgICAgICAgICAgIHZhciBlcmEgPSBjb25maWcuX2xvY2FsZS5lcmFzUGFyc2UoaW5wdXQsIHRva2VuLCBjb25maWcuX3N0cmljdCk7XG4gICAgICAgICAgICBpZiAoZXJhKSB7XG4gICAgICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuZXJhID0gZXJhO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5pbnZhbGlkRXJhID0gaW5wdXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICApO1xuXG4gICAgYWRkUmVnZXhUb2tlbigneScsIG1hdGNoVW5zaWduZWQpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ3l5JywgbWF0Y2hVbnNpZ25lZCk7XG4gICAgYWRkUmVnZXhUb2tlbigneXl5JywgbWF0Y2hVbnNpZ25lZCk7XG4gICAgYWRkUmVnZXhUb2tlbigneXl5eScsIG1hdGNoVW5zaWduZWQpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ3lvJywgbWF0Y2hFcmFZZWFyT3JkaW5hbCk7XG5cbiAgICBhZGRQYXJzZVRva2VuKFsneScsICd5eScsICd5eXknLCAneXl5eSddLCBZRUFSKTtcbiAgICBhZGRQYXJzZVRva2VuKFsneW8nXSwgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnLCB0b2tlbikge1xuICAgICAgICB2YXIgbWF0Y2g7XG4gICAgICAgIGlmIChjb25maWcuX2xvY2FsZS5fZXJhWWVhck9yZGluYWxSZWdleCkge1xuICAgICAgICAgICAgbWF0Y2ggPSBpbnB1dC5tYXRjaChjb25maWcuX2xvY2FsZS5fZXJhWWVhck9yZGluYWxSZWdleCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29uZmlnLl9sb2NhbGUuZXJhWWVhck9yZGluYWxQYXJzZSkge1xuICAgICAgICAgICAgYXJyYXlbWUVBUl0gPSBjb25maWcuX2xvY2FsZS5lcmFZZWFyT3JkaW5hbFBhcnNlKGlucHV0LCBtYXRjaCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhcnJheVtZRUFSXSA9IHBhcnNlSW50KGlucHV0LCAxMCk7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIGZ1bmN0aW9uIGxvY2FsZUVyYXMobSwgZm9ybWF0KSB7XG4gICAgICAgIHZhciBpLFxuICAgICAgICAgICAgbCxcbiAgICAgICAgICAgIGRhdGUsXG4gICAgICAgICAgICBlcmFzID0gdGhpcy5fZXJhcyB8fCBnZXRMb2NhbGUoJ2VuJykuX2VyYXM7XG4gICAgICAgIGZvciAoaSA9IDAsIGwgPSBlcmFzLmxlbmd0aDsgaSA8IGw7ICsraSkge1xuICAgICAgICAgICAgc3dpdGNoICh0eXBlb2YgZXJhc1tpXS5zaW5jZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICAgICAgICAgICAgICAgIC8vIHRydW5jYXRlIHRpbWVcbiAgICAgICAgICAgICAgICAgICAgZGF0ZSA9IGhvb2tzKGVyYXNbaV0uc2luY2UpLnN0YXJ0T2YoJ2RheScpO1xuICAgICAgICAgICAgICAgICAgICBlcmFzW2ldLnNpbmNlID0gZGF0ZS52YWx1ZU9mKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBzd2l0Y2ggKHR5cGVvZiBlcmFzW2ldLnVudGlsKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAndW5kZWZpbmVkJzpcbiAgICAgICAgICAgICAgICAgICAgZXJhc1tpXS51bnRpbCA9ICtJbmZpbml0eTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgICAgICAgICAgICAgICAgLy8gdHJ1bmNhdGUgdGltZVxuICAgICAgICAgICAgICAgICAgICBkYXRlID0gaG9va3MoZXJhc1tpXS51bnRpbCkuc3RhcnRPZignZGF5JykudmFsdWVPZigpO1xuICAgICAgICAgICAgICAgICAgICBlcmFzW2ldLnVudGlsID0gZGF0ZS52YWx1ZU9mKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBlcmFzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxvY2FsZUVyYXNQYXJzZShlcmFOYW1lLCBmb3JtYXQsIHN0cmljdCkge1xuICAgICAgICB2YXIgaSxcbiAgICAgICAgICAgIGwsXG4gICAgICAgICAgICBlcmFzID0gdGhpcy5lcmFzKCksXG4gICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAgYWJicixcbiAgICAgICAgICAgIG5hcnJvdztcbiAgICAgICAgZXJhTmFtZSA9IGVyYU5hbWUudG9VcHBlckNhc2UoKTtcblxuICAgICAgICBmb3IgKGkgPSAwLCBsID0gZXJhcy5sZW5ndGg7IGkgPCBsOyArK2kpIHtcbiAgICAgICAgICAgIG5hbWUgPSBlcmFzW2ldLm5hbWUudG9VcHBlckNhc2UoKTtcbiAgICAgICAgICAgIGFiYnIgPSBlcmFzW2ldLmFiYnIudG9VcHBlckNhc2UoKTtcbiAgICAgICAgICAgIG5hcnJvdyA9IGVyYXNbaV0ubmFycm93LnRvVXBwZXJDYXNlKCk7XG5cbiAgICAgICAgICAgIGlmIChzdHJpY3QpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKGZvcm1hdCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdOJzpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnTk4nOlxuICAgICAgICAgICAgICAgICAgICBjYXNlICdOTk4nOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFiYnIgPT09IGVyYU5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXJhc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ05OTk4nOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5hbWUgPT09IGVyYU5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXJhc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ05OTk5OJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuYXJyb3cgPT09IGVyYU5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXJhc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoW25hbWUsIGFiYnIsIG5hcnJvd10uaW5kZXhPZihlcmFOYW1lKSA+PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVyYXNbaV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsb2NhbGVFcmFzQ29udmVydFllYXIoZXJhLCB5ZWFyKSB7XG4gICAgICAgIHZhciBkaXIgPSBlcmEuc2luY2UgPD0gZXJhLnVudGlsID8gKzEgOiAtMTtcbiAgICAgICAgaWYgKHllYXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIGhvb2tzKGVyYS5zaW5jZSkueWVhcigpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGhvb2tzKGVyYS5zaW5jZSkueWVhcigpICsgKHllYXIgLSBlcmEub2Zmc2V0KSAqIGRpcjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldEVyYU5hbWUoKSB7XG4gICAgICAgIHZhciBpLFxuICAgICAgICAgICAgbCxcbiAgICAgICAgICAgIHZhbCxcbiAgICAgICAgICAgIGVyYXMgPSB0aGlzLmxvY2FsZURhdGEoKS5lcmFzKCk7XG4gICAgICAgIGZvciAoaSA9IDAsIGwgPSBlcmFzLmxlbmd0aDsgaSA8IGw7ICsraSkge1xuICAgICAgICAgICAgLy8gdHJ1bmNhdGUgdGltZVxuICAgICAgICAgICAgdmFsID0gdGhpcy5jbG9uZSgpLnN0YXJ0T2YoJ2RheScpLnZhbHVlT2YoKTtcblxuICAgICAgICAgICAgaWYgKGVyYXNbaV0uc2luY2UgPD0gdmFsICYmIHZhbCA8PSBlcmFzW2ldLnVudGlsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVyYXNbaV0ubmFtZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChlcmFzW2ldLnVudGlsIDw9IHZhbCAmJiB2YWwgPD0gZXJhc1tpXS5zaW5jZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlcmFzW2ldLm5hbWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gJyc7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0RXJhTmFycm93KCkge1xuICAgICAgICB2YXIgaSxcbiAgICAgICAgICAgIGwsXG4gICAgICAgICAgICB2YWwsXG4gICAgICAgICAgICBlcmFzID0gdGhpcy5sb2NhbGVEYXRhKCkuZXJhcygpO1xuICAgICAgICBmb3IgKGkgPSAwLCBsID0gZXJhcy5sZW5ndGg7IGkgPCBsOyArK2kpIHtcbiAgICAgICAgICAgIC8vIHRydW5jYXRlIHRpbWVcbiAgICAgICAgICAgIHZhbCA9IHRoaXMuY2xvbmUoKS5zdGFydE9mKCdkYXknKS52YWx1ZU9mKCk7XG5cbiAgICAgICAgICAgIGlmIChlcmFzW2ldLnNpbmNlIDw9IHZhbCAmJiB2YWwgPD0gZXJhc1tpXS51bnRpbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlcmFzW2ldLm5hcnJvdztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChlcmFzW2ldLnVudGlsIDw9IHZhbCAmJiB2YWwgPD0gZXJhc1tpXS5zaW5jZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlcmFzW2ldLm5hcnJvdztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAnJztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRFcmFBYmJyKCkge1xuICAgICAgICB2YXIgaSxcbiAgICAgICAgICAgIGwsXG4gICAgICAgICAgICB2YWwsXG4gICAgICAgICAgICBlcmFzID0gdGhpcy5sb2NhbGVEYXRhKCkuZXJhcygpO1xuICAgICAgICBmb3IgKGkgPSAwLCBsID0gZXJhcy5sZW5ndGg7IGkgPCBsOyArK2kpIHtcbiAgICAgICAgICAgIC8vIHRydW5jYXRlIHRpbWVcbiAgICAgICAgICAgIHZhbCA9IHRoaXMuY2xvbmUoKS5zdGFydE9mKCdkYXknKS52YWx1ZU9mKCk7XG5cbiAgICAgICAgICAgIGlmIChlcmFzW2ldLnNpbmNlIDw9IHZhbCAmJiB2YWwgPD0gZXJhc1tpXS51bnRpbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlcmFzW2ldLmFiYnI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZXJhc1tpXS51bnRpbCA8PSB2YWwgJiYgdmFsIDw9IGVyYXNbaV0uc2luY2UpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZXJhc1tpXS5hYmJyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICcnO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldEVyYVllYXIoKSB7XG4gICAgICAgIHZhciBpLFxuICAgICAgICAgICAgbCxcbiAgICAgICAgICAgIGRpcixcbiAgICAgICAgICAgIHZhbCxcbiAgICAgICAgICAgIGVyYXMgPSB0aGlzLmxvY2FsZURhdGEoKS5lcmFzKCk7XG4gICAgICAgIGZvciAoaSA9IDAsIGwgPSBlcmFzLmxlbmd0aDsgaSA8IGw7ICsraSkge1xuICAgICAgICAgICAgZGlyID0gZXJhc1tpXS5zaW5jZSA8PSBlcmFzW2ldLnVudGlsID8gKzEgOiAtMTtcblxuICAgICAgICAgICAgLy8gdHJ1bmNhdGUgdGltZVxuICAgICAgICAgICAgdmFsID0gdGhpcy5jbG9uZSgpLnN0YXJ0T2YoJ2RheScpLnZhbHVlT2YoKTtcblxuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIChlcmFzW2ldLnNpbmNlIDw9IHZhbCAmJiB2YWwgPD0gZXJhc1tpXS51bnRpbCkgfHxcbiAgICAgICAgICAgICAgICAoZXJhc1tpXS51bnRpbCA8PSB2YWwgJiYgdmFsIDw9IGVyYXNbaV0uc2luY2UpXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICAodGhpcy55ZWFyKCkgLSBob29rcyhlcmFzW2ldLnNpbmNlKS55ZWFyKCkpICogZGlyICtcbiAgICAgICAgICAgICAgICAgICAgZXJhc1tpXS5vZmZzZXRcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMueWVhcigpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGVyYXNOYW1lUmVnZXgoaXNTdHJpY3QpIHtcbiAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfZXJhc05hbWVSZWdleCcpKSB7XG4gICAgICAgICAgICBjb21wdXRlRXJhc1BhcnNlLmNhbGwodGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGlzU3RyaWN0ID8gdGhpcy5fZXJhc05hbWVSZWdleCA6IHRoaXMuX2VyYXNSZWdleDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBlcmFzQWJiclJlZ2V4KGlzU3RyaWN0KSB7XG4gICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX2VyYXNBYmJyUmVnZXgnKSkge1xuICAgICAgICAgICAgY29tcHV0ZUVyYXNQYXJzZS5jYWxsKHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpc1N0cmljdCA/IHRoaXMuX2VyYXNBYmJyUmVnZXggOiB0aGlzLl9lcmFzUmVnZXg7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZXJhc05hcnJvd1JlZ2V4KGlzU3RyaWN0KSB7XG4gICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX2VyYXNOYXJyb3dSZWdleCcpKSB7XG4gICAgICAgICAgICBjb21wdXRlRXJhc1BhcnNlLmNhbGwodGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGlzU3RyaWN0ID8gdGhpcy5fZXJhc05hcnJvd1JlZ2V4IDogdGhpcy5fZXJhc1JlZ2V4O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1hdGNoRXJhQWJicihpc1N0cmljdCwgbG9jYWxlKSB7XG4gICAgICAgIHJldHVybiBsb2NhbGUuZXJhc0FiYnJSZWdleChpc1N0cmljdCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWF0Y2hFcmFOYW1lKGlzU3RyaWN0LCBsb2NhbGUpIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsZS5lcmFzTmFtZVJlZ2V4KGlzU3RyaWN0KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtYXRjaEVyYU5hcnJvdyhpc1N0cmljdCwgbG9jYWxlKSB7XG4gICAgICAgIHJldHVybiBsb2NhbGUuZXJhc05hcnJvd1JlZ2V4KGlzU3RyaWN0KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtYXRjaEVyYVllYXJPcmRpbmFsKGlzU3RyaWN0LCBsb2NhbGUpIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsZS5fZXJhWWVhck9yZGluYWxSZWdleCB8fCBtYXRjaFVuc2lnbmVkO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNvbXB1dGVFcmFzUGFyc2UoKSB7XG4gICAgICAgIHZhciBhYmJyUGllY2VzID0gW10sXG4gICAgICAgICAgICBuYW1lUGllY2VzID0gW10sXG4gICAgICAgICAgICBuYXJyb3dQaWVjZXMgPSBbXSxcbiAgICAgICAgICAgIG1peGVkUGllY2VzID0gW10sXG4gICAgICAgICAgICBpLFxuICAgICAgICAgICAgbCxcbiAgICAgICAgICAgIGVyYXNOYW1lLFxuICAgICAgICAgICAgZXJhc0FiYnIsXG4gICAgICAgICAgICBlcmFzTmFycm93LFxuICAgICAgICAgICAgZXJhcyA9IHRoaXMuZXJhcygpO1xuXG4gICAgICAgIGZvciAoaSA9IDAsIGwgPSBlcmFzLmxlbmd0aDsgaSA8IGw7ICsraSkge1xuICAgICAgICAgICAgZXJhc05hbWUgPSByZWdleEVzY2FwZShlcmFzW2ldLm5hbWUpO1xuICAgICAgICAgICAgZXJhc0FiYnIgPSByZWdleEVzY2FwZShlcmFzW2ldLmFiYnIpO1xuICAgICAgICAgICAgZXJhc05hcnJvdyA9IHJlZ2V4RXNjYXBlKGVyYXNbaV0ubmFycm93KTtcblxuICAgICAgICAgICAgbmFtZVBpZWNlcy5wdXNoKGVyYXNOYW1lKTtcbiAgICAgICAgICAgIGFiYnJQaWVjZXMucHVzaChlcmFzQWJicik7XG4gICAgICAgICAgICBuYXJyb3dQaWVjZXMucHVzaChlcmFzTmFycm93KTtcbiAgICAgICAgICAgIG1peGVkUGllY2VzLnB1c2goZXJhc05hbWUpO1xuICAgICAgICAgICAgbWl4ZWRQaWVjZXMucHVzaChlcmFzQWJicik7XG4gICAgICAgICAgICBtaXhlZFBpZWNlcy5wdXNoKGVyYXNOYXJyb3cpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fZXJhc1JlZ2V4ID0gbmV3IFJlZ0V4cCgnXignICsgbWl4ZWRQaWVjZXMuam9pbignfCcpICsgJyknLCAnaScpO1xuICAgICAgICB0aGlzLl9lcmFzTmFtZVJlZ2V4ID0gbmV3IFJlZ0V4cCgnXignICsgbmFtZVBpZWNlcy5qb2luKCd8JykgKyAnKScsICdpJyk7XG4gICAgICAgIHRoaXMuX2VyYXNBYmJyUmVnZXggPSBuZXcgUmVnRXhwKCdeKCcgKyBhYmJyUGllY2VzLmpvaW4oJ3wnKSArICcpJywgJ2knKTtcbiAgICAgICAgdGhpcy5fZXJhc05hcnJvd1JlZ2V4ID0gbmV3IFJlZ0V4cChcbiAgICAgICAgICAgICdeKCcgKyBuYXJyb3dQaWVjZXMuam9pbignfCcpICsgJyknLFxuICAgICAgICAgICAgJ2knXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydnZycsIDJdLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLndlZWtZZWFyKCkgJSAxMDA7XG4gICAgfSk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ0dHJywgMl0sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNvV2Vla1llYXIoKSAlIDEwMDtcbiAgICB9KTtcblxuICAgIGZ1bmN0aW9uIGFkZFdlZWtZZWFyRm9ybWF0VG9rZW4odG9rZW4sIGdldHRlcikge1xuICAgICAgICBhZGRGb3JtYXRUb2tlbigwLCBbdG9rZW4sIHRva2VuLmxlbmd0aF0sIDAsIGdldHRlcik7XG4gICAgfVxuXG4gICAgYWRkV2Vla1llYXJGb3JtYXRUb2tlbignZ2dnZycsICd3ZWVrWWVhcicpO1xuICAgIGFkZFdlZWtZZWFyRm9ybWF0VG9rZW4oJ2dnZ2dnJywgJ3dlZWtZZWFyJyk7XG4gICAgYWRkV2Vla1llYXJGb3JtYXRUb2tlbignR0dHRycsICdpc29XZWVrWWVhcicpO1xuICAgIGFkZFdlZWtZZWFyRm9ybWF0VG9rZW4oJ0dHR0dHJywgJ2lzb1dlZWtZZWFyJyk7XG5cbiAgICAvLyBBTElBU0VTXG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBhZGRSZWdleFRva2VuKCdHJywgbWF0Y2hTaWduZWQpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ2cnLCBtYXRjaFNpZ25lZCk7XG4gICAgYWRkUmVnZXhUb2tlbignR0cnLCBtYXRjaDF0bzIsIG1hdGNoMik7XG4gICAgYWRkUmVnZXhUb2tlbignZ2cnLCBtYXRjaDF0bzIsIG1hdGNoMik7XG4gICAgYWRkUmVnZXhUb2tlbignR0dHRycsIG1hdGNoMXRvNCwgbWF0Y2g0KTtcbiAgICBhZGRSZWdleFRva2VuKCdnZ2dnJywgbWF0Y2gxdG80LCBtYXRjaDQpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ0dHR0dHJywgbWF0Y2gxdG82LCBtYXRjaDYpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ2dnZ2dnJywgbWF0Y2gxdG82LCBtYXRjaDYpO1xuXG4gICAgYWRkV2Vla1BhcnNlVG9rZW4oXG4gICAgICAgIFsnZ2dnZycsICdnZ2dnZycsICdHR0dHJywgJ0dHR0dHJ10sXG4gICAgICAgIGZ1bmN0aW9uIChpbnB1dCwgd2VlaywgY29uZmlnLCB0b2tlbikge1xuICAgICAgICAgICAgd2Vla1t0b2tlbi5zdWJzdHIoMCwgMildID0gdG9JbnQoaW5wdXQpO1xuICAgICAgICB9XG4gICAgKTtcblxuICAgIGFkZFdlZWtQYXJzZVRva2VuKFsnZ2cnLCAnR0cnXSwgZnVuY3Rpb24gKGlucHV0LCB3ZWVrLCBjb25maWcsIHRva2VuKSB7XG4gICAgICAgIHdlZWtbdG9rZW5dID0gaG9va3MucGFyc2VUd29EaWdpdFllYXIoaW5wdXQpO1xuICAgIH0pO1xuXG4gICAgLy8gTU9NRU5UU1xuXG4gICAgZnVuY3Rpb24gZ2V0U2V0V2Vla1llYXIoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIGdldFNldFdlZWtZZWFySGVscGVyLmNhbGwoXG4gICAgICAgICAgICB0aGlzLFxuICAgICAgICAgICAgaW5wdXQsXG4gICAgICAgICAgICB0aGlzLndlZWsoKSxcbiAgICAgICAgICAgIHRoaXMud2Vla2RheSgpICsgdGhpcy5sb2NhbGVEYXRhKCkuX3dlZWsuZG93LFxuICAgICAgICAgICAgdGhpcy5sb2NhbGVEYXRhKCkuX3dlZWsuZG93LFxuICAgICAgICAgICAgdGhpcy5sb2NhbGVEYXRhKCkuX3dlZWsuZG95XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0U2V0SVNPV2Vla1llYXIoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIGdldFNldFdlZWtZZWFySGVscGVyLmNhbGwoXG4gICAgICAgICAgICB0aGlzLFxuICAgICAgICAgICAgaW5wdXQsXG4gICAgICAgICAgICB0aGlzLmlzb1dlZWsoKSxcbiAgICAgICAgICAgIHRoaXMuaXNvV2Vla2RheSgpLFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDRcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRJU09XZWVrc0luWWVhcigpIHtcbiAgICAgICAgcmV0dXJuIHdlZWtzSW5ZZWFyKHRoaXMueWVhcigpLCAxLCA0KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRJU09XZWVrc0luSVNPV2Vla1llYXIoKSB7XG4gICAgICAgIHJldHVybiB3ZWVrc0luWWVhcih0aGlzLmlzb1dlZWtZZWFyKCksIDEsIDQpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFdlZWtzSW5ZZWFyKCkge1xuICAgICAgICB2YXIgd2Vla0luZm8gPSB0aGlzLmxvY2FsZURhdGEoKS5fd2VlaztcbiAgICAgICAgcmV0dXJuIHdlZWtzSW5ZZWFyKHRoaXMueWVhcigpLCB3ZWVrSW5mby5kb3csIHdlZWtJbmZvLmRveSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0V2Vla3NJbldlZWtZZWFyKCkge1xuICAgICAgICB2YXIgd2Vla0luZm8gPSB0aGlzLmxvY2FsZURhdGEoKS5fd2VlaztcbiAgICAgICAgcmV0dXJuIHdlZWtzSW5ZZWFyKHRoaXMud2Vla1llYXIoKSwgd2Vla0luZm8uZG93LCB3ZWVrSW5mby5kb3kpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFNldFdlZWtZZWFySGVscGVyKGlucHV0LCB3ZWVrLCB3ZWVrZGF5LCBkb3csIGRveSkge1xuICAgICAgICB2YXIgd2Vla3NUYXJnZXQ7XG4gICAgICAgIGlmIChpbnB1dCA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gd2Vla09mWWVhcih0aGlzLCBkb3csIGRveSkueWVhcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHdlZWtzVGFyZ2V0ID0gd2Vla3NJblllYXIoaW5wdXQsIGRvdywgZG95KTtcbiAgICAgICAgICAgIGlmICh3ZWVrID4gd2Vla3NUYXJnZXQpIHtcbiAgICAgICAgICAgICAgICB3ZWVrID0gd2Vla3NUYXJnZXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gc2V0V2Vla0FsbC5jYWxsKHRoaXMsIGlucHV0LCB3ZWVrLCB3ZWVrZGF5LCBkb3csIGRveSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXRXZWVrQWxsKHdlZWtZZWFyLCB3ZWVrLCB3ZWVrZGF5LCBkb3csIGRveSkge1xuICAgICAgICB2YXIgZGF5T2ZZZWFyRGF0YSA9IGRheU9mWWVhckZyb21XZWVrcyh3ZWVrWWVhciwgd2Vlaywgd2Vla2RheSwgZG93LCBkb3kpLFxuICAgICAgICAgICAgZGF0ZSA9IGNyZWF0ZVVUQ0RhdGUoZGF5T2ZZZWFyRGF0YS55ZWFyLCAwLCBkYXlPZlllYXJEYXRhLmRheU9mWWVhcik7XG5cbiAgICAgICAgdGhpcy55ZWFyKGRhdGUuZ2V0VVRDRnVsbFllYXIoKSk7XG4gICAgICAgIHRoaXMubW9udGgoZGF0ZS5nZXRVVENNb250aCgpKTtcbiAgICAgICAgdGhpcy5kYXRlKGRhdGUuZ2V0VVRDRGF0ZSgpKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ1EnLCAwLCAnUW8nLCAncXVhcnRlcicpO1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgYWRkUmVnZXhUb2tlbignUScsIG1hdGNoMSk7XG4gICAgYWRkUGFyc2VUb2tlbignUScsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXkpIHtcbiAgICAgICAgYXJyYXlbTU9OVEhdID0gKHRvSW50KGlucHV0KSAtIDEpICogMztcbiAgICB9KTtcblxuICAgIC8vIE1PTUVOVFNcblxuICAgIGZ1bmN0aW9uIGdldFNldFF1YXJ0ZXIoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIGlucHV0ID09IG51bGxcbiAgICAgICAgICAgID8gTWF0aC5jZWlsKCh0aGlzLm1vbnRoKCkgKyAxKSAvIDMpXG4gICAgICAgICAgICA6IHRoaXMubW9udGgoKGlucHV0IC0gMSkgKiAzICsgKHRoaXMubW9udGgoKSAlIDMpKTtcbiAgICB9XG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBhZGRGb3JtYXRUb2tlbignRCcsIFsnREQnLCAyXSwgJ0RvJywgJ2RhdGUnKTtcblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ0QnLCBtYXRjaDF0bzIsIG1hdGNoMXRvMk5vTGVhZGluZ1plcm8pO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ0REJywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ0RvJywgZnVuY3Rpb24gKGlzU3RyaWN0LCBsb2NhbGUpIHtcbiAgICAgICAgLy8gVE9ETzogUmVtb3ZlIFwib3JkaW5hbFBhcnNlXCIgZmFsbGJhY2sgaW4gbmV4dCBtYWpvciByZWxlYXNlLlxuICAgICAgICByZXR1cm4gaXNTdHJpY3RcbiAgICAgICAgICAgID8gbG9jYWxlLl9kYXlPZk1vbnRoT3JkaW5hbFBhcnNlIHx8IGxvY2FsZS5fb3JkaW5hbFBhcnNlXG4gICAgICAgICAgICA6IGxvY2FsZS5fZGF5T2ZNb250aE9yZGluYWxQYXJzZUxlbmllbnQ7XG4gICAgfSk7XG5cbiAgICBhZGRQYXJzZVRva2VuKFsnRCcsICdERCddLCBEQVRFKTtcbiAgICBhZGRQYXJzZVRva2VuKCdEbycsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXkpIHtcbiAgICAgICAgYXJyYXlbREFURV0gPSB0b0ludChpbnB1dC5tYXRjaChtYXRjaDF0bzIpWzBdKTtcbiAgICB9KTtcblxuICAgIC8vIE1PTUVOVFNcblxuICAgIHZhciBnZXRTZXREYXlPZk1vbnRoID0gbWFrZUdldFNldCgnRGF0ZScsIHRydWUpO1xuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ0RERCcsIFsnRERERCcsIDNdLCAnREREbycsICdkYXlPZlllYXInKTtcblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ0RERCcsIG1hdGNoMXRvMyk7XG4gICAgYWRkUmVnZXhUb2tlbignRERERCcsIG1hdGNoMyk7XG4gICAgYWRkUGFyc2VUb2tlbihbJ0RERCcsICdEREREJ10sIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgICAgICBjb25maWcuX2RheU9mWWVhciA9IHRvSW50KGlucHV0KTtcbiAgICB9KTtcblxuICAgIC8vIEhFTFBFUlNcblxuICAgIC8vIE1PTUVOVFNcblxuICAgIGZ1bmN0aW9uIGdldFNldERheU9mWWVhcihpbnB1dCkge1xuICAgICAgICB2YXIgZGF5T2ZZZWFyID1cbiAgICAgICAgICAgIE1hdGgucm91bmQoXG4gICAgICAgICAgICAgICAgKHRoaXMuY2xvbmUoKS5zdGFydE9mKCdkYXknKSAtIHRoaXMuY2xvbmUoKS5zdGFydE9mKCd5ZWFyJykpIC8gODY0ZTVcbiAgICAgICAgICAgICkgKyAxO1xuICAgICAgICByZXR1cm4gaW5wdXQgPT0gbnVsbCA/IGRheU9mWWVhciA6IHRoaXMuYWRkKGlucHV0IC0gZGF5T2ZZZWFyLCAnZCcpO1xuICAgIH1cblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGFkZEZvcm1hdFRva2VuKCdtJywgWydtbScsIDJdLCAwLCAnbWludXRlJyk7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBhZGRSZWdleFRva2VuKCdtJywgbWF0Y2gxdG8yLCBtYXRjaDF0bzJIYXNaZXJvKTtcbiAgICBhZGRSZWdleFRva2VuKCdtbScsIG1hdGNoMXRvMiwgbWF0Y2gyKTtcbiAgICBhZGRQYXJzZVRva2VuKFsnbScsICdtbSddLCBNSU5VVEUpO1xuXG4gICAgLy8gTU9NRU5UU1xuXG4gICAgdmFyIGdldFNldE1pbnV0ZSA9IG1ha2VHZXRTZXQoJ01pbnV0ZXMnLCBmYWxzZSk7XG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBhZGRGb3JtYXRUb2tlbigncycsIFsnc3MnLCAyXSwgMCwgJ3NlY29uZCcpO1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgYWRkUmVnZXhUb2tlbigncycsIG1hdGNoMXRvMiwgbWF0Y2gxdG8ySGFzWmVybyk7XG4gICAgYWRkUmVnZXhUb2tlbignc3MnLCBtYXRjaDF0bzIsIG1hdGNoMik7XG4gICAgYWRkUGFyc2VUb2tlbihbJ3MnLCAnc3MnXSwgU0VDT05EKTtcblxuICAgIC8vIE1PTUVOVFNcblxuICAgIHZhciBnZXRTZXRTZWNvbmQgPSBtYWtlR2V0U2V0KCdTZWNvbmRzJywgZmFsc2UpO1xuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ1MnLCAwLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB+fih0aGlzLm1pbGxpc2Vjb25kKCkgLyAxMDApO1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydTUycsIDJdLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB+fih0aGlzLm1pbGxpc2Vjb25kKCkgLyAxMCk7XG4gICAgfSk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ1NTUycsIDNdLCAwLCAnbWlsbGlzZWNvbmQnKTtcbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ1NTU1MnLCA0XSwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5taWxsaXNlY29uZCgpICogMTA7XG4gICAgfSk7XG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydTU1NTUycsIDVdLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1pbGxpc2Vjb25kKCkgKiAxMDA7XG4gICAgfSk7XG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydTU1NTU1MnLCA2XSwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5taWxsaXNlY29uZCgpICogMTAwMDtcbiAgICB9KTtcbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ1NTU1NTU1MnLCA3XSwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5taWxsaXNlY29uZCgpICogMTAwMDA7XG4gICAgfSk7XG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydTU1NTU1NTUycsIDhdLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1pbGxpc2Vjb25kKCkgKiAxMDAwMDA7XG4gICAgfSk7XG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydTU1NTU1NTU1MnLCA5XSwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5taWxsaXNlY29uZCgpICogMTAwMDAwMDtcbiAgICB9KTtcblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ1MnLCBtYXRjaDF0bzMsIG1hdGNoMSk7XG4gICAgYWRkUmVnZXhUb2tlbignU1MnLCBtYXRjaDF0bzMsIG1hdGNoMik7XG4gICAgYWRkUmVnZXhUb2tlbignU1NTJywgbWF0Y2gxdG8zLCBtYXRjaDMpO1xuXG4gICAgdmFyIHRva2VuLCBnZXRTZXRNaWxsaXNlY29uZDtcbiAgICBmb3IgKHRva2VuID0gJ1NTU1MnOyB0b2tlbi5sZW5ndGggPD0gOTsgdG9rZW4gKz0gJ1MnKSB7XG4gICAgICAgIGFkZFJlZ2V4VG9rZW4odG9rZW4sIG1hdGNoVW5zaWduZWQpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBhcnNlTXMoaW5wdXQsIGFycmF5KSB7XG4gICAgICAgIGFycmF5W01JTExJU0VDT05EXSA9IHRvSW50KCgnMC4nICsgaW5wdXQpICogMTAwMCk7XG4gICAgfVxuXG4gICAgZm9yICh0b2tlbiA9ICdTJzsgdG9rZW4ubGVuZ3RoIDw9IDk7IHRva2VuICs9ICdTJykge1xuICAgICAgICBhZGRQYXJzZVRva2VuKHRva2VuLCBwYXJzZU1zKTtcbiAgICB9XG5cbiAgICBnZXRTZXRNaWxsaXNlY29uZCA9IG1ha2VHZXRTZXQoJ01pbGxpc2Vjb25kcycsIGZhbHNlKTtcblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGFkZEZvcm1hdFRva2VuKCd6JywgMCwgMCwgJ3pvbmVBYmJyJyk7XG4gICAgYWRkRm9ybWF0VG9rZW4oJ3p6JywgMCwgMCwgJ3pvbmVOYW1lJyk7XG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICBmdW5jdGlvbiBnZXRab25lQWJicigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lzVVRDID8gJ1VUQycgOiAnJztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRab25lTmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lzVVRDID8gJ0Nvb3JkaW5hdGVkIFVuaXZlcnNhbCBUaW1lJyA6ICcnO1xuICAgIH1cblxuICAgIHZhciBwcm90byA9IE1vbWVudC5wcm90b3R5cGU7XG5cbiAgICBwcm90by5hZGQgPSBhZGQ7XG4gICAgcHJvdG8uY2FsZW5kYXIgPSBjYWxlbmRhciQxO1xuICAgIHByb3RvLmNsb25lID0gY2xvbmU7XG4gICAgcHJvdG8uZGlmZiA9IGRpZmY7XG4gICAgcHJvdG8uZW5kT2YgPSBlbmRPZjtcbiAgICBwcm90by5mb3JtYXQgPSBmb3JtYXQ7XG4gICAgcHJvdG8uZnJvbSA9IGZyb207XG4gICAgcHJvdG8uZnJvbU5vdyA9IGZyb21Ob3c7XG4gICAgcHJvdG8udG8gPSB0bztcbiAgICBwcm90by50b05vdyA9IHRvTm93O1xuICAgIHByb3RvLmdldCA9IHN0cmluZ0dldDtcbiAgICBwcm90by5pbnZhbGlkQXQgPSBpbnZhbGlkQXQ7XG4gICAgcHJvdG8uaXNBZnRlciA9IGlzQWZ0ZXI7XG4gICAgcHJvdG8uaXNCZWZvcmUgPSBpc0JlZm9yZTtcbiAgICBwcm90by5pc0JldHdlZW4gPSBpc0JldHdlZW47XG4gICAgcHJvdG8uaXNTYW1lID0gaXNTYW1lO1xuICAgIHByb3RvLmlzU2FtZU9yQWZ0ZXIgPSBpc1NhbWVPckFmdGVyO1xuICAgIHByb3RvLmlzU2FtZU9yQmVmb3JlID0gaXNTYW1lT3JCZWZvcmU7XG4gICAgcHJvdG8uaXNWYWxpZCA9IGlzVmFsaWQkMjtcbiAgICBwcm90by5sYW5nID0gbGFuZztcbiAgICBwcm90by5sb2NhbGUgPSBsb2NhbGU7XG4gICAgcHJvdG8ubG9jYWxlRGF0YSA9IGxvY2FsZURhdGE7XG4gICAgcHJvdG8ubWF4ID0gcHJvdG90eXBlTWF4O1xuICAgIHByb3RvLm1pbiA9IHByb3RvdHlwZU1pbjtcbiAgICBwcm90by5wYXJzaW5nRmxhZ3MgPSBwYXJzaW5nRmxhZ3M7XG4gICAgcHJvdG8uc2V0ID0gc3RyaW5nU2V0O1xuICAgIHByb3RvLnN0YXJ0T2YgPSBzdGFydE9mO1xuICAgIHByb3RvLnN1YnRyYWN0ID0gc3VidHJhY3Q7XG4gICAgcHJvdG8udG9BcnJheSA9IHRvQXJyYXk7XG4gICAgcHJvdG8udG9PYmplY3QgPSB0b09iamVjdDtcbiAgICBwcm90by50b0RhdGUgPSB0b0RhdGU7XG4gICAgcHJvdG8udG9JU09TdHJpbmcgPSB0b0lTT1N0cmluZztcbiAgICBwcm90by5pbnNwZWN0ID0gaW5zcGVjdDtcbiAgICBpZiAodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLmZvciAhPSBudWxsKSB7XG4gICAgICAgIHByb3RvW1N5bWJvbC5mb3IoJ25vZGVqcy51dGlsLmluc3BlY3QuY3VzdG9tJyldID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuICdNb21lbnQ8JyArIHRoaXMuZm9ybWF0KCkgKyAnPic7XG4gICAgICAgIH07XG4gICAgfVxuICAgIHByb3RvLnRvSlNPTiA9IHRvSlNPTjtcbiAgICBwcm90by50b1N0cmluZyA9IHRvU3RyaW5nO1xuICAgIHByb3RvLnVuaXggPSB1bml4O1xuICAgIHByb3RvLnZhbHVlT2YgPSB2YWx1ZU9mO1xuICAgIHByb3RvLmNyZWF0aW9uRGF0YSA9IGNyZWF0aW9uRGF0YTtcbiAgICBwcm90by5lcmFOYW1lID0gZ2V0RXJhTmFtZTtcbiAgICBwcm90by5lcmFOYXJyb3cgPSBnZXRFcmFOYXJyb3c7XG4gICAgcHJvdG8uZXJhQWJiciA9IGdldEVyYUFiYnI7XG4gICAgcHJvdG8uZXJhWWVhciA9IGdldEVyYVllYXI7XG4gICAgcHJvdG8ueWVhciA9IGdldFNldFllYXI7XG4gICAgcHJvdG8uaXNMZWFwWWVhciA9IGdldElzTGVhcFllYXI7XG4gICAgcHJvdG8ud2Vla1llYXIgPSBnZXRTZXRXZWVrWWVhcjtcbiAgICBwcm90by5pc29XZWVrWWVhciA9IGdldFNldElTT1dlZWtZZWFyO1xuICAgIHByb3RvLnF1YXJ0ZXIgPSBwcm90by5xdWFydGVycyA9IGdldFNldFF1YXJ0ZXI7XG4gICAgcHJvdG8ubW9udGggPSBnZXRTZXRNb250aDtcbiAgICBwcm90by5kYXlzSW5Nb250aCA9IGdldERheXNJbk1vbnRoO1xuICAgIHByb3RvLndlZWsgPSBwcm90by53ZWVrcyA9IGdldFNldFdlZWs7XG4gICAgcHJvdG8uaXNvV2VlayA9IHByb3RvLmlzb1dlZWtzID0gZ2V0U2V0SVNPV2VlaztcbiAgICBwcm90by53ZWVrc0luWWVhciA9IGdldFdlZWtzSW5ZZWFyO1xuICAgIHByb3RvLndlZWtzSW5XZWVrWWVhciA9IGdldFdlZWtzSW5XZWVrWWVhcjtcbiAgICBwcm90by5pc29XZWVrc0luWWVhciA9IGdldElTT1dlZWtzSW5ZZWFyO1xuICAgIHByb3RvLmlzb1dlZWtzSW5JU09XZWVrWWVhciA9IGdldElTT1dlZWtzSW5JU09XZWVrWWVhcjtcbiAgICBwcm90by5kYXRlID0gZ2V0U2V0RGF5T2ZNb250aDtcbiAgICBwcm90by5kYXkgPSBwcm90by5kYXlzID0gZ2V0U2V0RGF5T2ZXZWVrO1xuICAgIHByb3RvLndlZWtkYXkgPSBnZXRTZXRMb2NhbGVEYXlPZldlZWs7XG4gICAgcHJvdG8uaXNvV2Vla2RheSA9IGdldFNldElTT0RheU9mV2VlaztcbiAgICBwcm90by5kYXlPZlllYXIgPSBnZXRTZXREYXlPZlllYXI7XG4gICAgcHJvdG8uaG91ciA9IHByb3RvLmhvdXJzID0gZ2V0U2V0SG91cjtcbiAgICBwcm90by5taW51dGUgPSBwcm90by5taW51dGVzID0gZ2V0U2V0TWludXRlO1xuICAgIHByb3RvLnNlY29uZCA9IHByb3RvLnNlY29uZHMgPSBnZXRTZXRTZWNvbmQ7XG4gICAgcHJvdG8ubWlsbGlzZWNvbmQgPSBwcm90by5taWxsaXNlY29uZHMgPSBnZXRTZXRNaWxsaXNlY29uZDtcbiAgICBwcm90by51dGNPZmZzZXQgPSBnZXRTZXRPZmZzZXQ7XG4gICAgcHJvdG8udXRjID0gc2V0T2Zmc2V0VG9VVEM7XG4gICAgcHJvdG8ubG9jYWwgPSBzZXRPZmZzZXRUb0xvY2FsO1xuICAgIHByb3RvLnBhcnNlWm9uZSA9IHNldE9mZnNldFRvUGFyc2VkT2Zmc2V0O1xuICAgIHByb3RvLmhhc0FsaWduZWRIb3VyT2Zmc2V0ID0gaGFzQWxpZ25lZEhvdXJPZmZzZXQ7XG4gICAgcHJvdG8uaXNEU1QgPSBpc0RheWxpZ2h0U2F2aW5nVGltZTtcbiAgICBwcm90by5pc0xvY2FsID0gaXNMb2NhbDtcbiAgICBwcm90by5pc1V0Y09mZnNldCA9IGlzVXRjT2Zmc2V0O1xuICAgIHByb3RvLmlzVXRjID0gaXNVdGM7XG4gICAgcHJvdG8uaXNVVEMgPSBpc1V0YztcbiAgICBwcm90by56b25lQWJiciA9IGdldFpvbmVBYmJyO1xuICAgIHByb3RvLnpvbmVOYW1lID0gZ2V0Wm9uZU5hbWU7XG4gICAgcHJvdG8uZGF0ZXMgPSBkZXByZWNhdGUoXG4gICAgICAgICdkYXRlcyBhY2Nlc3NvciBpcyBkZXByZWNhdGVkLiBVc2UgZGF0ZSBpbnN0ZWFkLicsXG4gICAgICAgIGdldFNldERheU9mTW9udGhcbiAgICApO1xuICAgIHByb3RvLm1vbnRocyA9IGRlcHJlY2F0ZShcbiAgICAgICAgJ21vbnRocyBhY2Nlc3NvciBpcyBkZXByZWNhdGVkLiBVc2UgbW9udGggaW5zdGVhZCcsXG4gICAgICAgIGdldFNldE1vbnRoXG4gICAgKTtcbiAgICBwcm90by55ZWFycyA9IGRlcHJlY2F0ZShcbiAgICAgICAgJ3llYXJzIGFjY2Vzc29yIGlzIGRlcHJlY2F0ZWQuIFVzZSB5ZWFyIGluc3RlYWQnLFxuICAgICAgICBnZXRTZXRZZWFyXG4gICAgKTtcbiAgICBwcm90by56b25lID0gZGVwcmVjYXRlKFxuICAgICAgICAnbW9tZW50KCkuem9uZSBpcyBkZXByZWNhdGVkLCB1c2UgbW9tZW50KCkudXRjT2Zmc2V0IGluc3RlYWQuIGh0dHA6Ly9tb21lbnRqcy5jb20vZ3VpZGVzLyMvd2FybmluZ3Mvem9uZS8nLFxuICAgICAgICBnZXRTZXRab25lXG4gICAgKTtcbiAgICBwcm90by5pc0RTVFNoaWZ0ZWQgPSBkZXByZWNhdGUoXG4gICAgICAgICdpc0RTVFNoaWZ0ZWQgaXMgZGVwcmVjYXRlZC4gU2VlIGh0dHA6Ly9tb21lbnRqcy5jb20vZ3VpZGVzLyMvd2FybmluZ3MvZHN0LXNoaWZ0ZWQvIGZvciBtb3JlIGluZm9ybWF0aW9uJyxcbiAgICAgICAgaXNEYXlsaWdodFNhdmluZ1RpbWVTaGlmdGVkXG4gICAgKTtcblxuICAgIGZ1bmN0aW9uIGNyZWF0ZVVuaXgoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUxvY2FsKGlucHV0ICogMTAwMCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlSW5ab25lKCkge1xuICAgICAgICByZXR1cm4gY3JlYXRlTG9jYWwuYXBwbHkobnVsbCwgYXJndW1lbnRzKS5wYXJzZVpvbmUoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwcmVQYXJzZVBvc3RGb3JtYXQoc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmc7XG4gICAgfVxuXG4gICAgdmFyIHByb3RvJDEgPSBMb2NhbGUucHJvdG90eXBlO1xuXG4gICAgcHJvdG8kMS5jYWxlbmRhciA9IGNhbGVuZGFyO1xuICAgIHByb3RvJDEubG9uZ0RhdGVGb3JtYXQgPSBsb25nRGF0ZUZvcm1hdDtcbiAgICBwcm90byQxLmludmFsaWREYXRlID0gaW52YWxpZERhdGU7XG4gICAgcHJvdG8kMS5vcmRpbmFsID0gb3JkaW5hbDtcbiAgICBwcm90byQxLnByZXBhcnNlID0gcHJlUGFyc2VQb3N0Rm9ybWF0O1xuICAgIHByb3RvJDEucG9zdGZvcm1hdCA9IHByZVBhcnNlUG9zdEZvcm1hdDtcbiAgICBwcm90byQxLnJlbGF0aXZlVGltZSA9IHJlbGF0aXZlVGltZTtcbiAgICBwcm90byQxLnBhc3RGdXR1cmUgPSBwYXN0RnV0dXJlO1xuICAgIHByb3RvJDEuc2V0ID0gc2V0O1xuICAgIHByb3RvJDEuZXJhcyA9IGxvY2FsZUVyYXM7XG4gICAgcHJvdG8kMS5lcmFzUGFyc2UgPSBsb2NhbGVFcmFzUGFyc2U7XG4gICAgcHJvdG8kMS5lcmFzQ29udmVydFllYXIgPSBsb2NhbGVFcmFzQ29udmVydFllYXI7XG4gICAgcHJvdG8kMS5lcmFzQWJiclJlZ2V4ID0gZXJhc0FiYnJSZWdleDtcbiAgICBwcm90byQxLmVyYXNOYW1lUmVnZXggPSBlcmFzTmFtZVJlZ2V4O1xuICAgIHByb3RvJDEuZXJhc05hcnJvd1JlZ2V4ID0gZXJhc05hcnJvd1JlZ2V4O1xuXG4gICAgcHJvdG8kMS5tb250aHMgPSBsb2NhbGVNb250aHM7XG4gICAgcHJvdG8kMS5tb250aHNTaG9ydCA9IGxvY2FsZU1vbnRoc1Nob3J0O1xuICAgIHByb3RvJDEubW9udGhzUGFyc2UgPSBsb2NhbGVNb250aHNQYXJzZTtcbiAgICBwcm90byQxLm1vbnRoc1JlZ2V4ID0gbW9udGhzUmVnZXg7XG4gICAgcHJvdG8kMS5tb250aHNTaG9ydFJlZ2V4ID0gbW9udGhzU2hvcnRSZWdleDtcbiAgICBwcm90byQxLndlZWsgPSBsb2NhbGVXZWVrO1xuICAgIHByb3RvJDEuZmlyc3REYXlPZlllYXIgPSBsb2NhbGVGaXJzdERheU9mWWVhcjtcbiAgICBwcm90byQxLmZpcnN0RGF5T2ZXZWVrID0gbG9jYWxlRmlyc3REYXlPZldlZWs7XG5cbiAgICBwcm90byQxLndlZWtkYXlzID0gbG9jYWxlV2Vla2RheXM7XG4gICAgcHJvdG8kMS53ZWVrZGF5c01pbiA9IGxvY2FsZVdlZWtkYXlzTWluO1xuICAgIHByb3RvJDEud2Vla2RheXNTaG9ydCA9IGxvY2FsZVdlZWtkYXlzU2hvcnQ7XG4gICAgcHJvdG8kMS53ZWVrZGF5c1BhcnNlID0gbG9jYWxlV2Vla2RheXNQYXJzZTtcblxuICAgIHByb3RvJDEud2Vla2RheXNSZWdleCA9IHdlZWtkYXlzUmVnZXg7XG4gICAgcHJvdG8kMS53ZWVrZGF5c1Nob3J0UmVnZXggPSB3ZWVrZGF5c1Nob3J0UmVnZXg7XG4gICAgcHJvdG8kMS53ZWVrZGF5c01pblJlZ2V4ID0gd2Vla2RheXNNaW5SZWdleDtcblxuICAgIHByb3RvJDEuaXNQTSA9IGxvY2FsZUlzUE07XG4gICAgcHJvdG8kMS5tZXJpZGllbSA9IGxvY2FsZU1lcmlkaWVtO1xuXG4gICAgZnVuY3Rpb24gZ2V0JDEoZm9ybWF0LCBpbmRleCwgZmllbGQsIHNldHRlcikge1xuICAgICAgICB2YXIgbG9jYWxlID0gZ2V0TG9jYWxlKCksXG4gICAgICAgICAgICB1dGMgPSBjcmVhdGVVVEMoKS5zZXQoc2V0dGVyLCBpbmRleCk7XG4gICAgICAgIHJldHVybiBsb2NhbGVbZmllbGRdKHV0YywgZm9ybWF0KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaXN0TW9udGhzSW1wbChmb3JtYXQsIGluZGV4LCBmaWVsZCkge1xuICAgICAgICBpZiAoaXNOdW1iZXIoZm9ybWF0KSkge1xuICAgICAgICAgICAgaW5kZXggPSBmb3JtYXQ7XG4gICAgICAgICAgICBmb3JtYXQgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICBmb3JtYXQgPSBmb3JtYXQgfHwgJyc7XG5cbiAgICAgICAgaWYgKGluZGV4ICE9IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBnZXQkMShmb3JtYXQsIGluZGV4LCBmaWVsZCwgJ21vbnRoJyk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaSxcbiAgICAgICAgICAgIG91dCA9IFtdO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgMTI7IGkrKykge1xuICAgICAgICAgICAgb3V0W2ldID0gZ2V0JDEoZm9ybWF0LCBpLCBmaWVsZCwgJ21vbnRoJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG5cbiAgICAvLyAoKVxuICAgIC8vICg1KVxuICAgIC8vIChmbXQsIDUpXG4gICAgLy8gKGZtdClcbiAgICAvLyAodHJ1ZSlcbiAgICAvLyAodHJ1ZSwgNSlcbiAgICAvLyAodHJ1ZSwgZm10LCA1KVxuICAgIC8vICh0cnVlLCBmbXQpXG4gICAgZnVuY3Rpb24gbGlzdFdlZWtkYXlzSW1wbChsb2NhbGVTb3J0ZWQsIGZvcm1hdCwgaW5kZXgsIGZpZWxkKSB7XG4gICAgICAgIGlmICh0eXBlb2YgbG9jYWxlU29ydGVkID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICAgIGlmIChpc051bWJlcihmb3JtYXQpKSB7XG4gICAgICAgICAgICAgICAgaW5kZXggPSBmb3JtYXQ7XG4gICAgICAgICAgICAgICAgZm9ybWF0ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmb3JtYXQgPSBmb3JtYXQgfHwgJyc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmb3JtYXQgPSBsb2NhbGVTb3J0ZWQ7XG4gICAgICAgICAgICBpbmRleCA9IGZvcm1hdDtcbiAgICAgICAgICAgIGxvY2FsZVNvcnRlZCA9IGZhbHNlO1xuXG4gICAgICAgICAgICBpZiAoaXNOdW1iZXIoZm9ybWF0KSkge1xuICAgICAgICAgICAgICAgIGluZGV4ID0gZm9ybWF0O1xuICAgICAgICAgICAgICAgIGZvcm1hdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZm9ybWF0ID0gZm9ybWF0IHx8ICcnO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGxvY2FsZSA9IGdldExvY2FsZSgpLFxuICAgICAgICAgICAgc2hpZnQgPSBsb2NhbGVTb3J0ZWQgPyBsb2NhbGUuX3dlZWsuZG93IDogMCxcbiAgICAgICAgICAgIGksXG4gICAgICAgICAgICBvdXQgPSBbXTtcblxuICAgICAgICBpZiAoaW5kZXggIT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIGdldCQxKGZvcm1hdCwgKGluZGV4ICsgc2hpZnQpICUgNywgZmllbGQsICdkYXknKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCA3OyBpKyspIHtcbiAgICAgICAgICAgIG91dFtpXSA9IGdldCQxKGZvcm1hdCwgKGkgKyBzaGlmdCkgJSA3LCBmaWVsZCwgJ2RheScpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGlzdE1vbnRocyhmb3JtYXQsIGluZGV4KSB7XG4gICAgICAgIHJldHVybiBsaXN0TW9udGhzSW1wbChmb3JtYXQsIGluZGV4LCAnbW9udGhzJyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGlzdE1vbnRoc1Nob3J0KGZvcm1hdCwgaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIGxpc3RNb250aHNJbXBsKGZvcm1hdCwgaW5kZXgsICdtb250aHNTaG9ydCcpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpc3RXZWVrZGF5cyhsb2NhbGVTb3J0ZWQsIGZvcm1hdCwgaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIGxpc3RXZWVrZGF5c0ltcGwobG9jYWxlU29ydGVkLCBmb3JtYXQsIGluZGV4LCAnd2Vla2RheXMnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaXN0V2Vla2RheXNTaG9ydChsb2NhbGVTb3J0ZWQsIGZvcm1hdCwgaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIGxpc3RXZWVrZGF5c0ltcGwobG9jYWxlU29ydGVkLCBmb3JtYXQsIGluZGV4LCAnd2Vla2RheXNTaG9ydCcpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpc3RXZWVrZGF5c01pbihsb2NhbGVTb3J0ZWQsIGZvcm1hdCwgaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIGxpc3RXZWVrZGF5c0ltcGwobG9jYWxlU29ydGVkLCBmb3JtYXQsIGluZGV4LCAnd2Vla2RheXNNaW4nKTtcbiAgICB9XG5cbiAgICBnZXRTZXRHbG9iYWxMb2NhbGUoJ2VuJywge1xuICAgICAgICBlcmFzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc2luY2U6ICcwMDAxLTAxLTAxJyxcbiAgICAgICAgICAgICAgICB1bnRpbDogK0luZmluaXR5LFxuICAgICAgICAgICAgICAgIG9mZnNldDogMSxcbiAgICAgICAgICAgICAgICBuYW1lOiAnQW5ubyBEb21pbmknLFxuICAgICAgICAgICAgICAgIG5hcnJvdzogJ0FEJyxcbiAgICAgICAgICAgICAgICBhYmJyOiAnQUQnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzaW5jZTogJzAwMDAtMTItMzEnLFxuICAgICAgICAgICAgICAgIHVudGlsOiAtSW5maW5pdHksXG4gICAgICAgICAgICAgICAgb2Zmc2V0OiAxLFxuICAgICAgICAgICAgICAgIG5hbWU6ICdCZWZvcmUgQ2hyaXN0JyxcbiAgICAgICAgICAgICAgICBuYXJyb3c6ICdCQycsXG4gICAgICAgICAgICAgICAgYWJicjogJ0JDJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfSh0aHxzdHxuZHxyZCkvLFxuICAgICAgICBvcmRpbmFsOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgICAgICB2YXIgYiA9IG51bWJlciAlIDEwLFxuICAgICAgICAgICAgICAgIG91dHB1dCA9XG4gICAgICAgICAgICAgICAgICAgIHRvSW50KChudW1iZXIgJSAxMDApIC8gMTApID09PSAxXG4gICAgICAgICAgICAgICAgICAgICAgICA/ICd0aCdcbiAgICAgICAgICAgICAgICAgICAgICAgIDogYiA9PT0gMVxuICAgICAgICAgICAgICAgICAgICAgICAgICA/ICdzdCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgOiBiID09PSAyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAnbmQnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBiID09PSAzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/ICdyZCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogJ3RoJztcbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyBvdXRwdXQ7XG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICAvLyBTaWRlIGVmZmVjdCBpbXBvcnRzXG5cbiAgICBob29rcy5sYW5nID0gZGVwcmVjYXRlKFxuICAgICAgICAnbW9tZW50LmxhbmcgaXMgZGVwcmVjYXRlZC4gVXNlIG1vbWVudC5sb2NhbGUgaW5zdGVhZC4nLFxuICAgICAgICBnZXRTZXRHbG9iYWxMb2NhbGVcbiAgICApO1xuICAgIGhvb2tzLmxhbmdEYXRhID0gZGVwcmVjYXRlKFxuICAgICAgICAnbW9tZW50LmxhbmdEYXRhIGlzIGRlcHJlY2F0ZWQuIFVzZSBtb21lbnQubG9jYWxlRGF0YSBpbnN0ZWFkLicsXG4gICAgICAgIGdldExvY2FsZVxuICAgICk7XG5cbiAgICB2YXIgbWF0aEFicyA9IE1hdGguYWJzO1xuXG4gICAgZnVuY3Rpb24gYWJzKCkge1xuICAgICAgICB2YXIgZGF0YSA9IHRoaXMuX2RhdGE7XG5cbiAgICAgICAgdGhpcy5fbWlsbGlzZWNvbmRzID0gbWF0aEFicyh0aGlzLl9taWxsaXNlY29uZHMpO1xuICAgICAgICB0aGlzLl9kYXlzID0gbWF0aEFicyh0aGlzLl9kYXlzKTtcbiAgICAgICAgdGhpcy5fbW9udGhzID0gbWF0aEFicyh0aGlzLl9tb250aHMpO1xuXG4gICAgICAgIGRhdGEubWlsbGlzZWNvbmRzID0gbWF0aEFicyhkYXRhLm1pbGxpc2Vjb25kcyk7XG4gICAgICAgIGRhdGEuc2Vjb25kcyA9IG1hdGhBYnMoZGF0YS5zZWNvbmRzKTtcbiAgICAgICAgZGF0YS5taW51dGVzID0gbWF0aEFicyhkYXRhLm1pbnV0ZXMpO1xuICAgICAgICBkYXRhLmhvdXJzID0gbWF0aEFicyhkYXRhLmhvdXJzKTtcbiAgICAgICAgZGF0YS5tb250aHMgPSBtYXRoQWJzKGRhdGEubW9udGhzKTtcbiAgICAgICAgZGF0YS55ZWFycyA9IG1hdGhBYnMoZGF0YS55ZWFycyk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYWRkU3VidHJhY3QkMShkdXJhdGlvbiwgaW5wdXQsIHZhbHVlLCBkaXJlY3Rpb24pIHtcbiAgICAgICAgdmFyIG90aGVyID0gY3JlYXRlRHVyYXRpb24oaW5wdXQsIHZhbHVlKTtcblxuICAgICAgICBkdXJhdGlvbi5fbWlsbGlzZWNvbmRzICs9IGRpcmVjdGlvbiAqIG90aGVyLl9taWxsaXNlY29uZHM7XG4gICAgICAgIGR1cmF0aW9uLl9kYXlzICs9IGRpcmVjdGlvbiAqIG90aGVyLl9kYXlzO1xuICAgICAgICBkdXJhdGlvbi5fbW9udGhzICs9IGRpcmVjdGlvbiAqIG90aGVyLl9tb250aHM7XG5cbiAgICAgICAgcmV0dXJuIGR1cmF0aW9uLl9idWJibGUoKTtcbiAgICB9XG5cbiAgICAvLyBzdXBwb3J0cyBvbmx5IDIuMC1zdHlsZSBhZGQoMSwgJ3MnKSBvciBhZGQoZHVyYXRpb24pXG4gICAgZnVuY3Rpb24gYWRkJDEoaW5wdXQsIHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBhZGRTdWJ0cmFjdCQxKHRoaXMsIGlucHV0LCB2YWx1ZSwgMSk7XG4gICAgfVxuXG4gICAgLy8gc3VwcG9ydHMgb25seSAyLjAtc3R5bGUgc3VidHJhY3QoMSwgJ3MnKSBvciBzdWJ0cmFjdChkdXJhdGlvbilcbiAgICBmdW5jdGlvbiBzdWJ0cmFjdCQxKGlucHV0LCB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gYWRkU3VidHJhY3QkMSh0aGlzLCBpbnB1dCwgdmFsdWUsIC0xKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhYnNDZWlsKG51bWJlcikge1xuICAgICAgICBpZiAobnVtYmVyIDwgMCkge1xuICAgICAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IobnVtYmVyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBNYXRoLmNlaWwobnVtYmVyKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGJ1YmJsZSgpIHtcbiAgICAgICAgdmFyIG1pbGxpc2Vjb25kcyA9IHRoaXMuX21pbGxpc2Vjb25kcyxcbiAgICAgICAgICAgIGRheXMgPSB0aGlzLl9kYXlzLFxuICAgICAgICAgICAgbW9udGhzID0gdGhpcy5fbW9udGhzLFxuICAgICAgICAgICAgZGF0YSA9IHRoaXMuX2RhdGEsXG4gICAgICAgICAgICBzZWNvbmRzLFxuICAgICAgICAgICAgbWludXRlcyxcbiAgICAgICAgICAgIGhvdXJzLFxuICAgICAgICAgICAgeWVhcnMsXG4gICAgICAgICAgICBtb250aHNGcm9tRGF5cztcblxuICAgICAgICAvLyBpZiB3ZSBoYXZlIGEgbWl4IG9mIHBvc2l0aXZlIGFuZCBuZWdhdGl2ZSB2YWx1ZXMsIGJ1YmJsZSBkb3duIGZpcnN0XG4gICAgICAgIC8vIGNoZWNrOiBodHRwczovL2dpdGh1Yi5jb20vbW9tZW50L21vbWVudC9pc3N1ZXMvMjE2NlxuICAgICAgICBpZiAoXG4gICAgICAgICAgICAhKFxuICAgICAgICAgICAgICAgIChtaWxsaXNlY29uZHMgPj0gMCAmJiBkYXlzID49IDAgJiYgbW9udGhzID49IDApIHx8XG4gICAgICAgICAgICAgICAgKG1pbGxpc2Vjb25kcyA8PSAwICYmIGRheXMgPD0gMCAmJiBtb250aHMgPD0gMClcbiAgICAgICAgICAgIClcbiAgICAgICAgKSB7XG4gICAgICAgICAgICBtaWxsaXNlY29uZHMgKz0gYWJzQ2VpbChtb250aHNUb0RheXMobW9udGhzKSArIGRheXMpICogODY0ZTU7XG4gICAgICAgICAgICBkYXlzID0gMDtcbiAgICAgICAgICAgIG1vbnRocyA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUaGUgZm9sbG93aW5nIGNvZGUgYnViYmxlcyB1cCB2YWx1ZXMsIHNlZSB0aGUgdGVzdHMgZm9yXG4gICAgICAgIC8vIGV4YW1wbGVzIG9mIHdoYXQgdGhhdCBtZWFucy5cbiAgICAgICAgZGF0YS5taWxsaXNlY29uZHMgPSBtaWxsaXNlY29uZHMgJSAxMDAwO1xuXG4gICAgICAgIHNlY29uZHMgPSBhYnNGbG9vcihtaWxsaXNlY29uZHMgLyAxMDAwKTtcbiAgICAgICAgZGF0YS5zZWNvbmRzID0gc2Vjb25kcyAlIDYwO1xuXG4gICAgICAgIG1pbnV0ZXMgPSBhYnNGbG9vcihzZWNvbmRzIC8gNjApO1xuICAgICAgICBkYXRhLm1pbnV0ZXMgPSBtaW51dGVzICUgNjA7XG5cbiAgICAgICAgaG91cnMgPSBhYnNGbG9vcihtaW51dGVzIC8gNjApO1xuICAgICAgICBkYXRhLmhvdXJzID0gaG91cnMgJSAyNDtcblxuICAgICAgICBkYXlzICs9IGFic0Zsb29yKGhvdXJzIC8gMjQpO1xuXG4gICAgICAgIC8vIGNvbnZlcnQgZGF5cyB0byBtb250aHNcbiAgICAgICAgbW9udGhzRnJvbURheXMgPSBhYnNGbG9vcihkYXlzVG9Nb250aHMoZGF5cykpO1xuICAgICAgICBtb250aHMgKz0gbW9udGhzRnJvbURheXM7XG4gICAgICAgIGRheXMgLT0gYWJzQ2VpbChtb250aHNUb0RheXMobW9udGhzRnJvbURheXMpKTtcblxuICAgICAgICAvLyAxMiBtb250aHMgLT4gMSB5ZWFyXG4gICAgICAgIHllYXJzID0gYWJzRmxvb3IobW9udGhzIC8gMTIpO1xuICAgICAgICBtb250aHMgJT0gMTI7XG5cbiAgICAgICAgZGF0YS5kYXlzID0gZGF5cztcbiAgICAgICAgZGF0YS5tb250aHMgPSBtb250aHM7XG4gICAgICAgIGRhdGEueWVhcnMgPSB5ZWFycztcblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkYXlzVG9Nb250aHMoZGF5cykge1xuICAgICAgICAvLyA0MDAgeWVhcnMgaGF2ZSAxNDYwOTcgZGF5cyAodGFraW5nIGludG8gYWNjb3VudCBsZWFwIHllYXIgcnVsZXMpXG4gICAgICAgIC8vIDQwMCB5ZWFycyBoYXZlIDEyIG1vbnRocyA9PT0gNDgwMFxuICAgICAgICByZXR1cm4gKGRheXMgKiA0ODAwKSAvIDE0NjA5NztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtb250aHNUb0RheXMobW9udGhzKSB7XG4gICAgICAgIC8vIHRoZSByZXZlcnNlIG9mIGRheXNUb01vbnRoc1xuICAgICAgICByZXR1cm4gKG1vbnRocyAqIDE0NjA5NykgLyA0ODAwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFzKHVuaXRzKSB7XG4gICAgICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBOYU47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGRheXMsXG4gICAgICAgICAgICBtb250aHMsXG4gICAgICAgICAgICBtaWxsaXNlY29uZHMgPSB0aGlzLl9taWxsaXNlY29uZHM7XG5cbiAgICAgICAgdW5pdHMgPSBub3JtYWxpemVVbml0cyh1bml0cyk7XG5cbiAgICAgICAgaWYgKHVuaXRzID09PSAnbW9udGgnIHx8IHVuaXRzID09PSAncXVhcnRlcicgfHwgdW5pdHMgPT09ICd5ZWFyJykge1xuICAgICAgICAgICAgZGF5cyA9IHRoaXMuX2RheXMgKyBtaWxsaXNlY29uZHMgLyA4NjRlNTtcbiAgICAgICAgICAgIG1vbnRocyA9IHRoaXMuX21vbnRocyArIGRheXNUb01vbnRocyhkYXlzKTtcbiAgICAgICAgICAgIHN3aXRjaCAodW5pdHMpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdtb250aCc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBtb250aHM7XG4gICAgICAgICAgICAgICAgY2FzZSAncXVhcnRlcic6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBtb250aHMgLyAzO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3llYXInOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbW9udGhzIC8gMTI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBoYW5kbGUgbWlsbGlzZWNvbmRzIHNlcGFyYXRlbHkgYmVjYXVzZSBvZiBmbG9hdGluZyBwb2ludCBtYXRoIGVycm9ycyAoaXNzdWUgIzE4NjcpXG4gICAgICAgICAgICBkYXlzID0gdGhpcy5fZGF5cyArIE1hdGgucm91bmQobW9udGhzVG9EYXlzKHRoaXMuX21vbnRocykpO1xuICAgICAgICAgICAgc3dpdGNoICh1bml0cykge1xuICAgICAgICAgICAgICAgIGNhc2UgJ3dlZWsnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGF5cyAvIDcgKyBtaWxsaXNlY29uZHMgLyA2MDQ4ZTU7XG4gICAgICAgICAgICAgICAgY2FzZSAnZGF5JzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRheXMgKyBtaWxsaXNlY29uZHMgLyA4NjRlNTtcbiAgICAgICAgICAgICAgICBjYXNlICdob3VyJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRheXMgKiAyNCArIG1pbGxpc2Vjb25kcyAvIDM2ZTU7XG4gICAgICAgICAgICAgICAgY2FzZSAnbWludXRlJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRheXMgKiAxNDQwICsgbWlsbGlzZWNvbmRzIC8gNmU0O1xuICAgICAgICAgICAgICAgIGNhc2UgJ3NlY29uZCc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkYXlzICogODY0MDAgKyBtaWxsaXNlY29uZHMgLyAxMDAwO1xuICAgICAgICAgICAgICAgIC8vIE1hdGguZmxvb3IgcHJldmVudHMgZmxvYXRpbmcgcG9pbnQgbWF0aCBlcnJvcnMgaGVyZVxuICAgICAgICAgICAgICAgIGNhc2UgJ21pbGxpc2Vjb25kJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IoZGF5cyAqIDg2NGU1KSArIG1pbGxpc2Vjb25kcztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gdW5pdCAnICsgdW5pdHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWFrZUFzKGFsaWFzKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5hcyhhbGlhcyk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgdmFyIGFzTWlsbGlzZWNvbmRzID0gbWFrZUFzKCdtcycpLFxuICAgICAgICBhc1NlY29uZHMgPSBtYWtlQXMoJ3MnKSxcbiAgICAgICAgYXNNaW51dGVzID0gbWFrZUFzKCdtJyksXG4gICAgICAgIGFzSG91cnMgPSBtYWtlQXMoJ2gnKSxcbiAgICAgICAgYXNEYXlzID0gbWFrZUFzKCdkJyksXG4gICAgICAgIGFzV2Vla3MgPSBtYWtlQXMoJ3cnKSxcbiAgICAgICAgYXNNb250aHMgPSBtYWtlQXMoJ00nKSxcbiAgICAgICAgYXNRdWFydGVycyA9IG1ha2VBcygnUScpLFxuICAgICAgICBhc1llYXJzID0gbWFrZUFzKCd5JyksXG4gICAgICAgIHZhbHVlT2YkMSA9IGFzTWlsbGlzZWNvbmRzO1xuXG4gICAgZnVuY3Rpb24gY2xvbmUkMSgpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUR1cmF0aW9uKHRoaXMpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldCQyKHVuaXRzKSB7XG4gICAgICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpO1xuICAgICAgICByZXR1cm4gdGhpcy5pc1ZhbGlkKCkgPyB0aGlzW3VuaXRzICsgJ3MnXSgpIDogTmFOO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1ha2VHZXR0ZXIobmFtZSkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaXNWYWxpZCgpID8gdGhpcy5fZGF0YVtuYW1lXSA6IE5hTjtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICB2YXIgbWlsbGlzZWNvbmRzID0gbWFrZUdldHRlcignbWlsbGlzZWNvbmRzJyksXG4gICAgICAgIHNlY29uZHMgPSBtYWtlR2V0dGVyKCdzZWNvbmRzJyksXG4gICAgICAgIG1pbnV0ZXMgPSBtYWtlR2V0dGVyKCdtaW51dGVzJyksXG4gICAgICAgIGhvdXJzID0gbWFrZUdldHRlcignaG91cnMnKSxcbiAgICAgICAgZGF5cyA9IG1ha2VHZXR0ZXIoJ2RheXMnKSxcbiAgICAgICAgbW9udGhzID0gbWFrZUdldHRlcignbW9udGhzJyksXG4gICAgICAgIHllYXJzID0gbWFrZUdldHRlcigneWVhcnMnKTtcblxuICAgIGZ1bmN0aW9uIHdlZWtzKCkge1xuICAgICAgICByZXR1cm4gYWJzRmxvb3IodGhpcy5kYXlzKCkgLyA3KTtcbiAgICB9XG5cbiAgICB2YXIgcm91bmQgPSBNYXRoLnJvdW5kLFxuICAgICAgICB0aHJlc2hvbGRzID0ge1xuICAgICAgICAgICAgc3M6IDQ0LCAvLyBhIGZldyBzZWNvbmRzIHRvIHNlY29uZHNcbiAgICAgICAgICAgIHM6IDQ1LCAvLyBzZWNvbmRzIHRvIG1pbnV0ZVxuICAgICAgICAgICAgbTogNDUsIC8vIG1pbnV0ZXMgdG8gaG91clxuICAgICAgICAgICAgaDogMjIsIC8vIGhvdXJzIHRvIGRheVxuICAgICAgICAgICAgZDogMjYsIC8vIGRheXMgdG8gbW9udGgvd2Vla1xuICAgICAgICAgICAgdzogbnVsbCwgLy8gd2Vla3MgdG8gbW9udGhcbiAgICAgICAgICAgIE06IDExLCAvLyBtb250aHMgdG8geWVhclxuICAgICAgICB9O1xuXG4gICAgLy8gaGVscGVyIGZ1bmN0aW9uIGZvciBtb21lbnQuZm4uZnJvbSwgbW9tZW50LmZuLmZyb21Ob3csIGFuZCBtb21lbnQuZHVyYXRpb24uZm4uaHVtYW5pemVcbiAgICBmdW5jdGlvbiBzdWJzdGl0dXRlVGltZUFnbyhzdHJpbmcsIG51bWJlciwgd2l0aG91dFN1ZmZpeCwgaXNGdXR1cmUsIGxvY2FsZSkge1xuICAgICAgICByZXR1cm4gbG9jYWxlLnJlbGF0aXZlVGltZShudW1iZXIgfHwgMSwgISF3aXRob3V0U3VmZml4LCBzdHJpbmcsIGlzRnV0dXJlKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZWxhdGl2ZVRpbWUkMShwb3NOZWdEdXJhdGlvbiwgd2l0aG91dFN1ZmZpeCwgdGhyZXNob2xkcywgbG9jYWxlKSB7XG4gICAgICAgIHZhciBkdXJhdGlvbiA9IGNyZWF0ZUR1cmF0aW9uKHBvc05lZ0R1cmF0aW9uKS5hYnMoKSxcbiAgICAgICAgICAgIHNlY29uZHMgPSByb3VuZChkdXJhdGlvbi5hcygncycpKSxcbiAgICAgICAgICAgIG1pbnV0ZXMgPSByb3VuZChkdXJhdGlvbi5hcygnbScpKSxcbiAgICAgICAgICAgIGhvdXJzID0gcm91bmQoZHVyYXRpb24uYXMoJ2gnKSksXG4gICAgICAgICAgICBkYXlzID0gcm91bmQoZHVyYXRpb24uYXMoJ2QnKSksXG4gICAgICAgICAgICBtb250aHMgPSByb3VuZChkdXJhdGlvbi5hcygnTScpKSxcbiAgICAgICAgICAgIHdlZWtzID0gcm91bmQoZHVyYXRpb24uYXMoJ3cnKSksXG4gICAgICAgICAgICB5ZWFycyA9IHJvdW5kKGR1cmF0aW9uLmFzKCd5JykpLFxuICAgICAgICAgICAgYSA9XG4gICAgICAgICAgICAgICAgKHNlY29uZHMgPD0gdGhyZXNob2xkcy5zcyAmJiBbJ3MnLCBzZWNvbmRzXSkgfHxcbiAgICAgICAgICAgICAgICAoc2Vjb25kcyA8IHRocmVzaG9sZHMucyAmJiBbJ3NzJywgc2Vjb25kc10pIHx8XG4gICAgICAgICAgICAgICAgKG1pbnV0ZXMgPD0gMSAmJiBbJ20nXSkgfHxcbiAgICAgICAgICAgICAgICAobWludXRlcyA8IHRocmVzaG9sZHMubSAmJiBbJ21tJywgbWludXRlc10pIHx8XG4gICAgICAgICAgICAgICAgKGhvdXJzIDw9IDEgJiYgWydoJ10pIHx8XG4gICAgICAgICAgICAgICAgKGhvdXJzIDwgdGhyZXNob2xkcy5oICYmIFsnaGgnLCBob3Vyc10pIHx8XG4gICAgICAgICAgICAgICAgKGRheXMgPD0gMSAmJiBbJ2QnXSkgfHxcbiAgICAgICAgICAgICAgICAoZGF5cyA8IHRocmVzaG9sZHMuZCAmJiBbJ2RkJywgZGF5c10pO1xuXG4gICAgICAgIGlmICh0aHJlc2hvbGRzLncgIT0gbnVsbCkge1xuICAgICAgICAgICAgYSA9XG4gICAgICAgICAgICAgICAgYSB8fFxuICAgICAgICAgICAgICAgICh3ZWVrcyA8PSAxICYmIFsndyddKSB8fFxuICAgICAgICAgICAgICAgICh3ZWVrcyA8IHRocmVzaG9sZHMudyAmJiBbJ3d3Jywgd2Vla3NdKTtcbiAgICAgICAgfVxuICAgICAgICBhID0gYSB8fFxuICAgICAgICAgICAgKG1vbnRocyA8PSAxICYmIFsnTSddKSB8fFxuICAgICAgICAgICAgKG1vbnRocyA8IHRocmVzaG9sZHMuTSAmJiBbJ01NJywgbW9udGhzXSkgfHxcbiAgICAgICAgICAgICh5ZWFycyA8PSAxICYmIFsneSddKSB8fCBbJ3l5JywgeWVhcnNdO1xuXG4gICAgICAgIGFbMl0gPSB3aXRob3V0U3VmZml4O1xuICAgICAgICBhWzNdID0gK3Bvc05lZ0R1cmF0aW9uID4gMDtcbiAgICAgICAgYVs0XSA9IGxvY2FsZTtcbiAgICAgICAgcmV0dXJuIHN1YnN0aXR1dGVUaW1lQWdvLmFwcGx5KG51bGwsIGEpO1xuICAgIH1cblxuICAgIC8vIFRoaXMgZnVuY3Rpb24gYWxsb3dzIHlvdSB0byBzZXQgdGhlIHJvdW5kaW5nIGZ1bmN0aW9uIGZvciByZWxhdGl2ZSB0aW1lIHN0cmluZ3NcbiAgICBmdW5jdGlvbiBnZXRTZXRSZWxhdGl2ZVRpbWVSb3VuZGluZyhyb3VuZGluZ0Z1bmN0aW9uKSB7XG4gICAgICAgIGlmIChyb3VuZGluZ0Z1bmN0aW9uID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiByb3VuZDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIHJvdW5kaW5nRnVuY3Rpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHJvdW5kID0gcm91bmRpbmdGdW5jdGlvbjtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyBUaGlzIGZ1bmN0aW9uIGFsbG93cyB5b3UgdG8gc2V0IGEgdGhyZXNob2xkIGZvciByZWxhdGl2ZSB0aW1lIHN0cmluZ3NcbiAgICBmdW5jdGlvbiBnZXRTZXRSZWxhdGl2ZVRpbWVUaHJlc2hvbGQodGhyZXNob2xkLCBsaW1pdCkge1xuICAgICAgICBpZiAodGhyZXNob2xkc1t0aHJlc2hvbGRdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobGltaXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRocmVzaG9sZHNbdGhyZXNob2xkXTtcbiAgICAgICAgfVxuICAgICAgICB0aHJlc2hvbGRzW3RocmVzaG9sZF0gPSBsaW1pdDtcbiAgICAgICAgaWYgKHRocmVzaG9sZCA9PT0gJ3MnKSB7XG4gICAgICAgICAgICB0aHJlc2hvbGRzLnNzID0gbGltaXQgLSAxO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGh1bWFuaXplKGFyZ1dpdGhTdWZmaXgsIGFyZ1RocmVzaG9sZHMpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLmludmFsaWREYXRlKCk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgd2l0aFN1ZmZpeCA9IGZhbHNlLFxuICAgICAgICAgICAgdGggPSB0aHJlc2hvbGRzLFxuICAgICAgICAgICAgbG9jYWxlLFxuICAgICAgICAgICAgb3V0cHV0O1xuXG4gICAgICAgIGlmICh0eXBlb2YgYXJnV2l0aFN1ZmZpeCA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIGFyZ1RocmVzaG9sZHMgPSBhcmdXaXRoU3VmZml4O1xuICAgICAgICAgICAgYXJnV2l0aFN1ZmZpeCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgYXJnV2l0aFN1ZmZpeCA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgICB3aXRoU3VmZml4ID0gYXJnV2l0aFN1ZmZpeDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIGFyZ1RocmVzaG9sZHMgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICB0aCA9IE9iamVjdC5hc3NpZ24oe30sIHRocmVzaG9sZHMsIGFyZ1RocmVzaG9sZHMpO1xuICAgICAgICAgICAgaWYgKGFyZ1RocmVzaG9sZHMucyAhPSBudWxsICYmIGFyZ1RocmVzaG9sZHMuc3MgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoLnNzID0gYXJnVGhyZXNob2xkcy5zIC0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGxvY2FsZSA9IHRoaXMubG9jYWxlRGF0YSgpO1xuICAgICAgICBvdXRwdXQgPSByZWxhdGl2ZVRpbWUkMSh0aGlzLCAhd2l0aFN1ZmZpeCwgdGgsIGxvY2FsZSk7XG5cbiAgICAgICAgaWYgKHdpdGhTdWZmaXgpIHtcbiAgICAgICAgICAgIG91dHB1dCA9IGxvY2FsZS5wYXN0RnV0dXJlKCt0aGlzLCBvdXRwdXQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGxvY2FsZS5wb3N0Zm9ybWF0KG91dHB1dCk7XG4gICAgfVxuXG4gICAgdmFyIGFicyQxID0gTWF0aC5hYnM7XG5cbiAgICBmdW5jdGlvbiBzaWduKHgpIHtcbiAgICAgICAgcmV0dXJuICh4ID4gMCkgLSAoeCA8IDApIHx8ICt4O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRvSVNPU3RyaW5nJDEoKSB7XG4gICAgICAgIC8vIGZvciBJU08gc3RyaW5ncyB3ZSBkbyBub3QgdXNlIHRoZSBub3JtYWwgYnViYmxpbmcgcnVsZXM6XG4gICAgICAgIC8vICAqIG1pbGxpc2Vjb25kcyBidWJibGUgdXAgdW50aWwgdGhleSBiZWNvbWUgaG91cnNcbiAgICAgICAgLy8gICogZGF5cyBkbyBub3QgYnViYmxlIGF0IGFsbFxuICAgICAgICAvLyAgKiBtb250aHMgYnViYmxlIHVwIHVudGlsIHRoZXkgYmVjb21lIHllYXJzXG4gICAgICAgIC8vIFRoaXMgaXMgYmVjYXVzZSB0aGVyZSBpcyBubyBjb250ZXh0LWZyZWUgY29udmVyc2lvbiBiZXR3ZWVuIGhvdXJzIGFuZCBkYXlzXG4gICAgICAgIC8vICh0aGluayBvZiBjbG9jayBjaGFuZ2VzKVxuICAgICAgICAvLyBhbmQgYWxzbyBub3QgYmV0d2VlbiBkYXlzIGFuZCBtb250aHMgKDI4LTMxIGRheXMgcGVyIG1vbnRoKVxuICAgICAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkuaW52YWxpZERhdGUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBzZWNvbmRzID0gYWJzJDEodGhpcy5fbWlsbGlzZWNvbmRzKSAvIDEwMDAsXG4gICAgICAgICAgICBkYXlzID0gYWJzJDEodGhpcy5fZGF5cyksXG4gICAgICAgICAgICBtb250aHMgPSBhYnMkMSh0aGlzLl9tb250aHMpLFxuICAgICAgICAgICAgbWludXRlcyxcbiAgICAgICAgICAgIGhvdXJzLFxuICAgICAgICAgICAgeWVhcnMsXG4gICAgICAgICAgICBzLFxuICAgICAgICAgICAgdG90YWwgPSB0aGlzLmFzU2Vjb25kcygpLFxuICAgICAgICAgICAgdG90YWxTaWduLFxuICAgICAgICAgICAgeW1TaWduLFxuICAgICAgICAgICAgZGF5c1NpZ24sXG4gICAgICAgICAgICBobXNTaWduO1xuXG4gICAgICAgIGlmICghdG90YWwpIHtcbiAgICAgICAgICAgIC8vIHRoaXMgaXMgdGhlIHNhbWUgYXMgQyMncyAoTm9kYSkgYW5kIHB5dGhvbiAoaXNvZGF0ZSkuLi5cbiAgICAgICAgICAgIC8vIGJ1dCBub3Qgb3RoZXIgSlMgKGdvb2cuZGF0ZSlcbiAgICAgICAgICAgIHJldHVybiAnUDBEJztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIDM2MDAgc2Vjb25kcyAtPiA2MCBtaW51dGVzIC0+IDEgaG91clxuICAgICAgICBtaW51dGVzID0gYWJzRmxvb3Ioc2Vjb25kcyAvIDYwKTtcbiAgICAgICAgaG91cnMgPSBhYnNGbG9vcihtaW51dGVzIC8gNjApO1xuICAgICAgICBzZWNvbmRzICU9IDYwO1xuICAgICAgICBtaW51dGVzICU9IDYwO1xuXG4gICAgICAgIC8vIDEyIG1vbnRocyAtPiAxIHllYXJcbiAgICAgICAgeWVhcnMgPSBhYnNGbG9vcihtb250aHMgLyAxMik7XG4gICAgICAgIG1vbnRocyAlPSAxMjtcblxuICAgICAgICAvLyBpbnNwaXJlZCBieSBodHRwczovL2dpdGh1Yi5jb20vZG9yZGlsbGUvbW9tZW50LWlzb2R1cmF0aW9uL2Jsb2IvbWFzdGVyL21vbWVudC5pc29kdXJhdGlvbi5qc1xuICAgICAgICBzID0gc2Vjb25kcyA/IHNlY29uZHMudG9GaXhlZCgzKS5yZXBsYWNlKC9cXC4/MCskLywgJycpIDogJyc7XG5cbiAgICAgICAgdG90YWxTaWduID0gdG90YWwgPCAwID8gJy0nIDogJyc7XG4gICAgICAgIHltU2lnbiA9IHNpZ24odGhpcy5fbW9udGhzKSAhPT0gc2lnbih0b3RhbCkgPyAnLScgOiAnJztcbiAgICAgICAgZGF5c1NpZ24gPSBzaWduKHRoaXMuX2RheXMpICE9PSBzaWduKHRvdGFsKSA/ICctJyA6ICcnO1xuICAgICAgICBobXNTaWduID0gc2lnbih0aGlzLl9taWxsaXNlY29uZHMpICE9PSBzaWduKHRvdGFsKSA/ICctJyA6ICcnO1xuXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICB0b3RhbFNpZ24gK1xuICAgICAgICAgICAgJ1AnICtcbiAgICAgICAgICAgICh5ZWFycyA/IHltU2lnbiArIHllYXJzICsgJ1knIDogJycpICtcbiAgICAgICAgICAgIChtb250aHMgPyB5bVNpZ24gKyBtb250aHMgKyAnTScgOiAnJykgK1xuICAgICAgICAgICAgKGRheXMgPyBkYXlzU2lnbiArIGRheXMgKyAnRCcgOiAnJykgK1xuICAgICAgICAgICAgKGhvdXJzIHx8IG1pbnV0ZXMgfHwgc2Vjb25kcyA/ICdUJyA6ICcnKSArXG4gICAgICAgICAgICAoaG91cnMgPyBobXNTaWduICsgaG91cnMgKyAnSCcgOiAnJykgK1xuICAgICAgICAgICAgKG1pbnV0ZXMgPyBobXNTaWduICsgbWludXRlcyArICdNJyA6ICcnKSArXG4gICAgICAgICAgICAoc2Vjb25kcyA/IGhtc1NpZ24gKyBzICsgJ1MnIDogJycpXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgdmFyIHByb3RvJDIgPSBEdXJhdGlvbi5wcm90b3R5cGU7XG5cbiAgICBwcm90byQyLmlzVmFsaWQgPSBpc1ZhbGlkJDE7XG4gICAgcHJvdG8kMi5hYnMgPSBhYnM7XG4gICAgcHJvdG8kMi5hZGQgPSBhZGQkMTtcbiAgICBwcm90byQyLnN1YnRyYWN0ID0gc3VidHJhY3QkMTtcbiAgICBwcm90byQyLmFzID0gYXM7XG4gICAgcHJvdG8kMi5hc01pbGxpc2Vjb25kcyA9IGFzTWlsbGlzZWNvbmRzO1xuICAgIHByb3RvJDIuYXNTZWNvbmRzID0gYXNTZWNvbmRzO1xuICAgIHByb3RvJDIuYXNNaW51dGVzID0gYXNNaW51dGVzO1xuICAgIHByb3RvJDIuYXNIb3VycyA9IGFzSG91cnM7XG4gICAgcHJvdG8kMi5hc0RheXMgPSBhc0RheXM7XG4gICAgcHJvdG8kMi5hc1dlZWtzID0gYXNXZWVrcztcbiAgICBwcm90byQyLmFzTW9udGhzID0gYXNNb250aHM7XG4gICAgcHJvdG8kMi5hc1F1YXJ0ZXJzID0gYXNRdWFydGVycztcbiAgICBwcm90byQyLmFzWWVhcnMgPSBhc1llYXJzO1xuICAgIHByb3RvJDIudmFsdWVPZiA9IHZhbHVlT2YkMTtcbiAgICBwcm90byQyLl9idWJibGUgPSBidWJibGU7XG4gICAgcHJvdG8kMi5jbG9uZSA9IGNsb25lJDE7XG4gICAgcHJvdG8kMi5nZXQgPSBnZXQkMjtcbiAgICBwcm90byQyLm1pbGxpc2Vjb25kcyA9IG1pbGxpc2Vjb25kcztcbiAgICBwcm90byQyLnNlY29uZHMgPSBzZWNvbmRzO1xuICAgIHByb3RvJDIubWludXRlcyA9IG1pbnV0ZXM7XG4gICAgcHJvdG8kMi5ob3VycyA9IGhvdXJzO1xuICAgIHByb3RvJDIuZGF5cyA9IGRheXM7XG4gICAgcHJvdG8kMi53ZWVrcyA9IHdlZWtzO1xuICAgIHByb3RvJDIubW9udGhzID0gbW9udGhzO1xuICAgIHByb3RvJDIueWVhcnMgPSB5ZWFycztcbiAgICBwcm90byQyLmh1bWFuaXplID0gaHVtYW5pemU7XG4gICAgcHJvdG8kMi50b0lTT1N0cmluZyA9IHRvSVNPU3RyaW5nJDE7XG4gICAgcHJvdG8kMi50b1N0cmluZyA9IHRvSVNPU3RyaW5nJDE7XG4gICAgcHJvdG8kMi50b0pTT04gPSB0b0lTT1N0cmluZyQxO1xuICAgIHByb3RvJDIubG9jYWxlID0gbG9jYWxlO1xuICAgIHByb3RvJDIubG9jYWxlRGF0YSA9IGxvY2FsZURhdGE7XG5cbiAgICBwcm90byQyLnRvSXNvU3RyaW5nID0gZGVwcmVjYXRlKFxuICAgICAgICAndG9Jc29TdHJpbmcoKSBpcyBkZXByZWNhdGVkLiBQbGVhc2UgdXNlIHRvSVNPU3RyaW5nKCkgaW5zdGVhZCAobm90aWNlIHRoZSBjYXBpdGFscyknLFxuICAgICAgICB0b0lTT1N0cmluZyQxXG4gICAgKTtcbiAgICBwcm90byQyLmxhbmcgPSBsYW5nO1xuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ1gnLCAwLCAwLCAndW5peCcpO1xuICAgIGFkZEZvcm1hdFRva2VuKCd4JywgMCwgMCwgJ3ZhbHVlT2YnKTtcblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ3gnLCBtYXRjaFNpZ25lZCk7XG4gICAgYWRkUmVnZXhUb2tlbignWCcsIG1hdGNoVGltZXN0YW1wKTtcbiAgICBhZGRQYXJzZVRva2VuKCdYJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgICAgIGNvbmZpZy5fZCA9IG5ldyBEYXRlKHBhcnNlRmxvYXQoaW5wdXQpICogMTAwMCk7XG4gICAgfSk7XG4gICAgYWRkUGFyc2VUb2tlbigneCcsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgICAgICBjb25maWcuX2QgPSBuZXcgRGF0ZSh0b0ludChpbnB1dCkpO1xuICAgIH0pO1xuXG4gICAgLy8hIG1vbWVudC5qc1xuXG4gICAgaG9va3MudmVyc2lvbiA9ICcyLjMwLjEnO1xuXG4gICAgc2V0SG9va0NhbGxiYWNrKGNyZWF0ZUxvY2FsKTtcblxuICAgIGhvb2tzLmZuID0gcHJvdG87XG4gICAgaG9va3MubWluID0gbWluO1xuICAgIGhvb2tzLm1heCA9IG1heDtcbiAgICBob29rcy5ub3cgPSBub3c7XG4gICAgaG9va3MudXRjID0gY3JlYXRlVVRDO1xuICAgIGhvb2tzLnVuaXggPSBjcmVhdGVVbml4O1xuICAgIGhvb2tzLm1vbnRocyA9IGxpc3RNb250aHM7XG4gICAgaG9va3MuaXNEYXRlID0gaXNEYXRlO1xuICAgIGhvb2tzLmxvY2FsZSA9IGdldFNldEdsb2JhbExvY2FsZTtcbiAgICBob29rcy5pbnZhbGlkID0gY3JlYXRlSW52YWxpZDtcbiAgICBob29rcy5kdXJhdGlvbiA9IGNyZWF0ZUR1cmF0aW9uO1xuICAgIGhvb2tzLmlzTW9tZW50ID0gaXNNb21lbnQ7XG4gICAgaG9va3Mud2Vla2RheXMgPSBsaXN0V2Vla2RheXM7XG4gICAgaG9va3MucGFyc2Vab25lID0gY3JlYXRlSW5ab25lO1xuICAgIGhvb2tzLmxvY2FsZURhdGEgPSBnZXRMb2NhbGU7XG4gICAgaG9va3MuaXNEdXJhdGlvbiA9IGlzRHVyYXRpb247XG4gICAgaG9va3MubW9udGhzU2hvcnQgPSBsaXN0TW9udGhzU2hvcnQ7XG4gICAgaG9va3Mud2Vla2RheXNNaW4gPSBsaXN0V2Vla2RheXNNaW47XG4gICAgaG9va3MuZGVmaW5lTG9jYWxlID0gZGVmaW5lTG9jYWxlO1xuICAgIGhvb2tzLnVwZGF0ZUxvY2FsZSA9IHVwZGF0ZUxvY2FsZTtcbiAgICBob29rcy5sb2NhbGVzID0gbGlzdExvY2FsZXM7XG4gICAgaG9va3Mud2Vla2RheXNTaG9ydCA9IGxpc3RXZWVrZGF5c1Nob3J0O1xuICAgIGhvb2tzLm5vcm1hbGl6ZVVuaXRzID0gbm9ybWFsaXplVW5pdHM7XG4gICAgaG9va3MucmVsYXRpdmVUaW1lUm91bmRpbmcgPSBnZXRTZXRSZWxhdGl2ZVRpbWVSb3VuZGluZztcbiAgICBob29rcy5yZWxhdGl2ZVRpbWVUaHJlc2hvbGQgPSBnZXRTZXRSZWxhdGl2ZVRpbWVUaHJlc2hvbGQ7XG4gICAgaG9va3MuY2FsZW5kYXJGb3JtYXQgPSBnZXRDYWxlbmRhckZvcm1hdDtcbiAgICBob29rcy5wcm90b3R5cGUgPSBwcm90bztcblxuICAgIC8vIGN1cnJlbnRseSBIVE1MNSBpbnB1dCB0eXBlIG9ubHkgc3VwcG9ydHMgMjQtaG91ciBmb3JtYXRzXG4gICAgaG9va3MuSFRNTDVfRk1UID0ge1xuICAgICAgICBEQVRFVElNRV9MT0NBTDogJ1lZWVktTU0tRERUSEg6bW0nLCAvLyA8aW5wdXQgdHlwZT1cImRhdGV0aW1lLWxvY2FsXCIgLz5cbiAgICAgICAgREFURVRJTUVfTE9DQUxfU0VDT05EUzogJ1lZWVktTU0tRERUSEg6bW06c3MnLCAvLyA8aW5wdXQgdHlwZT1cImRhdGV0aW1lLWxvY2FsXCIgc3RlcD1cIjFcIiAvPlxuICAgICAgICBEQVRFVElNRV9MT0NBTF9NUzogJ1lZWVktTU0tRERUSEg6bW06c3MuU1NTJywgLy8gPGlucHV0IHR5cGU9XCJkYXRldGltZS1sb2NhbFwiIHN0ZXA9XCIwLjAwMVwiIC8+XG4gICAgICAgIERBVEU6ICdZWVlZLU1NLUREJywgLy8gPGlucHV0IHR5cGU9XCJkYXRlXCIgLz5cbiAgICAgICAgVElNRTogJ0hIOm1tJywgLy8gPGlucHV0IHR5cGU9XCJ0aW1lXCIgLz5cbiAgICAgICAgVElNRV9TRUNPTkRTOiAnSEg6bW06c3MnLCAvLyA8aW5wdXQgdHlwZT1cInRpbWVcIiBzdGVwPVwiMVwiIC8+XG4gICAgICAgIFRJTUVfTVM6ICdISDptbTpzcy5TU1MnLCAvLyA8aW5wdXQgdHlwZT1cInRpbWVcIiBzdGVwPVwiMC4wMDFcIiAvPlxuICAgICAgICBXRUVLOiAnR0dHRy1bV11XVycsIC8vIDxpbnB1dCB0eXBlPVwid2Vla1wiIC8+XG4gICAgICAgIE1PTlRIOiAnWVlZWS1NTScsIC8vIDxpbnB1dCB0eXBlPVwibW9udGhcIiAvPlxuICAgIH07XG5cbiAgICByZXR1cm4gaG9va3M7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogUnVzc2lhbiBbcnVdXG4vLyEgYXV0aG9yIDogVmlrdG9ybWluYXRvciA6IGh0dHBzOi8vZ2l0aHViLmNvbS9WaWt0b3JtaW5hdG9yXG4vLyEgYXV0aG9yIDogTWVuZWxpb24gRWxlbnPDumxlIDogaHR0cHM6Ly9naXRodWIuY29tL09pcmVcbi8vISBhdXRob3IgOiDQmtC+0YDQtdC90LHQtdGA0LMg0JzQsNGA0LogOiBodHRwczovL2dpdGh1Yi5jb20vc29ja2V0cGFpclxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgZnVuY3Rpb24gcGx1cmFsKHdvcmQsIG51bSkge1xuICAgICAgICB2YXIgZm9ybXMgPSB3b3JkLnNwbGl0KCdfJyk7XG4gICAgICAgIHJldHVybiBudW0gJSAxMCA9PT0gMSAmJiBudW0gJSAxMDAgIT09IDExXG4gICAgICAgICAgICA/IGZvcm1zWzBdXG4gICAgICAgICAgICA6IG51bSAlIDEwID49IDIgJiYgbnVtICUgMTAgPD0gNCAmJiAobnVtICUgMTAwIDwgMTAgfHwgbnVtICUgMTAwID49IDIwKVxuICAgICAgICAgICAgICA/IGZvcm1zWzFdXG4gICAgICAgICAgICAgIDogZm9ybXNbMl07XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJlbGF0aXZlVGltZVdpdGhQbHVyYWwobnVtYmVyLCB3aXRob3V0U3VmZml4LCBrZXkpIHtcbiAgICAgICAgdmFyIGZvcm1hdCA9IHtcbiAgICAgICAgICAgIHNzOiB3aXRob3V0U3VmZml4ID8gJ9GB0LXQutGD0L3QtNCwX9GB0LXQutGD0L3QtNGLX9GB0LXQutGD0L3QtCcgOiAn0YHQtdC60YPQvdC00YNf0YHQtdC60YPQvdC00Ytf0YHQtdC60YPQvdC0JyxcbiAgICAgICAgICAgIG1tOiB3aXRob3V0U3VmZml4ID8gJ9C80LjQvdGD0YLQsF/QvNC40L3Rg9GC0Ytf0LzQuNC90YPRgicgOiAn0LzQuNC90YPRgtGDX9C80LjQvdGD0YLRi1/QvNC40L3Rg9GCJyxcbiAgICAgICAgICAgIGhoOiAn0YfQsNGBX9GH0LDRgdCwX9GH0LDRgdC+0LInLFxuICAgICAgICAgICAgZGQ6ICfQtNC10L3RjF/QtNC90Y9f0LTQvdC10LknLFxuICAgICAgICAgICAgd3c6ICfQvdC10LTQtdC70Y9f0L3QtdC00LXQu9C4X9C90LXQtNC10LvRjCcsXG4gICAgICAgICAgICBNTTogJ9C80LXRgdGP0YZf0LzQtdGB0Y/RhtCwX9C80LXRgdGP0YbQtdCyJyxcbiAgICAgICAgICAgIHl5OiAn0LPQvtC0X9Cz0L7QtNCwX9C70LXRgicsXG4gICAgICAgIH07XG4gICAgICAgIGlmIChrZXkgPT09ICdtJykge1xuICAgICAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggPyAn0LzQuNC90YPRgtCwJyA6ICfQvNC40L3Rg9GC0YMnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICcgJyArIHBsdXJhbChmb3JtYXRba2V5XSwgK251bWJlcik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdmFyIG1vbnRoc1BhcnNlID0gW1xuICAgICAgICAvXtGP0L3Qsi9pLFxuICAgICAgICAvXtGE0LXQsi9pLFxuICAgICAgICAvXtC80LDRgC9pLFxuICAgICAgICAvXtCw0L/RgC9pLFxuICAgICAgICAvXtC80LBb0LnRj10vaSxcbiAgICAgICAgL17QuNGO0L0vaSxcbiAgICAgICAgL17QuNGO0LsvaSxcbiAgICAgICAgL17QsNCy0LMvaSxcbiAgICAgICAgL17RgdC10L0vaSxcbiAgICAgICAgL17QvtC60YIvaSxcbiAgICAgICAgL17QvdC+0Y8vaSxcbiAgICAgICAgL17QtNC10LovaSxcbiAgICBdO1xuXG4gICAgLy8gaHR0cDovL25ldy5ncmFtb3RhLnJ1L3NwcmF2a2EvcnVsZXMvMTM5LXByb3AgOiDCpyAxMDNcbiAgICAvLyDQodC+0LrRgNCw0YnQtdC90LjRjyDQvNC10YHRj9GG0LXQsjogaHR0cDovL25ldy5ncmFtb3RhLnJ1L3NwcmF2a2EvYnVyby9zZWFyY2gtYW5zd2VyP3M9MjQyNjM3XG4gICAgLy8gQ0xEUiBkYXRhOiAgICAgICAgICBodHRwOi8vd3d3LnVuaWNvZGUub3JnL2NsZHIvY2hhcnRzLzI4L3N1bW1hcnkvcnUuaHRtbCMxNzUzXG4gICAgdmFyIHJ1ID0gbW9tZW50LmRlZmluZUxvY2FsZSgncnUnLCB7XG4gICAgICAgIG1vbnRoczoge1xuICAgICAgICAgICAgZm9ybWF0OiAn0Y/QvdCy0LDRgNGPX9GE0LXQstGA0LDQu9GPX9C80LDRgNGC0LBf0LDQv9GA0LXQu9GPX9C80LDRj1/QuNGO0L3Rj1/QuNGO0LvRj1/QsNCy0LPRg9GB0YLQsF/RgdC10L3RgtGP0LHRgNGPX9C+0LrRgtGP0LHRgNGPX9C90L7Rj9Cx0YDRj1/QtNC10LrQsNCx0YDRjycuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgc3RhbmRhbG9uZTpcbiAgICAgICAgICAgICAgICAn0Y/QvdCy0LDRgNGMX9GE0LXQstGA0LDQu9GMX9C80LDRgNGCX9Cw0L/RgNC10LvRjF/QvNCw0Llf0LjRjtC90Yxf0LjRjtC70Yxf0LDQstCz0YPRgdGCX9GB0LXQvdGC0Y/QsdGA0Yxf0L7QutGC0Y/QsdGA0Yxf0L3QvtGP0LHRgNGMX9C00LXQutCw0LHRgNGMJy5zcGxpdChcbiAgICAgICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgfSxcbiAgICAgICAgbW9udGhzU2hvcnQ6IHtcbiAgICAgICAgICAgIC8vINC/0L4gQ0xEUiDQuNC80LXQvdC90L4gXCLQuNGO0LsuXCIg0LggXCLQuNGO0L0uXCIsINC90L4g0LrQsNC60L7QuSDRgdC80YvRgdC7INC80LXQvdGP0YLRjCDQsdGD0LrQstGDINC90LAg0YLQvtGH0LrRgz9cbiAgICAgICAgICAgIGZvcm1hdDogJ9GP0L3Qsi5f0YTQtdCy0YAuX9C80LDRgC5f0LDQv9GALl/QvNCw0Y9f0LjRjtC90Y9f0LjRjtC70Y9f0LDQstCzLl/RgdC10L3Rgi5f0L7QutGCLl/QvdC+0Y/QsS5f0LTQtdC6Licuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgc3RhbmRhbG9uZTpcbiAgICAgICAgICAgICAgICAn0Y/QvdCyLl/RhNC10LLRgC5f0LzQsNGA0YJf0LDQv9GALl/QvNCw0Llf0LjRjtC90Yxf0LjRjtC70Yxf0LDQstCzLl/RgdC10L3Rgi5f0L7QutGCLl/QvdC+0Y/QsS5f0LTQtdC6Licuc3BsaXQoXG4gICAgICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgICAgICksXG4gICAgICAgIH0sXG4gICAgICAgIHdlZWtkYXlzOiB7XG4gICAgICAgICAgICBzdGFuZGFsb25lOlxuICAgICAgICAgICAgICAgICfQstC+0YHQutGA0LXRgdC10L3RjNC1X9C/0L7QvdC10LTQtdC70YzQvdC40Lpf0LLRgtC+0YDQvdC40Lpf0YHRgNC10LTQsF/Rh9C10YLQstC10YDQs1/Qv9GP0YLQvdC40YbQsF/RgdGD0LHQsdC+0YLQsCcuc3BsaXQoXG4gICAgICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICBmb3JtYXQ6ICfQstC+0YHQutGA0LXRgdC10L3RjNC1X9C/0L7QvdC10LTQtdC70YzQvdC40Lpf0LLRgtC+0YDQvdC40Lpf0YHRgNC10LTRg1/Rh9C10YLQstC10YDQs1/Qv9GP0YLQvdC40YbRg1/RgdGD0LHQsdC+0YLRgycuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgaXNGb3JtYXQ6IC9cXFsgP1vQktCyXSA/KD860L/RgNC+0YjQu9GD0Y580YHQu9C10LTRg9GO0YnRg9GOfNGN0YLRgyk/ID9dID9kZGRkLyxcbiAgICAgICAgfSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ9Cy0YFf0L/QvV/QstGCX9GB0YBf0YfRgl/Qv9GCX9GB0LEnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAn0LLRgV/Qv9C9X9Cy0YJf0YHRgF/Rh9GCX9C/0YJf0YHQsScuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzUGFyc2U6IG1vbnRoc1BhcnNlLFxuICAgICAgICBsb25nTW9udGhzUGFyc2U6IG1vbnRoc1BhcnNlLFxuICAgICAgICBzaG9ydE1vbnRoc1BhcnNlOiBtb250aHNQYXJzZSxcblxuICAgICAgICAvLyDQv9C+0LvQvdGL0LUg0L3QsNC30LLQsNC90LjRjyDRgSDQv9Cw0LTQtdC20LDQvNC4LCDQv9C+INGC0YDQuCDQsdGD0LrQstGLLCDQtNC70Y8g0L3QtdC60L7RgtC+0YDRi9GFLCDQv9C+IDQg0LHRg9C60LLRiywg0YHQvtC60YDQsNGJ0LXQvdC40Y8g0YEg0YLQvtGH0LrQvtC5INC4INCx0LXQtyDRgtC+0YfQutC4XG4gICAgICAgIG1vbnRoc1JlZ2V4OlxuICAgICAgICAgICAgL14o0Y/QvdCy0LDRgFvRjNGPXXzRj9C90LJcXC4/fNGE0LXQstGA0LDQu1vRjNGPXXzRhNC10LLRgD9cXC4/fNC80LDRgNGC0LA/fNC80LDRgFxcLj980LDQv9GA0LXQu1vRjNGPXXzQsNC/0YBcXC4/fNC80LBb0LnRj1180LjRjtC9W9GM0Y9dfNC40Y7QvVxcLj980LjRjtC7W9GM0Y9dfNC40Y7Qu1xcLj980LDQstCz0YPRgdGC0LA/fNCw0LLQs1xcLj980YHQtdC90YLRj9Cx0YBb0YzRj1180YHQtdC90YI/XFwuP3zQvtC60YLRj9Cx0YBb0YzRj1180L7QutGCXFwuP3zQvdC+0Y/QsdGAW9GM0Y9dfNC90L7Rj9CxP1xcLj980LTQtdC60LDQsdGAW9GM0Y9dfNC00LXQulxcLj8pL2ksXG5cbiAgICAgICAgLy8g0LrQvtC/0LjRjyDQv9GA0LXQtNGL0LTRg9GJ0LXQs9C+XG4gICAgICAgIG1vbnRoc1Nob3J0UmVnZXg6XG4gICAgICAgICAgICAvXijRj9C90LLQsNGAW9GM0Y9dfNGP0L3QslxcLj980YTQtdCy0YDQsNC7W9GM0Y9dfNGE0LXQstGAP1xcLj980LzQsNGA0YLQsD980LzQsNGAXFwuP3zQsNC/0YDQtdC7W9GM0Y9dfNCw0L/RgFxcLj980LzQsFvQudGPXXzQuNGO0L1b0YzRj1180LjRjtC9XFwuP3zQuNGO0Ltb0YzRj1180LjRjtC7XFwuP3zQsNCy0LPRg9GB0YLQsD980LDQstCzXFwuP3zRgdC10L3RgtGP0LHRgFvRjNGPXXzRgdC10L3Rgj9cXC4/fNC+0LrRgtGP0LHRgFvRjNGPXXzQvtC60YJcXC4/fNC90L7Rj9Cx0YBb0YzRj1180L3QvtGP0LE/XFwuP3zQtNC10LrQsNCx0YBb0YzRj1180LTQtdC6XFwuPykvaSxcblxuICAgICAgICAvLyDQv9C+0LvQvdGL0LUg0L3QsNC30LLQsNC90LjRjyDRgSDQv9Cw0LTQtdC20LDQvNC4XG4gICAgICAgIG1vbnRoc1N0cmljdFJlZ2V4OlxuICAgICAgICAgICAgL14o0Y/QvdCy0LDRgFvRj9GMXXzRhNC10LLRgNCw0Ltb0Y/RjF180LzQsNGA0YLQsD980LDQv9GA0LXQu1vRj9GMXXzQvNCwW9GP0LldfNC40Y7QvVvRj9GMXXzQuNGO0Ltb0Y/RjF180LDQstCz0YPRgdGC0LA/fNGB0LXQvdGC0Y/QsdGAW9GP0YxdfNC+0LrRgtGP0LHRgFvRj9GMXXzQvdC+0Y/QsdGAW9GP0YxdfNC00LXQutCw0LHRgFvRj9GMXSkvaSxcblxuICAgICAgICAvLyDQktGL0YDQsNC20LXQvdC40LUsINC60L7RgtC+0YDQvtC1INGB0L7QvtGC0LLQtdGC0YHRgtCy0YPQtdGCINGC0L7Qu9GM0LrQviDRgdC+0LrRgNCw0YnRkdC90L3Ri9C8INGE0L7RgNC80LDQvFxuICAgICAgICBtb250aHNTaG9ydFN0cmljdFJlZ2V4OlxuICAgICAgICAgICAgL14o0Y/QvdCyXFwufNGE0LXQstGAP1xcLnzQvNCw0YBb0YIuXXzQsNC/0YBcXC580LzQsFvRj9C5XXzQuNGO0L1b0YzRjy5dfNC40Y7Qu1vRjNGPLl180LDQstCzXFwufNGB0LXQvdGCP1xcLnzQvtC60YJcXC580L3QvtGP0LE/XFwufNC00LXQulxcLikvaSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSDptbScsXG4gICAgICAgICAgICBMVFM6ICdIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC5NTS5ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVkg0LMuJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZINCzLiwgSDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRCBNTU1NIFlZWVkg0LMuLCBIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdb0KHQtdCz0L7QtNC90Y8sINCyXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW9CX0LDQstGC0YDQsCwg0LJdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdb0JLRh9C10YDQsCwg0LJdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiBmdW5jdGlvbiAobm93KSB7XG4gICAgICAgICAgICAgICAgaWYgKG5vdy53ZWVrKCkgIT09IHRoaXMud2VlaygpKSB7XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAodGhpcy5kYXkoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW9CSINGB0LvQtdC00YPRjtGJ0LXQtV0gZGRkZCwgW9CyXSBMVCc7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdb0JIg0YHQu9C10LTRg9GO0YnQuNC5XSBkZGRkLCBb0LJdIExUJztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1vQkiDRgdC70LXQtNGD0Y7RidGD0Y5dIGRkZGQsIFvQsl0gTFQnO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZGF5KCkgPT09IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW9CS0L5dIGRkZGQsIFvQsl0gTFQnO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdb0JJdIGRkZGQsIFvQsl0gTFQnO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxhc3RXZWVrOiBmdW5jdGlvbiAobm93KSB7XG4gICAgICAgICAgICAgICAgaWYgKG5vdy53ZWVrKCkgIT09IHRoaXMud2VlaygpKSB7XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAodGhpcy5kYXkoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW9CSINC/0YDQvtGI0LvQvtC1XSBkZGRkLCBb0LJdIExUJztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1vQkiDQv9GA0L7RiNC70YvQuV0gZGRkZCwgW9CyXSBMVCc7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdb0JIg0L/RgNC+0YjQu9GD0Y5dIGRkZGQsIFvQsl0gTFQnO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZGF5KCkgPT09IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW9CS0L5dIGRkZGQsIFvQsl0gTFQnO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdb0JJdIGRkZGQsIFvQsl0gTFQnO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAn0YfQtdGA0LXQtyAlcycsXG4gICAgICAgICAgICBwYXN0OiAnJXMg0L3QsNC30LDQtCcsXG4gICAgICAgICAgICBzOiAn0L3QtdGB0LrQvtC70YzQutC+INGB0LXQutGD0L3QtCcsXG4gICAgICAgICAgICBzczogcmVsYXRpdmVUaW1lV2l0aFBsdXJhbCxcbiAgICAgICAgICAgIG06IHJlbGF0aXZlVGltZVdpdGhQbHVyYWwsXG4gICAgICAgICAgICBtbTogcmVsYXRpdmVUaW1lV2l0aFBsdXJhbCxcbiAgICAgICAgICAgIGg6ICfRh9Cw0YEnLFxuICAgICAgICAgICAgaGg6IHJlbGF0aXZlVGltZVdpdGhQbHVyYWwsXG4gICAgICAgICAgICBkOiAn0LTQtdC90YwnLFxuICAgICAgICAgICAgZGQ6IHJlbGF0aXZlVGltZVdpdGhQbHVyYWwsXG4gICAgICAgICAgICB3OiAn0L3QtdC00LXQu9GPJyxcbiAgICAgICAgICAgIHd3OiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsLFxuICAgICAgICAgICAgTTogJ9C80LXRgdGP0YYnLFxuICAgICAgICAgICAgTU06IHJlbGF0aXZlVGltZVdpdGhQbHVyYWwsXG4gICAgICAgICAgICB5OiAn0LPQvtC0JyxcbiAgICAgICAgICAgIHl5OiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsLFxuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbVBhcnNlOiAv0L3QvtGH0Lh80YPRgtGA0LB80LTQvdGPfNCy0LXRh9C10YDQsC9pLFxuICAgICAgICBpc1BNOiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgICAgIHJldHVybiAvXijQtNC90Y980LLQtdGH0LXRgNCwKSQvLnRlc3QoaW5wdXQpO1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbTogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXIgPCA0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfQvdC+0YfQuCc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxMikge1xuICAgICAgICAgICAgICAgIHJldHVybiAn0YPRgtGA0LAnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9C00L3Rjyc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAn0LLQtdGH0LXRgNCwJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9LSjQuXzQs9C+fNGPKS8sXG4gICAgICAgIG9yZGluYWw6IGZ1bmN0aW9uIChudW1iZXIsIHBlcmlvZCkge1xuICAgICAgICAgICAgc3dpdGNoIChwZXJpb2QpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdNJzpcbiAgICAgICAgICAgICAgICBjYXNlICdkJzpcbiAgICAgICAgICAgICAgICBjYXNlICdEREQnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJy3QuSc7XG4gICAgICAgICAgICAgICAgY2FzZSAnRCc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnLdCz0L4nO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3cnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ1cnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJy3Rjyc7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNCwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHJ1O1xuXG59KSkpO1xuIiwiXHJcbmltcG9ydCBDb2x1bW4gZnJvbSBcIi4uL2Fic3RyYWN0L0NvbHVtblwiO1xyXG5pbXBvcnQgJ21vbWVudCc7XHJcbmltcG9ydCAnbW9tZW50L2xvY2FsZS9ydSdcclxuXHJcblxyXG5jbGFzcyBDb2x1bW5zRGF0ZUh1bWFuIGV4dGVuZHMgQ29sdW1uIHtcclxuXHJcbiAgICBfbGFuZyA9IG51bGw7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQmNC90LjRhtC40LDQu9C40LfQsNGG0LjRj1xyXG4gICAgICogQHBhcmFtIHtjb3JldWlUYWJsZUluc3RhbmNlfSB0YWJsZVxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9ICAgICAgICAgICAgICBvcHRpb25zXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKHRhYmxlLCBvcHRpb25zKSB7XHJcblxyXG4gICAgICAgIG9wdGlvbnMgPSAkLmV4dGVuZCh0cnVlLCB7XHJcbiAgICAgICAgICAgIHR5cGU6ICdkYXRlJyxcclxuICAgICAgICAgICAgZmllbGQ6IG51bGwsXHJcbiAgICAgICAgICAgIGxhYmVsOiBudWxsLFxyXG4gICAgICAgICAgICBzaG93OiB0cnVlLFxyXG4gICAgICAgICAgICB3aWR0aDogbnVsbCxcclxuICAgICAgICAgICAgZm9ybWF0OiAnREQuTU0uWVlZWScsXHJcbiAgICAgICAgICAgIGF0dHI6IHt9LFxyXG4gICAgICAgICAgICBhdHRySGVhZGVyOiB7fSxcclxuICAgICAgICAgICAgcmVuZGVyOiBudWxsXHJcbiAgICAgICAgfSwgb3B0aW9ucyk7XHJcblxyXG4gICAgICAgIHN1cGVyKHRhYmxlLCBvcHRpb25zKTtcclxuXHJcbiAgICAgICAgdGhpcy5fbGFuZyA9IHRhYmxlLmdldE9wdGlvbnMoKS5sYW5nO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCk0L7RgNC80LjRgNC+0LLQsNC90LjQtSDQutC+0L3RgtC10L3RgtCwXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ3xudW1iZXJ8RGF0ZX0gY29udGVudFxyXG4gICAgICogQHBhcmFtIHtvYmplY3R9IHJlY29yZFxyXG4gICAgICogQHJldHVybnMge3N0cmluZ31cclxuICAgICAqL1xyXG4gICAgcmVuZGVyKGNvbnRlbnQsIHJlY29yZCkge1xyXG5cclxuICAgICAgICBpZiAoWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2YgY29udGVudCkgPCAwIHx8ICEgY29udGVudCBpbnN0YW5jZW9mIERhdGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChjb250ZW50ICE9PSAnJykge1xyXG4gICAgICAgICAgICAgICAgbGV0IGRhdGVDb250ZW50ID0gY29udGVudCBpbnN0YW5jZW9mIERhdGUgPyBjb250ZW50IDogbmV3IERhdGUoY29udGVudCk7XHJcbiAgICAgICAgICAgICAgICBsZXQgZGF0ZUZvcm1hdCAgPSBtb21lbnQoZGF0ZUNvbnRlbnQpLmZvcm1hdCgnTU0uREQueXl5eSBISDptbTpzcycpO1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnRlbnQgPSBtb21lbnQoZGF0ZUNvbnRlbnQpLmxvY2FsZSh0aGlzLl9sYW5nKS5mcm9tTm93KCk7XHJcbiAgICAgICAgICAgICAgICBjb250ZW50ID0gJzxzcGFuIHRpdGxlPVwiJyArIGRhdGVGb3JtYXQgKyAnXCI+JyArIGNvbnRlbnQgKyAnPC9zcGFuPic7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oZSlcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICByZXR1cm4gY29udGVudDtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IENvbHVtbnNEYXRlSHVtYW47IiwiXHJcbmltcG9ydCBjb3JldWlUYWJsZVV0aWxzIGZyb20gXCIuLi9jb3JldWkudGFibGUudXRpbHNcIjtcclxuaW1wb3J0IENvbHVtbiAgICAgICAgICAgZnJvbSBcIi4uL2Fic3RyYWN0L0NvbHVtblwiO1xyXG5cclxuXHJcbmNsYXNzIENvbHVtbnNIdG1sIGV4dGVuZHMgQ29sdW1uIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPXHJcbiAgICAgKiBAcGFyYW0ge2NvcmV1aVRhYmxlSW5zdGFuY2V9IHRhYmxlXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gICAgICAgICAgICAgIG9wdGlvbnNcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IodGFibGUsIG9wdGlvbnMpIHtcclxuXHJcbiAgICAgICAgb3B0aW9ucyA9ICQuZXh0ZW5kKHRydWUsIHtcclxuICAgICAgICAgICAgdHlwZTogJ2h0bWwnLFxyXG4gICAgICAgICAgICBmaWVsZDogbnVsbCxcclxuICAgICAgICAgICAgbGFiZWw6IG51bGwsXHJcbiAgICAgICAgICAgIHNob3c6IHRydWUsXHJcbiAgICAgICAgICAgIHdpZHRoOiBudWxsLFxyXG4gICAgICAgICAgICBtaW5XaWR0aDogbnVsbCxcclxuICAgICAgICAgICAgbWF4V2lkdGg6IG51bGwsXHJcbiAgICAgICAgICAgIG5vV3JhcDogbnVsbCxcclxuICAgICAgICAgICAgbm9XcmFwVG9nZ2xlOiBudWxsLFxyXG4gICAgICAgICAgICBhdHRyOiB7fSxcclxuICAgICAgICAgICAgYXR0ckhlYWRlcjoge30sXHJcbiAgICAgICAgICAgIHJlbmRlcjogbnVsbFxyXG4gICAgICAgIH0sIG9wdGlvbnMpO1xyXG5cclxuICAgICAgICBzdXBlcih0YWJsZSwgb3B0aW9ucyk7XHJcblxyXG4gICAgICAgIGxldCB0YWJsZU9wdGlvbnMgPSB0aGlzLl90YWJsZS5nZXRPcHRpb25zKCk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLm5vV3JhcCB8fFxyXG4gICAgICAgICAgICAodGhpcy5fb3B0aW9ucy5ub1dyYXAgPT09IG51bGwgJiYgdGFibGVPcHRpb25zLm5vV3JhcClcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgaWYgKCAhIHRoaXMuX29wdGlvbnMuYXR0cikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy5hdHRyID0geyBjbGFzcyA6ICdjb3JldWlfdGFibGVfX25vLXdyYXAnIH07XHJcblxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy5hdHRyID0gY29yZXVpVGFibGVVdGlscy5tZXJnZUF0dHIodGhpcy5fb3B0aW9ucy5hdHRyLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3M6ICdjb3JldWlfdGFibGVfX25vLXdyYXAnXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy5ub1dyYXAgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMubm9XcmFwVG9nZ2xlIHx8XHJcbiAgICAgICAgICAgICAgICAodGhpcy5fb3B0aW9ucy5ub1dyYXBUb2dnbGUgPT09IG51bGwgJiYgdGFibGVPcHRpb25zLm5vV3JhcFRvZ2dsZSlcclxuICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9vcHRpb25zLm5vV3JhcFRvZ2dsZSA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0JrQvtC90LLQtdGA0YLQuNGA0L7QstCw0L3QuNC1INC30L3QsNGH0LXQvdC40Y8g0LrQvtC70L7QvdC60Lgg0LIg0YLQtdC60YHRglxyXG4gICAgICogQHBhcmFtIHsqfSBjb2x1bW5WYWx1ZVxyXG4gICAgICogQHJldHVybnMge3N0cmluZ31cclxuICAgICAqL1xyXG4gICAgY29udmVydFRvU3RyaW5nKGNvbHVtblZhbHVlKSB7XHJcblxyXG4gICAgICAgIGlmIChbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiBjb2x1bW5WYWx1ZSkgPj0gMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gU3RyaW5nKGNvbHVtblZhbHVlKS5yZXBsYWNlKC88W14+XSo+Py9nbSwgJycpO1xyXG5cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gJyc7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCk0L7RgNC80LjRgNC+0LLQsNC90LjQtSDQutC+0L3RgtC10L3RgtCwXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ3xIVE1MRWxlbWVudHxqUXVlcnl9IGNvbnRlbnRcclxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSAgICAgICAgICAgICAgICAgICAgcmVjb3JkXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxyXG4gICAgICovXHJcbiAgICByZW5kZXIoY29udGVudCwgcmVjb3JkKSB7XHJcblxyXG4gICAgICAgIGlmIChbJ3N0cmluZycsICdiaWdpbnQnLCAnc3ltYm9sJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIGNvbnRlbnQpIDwgMCAmJlxyXG4gICAgICAgICAgICAhIChjb250ZW50IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpICYmXHJcbiAgICAgICAgICAgICEgKHdpbmRvdy5oYXNPd25Qcm9wZXJ0eSgnalF1ZXJ5JykgJiYgY29udGVudCBpbnN0YW5jZW9mIGpRdWVyeSlcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMubm9XcmFwKSB7XHJcbiAgICAgICAgICAgIGNvbnRlbnQgPSAkKCc8ZGl2PjwvZGl2PicpLmFwcGVuZChjb250ZW50KTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9vcHRpb25zLm5vV3JhcFRvZ2dsZSkge1xyXG4gICAgICAgICAgICAgICAgY29udGVudCA9ICQoY29udGVudCkuYWZ0ZXIoJzxpIGNsYXNzPVwiYmkgYmktY2FyZXQtZG93bi1maWxsIHRvZ2dsZVwiPjwvaT4nKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gY29udGVudDtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IENvbHVtbnNIdG1sOyIsIlxyXG5pbXBvcnQgY29yZXVpVGFibGVVdGlscyBmcm9tIFwiLi4vY29yZXVpLnRhYmxlLnV0aWxzXCI7XHJcbmltcG9ydCBDb2x1bW4gICAgICAgICAgIGZyb20gXCIuLi9hYnN0cmFjdC9Db2x1bW5cIjtcclxuXHJcbmNsYXNzIENvbHVtbnNOdW1iZXIgZXh0ZW5kcyBDb2x1bW4ge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y9cclxuICAgICAqIEBwYXJhbSB7Y29yZXVpVGFibGVJbnN0YW5jZX0gdGFibGVcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSAgICAgICAgICAgICAgb3B0aW9uc1xyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3Rvcih0YWJsZSwgb3B0aW9ucykge1xyXG5cclxuICAgICAgICBvcHRpb25zID0gJC5leHRlbmQodHJ1ZSwge1xyXG4gICAgICAgICAgICB0eXBlOiAnbnVtYmVyJyxcclxuICAgICAgICAgICAgZmllbGQ6IG51bGwsXHJcbiAgICAgICAgICAgIGxhYmVsOiBudWxsLFxyXG4gICAgICAgICAgICBzaG93OiB0cnVlLFxyXG4gICAgICAgICAgICB3aWR0aDogbnVsbCxcclxuICAgICAgICAgICAgbWluV2lkdGg6IG51bGwsXHJcbiAgICAgICAgICAgIG1heFdpZHRoOiBudWxsLFxyXG4gICAgICAgICAgICBub1dyYXA6IG51bGwsXHJcbiAgICAgICAgICAgIG5vV3JhcFRvZ2dsZTogbnVsbCxcclxuICAgICAgICAgICAgYXR0cjoge30sXHJcbiAgICAgICAgICAgIGF0dHJIZWFkZXI6IHt9LFxyXG4gICAgICAgICAgICByZW5kZXI6IG51bGxcclxuICAgICAgICB9LCBvcHRpb25zKTtcclxuXHJcbiAgICAgICAgc3VwZXIodGFibGUsIG9wdGlvbnMpO1xyXG5cclxuXHJcbiAgICAgICAgbGV0IHRhYmxlT3B0aW9ucyA9IHRoaXMuX3RhYmxlLmdldE9wdGlvbnMoKTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMubm9XcmFwIHx8XHJcbiAgICAgICAgICAgICh0aGlzLl9vcHRpb25zLm5vV3JhcCA9PT0gbnVsbCAmJiB0YWJsZU9wdGlvbnMubm9XcmFwKVxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICBpZiAoICEgdGhpcy5fb3B0aW9ucy5hdHRyKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9vcHRpb25zLmF0dHIgPSB7IGNsYXNzIDogJ2NvcmV1aV90YWJsZV9fbm8td3JhcCcgfTtcclxuXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9vcHRpb25zLmF0dHIgPSBjb3JldWlUYWJsZVV0aWxzLm1lcmdlQXR0cih0aGlzLl9vcHRpb25zLmF0dHIsIHtcclxuICAgICAgICAgICAgICAgICAgICBjbGFzczogJ2NvcmV1aV90YWJsZV9fbm8td3JhcCdcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLl9vcHRpb25zLm5vV3JhcCA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy5ub1dyYXBUb2dnbGUgfHxcclxuICAgICAgICAgICAgICAgICh0aGlzLl9vcHRpb25zLm5vV3JhcFRvZ2dsZSA9PT0gbnVsbCAmJiB0YWJsZU9wdGlvbnMubm9XcmFwVG9nZ2xlKVxyXG4gICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX29wdGlvbnMubm9XcmFwVG9nZ2xlID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQpNC+0YDQvNC40YDQvtCy0LDQvdC40LUg0LrQvtC90YLQtdC90YLQsFxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGNvbnRlbnRcclxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSByZWNvcmRcclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIHJlbmRlcihjb250ZW50LCByZWNvcmQpIHtcclxuXHJcbiAgICAgICAgaWYgKFsnc3RyaW5nJywgJ2JpZ2ludCcsICdzeW1ib2wnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2YgY29udGVudCkgPCAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAnJztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnRlbnQgPSBTdHJpbmcoY29udGVudClcclxuICAgICAgICAgICAgLnJlcGxhY2UoLywvZywgJy4nKVxyXG4gICAgICAgICAgICAucmVwbGFjZSgvW14wLTlcXC1cXC5dL2csICcnKVxyXG4gICAgICAgICAgICAucmVwbGFjZSgvW1xcc117Mix9L2csICcgJylcclxuICAgICAgICAgICAgLnJlcGxhY2UoLyg/PCEoXFwuXFxkKnxeLnswfSkpKD89KFxcZHszfSkrKD8hXFxkKSkvZywgJyQxICcpXHJcbiAgICAgICAgICAgIC5yZXBsYWNlKC9cXC0gL2csICctJyk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLm5vV3JhcCkge1xyXG4gICAgICAgICAgICBjb250ZW50ID0gJzxkaXY+JyArIGNvbnRlbnQgKyAnPC9kaXY+J1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMubm9XcmFwVG9nZ2xlKSB7XHJcbiAgICAgICAgICAgICAgICBjb250ZW50ICs9ICc8aSBjbGFzcz1cImJpIGJpLWNhcmV0LWRvd24tZmlsbCB0b2dnbGVcIj48L2k+J1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gY29udGVudDtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgQ29sdW1uc051bWJlcjsiLCJcclxuaW1wb3J0IGNvcmV1aVRhYmxlVXRpbHMgZnJvbSBcIi4uL2NvcmV1aS50YWJsZS51dGlsc1wiO1xyXG5pbXBvcnQgQ29sdW1uICAgICAgICAgICBmcm9tIFwiLi4vYWJzdHJhY3QvQ29sdW1uXCI7XHJcblxyXG5jbGFzcyBDb2x1bW5zTW9uZXkgZXh0ZW5kcyBDb2x1bW4ge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y9cclxuICAgICAqIEBwYXJhbSB7Y29yZXVpVGFibGVJbnN0YW5jZX0gdGFibGVcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSAgICAgICAgICAgICAgb3B0aW9uc1xyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3Rvcih0YWJsZSwgb3B0aW9ucykge1xyXG5cclxuICAgICAgICBvcHRpb25zID0gJC5leHRlbmQodHJ1ZSwge1xyXG4gICAgICAgICAgICB0eXBlOiAnbW9uZXknLFxyXG4gICAgICAgICAgICBmaWVsZDogbnVsbCxcclxuICAgICAgICAgICAgbGFiZWw6IG51bGwsXHJcbiAgICAgICAgICAgIHNob3c6IHRydWUsXHJcbiAgICAgICAgICAgIHdpZHRoOiBudWxsLFxyXG4gICAgICAgICAgICBtaW5XaWR0aDogbnVsbCxcclxuICAgICAgICAgICAgbWF4V2lkdGg6IG51bGwsXHJcbiAgICAgICAgICAgIG5vV3JhcDogbnVsbCxcclxuICAgICAgICAgICAgbm9XcmFwVG9nZ2xlOiBudWxsLFxyXG4gICAgICAgICAgICBjdXJyZW5jeTogbnVsbCxcclxuICAgICAgICAgICAgYXR0cjoge1xyXG4gICAgICAgICAgICAgICAgY2xhc3M6ICd0ZXh0LWVuZCdcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgYXR0ckhlYWRlcjoge1xyXG4gICAgICAgICAgICAgICAgY2xhc3M6ICd0ZXh0LWVuZCdcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgcmVuZGVyOiBudWxsXHJcbiAgICAgICAgfSwgb3B0aW9ucyk7XHJcblxyXG4gICAgICAgIHN1cGVyKHRhYmxlLCBvcHRpb25zKTtcclxuXHJcbiAgICAgICAgbGV0IHRhYmxlT3B0aW9ucyA9IHRoaXMuX3RhYmxlLmdldE9wdGlvbnMoKTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMubm9XcmFwIHx8XHJcbiAgICAgICAgICAgICh0aGlzLl9vcHRpb25zLm5vV3JhcCA9PT0gbnVsbCAmJiB0YWJsZU9wdGlvbnMubm9XcmFwKVxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICBpZiAoICEgdGhpcy5fb3B0aW9ucy5hdHRyKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9vcHRpb25zLmF0dHIgPSB7IGNsYXNzIDogJ2NvcmV1aV90YWJsZV9fbm8td3JhcCcgfTtcclxuXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9vcHRpb25zLmF0dHIgPSBjb3JldWlUYWJsZVV0aWxzLm1lcmdlQXR0cih0aGlzLl9vcHRpb25zLmF0dHIsIHtcclxuICAgICAgICAgICAgICAgICAgICBjbGFzczogJ2NvcmV1aV90YWJsZV9fbm8td3JhcCdcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLl9vcHRpb25zLm5vV3JhcCA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy5ub1dyYXBUb2dnbGUgfHxcclxuICAgICAgICAgICAgICAgICh0aGlzLl9vcHRpb25zLm5vV3JhcFRvZ2dsZSA9PT0gbnVsbCAmJiB0YWJsZU9wdGlvbnMubm9XcmFwVG9nZ2xlKVxyXG4gICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX29wdGlvbnMubm9XcmFwVG9nZ2xlID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQmtC+0L3QstC10YDRgtC40YDQvtCy0LDQvdC40LUg0LfQvdCw0YfQtdC90LjRjyDQutC+0LvQvtC90LrQuCDQsiDRgtC10LrRgdGCXHJcbiAgICAgKiBAcGFyYW0geyp9IGNvbHVtblZhbHVlXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxyXG4gICAgICovXHJcbiAgICBjb252ZXJ0VG9TdHJpbmcoY29sdW1uVmFsdWUpIHtcclxuXHJcbiAgICAgICAgbGV0IGNvbnRlbnQgPSAnJztcclxuXHJcbiAgICAgICAgaWYgKFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIGNvbHVtblZhbHVlKSA+PSAwKSB7XHJcbiAgICAgICAgICAgIGlmIChpc05hTihjb250ZW50KSkge1xyXG4gICAgICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQudG9TdHJpbmcoKVxyXG4gICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC8oXFxkKSg/PShcXGRcXGRcXGQpKyhbXlxcZF18JCkpL2csICckMSAnKTtcclxuXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb250ZW50ID0gTnVtYmVyKGNvbnRlbnQpLnRvRml4ZWQoMikudG9TdHJpbmcoKTtcclxuICAgICAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50LnJlcGxhY2UoLyhcXGQpKD89KFxcZFxcZFxcZCkrKFteXFxkXXwkKSkvZywgJyQxICcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gY29udGVudDtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQpNC+0YDQvNC40YDQvtCy0LDQvdC40LUg0LrQvtC90YLQtdC90YLQsFxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGNvbnRlbnRcclxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSByZWNvcmRcclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIHJlbmRlcihjb250ZW50LCByZWNvcmQpIHtcclxuXHJcbiAgICAgICAgaWYgKFsnc3RyaW5nJywgJ2JpZ2ludCcsICdzeW1ib2wnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2YgY29udGVudCkgPCAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAnJztcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICBpZiAoaXNOYU4oY29udGVudCkpIHtcclxuICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQudG9TdHJpbmcoKVxyXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoLyhcXGQpKD89KFxcZFxcZFxcZCkrKFteXFxkXXwkKSkvZywgJyQxICcpO1xyXG5cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjb250ZW50ID0gTnVtYmVyKGNvbnRlbnQpLnRvRml4ZWQoMikudG9TdHJpbmcoKTtcclxuICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQucmVwbGFjZSgvKFxcZCkoPz0oXFxkXFxkXFxkKSsoW15cXGRdfCQpKS9nLCAnJDEgJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy5jdXJyZW5jeSAmJlxyXG4gICAgICAgICAgICBbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiB0aGlzLl9vcHRpb25zLmN1cnJlbmN5KSA+PSAwXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIGNvbnRlbnQgKz0gJyA8c21hbGwgY2xhc3M9XCJ0ZXh0LW11dGVkXCI+JyArIHRoaXMuX29wdGlvbnMuY3VycmVuY3kgKyAnPC9zbWFsbD4nO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLm5vV3JhcCkge1xyXG4gICAgICAgICAgICBjb250ZW50ID0gJzxkaXY+JyArIGNvbnRlbnQgKyAnPC9kaXY+J1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMubm9XcmFwVG9nZ2xlKSB7XHJcbiAgICAgICAgICAgICAgICBjb250ZW50ICs9ICc8aSBjbGFzcz1cImJpIGJpLWNhcmV0LWRvd24tZmlsbCB0b2dnbGVcIj48L2k+J1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gY29udGVudDtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IENvbHVtbnNNb25leTsiLCJcclxuaW1wb3J0IENvbHVtbiBmcm9tIFwiLi4vYWJzdHJhY3QvQ29sdW1uXCI7XHJcblxyXG5cclxuY2xhc3MgQ29sdW1uc051bWJlcnMgZXh0ZW5kcyBDb2x1bW4ge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y9cclxuICAgICAqIEBwYXJhbSB7Y29yZXVpVGFibGVJbnN0YW5jZX0gdGFibGVcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSAgICAgICAgICAgICAgb3B0aW9uc1xyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3Rvcih0YWJsZSwgb3B0aW9ucykge1xyXG5cclxuICAgICAgICBvcHRpb25zID0gJC5leHRlbmQodHJ1ZSwge1xyXG4gICAgICAgICAgICB0eXBlOiAnbnVtYmVycycsXHJcbiAgICAgICAgICAgIGxhYmVsOiAn4oSWJyxcclxuICAgICAgICAgICAgd2lkdGg6IDIwLFxyXG4gICAgICAgICAgICBhdHRyOiB7IGNsYXNzOiAndGV4dC1lbmQnIH0sXHJcbiAgICAgICAgICAgIGF0dHJIZWFkZXI6IG51bGxcclxuICAgICAgICB9LCBvcHRpb25zKTtcclxuXHJcbiAgICAgICAgc3VwZXIodGFibGUsIG9wdGlvbnMpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCk0L7RgNC80LjRgNC+0LLQsNC90LjQtSDQutC+0L3RgtC10L3RgtCwXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gY29udGVudFxyXG4gICAgICogQHBhcmFtIHtvYmplY3R9IHJlY29yZFxyXG4gICAgICogQHJldHVybnMge3N0cmluZ31cclxuICAgICAqL1xyXG4gICAgcmVuZGVyKGNvbnRlbnQsIHJlY29yZCkge1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5fdGFibGUuX3JlY29yZHNOdW1iZXI7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IENvbHVtbnNOdW1iZXJzOyIsIlxyXG5pbXBvcnQgY29yZXVpVGFibGVFbGVtZW50cyBmcm9tIFwiLi4vY29yZXVpLnRhYmxlLmVsZW1lbnRzXCI7XHJcbmltcG9ydCBjb3JldWlUYWJsZVByaXZhdGUgIGZyb20gXCIuLi9jb3JldWkudGFibGUucHJpdmF0ZVwiO1xyXG5pbXBvcnQgY29yZXVpVGFibGVUcGwgICAgICBmcm9tIFwiLi4vY29yZXVpLnRhYmxlLnRlbXBsYXRlc1wiO1xyXG5pbXBvcnQgY29yZXVpVGFibGVVdGlscyAgICBmcm9tIFwiLi4vY29yZXVpLnRhYmxlLnV0aWxzXCI7XHJcbmltcG9ydCBDb2x1bW4gICAgICAgICAgICAgIGZyb20gXCIuLi9hYnN0cmFjdC9Db2x1bW5cIjtcclxuXHJcbmNsYXNzIENvbHVtbnNTZWxlY3QgZXh0ZW5kcyBDb2x1bW4ge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y9cclxuICAgICAqIEBwYXJhbSB7Y29yZXVpVGFibGVJbnN0YW5jZX0gdGFibGVcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSAgICAgICAgICAgICAgb3B0aW9uc1xyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3Rvcih0YWJsZSwgb3B0aW9ucykge1xyXG5cclxuICAgICAgICBsZXQgb3JpZ2luYWxPcHRpb25zID0ge1xyXG4gICAgICAgICAgICB0eXBlOiAnc2VsZWN0JyxcclxuICAgICAgICAgICAgZmllbGQ6IG51bGwsXHJcbiAgICAgICAgICAgIGxhYmVsOiAnJyxcclxuICAgICAgICAgICAgc2hvdzogdHJ1ZSxcclxuICAgICAgICAgICAgd2lkdGg6IDM1LFxyXG4gICAgICAgICAgICBhdHRyOiB7IGNsYXNzOiAnY29yZXVpLXRhYmxlX19zZWxlY3RfY29udGFpbmVyIHRleHQtY2VudGVyJyB9LFxyXG4gICAgICAgICAgICBhdHRySGVhZGVyOiB7IGNsYXNzOiAndGV4dC1jZW50ZXInIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBpZiAob3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnYXR0cicpKSB7XHJcbiAgICAgICAgICAgIG9wdGlvbnMuYXR0ciA9IGNvcmV1aVRhYmxlVXRpbHMubWVyZ2VBdHRyKG9yaWdpbmFsT3B0aW9ucy5hdHRyLCBvcHRpb25zLmF0dHIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAob3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnYXR0ckhlYWRlcicpKSB7XHJcbiAgICAgICAgICAgIG9wdGlvbnMuYXR0ckhlYWRlciA9IGNvcmV1aVRhYmxlVXRpbHMubWVyZ2VBdHRyKG9yaWdpbmFsT3B0aW9ucy5hdHRySGVhZGVyLCBvcHRpb25zLmF0dHJIZWFkZXIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgb3B0aW9ucyA9ICQuZXh0ZW5kKHRydWUsIG9yaWdpbmFsT3B0aW9ucywgb3B0aW9ucyk7XHJcblxyXG4gICAgICAgIHN1cGVyKHRhYmxlLCBvcHRpb25zKTtcclxuXHJcblxyXG4gICAgICAgIHRoaXMuX29wdGlvbnMubGFiZWwgPSBjb3JldWlUYWJsZVRwbFsnY29sdW1ucy9zZWxlY3RfbGFiZWwuaHRtbCddO1xyXG5cclxuICAgICAgICAvLyDQn9C+0LrQsNC3INGB0YLRgNC+0LpcclxuICAgICAgICB0YWJsZS5vbigncmVjb3Jkc19zaG93JywgZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAgICAgbGV0IHNlbGVjdHMgICA9IGNvcmV1aVRhYmxlRWxlbWVudHMuZ2V0Um93c1NlbGVjdHModGFibGUuZ2V0SWQoKSk7XHJcbiAgICAgICAgICAgIGxldCBzZWxlY3RBbGwgPSBjb3JldWlUYWJsZUVsZW1lbnRzLmdldFJvd3NTZWxlY3RBbGwodGFibGUuZ2V0SWQoKSk7XHJcblxyXG4gICAgICAgICAgICAvLyDQntGC0LzQtdC90LAg0L7QsdGA0LDQsdC+0YLQutC4INC90LDQttCw0YLQuNGPINCyIHNlbGVjdCDQutC+0LvQvtC90LrQsNGFXHJcbiAgICAgICAgICAgICQoc2VsZWN0cykuY2xpY2soZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAvLyDQktGL0LHQvtGAINCy0YHQtdGFINGB0YLRgNC+0LpcclxuICAgICAgICAgICAgc2VsZWN0QWxsLmNsaWNrKGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCQodGhpcykuaXMoJzpjaGVja2VkJykpIHtcclxuICAgICAgICAgICAgICAgICAgICB0YWJsZS5zZWxlY3RBbGwoKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGFibGUudW5zZWxlY3RBbGwoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KTQvtGA0LzQuNGA0L7QstCw0L3QuNC1INC60L7QvdGC0LXQvdGC0LBcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjb250ZW50XHJcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gcmVjb3JkXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxyXG4gICAgICovXHJcbiAgICByZW5kZXIoY29udGVudCwgcmVjb3JkKSB7XHJcblxyXG4gICAgICAgIGxldCBzZWxlY3QgPSAkKGNvcmV1aVRhYmxlVXRpbHMucmVuZGVyKGNvcmV1aVRhYmxlVHBsWydjb2x1bW5zL3NlbGVjdC5odG1sJ10sIHtcclxuICAgICAgICAgICAgaW5kZXg6IHJlY29yZC5pbmRleFxyXG4gICAgICAgIH0pKTtcclxuXHJcbiAgICAgICAgbGV0IHRoYXQgPSB0aGlzO1xyXG5cclxuICAgICAgICAvLyDQktGL0LHQvtGAINGB0YLRgNC+0LrQuFxyXG4gICAgICAgIHNlbGVjdC5jbGljayhmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGxldCB0ciA9IGNvcmV1aVRhYmxlRWxlbWVudHMuZ2V0VHJCeUluZGV4KHRoYXQuX3RhYmxlLmdldElkKCksIHJlY29yZC5pbmRleCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoICEgdHIpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKCQodGhpcykuaXMoJzpjaGVja2VkJykpIHtcclxuICAgICAgICAgICAgICAgICQodHIpLmFkZENsYXNzKCd0YWJsZS1wcmltYXJ5Jyk7XHJcblxyXG4gICAgICAgICAgICAgICAgY29yZXVpVGFibGVQcml2YXRlLl90cmlnZ2VyKHRoYXQuX3RhYmxlLCAncmVjb3JkX3NlbGVjdCcsIFsgcmVjb3JkIF0pO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgJCh0cikucmVtb3ZlQ2xhc3MoJ3RhYmxlLXByaW1hcnknKTtcclxuXHJcbiAgICAgICAgICAgICAgICBjb3JldWlUYWJsZVByaXZhdGUuX3RyaWdnZXIodGhhdC5fdGFibGUsICdyZWNvcmRfdW5zZWxlY3QnLCBbIHJlY29yZCBdKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gc2VsZWN0O1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBDb2x1bW5zU2VsZWN0OyIsIlxyXG5pbXBvcnQgY29yZXVpVGFibGVFbGVtZW50cyBmcm9tIFwiLi4vY29yZXVpLnRhYmxlLmVsZW1lbnRzXCI7XHJcbmltcG9ydCBjb3JldWlUYWJsZVRwbCAgICAgIGZyb20gXCIuLi9jb3JldWkudGFibGUudGVtcGxhdGVzXCI7XHJcbmltcG9ydCBjb3JldWlUYWJsZVV0aWxzICAgIGZyb20gXCIuLi9jb3JldWkudGFibGUudXRpbHNcIjtcclxuaW1wb3J0IENvbHVtbiAgICAgICAgICAgICAgZnJvbSBcIi4uL2Fic3RyYWN0L0NvbHVtblwiO1xyXG5cclxuY2xhc3MgQ29sdW1uc1N3aXRjaCBleHRlbmRzIENvbHVtbiB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQmNC90LjRhtC40LDQu9C40LfQsNGG0LjRj1xyXG4gICAgICogQHBhcmFtIHtjb3JldWlUYWJsZUluc3RhbmNlfSB0YWJsZVxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9ICAgICAgICAgICAgICBvcHRpb25zXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKHRhYmxlLCBvcHRpb25zKSB7XHJcblxyXG4gICAgICAgIG9wdGlvbnMgPSAkLmV4dGVuZCh0cnVlLCB7XHJcbiAgICAgICAgICAgIHR5cGU6ICdzd2l0Y2gnLFxyXG4gICAgICAgICAgICBsYWJlbDogJycsXHJcbiAgICAgICAgICAgIGZpZWxkOiAnJyxcclxuICAgICAgICAgICAgc2hvdzogdHJ1ZSxcclxuICAgICAgICAgICAgZGlzYWJsZWQ6IGZhbHNlLFxyXG4gICAgICAgICAgICB3aWR0aDogNSxcclxuICAgICAgICAgICAgdmFsdWVZOiAnMScsXHJcbiAgICAgICAgICAgIHZhbHVlTjogJzAnLFxyXG4gICAgICAgICAgICBhdHRyOiB7IGNsYXNzOiAnY29yZXVpLXRhYmxlX19zd2l0Y2hfY29udGFpbmVyJyB9LFxyXG4gICAgICAgICAgICBhdHRySGVhZGVyOiB7IH0sXHJcbiAgICAgICAgICAgIG9uQ2hhbmdlOiBudWxsXHJcbiAgICAgICAgfSwgb3B0aW9ucyk7XHJcblxyXG4gICAgICAgIHN1cGVyKHRhYmxlLCBvcHRpb25zKTtcclxuXHJcblxyXG4gICAgICAgIC8vINCf0L7QutCw0Lcg0YHRgtGA0L7QulxyXG4gICAgICAgIHRhYmxlLm9uKCdyZWNvcmRzX3Nob3cnLCBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICAgICBsZXQgY29udGFpbmVycyA9IGNvcmV1aVRhYmxlRWxlbWVudHMuZ2V0Um93c1N3aXRjaGVzKHRhYmxlLmdldElkKCkpO1xyXG5cclxuICAgICAgICAgICAgLy8g0J7RgtC80LXQvdCwINC+0LHRgNCw0LHQvtGC0LrQuCDQvdCw0LbQsNGC0LjRjyDQsiBzd2l0Y2gg0LrQvtC70L7QvdC60LDRhVxyXG4gICAgICAgICAgICBjb250YWluZXJzLmNsaWNrKGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCk0L7RgNC80LjRgNC+0LLQsNC90LjQtSDQutC+0L3RgtC10L3RgtCwXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gY29udGVudFxyXG4gICAgICogQHBhcmFtIHtvYmplY3R9IHJlY29yZFxyXG4gICAgICogQHJldHVybnMge2pRdWVyeX1cclxuICAgICAqL1xyXG4gICAgcmVuZGVyKGNvbnRlbnQsIHJlY29yZCkge1xyXG5cclxuICAgICAgICBsZXQgaXNDaGVja2VkID0gY29udGVudCA9PT0gdGhpcy5fb3B0aW9ucy52YWx1ZVk7XHJcblxyXG4gICAgICAgIGxldCBmb3JtU3dpdGNoID0gJChjb3JldWlUYWJsZVV0aWxzLnJlbmRlcihjb3JldWlUYWJsZVRwbFsnY29sdW1ucy9zd2l0Y2guaHRtbCddLCB7XHJcbiAgICAgICAgICAgIGluZGV4OiByZWNvcmQuaW5kZXgsXHJcbiAgICAgICAgICAgIGZpZWxkOiB0aGlzLl9vcHRpb25zLmZpZWxkLFxyXG4gICAgICAgICAgICBkaXNhYmxlZDogdGhpcy5fb3B0aW9ucy5kaXNhYmxlZCxcclxuICAgICAgICAgICAgY2hlY2tlZDogaXNDaGVja2VkXHJcbiAgICAgICAgfSkpO1xyXG5cclxuICAgICAgICAvLyDQodC+0LHRi9GC0LjRjyDQvdCw0LbQsNGC0LjRjyDQvdCwINC/0LXRgNC10LrQu9GO0YfQsNGC0LXQu9GMXHJcbiAgICAgICAgbGV0IHRoYXQgID0gdGhpcztcclxuICAgICAgICBsZXQgdGFibGUgPSB0aGlzLl90YWJsZTtcclxuXHJcbiAgICAgICAgJCgnLmNvcmV1aS10YWJsZV9fc3dpdGNoJywgZm9ybVN3aXRjaCkuY2hhbmdlKGZ1bmN0aW9uIChldmVudCkge1xyXG5cclxuICAgICAgICAgICAgbGV0IGlucHV0ID0gdGhpcztcclxuXHJcbiAgICAgICAgICAgIHRhYmxlLl9yZWNvcmRzLm1hcChmdW5jdGlvbiAocmVjb3JkVGFibGUpIHtcclxuICAgICAgICAgICAgICAgIGlmIChyZWNvcmQuaW5kZXggPT09IHJlY29yZFRhYmxlLmluZGV4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVjb3JkVGFibGUuZGF0YVt0aGF0Ll9vcHRpb25zLmZpZWxkXSA9IGlucHV0LmNoZWNrZWQgPyB0aGF0Ll9vcHRpb25zLnZhbHVlWSA6IHRoYXQuX29wdGlvbnMudmFsdWVOO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcblxyXG5cclxuICAgICAgICAgICAgaWYgKHRoYXQuX29wdGlvbnMuaGFzT3duUHJvcGVydHkoJ29uQ2hhbmdlJykgJiZcclxuICAgICAgICAgICAgICAgICh0eXBlb2YgdGhhdC5fb3B0aW9ucy5vbkNoYW5nZSA9PT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2YgdGhhdC5fb3B0aW9ucy5vbkNoYW5nZSA9PT0gJ3N0cmluZycpXHJcbiAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGF0Ll9vcHRpb25zLm9uQ2hhbmdlID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhhdC5fb3B0aW9ucy5vbkNoYW5nZShyZWNvcmQsIGlucHV0KTtcclxuXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBmdW5jID0gbmV3IEZ1bmN0aW9uKCdyZWNvcmQnLCAnaW5wdXQnLCB0aGF0Ll9vcHRpb25zLm9uQ2hhbmdlKTtcclxuICAgICAgICAgICAgICAgICAgICBmdW5jKHJlY29yZCwgaW5wdXQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gZm9ybVN3aXRjaDtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgQ29sdW1uc1N3aXRjaDsiLCJcclxuaW1wb3J0IGNvcmV1aVRhYmxlVXRpbHMgZnJvbSBcIi4uL2NvcmV1aS50YWJsZS51dGlsc1wiO1xyXG5pbXBvcnQgQ29sdW1uICAgICAgICAgICBmcm9tIFwiLi4vYWJzdHJhY3QvQ29sdW1uXCI7XHJcblxyXG5cclxuY2xhc3MgQ29sdW1uc1RleHQgZXh0ZW5kcyBDb2x1bW4ge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y9cclxuICAgICAqIEBwYXJhbSB7Y29yZXVpVGFibGVJbnN0YW5jZX0gdGFibGVcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSAgICAgICAgICAgICAgb3B0aW9uc1xyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3Rvcih0YWJsZSwgb3B0aW9ucykge1xyXG5cclxuICAgICAgICBvcHRpb25zID0gJC5leHRlbmQodHJ1ZSwge1xyXG4gICAgICAgICAgICB0eXBlOiAndGV4dCcsXHJcbiAgICAgICAgICAgIGZpZWxkOiBudWxsLFxyXG4gICAgICAgICAgICBsYWJlbDogbnVsbCxcclxuICAgICAgICAgICAgc2hvdzogdHJ1ZSxcclxuICAgICAgICAgICAgc2hvd0xhYmVsOiB0cnVlLFxyXG4gICAgICAgICAgICB3aWR0aDogbnVsbCxcclxuICAgICAgICAgICAgbWluV2lkdGg6IG51bGwsXHJcbiAgICAgICAgICAgIG1heFdpZHRoOiBudWxsLFxyXG4gICAgICAgICAgICBhdHRyOiBudWxsLFxyXG4gICAgICAgICAgICBub1dyYXA6IG51bGwsXHJcbiAgICAgICAgICAgIG5vV3JhcFRvZ2dsZTogbnVsbCxcclxuICAgICAgICAgICAgYXR0ckhlYWRlcjogbnVsbCxcclxuICAgICAgICAgICAgcmVuZGVyOiBudWxsXHJcbiAgICAgICAgfSwgb3B0aW9ucyk7XHJcblxyXG4gICAgICAgIHN1cGVyKHRhYmxlLCBvcHRpb25zKTtcclxuXHJcbiAgICAgICAgbGV0IHRhYmxlT3B0aW9ucyA9IHRoaXMuX3RhYmxlLmdldE9wdGlvbnMoKTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMubm9XcmFwIHx8XHJcbiAgICAgICAgICAgICh0aGlzLl9vcHRpb25zLm5vV3JhcCA9PT0gbnVsbCAmJiB0YWJsZU9wdGlvbnMubm9XcmFwKVxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICBpZiAoICEgdGhpcy5fb3B0aW9ucy5hdHRyKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9vcHRpb25zLmF0dHIgPSB7IGNsYXNzIDogJ2NvcmV1aV90YWJsZV9fbm8td3JhcCcgfTtcclxuXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9vcHRpb25zLmF0dHIgPSBjb3JldWlUYWJsZVV0aWxzLm1lcmdlQXR0cih0aGlzLl9vcHRpb25zLmF0dHIsIHtcclxuICAgICAgICAgICAgICAgICAgICBjbGFzczogJ2NvcmV1aV90YWJsZV9fbm8td3JhcCdcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLl9vcHRpb25zLm5vV3JhcCA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy5ub1dyYXBUb2dnbGUgfHxcclxuICAgICAgICAgICAgICAgICh0aGlzLl9vcHRpb25zLm5vV3JhcFRvZ2dsZSA9PT0gbnVsbCAmJiB0YWJsZU9wdGlvbnMubm9XcmFwVG9nZ2xlKVxyXG4gICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX29wdGlvbnMubm9XcmFwVG9nZ2xlID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQpNC+0YDQvNC40YDQvtCy0LDQvdC40LUg0LrQvtC90YLQtdC90YLQsFxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGNvbnRlbnRcclxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSByZWNvcmRcclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIHJlbmRlcihjb250ZW50LCByZWNvcmQpIHtcclxuXHJcbiAgICAgICAgaWYgKFsnc3RyaW5nJywgJ2JpZ2ludCcsICdzeW1ib2wnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2YgY29udGVudCkgPCAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAnJztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnRlbnQgPSBTdHJpbmcoY29udGVudClcclxuICAgICAgICAgICAgLnJlcGxhY2UoLzwvZywgJyZsdDsnKVxyXG4gICAgICAgICAgICAucmVwbGFjZSgvPi9nLCAnJmd0OycpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy5ub1dyYXApIHtcclxuICAgICAgICAgICAgY29udGVudCA9ICc8ZGl2PicgKyBjb250ZW50ICsgJzwvZGl2PidcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9vcHRpb25zLm5vV3JhcFRvZ2dsZSkge1xyXG4gICAgICAgICAgICAgICAgY29udGVudCArPSAnPGkgY2xhc3M9XCJiaSBiaS1jYXJldC1kb3duLWZpbGwgdG9nZ2xlXCI+PC9pPidcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGNvbnRlbnQ7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCBDb2x1bW5zVGV4dDsiLCJcclxuaW1wb3J0IGNvcmV1aVRhYmxlVXRpbHMgZnJvbSBcIi4uL2NvcmV1aS50YWJsZS51dGlsc1wiO1xyXG5pbXBvcnQgY29yZXVpVGFibGVUcGwgICBmcm9tIFwiLi4vY29yZXVpLnRhYmxlLnRlbXBsYXRlc1wiO1xyXG5pbXBvcnQgQ29sdW1uICAgICAgICAgICBmcm9tIFwiLi4vYWJzdHJhY3QvQ29sdW1uXCI7XHJcblxyXG5cclxuY2xhc3MgQ29sdW1uc0J1dHRvbiBleHRlbmRzIENvbHVtbiB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQmNC90LjRhtC40LDQu9C40LfQsNGG0LjRj1xyXG4gICAgICogQHBhcmFtIHtjb3JldWlUYWJsZUluc3RhbmNlfSB0YWJsZVxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9ICAgICAgICAgICAgICBvcHRpb25zXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKHRhYmxlLCBvcHRpb25zKSB7XHJcblxyXG4gICAgICAgIG9wdGlvbnMgPSAkLmV4dGVuZCh0cnVlLCB7XHJcbiAgICAgICAgICAgIHR5cGU6ICdidXR0b24nLFxyXG4gICAgICAgICAgICBmaWVsZDogbnVsbCxcclxuICAgICAgICAgICAgbGFiZWw6IG51bGwsXHJcbiAgICAgICAgICAgIHNob3c6IHRydWUsXHJcbiAgICAgICAgICAgIHdpZHRoOiBudWxsLFxyXG4gICAgICAgICAgICBtaW5XaWR0aDogbnVsbCxcclxuICAgICAgICAgICAgbWF4V2lkdGg6IG51bGwsXHJcbiAgICAgICAgfSwgb3B0aW9ucyk7XHJcblxyXG4gICAgICAgIHN1cGVyKHRhYmxlLCBvcHRpb25zKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQpNC+0YDQvNC40YDQvtCy0LDQvdC40LUg0LrQvtC90YLQtdC90YLQsFxyXG4gICAgICogQHBhcmFtIHtvYmplY3R9IGNvbnRlbnRcclxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSByZWNvcmRcclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIHJlbmRlcihjb250ZW50LCByZWNvcmQpIHtcclxuXHJcbiAgICAgICAgaWYgKCAhIGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QoY29udGVudCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIGlmICggISBjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KGNvbnRlbnQuYXR0cikpIHtcclxuICAgICAgICAgICAgY29udGVudC5hdHRyID0ge31cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICggISBjb250ZW50LmF0dHIuaGFzT3duUHJvcGVydHkoJ2NsYXNzJykpIHtcclxuICAgICAgICAgICAgY29udGVudC5hdHRyLmNsYXNzID0gJ2J0biBidG4tb3V0bGluZS1zZWNvbmRhcnknXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoY29udGVudC5hdHRyLmhhc093blByb3BlcnR5KCd0eXBlJykpIHtcclxuICAgICAgICAgICAgZGVsZXRlIGNvbnRlbnQuYXR0ci50eXBlO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIGxldCBhdHRyaWJ1dGVzID0gW107XHJcblxyXG4gICAgICAgICQuZWFjaChjb250ZW50LmF0dHIsIGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xyXG4gICAgICAgICAgICBpZiAoWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2YgdmFsdWUpID49IDApIHtcclxuICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXMucHVzaChuYW1lICsgJz1cIicgKyB2YWx1ZSArICdcIicpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGxldCBidG4gPSAkKFxyXG4gICAgICAgICAgICBjb3JldWlUYWJsZVV0aWxzLnJlbmRlcihjb3JldWlUYWJsZVRwbFsnY29sdW1ucy9idXR0b24uaHRtbCddLCB7XHJcbiAgICAgICAgICAgICAgICBjb250ZW50OiBjb250ZW50LmNvbnRlbnQsXHJcbiAgICAgICAgICAgICAgICBhdHRyOiBhdHRyaWJ1dGVzLmxlbmd0aCA+IDAgPyAoJyAnICsgYXR0cmlidXRlcy5qb2luKCcgJykpIDogJycsXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgKTtcclxuXHJcblxyXG4gICAgICAgIGlmIChjb250ZW50Lmhhc093blByb3BlcnR5KCdvbkNsaWNrJykpIHtcclxuICAgICAgICAgICAgbGV0IHRoYXQgPSB0aGlzO1xyXG5cclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjb250ZW50Lm9uQ2xpY2sgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgICAgIGJ0bi5jbGljayhmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICBldmVudC5jYW5jZWxCdWJibGUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnQub25DbGljayhyZWNvcmQsIHRoYXQuX3RhYmxlKVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBjb250ZW50Lm9uQ2xpY2sgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgZnVuYyA9IG5ldyBGdW5jdGlvbigncmVjb3JkJywgJ3RhYmxlJywgY29udGVudC5vbkNsaWNrKTtcclxuXHJcbiAgICAgICAgICAgICAgICBidG4uY2xpY2soZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQuY2FuY2VsQnViYmxlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBmdW5jKHJlY29yZCwgdGhhdC5fdGFibGUpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgYnRuLmNsaWNrKGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50LmNhbmNlbEJ1YmJsZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGJ0bi5jbGljayhmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAgICAgICAgIGV2ZW50LmNhbmNlbEJ1YmJsZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBidG47XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IENvbHVtbnNCdXR0b247IiwiXHJcbmltcG9ydCBjb3JldWlUYWJsZVV0aWxzIGZyb20gXCIuLi9jb3JldWkudGFibGUudXRpbHNcIjtcclxuaW1wb3J0IGNvcmV1aVRhYmxlVHBsICAgZnJvbSBcIi4uL2NvcmV1aS50YWJsZS50ZW1wbGF0ZXNcIjtcclxuaW1wb3J0IENvbHVtbiAgICAgICAgICAgZnJvbSBcIi4uL2Fic3RyYWN0L0NvbHVtblwiO1xyXG5cclxuY2xhc3MgQ29sdW1uc0xpbmsgZXh0ZW5kcyBDb2x1bW4ge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y9cclxuICAgICAqIEBwYXJhbSB7Y29yZXVpVGFibGVJbnN0YW5jZX0gdGFibGVcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSAgICAgICAgICAgICAgb3B0aW9uc1xyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3Rvcih0YWJsZSwgb3B0aW9ucykge1xyXG5cclxuICAgICAgICBvcHRpb25zID0gJC5leHRlbmQodHJ1ZSwge1xyXG4gICAgICAgICAgICB0eXBlOiAnbGluaycsXHJcbiAgICAgICAgICAgIGZpZWxkOiBudWxsLFxyXG4gICAgICAgICAgICBsYWJlbDogbnVsbCxcclxuICAgICAgICAgICAgc2hvdzogdHJ1ZSxcclxuICAgICAgICAgICAgd2lkdGg6IG51bGwsXHJcbiAgICAgICAgICAgIG1pbldpZHRoOiBudWxsLFxyXG4gICAgICAgICAgICBtYXhXaWR0aDogbnVsbCxcclxuICAgICAgICB9LCBvcHRpb25zKTtcclxuXHJcbiAgICAgICAgc3VwZXIodGFibGUsIG9wdGlvbnMpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCa0L7QvdCy0LXRgNGC0LjRgNC+0LLQsNC90LjQtSDQt9C90LDRh9C10L3QuNGPINC60L7Qu9C+0L3QutC4INCyINGC0LXQutGB0YJcclxuICAgICAqIEBwYXJhbSB7Kn0gY29sdW1uVmFsdWVcclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIGNvbnZlcnRUb1N0cmluZyhjb2x1bW5WYWx1ZSkge1xyXG5cclxuICAgICAgICBpZiAoWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2YgY29sdW1uVmFsdWUpID49IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuIFN0cmluZyhjb2x1bW5WYWx1ZSk7XHJcblxyXG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGNvbHVtblZhbHVlID09PSAnb2JqZWN0JyAmJlxyXG4gICAgICAgICAgICBjb2x1bW5WYWx1ZS5oYXNPd25Qcm9wZXJ0eSgnY29udGVudCcpICYmXHJcbiAgICAgICAgICAgIHR5cGVvZiBjb2x1bW5WYWx1ZS5jb250ZW50ID09PSAnc3RyaW5nJ1xyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICByZXR1cm4gY29sdW1uVmFsdWUuY29udGVudDtcclxuXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQpNC+0YDQvNC40YDQvtCy0LDQvdC40LUg0LrQvtC90YLQtdC90YLQsFxyXG4gICAgICogQHBhcmFtIHtvYmplY3R8c3RyaW5nfSBjb250ZW50XHJcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gICAgICAgIHJlY29yZFxyXG4gICAgICogQHJldHVybnMge3N0cmluZ31cclxuICAgICAqL1xyXG4gICAgcmVuZGVyKGNvbnRlbnQsIHJlY29yZCkge1xyXG5cclxuICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgICh0eXBlb2YgY29udGVudCAhPT0gJ3N0cmluZycgfHwgISBjb250ZW50KVxyXG4gICAgICAgICAgICAmJlxyXG4gICAgICAgICAgICAoICEgY29yZXVpVGFibGVVdGlscy5pc09iamVjdChjb250ZW50KSB8fFxyXG4gICAgICAgICAgICAgICEgY29udGVudC5oYXNPd25Qcm9wZXJ0eSgndXJsJykgfHxcclxuICAgICAgICAgICAgICB0eXBlb2YgY29udGVudC51cmwgIT09ICdzdHJpbmcnIHx8XHJcbiAgICAgICAgICAgICAgISBjb250ZW50LnVybFxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAnJztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBsaW5rQ29udGVudCA9ICcnO1xyXG4gICAgICAgIGxldCBhdHRyICAgICAgICA9IHt9O1xyXG5cclxuICAgICAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgIGF0dHIuaHJlZiAgID0gY29udGVudDtcclxuICAgICAgICAgICAgbGlua0NvbnRlbnQgPSBjb250ZW50O1xyXG5cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAoY29udGVudC5oYXNPd25Qcm9wZXJ0eSgnYXR0cicpICYmXHJcbiAgICAgICAgICAgICAgICBjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KGNvbnRlbnQuYXR0cilcclxuICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICBhdHRyID0gY29udGVudC5hdHRyO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoYXR0ci5oYXNPd25Qcm9wZXJ0eSgnaHJlZicpKSB7XHJcbiAgICAgICAgICAgICAgICBkZWxldGUgYXR0ci5ocmVmO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBhdHRyLmhyZWYgPSBjb250ZW50LnVybDtcclxuXHJcblxyXG4gICAgICAgICAgICBpZiAoY29udGVudC5oYXNPd25Qcm9wZXJ0eSgnY29udGVudCcpICYmXHJcbiAgICAgICAgICAgICAgICB0eXBlb2YgY29udGVudC5jb250ZW50ID09PSAnc3RyaW5nJyAmJlxyXG4gICAgICAgICAgICAgICAgY29udGVudC5jb250ZW50XHJcbiAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgbGlua0NvbnRlbnQgPSBjb250ZW50LmNvbnRlbnQ7XHJcblxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgbGlua0NvbnRlbnQgPSBjb250ZW50LnVybDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIGxldCBhdHRyaWJ1dGVzID0gW107XHJcblxyXG4gICAgICAgICQuZWFjaChhdHRyLCBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcclxuICAgICAgICAgICAgaWYgKFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIHZhbHVlKSA+PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzLnB1c2gobmFtZSArICc9XCInICsgdmFsdWUgKyAnXCInKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBsZXQgbGluayA9ICQoXHJcbiAgICAgICAgICAgIGNvcmV1aVRhYmxlVXRpbHMucmVuZGVyKGNvcmV1aVRhYmxlVHBsWydjb2x1bW5zL2xpbmsuaHRtbCddLCB7XHJcbiAgICAgICAgICAgICAgICBjb250ZW50OiBsaW5rQ29udGVudCxcclxuICAgICAgICAgICAgICAgIGF0dHI6IGF0dHJpYnV0ZXMubGVuZ3RoID4gMCA/ICgnICcgKyBhdHRyaWJ1dGVzLmpvaW4oJyAnKSkgOiAnJyxcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICApO1xyXG5cclxuXHJcbiAgICAgICAgbGluay5jbGljayhmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAgICAgZXZlbnQuY2FuY2VsQnViYmxlID0gdHJ1ZTtcclxuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGxpbms7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCBDb2x1bW5zTGluazsiLCJcclxuaW1wb3J0IGNvcmV1aVRhYmxlVXRpbHMgZnJvbSBcIi4uL2NvcmV1aS50YWJsZS51dGlsc1wiO1xyXG5pbXBvcnQgY29yZXVpVGFibGVUcGwgICBmcm9tIFwiLi4vY29yZXVpLnRhYmxlLnRlbXBsYXRlc1wiO1xyXG5pbXBvcnQgQ29yZXVpVGFibGVVdGlscyBmcm9tIFwiLi4vY29yZXVpLnRhYmxlLnV0aWxzXCI7XHJcbmltcG9ydCBDb2x1bW4gICAgICAgICAgIGZyb20gXCIuLi9hYnN0cmFjdC9Db2x1bW5cIjtcclxuXHJcblxyXG5jbGFzcyBDb2x1bW5zTWVudSBleHRlbmRzIENvbHVtbiB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQmNC90LjRhtC40LDQu9C40LfQsNGG0LjRj1xyXG4gICAgICogQHBhcmFtIHtjb3JldWlUYWJsZUluc3RhbmNlfSB0YWJsZVxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9ICAgICAgICAgICAgICBvcHRpb25zXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKHRhYmxlLCBvcHRpb25zKSB7XHJcblxyXG4gICAgICAgIG9wdGlvbnMgPSAkLmV4dGVuZCh0cnVlLCB7XHJcbiAgICAgICAgICAgIHR5cGU6ICdtZW51JyxcclxuICAgICAgICAgICAgZmllbGQ6IG51bGwsXHJcbiAgICAgICAgICAgIGxhYmVsOiBudWxsLFxyXG4gICAgICAgICAgICBzaG93OiB0cnVlLFxyXG4gICAgICAgICAgICB3aWR0aDogbnVsbCxcclxuICAgICAgICAgICAgbWluV2lkdGg6IG51bGwsXHJcbiAgICAgICAgICAgIG1heFdpZHRoOiBudWxsLFxyXG4gICAgICAgIH0sIG9wdGlvbnMpO1xyXG5cclxuICAgICAgICBzdXBlcih0YWJsZSwgb3B0aW9ucyk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KTQvtGA0LzQuNGA0L7QstCw0L3QuNC1INC60L7QvdGC0LXQvdGC0LBcclxuICAgICAqIEBwYXJhbSB7b2JqZWN0fHN0cmluZ30gY29udGVudFxyXG4gICAgICogQHBhcmFtIHtvYmplY3R9ICAgICAgICByZWNvcmRcclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIHJlbmRlcihjb250ZW50LCByZWNvcmQpIHtcclxuXHJcbiAgICAgICAgaWYgKCAhIGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QoY29udGVudCkgfHxcclxuICAgICAgICAgICAgICEgY29udGVudC5oYXNPd25Qcm9wZXJ0eSgnaXRlbXMnKSB8fFxyXG4gICAgICAgICAgICAgISBBcnJheS5pc0FycmF5KGNvbnRlbnQuaXRlbXMpIHx8XHJcbiAgICAgICAgICAgIGNvbnRlbnQuaXRlbXMubGVuZ3RoID09PSAwXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAnJztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBpdGVtcyA9IFtdO1xyXG4gICAgICAgIGxldCBhdHRyICA9IHt9O1xyXG5cclxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShjb250ZW50Lml0ZW1zKSkge1xyXG4gICAgICAgICAgICAkLmVhY2goY29udGVudC5pdGVtcywgZnVuY3Rpb24gKGtleSwgaXRlbSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKENvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QoaXRlbSkgJiYgdHlwZW9mIGl0ZW0udHlwZSA9PT0gJ3N0cmluZycpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0udHlwZSA9PT0gJ2xpbmsnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpdGVtLmhhc093blByb3BlcnR5KCd1cmwnKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5oYXNPd25Qcm9wZXJ0eSgnY29udGVudCcpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlb2YgaXRlbS51cmwgPT09ICdzdHJpbmcnICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlb2YgaXRlbS5jb250ZW50ID09PSAnc3RyaW5nJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBsaW5rQXR0ciA9IHt9O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpdGVtLmhhc093blByb3BlcnR5KCdhdHRyJykgfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KGl0ZW0uYXR0cilcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmtBdHRyID0gaXRlbS5hdHRyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxpbmtBdHRyLmhhc093blByb3BlcnR5KCdocmVmJykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgbGlua0F0dHIuaHJlZjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoICEgbGlua0F0dHIuaGFzT3duUHJvcGVydHkoJ2NsYXNzJykgfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlb2YgbGlua0F0dHIuY2xhc3MgIT09ICdzdHJpbmcnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5rQXR0ci5jbGFzcyA9ICdkcm9wZG93bi1pdGVtJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGlua0F0dHIuY2xhc3MgKz0gJyBkcm9wZG93bi1pdGVtJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgbGlua0F0dHJpYnV0ZXMgPSBbXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLmVhY2gobGlua0F0dHIsIGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiB2YWx1ZSkgPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5rQXR0cmlidXRlcy5wdXNoKG5hbWUgKyAnPVwiJyArIHZhbHVlICsgJ1wiJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2xpbmsnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybDogaXRlbS51cmwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudDogaXRlbS5jb250ZW50LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHI6IGxpbmtBdHRyaWJ1dGVzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpdGVtLnR5cGUgPT09ICdidXR0b24nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpdGVtLmhhc093blByb3BlcnR5KCdjb250ZW50JykgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0uaGFzT3duUHJvcGVydHkoJ29uQ2xpY2snKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGl0ZW0uY29udGVudCA9PT0gJ3N0cmluZycgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFsnc3RyaW5nJywgJ2Z1bmN0aW9uJ10uaW5kZXhPZih0eXBlb2YgaXRlbS5vbkNsaWNrKSA+PSAwXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGJ0bkF0dHIgPSB7fTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbS5oYXNPd25Qcm9wZXJ0eSgnYXR0cicpIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29yZXVpVGFibGVVdGlscy5pc09iamVjdChpdGVtLmF0dHIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBidG5BdHRyID0gaXRlbS5hdHRyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChidG5BdHRyLmhhc093blByb3BlcnR5KCd0eXBlJykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgYnRuQXR0ci50eXBlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGJ0bkF0dHIuaGFzT3duUHJvcGVydHkoJ2lkJykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgYnRuQXR0clsnaWQnXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoICEgYnRuQXR0ci5oYXNPd25Qcm9wZXJ0eSgnY2xhc3MnKSB8fFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVvZiBidG5BdHRyLmNsYXNzICE9PSAnc3RyaW5nJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnRuQXR0ci5jbGFzcyA9ICdkcm9wZG93bi1pdGVtJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnRuQXR0ci5jbGFzcyArPSAnIGRyb3Bkb3duLWl0ZW0nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBidG5BdHRyaWJ1dGVzID0gW107XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJC5lYWNoKGJ0bkF0dHIsIGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiB2YWx1ZSkgPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBidG5BdHRyaWJ1dGVzLnB1c2gobmFtZSArICc9XCInICsgdmFsdWUgKyAnXCInKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtcy5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnYnV0dG9uJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogY29yZXVpVGFibGVVdGlscy5oYXNoQ29kZSgpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IGl0ZW0uY29udGVudCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrOiBpdGVtLm9uQ2xpY2ssXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cjogYnRuQXR0cmlidXRlcy5sZW5ndGggPiAwID8gKCcgJyArIGJ0bkF0dHJpYnV0ZXMuam9pbignICcpKSA6ICcnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaXRlbS50eXBlID09PSAnZGl2aWRlcicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnZGl2aWRlcicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGl0ZW0udHlwZSA9PT0gJ2hlYWRlcicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0uaGFzT3duUHJvcGVydHkoJ2NvbnRlbnQnKSAmJiB0eXBlb2YgaXRlbS5jb250ZW50ID09PSAnc3RyaW5nJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdoZWFkZXInLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IGl0ZW0uY29udGVudCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChjb250ZW50Lmhhc093blByb3BlcnR5KCdhdHRyJykgfHxcclxuICAgICAgICAgICAgY29yZXVpVGFibGVVdGlscy5pc09iamVjdChjb250ZW50LmF0dHIpXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIGF0dHIgPSBjb250ZW50LmF0dHI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoICEgYXR0ci5oYXNPd25Qcm9wZXJ0eSgnY2xhc3MnKSB8fFxyXG4gICAgICAgICAgICBbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiBhdHRyLmNsYXNzKSA8IDBcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgYXR0ci5jbGFzcyA9ICdidG4gcm91bmRlZC0xJztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChhdHRyLmhhc093blByb3BlcnR5KCd0eXBlJykpIHtcclxuICAgICAgICAgICAgZGVsZXRlIGF0dHIudHlwZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChhdHRyLmhhc093blByb3BlcnR5KCdkYXRhLWJzLXRvZ2dsZScpKSB7XHJcbiAgICAgICAgICAgIGRlbGV0ZSBhdHRyWydkYXRhLWJzLXRvZ2dsZSddO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIGxldCBhdHRyaWJ1dGVzID0gW107XHJcblxyXG4gICAgICAgICQuZWFjaChhdHRyLCBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcclxuICAgICAgICAgICAgaWYgKFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIHZhbHVlKSA+PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzLnB1c2gobmFtZSArICc9XCInICsgdmFsdWUgKyAnXCInKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuXHJcbiAgICAgICAgbGV0IG1lbnVDb250ZW50ID0gY29udGVudC5oYXNPd25Qcm9wZXJ0eSgnY29udGVudCcpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGNvbnRlbnQuY29udGVudCA9PT0gJ3N0cmluZycgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50LmNvbnRlbnRcclxuICAgICAgICAgICAgPyBjb250ZW50LmNvbnRlbnRcclxuICAgICAgICAgICAgOiAnPGkgY2xhc3M9XCJiaSBiaS10aHJlZS1kb3RzLXZlcnRpY2FsXCI+PC9pPic7XHJcblxyXG4gICAgICAgIGxldCBwb3NpdGlvbiA9IGNvbnRlbnQuaGFzT3duUHJvcGVydHkoJ3Bvc2l0aW9uJykgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICB0eXBlb2YgY29udGVudC5wb3NpdGlvbiA9PT0gJ3N0cmluZycgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50LnBvc2l0aW9uXHJcbiAgICAgICAgICAgID8gY29udGVudC5wb3NpdGlvblxyXG4gICAgICAgICAgICA6ICdlbmQnO1xyXG5cclxuXHJcbiAgICAgICAgbGV0IG1lbnUgPSAkKFxyXG4gICAgICAgICAgICBjb3JldWlUYWJsZVV0aWxzLnJlbmRlcihjb3JldWlUYWJsZVRwbFsnY29sdW1ucy9tZW51Lmh0bWwnXSwge1xyXG4gICAgICAgICAgICAgICAgY29udGVudDogbWVudUNvbnRlbnQsXHJcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjogcG9zaXRpb24sXHJcbiAgICAgICAgICAgICAgICBhdHRyOiBhdHRyaWJ1dGVzLmxlbmd0aCA+IDAgPyAoJyAnICsgYXR0cmlidXRlcy5qb2luKCcgJykpIDogJycsXHJcbiAgICAgICAgICAgICAgICBpdGVtczogaXRlbXMsXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgbWVudS5jbGljayhmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAgICAgZXZlbnQuY2FuY2VsQnViYmxlID0gdHJ1ZTtcclxuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICB9KTtcclxuXHJcblxyXG4gICAgICAgIGxldCBkcm9wZG93bk1lbnUgPSBudWxsO1xyXG5cclxuICAgICAgICAkKG1lbnUpLm9uKCdzaG93LmJzLmRyb3Bkb3duJywgZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgZHJvcGRvd25NZW51ID0gJChtZW51KS5maW5kKCcuZHJvcGRvd24tbWVudScpO1xyXG5cclxuICAgICAgICAgICAgJCgnYm9keScpLmFwcGVuZChkcm9wZG93bk1lbnUuZGV0YWNoKCkpO1xyXG5cclxuICAgICAgICAgICAgdmFyIGVPZmZzZXQgPSAkKGUudGFyZ2V0KS5vZmZzZXQoKTtcclxuXHJcbiAgICAgICAgICAgIGRyb3Bkb3duTWVudS5jc3Moe1xyXG4gICAgICAgICAgICAgICAgJ2Rpc3BsYXknOiAnYmxvY2snLFxyXG4gICAgICAgICAgICAgICAgJ3RvcCcgICAgOiBlT2Zmc2V0LnRvcCArICQoZS50YXJnZXQpLm91dGVySGVpZ2h0KCksXHJcbiAgICAgICAgICAgICAgICAnbGVmdCcgICA6IGVPZmZzZXQubGVmdFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgJChtZW51KS5vbignaGlkZS5icy5kcm9wZG93bicsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgICQobWVudSkuYXBwZW5kKGRyb3Bkb3duTWVudS5kZXRhY2goKSk7XHJcbiAgICAgICAgICAgIGRyb3Bkb3duTWVudS5oaWRlKCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG5cclxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShpdGVtcykpIHtcclxuICAgICAgICAgICAgbGV0IHRoYXQgPSB0aGlzO1xyXG5cclxuICAgICAgICAgICAgJC5lYWNoKGl0ZW1zLCBmdW5jdGlvbiAoa2V5LCBpdGVtKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoQ29yZXVpVGFibGVVdGlscy5pc09iamVjdChpdGVtKSAmJiB0eXBlb2YgaXRlbS50eXBlID09PSAnc3RyaW5nJykge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbS50eXBlID09PSAnYnV0dG9uJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbS5oYXNPd25Qcm9wZXJ0eSgnY29udGVudCcpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtLmhhc093blByb3BlcnR5KCdvbkNsaWNrJykgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFsnc3RyaW5nJywgJ2Z1bmN0aW9uJ10uaW5kZXhPZih0eXBlb2YgaXRlbS5vbkNsaWNrKSA+PSAwICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlb2YgaXRlbS5jb250ZW50ID09PSAnc3RyaW5nJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCdidXR0b24jYnRuLWRyb3Bkb3duLScgKyBpdGVtLmlkLCBtZW51KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5jbGljayhmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBpdGVtLm9uQ2xpY2sgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0ub25DbGljayhyZWNvcmQsIHRoYXQuX3RhYmxlLCBldmVudCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBpdGVtLm9uQ2xpY2sgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAobmV3IEZ1bmN0aW9uKCdyZWNvcmQnLCAndGFibGUnLCAnZXZlbnQnLCBpdGVtLm9uQ2xpY2spKShyZWNvcmQsIHRoYXQuX3RhYmxlLCBldmVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gbWVudTtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IENvbHVtbnNNZW51OyIsImltcG9ydCBjb3JldWlUYWJsZVV0aWxzIGZyb20gXCIuLi9jb3JldWkudGFibGUudXRpbHNcIjtcclxuaW1wb3J0IGNvcmV1aVRhYmxlVHBsICAgZnJvbSBcIi4uL2NvcmV1aS50YWJsZS50ZW1wbGF0ZXNcIjtcclxuaW1wb3J0IENvbHVtbiAgICAgICAgICAgZnJvbSBcIi4uL2Fic3RyYWN0L0NvbHVtblwiO1xyXG5cclxuY2xhc3MgQ29sdW1uc0JhZGdlIGV4dGVuZHMgQ29sdW1uIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPXHJcbiAgICAgKiBAcGFyYW0ge2NvcmV1aVRhYmxlSW5zdGFuY2V9IHRhYmxlXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gICAgICAgICAgICAgIG9wdGlvbnNcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IodGFibGUsIG9wdGlvbnMpIHtcclxuXHJcbiAgICAgICAgb3B0aW9ucyA9ICQuZXh0ZW5kKHRydWUsIHtcclxuICAgICAgICAgICAgdHlwZTogJ2JhZGdlJyxcclxuICAgICAgICAgICAgZmllbGQ6IG51bGwsXHJcbiAgICAgICAgICAgIGxhYmVsOiBudWxsLFxyXG4gICAgICAgICAgICBzaG93OiB0cnVlLFxyXG4gICAgICAgICAgICB3aWR0aDogbnVsbCxcclxuICAgICAgICAgICAgbWluV2lkdGg6IG51bGwsXHJcbiAgICAgICAgICAgIG1heFdpZHRoOiBudWxsLFxyXG4gICAgICAgIH0sIG9wdGlvbnMpO1xyXG5cclxuICAgICAgICBzdXBlcih0YWJsZSwgb3B0aW9ucyk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0JrQvtC90LLQtdGA0YLQuNGA0L7QstCw0L3QuNC1INC30L3QsNGH0LXQvdC40Y8g0LrQvtC70L7QvdC60Lgg0LIg0YLQtdC60YHRglxyXG4gICAgICogQHBhcmFtIHsqfSBjb2x1bW5WYWx1ZVxyXG4gICAgICogQHJldHVybnMge3N0cmluZ31cclxuICAgICAqL1xyXG4gICAgY29udmVydFRvU3RyaW5nKGNvbHVtblZhbHVlKSB7XHJcblxyXG4gICAgICAgIGlmICh0eXBlb2YgY29sdW1uVmFsdWUgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBjb2x1bW5WYWx1ZTtcclxuXHJcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgY29sdW1uVmFsdWUgPT09ICdudW1iZXInKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBTdHJpbmcoY29sdW1uVmFsdWUpO1xyXG5cclxuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBjb2x1bW5WYWx1ZSA9PT0gJ29iamVjdCcgJiZcclxuICAgICAgICAgICAgY29sdW1uVmFsdWUuaGFzT3duUHJvcGVydHkoJ3RleHQnKSAmJlxyXG4gICAgICAgICAgICBbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiBjb2x1bW5WYWx1ZS50ZXh0KSA+PSAwXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBTdHJpbmcoY29sdW1uVmFsdWUudGV4dCk7XHJcblxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiAnJztcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KTQvtGA0LzQuNGA0L7QstCw0L3QuNC1INC60L7QvdGC0LXQvdGC0LBcclxuICAgICAqIEBwYXJhbSB7b2JqZWN0fHN0cmluZ3xudW1iZXJ9IGNvbnRlbnRcclxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSAgICAgICAgICAgICAgIHJlY29yZFxyXG4gICAgICogQHJldHVybnMge3N0cmluZ31cclxuICAgICAqL1xyXG4gICAgcmVuZGVyKGNvbnRlbnQsIHJlY29yZCkge1xyXG5cclxuICAgICAgICBpZiAoWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2YgY29udGVudCkgPj0gMCkge1xyXG4gICAgICAgICAgICBjb250ZW50ID0geyB0eXBlOiAnc2Vjb25kYXJ5JywgdGV4dDogY29udGVudCB9O1xyXG5cclxuICAgICAgICB9IGVsc2UgaWYgKCAhIGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QoY29udGVudCkgfHxcclxuICAgICAgICAgICAgICEgY29udGVudC5oYXNPd25Qcm9wZXJ0eSgndHlwZScpIHx8XHJcbiAgICAgICAgICAgICAhIGNvbnRlbnQuaGFzT3duUHJvcGVydHkoJ3RleHQnKSB8fFxyXG4gICAgICAgICAgICAgdHlwZW9mIGNvbnRlbnQudHlwZSAhPT0gJ3N0cmluZycgfHxcclxuICAgICAgICAgICAgIHR5cGVvZiBjb250ZW50LnRleHQgIT09ICdzdHJpbmcnIHx8XHJcbiAgICAgICAgICAgICAhIGNvbnRlbnQudGV4dFxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICByZXR1cm4gJyc7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoY29udGVudC50eXBlID09PSAnJyB8fCBjb250ZW50LnR5cGUgPT09ICdub25lJykge1xyXG4gICAgICAgICAgICByZXR1cm4gY29udGVudC50ZXh0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGNvcmV1aVRhYmxlVXRpbHMucmVuZGVyKGNvcmV1aVRhYmxlVHBsWydjb2x1bW5zL2JhZGdlLmh0bWwnXSwge1xyXG4gICAgICAgICAgICB0eXBlOiBjb250ZW50LnR5cGUsXHJcbiAgICAgICAgICAgIHRleHQ6IGNvbnRlbnQudGV4dFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBDb2x1bW5zQmFkZ2U7IiwiaW1wb3J0IGNvcmV1aVRhYmxlVXRpbHMgIGZyb20gXCIuLi9jb3JldWkudGFibGUudXRpbHNcIjtcclxuaW1wb3J0IGNvcmV1aVRhYmxlUmVuZGVyIGZyb20gXCIuLi9jb3JldWkudGFibGUucmVuZGVyXCI7XHJcbmltcG9ydCBDb2x1bW4gICAgICAgICAgICBmcm9tIFwiLi4vYWJzdHJhY3QvQ29sdW1uXCI7XHJcblxyXG5jbGFzcyBDb2x1bW5zQ29tcG9uZW50IGV4dGVuZHMgQ29sdW1uIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPXHJcbiAgICAgKiBAcGFyYW0ge2NvcmV1aVRhYmxlSW5zdGFuY2V9IHRhYmxlXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gICAgICAgICAgICAgIG9wdGlvbnNcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IodGFibGUsIG9wdGlvbnMpIHtcclxuXHJcbiAgICAgICAgb3B0aW9ucyA9ICQuZXh0ZW5kKHRydWUsIHtcclxuICAgICAgICAgICAgdHlwZTogJ2NvbXBvbmVudCcsXHJcbiAgICAgICAgICAgIGZpZWxkOiBudWxsLFxyXG4gICAgICAgICAgICBsYWJlbDogbnVsbCxcclxuICAgICAgICAgICAgc2hvdzogdHJ1ZSxcclxuICAgICAgICAgICAgd2lkdGg6IG51bGwsXHJcbiAgICAgICAgICAgIG1pbldpZHRoOiBudWxsLFxyXG4gICAgICAgICAgICBtYXhXaWR0aDogbnVsbCxcclxuICAgICAgICB9LCBvcHRpb25zKTtcclxuXHJcbiAgICAgICAgc3VwZXIodGFibGUsIG9wdGlvbnMpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCk0L7RgNC80LjRgNC+0LLQsNC90LjQtSDQutC+0L3RgtC10L3RgtCwXHJcbiAgICAgKiBAcGFyYW0ge29iamVjdHxzdHJpbmd9IGNvbnRlbnRcclxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSAgICAgICAgcmVjb3JkXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxyXG4gICAgICovXHJcbiAgICByZW5kZXIoY29udGVudCwgcmVjb3JkKSB7XHJcblxyXG4gICAgICAgIGlmICggISBjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KGNvbnRlbnQpIHx8XHJcbiAgICAgICAgICAgICAhIGNvbnRlbnQuaGFzT3duUHJvcGVydHkoJ2NvbXBvbmVudCcpIHx8XHJcbiAgICAgICAgICAgICB0eXBlb2YgY29udGVudC5jb21wb25lbnQgIT09ICdzdHJpbmcnIHx8XHJcbiAgICAgICAgICAgICAhIGNvbnRlbnQuY29tcG9uZW50XHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAnJztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBjb3JldWlUYWJsZVJlbmRlci5yZW5kZXJDb21wb25lbnRzKHRoaXMuX3RhYmxlLCBjb250ZW50LCAncmVjb3Jkc19zaG93Jyk7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCBDb2x1bW5zQ29tcG9uZW50OyIsImltcG9ydCBjb3JldWlUYWJsZVV0aWxzIGZyb20gXCIuLi9jb3JldWkudGFibGUudXRpbHNcIjtcclxuaW1wb3J0IGNvcmV1aVRhYmxlVHBsICAgZnJvbSBcIi4uL2NvcmV1aS50YWJsZS50ZW1wbGF0ZXNcIjtcclxuaW1wb3J0IENvbHVtbiAgICAgICAgICAgZnJvbSBcIi4uL2Fic3RyYWN0L0NvbHVtblwiO1xyXG5cclxuXHJcbmNsYXNzIENvbHVtbnNQcm9ncmVzcyBleHRlbmRzIENvbHVtbiB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQmNC90LjRhtC40LDQu9C40LfQsNGG0LjRj1xyXG4gICAgICogQHBhcmFtIHtjb3JldWlUYWJsZUluc3RhbmNlfSB0YWJsZVxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9ICAgICAgICAgICAgICBvcHRpb25zXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKHRhYmxlLCBvcHRpb25zKSB7XHJcblxyXG4gICAgICAgIG9wdGlvbnMgPSAkLmV4dGVuZCh0cnVlLCB7XHJcbiAgICAgICAgICAgIHR5cGU6ICdwcm9ncmVzcycsXHJcbiAgICAgICAgICAgIGZpZWxkOiBudWxsLFxyXG4gICAgICAgICAgICBsYWJlbDogbnVsbCxcclxuICAgICAgICAgICAgc2hvdzogdHJ1ZSxcclxuICAgICAgICAgICAgd2lkdGg6IG51bGwsXHJcbiAgICAgICAgICAgIG1pbldpZHRoOiBudWxsLFxyXG4gICAgICAgICAgICBtYXhXaWR0aDogbnVsbCxcclxuICAgICAgICAgICAgYXR0cjoge30sXHJcblxyXG4gICAgICAgICAgICBzaG93UGVyY2VudDogbnVsbCxcclxuICAgICAgICAgICAgYmFyQ29sb3I6ICdwcmltYXJ5JyxcclxuICAgICAgICAgICAgYmFyV2lkdGg6IG51bGwsXHJcbiAgICAgICAgICAgIGJhckhlaWdodDogbnVsbCxcclxuICAgICAgICB9LCBvcHRpb25zKTtcclxuXHJcbiAgICAgICAgc3VwZXIodGFibGUsIG9wdGlvbnMpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCa0L7QvdCy0LXRgNGC0LjRgNC+0LLQsNC90LjQtSDQt9C90LDRh9C10L3QuNGPINC60L7Qu9C+0L3QutC4INCyINGC0LXQutGB0YJcclxuICAgICAqIEBwYXJhbSB7Kn0gY29sdW1uVmFsdWVcclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIGNvbnZlcnRUb1N0cmluZyhjb2x1bW5WYWx1ZSkge1xyXG5cclxuICAgICAgICBpZiAoWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2YgY29sdW1uVmFsdWUpID49IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuIFN0cmluZyhjb2x1bW5WYWx1ZSk7XHJcblxyXG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGNvbHVtblZhbHVlID09PSAnb2JqZWN0JyAmJlxyXG4gICAgICAgICAgICBjb2x1bW5WYWx1ZS5oYXNPd25Qcm9wZXJ0eSgncGVyY2VudCcpICYmXHJcbiAgICAgICAgICAgIFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIGNvbHVtblZhbHVlLnBlcmNlbnQpID49IDBcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgcmV0dXJuIFN0cmluZyhjb2x1bW5WYWx1ZS5wZXJjZW50KTtcclxuXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQpNC+0YDQvNC40YDQvtCy0LDQvdC40LUg0LrQvtC90YLQtdC90YLQsFxyXG4gICAgICogQHBhcmFtIHtvYmplY3R8c3RyaW5nfG51bWJlcn0gY29udGVudFxyXG4gICAgICogQHBhcmFtIHtvYmplY3R9ICAgICAgICAgICAgICByZWNvcmRcclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIHJlbmRlcihjb250ZW50LCByZWNvcmQpIHtcclxuXHJcbiAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICAoICEgY29yZXVpVGFibGVVdGlscy5pc051bWVyaWMoY29udGVudCkpICYmXHJcbiAgICAgICAgICAgIChcclxuICAgICAgICAgICAgICAgICEgY29yZXVpVGFibGVVdGlscy5pc09iamVjdChjb250ZW50KSB8fFxyXG4gICAgICAgICAgICAgICAgISBjb250ZW50Lmhhc093blByb3BlcnR5KCdwZXJjZW50JykgfHxcclxuICAgICAgICAgICAgICAgICEgY29yZXVpVGFibGVVdGlscy5pc051bWVyaWMoY29udGVudC5wZXJjZW50KVxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAnJztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBkZXNjcmlwdGlvbiA9IG51bGw7XHJcbiAgICAgICAgbGV0IHBlcmNlbnQgICAgID0gMDtcclxuICAgICAgICBsZXQgcGVyY2VudFRleHQgPSAnJztcclxuICAgICAgICBsZXQgY29sb3IgICAgICAgPSB0eXBlb2YgdGhpcy5fb3B0aW9ucy5iYXJDb2xvciA9PT0gJ3N0cmluZycgPyB0aGlzLl9vcHRpb25zLmJhckNvbG9yIDogJ3ByaW1hcnknO1xyXG4gICAgICAgIGxldCBhdHRyICAgICAgICA9IHRoaXMuX29wdGlvbnMuYXR0cjtcclxuXHJcbiAgICAgICAgYXR0ciA9IGNvcmV1aVRhYmxlVXRpbHMubWVyZ2VBdHRyKGF0dHIsIHsgY2xhc3M6ICdwcm9ncmVzcyBtZS0xJyB9KTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMuYmFyV2lkdGgpIHtcclxuICAgICAgICAgICAgbGV0IGJhcldpZHRoID0gY29yZXVpVGFibGVVdGlscy5pc051bWVyaWModGhpcy5fb3B0aW9ucy5iYXJXaWR0aClcclxuICAgICAgICAgICAgICAgID8gKHRoaXMuX29wdGlvbnMuYmFyV2lkdGggKyAncHgnKVxyXG4gICAgICAgICAgICAgICAgOiB0aGlzLl9vcHRpb25zLmJhcldpZHRoO1xyXG4gICAgICAgICAgICBhdHRyID0gY29yZXVpVGFibGVVdGlscy5tZXJnZUF0dHIoYXR0ciwgeyBzdHlsZTogJ3dpZHRoOicgKyBiYXJXaWR0aCB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLmJhckhlaWdodCkge1xyXG4gICAgICAgICAgICBsZXQgYmFySGVpZ2h0ID0gY29yZXVpVGFibGVVdGlscy5pc051bWVyaWModGhpcy5fb3B0aW9ucy5iYXJIZWlnaHQpXHJcbiAgICAgICAgICAgICAgICA/ICh0aGlzLl9vcHRpb25zLmJhckhlaWdodCArICdweCcpXHJcbiAgICAgICAgICAgICAgICA6IHRoaXMuX29wdGlvbnMuYmFySGVpZ2h0O1xyXG4gICAgICAgICAgICBhdHRyID0gY29yZXVpVGFibGVVdGlscy5tZXJnZUF0dHIoYXR0ciwgeyBzdHlsZTogJ2hlaWdodDonICsgYmFySGVpZ2h0IH0pO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIGlmIChjb3JldWlUYWJsZVV0aWxzLmlzTnVtZXJpYyhjb250ZW50KSkge1xyXG4gICAgICAgICAgICBpZiAoY29udGVudCA8IDAgKSB7XHJcbiAgICAgICAgICAgICAgICBwZXJjZW50ID0gMDtcclxuXHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY29udGVudCA+IDEwMCApIHtcclxuICAgICAgICAgICAgICAgIHBlcmNlbnQgPSAxMDA7XHJcblxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcGVyY2VudCA9IGNvbnRlbnQ7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKGNvbnRlbnQucGVyY2VudCA8IDAgKSB7XHJcbiAgICAgICAgICAgICAgICBwZXJjZW50ID0gMDtcclxuXHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY29udGVudC5wZXJjZW50ID4gMTAwICkge1xyXG4gICAgICAgICAgICAgICAgcGVyY2VudCA9IDEwMDtcclxuXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBwZXJjZW50ID0gY29udGVudC5wZXJjZW50O1xyXG4gICAgICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICAgICAgaWYgKGNvbnRlbnQuaGFzT3duUHJvcGVydHkoJ2NvbG9yJykgJiYgdHlwZW9mIGNvbnRlbnQuY29sb3IgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgICAgICBjb2xvciA9IGNvbnRlbnQuY29sb3I7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChjb250ZW50Lmhhc093blByb3BlcnR5KCdkZXNjcmlwdGlvbicpICYmXHJcbiAgICAgICAgICAgICAgICB0eXBlb2YgY29udGVudC5kZXNjcmlwdGlvbiA9PT0gJ3N0cmluZycgJiZcclxuICAgICAgICAgICAgICAgIGNvbnRlbnQuZGVzY3JpcHRpb24gIT09ICcnXHJcbiAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb24gPSBjb250ZW50LmRlc2NyaXB0aW9uO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy5zaG93UGVyY2VudCkge1xyXG4gICAgICAgICAgICBwZXJjZW50VGV4dCA9IHBlcmNlbnQgKyAnJSc7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgbGV0IGF0dHJpYnV0ZXMgPSBbXTtcclxuXHJcbiAgICAgICAgJC5lYWNoKGF0dHIsIGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xyXG4gICAgICAgICAgICBpZiAoWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2YgdmFsdWUpID49IDApIHtcclxuICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXMucHVzaChuYW1lICsgJz1cIicgKyB2YWx1ZSArICdcIicpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG5cclxuICAgICAgICByZXR1cm4gY29yZXVpVGFibGVVdGlscy5yZW5kZXIoY29yZXVpVGFibGVUcGxbJ2NvbHVtbnMvcHJvZ3Jlc3MuaHRtbCddLCB7XHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBkZXNjcmlwdGlvbixcclxuICAgICAgICAgICAgcGVyY2VudDogcGVyY2VudCxcclxuICAgICAgICAgICAgcGVyY2VudFRleHQ6IHBlcmNlbnRUZXh0LFxyXG4gICAgICAgICAgICBjb2xvcjogY29sb3IsXHJcbiAgICAgICAgICAgIGF0dHI6IGF0dHJpYnV0ZXMubGVuZ3RoID4gMCA/ICgnICcgKyBhdHRyaWJ1dGVzLmpvaW4oJyAnKSkgOiAnJyxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgQ29sdW1uc1Byb2dyZXNzOyIsImltcG9ydCBjb3JldWlUYWJsZVV0aWxzIGZyb20gXCIuLi9jb3JldWkudGFibGUudXRpbHNcIjtcclxuaW1wb3J0IGNvcmV1aVRhYmxlVHBsICAgZnJvbSBcIi4uL2NvcmV1aS50YWJsZS50ZW1wbGF0ZXNcIjtcclxuaW1wb3J0IENvbHVtbiAgICAgICAgICAgZnJvbSBcIi4uL2Fic3RyYWN0L0NvbHVtblwiO1xyXG5cclxuY2xhc3MgQ29sdW1uc0ltYWdlIGV4dGVuZHMgQ29sdW1uIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPXHJcbiAgICAgKiBAcGFyYW0ge2NvcmV1aVRhYmxlSW5zdGFuY2V9IHRhYmxlXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gICAgICAgICAgICAgIG9wdGlvbnNcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IodGFibGUsIG9wdGlvbnMpIHtcclxuXHJcbiAgICAgICAgb3B0aW9ucyA9ICQuZXh0ZW5kKHRydWUsIHtcclxuICAgICAgICAgICAgdHlwZTogJ2ltYWdlJyxcclxuICAgICAgICAgICAgZmllbGQ6IG51bGwsXHJcbiAgICAgICAgICAgIGxhYmVsOiBudWxsLFxyXG4gICAgICAgICAgICBzaG93OiB0cnVlLFxyXG4gICAgICAgICAgICB3aWR0aDogbnVsbCxcclxuICAgICAgICAgICAgbWluV2lkdGg6IG51bGwsXHJcbiAgICAgICAgICAgIG1heFdpZHRoOiBudWxsLFxyXG4gICAgICAgICAgICBhdHRyOiB7fSxcclxuICAgICAgICAgICAgaW1nV2lkdGg6IG51bGwsXHJcbiAgICAgICAgICAgIGltZ0hlaWdodDogbnVsbCxcclxuICAgICAgICAgICAgaW1nQm9yZGVyOiBudWxsLFxyXG4gICAgICAgICAgICBpbWdTdHlsZTogbnVsbCxcclxuICAgICAgICB9LCBvcHRpb25zKTtcclxuXHJcbiAgICAgICAgc3VwZXIodGFibGUsIG9wdGlvbnMpO1xyXG5cclxuICAgICAgICB0aGlzLl90YWJsZSAgID0gdGFibGU7XHJcbiAgICAgICAgdGhpcy5fb3B0aW9ucyA9ICQuZXh0ZW5kKHRydWUsIHt9LCB0aGlzLl9vcHRpb25zLCBvcHRpb25zKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQpNC+0YDQvNC40YDQvtCy0LDQvdC40LUg0LrQvtC90YLQtdC90YLQsFxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGNvbnRlbnRcclxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSByZWNvcmRcclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIHJlbmRlcihjb250ZW50LCByZWNvcmQpIHtcclxuXHJcbiAgICAgICAgaWYgKHR5cGVvZiBjb250ZW50ICE9PSAnc3RyaW5nJyB8fCBjb250ZW50ID09PSAnJykge1xyXG4gICAgICAgICAgICByZXR1cm4gJyc7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgYXR0ciA9IHRoaXMuX29wdGlvbnMuYXR0cjtcclxuXHJcbiAgICAgICAgYXR0ci5zcmMgPSBjb250ZW50O1xyXG5cclxuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy5pbWdXaWR0aCkge1xyXG4gICAgICAgICAgICBsZXQgaW1nV2lkdGggPSBjb3JldWlUYWJsZVV0aWxzLmlzTnVtZXJpYyh0aGlzLl9vcHRpb25zLmltZ1dpZHRoKVxyXG4gICAgICAgICAgICAgICAgPyAodGhpcy5fb3B0aW9ucy5pbWdXaWR0aCArICdweCcpXHJcbiAgICAgICAgICAgICAgICA6IHRoaXMuX29wdGlvbnMuaW1nV2lkdGg7XHJcbiAgICAgICAgICAgIGF0dHIgPSBjb3JldWlUYWJsZVV0aWxzLm1lcmdlQXR0cihhdHRyLCB7IHN0eWxlOiAnd2lkdGg6JyArIGltZ1dpZHRoIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMuaW1nSGVpZ2h0KSB7XHJcbiAgICAgICAgICAgIGxldCBpbWdIZWlnaHQgPSBjb3JldWlUYWJsZVV0aWxzLmlzTnVtZXJpYyh0aGlzLl9vcHRpb25zLmltZ0hlaWdodClcclxuICAgICAgICAgICAgICAgID8gKHRoaXMuX29wdGlvbnMuaW1nSGVpZ2h0ICsgJ3B4JylcclxuICAgICAgICAgICAgICAgIDogdGhpcy5fb3B0aW9ucy5pbWdIZWlnaHQ7XHJcbiAgICAgICAgICAgIGF0dHIgPSBjb3JldWlUYWJsZVV0aWxzLm1lcmdlQXR0cihhdHRyLCB7IHN0eWxlOiAnaGVpZ2h0OicgKyBpbWdIZWlnaHQgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy5pbWdCb3JkZXIpIHtcclxuICAgICAgICAgICAgYXR0ciA9IGNvcmV1aVRhYmxlVXRpbHMubWVyZ2VBdHRyKGF0dHIsIHsgY2xhc3M6ICdib3JkZXIgYm9yZGVyLXNlY29uZGFyeS1zdWJ0bGUnIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMuaW1nU3R5bGUgJiYgdHlwZW9mIHRoaXMuX29wdGlvbnMuaW1nU3R5bGUgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAodGhpcy5fb3B0aW9ucy5pbWdTdHlsZSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnY2lyY2xlJzogIGF0dHIgPSBjb3JldWlUYWJsZVV0aWxzLm1lcmdlQXR0cihhdHRyLCB7IGNsYXNzOiAncm91bmRlZC1jaXJjbGUnIH0pOyBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ3RodW1iJzogICBhdHRyID0gY29yZXVpVGFibGVVdGlscy5tZXJnZUF0dHIoYXR0ciwgeyBjbGFzczogJ2ltZy10aHVtYm5haWwnIH0pOyBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ3JvdW5kZWQnOiBhdHRyID0gY29yZXVpVGFibGVVdGlscy5tZXJnZUF0dHIoYXR0ciwgeyBjbGFzczogJ3JvdW5kZWQnIH0pOyBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIGxldCBhdHRyaWJ1dGVzID0gW107XHJcblxyXG4gICAgICAgICQuZWFjaChhdHRyLCBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcclxuICAgICAgICAgICAgaWYgKFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIHZhbHVlKSA+PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzLnB1c2gobmFtZSArICc9XCInICsgdmFsdWUgKyAnXCInKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gY29yZXVpVGFibGVVdGlscy5yZW5kZXIoY29yZXVpVGFibGVUcGxbJ2NvbHVtbnMvaW1hZ2UuaHRtbCddLCB7XHJcbiAgICAgICAgICAgIGF0dHI6IGF0dHJpYnV0ZXMubGVuZ3RoID4gMCA/ICgnICcgKyBhdHRyaWJ1dGVzLmpvaW4oJyAnKSkgOiAnJyxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IENvbHVtbnNJbWFnZTsiLCJcclxuaW1wb3J0IGNvcmV1aVRhYmxlIGZyb20gXCIuL2NvcmV1aS50YWJsZVwiO1xyXG5cclxuaW1wb3J0IGxhbmdFbiBmcm9tIFwiLi9sYW5nL2VuXCI7XHJcbmltcG9ydCBsYW5nUnUgZnJvbSBcIi4vbGFuZy9ydVwiO1xyXG5cclxuaW1wb3J0IENvbnRyb2xMaW5rICAgICAgICBmcm9tIFwiLi9jb250cm9scy9saW5rXCI7XHJcbmltcG9ydCBDb250cm9sQnV0dG9uICAgICAgZnJvbSBcIi4vY29udHJvbHMvYnV0dG9uXCI7XHJcbmltcG9ydCBDb250cm9sRHJvcGRvd24gICAgZnJvbSBcIi4vY29udHJvbHMvZHJvcGRvd25cIjtcclxuaW1wb3J0IENvbnRyb2xCdXR0b25Hcm91cCBmcm9tIFwiLi9jb250cm9scy9idXR0b25fZ3JvdXBcIjtcclxuaW1wb3J0IENvbnRyb2xDdXN0b20gICAgICBmcm9tIFwiLi9jb250cm9scy9jdXN0b21cIjtcclxuaW1wb3J0IENvbnRyb2xQYWdlU2l6ZSAgICBmcm9tIFwiLi9jb250cm9scy9wYWdlX3NpemVcIjtcclxuaW1wb3J0IENvbnRyb2xQYWdlSnVtcCAgICBmcm9tIFwiLi9jb250cm9scy9wYWdlX2p1bXBcIjtcclxuaW1wb3J0IENvbnRyb2xQYWdlcyAgICAgICBmcm9tIFwiLi9jb250cm9scy9wYWdlc1wiO1xyXG5pbXBvcnQgQ29udHJvbFRvdGFsICAgICAgIGZyb20gXCIuL2NvbnRyb2xzL3RvdGFsXCI7XHJcbmltcG9ydCBDb250cm9sU2VhcmNoICAgICAgZnJvbSBcIi4vY29udHJvbHMvc2VhcmNoXCI7XHJcbmltcG9ydCBDb250cm9sQ29sdW1ucyAgICAgZnJvbSBcIi4vY29udHJvbHMvY29sdW1uc1wiO1xyXG5pbXBvcnQgQ29udHJvbENhcHRpb24gICAgIGZyb20gXCIuL2NvbnRyb2xzL2NhcHRpb25cIjtcclxuaW1wb3J0IENvbnRyb2xGaWx0ZXJDbGVhciBmcm9tIFwiLi9jb250cm9scy9maWx0ZXJfY2xlYXJcIjtcclxuaW1wb3J0IENvbnRyb2xEaXZpZGVyICAgICBmcm9tIFwiLi9jb250cm9scy9kaXZpZGVyXCI7XHJcblxyXG5pbXBvcnQgRmlsdGVyVGV4dCAgICAgICAgICAgZnJvbSBcIi4vZmlsdGVycy90ZXh0XCI7XHJcbmltcG9ydCBGaWx0ZXJOdW1iZXIgICAgICAgICBmcm9tIFwiLi9maWx0ZXJzL251bWJlclwiO1xyXG5pbXBvcnQgRmlsdGVyRGF0ZSAgICAgICAgICAgZnJvbSBcIi4vZmlsdGVycy9kYXRlXCI7XHJcbmltcG9ydCBGaWx0ZXJEYXRldGltZSAgICAgICBmcm9tIFwiLi9maWx0ZXJzL2RhdGV0aW1lXCI7XHJcbmltcG9ydCBGaWx0ZXJEYXRlTW9udGggICAgICBmcm9tIFwiLi9maWx0ZXJzL2RhdGVfbW9udGhcIjtcclxuaW1wb3J0IEZpbHRlckRhdGVSYW5nZSAgICAgIGZyb20gXCIuL2ZpbHRlcnMvZGF0ZV9yYW5nZVwiO1xyXG5pbXBvcnQgRmlsdGVyRGF0ZXRpbWVSYW5nZSAgZnJvbSBcIi4vZmlsdGVycy9kYXRldGltZV9yYW5nZVwiO1xyXG5pbXBvcnQgRmlsdGVyQ2hlY2tib3ggICAgICAgZnJvbSBcIi4vZmlsdGVycy9jaGVja2JveFwiO1xyXG5pbXBvcnQgRmlsdGVyUmFkaW8gICAgICAgICAgZnJvbSBcIi4vZmlsdGVycy9yYWRpb1wiO1xyXG5pbXBvcnQgRmlsdGVyU2VsZWN0ICAgICAgICAgZnJvbSBcIi4vZmlsdGVycy9zZWxlY3RcIjtcclxuaW1wb3J0IEZpbHRlclN3aXRjaCAgICAgICAgIGZyb20gXCIuL2ZpbHRlcnMvc3dpdGNoXCI7XHJcblxyXG5pbXBvcnQgU2VhcmNoVGV4dCAgICAgICAgICBmcm9tIFwiLi9zZWFyY2gvdGV4dFwiO1xyXG5pbXBvcnQgU2VhcmNoTnVtYmVyICAgICAgICBmcm9tIFwiLi9zZWFyY2gvbnVtYmVyXCI7XHJcbmltcG9ydCBTZWFyY2hEYXRlICAgICAgICAgIGZyb20gXCIuL3NlYXJjaC9kYXRlXCI7XHJcbmltcG9ydCBTZWFyY2hEYXRlTW9udGggICAgIGZyb20gXCIuL3NlYXJjaC9kYXRlX21vbnRoXCI7XHJcbmltcG9ydCBTZWFyY2hEYXRldGltZSAgICAgIGZyb20gXCIuL3NlYXJjaC9kYXRldGltZVwiO1xyXG5pbXBvcnQgU2VhcmNoRGF0ZVJhbmdlICAgICBmcm9tIFwiLi9zZWFyY2gvZGF0ZV9yYW5nZVwiO1xyXG5pbXBvcnQgU2VhcmNoRGF0ZXRpbWVSYW5nZSBmcm9tIFwiLi9zZWFyY2gvZGF0ZXRpbWVfcmFuZ2VcIjtcclxuaW1wb3J0IFNlYXJjaENoZWNrYm94ICAgICAgZnJvbSBcIi4vc2VhcmNoL2NoZWNrYm94XCI7XHJcbmltcG9ydCBTZWFyY2hDaGVja2JveEJ0biAgIGZyb20gXCIuL3NlYXJjaC9jaGVja2JveEJ0blwiO1xyXG5pbXBvcnQgU2VhcmNoUmFkaW8gICAgICAgICBmcm9tIFwiLi9zZWFyY2gvcmFkaW9cIjtcclxuaW1wb3J0IFNlYXJjaFJhZGlvQnRuICAgICAgZnJvbSBcIi4vc2VhcmNoL3JhZGlvQnRuXCI7XHJcbmltcG9ydCBTZWFyY2hTZWxlY3QgICAgICAgIGZyb20gXCIuL3NlYXJjaC9zZWxlY3RcIjtcclxuaW1wb3J0IFNlYXJjaFN3aXRjaCAgICAgICAgZnJvbSBcIi4vc2VhcmNoL3N3aXRjaFwiO1xyXG5cclxuaW1wb3J0IENvbHVtbnNEYXRlICAgICAgIGZyb20gXCIuL2NvbHVtbnMvZGF0ZVwiO1xyXG5pbXBvcnQgQ29sdW1uc0RhdGV0aW1lICAgZnJvbSBcIi4vY29sdW1ucy9kYXRldGltZVwiO1xyXG5pbXBvcnQgQ29sdW1uc0RhdGVIdW1hbiAgZnJvbSBcIi4vY29sdW1ucy9kYXRlX2h1bWFuXCI7XHJcbmltcG9ydCBDb2x1bW5zSHRtbCAgICAgICBmcm9tIFwiLi9jb2x1bW5zL2h0bWxcIjtcclxuaW1wb3J0IENvbHVtbnNOdW1iZXIgICAgIGZyb20gXCIuL2NvbHVtbnMvbnVtYmVyXCI7XHJcbmltcG9ydCBDb2x1bW5zTW9uZXkgICAgICBmcm9tIFwiLi9jb2x1bW5zL21vbmV5XCI7XHJcbmltcG9ydCBDb2x1bW5zTnVtYmVycyAgICBmcm9tIFwiLi9jb2x1bW5zL251bWJlcnNcIjtcclxuaW1wb3J0IENvbHVtbnNTZWxlY3QgICAgIGZyb20gXCIuL2NvbHVtbnMvc2VsZWN0XCI7XHJcbmltcG9ydCBDb2x1bW5zU3dpdGNoICAgICBmcm9tIFwiLi9jb2x1bW5zL3N3aXRjaFwiO1xyXG5pbXBvcnQgQ29sdW1uc1RleHQgICAgICAgZnJvbSBcIi4vY29sdW1ucy90ZXh0XCI7XHJcbmltcG9ydCBDb2x1bW5zQnV0dG9uICAgICBmcm9tIFwiLi9jb2x1bW5zL2J1dHRvblwiO1xyXG5pbXBvcnQgQ29sdW1uc0xpbmsgICAgICAgZnJvbSBcIi4vY29sdW1ucy9saW5rXCI7XHJcbmltcG9ydCBDb2x1bW5zTWVudSAgICAgICBmcm9tIFwiLi9jb2x1bW5zL21lbnVcIjtcclxuaW1wb3J0IENvbHVtbnNCYWRnZSAgICAgIGZyb20gXCIuL2NvbHVtbnMvYmFkZ2VcIjtcclxuaW1wb3J0IENvbHVtbnNDb21wb25lbnQgIGZyb20gXCIuL2NvbHVtbnMvY29tcG9uZW50XCI7XHJcbmltcG9ydCBDb2x1bW5zUHJvZ3Jlc3MgICBmcm9tIFwiLi9jb2x1bW5zL3Byb2dyZXNzXCI7XHJcbmltcG9ydCBDb2x1bW5zSW1hZ2UgICAgICBmcm9tIFwiLi9jb2x1bW5zL2ltYWdlXCI7XHJcblxyXG5cclxuY29yZXVpVGFibGUubGFuZy5ydSA9IGxhbmdSdTtcclxuY29yZXVpVGFibGUubGFuZy5lbiA9IGxhbmdFbjtcclxuXHJcbmNvcmV1aVRhYmxlLmNvbnRyb2xzLmxpbmsgICAgICAgID0gQ29udHJvbExpbms7XHJcbmNvcmV1aVRhYmxlLmNvbnRyb2xzLmJ1dHRvbiAgICAgID0gQ29udHJvbEJ1dHRvbjtcclxuY29yZXVpVGFibGUuY29udHJvbHMuZHJvcGRvd24gICAgPSBDb250cm9sRHJvcGRvd247XHJcbmNvcmV1aVRhYmxlLmNvbnRyb2xzLmJ1dHRvbkdyb3VwID0gQ29udHJvbEJ1dHRvbkdyb3VwO1xyXG5jb3JldWlUYWJsZS5jb250cm9scy5jdXN0b20gICAgICA9IENvbnRyb2xDdXN0b207XHJcbmNvcmV1aVRhYmxlLmNvbnRyb2xzLnBhZ2VTaXplICAgID0gQ29udHJvbFBhZ2VTaXplO1xyXG5jb3JldWlUYWJsZS5jb250cm9scy5wYWdlSnVtcCAgICA9IENvbnRyb2xQYWdlSnVtcDtcclxuY29yZXVpVGFibGUuY29udHJvbHMucGFnZXMgICAgICAgPSBDb250cm9sUGFnZXM7XHJcbmNvcmV1aVRhYmxlLmNvbnRyb2xzLnRvdGFsICAgICAgID0gQ29udHJvbFRvdGFsO1xyXG5jb3JldWlUYWJsZS5jb250cm9scy5zZWFyY2ggICAgICA9IENvbnRyb2xTZWFyY2g7XHJcbmNvcmV1aVRhYmxlLmNvbnRyb2xzLmNvbHVtbnMgICAgID0gQ29udHJvbENvbHVtbnM7XHJcbmNvcmV1aVRhYmxlLmNvbnRyb2xzLmNhcHRpb24gICAgID0gQ29udHJvbENhcHRpb247XHJcbmNvcmV1aVRhYmxlLmNvbnRyb2xzLmZpbHRlckNsZWFyID0gQ29udHJvbEZpbHRlckNsZWFyO1xyXG5jb3JldWlUYWJsZS5jb250cm9scy5kaXZpZGVyICAgICA9IENvbnRyb2xEaXZpZGVyO1xyXG5cclxuY29yZXVpVGFibGUuZmlsdGVycy50ZXh0ICAgICAgICAgID0gRmlsdGVyVGV4dDtcclxuY29yZXVpVGFibGUuZmlsdGVycy5udW1iZXIgICAgICAgID0gRmlsdGVyTnVtYmVyO1xyXG5jb3JldWlUYWJsZS5maWx0ZXJzLmRhdGUgICAgICAgICAgPSBGaWx0ZXJEYXRlO1xyXG5jb3JldWlUYWJsZS5maWx0ZXJzLmRhdGV0aW1lICAgICAgPSBGaWx0ZXJEYXRldGltZTtcclxuY29yZXVpVGFibGUuZmlsdGVycy5kYXRlTW9udGggICAgID0gRmlsdGVyRGF0ZU1vbnRoO1xyXG5jb3JldWlUYWJsZS5maWx0ZXJzLmRhdGVSYW5nZSAgICAgPSBGaWx0ZXJEYXRlUmFuZ2U7XHJcbmNvcmV1aVRhYmxlLmZpbHRlcnMuZGF0ZXRpbWVSYW5nZSA9IEZpbHRlckRhdGV0aW1lUmFuZ2U7XHJcbmNvcmV1aVRhYmxlLmZpbHRlcnMuY2hlY2tib3ggICAgICA9IEZpbHRlckNoZWNrYm94O1xyXG5jb3JldWlUYWJsZS5maWx0ZXJzLnJhZGlvICAgICAgICAgPSBGaWx0ZXJSYWRpbztcclxuY29yZXVpVGFibGUuZmlsdGVycy5zZWxlY3QgICAgICAgID0gRmlsdGVyU2VsZWN0O1xyXG5jb3JldWlUYWJsZS5maWx0ZXJzLnN3aXRjaCAgICAgICAgPSBGaWx0ZXJTd2l0Y2g7XHJcblxyXG5jb3JldWlUYWJsZS5zZWFyY2gudGV4dCAgICAgICAgICA9IFNlYXJjaFRleHQ7XHJcbmNvcmV1aVRhYmxlLnNlYXJjaC5udW1iZXIgICAgICAgID0gU2VhcmNoTnVtYmVyO1xyXG5jb3JldWlUYWJsZS5zZWFyY2guZGF0ZSAgICAgICAgICA9IFNlYXJjaERhdGU7XHJcbmNvcmV1aVRhYmxlLnNlYXJjaC5kYXRlTW9udGggICAgID0gU2VhcmNoRGF0ZU1vbnRoO1xyXG5jb3JldWlUYWJsZS5zZWFyY2guZGF0ZXRpbWUgICAgICA9IFNlYXJjaERhdGV0aW1lO1xyXG5jb3JldWlUYWJsZS5zZWFyY2guZGF0ZVJhbmdlICAgICA9IFNlYXJjaERhdGVSYW5nZTtcclxuY29yZXVpVGFibGUuc2VhcmNoLmRhdGV0aW1lUmFuZ2UgPSBTZWFyY2hEYXRldGltZVJhbmdlO1xyXG5jb3JldWlUYWJsZS5zZWFyY2guY2hlY2tib3ggICAgICA9IFNlYXJjaENoZWNrYm94O1xyXG5jb3JldWlUYWJsZS5zZWFyY2guY2hlY2tib3hCdG4gICA9IFNlYXJjaENoZWNrYm94QnRuO1xyXG5jb3JldWlUYWJsZS5zZWFyY2gucmFkaW8gICAgICAgICA9IFNlYXJjaFJhZGlvO1xyXG5jb3JldWlUYWJsZS5zZWFyY2gucmFkaW9CdG4gICAgICA9IFNlYXJjaFJhZGlvQnRuO1xyXG5jb3JldWlUYWJsZS5zZWFyY2guc2VsZWN0ICAgICAgICA9IFNlYXJjaFNlbGVjdDtcclxuY29yZXVpVGFibGUuc2VhcmNoLnN3aXRjaCAgICAgICAgPSBTZWFyY2hTd2l0Y2g7XHJcblxyXG5jb3JldWlUYWJsZS5jb2x1bW5zLmRhdGUgICAgICA9IENvbHVtbnNEYXRlO1xyXG5jb3JldWlUYWJsZS5jb2x1bW5zLmRhdGV0aW1lICA9IENvbHVtbnNEYXRldGltZTtcclxuY29yZXVpVGFibGUuY29sdW1ucy5kYXRlSHVtYW4gPSBDb2x1bW5zRGF0ZUh1bWFuO1xyXG5jb3JldWlUYWJsZS5jb2x1bW5zLmh0bWwgICAgICA9IENvbHVtbnNIdG1sO1xyXG5jb3JldWlUYWJsZS5jb2x1bW5zLm51bWJlciAgICA9IENvbHVtbnNOdW1iZXI7XHJcbmNvcmV1aVRhYmxlLmNvbHVtbnMubW9uZXkgICAgID0gQ29sdW1uc01vbmV5O1xyXG5jb3JldWlUYWJsZS5jb2x1bW5zLm51bWJlcnMgICA9IENvbHVtbnNOdW1iZXJzO1xyXG5jb3JldWlUYWJsZS5jb2x1bW5zLnNlbGVjdCAgICA9IENvbHVtbnNTZWxlY3Q7XHJcbmNvcmV1aVRhYmxlLmNvbHVtbnMuc3dpdGNoICAgID0gQ29sdW1uc1N3aXRjaDtcclxuY29yZXVpVGFibGUuY29sdW1ucy50ZXh0ICAgICAgPSBDb2x1bW5zVGV4dDtcclxuY29yZXVpVGFibGUuY29sdW1ucy5idXR0b24gICAgPSBDb2x1bW5zQnV0dG9uO1xyXG5jb3JldWlUYWJsZS5jb2x1bW5zLmxpbmsgICAgICA9IENvbHVtbnNMaW5rO1xyXG5jb3JldWlUYWJsZS5jb2x1bW5zLm1lbnUgICAgICA9IENvbHVtbnNNZW51O1xyXG5jb3JldWlUYWJsZS5jb2x1bW5zLmJhZGdlICAgICA9IENvbHVtbnNCYWRnZTtcclxuY29yZXVpVGFibGUuY29sdW1ucy5jb21wb25lbnQgPSBDb2x1bW5zQ29tcG9uZW50O1xyXG5jb3JldWlUYWJsZS5jb2x1bW5zLnByb2dyZXNzICA9IENvbHVtbnNQcm9ncmVzcztcclxuY29yZXVpVGFibGUuY29sdW1ucy5pbWFnZSAgICAgPSBDb2x1bW5zSW1hZ2U7XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY29yZXVpVGFibGU7Il0sIm5hbWVzIjpbInRwbCIsIk9iamVjdCIsImNyZWF0ZSIsImYiLCJleHBvcnRzIiwibW9kdWxlIiwiZGVmaW5lIiwiYW1kIiwiZyIsIndpbmRvdyIsImdsb2JhbCIsInNlbGYiLCJlanMiLCJyIiwiZSIsIm4iLCJ0IiwibyIsImkiLCJjIiwicmVxdWlyZSIsInUiLCJhIiwiRXJyb3IiLCJjb2RlIiwicCIsImNhbGwiLCJsZW5ndGgiLCJmcyIsInBhdGgiLCJ1dGlscyIsInNjb3BlT3B0aW9uV2FybmVkIiwiX1ZFUlNJT05fU1RSSU5HIiwidmVyc2lvbiIsIl9ERUZBVUxUX09QRU5fREVMSU1JVEVSIiwiX0RFRkFVTFRfQ0xPU0VfREVMSU1JVEVSIiwiX0RFRkFVTFRfREVMSU1JVEVSIiwiX0RFRkFVTFRfTE9DQUxTX05BTUUiLCJfTkFNRSIsIl9SRUdFWF9TVFJJTkciLCJfT1BUU19QQVNTQUJMRV9XSVRIX0RBVEEiLCJfT1BUU19QQVNTQUJMRV9XSVRIX0RBVEFfRVhQUkVTUyIsImNvbmNhdCIsIl9CT00iLCJfSlNfSURFTlRJRklFUiIsImNhY2hlIiwiZmlsZUxvYWRlciIsInJlYWRGaWxlU3luYyIsImxvY2Fsc05hbWUiLCJwcm9taXNlSW1wbCIsIkZ1bmN0aW9uIiwiUHJvbWlzZSIsInJlc29sdmVJbmNsdWRlIiwibmFtZSIsImZpbGVuYW1lIiwiaXNEaXIiLCJkaXJuYW1lIiwiZXh0bmFtZSIsInJlc29sdmUiLCJpbmNsdWRlUGF0aCIsImV4dCIsInJlc29sdmVQYXRocyIsInBhdGhzIiwiZmlsZVBhdGgiLCJzb21lIiwidiIsImV4aXN0c1N5bmMiLCJnZXRJbmNsdWRlUGF0aCIsIm9wdGlvbnMiLCJ2aWV3cyIsIm1hdGNoIiwiZXhlYyIsInJlcGxhY2UiLCJBcnJheSIsImlzQXJyYXkiLCJyb290IiwiaW5jbHVkZXIiLCJlc2NhcGVGdW5jdGlvbiIsImhhbmRsZUNhY2hlIiwidGVtcGxhdGUiLCJmdW5jIiwiaGFzVGVtcGxhdGUiLCJhcmd1bWVudHMiLCJnZXQiLCJ0b1N0cmluZyIsImNvbXBpbGUiLCJzZXQiLCJ0cnlIYW5kbGVDYWNoZSIsImRhdGEiLCJjYiIsInJlc3VsdCIsInJlamVjdCIsImVyciIsImluY2x1ZGVGaWxlIiwib3B0cyIsInNoYWxsb3dDb3B5IiwiY3JlYXRlTnVsbFByb3RvT2JqV2hlcmVQb3NzaWJsZSIsImluY2x1ZGVyUmVzdWx0IiwicmV0aHJvdyIsInN0ciIsImZsbm0iLCJsaW5lbm8iLCJlc2MiLCJsaW5lcyIsInNwbGl0Iiwic3RhcnQiLCJNYXRoIiwibWF4IiwiZW5kIiwibWluIiwiY29udGV4dCIsInNsaWNlIiwibWFwIiwibGluZSIsImN1cnIiLCJqb2luIiwibWVzc2FnZSIsInN0cmlwU2VtaSIsInRlbXBsIiwic2NvcGUiLCJjb25zb2xlIiwid2FybiIsIlRlbXBsYXRlIiwicmVuZGVyIiwiZCIsInNoYWxsb3dDb3B5RnJvbUxpc3QiLCJyZW5kZXJGaWxlIiwiYXJncyIsInByb3RvdHlwZSIsInNoaWZ0Iiwidmlld09wdHMiLCJwb3AiLCJzZXR0aW5ncyIsImNsZWFyQ2FjaGUiLCJyZXNldCIsInRleHQiLCJvcHRzUGFyYW0iLCJoYXNPd25Pbmx5T2JqZWN0IiwidGVtcGxhdGVUZXh0IiwibW9kZSIsInRydW5jYXRlIiwiY3VycmVudExpbmUiLCJzb3VyY2UiLCJjbGllbnQiLCJlc2NhcGUiLCJlc2NhcGVYTUwiLCJjb21waWxlRGVidWciLCJkZWJ1ZyIsIm9wZW5EZWxpbWl0ZXIiLCJjbG9zZURlbGltaXRlciIsImRlbGltaXRlciIsInN0cmljdCIsInJtV2hpdGVzcGFjZSIsIm91dHB1dEZ1bmN0aW9uTmFtZSIsImFzeW5jIiwiZGVzdHJ1Y3R1cmVkTG9jYWxzIiwibGVnYWN5SW5jbHVkZSIsIl93aXRoIiwicmVnZXgiLCJjcmVhdGVSZWdleCIsIm1vZGVzIiwiRVZBTCIsIkVTQ0FQRUQiLCJSQVciLCJDT01NRU5UIiwiTElURVJBTCIsImRlbGltIiwiZXNjYXBlUmVnRXhwQ2hhcnMiLCJvcGVuIiwiY2xvc2UiLCJSZWdFeHAiLCJzcmMiLCJmbiIsInByZXBlbmRlZCIsImFwcGVuZGVkIiwiZXNjYXBlRm4iLCJjdG9yIiwic2FuaXRpemVkRmlsZW5hbWUiLCJKU09OIiwic3RyaW5naWZ5IiwiZ2VuZXJhdGVTb3VyY2UiLCJ0ZXN0IiwiZGVzdHJ1Y3R1cmluZyIsImxvZyIsIlN5bnRheEVycm9yIiwicmV0dXJuZWRGbiIsImFub255bW91cyIsImluY2x1ZGUiLCJpbmNsdWRlRGF0YSIsImFwcGx5IiwiZGVmaW5lUHJvcGVydHkiLCJiYXNlbmFtZSIsInZhbHVlIiwid3JpdGFibGUiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwibWF0Y2hlcyIsInBhcnNlVGVtcGxhdGVUZXh0IiwiZm9yRWFjaCIsImluZGV4IiwiY2xvc2luZyIsImluZGV4T2YiLCJzY2FuTGluZSIsInBhdCIsImFyciIsImZpcnN0UG9zIiwicHVzaCIsInN1YnN0cmluZyIsIl9hZGRPdXRwdXQiLCJuZXdMaW5lQ291bnQiLCJsYXN0SW5kZXhPZiIsIl9fZXhwcmVzcyIsIlZFUlNJT04iLCJyZWdFeHBDaGFycyIsImhhc093blByb3BlcnR5IiwiaGFzT3duIiwib2JqIiwia2V5Iiwic3RyaW5nIiwiU3RyaW5nIiwiX0VOQ09ERV9IVE1MX1JVTEVTIiwiX01BVENIX0hUTUwiLCJlbmNvZGVfY2hhciIsImVzY2FwZUZ1bmNTdHIiLCJtYXJrdXAiLCJ1bmRlZmluZWQiLCJlc2NhcGVYTUxUb1N0cmluZyIsInRvIiwiZnJvbSIsImxpc3QiLCJfZGF0YSIsInZhbCIsInJlbW92ZSIsImh5cGhlblRvQ2FtZWwiLCJ0b1VwcGVyQ2FzZSIsIl9fcHJvdG9fXyIsInByb2Nlc3MiLCJub3JtYWxpemVBcnJheSIsInBhcnRzIiwiYWxsb3dBYm92ZVJvb3QiLCJ1cCIsImxhc3QiLCJzcGxpY2UiLCJ1bnNoaWZ0IiwicmVzb2x2ZWRQYXRoIiwicmVzb2x2ZWRBYnNvbHV0ZSIsImN3ZCIsIlR5cGVFcnJvciIsImNoYXJBdCIsImZpbHRlciIsIm5vcm1hbGl6ZSIsImlzQWJzb2x1dGUiLCJ0cmFpbGluZ1NsYXNoIiwic3Vic3RyIiwicmVsYXRpdmUiLCJ0cmltIiwiZnJvbVBhcnRzIiwidG9QYXJ0cyIsInNhbWVQYXJ0c0xlbmd0aCIsIm91dHB1dFBhcnRzIiwic2VwIiwiY2hhckNvZGVBdCIsImhhc1Jvb3QiLCJtYXRjaGVkU2xhc2giLCJzdGFydERvdCIsInN0YXJ0UGFydCIsInByZURvdFN0YXRlIiwieHMiLCJyZXMiLCJsZW4iLCJfcHJvY2VzcyIsImNhY2hlZFNldFRpbWVvdXQiLCJjYWNoZWRDbGVhclRpbWVvdXQiLCJkZWZhdWx0U2V0VGltb3V0IiwiZGVmYXVsdENsZWFyVGltZW91dCIsInNldFRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJydW5UaW1lb3V0IiwiZnVuIiwicnVuQ2xlYXJUaW1lb3V0IiwibWFya2VyIiwicXVldWUiLCJkcmFpbmluZyIsImN1cnJlbnRRdWV1ZSIsInF1ZXVlSW5kZXgiLCJjbGVhblVwTmV4dFRpY2siLCJkcmFpblF1ZXVlIiwidGltZW91dCIsInJ1biIsIm5leHRUaWNrIiwiSXRlbSIsImFycmF5IiwidGl0bGUiLCJicm93c2VyIiwiZW52IiwiYXJndiIsInZlcnNpb25zIiwibm9vcCIsIm9uIiwiYWRkTGlzdGVuZXIiLCJvbmNlIiwib2ZmIiwicmVtb3ZlTGlzdGVuZXIiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJlbWl0IiwicHJlcGVuZExpc3RlbmVyIiwicHJlcGVuZE9uY2VMaXN0ZW5lciIsImxpc3RlbmVycyIsImJpbmRpbmciLCJjaGRpciIsImRpciIsInVtYXNrIiwiZGVzY3JpcHRpb24iLCJrZXl3b3JkcyIsImF1dGhvciIsImxpY2Vuc2UiLCJiaW4iLCJtYWluIiwianNkZWxpdnIiLCJ1bnBrZyIsInJlcG9zaXRvcnkiLCJ0eXBlIiwidXJsIiwiYnVncyIsImhvbWVwYWdlIiwiZGVwZW5kZW5jaWVzIiwiamFrZSIsImRldkRlcGVuZGVuY2llcyIsImJyb3dzZXJpZnkiLCJlc2xpbnQiLCJqc2RvYyIsIm1vY2hhIiwiZW5naW5lcyIsIm5vZGUiLCJzY3JpcHRzIiwiY29yZXVpVGFibGVVdGlscyIsIl90ZW1wbGF0ZXMiLCJtZXJnZUF0dHIiLCJhdHRyMSIsImF0dHIyIiwiYXNzaWduIiwiX3R5cGVvZiIsIiQiLCJlYWNoIiwiaXNOdW1lcmljIiwibnVtIiwiaXNOYU4iLCJoYXNoQ29kZSIsImNyYzMyIiwiRGF0ZSIsImdldFRpbWUiLCJyYW5kb20iLCJpc09iamVjdCIsInRwbE5hbWUiLCJzdHJQYWRMZWZ0IiwiY291bnQiLCJyZXBlYXQiLCJjb3JldWlUYWJsZVJlbmRlciIsInJlbmRlclRhYmxlIiwidGFibGUiLCJnZXRPcHRpb25zIiwicmVjb3Jkc0VsZW1lbnRzIiwiY29sdW1uc0hlYWRlciIsImNvbHVtbnNGb290ZXIiLCJjb2xHcm91cHMiLCJjb2x1bW5FbGVtZW50cyIsImNvcmV1aVRhYmxlVHBsIiwiX2NvbHVtbnMiLCJjb2x1bW4iLCJpc1Nob3ciLCJjb2x1bW5PcHRpb25zIiwiYXR0cmlidXRlcyIsInNvcnRhYmxlIiwibWVudUVsZW1lbnRzIiwibWVudVNob3dBbHdheXMiLCJtZW51UG9zaXRpb24iLCJmaWVsZCIsImF0dHJIZWFkZXIiLCJmaXhlZCIsImF0dHIiLCJfc29ydCIsInNvcnRGaWVsZCIsIm9yZGVyIiwic2hvd0hlYWRlcnMiLCJtZW51IiwiaXRlbXMiLCJzaG93QWx3YXlzIiwicG9zaXRpb24iLCJpdGVtIiwidG9Mb3dlckNhc2UiLCJvbkNsaWNrIiwiYXR0ckl0ZW0iLCJtZW51RWxlbWVudCIsImZpbmQiLCJjbGljayIsImhyZWYiLCJzdHlsZSIsIndpZHRoIiwidW5pdCIsIm1pbldpZHRoIiwibWF4V2lkdGgiLCJsYWJlbCIsInNob3dMYWJlbCIsImNvbHVtbkVsZW1lbnQiLCJpc3NldE1lbnUiLCJtZW51Q29udGFpbmVyIiwibWVudUJ1dHRvbiIsImV2ZW50Iiwib3JpZ2luYWxFdmVudCIsImNhbmNlbEJ1YmJsZSIsImVsZW1lbnQiLCJhcHBlbmQiLCJfcmVjb3JkcyIsIl9yZWNvcmRzVG90YWwiLCJnZXRSZWNvcmRzQ291bnQiLCJfcmVjb3Jkc051bWJlciIsIl9wYWdlIiwiX3JlY29yZHNQZXJQYWdlIiwicmVuZGVyUmVjb3JkcyIsInJvd3MiLCJoZWFkZXJSb3ciLCJjZWxscyIsImhlYWRlckNvbHVtbiIsImNvbnRlbnQiLCJjb2x1bW5zIiwiZm9vdGVyUm93IiwiZm9vdGVyQ29sdW1uIiwiY2xhc3NlcyIsInRoZWFkQXR0ciIsInRoZWFkVG9wIiwidGFibGVFbGVtZW50IiwidGJvZHkiLCJyZWNvcmRFbGVtZW50IiwicmVjb3JkcyIsInRoYXQiLCJncm91cCIsImdyb3VwVmFsdWUiLCJncm91cEluZGV4IiwicmVjb3Jkc0dyb3VwcyIsInJlY29yZCIsInNob3ciLCJpc0dyb3VwIiwicmVjb3Jkc0dyb3VwIiwicmVuZGVyUmVjb3Jkc0dyb3VwIiwicmVuZGVyUmVjb3JkIiwicmVuZGVyR3JvdXAiLCJjb2x1bW5zQ291bnQiLCJfY291bnRDb2x1bW5zU2hvdyIsImxhbmciLCJnZXRMYW5nIiwiZmllbGRzIiwicmVjb3JkQXR0ciIsImZpZWxkQ29udGVudCIsInJlbmRlckZpZWxkIiwib25DbGlja1VybCIsIm1ldGEiLCJxdWVyeVNlbGVjdG9yIiwiY29sdW1uRmllbGQiLCJnZXRGaWVsZCIsImZpZWxkUHJvcHMiLCJmaWVsZEF0dHIiLCJmaWVsZEF0dHJSZXN1bHQiLCJpc0NvbGxhcHNpbmciLCJncm91cEVsZW1lbnQiLCJjb2xzcGFuIiwidGQiLCJyZW5kZXJDb250ZW50IiwiY29sbGFwc2VkIiwiaGFzQ2xhc3MiLCJyZW1vdmVDbGFzcyIsImFkZENsYXNzIiwiZmFkZU91dCIsImZhZGVJbiIsInJlbmRlckV4cGFuZCIsInJlbmRlckNvbXBvbmVudHMiLCJleHBhbmRSZWNvcmQiLCJodG1sIiwiSFRNTEVsZW1lbnQiLCJqUXVlcnkiLCJyZW5kZXJDb250cm9sIiwiY29udHJvbCIsImNvbnRyb2xFbGVtZW50IiwiaWQiLCJnZXRJZCIsImNvbXBvbmVudHMiLCJldmVudE5hbWUiLCJjb21wb25lbnQiLCJDb3JlVUkiLCJpbnN0YW5jZSIsImluaXRFdmVudHMiLCJjb3JldWlUYWJsZUVsZW1lbnRzIiwiZ2V0Q29udGFpbmVyIiwidGFibGVJZCIsImdldExvY2siLCJnZXRXcmFwcGVyIiwiZ2V0U2VhcmNoQ29udGFpbmVyIiwiZ2V0Q29sdW1uc0NvbnRhaW5lciIsImdldFNlYXJjaENvbnRyb2wiLCJjb250cm9sSWQiLCJnZXRDb250cm9sIiwiZ2V0VGFibGUiLCJnZXRUYWJsZVRib2R5IiwiZ2V0VGFibGVUaGVhZCIsImdldFRhYmxlU29ydGFibGUiLCJnZXRUclJlY29yZHMiLCJnZXRUckJ5SW5kZXgiLCJnZXRUckVtcHR5IiwiZ2V0RXhwYW5kUm93IiwibmV4dCIsImFkZEV4cGFuZFJvdyIsImFmdGVyIiwiaGlkZUV4cGFuZFJvdyIsInJlY29yZEV4cGFuZGVkIiwiaGlkZSIsInNob3dFeHBhbmRSb3ciLCJyZW1vdmVFeHBhbmRSb3ciLCJnZXRTZWxlY3RlZEluZGV4ZXMiLCJpbmRleGVzIiwiZ2V0Um93c1N3aXRjaGVzIiwiZ2V0Um93c1NlbGVjdHMiLCJnZXRSb3dzU2VsZWN0QWxsIiwiZ2V0Tm9XcmFwVG9nZ2xlcyIsInNlbGVjdFRyIiwidHIiLCJwcm9wIiwic2VsZWN0VHJBbGwiLCJ0YWJsZUNvbnRhaW5lciIsInVuc2VsZWN0VHIiLCJ1bnNlbGVjdFRyQWxsIiwiZml4ZWRDb2xzTGVmdCIsInRhYmxlV3JhcHBlciIsImNvbE9mZnNldCIsImNzcyIsIm91dGVyV2lkdGgiLCJmaXhlZENvbHNSaWdodCIsInJldmVyc2UiLCJjb3JldWlUYWJsZVByaXZhdGUiLCJpbml0Q29sdW1ucyIsImNvbHVtbnNTdG9yYWdlIiwic2F2ZVN0YXRlIiwiZ2V0U3RvcmFnZUZpZWxkIiwia2V5MiIsImNvbHVtblN0b3JhZ2UiLCJfb3B0aW9ucyIsIm92ZXJmbG93IiwiY29sdW1uSW5zdGFuY2UiLCJjb3JldWlUYWJsZSIsImluaXRTZWFyY2giLCJzZWFyY2hDb250cm9scyIsInNlYXJjaFZhbHVlcyIsInNlYXJjaCIsImNvbnRyb2xJbnN0YW5jZSIsIl9zZWFyY2giLCJpbml0Q29udHJvbHMiLCJyb3ciLCJjb250cm9sc0xlZnQiLCJjb250cm9sc0NlbnRlciIsImNvbnRyb2xzUmlnaHQiLCJsZWZ0IiwiaW5pdENvbnRyb2wiLCJjZW50ZXIiLCJyaWdodCIsIl9jb250cm9sc1Bvc2l0aW9ucyIsImNvbnRyb2xzIiwiX2NvbnRyb2xzIiwiZmlsdGVyTmFtZSIsImZpbHRlcnMiLCJmaWx0ZXJWYWx1ZXMiLCJfZmlsdGVycyIsImluaXRTb3J0Iiwic29ydCIsInNlYXJjaExvY2FsUmVjb3JkcyIsInNlYXJjaERhdGEiLCJnZXRTZWFyY2hEYXRhIiwiZmlsdGVyRGF0YSIsImdldEZpbHRlckRhdGEiLCJjb2x1bW5zT3B0aW9ucyIsImNvbnZlcnRUb1N0cmluZyIsImlzRmlsdGVyZWRSZWNvcmQiLCJzZXRSZWNvcmRzIiwiX3JlY29yZHNJbmRleCIsImFkZFJlY29yZCIsImFmdGVySW5kZXgiLCJleHRlbmQiLCJfbWV0YSIsInNlcSIsIl9zZXEiLCJhZGRSZWNvcmRCZWZvcmUiLCJpc3NldEtleSIsImtleUJlZm9yZSIsInJlY29yZERhdGEiLCJmaWVsZFZhbHVlIiwiX3RyaWdnZXIiLCJwYXJhbXMiLCJfZXZlbnRzIiwiY2FsbGJhY2siLCJzaW5nbGVFeGVjIiwic29ydFJlY29yZHNCeVNlcSIsImIiLCJzb3J0UmVjb3Jkc0J5RmllbGRzIiwiY29sdW1uc0NvbnZlcnRlcnMiLCJpc3NldEFGaWVsZCIsImlzc2V0QkZpZWxkIiwiYVZhbCIsImJWYWwiLCJzZXRDb2x1bW5zU29ydCIsInRoZWFkIiwic29ydENvbHVtbiIsInNvcnRJdGVtIiwiZ2V0U3RvcmFnZSIsInN0b3JhZ2UiLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwicGFyc2UiLCJzZXRTdG9yYWdlIiwic3RvcmFnZUFsbCIsInNldEl0ZW0iLCJzZXRTdG9yYWdlRmllbGQiLCJjb3JldWlUYWJsZUluc3RhbmNlIiwicHJpbWFyeUtleSIsImxhbmdJdGVtcyIsImhlaWdodCIsIm1pbkhlaWdodCIsIm5heEhlaWdodCIsInBhZ2UiLCJyZWNvcmRzUGVyUGFnZSIsIm5vQm9yZGVyIiwibm9XcmFwIiwibm9XcmFwVG9nZ2xlIiwic2hvd1Njcm9sbFNoYWRvdyIsInJlY29yZHNSZXF1ZXN0IiwibWV0aG9kIiwicmVxdWVzdFBhcmFtcyIsImhlYWRlciIsImZvb3RlciIsImxhYmVsV2lkdGgiLCJfaWQiLCJfaXNSZWNvcmRzUmVxdWVzdCIsIl9pbml0IiwicmVjb3JkS2V5IiwiZ2V0UmVjb3JkQnlJbmRleCIsImZpZWxkUXVvdGUiLCJsb2NhdGlvbiIsInByZXZlbnREZWZhdWx0IiwicGFyZW50Iiwic29ydGFibGVDb2x1bW5zIiwic29ydGluZyIsImN1cnJlbnRPcmRlciIsInNvcnREZWZhdWx0Iiwic29ydEZpZWxkcyIsImJvb3RzdHJhcCIsIlRvb2x0aXAiLCJ3aWR0aFNpemVzIiwiaGVpZ2h0U2l6ZXMiLCJoZWFkZXJzT3V0IiwiaGVhZGVyc0luIiwiZm9vdGVyc0luIiwiZm9vdGVyc091dCIsIm1heEhlaWdodCIsImNvbnRyb2xSZW5kZXIiLCJoZWFkZXJDb250cm9scyIsImZvb3RlckNvbnRyb2xzIiwibG9hZEJ5RnVuY3Rpb24iLCJsb2FkIiwiY2xhc3Nlc1dyYXBwZXIiLCJjb250YWluZXJFbGVtZW50IiwicHJlcGVuZCIsImRvbUVsZW1lbnQiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwibG9jayIsImNvbnRhaW5lciIsInVubG9jayIsInBhcmFtUGFnZSIsInBhcmFtQ291bnQiLCJwYXJhbVN0YXJ0IiwiTnVtYmVyIiwicGFyYW1FbmQiLCJwYXJhbVNlYXJjaCIsInNlYXJjaEl0ZW0iLCJwYXJhbVNvcnQiLCJhamF4IiwiZGF0YVR5cGUiLCJiZWZvcmVTZW5kIiwieGhyIiwic3VjY2VzcyIsInRvdGFsIiwiZXJyb3IiLCJ0ZXh0U3RhdHVzIiwiZXJyb3JUaHJvd24iLCJjb21wbGV0ZSIsInRoZW4iLCJyZWxvYWQiLCJyZWZyZXNoIiwicmVwbGFjZVdpdGgiLCJzZXRQYWdlU2l6ZSIsInNlbGVjdEFsbCIsInVuc2VsZWN0QWxsIiwic2VsZWN0UmVjb3JkIiwiZ2V0UmVjb3JkQnlJZCIsInNlbGVjdFJlY29yZEJ5SW5kZXgiLCJ1bnNlbGVjdFJlY29yZCIsImdldFNlbGVjdGVkUmVjb3Jkc0lkIiwiZ2V0U2VsZWN0ZWRSZWNvcmRzIiwiZ2V0UmVjb3JkIiwiZ2V0UmVjb3JkcyIsImdldERhdGEiLCJwcmV2UGFnZSIsIm5leHRQYWdlIiwidG90YWxQYWdlcyIsImNlaWwiLCJnb1BhZ2UiLCJldmVudE5hbWVzIiwic2V0Q29sdW1uc1Nob3ciLCJpc0NoYW5nZSIsInNldFNob3ciLCJzaG93Q29sdW1ucyIsImhpZGVDb2x1bW5zIiwiZXh0T3B0aW9ucyIsImdldFZhbHVlIiwic2VhcmNoUmVjb3JkcyIsImNsZWFyU2VhcmNoIiwic2V0VmFsdWUiLCJjbGVhckZpbHRlcnMiLCJyZWNvcmRJdGVtIiwiZ2V0UmVjb3JkQnlGaWVsZCIsImdldENvbnRyb2xCeUlkIiwiZ2V0U2VhcmNoQ29udHJvbEJ5SWQiLCJjb2x1bW5Tb3J0YWJsZSIsInJlbW92ZVJlY29yZEJ5SW5kZXgiLCJhZGRSZWNvcmRBZnRlckluZGV4IiwiYWRkUmVjb3JkQmVmb3JlSW5kZXgiLCJiZWZvcmUiLCJhZGRSZWNvcmRGaXJzdCIsImFkZFJlY29yZExhc3QiLCJwYXJzZUludCIsInRhYmxlQm9keSIsImV4cGFuZFJlY29yZENvbnRlbnQiLCJyZWNvcmRJbmRleCIsImlzUmVidWlsZCIsImNhbGxiYWNrUmVzdWx0IiwiZXhwYW5kUmVjb3JkVXJsIiwicmVzcG9uc2UiLCJnZXRSZXNwb25zZUhlYWRlciIsIl9pbnN0YW5jZXMiLCJfc2V0dGluZ3MiLCJnZXRTZXR0aW5nIiwic2V0U2V0dGluZ3MiLCJsYW5nRW4iLCJsYW5nUnUiLCJDb250cm9sIiwiX2NsYXNzQ2FsbENoZWNrIiwiX2RlZmluZVByb3BlcnR5IiwiX3RhYmxlIiwiX2NyZWF0ZUNsYXNzIiwiQ29udHJvbExpbmsiLCJfQ29udHJvbCIsIl9jYWxsU3VwZXIiLCJfaW5oZXJpdHMiLCJsaW5rIiwiQ29udHJvbEJ1dHRvbiIsImJ0biIsIkNvbnRyb2xEcm9wZG93biIsIkNvcmV1aVRhYmxlVXRpbHMiLCJidXR0b24iLCJkcm9wZG93biIsIkNvbnRyb2xCdXR0b25Hcm91cCIsIl90aGlzMiIsImJ1dHRvbnMiLCJtYWtlTGluayIsIl9saW5rIiwibWFrZUJ1dHRvbiIsIl9idXR0b24iLCJtYWtlRHJvcGRvd24iLCJfZHJvcGRvd24iLCJsaW5rRWxlbWVudCIsImJ1dHRvbkVsZW1lbnQiLCJkcm9wZG93bkVsZW1lbnQiLCJidG5Hcm91cCIsIkNvbnRyb2xDdXN0b20iLCJDb250cm9sUGFnZVNpemUiLCJvcHRpb25zT3JpZ2luYWwiLCJyZWNvcmRzUGVyUGFnZUxpc3QiLCJzZWxlY3RQYWdlU2l6ZSIsImNoYW5nZSIsIkNvbnRyb2xQYWdlSnVtcCIsImlucHV0Iiwia2V5dXAiLCJrZXlDb2RlIiwiY29udHJvbFBhZ2VzIiwic2hvd1ByZXYiLCJwcmV2Iiwic2hvd05leHQiLCJzaG93RGl2aWRlclN0YXJ0Iiwic2hvd0RpdmlkZXJFbmQiLCJzaG93UGFnZUZpcnN0Iiwic2hvd1BhZ2VMYXN0IiwicGFnZXMiLCJwYWdlc1RvdGFsIiwiY291bnRIYWxmIiwiZmxvb3IiLCJjdXJyZW50UGFnZSIsImlzQWN0aXZlUHJldiIsImlzQWN0aXZlTmV4dCIsImJ0blByZXYiLCJidG5OZXh0IiwiYnRuUGFnZXMiLCJDb250cm9sUGFnZXMiLCJjb250cm9sVXBkYXRlIiwiX2NvbnRyb2wiLCJDb250cm9sVG90YWwiLCJyZWNvcmRzVG90YWwiLCJDb250cm9sU2VhcmNoIiwiYnRuQ2xlYXIiLCJidG5Db21wbGV0ZSIsImNsZWFyIiwic2VhcmNoQWN0aW9uIiwiYnRuQXR0ciIsImJ0bkNvbnRlbnQiLCJfcmVuZGVyQnRuQ2xlYXIiLCJidXR0b25Ub2dnbGUiLCJidXR0b25DbGVhciIsImNvbHVtbnNDb250YWluZXIiLCJmYWRlVG9nZ2xlIiwiYnRuQ29tcGxldGVBdHRyIiwiYnRuQ29tcGxldGVDb250ZW50IiwidGFibGVPcHRpb25zIiwic2VhcmNoQ29udHJvbCIsImRlc2NyaXB0aW9uTGFiZWwiLCJjb250cm9sQ29udGFpbmVyIiwic3VmZml4Iiwic2VhcmNoQ29udGFpbmVyIiwid3JhcHBlciIsImluc2VydEFmdGVyIiwiQ29udHJvbENvbHVtbnMiLCJjb250YWluZXJTZWFyY2giLCJzaG93QWxsIiwiY29udGFpbmVyTGlzdCIsImlzIiwiQ29udHJvbENhcHRpb24iLCJDb250cm9sRmlsdGVyQ2xlYXIiLCJDb250cm9sRGl2aWRlciIsIkZpbHRlciIsInNlYXJjaFZhbHVlIiwiRmlsdGVyVGV4dCIsIl9GaWx0ZXIiLCJhdXRvU2VhcmNoIiwiX3ZhbHVlIiwiYXR0ckJ0biIsIkZpbHRlck51bWJlciIsIm51bWJlclN0YXJ0IiwibnVtYmVyRW5kIiwiaW5wdXRTdGFydCIsImlucHV0RW5kIiwidmFsdWVTdGFydCIsInZhbHVlRW5kIiwiaXNzZXRTdGFydCIsImlzc2V0RW5kIiwic3RhcnRBdHRyIiwiZW5kQXR0ciIsImF0dHJTdGFydCIsImF0dHJFbmQiLCJGaWx0ZXJEYXRlIiwiRmlsdGVyRGF0ZXRpbWUiLCJGaWx0ZXJEYXRlTW9udGgiLCJGaWx0ZXJEYXRlUmFuZ2UiLCJkYXRlU3RhcnQiLCJkYXRlRW5kIiwic3RhcnRFbmQiLCJIVE1MSW5wdXRFbGVtZW50Iiwic2hvd1BpY2tlciIsIkZpbHRlckRhdGV0aW1lUmFuZ2UiLCJGaWx0ZXJDaGVja2JveCIsImlucHV0cyIsIm9wdGlvbiIsImNoZWNrZWQiLCJfY2xhc3MiLCJGaWx0ZXJSYWRpbyIsIkZpbHRlclNlbGVjdCIsImlzTXVsdGlwbGUiLCJzZWxlY3RPcHRpb25zIiwiX2J1aWxkT3B0aW9uIiwicmVuZGVyQXR0ciIsImdyb3VwQXR0ciIsImdyb3VwT3B0aW9ucyIsImdyb3VwT3B0aW9uIiwib3B0aW9uQXR0ciIsIm9wdGlvblRleHQiLCJpdGVtVmFsdWUiLCJGaWx0ZXJTd2l0Y2giLCJ2YWx1ZVkiLCJTZWFyY2giLCJTZWFyY2hUZXh0IiwiX1NlYXJjaCIsIlNlYXJjaE51bWJlciIsIlNlYXJjaERhdGUiLCJTZWFyY2hEYXRlTW9udGgiLCJTZWFyY2hEYXRldGltZSIsIlNlYXJjaERhdGVSYW5nZSIsIlNlYXJjaERhdGV0aW1lUmFuZ2UiLCJTZWFyY2hDaGVja2JveCIsIlNlYXJjaENoZWNrYm94QnRuIiwib3B0aW9uc0NsYXNzIiwiaGFzaCIsIlNlYXJjaFJhZGlvIiwiY2hlY2tlZEFsbCIsIlNlYXJjaFJhZGlvQnRuIiwib3B0aW9uQWxsSGFzaCIsIm9wdGlvbk9wdGlvbnNDbGFzcyIsIlNlYXJjaFNlbGVjdCIsIlNlYXJjaFN3aXRjaCIsIkNvbHVtbiIsIkNvbHVtbnNEYXRlIiwiX0NvbHVtbiIsImZvcm1hdCIsImRhdGUiLCJnZXRGdWxsWWVhciIsIm1vbnRoTmFtZXMiLCJnZXRNb250aCIsIm1vbnRoTmFtZXNTaG9ydCIsImdldERhdGUiLCJkYXlOYW1lcyIsImRheU5hbWVzTWluIiwiQ29sdW1uc0RhdGV0aW1lIiwiZ2V0SG91cnMiLCJnZXRNaW51dGVzIiwiZ2V0U2Vjb25kcyIsImZhY3RvcnkiLCJtb21lbnQiLCJ0aGlzIiwiaG9va0NhbGxiYWNrIiwiaG9va3MiLCJzZXRIb29rQ2FsbGJhY2siLCJoYXNPd25Qcm9wIiwiaXNPYmplY3RFbXB0eSIsImdldE93blByb3BlcnR5TmFtZXMiLCJrIiwiaXNVbmRlZmluZWQiLCJpc051bWJlciIsImlzRGF0ZSIsImFyckxlbiIsInZhbHVlT2YiLCJjcmVhdGVVVEMiLCJsb2NhbGUiLCJjcmVhdGVMb2NhbE9yVVRDIiwidXRjIiwiZGVmYXVsdFBhcnNpbmdGbGFncyIsImVtcHR5IiwidW51c2VkVG9rZW5zIiwidW51c2VkSW5wdXQiLCJjaGFyc0xlZnRPdmVyIiwibnVsbElucHV0IiwiaW52YWxpZEVyYSIsImludmFsaWRNb250aCIsImludmFsaWRGb3JtYXQiLCJ1c2VySW52YWxpZGF0ZWQiLCJpc28iLCJwYXJzZWREYXRlUGFydHMiLCJlcmEiLCJtZXJpZGllbSIsInJmYzI4MjIiLCJ3ZWVrZGF5TWlzbWF0Y2giLCJnZXRQYXJzaW5nRmxhZ3MiLCJtIiwiX3BmIiwiaXNWYWxpZCIsImZsYWdzIiwicGFyc2VkUGFydHMiLCJpc05vd1ZhbGlkIiwiX2QiLCJpbnZhbGlkV2Vla2RheSIsIl9zdHJpY3QiLCJiaWdIb3VyIiwiaXNGcm96ZW4iLCJfaXNWYWxpZCIsImNyZWF0ZUludmFsaWQiLCJOYU4iLCJtb21lbnRQcm9wZXJ0aWVzIiwidXBkYXRlSW5Qcm9ncmVzcyIsImNvcHlDb25maWciLCJtb21lbnRQcm9wZXJ0aWVzTGVuIiwiX2lzQU1vbWVudE9iamVjdCIsIl9pIiwiX2YiLCJfbCIsIl90em0iLCJfaXNVVEMiLCJfb2Zmc2V0IiwiX2xvY2FsZSIsIk1vbWVudCIsImNvbmZpZyIsInVwZGF0ZU9mZnNldCIsImlzTW9tZW50IiwibXNnIiwic3VwcHJlc3NEZXByZWNhdGlvbldhcm5pbmdzIiwiZGVwcmVjYXRlIiwiZmlyc3RUaW1lIiwiZGVwcmVjYXRpb25IYW5kbGVyIiwiYXJnIiwiYXJnTGVuIiwic3RhY2siLCJkZXByZWNhdGlvbnMiLCJkZXByZWNhdGVTaW1wbGUiLCJpc0Z1bmN0aW9uIiwiX2NvbmZpZyIsIl9kYXlPZk1vbnRoT3JkaW5hbFBhcnNlTGVuaWVudCIsIl9kYXlPZk1vbnRoT3JkaW5hbFBhcnNlIiwiX29yZGluYWxQYXJzZSIsIm1lcmdlQ29uZmlncyIsInBhcmVudENvbmZpZyIsImNoaWxkQ29uZmlnIiwiTG9jYWxlIiwia2V5cyIsImRlZmF1bHRDYWxlbmRhciIsInNhbWVEYXkiLCJuZXh0RGF5IiwibmV4dFdlZWsiLCJsYXN0RGF5IiwibGFzdFdlZWsiLCJzYW1lRWxzZSIsImNhbGVuZGFyIiwibW9tIiwibm93Iiwib3V0cHV0IiwiX2NhbGVuZGFyIiwiemVyb0ZpbGwiLCJudW1iZXIiLCJ0YXJnZXRMZW5ndGgiLCJmb3JjZVNpZ24iLCJhYnNOdW1iZXIiLCJhYnMiLCJ6ZXJvc1RvRmlsbCIsInNpZ24iLCJwb3ciLCJmb3JtYXR0aW5nVG9rZW5zIiwibG9jYWxGb3JtYXR0aW5nVG9rZW5zIiwiZm9ybWF0RnVuY3Rpb25zIiwiZm9ybWF0VG9rZW5GdW5jdGlvbnMiLCJhZGRGb3JtYXRUb2tlbiIsInRva2VuIiwicGFkZGVkIiwib3JkaW5hbCIsImxvY2FsZURhdGEiLCJyZW1vdmVGb3JtYXR0aW5nVG9rZW5zIiwibWFrZUZvcm1hdEZ1bmN0aW9uIiwiZm9ybWF0TW9tZW50IiwiaW52YWxpZERhdGUiLCJleHBhbmRGb3JtYXQiLCJyZXBsYWNlTG9uZ0RhdGVGb3JtYXRUb2tlbnMiLCJsb25nRGF0ZUZvcm1hdCIsImxhc3RJbmRleCIsImRlZmF1bHRMb25nRGF0ZUZvcm1hdCIsIkxUUyIsIkxUIiwiTCIsIkxMIiwiTExMIiwiTExMTCIsIl9sb25nRGF0ZUZvcm1hdCIsImZvcm1hdFVwcGVyIiwidG9rIiwiZGVmYXVsdEludmFsaWREYXRlIiwiX2ludmFsaWREYXRlIiwiZGVmYXVsdE9yZGluYWwiLCJkZWZhdWx0RGF5T2ZNb250aE9yZGluYWxQYXJzZSIsIl9vcmRpbmFsIiwiZGVmYXVsdFJlbGF0aXZlVGltZSIsImZ1dHVyZSIsInBhc3QiLCJzIiwic3MiLCJtbSIsImgiLCJoaCIsImRkIiwidyIsInd3IiwiTSIsIk1NIiwieSIsInl5IiwicmVsYXRpdmVUaW1lIiwid2l0aG91dFN1ZmZpeCIsImlzRnV0dXJlIiwiX3JlbGF0aXZlVGltZSIsInBhc3RGdXR1cmUiLCJkaWZmIiwiYWxpYXNlcyIsIkQiLCJkYXRlcyIsImRheXMiLCJkYXkiLCJ3ZWVrZGF5cyIsIndlZWtkYXkiLCJFIiwiaXNvd2Vla2RheXMiLCJpc293ZWVrZGF5IiwiREREIiwiZGF5b2Z5ZWFycyIsImRheW9meWVhciIsImhvdXJzIiwiaG91ciIsIm1zIiwibWlsbGlzZWNvbmRzIiwibWlsbGlzZWNvbmQiLCJtaW51dGVzIiwibWludXRlIiwibW9udGhzIiwibW9udGgiLCJRIiwicXVhcnRlcnMiLCJxdWFydGVyIiwic2Vjb25kcyIsInNlY29uZCIsImdnIiwid2Vla3llYXJzIiwid2Vla3llYXIiLCJHRyIsImlzb3dlZWt5ZWFycyIsImlzb3dlZWt5ZWFyIiwid2Vla3MiLCJ3ZWVrIiwiVyIsImlzb3dlZWtzIiwiaXNvd2VlayIsInllYXJzIiwieWVhciIsIm5vcm1hbGl6ZVVuaXRzIiwidW5pdHMiLCJub3JtYWxpemVPYmplY3RVbml0cyIsImlucHV0T2JqZWN0Iiwibm9ybWFsaXplZElucHV0Iiwibm9ybWFsaXplZFByb3AiLCJwcmlvcml0aWVzIiwiaXNvV2Vla2RheSIsImRheU9mWWVhciIsIndlZWtZZWFyIiwiaXNvV2Vla1llYXIiLCJpc29XZWVrIiwiZ2V0UHJpb3JpdGl6ZWRVbml0cyIsInVuaXRzT2JqIiwicHJpb3JpdHkiLCJtYXRjaDEiLCJtYXRjaDIiLCJtYXRjaDMiLCJtYXRjaDQiLCJtYXRjaDYiLCJtYXRjaDF0bzIiLCJtYXRjaDN0bzQiLCJtYXRjaDV0bzYiLCJtYXRjaDF0bzMiLCJtYXRjaDF0bzQiLCJtYXRjaDF0bzYiLCJtYXRjaFVuc2lnbmVkIiwibWF0Y2hTaWduZWQiLCJtYXRjaE9mZnNldCIsIm1hdGNoU2hvcnRPZmZzZXQiLCJtYXRjaFRpbWVzdGFtcCIsIm1hdGNoV29yZCIsIm1hdGNoMXRvMk5vTGVhZGluZ1plcm8iLCJtYXRjaDF0bzJIYXNaZXJvIiwicmVnZXhlcyIsImFkZFJlZ2V4VG9rZW4iLCJzdHJpY3RSZWdleCIsImlzU3RyaWN0IiwiZ2V0UGFyc2VSZWdleEZvclRva2VuIiwidW5lc2NhcGVGb3JtYXQiLCJyZWdleEVzY2FwZSIsIm1hdGNoZWQiLCJwMSIsInAyIiwicDMiLCJwNCIsImFic0Zsb29yIiwidG9JbnQiLCJhcmd1bWVudEZvckNvZXJjaW9uIiwiY29lcmNlZE51bWJlciIsImlzRmluaXRlIiwidG9rZW5zIiwiYWRkUGFyc2VUb2tlbiIsInRva2VuTGVuIiwiYWRkV2Vla1BhcnNlVG9rZW4iLCJfdyIsImFkZFRpbWVUb0FycmF5RnJvbVRva2VuIiwiX2EiLCJpc0xlYXBZZWFyIiwiWUVBUiIsIk1PTlRIIiwiREFURSIsIkhPVVIiLCJNSU5VVEUiLCJTRUNPTkQiLCJNSUxMSVNFQ09ORCIsIldFRUsiLCJXRUVLREFZIiwicGFyc2VUd29EaWdpdFllYXIiLCJkYXlzSW5ZZWFyIiwiZ2V0U2V0WWVhciIsIm1ha2VHZXRTZXQiLCJnZXRJc0xlYXBZZWFyIiwia2VlcFRpbWUiLCJzZXQkMSIsImlzVVRDIiwiZ2V0VVRDTWlsbGlzZWNvbmRzIiwiZ2V0TWlsbGlzZWNvbmRzIiwiZ2V0VVRDU2Vjb25kcyIsImdldFVUQ01pbnV0ZXMiLCJnZXRVVENIb3VycyIsImdldFVUQ0RhdGUiLCJnZXRVVENEYXkiLCJnZXREYXkiLCJnZXRVVENNb250aCIsImdldFVUQ0Z1bGxZZWFyIiwic2V0VVRDTWlsbGlzZWNvbmRzIiwic2V0TWlsbGlzZWNvbmRzIiwic2V0VVRDU2Vjb25kcyIsInNldFNlY29uZHMiLCJzZXRVVENNaW51dGVzIiwic2V0TWludXRlcyIsInNldFVUQ0hvdXJzIiwic2V0SG91cnMiLCJzZXRVVENEYXRlIiwic2V0RGF0ZSIsInNldFVUQ0Z1bGxZZWFyIiwic2V0RnVsbFllYXIiLCJzdHJpbmdHZXQiLCJzdHJpbmdTZXQiLCJwcmlvcml0aXplZCIsInByaW9yaXRpemVkTGVuIiwibW9kIiwieCIsImRheXNJbk1vbnRoIiwibW9kTW9udGgiLCJtb250aHNTaG9ydCIsIm1vbnRoc1Nob3J0UmVnZXgiLCJtb250aHNSZWdleCIsIm1vbnRoc1BhcnNlIiwiZGVmYXVsdExvY2FsZU1vbnRocyIsImRlZmF1bHRMb2NhbGVNb250aHNTaG9ydCIsIk1PTlRIU19JTl9GT1JNQVQiLCJkZWZhdWx0TW9udGhzU2hvcnRSZWdleCIsImRlZmF1bHRNb250aHNSZWdleCIsImxvY2FsZU1vbnRocyIsIl9tb250aHMiLCJpc0Zvcm1hdCIsImxvY2FsZU1vbnRoc1Nob3J0IiwiX21vbnRoc1Nob3J0IiwiaGFuZGxlU3RyaWN0UGFyc2UiLCJtb250aE5hbWUiLCJpaSIsImxsYyIsInRvTG9jYWxlTG93ZXJDYXNlIiwiX21vbnRoc1BhcnNlIiwiX2xvbmdNb250aHNQYXJzZSIsIl9zaG9ydE1vbnRoc1BhcnNlIiwibG9jYWxlTW9udGhzUGFyc2UiLCJfbW9udGhzUGFyc2VFeGFjdCIsInNldE1vbnRoIiwic2V0VVRDTW9udGgiLCJnZXRTZXRNb250aCIsImdldERheXNJbk1vbnRoIiwiY29tcHV0ZU1vbnRoc1BhcnNlIiwiX21vbnRoc1Nob3J0U3RyaWN0UmVnZXgiLCJfbW9udGhzU2hvcnRSZWdleCIsIl9tb250aHNTdHJpY3RSZWdleCIsIl9tb250aHNSZWdleCIsImNtcExlblJldiIsInNob3J0UGllY2VzIiwibG9uZ1BpZWNlcyIsIm1peGVkUGllY2VzIiwic2hvcnRQIiwibG9uZ1AiLCJjcmVhdGVEYXRlIiwiY3JlYXRlVVRDRGF0ZSIsIlVUQyIsImZpcnN0V2Vla09mZnNldCIsImRvdyIsImRveSIsImZ3ZCIsImZ3ZGx3IiwiZGF5T2ZZZWFyRnJvbVdlZWtzIiwibG9jYWxXZWVrZGF5Iiwid2Vla09mZnNldCIsInJlc1llYXIiLCJyZXNEYXlPZlllYXIiLCJ3ZWVrT2ZZZWFyIiwicmVzV2VlayIsIndlZWtzSW5ZZWFyIiwid2Vla09mZnNldE5leHQiLCJsb2NhbGVXZWVrIiwiX3dlZWsiLCJkZWZhdWx0TG9jYWxlV2VlayIsImxvY2FsZUZpcnN0RGF5T2ZXZWVrIiwibG9jYWxlRmlyc3REYXlPZlllYXIiLCJnZXRTZXRXZWVrIiwiYWRkIiwiZ2V0U2V0SVNPV2VlayIsIndlZWtkYXlzTWluIiwid2Vla2RheXNTaG9ydCIsIndlZWtkYXlzTWluUmVnZXgiLCJ3ZWVrZGF5c1Nob3J0UmVnZXgiLCJ3ZWVrZGF5c1JlZ2V4Iiwid2Vla2RheXNQYXJzZSIsInBhcnNlV2Vla2RheSIsInBhcnNlSXNvV2Vla2RheSIsInNoaWZ0V2Vla2RheXMiLCJ3cyIsImRlZmF1bHRMb2NhbGVXZWVrZGF5cyIsImRlZmF1bHRMb2NhbGVXZWVrZGF5c1Nob3J0IiwiZGVmYXVsdExvY2FsZVdlZWtkYXlzTWluIiwiZGVmYXVsdFdlZWtkYXlzUmVnZXgiLCJkZWZhdWx0V2Vla2RheXNTaG9ydFJlZ2V4IiwiZGVmYXVsdFdlZWtkYXlzTWluUmVnZXgiLCJsb2NhbGVXZWVrZGF5cyIsIl93ZWVrZGF5cyIsImxvY2FsZVdlZWtkYXlzU2hvcnQiLCJfd2Vla2RheXNTaG9ydCIsImxvY2FsZVdlZWtkYXlzTWluIiwiX3dlZWtkYXlzTWluIiwiaGFuZGxlU3RyaWN0UGFyc2UkMSIsIndlZWtkYXlOYW1lIiwiX3dlZWtkYXlzUGFyc2UiLCJfc2hvcnRXZWVrZGF5c1BhcnNlIiwiX21pbldlZWtkYXlzUGFyc2UiLCJsb2NhbGVXZWVrZGF5c1BhcnNlIiwiX3dlZWtkYXlzUGFyc2VFeGFjdCIsIl9mdWxsV2Vla2RheXNQYXJzZSIsImdldFNldERheU9mV2VlayIsImdldFNldExvY2FsZURheU9mV2VlayIsImdldFNldElTT0RheU9mV2VlayIsImNvbXB1dGVXZWVrZGF5c1BhcnNlIiwiX3dlZWtkYXlzU3RyaWN0UmVnZXgiLCJfd2Vla2RheXNSZWdleCIsIl93ZWVrZGF5c1Nob3J0U3RyaWN0UmVnZXgiLCJfd2Vla2RheXNTaG9ydFJlZ2V4IiwiX3dlZWtkYXlzTWluU3RyaWN0UmVnZXgiLCJfd2Vla2RheXNNaW5SZWdleCIsIm1pblBpZWNlcyIsIm1pbnAiLCJzaG9ydHAiLCJsb25ncCIsImhGb3JtYXQiLCJrRm9ybWF0IiwibG93ZXJjYXNlIiwibWF0Y2hNZXJpZGllbSIsIl9tZXJpZGllbVBhcnNlIiwia0lucHV0IiwiX2lzUG0iLCJpc1BNIiwiX21lcmlkaWVtIiwicG9zIiwicG9zMSIsInBvczIiLCJsb2NhbGVJc1BNIiwiZGVmYXVsdExvY2FsZU1lcmlkaWVtUGFyc2UiLCJnZXRTZXRIb3VyIiwibG9jYWxlTWVyaWRpZW0iLCJpc0xvd2VyIiwiYmFzZUNvbmZpZyIsImRheU9mTW9udGhPcmRpbmFsUGFyc2UiLCJtZXJpZGllbVBhcnNlIiwibG9jYWxlcyIsImxvY2FsZUZhbWlsaWVzIiwiZ2xvYmFsTG9jYWxlIiwiY29tbW9uUHJlZml4IiwiYXJyMSIsImFycjIiLCJtaW5sIiwibm9ybWFsaXplTG9jYWxlIiwiY2hvb3NlTG9jYWxlIiwibmFtZXMiLCJqIiwibG9hZExvY2FsZSIsImlzTG9jYWxlTmFtZVNhbmUiLCJvbGRMb2NhbGUiLCJhbGlhc2VkUmVxdWlyZSIsIl9hYmJyIiwiZ2V0U2V0R2xvYmFsTG9jYWxlIiwidmFsdWVzIiwiZ2V0TG9jYWxlIiwiZGVmaW5lTG9jYWxlIiwiYWJiciIsInBhcmVudExvY2FsZSIsInVwZGF0ZUxvY2FsZSIsInRtcExvY2FsZSIsImxpc3RMb2NhbGVzIiwiY2hlY2tPdmVyZmxvdyIsIl9vdmVyZmxvd0RheU9mWWVhciIsIl9vdmVyZmxvd1dlZWtzIiwiX292ZXJmbG93V2Vla2RheSIsImV4dGVuZGVkSXNvUmVnZXgiLCJiYXNpY0lzb1JlZ2V4IiwidHpSZWdleCIsImlzb0RhdGVzIiwiaXNvVGltZXMiLCJhc3BOZXRKc29uUmVnZXgiLCJvYnNPZmZzZXRzIiwiVVQiLCJHTVQiLCJFRFQiLCJFU1QiLCJDRFQiLCJDU1QiLCJNRFQiLCJNU1QiLCJQRFQiLCJQU1QiLCJjb25maWdGcm9tSVNPIiwibCIsImFsbG93VGltZSIsImRhdGVGb3JtYXQiLCJ0aW1lRm9ybWF0IiwidHpGb3JtYXQiLCJpc29EYXRlc0xlbiIsImlzb1RpbWVzTGVuIiwiY29uZmlnRnJvbVN0cmluZ0FuZEZvcm1hdCIsImV4dHJhY3RGcm9tUkZDMjgyMlN0cmluZ3MiLCJ5ZWFyU3RyIiwibW9udGhTdHIiLCJkYXlTdHIiLCJob3VyU3RyIiwibWludXRlU3RyIiwic2Vjb25kU3RyIiwidW50cnVuY2F0ZVllYXIiLCJwcmVwcm9jZXNzUkZDMjgyMiIsImNoZWNrV2Vla2RheSIsIndlZWtkYXlTdHIiLCJwYXJzZWRJbnB1dCIsIndlZWtkYXlQcm92aWRlZCIsIndlZWtkYXlBY3R1YWwiLCJjYWxjdWxhdGVPZmZzZXQiLCJvYnNPZmZzZXQiLCJtaWxpdGFyeU9mZnNldCIsIm51bU9mZnNldCIsImhtIiwiY29uZmlnRnJvbVJGQzI4MjIiLCJwYXJzZWRBcnJheSIsImNvbmZpZ0Zyb21TdHJpbmciLCJjcmVhdGVGcm9tSW5wdXRGYWxsYmFjayIsIl91c2VVVEMiLCJkZWZhdWx0cyIsImN1cnJlbnREYXRlQXJyYXkiLCJub3dWYWx1ZSIsImNvbmZpZ0Zyb21BcnJheSIsImN1cnJlbnREYXRlIiwiZXhwZWN0ZWRXZWVrZGF5IiwieWVhclRvVXNlIiwiZGF5T2ZZZWFyRnJvbVdlZWtJbmZvIiwiX2RheU9mWWVhciIsIl9uZXh0RGF5IiwidGVtcCIsIndlZWtkYXlPdmVyZmxvdyIsImN1cldlZWsiLCJjcmVhdGVMb2NhbCIsIklTT184NjAxIiwiUkZDXzI4MjIiLCJza2lwcGVkIiwic3RyaW5nTGVuZ3RoIiwidG90YWxQYXJzZWRJbnB1dExlbmd0aCIsIm1lcmlkaWVtRml4V3JhcCIsImVyYXNDb252ZXJ0WWVhciIsImlzUG0iLCJtZXJpZGllbUhvdXIiLCJjb25maWdGcm9tU3RyaW5nQW5kQXJyYXkiLCJ0ZW1wQ29uZmlnIiwiYmVzdE1vbWVudCIsInNjb3JlVG9CZWF0IiwiY3VycmVudFNjb3JlIiwidmFsaWRGb3JtYXRGb3VuZCIsImJlc3RGb3JtYXRJc1ZhbGlkIiwiY29uZmlnZkxlbiIsInNjb3JlIiwiY29uZmlnRnJvbU9iamVjdCIsImRheU9yRGF0ZSIsImNyZWF0ZUZyb21Db25maWciLCJwcmVwYXJlQ29uZmlnIiwicHJlcGFyc2UiLCJjb25maWdGcm9tSW5wdXQiLCJwcm90b3R5cGVNaW4iLCJvdGhlciIsInByb3RvdHlwZU1heCIsInBpY2tCeSIsIm1vbWVudHMiLCJvcmRlcmluZyIsImlzRHVyYXRpb25WYWxpZCIsInVuaXRIYXNEZWNpbWFsIiwib3JkZXJMZW4iLCJwYXJzZUZsb2F0IiwiaXNWYWxpZCQxIiwiY3JlYXRlSW52YWxpZCQxIiwiY3JlYXRlRHVyYXRpb24iLCJEdXJhdGlvbiIsImR1cmF0aW9uIiwiX21pbGxpc2Vjb25kcyIsIl9kYXlzIiwiX2J1YmJsZSIsImlzRHVyYXRpb24iLCJhYnNSb3VuZCIsInJvdW5kIiwiY29tcGFyZUFycmF5cyIsImFycmF5MSIsImFycmF5MiIsImRvbnRDb252ZXJ0IiwibGVuZ3RoRGlmZiIsImRpZmZzIiwib2Zmc2V0Iiwic2VwYXJhdG9yIiwidXRjT2Zmc2V0Iiwib2Zmc2V0RnJvbVN0cmluZyIsImNodW5rT2Zmc2V0IiwibWF0Y2hlciIsImNodW5rIiwiY2xvbmVXaXRoT2Zmc2V0IiwibW9kZWwiLCJjbG9uZSIsInNldFRpbWUiLCJsb2NhbCIsImdldERhdGVPZmZzZXQiLCJnZXRUaW1lem9uZU9mZnNldCIsImdldFNldE9mZnNldCIsImtlZXBMb2NhbFRpbWUiLCJrZWVwTWludXRlcyIsImxvY2FsQWRqdXN0IiwiX2NoYW5nZUluUHJvZ3Jlc3MiLCJhZGRTdWJ0cmFjdCIsImdldFNldFpvbmUiLCJzZXRPZmZzZXRUb1VUQyIsInNldE9mZnNldFRvTG9jYWwiLCJzdWJ0cmFjdCIsInNldE9mZnNldFRvUGFyc2VkT2Zmc2V0IiwidFpvbmUiLCJoYXNBbGlnbmVkSG91ck9mZnNldCIsImlzRGF5bGlnaHRTYXZpbmdUaW1lIiwiaXNEYXlsaWdodFNhdmluZ1RpbWVTaGlmdGVkIiwiX2lzRFNUU2hpZnRlZCIsInRvQXJyYXkiLCJpc0xvY2FsIiwiaXNVdGNPZmZzZXQiLCJpc1V0YyIsImFzcE5ldFJlZ2V4IiwiaXNvUmVnZXgiLCJyZXQiLCJkaWZmUmVzIiwicGFyc2VJc28iLCJtb21lbnRzRGlmZmVyZW5jZSIsImludmFsaWQiLCJpbnAiLCJwb3NpdGl2ZU1vbWVudHNEaWZmZXJlbmNlIiwiYmFzZSIsImlzQWZ0ZXIiLCJpc0JlZm9yZSIsImNyZWF0ZUFkZGVyIiwiZGlyZWN0aW9uIiwicGVyaW9kIiwiZHVyIiwidG1wIiwiaXNBZGRpbmciLCJpc1N0cmluZyIsImlzTW9tZW50SW5wdXQiLCJpc051bWJlck9yU3RyaW5nQXJyYXkiLCJpc01vbWVudElucHV0T2JqZWN0Iiwib2JqZWN0VGVzdCIsInByb3BlcnR5VGVzdCIsInByb3BlcnRpZXMiLCJwcm9wZXJ0eSIsInByb3BlcnR5TGVuIiwiYXJyYXlUZXN0IiwiZGF0YVR5cGVUZXN0IiwiaXNDYWxlbmRhclNwZWMiLCJnZXRDYWxlbmRhckZvcm1hdCIsIm15TW9tZW50IiwiY2FsZW5kYXIkMSIsInRpbWUiLCJmb3JtYXRzIiwic29kIiwic3RhcnRPZiIsImNhbGVuZGFyRm9ybWF0IiwibG9jYWxJbnB1dCIsImVuZE9mIiwiaXNCZXR3ZWVuIiwiaW5jbHVzaXZpdHkiLCJsb2NhbEZyb20iLCJsb2NhbFRvIiwiaXNTYW1lIiwiaW5wdXRNcyIsImlzU2FtZU9yQWZ0ZXIiLCJpc1NhbWVPckJlZm9yZSIsImFzRmxvYXQiLCJ6b25lRGVsdGEiLCJtb250aERpZmYiLCJ3aG9sZU1vbnRoRGlmZiIsImFuY2hvciIsImFuY2hvcjIiLCJhZGp1c3QiLCJkZWZhdWx0Rm9ybWF0IiwiZGVmYXVsdEZvcm1hdFV0YyIsInRvSVNPU3RyaW5nIiwia2VlcE9mZnNldCIsInRvRGF0ZSIsImluc3BlY3QiLCJ6b25lIiwicHJlZml4IiwiZGF0ZXRpbWUiLCJpbnB1dFN0cmluZyIsInBvc3Rmb3JtYXQiLCJodW1hbml6ZSIsImZyb21Ob3ciLCJ0b05vdyIsIm5ld0xvY2FsZURhdGEiLCJNU19QRVJfU0VDT05EIiwiTVNfUEVSX01JTlVURSIsIk1TX1BFUl9IT1VSIiwiTVNfUEVSXzQwMF9ZRUFSUyIsIm1vZCQxIiwiZGl2aWRlbmQiLCJkaXZpc29yIiwibG9jYWxTdGFydE9mRGF0ZSIsInV0Y1N0YXJ0T2ZEYXRlIiwic3RhcnRPZkRhdGUiLCJ1bml4IiwidG9PYmplY3QiLCJ0b0pTT04iLCJpc1ZhbGlkJDIiLCJwYXJzaW5nRmxhZ3MiLCJpbnZhbGlkQXQiLCJjcmVhdGlvbkRhdGEiLCJtYXRjaEVyYUFiYnIiLCJtYXRjaEVyYU5hbWUiLCJtYXRjaEVyYU5hcnJvdyIsImVyYXNQYXJzZSIsIm1hdGNoRXJhWWVhck9yZGluYWwiLCJfZXJhWWVhck9yZGluYWxSZWdleCIsImVyYVllYXJPcmRpbmFsUGFyc2UiLCJsb2NhbGVFcmFzIiwiZXJhcyIsIl9lcmFzIiwic2luY2UiLCJ1bnRpbCIsIkluZmluaXR5IiwibG9jYWxlRXJhc1BhcnNlIiwiZXJhTmFtZSIsIm5hcnJvdyIsImxvY2FsZUVyYXNDb252ZXJ0WWVhciIsImdldEVyYU5hbWUiLCJnZXRFcmFOYXJyb3ciLCJnZXRFcmFBYmJyIiwiZ2V0RXJhWWVhciIsImVyYXNOYW1lUmVnZXgiLCJjb21wdXRlRXJhc1BhcnNlIiwiX2VyYXNOYW1lUmVnZXgiLCJfZXJhc1JlZ2V4IiwiZXJhc0FiYnJSZWdleCIsIl9lcmFzQWJiclJlZ2V4IiwiZXJhc05hcnJvd1JlZ2V4IiwiX2VyYXNOYXJyb3dSZWdleCIsImFiYnJQaWVjZXMiLCJuYW1lUGllY2VzIiwibmFycm93UGllY2VzIiwiZXJhc05hbWUiLCJlcmFzQWJiciIsImVyYXNOYXJyb3ciLCJhZGRXZWVrWWVhckZvcm1hdFRva2VuIiwiZ2V0dGVyIiwiZ2V0U2V0V2Vla1llYXIiLCJnZXRTZXRXZWVrWWVhckhlbHBlciIsImdldFNldElTT1dlZWtZZWFyIiwiZ2V0SVNPV2Vla3NJblllYXIiLCJnZXRJU09XZWVrc0luSVNPV2Vla1llYXIiLCJnZXRXZWVrc0luWWVhciIsIndlZWtJbmZvIiwiZ2V0V2Vla3NJbldlZWtZZWFyIiwid2Vla3NUYXJnZXQiLCJzZXRXZWVrQWxsIiwiZGF5T2ZZZWFyRGF0YSIsImdldFNldFF1YXJ0ZXIiLCJnZXRTZXREYXlPZk1vbnRoIiwiZ2V0U2V0RGF5T2ZZZWFyIiwiZ2V0U2V0TWludXRlIiwiZ2V0U2V0U2Vjb25kIiwiZ2V0U2V0TWlsbGlzZWNvbmQiLCJwYXJzZU1zIiwiZ2V0Wm9uZUFiYnIiLCJnZXRab25lTmFtZSIsInByb3RvIiwiU3ltYm9sIiwiZm9yIiwiZXJhTmFycm93IiwiZXJhQWJiciIsImVyYVllYXIiLCJpc29XZWVrcyIsIndlZWtzSW5XZWVrWWVhciIsImlzb1dlZWtzSW5ZZWFyIiwiaXNvV2Vla3NJbklTT1dlZWtZZWFyIiwicGFyc2Vab25lIiwiaXNEU1QiLCJ6b25lQWJiciIsInpvbmVOYW1lIiwiaXNEU1RTaGlmdGVkIiwiY3JlYXRlVW5peCIsImNyZWF0ZUluWm9uZSIsInByZVBhcnNlUG9zdEZvcm1hdCIsInByb3RvJDEiLCJmaXJzdERheU9mWWVhciIsImZpcnN0RGF5T2ZXZWVrIiwiZ2V0JDEiLCJzZXR0ZXIiLCJsaXN0TW9udGhzSW1wbCIsIm91dCIsImxpc3RXZWVrZGF5c0ltcGwiLCJsb2NhbGVTb3J0ZWQiLCJsaXN0TW9udGhzIiwibGlzdE1vbnRoc1Nob3J0IiwibGlzdFdlZWtkYXlzIiwibGlzdFdlZWtkYXlzU2hvcnQiLCJsaXN0V2Vla2RheXNNaW4iLCJsYW5nRGF0YSIsIm1hdGhBYnMiLCJhZGRTdWJ0cmFjdCQxIiwiYWRkJDEiLCJzdWJ0cmFjdCQxIiwiYWJzQ2VpbCIsImJ1YmJsZSIsIm1vbnRoc0Zyb21EYXlzIiwibW9udGhzVG9EYXlzIiwiZGF5c1RvTW9udGhzIiwiYXMiLCJtYWtlQXMiLCJhbGlhcyIsImFzTWlsbGlzZWNvbmRzIiwiYXNTZWNvbmRzIiwiYXNNaW51dGVzIiwiYXNIb3VycyIsImFzRGF5cyIsImFzV2Vla3MiLCJhc01vbnRocyIsImFzUXVhcnRlcnMiLCJhc1llYXJzIiwidmFsdWVPZiQxIiwiY2xvbmUkMSIsImdldCQyIiwibWFrZUdldHRlciIsInRocmVzaG9sZHMiLCJzdWJzdGl0dXRlVGltZUFnbyIsInJlbGF0aXZlVGltZSQxIiwicG9zTmVnRHVyYXRpb24iLCJnZXRTZXRSZWxhdGl2ZVRpbWVSb3VuZGluZyIsInJvdW5kaW5nRnVuY3Rpb24iLCJnZXRTZXRSZWxhdGl2ZVRpbWVUaHJlc2hvbGQiLCJ0aHJlc2hvbGQiLCJsaW1pdCIsImFyZ1dpdGhTdWZmaXgiLCJhcmdUaHJlc2hvbGRzIiwid2l0aFN1ZmZpeCIsInRoIiwiYWJzJDEiLCJ0b0lTT1N0cmluZyQxIiwidG90YWxTaWduIiwieW1TaWduIiwiZGF5c1NpZ24iLCJobXNTaWduIiwidG9GaXhlZCIsInByb3RvJDIiLCJ0b0lzb1N0cmluZyIsInJlbGF0aXZlVGltZVJvdW5kaW5nIiwicmVsYXRpdmVUaW1lVGhyZXNob2xkIiwiSFRNTDVfRk1UIiwiREFURVRJTUVfTE9DQUwiLCJEQVRFVElNRV9MT0NBTF9TRUNPTkRTIiwiREFURVRJTUVfTE9DQUxfTVMiLCJUSU1FIiwiVElNRV9TRUNPTkRTIiwiVElNRV9NUyIsInBsdXJhbCIsIndvcmQiLCJmb3JtcyIsInJlbGF0aXZlVGltZVdpdGhQbHVyYWwiLCJydSIsInN0YW5kYWxvbmUiLCJsb25nTW9udGhzUGFyc2UiLCJzaG9ydE1vbnRoc1BhcnNlIiwibW9udGhzU3RyaWN0UmVnZXgiLCJtb250aHNTaG9ydFN0cmljdFJlZ2V4IiwiQ29sdW1uc0RhdGVIdW1hbiIsIl9sYW5nIiwiZGF0ZUNvbnRlbnQiLCJDb2x1bW5zSHRtbCIsImNvbHVtblZhbHVlIiwiQ29sdW1uc051bWJlciIsIkNvbHVtbnNNb25leSIsImN1cnJlbmN5IiwiQ29sdW1uc051bWJlcnMiLCJDb2x1bW5zU2VsZWN0Iiwib3JpZ2luYWxPcHRpb25zIiwic2VsZWN0cyIsInN0b3BQcm9wYWdhdGlvbiIsInNlbGVjdCIsIkNvbHVtbnNTd2l0Y2giLCJkaXNhYmxlZCIsInZhbHVlTiIsIm9uQ2hhbmdlIiwiY29udGFpbmVycyIsImlzQ2hlY2tlZCIsImZvcm1Td2l0Y2giLCJyZWNvcmRUYWJsZSIsIkNvbHVtbnNUZXh0IiwiQ29sdW1uc0J1dHRvbiIsIkNvbHVtbnNMaW5rIiwibGlua0NvbnRlbnQiLCJDb2x1bW5zTWVudSIsImxpbmtBdHRyIiwibGlua0F0dHJpYnV0ZXMiLCJidG5BdHRyaWJ1dGVzIiwibWVudUNvbnRlbnQiLCJkcm9wZG93bk1lbnUiLCJkZXRhY2giLCJlT2Zmc2V0IiwidGFyZ2V0IiwidG9wIiwib3V0ZXJIZWlnaHQiLCJDb2x1bW5zQmFkZ2UiLCJDb2x1bW5zQ29tcG9uZW50IiwiQ29sdW1uc1Byb2dyZXNzIiwic2hvd1BlcmNlbnQiLCJiYXJDb2xvciIsImJhcldpZHRoIiwiYmFySGVpZ2h0IiwicGVyY2VudCIsInBlcmNlbnRUZXh0IiwiY29sb3IiLCJDb2x1bW5zSW1hZ2UiLCJpbWdXaWR0aCIsImltZ0hlaWdodCIsImltZ0JvcmRlciIsImltZ1N0eWxlIiwiZW4iLCJidXR0b25Hcm91cCIsImN1c3RvbSIsInBhZ2VTaXplIiwicGFnZUp1bXAiLCJjYXB0aW9uIiwiZmlsdGVyQ2xlYXIiLCJkaXZpZGVyIiwiZGF0ZU1vbnRoIiwiZGF0ZVJhbmdlIiwiZGF0ZXRpbWVSYW5nZSIsImNoZWNrYm94IiwicmFkaW8iLCJjaGVja2JveEJ0biIsInJhZGlvQnRuIiwiZGF0ZUh1bWFuIiwibW9uZXkiLCJudW1iZXJzIiwiYmFkZ2UiLCJwcm9ncmVzcyIsImltYWdlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0VBQUEsSUFBSUEsR0FBRyxHQUFHQyxNQUFNLENBQUNDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQTtFQUM3QkYsR0FBRyxDQUFDLG9CQUFvQixDQUFDLEdBQUcsNERBQTRELENBQUE7RUFDeEZBLEdBQUcsQ0FBQyxxQkFBcUIsQ0FBQyxHQUFHLDBEQUEwRCxDQUFBO0VBQ3ZGQSxHQUFHLENBQUMsb0JBQW9CLENBQUMsR0FBRyxvQkFBb0IsQ0FBQTtFQUNoREEsR0FBRyxDQUFDLG1CQUFtQixDQUFDLEdBQUcsbUNBQW1DLENBQUE7RUFDOURBLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxHQUFHLDBzQkFBMHNCLENBQUE7RUFDcnVCQSxHQUFHLENBQUMsdUJBQXVCLENBQUMsR0FBRyx3U0FBd1MsQ0FBQTtFQUN2VUEsR0FBRyxDQUFDLDJCQUEyQixDQUFDLEdBQUcsb0ZBQW9GLENBQUE7RUFDdkhBLEdBQUcsQ0FBQyxxQkFBcUIsQ0FBQyxHQUFHLDRGQUE0RixDQUFBO0VBQ3pIQSxHQUFHLENBQUMscUJBQXFCLENBQUMsR0FBRywrTkFBK04sQ0FBQTtFQUM1UEEsR0FBRyxDQUFDLGdCQUFnQixDQUFDLEdBQUcsc1ZBQXNWLENBQUE7RUFDOVdBLEdBQUcsQ0FBQyw0QkFBNEIsQ0FBQyxHQUFHLDRDQUE0QyxDQUFBO0VBQ2hGQSxHQUFHLENBQUMsbUNBQW1DLENBQUMsR0FBRywyREFBMkQsQ0FBQTtFQUN0R0EsR0FBRyxDQUFDLHFDQUFxQyxDQUFDLEdBQUcsOExBQThMLENBQUE7RUFDM09BLEdBQUcsQ0FBQyw0Q0FBNEMsQ0FBQyxHQUFHLGdGQUFnRixDQUFBO0VBQ3BJQSxH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