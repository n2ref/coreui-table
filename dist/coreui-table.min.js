(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
  typeof define === 'function' && define.amd ? define(factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, (global.CoreUI = global.CoreUI || {}, global.CoreUI.table = factory()));
})(this, (function () { 'use strict';

  function _typeof(o) {
    "@babel/helpers - typeof";

    return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) {
      return typeof o;
    } : function (o) {
      return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
    }, _typeof(o);
  }
  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
    }
  }
  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    Object.defineProperty(Constructor, "prototype", {
      writable: false
    });
    return Constructor;
  }
  function _defineProperty(obj, key, value) {
    key = _toPropertyKey(key);
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    Object.defineProperty(subClass, "prototype", {
      writable: false
    });
    if (superClass) _setPrototypeOf(subClass, superClass);
  }
  function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
      return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _getPrototypeOf(o);
  }
  function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
      o.__proto__ = p;
      return o;
    };
    return _setPrototypeOf(o, p);
  }
  function _assertThisInitialized(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self;
  }
  function _possibleConstructorReturn(self, call) {
    if (call && (typeof call === "object" || typeof call === "function")) {
      return call;
    } else if (call !== void 0) {
      throw new TypeError("Derived constructors may only return object or undefined");
    }
    return _assertThisInitialized(self);
  }
  function _toPrimitive(input, hint) {
    if (typeof input !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
      var res = prim.call(input, hint || "default");
      if (typeof res !== "object") return res;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
  }
  function _toPropertyKey(arg) {
    var key = _toPrimitive(arg, "string");
    return typeof key === "symbol" ? key : String(key);
  }

  var tpl = Object.create(null);
  tpl['columns/badge.html'] = '<span class="badge text-bg-<%= type %>"><%= text %></span>';
  tpl['columns/button.html'] = '<button type="button"<%- attr %>><%- content %></button>';
  tpl['columns/image.html'] = '<img <%- attr %>/>';
  tpl['columns/link.html'] = '<a <%- attr %>><%- content %></a>';
  tpl['columns/menu.html'] = ' <div class="btn-group" role="group"> <button type="button" data-bs-toggle="dropdown"<%- attr %>> <%- content %> </button> <ul class="dropdown-menu dropdown-menu-<%= position %>"> <% $.each(items, function(key, item) { %> <% if (item.type === \'link\') { %> <li><a href="<%= item.url %>"<%- item.attr %>><%= item.content %></a></li> <% } else if (item.type === \'button\') { %> <li> <button type="button" id="btn-dropdown-<%= item.id %>"<%- item.attr %>> <%- item.content %> </button> </li> <% } else if (item.type === \'divider\') { %> <li><hr class="dropdown-divider"></li> <% } else if (item.type === \'header\') { %> <li><h6 class="dropdown-header"><%= item.content %></h6></li> <% } %> <% }) %> </ul> </div>';
  tpl['columns/progress.html'] = '<% if (description !== null) { %> <small class="text-body-secondary"><%= description %></small> <% } %> <div class="d-inline-flex align-items-center"> <div <%- attr %>> <div class="progress-bar bg-<%= color %>" style="width:<%= percent %>%;"></div> </div> <span><%= percentText %></span> </div>';
  tpl['columns/select_label.html'] = '<input class="coreui-table__select-all form-check-input" type="checkbox" value="">';
  tpl['columns/select.html'] = '<input class="coreui-table__select form-check-input" type="checkbox" value="<%= index %>">';
  tpl['columns/switch.html'] = '<div class="form-switch"> <input class="form-check-input coreui-table__switch" type="checkbox" data-field="<%= field %>" value="<%= index %>"<% if (checked) { %> checked<% } %><% if (disabled) { %> disabled<% } %>> </div>';
  tpl['container.html'] = ' <div id="coreui-table-<%= id %>" class="coreui-table<%= classes %>"<% if (widthSizes) { %> style="<%= widthSizes.join(\';\') %>"<% } %>> <div class="coreui-table__container position-relative"> <div class="coreui-table__wrapper<%= classesWrapper %>" <% if (heightSizes) { %>style="<%= heightSizes.join(\';\') %>"<% } %>></div> </div> </div>';
  tpl['controls/button_group.html'] = '<div class="btn-group" role="group"></div>';
  tpl['controls/button_group/button.html'] = '<button type="button" <%- attr %>><%= content %></button>';
  tpl['controls/button_group/dropdown.html'] = '<div class="btn-group" role="group"> <button type="button" data-bs-toggle="dropdown"<%- attr %>><%- content %></button> <ul class="dropdown-menu dropdown-menu-<%= position %>"></ul> </div>';
  tpl['controls/button_group/dropdown/button.html'] = '<li> <button type="button" class="dropdown-item"><%= content %></button> </li>';
  tpl['controls/button_group/dropdown/divider.html'] = '<li><hr class="dropdown-divider"></li>';
  tpl['controls/button_group/dropdown/link.html'] = '<li><a class="dropdown-item" href="<%= url %>"><%= content %></a></li>';
  tpl['controls/button_group/link.html'] = '<a href="<%= url %>"<%- attr %>><%= content %></a>';
  tpl['controls/button.html'] = '<button type="button"<%- attr %>><%- content %></button>';
  tpl['controls/caption.html'] = '<div class="d-flex flex-column me-3"> <small class="text-body-secondary fw-medium"> <%= title %> <% if (description) { %> <i class="bi bi-question-circle coreui-table__cursor_help" title="<%= description %>"></i> <% } %> </small> <b class="text-nowrap"><%= value %></b> </div>';
  tpl['controls/columns.html'] = '<button type="button"<%- btnAttr %>><%-btnContent%></button>';
  tpl['controls/columns/list.html'] = ' <div class="coreui-table__columns px-3 pt-3 pb-4"> <div class="mb-3"> <div class="form-check coreui-table__check_all"> <label class="form-check-label"> <input class="form-check-input" type="checkbox" <% if (showAll === true) { %>checked<% } %>> <%= lang.all %> </label> </div> <% columns.map(function(column) { %> <div class="form-check coreui-table_check-column"> <label class="form-check-label"> <input class="form-check-input" type="checkbox" value="<%= column.field %>" <% if (column.show === true) { %>checked<% } %>> <%= column.label %> </label> </div> <% }); %> </div> <button type="button" <%- btnCompleteAttr %>> <%- btnCompleteContent %> </button> </div>';
  tpl['controls/divider.html'] = '<div <%- attr %>><%= text %></div>';
  tpl['controls/dropdown.html'] = ' <div class="btn-group" role="group"> <button type="button" data-bs-toggle="dropdown"<%- attr %>><%- content %></button> <ul class="dropdown-menu dropdown-menu-<%= position %>"></ul> </div>';
  tpl['controls/dropdown/button.html'] = '<li> <button type="button" class="dropdown-item"><%= content %></button> </li>';
  tpl['controls/dropdown/divider.html'] = '<li><hr class="dropdown-divider"></li>';
  tpl['controls/dropdown/link.html'] = '<li><a class="dropdown-item" href="<%= url %>"><%= content %></a></li>';
  tpl['controls/filter_clear.html'] = '<button type="button" <%- attr %>><%- content %></button>';
  tpl['controls/link.html'] = '<a href="<%- url %>"<%- attr %>><%- content %></a>';
  tpl['controls/page-jump.html'] = ' <div class="coreui-table__page_jump_container"> <div <%- attr %>> <input type="number" class="form-control border-secondary-subtle" min="1"> <button class="btn btn-outline-secondary border-secondary-subtle" type="button"> <i class="bi bi-chevron-compact-right"></i> </button> </div> </div>';
  tpl['controls/page-size.html'] = ' <select <%- attr %>> <% $.each(recordsPerPageList, function(key, count) { %> <option value="<%= count %>"<% if (recordsPerPage == count) { %>selected<% } %>> <% if (count == \'0\') { %><%= lang.all %><% } else { %><%= count %><% } %> </option> <% }); %> </select>';
  tpl['controls/pages.html'] = ' <nav> <ul <%- attr %>> <% if (showPrev) { %> <li class="page-item coreui-table__page_prev <% if ( ! isActivePrev) { %> disabled<% } %>"> <button type="button" class="page-link"> <i class="bi bi-chevron-left"></i> </button> </li> <% } %> <% if (showPageFirst) { %> <li class="page-item"> <button type="button" class="page-link coreui-table__page"> 1 </button> </li> <% } %> <% if (showDividerStart) { %> <li class="page-item disabled"> <span class="page-link px-1">...</span> </li> <% } %> <% pages.map(function(page) { %> <% if (page == currentPage) { %> <li class="page-item active"> <span class="page-link"><%= page %></span> </li> <% } else { %> <li class="page-item"> <button type="button" class="page-link coreui-table__page"> <%= page %> </button> </li> <% } %> <% }); %> <% if (showDividerEnd) { %> <li class="page-item disabled"> <span class="page-link px-1">...</span> </li> <% } %> <% if (showPageLast) { %> <li class="page-item"> <button type="button" class="page-link coreui-table__page"> <%= pagesTotal %> </button> </li> <% } %> <% if (showNext) { %> <li class="page-item coreui-table__page_next<% if ( ! isActiveNext) { %> disabled<% } %>"> <button type="button" class="page-link"> <i class="bi bi-chevron-right"></i> </button> </li> <% } %> </ul> </nav>';
  tpl['controls/search.html'] = '<div class="btn-group"> <button type="button"<%- btnAttr %>><%- btnContent %></button> <%- btnClear %> </div> ';
  tpl['controls/search/clear.html'] = '<button type="button" <%- attr %>><%- content %></button> ';
  tpl['controls/search/container.html'] = ' <div class="coreui-table__search px-3 pt-3 pb-4"> <div class="mb-3 coreui-table__search_controls"></div> <div class="d-flex flex-sm-wrap flex-md-nowrap"> <div class="d-none d-md-block" style="width:<%= labelWidth %>;min-width:<%= labelWidth %>"></div> <div class="d-flex justify-content-start flex-wrap gap-2"> <button type="button" <%- btnCompleteAttr %>> <%- btnCompleteContent %> </button> </div> </div> </div>';
  tpl['controls/search/control.html'] = '<div class="mb-2 d-flex flex-column flex-md-row "> <label class="col-form-label fw-medium text-start text-md-end pe-2" style="min-width:<%= labelWidth %>;width:<%= labelWidth %>"> <%= label %> <% if (descriptionLabel) { %> <div class="text-muted fw-normal"> <small><%= descriptionLabel %></small> </div> <% } %> </label> <div class="flex-fill coreui-table__search-control_content"> <% if (suffix) { %><%- suffix %><% } %> <% if (description) { %> <div class="text-muted fw-normal"> <small><%= description %></small> </div> <% } %> </div> </div>';
  tpl['controls/total.html'] = '<div <%- attr %>> <small><%= lang.total %>: <span class="coreui-table__count-total"><%= recordsTotal %></span></small> </div>';
  tpl['filters/checkbox.html'] = ' <div class="btn-group"> <% if (label) { %> <span class="input-group-text"><%= label %></span> <% } %> <% $.each(items, function(key, item) { %> <input type="checkbox" class="btn-check" autocomplete="off" id="<%= (field + key) %>" name="<%= field %>" value="<%= item.value %>" <%= item.checked ? \' checked\' : \'\' %>> <label class="<%= item.class %>" for="<%= (field + key) %>"><%= item.text %></label> <% }); %> </div>';
  tpl['filters/date_month.html'] = ' <div class="input-group"> <% if (label) { %> <span class="input-group-text"><%= label %></span> <% } %> <input type="month" <%- attr %>> </div>';
  tpl['filters/date_range.html'] = ' <div class="input-group"> <% if (label) { %> <span class="input-group-text"><%= label %></span> <% } %> <input type="date" <%- startAttr %>> <input type="date" <%- endAttr %>> </div>';
  tpl['filters/date.html'] = ' <div class="input-group"> <% if (label) { %> <span class="input-group-text"><%= label %></span> <% } %> <input type="date" <%- attr %>> </div>';
  tpl['filters/datetime_range.html'] = ' <div class="input-group"> <% if (label) { %> <span class="input-group-text"><%= label %></span> <% } %> <input type="datetime-local" <%- startAttr %>> <input type="datetime-local" <%- endAttr %>> </div>';
  tpl['filters/datetime.html'] = ' <div class="input-group"> <% if (label) { %> <span class="input-group-text"><%= label %></span> <% } %> <input type="datetime-local" <%- attr %>> </div>';
  tpl['filters/number.html'] = ' <div class="input-group"> <% if (label) { %> <span class="input-group-text"><%= label %></span> <% } %> <input type="number" <%- attrStart %>> <input type="number" <%- attrEnd %>> <button type="button" <%- btnAttr %>> <%- btnContent %> </button> </div>';
  tpl['filters/radio.html'] = ' <div class="btn-group"> <% if (label) { %> <span class="input-group-text"><%= label %></span> <% } %> <% $.each(items, function(key, item) { %> <input type="radio" class="btn-check" autocomplete="off" id="<%= (field + key) %>" name="<%= field %>" value="<%= item.value %>" <%= item.checked ? \' checked\' : \'\' %>> <label class="<%= item.class %>" for="<%= (field + key) %>"><%= item.text %></label> <% }); %> </div>';
  tpl['filters/select.html'] = '<div class="input-group flex-nowrap"> <% if (label) { %> <span class="input-group-text"><%= label %></span> <% } %> <select <%- attr %>> <option>--</option> <% $.each(options, function(key, option) { %> <% if (option.type === \'group\') { %> <optgroup<%- option.attr %>> <% $.each(option.options, function(key, groupOption) { %> <option <%- groupOption.attr %>><%= groupOption.text %></option> <% }); %> </optgroup> <% } else { %> <option <%- option.attr %>><%= option.text %></option> <% } %> <% }); %> </select> </div>';
  tpl['filters/switch.html'] = '<div class="form-check form-switch"> <input class="form-check-input" type="checkbox" id="<%= (field + id) %>" name="<%= field %>" value="<%= valueY %>" <%= checked ? \' checked\' : \'\' %>> <% if (label != \'\') { %> <label class="form-check-label" for="<%= (field + id) %>"><%= label %></label> <% } %> </div>';
  tpl['filters/text.html'] = ' <div class="input-group"> <% if (label) { %> <span class="input-group-text"><%= label %></span> <% } %> <input type="text" <%- attr %>> <button type="button" <%- btnAttr %>> <%- btnContent %> </button> </div>';
  tpl['search/checkbox-btn.html'] = ' <div class="pt-2"> <div class="btn-group"> <% options.map(function(option) { %> <input class="btn-check" type="checkbox" value="<%- option.value %>" id="<%= option.hash %>" autocomplete="off" <%= option.checked ? \' checked\' : \'\' %>> <label class="<%= option.optionsClass %>" for="<%= option.hash %>"><%= option.text %></label> <% }); %> </div> </div>';
  tpl['search/checkbox.html'] = ' <div class="pt-2"> <% options.map(function(option) { %> <div class="form-check"> <label class="form-check-label coreui-table_pointer"> <input class="form-check-input" type="checkbox" value="<%- option.value %>" <%= option.checked ? \' checked\' : \'\' %>> <%= option.text %> </label> </div> <% }); %> </div>';
  tpl['search/date_month.html'] = ' <input type="month" <%- attr %>>';
  tpl['search/date_range.html'] = '<div> <input type="date" <%- startAttr %>> <input type="date" <%- endAttr %>> </div>';
  tpl['search/date.html'] = ' <input type="date" <%- attr %>>';
  tpl['search/datetime_range.html'] = '<div> <input type="datetime-local" <%- startAttr %>> <input type="datetime-local" <%- endAttr %>> </div>';
  tpl['search/datetime.html'] = ' <input type="datetime-local" <%- attr %>>';
  tpl['search/number.html'] = ' <input type="number" <%- startAttr %>> <input type="number" <%- endAttr %>>';
  tpl['search/radio-btn.html'] = '<div class="pt-2"> <div class="btn-group"> <input class="btn-check coreui-table__all" type="radio" name="<%= field %>" value="" id="<%= optionAllHash %>" autocomplete="off" <%= checkedAll ? \' checked\' : \'\' %>> <label class="<%= optionOptionsClass %>" for="<%= optionAllHash %>"><%= lang.all %></label> <% options.map(function(option) { %> <input class="btn-check" type="radio" name="<%= field %>" value="<%- option.value %>" id="<%= option.hash %>" autocomplete="off" <%= option.checked ? \' checked="checked"\' : \'\' %>"> <label class="<%= option.optionsClass %>" for="<%= option.hash %>"><%= option.text %></label> <% }); %> </div> </div>';
  tpl['search/radio.html'] = '<div class="pt-2"> <div class="form-check"> <label class="form-check-label coreui-table_pointer"> <input class="form-check-input coreui-table__all" type="radio" name="<%= field %>" value=""<%= checkedAll ? \' checked\' : \'\' %>> <%= lang.all %> </label> </div> <% options.map(function(option) { %> <div class="form-check"> <label class="form-check-label coreui-table_pointer"> <input class="form-check-input" type="radio" name="<%= field %>" value="<%- option.value %>" <%= option.checked ? \' checked="checked"\' : \'\' %>> <%= option.text %> </label> </div> <% }); %> </div>';
  tpl['search/select.html'] = ' <select <%- attr %>> <option>--</option> <% $.each(options, function(key, option) { %> <% if (option.type === \'group\') { %> <optgroup<%- option.attr %>> <% $.each(option.options, function(key, groupOption) { %> <option <%- groupOption.attr %>><%= groupOption.text %></option> <% }); %> </optgroup> <% } else { %> <option <%- option.attr %>><%= option.text %></option> <% } %> <% }); %> </select>';
  tpl['search/switch.html'] = '<div class="form-check form-switch pt-2"> <input class="form-check-input" type="checkbox" id="<%= (field + id) %>" name="<%= field %>" value="<%= valueY %>" <%= checked ? \' checked\' : \'\' %>> </div>';
  tpl['search/text.html'] = '<input type="text" <%- attr %>>';
  tpl['table.html'] = ' <table class="table <%= classes %> mb-0"> <colgroup> <% $.each(colGroups, function(key, columnGroup) { %> <col<% if (columnGroup.style) { %> style="<%= columnGroup.style %>"<% } %>/> <% }); %> </colgroup> <% if (showHeaders) { %> <thead<% if (theadAttr) { %> <%- theadAttr %>"<% } %>> <%- columnsHeader %> </thead> <% } %> <tbody></tbody> <% if (columnsFooter != \'\') { %> <tfoot> <%- columnsFooter %> </tfoot> <% } %> </table>';
  tpl['table/columns/footer.html'] = '<tr> <% $.each(columns, function(key, column) { %> <td<%- column.attr%>><%- column.content %></td> <% }); %> </tr>';
  tpl['table/columns/header.html'] = '<tr class="fw-medium bg-white"> <% $.each(columns, function(key, column) { %> <td<%- column.attr%>><%- column.content %></td> <% }); %> </tr>';
  tpl['table/columns/menu/button.html'] = '<li><button <%- attr%>><%- text %></button></li>';
  tpl['table/columns/menu/divider.html'] = '<li><hr class="dropdown-divider"></li>';
  tpl['table/columns/menu/header.html'] = '<li><h6 class="dropdown-header"><%- text %></h6></li>';
  tpl['table/columns/menu/link.html'] = '<li><a <%- attr%>><%- text %></a></li>';
  tpl['table/columns/td.html'] = '<td<%- attr%>> <span class="coreui-table__column-label"><%- label %></span> <% if (description) { %> <small class="coreui-table__column-description bi bi-question-circle text-body-secondary" title="<%= description %>" data-bs-toggle="tooltip" data-bs-placement="bottom"></small> <% } %> <% if (sortable === \'asc\') { %> <i class="coreui-table__column-sort bi bi-sort-down-alt"></i> <% } else if (sortable === \'desc\') { %> <i class="coreui-table__column-sort bi bi-sort-down"></i> <% } %> <% if (issetMenu) { %> <div class="dropdown d-inline fw-normal coreui-table__column-menu"> <span class="dropdown-toggle <%= menuShowAlways %>" data-bs-toggle="dropdown"> <i class="bi bi-three-dots-vertical"></i> </span> <ul class="dropdown-menu dropdown-menu-<%= menuPosition %>"></ul> </div> <% } %> </td>';
  tpl['table/columns/tr.html'] = '<tr class="fw-medium bg-white"></tr>';
  tpl['table/control.html'] = '<div id="coreui-table-control-<%= id %>" class="coreui-table__control"></div>';
  tpl['table/controls/footer-out.html'] = ' <div class="coreui-table__footer d-flex justify-content-between"> <% if (controlsLeft.length) { %> <div class="coreui-table__controls coreui-table__controls_left d-flex justify-content-start gap-2 flex-wrap flex-fill mb-1 mt-2 align-items-center"></div> <% } %> <% if (controlsCenter.length) { %> <div class="coreui-table__controls coreui-table__controls_center d-flex justify-content-center gap-2 flex-wrap flex-fill mb-1 mt-2 align-items-center"></div> <% } %> <% if (controlsRight.length) { %> <div class="coreui-table__controls coreui-table__controls_right d-flex justify-content-end gap-2 flex-wrap flex-fill mb-1 mt-2 align-items-center"></div> <% } %> </div>';
  tpl['table/controls/footer.html'] = ' <div class="coreui-table__footer ps-1 pe-1 d-flex justify-content-between border-top border-secondary-subtle"> <% if (controlsLeft.length) { %> <div class="coreui-table__controls coreui-table__controls_left d-flex justify-content-start gap-2 flex-wrap flex-fill mb-1 mt-1 align-items-center"></div> <% } %> <% if (controlsCenter.length) { %> <div class="coreui-table__controls coreui-table__controls_center d-flex justify-content-center gap-2 flex-wrap flex-fill mb-1 mt-1 align-items-center"></div> <% } %> <% if (controlsRight.length) { %> <div class="coreui-table__controls coreui-table__controls_right d-flex justify-content-end gap-2 flex-wrap flex-fill mb-1 mt-1 align-items-center"></div> <% } %> </div>';
  tpl['table/controls/header-out.html'] = ' <div class="coreui-table__header d-flex justify-content-between"> <% if (controlsLeft.length) { %> <div class="coreui-table__controls coreui-table__controls_left d-flex justify-content-start gap-2 flex-wrap flex-fill mb-2 mt-1 align-items-center"></div> <% } %> <% if (controlsCenter.length) { %> <div class="coreui-table__controls coreui-table__controls_center d-flex justify-content-center gap-2 flex-wrap flex-fill mb-2 mt-1 align-items-center"></div> <% } %> <% if (controlsRight.length) { %> <div class="coreui-table__controls coreui-table__controls_right d-flex justify-content-end gap-2 flex-wrap flex-fill mb-2 mt-1 align-items-center"></div> <% } %> </div>';
  tpl['table/controls/header.html'] = ' <div class="coreui-table__header ps-1 pe-1 d-flex justify-content-between border-bottom border-secondary-subtle"> <% if (controlsLeft.length) { %> <div class="coreui-table__controls coreui-table__controls_left d-flex justify-content-start gap-2 flex-wrap flex-fill my-1 align-items-center"></div> <% } %> <% if (controlsCenter.length) { %> <div class="coreui-table__controls coreui-table__controls_center d-flex justify-content-center gap-2 flex-wrap flex-fill my-1 align-items-center"></div> <% } %> <% if (controlsRight.length) { %> <div class="coreui-table__controls coreui-table__controls_right d-flex justify-content-end gap-2 flex-wrap flex-fill my-1 align-items-center"></div> <% } %> </div>';
  tpl['table/loader.html'] = '<div class="coreui-table-lock position-absolute w-100 top-0 bottom-0"> <div class="coreui-table-block bg-secondary-subtle position-absolute opacity-50 w-100 top-0 bottom-0"></div> <div class="coreui-table-message position-relative d-flex align-content-center justify-content-start gap-2 mt-3 py-1 px-2 m-auto border border-secondary-subtle rounded-3 bg-body-secondary"> <div class="spinner-border text-secondary align-self-center"></div> <span class="lh-lg"><%= lang.loading %></span> </div> </div>';
  tpl['table/record.html'] = '<tr<%- attr %> data-record-index="<%= index %>"> <% fields.map(function(field) { %> <td<%- field.attr %>></td> <% }); %> </tr>';
  tpl['table/record/empty.html'] = '<tr class="coreui-table__record-empty"> <td class="text-center" colspan="<%= columnsCount %>"><%= lang.emptyRecords %></td> </tr>';
  tpl['table/record/expand.html'] = '<tr class="coreui-table__record-expanded" style="display: none"> <td colspan="<%= colspan %>"></td> </tr>';
  tpl['table/record/group.html'] = '<tr<%- attr %>> <td colspan="<%= colspan %>" class="border-end"></td> </tr>';

  (function (f) {
    if (typeof exports === "object" && typeof module !== "undefined") {
      module.exports = f();
    } else if (typeof define === "function" && define.amd) {
      define([], f);
    } else {
      var g;
      if (typeof window !== "undefined") {
        g = window;
      } else if (typeof global !== "undefined") {
        g = global;
      } else if (typeof self !== "undefined") {
        g = self;
      } else {
        g = this;
      }
      g.ejs = f();
    }
  })(function () {
    return function () {
      function r(e, n, t) {
        function o(i, f) {
          if (!n[i]) {
            if (!e[i]) {
              var c = "function" == typeof require && require;
              if (!f && c) return c(i, !0);
              if (u) return u(i, !0);
              var a = new Error("Cannot find module '" + i + "'");
              throw a.code = "MODULE_NOT_FOUND", a;
            }
            var p = n[i] = {
              exports: {}
            };
            e[i][0].call(p.exports, function (r) {
              var n = e[i][1][r];
              return o(n || r);
            }, p, p.exports, r, e, n, t);
          }
          return n[i].exports;
        }
        for (var u = "function" == typeof require && require, i = 0; i < t.length; i++) o(t[i]);
        return o;
      }
      return r;
    }()({
      1: [function (require, module, exports) {

        var fs = require("fs");
        var path = require("path");
        var utils = require("./utils");
        var scopeOptionWarned = false;
        var _VERSION_STRING = require("../package.json").version;
        var _DEFAULT_OPEN_DELIMITER = "<";
        var _DEFAULT_CLOSE_DELIMITER = ">";
        var _DEFAULT_DELIMITER = "%";
        var _DEFAULT_LOCALS_NAME = "locals";
        var _NAME = "ejs";
        var _REGEX_STRING = "(<%%|%%>|<%=|<%-|<%_|<%#|<%|%>|-%>|_%>)";
        var _OPTS_PASSABLE_WITH_DATA = ["delimiter", "scope", "context", "debug", "compileDebug", "client", "_with", "rmWhitespace", "strict", "filename", "async"];
        var _OPTS_PASSABLE_WITH_DATA_EXPRESS = _OPTS_PASSABLE_WITH_DATA.concat("cache");
        var _BOM = /^\uFEFF/;
        var _JS_IDENTIFIER = /^[a-zA-Z_$][0-9a-zA-Z_$]*$/;
        exports.cache = utils.cache;
        exports.fileLoader = fs.readFileSync;
        exports.localsName = _DEFAULT_LOCALS_NAME;
        exports.promiseImpl = new Function("return this;")().Promise;
        exports.resolveInclude = function (name, filename, isDir) {
          var dirname = path.dirname;
          var extname = path.extname;
          var resolve = path.resolve;
          var includePath = resolve(isDir ? filename : dirname(filename), name);
          var ext = extname(name);
          if (!ext) {
            includePath += ".ejs";
          }
          return includePath;
        };
        function resolvePaths(name, paths) {
          var filePath;
          if (paths.some(function (v) {
            filePath = exports.resolveInclude(name, v, true);
            return fs.existsSync(filePath);
          })) {
            return filePath;
          }
        }
        function getIncludePath(path, options) {
          var includePath;
          var filePath;
          var views = options.views;
          var match = /^[A-Za-z]+:\\|^\//.exec(path);
          if (match && match.length) {
            path = path.replace(/^\/*/, "");
            if (Array.isArray(options.root)) {
              includePath = resolvePaths(path, options.root);
            } else {
              includePath = exports.resolveInclude(path, options.root || "/", true);
            }
          } else {
            if (options.filename) {
              filePath = exports.resolveInclude(path, options.filename);
              if (fs.existsSync(filePath)) {
                includePath = filePath;
              }
            }
            if (!includePath && Array.isArray(views)) {
              includePath = resolvePaths(path, views);
            }
            if (!includePath && typeof options.includer !== "function") {
              throw new Error('Could not find the include file "' + options.escapeFunction(path) + '"');
            }
          }
          return includePath;
        }
        function handleCache(options, template) {
          var func;
          var filename = options.filename;
          var hasTemplate = arguments.length > 1;
          if (options.cache) {
            if (!filename) {
              throw new Error("cache option requires a filename");
            }
            func = exports.cache.get(filename);
            if (func) {
              return func;
            }
            if (!hasTemplate) {
              template = fileLoader(filename).toString().replace(_BOM, "");
            }
          } else if (!hasTemplate) {
            if (!filename) {
              throw new Error("Internal EJS error: no file name or template " + "provided");
            }
            template = fileLoader(filename).toString().replace(_BOM, "");
          }
          func = exports.compile(template, options);
          if (options.cache) {
            exports.cache.set(filename, func);
          }
          return func;
        }
        function tryHandleCache(options, data, cb) {
          var result;
          if (!cb) {
            if (typeof exports.promiseImpl == "function") {
              return new exports.promiseImpl(function (resolve, reject) {
                try {
                  result = handleCache(options)(data);
                  resolve(result);
                } catch (err) {
                  reject(err);
                }
              });
            } else {
              throw new Error("Please provide a callback function");
            }
          } else {
            try {
              result = handleCache(options)(data);
            } catch (err) {
              return cb(err);
            }
            cb(null, result);
          }
        }
        function fileLoader(filePath) {
          return exports.fileLoader(filePath);
        }
        function includeFile(path, options) {
          var opts = utils.shallowCopy(utils.createNullProtoObjWherePossible(), options);
          opts.filename = getIncludePath(path, opts);
          if (typeof options.includer === "function") {
            var includerResult = options.includer(path, opts.filename);
            if (includerResult) {
              if (includerResult.filename) {
                opts.filename = includerResult.filename;
              }
              if (includerResult.template) {
                return handleCache(opts, includerResult.template);
              }
            }
          }
          return handleCache(opts);
        }
        function rethrow(err, str, flnm, lineno, esc) {
          var lines = str.split("\n");
          var start = Math.max(lineno - 3, 0);
          var end = Math.min(lines.length, lineno + 3);
          var filename = esc(flnm);
          var context = lines.slice(start, end).map(function (line, i) {
            var curr = i + start + 1;
            return (curr == lineno ? " >> " : "    ") + curr + "| " + line;
          }).join("\n");
          err.path = filename;
          err.message = (filename || "ejs") + ":" + lineno + "\n" + context + "\n\n" + err.message;
          throw err;
        }
        function stripSemi(str) {
          return str.replace(/;(\s*$)/, "$1");
        }
        exports.compile = function compile(template, opts) {
          var templ;
          if (opts && opts.scope) {
            if (!scopeOptionWarned) {
              console.warn("`scope` option is deprecated and will be removed in EJS 3");
              scopeOptionWarned = true;
            }
            if (!opts.context) {
              opts.context = opts.scope;
            }
            delete opts.scope;
          }
          templ = new Template(template, opts);
          return templ.compile();
        };
        exports.render = function (template, d, o) {
          var data = d || utils.createNullProtoObjWherePossible();
          var opts = o || utils.createNullProtoObjWherePossible();
          if (arguments.length == 2) {
            utils.shallowCopyFromList(opts, data, _OPTS_PASSABLE_WITH_DATA);
          }
          return handleCache(opts, template)(data);
        };
        exports.renderFile = function () {
          var args = Array.prototype.slice.call(arguments);
          var filename = args.shift();
          var cb;
          var opts = {
            filename: filename
          };
          var data;
          var viewOpts;
          if (typeof arguments[arguments.length - 1] == "function") {
            cb = args.pop();
          }
          if (args.length) {
            data = args.shift();
            if (args.length) {
              utils.shallowCopy(opts, args.pop());
            } else {
              if (data.settings) {
                if (data.settings.views) {
                  opts.views = data.settings.views;
                }
                if (data.settings["view cache"]) {
                  opts.cache = true;
                }
                viewOpts = data.settings["view options"];
                if (viewOpts) {
                  utils.shallowCopy(opts, viewOpts);
                }
              }
              utils.shallowCopyFromList(opts, data, _OPTS_PASSABLE_WITH_DATA_EXPRESS);
            }
            opts.filename = filename;
          } else {
            data = utils.createNullProtoObjWherePossible();
          }
          return tryHandleCache(opts, data, cb);
        };
        exports.Template = Template;
        exports.clearCache = function () {
          exports.cache.reset();
        };
        function Template(text, optsParam) {
          var opts = utils.hasOwnOnlyObject(optsParam);
          var options = utils.createNullProtoObjWherePossible();
          this.templateText = text;
          this.mode = null;
          this.truncate = false;
          this.currentLine = 1;
          this.source = "";
          options.client = opts.client || false;
          options.escapeFunction = opts.escape || opts.escapeFunction || utils.escapeXML;
          options.compileDebug = opts.compileDebug !== false;
          options.debug = !!opts.debug;
          options.filename = opts.filename;
          options.openDelimiter = opts.openDelimiter || exports.openDelimiter || _DEFAULT_OPEN_DELIMITER;
          options.closeDelimiter = opts.closeDelimiter || exports.closeDelimiter || _DEFAULT_CLOSE_DELIMITER;
          options.delimiter = opts.delimiter || exports.delimiter || _DEFAULT_DELIMITER;
          options.strict = opts.strict || false;
          options.context = opts.context;
          options.cache = opts.cache || false;
          options.rmWhitespace = opts.rmWhitespace;
          options.root = opts.root;
          options.includer = opts.includer;
          options.outputFunctionName = opts.outputFunctionName;
          options.localsName = opts.localsName || exports.localsName || _DEFAULT_LOCALS_NAME;
          options.views = opts.views;
          options.async = opts.async;
          options.destructuredLocals = opts.destructuredLocals;
          options.legacyInclude = typeof opts.legacyInclude != "undefined" ? !!opts.legacyInclude : true;
          if (options.strict) {
            options._with = false;
          } else {
            options._with = typeof opts._with != "undefined" ? opts._with : true;
          }
          this.opts = options;
          this.regex = this.createRegex();
        }
        Template.modes = {
          EVAL: "eval",
          ESCAPED: "escaped",
          RAW: "raw",
          COMMENT: "comment",
          LITERAL: "literal"
        };
        Template.prototype = {
          createRegex: function () {
            var str = _REGEX_STRING;
            var delim = utils.escapeRegExpChars(this.opts.delimiter);
            var open = utils.escapeRegExpChars(this.opts.openDelimiter);
            var close = utils.escapeRegExpChars(this.opts.closeDelimiter);
            str = str.replace(/%/g, delim).replace(/</g, open).replace(/>/g, close);
            return new RegExp(str);
          },
          compile: function () {
            var src;
            var fn;
            var opts = this.opts;
            var prepended = "";
            var appended = "";
            var escapeFn = opts.escapeFunction;
            var ctor;
            var sanitizedFilename = opts.filename ? JSON.stringify(opts.filename) : "undefined";
            if (!this.source) {
              this.generateSource();
              prepended += '  var __output = "";\n' + "  function __append(s) { if (s !== undefined && s !== null) __output += s }\n";
              if (opts.outputFunctionName) {
                if (!_JS_IDENTIFIER.test(opts.outputFunctionName)) {
                  throw new Error("outputFunctionName is not a valid JS identifier.");
                }
                prepended += "  var " + opts.outputFunctionName + " = __append;" + "\n";
              }
              if (opts.localsName && !_JS_IDENTIFIER.test(opts.localsName)) {
                throw new Error("localsName is not a valid JS identifier.");
              }
              if (opts.destructuredLocals && opts.destructuredLocals.length) {
                var destructuring = "  var __locals = (" + opts.localsName + " || {}),\n";
                for (var i = 0; i < opts.destructuredLocals.length; i++) {
                  var name = opts.destructuredLocals[i];
                  if (!_JS_IDENTIFIER.test(name)) {
                    throw new Error("destructuredLocals[" + i + "] is not a valid JS identifier.");
                  }
                  if (i > 0) {
                    destructuring += ",\n  ";
                  }
                  destructuring += name + " = __locals." + name;
                }
                prepended += destructuring + ";\n";
              }
              if (opts._with !== false) {
                prepended += "  with (" + opts.localsName + " || {}) {" + "\n";
                appended += "  }" + "\n";
              }
              appended += "  return __output;" + "\n";
              this.source = prepended + this.source + appended;
            }
            if (opts.compileDebug) {
              src = "var __line = 1" + "\n" + "  , __lines = " + JSON.stringify(this.templateText) + "\n" + "  , __filename = " + sanitizedFilename + ";" + "\n" + "try {" + "\n" + this.source + "} catch (e) {" + "\n" + "  rethrow(e, __lines, __filename, __line, escapeFn);" + "\n" + "}" + "\n";
            } else {
              src = this.source;
            }
            if (opts.client) {
              src = "escapeFn = escapeFn || " + escapeFn.toString() + ";" + "\n" + src;
              if (opts.compileDebug) {
                src = "rethrow = rethrow || " + rethrow.toString() + ";" + "\n" + src;
              }
            }
            if (opts.strict) {
              src = '"use strict";\n' + src;
            }
            if (opts.debug) {
              console.log(src);
            }
            if (opts.compileDebug && opts.filename) {
              src = src + "\n" + "//# sourceURL=" + sanitizedFilename + "\n";
            }
            try {
              if (opts.async) {
                try {
                  ctor = new Function("return (async function(){}).constructor;")();
                } catch (e) {
                  if (e instanceof SyntaxError) {
                    throw new Error("This environment does not support async/await");
                  } else {
                    throw e;
                  }
                }
              } else {
                ctor = Function;
              }
              fn = new ctor(opts.localsName + ", escapeFn, include, rethrow", src);
            } catch (e) {
              if (e instanceof SyntaxError) {
                if (opts.filename) {
                  e.message += " in " + opts.filename;
                }
                e.message += " while compiling ejs\n\n";
                e.message += "If the above error is not helpful, you may want to try EJS-Lint:\n";
                e.message += "https://github.com/RyanZim/EJS-Lint";
                if (!opts.async) {
                  e.message += "\n";
                  e.message += "Or, if you meant to create an async function, pass `async: true` as an option.";
                }
              }
              throw e;
            }
            var returnedFn = opts.client ? fn : function anonymous(data) {
              var include = function (path, includeData) {
                var d = utils.shallowCopy(utils.createNullProtoObjWherePossible(), data);
                if (includeData) {
                  d = utils.shallowCopy(d, includeData);
                }
                return includeFile(path, opts)(d);
              };
              return fn.apply(opts.context, [data || utils.createNullProtoObjWherePossible(), escapeFn, include, rethrow]);
            };
            if (opts.filename && typeof Object.defineProperty === "function") {
              var filename = opts.filename;
              var basename = path.basename(filename, path.extname(filename));
              try {
                Object.defineProperty(returnedFn, "name", {
                  value: basename,
                  writable: false,
                  enumerable: false,
                  configurable: true
                });
              } catch (e) {}
            }
            return returnedFn;
          },
          generateSource: function () {
            var opts = this.opts;
            if (opts.rmWhitespace) {
              this.templateText = this.templateText.replace(/[\r\n]+/g, "\n").replace(/^\s+|\s+$/gm, "");
            }
            this.templateText = this.templateText.replace(/[ \t]*<%_/gm, "<%_").replace(/_%>[ \t]*/gm, "_%>");
            var self = this;
            var matches = this.parseTemplateText();
            var d = this.opts.delimiter;
            var o = this.opts.openDelimiter;
            var c = this.opts.closeDelimiter;
            if (matches && matches.length) {
              matches.forEach(function (line, index) {
                var closing;
                if (line.indexOf(o + d) === 0 && line.indexOf(o + d + d) !== 0) {
                  closing = matches[index + 2];
                  if (!(closing == d + c || closing == "-" + d + c || closing == "_" + d + c)) {
                    throw new Error('Could not find matching close tag for "' + line + '".');
                  }
                }
                self.scanLine(line);
              });
            }
          },
          parseTemplateText: function () {
            var str = this.templateText;
            var pat = this.regex;
            var result = pat.exec(str);
            var arr = [];
            var firstPos;
            while (result) {
              firstPos = result.index;
              if (firstPos !== 0) {
                arr.push(str.substring(0, firstPos));
                str = str.slice(firstPos);
              }
              arr.push(result[0]);
              str = str.slice(result[0].length);
              result = pat.exec(str);
            }
            if (str) {
              arr.push(str);
            }
            return arr;
          },
          _addOutput: function (line) {
            if (this.truncate) {
              line = line.replace(/^(?:\r\n|\r|\n)/, "");
              this.truncate = false;
            }
            if (!line) {
              return line;
            }
            line = line.replace(/\\/g, "\\\\");
            line = line.replace(/\n/g, "\\n");
            line = line.replace(/\r/g, "\\r");
            line = line.replace(/"/g, '\\"');
            this.source += '    ; __append("' + line + '")' + "\n";
          },
          scanLine: function (line) {
            var self = this;
            var d = this.opts.delimiter;
            var o = this.opts.openDelimiter;
            var c = this.opts.closeDelimiter;
            var newLineCount = 0;
            newLineCount = line.split("\n").length - 1;
            switch (line) {
              case o + d:
              case o + d + "_":
                this.mode = Template.modes.EVAL;
                break;
              case o + d + "=":
                this.mode = Template.modes.ESCAPED;
                break;
              case o + d + "-":
                this.mode = Template.modes.RAW;
                break;
              case o + d + "#":
                this.mode = Template.modes.COMMENT;
                break;
              case o + d + d:
                this.mode = Template.modes.LITERAL;
                this.source += '    ; __append("' + line.replace(o + d + d, o + d) + '")' + "\n";
                break;
              case d + d + c:
                this.mode = Template.modes.LITERAL;
                this.source += '    ; __append("' + line.replace(d + d + c, d + c) + '")' + "\n";
                break;
              case d + c:
              case "-" + d + c:
              case "_" + d + c:
                if (this.mode == Template.modes.LITERAL) {
                  this._addOutput(line);
                }
                this.mode = null;
                this.truncate = line.indexOf("-") === 0 || line.indexOf("_") === 0;
                break;
              default:
                if (this.mode) {
                  switch (this.mode) {
                    case Template.modes.EVAL:
                    case Template.modes.ESCAPED:
                    case Template.modes.RAW:
                      if (line.lastIndexOf("//") > line.lastIndexOf("\n")) {
                        line += "\n";
                      }
                  }
                  switch (this.mode) {
                    case Template.modes.EVAL:
                      this.source += "    ; " + line + "\n";
                      break;
                    case Template.modes.ESCAPED:
                      this.source += "    ; __append(escapeFn(" + stripSemi(line) + "))" + "\n";
                      break;
                    case Template.modes.RAW:
                      this.source += "    ; __append(" + stripSemi(line) + ")" + "\n";
                      break;
                    case Template.modes.COMMENT:
                      break;
                    case Template.modes.LITERAL:
                      this._addOutput(line);
                      break;
                  }
                } else {
                  this._addOutput(line);
                }
            }
            if (self.opts.compileDebug && newLineCount) {
              this.currentLine += newLineCount;
              this.source += "    ; __line = " + this.currentLine + "\n";
            }
          }
        };
        exports.escapeXML = utils.escapeXML;
        exports.__express = exports.renderFile;
        exports.VERSION = _VERSION_STRING;
        exports.name = _NAME;
        if (typeof window != "undefined") {
          window.ejs = exports;
        }
      }, {
        "../package.json": 6,
        "./utils": 2,
        fs: 3,
        path: 4
      }],
      2: [function (require, module, exports) {

        var regExpChars = /[|\\{}()[\]^$+*?.]/g;
        var hasOwnProperty = Object.prototype.hasOwnProperty;
        var hasOwn = function (obj, key) {
          return hasOwnProperty.apply(obj, [key]);
        };
        exports.escapeRegExpChars = function (string) {
          if (!string) {
            return "";
          }
          return String(string).replace(regExpChars, "\\$&");
        };
        var _ENCODE_HTML_RULES = {
          "&": "&amp;",
          "<": "&lt;",
          ">": "&gt;",
          '"': "&#34;",
          "'": "&#39;"
        };
        var _MATCH_HTML = /[&<>'"]/g;
        function encode_char(c) {
          return _ENCODE_HTML_RULES[c] || c;
        }
        var escapeFuncStr = "var _ENCODE_HTML_RULES = {\n" + '      "&": "&amp;"\n' + '    , "<": "&lt;"\n' + '    , ">": "&gt;"\n' + '    , \'"\': "&#34;"\n' + '    , "\'": "&#39;"\n' + "    }\n" + "  , _MATCH_HTML = /[&<>'\"]/g;\n" + "function encode_char(c) {\n" + "  return _ENCODE_HTML_RULES[c] || c;\n" + "};\n";
        exports.escapeXML = function (markup) {
          return markup == undefined ? "" : String(markup).replace(_MATCH_HTML, encode_char);
        };
        function escapeXMLToString() {
          return Function.prototype.toString.call(this) + ";\n" + escapeFuncStr;
        }
        try {
          if (typeof Object.defineProperty === "function") {
            Object.defineProperty(exports.escapeXML, "toString", {
              value: escapeXMLToString
            });
          } else {
            exports.escapeXML.toString = escapeXMLToString;
          }
        } catch (err) {
          console.warn("Unable to set escapeXML.toString (is the Function prototype frozen?)");
        }
        exports.shallowCopy = function (to, from) {
          from = from || {};
          if (to !== null && to !== undefined) {
            for (var p in from) {
              if (!hasOwn(from, p)) {
                continue;
              }
              if (p === "__proto__" || p === "constructor") {
                continue;
              }
              to[p] = from[p];
            }
          }
          return to;
        };
        exports.shallowCopyFromList = function (to, from, list) {
          list = list || [];
          from = from || {};
          if (to !== null && to !== undefined) {
            for (var i = 0; i < list.length; i++) {
              var p = list[i];
              if (typeof from[p] != "undefined") {
                if (!hasOwn(from, p)) {
                  continue;
                }
                if (p === "__proto__" || p === "constructor") {
                  continue;
                }
                to[p] = from[p];
              }
            }
          }
          return to;
        };
        exports.cache = {
          _data: {},
          set: function (key, val) {
            this._data[key] = val;
          },
          get: function (key) {
            return this._data[key];
          },
          remove: function (key) {
            delete this._data[key];
          },
          reset: function () {
            this._data = {};
          }
        };
        exports.hyphenToCamel = function (str) {
          return str.replace(/-[a-z]/g, function (match) {
            return match[1].toUpperCase();
          });
        };
        exports.createNullProtoObjWherePossible = function () {
          if (typeof Object.create == "function") {
            return function () {
              return Object.create(null);
            };
          }
          if (!({
            __proto__: null
          } instanceof Object)) {
            return function () {
              return {
                __proto__: null
              };
            };
          }
          return function () {
            return {};
          };
        }();
        exports.hasOwnOnlyObject = function (obj) {
          var o = exports.createNullProtoObjWherePossible();
          for (var p in obj) {
            if (hasOwn(obj, p)) {
              o[p] = obj[p];
            }
          }
          return o;
        };
      }, {}],
      3: [function (require, module, exports) {}, {}],
      4: [function (require, module, exports) {
        (function (process) {
          function normalizeArray(parts, allowAboveRoot) {
            var up = 0;
            for (var i = parts.length - 1; i >= 0; i--) {
              var last = parts[i];
              if (last === ".") {
                parts.splice(i, 1);
              } else if (last === "..") {
                parts.splice(i, 1);
                up++;
              } else if (up) {
                parts.splice(i, 1);
                up--;
              }
            }
            if (allowAboveRoot) {
              for (; up--; up) {
                parts.unshift("..");
              }
            }
            return parts;
          }
          exports.resolve = function () {
            var resolvedPath = "",
              resolvedAbsolute = false;
            for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
              var path = i >= 0 ? arguments[i] : process.cwd();
              if (typeof path !== "string") {
                throw new TypeError("Arguments to path.resolve must be strings");
              } else if (!path) {
                continue;
              }
              resolvedPath = path + "/" + resolvedPath;
              resolvedAbsolute = path.charAt(0) === "/";
            }
            resolvedPath = normalizeArray(filter(resolvedPath.split("/"), function (p) {
              return !!p;
            }), !resolvedAbsolute).join("/");
            return (resolvedAbsolute ? "/" : "") + resolvedPath || ".";
          };
          exports.normalize = function (path) {
            var isAbsolute = exports.isAbsolute(path),
              trailingSlash = substr(path, -1) === "/";
            path = normalizeArray(filter(path.split("/"), function (p) {
              return !!p;
            }), !isAbsolute).join("/");
            if (!path && !isAbsolute) {
              path = ".";
            }
            if (path && trailingSlash) {
              path += "/";
            }
            return (isAbsolute ? "/" : "") + path;
          };
          exports.isAbsolute = function (path) {
            return path.charAt(0) === "/";
          };
          exports.join = function () {
            var paths = Array.prototype.slice.call(arguments, 0);
            return exports.normalize(filter(paths, function (p, index) {
              if (typeof p !== "string") {
                throw new TypeError("Arguments to path.join must be strings");
              }
              return p;
            }).join("/"));
          };
          exports.relative = function (from, to) {
            from = exports.resolve(from).substr(1);
            to = exports.resolve(to).substr(1);
            function trim(arr) {
              var start = 0;
              for (; start < arr.length; start++) {
                if (arr[start] !== "") break;
              }
              var end = arr.length - 1;
              for (; end >= 0; end--) {
                if (arr[end] !== "") break;
              }
              if (start > end) return [];
              return arr.slice(start, end - start + 1);
            }
            var fromParts = trim(from.split("/"));
            var toParts = trim(to.split("/"));
            var length = Math.min(fromParts.length, toParts.length);
            var samePartsLength = length;
            for (var i = 0; i < length; i++) {
              if (fromParts[i] !== toParts[i]) {
                samePartsLength = i;
                break;
              }
            }
            var outputParts = [];
            for (var i = samePartsLength; i < fromParts.length; i++) {
              outputParts.push("..");
            }
            outputParts = outputParts.concat(toParts.slice(samePartsLength));
            return outputParts.join("/");
          };
          exports.sep = "/";
          exports.delimiter = ":";
          exports.dirname = function (path) {
            if (typeof path !== "string") path = path + "";
            if (path.length === 0) return ".";
            var code = path.charCodeAt(0);
            var hasRoot = code === 47;
            var end = -1;
            var matchedSlash = true;
            for (var i = path.length - 1; i >= 1; --i) {
              code = path.charCodeAt(i);
              if (code === 47) {
                if (!matchedSlash) {
                  end = i;
                  break;
                }
              } else {
                matchedSlash = false;
              }
            }
            if (end === -1) return hasRoot ? "/" : ".";
            if (hasRoot && end === 1) {
              return "/";
            }
            return path.slice(0, end);
          };
          function basename(path) {
            if (typeof path !== "string") path = path + "";
            var start = 0;
            var end = -1;
            var matchedSlash = true;
            var i;
            for (i = path.length - 1; i >= 0; --i) {
              if (path.charCodeAt(i) === 47) {
                if (!matchedSlash) {
                  start = i + 1;
                  break;
                }
              } else if (end === -1) {
                matchedSlash = false;
                end = i + 1;
              }
            }
            if (end === -1) return "";
            return path.slice(start, end);
          }
          exports.basename = function (path, ext) {
            var f = basename(path);
            if (ext && f.substr(-1 * ext.length) === ext) {
              f = f.substr(0, f.length - ext.length);
            }
            return f;
          };
          exports.extname = function (path) {
            if (typeof path !== "string") path = path + "";
            var startDot = -1;
            var startPart = 0;
            var end = -1;
            var matchedSlash = true;
            var preDotState = 0;
            for (var i = path.length - 1; i >= 0; --i) {
              var code = path.charCodeAt(i);
              if (code === 47) {
                if (!matchedSlash) {
                  startPart = i + 1;
                  break;
                }
                continue;
              }
              if (end === -1) {
                matchedSlash = false;
                end = i + 1;
              }
              if (code === 46) {
                if (startDot === -1) startDot = i;else if (preDotState !== 1) preDotState = 1;
              } else if (startDot !== -1) {
                preDotState = -1;
              }
            }
            if (startDot === -1 || end === -1 || preDotState === 0 || preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
              return "";
            }
            return path.slice(startDot, end);
          };
          function filter(xs, f) {
            if (xs.filter) return xs.filter(f);
            var res = [];
            for (var i = 0; i < xs.length; i++) {
              if (f(xs[i], i, xs)) res.push(xs[i]);
            }
            return res;
          }
          var substr = "ab".substr(-1) === "b" ? function (str, start, len) {
            return str.substr(start, len);
          } : function (str, start, len) {
            if (start < 0) start = str.length + start;
            return str.substr(start, len);
          };
        }).call(this, require("_process"));
      }, {
        _process: 5
      }],
      5: [function (require, module, exports) {
        var process = module.exports = {};
        var cachedSetTimeout;
        var cachedClearTimeout;
        function defaultSetTimout() {
          throw new Error("setTimeout has not been defined");
        }
        function defaultClearTimeout() {
          throw new Error("clearTimeout has not been defined");
        }
        (function () {
          try {
            if (typeof setTimeout === "function") {
              cachedSetTimeout = setTimeout;
            } else {
              cachedSetTimeout = defaultSetTimout;
            }
          } catch (e) {
            cachedSetTimeout = defaultSetTimout;
          }
          try {
            if (typeof clearTimeout === "function") {
              cachedClearTimeout = clearTimeout;
            } else {
              cachedClearTimeout = defaultClearTimeout;
            }
          } catch (e) {
            cachedClearTimeout = defaultClearTimeout;
          }
        })();
        function runTimeout(fun) {
          if (cachedSetTimeout === setTimeout) {
            return setTimeout(fun, 0);
          }
          if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
            cachedSetTimeout = setTimeout;
            return setTimeout(fun, 0);
          }
          try {
            return cachedSetTimeout(fun, 0);
          } catch (e) {
            try {
              return cachedSetTimeout.call(null, fun, 0);
            } catch (e) {
              return cachedSetTimeout.call(this, fun, 0);
            }
          }
        }
        function runClearTimeout(marker) {
          if (cachedClearTimeout === clearTimeout) {
            return clearTimeout(marker);
          }
          if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
            cachedClearTimeout = clearTimeout;
            return clearTimeout(marker);
          }
          try {
            return cachedClearTimeout(marker);
          } catch (e) {
            try {
              return cachedClearTimeout.call(null, marker);
            } catch (e) {
              return cachedClearTimeout.call(this, marker);
            }
          }
        }
        var queue = [];
        var draining = false;
        var currentQueue;
        var queueIndex = -1;
        function cleanUpNextTick() {
          if (!draining || !currentQueue) {
            return;
          }
          draining = false;
          if (currentQueue.length) {
            queue = currentQueue.concat(queue);
          } else {
            queueIndex = -1;
          }
          if (queue.length) {
            drainQueue();
          }
        }
        function drainQueue() {
          if (draining) {
            return;
          }
          var timeout = runTimeout(cleanUpNextTick);
          draining = true;
          var len = queue.length;
          while (len) {
            currentQueue = queue;
            queue = [];
            while (++queueIndex < len) {
              if (currentQueue) {
                currentQueue[queueIndex].run();
              }
            }
            queueIndex = -1;
            len = queue.length;
          }
          currentQueue = null;
          draining = false;
          runClearTimeout(timeout);
        }
        process.nextTick = function (fun) {
          var args = new Array(arguments.length - 1);
          if (arguments.length > 1) {
            for (var i = 1; i < arguments.length; i++) {
              args[i - 1] = arguments[i];
            }
          }
          queue.push(new Item(fun, args));
          if (queue.length === 1 && !draining) {
            runTimeout(drainQueue);
          }
        };
        function Item(fun, array) {
          this.fun = fun;
          this.array = array;
        }
        Item.prototype.run = function () {
          this.fun.apply(null, this.array);
        };
        process.title = "browser";
        process.browser = true;
        process.env = {};
        process.argv = [];
        process.version = "";
        process.versions = {};
        function noop() {}
        process.on = noop;
        process.addListener = noop;
        process.once = noop;
        process.off = noop;
        process.removeListener = noop;
        process.removeAllListeners = noop;
        process.emit = noop;
        process.prependListener = noop;
        process.prependOnceListener = noop;
        process.listeners = function (name) {
          return [];
        };
        process.binding = function (name) {
          throw new Error("process.binding is not supported");
        };
        process.cwd = function () {
          return "/";
        };
        process.chdir = function (dir) {
          throw new Error("process.chdir is not supported");
        };
        process.umask = function () {
          return 0;
        };
      }, {}],
      6: [function (require, module, exports) {
        module.exports = {
          name: "ejs",
          description: "Embedded JavaScript templates",
          keywords: ["template", "engine", "ejs"],
          version: "3.1.9",
          author: "Matthew Eernisse <mde@fleegix.org> (http://fleegix.org)",
          license: "Apache-2.0",
          bin: {
            ejs: "./bin/cli.js"
          },
          main: "./lib/ejs.js",
          jsdelivr: "ejs.min.js",
          unpkg: "ejs.min.js",
          repository: {
            type: "git",
            url: "git://github.com/mde/ejs.git"
          },
          bugs: "https://github.com/mde/ejs/issues",
          homepage: "https://github.com/mde/ejs",
          dependencies: {
            jake: "^10.8.5"
          },
          devDependencies: {
            browserify: "^16.5.1",
            eslint: "^6.8.0",
            "git-directory-deploy": "^1.5.1",
            jsdoc: "^4.0.2",
            "lru-cache": "^4.0.1",
            mocha: "^10.2.0",
            "uglify-js": "^3.3.16"
          },
          engines: {
            node: ">=0.10.0"
          },
          scripts: {
            test: "npx jake test"
          }
        };
      }, {}]
    }, {}, [1])(1);
  });

  var coreuiTableUtils = {
    _templates: {},
    /**
     * Объединение атрибутов
     * @param attr1
     * @param attr2
     * @returns {object}
     */
    mergeAttr: function mergeAttr(attr1, attr2) {
      var mergeAttr = Object.assign({}, attr1);
      if (_typeof(attr2) === 'object') {
        $.each(attr2, function (name, value) {
          if (mergeAttr.hasOwnProperty(name)) {
            if (name === 'class') {
              mergeAttr[name] += ' ' + value;
            } else if (name === 'style') {
              mergeAttr[name] += ';' + value;
            } else {
              mergeAttr[name] = value;
            }
          } else {
            mergeAttr[name] = value;
          }
        });
      }
      return mergeAttr;
    },
    /**
     * Проверка на число
     * @param num
     * @returns {boolean}
     * @private
     */
    isNumeric: function isNumeric(num) {
      return (typeof num === 'number' || typeof num === "string" && num.trim() !== '') && !isNaN(num);
    },
    /**
     * @returns {string}
     * @private
     */
    hashCode: function hashCode() {
      return this.crc32((new Date().getTime() + Math.random()).toString()).toString(16);
    },
    /**
     * Проверка на объект
     * @param value
     */
    isObject: function isObject(value) {
      return _typeof(value) === 'object' && !Array.isArray(value) && value !== null;
    },
    /**
     * @param str
     * @returns {number}
     */
    crc32: function crc32(str) {
      for (var a, o = [], c = 0; c < 256; c++) {
        a = c;
        for (var f = 0; f < 8; f++) {
          a = 1 & a ? 3988292384 ^ a >>> 1 : a >>> 1;
        }
        o[c] = a;
      }
      for (var n = -1, t = 0; t < str.length; t++) {
        n = n >>> 8 ^ o[255 & (n ^ str.charCodeAt(t))];
      }
      return (-1 ^ n) >>> 0;
    },
    /**
     * Рендер шаблона
     * @param {string} template
     * @param {object} options
     * @returns {string}
     */
    render: function render(template, options) {
      var tplName = this.crc32(template);
      if (!this._templates.hasOwnProperty(tplName)) {
        this._templates[tplName] = ejs.compile(template);
      }
      return this._templates[tplName](options);
    },
    /**
     * Размерность строки
     * @param {string} str
     * @param {int}    count
     * @param {string} repeat
     * @returns {string}
     */
    strPadLeft: function strPadLeft(str, count, repeat) {
      str = String(str);
      if (str.length >= count) {
        return str;
      }
      repeat = repeat ? repeat : '0';
      return (repeat.repeat(count) + str).slice(-count);
    }
  };

  var coreuiTableRender = {
    /**
     * Сборка таблицы
     * @param {object} table
     * @private
     */
    renderTable: function renderTable(table) {
      var options = table.getOptions();
      var recordsElements = [];
      var columnsHeader = '';
      var columnsFooter = '';
      var colGroups = [];
      var columnElements = $(tpl['table/columns/tr.html']);

      // Колонки
      if (table._columns.length > 0) {
        $.each(table._columns, function (key, column) {
          if (!column.isShow()) {
            return;
          }
          var columnOptions = column.getOptions();
          var attributes = [];
          var sortable = null;
          var menuElements = [];
          var menuShowAlways = '';
          var menuPosition = 'end';
          if (columnOptions.hasOwnProperty('field') && typeof columnOptions.field === 'string') {
            columnOptions.attrHeader = coreuiTableUtils.mergeAttr(columnOptions.attrHeader, {
              "data-field": columnOptions.field
            });
          }
          if (columnOptions.hasOwnProperty('fixed') && typeof columnOptions.fixed === 'string') {
            columnOptions.attrHeader = coreuiTableUtils.mergeAttr(columnOptions.attrHeader, {
              "class": 'coreui-table__fixed_' + columnOptions.fixed
            });
            columnOptions.attr = coreuiTableUtils.mergeAttr(columnOptions.attr, {
              "class": 'coreui-table__fixed_' + columnOptions.fixed
            });
          }
          if (columnOptions.type !== 'numbers') {
            if (columnOptions.hasOwnProperty('sortable') && columnOptions.sortable) {
              columnOptions.attrHeader = coreuiTableUtils.mergeAttr(columnOptions.attrHeader, {
                "class": 'coreui-table__sortable'
              });
            }
            if (table._sort.length > 0 && columnOptions.hasOwnProperty('field') && typeof columnOptions.field === 'string' && columnOptions.field) {
              $.each(table._sort, function (key, sortField) {
                if (columnOptions.field === sortField.field) {
                  if (sortField.order === 'asc') {
                    sortable = 'asc';
                  } else if (sortField.order === 'desc') {
                    sortable = 'desc';
                  }
                  return false;
                }
              });
            }
          }
          if (options.showHeaders && columnOptions.hasOwnProperty('menu') && coreuiTableUtils.isObject(columnOptions.menu) && columnOptions.menu.hasOwnProperty('items') && Array.isArray(columnOptions.menu.items)) {
            if (columnOptions.menu.hasOwnProperty('showAlways') && columnOptions.menu.showAlways) {
              menuShowAlways = 'coreui-table__column-menu-always';
            }
            if (columnOptions.menu.hasOwnProperty('position') && typeof columnOptions.menu.position === 'string') {
              menuPosition = columnOptions.menu.position;
            }
            columnOptions.menu.items.map(function (item) {
              if (coreuiTableUtils.isObject(item) && item.hasOwnProperty('type') && typeof item.type === 'string' && item.type) {
                switch (item.type.toLowerCase()) {
                  case 'button':
                    if (item.hasOwnProperty('text') && typeof item.text === 'string' && item.hasOwnProperty('onClick') && ['string', 'function'].indexOf(_typeof(item.onClick)) >= 0 && item.text.length > 0) {
                      var attrItem = [];
                      var attr = {
                        type: 'button',
                        "class": 'dropdown-item'
                      };
                      if (item.hasOwnProperty('attr') && coreuiTableUtils.isObject(item.attr)) {
                        attr = coreuiTableUtils.mergeAttr(attr, item.attr);
                      }
                      $.each(attr, function (name, value) {
                        attrItem.push(name + '="' + value + '"');
                      });
                      var menuElement = $(coreuiTableUtils.render(tpl['table/columns/menu/button.html'], {
                        text: item.text,
                        attr: attrItem.join(' ')
                      }));
                      menuElement.find('button').click(function () {
                        if (typeof item.onClick === 'function') {
                          item.onClick(table);
                        } else if (typeof item.onClick === 'string') {
                          new Function('table', item.onClick)(table);
                        }
                      });
                      menuElements.push(menuElement);
                    }
                    break;
                  case 'link':
                    if (item.hasOwnProperty('text') && item.hasOwnProperty('url') && typeof item.text === 'string' && typeof item.url === 'string' && item.text.length > 0 && item.url.length > 0) {
                      var _attrItem = [];
                      var _attr = {
                        href: item.url,
                        "class": 'dropdown-item'
                      };
                      if (item.hasOwnProperty('attr') && coreuiTableUtils.isObject(item.attr)) {
                        _attr = coreuiTableUtils.mergeAttr(_attr, item.attr);
                      }
                      $.each(_attr, function (name, value) {
                        _attrItem.push(name + '="' + value + '"');
                      });
                      menuElements.push($(coreuiTableUtils.render(tpl['table/columns/menu/link.html'], {
                        text: item.text,
                        attr: _attrItem.join(' ')
                      })));
                    }
                    break;
                  case 'divider':
                    menuElements.push($(tpl['table/columns/menu/divider.html']));
                    break;
                  case 'header':
                    menuElements.push($(coreuiTableUtils.render(tpl['table/columns/menu/header.html'], {
                      text: item.text
                    })));
                    break;
                }
              }
            });
          }
          if (columnOptions.attrHeader && coreuiTableUtils.isObject(columnOptions.attrHeader)) {
            $.each(columnOptions.attrHeader, function (name, value) {
              attributes.push(name + '="' + value + '"');
            });
          }
          var style = [];
          if (columnOptions.hasOwnProperty('width') && ['string', 'number'].indexOf(_typeof(columnOptions.width)) >= 0) {
            var unit = typeof columnOptions.width === 'number' ? 'px' : '';
            style.push('width:' + columnOptions.width + unit);
          }
          if (columnOptions.hasOwnProperty('minWidth') && ['string', 'number'].indexOf(_typeof(columnOptions.minWidth)) >= 0) {
            var _unit = typeof columnOptions.minWidth === 'number' ? 'px' : '';
            style.push('min-width:' + columnOptions.minWidth + _unit);
          }
          if (columnOptions.hasOwnProperty('maxWidth') && ['string', 'number'].indexOf(_typeof(columnOptions.maxWidth)) >= 0) {
            var _unit2 = typeof columnOptions.maxWidth === 'number' ? 'px' : '';
            style.push('max-width:' + columnOptions.maxWidth + _unit2);
          }
          colGroups.push({
            style: style.length > 0 ? style.join(';') : ''
          });
          if (options.showHeaders) {
            var label = '';
            var description = '';
            if (columnOptions.hasOwnProperty('label') && typeof columnOptions.label === 'string' && (!columnOptions.hasOwnProperty('showLabel') || columnOptions.showLabel)) {
              label = columnOptions.label;
            }
            if (columnOptions.hasOwnProperty('description') && typeof columnOptions.label === 'string') {
              description = columnOptions.description;
            }
            var columnElement = $(coreuiTableUtils.render(tpl['table/columns/td.html'], {
              attr: attributes.length > 0 ? ' ' + attributes.join(' ') : '',
              label: label,
              description: description,
              sortable: sortable,
              issetMenu: menuElements.length > 0,
              menuPosition: menuPosition,
              menuShowAlways: menuShowAlways ? ' ' + menuShowAlways : ''
            }));
            if (menuElements.length) {
              var menuContainer = columnElement.find('.coreui-table__column-menu ul');
              var menuButton = columnElement.find('.coreui-table__column-menu .dropdown-toggle');
              menuButton.click(function (event) {
                event.originalEvent.cancelBubble = true;
              });
              menuElements.map(function (element) {
                menuContainer.append(element);
              });
            }
            columnElements.append(columnElement);
          }
        });
      }

      // Строки
      if (table._records.length > 0) {
        table._recordsTotal = table.getRecordsCount();
        table._recordsNumber = table._page === 1 ? 1 : (table._page - 1) * table._recordsPerPage + 1;
        recordsElements = coreuiTableRender.renderRecords(table, table._records);
      } else {
        recordsElements = coreuiTableRender.renderRecords(table, []);
      }
      if (options.showHeaders && options.hasOwnProperty('columnsHeader') && Array.isArray(options.columnsHeader) && options.columnsHeader.length > 0) {
        var rows = [];
        $.each(options.columnsHeader, function (key, headerRow) {
          if (Array.isArray(headerRow)) {
            var cells = [];
            $.each(headerRow, function (key, headerColumn) {
              if (coreuiTableUtils.isObject(headerColumn)) {
                var attributes = [];
                if (headerColumn.hasOwnProperty('attr') && coreuiTableUtils.isObject(headerColumn.attr)) {
                  $.each(headerColumn.attr, function (name, value) {
                    attributes.push(name + '="' + value + '"');
                  });
                }
                cells.push({
                  content: headerColumn.hasOwnProperty('content') ? headerColumn.content : '',
                  description: headerColumn.hasOwnProperty('description') ? headerColumn.description : '',
                  attr: attributes.length > 0 ? ' ' + attributes.join(' ') : ''
                });
              }
            });
            rows.push(coreuiTableUtils.render(tpl['table/columns/header.html'], {
              columns: cells
            }));
          }
        });
        columnsHeader = rows.join('');
      }
      if (options.hasOwnProperty('columnsFooter') && Array.isArray(options.columnsFooter) && options.columnsFooter.length > 0) {
        var _rows = [];
        $.each(options.columnsFooter, function (key, footerRow) {
          if (Array.isArray(footerRow)) {
            var cells = [];
            $.each(footerRow, function (key, footerColumn) {
              if (coreuiTableUtils.isObject(footerColumn)) {
                var attributes = [];
                if (footerColumn.hasOwnProperty('attr') && coreuiTableUtils.isObject(footerColumn.attr)) {
                  $.each(footerColumn.attr, function (name, value) {
                    attributes.push(name + '="' + value + '"');
                  });
                }
                cells.push({
                  content: footerColumn.hasOwnProperty('content') ? footerColumn.content : '',
                  description: footerColumn.hasOwnProperty('description') ? footerColumn.description : '',
                  attr: attributes.length > 0 ? ' ' + attributes.join(' ') : ''
                });
              }
            });
            _rows.push(coreuiTableUtils.render(tpl['table/columns/footer.html'], {
              columns: cells
            }));
          }
        });
        columnsFooter = _rows.join('');
      }
      var classes = [];
      if (typeof options["class"] === 'string' && options["class"]) {
        classes.push(options["class"]);
      }
      if (!columnsFooter) {
        classes.push('empty-tfoot');
      }
      var theadAttr = [];
      if (options.hasOwnProperty('theadTop') && ['string', 'number'].indexOf(_typeof(options.theadTop)) >= 0) {
        var unit = coreuiTableUtils.isNumeric(options.theadTop) ? 'px' : '';
        theadAttr.push('style="top:' + options.theadTop + unit + '"');
      }
      var tableElement = $(coreuiTableUtils.render(tpl['table.html'], {
        classes: classes.join(' '),
        theadAttr: theadAttr.length > 0 ? theadAttr.join(' ') : '',
        showHeaders: options.showHeaders,
        columnsHeader: columnsHeader,
        colGroups: colGroups,
        columnsFooter: columnsFooter
      }));
      if (options.showHeaders) {
        tableElement.find('thead').append(columnElements);
      }
      var tbody = tableElement.find('tbody');
      recordsElements.map(function (recordElement) {
        tbody.append(recordElement);
      });
      return tableElement;
    },
    /**
     * Сборка записей таблицы
     * @param {object} table
     * @param {Array}  records
     * @return {Array}
     */
    renderRecords: function renderRecords(table, records) {
      var renderRecords = [];
      if (records.length > 0) {
        var that = this;
        var options = table.getOptions();
        var group = options.hasOwnProperty('group') && coreuiTableUtils.isObject(options.group) && options.group.hasOwnProperty('field') && typeof options.group.field === 'string' && options.group.field ? options.group : null;
        if (group) {
          var groupValue = null;
          var groupIndex = 0;
          var recordsGroups = {};
          records.map(function (record) {
            if (record.show) {
              if (record.data.hasOwnProperty(group.field) && ['string', 'number'].indexOf(_typeof(record.data[group.field])) >= 0 && groupValue != record.data[group.field]) {
                groupValue = record.data[group.field];
                groupIndex++;
              }
              if (!recordsGroups.hasOwnProperty(groupIndex)) {
                recordsGroups[groupIndex] = {
                  isGroup: groupIndex > 0,
                  records: []
                };
              }
              recordsGroups[groupIndex].records.push(record);
            }
          });
          $.each(recordsGroups, function (key, recordsGroup) {
            var renderRecordsGroup = [];
            recordsGroup.records.map(function (record) {
              renderRecordsGroup.push(that.renderRecord(table, record));
              table._recordsNumber++;
            });
            if (recordsGroup.isGroup) {
              renderRecords.push(that.renderGroup(table, group, recordsGroup.records[0], renderRecordsGroup));
            }
            renderRecordsGroup.map(function (record) {
              renderRecords.push(record);
            });
          });
        } else {
          records.map(function (record) {
            if (record.show) {
              renderRecords.push(that.renderRecord(table, record));
              table._recordsNumber++;
            }
          });
        }
      }
      if (renderRecords.length === 0) {
        renderRecords = [$(coreuiTableUtils.render(tpl['table/record/empty.html'], {
          columnsCount: table._countColumnsShow,
          lang: table.getLang()
        }))];
      }
      return renderRecords;
    },
    /**
     * Сборка записи таблицы
     * @param {object} table
     * @param {object} record
     * @returns {{ attr: (string), fields: (object) }}}
     * @private
     */
    renderRecord: function renderRecord(table, record) {
      var that = this;
      var options = table.getOptions();
      var fields = [];
      var recordAttr = {
        "class": 'coreui-table__record'
      };
      table._columns.map(function (column) {
        if (!column.isShow()) {
          return;
        }
        var fieldContent = that.renderField(table, column, record);
        if (fieldContent) {
          fields.push(fieldContent);
        }
      });
      if (typeof options.onClickUrl === 'string' && options.onClickUrl) {
        recordAttr["class"] += ' coreui-table_pointer';
      }
      if (record.meta) {
        recordAttr = coreuiTableUtils.mergeAttr(recordAttr, record.meta.attr);
      }
      var attributes = [];
      $.each(recordAttr, function (name, value) {
        attributes.push(name + '="' + value + '"');
      });
      var recordElement = $(coreuiTableUtils.render(tpl['table/record.html'], {
        attr: attributes.length > 0 ? ' ' + attributes.join(' ') : '',
        index: record.index,
        fields: fields
      }));
      fields.map(function (field, key) {
        $(recordElement[0].querySelector(':scope > td:nth-child(' + (key + 1) + ')')).append(field.content);
      });
      return recordElement;
    },
    /**
     * Сборка ячейки таблицы
     * @param {object} table
     * @param {object} column
     * @param {object} record
     * @returns {{ attr: (string), content: (string) }}
     * @private
     */
    renderField: function renderField(table, column, record) {
      var columnOptions = column.getOptions();
      var columnField = column.getField();
      var content = null;
      var fieldProps = record.meta && record.meta.hasOwnProperty('fields') && record.meta.fields.hasOwnProperty(columnField) ? record.meta.fields[columnField] : null;
      var fieldAttr = columnOptions.hasOwnProperty('attr') && coreuiTableUtils.isObject(columnOptions.attr) ? columnOptions.attr : {};
      if (fieldProps && coreuiTableUtils.isObject(fieldProps)) {
        if (fieldProps && fieldProps.hasOwnProperty('show') && !fieldProps.show) {
          return null;
        }
        if (coreuiTableUtils.isObject(fieldProps.attr)) {
          fieldAttr = coreuiTableUtils.mergeAttr(fieldAttr, fieldProps.attr);
        }
      }
      if (columnOptions.hasOwnProperty('fixed') && typeof columnOptions.fixed === 'string') {
        fieldAttr = coreuiTableUtils.mergeAttr(fieldAttr, {
          "class": 'coreui-table__fixed_' + columnOptions.fixed
        });
      }
      if (typeof columnOptions.render === 'function') {
        content = columnOptions.render({
          data: record.data,
          meta: record.meta,
          index: record.index
        }, table);
      } else {
        content = columnField && record.data.hasOwnProperty(columnField) ? record.data[columnField] : null;
      }
      content = column.render(content, record);
      var fieldAttrResult = [];
      $.each(fieldAttr, function (name, value) {
        fieldAttrResult.push(name + '="' + value + '"');
      });
      return {
        attr: fieldAttrResult.length > 0 ? ' ' + fieldAttrResult.join(' ') : '',
        content: content
      };
    },
    /**
     * Сборка записи-группы
     * @param {object} table
     * @param {object} group
     * @param {object} record
     * @param {Array}  renderRecords
     * @returns {{ attr: (string), fields: (object) }}}
     * @private
     */
    renderGroup: function renderGroup(table, group, record, renderRecords) {
      var attr = group.hasOwnProperty('attr') && coreuiTableUtils.isObject(group.attr) ? group.attr : {};
      if (attr.hasOwnProperty('class') && typeof attr["class"] === 'string') {
        attr["class"] += ' coreui-table__record-group';
      } else {
        attr["class"] = 'coreui-table__record-group';
      }
      var attributes = [];
      $.each(attr, function (name, value) {
        if (['string', 'number'].indexOf(_typeof(value)) >= 0) {
          attributes.push(name + '="' + value + '"');
        }
      });
      var isCollapsing = group.hasOwnProperty('isCollapsing') ? !!group.isCollapsing : false;
      var groupElement = $(coreuiTableUtils.render(tpl['table/record/group.html'], {
        attr: attributes.length > 0 ? ' ' + attributes.join(' ') : '',
        colspan: table._countColumnsShow,
        isCollapsing: isCollapsing
      }));
      var td = groupElement.find(' > td');
      var content = record.data[group.field];
      if (group.hasOwnProperty('render')) {
        var renderContent = null;
        if (typeof group.render === 'function') {
          renderContent = group.render(record);
        } else if (typeof group.render === 'string') {
          renderContent = new Function('record', group.render)(record);
        }
        if (renderContent) {
          content = renderContent;
        }
      }
      if (isCollapsing) {
        var collapsed = $('<i class="bi bi-chevron-down coreui-table_pointer me-1"></i>');
        collapsed.click(function () {
          if ($(this).hasClass('bi-chevron-down')) {
            $(this).removeClass('bi-chevron-down').addClass('bi-chevron-right');
            renderRecords.map(function (renderRecord) {
              $(renderRecord).fadeOut(100);
            });
          } else {
            $(this).removeClass('bi-chevron-right').addClass('bi-chevron-down');
            renderRecords.map(function (renderRecord) {
              $(renderRecord).fadeIn(100);
            });
          }
        });
        td.append(collapsed);
      }
      td.append(content);
      return groupElement;
    },
    /**
     * Сборка раскрывающейся строки
     * @param {object}       table
     * @param {Array|string} content
     */
    renderExpand: function renderExpand(table, content) {
      if (_typeof(content) === 'object') {
        content = coreuiTableRender.renderComponents(table, content, 'record_expand_show');
      }
      var expandRecord = $(coreuiTableUtils.render(tpl['table/record/expand.html'], {
        colspan: table._countColumnsShow
      }));
      if (['string', 'number'].indexOf(_typeof(content)) >= 0) {
        expandRecord.find('td').html(content);
      } else if (Array.isArray(content)) {
        $.each(content, function (key, item) {
          if (['string', 'number'].indexOf(_typeof(item)) >= 0 || item instanceof HTMLElement || window.hasOwnProperty('jQuery') && item instanceof jQuery) {
            expandRecord.find('td').append(item);
          }
        });
      }
      return expandRecord;
    },
    /**
     * Сборка элемента управления
     * @param {object} table
     * @param {object} control
     * @private
     * @returns {HTMLElement|jQuery}
     */
    renderControl: function renderControl(table, control) {
      if (coreuiTableUtils.isObject(control)) {
        var controlElement = $(coreuiTableUtils.render(tpl['table/control.html'], {
          id: control.getId()
        }));
        controlElement.append(control.render());
        return controlElement;
      }
    },
    /**
     * Формирование контента компонента
     * @param {object} table
     * @param {object} components
     * @param {string} eventName
     * @return {Array}
     */
    renderComponents: function renderComponents(table, components, eventName) {
      var result = [];
      if (components instanceof Object) {
        if (!Array.isArray(components)) {
          components = [components];
        }
        for (var i = 0; i < components.length; i++) {
          if (typeof components[i] === 'string') {
            result.push(components[i]);
          } else if (!Array.isArray(components[i]) && components[i].hasOwnProperty('component') && components[i].component.substring(0, 6) === 'coreui') {
            var name = components[i].component.split('.')[1];
            if (CoreUI.hasOwnProperty(name) && coreuiTableUtils.isObject(CoreUI[name])) {
              var instance = CoreUI[name].create(components[i]);
              result.push(instance.render());
              if (eventName) {
                table.on(eventName, instance.initEvents, instance, true);
              }
            }
          }
        }
      }
      return result;
    }
  };

  var coreuiTableElements = {
    /**
     * Получение контейнера таблицы
     * @param {string} tableId
     * @return {jQuery}
     */
    getContainer: function getContainer(tableId) {
      return $('#coreui-table-' + tableId + ' > .coreui-table__container');
    },
    /**
     * Получение обертки таблицы
     * @param {string} tableId
     * @return {jQuery}
     */
    getLock: function getLock(tableId) {
      return $('#coreui-table-' + tableId + ' > .coreui-table__container > .coreui-table-lock');
    },
    /**
     * Получение обертки таблицы
     * @param {string} tableId
     * @return {jQuery}
     */
    getWrapper: function getWrapper(tableId) {
      return $('#coreui-table-' + tableId + ' > .coreui-table__container > .coreui-table__wrapper');
    },
    /**
     * Получение поискового контейнера
     * @param {string} tableId
     * @return {jQuery}
     */
    getSearchContainer: function getSearchContainer(tableId) {
      return $('#coreui-table-' + tableId + ' > .coreui-table__container > .coreui-table__search');
    },
    /**
     * Получение поискового контейнера
     * @param {string} tableId
     * @return {jQuery}
     */
    getColumnsContainer: function getColumnsContainer(tableId) {
      return $('#coreui-table-' + tableId + ' > .coreui-table__container > .coreui-table__columns');
    },
    /**
     * Получение контейнера поискового контрола
     * @param {string} tableId
     * @param {string} controlId
     * @return {jQuery}
     */
    getSearchControl: function getSearchControl(tableId, controlId) {
      return $('#coreui-table-' + tableId + ' > .coreui-table__container > .coreui-table__search .search-control-' + controlId);
    },
    /**
     * Получение контейнера контрола
     * @param {string} tableId
     * @param {string} controlId
     * @return {jQuery}
     */
    getControl: function getControl(tableId, controlId) {
      return $('#coreui-table-' + tableId + '  #coreui-table-control-' + controlId);
    },
    /**
     * Получение таблицы
     * @param {string} tableId
     * @return {jQuery}
     */
    getTable: function getTable(tableId) {
      return $('#coreui-table-' + tableId + ' > .coreui-table__container > .coreui-table__wrapper > table');
    },
    /**
     * Получение тела таблицы
     * @param {string} tableId
     * @return {jQuery}
     */
    getTableTbody: function getTableTbody(tableId) {
      return $('#coreui-table-' + tableId + ' > .coreui-table__container > .coreui-table__wrapper > table > tbody');
    },
    /**
     * Получение заголовков таблицы
     * @param {string} tableId
     * @return {jQuery}
     */
    getTableThead: function getTableThead(tableId) {
      return $('#coreui-table-' + tableId + ' > .coreui-table__container > .coreui-table__wrapper > table > thead');
    },
    /**
     * Получение ячеек с сортировкой по таблице
     * @param {string} tableId
     * @return {jQuery}
     */
    getTableSortable: function getTableSortable(tableId) {
      return $('#coreui-table-' + tableId + ' > .coreui-table__container > .coreui-table__wrapper > table > thead > tr > td.coreui-table__sortable');
    },
    /**
     * Получение строк записей
     * @param {string} tableId
     * @return {jQuery}
     */
    getTrRecords: function getTrRecords(tableId) {
      return $('#coreui-table-' + tableId + ' > .coreui-table__container > .coreui-table__wrapper > table > tbody > tr.coreui-table__record');
    },
    /**
     * Получение элемента строки по ключу
     * @param {string} tableId
     * @param {int}    index
     * @return {jQuery}
     */
    getTrByIndex: function getTrByIndex(tableId, index) {
      return $('#coreui-table-' + tableId + ' > .coreui-table__container > .coreui-table__wrapper > table > tbody > tr[data-record-index="' + index + '"]');
    },
    /**
     * Получение элемента строки по ключу
     * @param {string} tableId
     * @return {jQuery}
     */
    getTrEmpty: function getTrEmpty(tableId) {
      return $('#coreui-table-' + tableId + ' > .coreui-table__container > .coreui-table__wrapper > table > tbody > tr.coreui-table__record-empty');
    },
    /**
     * Получение контента под строкой
     * @param {jQuery} recordElement
     * @return {jQuery}
     */
    getExpandRow: function getExpandRow(recordElement) {
      return recordElement.next().hasClass('coreui-table__record-expanded') ? recordElement.next() : null;
    },
    /**
     * Добавление контента под строкой
     * @param {object}       table
     * @param {jQuery}       recordElement
     * @param {Array|string} content
     * @return {jQuery}
     */
    addExpandRow: function addExpandRow(table, recordElement, content) {
      var expandRecord = coreuiTableRender.renderExpand(table, content, 'record_expand_show');
      recordElement.after(expandRecord);
      recordElement.next().show('fast');
      recordElement.addClass('record-expanded');
    },
    /**
     * Скрытие контента под строкой
     * @param {jQuery} recordExpanded
     * @return {jQuery}
     */
    hideExpandRow: function hideExpandRow(recordExpanded) {
      recordExpanded.hide('fast');
    },
    /**
     * Показ контента под строкой
     * @param {jQuery} recordExpanded
     * @return {jQuery}
     */
    showExpandRow: function showExpandRow(recordExpanded) {
      recordExpanded.show('fast');
    },
    /**
     * Удаление контента под строкой
     * @param {jQuery} recordExpanded
     * @return {jQuery}
     */
    removeExpandRow: function removeExpandRow(recordExpanded) {
      recordExpanded.hide('fast', function () {
        $(this).remove();
      });
    },
    /**
     * Получение выбранных на таблице элементов
     * @param {string} tableId
     * @return {Array}
     */
    getSelectedIndexes: function getSelectedIndexes(tableId) {
      var indexes = [];
      $('#coreui-table-' + tableId + ' > .coreui-table__container > .coreui-table__wrapper > table > tbody > tr.coreui-table__record > td.coreui-table__select_container > .coreui-table__select:checked').each(function (key, element) {
        indexes.push($(element).val());
      });
      return indexes;
    },
    /**
     * Получение выбранных на таблице элементов
     * @param {string} tableId
     * @return {Array}
     */
    getRowsSwitches: function getRowsSwitches(tableId) {
      return $('#coreui-table-' + tableId + ' > .coreui-table__container > .coreui-table__wrapper > table > tbody > tr.coreui-table__record > td.coreui-table__switch_container');
    },
    /**
     * Получение элементов выбора строк
     * @param {string} tableId
     * @return {Array}
     */
    getRowsSelects: function getRowsSelects(tableId) {
      return $('#coreui-table-' + tableId + ' > .coreui-table__container > .coreui-table__wrapper  > table > tbody > tr.coreui-table__record > td.coreui-table__select_container');
    },
    /**
     * Получение элемента для выбора всех строк
     * @param {string} tableId
     * @return {Array}
     */
    getRowsSelectAll: function getRowsSelectAll(tableId) {
      return $('#coreui-table-' + tableId + ' > .coreui-table__container > .coreui-table__wrapper  > table > thead > tr > td .coreui-table__select-all');
    },
    /**
     * Получение элементов для раскрытия ячеек
     * @param {string} tableId
     * @return {Array}
     */
    getNoWrapToggles: function getNoWrapToggles(tableId) {
      return $('#coreui-table-' + tableId + ' > .coreui-table__container > .coreui-table__wrapper  > table > tbody > tr > td.coreui_table__no-wrap > i.toggle');
    },
    /**
     * Выделение строки в таблице
     * @param {jQuery} tr
     */
    selectTr: function selectTr(tr) {
      tr.addClass('table-primary');
      $('.coreui-table__select', tr).prop('checked', true);
    },
    /**
     * Выделение всех строк в таблице
     * @param {string} tableId
     */
    selectTrAll: function selectTrAll(tableId) {
      var tableContainer = '#coreui-table-' + tableId + ' > .coreui-table__container > .coreui-table__wrapper > table';
      $(tableContainer + ' > thead > tr > td > .coreui-table__select-all').prop('checked', true);
      $(tableContainer + ' > tbody > tr.coreui-table__record').addClass('table-primary');
      $(tableContainer + ' > tbody > tr.coreui-table__record > td > .coreui-table__select').prop('checked', true);
    },
    /**
     * Снятие выделение строки в таблице
     * @param {jQuery} tr
     */
    unselectTr: function unselectTr(tr) {
      $(tr).removeClass('table-primary');
      $('.coreui-table__select', tr).prop('checked', false);
    },
    /**
     * Снятие выделение со всех строк в таблице
     * @param {string} tableId
     */
    unselectTrAll: function unselectTrAll(tableId) {
      var tableContainer = '#coreui-table-' + tableId + ' > .coreui-table__container > .coreui-table__wrapper > table';
      $(tableContainer + ' > thead > tr > td > .coreui-table__select-all').prop('checked', false);
      $(tableContainer + ' > tbody > tr.coreui-table__record').removeClass('table-primary');
      $(tableContainer + ' > tbody > tr.coreui-table__record > td.coreui-table__select_container > .coreui-table__select').prop('checked', false);
    },
    /**
     * Фиксация колонок слева
     * @param {string} tableId
     */
    fixedColsLeft: function fixedColsLeft(tableId) {
      var tableContainer = '#coreui-table-' + tableId + ' > .coreui-table__container';
      var tableWrapper = tableContainer + ' > .coreui-table__wrapper';
      var colOffset = 0;
      $(tableWrapper + ' > table > thead > tr:last-child > td.coreui-table__fixed_left').each(function () {
        var index = $(this).index() + 1;
        if (index !== 1) {
          $(tableWrapper + ' > table > thead > tr:last-child > td:nth-child(' + index + ')').css('left', colOffset + 'px');
          $(tableWrapper + ' > table > tbody > tr > td:nth-child(' + index + ')')
          //.addClass('coreui-table__fixed_left')
          .css('left', colOffset + 'px');
        }
        colOffset += $(this).outerWidth();
      });
      if (colOffset > 0) {
        $(tableContainer).addClass('fixed-columns');
      }
    },
    /**
     * Фиксация колонок справа
     * @param {string} tableId
     */
    fixedColsRight: function fixedColsRight(tableId) {
      var tableContainer = '#coreui-table-' + tableId + ' > .coreui-table__container';
      var tableWrapper = tableContainer + ' > .coreui-table__wrapper';
      var colOffset = 0;
      $($(tableWrapper + ' > table > thead > tr:last-child > td.coreui-table__fixed_right').get().reverse()).each(function () {
        var index = $(this).index() + 1;
        if (index !== 1) {
          $(tableWrapper + ' > table > thead > tr:last-child > td:nth-child(' + index + ')').css('right', colOffset + 'px');
          $(tableWrapper + ' > table > tbody > tr > td:nth-child(' + index + ')')
          //.addClass('coreui-table__fixed_left')
          .css('right', colOffset + 'px');
        }
        colOffset += $(this).outerWidth();
      });
      if (colOffset > 0) {
        $(tableContainer).addClass('fixed-columns');
      }
    }
  };

  var coreuiTablePrivate = {
    /**
     * Инициализация колонок
     * @param {object} tableWrapper
     * @param {object} table
     * @param {Array} columns
     * @private
     */
    initColumns: function initColumns(tableWrapper, table, columns) {
      var options = table.getOptions();
      var columnsStorage = options.saveState && options.id ? coreuiTablePrivate.getStorageField(table.getId(), 'columns') : null;
      $.each(columns, function (key, column) {
        if (typeof column.type === 'undefined' || !tableWrapper.columns.hasOwnProperty(column.type)) {
          column.type = 'text';
        }
        if (!column.hasOwnProperty('show') || typeof column.show !== 'boolean') {
          column.show = true;
        }
        if (columnsStorage) {
          $.each(columnsStorage, function (key2, columnStorage) {
            if (columnStorage && columnStorage.hasOwnProperty('field') && columnStorage.hasOwnProperty('isShow') && columnStorage.field === column.field) {
              column.show = !!columnStorage.isShow;
              return false;
            }
          });
        }
        if (column.hasOwnProperty('fixed') && typeof column.fixed === 'string') {
          table._options.overflow = true;
        }
        var columnInstance = new coreuiTable.columns[column.type](table, column);
        table._columns.push(columnInstance);
        if (columnInstance.isShow()) {
          table._countColumnsShow++;
        }
      });
    },
    /**
     * Инициализация поисковых полей
     * @param {object} tableWrapper
     * @param {Object} table
     * @param {Array}  searchControls
     * @private
     */
    initSearch: function initSearch(tableWrapper, table, searchControls) {
      var options = table.getOptions();
      var searchValues = options.saveState && options.id ? coreuiTablePrivate.getStorageField(table.getId(), 'search') : null;
      $.each(searchControls, function (key, control) {
        if (!coreuiTableUtils.isObject(control)) {
          control = {};
        }
        if (!control.hasOwnProperty('type') || typeof control.type !== 'string' || !tableWrapper.search.hasOwnProperty(control.type)) {
          control.type = 'text';
        }
        if (options.saveState && options.id) {
          control.value = null;
          if (Array.isArray(searchValues) && control.hasOwnProperty('field')) {
            $.each(searchValues, function (key, search) {
              if (coreuiTableUtils.isObject(search) && search.hasOwnProperty('field') && search.hasOwnProperty('value') && search.field && search.field === control.field) {
                control.value = search.value;
                return false;
              }
            });
          }
        }
        var controlInstance = new coreuiTable.search[control.type](table, control);
        table._search.push(controlInstance);
      });
    },
    /**
     * Инициализация контролов и фильтров
     * @param {Object} tableWrapper
     * @param {Object} table
     * @param {Array}  rows
     * @param {string} position
     * @private
     */
    initControls: function initControls(tableWrapper, table, rows, position) {
      var that = this;
      $.each(rows, function (key, row) {
        var type = 'in';
        var controlsLeft = [];
        var controlsCenter = [];
        var controlsRight = [];
        if (typeof row.type === 'string' && ['in', 'out'].indexOf(row.type.toLowerCase()) >= 0) {
          type = row.type.toLowerCase();
        }
        if (row.hasOwnProperty('left') && Array.isArray(row.left)) {
          $.each(row.left, function (key, control) {
            var instance = that.initControl(tableWrapper, table, control);
            if (coreuiTableUtils.isObject(instance)) {
              controlsLeft.push(instance);
            }
          });
        }
        if (row.hasOwnProperty('center') && Array.isArray(row.center)) {
          $.each(row.center, function (key, control) {
            var instance = that.initControl(tableWrapper, table, control);
            if (coreuiTableUtils.isObject(instance)) {
              controlsCenter.push(instance);
            }
          });
        }
        if (row.hasOwnProperty('right') && Array.isArray(row.right)) {
          $.each(row.right, function (key, control) {
            var instance = that.initControl(tableWrapper, table, control);
            if (coreuiTableUtils.isObject(instance)) {
              controlsRight.push(instance);
            }
          });
        }
        if (controlsLeft.length > 0 || controlsCenter.length > 0 || controlsRight.length > 0) {
          table._controlsPositions[position].push({
            type: type,
            left: controlsLeft,
            center: controlsCenter,
            right: controlsRight
          });
        }
      });
    },
    /**
     * Инициализация контрола или фильтра
     * @param {object} tableWrapper
     * @param {Object} table
     * @param {object} control
     * @private
     */
    initControl: function initControl(tableWrapper, table, control) {
      var instance = null;
      if (coreuiTableUtils.isObject(control) && typeof control.type === 'string') {
        if (tableWrapper.controls.hasOwnProperty(control.type)) {
          instance = new coreuiTable.controls[control.type](table, control);
          table._controls.push(instance);
        } else if (control.type.indexOf('filter:') === 0) {
          var filterName = control.type.substring(7);
          if (tableWrapper.filters.hasOwnProperty(filterName)) {
            if (control.hasOwnProperty('field')) {
              var options = table.getOptions();
              if (options.saveState && options.id) {
                var filterValues = options.saveState && options.id ? coreuiTablePrivate.getStorageField(table.getId(), 'filters') : null;
                control.value = null;
                if (Array.isArray(filterValues)) {
                  $.each(filterValues, function (key, filter) {
                    if (coreuiTableUtils.isObject(filter) && filter.hasOwnProperty('field') && filter.hasOwnProperty('value') && filter.field && filter.field === control.field) {
                      control.value = filter.value;
                      return false;
                    }
                  });
                }
              }
            }
            instance = new coreuiTable.filters[filterName](table, control);
            table._filters.push(instance);
          }
        }
      }
      return instance;
    },
    /**
     * Инициализация сортировки
     * @param {Object} table
     * @param {Array} sort
     * @private
     */
    initSort: function initSort(table, sort) {
      if (Array.isArray(sort) && sort.length > 0) {
        $.each(sort, function (key, sortField) {
          if (coreuiTableUtils.isObject(sortField) && sortField.hasOwnProperty('field') && sortField.hasOwnProperty('order') && typeof sortField.field === 'string' && typeof sortField.order === 'string' && sortField.field && sortField.order && ['asc', 'desc'].indexOf(sortField.order) >= 0) {
            table._sort.push({
              field: sortField.field,
              order: sortField.order
            });
          }
        });
      }
    },
    /**
     * Поиск по данным таблицы
     * @param {object} table
     */
    searchLocalRecords: function searchLocalRecords(table) {
      var searchData = table.getSearchData(true);
      var filterData = table.getFilterData(true);
      var columnsOptions = {};
      table._columns.map(function (column) {
        if (typeof column.convertToString === 'function' && typeof column.getField === 'function') {
          var field = column.getField();
          if (field) {
            columnsOptions[field] = {};
            columnsOptions[field].convertToString = column.convertToString;
          }
        }
      });
      table._records.map(function (record) {
        var isShow = true;
        if (searchData.length > 0) {
          isShow = coreuiTablePrivate.isFilteredRecord(searchData, record.data, columnsOptions);
        }
        if (isShow && filterData.length > 0) {
          isShow = coreuiTablePrivate.isFilteredRecord(filterData, record.data, columnsOptions);
        }
        record.show = isShow;
      });
    },
    /**
     * Установка записей
     * @param {Object} table
     * @param {Array}  records
     * @private
     */
    setRecords: function setRecords(table, records) {
      table._recordsIndex = 1;
      table._records = [];
      var that = this;
      $.each(records, function (key, record) {
        that.addRecord(table, record);
      });
    },
    /**
     * Добавление новой записи
     * @param {object} table
     * @param {object} data
     * @param {number} afterIndex
     * @return {object|null}
     * @private
     */
    addRecord: function addRecord(table, data, afterIndex) {
      if (coreuiTableUtils.isObject(data)) {
        data = $.extend(true, {}, data);
        var meta = data.hasOwnProperty('_meta') && coreuiTableUtils.isObject(data._meta) ? data._meta : null;
        if (meta) {
          delete data._meta;
        }
        var record = {
          index: table._recordsIndex++,
          data: data,
          show: true,
          meta: meta,
          seq: table._seq++
        };
        if (typeof afterIndex === 'number') {
          if (afterIndex === 0) {
            table._records.splice(0, 0, record);
            return record;
          } else {
            var index = null;
            $.each(table._records, function (key, record) {
              if (afterIndex === record.index) {
                index = key;
                return false;
              }
            });
            if (index !== null) {
              table._records.splice(index, 0, record);
              return record;
            }
          }
        } else {
          table._records.push(record);
          return record;
        }
      }
      return null;
    },
    /**
     * Добавление новой записи перед указанной
     * @param {object} table
     * @param {object} data
     * @param {number} index
     * @return {object|null}
     * @private
     */
    addRecordBefore: function addRecordBefore(table, data, index) {
      if (coreuiTableUtils.isObject(data) && typeof index === 'number') {
        data = $.extend(true, {}, data);
        var meta = data.hasOwnProperty('_meta') && coreuiTableUtils.isObject(data._meta) ? data._meta : null;
        if (meta) {
          delete data._meta;
        }
        var record = {
          index: table._recordsIndex++,
          data: data,
          show: true,
          meta: meta,
          seq: table._seq++
        };
        var issetKey = false;
        var keyBefore = null;
        $.each(table._records, function (key, record) {
          if (index === record.index) {
            issetKey = true;
            return false;
          }
          keyBefore = key;
        });
        if (issetKey && keyBefore) {
          table._records.splice(keyBefore, 0, record);
          return record;
        }
      }
      return null;
    },
    /**
     * Проверка подходит ли запись под поисковые данные
     * @param {Array}  filters
     * @param {object} recordData
     * @param {object} columnsOptions
     * @return {boolean}
     * @private
     */
    isFilteredRecord: function isFilteredRecord(filters, recordData, columnsOptions) {
      var isShow = true;
      $.each(filters, function (key, filter) {
        var fieldValue = null;
        if (recordData.hasOwnProperty(filter.field) && recordData[filter.field]) {
          if (columnsOptions && columnsOptions.hasOwnProperty(filter.field) && typeof columnsOptions[filter.field].convertToString === 'function') {
            fieldValue = columnsOptions[filter.field].convertToString(recordData[filter.field]);
          } else if (typeof recordData[filter.field] === 'string') {
            fieldValue = recordData[filter.field];
          } else if (typeof recordData[filter.field] === 'number') {
            fieldValue = String(recordData[filter.field]);
          }
        }
        if (fieldValue !== null) {
          if (!filter.filter(fieldValue, filter.value)) {
            isShow = false;
            return false;
          }
        } else {
          isShow = false;
          return false;
        }
      });
      return isShow;
    },
    /**
     * Выполнения зарегистрированных функций в указанном событии
     * @param {object} table
     * @param {string} name
     * @param {Array}  params
     * @private
     */
    _trigger: function _trigger(table, name, params) {
      params = params || [];
      if (table._events.hasOwnProperty(name) && table._events[name].length > 0) {
        for (var i = 0; i < table._events[name].length; i++) {
          var callback = table._events[name][i].callback;
          var context = table._events[name][i].context ? table._events[name][i].context : table;
          callback.apply(context, params);
          if (table._events[name][i].singleExec) {
            table._events[name].splice(i, 1);
            i--;
          }
        }
      }
    },
    /**
     * Сортировка записей по seq
     * @param {Array} records
     * @return {*}
     */
    sortRecordsBySeq: function sortRecordsBySeq(records) {
      return records.sort(function (a, b) {
        return a.seq - b.seq;
      });
    },
    /**
     * Сортировка записей по указанным полям
     * @param {Array}  records
     * @param {Array}  fields
     * @param {object} columnsConverters
     */
    sortRecordsByFields: function sortRecordsByFields(records, fields, columnsConverters) {
      return records.sort(function (a, b) {
        for (var i = 0; i < fields.length; i++) {
          var issetAField = a.data.hasOwnProperty(fields[i].field);
          var issetBField = b.data.hasOwnProperty(fields[i].field);
          if (!issetAField && !issetBField) {
            return 0;
          } else if (!issetAField) {
            return 1;
          } else if (!issetBField) {
            return -1;
          }
          var aVal = '';
          var bVal = '';
          if (a.data.hasOwnProperty(fields[i].field) && a.data[fields[i].field]) {
            if (columnsConverters && columnsConverters.hasOwnProperty(fields[i].field)) {
              aVal = columnsConverters[fields[i].field](a.data[fields[i].field]);
            } else if (['string', 'number'].indexOf(_typeof(a.data[fields[i].field])) >= 0) {
              aVal = String(a.data[fields[i].field]);
            }
          }
          if (b.data.hasOwnProperty(fields[i].field) && b.data[fields[i].field]) {
            if (columnsConverters && columnsConverters.hasOwnProperty(fields[i].field)) {
              bVal = columnsConverters[fields[i].field](b.data[fields[i].field]);
            } else if (['string', 'number'].indexOf(_typeof(b.data[fields[i].field])) >= 0) {
              bVal = String(b.data[fields[i].field]);
            }
          }
          if (aVal === null || aVal === undefined || typeof aVal === "function") {
            aVal = '';
          } else if (_typeof(aVal) === 'object') {
            aVal = JSON.stringify(aVal);
          }
          if (bVal === null || bVal === undefined || typeof bVal === "function") {
            bVal = '';
          } else if (_typeof(bVal) === 'object') {
            bVal = JSON.stringify(bVal);
          }
          var val = aVal < bVal ? -1 : aVal > bVal ? 1 : 0;
          if (fields[i].order === "desc") {
            val = val * -1;
          }
          if (val !== 0) {
            return val;
          }
        }
      });
    },
    /**
     * Установка сортировки для указанных колонок
     * @param {object} table
     * @param {Array}  sort
     */
    setColumnsSort: function setColumnsSort(table, sort) {
      var thead = coreuiTableElements.getTableThead(table.getId());
      $.each(table._columns, function (key, column) {
        var options = column.getOptions();
        if (options.hasOwnProperty('field') && options.hasOwnProperty('sortable') && typeof options.field === 'string' && options.sortable) {
          var sortColumn = null;
          if (Array.isArray(sort)) {
            $.each(sort, function (key, sortItem) {
              if (coreuiTableUtils.isObject(sortItem) && sortItem.hasOwnProperty('field') && sortItem.hasOwnProperty('order') && typeof sortItem.field === 'string' && typeof sortItem.order === 'string' && options.field === sortItem.field) {
                sortColumn = {
                  field: sortItem.field,
                  order: sortItem.order
                };
              }
            });
          }
          var columnElement = thead.find('[data-field="' + options.field + '"]');
          columnElement.find('.coreui-table__column-sort').remove();
          if (sortColumn !== null) {
            if (sortColumn.order === 'asc') {
              columnElement.append('<i class="coreui-table__column-sort bi bi-sort-down-alt"></i>');
            } else {
              columnElement.append('<i class="coreui-table__column-sort bi bi-sort-down"></i>');
            }
          }
        }
      });
    },
    /**
     * Получение данных из хранилища
     * @param {string} tableId
     * @return {object|null}
     */
    getStorage: function getStorage(tableId) {
      var storage = localStorage.getItem('coreui_table');
      try {
        if (typeof storage === 'string' && storage) {
          storage = JSON.parse(storage);
          if (coreuiTableUtils.isObject(storage)) {
            return tableId && typeof tableId === 'string' ? storage.hasOwnProperty(tableId) ? storage[tableId] : null : storage;
          }
        }
        return null;
      } catch (e) {
        return null;
      }
    },
    /**
     * Сохранение данных в хранилище
     * @param {string}      tableId
     * @param {object|null} storage
     */
    setStorage: function setStorage(tableId, storage) {
      if (typeof tableId !== 'string' || !tableId) {
        return;
      }
      var storageAll = this.getStorage();
      if (coreuiTableUtils.isObject(storageAll)) {
        if (storageAll.hasOwnProperty(tableId)) {
          if (storage) {
            storageAll[tableId] = storage;
          } else {
            delete storageAll[tableId];
          }
        } else if (storage) {
          storageAll[tableId] = storage;
        }
      }
      localStorage.setItem('coreui_table', JSON.stringify(storageAll || {}));
    },
    /**
     * Получение поля из хранилища
     * @param tableId
     * @param field
     * @return {*|null}
     */
    getStorageField: function getStorageField(tableId, field) {
      var storage = this.getStorage(tableId) || {};
      return storage.hasOwnProperty(field) ? storage[field] : null;
    },
    /**
     * Сохранение поля в хранилище
     * @param tableId
     * @param field
     * @param data
     */
    setStorageField: function setStorageField(tableId, field, data) {
      var storage = this.getStorage(tableId) || {};
      if (data === null) {
        if (storage.hasOwnProperty(field)) {
          delete storage[field];
        }
      } else {
        storage[field] = data;
      }
      this.setStorage(tableId, storage);
    }
  };

  var coreuiTableInstance = {
    _options: {
      id: null,
      "class": '',
      primaryKey: 'id',
      lang: 'en',
      langItems: {},
      width: null,
      minWidth: null,
      maxWidth: null,
      height: null,
      minHeight: null,
      naxHeight: null,
      overflow: false,
      page: 1,
      recordsPerPage: 25,
      theadTop: 0,
      saveState: false,
      noBorder: false,
      noWrap: false,
      noWrapToggle: false,
      showHeaders: true,
      showScrollShadow: false,
      recordsRequest: {
        method: 'GET',
        url: null // '/mod/index/orders/?page=[page]'
      },
      requestParams: {
        page: 'page',
        count: 'count',
        start: 'start',
        end: 'end',
        sort: 'sort',
        search: 'search'
      },
      group: {
        field: null,
        attr: {},
        render: null
      },
      onClick: null,
      onClickUrl: null,
      sort: [],
      header: [],
      footer: [],
      columnsHeader: [],
      search: {
        labelWidth: 200,
        controls: []
      },
      columns: [],
      columnsFooter: [],
      records: []
    },
    _id: '',
    _page: 1,
    _recordsIndex: 1,
    _recordsPerPage: 25,
    _recordsTotal: 0,
    _recordsNumber: 1,
    _seq: 1,
    _isRecordsRequest: false,
    _countColumnsShow: 0,
    _records: [],
    _sort: [],
    _columns: [],
    _search: [],
    _filters: [],
    _controls: [],
    _controlsPositions: {
      header: [],
      footer: []
    },
    _events: {},
    /**
     * Инициализация
     * @param {object} tableWrapper
     * @param {object} options
     * @private
     */
    _init: function _init(tableWrapper, options) {
      this._options = $.extend(true, {}, this._options, options);
      this._events = {};
      this._id = this._options.hasOwnProperty('id') && typeof this._options.id === 'string' && this._options.id ? this._options.id : coreuiTableUtils.hashCode();
      if (this._options.page > 0) {
        this._page = this._options.page;
      }
      if (this._options.recordsPerPage > 0) {
        this._recordsPerPage = this._options.recordsPerPage;
      }
      this._isRecordsRequest = this._options.hasOwnProperty('recordsRequest') && (typeof this._options.recordsRequest === 'function' || coreuiTableUtils.isObject(this._options.recordsRequest) && this._options.recordsRequest.hasOwnProperty('url') && typeof this._options.recordsRequest.url === 'string' && this._options.recordsRequest.url !== '' && this._options.recordsRequest.url !== '#');
      if (this._isRecordsRequest) {
        if (_typeof(this._options.recordsRequest) === 'object' && (!this._options.recordsRequest.hasOwnProperty('method') || typeof this._options.recordsRequest.method !== 'string')) {
          this._options.recordsRequest.method = 'GET';
        }
      } else if (Array.isArray(this._options.records)) {
        coreuiTablePrivate.setRecords(this, this._options.records);
      }

      // Очистка записей после инициализации
      this._options.records = [];

      // Инициализация колонок
      if (_typeof(this._options.columns) === 'object' && Array.isArray(this._options.columns) && this._options.columns.length > 0) {
        coreuiTablePrivate.initColumns(tableWrapper, this, this._options.columns);
      }

      // Инициализация поисковых полей
      if (coreuiTableUtils.isObject(this._options.search) && _typeof(this._options.search.controls) === 'object' && Array.isArray(this._options.search.controls) && this._options.search.controls.length > 0) {
        coreuiTablePrivate.initSearch(tableWrapper, this, this._options.search.controls);
      }

      // Инициализация контролов и фильтров
      if (this._options.hasOwnProperty('header') && Array.isArray(this._options.header) && this._options.header.length > 0) {
        coreuiTablePrivate.initControls(tableWrapper, this, this._options.header, 'header');
      }
      if (this._options.hasOwnProperty('footer') && Array.isArray(this._options.footer) && this._options.footer.length > 0) {
        coreuiTablePrivate.initControls(tableWrapper, this, this._options.footer, 'footer');
      }
      if (this._options.saveState && this._options.id) {
        // Поиск по сохраненным поисковым данным
        if (!this._isRecordsRequest) {
          coreuiTablePrivate.searchLocalRecords(this);
        }

        // Сортировка
        var sort = coreuiTablePrivate.getStorageField(this.getId(), 'sort');
        if (Array.isArray(sort) && sort.length > 0) {
          coreuiTablePrivate.initSort(this, sort);
          if (!this._isRecordsRequest && this._records.length > 0) {
            this._records = coreuiTablePrivate.sortRecordsByFields(this._records, this._sort);
          }
        }
      } else {
        if (this._options.hasOwnProperty('sort') && Array.isArray(this._options.sort) && this._options.sort.length > 0) {
          coreuiTablePrivate.initSort(this, this._options.sort);
        }
      }
    },
    /**
     * Инициализация событий таблицы
     */
    initEvents: function initEvents() {
      var that = this;

      // Показ строк
      this.on('records_show', function () {
        // Переход по ссылке
        if (typeof that._options.onClickUrl === 'string' && that._options.onClickUrl) {
          coreuiTableElements.getTrRecords(that.getId()).click(function () {
            var recordKey = $(this).data('record-index');
            var record = that.getRecordByIndex(recordKey);
            if (!record) {
              return;
            }
            var url = that._options.onClickUrl;
            $.each(record.data, function (field, value) {
              var fieldQuote = field.replace(/([^\w\d])/g, '\\$1');
              url = url.replace(new RegExp('\\[' + fieldQuote + '\\]', 'g'), value);
            });
            if (url && url !== '#') {
              location.href = url;
            }
          });
        }

        // Событие нажатия на строку
        if (['function', 'string'].indexOf(_typeof(that._options.onClick))) {
          coreuiTableElements.getTrRecords(that.getId()).click(function (event) {
            var recordKey = $(this).data('record-index');
            var record = that.getRecordByIndex(recordKey);
            if (!record) {
              return;
            }
            if (typeof that._options.onClick === 'function') {
              that._options.onClick(event, record);
            } else if (typeof that._options.onClick === 'string') {
              var func = new Function('event', 'record', that._options.onClick);
              func(event, record);
            }
          });
        }

        // Раскрытие строки
        coreuiTableElements.getNoWrapToggles(that.getId()).click(function (event) {
          event.cancelBubble = true;
          event.preventDefault();
          var parent = $(this).parent();
          if (parent.hasClass('shown')) {
            $(this).removeClass('bi-caret-up-fill');
            $(this).addClass('bi-caret-down-fill');
            parent.removeClass('shown');
          } else {
            $(this).removeClass('bi-caret-down-fill');
            $(this).addClass('bi-caret-up-fill');
            parent.addClass('shown');
          }
        });

        // Фиксация колонок
        coreuiTableElements.fixedColsLeft(that.getId());
        coreuiTableElements.fixedColsRight(that.getId());
      });

      // Показ таблицы
      this.on('table_show', function () {
        var sortableColumns = coreuiTableElements.getTableSortable(that.getId());
        if (sortableColumns[0]) {
          sortableColumns.click(function (event) {
            var field = $(this).data('field');
            if (field) {
              var sorting = [];
              var currentOrder = null;
              $.each(that._sort, function (key, sortField) {
                if (field === sortField.field) {
                  currentOrder = sortField.order;
                  return false;
                }
              });
              if (currentOrder === null) {
                sorting.push({
                  field: field,
                  order: 'asc'
                });
              } else if (currentOrder === 'asc') {
                sorting.push({
                  field: field,
                  order: 'desc'
                });
              }
              if (sorting.length === 0) {
                that.sortDefault();
              } else {
                that.sortFields(sorting);
              }
            }
          });
        }
        if (window.hasOwnProperty('bootstrap') && bootstrap.hasOwnProperty('Tooltip')) {
          $('.coreui-table__column-description', coreuiTableElements.getTableThead(that.getId())).each(function () {
            new bootstrap.Tooltip(this);
          });
        }
      });

      // События смены состояния
      if (this._options.saveState && this._options.id) {
        this.on('records_sort', function () {
          coreuiTablePrivate.setStorageField(that.getId(), 'sort', that._sort);
        });
        this.on('search_change', function () {
          coreuiTablePrivate.setStorageField(that.getId(), 'search', that.getSearchData());
        });
        this.on('filters_change', function () {
          coreuiTablePrivate.setStorageField(that.getId(), 'filters', that.getFilterData());
        });
        this.on('columns_change', function () {
          var columns = [];
          that._columns.map(function (column) {
            var columnOptions = column.getOptions();
            columns.push({
              field: columnOptions.field,
              isShow: column.isShow()
            });
          });
          coreuiTablePrivate.setStorageField(that.getId(), 'columns', columns);
        });
      }
      coreuiTablePrivate._trigger(this, 'table_show', [this]);
      coreuiTablePrivate._trigger(this, 'container_show');

      // Вызов события показа строк
      if (!this._isRecordsRequest) {
        coreuiTablePrivate._trigger(this, 'records_show', [this]);
      }
    },
    /**
     * Получение идентификатора таблицы
     * @returns {string}
     */
    getId: function getId() {
      return this._id;
    },
    /**
     * Получение опций таблицы
     * @returns {*}
     */
    getOptions: function getOptions() {
      return $.extend(true, {}, this._options);
    },
    /**
     *
     * @param element
     * @returns {*}
     */
    render: function render(element) {
      var that = this;
      var widthSizes = [];
      var heightSizes = [];
      var options = this.getOptions();
      var render = {
        headersOut: [],
        headersIn: [],
        footersIn: [],
        footersOut: []
      };
      this._recordsTotal = this._records.length;
      if (options.width > 0) {
        var unit = typeof options.width === 'number' ? 'px' : '';
        widthSizes.push('width:' + options.width + unit);
      }
      if (options.minWidth > 0) {
        var _unit = typeof options.minWidth === 'number' ? 'px' : '';
        widthSizes.push('min-width:' + options.minWidth + _unit);
      }
      if (options.maxWidth > 0) {
        var _unit2 = typeof options.maxWidth === 'number' ? 'px' : '';
        widthSizes.push('max-width:' + options.maxWidth + _unit2);
        options.overflow = true;
      }
      if (options.height > 0) {
        var _unit3 = typeof options.height === 'number' ? 'px' : '';
        heightSizes.push('height:' + options.height + _unit3);
      }
      if (options.minHeight > 0) {
        var _unit4 = typeof options.minHeight === 'number' ? 'px' : '';
        heightSizes.push('min-height:' + options.minHeight + _unit4);
      }
      if (options.maxHeight > 0) {
        var _unit5 = typeof options.maxHeight === 'number' ? 'px' : '';
        heightSizes.push('max-height:' + options.maxHeight + _unit5);
        options.overflow = true;
      }

      // Верхние элементы управления
      if (Array.isArray(this._controlsPositions.header) && this._controlsPositions.header.length > 0) {
        $.each(this._controlsPositions.header, function (key, header) {
          var controlsLeft = [];
          var controlsCenter = [];
          var controlsRight = [];
          if (Array.isArray(header.left) && header.left.length > 0) {
            $.each(header.left, function (key, control) {
              var controlRender = coreuiTableRender.renderControl(that, control);
              if (controlRender) {
                controlsLeft.push(controlRender);
              }
            });
          }
          if (Array.isArray(header.center) && header.center.length > 0) {
            $.each(header.center, function (key, control) {
              var controlRender = coreuiTableRender.renderControl(that, control);
              if (controlRender) {
                controlsCenter.push(controlRender);
              }
            });
          }
          if (Array.isArray(header.right) && header.right.length > 0) {
            $.each(header.right, function (key, control) {
              var controlRender = coreuiTableRender.renderControl(that, control);
              if (controlRender) {
                controlsRight.push(controlRender);
              }
            });
          }
          if (controlsLeft.length > 0 || controlsCenter.length > 0 || controlsRight.length > 0) {
            if (header.type === 'in') {
              var headerControls = $(coreuiTableUtils.render(tpl['table/controls/header.html'], {
                controlsLeft: controlsLeft,
                controlsCenter: controlsCenter,
                controlsRight: controlsRight
              }));
              if (controlsLeft.length > 0) {
                $.each(controlsLeft, function (key, control) {
                  headerControls.find('.coreui-table__controls_left').append(control);
                });
              }
              if (controlsCenter.length > 0) {
                $.each(controlsCenter, function (key, control) {
                  headerControls.find('.coreui-table__controls_center').append(control);
                });
              }
              if (controlsRight.length > 0) {
                $.each(controlsRight, function (key, control) {
                  headerControls.find('.coreui-table__controls_right').append(control);
                });
              }
              render.headersIn.push(headerControls);
            } else {
              var _headerControls = $(coreuiTableUtils.render(tpl['table/controls/header-out.html'], {
                controlsLeft: controlsLeft,
                controlsCenter: controlsCenter,
                controlsRight: controlsRight
              }));
              if (controlsLeft.length > 0) {
                $.each(controlsLeft, function (key, control) {
                  _headerControls.find('.coreui-table__controls_left').append(control);
                });
              }
              if (controlsCenter.length > 0) {
                $.each(controlsCenter, function (key, control) {
                  _headerControls.find('.coreui-table__controls_center').append(control);
                });
              }
              if (controlsRight.length > 0) {
                $.each(controlsRight, function (key, control) {
                  _headerControls.find('.coreui-table__controls_right').append(control);
                });
              }
              render.headersOut.push(_headerControls);
            }
          }
        });
      }

      // Нижние элементы управления
      if (Array.isArray(this._controlsPositions.footer) && this._controlsPositions.footer.length > 0) {
        $.each(this._controlsPositions.footer, function (key, footer) {
          var controlsLeft = [];
          var controlsCenter = [];
          var controlsRight = [];
          if (Array.isArray(footer.left) && footer.left.length > 0) {
            $.each(footer.left, function (key, control) {
              var controlRender = coreuiTableRender.renderControl(that, control);
              if (controlRender) {
                controlsLeft.push(controlRender);
              }
            });
          }
          if (Array.isArray(footer.center) && footer.center.length > 0) {
            $.each(footer.center, function (key, control) {
              var controlRender = coreuiTableRender.renderControl(that, control);
              if (controlRender) {
                controlsCenter.push(controlRender);
              }
            });
          }
          if (Array.isArray(footer.right) && footer.right.length > 0) {
            $.each(footer.right, function (key, control) {
              var controlRender = coreuiTableRender.renderControl(that, control);
              if (controlRender) {
                controlsRight.push(controlRender);
              }
            });
          }
          if (controlsLeft.length > 0 || controlsCenter.length > 0 || controlsRight.length > 0) {
            if (footer.type === 'in') {
              var footerControls = $(coreuiTableUtils.render(tpl['table/controls/footer.html'], {
                controlsLeft: controlsLeft,
                controlsCenter: controlsCenter,
                controlsRight: controlsRight
              }));
              if (controlsLeft.length > 0) {
                $.each(controlsLeft, function (key, control) {
                  footerControls.find('.coreui-table__controls_left').append(control);
                });
              }
              if (controlsCenter.length > 0) {
                $.each(controlsCenter, function (key, control) {
                  footerControls.find('.coreui-table__controls_center').append(control);
                });
              }
              if (controlsRight.length > 0) {
                $.each(controlsRight, function (key, control) {
                  footerControls.find('.coreui-table__controls_right').append(control);
                });
              }
              render.footersIn.push(footerControls);
            } else {
              var _footerControls = $(coreuiTableUtils.render(tpl['table/controls/footer-out.html'], {
                controlsLeft: controlsLeft,
                controlsCenter: controlsCenter,
                controlsRight: controlsRight
              }));
              if (controlsLeft.length > 0) {
                $.each(controlsLeft, function (key, control) {
                  _footerControls.find('.coreui-table__controls_left').append(control);
                });
              }
              if (controlsCenter.length > 0) {
                $.each(controlsCenter, function (key, control) {
                  _footerControls.find('.coreui-table__controls_center').append(control);
                });
              }
              if (controlsRight.length > 0) {
                $.each(controlsRight, function (key, control) {
                  _footerControls.find('.coreui-table__controls_right').append(control);
                });
              }
              render.footersOut.push(_footerControls);
            }
          }
        });
      }

      // Загрузка записей
      if (this._isRecordsRequest) {
        this.on('container_show', function () {
          if (typeof options.recordsRequest === 'function') {
            that.loadByFunction(options.recordsRequest);
          } else {
            that.load(options.recordsRequest.url, options.recordsRequest.method);
          }
        });
      }
      var classes = [];
      var classesWrapper = [];
      if (options.hasOwnProperty('noBorder') && typeof options.noBorder === 'boolean' && options.noBorder) {
        classes.push('coreui-table__no_border');
      }
      if (options.hasOwnProperty('showScrollShadow') && typeof options.showScrollShadow === 'boolean' && options.showScrollShadow) {
        classesWrapper.push('table-scroll-shadow');
      }
      if (options.hasOwnProperty('overflow') && typeof options.overflow === 'boolean' && options.overflow) {
        classesWrapper.push('overflow-x-auto');
      }
      var tableElement = coreuiTableRender.renderTable(this);
      var containerElement = $(coreuiTableUtils.render(tpl['container.html'], {
        id: this._id,
        classes: classes.length > 0 ? ' ' + classes.join(' ') : '',
        classesWrapper: classesWrapper.length > 0 ? ' ' + classesWrapper.join(' ') : '',
        widthSizes: widthSizes,
        heightSizes: heightSizes
      }));
      if (render.headersOut.length > 0) {
        containerElement.prepend(render.headersOut);
      }
      if (render.headersIn.length > 0) {
        containerElement.find('.coreui-table__container').prepend(render.headersIn);
      }
      if (render.footersIn.length > 0) {
        containerElement.find('.coreui-table__container').append(render.footersIn);
      }
      if (render.footersOut.length > 0) {
        containerElement.append(render.footersOut);
      }
      containerElement.find('.coreui-table__wrapper').html(tableElement);
      if (element === undefined) {
        return containerElement;
      }

      // Dom element
      var domElement = null;
      if (typeof element === 'string') {
        domElement = document.getElementById(element);
      } else if (element instanceof HTMLElement) {
        domElement = element;
      }
      if (domElement) {
        $(domElement).html(containerElement);
        this.initEvents();
      }
    },
    /**
     * Блокировка таблицы
     */
    lock: function lock() {
      var container = coreuiTableElements.getContainer(this.getId());
      if (container[0] && !container.find('.coreui-table-lock')[0]) {
        var html = coreuiTableUtils.render(tpl['table/loader.html'], {
          lang: this.getLang()
        });
        container.prepend(html);
      }
    },
    /**
     * Разблокировка таблицы
     */
    unlock: function unlock() {
      coreuiTableElements.getLock(this.getId()).hide(50, function () {
        $(this).remove();
      });
    },
    /**
     * Загрузка строк
     * @param {string} url
     * @param {string} method
     */
    load: function load(url, method) {
      this.lock();
      var that = this;
      var params = {};
      if (url.match(/\[page\]/)) {
        url = url.replace(/\[page\]/g, this._page);
      } else {
        var paramPage = coreuiTableUtils.isObject(this._options.requestParams) && this._options.requestParams.hasOwnProperty('page') ? this._options.requestParams.page : 'page';
        params[paramPage] = this._page;
      }
      if (url.match(/\[count\]/)) {
        url = url.replace(/\[count\]/g, this._recordsPerPage);
      } else {
        var paramCount = coreuiTableUtils.isObject(this._options.requestParams) && this._options.requestParams.hasOwnProperty('count') ? this._options.requestParams.count : 'count';
        params[paramCount] = this._recordsPerPage;
      }
      if (url.match(/\[start\]/)) {
        url = url.replace(/\[start\]/g, (this._page - 1) * this._recordsPerPage + 1);
      } else {
        var paramStart = coreuiTableUtils.isObject(this._options.requestParams) && this._options.requestParams.hasOwnProperty('start') ? this._options.requestParams.start : 'start';
        params[paramStart] = (this._page - 1) * this._recordsPerPage + 1;
      }
      if (url.match(/\[end\]/)) {
        url = url.replace(/\[end\]/g, (this._page - 1) * this._recordsPerPage + Number(this._recordsPerPage));
      } else {
        var paramEnd = coreuiTableUtils.isObject(this._options.requestParams) && this._options.requestParams.hasOwnProperty('end') ? this._options.requestParams.end : 'end';
        params[paramEnd] = (this._page - 1) * this._recordsPerPage + Number(this._recordsPerPage);
      }
      var searchData = this.getSearchData();
      var filterData = this.getFilterData();
      if (filterData.length > 0) {
        filterData.map(function (filter) {
          searchData.push(filter);
        });
      }
      if (searchData.length > 0) {
        var paramSearch = coreuiTableUtils.isObject(this._options.requestParams) && this._options.requestParams.hasOwnProperty('search') && typeof this._options.requestParams.search === 'string' ? this._options.requestParams.search : 'search';
        params[paramSearch] = {};
        searchData.map(function (searchItem) {
          params[paramSearch][searchItem.field] = searchItem.value;
        });
      }
      if (this._sort.length > 0) {
        var paramSort = coreuiTableUtils.isObject(this._options.requestParams) && this._options.requestParams.hasOwnProperty('sort') && typeof this._options.requestParams.sort === 'string' ? this._options.requestParams.sort : 'sort';
        params[paramSort] = this._sort;
      }
      $.ajax({
        url: url,
        method: method || 'GET',
        dataType: "json",
        data: params,
        beforeSend: function beforeSend(xhr) {
          coreuiTablePrivate._trigger(that, 'records_load_start', [that, xhr]);
        },
        success: function success(result) {
          if (result.hasOwnProperty('records') && _typeof(result.records) === 'object' && Array.isArray(result.records)) {
            var total = result.hasOwnProperty('total') && coreuiTableUtils.isNumeric(result.total) ? result.total : null;
            that.setRecords(result.records, total);
          } else {
            that.setRecords([]);
          }
        },
        error: function error(xhr, textStatus, errorThrown) {
          that.setRecords([]);
          coreuiTablePrivate._trigger(that, 'records_load_error', [that, xhr, textStatus, errorThrown]);
        },
        complete: function complete(xhr, textStatus) {
          that.unlock();
          coreuiTablePrivate._trigger(that, 'records_load_end', [that, xhr, textStatus]);
        }
      });
    },
    /**
     * Загрузка строк
     * @param {function} callback
     */
    loadByFunction: function loadByFunction(callback) {
      var that = this;
      var params = {};
      var paramPage = coreuiTableUtils.isObject(this._options.requestParams) && this._options.requestParams.hasOwnProperty('page') ? this._options.requestParams.page : 'page';
      var paramCount = coreuiTableUtils.isObject(this._options.requestParams) && this._options.requestParams.hasOwnProperty('count') ? this._options.requestParams.count : 'count';
      var paramStart = coreuiTableUtils.isObject(this._options.requestParams) && this._options.requestParams.hasOwnProperty('start') ? this._options.requestParams.start : 'start';
      var paramEnd = coreuiTableUtils.isObject(this._options.requestParams) && this._options.requestParams.hasOwnProperty('end') ? this._options.requestParams.end : 'end';
      params[paramCount] = this._recordsPerPage;
      params[paramPage] = this._page;
      params[paramStart] = (this._page - 1) * this._recordsPerPage + 1;
      params[paramEnd] = (this._page - 1) * this._recordsPerPage + Number(this._recordsPerPage);
      var searchData = this.getSearchData();
      var filterData = this.getFilterData();
      if (filterData.length > 0) {
        $.each(filterData, function (key, filter) {
          searchData.push(filter);
        });
      }
      if (searchData.length > 0) {
        var paramSearch = coreuiTableUtils.isObject(this._options.requestParams) && this._options.requestParams.hasOwnProperty('search') && typeof this._options.requestParams.search === 'string' ? this._options.requestParams.search : 'search';
        params[paramSearch] = {};
        searchData.map(function (searchItem) {
          params[paramSearch][searchItem.field] = searchItem.value;
        });
      }
      if (this._sort.length > 0) {
        var paramSort = coreuiTableUtils.isObject(this._options.requestParams) && this._options.requestParams.hasOwnProperty('sort') && typeof this._options.requestParams.sort === 'string' ? this._options.requestParams.sort : 'sort';
        params[paramSort] = this._sort;
      }
      var result = callback(params, this);

      /**
       * Установка записей
       * @param {Object} data
       */
      function setRecords(data) {
        if (data.hasOwnProperty('records') && _typeof(data.records) === 'object' && Array.isArray(data.records)) {
          var total = data.hasOwnProperty('total') && coreuiTableUtils.isNumeric(data.total) ? data.total : null;
          that.setRecords(data.records, total);
        } else {
          that.setRecords([]);
        }
      }
      if (result instanceof Promise) {
        this.lock();
        result.then(function (data) {
          that.unlock();
          setRecords(data);
        })["catch"](function () {
          that.unlock();
        });
      } else if (_typeof(result) === 'object') {
        setRecords(result);
      }
    },
    /**
     * Перезагрузка записей в таблице
     */
    reload: function reload() {
      if (this._isRecordsRequest) {
        if (typeof this._options.recordsRequest === 'function') {
          this.loadByFunction(this._options.recordsRequest);
        } else {
          this.load(this._options.recordsRequest.url, this._options.recordsRequest.method);
        }
      }
    },
    /**
     * Пересоздание тела таблицы
     */
    refresh: function refresh() {
      var table = coreuiTableRender.renderTable(this);
      coreuiTableElements.getTable(this.getId()).replaceWith(table);
      coreuiTablePrivate._trigger(this, 'table_show', [this]);
      coreuiTablePrivate._trigger(this, 'records_show', [this]);
    },
    /**
     * Установка общего количества записей на странице
     * @param recordsPerPage
     */
    setPageSize: function setPageSize(recordsPerPage) {
      this._recordsPerPage = recordsPerPage;
      coreuiTablePrivate._trigger(this, 'page_size_update');
    },
    /**
     * Выбор всех записей в таблице
     */
    selectAll: function selectAll() {
      coreuiTableElements.selectTrAll(this.getId());
      coreuiTablePrivate._trigger(this, 'record_select_all');
    },
    /**
     * Отмена выбор всех записей в таблице
     */
    unselectAll: function unselectAll() {
      coreuiTableElements.unselectTrAll(this.getId());
      coreuiTablePrivate._trigger(this, 'record_unselect_all');
    },
    /**
     * Выбор записи в таблице
     * @param {string} id
     */
    selectRecord: function selectRecord(id) {
      var record = this.getRecordById(id);
      if (!record) {
        return;
      }
      var tr = coreuiTableElements.getTrByIndex(this.getId(), record.index);
      if (tr.length === 0) {
        return;
      }
      coreuiTableElements.selectTr(tr);
      coreuiTablePrivate._trigger(this, 'record_select', [record]);
    },
    /**
     * Выбор записи в таблице по индексу
     * @param {int} index
     */
    selectRecordByIndex: function selectRecordByIndex(index) {
      var record = this.getRecordByIndex(index);
      if (!record) {
        return;
      }
      var tr = coreuiTableElements.getTrByIndex(this.getId(), record.index);
      if (tr.length === 0) {
        return;
      }
      coreuiTableElements.selectTr(tr);
      coreuiTablePrivate._trigger(this, 'record_select', [record]);
    },
    /**
     * Отмена выбора записи в таблице
     * @param {string} id
     */
    unselectRecord: function unselectRecord(id) {
      var record = this.getRecordById(id);
      if (!record) {
        return;
      }
      var tr = coreuiTableElements.getTrByIndex(this.getId(), record.index);
      if (!tr) {
        return;
      }
      coreuiTableElements.unselectTr(tr);
      coreuiTablePrivate._trigger(this, 'record_unselect', [record.data]);
    },
    /**
     * Получение выбранных id
     * @return {array}
     */
    getSelectedRecordsId: function getSelectedRecordsId() {
      var records = [];
      var that = this;
      var field = this._options.primaryKey;
      $.each(coreuiTableElements.getSelectedIndexes(this.getId()), function (key, index) {
        var record = that.getRecordByIndex(index);
        if (!record || !record.data.hasOwnProperty(field)) {
          return;
        }
        records.push(record.data[field]);
      });
      return records;
    },
    /**
     * Получение выбранных записей
     * @return {array}
     */
    getSelectedRecords: function getSelectedRecords() {
      var records = [];
      var that = this;
      $.each(coreuiTableElements.getSelectedIndexes(this.getId()), function (key, index) {
        var record = that.getRecordByIndex(index);
        if (!record) {
          return;
        }
        records.push(record);
      });
      return records;
    },
    /**
     * Получение записи по id
     * @param id
     * @return {object|null}
     */
    getRecord: function getRecord(id) {
      var record = this.getRecordById(id);
      if (!record) {
        return null;
      }
      return record.data;
    },
    /**
     * Получение записей
     */
    getRecords: function getRecords() {
      var records = [];
      $.each(this._records, function (key, record) {
        records.push($.extend(true, {}, record));
      });
      return records;
    },
    /**
     * Получение данных из существующих записей
     * @return {Array}
     */
    getData: function getData() {
      var data = [];
      $.each(this._records, function (key, record) {
        data.push($.extend(true, {}, record.data));
      });
      return data;
    },
    /**
     * Переход к предыдущей странице
     */
    prevPage: function prevPage() {
      if (this._page > 1) {
        this._page--;
        this.reload();
      }
    },
    /**
     * Переход к следующей странице
     * @return {array}
     */
    nextPage: function nextPage() {
      var totalPages = this._recordsTotal > 0 && this._recordsPerPage > 0 ? Math.ceil(this._recordsTotal / this._recordsPerPage) : 1;
      if (this._page < totalPages) {
        this._page++;
        this.reload();
      }
    },
    /**
     * Переход к указанной странице
     */
    goPage: function goPage(page) {
      if (page >= 1) {
        this._page = page;
        this.reload();
      }
    },
    /**
     * Регистрация функции на событие
     * @param {Array|string} eventName
     * @param {function}     callback
     * @param {*}            context
     * @param {boolean}      singleExec
     */
    on: function on(eventName, callback, context, singleExec) {
      var eventNames = [];
      if (Array.isArray(eventName)) {
        $.each(eventName, function (key, name) {
          if (typeof name === 'string' && name) {
            eventNames.push(name);
          }
        });
      } else if (typeof eventName === 'string' && eventName) {
        eventNames.push(eventName);
      } else {
        return;
      }
      var that = this;
      $.each(eventNames, function (key, name) {
        if (!Array.isArray(that._events[name])) {
          that._events[name] = [];
        }
        that._events[name].push({
          context: context ? context : that,
          callback: callback,
          singleExec: !!singleExec
        });
      });
    },
    /**
     * Получение переводов текущего языка
     * @return {object}
     */
    getLang: function getLang() {
      return $.extend(true, {}, this._options.langItems);
    },
    /**
     * Установка видимых колонок, не указанные колонки будут скрыты
     * @param {Array} columns
     */
    setColumnsShow: function setColumnsShow(columns) {
      if (!Array.isArray(columns)) {
        return;
      }
      var isChange = false;
      var table = this;
      this._countColumnsShow = 0;
      this._columns.map(function (column) {
        var options = column.getOptions();
        if (options.hasOwnProperty('field') && typeof options.field === 'string') {
          var isShow = columns.indexOf(options.field) >= 0;
          if (column.isShow() !== isShow) {
            column.setShow(isShow);
            isChange = true;
          }
        }
        if (column.isShow()) {
          table._countColumnsShow++;
        }
      });
      if (isChange) {
        coreuiTablePrivate._trigger(this, 'columns_change');
        this.refresh();
      }
    },
    /**
     * Показ колонок
     * @param {Array} columns
     */
    showColumns: function showColumns(columns) {
      if (!Array.isArray(columns)) {
        return;
      }
      var isChange = false;
      var table = this;
      this._countColumnsShow = 0;
      this._columns.map(function (column) {
        var options = column.getOptions();
        if (options.hasOwnProperty('field') && typeof options.field === 'string' && columns.indexOf(options.field) >= 0 && !column.isShow()) {
          column.setShow(true);
          isChange = true;
        }
        if (column.isShow()) {
          table._countColumnsShow++;
        }
      });
      if (isChange) {
        coreuiTablePrivate._trigger(this, 'columns_change');
        this.refresh();
      }
    },
    /**
     * Скрытие колонок
     * @param {Array} columns
     */
    hideColumns: function hideColumns(columns) {
      if (!Array.isArray(columns)) {
        return;
      }
      var isChange = false;
      var table = this;
      this._countColumnsShow = 0;
      this._columns.map(function (column) {
        var options = column.getOptions();
        if (options.hasOwnProperty('field') && typeof options.field === 'string' && columns.indexOf(options.field) >= 0 && column.isShow()) {
          column.setShow(false);
          isChange = true;
        }
        if (column.isShow()) {
          table._countColumnsShow++;
        }
      });
      if (isChange) {
        coreuiTablePrivate._trigger(this, 'columns_change');
        this.refresh();
      }
    },
    /**
     * Получение поисковых данных
     * @property {boolean} extOptions
     * @return {*[]}
     */
    getSearchData: function getSearchData(extOptions) {
      var searchData = [];
      this._search.map(function (control) {
        var field = control.getField();
        if (field) {
          var value = control.getValue();
          if (value !== null) {
            var search = {
              field: field,
              value: value
            };
            if (extOptions) {
              search.filter = typeof control.filter === 'function' ? control.filter : null;
              search.type = control._options.type;
            }
            searchData.push(search);
          }
        }
      });
      return searchData;
    },
    /**
     * Получение данных из фильтров
     * @property {boolean} extOptions
     * @return {*[]}
     */
    getFilterData: function getFilterData(extOptions) {
      var filterData = [];
      this._filters.map(function (control) {
        var field = control.getField();
        if (field) {
          var value = control.getValue();
          if (value !== null) {
            var filter = {
              field: field,
              value: value
            };
            if (extOptions) {
              filter.filter = typeof control.filter === 'function' ? control.filter : null;
            }
            filterData.push(filter);
          }
        }
      });
      return filterData;
    },
    /**
     * Поиск по таблице с использованием данных из поиска и фильтров
     */
    searchRecords: function searchRecords() {
      var searchData = this.getSearchData();
      var filterData = this.getFilterData();
      if (this._isRecordsRequest) {
        if (typeof this._options.recordsRequest === 'function') {
          this.loadByFunction(this._options.recordsRequest);
        } else {
          this.load(this._options.recordsRequest.url, this._options.recordsRequest.method);
        }
      } else {
        coreuiTablePrivate.searchLocalRecords(this);
        this.refresh();
      }
      coreuiTablePrivate._trigger(this, 'filters_change', [filterData]);
      coreuiTablePrivate._trigger(this, 'search_change', [searchData]);
    },
    /**
     * Очистка поисковых данных
     */
    clearSearch: function clearSearch() {
      $.each(this._search, function (key, search) {
        search.setValue(null);
      });
      this.searchRecords();
    },
    /**
     * Очистка поисковых данных в фильтрах
     */
    clearFilters: function clearFilters() {
      $.each(this._filters, function (key, filter) {
        filter.setValue(null);
      });
      this.searchRecords();
    },
    /**
     * Получение записи по индексу
     * @param {string|number} index
     * @return {object|null}
     */
    getRecordByIndex: function getRecordByIndex(index) {
      if (['string', 'number'].indexOf(_typeof(index)) < 0 || index === '') {
        return null;
      }
      index = Number(index);
      if (index <= 0) {
        return null;
      }
      var record = null;
      $.each(this._records, function (key, recordItem) {
        if (recordItem.index === index) {
          record = {
            index: recordItem.index,
            data: $.extend(true, {}, recordItem.data),
            meta: recordItem.meta ? $.extend(true, {}, recordItem.meta) : null
          };
          return false;
        }
      });
      return record;
    },
    /**
     * Получение записи по id
     * @param {string} id
     * @return {object|null}
     */
    getRecordById: function getRecordById(id) {
      return this.getRecordByField(this._options.primaryKey, id);
    },
    /**
     * Получение записи по полю
     * @param {string}        field
     * @param {string|number} value
     * @return {object|null}
     */
    getRecordByField: function getRecordByField(field, value) {
      if (['string', 'number'].indexOf(_typeof(field)) < 0 || field === '') {
        return null;
      }
      var record = null;
      $.each(this._records, function (key, recordItem) {
        if (recordItem.data.hasOwnProperty(field) && recordItem.data[field] === value) {
          record = $.extend(true, {}, recordItem);
          return false;
        }
      });
      return record;
    },
    /**
     * Получение контрола по его id
     * @param {string} id
     * @return {object}
     */
    getControlById: function getControlById(id) {
      var result = null;
      $.each(this._controls, function (key, control) {
        if (control.hasOwnProperty('getId') && typeof control.getId === 'function' && control.getId() === id) {
          result = control;
          return false;
        }
      });
      return result;
    },
    /**
     * Получение контрола поиска по его id
     * @param {string} id
     * @return {object}
     */
    getSearchControlById: function getSearchControlById(id) {
      var result = null;
      $.each(this._search, function (key, search) {
        if (search.hasOwnProperty('getId') && typeof search.getId === 'function' && search.getId() === id) {
          result = search;
          return false;
        }
      });
      return result;
    },
    /**
     * Сортировка по полям
     * @param {Array} sorting
     */
    sortFields: function sortFields(sorting) {
      if (!Array.isArray(sorting)) {
        return;
      }
      var that = this;
      var columnsConverters = {};
      this._sort = [];
      $.each(sorting, function (key, sort) {
        if (!coreuiTableUtils.isObject(sort) || !sort.hasOwnProperty('field') || !sort.hasOwnProperty('order') || typeof sort.field !== 'string' || typeof sort.order !== 'string' || !sort.field || !sort.order) {
          return;
        }
        var columnSortable = false;
        $.each(that._columns, function (key, column) {
          var options = column.getOptions();
          if (options.hasOwnProperty('field') && options.hasOwnProperty('sortable') && typeof options.field === 'string' && options.field === sort.field && options.sortable) {
            columnSortable = true;
            if (column.hasOwnProperty('convertToString') && typeof column.convertToString === 'function') {
              columnsConverters[options.field] = column.convertToString;
            }
            return false;
          }
        });
        if (columnSortable) {
          that._sort.push({
            field: sort.field,
            order: sort.order
          });
        }
      });
      if (this._sort.length >= 0) {
        if (this._isRecordsRequest) {
          if (typeof this._options.recordsRequest === 'function') {
            this.loadByFunction(this._options.recordsRequest);
          } else {
            this.load(this._options.recordsRequest.url, this._options.recordsRequest.method);
          }
          coreuiTablePrivate.setColumnsSort(this, this._sort);
        } else {
          this._records = coreuiTablePrivate.sortRecordsByFields(this._records, this._sort, columnsConverters);
          this.refresh();
        }
      }
      coreuiTablePrivate._trigger(this, 'records_sort', [this]);
    },
    /**
     * Сортировка по умолчанию
     */
    sortDefault: function sortDefault() {
      this._sort = [];
      if (this._isRecordsRequest) {
        if (typeof this._options.recordsRequest === 'function') {
          this.loadByFunction(this._options.recordsRequest);
        } else {
          this.load(this._options.recordsRequest.url, this._options.recordsRequest.method);
        }
        coreuiTablePrivate.setColumnsSort(this);
      } else {
        this._records = coreuiTablePrivate.sortRecordsBySeq(this._records);
        this.refresh();
      }
      coreuiTablePrivate._trigger(this, 'records_sort', [this]);
    },
    /**
     * Удаление строки из таблицы по индексу
     * @param index
     */
    removeRecordByIndex: function removeRecordByIndex(index) {
      var recordKey = null;
      $.each(this._records, function (key, recordItem) {
        if (recordItem.index === index) {
          recordKey = key;
          return false;
        }
      });
      if (recordKey !== null && recordKey >= 0) {
        this._records.splice(recordKey, 1);
        var that = this;
        var tr = coreuiTableElements.getTrByIndex(this.getId(), index);
        if (tr.length >= 0) {
          tr.fadeOut('fast', function () {
            tr.remove();
            if (that._records.length === 0) {
              var tbody = coreuiTableElements.getTableTbody(that.getId());
              tbody.append(coreuiTableUtils.render(tpl['table/record/empty.html'], {
                columnsCount: that._countColumnsShow,
                lang: that.getLang()
              }));
            }
          });
        }
        this._recordsNumber--;
      }
    },
    /**
     * Добавление строки в таблицу после строки с индексом
     * @param {object} recordData
     * @param {number} index
     */
    addRecordAfterIndex: function addRecordAfterIndex(recordData, index) {
      var tr = coreuiTableElements.getTrByIndex(this.getId(), index);
      if (tr.length >= 0) {
        var record = coreuiTablePrivate.addRecord(this, recordData, index);
        if (record) {
          coreuiTableElements.getTrEmpty(this.getId()).remove();
          tr.after(coreuiTableRender.renderRecord(this, record));
          this._recordsNumber++;
        }
      }
    },
    /**
     * Добавление строки в таблицу перед строкой с индексом
     * @param {object} recordData
     * @param {number} index
     */
    addRecordBeforeIndex: function addRecordBeforeIndex(recordData, index) {
      var tr = coreuiTableElements.getTrByIndex(this.getId(), index);
      if (tr.length >= 0) {
        var record = coreuiTablePrivate.addRecordBefore(this, recordData, index);
        if (record) {
          coreuiTableElements.getTrEmpty(this.getId()).remove();
          tr.before(coreuiTableRender.renderRecord(this, record));
          this._recordsNumber++;
        }
      }
    },
    /**
     * Добавление строки в начало таблицы
     * @param {object} recordData
     */
    addRecordFirst: function addRecordFirst(recordData) {
      var tbody = coreuiTableElements.getTableTbody(this.getId());
      if (tbody.length >= 0) {
        var record = coreuiTablePrivate.addRecord(this, recordData, 0);
        if (record) {
          coreuiTableElements.getTrEmpty(this.getId()).remove();
          tbody.prepend(coreuiTableRender.renderRecord(this, record));
          this._recordsNumber++;
        }
      }
    },
    /**
     * Добавление строки в конец таблицы
     * @param {object} recordData
     */
    addRecordLast: function addRecordLast(recordData) {
      var tbody = coreuiTableElements.getTableTbody(this.getId());
      if (tbody.length >= 0) {
        var record = coreuiTablePrivate.addRecord(this, recordData);
        if (record) {
          coreuiTableElements.getTrEmpty(this.getId()).remove();
          tbody.append(coreuiTableRender.renderRecord(this, record));
          this._recordsNumber++;
        }
      }
    },
    /**
     * Показ указанных записей в таблице
     * @param {Array}  records
     * @param {number} total
     */
    setRecords: function setRecords(records, total) {
      if (!Array.isArray(records)) {
        return;
      }
      this._recordsTotal = coreuiTableUtils.isNumeric(total) ? parseInt(total) : records.length;
      coreuiTablePrivate.setRecords(this, records);
      if (records.length > 0) {
        this._recordsNumber = this._page === 1 ? 1 : (this._page - 1) * this._recordsPerPage + 1;
      }
      var recordsElements = coreuiTableRender.renderRecords(this, this._records);
      var tableBody = coreuiTableElements.getTableTbody(this.getId());
      tableBody.html('');
      $.each(recordsElements, function (key, recordElement) {
        tableBody.append(recordElement);
      });
      coreuiTablePrivate._trigger(this, 'records_show', [this]);
    },
    /**
     * Получение количества строк
     * @return {number}
     */
    getRecordsCount: function getRecordsCount() {
      var count = 0;
      if (this._isRecordsRequest) {
        count = this._recordsTotal;
      } else {
        this._records.map(function (record) {
          if (record.show) {
            count++;
          }
        });
      }
      return count;
    },
    /**
     * Раскрытие / скрытие дополнительных данных строки
     * @param {number}                                   recordIndex
     * @param {HTMLElement|jQuery|string|Array|function} content
     * @param {boolean}                                  isRebuild - true default
     */
    expandRecordContent: function expandRecordContent(recordIndex, content, isRebuild) {
      var recordElement = coreuiTableElements.getTrByIndex(this.getId(), recordIndex);
      var recordExpanded = coreuiTableElements.getExpandRow(recordElement);
      if (recordElement.hasClass('record-expanded')) {
        if (recordExpanded) {
          if (isRebuild === undefined || isRebuild) {
            coreuiTableElements.removeExpandRow(recordExpanded);
          } else {
            coreuiTableElements.hideExpandRow(recordExpanded);
          }
        }
        recordElement.removeClass('record-expanded');
        coreuiTablePrivate._trigger(this, 'record_expand_hide', [recordIndex]);
      } else {
        if (recordExpanded) {
          coreuiTableElements.showExpandRow(recordExpanded);
          recordElement.addClass('record-expanded');
          coreuiTablePrivate._trigger(this, 'record_expand_show', [recordIndex]);
        } else {
          var _recordIndex = recordElement.data('record-index');
          if (typeof content === 'function') {
            var callbackResult = content();
            if (callbackResult instanceof Promise) {
              var that = this;
              callbackResult.then(function (result) {
                coreuiTableElements.addExpandRow(that, recordElement, result);
                coreuiTablePrivate._trigger(that, 'record_expand_show', [_recordIndex]);
              })["catch"](function () {
                coreuiTableElements.addExpandRow(that, recordElement, '');
                coreuiTablePrivate._trigger(that, 'record_expand_show', [_recordIndex]);
              });
            } else {
              coreuiTableElements.addExpandRow(this, recordElement, callbackResult);
              coreuiTablePrivate._trigger(this, 'record_expand_show', [_recordIndex]);
            }
          } else {
            coreuiTableElements.addExpandRow(this, recordElement, content);
            coreuiTablePrivate._trigger(this, 'record_expand_show', [_recordIndex]);
          }
        }
      }
    },
    /**
     * Раскрытие / скрытие дополнительных данных строки
     * @param {number}  recordIndex
     * @param {string}  url
     * @param {boolean} isRebuild
     */
    expandRecordUrl: function expandRecordUrl(recordIndex, url, isRebuild) {
      var that = this;
      this.expandRecordContent(recordIndex, function () {
        that.lock();
        return new Promise(function (resolve, reject) {
          $.ajax({
            method: 'get',
            url: url,
            success: function success(response, textStatus, xhr) {
              var result = response;
              if (typeof response === 'string') {
                if (String(xhr.getResponseHeader('Content-Type')).indexOf('application/json') === 0) {
                  try {
                    result = JSON.parse(response);
                  } catch (e) {
                    console.warn(e);
                  }
                }
              }
              resolve(result);
            },
            error: function error(xhr, textStatus, errorThrown) {
              reject(xhr, textStatus, errorThrown);
            },
            complete: function complete(xhr, textStatus) {
              that.unlock();
            }
          });
        });
      }, isRebuild);
    }
  };

  var coreuiTable = {
    columns: {},
    controls: {},
    filters: {},
    search: {},
    lang: {},
    _instances: {},
    _settings: {
      lang: 'en'
    },
    /**
     * @param {object} options
     * @returns {object}
     */
    create: function create(options) {
      if (!options.hasOwnProperty('lang') || typeof options.lang !== 'string') {
        options.lang = this.getSetting('lang');
      }
      var langItems = this.lang.hasOwnProperty(options.lang) ? this.lang[options.lang] : {};
      options.langItems = options.hasOwnProperty('langItems') && coreuiTableUtils.isObject(options.langItems) ? $.extend(true, {}, langItems, options.langItems) : langItems;
      var instance = $.extend(true, {}, coreuiTableInstance);
      instance._init(this, options instanceof Object ? options : {});
      var tableId = instance.getId();
      this._instances[tableId] = instance;
      return instance;
    },
    /**
     * @param {string} id
     * @returns {object|null}
     */
    get: function get(id) {
      if (!this._instances.hasOwnProperty(id)) {
        return null;
      }
      if (!$('#coreui-table-' + id)[0]) {
        delete this._instances[id];
        return null;
      }
      return this._instances[id];
    },
    /**
     * Установка настроек
     * @param {object} settings
     */
    setSettings: function setSettings(settings) {
      this._settings = $.extend(true, {}, this._settings, settings);
    },
    /**
     * Получение значения настройки
     * @param {string} name
     */
    getSetting: function getSetting(name) {
      var value = null;
      if (this._settings.hasOwnProperty(name)) {
        value = this._settings[name];
      }
      return value;
    }
  };

  var langEn = {
    "emptyRecords": "No records",
    "loading": "Loading...",
    "total": "Total",
    "all": "All",
    "complete": "Complete",
    "search": "Search",
    "searchAction": "Search",
    "clear": "Clear",
    "monthNames": ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
    "monthNamesShort": ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
    "dayNames": ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
    "dayNamesMin": ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
  };

  var langRu = {
    "emptyRecords": "Нет записей",
    "loading": "Загрузка...",
    "total": "Всего",
    "all": "Все",
    "complete": "Применить",
    "search": "Поиск",
    "searchAction": "Искать",
    "clear": "Очистить",
    "monthNames": ['Январь', 'Февраль', 'Март', 'Апрель', 'Май', 'Июнь', 'Июль', 'Август', 'Сентябрь', 'Октябрь', 'Ноябрь', 'Декабрь'],
    "monthNamesShort": ['Янв', 'Фев', 'Мар', 'Апр', 'Май', 'Июн', 'Июл', 'Авг', 'Сен', 'Окт', 'Ноя', 'Дек'],
    "dayNames": ['воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота'],
    "dayNamesMin": ['Вс', 'Пн', 'Вт', 'Ср', 'Чт', 'Пт', 'Сб']
  };

  var Control = /*#__PURE__*/function () {
    /**
     * Инициализация
     * @param {object} table
     * @param {object} options
     */
    function Control(table, options) {
      _classCallCheck(this, Control);
      _defineProperty(this, "_id", null);
      _defineProperty(this, "_table", null);
      _defineProperty(this, "_options", {
        type: '',
        id: ''
      });
      this._table = table;
      this._options = $.extend(true, this._options, options);
      this._id = this._options.hasOwnProperty('id') && typeof this._options.id === 'string' && this._options.id ? this._options.id : coreuiTableUtils.hashCode();
    }

    /**
     * Получение ID элемента управления
     * @returns {string}
     */
    return _createClass(Control, [{
      key: "getId",
      value: function getId() {
        return this._id;
      }

      /**
       * Получение параметров
       * @returns {object}
       */
    }, {
      key: "getOptions",
      value: function getOptions() {
        return $.extend(true, {}, this._options);
      }

      /**
       * Формирование контента для размещения на странице
       * @returns {*}
       */
    }, {
      key: "render",
      value: function render() {
        return '';
      }
    }]);
  }();

  function _callSuper$S(_this, derived, args) {
    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      } catch (e) {
        return false;
      }
    }
    derived = _getPrototypeOf(derived);
    return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));
  }
  var ControlLink = /*#__PURE__*/function (_Control) {
    /**
     * Инициализация
     * @param {coreuiTableInstance} table
     * @param {Object}              options
     */
    function ControlLink(table, options) {
      _classCallCheck(this, ControlLink);
      options = $.extend(true, {
        id: null,
        type: 'link',
        url: null,
        content: null,
        onClick: null,
        attr: null
      }, options);
      return _callSuper$S(this, ControlLink, [table, options]);
    }

    /**
     * Формирование контента для размещения на странице
     * @returns {jQuery}
     */
    _inherits(ControlLink, _Control);
    return _createClass(ControlLink, [{
      key: "render",
      value: function render() {
        var that = this;
        var attributes = [];
        if (_typeof(this._options.attr) === 'object') {
          $.each(this._options.attr, function (name, value) {
            if (['string', 'number'].indexOf(_typeof(value)) >= 0) {
              attributes.push(name + '="' + value + '"');
            }
          });
        }
        var link = $(coreuiTableUtils.render(tpl['controls/link.html'], {
          url: this._options.url,
          content: this._options.content,
          attr: attributes.length > 0 ? ' ' + attributes.join(' ') : ''
        }));
        if (typeof this._options.onClick === 'function' || typeof this._options.onClick === 'string') {
          link.click(function (event) {
            if (typeof that._options.onClick === 'function') {
              return that._options.onClick(event, that._table);
            } else if (typeof that._options.onClick === 'string') {
              var func = new Function('event', 'table', 'control', that._options.onClick);
              func(event, that._table, that);
            }
          });
        }
        return link;
      }
    }]);
  }(Control);

  function _callSuper$R(_this, derived, args) {
    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      } catch (e) {
        return false;
      }
    }
    derived = _getPrototypeOf(derived);
    return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));
  }
  var ControlButton = /*#__PURE__*/function (_Control) {
    /**
     * Инициализация
     * @param {coreuiTableInstance} table
     * @param {Object}              options
     */
    function ControlButton(table, options) {
      _classCallCheck(this, ControlButton);
      options = $.extend(true, {
        id: null,
        type: 'button',
        content: null,
        onClick: null,
        attr: {
          "class": 'btn btn-secondary'
        }
      }, options);
      return _callSuper$R(this, ControlButton, [table, options]);
    }

    /**
     * Формирование контента для размещения на странице
     * @returns {jQuery}
     */
    _inherits(ControlButton, _Control);
    return _createClass(ControlButton, [{
      key: "render",
      value: function render() {
        var attributes = [];
        if (coreuiTableUtils.isObject(this._options.attr)) {
          $.each(this._options.attr, function (name, value) {
            if (['string', 'number'].indexOf(_typeof(value)) >= 0) {
              attributes.push(name + '="' + value + '"');
            }
          });
        }
        var btn = $(coreuiTableUtils.render(tpl['controls/button.html'], {
          content: this._options.content,
          attr: attributes.length > 0 ? ' ' + attributes.join(' ') : ''
        }));
        if (typeof this._options.onClick === 'function' || typeof this._options.onClick === 'string') {
          var that = this;
          btn.click(function (event) {
            if (typeof that._options.onClick === 'function') {
              that._options.onClick(event, that._table, that);
            } else if (typeof that._options.onClick === 'string') {
              var func = new Function('event', 'table', 'control', that._options.onClick);
              func(event, that._table, that);
            }
          });
        }
        return btn;
      }
    }]);
  }(Control);

  function _callSuper$Q(_this, derived, args) {
    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      } catch (e) {
        return false;
      }
    }
    derived = _getPrototypeOf(derived);
    return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));
  }
  var ControlDropdown = /*#__PURE__*/function (_Control) {
    /**
     * Инициализация
     * @param {coreuiTableInstance} table
     * @param {Object}              options
     */
    function ControlDropdown(table, options) {
      _classCallCheck(this, ControlDropdown);
      options = $.extend(true, {
        id: null,
        type: 'dropdown',
        content: null,
        items: null,
        attr: {
          "class": 'btn btn-primary'
        }
      }, options);
      return _callSuper$Q(this, ControlDropdown, [table, options]);
    }

    /**
     * Формирование контента для размещения на странице
     * @returns {string}
     */
    _inherits(ControlDropdown, _Control);
    return _createClass(ControlDropdown, [{
      key: "render",
      value: function render() {
        var options = this.getOptions();
        var table = this._table;
        var that = this;
        var items = [];
        var attributes = [];
        if (Array.isArray(options.items)) {
          options.items.map(function (item) {
            if (coreuiTableUtils.isObject(item) && typeof item.type === 'string') {
              if (item.type === 'link') {
                if (item.hasOwnProperty('link') && item.hasOwnProperty('content') && typeof item.url === 'string' && typeof item.content === 'string') {
                  var link = coreuiTableUtils.render(tpl['controls/dropdown/link.html'], {
                    url: item.url,
                    content: item.content
                  });
                  items.push(link);
                }
              } else if (item.type === 'button') {
                if (item.hasOwnProperty('content') && item.hasOwnProperty('onClick') && typeof item.content === 'string' && ['string', 'function'].indexOf(_typeof(item.onClick)) >= 0) {
                  var button = $(coreuiTableUtils.render(tpl['controls/dropdown/button.html'], {
                    url: item.url,
                    content: item.content
                  }));
                  button.click(function (event) {
                    if (typeof item.onClick === 'function') {
                      item.onClick(event, table, that);
                    } else if (typeof item.onClick === 'string') {
                      var func = new Function('event', 'table', 'control', item.onClick);
                      func(event, table, that);
                    }
                  });
                  items.push(button);
                }
              } else if (item.type === 'divider') {
                items.push(tpl['controls/dropdown/divider.html']);
              }
            }
          });
        }
        if (coreuiTableUtils.isObject(options.attr)) {
          if (options.attr.hasOwnProperty('class') && ['string', 'number'].indexOf(_typeof(options.attr["class"])) >= 0) {
            options.attr["class"] += ' dropdown-toggle';
          }
          if (options.attr.hasOwnProperty('type')) {
            delete options.attr.type;
          }
          if (options.attr.hasOwnProperty('id')) {
            delete options.attr.id;
          }
          if (options.attr.hasOwnProperty('data-bs-toggle')) {
            delete options.attr['data-bs-toggle'];
          }
          $.each(options.attr, function (name, value) {
            attributes.push(name + '="' + value + '"');
          });
        }
        var dropdown = $(coreuiTableUtils.render(tpl['controls/dropdown.html'], {
          content: options.content,
          position: options.hasOwnProperty('position') && typeof options.position === 'string' ? options.position : 'end',
          attr: attributes.length > 0 ? ' ' + attributes.join(' ') : ''
        }));
        if (items.length > 0) {
          var menu = dropdown.find('.dropdown-menu');
          items.map(function (item) {
            menu.append(item);
          });
        }
        return dropdown;
      }
    }]);
  }(Control);

  function _callSuper$P(_this, derived, args) {
    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      } catch (e) {
        return false;
      }
    }
    derived = _getPrototypeOf(derived);
    return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));
  }
  var ControlButtonGroup = /*#__PURE__*/function (_Control) {
    /**
     * Инициализация
     * @param {coreuiTableInstance} table
     * @param {Object}              options
     */
    function ControlButtonGroup(table, options) {
      var _this2;
      _classCallCheck(this, ControlButtonGroup);
      options = $.extend(true, {
        id: null,
        type: 'button_group',
        buttons: null
      }, options);
      _this2 = _callSuper$P(this, ControlButtonGroup, [table, options]);
      _defineProperty(_this2, "_link", {
        attr: {
          "class": 'btn btn-secondary'
        }
      });
      _defineProperty(_this2, "_button", {
        attr: {
          "class": 'btn btn-secondary'
        }
      });
      _defineProperty(_this2, "_dropdown", {
        attr: {
          "class": 'btn btn-secondary'
        }
      });
      return _this2;
    }

    /**
     * Формирование контента для размещения на странице
     * @returns {string}
     */
    _inherits(ControlButtonGroup, _Control);
    return _createClass(ControlButtonGroup, [{
      key: "render",
      value: function render() {
        var options = this.getOptions();
        var buttons = [];
        var that = this;
        if (Array.isArray(options.buttons)) {
          /**
           * Создание ссылки
           * @param {Object} button
           */
          var makeLink = function makeLink(button) {
            var result = null;
            if (button.hasOwnProperty('link') && button.hasOwnProperty('content') && typeof button.link === 'string' && typeof button.content === 'string') {
              var attributes = [];
              if (!coreuiTableUtils.isObject(button.attr)) {
                button.attr = {};
              }
              if (button.attr.hasOwnProperty('href')) {
                delete button.attr.href;
              }
              if (!button.attr.hasOwnProperty('class')) {
                button.attr["class"] = that._link.attr["class"];
              }
              $.each(button.attr, function (name, value) {
                if (['string', 'number'].indexOf(_typeof(value)) >= 0) {
                  attributes.push(name + '="' + value + '"');
                }
              });
              result = coreuiTableUtils.render(tpl['controls/button_group/link.html'], {
                url: button.url,
                attr: attributes,
                content: button.content
              });
            }
            return result;
          };
          /**
           * Создание кнопки
           * @param {Object} button
           */
          var makeButton = function makeButton(button) {
            var result = null;
            if (button.hasOwnProperty('content') && button.hasOwnProperty('onClick') && typeof button.content === 'string' && ['string', 'function'].indexOf(_typeof(button.onClick)) >= 0) {
              var attributes = [];
              if (!coreuiTableUtils.isObject(button.attr)) {
                button.attr = {};
              }
              if (button.attr.hasOwnProperty('type')) {
                delete button.attr.type;
              }
              if (!button.attr.hasOwnProperty('class')) {
                button.attr["class"] = that._button.attr["class"];
              }
              $.each(button.attr, function (name, value) {
                if (['string', 'number'].indexOf(_typeof(value)) >= 0) {
                  attributes.push(name + '="' + value + '"');
                }
              });
              result = $(coreuiTableUtils.render(tpl['controls/button_group/button.html'], {
                content: button.content,
                attr: attributes
              }));
              if (button.hasOwnProperty('content') && button.hasOwnProperty('onClick') && ['string', 'function'].indexOf(_typeof(button.onClick)) >= 0 && typeof button.content === 'string') {
                result.click(function (event) {
                  if (typeof button.onClick === 'function') {
                    button.onClick(event, that._table, that);
                  } else if (typeof button.onClick === 'string') {
                    var func = new Function('event', 'table', 'control', button.onClick);
                    func(event, that._table, that);
                  }
                });
              }
            }
            return result;
          };
          /**
           * Создание выпадающего меню
           * @param {Object} button
           */
          var makeDropdown = function makeDropdown(button) {
            var result = null;
            if (Array.isArray(button.items)) {
              var attributes = [];
              var items = [];
              button.items.map(function (item) {
                if (coreuiTableUtils.isObject(item) && typeof item.type === 'string') {
                  if (item.type === 'link') {
                    if (item.hasOwnProperty('link') && item.hasOwnProperty('content') && typeof item.url === 'string' && typeof item.content === 'string' && item.url) {
                      items.push(coreuiTableUtils.render(tpl['controls/button_group/dropdown/link.html'], {
                        url: item.url,
                        content: item.content
                      }));
                    }
                  } else if (item.type === 'button') {
                    if (item.hasOwnProperty('content') && item.hasOwnProperty('onClick') && typeof item.content === 'string' && ['string', 'function'].indexOf(_typeof(item.onClick)) >= 0) {
                      var btn = $(coreuiTableUtils.render(tpl['controls/button_group/dropdown/button.html'], {
                        content: item.content
                      }));
                      btn.click(function (event) {
                        if (typeof item.onClick === 'function') {
                          item.onClick(event, that._table, that);
                        } else if (typeof item.onClick === 'string') {
                          var func = new Function('event', 'table', 'control', item.onClick);
                          func(event, that._table, that);
                        }
                      });
                      items.push(btn);
                    }
                  } else if (item.type === 'divider') {
                    items.push(tpl['controls/button_group/dropdown/divider.html']);
                  }
                }
              });
              if (!coreuiTableUtils.isObject(button.attr)) {
                button.attr = {};
              }
              if (button.attr.hasOwnProperty('type')) {
                delete button.attr.type;
              }
              if (!button.attr.hasOwnProperty('class')) {
                button.attr["class"] = that._dropdown.attr["class"];
              }
              if (button.attr.hasOwnProperty('class') && ['string', 'number'].indexOf(_typeof(button.attr["class"])) >= 0) {
                button.attr["class"] += ' dropdown-toggle';
              }
              $.each(button.attr, function (name, value) {
                if (['string', 'number'].indexOf(_typeof(value)) >= 0) {
                  attributes.push(name + '="' + value + '"');
                }
              });
              result = $(coreuiTableUtils.render(tpl['controls/button_group/link.html'], {
                attr: attributes,
                position: button.hasOwnProperty('position') && typeof button.position === 'string' ? button.position : 'end',
                content: button.content
              }));
              if (items.length > 0) {
                var menu = result.find('.dropdown-menu');
                items.map(function (item) {
                  menu.append(item);
                });
              }
            }
            return result;
          };
          options.buttons.map(function (key, button) {
            if (coreuiTableUtils.isObject(button) && typeof button.type === 'string') {
              if (button.type === 'link') {
                var linkElement = makeLink(button);
                if (linkElement) {
                  buttons.push(linkElement);
                }
              } else if (button.type === 'button') {
                var buttonElement = makeButton(button);
                if (buttonElement) {
                  buttons.push(buttonElement);
                }
              } else if (button.type === 'dropdown') {
                var dropdownElement = makeDropdown(button);
                if (dropdownElement) {
                  buttons.push(dropdownElement);
                }
              }
            }
          });
        }
        var btnGroup = $(tpl['controls/button_group.html']);
        buttons.map(function (button) {
          btnGroup.append(button);
        });
        return btnGroup;
      }
    }]);
  }(Control);

  function _callSuper$O(_this, derived, args) {
    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      } catch (e) {
        return false;
      }
    }
    derived = _getPrototypeOf(derived);
    return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));
  }
  var ControlCustom = /*#__PURE__*/function (_Control) {
    /**
     * Инициализация
     * @param {coreuiTableInstance} table
     * @param {Object}              options
     */
    function ControlCustom(table, options) {
      _classCallCheck(this, ControlCustom);
      options = $.extend(true, {
        id: null,
        type: 'custom',
        content: null
      }, options);
      return _callSuper$O(this, ControlCustom, [table, options]);
    }

    /**
     * Формирование контента для размещения на странице
     * @returns {string|HTMLElement|jQuery}
     */
    _inherits(ControlCustom, _Control);
    return _createClass(ControlCustom, [{
      key: "render",
      value: function render() {
        if (typeof this._options.content === 'string') {
          return this._options.content;
        } else if (typeof this._options.content === 'function') {
          return this._options.content();
        }
      }
    }]);
  }(Control);

  function _callSuper$N(_this, derived, args) {
    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      } catch (e) {
        return false;
      }
    }
    derived = _getPrototypeOf(derived);
    return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));
  }
  var ControlPageSize = /*#__PURE__*/function (_Control) {
    /**
     * Инициализация
     * @param {coreuiTableInstance} table
     * @param {Object}              options
     */
    function ControlPageSize(table, options) {
      var _this2;
      _classCallCheck(this, ControlPageSize);
      var optionsOriginal = {
        id: null,
        type: 'page_size',
        attr: {
          "class": 'form-select'
        },
        list: [25, 50, 100, 1000]
      };
      if (options.hasOwnProperty('attr') && coreuiTableUtils.isObject(options.attr)) {
        options.attr = coreuiTableUtils.mergeAttr(optionsOriginal.attr, options.attr);
      }
      options = $.extend(true, optionsOriginal, options);
      _this2 = _callSuper$N(this, ControlPageSize, [table, options]);
      if (!Array.isArray(_this2._options.list)) {
        _this2._options.list = [];
      }
      if (_this2._options.list.indexOf(_this2._table._recordsPerPage) < 0) {
        _this2._options.list.unshift(_this2._table._recordsPerPage);
      }
      return _this2;
    }

    /**
     * Формирование контента для размещения на странице
     * @returns {string}
     */
    _inherits(ControlPageSize, _Control);
    return _createClass(ControlPageSize, [{
      key: "render",
      value: function render() {
        var attributes = [];
        var table = this._table;
        if (coreuiTableUtils.isObject(this._options.attr)) {
          $.each(this._options.attr, function (name, value) {
            if (['string', 'number'].indexOf(_typeof(value)) >= 0) {
              attributes.push(name + '="' + value + '"');
            }
          });
        }
        var control = coreuiTableUtils.render(tpl['controls/page-size.html'], {
          recordsPerPageList: this._options.list,
          recordsPerPage: table._recordsPerPage,
          attr: attributes.length > 0 ? ' ' + attributes.join(' ') : '',
          lang: table.getLang()
        });
        var selectPageSize = $('select', control);
        selectPageSize.change(function () {
          table._page = 1;
          table.setPageSize(Number(selectPageSize.val()));
          table.reload();
        });
        table.on('page_size_update', function () {
          selectPageSize.val(table._recordsPerPage);
        });
        return control;
      }
    }]);
  }(Control);

  function _callSuper$M(_this, derived, args) {
    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      } catch (e) {
        return false;
      }
    }
    derived = _getPrototypeOf(derived);
    return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));
  }
  var ControlPageJump = /*#__PURE__*/function (_Control) {
    /**
     * Инициализация
     * @param {coreuiTableInstance} table
     * @param {Object}              options
     */
    function ControlPageJump(table, options) {
      _classCallCheck(this, ControlPageJump);
      var optionsOriginal = {
        id: null,
        type: 'page_jump',
        attr: {
          "class": 'input-group'
        }
      };
      if (options.hasOwnProperty('attr') && coreuiTableUtils.isObject(options.attr)) {
        options.attr = coreuiTableUtils.mergeAttr(optionsOriginal.attr, options.attr);
      }
      options = $.extend(true, optionsOriginal, options);
      return _callSuper$M(this, ControlPageJump, [table, options]);
    }

    /**
     * Формирование контента для размещения на странице
     * @returns {jQuery}
     */
    _inherits(ControlPageJump, _Control);
    return _createClass(ControlPageJump, [{
      key: "render",
      value: function render() {
        var attributes = [];
        var table = this._table;
        if (coreuiTableUtils.isObject(this._options.attr)) {
          $.each(this._options.attr, function (name, value) {
            if (['string', 'number'].indexOf(_typeof(value)) >= 0) {
              attributes.push(name + '="' + value + '"');
            }
          });
        }
        var control = $(coreuiTableUtils.render(tpl['controls/page-jump.html'], {
          attr: attributes.length > 0 ? ' ' + attributes.join(' ') : ''
        }));
        var input = $('input', control);
        var button = $('button', control);
        button.click(function () {
          table.goPage(input.val());
        });
        input.keyup(function (event) {
          if (event.key === 'Enter' || event.keyCode === 13) {
            table.goPage(input.val());
          }
        });
        return control;
      }
    }]);
  }(Control);

  var controlPages = {
    /**
     * Формирование контрола
     * @param table
     * @param options
     * @return {jQuery}
     */
    render: function render(table, options) {
      var attributes = [];
      var showPrev = !!options.show.prev;
      var showNext = !!options.show.next;
      var showDividerStart = false;
      var showDividerEnd = false;
      var showPageFirst = false;
      var showPageLast = false;
      var pages = [];
      var pagesTotal = table._recordsTotal > 0 && table._recordsPerPage > 0 ? Math.ceil(table._recordsTotal / table._recordsPerPage) : 1;
      if (coreuiTableUtils.isObject(options.attr)) {
        $.each(options.attr, function (name, value) {
          if (['string', 'number'].indexOf(_typeof(value)) >= 0) {
            attributes.push(name + '="' + value + '"');
          }
        });
      }
      if (table._recordsTotal > 0 && options.count > 0 && coreuiTableUtils.isNumeric(options.count)) {
        var count = Math.min(options.count, pagesTotal);
        var countHalf = Math.max(0, Math.floor(count / 2));
        if (count % 2 === 0) {
          countHalf -= 1;
        }
        var start = table._page > 1 ? Math.max(1, table._page - countHalf) : table._page;
        if (start + count > pagesTotal) {
          start = pagesTotal - (count - 1);
        }
        for (var i = 0; i < count; i++) {
          pages.push(start + i);
        }
      } else {
        if (options.count > 0 && table._page > 1) {
          pages.push(table._page);
        }
      }
      if (pages.length > 0) {
        if (pages[0] >= 2) {
          showPageFirst = true;
        }
        if (pages[0] >= 3) {
          showDividerStart = true;
        }
        if (pages[pages.length - 1] + 1 < pagesTotal) {
          showDividerEnd = true;
        }
        if (pages[pages.length - 1] < pagesTotal) {
          showPageLast = true;
        }
      }
      var control = $(coreuiTableUtils.render(tpl['controls/pages.html'], {
        currentPage: table._page,
        isActivePrev: table._page > 1,
        isActiveNext: table._page < pagesTotal,
        pagesTotal: pagesTotal,
        showPrev: showPrev,
        showPageFirst: showPageFirst,
        showDividerStart: showDividerStart,
        pages: pages,
        showDividerEnd: showDividerEnd,
        showPageLast: showPageLast,
        showNext: showNext,
        attr: attributes.length > 0 ? ' ' + attributes.join(' ') : '',
        lang: table.getLang()
      }));
      var btnPrev = control.find('.coreui-table__page_prev');
      if (btnPrev[0]) {
        if (table._page <= 1) {
          btnPrev.addClass('disabled');
        } else {
          btnPrev.click(function () {
            if (table._page > 1) {
              table.prevPage();
            }
          });
        }
      }
      var btnNext = control.find('.coreui-table__page_next');
      if (btnNext[0]) {
        btnNext.click(function () {
          table.nextPage();
        });
      }
      var btnPages = control.find('.coreui-table__page');
      if (btnPages[0]) {
        btnPages.click(function () {
          var page = Number($.trim($(this).text()));
          if (page > 0) {
            table.goPage(page);
          }
        });
      }
      return control;
    }
  };

  function _callSuper$L(_this, derived, args) {
    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      } catch (e) {
        return false;
      }
    }
    derived = _getPrototypeOf(derived);
    return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));
  }
  var ControlPages = /*#__PURE__*/function (_Control) {
    /**
     * Инициализация
     * @param {coreuiTableInstance} table
     * @param {Object}              options
     */
    function ControlPages(table, options) {
      var _this2;
      _classCallCheck(this, ControlPages);
      var optionsOriginal = {
        show: {
          prev: true,
          next: true
        },
        count: 3,
        attr: {
          "class": 'pagination mb-0'
        }
      };
      if (options.hasOwnProperty('attr') && coreuiTableUtils.isObject(options.attr)) {
        options.attr = coreuiTableUtils.mergeAttr(optionsOriginal.attr, options.attr);
      }
      options = $.extend(true, optionsOriginal, options);
      _this2 = _callSuper$L(this, ControlPages, [table, options]);
      _defineProperty(_this2, "_control", null);
      return _this2;
    }

    /**
     * Формирование контента для размещения на странице
     * @returns {jQuery}
     */
    _inherits(ControlPages, _Control);
    return _createClass(ControlPages, [{
      key: "render",
      value: function render() {
        var table = this._table;
        var options = this._options;
        var control = controlPages.render(table, options);
        table.on('records_show', function () {
          var controlUpdate = controlPages.render(table, options);
          control.replaceWith(controlUpdate);
          control = controlUpdate;
        });
        this._control = control;
        return control;
      }
    }]);
  }(Control);

  function _callSuper$K(_this, derived, args) {
    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      } catch (e) {
        return false;
      }
    }
    derived = _getPrototypeOf(derived);
    return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));
  }
  var ControlTotal = /*#__PURE__*/function (_Control) {
    /**
     * Инициализация
     * @param {coreuiTableInstance} table
     * @param {Object}              options
     */
    function ControlTotal(table, options) {
      _classCallCheck(this, ControlTotal);
      var optionsOriginal = {
        type: 'total',
        attr: {
          "class": 'px-1'
        }
      };
      if (options.hasOwnProperty('attr') && coreuiTableUtils.isObject(options.attr)) {
        options.attr = coreuiTableUtils.mergeAttr(optionsOriginal.attr, options.attr);
      }
      options = $.extend(true, optionsOriginal, options);
      return _callSuper$K(this, ControlTotal, [table, options]);
    }

    /**
     * Формирование контента для размещения на странице
     * @returns {string}
     */
    _inherits(ControlTotal, _Control);
    return _createClass(ControlTotal, [{
      key: "render",
      value: function render() {
        var attributes = [];
        var table = this._table;
        if (coreuiTableUtils.isObject(this._options.attr)) {
          $.each(this._options.attr, function (name, value) {
            if (['string', 'number'].indexOf(_typeof(value)) >= 0) {
              attributes.push(name + '="' + value + '"');
            }
          });
        }
        var control = $(coreuiTableUtils.render(tpl['controls/total.html'], {
          recordsTotal: table._recordsTotal,
          attr: attributes.length > 0 ? ' ' + attributes.join(' ') : '',
          lang: table.getLang()
        }));
        table.on('records_show', function () {
          control.find('.coreui-table__count-total').text(table._recordsTotal);
        });
        return control;
      }
    }]);
  }(Control);

  function _callSuper$J(_this, derived, args) {
    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      } catch (e) {
        return false;
      }
    }
    derived = _getPrototypeOf(derived);
    return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));
  }
  var ControlSearch = /*#__PURE__*/function (_Control) {
    /**
     * Инициализация
     * @param {coreuiTableInstance} table
     * @param {Object}              options
     */
    function ControlSearch(table, options) {
      var _this2;
      _classCallCheck(this, ControlSearch);
      options = $.extend(true, {
        btn: {
          attr: {
            "class": 'btn btn-outline-secondary'
          },
          content: null
        },
        btnClear: {
          content: "<i class=\"bi bi-x text-danger\"></i>",
          attr: {
            "class": 'btn btn-outline-secondary'
          }
        },
        btnComplete: {
          attr: {
            "class": 'btn btn-primary'
          },
          content: null
        }
      }, options);
      _this2 = _callSuper$J(this, ControlSearch, [table, options]);
      if (!coreuiTableUtils.isObject(_this2._options.btn)) {
        _this2._options.btn = {};
      }
      if (!_this2._options.btn.hasOwnProperty('content') || typeof _this2._options.btn.content !== 'string') {
        _this2._options.btn.content = '<i class="bi bi-search"></i> ' + table.getLang().search;
      }
      if (!coreuiTableUtils.isObject(_this2._options.btnClear)) {
        _this2._options.btnClear = {};
      }
      if (!_this2._options.btnClear.hasOwnProperty('content') || typeof _this2._options.btnClear.content !== 'string') {
        _this2._options.btnClear.content = table.getLang().clear;
      }
      if (!coreuiTableUtils.isObject(_this2._options.btnComplete)) {
        _this2._options.btnComplete = {};
      }
      if (!_this2._options.btnComplete.hasOwnProperty('content') || typeof _this2._options.btnComplete.content !== 'string') {
        _this2._options.btnComplete.content = table.getLang().searchAction;
      }
      return _this2;
    }

    /**
     * Формирование контента для размещения на странице
     * @returns {jQuery}
     */
    _inherits(ControlSearch, _Control);
    return _createClass(ControlSearch, [{
      key: "render",
      value: function render() {
        var btnAttr = [];
        var btnContent = '';
        var btnClear = '';
        var that = this;
        var table = this._table;
        if (!coreuiTableUtils.isObject(this._options.btn)) {
          this._options.btn = {};
        }
        if (!coreuiTableUtils.isObject(this._options.btn.attr)) {
          this._options.btn.attr = {};
        }
        if (!this._options.btn.attr.hasOwnProperty('class') || typeof this._options.btn.attr["class"] !== 'string') {
          this._options.btn.attr["class"] = 'btn-search-toggle';
        } else {
          this._options.btn.attr["class"] += ' btn-search-toggle';
        }
        $.each(this._options.btn.attr, function (name, value) {
          btnAttr.push(name + '="' + value + '"');
        });
        if (typeof this._options.btn.content === 'string') {
          btnContent = this._options.btn.content;
        }
        if (this._table.getSearchData().length > 0) {
          btnClear = this._renderBtnClear();
        }
        var control = $(coreuiTableUtils.render(tpl['controls/search.html'], {
          btnContent: btnContent,
          btnAttr: btnAttr.length > 0 ? ' ' + btnAttr.join(' ') : '',
          btnClear: btnClear
        }));
        var buttonToggle = control.find('.btn-search-toggle');
        var buttonClear = control.find('.btn-clear');
        buttonToggle.click(function () {
          var container = coreuiTableElements.getSearchContainer(table.getId());
          var columnsContainer = coreuiTableElements.getColumnsContainer(table.getId());
          if (columnsContainer[0]) {
            columnsContainer.hide();
          }
          if (container[0]) {
            container.fadeToggle('fast');
          } else {
            var controls = [];
            var btnCompleteAttr = [];
            var btnCompleteContent = '';
            var tableOptions = table.getOptions();
            var labelWidth = tableOptions.search.hasOwnProperty('labelWidth') && tableOptions.search.labelWidth ? tableOptions.search.labelWidth : 160;
            table._search.map(function (searchControl) {
              var options = searchControl.getOptions();
              if (options.hasOwnProperty('field') && typeof options.field === 'string' && options.field) {
                var descriptionLabel = options.hasOwnProperty('descriptionLabel') && options.descriptionLabel ? options.descriptionLabel : null;
                var controlContainer = $(coreuiTableUtils.render(tpl['controls/search/control.html'], {
                  labelWidth: labelWidth + (typeof labelWidth === 'number' ? 'px' : ''),
                  descriptionLabel: descriptionLabel,
                  label: options.hasOwnProperty('label') && typeof options.label === 'string' ? options.label : '',
                  description: options.hasOwnProperty('description') && typeof options.description === 'string' ? options.description : '',
                  suffix: options.hasOwnProperty('suffix') && typeof options.suffix === 'string' ? options.suffix : ''
                }));
                controlContainer.find('.coreui-table__search-control_content').prepend(searchControl.render());
                controls.push(controlContainer);
              }
            });
            if (!coreuiTableUtils.isObject(that._options.btnComplete)) {
              that._options.btnComplete = {};
            }
            if (!coreuiTableUtils.isObject(that._options.btnComplete.attr)) {
              that._options.btnComplete.attr = {};
            }
            if (that._options.btnComplete.attr.hasOwnProperty('type')) {
              delete that._options.btnComplete.attr.type;
            }
            if (!that._options.btnComplete.attr.hasOwnProperty('class') || typeof that._options.btnComplete.attr["class"] !== 'string') {
              that._options.btnComplete.attr["class"] = 'btn-complete';
            } else {
              that._options.btnComplete.attr["class"] += ' btn-complete';
            }
            if (coreuiTableUtils.isObject(that._options.btnComplete.attr)) {
              $.each(that._options.btnComplete.attr, function (name, value) {
                if (['string', 'number'].indexOf(_typeof(value)) >= 0) {
                  btnCompleteAttr.push(name + '="' + value + '"');
                }
              });
            }
            if (typeof that._options.btnComplete.content === 'string') {
              btnCompleteContent = that._options.btnComplete.content;
            }
            var searchContainer = $(coreuiTableUtils.render(tpl['controls/search/container.html'], {
              labelWidth: labelWidth + (typeof labelWidth === 'number' ? 'px' : ''),
              btnCompleteAttr: btnCompleteAttr.length > 0 ? ' ' + btnCompleteAttr.join(' ') : '',
              btnCompleteContent: btnCompleteContent
            }));
            $('.btn-complete', searchContainer).click(function () {
              table.searchRecords();
              var container = coreuiTableElements.getSearchContainer(table.getId());
              if (container[0]) {
                container.fadeOut(200);
              }
            });
            if (controls.length > 0) {
              var searchControls = searchContainer.find('.coreui-table__search_controls');
              controls.map(function (control) {
                searchControls.append(control);
              });
            }
            var wrapper = coreuiTableElements.getWrapper(table.getId());
            wrapper.before(searchContainer);
          }
        });
        buttonClear.click(function () {
          table.clearSearch();
          var container = coreuiTableElements.getSearchContainer(table.getId());
          if (container[0]) {
            container.fadeOut('fast');
          }
          buttonClear.remove();
        });
        table.on('search_change', function (searchData) {
          var buttonClear = $('button.btn-clear', control);
          if (searchData.length > 0) {
            if (!buttonClear[0]) {
              var _btnClear = $(that._renderBtnClear());
              _btnClear.click(function () {
                table.clearSearch();
                var container = coreuiTableElements.getSearchContainer(table.getId());
                if (container[0]) {
                  container.fadeOut('fast');
                }
                _btnClear.remove();
              });
              _btnClear.insertAfter(buttonToggle);
            }
          } else {
            buttonClear.remove();
            var container = coreuiTableElements.getSearchContainer(table.getId());
            if (container[0]) {
              container.fadeOut('fast');
            }
          }
        });
        return control;
      }

      /**
       * Рендер кнопки отмены
       * @private
       */
    }, {
      key: "_renderBtnClear",
      value: function _renderBtnClear() {
        var attributes = [];
        var content = '';
        if (!coreuiTableUtils.isObject(this._options.btnClear)) {
          this._options.btnClear = {};
        }
        if (!coreuiTableUtils.isObject(this._options.btnClear.attr)) {
          this._options.btnClear.attr = {};
        }
        if (!this._options.btnClear.attr.hasOwnProperty('class') || typeof this._options.btnClear.attr["class"] !== 'string') {
          this._options.btnClear.attr["class"] = 'btn-clear';
        } else {
          this._options.btnClear.attr["class"] += ' btn-clear';
        }
        $.each(this._options.btnClear.attr, function (name, value) {
          attributes.push(name + '="' + value + '"');
        });
        if (typeof this._options.btnClear.content === 'string') {
          content = this._options.btnClear.content;
        }
        return coreuiTableUtils.render(tpl['controls/search/clear.html'], {
          content: content,
          attr: attributes.length > 0 ? ' ' + attributes.join(' ') : ''
        });
      }
    }]);
  }(Control);

  function _callSuper$I(_this, derived, args) {
    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      } catch (e) {
        return false;
      }
    }
    derived = _getPrototypeOf(derived);
    return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));
  }
  var ControlColumns = /*#__PURE__*/function (_Control) {
    /**
     * Инициализация
     * @param {coreuiTableInstance} table
     * @param {Object}              options
     */
    function ControlColumns(table, options) {
      var _this2;
      _classCallCheck(this, ControlColumns);
      options = $.extend(true, {
        id: null,
        type: 'columns',
        btn: {
          content: '<i class="bi bi-layout-three-columns"></i>',
          attr: {
            "class": 'btn btn-outline-secondary'
          }
        },
        btnComplete: {
          content: null,
          attr: {
            "class": 'btn btn-primary'
          }
        }
      }, options);
      _this2 = _callSuper$I(this, ControlColumns, [table, options]);
      if (!coreuiTableUtils.isObject(_this2._options.btn)) {
        _this2._options.btn = {};
      }
      if (!coreuiTableUtils.isObject(_this2._options.btnComplete)) {
        _this2._options.btnComplete = {};
      }
      if (coreuiTableUtils.isObject(_this2._options.btnComplete) && typeof _this2._options.btnComplete.content !== 'string') {
        _this2._options.btnComplete.content = table.getLang().complete;
      }
      return _this2;
    }

    /**
     * Формирование контента для размещения на странице
     * @returns {jQuery}
     */
    _inherits(ControlColumns, _Control);
    return _createClass(ControlColumns, [{
      key: "render",
      value: function render() {
        var that = this;
        var table = this._table;
        var attributes = [];
        if (coreuiTableUtils.isObject(this._options.btn.attr)) {
          $.each(this._options.btn.attr, function (name, value) {
            if (['string', 'number'].indexOf(_typeof(value)) >= 0) {
              attributes.push(name + '="' + value + '"');
            }
          });
        }
        var btn = $(coreuiTableUtils.render(tpl['controls/columns.html'], {
          btnContent: this._options.btn.content,
          btnAttr: attributes.length > 0 ? ' ' + attributes.join(' ') : ''
        }));
        btn.click(function () {
          var container = coreuiTableElements.getColumnsContainer(table.getId());
          var containerSearch = coreuiTableElements.getSearchContainer(table.getId());
          if (containerSearch[0]) {
            containerSearch.hide();
          }
          if (container[0]) {
            container.fadeToggle('fast');
          } else {
            var columns = [];
            var showAll = true;
            var btnCompleteAttr = [];
            var btnCompleteContent = '';
            var wrapper = coreuiTableElements.getWrapper(table.getId());
            table._columns.map(function (column) {
              var options = column.getOptions();
              if (options.hasOwnProperty('field') && typeof options.field === 'string' && options.field) {
                var isShow = column.isShow();
                columns.push({
                  field: options.field,
                  label: options.hasOwnProperty('label') && typeof options.label === 'string' ? options.label : '',
                  show: isShow
                });
                if (!isShow) {
                  showAll = false;
                }
              }
            });
            var options = that.getOptions();
            if (!coreuiTableUtils.isObject(options.btnComplete)) {
              options.btnComplete = {};
            }
            if (!coreuiTableUtils.isObject(options.btnComplete.attr)) {
              options.btnComplete.attr = {};
            }
            if (options.btnComplete.attr.hasOwnProperty('type')) {
              delete options.btnComplete.attr.type;
            }
            if (!options.btnComplete.attr.hasOwnProperty('class') || typeof options.btnComplete.attr["class"] !== 'string') {
              options.btnComplete.attr["class"] = 'btn-complete';
            } else {
              options.btnComplete.attr["class"] += ' btn-complete';
            }
            if (coreuiTableUtils.isObject(options.btnComplete.attr)) {
              $.each(options.btnComplete.attr, function (name, value) {
                if (['string', 'number'].indexOf(_typeof(value)) >= 0) {
                  btnCompleteAttr.push(name + '="' + value + '"');
                }
              });
            }
            if (typeof options.btnComplete.content === 'string') {
              btnCompleteContent = options.btnComplete.content;
            }
            var containerList = $(coreuiTableUtils.render(tpl['controls/columns/list.html'], {
              showAll: showAll,
              columns: columns,
              btnCompleteAttr: btnCompleteAttr.length > 0 ? ' ' + btnCompleteAttr.join(' ') : '',
              btnCompleteContent: btnCompleteContent,
              lang: table.getLang()
            }));
            $('.coreui-table__check_all input', containerList).change(function () {
              $('.coreui-table_check-column input', containerList).prop('checked', $(this).is(":checked"));
            });
            $('.btn-complete', containerList).click(function () {
              var columns = [];
              $('.coreui-table_check-column input:checked', containerList).each(function (key, input) {
                columns.push($(input).val());
              });
              table.setColumnsShow(columns);
              containerList.fadeOut('fast');
            });
            wrapper.before(containerList);
          }
        });
        return btn;
      }
    }]);
  }(Control);

  function _callSuper$H(_this, derived, args) {
    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      } catch (e) {
        return false;
      }
    }
    derived = _getPrototypeOf(derived);
    return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));
  }
  var ControlCaption = /*#__PURE__*/function (_Control) {
    /**
     * Инициализация
     * @param {coreuiTableInstance} table
     * @param {Object}              options
     */
    function ControlCaption(table, options) {
      _classCallCheck(this, ControlCaption);
      options = $.extend(true, {
        id: null,
        type: 'caption',
        title: null,
        description: null,
        value: null
      }, options);
      return _callSuper$H(this, ControlCaption, [table, options]);
    }

    /**
     * Формирование контента для размещения на странице
     * @returns {string}
     */
    _inherits(ControlCaption, _Control);
    return _createClass(ControlCaption, [{
      key: "render",
      value: function render() {
        return coreuiTableUtils.render(tpl['controls/caption.html'], {
          title: this._options.title,
          description: this._options.description,
          value: this._options.value
        });
      }
    }]);
  }(Control);

  function _callSuper$G(_this, derived, args) {
    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      } catch (e) {
        return false;
      }
    }
    derived = _getPrototypeOf(derived);
    return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));
  }
  var ControlFilterClear = /*#__PURE__*/function (_Control) {
    /**
     * Инициализация
     * @param {coreuiTableInstance} table
     * @param {Object}              options
     */
    function ControlFilterClear(table, options) {
      var _this2;
      _classCallCheck(this, ControlFilterClear);
      options = $.extend(true, {
        id: null,
        type: 'filter_clear',
        content: null,
        attr: {
          "class": 'btn btn-secondary'
        }
      }, options);
      _this2 = _callSuper$G(this, ControlFilterClear, [table, options]);
      if (!_this2._options.hasOwnProperty('content') || typeof _this2._options.content !== 'string') {
        _this2._options.content = '<i class="bi bi-x"></i> ' + table.getLang().clear;
      }
      return _this2;
    }

    /**
     * Формирование контента
     * @returns {string}
     */
    _inherits(ControlFilterClear, _Control);
    return _createClass(ControlFilterClear, [{
      key: "render",
      value: function render() {
        var options = this.getOptions();
        var table = this._table;
        if (!coreuiTableUtils.isObject(options.attr)) {
          options.attr = {};
        }
        if (options.attr.hasOwnProperty('type')) {
          delete options.attr.type;
        }
        var filterData = table.getFilterData();
        if (filterData.length === 0) {
          if (options.attr.hasOwnProperty('style') && typeof options.attr.style === 'string') {
            options.attr.style += ';display:none;';
          } else {
            options.attr.style = "display:none";
          }
        }
        var attr = [];
        $.each(options.attr, function (name, value) {
          if (['string', 'number'].indexOf(_typeof(value)) >= 0) {
            attr.push(name + '="' + value + '"');
          }
        });
        var button = $(coreuiTableUtils.render(tpl['controls/filter_clear.html'], {
          attr: attr.length > 0 ? ' ' + attr.join(' ') : '',
          content: options.content ? options.content : ''
        }));
        button.click(function () {
          table.clearFilters();
        });
        table.on('filters_change', function (filterData) {
          if (filterData.length > 0) {
            button.show();
          } else {
            button.hide();
          }
        });
        return button;
      }
    }]);
  }(Control);

  function _callSuper$F(_this, derived, args) {
    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      } catch (e) {
        return false;
      }
    }
    derived = _getPrototypeOf(derived);
    return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));
  }
  var ControlDivider = /*#__PURE__*/function (_Control) {
    /**
     * Инициализация
     * @param {coreuiTableInstance} table
     * @param {Object}              options
     */
    function ControlDivider(table, options) {
      _classCallCheck(this, ControlDivider);
      options = $.extend(true, {
        type: 'divider',
        width: 40,
        text: '',
        attr: {
          "class": 'd-inline-block text-body-tertiary text-center',
          style: 'height:20px'
        }
      }, options);
      return _callSuper$F(this, ControlDivider, [table, options]);
    }

    /**
     * Формирование контента для размещения на странице
     * @returns {string}
     */
    _inherits(ControlDivider, _Control);
    return _createClass(ControlDivider, [{
      key: "render",
      value: function render() {
        var attributes = [];
        this._options.attr = coreuiTableUtils.mergeAttr(this._options.attr, {
          style: 'width:' + this._options.width + 'px'
        });
        $.each(this._options.attr, function (name, value) {
          if (['string', 'number'].indexOf(_typeof(value)) >= 0) {
            attributes.push(name + '="' + value + '"');
          }
        });
        return coreuiTableUtils.render(tpl['controls/divider.html'], {
          attr: attributes.length > 0 ? ' ' + attributes.join(' ') : '',
          text: typeof this._options.text === 'string' && this._options.text !== '' ? this._options.text : ''
        });
      }
    }]);
  }(Control);

  var Filter = /*#__PURE__*/function () {
    /**
     * Инициализация
     * @param {object} table
     * @param {object} options
     */
    function Filter(table, options) {
      _classCallCheck(this, Filter);
      _defineProperty(this, "_id", null);
      _defineProperty(this, "_table", null);
      _defineProperty(this, "_value", null);
      _defineProperty(this, "_control", null);
      _defineProperty(this, "_options", {
        id: '',
        type: '',
        field: null
      });
      this._table = table;
      this._options = $.extend(true, this._options, options);
      this._id = this._options.hasOwnProperty('id') && typeof this._options.id === 'string' && this._options.id ? this._options.id : coreuiTableUtils.hashCode();
    }

    /**
     * Получение параметров
     * @returns {object}
     */
    return _createClass(Filter, [{
      key: "getOptions",
      value: function getOptions() {
        return $.extend(true, {}, this._options);
      }

      /**
       * Получение id
       * @returns {string}
       */
    }, {
      key: "getId",
      value: function getId() {
        return this._id;
      }

      /**
       * Фильтрация данных
       * @returns {string} fieldValue
       * @returns {string} searchValue
       * @returns {boolean}
       */
    }, {
      key: "filter",
      value: function filter(fieldValue, searchValue) {
        if (['string', 'number'].indexOf(_typeof(fieldValue)) < 0 || ['string', 'number'].indexOf(_typeof(searchValue)) < 0) {
          return false;
        }
        return fieldValue.toString().toLowerCase().indexOf(searchValue.toString().toLowerCase()) >= 0;
      }

      /**
       * Установка значения
       * @param {string} value
       */
    }, {
      key: "setValue",
      value: function setValue(value) {}

      /**
       * Получение значения
       * @returns {string|null}
       */
    }, {
      key: "getValue",
      value: function getValue() {}

      /**
       * Получение название поля
       * @returns {string|null}
       */
    }, {
      key: "getField",
      value: function getField() {
        return this._options.field;
      }

      /**
       * Формирование контента
       * @returns {string}
       */
    }, {
      key: "render",
      value: function render() {}
    }]);
  }();

  function _callSuper$E(_this, derived, args) {
    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      } catch (e) {
        return false;
      }
    }
    derived = _getPrototypeOf(derived);
    return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));
  }
  var FilterText = /*#__PURE__*/function (_Filter) {
    /**
     * Инициализация
     * @param {coreuiTableInstance} table
     * @param {Object}              options
     */
    function FilterText(table, options) {
      var _this2;
      _classCallCheck(this, FilterText);
      options = $.extend(true, {
        id: null,
        type: 'text',
        field: null,
        label: null,
        value: null,
        width: 200,
        autoSearch: null,
        attr: {
          "class": "form-control"
        },
        btn: {
          attr: {
            "class": "btn btn-outline-secondary border-secondary-subtle"
          },
          content: '<i class="bi bi-search"></i>'
        }
      }, options);
      _this2 = _callSuper$E(this, FilterText, [table, options]);
      if (_this2._options.value !== null) {
        _this2.setValue(_this2._options.value);
      }
      return _this2;
    }

    /**
     * Установка значения
     * @param {string|number|null} value
     */
    _inherits(FilterText, _Filter);
    return _createClass(FilterText, [{
      key: "setValue",
      value: function setValue(value) {
        if (value !== null && typeof value !== 'string' && typeof value !== 'number') {
          return;
        }
        this._value = value;
        if (this._control) {
          $('input', this._control).val(this._value === null ? '' : this._value);
        }
      }

      /**
       * Получение значения
       * @returns {string|null}
       */
    }, {
      key: "getValue",
      value: function getValue() {
        if (this._control) {
          var value = $('input', this._control).val();
          if (typeof value === 'string' && value !== '') {
            return value;
          }
        }
        return this._value;
      }

      /**
       * Формирование контента
       * @returns {string}
       */
    }, {
      key: "render",
      value: function render() {
        var options = this.getOptions();
        var label = typeof options.label === 'string' || typeof options.label === 'number' ? options.label : '';
        if (!coreuiTableUtils.isObject(options.attr)) {
          options.attr = {};
        }
        if (options.hasOwnProperty('width') && coreuiTableUtils.isNumeric(options.width)) {
          if (options.attr.hasOwnProperty('style')) {
            options.attr['style'] += ';width:' + options.width + 'px';
          } else {
            options.attr['style'] = 'width:' + options.width + 'px';
          }
        }
        options.attr['value'] = typeof this._value === 'string' || typeof this._value === 'number' ? this._value : '';
        if (options.attr.hasOwnProperty('type')) {
          delete options.attr.type;
        }
        if (!coreuiTableUtils.isObject(options.btn)) {
          options.btn = {};
        }
        if (!coreuiTableUtils.isObject(options.btn.attr)) {
          options.btn.attr = {};
        }
        if (options.btn.attr.hasOwnProperty('type')) {
          delete options.btn.attr.type;
        }
        var attr = [];
        var attrBtn = [];
        var table = this._table;
        $.each(options.attr, function (name, value) {
          attr.push(name + '="' + value + '"');
        });
        $.each(options.btn.attr, function (name, value) {
          attrBtn.push(name + '="' + value + '"');
        });
        this._control = $(coreuiTableUtils.render(tpl['filters/text.html'], {
          attr: attr.length > 0 ? ' ' + attr.join(' ') : '',
          label: label,
          btnAttr: attrBtn.length > 0 ? ' ' + attrBtn.join(' ') : '',
          btnContent: options.btn.content ? options.btn.content : ''
        }));
        $('input', this._control).keyup(function (e) {
          if (e.key === 'Enter' || e.keyCode === 13) {
            table.searchRecords();
          } else if (typeof options.autoSearch === 'boolean' && options.autoSearch) {
            table.searchRecords();
          }
        });
        $('button', this._control).click(function (e) {
          table.searchRecords();
        });
        return this._control;
      }
    }]);
  }(Filter);

  function _callSuper$D(_this, derived, args) {
    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      } catch (e) {
        return false;
      }
    }
    derived = _getPrototypeOf(derived);
    return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));
  }
  var FilterNumber = /*#__PURE__*/function (_Filter) {
    /**
     * Инициализация
     * @param {coreuiTableInstance} table
     * @param {Object}              options
     */
    function FilterNumber(table, options) {
      var _this2;
      _classCallCheck(this, FilterNumber);
      options = $.extend(true, {
        id: null,
        type: 'number',
        field: null,
        label: null,
        value: null,
        width: 90,
        attr: {
          "class": "form-control"
        },
        btn: {
          attr: {
            "class": "btn btn-outline-secondary border-secondary-subtle"
          },
          content: '<i class="bi bi-search"></i>'
        }
      }, options);
      _this2 = _callSuper$D(this, FilterNumber, [table, options]);
      if (_this2._options.value !== null) {
        _this2.setValue(_this2._options.value);
      }
      return _this2;
    }

    /**
     * Установка значения
     * @param {object|null} value
     */
    _inherits(FilterNumber, _Filter);
    return _createClass(FilterNumber, [{
      key: "setValue",
      value: function setValue(value) {
        if (value) {
          if (!coreuiTableUtils.isObject(value)) {
            return;
          }
          var numberStart = null;
          var numberEnd = null;
          if (value.hasOwnProperty('start') && (typeof value.start === 'string' || typeof value.start !== 'number') && value.start !== '' && !isNaN(Number(value.start))) {
            numberStart = value.start;
          }
          if (value.hasOwnProperty('end') && (typeof value.end === 'string' || typeof value.end !== 'number') && value.end !== '' && !isNaN(Number(value.end))) {
            numberEnd = value.end;
          }
          if (numberStart === null && numberEnd === null) {
            this._value = null;
          } else {
            this._value = {
              start: numberStart,
              end: numberEnd
            };
          }
        } else {
          this._value = null;
        }
        if (this._control) {
          var inputStart = this._control.parent().find('input.number-start');
          var inputEnd = this._control.parent().find('input.number-end');
          if (this._value === null) {
            inputStart.val('');
            inputEnd.val('');
          } else if (coreuiTableUtils.isObject(this._value)) {
            inputStart.val(_typeof(this._value.start) !== null ? this._value.start : '');
            inputEnd.val(_typeof(this._value.end) !== null ? this._value.end : '');
          }
        }
      }

      /**
       * Получение значения
       * @returns {string}
       */
    }, {
      key: "getValue",
      value: function getValue() {
        if (this._control) {
          var inputStart = this._control.parent().find('input.number-start');
          var inputEnd = this._control.parent().find('input.number-end');
          if (inputStart[0] && inputEnd[0]) {
            var valueStart = inputStart.val();
            var valueEnd = inputEnd.val();
            if (typeof valueStart === 'string' && valueStart !== '' || typeof valueEnd === 'string' && valueEnd !== '') {
              return {
                start: valueStart !== '' && !isNaN(Number(valueStart)) ? Number(valueStart) : null,
                end: valueEnd !== '' && !isNaN(Number(valueEnd)) ? Number(valueEnd) : null
              };
            }
          }
          return null;
        }
        return this._value;
      }

      /**
       * Фильтрация данных
       * @returns {string}              fieldValue
       * @returns {Array|string|number} searchValue
       * @returns {boolean}
       */
    }, {
      key: "filter",
      value: function filter(fieldValue, searchValue) {
        if (['string', 'number'].indexOf(_typeof(fieldValue)) < 0 || !coreuiTableUtils.isObject(searchValue) || ['string', 'number'].indexOf(_typeof(searchValue.start)) < 0 && ['string', 'number'].indexOf(_typeof(searchValue.end)) < 0) {
          return false;
        }
        var issetStart = ['string', 'number'].indexOf(_typeof(searchValue.start)) >= 0;
        var issetEnd = ['string', 'number'].indexOf(_typeof(searchValue.end)) >= 0;
        if (issetStart && issetEnd) {
          return fieldValue >= searchValue.start && fieldValue <= searchValue.end;
        } else if (issetStart) {
          return fieldValue >= searchValue.start;
        } else {
          return fieldValue <= searchValue.end;
        }
      }

      /**
       * Формирование контента
       * @returns {string}
       */
    }, {
      key: "render",
      value: function render() {
        var options = this.getOptions();
        var label = typeof options.label === 'string' || typeof options.label === 'number' ? options.label : '';
        if (!coreuiTableUtils.isObject(options.attr)) {
          options.attr = {};
        }
        if (options.hasOwnProperty('width') && coreuiTableUtils.isNumeric(options.width)) {
          if (options.attr.hasOwnProperty('style')) {
            options.attr['style'] += ';width:' + options.width + 'px';
          } else {
            options.attr['style'] = 'width:' + options.width + 'px';
          }
        }
        if (options.attr.hasOwnProperty('type')) {
          delete options.attr.type;
        }
        if (options.attr.hasOwnProperty('value')) {
          delete options.attr.value;
        }
        var field = typeof options.field === 'string' ? options.field : '';
        var startAttr = [];
        var endAttr = [];
        var attrBtn = [];
        var table = this._table;
        $.each(options.attr, function (name, value) {
          if (['name', 'value', 'class'].indexOf(name) >= 0 || ['string', 'number'].indexOf(_typeof(value)) < 0) {
            return;
          }
          startAttr.push(name + '="' + value + '"');
          endAttr.push(name + '="' + value + '"');
        });
        if (options.attr.hasOwnProperty('class') && ['string', 'number'].indexOf(_typeof(options.attr["class"])) >= 0) {
          startAttr.push('class="' + options.attr["class"] + ' number-start"');
          endAttr.push('class="' + options.attr["class"] + ' number-end"');
        } else {
          startAttr.push('class="number-start"');
          endAttr.push('class="number-end"');
        }
        if (field) {
          startAttr.push('name="' + field + '[start]"');
          endAttr.push('name="' + field + '[end]"');
        }
        startAttr.push('value="' + (this._value ? this._value.start : '') + '"');
        endAttr.push('value="' + (this._value ? this._value.end : '') + '"');
        if (!coreuiTableUtils.isObject(options.btn)) {
          options.btn = {};
        }
        if (!coreuiTableUtils.isObject(options.btn.attr)) {
          options.btn.attr = {};
        }
        if (options.btn.attr.hasOwnProperty('type')) {
          delete options.btn.attr.type;
        }
        $.each(options.btn.attr, function (name, value) {
          attrBtn.push(name + '="' + value + '"');
        });
        this._control = $(coreuiTableUtils.render(tpl['filters/number.html'], {
          attrStart: startAttr.length > 0 ? ' ' + startAttr.join(' ') : '',
          attrEnd: endAttr.length > 0 ? ' ' + endAttr.join(' ') : '',
          label: label,
          btnAttr: attrBtn.length > 0 ? ' ' + attrBtn.join(' ') : '',
          btnContent: options.btn.content ? options.btn.content : ''
        }));
        $('input.number-start, input.number-end', this._control).keyup(function (e) {
          if (e.key === 'Enter' || e.keyCode === 13) {
            table.searchRecords();
          }
        });
        $('button', this._control).click(function (e) {
          table.searchRecords();
        });
        return this._control;
      }
    }]);
  }(Filter);

  function _callSuper$C(_this, derived, args) {
    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      } catch (e) {
        return false;
      }
    }
    derived = _getPrototypeOf(derived);
    return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));
  }
  var FilterDate = /*#__PURE__*/function (_Filter) {
    /**
     * Инициализация
     * @param {coreuiTableInstance} table
     * @param {Object}              options
     */
    function FilterDate(table, options) {
      var _this2;
      _classCallCheck(this, FilterDate);
      options = $.extend(true, {
        id: null,
        type: 'date',
        field: null,
        label: null,
        value: null,
        width: 200,
        attr: {
          "class": "form-control"
        }
      }, options);
      _this2 = _callSuper$C(this, FilterDate, [table, options]);
      if (_this2._options.value !== null) {
        _this2.setValue(_this2._options.value);
      }
      return _this2;
    }

    /**
     * Установка значения
     * @param {string} value
     */
    _inherits(FilterDate, _Filter);
    return _createClass(FilterDate, [{
      key: "setValue",
      value: function setValue(value) {
        if (typeof value !== 'string' && value !== null) {
          return;
        }
        if (value && (value.match(/^\d{4}\-\d{2}\-\d{2}$/) === null || isNaN(new Date(value)))) {
          return;
        }
        this._value = value;
        if (this._control) {
          $('input', this._control).val(this._value === null ? '' : this._value);
        }
      }

      /**
       * Получение значения
       * @returns {string}
       */
    }, {
      key: "getValue",
      value: function getValue() {
        if (this._control) {
          var value = $('input', this._control).val();
          if (typeof value === 'string' && value !== '') {
            return value;
          }
          return null;
        }
        return this._value;
      }

      /**
       * Фильтрация данных
       * @returns {string}              fieldValue
       * @returns {Array|string|number} searchValue
       * @returns {boolean}
       */
    }, {
      key: "filter",
      value: function filter(fieldValue, searchValue) {
        if (['string', 'number'].indexOf(_typeof(fieldValue)) < 0 || ['string', 'number'].indexOf(_typeof(searchValue)) < 0) {
          return false;
        }
        return fieldValue.toString().indexOf(searchValue.toString()) === 0;
      }

      /**
       * Формирование контента
       * @returns {string}
       */
    }, {
      key: "render",
      value: function render() {
        var options = this.getOptions();
        var label = typeof options.label === 'string' || typeof options.label === 'number' ? options.label : '';
        if (!coreuiTableUtils.isObject(options.attr)) {
          options.attr = {};
        }
        if (options.hasOwnProperty('width') && coreuiTableUtils.isNumeric(options.width)) {
          if (options.attr.hasOwnProperty('style')) {
            options.attr['style'] += ';width:' + options.width + 'px';
          } else {
            options.attr['style'] = 'width:' + options.width + 'px';
          }
        }
        options.attr['value'] = typeof this._value === 'string' || typeof this._value === 'number' ? this._value : '';
        if (options.attr.hasOwnProperty('type')) {
          delete options.attr.type;
        }
        var attr = [];
        var table = this._table;
        $.each(options.attr, function (name, value) {
          attr.push(name + '="' + value + '"');
        });
        this._control = $(coreuiTableUtils.render(tpl['filters/date.html'], {
          attr: attr.length > 0 ? ' ' + attr.join(' ') : '',
          label: label
        }));
        $('input', this._control).change(function (e) {
          table.searchRecords();
        });
        return this._control;
      }
    }]);
  }(Filter);

  function _callSuper$B(_this, derived, args) {
    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      } catch (e) {
        return false;
      }
    }
    derived = _getPrototypeOf(derived);
    return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));
  }
  var FilterDatetime = /*#__PURE__*/function (_Filter) {
    /**
     * Инициализация
     * @param {coreuiTableInstance} table
     * @param {Object}              options
     */
    function FilterDatetime(table, options) {
      var _this2;
      _classCallCheck(this, FilterDatetime);
      options = $.extend(true, {
        id: null,
        type: 'datetime',
        field: null,
        label: null,
        value: null,
        width: 200,
        attr: {
          "class": "form-control"
        }
      }, options);
      _this2 = _callSuper$B(this, FilterDatetime, [table, options]);
      if (_this2._options.value !== null) {
        _this2.setValue(_this2._options.value);
      }
      return _this2;
    }

    /**
     * Установка значения
     * @param {string|null} value
     */
    _inherits(FilterDatetime, _Filter);
    return _createClass(FilterDatetime, [{
      key: "setValue",
      value: function setValue(value) {
        if (typeof value !== 'string' && value !== null) {
          return;
        }
        if (value && (value.match(/^\d{4}\-\d{2}\-\d{2}(T| )\d{2}:\d{2}(:\d{2}|)$/) === null || isNaN(new Date(value)))) {
          return;
        }
        this._value = value;
        if (this._control) {
          $('input', this._control).val(this._value === null ? '' : this._value);
        }
      }

      /**
       * Получение значения
       * @returns {string|null}
       */
    }, {
      key: "getValue",
      value: function getValue() {
        if (this._control) {
          var value = $('input', this._control).val();
          if (typeof value === 'string' && value !== '') {
            return value;
          }
          return null;
        }
        return this._value;
      }

      /**
       * Фильтрация данных
       * @returns {string}              fieldValue
       * @returns {Array|string|number} searchValue
       * @returns {boolean}
       */
    }, {
      key: "filter",
      value: function filter(fieldValue, searchValue) {
        if (['string', 'number'].indexOf(_typeof(fieldValue)) < 0 || ['string', 'number'].indexOf(_typeof(searchValue)) < 0) {
          return false;
        }
        return fieldValue.toString() === searchValue.toString();
      }

      /**
       * Формирование контента
       * @returns {string}
       */
    }, {
      key: "render",
      value: function render() {
        var options = this.getOptions();
        var label = typeof options.label === 'string' || typeof options.label === 'number' ? options.label : '';
        if (!coreuiTableUtils.isObject(options.attr)) {
          options.attr = {};
        }
        if (options.hasOwnProperty('width') && coreuiTableUtils.isNumeric(options.width)) {
          if (options.attr.hasOwnProperty('style')) {
            options.attr['style'] += ';width:' + options.width + 'px';
          } else {
            options.attr['style'] = 'width:' + options.width + 'px';
          }
        }
        options.attr['value'] = typeof this._value === 'string' || typeof this._value === 'number' ? this._value : '';
        if (options.attr.hasOwnProperty('type')) {
          delete options.attr.type;
        }
        var attr = [];
        var table = this._table;
        $.each(options.attr, function (name, value) {
          attr.push(name + '="' + value + '"');
        });
        this._control = $(coreuiTableUtils.render(tpl['filters/datetime.html'], {
          attr: attr.length > 0 ? ' ' + attr.join(' ') : '',
          label: label
        }));
        $('input', this._control).change(function (e) {
          table.searchRecords();
        });
        return this._control;
      }
    }]);
  }(Filter);

  function _callSuper$A(_this, derived, args) {
    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      } catch (e) {
        return false;
      }
    }
    derived = _getPrototypeOf(derived);
    return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));
  }
  var FilterDateMonth = /*#__PURE__*/function (_Filter) {
    /**
     * Инициализация
     * @param {coreuiTableInstance} table
     * @param {Object}              options
     */
    function FilterDateMonth(table, options) {
      var _this2;
      _classCallCheck(this, FilterDateMonth);
      options = $.extend(true, {
        id: null,
        type: 'date_month',
        field: null,
        label: null,
        value: null,
        width: 200,
        attr: {
          "class": "form-control"
        }
      }, options);
      _this2 = _callSuper$A(this, FilterDateMonth, [table, options]);
      if (_this2._options.value !== null) {
        _this2.setValue(_this2._options.value);
      }
      return _this2;
    }

    /**
     * Установка значения
     * @param {string|null} value
     */
    _inherits(FilterDateMonth, _Filter);
    return _createClass(FilterDateMonth, [{
      key: "setValue",
      value: function setValue(value) {
        if (typeof value !== 'string' && value !== null) {
          return;
        }
        if (value && (value.match(/^\d{4}\-\d{2}$/) === null || isNaN(new Date(value)))) {
          return;
        }
        this._value = value;
        if (this._control) {
          $('input', this._control).val(this._value === null ? '' : this._value);
        }
      }

      /**
       * Получение значения
       * @returns {string|null}
       */
    }, {
      key: "getValue",
      value: function getValue() {
        if (this._control) {
          var value = $('input', this._control).val();
          if (typeof value === 'string' && value !== '') {
            return value;
          }
          return null;
        }
        return this._value;
      }

      /**
       * Фильтрация данных
       * @returns {string} fieldValue
       * @returns {string} searchValue
       * @returns {boolean}
       */
    }, {
      key: "filter",
      value: function filter(fieldValue, searchValue) {
        if (['string', 'number'].indexOf(_typeof(fieldValue)) < 0 || ['string', 'number'].indexOf(_typeof(searchValue)) < 0) {
          return false;
        }
        return fieldValue.toString().toLowerCase().indexOf(searchValue.toString().toLowerCase()) === 0;
      }

      /**
       * Формирование контента
       * @returns {jQuery}
       */
    }, {
      key: "render",
      value: function render() {
        var options = this.getOptions();
        var label = typeof options.label === 'string' || typeof options.label === 'number' ? options.label : '';
        if (!coreuiTableUtils.isObject(options.attr)) {
          options.attr = {};
        }
        if (options.hasOwnProperty('width') && coreuiTableUtils.isNumeric(options.width)) {
          if (options.attr.hasOwnProperty('style')) {
            options.attr['style'] += ';width:' + options.width + 'px';
          } else {
            options.attr['style'] = 'width:' + options.width + 'px';
          }
        }
        options.attr['value'] = typeof this._value === 'string' || typeof this._value === 'number' ? this._value : '';
        if (options.attr.hasOwnProperty('type')) {
          delete options.attr.type;
        }
        var attr = [];
        var table = this._table;
        $.each(options.attr, function (name, value) {
          attr.push(name + '="' + value + '"');
        });
        this._control = $(coreuiTableUtils.render(tpl['filters/date_month.html'], {
          attr: attr.length > 0 ? ' ' + attr.join(' ') : '',
          label: label
        }));
        $('input', this._control).change(function (e) {
          table.searchRecords();
        });
        return this._control;
      }
    }]);
  }(Filter);

  function _callSuper$z(_this, derived, args) {
    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      } catch (e) {
        return false;
      }
    }
    derived = _getPrototypeOf(derived);
    return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));
  }
  var FilterDateRange = /*#__PURE__*/function (_Filter) {
    /**
     * Инициализация
     * @param {coreuiTableInstance} table
     * @param {Object}              options
     */
    function FilterDateRange(table, options) {
      var _this2;
      _classCallCheck(this, FilterDateRange);
      options = $.extend(true, {
        id: null,
        type: 'date_range',
        field: null,
        label: null,
        value: null,
        width: 200,
        attr: {
          "class": "form-control d-inline-block"
        }
      }, options);
      _this2 = _callSuper$z(this, FilterDateRange, [table, options]);
      if (_this2._options.value !== null) {
        _this2.setValue(_this2._options.value);
      }
      return _this2;
    }

    /**
     * Установка значения
     * @param {object|null} value
     */
    _inherits(FilterDateRange, _Filter);
    return _createClass(FilterDateRange, [{
      key: "setValue",
      value: function setValue(value) {
        if (value) {
          if (!coreuiTableUtils.isObject(value)) {
            return;
          }
          var dateStart = null;
          var dateEnd = null;
          if (value.hasOwnProperty('start') && typeof value.start === 'string' && value.start.match(/^\d{4}\-\d{2}\-\d{2}$/) === null && isNaN(new Date(value.start))) {
            dateStart = value.start;
          }
          if (value.hasOwnProperty('end') && typeof value.end === 'string' && value.end.match(/^\d{4}\-\d{2}\-\d{2}$/) === null && isNaN(new Date(value.end))) {
            dateEnd = value.end;
          }
          if (dateStart === null && dateEnd === null) {
            this._value = null;
          } else {
            this._value = {
              start: dateStart,
              end: dateEnd
            };
          }
        } else {
          this._value = null;
        }
        if (this._control) {
          var inputStart = this._control.parent().find('input.date-start');
          var inputEnd = this._control.parent().find('input.date-end');
          if (this._value === null) {
            inputStart.val('');
            inputEnd.val('');
          } else if (coreuiTableUtils.isObject(this._value)) {
            inputStart.val(_typeof(this._value.start) !== null ? this._value.start : '');
            inputEnd.val(_typeof(this._value.end) !== null ? this._value.end : '');
          }
        }
      }

      /**
       * Получение значения
       * @returns {Object|null}
       */
    }, {
      key: "getValue",
      value: function getValue() {
        if (this._control) {
          var inputStart = this._control.parent().find('input.date-start');
          var inputEnd = this._control.parent().find('input.date-end');
          if (inputStart[0] && inputEnd[0]) {
            var valueStart = inputStart.val();
            var valueEnd = inputEnd.val();
            if (typeof valueStart === 'string' && valueStart !== '' || typeof valueEnd === 'string' && valueEnd !== '') {
              return {
                start: valueStart !== '' ? valueStart : null,
                end: valueEnd !== '' ? valueEnd : null
              };
            }
          }
          return null;
        }
        return this._value;
      }

      /**
       * Фильтрация данных
       * @returns {string}              fieldValue
       * @returns {Array|string|number} searchValue
       * @returns {boolean}
       */
    }, {
      key: "filter",
      value: function filter(fieldValue, searchValue) {
        if (['string', 'number'].indexOf(_typeof(fieldValue)) < 0 || !coreuiTableUtils.isObject(searchValue) || typeof searchValue.start !== 'string' && typeof searchValue.end !== 'string') {
          return false;
        }
        var issetStart = ['string', 'number'].indexOf(_typeof(searchValue.start)) >= 0;
        var issetEnd = ['string', 'number'].indexOf(_typeof(searchValue.end)) >= 0;
        if (issetStart && issetEnd) {
          return fieldValue >= searchValue.start && fieldValue <= searchValue.end;
        } else if (issetStart) {
          return fieldValue >= searchValue.start;
        } else {
          return fieldValue <= searchValue.end;
        }
      }

      /**
       * Формирование контента
       * @returns {string}
       */
    }, {
      key: "render",
      value: function render() {
        var options = this.getOptions();
        var label = typeof options.label === 'string' || typeof options.label === 'number' ? options.label : '';
        if (!coreuiTableUtils.isObject(options.attr)) {
          options.attr = {};
        }
        if (options.hasOwnProperty('width') && coreuiTableUtils.isNumeric(options.width)) {
          if (options.attr.hasOwnProperty('style')) {
            options.attr['style'] += ';width:' + options.width + 'px';
          } else {
            options.attr['style'] = 'width:' + options.width + 'px';
          }
        }
        if (options.attr.hasOwnProperty('type')) {
          delete options.attr.type;
        }
        if (options.attr.hasOwnProperty('value')) {
          delete options.attr.value;
        }
        var field = typeof options.field === 'string' ? options.field : '';
        var startAttr = [];
        var startEnd = [];
        var table = this._table;
        $.each(options.attr, function (name, value) {
          if (['name', 'value', 'class'].indexOf(name) >= 0 || ['string', 'number'].indexOf(_typeof(value)) < 0) {
            return;
          }
          startAttr.push(name + '="' + value + '"');
          startEnd.push(name + '="' + value + '"');
        });
        if (options.attr.hasOwnProperty('class') && ['string', 'number'].indexOf(_typeof(options.attr["class"])) >= 0) {
          startAttr.push('class="' + options.attr["class"] + ' date-start"');
          startEnd.push('class="' + options.attr["class"] + ' date-end"');
        } else {
          startAttr.push('class="date-start"');
          startEnd.push('class="date-end"');
        }
        if (field) {
          startAttr.push('name="' + field + '[start]"');
          startEnd.push('name="' + field + '[end]"');
        }
        startAttr.push('value="' + (this._value ? this._value.start : '') + '"');
        startEnd.push('value="' + (this._value ? this._value.end : '') + '"');
        var control = $(coreuiTableUtils.render(tpl['filters/date_range.html'], {
          label: label,
          startAttr: startAttr.length > 0 ? ' ' + startAttr.join(' ') : '',
          endAttr: startEnd.length > 0 ? ' ' + startEnd.join(' ') : ''
        }));
        $('input', control).change(function (e) {
          table.searchRecords();
        });
        $('input.date-start', control).change(function () {
          var dateEnd = $('input.date-end', control).attr('min', $(this).val());
          if ("showPicker" in HTMLInputElement.prototype) {
            $(dateEnd)[0].showPicker();
          }
        });
        $('input.date-end', control).change(function () {
          $('input.date-start', control).attr('max', $(this).val());
        });
        this._control = control;
        return this._control;
      }
    }]);
  }(Filter);

  function _callSuper$y(_this, derived, args) {
    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      } catch (e) {
        return false;
      }
    }
    derived = _getPrototypeOf(derived);
    return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));
  }
  var FilterDatetimeRange = /*#__PURE__*/function (_Filter) {
    /**
     * Инициализация
     * @param {coreuiTableInstance} table
     * @param {Object}              options
     */
    function FilterDatetimeRange(table, options) {
      var _this2;
      _classCallCheck(this, FilterDatetimeRange);
      options = $.extend(true, {
        id: null,
        type: 'datetime_range',
        field: null,
        label: null,
        value: null,
        width: 200,
        attr: {
          "class": "form-control d-inline-block"
        }
      }, options);
      _this2 = _callSuper$y(this, FilterDatetimeRange, [table, options]);
      if (_this2._options.value !== null) {
        _this2.setValue(_this2._options.value);
      }
      return _this2;
    }

    /**
     * Установка значения
     * @param {object|null} value
     */
    _inherits(FilterDatetimeRange, _Filter);
    return _createClass(FilterDatetimeRange, [{
      key: "setValue",
      value: function setValue(value) {
        if (value) {
          if (!coreuiTableUtils.isObject(value)) {
            return;
          }
          var dateStart = null;
          var dateEnd = null;
          if (value.hasOwnProperty('start') && typeof value.start === 'string' && value.start.match(/^\d{4}\-\d{2}\-\d{2}(T| )\d{2}:\d{2}(:\d{2}|)$/) === null && isNaN(new Date(value.start))) {
            dateStart = value.start;
          }
          if (value.hasOwnProperty('end') && typeof value.end === 'string' && value.end.match(/^\d{4}\-\d{2}\-\d{2}(T| )\d{2}:\d{2}(:\d{2}|)$/) === null && isNaN(new Date(value.end))) {
            dateEnd = value.end;
          }
          if (dateStart === null && dateEnd === null) {
            this._value = null;
          } else {
            this._value = {
              start: dateStart,
              end: dateEnd
            };
          }
        } else {
          this._value = null;
        }
        if (this._control) {
          var inputStart = this._control.parent().find('input.date-start');
          var inputEnd = this._control.parent().find('input.date-end');
          if (this._value === null) {
            inputStart.val('');
            inputEnd.val('');
          } else if (coreuiTableUtils.isObject(this._value)) {
            inputStart.val(_typeof(this._value.start) !== null ? this._value.start : '');
            inputEnd.val(_typeof(this._value.end) !== null ? this._value.end : '');
          }
        }
      }

      /**
       * Получение значения
       * @returns {Object|null}
       */
    }, {
      key: "getValue",
      value: function getValue() {
        if (this._control) {
          var inputStart = this._control.parent().find('input.date-start');
          var inputEnd = this._control.parent().find('input.date-end');
          if (inputStart[0] && inputEnd[0]) {
            var valueStart = inputStart.val();
            var valueEnd = inputEnd.val();
            if (typeof valueStart === 'string' && valueStart !== '' || typeof valueEnd === 'string' && valueEnd !== '') {
              return {
                start: valueStart !== '' ? valueStart : null,
                end: valueEnd !== '' ? valueEnd : null
              };
            }
          }
          return null;
        }
        return this._value;
      }

      /**
       * Фильтрация данных
       * @returns {string}              fieldValue
       * @returns {Array|string|number} searchValue
       * @returns {boolean}
       */
    }, {
      key: "filter",
      value: function filter(fieldValue, searchValue) {
        if (['string', 'number'].indexOf(_typeof(fieldValue)) < 0 || !coreuiTableUtils.isObject(searchValue) || typeof searchValue.start !== 'string' && typeof searchValue.end !== 'string') {
          return false;
        }
        var issetStart = ['string', 'number'].indexOf(_typeof(searchValue.start)) >= 0;
        var issetEnd = ['string', 'number'].indexOf(_typeof(searchValue.end)) >= 0;
        if (issetStart && issetEnd) {
          return fieldValue >= searchValue.start && fieldValue <= searchValue.end;
        } else if (issetStart) {
          return fieldValue >= searchValue.start;
        } else {
          return fieldValue <= searchValue.end;
        }
      }

      /**
       * Формирование контента
       * @returns {jQuery}
       */
    }, {
      key: "render",
      value: function render() {
        var options = this.getOptions();
        var label = typeof options.label === 'string' || typeof options.label === 'number' ? options.label : '';
        if (!coreuiTableUtils.isObject(options.attr)) {
          options.attr = {};
        }
        if (options.hasOwnProperty('width') && coreuiTableUtils.isNumeric(options.width)) {
          if (options.attr.hasOwnProperty('style')) {
            options.attr['style'] += ';width:' + options.width + 'px';
          } else {
            options.attr['style'] = 'width:' + options.width + 'px';
          }
        }
        if (options.attr.hasOwnProperty('type')) {
          delete options.attr.type;
        }
        if (options.attr.hasOwnProperty('value')) {
          delete options.attr.value;
        }
        var field = typeof options.field === 'string' ? options.field : '';
        var startAttr = [];
        var startEnd = [];
        var table = this._table;
        $.each(options.attr, function (name, value) {
          if (['name', 'value', 'class'].indexOf(name) >= 0 || ['string', 'number'].indexOf(_typeof(value)) < 0) {
            return;
          }
          startAttr.push(name + '="' + value + '"');
          startEnd.push(name + '="' + value + '"');
        });
        if (options.attr.hasOwnProperty('class') && ['string', 'number'].indexOf(_typeof(options.attr["class"])) >= 0) {
          startAttr.push('class="' + options.attr["class"] + ' date-start"');
          startEnd.push('class="' + options.attr["class"] + ' date-end"');
        } else {
          startAttr.push('class="date-start"');
          startEnd.push('class="date-end"');
        }
        if (field) {
          startAttr.push('name="' + field + '[start]"');
          startEnd.push('name="' + field + '[end]"');
        }
        startAttr.push('value="' + (this._value ? this._value.start : '') + '"');
        startEnd.push('value="' + (this._value ? this._value.end : '') + '"');
        var control = $(coreuiTableUtils.render(tpl['filters/datetime_range.html'], {
          label: label,
          startAttr: startAttr.length > 0 ? ' ' + startAttr.join(' ') : '',
          endAttr: startEnd.length > 0 ? ' ' + startEnd.join(' ') : ''
        }));
        $('input', control).change(function (e) {
          table.searchRecords();
        });
        $('input.date-start', control).change(function () {
          var dateEnd = $('input.date-end', control).attr('min', $(this).val());
          if ("showPicker" in HTMLInputElement.prototype) {
            $(dateEnd)[0].showPicker();
          }
        });
        $('input.date-end', control).change(function () {
          $('input.date-start', control).attr('max', $(this).val());
        });
        this._control = control;
        return this._control;
      }
    }]);
  }(Filter);

  function _callSuper$x(_this, derived, args) {
    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      } catch (e) {
        return false;
      }
    }
    derived = _getPrototypeOf(derived);
    return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));
  }
  var FilterCheckbox = /*#__PURE__*/function (_Filter) {
    /**
     * Инициализация
     * @param {coreuiTableInstance} table
     * @param {Object}              options
     */
    function FilterCheckbox(table, options) {
      var _this2;
      _classCallCheck(this, FilterCheckbox);
      options = $.extend(true, {
        id: null,
        type: 'checkbox',
        field: null,
        label: null,
        value: null,
        options: []
      }, options);
      _this2 = _callSuper$x(this, FilterCheckbox, [table, options]);
      _defineProperty(_this2, "_class", 'btn btn-outline-secondary');
      if (_this2._options.value !== null) {
        _this2.setValue(_this2._options.value);
      }
      return _this2;
    }

    /**
     * Установка значения
     * @param {Array|string|number|null} value
     */
    _inherits(FilterCheckbox, _Filter);
    return _createClass(FilterCheckbox, [{
      key: "setValue",
      value: function setValue(value) {
        if (['string', 'number', 'object'].indexOf(_typeof(value)) < 0) {
          return;
        }
        if (_typeof(value) === 'object') {
          if (Array.isArray(value)) {
            var items = [];
            $.each(value, function (key, item) {
              if (typeof value !== 'string' && typeof value !== 'number') {
                return;
              }
              items.push(item);
            });
            this._value = items;
          } else {
            this._value = null;
          }
        } else {
          this._value = [value];
        }
        if (this._control) {
          $('input:checked', this._control).prop('checked', false);
          if (Array.isArray(this._value)) {
            var control = this._control;
            this._value.map(function (value) {
              $('input[value="' + value + '"]', control).prop('checked', true);
            });
          }
        }
      }

      /**
       * Получение значения
       * @returns {Array|null}
       */
    }, {
      key: "getValue",
      value: function getValue() {
        if (this._control) {
          var inputs = $('input:checked', this._control);
          var items = [];
          $.each(inputs, function (key, input) {
            var value = $(input).attr('value');
            if (['string', 'number'].indexOf(_typeof(value)) >= 0 && value !== '') {
              items.push(value);
            }
          });
          return items.length > 0 ? items : null;
        } else {
          return this._value;
        }
      }

      /**
       * Фильтрация данных
       * @returns {string} fieldValue
       * @returns {Array}  searchValue
       * @returns {boolean}
       */
    }, {
      key: "filter",
      value: function filter(fieldValue, searchValue) {
        if (['string', 'number'].indexOf(_typeof(fieldValue)) < 0 || !Array.isArray(searchValue)) {
          return false;
        }
        return searchValue.indexOf(fieldValue) >= 0;
      }

      /**
       * Формирование контента
       * @returns {string}
       */
    }, {
      key: "render",
      value: function render() {
        var that = this;
        var options = this.getOptions();
        var field = typeof options.field === 'string' ? options.field : '';
        var items = [];
        var label = typeof options.label === 'string' || typeof options.label === 'number' ? options.label : '';
        $.each(options.options, function (key, option) {
          if (!coreuiTableUtils.isObject(option) || !option.hasOwnProperty('value') || ['string', 'numeric'].indexOf(_typeof(option.value)) === -1) {
            return;
          }
          var checked = Array.isArray(that._value) ? that._value.indexOf(option.value) >= 0 : false;
          var text = option.hasOwnProperty('text') ? option.text : option.value;
          items.push({
            text: text,
            value: option.value,
            "class": option.hasOwnProperty('class') && typeof option["class"] === 'string' ? option["class"] : that._class,
            checked: checked
          });
        });
        this._control = $(coreuiTableUtils.render(tpl['filters/checkbox.html'], {
          label: label,
          items: items,
          field: field + this.getId(),
          lang: this._table.getLang()
        }));
        $('input', this._control).change(function (e) {
          that._table.searchRecords();
        });
        return this._control;
      }
    }]);
  }(Filter);

  function _callSuper$w(_this, derived, args) {
    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      } catch (e) {
        return false;
      }
    }
    derived = _getPrototypeOf(derived);
    return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));
  }
  var FilterRadio = /*#__PURE__*/function (_Filter) {
    /**
     * Инициализация
     * @param {coreuiTableInstance} table
     * @param {Object}              options
     */
    function FilterRadio(table, options) {
      var _this2;
      _classCallCheck(this, FilterRadio);
      options = $.extend(true, {
        id: null,
        type: 'radio',
        field: null,
        label: null,
        value: null,
        options: []
      }, options);
      _this2 = _callSuper$w(this, FilterRadio, [table, options]);
      _defineProperty(_this2, "_class", 'btn btn-outline-secondary');
      if (_this2._options.value !== null) {
        _this2.setValue(_this2._options.value);
      }
      return _this2;
    }

    /**
     * Установка значения
     * @param {string|number|null} value
     */
    _inherits(FilterRadio, _Filter);
    return _createClass(FilterRadio, [{
      key: "setValue",
      value: function setValue(value) {
        if (value !== null && typeof value !== 'string' && typeof value !== 'number') {
          return;
        }
        this._value = value;
        if (this._control) {
          $('input', this._control).prop('checked', false);
          if (this._value !== null) {
            $('input[value="' + this._value + '"]', this._control).prop('checked', true);
          }
        }
      }

      /**
       * Получение значения
       * @returns {string|null}
       */
    }, {
      key: "getValue",
      value: function getValue() {
        if (this._control) {
          var input = $('input:checked', this._control);
          if (input && input[0]) {
            var value = input.val();
            return value === '' ? null : value;
          }
          return null;
        } else {
          return this._value;
        }
      }

      /**
       * Фильтрация данных
       * @returns {string}              fieldValue
       * @returns {Array|string|number} searchValue
       * @returns {boolean}
       */
    }, {
      key: "filter",
      value: function filter(fieldValue, searchValue) {
        if (['string', 'number'].indexOf(_typeof(fieldValue)) < 0 || ['string', 'number'].indexOf(_typeof(searchValue)) < 0) {
          return false;
        }
        return fieldValue.toString().toLowerCase() === searchValue.toString().toLowerCase();
      }

      /**
       * Формирование контента
       * @returns {string}
       */
    }, {
      key: "render",
      value: function render() {
        var that = this;
        var table = this._table;
        var options = this.getOptions();
        var field = typeof options.field === 'string' ? options.field : '';
        var items = [];
        var label = typeof options.label === 'string' || typeof options.label === 'number' ? options.label : '';
        $.each(options.options, function (key, option) {
          if (!coreuiTableUtils.isObject(option) || !option.hasOwnProperty('value') || ['string', 'numeric'].indexOf(_typeof(option.value)) === -1) {
            return;
          }
          var text = option.hasOwnProperty('text') ? option.text : option.value;
          items.push({
            text: text,
            value: option.value,
            "class": option.hasOwnProperty('class') && typeof option["class"] === 'string' ? option["class"] : that._class,
            checked: option.value == that._value
          });
        });
        this._control = $(coreuiTableUtils.render(tpl['filters/radio.html'], {
          label: label,
          items: items,
          field: field + this.getId(),
          lang: this._table.getLang()
        }));
        $('input', this._control).change(function (e) {
          table.searchRecords();
        });
        return this._control;
      }
    }]);
  }(Filter);

  function _callSuper$v(_this, derived, args) {
    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      } catch (e) {
        return false;
      }
    }
    derived = _getPrototypeOf(derived);
    return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));
  }
  var FilterSelect = /*#__PURE__*/function (_Filter) {
    /**
     * Инициализация
     * @param {coreuiTableInstance} table
     * @param {Object}              options
     */
    function FilterSelect(table, options) {
      var _this2;
      _classCallCheck(this, FilterSelect);
      options = $.extend(true, {
        id: null,
        type: 'select',
        field: null,
        label: null,
        width: null,
        value: null,
        attr: {
          "class": 'form-select d-inline-block'
        },
        options: []
      }, options);
      _this2 = _callSuper$v(this, FilterSelect, [table, options]);
      if (_this2._options.value !== null) {
        _this2.setValue(_this2._options.value);
      }
      return _this2;
    }

    /**
     * Установка значения
     * @param {Array|string|number|null} value
     */
    _inherits(FilterSelect, _Filter);
    return _createClass(FilterSelect, [{
      key: "setValue",
      value: function setValue(value) {
        if (['string', 'number', 'object'].indexOf(_typeof(value)) < 0) {
          return;
        }
        if (_typeof(value) === 'object') {
          if (Array.isArray(value)) {
            var items = [];
            $.each(value, function (key, item) {
              if (typeof value !== 'string' && typeof value !== 'number') {
                return;
              }
              items.push(item);
            });
            this._value = items;
          } else {
            this._value = null;
          }
        } else {
          this._value = [value];
        }
        if (this._control) {
          $('select option:selected', this._control).prop('selected', false);
          if (Array.isArray(this._value)) {
            var control = this._control;
            this._value.map(function (value) {
              $('select option[value="' + value + '"]', control).prop('selected', true);
            });
          }
        }
      }

      /**
       * Получение значения
       * @returns {Array|string|null}
       */
    }, {
      key: "getValue",
      value: function getValue() {
        if (this._control) {
          var isMultiple = !!$('select', this._control).attr('multiple');
          var options = $('select option:checked', this._control);
          var items = [];
          $.each(options, function (key, option) {
            var value = $(option).attr('value');
            if (['string', 'number'].indexOf(_typeof(value)) >= 0 && value !== '') {
              items.push(value);
            }
          });
          return items.length > 0 ? isMultiple ? items : items[0] : null;
        } else {
          return this._value;
        }
      }

      /**
       * Фильтрация данных
       * @returns {string}              fieldValue
       * @returns {Array|string|number} searchValue
       * @returns {boolean}
       */
    }, {
      key: "filter",
      value: function filter(fieldValue, searchValue) {
        if (['string', 'number'].indexOf(_typeof(fieldValue)) < 0 || ['string', 'number'].indexOf(_typeof(searchValue)) < 0 && !Array.isArray(searchValue)) {
          return false;
        }
        if (Array.isArray(searchValue)) {
          return searchValue.indexOf(fieldValue) >= 0;
        } else {
          return fieldValue.toString().toLowerCase() === searchValue.toString().toLowerCase();
        }
      }

      /**
       * Формирование контента
       * @returns {string}
       */
    }, {
      key: "render",
      value: function render() {
        var that = this;
        var options = this.getOptions();
        var selectOptions = [];
        var attributes = [];
        var table = this._table;
        var label = typeof options.label === 'string' || typeof options.label === 'number' ? options.label : '';
        if (!options.hasOwnProperty('attr') || !coreuiTableUtils.isObject(options.attr)) {
          options.attr = {};
        }
        if (options.field) {
          options.attr.name = this._options.field;
        }
        if (options.width) {
          options.attr = coreuiTableUtils.mergeAttr({
            style: 'width:' + options.width + 'px'
          }, options.attr);
        }
        if (options.hasOwnProperty('options') && _typeof(options.options) === 'object' && options.options !== null) {
          $.each(options.options, function (key, option) {
            if (typeof option === 'string' || typeof option === 'number') {
              selectOptions.push(that._buildOption({
                type: 'option',
                value: key,
                text: option
              }));
            } else if (coreuiTableUtils.isObject(option)) {
              var type = option.hasOwnProperty('type') && typeof option.type === 'string' ? option.type : 'option';
              if (type === 'group') {
                var renderAttr = [];
                var groupAttr = {};
                var groupOptions = [];
                if (option.hasOwnProperty('attr') && coreuiTableUtils.isObject(option.attr)) {
                  groupAttr = option.attr;
                }
                if (option.hasOwnProperty('label') && ['string', 'number'].indexOf(_typeof(option.label)) >= 0) {
                  groupAttr.label = option.label;
                }
                $.each(groupAttr, function (name, value) {
                  renderAttr.push(name + '="' + value + '"');
                });
                if (Array.isArray(option.options)) {
                  $.each(option.options, function (key, groupOption) {
                    groupOptions.push(that._buildOption(groupOption));
                  });
                }
                selectOptions.push({
                  type: 'group',
                  attr: renderAttr.length > 0 ? ' ' + renderAttr.join(' ') : '',
                  options: groupOptions
                });
              } else {
                selectOptions.push(that._buildOption(option));
              }
            }
          });
        }
        $.each(options.attr, function (name, value) {
          attributes.push(name + '="' + value + '"');
        });
        this._control = $(coreuiTableUtils.render(tpl['filters/select.html'], {
          label: label,
          attr: attributes.length > 0 ? ' ' + attributes.join(' ') : '',
          options: selectOptions
        }));
        $('select', this._control).change(function (e) {
          table.searchRecords();
        });
        return this._control;
      }

      /**
       * Сборка опции
       * @param option
       * @return {object}
       * @private
       */
    }, {
      key: "_buildOption",
      value: function _buildOption(option) {
        var optionAttr = [];
        var optionText = option.hasOwnProperty('text') && ['string', 'number'].indexOf(_typeof(option.text)) >= 0 ? option.text : '';
        $.each(option, function (name, value) {
          if (name !== 'text') {
            optionAttr.push(name + '="' + value + '"');
          }
        });
        if (Array.isArray(this._value)) {
          $.each(this._value, function (key, itemValue) {
            if (itemValue == option.value) {
              optionAttr.push('selected="selected"');
              return false;
            }
          });
        } else if (this._value == option.value) {
          optionAttr.push('selected="selected"');
        }
        return {
          type: 'option',
          text: optionText,
          attr: optionAttr.length > 0 ? ' ' + optionAttr.join(' ') : ''
        };
      }
    }]);
  }(Filter);

  function _callSuper$u(_this, derived, args) {
    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      } catch (e) {
        return false;
      }
    }
    derived = _getPrototypeOf(derived);
    return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));
  }
  var FilterSwitch = /*#__PURE__*/function (_Filter) {
    /**
     * Инициализация
     * @param {coreuiTableInstance} table
     * @param {Object}              options
     */
    function FilterSwitch(table, options) {
      var _this2;
      _classCallCheck(this, FilterSwitch);
      options = $.extend(true, {
        id: null,
        type: 'switch',
        field: null,
        label: null,
        value: null,
        valueY: 1
      }, options);
      _this2 = _callSuper$u(this, FilterSwitch, [table, options]);
      if (_this2._options.value !== null) {
        _this2.setValue(_this2._options.value);
      }
      return _this2;
    }

    /**
     * Фильтрация данных
     * @returns {string}              fieldValue
     * @returns {Array|string|number} searchValue
     * @returns {boolean}
     */
    _inherits(FilterSwitch, _Filter);
    return _createClass(FilterSwitch, [{
      key: "filter",
      value: function filter(fieldValue, searchValue) {
        if (['string', 'number'].indexOf(_typeof(fieldValue)) < 0 || ['string', 'number'].indexOf(_typeof(searchValue)) < 0) {
          return false;
        }
        return fieldValue.toString() === searchValue.toString();
      }

      /**
       * Установка значения
       * @param {string|number|null} value
       */
    }, {
      key: "setValue",
      value: function setValue(value) {
        if (value !== null && typeof value !== 'string' && typeof value !== 'number') {
          return;
        }
        this._value = value;
        if (this._control) {
          var valueY = typeof this._options.valueY === 'string' || typeof this._options.valueY === 'number' ? this._options.valueY : '';
          if (this._value === null) {
            $('input', this._control).prop('checked', false);
          } else if (this._value === valueY) {
            $('input', this._control).prop('checked', true);
          } else {
            $('input', this._control).prop('checked', false);
          }
        }
      }

      /**
       * Получение значения
       * @returns {string}
       */
    }, {
      key: "getValue",
      value: function getValue() {
        if (this._control) {
          var value = $('input:checked', this._control).val();
          if (typeof value === 'undefined') {
            return null;
          }
          if (typeof value === 'string' && value !== '') {
            return value;
          }
        }
        return this._value;
      }

      /**
       * Формирование контента
       * @returns {string}
       */
    }, {
      key: "render",
      value: function render() {
        var table = this._table;
        var options = this.getOptions();
        var valueY = typeof options.valueY === 'string' || typeof options.valueY === 'number' ? options.valueY : '';
        var label = typeof options.label === 'string' || typeof options.label === 'number' ? options.label : '';
        this._control = $(coreuiTableUtils.render(tpl['filters/switch.html'], {
          id: this._id,
          valueY: valueY,
          field: typeof options.field === 'string' ? options.field : '',
          checked: this._value == valueY,
          label: label
        }));
        $('input', this._control).change(function (e) {
          table.searchRecords();
        });
        return this._control;
      }
    }]);
  }(Filter);

  var Search = /*#__PURE__*/function () {
    /**
     * Инициализация
     * @param {object} table
     * @param {object} options
     */
    function Search(table, options) {
      _classCallCheck(this, Search);
      _defineProperty(this, "_id", null);
      _defineProperty(this, "_table", null);
      _defineProperty(this, "_value", null);
      _defineProperty(this, "_control", null);
      _defineProperty(this, "_options", {
        id: '',
        type: '',
        field: null,
        label: null
      });
      this._table = table;
      this._options = $.extend(true, this._options, options);
      this._id = this._options.hasOwnProperty('id') && typeof this._options.id === 'string' && this._options.id ? this._options.id : coreuiTableUtils.hashCode();
    }

    /**
     * Получение параметров
     * @returns {object}
     */
    return _createClass(Search, [{
      key: "getOptions",
      value: function getOptions() {
        return $.extend(true, {}, this._options);
      }

      /**
       * Получение id
       * @returns {string}
       */
    }, {
      key: "getId",
      value: function getId() {
        return this._id;
      }

      /**
       * Установка значения
       * @param {string} value
       */
    }, {
      key: "setValue",
      value: function setValue(value) {}

      /**
       * Получение значения
       * @returns {string|null}
       */
    }, {
      key: "getValue",
      value: function getValue() {}

      /**
       * Получение название поля
       * @returns {string|null}
       */
    }, {
      key: "getField",
      value: function getField() {
        return this._options.field;
      }

      /**
       * Фильтрация данных
       * @returns {string} fieldValue
       * @returns {string} searchValue
       * @returns {boolean}
       */
    }, {
      key: "filter",
      value: function filter(fieldValue, searchValue) {
        if (['string', 'number'].indexOf(_typeof(fieldValue)) < 0 || ['string', 'number'].indexOf(_typeof(searchValue)) < 0) {
          return false;
        }
        return fieldValue.toString().toLowerCase().indexOf(searchValue.toString().toLowerCase()) >= 0;
      }

      /**
       * Формирование контента
       * @returns {jQuery|string}
       */
    }, {
      key: "render",
      value: function render() {}
    }]);
  }();

  function _callSuper$t(_this, derived, args) {
    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      } catch (e) {
        return false;
      }
    }
    derived = _getPrototypeOf(derived);
    return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));
  }
  var SearchText = /*#__PURE__*/function (_Search) {
    /**
     * Инициализация
     * @param {coreuiTableInstance} table
     * @param {Object}              options
     */
    function SearchText(table, options) {
      var _this2;
      _classCallCheck(this, SearchText);
      options = $.extend(true, {
        id: null,
        type: 'text',
        field: null,
        label: null,
        value: null,
        width: 200,
        attr: {
          "class": "form-control d-inline-block"
        }
      }, options);
      _this2 = _callSuper$t(this, SearchText, [table, options]);
      if (_this2._options.value !== null) {
        _this2.setValue(_this2._options.value);
      }
      return _this2;
    }

    /**
     * Установка значения
     * @param {string} value
     */
    _inherits(SearchText, _Search);
    return _createClass(SearchText, [{
      key: "setValue",
      value: function setValue(value) {
        if (value !== null && typeof value !== 'string' && typeof value !== 'number') {
          return;
        }
        this._value = value;
        if (this._control) {
          this._control.val(this._value === null ? '' : this._value);
        }
      }

      /**
       * Получение значения
       * @returns {string|null}
       */
    }, {
      key: "getValue",
      value: function getValue() {
        if (this._control) {
          var value = this._control.val();
          if (typeof value === 'string' && value !== '') {
            return value;
          }
        }
        return this._value;
      }

      /**
       * Формирование контента
       * @returns {jQuery}
       */
    }, {
      key: "render",
      value: function render() {
        if (!coreuiTableUtils.isObject(this._options.attr)) {
          this._options.attr = {};
        }
        if (this._options.hasOwnProperty('width') && coreuiTableUtils.isNumeric(this._options.width)) {
          if (this._options.attr.hasOwnProperty('style')) {
            this._options.attr['style'] += ';width:' + this._options.width + 'px';
          } else {
            this._options.attr['style'] = 'width:' + this._options.width + 'px';
          }
        }
        this._options.attr['value'] = typeof this._value === 'string' || typeof this._value === 'number' ? this._value : '';
        if (this._options.attr.hasOwnProperty('type')) {
          delete this._options.attr.type;
        }
        var attributes = [];
        var table = this._table;
        $.each(this._options.attr, function (name, value) {
          if (['string', 'number'].indexOf(_typeof(value)) >= 0) {
            attributes.push(name + '="' + value + '"');
          }
        });
        this._control = $(coreuiTableUtils.render(tpl['search/text.html'], {
          attr: attributes.length > 0 ? ' ' + attributes.join(' ') : ''
        }));
        $('input', this._control).keyup(function (e) {
          if (e.key === 'Enter' || e.keyCode === 13) {
            table.searchRecords();
            var container = coreuiTableElements.getSearchContainer(table.getId());
            container.fadeOut('fast');
          }
        });
        return this._control;
      }
    }]);
  }(Search);

  function _callSuper$s(_this, derived, args) {
    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      } catch (e) {
        return false;
      }
    }
    derived = _getPrototypeOf(derived);
    return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));
  }
  var SearchNumber = /*#__PURE__*/function (_Search) {
    /**
     * Инициализация
     * @param {coreuiTableInstance} table
     * @param {Object}              options
     */
    function SearchNumber(table, options) {
      var _this2;
      _classCallCheck(this, SearchNumber);
      options = $.extend(true, {
        id: null,
        type: 'number',
        field: null,
        label: null,
        value: null,
        width: 200,
        attr: {
          "class": "form-control d-inline-block"
        }
      }, options);
      _this2 = _callSuper$s(this, SearchNumber, [table, options]);
      if (_this2._options.value !== null) {
        _this2.setValue(_this2._options.value);
      }
      return _this2;
    }

    /**
     * Установка значения
     * @param {Object} value
     */
    _inherits(SearchNumber, _Search);
    return _createClass(SearchNumber, [{
      key: "setValue",
      value: function setValue(value) {
        if (value) {
          if (!coreuiTableUtils.isObject(value)) {
            return;
          }
          var numberStart = null;
          var numberEnd = null;
          if (value.hasOwnProperty('start') && ['string', 'number'].indexOf(_typeof(value.start)) >= 0 && !isNaN(Number(value.start))) {
            numberStart = Number(value.start);
          }
          if (value.hasOwnProperty('end') && ['string', 'number'].indexOf(_typeof(value.end)) >= 0 && !isNaN(Number(value.end))) {
            numberEnd = Number(value.end);
          }
          if (numberStart === null && numberEnd === null) {
            this._value = null;
          } else {
            this._value = {
              start: numberStart,
              end: numberEnd
            };
          }
        } else {
          this._value = null;
        }
        if (this._control) {
          var inputStart = this._control.parent().find('input.number-start');
          var inputEnd = this._control.parent().find('input.number-end');
          if (this._value === null) {
            inputStart.val('');
            inputEnd.val('');
          } else if (coreuiTableUtils.isObject(this._value)) {
            inputStart.val(_typeof(this._value.start) !== null ? this._value.start : '');
            inputEnd.val(_typeof(this._value.end) !== null ? this._value.end : '');
          }
        }
      }

      /**
       * Получение значения
       * @returns {string|null}
       */
    }, {
      key: "getValue",
      value: function getValue() {
        if (this._control) {
          var inputStart = this._control.parent().find('input.number-start');
          var inputEnd = this._control.parent().find('input.number-end');
          if (inputStart[0] && inputEnd[0]) {
            var valueStart = inputStart.val();
            var valueEnd = inputEnd.val();
            if (typeof valueStart === 'string' && valueStart !== '' || typeof valueEnd === 'string' && valueEnd !== '') {
              return {
                start: valueStart !== '' && !isNaN(Number(valueStart)) ? Number(valueStart) : null,
                end: valueEnd !== '' && !isNaN(Number(valueEnd)) ? Number(valueEnd) : null
              };
            }
          }
        }
        return this._value;
      }

      /**
       * Фильтрация данных
       * @returns {string}              fieldValue
       * @returns {Array|string|number} searchValue
       * @returns {boolean}
       */
    }, {
      key: "filter",
      value: function filter(fieldValue, searchValue) {
        if (['string', 'number'].indexOf(_typeof(fieldValue)) < 0 || !coreuiTableUtils.isObject(searchValue) || ['string', 'number'].indexOf(_typeof(searchValue.start)) < 0 && ['string', 'number'].indexOf(_typeof(searchValue.end)) < 0) {
          return false;
        }
        var issetStart = ['string', 'number'].indexOf(_typeof(searchValue.start)) >= 0;
        var issetEnd = ['string', 'number'].indexOf(_typeof(searchValue.end)) >= 0;
        if (issetStart && issetEnd) {
          return fieldValue >= searchValue.start && fieldValue <= searchValue.end;
        } else if (issetStart) {
          return fieldValue >= searchValue.start;
        } else {
          return fieldValue <= searchValue.end;
        }
      }

      /**
       * Формирование контента
       * @returns {jQuery}
       */
    }, {
      key: "render",
      value: function render() {
        if (!coreuiTableUtils.isObject(this._options.attr)) {
          this._options.attr = {};
        }
        if (this._options.hasOwnProperty('width') && coreuiTableUtils.isNumeric(this._options.width)) {
          if (this._options.attr.hasOwnProperty('style')) {
            this._options.attr['style'] += ';width:' + this._options.width + 'px';
          } else {
            this._options.attr['style'] = 'width:' + this._options.width + 'px';
          }
        }
        if (this._options.attr.hasOwnProperty('type')) {
          delete this._options.attr.type;
        }
        if (this._options.attr.hasOwnProperty('value')) {
          delete this._options.attr.value;
        }
        var field = typeof this._options.field === 'string' ? this._options.field : '';
        var startAttr = [];
        var startEnd = [];
        var table = this._table;
        $.each(this._options.attr, function (name, value) {
          if (['name', 'value', 'class'].indexOf(name) >= 0 || ['string', 'number'].indexOf(_typeof(value)) < 0) {
            return;
          }
          startAttr.push(name + '="' + value + '"');
          startEnd.push(name + '="' + value + '"');
        });
        if (this._options.attr.hasOwnProperty('class') && ['string', 'number'].indexOf(_typeof(this._options.attr["class"])) >= 0) {
          startAttr.push('class="' + this._options.attr["class"] + ' number-start"');
          startEnd.push('class="' + this._options.attr["class"] + ' number-end"');
        } else {
          startAttr.push('class="number-start"');
          startEnd.push('class="number-end"');
        }
        if (field) {
          startAttr.push('name="' + field + '[start]"');
          startEnd.push('name="' + field + '[end]"');
        }
        startAttr.push('value="' + (this._value ? this._value.start : '') + '"');
        startEnd.push('value="' + (this._value ? this._value.end : '') + '"');
        this._control = $(coreuiTableUtils.render(tpl['search/number.html'], {
          startAttr: startAttr.length > 0 ? ' ' + startAttr.join(' ') : '',
          endAttr: startEnd.length > 0 ? ' ' + startEnd.join(' ') : ''
        }));
        $('input.number-start, input.number-end', this._control).keyup(function (e) {
          if (e.key === 'Enter' || e.keyCode === 13) {
            table.searchRecords();
            var container = coreuiTableElements.getSearchContainer(table.getId());
            container.fadeOut('fast');
          }
        });
        return this._control;
      }
    }]);
  }(Search);

  function _callSuper$r(_this, derived, args) {
    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      } catch (e) {
        return false;
      }
    }
    derived = _getPrototypeOf(derived);
    return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));
  }
  var SearchDate = /*#__PURE__*/function (_Search) {
    /**
     * Инициализация
     * @param {coreuiTableInstance} table
     * @param {Object}              options
     */
    function SearchDate(table, options) {
      var _this2;
      _classCallCheck(this, SearchDate);
      options = $.extend(true, {
        id: null,
        type: 'date',
        field: null,
        label: null,
        value: null,
        width: 200,
        attr: {
          "class": "form-control d-inline-block"
        }
      }, options);
      _this2 = _callSuper$r(this, SearchDate, [table, options]);
      if (_this2._options.value !== null) {
        _this2.setValue(_this2._options.value);
      }
      return _this2;
    }

    /**
     * Установка значения
     * @param {string} value
     */
    _inherits(SearchDate, _Search);
    return _createClass(SearchDate, [{
      key: "setValue",
      value: function setValue(value) {
        if (typeof value !== 'string' && value !== null) {
          return;
        }
        if (value && (value.match(/^\d{4}\-\d{2}\-\d{2}$/) === null || isNaN(new Date(value)))) {
          return;
        }
        this._value = value;
        if (this._control) {
          this._control.val(this._value === null ? '' : this._value);
        }
      }

      /**
       * Получение значения
       * @returns {string|null}
       */
    }, {
      key: "getValue",
      value: function getValue() {
        if (this._control) {
          var value = this._control.val();
          if (typeof value === 'string' && value !== '') {
            return value;
          }
        }
        return this._value;
      }

      /**
       * Фильтрация данных
       * @returns {string}              fieldValue
       * @returns {Array|string|number} searchValue
       * @returns {boolean}
       */
    }, {
      key: "filter",
      value: function filter(fieldValue, searchValue) {
        if (['string', 'number'].indexOf(_typeof(fieldValue)) < 0 || ['string', 'number'].indexOf(_typeof(searchValue)) < 0) {
          return false;
        }
        return fieldValue.toString().indexOf(searchValue.toString()) === 0;
      }

      /**
       * Формирование контента
       * @returns {jQuery}
       */
    }, {
      key: "render",
      value: function render() {
        if (!coreuiTableUtils.isObject(this._options.attr)) {
          this._options.attr = {};
        }
        if (this._options.hasOwnProperty('width') && coreuiTableUtils.isNumeric(this._options.width)) {
          if (this._options.attr.hasOwnProperty('style')) {
            this._options.attr['style'] += ';width:' + this._options.width + 'px';
          } else {
            this._options.attr['style'] = 'width:' + this._options.width + 'px';
          }
        }
        this._options.attr['value'] = typeof this._value === 'string' || typeof this._value === 'number' ? this._value : '';
        if (this._options.attr.hasOwnProperty('type')) {
          delete this._options.attr.type;
        }
        var attributes = [];
        var table = this._table;
        $.each(this._options.attr, function (name, value) {
          attributes.push(name + '="' + value + '"');
        });
        this._control = $(coreuiTableUtils.render(tpl['search/date.html'], {
          attr: attributes.length > 0 ? ' ' + attributes.join(' ') : ''
        }));
        this._control.keyup(function (e) {
          if (e.key === 'Enter' || e.keyCode === 13) {
            table.searchRecords();
            var container = coreuiTableElements.getSearchContainer(table.getId());
            container.fadeOut('fast');
          }
        });
        return this._control;
      }
    }]);
  }(Search);

  function _callSuper$q(_this, derived, args) {
    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      } catch (e) {
        return false;
      }
    }
    derived = _getPrototypeOf(derived);
    return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));
  }
  var SearchDateMonth = /*#__PURE__*/function (_Search) {
    /**
     * Инициализация
     * @param {coreuiTableInstance} table
     * @param {Object}              options
     */
    function SearchDateMonth(table, options) {
      var _this2;
      _classCallCheck(this, SearchDateMonth);
      options = $.extend(true, {
        id: null,
        type: 'date_month',
        field: null,
        label: null,
        value: null,
        width: 200,
        attr: {
          "class": "form-control d-inline-block"
        }
      }, options);
      _this2 = _callSuper$q(this, SearchDateMonth, [table, options]);
      if (_this2._options.value !== null) {
        _this2.setValue(_this2._options.value);
      }
      return _this2;
    }

    /**
     * Установка значения
     * @param {string|null} value
     */
    _inherits(SearchDateMonth, _Search);
    return _createClass(SearchDateMonth, [{
      key: "setValue",
      value: function setValue(value) {
        if (typeof value !== 'string' && value !== null) {
          return;
        }
        if (value && (value.match(/^\d{4}\-\d{2}$/) === null || isNaN(new Date(value)))) {
          return;
        }
        this._value = value;
        if (this._control) {
          this._control.val(this._value === null ? '' : this._value);
        }
      }

      /**
       * Получение значения
       * @returns {string|null}
       */
    }, {
      key: "getValue",
      value: function getValue() {
        if (this._control) {
          var value = this._control.val();
          if (typeof value === 'string' && value !== '') {
            return value;
          }
          return null;
        }
        return this._value;
      }

      /**
       * Фильтрация данных
       * @returns {string} fieldValue
       * @returns {string} searchValue
       * @returns {boolean}
       */
    }, {
      key: "filter",
      value: function filter(fieldValue, searchValue) {
        if (['string', 'number'].indexOf(_typeof(fieldValue)) < 0 || ['string', 'number'].indexOf(_typeof(searchValue)) < 0) {
          return false;
        }
        return fieldValue.toString().toLowerCase().indexOf(searchValue.toString().toLowerCase()) === 0;
      }

      /**
       * Формирование контента
       * @returns {jQuery}
       */
    }, {
      key: "render",
      value: function render() {
        if (!coreuiTableUtils.isObject(this._options.attr)) {
          this._options.attr = {};
        }
        if (this._options.hasOwnProperty('width') && coreuiTableUtils.isNumeric(this._options.width)) {
          if (this._options.attr.hasOwnProperty('style')) {
            this._options.attr['style'] += ';width:' + this._options.width + 'px';
          } else {
            this._options.attr['style'] = 'width:' + this._options.width + 'px';
          }
        }
        this._options.attr['value'] = typeof this._value === 'string' || typeof this._value === 'number' ? this._value : '';
        if (this._options.attr.hasOwnProperty('type')) {
          delete this._options.attr.type;
        }
        var attributes = [];
        var table = this._table;
        $.each(this._options.attr, function (name, value) {
          attributes.push(name + '="' + value + '"');
        });
        this._control = $(coreuiTableUtils.render(tpl['search/date_month.html'], {
          attr: attributes.length > 0 ? ' ' + attributes.join(' ') : ''
        }));
        this._control.keyup(function (e) {
          if (e.key === 'Enter' || e.keyCode === 13) {
            table.searchRecords();
            var container = coreuiTableElements.getSearchContainer(table.getId());
            container.fadeOut('fast');
          }
        });
        return this._control;
      }
    }]);
  }(Search);

  function _callSuper$p(_this, derived, args) {
    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      } catch (e) {
        return false;
      }
    }
    derived = _getPrototypeOf(derived);
    return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));
  }
  var SearchDatetime = /*#__PURE__*/function (_Search) {
    /**
     * Инициализация
     * @param {coreuiTableInstance} table
     * @param {Object}              options
     */
    function SearchDatetime(table, options) {
      var _this2;
      _classCallCheck(this, SearchDatetime);
      options = $.extend(true, {
        id: null,
        type: 'datetime',
        field: null,
        label: null,
        value: null,
        width: 200,
        attr: {
          "class": "form-control d-inline-block"
        }
      }, options);
      _this2 = _callSuper$p(this, SearchDatetime, [table, options]);
      if (_this2._options.value !== null) {
        _this2.setValue(_this2._options.value);
      }
      return _this2;
    }

    /**
     * Установка значения
     * @param {string} value
     */
    _inherits(SearchDatetime, _Search);
    return _createClass(SearchDatetime, [{
      key: "setValue",
      value: function setValue(value) {
        if (typeof value !== 'string' && value !== null) {
          return;
        }
        if (value && (value.match(/^\d{4}\-\d{2}\-\d{2}(T| )\d{2}:\d{2}(:\d{2}|)$/) === null || isNaN(new Date(value)))) {
          return;
        }
        this._value = value;
        if (this._control) {
          this._control.val(this._value === null ? '' : this._value);
        }
      }

      /**
       * Получение значения
       * @returns {string}
       */
    }, {
      key: "getValue",
      value: function getValue() {
        if (this._control) {
          var value = this._control.val();
          if (typeof value === 'string' && value !== '') {
            return value;
          }
        }
        return this._value;
      }

      /**
       * Фильтрация данных
       * @returns {string}              fieldValue
       * @returns {Array|string|number} searchValue
       * @returns {boolean}
       */
    }, {
      key: "filter",
      value: function filter(fieldValue, searchValue) {
        if (['string', 'number'].indexOf(_typeof(fieldValue)) < 0 || ['string', 'number'].indexOf(_typeof(searchValue)) < 0) {
          return false;
        }
        return fieldValue.toString() === searchValue.toString();
      }

      /**
       * Формирование контента
       * @returns {jQuery}
       */
    }, {
      key: "render",
      value: function render() {
        if (!coreuiTableUtils.isObject(this._options.attr)) {
          this._options.attr = {};
        }
        if (this._options.hasOwnProperty('width') && coreuiTableUtils.isNumeric(this._options.width)) {
          if (this._options.attr.hasOwnProperty('style')) {
            this._options.attr['style'] += ';width:' + this._options.width + 'px';
          } else {
            this._options.attr['style'] = 'width:' + this._options.width + 'px';
          }
        }
        this._options.attr['value'] = typeof this._value === 'string' || typeof this._value === 'number' ? this._value : '';
        if (this._options.attr.hasOwnProperty('type')) {
          delete this._options.attr.type;
        }
        var attributes = [];
        var table = this._table;
        $.each(this._options.attr, function (name, value) {
          if (['string', 'number'].indexOf(_typeof(value)) >= 0) {
            attributes.push(name + '="' + value + '"');
          }
        });
        this._control = $(coreuiTableUtils.render(tpl['search/datetime.html'], {
          attr: attributes.length > 0 ? ' ' + attributes.join(' ') : ''
        }));
        this._control.keyup(function (e) {
          if (e.key === 'Enter' || e.keyCode === 13) {
            table.searchRecords();
            var container = coreuiTableElements.getSearchContainer(table.getId());
            container.fadeOut('fast');
          }
        });
        return this._control;
      }
    }]);
  }(Search);

  function _callSuper$o(_this, derived, args) {
    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      } catch (e) {
        return false;
      }
    }
    derived = _getPrototypeOf(derived);
    return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));
  }
  var SearchDateRange = /*#__PURE__*/function (_Search) {
    /**
     * Инициализация
     * @param {coreuiTableInstance} table
     * @param {Object}              options
     */
    function SearchDateRange(table, options) {
      var _this2;
      _classCallCheck(this, SearchDateRange);
      options = $.extend(true, {
        id: null,
        type: 'date_range',
        field: null,
        label: null,
        value: null,
        width: 200,
        attr: {
          "class": "form-control d-inline-block"
        }
      }, options);
      _this2 = _callSuper$o(this, SearchDateRange, [table, options]);
      if (_this2._options.value !== null) {
        _this2.setValue(_this2._options.value);
      }
      return _this2;
    }

    /**
     * Установка значения
     * @param {Object} value
     */
    _inherits(SearchDateRange, _Search);
    return _createClass(SearchDateRange, [{
      key: "setValue",
      value: function setValue(value) {
        if (value) {
          if (!coreuiTableUtils.isObject(value)) {
            return;
          }
          var dateStart = null;
          var dateEnd = null;
          if (value.hasOwnProperty('start') && typeof value.start === 'string' && value.start.match(/^\d{4}\-\d{2}\-\d{2}$/) === null && isNaN(new Date(value.start))) {
            dateStart = value.start;
          }
          if (value.hasOwnProperty('end') && typeof value.end === 'string' && value.end.match(/^\d{4}\-\d{2}\-\d{2}$/) === null && isNaN(new Date(value.end))) {
            dateEnd = value.end;
          }
          if (dateStart === null && dateEnd === null) {
            this._value = null;
          } else {
            this._value = {
              start: dateStart,
              end: dateEnd
            };
          }
        } else {
          this._value = null;
        }
        if (this._control) {
          var inputStart = this._control.parent().find('input.date-start');
          var inputEnd = this._control.parent().find('input.date-end');
          if (this._value === null) {
            inputStart.val('');
            inputEnd.val('');
          } else if (coreuiTableUtils.isObject(this._value)) {
            inputStart.val(_typeof(this._value.start) !== null ? this._value.start : '');
            inputEnd.val(_typeof(this._value.end) !== null ? this._value.end : '');
          }
        }
      }

      /**
       * Получение значения
       * @returns {Object|null}
       */
    }, {
      key: "getValue",
      value: function getValue() {
        if (this._control) {
          var inputStart = this._control.parent().find('input.date-start');
          var inputEnd = this._control.parent().find('input.date-end');
          if (inputStart[0] && inputEnd[0]) {
            var valueStart = inputStart.val();
            var valueEnd = inputEnd.val();
            if (typeof valueStart === 'string' && valueStart !== '' || typeof valueEnd === 'string' && valueEnd !== '') {
              return {
                start: valueStart !== '' ? valueStart : null,
                end: valueEnd !== '' ? valueEnd : null
              };
            }
          }
        }
        return this._value;
      }

      /**
       * Фильтрация данных
       * @returns {string} fieldValue
       * @returns {Object} searchValue
       * @returns {boolean}
       */
    }, {
      key: "filter",
      value: function filter(fieldValue, searchValue) {
        if (['string', 'number'].indexOf(_typeof(fieldValue)) < 0 || !coreuiTableUtils.isObject(searchValue) || typeof searchValue.start !== 'string' && typeof searchValue.end !== 'string') {
          return false;
        }
        var issetStart = ['string', 'number'].indexOf(_typeof(searchValue.start)) >= 0;
        var issetEnd = ['string', 'number'].indexOf(_typeof(searchValue.end)) >= 0;
        if (issetStart && issetEnd) {
          return fieldValue >= searchValue.start && fieldValue <= searchValue.end;
        } else if (issetStart) {
          return fieldValue >= searchValue.start;
        } else {
          return fieldValue <= searchValue.end;
        }
      }

      /**
       * Формирование контента
       * @returns {string}
       */
    }, {
      key: "render",
      value: function render() {
        var options = this.getOptions();
        if (!coreuiTableUtils.isObject(options.attr)) {
          options.attr = {};
        }
        if (options.hasOwnProperty('width') && coreuiTableUtils.isNumeric(options.width)) {
          if (options.attr.hasOwnProperty('style')) {
            options.attr['style'] += ';width:' + options.width + 'px';
          } else {
            options.attr['style'] = 'width:' + options.width + 'px';
          }
        }
        if (options.attr.hasOwnProperty('type')) {
          delete options.attr.type;
        }
        if (options.attr.hasOwnProperty('value')) {
          delete options.attr.value;
        }
        var startAttr = [];
        var startEnd = [];
        this._table;
        $.each(options.attr, function (name, value) {
          if (['name', 'value', 'class'].indexOf(name) >= 0 || ['string', 'number'].indexOf(_typeof(value)) < 0) {
            return;
          }
          startAttr.push(name + '="' + value + '"');
          startEnd.push(name + '="' + value + '"');
        });
        if (options.attr.hasOwnProperty('class') && ['string', 'number'].indexOf(_typeof(options.attr["class"])) >= 0) {
          startAttr.push('class="' + options.attr["class"] + ' date-start"');
          startEnd.push('class="' + options.attr["class"] + ' date-end"');
        } else {
          startAttr.push('class="date-start"');
          startEnd.push('class="date-end"');
        }
        startAttr.push('value="' + (this._value ? this._value.start : '') + '"');
        startEnd.push('value="' + (this._value ? this._value.end : '') + '"');
        var control = $(coreuiTableUtils.render(tpl['search/date_range.html'], {
          startAttr: startAttr.length > 0 ? ' ' + startAttr.join(' ') : '',
          endAttr: startEnd.length > 0 ? ' ' + startEnd.join(' ') : ''
        }));
        $('input.date-start', control).change(function () {
          var dateEnd = $('input.date-end', control).attr('min', $(this).val());
          if ("showPicker" in HTMLInputElement.prototype) {
            $(dateEnd)[0].showPicker();
          }
        });
        $('input.date-end', control).change(function () {
          $('input.date-start', control).attr('max', $(this).val());
        });
        this._control = control;
        return this._control;
      }
    }]);
  }(Search);

  function _callSuper$n(_this, derived, args) {
    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      } catch (e) {
        return false;
      }
    }
    derived = _getPrototypeOf(derived);
    return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));
  }
  var SearchDatetimeRange = /*#__PURE__*/function (_Search) {
    /**
     * Инициализация
     * @param {coreuiTableInstance} table
     * @param {Object}              options
     */
    function SearchDatetimeRange(table, options) {
      var _this2;
      _classCallCheck(this, SearchDatetimeRange);
      options = $.extend(true, {
        id: null,
        type: 'datetime_range',
        field: null,
        label: null,
        value: null,
        width: 200,
        attr: {
          "class": "form-control d-inline-block"
        }
      }, options);
      _this2 = _callSuper$n(this, SearchDatetimeRange, [table, options]);
      if (_this2._options.value !== null) {
        _this2.setValue(_this2._options.value);
      }
      return _this2;
    }

    /**
     * Установка значения
     * @param {Object} value
     */
    _inherits(SearchDatetimeRange, _Search);
    return _createClass(SearchDatetimeRange, [{
      key: "setValue",
      value: function setValue(value) {
        if (value) {
          if (!coreuiTableUtils.isObject(value)) {
            return;
          }
          var dateStart = null;
          var dateEnd = null;
          if (value.hasOwnProperty('start') && typeof value.start === 'string' && value.start.match(/^\d{4}\-\d{2}\-\d{2} \d{2}:\d{2}:\d{2}$/) === null && isNaN(new Date(value.start))) {
            dateStart = value.start;
          }
          if (value.hasOwnProperty('end') && typeof value.end === 'string' && value.end.match(/^\d{4}\-\d{2}\-\d{2} \d{2}:\d{2}:\d{2}$/) === null && isNaN(new Date(value.end))) {
            dateEnd = value.end;
          }
          if (dateStart === null && dateEnd === null) {
            this._value = null;
          } else {
            this._value = {
              start: dateStart,
              end: dateEnd
            };
          }
        } else {
          this._value = null;
        }
        if (this._control) {
          var inputStart = this._control.parent().find('input.date-start');
          var inputEnd = this._control.parent().find('input.date-end');
          if (this._value === null) {
            inputStart.val('');
            inputEnd.val('');
          } else if (coreuiTableUtils.isObject(this._value)) {
            inputStart.val(_typeof(this._value.start) !== null ? this._value.start : '');
            inputEnd.val(_typeof(this._value.end) !== null ? this._value.end : '');
          }
        }
      }

      /**
       * Получение значения
       * @returns {Object|null}
       */
    }, {
      key: "getValue",
      value: function getValue() {
        if (this._control) {
          var inputStart = this._control.parent().find('input.date-start');
          var inputEnd = this._control.parent().find('input.date-end');
          if (inputStart[0] && inputEnd[0]) {
            var valueStart = inputStart.val();
            var valueEnd = inputEnd.val();
            if (typeof valueStart === 'string' && valueStart !== '' || typeof valueEnd === 'string' && valueEnd !== '') {
              return {
                start: valueStart !== '' ? valueStart : null,
                end: valueEnd !== '' ? valueEnd : null
              };
            }
          }
        }
        return this._value;
      }

      /**
       * Фильтрация данных
       * @returns {string}              fieldValue
       * @returns {Array|string|number} searchValue
       * @returns {boolean}
       */
    }, {
      key: "filter",
      value: function filter(fieldValue, searchValue) {
        if (['string', 'number'].indexOf(_typeof(fieldValue)) < 0 || !coreuiTableUtils.isObject(searchValue) || typeof searchValue.start !== 'string' && typeof searchValue.end !== 'string') {
          return false;
        }
        var issetStart = ['string', 'number'].indexOf(_typeof(searchValue.start)) >= 0;
        var issetEnd = ['string', 'number'].indexOf(_typeof(searchValue.end)) >= 0;
        if (issetStart && issetEnd) {
          return fieldValue >= searchValue.start && fieldValue <= searchValue.end;
        } else if (issetStart) {
          return fieldValue >= searchValue.start;
        } else {
          return fieldValue <= searchValue.end;
        }
      }

      /**
       * Формирование контента
       * @returns {string}
       */
    }, {
      key: "render",
      value: function render() {
        if (!coreuiTableUtils.isObject(this._options.attr)) {
          this._options.attr = {};
        }
        if (this._options.hasOwnProperty('width') && coreuiTableUtils.isNumeric(this._options.width)) {
          if (this._options.attr.hasOwnProperty('style')) {
            this._options.attr['style'] += ';width:' + this._options.width + 'px';
          } else {
            this._options.attr['style'] = 'width:' + this._options.width + 'px';
          }
        }
        if (this._options.attr.hasOwnProperty('type')) {
          delete this._options.attr.type;
        }
        if (this._options.attr.hasOwnProperty('value')) {
          delete this._options.attr.value;
        }
        var startAttr = [];
        var startEnd = [];
        this._table;
        $.each(this._options.attr, function (name, value) {
          if (['name', 'value', 'class'].indexOf(name) >= 0 || ['string', 'number'].indexOf(_typeof(value)) < 0) {
            return;
          }
          startAttr.push(name + '="' + value + '"');
          startEnd.push(name + '="' + value + '"');
        });
        if (this._options.attr.hasOwnProperty('class') && ['string', 'number'].indexOf(_typeof(this._options.attr["class"])) >= 0) {
          startAttr.push('class="' + this._options.attr["class"] + ' date-start"');
          startEnd.push('class="' + this._options.attr["class"] + ' date-end"');
        } else {
          startAttr.push('class="date-start"');
          startEnd.push('class="date-end"');
        }
        startAttr.push('value="' + (this._value ? this._value.start : '') + '"');
        startEnd.push('value="' + (this._value ? this._value.end : '') + '"');
        var control = $(coreuiTableUtils.render(tpl['search/datetime_range.html'], {
          startAttr: startAttr.length > 0 ? ' ' + startAttr.join(' ') : '',
          endAttr: startEnd.length > 0 ? ' ' + startEnd.join(' ') : ''
        }));
        $('input.date-start', control).change(function () {
          var dateEnd = $('input.date-end', control).attr('min', $(this).val());
          if ("showPicker" in HTMLInputElement.prototype) {
            $(dateEnd)[0].showPicker();
          }
        });
        $('input.date-end', control).change(function () {
          $('input.date-start', control).attr('max', $(this).val());
        });
        this._control = control;
        return this._control;
      }
    }]);
  }(Search);

  function _callSuper$m(_this, derived, args) {
    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      } catch (e) {
        return false;
      }
    }
    derived = _getPrototypeOf(derived);
    return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));
  }
  var SearchCheckbox = /*#__PURE__*/function (_Search) {
    /**
     * Инициализация
     * @param {coreuiTableInstance} table
     * @param {Object}              options
     */
    function SearchCheckbox(table, options) {
      var _this2;
      _classCallCheck(this, SearchCheckbox);
      options = $.extend(true, {
        id: null,
        type: 'checkbox',
        field: null,
        label: null,
        value: null,
        options: []
      }, options);
      _this2 = _callSuper$m(this, SearchCheckbox, [table, options]);
      if (_this2._options.value !== null) {
        _this2.setValue(_this2._options.value);
      }
      return _this2;
    }

    /**
     * Установка значения
     * @param {Array|null} value
     */
    _inherits(SearchCheckbox, _Search);
    return _createClass(SearchCheckbox, [{
      key: "setValue",
      value: function setValue(value) {
        if (['string', 'number', 'object'].indexOf(_typeof(value)) < 0) {
          return;
        }
        if (_typeof(value) === 'object') {
          if (Array.isArray(value)) {
            var items = [];
            $.each(value, function (key, item) {
              if (typeof item !== 'string' && typeof item !== 'number') {
                return;
              }
              items.push(item);
            });
            this._value = items;
          } else {
            this._value = null;
          }
        } else {
          this._value = [value];
        }
        if (this._control) {
          $('input:checked', this._control).prop('checked', false);
          if (Array.isArray(this._value)) {
            $.each(this._value, function (key, value) {
              $('input[value="' + value + '"]', this._control).prop('checked', true);
            });
          }
        }
      }

      /**
       * Получение значения
       * @returns {Array|null}
       */
    }, {
      key: "getValue",
      value: function getValue() {
        if (this._control) {
          var inputs = $('input:checked', this._control);
          var items = [];
          $.each(inputs, function (key, input) {
            var value = $(input).attr('value');
            if (['string', 'number'].indexOf(_typeof(value)) >= 0 && value !== '') {
              items.push(value);
            }
          });
          return items.length > 0 ? items : null;
        } else {
          return this._value;
        }
      }

      /**
       * Фильтрация данных
       * @returns {string} fieldValue
       * @returns {Array}  searchValue
       * @returns {boolean}
       */
    }, {
      key: "filter",
      value: function filter(fieldValue, searchValue) {
        if (['string', 'number'].indexOf(_typeof(fieldValue)) < 0 || !Array.isArray(searchValue)) {
          return false;
        }
        return searchValue.indexOf(fieldValue) >= 0;
      }

      /**
       * Формирование контента
       * @returns {string}
       */
    }, {
      key: "render",
      value: function render() {
        var that = this;
        var options = [];
        $.each(this._options.options, function (key, option) {
          if (['string', 'numeric'].indexOf(_typeof(option)) >= 0) {
            var checked = Array.isArray(that._value) ? that._value.indexOf(key) >= 0 : false;
            options.push({
              text: option,
              value: key,
              checked: checked
            });
          } else {
            if (!coreuiTableUtils.isObject(option) || !option.hasOwnProperty('value') || ['string', 'numeric'].indexOf(_typeof(option.value)) === -1) {
              return;
            }
            var _checked = Array.isArray(that._value) ? that._value.indexOf(option.value) >= 0 : false;
            var text = option.hasOwnProperty('text') ? option.text : option.value;
            options.push({
              text: text,
              value: option.value,
              checked: _checked
            });
          }
        });
        this._control = $(coreuiTableUtils.render(tpl['search/checkbox.html'], {
          options: options
        }));
        return this._control;
      }
    }]);
  }(Search);

  function _callSuper$l(_this, derived, args) {
    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      } catch (e) {
        return false;
      }
    }
    derived = _getPrototypeOf(derived);
    return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));
  }
  var SearchCheckboxBtn = /*#__PURE__*/function (_Search) {
    /**
     * Инициализация
     * @param {coreuiTableInstance} table
     * @param {Object}              options
     */
    function SearchCheckboxBtn(table, options) {
      var _this2;
      _classCallCheck(this, SearchCheckboxBtn);
      options = $.extend(true, {
        id: null,
        type: 'checkboxBtn',
        field: null,
        label: null,
        optionsClass: 'btn btn-outline-secondary',
        value: null,
        options: []
      }, options);
      _this2 = _callSuper$l(this, SearchCheckboxBtn, [table, options]);
      if (_this2._options.value !== null) {
        _this2.setValue(_this2._options.value);
      }
      return _this2;
    }

    /**
     * Установка значения
     * @param {Array|null} value
     */
    _inherits(SearchCheckboxBtn, _Search);
    return _createClass(SearchCheckboxBtn, [{
      key: "setValue",
      value: function setValue(value) {
        if (['string', 'number', 'object'].indexOf(_typeof(value)) < 0) {
          return;
        }
        if (_typeof(value) === 'object') {
          if (Array.isArray(value)) {
            var items = [];
            $.each(value, function (key, item) {
              if (typeof item !== 'string' && typeof item !== 'number') {
                return;
              }
              items.push(item);
            });
            this._value = items;
          } else {
            this._value = null;
          }
        } else {
          this._value = [value];
        }
        if (this._control) {
          $('input:checked', this._control).prop('checked', false);
          if (Array.isArray(this._value)) {
            this._value.map(function (value) {
              $('input[value="' + value + '"]', this._control).prop('checked', true);
            });
          }
        }
      }

      /**
       * Получение значения
       * @returns {Array|null}
       */
    }, {
      key: "getValue",
      value: function getValue() {
        if (this._control) {
          var inputs = $('input:checked', this._control);
          var items = [];
          $.each(inputs, function (key, input) {
            var value = $(input).attr('value');
            if (['string', 'number'].indexOf(_typeof(value)) >= 0 && value !== '') {
              items.push(value);
            }
          });
          return items.length > 0 ? items : null;
        } else {
          return this._value;
        }
      }

      /**
       * Фильтрация данных
       * @returns {string} fieldValue
       * @returns {Array}  searchValue
       * @returns {boolean}
       */
    }, {
      key: "filter",
      value: function filter(fieldValue, searchValue) {
        if (['string', 'number'].indexOf(_typeof(fieldValue)) < 0 || !Array.isArray(searchValue)) {
          return false;
        }
        return searchValue.indexOf(fieldValue) >= 0;
      }

      /**
       * Формирование контента
       * @returns {jQuery}
       */
    }, {
      key: "render",
      value: function render() {
        var that = this;
        var options = [];
        $.each(this._options.options, function (key, option) {
          if (['string', 'numeric'].indexOf(_typeof(option)) >= 0) {
            var checked = Array.isArray(that._value) ? that._value.indexOf(key) >= 0 : false;
            options.push({
              text: option,
              value: key,
              checked: checked,
              optionsClass: that._options.optionsClass,
              hash: coreuiTableUtils.hashCode()
            });
          } else {
            if (!coreuiTableUtils.isObject(option) || !option.hasOwnProperty('value') || ['string', 'numeric'].indexOf(_typeof(option.value)) === -1) {
              return;
            }
            var _checked = Array.isArray(that._value) ? that._value.indexOf(option.value) >= 0 : false;
            var text = option.hasOwnProperty('text') ? option.text : option.value;
            options.push({
              text: text,
              value: option.value,
              checked: _checked,
              optionsClass: that._options.optionsClass,
              hash: coreuiTableUtils.hashCode()
            });
          }
        });
        this._control = $(coreuiTableUtils.render(tpl['search/checkbox-btn.html'], {
          options: options
        }));
        return this._control;
      }
    }]);
  }(Search);

  function _callSuper$k(_this, derived, args) {
    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      } catch (e) {
        return false;
      }
    }
    derived = _getPrototypeOf(derived);
    return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));
  }
  var SearchRadio = /*#__PURE__*/function (_Search) {
    /**
     * Инициализация
     * @param {coreuiTableInstance} table
     * @param {Object}              options
     */
    function SearchRadio(table, options) {
      var _this2;
      _classCallCheck(this, SearchRadio);
      options = $.extend(true, {
        id: null,
        type: 'radio',
        field: null,
        label: null,
        value: null,
        options: []
      }, options);
      _this2 = _callSuper$k(this, SearchRadio, [table, options]);
      if (_this2._options.value !== null) {
        _this2.setValue(_this2._options.value);
      }
      return _this2;
    }

    /**
     * Установка значения
     * @param {string} value
     */
    _inherits(SearchRadio, _Search);
    return _createClass(SearchRadio, [{
      key: "setValue",
      value: function setValue(value) {
        if (value !== null && typeof value !== 'string' && typeof value !== 'number') {
          return;
        }
        this._value = value;
        if (this._control) {
          $('input', this._control).prop('checked', false);
          if (this._value !== null) {
            $('input[value="' + this._value + '"]', this._control).prop('checked', true);
          } else {
            $('input.coreui-table__all', this._control).prop('checked', true);
          }
        }
      }

      /**
       * Получение значения
       * @returns {string|null}
       */
    }, {
      key: "getValue",
      value: function getValue() {
        if (this._control) {
          var input = $('input:checked', this._control);
          if (input && input[0]) {
            var value = input.val();
            return value === '' ? null : value;
          } else {
            return null;
          }
        } else {
          return this._value;
        }
      }

      /**
       * Фильтрация данных
       * @returns {string}              fieldValue
       * @returns {Array|string|number} searchValue
       * @returns {boolean}
       */
    }, {
      key: "filter",
      value: function filter(fieldValue, searchValue) {
        if (['string', 'number'].indexOf(_typeof(fieldValue)) < 0 || ['string', 'number'].indexOf(_typeof(searchValue)) < 0) {
          return false;
        }
        return fieldValue.toString().toLowerCase() === searchValue.toString().toLowerCase();
      }

      /**
       * Формирование контента
       * @returns {jQuery}
       */
    }, {
      key: "render",
      value: function render() {
        var that = this;
        var checkedAll = true;
        var options = [];
        $.each(this._options.options, function (key, option) {
          if (['string', 'numeric'].indexOf(_typeof(option)) >= 0) {
            var checked = key == that._value;
            if (checked) {
              checkedAll = false;
            }
            options.push({
              text: option,
              value: key,
              checked: checked
            });
          } else {
            if (!coreuiTableUtils.isObject(option) || !option.hasOwnProperty('value') || ['string', 'numeric'].indexOf(_typeof(option.value)) === -1) {
              return;
            }
            var _checked = option.value == that._value;
            var text = option.hasOwnProperty('text') ? option.text : option.value;
            if (_checked) {
              checkedAll = false;
            }
            options.push({
              text: text,
              value: option.value,
              checked: _checked
            });
          }
        });
        this._control = $(coreuiTableUtils.render(tpl['search/radio.html'], {
          options: options,
          checkedAll: checkedAll,
          field: coreuiTableUtils.hashCode(),
          lang: this._table.getLang()
        }));
        return this._control;
      }
    }]);
  }(Search);

  function _callSuper$j(_this, derived, args) {
    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      } catch (e) {
        return false;
      }
    }
    derived = _getPrototypeOf(derived);
    return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));
  }
  var SearchRadioBtn = /*#__PURE__*/function (_Search) {
    /**
     * Инициализация
     * @param {coreuiTableInstance} table
     * @param {Object}              options
     */
    function SearchRadioBtn(table, options) {
      var _this2;
      _classCallCheck(this, SearchRadioBtn);
      options = $.extend(true, {
        id: null,
        type: 'radioBtn',
        field: null,
        optionsClass: 'btn btn-outline-secondary',
        label: null,
        value: null,
        options: []
      }, options);
      _this2 = _callSuper$j(this, SearchRadioBtn, [table, options]);
      if (_this2._options.value !== null) {
        _this2.setValue(_this2._options.value);
      }
      return _this2;
    }

    /**
     * Установка значения
     * @param {string|number} value
     */
    _inherits(SearchRadioBtn, _Search);
    return _createClass(SearchRadioBtn, [{
      key: "setValue",
      value: function setValue(value) {
        if (value !== null && typeof value !== 'string' && typeof value !== 'number') {
          return;
        }
        this._value = value;
        if (this._control) {
          $('input', this._control).prop('checked', false);
          if (this._value !== null) {
            $('input[value="' + this._value + '"]', this._control).prop('checked', true);
          } else {
            $('input.coreui-table__all', this._control).prop('checked', true);
          }
        }
      }

      /**
       * Получение значения
       * @returns {string|null}
       */
    }, {
      key: "getValue",
      value: function getValue() {
        if (this._control) {
          var input = $('input:checked', this._control);
          if (input && input[0]) {
            var value = input.val();
            return value === '' ? null : value;
          } else {
            return null;
          }
        } else {
          return this._value;
        }
      }

      /**
       * Фильтрация данных
       * @returns {string}              fieldValue
       * @returns {Array|string|number} searchValue
       * @returns {boolean}
       */
    }, {
      key: "filter",
      value: function filter(fieldValue, searchValue) {
        if (['string', 'number'].indexOf(_typeof(fieldValue)) < 0 || ['string', 'number'].indexOf(_typeof(searchValue)) < 0) {
          return false;
        }
        return fieldValue.toString().toLowerCase() === searchValue.toString().toLowerCase();
      }

      /**
       * Формирование контента
       * @returns {string}
       */
    }, {
      key: "render",
      value: function render() {
        var that = this;
        var checkedAll = true;
        var options = [];
        $.each(this._options.options, function (key, option) {
          if (['string', 'numeric'].indexOf(_typeof(option)) >= 0) {
            var checked = key == that._value;
            if (checked) {
              checkedAll = false;
            }
            options.push({
              text: option,
              value: key,
              checked: checked,
              optionsClass: that._options.optionsClass,
              hash: coreuiTableUtils.hashCode()
            });
          } else {
            if (!coreuiTableUtils.isObject(option) || !option.hasOwnProperty('value') || ['string', 'numeric'].indexOf(_typeof(option.value)) === -1) {
              return;
            }
            var _checked = option.value == that._value;
            var text = option.hasOwnProperty('text') ? option.text : option.value;
            if (_checked) {
              checkedAll = false;
            }
            options.push({
              text: text,
              value: option.value,
              checked: _checked,
              optionsClass: that._options.optionsClass,
              hash: coreuiTableUtils.hashCode()
            });
          }
        });
        this._control = $(coreuiTableUtils.render(tpl['search/radio-btn.html'], {
          options: options,
          checkedAll: checkedAll,
          optionAllHash: coreuiTableUtils.hashCode(),
          optionOptionsClass: that._options.optionsClass,
          field: coreuiTableUtils.hashCode(),
          lang: this._table.getLang()
        }));
        return this._control;
      }
    }]);
  }(Search);

  function _callSuper$i(_this, derived, args) {
    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      } catch (e) {
        return false;
      }
    }
    derived = _getPrototypeOf(derived);
    return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));
  }
  var SearchSelect = /*#__PURE__*/function (_Search) {
    /**
     * Инициализация
     * @param {coreuiTableInstance} table
     * @param {Object}              options
     */
    function SearchSelect(table, options) {
      var _this2;
      _classCallCheck(this, SearchSelect);
      options = $.extend(true, {
        id: null,
        type: 'select',
        field: null,
        label: null,
        width: null,
        value: null,
        attr: {
          "class": 'form-select d-inline-block'
        },
        options: []
      }, options);
      _this2 = _callSuper$i(this, SearchSelect, [table, options]);
      if (_this2._options.value !== null) {
        _this2.setValue(_this2._options.value);
      }
      return _this2;
    }

    /**
     * Установка значения
     * @param {string|number|Array} value
     */
    _inherits(SearchSelect, _Search);
    return _createClass(SearchSelect, [{
      key: "setValue",
      value: function setValue(value) {
        if (['string', 'number', 'object'].indexOf(_typeof(value)) < 0) {
          return;
        }
        if (_typeof(value) === 'object') {
          if (Array.isArray(value)) {
            var items = [];
            value.map(function (item) {
              if (typeof value !== 'string' && typeof value !== 'number') {
                return;
              }
              items.push(item);
            });
            this._value = items;
          } else {
            this._value = null;
          }
        } else {
          this._value = [value];
        }
        if (this._control) {
          $('option:selected', this._control).prop('selected', false);
          if (Array.isArray(this._value)) {
            this._value.map(function (value) {
              $('option[value="' + value + '"]', this._control).prop('selected', true);
            });
          }
        }
      }

      /**
       * Получение значения
       * @returns {Array|string|null}
       */
    }, {
      key: "getValue",
      value: function getValue() {
        if (this._control) {
          var isMultiple = !!this._control.attr('multiple');
          var options = $('option:selected', this._control);
          var items = [];
          $.each(options, function (key, option) {
            var value = $(option).attr('value');
            if (['string', 'number'].indexOf(_typeof(value)) >= 0 && value !== '') {
              items.push(value);
            }
          });
          return items.length > 0 ? isMultiple ? items : items[0] : null;
        } else {
          return this._value;
        }
      }

      /**
       * Фильтрация данных
       * @returns {string}              fieldValue
       * @returns {Array|string|number} searchValue
       * @returns {boolean}
       */
    }, {
      key: "filter",
      value: function filter(fieldValue, searchValue) {
        if (['string', 'number'].indexOf(_typeof(fieldValue)) < 0 || ['string', 'number'].indexOf(_typeof(searchValue)) < 0 && !Array.isArray(searchValue)) {
          return false;
        }
        if (Array.isArray(searchValue)) {
          return searchValue.indexOf(fieldValue) >= 0;
        } else {
          return fieldValue.toString().toLowerCase() === searchValue.toString().toLowerCase();
        }
      }

      /**
       * Формирование контента
       * @returns {string}
       */
    }, {
      key: "render",
      value: function render() {
        var that = this;
        var options = this.getOptions();
        var selectOptions = [];
        var attributes = [];
        if (!options.hasOwnProperty('attr') || !coreuiTableUtils.isObject(options.attr)) {
          options.attr = {};
        }
        if (options.field) {
          options.attr.name = this._options.field;
        }
        if (options.width) {
          options.attr = coreuiTableUtils.mergeAttr({
            style: 'width:' + options.width + 'px'
          }, options.attr);
        }
        if (options.hasOwnProperty('options') && _typeof(options.options) === 'object' && options.options !== null) {
          $.each(options.options, function (key, option) {
            if (typeof option === 'string' || typeof option === 'number') {
              selectOptions.push(that._buildOption({
                type: 'option',
                value: key,
                text: option
              }));
            } else if (coreuiTableUtils.isObject(option)) {
              var type = option.hasOwnProperty('type') && typeof option.type === 'string' ? option.type : 'option';
              if (type === 'group') {
                var renderAttr = [];
                var groupAttr = {};
                var groupOptions = [];
                if (option.hasOwnProperty('attr') && coreuiTableUtils.isObject(option.attr)) {
                  groupAttr = option.attr;
                }
                if (option.hasOwnProperty('label') && ['string', 'number'].indexOf(_typeof(option.label)) >= 0) {
                  groupAttr.label = option.label;
                }
                $.each(groupAttr, function (name, value) {
                  renderAttr.push(name + '="' + value + '"');
                });
                if (Array.isArray(option.options)) {
                  $.each(option.options, function (key, groupOption) {
                    groupOptions.push(that._buildOption(groupOption));
                  });
                }
                selectOptions.push({
                  type: 'group',
                  attr: renderAttr.length > 0 ? ' ' + renderAttr.join(' ') : '',
                  options: groupOptions
                });
              } else {
                selectOptions.push(that._buildOption(option));
              }
            }
          });
        }
        $.each(options.attr, function (name, value) {
          attributes.push(name + '="' + value + '"');
        });
        this._control = $(coreuiTableUtils.render(tpl['search/select.html'], {
          field: options,
          value: this._value,
          attr: attributes.length > 0 ? ' ' + attributes.join(' ') : '',
          options: selectOptions
        }));
        return this._control;
      }

      /**
       * Сборка опции
       * @param option
       * @return {object}
       * @private
       */
    }, {
      key: "_buildOption",
      value: function _buildOption(option) {
        var optionAttr = [];
        var optionText = option.hasOwnProperty('text') && ['string', 'number'].indexOf(_typeof(option.text)) >= 0 ? option.text : '';
        $.each(option, function (name, value) {
          if (name !== 'text') {
            optionAttr.push(name + '="' + value + '"');
          }
        });
        if (Array.isArray(this._value)) {
          $.each(this._value, function (key, itemValue) {
            if (itemValue == option.value) {
              optionAttr.push('selected="selected"');
              return false;
            }
          });
        } else if (this._value == option.value) {
          optionAttr.push('selected="selected"');
        }
        return {
          type: 'option',
          text: optionText,
          attr: optionAttr.length > 0 ? ' ' + optionAttr.join(' ') : ''
        };
      }
    }]);
  }(Search);

  function _callSuper$h(_this, derived, args) {
    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      } catch (e) {
        return false;
      }
    }
    derived = _getPrototypeOf(derived);
    return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));
  }
  var SearchSwitch = /*#__PURE__*/function (_Search) {
    /**
     * Инициализация
     * @param {coreuiTableInstance} table
     * @param {Object}              options
     */
    function SearchSwitch(table, options) {
      var _this2;
      _classCallCheck(this, SearchSwitch);
      options = $.extend(true, {
        id: null,
        type: 'switch',
        field: null,
        value: null,
        valueY: 1
      }, options);
      _this2 = _callSuper$h(this, SearchSwitch, [table, options]);
      if (_this2._options.value !== null) {
        _this2.setValue(_this2._options.value);
      }
      return _this2;
    }

    /**
     * Установка значения
     * @param {string|number|null} value
     */
    _inherits(SearchSwitch, _Search);
    return _createClass(SearchSwitch, [{
      key: "setValue",
      value: function setValue(value) {
        if (value !== null && typeof value !== 'string' && typeof value !== 'number') {
          return;
        }
        this._value = value;
        if (this._control) {
          var valueY = typeof this._options.valueY === 'string' || typeof this._options.valueY === 'number' ? this._options.valueY : '';
          if (this._value === null) {
            $('input', this._control).prop('checked', false);
          } else if (this._value === valueY) {
            $('input', this._control).prop('checked', true);
          } else {
            $('input', this._control).prop('checked', false);
          }
        }
      }

      /**
       * Получение значения
       * @returns {string|null}
       */
    }, {
      key: "getValue",
      value: function getValue() {
        if (this._control) {
          var value = $('input:checked', this._control).val();
          if (typeof value === 'undefined') {
            return null;
          }
          if (typeof value === 'string' && value !== '') {
            return value;
          }
        }
        return this._value;
      }

      /**
       * Фильтрация данных
       * @returns {string}              fieldValue
       * @returns {Array|string|number} searchValue
       * @returns {boolean}
       */
    }, {
      key: "filter",
      value: function filter(fieldValue, searchValue) {
        if (['string', 'number'].indexOf(_typeof(fieldValue)) < 0 || ['string', 'number'].indexOf(_typeof(searchValue)) < 0) {
          return false;
        }
        return fieldValue.toString().toLowerCase() === searchValue.toString().toLowerCase();
      }

      /**
       * Формирование контента
       * @returns {string}
       */
    }, {
      key: "render",
      value: function render() {
        var options = this.getOptions();
        var valueY = typeof options.valueY === 'string' || typeof options.valueY === 'number' ? options.valueY : '';
        this._control = $(coreuiTableUtils.render(tpl['search/switch.html'], {
          id: this._id,
          valueY: valueY,
          field: typeof options.field === 'string' ? options.field : '',
          checked: this._value == valueY
        }));
        return this._control;
      }
    }]);
  }(Search);

  var Column = /*#__PURE__*/function () {
    /**
     * Инициализация
     * @param {coreuiTableInstance} table
     * @param {Object}              options
     */
    function Column(table, options) {
      _classCallCheck(this, Column);
      _defineProperty(this, "_table", null);
      _defineProperty(this, "_options", {
        type: '',
        field: null,
        label: null,
        show: true,
        showLabel: true,
        width: null,
        minWidth: null,
        maxWidth: null,
        attr: null,
        attrHeader: null,
        render: null
      });
      this._table = table;
      this._options = $.extend(true, this._options, options);
    }

    /**
     * Установка видимости колонки
     * @param {boolean} isShow
     */
    return _createClass(Column, [{
      key: "setShow",
      value: function setShow(isShow) {
        this._options.show = !!isShow;
      }

      /**
       * Видимости колонки
       */
    }, {
      key: "isShow",
      value: function isShow() {
        return !!this._options.show;
      }

      /**
       * Получение параметров
       * @returns {object}
       */
    }, {
      key: "getOptions",
      value: function getOptions() {
        return $.extend({}, this._options);
      }

      /**
       * Получение имени поля
       * @returns {string|null}
       */
    }, {
      key: "getField",
      value: function getField() {
        return typeof this._options.field === 'string' ? this._options.field : null;
      }

      /**
       * Формирование контента
       * @param {*}      content
       * @param {object} record
       * @returns {string}
       */
    }, {
      key: "render",
      value: function render(content, record) {}
    }]);
  }();

  function _callSuper$g(_this, derived, args) {
    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      } catch (e) {
        return false;
      }
    }
    derived = _getPrototypeOf(derived);
    return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));
  }
  var ColumnsDate = /*#__PURE__*/function (_Column) {
    /**
     * Инициализация
     * @param {coreuiTableInstance} table
     * @param {Object}              options
     */
    function ColumnsDate(table, options) {
      _classCallCheck(this, ColumnsDate);
      options = $.extend(true, {
        type: 'date',
        field: null,
        label: null,
        show: true,
        width: null,
        format: 'DD.MM.YYYY',
        attr: {},
        attrHeader: {},
        render: null
      }, options);
      return _callSuper$g(this, ColumnsDate, [table, options]);
    }

    /**
     * Формирование контента
     * @param {string} content
     * @param {object} record
     * @returns {string}
     */
    _inherits(ColumnsDate, _Column);
    return _createClass(ColumnsDate, [{
      key: "render",
      value: function render(content, record) {
        if (typeof content !== 'string') {
          return '';
        }
        try {
          if (content !== '') {
            var lang = this._table.getLang();
            var date = new Date(content);
            content = this._options.format.replace(/YYYY/g, coreuiTableUtils.strPadLeft(date.getFullYear(), 4)).replace(/MMMM/g, lang.monthNames[date.getMonth() + 1]).replace(/MMM/g, lang.monthNamesShort[date.getMonth() + 1]).replace(/MM/g, coreuiTableUtils.strPadLeft(date.getMonth() + 1, 2)).replace(/M/g, date.getMonth() + 1).replace(/DD/g, coreuiTableUtils.strPadLeft(date.getDate(), 2)).replace(/D/g, date.getDate()).replace(/dddd/g, lang.dayNames[date.getMonth() + 1]).replace(/ddd/g, lang.dayNamesMin[date.getMonth() + 1]);
          }
        } catch (e) {
          content = '';
        }
        return content;
      }
    }]);
  }(Column);

  function _callSuper$f(_this, derived, args) {
    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      } catch (e) {
        return false;
      }
    }
    derived = _getPrototypeOf(derived);
    return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));
  }
  var ColumnsDatetime = /*#__PURE__*/function (_Column) {
    /**
     * Инициализация
     * @param {coreuiTableInstance} table
     * @param {Object}              options
     */
    function ColumnsDatetime(table, options) {
      _classCallCheck(this, ColumnsDatetime);
      options = $.extend(true, {
        type: 'datetime',
        field: null,
        label: null,
        show: true,
        width: null,
        format: 'DD.MM.YYYY hh:mm:ss',
        attr: {},
        attrHeader: {},
        render: null
      }, options);
      return _callSuper$f(this, ColumnsDatetime, [table, options]);
    }

    /**
     * Формирование контента
     * @param {string} content
     * @param {object} record
     * @returns {string}
     */
    _inherits(ColumnsDatetime, _Column);
    return _createClass(ColumnsDatetime, [{
      key: "render",
      value: function render(content, record) {
        if (typeof content !== 'string') {
          return '';
        }
        try {
          if (content !== '') {
            var lang = this._table.getLang();
            var date = new Date(content);
            content = this._options.format.replace(/YYYY/g, coreuiTableUtils.strPadLeft(date.getFullYear(), 4)).replace(/MMMM/g, lang.monthNames[date.getMonth() + 1]).replace(/MMM/g, lang.monthNamesShort[date.getMonth() + 1]).replace(/MM/g, coreuiTableUtils.strPadLeft(date.getMonth() + 1, 2)).replace(/M/g, date.getMonth() + 1).replace(/DD/g, coreuiTableUtils.strPadLeft(date.getDate(), 2)).replace(/D/g, date.getDate()).replace(/dddd/g, lang.dayNames[date.getMonth() + 1]).replace(/ddd/g, lang.dayNamesMin[date.getMonth() + 1]).replace(/hh/g, coreuiTableUtils.strPadLeft(date.getHours(), 2)).replace(/mm/g, coreuiTableUtils.strPadLeft(date.getMinutes(), 2)).replace(/m/g, date.getMinutes()).replace(/ss/g, coreuiTableUtils.strPadLeft(date.getSeconds(), 2)).replace(/s/g, date.getSeconds());
          }
        } catch (e) {
          content = '';
        }
        return content;
      }
    }]);
  }(Column);

  //! moment.js
  (function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : global.moment = factory();
  })(window, function () {

    var hookCallback;
    function hooks() {
      return hookCallback.apply(null, arguments);
    }

    // This is done to register the method called with moment()
    // without creating circular dependencies.
    function setHookCallback(callback) {
      hookCallback = callback;
    }
    function isArray(input) {
      return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';
    }
    function isObject(input) {
      // IE8 will treat undefined and null as object if it wasn't for
      // input != null
      return input != null && Object.prototype.toString.call(input) === '[object Object]';
    }
    function hasOwnProp(a, b) {
      return Object.prototype.hasOwnProperty.call(a, b);
    }
    function isObjectEmpty(obj) {
      if (Object.getOwnPropertyNames) {
        return Object.getOwnPropertyNames(obj).length === 0;
      } else {
        var k;
        for (k in obj) {
          if (hasOwnProp(obj, k)) {
            return false;
          }
        }
        return true;
      }
    }
    function isUndefined(input) {
      return input === void 0;
    }
    function isNumber(input) {
      return typeof input === 'number' || Object.prototype.toString.call(input) === '[object Number]';
    }
    function isDate(input) {
      return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';
    }
    function map(arr, fn) {
      var res = [],
        i,
        arrLen = arr.length;
      for (i = 0; i < arrLen; ++i) {
        res.push(fn(arr[i], i));
      }
      return res;
    }
    function extend(a, b) {
      for (var i in b) {
        if (hasOwnProp(b, i)) {
          a[i] = b[i];
        }
      }
      if (hasOwnProp(b, 'toString')) {
        a.toString = b.toString;
      }
      if (hasOwnProp(b, 'valueOf')) {
        a.valueOf = b.valueOf;
      }
      return a;
    }
    function createUTC(input, format, locale, strict) {
      return createLocalOrUTC(input, format, locale, strict, true).utc();
    }
    function defaultParsingFlags() {
      // We need to deep clone this object.
      return {
        empty: false,
        unusedTokens: [],
        unusedInput: [],
        overflow: -2,
        charsLeftOver: 0,
        nullInput: false,
        invalidEra: null,
        invalidMonth: null,
        invalidFormat: false,
        userInvalidated: false,
        iso: false,
        parsedDateParts: [],
        era: null,
        meridiem: null,
        rfc2822: false,
        weekdayMismatch: false
      };
    }
    function getParsingFlags(m) {
      if (m._pf == null) {
        m._pf = defaultParsingFlags();
      }
      return m._pf;
    }
    var some;
    if (Array.prototype.some) {
      some = Array.prototype.some;
    } else {
      some = function (fun) {
        var t = Object(this),
          len = t.length >>> 0,
          i;
        for (i = 0; i < len; i++) {
          if (i in t && fun.call(this, t[i], i, t)) {
            return true;
          }
        }
        return false;
      };
    }
    function isValid(m) {
      var flags = null,
        parsedParts = false,
        isNowValid = m._d && !isNaN(m._d.getTime());
      if (isNowValid) {
        flags = getParsingFlags(m);
        parsedParts = some.call(flags.parsedDateParts, function (i) {
          return i != null;
        });
        isNowValid = flags.overflow < 0 && !flags.empty && !flags.invalidEra && !flags.invalidMonth && !flags.invalidWeekday && !flags.weekdayMismatch && !flags.nullInput && !flags.invalidFormat && !flags.userInvalidated && (!flags.meridiem || flags.meridiem && parsedParts);
        if (m._strict) {
          isNowValid = isNowValid && flags.charsLeftOver === 0 && flags.unusedTokens.length === 0 && flags.bigHour === undefined;
        }
      }
      if (Object.isFrozen == null || !Object.isFrozen(m)) {
        m._isValid = isNowValid;
      } else {
        return isNowValid;
      }
      return m._isValid;
    }
    function createInvalid(flags) {
      var m = createUTC(NaN);
      if (flags != null) {
        extend(getParsingFlags(m), flags);
      } else {
        getParsingFlags(m).userInvalidated = true;
      }
      return m;
    }

    // Plugins that add properties should also add the key here (null value),
    // so we can properly clone ourselves.
    var momentProperties = hooks.momentProperties = [],
      updateInProgress = false;
    function copyConfig(to, from) {
      var i,
        prop,
        val,
        momentPropertiesLen = momentProperties.length;
      if (!isUndefined(from._isAMomentObject)) {
        to._isAMomentObject = from._isAMomentObject;
      }
      if (!isUndefined(from._i)) {
        to._i = from._i;
      }
      if (!isUndefined(from._f)) {
        to._f = from._f;
      }
      if (!isUndefined(from._l)) {
        to._l = from._l;
      }
      if (!isUndefined(from._strict)) {
        to._strict = from._strict;
      }
      if (!isUndefined(from._tzm)) {
        to._tzm = from._tzm;
      }
      if (!isUndefined(from._isUTC)) {
        to._isUTC = from._isUTC;
      }
      if (!isUndefined(from._offset)) {
        to._offset = from._offset;
      }
      if (!isUndefined(from._pf)) {
        to._pf = getParsingFlags(from);
      }
      if (!isUndefined(from._locale)) {
        to._locale = from._locale;
      }
      if (momentPropertiesLen > 0) {
        for (i = 0; i < momentPropertiesLen; i++) {
          prop = momentProperties[i];
          val = from[prop];
          if (!isUndefined(val)) {
            to[prop] = val;
          }
        }
      }
      return to;
    }

    // Moment prototype object
    function Moment(config) {
      copyConfig(this, config);
      this._d = new Date(config._d != null ? config._d.getTime() : NaN);
      if (!this.isValid()) {
        this._d = new Date(NaN);
      }
      // Prevent infinite loop in case updateOffset creates new moment
      // objects.
      if (updateInProgress === false) {
        updateInProgress = true;
        hooks.updateOffset(this);
        updateInProgress = false;
      }
    }
    function isMoment(obj) {
      return obj instanceof Moment || obj != null && obj._isAMomentObject != null;
    }
    function warn(msg) {
      if (hooks.suppressDeprecationWarnings === false && typeof console !== 'undefined' && console.warn) {
        console.warn('Deprecation warning: ' + msg);
      }
    }
    function deprecate(msg, fn) {
      var firstTime = true;
      return extend(function () {
        if (hooks.deprecationHandler != null) {
          hooks.deprecationHandler(null, msg);
        }
        if (firstTime) {
          var args = [],
            arg,
            i,
            key,
            argLen = arguments.length;
          for (i = 0; i < argLen; i++) {
            arg = '';
            if (typeof arguments[i] === 'object') {
              arg += '\n[' + i + '] ';
              for (key in arguments[0]) {
                if (hasOwnProp(arguments[0], key)) {
                  arg += key + ': ' + arguments[0][key] + ', ';
                }
              }
              arg = arg.slice(0, -2); // Remove trailing comma and space
            } else {
              arg = arguments[i];
            }
            args.push(arg);
          }
          warn(msg + '\nArguments: ' + Array.prototype.slice.call(args).join('') + '\n' + new Error().stack);
          firstTime = false;
        }
        return fn.apply(this, arguments);
      }, fn);
    }
    var deprecations = {};
    function deprecateSimple(name, msg) {
      if (hooks.deprecationHandler != null) {
        hooks.deprecationHandler(name, msg);
      }
      if (!deprecations[name]) {
        warn(msg);
        deprecations[name] = true;
      }
    }
    hooks.suppressDeprecationWarnings = false;
    hooks.deprecationHandler = null;
    function isFunction(input) {
      return typeof Function !== 'undefined' && input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';
    }
    function set(config) {
      var prop, i;
      for (i in config) {
        if (hasOwnProp(config, i)) {
          prop = config[i];
          if (isFunction(prop)) {
            this[i] = prop;
          } else {
            this['_' + i] = prop;
          }
        }
      }
      this._config = config;
      // Lenient ordinal parsing accepts just a number in addition to
      // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.
      // TODO: Remove "ordinalParse" fallback in next major release.
      this._dayOfMonthOrdinalParseLenient = new RegExp((this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) + '|' + /\d{1,2}/.source);
    }
    function mergeConfigs(parentConfig, childConfig) {
      var res = extend({}, parentConfig),
        prop;
      for (prop in childConfig) {
        if (hasOwnProp(childConfig, prop)) {
          if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
            res[prop] = {};
            extend(res[prop], parentConfig[prop]);
            extend(res[prop], childConfig[prop]);
          } else if (childConfig[prop] != null) {
            res[prop] = childConfig[prop];
          } else {
            delete res[prop];
          }
        }
      }
      for (prop in parentConfig) {
        if (hasOwnProp(parentConfig, prop) && !hasOwnProp(childConfig, prop) && isObject(parentConfig[prop])) {
          // make sure changes to properties don't modify parent config
          res[prop] = extend({}, res[prop]);
        }
      }
      return res;
    }
    function Locale(config) {
      if (config != null) {
        this.set(config);
      }
    }
    var keys;
    if (Object.keys) {
      keys = Object.keys;
    } else {
      keys = function (obj) {
        var i,
          res = [];
        for (i in obj) {
          if (hasOwnProp(obj, i)) {
            res.push(i);
          }
        }
        return res;
      };
    }
    var defaultCalendar = {
      sameDay: '[Today at] LT',
      nextDay: '[Tomorrow at] LT',
      nextWeek: 'dddd [at] LT',
      lastDay: '[Yesterday at] LT',
      lastWeek: '[Last] dddd [at] LT',
      sameElse: 'L'
    };
    function calendar(key, mom, now) {
      var output = this._calendar[key] || this._calendar['sameElse'];
      return isFunction(output) ? output.call(mom, now) : output;
    }
    function zeroFill(number, targetLength, forceSign) {
      var absNumber = '' + Math.abs(number),
        zerosToFill = targetLength - absNumber.length,
        sign = number >= 0;
      return (sign ? forceSign ? '+' : '' : '-') + Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
    }
    var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,
      localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,
      formatFunctions = {},
      formatTokenFunctions = {};

    // token:    'M'
    // padded:   ['MM', 2]
    // ordinal:  'Mo'
    // callback: function () { this.month() + 1 }
    function addFormatToken(token, padded, ordinal, callback) {
      var func = callback;
      if (typeof callback === 'string') {
        func = function () {
          return this[callback]();
        };
      }
      if (token) {
        formatTokenFunctions[token] = func;
      }
      if (padded) {
        formatTokenFunctions[padded[0]] = function () {
          return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
        };
      }
      if (ordinal) {
        formatTokenFunctions[ordinal] = function () {
          return this.localeData().ordinal(func.apply(this, arguments), token);
        };
      }
    }
    function removeFormattingTokens(input) {
      if (input.match(/\[[\s\S]/)) {
        return input.replace(/^\[|\]$/g, '');
      }
      return input.replace(/\\/g, '');
    }
    function makeFormatFunction(format) {
      var array = format.match(formattingTokens),
        i,
        length;
      for (i = 0, length = array.length; i < length; i++) {
        if (formatTokenFunctions[array[i]]) {
          array[i] = formatTokenFunctions[array[i]];
        } else {
          array[i] = removeFormattingTokens(array[i]);
        }
      }
      return function (mom) {
        var output = '',
          i;
        for (i = 0; i < length; i++) {
          output += isFunction(array[i]) ? array[i].call(mom, format) : array[i];
        }
        return output;
      };
    }

    // format date using native date object
    function formatMoment(m, format) {
      if (!m.isValid()) {
        return m.localeData().invalidDate();
      }
      format = expandFormat(format, m.localeData());
      formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);
      return formatFunctions[format](m);
    }
    function expandFormat(format, locale) {
      var i = 5;
      function replaceLongDateFormatTokens(input) {
        return locale.longDateFormat(input) || input;
      }
      localFormattingTokens.lastIndex = 0;
      while (i >= 0 && localFormattingTokens.test(format)) {
        format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
        localFormattingTokens.lastIndex = 0;
        i -= 1;
      }
      return format;
    }
    var defaultLongDateFormat = {
      LTS: 'h:mm:ss A',
      LT: 'h:mm A',
      L: 'MM/DD/YYYY',
      LL: 'MMMM D, YYYY',
      LLL: 'MMMM D, YYYY h:mm A',
      LLLL: 'dddd, MMMM D, YYYY h:mm A'
    };
    function longDateFormat(key) {
      var format = this._longDateFormat[key],
        formatUpper = this._longDateFormat[key.toUpperCase()];
      if (format || !formatUpper) {
        return format;
      }
      this._longDateFormat[key] = formatUpper.match(formattingTokens).map(function (tok) {
        if (tok === 'MMMM' || tok === 'MM' || tok === 'DD' || tok === 'dddd') {
          return tok.slice(1);
        }
        return tok;
      }).join('');
      return this._longDateFormat[key];
    }
    var defaultInvalidDate = 'Invalid date';
    function invalidDate() {
      return this._invalidDate;
    }
    var defaultOrdinal = '%d',
      defaultDayOfMonthOrdinalParse = /\d{1,2}/;
    function ordinal(number) {
      return this._ordinal.replace('%d', number);
    }
    var defaultRelativeTime = {
      future: 'in %s',
      past: '%s ago',
      s: 'a few seconds',
      ss: '%d seconds',
      m: 'a minute',
      mm: '%d minutes',
      h: 'an hour',
      hh: '%d hours',
      d: 'a day',
      dd: '%d days',
      w: 'a week',
      ww: '%d weeks',
      M: 'a month',
      MM: '%d months',
      y: 'a year',
      yy: '%d years'
    };
    function relativeTime(number, withoutSuffix, string, isFuture) {
      var output = this._relativeTime[string];
      return isFunction(output) ? output(number, withoutSuffix, string, isFuture) : output.replace(/%d/i, number);
    }
    function pastFuture(diff, output) {
      var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
      return isFunction(format) ? format(output) : format.replace(/%s/i, output);
    }
    var aliases = {
      D: 'date',
      dates: 'date',
      date: 'date',
      d: 'day',
      days: 'day',
      day: 'day',
      e: 'weekday',
      weekdays: 'weekday',
      weekday: 'weekday',
      E: 'isoWeekday',
      isoweekdays: 'isoWeekday',
      isoweekday: 'isoWeekday',
      DDD: 'dayOfYear',
      dayofyears: 'dayOfYear',
      dayofyear: 'dayOfYear',
      h: 'hour',
      hours: 'hour',
      hour: 'hour',
      ms: 'millisecond',
      milliseconds: 'millisecond',
      millisecond: 'millisecond',
      m: 'minute',
      minutes: 'minute',
      minute: 'minute',
      M: 'month',
      months: 'month',
      month: 'month',
      Q: 'quarter',
      quarters: 'quarter',
      quarter: 'quarter',
      s: 'second',
      seconds: 'second',
      second: 'second',
      gg: 'weekYear',
      weekyears: 'weekYear',
      weekyear: 'weekYear',
      GG: 'isoWeekYear',
      isoweekyears: 'isoWeekYear',
      isoweekyear: 'isoWeekYear',
      w: 'week',
      weeks: 'week',
      week: 'week',
      W: 'isoWeek',
      isoweeks: 'isoWeek',
      isoweek: 'isoWeek',
      y: 'year',
      years: 'year',
      year: 'year'
    };
    function normalizeUnits(units) {
      return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;
    }
    function normalizeObjectUnits(inputObject) {
      var normalizedInput = {},
        normalizedProp,
        prop;
      for (prop in inputObject) {
        if (hasOwnProp(inputObject, prop)) {
          normalizedProp = normalizeUnits(prop);
          if (normalizedProp) {
            normalizedInput[normalizedProp] = inputObject[prop];
          }
        }
      }
      return normalizedInput;
    }
    var priorities = {
      date: 9,
      day: 11,
      weekday: 11,
      isoWeekday: 11,
      dayOfYear: 4,
      hour: 13,
      millisecond: 16,
      minute: 14,
      month: 8,
      quarter: 7,
      second: 15,
      weekYear: 1,
      isoWeekYear: 1,
      week: 5,
      isoWeek: 5,
      year: 1
    };
    function getPrioritizedUnits(unitsObj) {
      var units = [],
        u;
      for (u in unitsObj) {
        if (hasOwnProp(unitsObj, u)) {
          units.push({
            unit: u,
            priority: priorities[u]
          });
        }
      }
      units.sort(function (a, b) {
        return a.priority - b.priority;
      });
      return units;
    }
    var match1 = /\d/,
      //       0 - 9
      match2 = /\d\d/,
      //      00 - 99
      match3 = /\d{3}/,
      //     000 - 999
      match4 = /\d{4}/,
      //    0000 - 9999
      match6 = /[+-]?\d{6}/,
      // -999999 - 999999
      match1to2 = /\d\d?/,
      //       0 - 99
      match3to4 = /\d\d\d\d?/,
      //     999 - 9999
      match5to6 = /\d\d\d\d\d\d?/,
      //   99999 - 999999
      match1to3 = /\d{1,3}/,
      //       0 - 999
      match1to4 = /\d{1,4}/,
      //       0 - 9999
      match1to6 = /[+-]?\d{1,6}/,
      // -999999 - 999999
      matchUnsigned = /\d+/,
      //       0 - inf
      matchSigned = /[+-]?\d+/,
      //    -inf - inf
      matchOffset = /Z|[+-]\d\d:?\d\d/gi,
      // +00:00 -00:00 +0000 -0000 or Z
      matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi,
      // +00 -00 +00:00 -00:00 +0000 -0000 or Z
      matchTimestamp = /[+-]?\d+(\.\d{1,3})?/,
      // 123456789 123456789.123
      // any word (or two) characters or numbers including two/three word month in arabic.
      // includes scottish gaelic two word and hyphenated months
      matchWord = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i,
      match1to2NoLeadingZero = /^[1-9]\d?/,
      //         1-99
      match1to2HasZero = /^([1-9]\d|\d)/,
      //           0-99
      regexes;
    regexes = {};
    function addRegexToken(token, regex, strictRegex) {
      regexes[token] = isFunction(regex) ? regex : function (isStrict, localeData) {
        return isStrict && strictRegex ? strictRegex : regex;
      };
    }
    function getParseRegexForToken(token, config) {
      if (!hasOwnProp(regexes, token)) {
        return new RegExp(unescapeFormat(token));
      }
      return regexes[token](config._strict, config._locale);
    }

    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
    function unescapeFormat(s) {
      return regexEscape(s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
        return p1 || p2 || p3 || p4;
      }));
    }
    function regexEscape(s) {
      return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
    }
    function absFloor(number) {
      if (number < 0) {
        // -0 -> 0
        return Math.ceil(number) || 0;
      } else {
        return Math.floor(number);
      }
    }
    function toInt(argumentForCoercion) {
      var coercedNumber = +argumentForCoercion,
        value = 0;
      if (coercedNumber !== 0 && isFinite(coercedNumber)) {
        value = absFloor(coercedNumber);
      }
      return value;
    }
    var tokens = {};
    function addParseToken(token, callback) {
      var i,
        func = callback,
        tokenLen;
      if (typeof token === 'string') {
        token = [token];
      }
      if (isNumber(callback)) {
        func = function (input, array) {
          array[callback] = toInt(input);
        };
      }
      tokenLen = token.length;
      for (i = 0; i < tokenLen; i++) {
        tokens[token[i]] = func;
      }
    }
    function addWeekParseToken(token, callback) {
      addParseToken(token, function (input, array, config, token) {
        config._w = config._w || {};
        callback(input, config._w, config, token);
      });
    }
    function addTimeToArrayFromToken(token, input, config) {
      if (input != null && hasOwnProp(tokens, token)) {
        tokens[token](input, config._a, config, token);
      }
    }
    function isLeapYear(year) {
      return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
    }
    var YEAR = 0,
      MONTH = 1,
      DATE = 2,
      HOUR = 3,
      MINUTE = 4,
      SECOND = 5,
      MILLISECOND = 6,
      WEEK = 7,
      WEEKDAY = 8;

    // FORMATTING

    addFormatToken('Y', 0, 0, function () {
      var y = this.year();
      return y <= 9999 ? zeroFill(y, 4) : '+' + y;
    });
    addFormatToken(0, ['YY', 2], 0, function () {
      return this.year() % 100;
    });
    addFormatToken(0, ['YYYY', 4], 0, 'year');
    addFormatToken(0, ['YYYYY', 5], 0, 'year');
    addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');

    // PARSING

    addRegexToken('Y', matchSigned);
    addRegexToken('YY', match1to2, match2);
    addRegexToken('YYYY', match1to4, match4);
    addRegexToken('YYYYY', match1to6, match6);
    addRegexToken('YYYYYY', match1to6, match6);
    addParseToken(['YYYYY', 'YYYYYY'], YEAR);
    addParseToken('YYYY', function (input, array) {
      array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
    });
    addParseToken('YY', function (input, array) {
      array[YEAR] = hooks.parseTwoDigitYear(input);
    });
    addParseToken('Y', function (input, array) {
      array[YEAR] = parseInt(input, 10);
    });

    // HELPERS

    function daysInYear(year) {
      return isLeapYear(year) ? 366 : 365;
    }

    // HOOKS

    hooks.parseTwoDigitYear = function (input) {
      return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
    };

    // MOMENTS

    var getSetYear = makeGetSet('FullYear', true);
    function getIsLeapYear() {
      return isLeapYear(this.year());
    }
    function makeGetSet(unit, keepTime) {
      return function (value) {
        if (value != null) {
          set$1(this, unit, value);
          hooks.updateOffset(this, keepTime);
          return this;
        } else {
          return get(this, unit);
        }
      };
    }
    function get(mom, unit) {
      if (!mom.isValid()) {
        return NaN;
      }
      var d = mom._d,
        isUTC = mom._isUTC;
      switch (unit) {
        case 'Milliseconds':
          return isUTC ? d.getUTCMilliseconds() : d.getMilliseconds();
        case 'Seconds':
          return isUTC ? d.getUTCSeconds() : d.getSeconds();
        case 'Minutes':
          return isUTC ? d.getUTCMinutes() : d.getMinutes();
        case 'Hours':
          return isUTC ? d.getUTCHours() : d.getHours();
        case 'Date':
          return isUTC ? d.getUTCDate() : d.getDate();
        case 'Day':
          return isUTC ? d.getUTCDay() : d.getDay();
        case 'Month':
          return isUTC ? d.getUTCMonth() : d.getMonth();
        case 'FullYear':
          return isUTC ? d.getUTCFullYear() : d.getFullYear();
        default:
          return NaN;
        // Just in case
      }
    }
    function set$1(mom, unit, value) {
      var d, isUTC, year, month, date;
      if (!mom.isValid() || isNaN(value)) {
        return;
      }
      d = mom._d;
      isUTC = mom._isUTC;
      switch (unit) {
        case 'Milliseconds':
          return void (isUTC ? d.setUTCMilliseconds(value) : d.setMilliseconds(value));
        case 'Seconds':
          return void (isUTC ? d.setUTCSeconds(value) : d.setSeconds(value));
        case 'Minutes':
          return void (isUTC ? d.setUTCMinutes(value) : d.setMinutes(value));
        case 'Hours':
          return void (isUTC ? d.setUTCHours(value) : d.setHours(value));
        case 'Date':
          return void (isUTC ? d.setUTCDate(value) : d.setDate(value));
        // case 'Day': // Not real
        //    return void (isUTC ? d.setUTCDay(value) : d.setDay(value));
        // case 'Month': // Not used because we need to pass two variables
        //     return void (isUTC ? d.setUTCMonth(value) : d.setMonth(value));
        case 'FullYear':
          break;
        // See below ...
        default:
          return;
        // Just in case
      }
      year = value;
      month = mom.month();
      date = mom.date();
      date = date === 29 && month === 1 && !isLeapYear(year) ? 28 : date;
      void (isUTC ? d.setUTCFullYear(year, month, date) : d.setFullYear(year, month, date));
    }

    // MOMENTS

    function stringGet(units) {
      units = normalizeUnits(units);
      if (isFunction(this[units])) {
        return this[units]();
      }
      return this;
    }
    function stringSet(units, value) {
      if (typeof units === 'object') {
        units = normalizeObjectUnits(units);
        var prioritized = getPrioritizedUnits(units),
          i,
          prioritizedLen = prioritized.length;
        for (i = 0; i < prioritizedLen; i++) {
          this[prioritized[i].unit](units[prioritized[i].unit]);
        }
      } else {
        units = normalizeUnits(units);
        if (isFunction(this[units])) {
          return this[units](value);
        }
      }
      return this;
    }
    function mod(n, x) {
      return (n % x + x) % x;
    }
    var indexOf;
    if (Array.prototype.indexOf) {
      indexOf = Array.prototype.indexOf;
    } else {
      indexOf = function (o) {
        // I know
        var i;
        for (i = 0; i < this.length; ++i) {
          if (this[i] === o) {
            return i;
          }
        }
        return -1;
      };
    }
    function daysInMonth(year, month) {
      if (isNaN(year) || isNaN(month)) {
        return NaN;
      }
      var modMonth = mod(month, 12);
      year += (month - modMonth) / 12;
      return modMonth === 1 ? isLeapYear(year) ? 29 : 28 : 31 - modMonth % 7 % 2;
    }

    // FORMATTING

    addFormatToken('M', ['MM', 2], 'Mo', function () {
      return this.month() + 1;
    });
    addFormatToken('MMM', 0, 0, function (format) {
      return this.localeData().monthsShort(this, format);
    });
    addFormatToken('MMMM', 0, 0, function (format) {
      return this.localeData().months(this, format);
    });

    // PARSING

    addRegexToken('M', match1to2, match1to2NoLeadingZero);
    addRegexToken('MM', match1to2, match2);
    addRegexToken('MMM', function (isStrict, locale) {
      return locale.monthsShortRegex(isStrict);
    });
    addRegexToken('MMMM', function (isStrict, locale) {
      return locale.monthsRegex(isStrict);
    });
    addParseToken(['M', 'MM'], function (input, array) {
      array[MONTH] = toInt(input) - 1;
    });
    addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
      var month = config._locale.monthsParse(input, token, config._strict);
      // if we didn't find a month name, mark the date as invalid.
      if (month != null) {
        array[MONTH] = month;
      } else {
        getParsingFlags(config).invalidMonth = input;
      }
    });

    // LOCALES

    var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
      defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
      MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,
      defaultMonthsShortRegex = matchWord,
      defaultMonthsRegex = matchWord;
    function localeMonths(m, format) {
      if (!m) {
        return isArray(this._months) ? this._months : this._months['standalone'];
      }
      return isArray(this._months) ? this._months[m.month()] : this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? 'format' : 'standalone'][m.month()];
    }
    function localeMonthsShort(m, format) {
      if (!m) {
        return isArray(this._monthsShort) ? this._monthsShort : this._monthsShort['standalone'];
      }
      return isArray(this._monthsShort) ? this._monthsShort[m.month()] : this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];
    }
    function handleStrictParse(monthName, format, strict) {
      var i,
        ii,
        mom,
        llc = monthName.toLocaleLowerCase();
      if (!this._monthsParse) {
        // this is not used
        this._monthsParse = [];
        this._longMonthsParse = [];
        this._shortMonthsParse = [];
        for (i = 0; i < 12; ++i) {
          mom = createUTC([2000, i]);
          this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();
          this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
        }
      }
      if (strict) {
        if (format === 'MMM') {
          ii = indexOf.call(this._shortMonthsParse, llc);
          return ii !== -1 ? ii : null;
        } else {
          ii = indexOf.call(this._longMonthsParse, llc);
          return ii !== -1 ? ii : null;
        }
      } else {
        if (format === 'MMM') {
          ii = indexOf.call(this._shortMonthsParse, llc);
          if (ii !== -1) {
            return ii;
          }
          ii = indexOf.call(this._longMonthsParse, llc);
          return ii !== -1 ? ii : null;
        } else {
          ii = indexOf.call(this._longMonthsParse, llc);
          if (ii !== -1) {
            return ii;
          }
          ii = indexOf.call(this._shortMonthsParse, llc);
          return ii !== -1 ? ii : null;
        }
      }
    }
    function localeMonthsParse(monthName, format, strict) {
      var i, mom, regex;
      if (this._monthsParseExact) {
        return handleStrictParse.call(this, monthName, format, strict);
      }
      if (!this._monthsParse) {
        this._monthsParse = [];
        this._longMonthsParse = [];
        this._shortMonthsParse = [];
      }

      // TODO: add sorting
      // Sorting makes sure if one month (or abbr) is a prefix of another
      // see sorting in computeMonthsParse
      for (i = 0; i < 12; i++) {
        // make the regex if we don't have it already
        mom = createUTC([2000, i]);
        if (strict && !this._longMonthsParse[i]) {
          this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
          this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
        }
        if (!strict && !this._monthsParse[i]) {
          regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
          this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
        }
        // test the regex
        if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
          return i;
        } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
          return i;
        } else if (!strict && this._monthsParse[i].test(monthName)) {
          return i;
        }
      }
    }

    // MOMENTS

    function setMonth(mom, value) {
      if (!mom.isValid()) {
        // No op
        return mom;
      }
      if (typeof value === 'string') {
        if (/^\d+$/.test(value)) {
          value = toInt(value);
        } else {
          value = mom.localeData().monthsParse(value);
          // TODO: Another silent failure?
          if (!isNumber(value)) {
            return mom;
          }
        }
      }
      var month = value,
        date = mom.date();
      date = date < 29 ? date : Math.min(date, daysInMonth(mom.year(), month));
      void (mom._isUTC ? mom._d.setUTCMonth(month, date) : mom._d.setMonth(month, date));
      return mom;
    }
    function getSetMonth(value) {
      if (value != null) {
        setMonth(this, value);
        hooks.updateOffset(this, true);
        return this;
      } else {
        return get(this, 'Month');
      }
    }
    function getDaysInMonth() {
      return daysInMonth(this.year(), this.month());
    }
    function monthsShortRegex(isStrict) {
      if (this._monthsParseExact) {
        if (!hasOwnProp(this, '_monthsRegex')) {
          computeMonthsParse.call(this);
        }
        if (isStrict) {
          return this._monthsShortStrictRegex;
        } else {
          return this._monthsShortRegex;
        }
      } else {
        if (!hasOwnProp(this, '_monthsShortRegex')) {
          this._monthsShortRegex = defaultMonthsShortRegex;
        }
        return this._monthsShortStrictRegex && isStrict ? this._monthsShortStrictRegex : this._monthsShortRegex;
      }
    }
    function monthsRegex(isStrict) {
      if (this._monthsParseExact) {
        if (!hasOwnProp(this, '_monthsRegex')) {
          computeMonthsParse.call(this);
        }
        if (isStrict) {
          return this._monthsStrictRegex;
        } else {
          return this._monthsRegex;
        }
      } else {
        if (!hasOwnProp(this, '_monthsRegex')) {
          this._monthsRegex = defaultMonthsRegex;
        }
        return this._monthsStrictRegex && isStrict ? this._monthsStrictRegex : this._monthsRegex;
      }
    }
    function computeMonthsParse() {
      function cmpLenRev(a, b) {
        return b.length - a.length;
      }
      var shortPieces = [],
        longPieces = [],
        mixedPieces = [],
        i,
        mom,
        shortP,
        longP;
      for (i = 0; i < 12; i++) {
        // make the regex if we don't have it already
        mom = createUTC([2000, i]);
        shortP = regexEscape(this.monthsShort(mom, ''));
        longP = regexEscape(this.months(mom, ''));
        shortPieces.push(shortP);
        longPieces.push(longP);
        mixedPieces.push(longP);
        mixedPieces.push(shortP);
      }
      // Sorting makes sure if one month (or abbr) is a prefix of another it
      // will match the longer piece.
      shortPieces.sort(cmpLenRev);
      longPieces.sort(cmpLenRev);
      mixedPieces.sort(cmpLenRev);
      this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
      this._monthsShortRegex = this._monthsRegex;
      this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
      this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
    }
    function createDate(y, m, d, h, M, s, ms) {
      // can't just apply() to create a date:
      // https://stackoverflow.com/q/181348
      var date;
      // the date constructor remaps years 0-99 to 1900-1999
      if (y < 100 && y >= 0) {
        // preserve leap years using a full 400 year cycle, then reset
        date = new Date(y + 400, m, d, h, M, s, ms);
        if (isFinite(date.getFullYear())) {
          date.setFullYear(y);
        }
      } else {
        date = new Date(y, m, d, h, M, s, ms);
      }
      return date;
    }
    function createUTCDate(y) {
      var date, args;
      // the Date.UTC function remaps years 0-99 to 1900-1999
      if (y < 100 && y >= 0) {
        args = Array.prototype.slice.call(arguments);
        // preserve leap years using a full 400 year cycle, then reset
        args[0] = y + 400;
        date = new Date(Date.UTC.apply(null, args));
        if (isFinite(date.getUTCFullYear())) {
          date.setUTCFullYear(y);
        }
      } else {
        date = new Date(Date.UTC.apply(null, arguments));
      }
      return date;
    }

    // start-of-first-week - start-of-year
    function firstWeekOffset(year, dow, doy) {
      var
        // first-week day -- which january is always in the first week (4 for iso, 1 for other)
        fwd = 7 + dow - doy,
        // first-week day local weekday -- which local weekday is fwd
        fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;
      return -fwdlw + fwd - 1;
    }

    // https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
    function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
      var localWeekday = (7 + weekday - dow) % 7,
        weekOffset = firstWeekOffset(year, dow, doy),
        dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
        resYear,
        resDayOfYear;
      if (dayOfYear <= 0) {
        resYear = year - 1;
        resDayOfYear = daysInYear(resYear) + dayOfYear;
      } else if (dayOfYear > daysInYear(year)) {
        resYear = year + 1;
        resDayOfYear = dayOfYear - daysInYear(year);
      } else {
        resYear = year;
        resDayOfYear = dayOfYear;
      }
      return {
        year: resYear,
        dayOfYear: resDayOfYear
      };
    }
    function weekOfYear(mom, dow, doy) {
      var weekOffset = firstWeekOffset(mom.year(), dow, doy),
        week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
        resWeek,
        resYear;
      if (week < 1) {
        resYear = mom.year() - 1;
        resWeek = week + weeksInYear(resYear, dow, doy);
      } else if (week > weeksInYear(mom.year(), dow, doy)) {
        resWeek = week - weeksInYear(mom.year(), dow, doy);
        resYear = mom.year() + 1;
      } else {
        resYear = mom.year();
        resWeek = week;
      }
      return {
        week: resWeek,
        year: resYear
      };
    }
    function weeksInYear(year, dow, doy) {
      var weekOffset = firstWeekOffset(year, dow, doy),
        weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
      return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
    }

    // FORMATTING

    addFormatToken('w', ['ww', 2], 'wo', 'week');
    addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');

    // PARSING

    addRegexToken('w', match1to2, match1to2NoLeadingZero);
    addRegexToken('ww', match1to2, match2);
    addRegexToken('W', match1to2, match1to2NoLeadingZero);
    addRegexToken('WW', match1to2, match2);
    addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {
      week[token.substr(0, 1)] = toInt(input);
    });

    // HELPERS

    // LOCALES

    function localeWeek(mom) {
      return weekOfYear(mom, this._week.dow, this._week.doy).week;
    }
    var defaultLocaleWeek = {
      dow: 0,
      // Sunday is the first day of the week.
      doy: 6 // The week that contains Jan 6th is the first week of the year.
    };
    function localeFirstDayOfWeek() {
      return this._week.dow;
    }
    function localeFirstDayOfYear() {
      return this._week.doy;
    }

    // MOMENTS

    function getSetWeek(input) {
      var week = this.localeData().week(this);
      return input == null ? week : this.add((input - week) * 7, 'd');
    }
    function getSetISOWeek(input) {
      var week = weekOfYear(this, 1, 4).week;
      return input == null ? week : this.add((input - week) * 7, 'd');
    }

    // FORMATTING

    addFormatToken('d', 0, 'do', 'day');
    addFormatToken('dd', 0, 0, function (format) {
      return this.localeData().weekdaysMin(this, format);
    });
    addFormatToken('ddd', 0, 0, function (format) {
      return this.localeData().weekdaysShort(this, format);
    });
    addFormatToken('dddd', 0, 0, function (format) {
      return this.localeData().weekdays(this, format);
    });
    addFormatToken('e', 0, 0, 'weekday');
    addFormatToken('E', 0, 0, 'isoWeekday');

    // PARSING

    addRegexToken('d', match1to2);
    addRegexToken('e', match1to2);
    addRegexToken('E', match1to2);
    addRegexToken('dd', function (isStrict, locale) {
      return locale.weekdaysMinRegex(isStrict);
    });
    addRegexToken('ddd', function (isStrict, locale) {
      return locale.weekdaysShortRegex(isStrict);
    });
    addRegexToken('dddd', function (isStrict, locale) {
      return locale.weekdaysRegex(isStrict);
    });
    addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
      var weekday = config._locale.weekdaysParse(input, token, config._strict);
      // if we didn't get a weekday name, mark the date as invalid
      if (weekday != null) {
        week.d = weekday;
      } else {
        getParsingFlags(config).invalidWeekday = input;
      }
    });
    addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
      week[token] = toInt(input);
    });

    // HELPERS

    function parseWeekday(input, locale) {
      if (typeof input !== 'string') {
        return input;
      }
      if (!isNaN(input)) {
        return parseInt(input, 10);
      }
      input = locale.weekdaysParse(input);
      if (typeof input === 'number') {
        return input;
      }
      return null;
    }
    function parseIsoWeekday(input, locale) {
      if (typeof input === 'string') {
        return locale.weekdaysParse(input) % 7 || 7;
      }
      return isNaN(input) ? null : input;
    }

    // LOCALES
    function shiftWeekdays(ws, n) {
      return ws.slice(n, 7).concat(ws.slice(0, n));
    }
    var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
      defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
      defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
      defaultWeekdaysRegex = matchWord,
      defaultWeekdaysShortRegex = matchWord,
      defaultWeekdaysMinRegex = matchWord;
    function localeWeekdays(m, format) {
      var weekdays = isArray(this._weekdays) ? this._weekdays : this._weekdays[m && m !== true && this._weekdays.isFormat.test(format) ? 'format' : 'standalone'];
      return m === true ? shiftWeekdays(weekdays, this._week.dow) : m ? weekdays[m.day()] : weekdays;
    }
    function localeWeekdaysShort(m) {
      return m === true ? shiftWeekdays(this._weekdaysShort, this._week.dow) : m ? this._weekdaysShort[m.day()] : this._weekdaysShort;
    }
    function localeWeekdaysMin(m) {
      return m === true ? shiftWeekdays(this._weekdaysMin, this._week.dow) : m ? this._weekdaysMin[m.day()] : this._weekdaysMin;
    }
    function handleStrictParse$1(weekdayName, format, strict) {
      var i,
        ii,
        mom,
        llc = weekdayName.toLocaleLowerCase();
      if (!this._weekdaysParse) {
        this._weekdaysParse = [];
        this._shortWeekdaysParse = [];
        this._minWeekdaysParse = [];
        for (i = 0; i < 7; ++i) {
          mom = createUTC([2000, 1]).day(i);
          this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();
          this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();
          this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
        }
      }
      if (strict) {
        if (format === 'dddd') {
          ii = indexOf.call(this._weekdaysParse, llc);
          return ii !== -1 ? ii : null;
        } else if (format === 'ddd') {
          ii = indexOf.call(this._shortWeekdaysParse, llc);
          return ii !== -1 ? ii : null;
        } else {
          ii = indexOf.call(this._minWeekdaysParse, llc);
          return ii !== -1 ? ii : null;
        }
      } else {
        if (format === 'dddd') {
          ii = indexOf.call(this._weekdaysParse, llc);
          if (ii !== -1) {
            return ii;
          }
          ii = indexOf.call(this._shortWeekdaysParse, llc);
          if (ii !== -1) {
            return ii;
          }
          ii = indexOf.call(this._minWeekdaysParse, llc);
          return ii !== -1 ? ii : null;
        } else if (format === 'ddd') {
          ii = indexOf.call(this._shortWeekdaysParse, llc);
          if (ii !== -1) {
            return ii;
          }
          ii = indexOf.call(this._weekdaysParse, llc);
          if (ii !== -1) {
            return ii;
          }
          ii = indexOf.call(this._minWeekdaysParse, llc);
          return ii !== -1 ? ii : null;
        } else {
          ii = indexOf.call(this._minWeekdaysParse, llc);
          if (ii !== -1) {
            return ii;
          }
          ii = indexOf.call(this._weekdaysParse, llc);
          if (ii !== -1) {
            return ii;
          }
          ii = indexOf.call(this._shortWeekdaysParse, llc);
          return ii !== -1 ? ii : null;
        }
      }
    }
    function localeWeekdaysParse(weekdayName, format, strict) {
      var i, mom, regex;
      if (this._weekdaysParseExact) {
        return handleStrictParse$1.call(this, weekdayName, format, strict);
      }
      if (!this._weekdaysParse) {
        this._weekdaysParse = [];
        this._minWeekdaysParse = [];
        this._shortWeekdaysParse = [];
        this._fullWeekdaysParse = [];
      }
      for (i = 0; i < 7; i++) {
        // make the regex if we don't have it already

        mom = createUTC([2000, 1]).day(i);
        if (strict && !this._fullWeekdaysParse[i]) {
          this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\\.?') + '$', 'i');
          this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\\.?') + '$', 'i');
          this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\\.?') + '$', 'i');
        }
        if (!this._weekdaysParse[i]) {
          regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
          this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
        }
        // test the regex
        if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {
          return i;
        } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {
          return i;
        } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {
          return i;
        } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
          return i;
        }
      }
    }

    // MOMENTS

    function getSetDayOfWeek(input) {
      if (!this.isValid()) {
        return input != null ? this : NaN;
      }
      var day = get(this, 'Day');
      if (input != null) {
        input = parseWeekday(input, this.localeData());
        return this.add(input - day, 'd');
      } else {
        return day;
      }
    }
    function getSetLocaleDayOfWeek(input) {
      if (!this.isValid()) {
        return input != null ? this : NaN;
      }
      var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
      return input == null ? weekday : this.add(input - weekday, 'd');
    }
    function getSetISODayOfWeek(input) {
      if (!this.isValid()) {
        return input != null ? this : NaN;
      }

      // behaves the same as moment#day except
      // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
      // as a setter, sunday should belong to the previous week.

      if (input != null) {
        var weekday = parseIsoWeekday(input, this.localeData());
        return this.day(this.day() % 7 ? weekday : weekday - 7);
      } else {
        return this.day() || 7;
      }
    }
    function weekdaysRegex(isStrict) {
      if (this._weekdaysParseExact) {
        if (!hasOwnProp(this, '_weekdaysRegex')) {
          computeWeekdaysParse.call(this);
        }
        if (isStrict) {
          return this._weekdaysStrictRegex;
        } else {
          return this._weekdaysRegex;
        }
      } else {
        if (!hasOwnProp(this, '_weekdaysRegex')) {
          this._weekdaysRegex = defaultWeekdaysRegex;
        }
        return this._weekdaysStrictRegex && isStrict ? this._weekdaysStrictRegex : this._weekdaysRegex;
      }
    }
    function weekdaysShortRegex(isStrict) {
      if (this._weekdaysParseExact) {
        if (!hasOwnProp(this, '_weekdaysRegex')) {
          computeWeekdaysParse.call(this);
        }
        if (isStrict) {
          return this._weekdaysShortStrictRegex;
        } else {
          return this._weekdaysShortRegex;
        }
      } else {
        if (!hasOwnProp(this, '_weekdaysShortRegex')) {
          this._weekdaysShortRegex = defaultWeekdaysShortRegex;
        }
        return this._weekdaysShortStrictRegex && isStrict ? this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
      }
    }
    function weekdaysMinRegex(isStrict) {
      if (this._weekdaysParseExact) {
        if (!hasOwnProp(this, '_weekdaysRegex')) {
          computeWeekdaysParse.call(this);
        }
        if (isStrict) {
          return this._weekdaysMinStrictRegex;
        } else {
          return this._weekdaysMinRegex;
        }
      } else {
        if (!hasOwnProp(this, '_weekdaysMinRegex')) {
          this._weekdaysMinRegex = defaultWeekdaysMinRegex;
        }
        return this._weekdaysMinStrictRegex && isStrict ? this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
      }
    }
    function computeWeekdaysParse() {
      function cmpLenRev(a, b) {
        return b.length - a.length;
      }
      var minPieces = [],
        shortPieces = [],
        longPieces = [],
        mixedPieces = [],
        i,
        mom,
        minp,
        shortp,
        longp;
      for (i = 0; i < 7; i++) {
        // make the regex if we don't have it already
        mom = createUTC([2000, 1]).day(i);
        minp = regexEscape(this.weekdaysMin(mom, ''));
        shortp = regexEscape(this.weekdaysShort(mom, ''));
        longp = regexEscape(this.weekdays(mom, ''));
        minPieces.push(minp);
        shortPieces.push(shortp);
        longPieces.push(longp);
        mixedPieces.push(minp);
        mixedPieces.push(shortp);
        mixedPieces.push(longp);
      }
      // Sorting makes sure if one weekday (or abbr) is a prefix of another it
      // will match the longer piece.
      minPieces.sort(cmpLenRev);
      shortPieces.sort(cmpLenRev);
      longPieces.sort(cmpLenRev);
      mixedPieces.sort(cmpLenRev);
      this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
      this._weekdaysShortRegex = this._weekdaysRegex;
      this._weekdaysMinRegex = this._weekdaysRegex;
      this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
      this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
      this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i');
    }

    // FORMATTING

    function hFormat() {
      return this.hours() % 12 || 12;
    }
    function kFormat() {
      return this.hours() || 24;
    }
    addFormatToken('H', ['HH', 2], 0, 'hour');
    addFormatToken('h', ['hh', 2], 0, hFormat);
    addFormatToken('k', ['kk', 2], 0, kFormat);
    addFormatToken('hmm', 0, 0, function () {
      return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
    });
    addFormatToken('hmmss', 0, 0, function () {
      return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
    });
    addFormatToken('Hmm', 0, 0, function () {
      return '' + this.hours() + zeroFill(this.minutes(), 2);
    });
    addFormatToken('Hmmss', 0, 0, function () {
      return '' + this.hours() + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
    });
    function meridiem(token, lowercase) {
      addFormatToken(token, 0, 0, function () {
        return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
      });
    }
    meridiem('a', true);
    meridiem('A', false);

    // PARSING

    function matchMeridiem(isStrict, locale) {
      return locale._meridiemParse;
    }
    addRegexToken('a', matchMeridiem);
    addRegexToken('A', matchMeridiem);
    addRegexToken('H', match1to2, match1to2HasZero);
    addRegexToken('h', match1to2, match1to2NoLeadingZero);
    addRegexToken('k', match1to2, match1to2NoLeadingZero);
    addRegexToken('HH', match1to2, match2);
    addRegexToken('hh', match1to2, match2);
    addRegexToken('kk', match1to2, match2);
    addRegexToken('hmm', match3to4);
    addRegexToken('hmmss', match5to6);
    addRegexToken('Hmm', match3to4);
    addRegexToken('Hmmss', match5to6);
    addParseToken(['H', 'HH'], HOUR);
    addParseToken(['k', 'kk'], function (input, array, config) {
      var kInput = toInt(input);
      array[HOUR] = kInput === 24 ? 0 : kInput;
    });
    addParseToken(['a', 'A'], function (input, array, config) {
      config._isPm = config._locale.isPM(input);
      config._meridiem = input;
    });
    addParseToken(['h', 'hh'], function (input, array, config) {
      array[HOUR] = toInt(input);
      getParsingFlags(config).bigHour = true;
    });
    addParseToken('hmm', function (input, array, config) {
      var pos = input.length - 2;
      array[HOUR] = toInt(input.substr(0, pos));
      array[MINUTE] = toInt(input.substr(pos));
      getParsingFlags(config).bigHour = true;
    });
    addParseToken('hmmss', function (input, array, config) {
      var pos1 = input.length - 4,
        pos2 = input.length - 2;
      array[HOUR] = toInt(input.substr(0, pos1));
      array[MINUTE] = toInt(input.substr(pos1, 2));
      array[SECOND] = toInt(input.substr(pos2));
      getParsingFlags(config).bigHour = true;
    });
    addParseToken('Hmm', function (input, array, config) {
      var pos = input.length - 2;
      array[HOUR] = toInt(input.substr(0, pos));
      array[MINUTE] = toInt(input.substr(pos));
    });
    addParseToken('Hmmss', function (input, array, config) {
      var pos1 = input.length - 4,
        pos2 = input.length - 2;
      array[HOUR] = toInt(input.substr(0, pos1));
      array[MINUTE] = toInt(input.substr(pos1, 2));
      array[SECOND] = toInt(input.substr(pos2));
    });

    // LOCALES

    function localeIsPM(input) {
      // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
      // Using charAt should be more compatible.
      return (input + '').toLowerCase().charAt(0) === 'p';
    }
    var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i,
      // Setting the hour should keep the time, because the user explicitly
      // specified which hour they want. So trying to maintain the same hour (in
      // a new timezone) makes sense. Adding/subtracting hours does not follow
      // this rule.
      getSetHour = makeGetSet('Hours', true);
    function localeMeridiem(hours, minutes, isLower) {
      if (hours > 11) {
        return isLower ? 'pm' : 'PM';
      } else {
        return isLower ? 'am' : 'AM';
      }
    }
    var baseConfig = {
      calendar: defaultCalendar,
      longDateFormat: defaultLongDateFormat,
      invalidDate: defaultInvalidDate,
      ordinal: defaultOrdinal,
      dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
      relativeTime: defaultRelativeTime,
      months: defaultLocaleMonths,
      monthsShort: defaultLocaleMonthsShort,
      week: defaultLocaleWeek,
      weekdays: defaultLocaleWeekdays,
      weekdaysMin: defaultLocaleWeekdaysMin,
      weekdaysShort: defaultLocaleWeekdaysShort,
      meridiemParse: defaultLocaleMeridiemParse
    };

    // internal storage for locale config files
    var locales = {},
      localeFamilies = {},
      globalLocale;
    function commonPrefix(arr1, arr2) {
      var i,
        minl = Math.min(arr1.length, arr2.length);
      for (i = 0; i < minl; i += 1) {
        if (arr1[i] !== arr2[i]) {
          return i;
        }
      }
      return minl;
    }
    function normalizeLocale(key) {
      return key ? key.toLowerCase().replace('_', '-') : key;
    }

    // pick the locale from the array
    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
    function chooseLocale(names) {
      var i = 0,
        j,
        next,
        locale,
        split;
      while (i < names.length) {
        split = normalizeLocale(names[i]).split('-');
        j = split.length;
        next = normalizeLocale(names[i + 1]);
        next = next ? next.split('-') : null;
        while (j > 0) {
          locale = loadLocale(split.slice(0, j).join('-'));
          if (locale) {
            return locale;
          }
          if (next && next.length >= j && commonPrefix(split, next) >= j - 1) {
            //the next array item is better than a shallower substring of this one
            break;
          }
          j--;
        }
        i++;
      }
      return globalLocale;
    }
    function isLocaleNameSane(name) {
      // Prevent names that look like filesystem paths, i.e contain '/' or '\'
      // Ensure name is available and function returns boolean
      return !!(name && name.match('^[^/\\\\]*$'));
    }
    function loadLocale(name) {
      var oldLocale = null,
        aliasedRequire;
      // TODO: Find a better way to register and load all the locales in Node
      if (locales[name] === undefined && typeof module !== 'undefined' && module && module.exports && isLocaleNameSane(name)) {
        try {
          oldLocale = globalLocale._abbr;
          aliasedRequire = require;
          aliasedRequire('./locale/' + name);
          getSetGlobalLocale(oldLocale);
        } catch (e) {
          // mark as not found to avoid repeating expensive file require call causing high CPU
          // when trying to find en-US, en_US, en-us for every format call
          locales[name] = null; // null means not found
        }
      }
      return locales[name];
    }

    // This function will load locale and then set the global locale.  If
    // no arguments are passed in, it will simply return the current global
    // locale key.
    function getSetGlobalLocale(key, values) {
      var data;
      if (key) {
        if (isUndefined(values)) {
          data = getLocale(key);
        } else {
          data = defineLocale(key, values);
        }
        if (data) {
          // moment.duration._locale = moment._locale = data;
          globalLocale = data;
        } else {
          if (typeof console !== 'undefined' && console.warn) {
            //warn user if arguments are passed but the locale could not be set
            console.warn('Locale ' + key + ' not found. Did you forget to load it?');
          }
        }
      }
      return globalLocale._abbr;
    }
    function defineLocale(name, config) {
      if (config !== null) {
        var locale,
          parentConfig = baseConfig;
        config.abbr = name;
        if (locales[name] != null) {
          deprecateSimple('defineLocaleOverride', 'use moment.updateLocale(localeName, config) to change ' + 'an existing locale. moment.defineLocale(localeName, ' + 'config) should only be used for creating a new locale ' + 'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');
          parentConfig = locales[name]._config;
        } else if (config.parentLocale != null) {
          if (locales[config.parentLocale] != null) {
            parentConfig = locales[config.parentLocale]._config;
          } else {
            locale = loadLocale(config.parentLocale);
            if (locale != null) {
              parentConfig = locale._config;
            } else {
              if (!localeFamilies[config.parentLocale]) {
                localeFamilies[config.parentLocale] = [];
              }
              localeFamilies[config.parentLocale].push({
                name: name,
                config: config
              });
              return null;
            }
          }
        }
        locales[name] = new Locale(mergeConfigs(parentConfig, config));
        if (localeFamilies[name]) {
          localeFamilies[name].forEach(function (x) {
            defineLocale(x.name, x.config);
          });
        }

        // backwards compat for now: also set the locale
        // make sure we set the locale AFTER all child locales have been
        // created, so we won't end up with the child locale set.
        getSetGlobalLocale(name);
        return locales[name];
      } else {
        // useful for testing
        delete locales[name];
        return null;
      }
    }
    function updateLocale(name, config) {
      if (config != null) {
        var locale,
          tmpLocale,
          parentConfig = baseConfig;
        if (locales[name] != null && locales[name].parentLocale != null) {
          // Update existing child locale in-place to avoid memory-leaks
          locales[name].set(mergeConfigs(locales[name]._config, config));
        } else {
          // MERGE
          tmpLocale = loadLocale(name);
          if (tmpLocale != null) {
            parentConfig = tmpLocale._config;
          }
          config = mergeConfigs(parentConfig, config);
          if (tmpLocale == null) {
            // updateLocale is called for creating a new locale
            // Set abbr so it will have a name (getters return
            // undefined otherwise).
            config.abbr = name;
          }
          locale = new Locale(config);
          locale.parentLocale = locales[name];
          locales[name] = locale;
        }

        // backwards compat for now: also set the locale
        getSetGlobalLocale(name);
      } else {
        // pass null for config to unupdate, useful for tests
        if (locales[name] != null) {
          if (locales[name].parentLocale != null) {
            locales[name] = locales[name].parentLocale;
            if (name === getSetGlobalLocale()) {
              getSetGlobalLocale(name);
            }
          } else if (locales[name] != null) {
            delete locales[name];
          }
        }
      }
      return locales[name];
    }

    // returns locale data
    function getLocale(key) {
      var locale;
      if (key && key._locale && key._locale._abbr) {
        key = key._locale._abbr;
      }
      if (!key) {
        return globalLocale;
      }
      if (!isArray(key)) {
        //short-circuit everything else
        locale = loadLocale(key);
        if (locale) {
          return locale;
        }
        key = [key];
      }
      return chooseLocale(key);
    }
    function listLocales() {
      return keys(locales);
    }
    function checkOverflow(m) {
      var overflow,
        a = m._a;
      if (a && getParsingFlags(m).overflow === -2) {
        overflow = a[MONTH] < 0 || a[MONTH] > 11 ? MONTH : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH]) ? DATE : a[HOUR] < 0 || a[HOUR] > 24 || a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0) ? HOUR : a[MINUTE] < 0 || a[MINUTE] > 59 ? MINUTE : a[SECOND] < 0 || a[SECOND] > 59 ? SECOND : a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND : -1;
        if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
          overflow = DATE;
        }
        if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
          overflow = WEEK;
        }
        if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
          overflow = WEEKDAY;
        }
        getParsingFlags(m).overflow = overflow;
      }
      return m;
    }

    // iso 8601 regex
    // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
    var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,
      basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,
      tzRegex = /Z|[+-]\d\d(?::?\d\d)?/,
      isoDates = [['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/], ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/], ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/], ['GGGG-[W]WW', /\d{4}-W\d\d/, false], ['YYYY-DDD', /\d{4}-\d{3}/], ['YYYY-MM', /\d{4}-\d\d/, false], ['YYYYYYMMDD', /[+-]\d{10}/], ['YYYYMMDD', /\d{8}/], ['GGGG[W]WWE', /\d{4}W\d{3}/], ['GGGG[W]WW', /\d{4}W\d{2}/, false], ['YYYYDDD', /\d{7}/], ['YYYYMM', /\d{6}/, false], ['YYYY', /\d{4}/, false]],
      // iso time formats and regexes
      isoTimes = [['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/], ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/], ['HH:mm:ss', /\d\d:\d\d:\d\d/], ['HH:mm', /\d\d:\d\d/], ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/], ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/], ['HHmmss', /\d\d\d\d\d\d/], ['HHmm', /\d\d\d\d/], ['HH', /\d\d/]],
      aspNetJsonRegex = /^\/?Date\((-?\d+)/i,
      // RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3
      rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/,
      obsOffsets = {
        UT: 0,
        GMT: 0,
        EDT: -4 * 60,
        EST: -5 * 60,
        CDT: -5 * 60,
        CST: -6 * 60,
        MDT: -6 * 60,
        MST: -7 * 60,
        PDT: -7 * 60,
        PST: -8 * 60
      };

    // date from iso format
    function configFromISO(config) {
      var i,
        l,
        string = config._i,
        match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
        allowTime,
        dateFormat,
        timeFormat,
        tzFormat,
        isoDatesLen = isoDates.length,
        isoTimesLen = isoTimes.length;
      if (match) {
        getParsingFlags(config).iso = true;
        for (i = 0, l = isoDatesLen; i < l; i++) {
          if (isoDates[i][1].exec(match[1])) {
            dateFormat = isoDates[i][0];
            allowTime = isoDates[i][2] !== false;
            break;
          }
        }
        if (dateFormat == null) {
          config._isValid = false;
          return;
        }
        if (match[3]) {
          for (i = 0, l = isoTimesLen; i < l; i++) {
            if (isoTimes[i][1].exec(match[3])) {
              // match[2] should be 'T' or space
              timeFormat = (match[2] || ' ') + isoTimes[i][0];
              break;
            }
          }
          if (timeFormat == null) {
            config._isValid = false;
            return;
          }
        }
        if (!allowTime && timeFormat != null) {
          config._isValid = false;
          return;
        }
        if (match[4]) {
          if (tzRegex.exec(match[4])) {
            tzFormat = 'Z';
          } else {
            config._isValid = false;
            return;
          }
        }
        config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
        configFromStringAndFormat(config);
      } else {
        config._isValid = false;
      }
    }
    function extractFromRFC2822Strings(yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
      var result = [untruncateYear(yearStr), defaultLocaleMonthsShort.indexOf(monthStr), parseInt(dayStr, 10), parseInt(hourStr, 10), parseInt(minuteStr, 10)];
      if (secondStr) {
        result.push(parseInt(secondStr, 10));
      }
      return result;
    }
    function untruncateYear(yearStr) {
      var year = parseInt(yearStr, 10);
      if (year <= 49) {
        return 2000 + year;
      } else if (year <= 999) {
        return 1900 + year;
      }
      return year;
    }
    function preprocessRFC2822(s) {
      // Remove comments and folding whitespace and replace multiple-spaces with a single space
      return s.replace(/\([^()]*\)|[\n\t]/g, ' ').replace(/(\s\s+)/g, ' ').replace(/^\s\s*/, '').replace(/\s\s*$/, '');
    }
    function checkWeekday(weekdayStr, parsedInput, config) {
      if (weekdayStr) {
        // TODO: Replace the vanilla JS Date object with an independent day-of-week check.
        var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr),
          weekdayActual = new Date(parsedInput[0], parsedInput[1], parsedInput[2]).getDay();
        if (weekdayProvided !== weekdayActual) {
          getParsingFlags(config).weekdayMismatch = true;
          config._isValid = false;
          return false;
        }
      }
      return true;
    }
    function calculateOffset(obsOffset, militaryOffset, numOffset) {
      if (obsOffset) {
        return obsOffsets[obsOffset];
      } else if (militaryOffset) {
        // the only allowed military tz is Z
        return 0;
      } else {
        var hm = parseInt(numOffset, 10),
          m = hm % 100,
          h = (hm - m) / 100;
        return h * 60 + m;
      }
    }

    // date and time from ref 2822 format
    function configFromRFC2822(config) {
      var match = rfc2822.exec(preprocessRFC2822(config._i)),
        parsedArray;
      if (match) {
        parsedArray = extractFromRFC2822Strings(match[4], match[3], match[2], match[5], match[6], match[7]);
        if (!checkWeekday(match[1], parsedArray, config)) {
          return;
        }
        config._a = parsedArray;
        config._tzm = calculateOffset(match[8], match[9], match[10]);
        config._d = createUTCDate.apply(null, config._a);
        config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
        getParsingFlags(config).rfc2822 = true;
      } else {
        config._isValid = false;
      }
    }

    // date from 1) ASP.NET, 2) ISO, 3) RFC 2822 formats, or 4) optional fallback if parsing isn't strict
    function configFromString(config) {
      var matched = aspNetJsonRegex.exec(config._i);
      if (matched !== null) {
        config._d = new Date(+matched[1]);
        return;
      }
      configFromISO(config);
      if (config._isValid === false) {
        delete config._isValid;
      } else {
        return;
      }
      configFromRFC2822(config);
      if (config._isValid === false) {
        delete config._isValid;
      } else {
        return;
      }
      if (config._strict) {
        config._isValid = false;
      } else {
        // Final attempt, use Input Fallback
        hooks.createFromInputFallback(config);
      }
    }
    hooks.createFromInputFallback = deprecate('value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' + 'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' + 'discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.', function (config) {
      config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
    });

    // Pick the first defined of two or three arguments.
    function defaults(a, b, c) {
      if (a != null) {
        return a;
      }
      if (b != null) {
        return b;
      }
      return c;
    }
    function currentDateArray(config) {
      // hooks is actually the exported moment object
      var nowValue = new Date(hooks.now());
      if (config._useUTC) {
        return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];
      }
      return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
    }

    // convert an array to a date.
    // the array should mirror the parameters below
    // note: all values past the year are optional and will default to the lowest possible value.
    // [year, month, day , hour, minute, second, millisecond]
    function configFromArray(config) {
      var i,
        date,
        input = [],
        currentDate,
        expectedWeekday,
        yearToUse;
      if (config._d) {
        return;
      }
      currentDate = currentDateArray(config);

      //compute day of the year from weeks and weekdays
      if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
        dayOfYearFromWeekInfo(config);
      }

      //if the day of the year is set, figure out what it is
      if (config._dayOfYear != null) {
        yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);
        if (config._dayOfYear > daysInYear(yearToUse) || config._dayOfYear === 0) {
          getParsingFlags(config)._overflowDayOfYear = true;
        }
        date = createUTCDate(yearToUse, 0, config._dayOfYear);
        config._a[MONTH] = date.getUTCMonth();
        config._a[DATE] = date.getUTCDate();
      }

      // Default to current date.
      // * if no year, month, day of month are given, default to today
      // * if day of month is given, default month and year
      // * if month is given, default only year
      // * if year is given, don't default anything
      for (i = 0; i < 3 && config._a[i] == null; ++i) {
        config._a[i] = input[i] = currentDate[i];
      }

      // Zero out whatever was not defaulted, including time
      for (; i < 7; i++) {
        config._a[i] = input[i] = config._a[i] == null ? i === 2 ? 1 : 0 : config._a[i];
      }

      // Check for 24:00:00.000
      if (config._a[HOUR] === 24 && config._a[MINUTE] === 0 && config._a[SECOND] === 0 && config._a[MILLISECOND] === 0) {
        config._nextDay = true;
        config._a[HOUR] = 0;
      }
      config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
      expectedWeekday = config._useUTC ? config._d.getUTCDay() : config._d.getDay();

      // Apply timezone offset from input. The actual utcOffset can be changed
      // with parseZone.
      if (config._tzm != null) {
        config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
      }
      if (config._nextDay) {
        config._a[HOUR] = 24;
      }

      // check for mismatching day of week
      if (config._w && typeof config._w.d !== 'undefined' && config._w.d !== expectedWeekday) {
        getParsingFlags(config).weekdayMismatch = true;
      }
    }
    function dayOfYearFromWeekInfo(config) {
      var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow, curWeek;
      w = config._w;
      if (w.GG != null || w.W != null || w.E != null) {
        dow = 1;
        doy = 4;

        // TODO: We need to take the current isoWeekYear, but that depends on
        // how we interpret now (local, utc, fixed offset). So create
        // a now version of current config (take local/utc/offset flags, and
        // create now).
        weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);
        week = defaults(w.W, 1);
        weekday = defaults(w.E, 1);
        if (weekday < 1 || weekday > 7) {
          weekdayOverflow = true;
        }
      } else {
        dow = config._locale._week.dow;
        doy = config._locale._week.doy;
        curWeek = weekOfYear(createLocal(), dow, doy);
        weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);

        // Default to current week.
        week = defaults(w.w, curWeek.week);
        if (w.d != null) {
          // weekday -- low day numbers are considered next week
          weekday = w.d;
          if (weekday < 0 || weekday > 6) {
            weekdayOverflow = true;
          }
        } else if (w.e != null) {
          // local weekday -- counting starts from beginning of week
          weekday = w.e + dow;
          if (w.e < 0 || w.e > 6) {
            weekdayOverflow = true;
          }
        } else {
          // default to beginning of week
          weekday = dow;
        }
      }
      if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
        getParsingFlags(config)._overflowWeeks = true;
      } else if (weekdayOverflow != null) {
        getParsingFlags(config)._overflowWeekday = true;
      } else {
        temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
        config._a[YEAR] = temp.year;
        config._dayOfYear = temp.dayOfYear;
      }
    }

    // constant that refers to the ISO standard
    hooks.ISO_8601 = function () {};

    // constant that refers to the RFC 2822 form
    hooks.RFC_2822 = function () {};

    // date from string and format string
    function configFromStringAndFormat(config) {
      // TODO: Move this to another part of the creation flow to prevent circular deps
      if (config._f === hooks.ISO_8601) {
        configFromISO(config);
        return;
      }
      if (config._f === hooks.RFC_2822) {
        configFromRFC2822(config);
        return;
      }
      config._a = [];
      getParsingFlags(config).empty = true;

      // This array is used to make a Date, either with `new Date` or `Date.UTC`
      var string = '' + config._i,
        i,
        parsedInput,
        tokens,
        token,
        skipped,
        stringLength = string.length,
        totalParsedInputLength = 0,
        era,
        tokenLen;
      tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];
      tokenLen = tokens.length;
      for (i = 0; i < tokenLen; i++) {
        token = tokens[i];
        parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
        if (parsedInput) {
          skipped = string.substr(0, string.indexOf(parsedInput));
          if (skipped.length > 0) {
            getParsingFlags(config).unusedInput.push(skipped);
          }
          string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
          totalParsedInputLength += parsedInput.length;
        }
        // don't parse if it's not a known token
        if (formatTokenFunctions[token]) {
          if (parsedInput) {
            getParsingFlags(config).empty = false;
          } else {
            getParsingFlags(config).unusedTokens.push(token);
          }
          addTimeToArrayFromToken(token, parsedInput, config);
        } else if (config._strict && !parsedInput) {
          getParsingFlags(config).unusedTokens.push(token);
        }
      }

      // add remaining unparsed input length to the string
      getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
      if (string.length > 0) {
        getParsingFlags(config).unusedInput.push(string);
      }

      // clear _12h flag if hour is <= 12
      if (config._a[HOUR] <= 12 && getParsingFlags(config).bigHour === true && config._a[HOUR] > 0) {
        getParsingFlags(config).bigHour = undefined;
      }
      getParsingFlags(config).parsedDateParts = config._a.slice(0);
      getParsingFlags(config).meridiem = config._meridiem;
      // handle meridiem
      config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);

      // handle era
      era = getParsingFlags(config).era;
      if (era !== null) {
        config._a[YEAR] = config._locale.erasConvertYear(era, config._a[YEAR]);
      }
      configFromArray(config);
      checkOverflow(config);
    }
    function meridiemFixWrap(locale, hour, meridiem) {
      var isPm;
      if (meridiem == null) {
        // nothing to do
        return hour;
      }
      if (locale.meridiemHour != null) {
        return locale.meridiemHour(hour, meridiem);
      } else if (locale.isPM != null) {
        // Fallback
        isPm = locale.isPM(meridiem);
        if (isPm && hour < 12) {
          hour += 12;
        }
        if (!isPm && hour === 12) {
          hour = 0;
        }
        return hour;
      } else {
        // this is not supposed to happen
        return hour;
      }
    }

    // date from string and array of format strings
    function configFromStringAndArray(config) {
      var tempConfig,
        bestMoment,
        scoreToBeat,
        i,
        currentScore,
        validFormatFound,
        bestFormatIsValid = false,
        configfLen = config._f.length;
      if (configfLen === 0) {
        getParsingFlags(config).invalidFormat = true;
        config._d = new Date(NaN);
        return;
      }
      for (i = 0; i < configfLen; i++) {
        currentScore = 0;
        validFormatFound = false;
        tempConfig = copyConfig({}, config);
        if (config._useUTC != null) {
          tempConfig._useUTC = config._useUTC;
        }
        tempConfig._f = config._f[i];
        configFromStringAndFormat(tempConfig);
        if (isValid(tempConfig)) {
          validFormatFound = true;
        }

        // if there is any input that was not parsed add a penalty for that format
        currentScore += getParsingFlags(tempConfig).charsLeftOver;

        //or tokens
        currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;
        getParsingFlags(tempConfig).score = currentScore;
        if (!bestFormatIsValid) {
          if (scoreToBeat == null || currentScore < scoreToBeat || validFormatFound) {
            scoreToBeat = currentScore;
            bestMoment = tempConfig;
            if (validFormatFound) {
              bestFormatIsValid = true;
            }
          }
        } else {
          if (currentScore < scoreToBeat) {
            scoreToBeat = currentScore;
            bestMoment = tempConfig;
          }
        }
      }
      extend(config, bestMoment || tempConfig);
    }
    function configFromObject(config) {
      if (config._d) {
        return;
      }
      var i = normalizeObjectUnits(config._i),
        dayOrDate = i.day === undefined ? i.date : i.day;
      config._a = map([i.year, i.month, dayOrDate, i.hour, i.minute, i.second, i.millisecond], function (obj) {
        return obj && parseInt(obj, 10);
      });
      configFromArray(config);
    }
    function createFromConfig(config) {
      var res = new Moment(checkOverflow(prepareConfig(config)));
      if (res._nextDay) {
        // Adding is smart enough around DST
        res.add(1, 'd');
        res._nextDay = undefined;
      }
      return res;
    }
    function prepareConfig(config) {
      var input = config._i,
        format = config._f;
      config._locale = config._locale || getLocale(config._l);
      if (input === null || format === undefined && input === '') {
        return createInvalid({
          nullInput: true
        });
      }
      if (typeof input === 'string') {
        config._i = input = config._locale.preparse(input);
      }
      if (isMoment(input)) {
        return new Moment(checkOverflow(input));
      } else if (isDate(input)) {
        config._d = input;
      } else if (isArray(format)) {
        configFromStringAndArray(config);
      } else if (format) {
        configFromStringAndFormat(config);
      } else {
        configFromInput(config);
      }
      if (!isValid(config)) {
        config._d = null;
      }
      return config;
    }
    function configFromInput(config) {
      var input = config._i;
      if (isUndefined(input)) {
        config._d = new Date(hooks.now());
      } else if (isDate(input)) {
        config._d = new Date(input.valueOf());
      } else if (typeof input === 'string') {
        configFromString(config);
      } else if (isArray(input)) {
        config._a = map(input.slice(0), function (obj) {
          return parseInt(obj, 10);
        });
        configFromArray(config);
      } else if (isObject(input)) {
        configFromObject(config);
      } else if (isNumber(input)) {
        // from milliseconds
        config._d = new Date(input);
      } else {
        hooks.createFromInputFallback(config);
      }
    }
    function createLocalOrUTC(input, format, locale, strict, isUTC) {
      var c = {};
      if (format === true || format === false) {
        strict = format;
        format = undefined;
      }
      if (locale === true || locale === false) {
        strict = locale;
        locale = undefined;
      }
      if (isObject(input) && isObjectEmpty(input) || isArray(input) && input.length === 0) {
        input = undefined;
      }
      // object construction must be done this way.
      // https://github.com/moment/moment/issues/1423
      c._isAMomentObject = true;
      c._useUTC = c._isUTC = isUTC;
      c._l = locale;
      c._i = input;
      c._f = format;
      c._strict = strict;
      return createFromConfig(c);
    }
    function createLocal(input, format, locale, strict) {
      return createLocalOrUTC(input, format, locale, strict, false);
    }
    var prototypeMin = deprecate('moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/', function () {
        var other = createLocal.apply(null, arguments);
        if (this.isValid() && other.isValid()) {
          return other < this ? this : other;
        } else {
          return createInvalid();
        }
      }),
      prototypeMax = deprecate('moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/', function () {
        var other = createLocal.apply(null, arguments);
        if (this.isValid() && other.isValid()) {
          return other > this ? this : other;
        } else {
          return createInvalid();
        }
      });

    // Pick a moment m from moments so that m[fn](other) is true for all
    // other. This relies on the function fn to be transitive.
    //
    // moments should either be an array of moment objects or an array, whose
    // first element is an array of moment objects.
    function pickBy(fn, moments) {
      var res, i;
      if (moments.length === 1 && isArray(moments[0])) {
        moments = moments[0];
      }
      if (!moments.length) {
        return createLocal();
      }
      res = moments[0];
      for (i = 1; i < moments.length; ++i) {
        if (!moments[i].isValid() || moments[i][fn](res)) {
          res = moments[i];
        }
      }
      return res;
    }

    // TODO: Use [].sort instead?
    function min() {
      var args = [].slice.call(arguments, 0);
      return pickBy('isBefore', args);
    }
    function max() {
      var args = [].slice.call(arguments, 0);
      return pickBy('isAfter', args);
    }
    var now = function () {
      return Date.now ? Date.now() : +new Date();
    };
    var ordering = ['year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', 'millisecond'];
    function isDurationValid(m) {
      var key,
        unitHasDecimal = false,
        i,
        orderLen = ordering.length;
      for (key in m) {
        if (hasOwnProp(m, key) && !(indexOf.call(ordering, key) !== -1 && (m[key] == null || !isNaN(m[key])))) {
          return false;
        }
      }
      for (i = 0; i < orderLen; ++i) {
        if (m[ordering[i]]) {
          if (unitHasDecimal) {
            return false; // only allow non-integers for smallest unit
          }
          if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
            unitHasDecimal = true;
          }
        }
      }
      return true;
    }
    function isValid$1() {
      return this._isValid;
    }
    function createInvalid$1() {
      return createDuration(NaN);
    }
    function Duration(duration) {
      var normalizedInput = normalizeObjectUnits(duration),
        years = normalizedInput.year || 0,
        quarters = normalizedInput.quarter || 0,
        months = normalizedInput.month || 0,
        weeks = normalizedInput.week || normalizedInput.isoWeek || 0,
        days = normalizedInput.day || 0,
        hours = normalizedInput.hour || 0,
        minutes = normalizedInput.minute || 0,
        seconds = normalizedInput.second || 0,
        milliseconds = normalizedInput.millisecond || 0;
      this._isValid = isDurationValid(normalizedInput);

      // representation for dateAddRemove
      this._milliseconds = +milliseconds + seconds * 1e3 +
      // 1000
      minutes * 6e4 +
      // 1000 * 60
      hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
      // Because of dateAddRemove treats 24 hours as different from a
      // day when working around DST, we need to store them separately
      this._days = +days + weeks * 7;
      // It is impossible to translate months into days without knowing
      // which months you are are talking about, so we have to store
      // it separately.
      this._months = +months + quarters * 3 + years * 12;
      this._data = {};
      this._locale = getLocale();
      this._bubble();
    }
    function isDuration(obj) {
      return obj instanceof Duration;
    }
    function absRound(number) {
      if (number < 0) {
        return Math.round(-1 * number) * -1;
      } else {
        return Math.round(number);
      }
    }

    // compare two arrays, return the number of differences
    function compareArrays(array1, array2, dontConvert) {
      var len = Math.min(array1.length, array2.length),
        lengthDiff = Math.abs(array1.length - array2.length),
        diffs = 0,
        i;
      for (i = 0; i < len; i++) {
        if (dontConvert && array1[i] !== array2[i] || !dontConvert && toInt(array1[i]) !== toInt(array2[i])) {
          diffs++;
        }
      }
      return diffs + lengthDiff;
    }

    // FORMATTING

    function offset(token, separator) {
      addFormatToken(token, 0, 0, function () {
        var offset = this.utcOffset(),
          sign = '+';
        if (offset < 0) {
          offset = -offset;
          sign = '-';
        }
        return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~offset % 60, 2);
      });
    }
    offset('Z', ':');
    offset('ZZ', '');

    // PARSING

    addRegexToken('Z', matchShortOffset);
    addRegexToken('ZZ', matchShortOffset);
    addParseToken(['Z', 'ZZ'], function (input, array, config) {
      config._useUTC = true;
      config._tzm = offsetFromString(matchShortOffset, input);
    });

    // HELPERS

    // timezone chunker
    // '+10:00' > ['10',  '00']
    // '-1530'  > ['-15', '30']
    var chunkOffset = /([\+\-]|\d\d)/gi;
    function offsetFromString(matcher, string) {
      var matches = (string || '').match(matcher),
        chunk,
        parts,
        minutes;
      if (matches === null) {
        return null;
      }
      chunk = matches[matches.length - 1] || [];
      parts = (chunk + '').match(chunkOffset) || ['-', 0, 0];
      minutes = +(parts[1] * 60) + toInt(parts[2]);
      return minutes === 0 ? 0 : parts[0] === '+' ? minutes : -minutes;
    }

    // Return a moment from input, that is local/utc/zone equivalent to model.
    function cloneWithOffset(input, model) {
      var res, diff;
      if (model._isUTC) {
        res = model.clone();
        diff = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();
        // Use low-level api, because this fn is low-level api.
        res._d.setTime(res._d.valueOf() + diff);
        hooks.updateOffset(res, false);
        return res;
      } else {
        return createLocal(input).local();
      }
    }
    function getDateOffset(m) {
      // On Firefox.24 Date#getTimezoneOffset returns a floating point.
      // https://github.com/moment/moment/pull/1871
      return -Math.round(m._d.getTimezoneOffset());
    }

    // HOOKS

    // This function will be called whenever a moment is mutated.
    // It is intended to keep the offset in sync with the timezone.
    hooks.updateOffset = function () {};

    // MOMENTS

    // keepLocalTime = true means only change the timezone, without
    // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
    // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
    // +0200, so we adjust the time as needed, to be valid.
    //
    // Keeping the time actually adds/subtracts (one hour)
    // from the actual represented time. That is why we call updateOffset
    // a second time. In case it wants us to change the offset again
    // _changeInProgress == true case, then we have to adjust, because
    // there is no such time in the given timezone.
    function getSetOffset(input, keepLocalTime, keepMinutes) {
      var offset = this._offset || 0,
        localAdjust;
      if (!this.isValid()) {
        return input != null ? this : NaN;
      }
      if (input != null) {
        if (typeof input === 'string') {
          input = offsetFromString(matchShortOffset, input);
          if (input === null) {
            return this;
          }
        } else if (Math.abs(input) < 16 && !keepMinutes) {
          input = input * 60;
        }
        if (!this._isUTC && keepLocalTime) {
          localAdjust = getDateOffset(this);
        }
        this._offset = input;
        this._isUTC = true;
        if (localAdjust != null) {
          this.add(localAdjust, 'm');
        }
        if (offset !== input) {
          if (!keepLocalTime || this._changeInProgress) {
            addSubtract(this, createDuration(input - offset, 'm'), 1, false);
          } else if (!this._changeInProgress) {
            this._changeInProgress = true;
            hooks.updateOffset(this, true);
            this._changeInProgress = null;
          }
        }
        return this;
      } else {
        return this._isUTC ? offset : getDateOffset(this);
      }
    }
    function getSetZone(input, keepLocalTime) {
      if (input != null) {
        if (typeof input !== 'string') {
          input = -input;
        }
        this.utcOffset(input, keepLocalTime);
        return this;
      } else {
        return -this.utcOffset();
      }
    }
    function setOffsetToUTC(keepLocalTime) {
      return this.utcOffset(0, keepLocalTime);
    }
    function setOffsetToLocal(keepLocalTime) {
      if (this._isUTC) {
        this.utcOffset(0, keepLocalTime);
        this._isUTC = false;
        if (keepLocalTime) {
          this.subtract(getDateOffset(this), 'm');
        }
      }
      return this;
    }
    function setOffsetToParsedOffset() {
      if (this._tzm != null) {
        this.utcOffset(this._tzm, false, true);
      } else if (typeof this._i === 'string') {
        var tZone = offsetFromString(matchOffset, this._i);
        if (tZone != null) {
          this.utcOffset(tZone);
        } else {
          this.utcOffset(0, true);
        }
      }
      return this;
    }
    function hasAlignedHourOffset(input) {
      if (!this.isValid()) {
        return false;
      }
      input = input ? createLocal(input).utcOffset() : 0;
      return (this.utcOffset() - input) % 60 === 0;
    }
    function isDaylightSavingTime() {
      return this.utcOffset() > this.clone().month(0).utcOffset() || this.utcOffset() > this.clone().month(5).utcOffset();
    }
    function isDaylightSavingTimeShifted() {
      if (!isUndefined(this._isDSTShifted)) {
        return this._isDSTShifted;
      }
      var c = {},
        other;
      copyConfig(c, this);
      c = prepareConfig(c);
      if (c._a) {
        other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
        this._isDSTShifted = this.isValid() && compareArrays(c._a, other.toArray()) > 0;
      } else {
        this._isDSTShifted = false;
      }
      return this._isDSTShifted;
    }
    function isLocal() {
      return this.isValid() ? !this._isUTC : false;
    }
    function isUtcOffset() {
      return this.isValid() ? this._isUTC : false;
    }
    function isUtc() {
      return this.isValid() ? this._isUTC && this._offset === 0 : false;
    }

    // ASP.NET json date format regex
    var aspNetRegex = /^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/,
      // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
      // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
      // and further modified to allow for strings containing both week and day
      isoRegex = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;
    function createDuration(input, key) {
      var duration = input,
        // matching against regexp is expensive, do it on demand
        match = null,
        sign,
        ret,
        diffRes;
      if (isDuration(input)) {
        duration = {
          ms: input._milliseconds,
          d: input._days,
          M: input._months
        };
      } else if (isNumber(input) || !isNaN(+input)) {
        duration = {};
        if (key) {
          duration[key] = +input;
        } else {
          duration.milliseconds = +input;
        }
      } else if (match = aspNetRegex.exec(input)) {
        sign = match[1] === '-' ? -1 : 1;
        duration = {
          y: 0,
          d: toInt(match[DATE]) * sign,
          h: toInt(match[HOUR]) * sign,
          m: toInt(match[MINUTE]) * sign,
          s: toInt(match[SECOND]) * sign,
          ms: toInt(absRound(match[MILLISECOND] * 1000)) * sign // the millisecond decimal point is included in the match
        };
      } else if (match = isoRegex.exec(input)) {
        sign = match[1] === '-' ? -1 : 1;
        duration = {
          y: parseIso(match[2], sign),
          M: parseIso(match[3], sign),
          w: parseIso(match[4], sign),
          d: parseIso(match[5], sign),
          h: parseIso(match[6], sign),
          m: parseIso(match[7], sign),
          s: parseIso(match[8], sign)
        };
      } else if (duration == null) {
        // checks for null or undefined
        duration = {};
      } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {
        diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));
        duration = {};
        duration.ms = diffRes.milliseconds;
        duration.M = diffRes.months;
      }
      ret = new Duration(duration);
      if (isDuration(input) && hasOwnProp(input, '_locale')) {
        ret._locale = input._locale;
      }
      if (isDuration(input) && hasOwnProp(input, '_isValid')) {
        ret._isValid = input._isValid;
      }
      return ret;
    }
    createDuration.fn = Duration.prototype;
    createDuration.invalid = createInvalid$1;
    function parseIso(inp, sign) {
      // We'd normally use ~~inp for this, but unfortunately it also
      // converts floats to ints.
      // inp may be undefined, so careful calling replace on it.
      var res = inp && parseFloat(inp.replace(',', '.'));
      // apply sign while we're at it
      return (isNaN(res) ? 0 : res) * sign;
    }
    function positiveMomentsDifference(base, other) {
      var res = {};
      res.months = other.month() - base.month() + (other.year() - base.year()) * 12;
      if (base.clone().add(res.months, 'M').isAfter(other)) {
        --res.months;
      }
      res.milliseconds = +other - +base.clone().add(res.months, 'M');
      return res;
    }
    function momentsDifference(base, other) {
      var res;
      if (!(base.isValid() && other.isValid())) {
        return {
          milliseconds: 0,
          months: 0
        };
      }
      other = cloneWithOffset(other, base);
      if (base.isBefore(other)) {
        res = positiveMomentsDifference(base, other);
      } else {
        res = positiveMomentsDifference(other, base);
        res.milliseconds = -res.milliseconds;
        res.months = -res.months;
      }
      return res;
    }

    // TODO: remove 'name' arg after deprecation is removed
    function createAdder(direction, name) {
      return function (val, period) {
        var dur, tmp;
        //invert the arguments, but complain about it
        if (period !== null && !isNaN(+period)) {
          deprecateSimple(name, 'moment().' + name + '(period, number) is deprecated. Please use moment().' + name + '(number, period). ' + 'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');
          tmp = val;
          val = period;
          period = tmp;
        }
        dur = createDuration(val, period);
        addSubtract(this, dur, direction);
        return this;
      };
    }
    function addSubtract(mom, duration, isAdding, updateOffset) {
      var milliseconds = duration._milliseconds,
        days = absRound(duration._days),
        months = absRound(duration._months);
      if (!mom.isValid()) {
        // No op
        return;
      }
      updateOffset = updateOffset == null ? true : updateOffset;
      if (months) {
        setMonth(mom, get(mom, 'Month') + months * isAdding);
      }
      if (days) {
        set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);
      }
      if (milliseconds) {
        mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
      }
      if (updateOffset) {
        hooks.updateOffset(mom, days || months);
      }
    }
    var add = createAdder(1, 'add'),
      subtract = createAdder(-1, 'subtract');
    function isString(input) {
      return typeof input === 'string' || input instanceof String;
    }

    // type MomentInput = Moment | Date | string | number | (number | string)[] | MomentInputObject | void; // null | undefined
    function isMomentInput(input) {
      return isMoment(input) || isDate(input) || isString(input) || isNumber(input) || isNumberOrStringArray(input) || isMomentInputObject(input) || input === null || input === undefined;
    }
    function isMomentInputObject(input) {
      var objectTest = isObject(input) && !isObjectEmpty(input),
        propertyTest = false,
        properties = ['years', 'year', 'y', 'months', 'month', 'M', 'days', 'day', 'd', 'dates', 'date', 'D', 'hours', 'hour', 'h', 'minutes', 'minute', 'm', 'seconds', 'second', 's', 'milliseconds', 'millisecond', 'ms'],
        i,
        property,
        propertyLen = properties.length;
      for (i = 0; i < propertyLen; i += 1) {
        property = properties[i];
        propertyTest = propertyTest || hasOwnProp(input, property);
      }
      return objectTest && propertyTest;
    }
    function isNumberOrStringArray(input) {
      var arrayTest = isArray(input),
        dataTypeTest = false;
      if (arrayTest) {
        dataTypeTest = input.filter(function (item) {
          return !isNumber(item) && isString(input);
        }).length === 0;
      }
      return arrayTest && dataTypeTest;
    }
    function isCalendarSpec(input) {
      var objectTest = isObject(input) && !isObjectEmpty(input),
        propertyTest = false,
        properties = ['sameDay', 'nextDay', 'lastDay', 'nextWeek', 'lastWeek', 'sameElse'],
        i,
        property;
      for (i = 0; i < properties.length; i += 1) {
        property = properties[i];
        propertyTest = propertyTest || hasOwnProp(input, property);
      }
      return objectTest && propertyTest;
    }
    function getCalendarFormat(myMoment, now) {
      var diff = myMoment.diff(now, 'days', true);
      return diff < -6 ? 'sameElse' : diff < -1 ? 'lastWeek' : diff < 0 ? 'lastDay' : diff < 1 ? 'sameDay' : diff < 2 ? 'nextDay' : diff < 7 ? 'nextWeek' : 'sameElse';
    }
    function calendar$1(time, formats) {
      // Support for single parameter, formats only overload to the calendar function
      if (arguments.length === 1) {
        if (!arguments[0]) {
          time = undefined;
          formats = undefined;
        } else if (isMomentInput(arguments[0])) {
          time = arguments[0];
          formats = undefined;
        } else if (isCalendarSpec(arguments[0])) {
          formats = arguments[0];
          time = undefined;
        }
      }
      // We want to compare the start of today, vs this.
      // Getting start-of-today depends on whether we're local/utc/offset or not.
      var now = time || createLocal(),
        sod = cloneWithOffset(now, this).startOf('day'),
        format = hooks.calendarFormat(this, sod) || 'sameElse',
        output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);
      return this.format(output || this.localeData().calendar(format, this, createLocal(now)));
    }
    function clone() {
      return new Moment(this);
    }
    function isAfter(input, units) {
      var localInput = isMoment(input) ? input : createLocal(input);
      if (!(this.isValid() && localInput.isValid())) {
        return false;
      }
      units = normalizeUnits(units) || 'millisecond';
      if (units === 'millisecond') {
        return this.valueOf() > localInput.valueOf();
      } else {
        return localInput.valueOf() < this.clone().startOf(units).valueOf();
      }
    }
    function isBefore(input, units) {
      var localInput = isMoment(input) ? input : createLocal(input);
      if (!(this.isValid() && localInput.isValid())) {
        return false;
      }
      units = normalizeUnits(units) || 'millisecond';
      if (units === 'millisecond') {
        return this.valueOf() < localInput.valueOf();
      } else {
        return this.clone().endOf(units).valueOf() < localInput.valueOf();
      }
    }
    function isBetween(from, to, units, inclusivity) {
      var localFrom = isMoment(from) ? from : createLocal(from),
        localTo = isMoment(to) ? to : createLocal(to);
      if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {
        return false;
      }
      inclusivity = inclusivity || '()';
      return (inclusivity[0] === '(' ? this.isAfter(localFrom, units) : !this.isBefore(localFrom, units)) && (inclusivity[1] === ')' ? this.isBefore(localTo, units) : !this.isAfter(localTo, units));
    }
    function isSame(input, units) {
      var localInput = isMoment(input) ? input : createLocal(input),
        inputMs;
      if (!(this.isValid() && localInput.isValid())) {
        return false;
      }
      units = normalizeUnits(units) || 'millisecond';
      if (units === 'millisecond') {
        return this.valueOf() === localInput.valueOf();
      } else {
        inputMs = localInput.valueOf();
        return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
      }
    }
    function isSameOrAfter(input, units) {
      return this.isSame(input, units) || this.isAfter(input, units);
    }
    function isSameOrBefore(input, units) {
      return this.isSame(input, units) || this.isBefore(input, units);
    }
    function diff(input, units, asFloat) {
      var that, zoneDelta, output;
      if (!this.isValid()) {
        return NaN;
      }
      that = cloneWithOffset(input, this);
      if (!that.isValid()) {
        return NaN;
      }
      zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;
      units = normalizeUnits(units);
      switch (units) {
        case 'year':
          output = monthDiff(this, that) / 12;
          break;
        case 'month':
          output = monthDiff(this, that);
          break;
        case 'quarter':
          output = monthDiff(this, that) / 3;
          break;
        case 'second':
          output = (this - that) / 1e3;
          break;
        // 1000
        case 'minute':
          output = (this - that) / 6e4;
          break;
        // 1000 * 60
        case 'hour':
          output = (this - that) / 36e5;
          break;
        // 1000 * 60 * 60
        case 'day':
          output = (this - that - zoneDelta) / 864e5;
          break;
        // 1000 * 60 * 60 * 24, negate dst
        case 'week':
          output = (this - that - zoneDelta) / 6048e5;
          break;
        // 1000 * 60 * 60 * 24 * 7, negate dst
        default:
          output = this - that;
      }
      return asFloat ? output : absFloor(output);
    }
    function monthDiff(a, b) {
      if (a.date() < b.date()) {
        // end-of-month calculations work correct when the start month has more
        // days than the end month.
        return -monthDiff(b, a);
      }
      // difference in months
      var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month()),
        // b is in (anchor - 1 month, anchor + 1 month)
        anchor = a.clone().add(wholeMonthDiff, 'months'),
        anchor2,
        adjust;
      if (b - anchor < 0) {
        anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
        // linear across the month
        adjust = (b - anchor) / (anchor - anchor2);
      } else {
        anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
        // linear across the month
        adjust = (b - anchor) / (anchor2 - anchor);
      }

      //check for negative zero, return zero if negative zero
      return -(wholeMonthDiff + adjust) || 0;
    }
    hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
    hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';
    function toString() {
      return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
    }
    function toISOString(keepOffset) {
      if (!this.isValid()) {
        return null;
      }
      var utc = keepOffset !== true,
        m = utc ? this.clone().utc() : this;
      if (m.year() < 0 || m.year() > 9999) {
        return formatMoment(m, utc ? 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYYYY-MM-DD[T]HH:mm:ss.SSSZ');
      }
      if (isFunction(Date.prototype.toISOString)) {
        // native implementation is ~50x faster, use it when we can
        if (utc) {
          return this.toDate().toISOString();
        } else {
          return new Date(this.valueOf() + this.utcOffset() * 60 * 1000).toISOString().replace('Z', formatMoment(m, 'Z'));
        }
      }
      return formatMoment(m, utc ? 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYY-MM-DD[T]HH:mm:ss.SSSZ');
    }

    /**
     * Return a human readable representation of a moment that can
     * also be evaluated to get a new moment which is the same
     *
     * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
     */
    function inspect() {
      if (!this.isValid()) {
        return 'moment.invalid(/* ' + this._i + ' */)';
      }
      var func = 'moment',
        zone = '',
        prefix,
        year,
        datetime,
        suffix;
      if (!this.isLocal()) {
        func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
        zone = 'Z';
      }
      prefix = '[' + func + '("]';
      year = 0 <= this.year() && this.year() <= 9999 ? 'YYYY' : 'YYYYYY';
      datetime = '-MM-DD[T]HH:mm:ss.SSS';
      suffix = zone + '[")]';
      return this.format(prefix + year + datetime + suffix);
    }
    function format(inputString) {
      if (!inputString) {
        inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
      }
      var output = formatMoment(this, inputString);
      return this.localeData().postformat(output);
    }
    function from(time, withoutSuffix) {
      if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {
        return createDuration({
          to: this,
          from: time
        }).locale(this.locale()).humanize(!withoutSuffix);
      } else {
        return this.localeData().invalidDate();
      }
    }
    function fromNow(withoutSuffix) {
      return this.from(createLocal(), withoutSuffix);
    }
    function to(time, withoutSuffix) {
      if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {
        return createDuration({
          from: this,
          to: time
        }).locale(this.locale()).humanize(!withoutSuffix);
      } else {
        return this.localeData().invalidDate();
      }
    }
    function toNow(withoutSuffix) {
      return this.to(createLocal(), withoutSuffix);
    }

    // If passed a locale key, it will set the locale for this
    // instance.  Otherwise, it will return the locale configuration
    // variables for this instance.
    function locale(key) {
      var newLocaleData;
      if (key === undefined) {
        return this._locale._abbr;
      } else {
        newLocaleData = getLocale(key);
        if (newLocaleData != null) {
          this._locale = newLocaleData;
        }
        return this;
      }
    }
    var lang = deprecate('moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.', function (key) {
      if (key === undefined) {
        return this.localeData();
      } else {
        return this.locale(key);
      }
    });
    function localeData() {
      return this._locale;
    }
    var MS_PER_SECOND = 1000,
      MS_PER_MINUTE = 60 * MS_PER_SECOND,
      MS_PER_HOUR = 60 * MS_PER_MINUTE,
      MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR;

    // actual modulo - handles negative numbers (for dates before 1970):
    function mod$1(dividend, divisor) {
      return (dividend % divisor + divisor) % divisor;
    }
    function localStartOfDate(y, m, d) {
      // the date constructor remaps years 0-99 to 1900-1999
      if (y < 100 && y >= 0) {
        // preserve leap years using a full 400 year cycle, then reset
        return new Date(y + 400, m, d) - MS_PER_400_YEARS;
      } else {
        return new Date(y, m, d).valueOf();
      }
    }
    function utcStartOfDate(y, m, d) {
      // Date.UTC remaps years 0-99 to 1900-1999
      if (y < 100 && y >= 0) {
        // preserve leap years using a full 400 year cycle, then reset
        return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;
      } else {
        return Date.UTC(y, m, d);
      }
    }
    function startOf(units) {
      var time, startOfDate;
      units = normalizeUnits(units);
      if (units === undefined || units === 'millisecond' || !this.isValid()) {
        return this;
      }
      startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;
      switch (units) {
        case 'year':
          time = startOfDate(this.year(), 0, 1);
          break;
        case 'quarter':
          time = startOfDate(this.year(), this.month() - this.month() % 3, 1);
          break;
        case 'month':
          time = startOfDate(this.year(), this.month(), 1);
          break;
        case 'week':
          time = startOfDate(this.year(), this.month(), this.date() - this.weekday());
          break;
        case 'isoWeek':
          time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1));
          break;
        case 'day':
        case 'date':
          time = startOfDate(this.year(), this.month(), this.date());
          break;
        case 'hour':
          time = this._d.valueOf();
          time -= mod$1(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR);
          break;
        case 'minute':
          time = this._d.valueOf();
          time -= mod$1(time, MS_PER_MINUTE);
          break;
        case 'second':
          time = this._d.valueOf();
          time -= mod$1(time, MS_PER_SECOND);
          break;
      }
      this._d.setTime(time);
      hooks.updateOffset(this, true);
      return this;
    }
    function endOf(units) {
      var time, startOfDate;
      units = normalizeUnits(units);
      if (units === undefined || units === 'millisecond' || !this.isValid()) {
        return this;
      }
      startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;
      switch (units) {
        case 'year':
          time = startOfDate(this.year() + 1, 0, 1) - 1;
          break;
        case 'quarter':
          time = startOfDate(this.year(), this.month() - this.month() % 3 + 3, 1) - 1;
          break;
        case 'month':
          time = startOfDate(this.year(), this.month() + 1, 1) - 1;
          break;
        case 'week':
          time = startOfDate(this.year(), this.month(), this.date() - this.weekday() + 7) - 1;
          break;
        case 'isoWeek':
          time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1) + 7) - 1;
          break;
        case 'day':
        case 'date':
          time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;
          break;
        case 'hour':
          time = this._d.valueOf();
          time += MS_PER_HOUR - mod$1(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR) - 1;
          break;
        case 'minute':
          time = this._d.valueOf();
          time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;
          break;
        case 'second':
          time = this._d.valueOf();
          time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;
          break;
      }
      this._d.setTime(time);
      hooks.updateOffset(this, true);
      return this;
    }
    function valueOf() {
      return this._d.valueOf() - (this._offset || 0) * 60000;
    }
    function unix() {
      return Math.floor(this.valueOf() / 1000);
    }
    function toDate() {
      return new Date(this.valueOf());
    }
    function toArray() {
      var m = this;
      return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];
    }
    function toObject() {
      var m = this;
      return {
        years: m.year(),
        months: m.month(),
        date: m.date(),
        hours: m.hours(),
        minutes: m.minutes(),
        seconds: m.seconds(),
        milliseconds: m.milliseconds()
      };
    }
    function toJSON() {
      // new Date(NaN).toJSON() === null
      return this.isValid() ? this.toISOString() : null;
    }
    function isValid$2() {
      return isValid(this);
    }
    function parsingFlags() {
      return extend({}, getParsingFlags(this));
    }
    function invalidAt() {
      return getParsingFlags(this).overflow;
    }
    function creationData() {
      return {
        input: this._i,
        format: this._f,
        locale: this._locale,
        isUTC: this._isUTC,
        strict: this._strict
      };
    }
    addFormatToken('N', 0, 0, 'eraAbbr');
    addFormatToken('NN', 0, 0, 'eraAbbr');
    addFormatToken('NNN', 0, 0, 'eraAbbr');
    addFormatToken('NNNN', 0, 0, 'eraName');
    addFormatToken('NNNNN', 0, 0, 'eraNarrow');
    addFormatToken('y', ['y', 1], 'yo', 'eraYear');
    addFormatToken('y', ['yy', 2], 0, 'eraYear');
    addFormatToken('y', ['yyy', 3], 0, 'eraYear');
    addFormatToken('y', ['yyyy', 4], 0, 'eraYear');
    addRegexToken('N', matchEraAbbr);
    addRegexToken('NN', matchEraAbbr);
    addRegexToken('NNN', matchEraAbbr);
    addRegexToken('NNNN', matchEraName);
    addRegexToken('NNNNN', matchEraNarrow);
    addParseToken(['N', 'NN', 'NNN', 'NNNN', 'NNNNN'], function (input, array, config, token) {
      var era = config._locale.erasParse(input, token, config._strict);
      if (era) {
        getParsingFlags(config).era = era;
      } else {
        getParsingFlags(config).invalidEra = input;
      }
    });
    addRegexToken('y', matchUnsigned);
    addRegexToken('yy', matchUnsigned);
    addRegexToken('yyy', matchUnsigned);
    addRegexToken('yyyy', matchUnsigned);
    addRegexToken('yo', matchEraYearOrdinal);
    addParseToken(['y', 'yy', 'yyy', 'yyyy'], YEAR);
    addParseToken(['yo'], function (input, array, config, token) {
      var match;
      if (config._locale._eraYearOrdinalRegex) {
        match = input.match(config._locale._eraYearOrdinalRegex);
      }
      if (config._locale.eraYearOrdinalParse) {
        array[YEAR] = config._locale.eraYearOrdinalParse(input, match);
      } else {
        array[YEAR] = parseInt(input, 10);
      }
    });
    function localeEras(m, format) {
      var i,
        l,
        date,
        eras = this._eras || getLocale('en')._eras;
      for (i = 0, l = eras.length; i < l; ++i) {
        switch (typeof eras[i].since) {
          case 'string':
            // truncate time
            date = hooks(eras[i].since).startOf('day');
            eras[i].since = date.valueOf();
            break;
        }
        switch (typeof eras[i].until) {
          case 'undefined':
            eras[i].until = +Infinity;
            break;
          case 'string':
            // truncate time
            date = hooks(eras[i].until).startOf('day').valueOf();
            eras[i].until = date.valueOf();
            break;
        }
      }
      return eras;
    }
    function localeErasParse(eraName, format, strict) {
      var i,
        l,
        eras = this.eras(),
        name,
        abbr,
        narrow;
      eraName = eraName.toUpperCase();
      for (i = 0, l = eras.length; i < l; ++i) {
        name = eras[i].name.toUpperCase();
        abbr = eras[i].abbr.toUpperCase();
        narrow = eras[i].narrow.toUpperCase();
        if (strict) {
          switch (format) {
            case 'N':
            case 'NN':
            case 'NNN':
              if (abbr === eraName) {
                return eras[i];
              }
              break;
            case 'NNNN':
              if (name === eraName) {
                return eras[i];
              }
              break;
            case 'NNNNN':
              if (narrow === eraName) {
                return eras[i];
              }
              break;
          }
        } else if ([name, abbr, narrow].indexOf(eraName) >= 0) {
          return eras[i];
        }
      }
    }
    function localeErasConvertYear(era, year) {
      var dir = era.since <= era.until ? +1 : -1;
      if (year === undefined) {
        return hooks(era.since).year();
      } else {
        return hooks(era.since).year() + (year - era.offset) * dir;
      }
    }
    function getEraName() {
      var i,
        l,
        val,
        eras = this.localeData().eras();
      for (i = 0, l = eras.length; i < l; ++i) {
        // truncate time
        val = this.clone().startOf('day').valueOf();
        if (eras[i].since <= val && val <= eras[i].until) {
          return eras[i].name;
        }
        if (eras[i].until <= val && val <= eras[i].since) {
          return eras[i].name;
        }
      }
      return '';
    }
    function getEraNarrow() {
      var i,
        l,
        val,
        eras = this.localeData().eras();
      for (i = 0, l = eras.length; i < l; ++i) {
        // truncate time
        val = this.clone().startOf('day').valueOf();
        if (eras[i].since <= val && val <= eras[i].until) {
          return eras[i].narrow;
        }
        if (eras[i].until <= val && val <= eras[i].since) {
          return eras[i].narrow;
        }
      }
      return '';
    }
    function getEraAbbr() {
      var i,
        l,
        val,
        eras = this.localeData().eras();
      for (i = 0, l = eras.length; i < l; ++i) {
        // truncate time
        val = this.clone().startOf('day').valueOf();
        if (eras[i].since <= val && val <= eras[i].until) {
          return eras[i].abbr;
        }
        if (eras[i].until <= val && val <= eras[i].since) {
          return eras[i].abbr;
        }
      }
      return '';
    }
    function getEraYear() {
      var i,
        l,
        dir,
        val,
        eras = this.localeData().eras();
      for (i = 0, l = eras.length; i < l; ++i) {
        dir = eras[i].since <= eras[i].until ? +1 : -1;

        // truncate time
        val = this.clone().startOf('day').valueOf();
        if (eras[i].since <= val && val <= eras[i].until || eras[i].until <= val && val <= eras[i].since) {
          return (this.year() - hooks(eras[i].since).year()) * dir + eras[i].offset;
        }
      }
      return this.year();
    }
    function erasNameRegex(isStrict) {
      if (!hasOwnProp(this, '_erasNameRegex')) {
        computeErasParse.call(this);
      }
      return isStrict ? this._erasNameRegex : this._erasRegex;
    }
    function erasAbbrRegex(isStrict) {
      if (!hasOwnProp(this, '_erasAbbrRegex')) {
        computeErasParse.call(this);
      }
      return isStrict ? this._erasAbbrRegex : this._erasRegex;
    }
    function erasNarrowRegex(isStrict) {
      if (!hasOwnProp(this, '_erasNarrowRegex')) {
        computeErasParse.call(this);
      }
      return isStrict ? this._erasNarrowRegex : this._erasRegex;
    }
    function matchEraAbbr(isStrict, locale) {
      return locale.erasAbbrRegex(isStrict);
    }
    function matchEraName(isStrict, locale) {
      return locale.erasNameRegex(isStrict);
    }
    function matchEraNarrow(isStrict, locale) {
      return locale.erasNarrowRegex(isStrict);
    }
    function matchEraYearOrdinal(isStrict, locale) {
      return locale._eraYearOrdinalRegex || matchUnsigned;
    }
    function computeErasParse() {
      var abbrPieces = [],
        namePieces = [],
        narrowPieces = [],
        mixedPieces = [],
        i,
        l,
        erasName,
        erasAbbr,
        erasNarrow,
        eras = this.eras();
      for (i = 0, l = eras.length; i < l; ++i) {
        erasName = regexEscape(eras[i].name);
        erasAbbr = regexEscape(eras[i].abbr);
        erasNarrow = regexEscape(eras[i].narrow);
        namePieces.push(erasName);
        abbrPieces.push(erasAbbr);
        narrowPieces.push(erasNarrow);
        mixedPieces.push(erasName);
        mixedPieces.push(erasAbbr);
        mixedPieces.push(erasNarrow);
      }
      this._erasRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
      this._erasNameRegex = new RegExp('^(' + namePieces.join('|') + ')', 'i');
      this._erasAbbrRegex = new RegExp('^(' + abbrPieces.join('|') + ')', 'i');
      this._erasNarrowRegex = new RegExp('^(' + narrowPieces.join('|') + ')', 'i');
    }

    // FORMATTING

    addFormatToken(0, ['gg', 2], 0, function () {
      return this.weekYear() % 100;
    });
    addFormatToken(0, ['GG', 2], 0, function () {
      return this.isoWeekYear() % 100;
    });
    function addWeekYearFormatToken(token, getter) {
      addFormatToken(0, [token, token.length], 0, getter);
    }
    addWeekYearFormatToken('gggg', 'weekYear');
    addWeekYearFormatToken('ggggg', 'weekYear');
    addWeekYearFormatToken('GGGG', 'isoWeekYear');
    addWeekYearFormatToken('GGGGG', 'isoWeekYear');

    // ALIASES

    // PARSING

    addRegexToken('G', matchSigned);
    addRegexToken('g', matchSigned);
    addRegexToken('GG', match1to2, match2);
    addRegexToken('gg', match1to2, match2);
    addRegexToken('GGGG', match1to4, match4);
    addRegexToken('gggg', match1to4, match4);
    addRegexToken('GGGGG', match1to6, match6);
    addRegexToken('ggggg', match1to6, match6);
    addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {
      week[token.substr(0, 2)] = toInt(input);
    });
    addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
      week[token] = hooks.parseTwoDigitYear(input);
    });

    // MOMENTS

    function getSetWeekYear(input) {
      return getSetWeekYearHelper.call(this, input, this.week(), this.weekday() + this.localeData()._week.dow, this.localeData()._week.dow, this.localeData()._week.doy);
    }
    function getSetISOWeekYear(input) {
      return getSetWeekYearHelper.call(this, input, this.isoWeek(), this.isoWeekday(), 1, 4);
    }
    function getISOWeeksInYear() {
      return weeksInYear(this.year(), 1, 4);
    }
    function getISOWeeksInISOWeekYear() {
      return weeksInYear(this.isoWeekYear(), 1, 4);
    }
    function getWeeksInYear() {
      var weekInfo = this.localeData()._week;
      return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
    }
    function getWeeksInWeekYear() {
      var weekInfo = this.localeData()._week;
      return weeksInYear(this.weekYear(), weekInfo.dow, weekInfo.doy);
    }
    function getSetWeekYearHelper(input, week, weekday, dow, doy) {
      var weeksTarget;
      if (input == null) {
        return weekOfYear(this, dow, doy).year;
      } else {
        weeksTarget = weeksInYear(input, dow, doy);
        if (week > weeksTarget) {
          week = weeksTarget;
        }
        return setWeekAll.call(this, input, week, weekday, dow, doy);
      }
    }
    function setWeekAll(weekYear, week, weekday, dow, doy) {
      var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
        date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);
      this.year(date.getUTCFullYear());
      this.month(date.getUTCMonth());
      this.date(date.getUTCDate());
      return this;
    }

    // FORMATTING

    addFormatToken('Q', 0, 'Qo', 'quarter');

    // PARSING

    addRegexToken('Q', match1);
    addParseToken('Q', function (input, array) {
      array[MONTH] = (toInt(input) - 1) * 3;
    });

    // MOMENTS

    function getSetQuarter(input) {
      return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
    }

    // FORMATTING

    addFormatToken('D', ['DD', 2], 'Do', 'date');

    // PARSING

    addRegexToken('D', match1to2, match1to2NoLeadingZero);
    addRegexToken('DD', match1to2, match2);
    addRegexToken('Do', function (isStrict, locale) {
      // TODO: Remove "ordinalParse" fallback in next major release.
      return isStrict ? locale._dayOfMonthOrdinalParse || locale._ordinalParse : locale._dayOfMonthOrdinalParseLenient;
    });
    addParseToken(['D', 'DD'], DATE);
    addParseToken('Do', function (input, array) {
      array[DATE] = toInt(input.match(match1to2)[0]);
    });

    // MOMENTS

    var getSetDayOfMonth = makeGetSet('Date', true);

    // FORMATTING

    addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');

    // PARSING

    addRegexToken('DDD', match1to3);
    addRegexToken('DDDD', match3);
    addParseToken(['DDD', 'DDDD'], function (input, array, config) {
      config._dayOfYear = toInt(input);
    });

    // HELPERS

    // MOMENTS

    function getSetDayOfYear(input) {
      var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;
      return input == null ? dayOfYear : this.add(input - dayOfYear, 'd');
    }

    // FORMATTING

    addFormatToken('m', ['mm', 2], 0, 'minute');

    // PARSING

    addRegexToken('m', match1to2, match1to2HasZero);
    addRegexToken('mm', match1to2, match2);
    addParseToken(['m', 'mm'], MINUTE);

    // MOMENTS

    var getSetMinute = makeGetSet('Minutes', false);

    // FORMATTING

    addFormatToken('s', ['ss', 2], 0, 'second');

    // PARSING

    addRegexToken('s', match1to2, match1to2HasZero);
    addRegexToken('ss', match1to2, match2);
    addParseToken(['s', 'ss'], SECOND);

    // MOMENTS

    var getSetSecond = makeGetSet('Seconds', false);

    // FORMATTING

    addFormatToken('S', 0, 0, function () {
      return ~~(this.millisecond() / 100);
    });
    addFormatToken(0, ['SS', 2], 0, function () {
      return ~~(this.millisecond() / 10);
    });
    addFormatToken(0, ['SSS', 3], 0, 'millisecond');
    addFormatToken(0, ['SSSS', 4], 0, function () {
      return this.millisecond() * 10;
    });
    addFormatToken(0, ['SSSSS', 5], 0, function () {
      return this.millisecond() * 100;
    });
    addFormatToken(0, ['SSSSSS', 6], 0, function () {
      return this.millisecond() * 1000;
    });
    addFormatToken(0, ['SSSSSSS', 7], 0, function () {
      return this.millisecond() * 10000;
    });
    addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
      return this.millisecond() * 100000;
    });
    addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
      return this.millisecond() * 1000000;
    });

    // PARSING

    addRegexToken('S', match1to3, match1);
    addRegexToken('SS', match1to3, match2);
    addRegexToken('SSS', match1to3, match3);
    var token, getSetMillisecond;
    for (token = 'SSSS'; token.length <= 9; token += 'S') {
      addRegexToken(token, matchUnsigned);
    }
    function parseMs(input, array) {
      array[MILLISECOND] = toInt(('0.' + input) * 1000);
    }
    for (token = 'S'; token.length <= 9; token += 'S') {
      addParseToken(token, parseMs);
    }
    getSetMillisecond = makeGetSet('Milliseconds', false);

    // FORMATTING

    addFormatToken('z', 0, 0, 'zoneAbbr');
    addFormatToken('zz', 0, 0, 'zoneName');

    // MOMENTS

    function getZoneAbbr() {
      return this._isUTC ? 'UTC' : '';
    }
    function getZoneName() {
      return this._isUTC ? 'Coordinated Universal Time' : '';
    }
    var proto = Moment.prototype;
    proto.add = add;
    proto.calendar = calendar$1;
    proto.clone = clone;
    proto.diff = diff;
    proto.endOf = endOf;
    proto.format = format;
    proto.from = from;
    proto.fromNow = fromNow;
    proto.to = to;
    proto.toNow = toNow;
    proto.get = stringGet;
    proto.invalidAt = invalidAt;
    proto.isAfter = isAfter;
    proto.isBefore = isBefore;
    proto.isBetween = isBetween;
    proto.isSame = isSame;
    proto.isSameOrAfter = isSameOrAfter;
    proto.isSameOrBefore = isSameOrBefore;
    proto.isValid = isValid$2;
    proto.lang = lang;
    proto.locale = locale;
    proto.localeData = localeData;
    proto.max = prototypeMax;
    proto.min = prototypeMin;
    proto.parsingFlags = parsingFlags;
    proto.set = stringSet;
    proto.startOf = startOf;
    proto.subtract = subtract;
    proto.toArray = toArray;
    proto.toObject = toObject;
    proto.toDate = toDate;
    proto.toISOString = toISOString;
    proto.inspect = inspect;
    if (typeof Symbol !== 'undefined' && Symbol.for != null) {
      proto[Symbol.for('nodejs.util.inspect.custom')] = function () {
        return 'Moment<' + this.format() + '>';
      };
    }
    proto.toJSON = toJSON;
    proto.toString = toString;
    proto.unix = unix;
    proto.valueOf = valueOf;
    proto.creationData = creationData;
    proto.eraName = getEraName;
    proto.eraNarrow = getEraNarrow;
    proto.eraAbbr = getEraAbbr;
    proto.eraYear = getEraYear;
    proto.year = getSetYear;
    proto.isLeapYear = getIsLeapYear;
    proto.weekYear = getSetWeekYear;
    proto.isoWeekYear = getSetISOWeekYear;
    proto.quarter = proto.quarters = getSetQuarter;
    proto.month = getSetMonth;
    proto.daysInMonth = getDaysInMonth;
    proto.week = proto.weeks = getSetWeek;
    proto.isoWeek = proto.isoWeeks = getSetISOWeek;
    proto.weeksInYear = getWeeksInYear;
    proto.weeksInWeekYear = getWeeksInWeekYear;
    proto.isoWeeksInYear = getISOWeeksInYear;
    proto.isoWeeksInISOWeekYear = getISOWeeksInISOWeekYear;
    proto.date = getSetDayOfMonth;
    proto.day = proto.days = getSetDayOfWeek;
    proto.weekday = getSetLocaleDayOfWeek;
    proto.isoWeekday = getSetISODayOfWeek;
    proto.dayOfYear = getSetDayOfYear;
    proto.hour = proto.hours = getSetHour;
    proto.minute = proto.minutes = getSetMinute;
    proto.second = proto.seconds = getSetSecond;
    proto.millisecond = proto.milliseconds = getSetMillisecond;
    proto.utcOffset = getSetOffset;
    proto.utc = setOffsetToUTC;
    proto.local = setOffsetToLocal;
    proto.parseZone = setOffsetToParsedOffset;
    proto.hasAlignedHourOffset = hasAlignedHourOffset;
    proto.isDST = isDaylightSavingTime;
    proto.isLocal = isLocal;
    proto.isUtcOffset = isUtcOffset;
    proto.isUtc = isUtc;
    proto.isUTC = isUtc;
    proto.zoneAbbr = getZoneAbbr;
    proto.zoneName = getZoneName;
    proto.dates = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);
    proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);
    proto.years = deprecate('years accessor is deprecated. Use year instead', getSetYear);
    proto.zone = deprecate('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/', getSetZone);
    proto.isDSTShifted = deprecate('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information', isDaylightSavingTimeShifted);
    function createUnix(input) {
      return createLocal(input * 1000);
    }
    function createInZone() {
      return createLocal.apply(null, arguments).parseZone();
    }
    function preParsePostFormat(string) {
      return string;
    }
    var proto$1 = Locale.prototype;
    proto$1.calendar = calendar;
    proto$1.longDateFormat = longDateFormat;
    proto$1.invalidDate = invalidDate;
    proto$1.ordinal = ordinal;
    proto$1.preparse = preParsePostFormat;
    proto$1.postformat = preParsePostFormat;
    proto$1.relativeTime = relativeTime;
    proto$1.pastFuture = pastFuture;
    proto$1.set = set;
    proto$1.eras = localeEras;
    proto$1.erasParse = localeErasParse;
    proto$1.erasConvertYear = localeErasConvertYear;
    proto$1.erasAbbrRegex = erasAbbrRegex;
    proto$1.erasNameRegex = erasNameRegex;
    proto$1.erasNarrowRegex = erasNarrowRegex;
    proto$1.months = localeMonths;
    proto$1.monthsShort = localeMonthsShort;
    proto$1.monthsParse = localeMonthsParse;
    proto$1.monthsRegex = monthsRegex;
    proto$1.monthsShortRegex = monthsShortRegex;
    proto$1.week = localeWeek;
    proto$1.firstDayOfYear = localeFirstDayOfYear;
    proto$1.firstDayOfWeek = localeFirstDayOfWeek;
    proto$1.weekdays = localeWeekdays;
    proto$1.weekdaysMin = localeWeekdaysMin;
    proto$1.weekdaysShort = localeWeekdaysShort;
    proto$1.weekdaysParse = localeWeekdaysParse;
    proto$1.weekdaysRegex = weekdaysRegex;
    proto$1.weekdaysShortRegex = weekdaysShortRegex;
    proto$1.weekdaysMinRegex = weekdaysMinRegex;
    proto$1.isPM = localeIsPM;
    proto$1.meridiem = localeMeridiem;
    function get$1(format, index, field, setter) {
      var locale = getLocale(),
        utc = createUTC().set(setter, index);
      return locale[field](utc, format);
    }
    function listMonthsImpl(format, index, field) {
      if (isNumber(format)) {
        index = format;
        format = undefined;
      }
      format = format || '';
      if (index != null) {
        return get$1(format, index, field, 'month');
      }
      var i,
        out = [];
      for (i = 0; i < 12; i++) {
        out[i] = get$1(format, i, field, 'month');
      }
      return out;
    }

    // ()
    // (5)
    // (fmt, 5)
    // (fmt)
    // (true)
    // (true, 5)
    // (true, fmt, 5)
    // (true, fmt)
    function listWeekdaysImpl(localeSorted, format, index, field) {
      if (typeof localeSorted === 'boolean') {
        if (isNumber(format)) {
          index = format;
          format = undefined;
        }
        format = format || '';
      } else {
        format = localeSorted;
        index = format;
        localeSorted = false;
        if (isNumber(format)) {
          index = format;
          format = undefined;
        }
        format = format || '';
      }
      var locale = getLocale(),
        shift = localeSorted ? locale._week.dow : 0,
        i,
        out = [];
      if (index != null) {
        return get$1(format, (index + shift) % 7, field, 'day');
      }
      for (i = 0; i < 7; i++) {
        out[i] = get$1(format, (i + shift) % 7, field, 'day');
      }
      return out;
    }
    function listMonths(format, index) {
      return listMonthsImpl(format, index, 'months');
    }
    function listMonthsShort(format, index) {
      return listMonthsImpl(format, index, 'monthsShort');
    }
    function listWeekdays(localeSorted, format, index) {
      return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
    }
    function listWeekdaysShort(localeSorted, format, index) {
      return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
    }
    function listWeekdaysMin(localeSorted, format, index) {
      return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
    }
    getSetGlobalLocale('en', {
      eras: [{
        since: '0001-01-01',
        until: +Infinity,
        offset: 1,
        name: 'Anno Domini',
        narrow: 'AD',
        abbr: 'AD'
      }, {
        since: '0000-12-31',
        until: -Infinity,
        offset: 1,
        name: 'Before Christ',
        narrow: 'BC',
        abbr: 'BC'
      }],
      dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
      ordinal: function (number) {
        var b = number % 10,
          output = toInt(number % 100 / 10) === 1 ? 'th' : b === 1 ? 'st' : b === 2 ? 'nd' : b === 3 ? 'rd' : 'th';
        return number + output;
      }
    });

    // Side effect imports

    hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', getSetGlobalLocale);
    hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', getLocale);
    var mathAbs = Math.abs;
    function abs() {
      var data = this._data;
      this._milliseconds = mathAbs(this._milliseconds);
      this._days = mathAbs(this._days);
      this._months = mathAbs(this._months);
      data.milliseconds = mathAbs(data.milliseconds);
      data.seconds = mathAbs(data.seconds);
      data.minutes = mathAbs(data.minutes);
      data.hours = mathAbs(data.hours);
      data.months = mathAbs(data.months);
      data.years = mathAbs(data.years);
      return this;
    }
    function addSubtract$1(duration, input, value, direction) {
      var other = createDuration(input, value);
      duration._milliseconds += direction * other._milliseconds;
      duration._days += direction * other._days;
      duration._months += direction * other._months;
      return duration._bubble();
    }

    // supports only 2.0-style add(1, 's') or add(duration)
    function add$1(input, value) {
      return addSubtract$1(this, input, value, 1);
    }

    // supports only 2.0-style subtract(1, 's') or subtract(duration)
    function subtract$1(input, value) {
      return addSubtract$1(this, input, value, -1);
    }
    function absCeil(number) {
      if (number < 0) {
        return Math.floor(number);
      } else {
        return Math.ceil(number);
      }
    }
    function bubble() {
      var milliseconds = this._milliseconds,
        days = this._days,
        months = this._months,
        data = this._data,
        seconds,
        minutes,
        hours,
        years,
        monthsFromDays;

      // if we have a mix of positive and negative values, bubble down first
      // check: https://github.com/moment/moment/issues/2166
      if (!(milliseconds >= 0 && days >= 0 && months >= 0 || milliseconds <= 0 && days <= 0 && months <= 0)) {
        milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
        days = 0;
        months = 0;
      }

      // The following code bubbles up values, see the tests for
      // examples of what that means.
      data.milliseconds = milliseconds % 1000;
      seconds = absFloor(milliseconds / 1000);
      data.seconds = seconds % 60;
      minutes = absFloor(seconds / 60);
      data.minutes = minutes % 60;
      hours = absFloor(minutes / 60);
      data.hours = hours % 24;
      days += absFloor(hours / 24);

      // convert days to months
      monthsFromDays = absFloor(daysToMonths(days));
      months += monthsFromDays;
      days -= absCeil(monthsToDays(monthsFromDays));

      // 12 months -> 1 year
      years = absFloor(months / 12);
      months %= 12;
      data.days = days;
      data.months = months;
      data.years = years;
      return this;
    }
    function daysToMonths(days) {
      // 400 years have 146097 days (taking into account leap year rules)
      // 400 years have 12 months === 4800
      return days * 4800 / 146097;
    }
    function monthsToDays(months) {
      // the reverse of daysToMonths
      return months * 146097 / 4800;
    }
    function as(units) {
      if (!this.isValid()) {
        return NaN;
      }
      var days,
        months,
        milliseconds = this._milliseconds;
      units = normalizeUnits(units);
      if (units === 'month' || units === 'quarter' || units === 'year') {
        days = this._days + milliseconds / 864e5;
        months = this._months + daysToMonths(days);
        switch (units) {
          case 'month':
            return months;
          case 'quarter':
            return months / 3;
          case 'year':
            return months / 12;
        }
      } else {
        // handle milliseconds separately because of floating point math errors (issue #1867)
        days = this._days + Math.round(monthsToDays(this._months));
        switch (units) {
          case 'week':
            return days / 7 + milliseconds / 6048e5;
          case 'day':
            return days + milliseconds / 864e5;
          case 'hour':
            return days * 24 + milliseconds / 36e5;
          case 'minute':
            return days * 1440 + milliseconds / 6e4;
          case 'second':
            return days * 86400 + milliseconds / 1000;
          // Math.floor prevents floating point math errors here
          case 'millisecond':
            return Math.floor(days * 864e5) + milliseconds;
          default:
            throw new Error('Unknown unit ' + units);
        }
      }
    }
    function makeAs(alias) {
      return function () {
        return this.as(alias);
      };
    }
    var asMilliseconds = makeAs('ms'),
      asSeconds = makeAs('s'),
      asMinutes = makeAs('m'),
      asHours = makeAs('h'),
      asDays = makeAs('d'),
      asWeeks = makeAs('w'),
      asMonths = makeAs('M'),
      asQuarters = makeAs('Q'),
      asYears = makeAs('y'),
      valueOf$1 = asMilliseconds;
    function clone$1() {
      return createDuration(this);
    }
    function get$2(units) {
      units = normalizeUnits(units);
      return this.isValid() ? this[units + 's']() : NaN;
    }
    function makeGetter(name) {
      return function () {
        return this.isValid() ? this._data[name] : NaN;
      };
    }
    var milliseconds = makeGetter('milliseconds'),
      seconds = makeGetter('seconds'),
      minutes = makeGetter('minutes'),
      hours = makeGetter('hours'),
      days = makeGetter('days'),
      months = makeGetter('months'),
      years = makeGetter('years');
    function weeks() {
      return absFloor(this.days() / 7);
    }
    var round = Math.round,
      thresholds = {
        ss: 44,
        // a few seconds to seconds
        s: 45,
        // seconds to minute
        m: 45,
        // minutes to hour
        h: 22,
        // hours to day
        d: 26,
        // days to month/week
        w: null,
        // weeks to month
        M: 11 // months to year
      };

    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
      return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
    }
    function relativeTime$1(posNegDuration, withoutSuffix, thresholds, locale) {
      var duration = createDuration(posNegDuration).abs(),
        seconds = round(duration.as('s')),
        minutes = round(duration.as('m')),
        hours = round(duration.as('h')),
        days = round(duration.as('d')),
        months = round(duration.as('M')),
        weeks = round(duration.as('w')),
        years = round(duration.as('y')),
        a = seconds <= thresholds.ss && ['s', seconds] || seconds < thresholds.s && ['ss', seconds] || minutes <= 1 && ['m'] || minutes < thresholds.m && ['mm', minutes] || hours <= 1 && ['h'] || hours < thresholds.h && ['hh', hours] || days <= 1 && ['d'] || days < thresholds.d && ['dd', days];
      if (thresholds.w != null) {
        a = a || weeks <= 1 && ['w'] || weeks < thresholds.w && ['ww', weeks];
      }
      a = a || months <= 1 && ['M'] || months < thresholds.M && ['MM', months] || years <= 1 && ['y'] || ['yy', years];
      a[2] = withoutSuffix;
      a[3] = +posNegDuration > 0;
      a[4] = locale;
      return substituteTimeAgo.apply(null, a);
    }

    // This function allows you to set the rounding function for relative time strings
    function getSetRelativeTimeRounding(roundingFunction) {
      if (roundingFunction === undefined) {
        return round;
      }
      if (typeof roundingFunction === 'function') {
        round = roundingFunction;
        return true;
      }
      return false;
    }

    // This function allows you to set a threshold for relative time strings
    function getSetRelativeTimeThreshold(threshold, limit) {
      if (thresholds[threshold] === undefined) {
        return false;
      }
      if (limit === undefined) {
        return thresholds[threshold];
      }
      thresholds[threshold] = limit;
      if (threshold === 's') {
        thresholds.ss = limit - 1;
      }
      return true;
    }
    function humanize(argWithSuffix, argThresholds) {
      if (!this.isValid()) {
        return this.localeData().invalidDate();
      }
      var withSuffix = false,
        th = thresholds,
        locale,
        output;
      if (typeof argWithSuffix === 'object') {
        argThresholds = argWithSuffix;
        argWithSuffix = false;
      }
      if (typeof argWithSuffix === 'boolean') {
        withSuffix = argWithSuffix;
      }
      if (typeof argThresholds === 'object') {
        th = Object.assign({}, thresholds, argThresholds);
        if (argThresholds.s != null && argThresholds.ss == null) {
          th.ss = argThresholds.s - 1;
        }
      }
      locale = this.localeData();
      output = relativeTime$1(this, !withSuffix, th, locale);
      if (withSuffix) {
        output = locale.pastFuture(+this, output);
      }
      return locale.postformat(output);
    }
    var abs$1 = Math.abs;
    function sign(x) {
      return (x > 0) - (x < 0) || +x;
    }
    function toISOString$1() {
      // for ISO strings we do not use the normal bubbling rules:
      //  * milliseconds bubble up until they become hours
      //  * days do not bubble at all
      //  * months bubble up until they become years
      // This is because there is no context-free conversion between hours and days
      // (think of clock changes)
      // and also not between days and months (28-31 days per month)
      if (!this.isValid()) {
        return this.localeData().invalidDate();
      }
      var seconds = abs$1(this._milliseconds) / 1000,
        days = abs$1(this._days),
        months = abs$1(this._months),
        minutes,
        hours,
        years,
        s,
        total = this.asSeconds(),
        totalSign,
        ymSign,
        daysSign,
        hmsSign;
      if (!total) {
        // this is the same as C#'s (Noda) and python (isodate)...
        // but not other JS (goog.date)
        return 'P0D';
      }

      // 3600 seconds -> 60 minutes -> 1 hour
      minutes = absFloor(seconds / 60);
      hours = absFloor(minutes / 60);
      seconds %= 60;
      minutes %= 60;

      // 12 months -> 1 year
      years = absFloor(months / 12);
      months %= 12;

      // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
      s = seconds ? seconds.toFixed(3).replace(/\.?0+$/, '') : '';
      totalSign = total < 0 ? '-' : '';
      ymSign = sign(this._months) !== sign(total) ? '-' : '';
      daysSign = sign(this._days) !== sign(total) ? '-' : '';
      hmsSign = sign(this._milliseconds) !== sign(total) ? '-' : '';
      return totalSign + 'P' + (years ? ymSign + years + 'Y' : '') + (months ? ymSign + months + 'M' : '') + (days ? daysSign + days + 'D' : '') + (hours || minutes || seconds ? 'T' : '') + (hours ? hmsSign + hours + 'H' : '') + (minutes ? hmsSign + minutes + 'M' : '') + (seconds ? hmsSign + s + 'S' : '');
    }
    var proto$2 = Duration.prototype;
    proto$2.isValid = isValid$1;
    proto$2.abs = abs;
    proto$2.add = add$1;
    proto$2.subtract = subtract$1;
    proto$2.as = as;
    proto$2.asMilliseconds = asMilliseconds;
    proto$2.asSeconds = asSeconds;
    proto$2.asMinutes = asMinutes;
    proto$2.asHours = asHours;
    proto$2.asDays = asDays;
    proto$2.asWeeks = asWeeks;
    proto$2.asMonths = asMonths;
    proto$2.asQuarters = asQuarters;
    proto$2.asYears = asYears;
    proto$2.valueOf = valueOf$1;
    proto$2._bubble = bubble;
    proto$2.clone = clone$1;
    proto$2.get = get$2;
    proto$2.milliseconds = milliseconds;
    proto$2.seconds = seconds;
    proto$2.minutes = minutes;
    proto$2.hours = hours;
    proto$2.days = days;
    proto$2.weeks = weeks;
    proto$2.months = months;
    proto$2.years = years;
    proto$2.humanize = humanize;
    proto$2.toISOString = toISOString$1;
    proto$2.toString = toISOString$1;
    proto$2.toJSON = toISOString$1;
    proto$2.locale = locale;
    proto$2.localeData = localeData;
    proto$2.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', toISOString$1);
    proto$2.lang = lang;

    // FORMATTING

    addFormatToken('X', 0, 0, 'unix');
    addFormatToken('x', 0, 0, 'valueOf');

    // PARSING

    addRegexToken('x', matchSigned);
    addRegexToken('X', matchTimestamp);
    addParseToken('X', function (input, array, config) {
      config._d = new Date(parseFloat(input) * 1000);
    });
    addParseToken('x', function (input, array, config) {
      config._d = new Date(toInt(input));
    });

    //! moment.js

    hooks.version = '2.30.1';
    setHookCallback(createLocal);
    hooks.fn = proto;
    hooks.min = min;
    hooks.max = max;
    hooks.now = now;
    hooks.utc = createUTC;
    hooks.unix = createUnix;
    hooks.months = listMonths;
    hooks.isDate = isDate;
    hooks.locale = getSetGlobalLocale;
    hooks.invalid = createInvalid;
    hooks.duration = createDuration;
    hooks.isMoment = isMoment;
    hooks.weekdays = listWeekdays;
    hooks.parseZone = createInZone;
    hooks.localeData = getLocale;
    hooks.isDuration = isDuration;
    hooks.monthsShort = listMonthsShort;
    hooks.weekdaysMin = listWeekdaysMin;
    hooks.defineLocale = defineLocale;
    hooks.updateLocale = updateLocale;
    hooks.locales = listLocales;
    hooks.weekdaysShort = listWeekdaysShort;
    hooks.normalizeUnits = normalizeUnits;
    hooks.relativeTimeRounding = getSetRelativeTimeRounding;
    hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
    hooks.calendarFormat = getCalendarFormat;
    hooks.prototype = proto;

    // currently HTML5 input type only supports 24-hour formats
    hooks.HTML5_FMT = {
      DATETIME_LOCAL: 'YYYY-MM-DDTHH:mm',
      // <input type="datetime-local" />
      DATETIME_LOCAL_SECONDS: 'YYYY-MM-DDTHH:mm:ss',
      // <input type="datetime-local" step="1" />
      DATETIME_LOCAL_MS: 'YYYY-MM-DDTHH:mm:ss.SSS',
      // <input type="datetime-local" step="0.001" />
      DATE: 'YYYY-MM-DD',
      // <input type="date" />
      TIME: 'HH:mm',
      // <input type="time" />
      TIME_SECONDS: 'HH:mm:ss',
      // <input type="time" step="1" />
      TIME_MS: 'HH:mm:ss.SSS',
      // <input type="time" step="0.001" />
      WEEK: 'GGGG-[W]WW',
      // <input type="week" />
      MONTH: 'YYYY-MM' // <input type="month" />
    };
    return hooks;
  });

  //! moment.js locale configuration
  (function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' && typeof require === 'function' ? factory(require('../moment')) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
  })(window, function (moment) {

    //! moment.js locale configuration
    function plural(word, num) {
      var forms = word.split('_');
      return num % 10 === 1 && num % 100 !== 11 ? forms[0] : num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20) ? forms[1] : forms[2];
    }
    function relativeTimeWithPlural(number, withoutSuffix, key) {
      var format = {
        ss: withoutSuffix ? 'секунда_секунды_секунд' : 'секунду_секунды_секунд',
        mm: withoutSuffix ? 'минута_минуты_минут' : 'минуту_минуты_минут',
        hh: 'час_часа_часов',
        dd: 'день_дня_дней',
        ww: 'неделя_недели_недель',
        MM: 'месяц_месяца_месяцев',
        yy: 'год_года_лет'
      };
      if (key === 'm') {
        return withoutSuffix ? 'минута' : 'минуту';
      } else {
        return number + ' ' + plural(format[key], +number);
      }
    }
    var monthsParse = [/^янв/i, /^фев/i, /^мар/i, /^апр/i, /^ма[йя]/i, /^июн/i, /^июл/i, /^авг/i, /^сен/i, /^окт/i, /^ноя/i, /^дек/i];

    // http://new.gramota.ru/spravka/rules/139-prop : § 103
    // Сокращения месяцев: http://new.gramota.ru/spravka/buro/search-answer?s=242637
    // CLDR data:          http://www.unicode.org/cldr/charts/28/summary/ru.html#1753
    var ru = moment.defineLocale('ru', {
      months: {
        format: 'января_февраля_марта_апреля_мая_июня_июля_августа_сентября_октября_ноября_декабря'.split('_'),
        standalone: 'январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь'.split('_')
      },
      monthsShort: {
        // по CLDR именно "июл." и "июн.", но какой смысл менять букву на точку?
        format: 'янв._февр._мар._апр._мая_июня_июля_авг._сент._окт._нояб._дек.'.split('_'),
        standalone: 'янв._февр._март_апр._май_июнь_июль_авг._сент._окт._нояб._дек.'.split('_')
      },
      weekdays: {
        standalone: 'воскресенье_понедельник_вторник_среда_четверг_пятница_суббота'.split('_'),
        format: 'воскресенье_понедельник_вторник_среду_четверг_пятницу_субботу'.split('_'),
        isFormat: /\[ ?[Вв] ?(?:прошлую|следующую|эту)? ?] ?dddd/
      },
      weekdaysShort: 'вс_пн_вт_ср_чт_пт_сб'.split('_'),
      weekdaysMin: 'вс_пн_вт_ср_чт_пт_сб'.split('_'),
      monthsParse: monthsParse,
      longMonthsParse: monthsParse,
      shortMonthsParse: monthsParse,
      // полные названия с падежами, по три буквы, для некоторых, по 4 буквы, сокращения с точкой и без точки
      monthsRegex: /^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,
      // копия предыдущего
      monthsShortRegex: /^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,
      // полные названия с падежами
      monthsStrictRegex: /^(январ[яь]|феврал[яь]|марта?|апрел[яь]|ма[яй]|июн[яь]|июл[яь]|августа?|сентябр[яь]|октябр[яь]|ноябр[яь]|декабр[яь])/i,
      // Выражение, которое соответствует только сокращённым формам
      monthsShortStrictRegex: /^(янв\.|февр?\.|мар[т.]|апр\.|ма[яй]|июн[ья.]|июл[ья.]|авг\.|сент?\.|окт\.|нояб?\.|дек\.)/i,
      longDateFormat: {
        LT: 'H:mm',
        LTS: 'H:mm:ss',
        L: 'DD.MM.YYYY',
        LL: 'D MMMM YYYY г.',
        LLL: 'D MMMM YYYY г., H:mm',
        LLLL: 'dddd, D MMMM YYYY г., H:mm'
      },
      calendar: {
        sameDay: '[Сегодня, в] LT',
        nextDay: '[Завтра, в] LT',
        lastDay: '[Вчера, в] LT',
        nextWeek: function (now) {
          if (now.week() !== this.week()) {
            switch (this.day()) {
              case 0:
                return '[В следующее] dddd, [в] LT';
              case 1:
              case 2:
              case 4:
                return '[В следующий] dddd, [в] LT';
              case 3:
              case 5:
              case 6:
                return '[В следующую] dddd, [в] LT';
            }
          } else {
            if (this.day() === 2) {
              return '[Во] dddd, [в] LT';
            } else {
              return '[В] dddd, [в] LT';
            }
          }
        },
        lastWeek: function (now) {
          if (now.week() !== this.week()) {
            switch (this.day()) {
              case 0:
                return '[В прошлое] dddd, [в] LT';
              case 1:
              case 2:
              case 4:
                return '[В прошлый] dddd, [в] LT';
              case 3:
              case 5:
              case 6:
                return '[В прошлую] dddd, [в] LT';
            }
          } else {
            if (this.day() === 2) {
              return '[Во] dddd, [в] LT';
            } else {
              return '[В] dddd, [в] LT';
            }
          }
        },
        sameElse: 'L'
      },
      relativeTime: {
        future: 'через %s',
        past: '%s назад',
        s: 'несколько секунд',
        ss: relativeTimeWithPlural,
        m: relativeTimeWithPlural,
        mm: relativeTimeWithPlural,
        h: 'час',
        hh: relativeTimeWithPlural,
        d: 'день',
        dd: relativeTimeWithPlural,
        w: 'неделя',
        ww: relativeTimeWithPlural,
        M: 'месяц',
        MM: relativeTimeWithPlural,
        y: 'год',
        yy: relativeTimeWithPlural
      },
      meridiemParse: /ночи|утра|дня|вечера/i,
      isPM: function (input) {
        return /^(дня|вечера)$/.test(input);
      },
      meridiem: function (hour, minute, isLower) {
        if (hour < 4) {
          return 'ночи';
        } else if (hour < 12) {
          return 'утра';
        } else if (hour < 17) {
          return 'дня';
        } else {
          return 'вечера';
        }
      },
      dayOfMonthOrdinalParse: /\d{1,2}-(й|го|я)/,
      ordinal: function (number, period) {
        switch (period) {
          case 'M':
          case 'd':
          case 'DDD':
            return number + '-й';
          case 'D':
            return number + '-го';
          case 'w':
          case 'W':
            return number + '-я';
          default:
            return number;
        }
      },
      week: {
        dow: 1,
        // Monday is the first day of the week.
        doy: 4 // The week that contains Jan 4th is the first week of the year.
      }
    });
    return ru;
  });

  function _callSuper$e(_this, derived, args) {
    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      } catch (e) {
        return false;
      }
    }
    derived = _getPrototypeOf(derived);
    return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));
  }
  var ColumnsDateHuman = /*#__PURE__*/function (_Column) {
    /**
     * Инициализация
     * @param {coreuiTableInstance} table
     * @param {Object}              options
     */
    function ColumnsDateHuman(table, options) {
      var _this2;
      _classCallCheck(this, ColumnsDateHuman);
      options = $.extend(true, {
        type: 'date',
        field: null,
        label: null,
        show: true,
        width: null,
        format: 'DD.MM.YYYY',
        attr: {},
        attrHeader: {},
        render: null
      }, options);
      _this2 = _callSuper$e(this, ColumnsDateHuman, [table, options]);
      _defineProperty(_this2, "_lang", null);
      _this2._lang = table.getOptions().lang;
      return _this2;
    }

    /**
     * Формирование контента
     * @param {string|number|Date} content
     * @param {object} record
     * @returns {string}
     */
    _inherits(ColumnsDateHuman, _Column);
    return _createClass(ColumnsDateHuman, [{
      key: "render",
      value: function render(content, record) {
        if (['string', 'number'].indexOf(_typeof(content)) < 0 || !content instanceof Date) {
          return '';
        }
        try {
          if (content !== '') {
            var dateContent = content instanceof Date ? content : new Date(content);
            var dateFormat = moment(dateContent).format('MM.DD.yyyy HH:mm:ss');
            content = moment(dateContent).locale(this._lang).fromNow();
            content = '<span title="' + dateFormat + '">' + content + '</span>';
          }
        } catch (e) {
          console.warn(e);
        }
        return content;
      }
    }]);
  }(Column);

  function _callSuper$d(_this, derived, args) {
    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      } catch (e) {
        return false;
      }
    }
    derived = _getPrototypeOf(derived);
    return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));
  }
  var ColumnsHtml = /*#__PURE__*/function (_Column) {
    /**
     * Инициализация
     * @param {coreuiTableInstance} table
     * @param {Object}              options
     */
    function ColumnsHtml(table, options) {
      var _this2;
      _classCallCheck(this, ColumnsHtml);
      options = $.extend(true, {
        type: 'html',
        field: null,
        label: null,
        show: true,
        width: null,
        minWidth: null,
        maxWidth: null,
        noWrap: null,
        noWrapToggle: null,
        attr: {},
        attrHeader: {},
        render: null
      }, options);
      _this2 = _callSuper$d(this, ColumnsHtml, [table, options]);
      var tableOptions = _this2._table.getOptions();
      if (_this2._options.noWrap || _this2._options.noWrap === null && tableOptions.noWrap) {
        if (!_this2._options.attr) {
          _this2._options.attr = {
            "class": 'coreui_table__no-wrap'
          };
        } else {
          _this2._options.attr = coreuiTableUtils.mergeAttr(_this2._options.attr, {
            "class": 'coreui_table__no-wrap'
          });
        }
        _this2._options.noWrap = true;
        if (_this2._options.noWrapToggle || _this2._options.noWrapToggle === null && tableOptions.noWrapToggle) {
          _this2._options.noWrapToggle = true;
        }
      }
      return _this2;
    }

    /**
     * Конвертирование значения колонки в текст
     * @param {*} columnValue
     * @returns {string}
     */
    _inherits(ColumnsHtml, _Column);
    return _createClass(ColumnsHtml, [{
      key: "convertToString",
      value: function convertToString(columnValue) {
        if (['string', 'number'].indexOf(_typeof(columnValue)) >= 0) {
          return String(columnValue).replace(/<[^>]*>?/gm, '');
        } else {
          return '';
        }
      }

      /**
       * Формирование контента
       * @param {string|HTMLElement|jQuery} content
       * @param {object}                    record
       * @returns {string}
       */
    }, {
      key: "render",
      value: function render(content, record) {
        if (['string', 'bigint', 'symbol', 'number'].indexOf(_typeof(content)) < 0 && !(content instanceof HTMLElement) && !(window.hasOwnProperty('jQuery') && content instanceof jQuery)) {
          return '';
        }
        if (this._options.noWrap) {
          content = $('<div></div>').append(content);
          if (this._options.noWrapToggle) {
            content = $(content).after('<i class="bi bi-caret-down-fill toggle"></i>');
          }
        }
        return content;
      }
    }]);
  }(Column);

  function _callSuper$c(_this, derived, args) {
    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      } catch (e) {
        return false;
      }
    }
    derived = _getPrototypeOf(derived);
    return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));
  }
  var ColumnsNumber = /*#__PURE__*/function (_Column) {
    /**
     * Инициализация
     * @param {coreuiTableInstance} table
     * @param {Object}              options
     */
    function ColumnsNumber(table, options) {
      var _this2;
      _classCallCheck(this, ColumnsNumber);
      options = $.extend(true, {
        type: 'number',
        field: null,
        label: null,
        show: true,
        width: null,
        minWidth: null,
        maxWidth: null,
        noWrap: null,
        noWrapToggle: null,
        attr: {},
        attrHeader: {},
        render: null
      }, options);
      _this2 = _callSuper$c(this, ColumnsNumber, [table, options]);
      var tableOptions = _this2._table.getOptions();
      if (_this2._options.noWrap || _this2._options.noWrap === null && tableOptions.noWrap) {
        if (!_this2._options.attr) {
          _this2._options.attr = {
            "class": 'coreui_table__no-wrap'
          };
        } else {
          _this2._options.attr = coreuiTableUtils.mergeAttr(_this2._options.attr, {
            "class": 'coreui_table__no-wrap'
          });
        }
        _this2._options.noWrap = true;
        if (_this2._options.noWrapToggle || _this2._options.noWrapToggle === null && tableOptions.noWrapToggle) {
          _this2._options.noWrapToggle = true;
        }
      }
      return _this2;
    }

    /**
     * Формирование контента
     * @param {string} content
     * @param {object} record
     * @returns {string}
     */
    _inherits(ColumnsNumber, _Column);
    return _createClass(ColumnsNumber, [{
      key: "render",
      value: function render(content, record) {
        if (['string', 'bigint', 'symbol', 'number'].indexOf(_typeof(content)) < 0) {
          return '';
        }
        content = String(content).replace(/,/g, '.').replace(/[^0-9\-\.]/g, '').replace(/[\s]{2,}/g, ' ').replace(/(?<!(\.\d*|^.{0}))(?=(\d{3})+(?!\d))/g, '$1 ').replace(/\- /g, '-');
        if (this._options.noWrap) {
          content = '<div>' + content + '</div>';
          if (this._options.noWrapToggle) {
            content += '<i class="bi bi-caret-down-fill toggle"></i>';
          }
        }
        return content;
      }
    }]);
  }(Column);

  function _callSuper$b(_this, derived, args) {
    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      } catch (e) {
        return false;
      }
    }
    derived = _getPrototypeOf(derived);
    return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));
  }
  var ColumnsMoney = /*#__PURE__*/function (_Column) {
    /**
     * Инициализация
     * @param {coreuiTableInstance} table
     * @param {Object}              options
     */
    function ColumnsMoney(table, options) {
      var _this2;
      _classCallCheck(this, ColumnsMoney);
      options = $.extend(true, {
        type: 'money',
        field: null,
        label: null,
        show: true,
        width: null,
        minWidth: null,
        maxWidth: null,
        noWrap: null,
        noWrapToggle: null,
        currency: null,
        attr: {
          "class": 'text-end'
        },
        attrHeader: {
          "class": 'text-end'
        },
        render: null
      }, options);
      _this2 = _callSuper$b(this, ColumnsMoney, [table, options]);
      var tableOptions = _this2._table.getOptions();
      if (_this2._options.noWrap || _this2._options.noWrap === null && tableOptions.noWrap) {
        if (!_this2._options.attr) {
          _this2._options.attr = {
            "class": 'coreui_table__no-wrap'
          };
        } else {
          _this2._options.attr = coreuiTableUtils.mergeAttr(_this2._options.attr, {
            "class": 'coreui_table__no-wrap'
          });
        }
        _this2._options.noWrap = true;
        if (_this2._options.noWrapToggle || _this2._options.noWrapToggle === null && tableOptions.noWrapToggle) {
          _this2._options.noWrapToggle = true;
        }
      }
      return _this2;
    }

    /**
     * Конвертирование значения колонки в текст
     * @param {*} columnValue
     * @returns {string}
     */
    _inherits(ColumnsMoney, _Column);
    return _createClass(ColumnsMoney, [{
      key: "convertToString",
      value: function convertToString(columnValue) {
        var content = '';
        if (['string', 'number'].indexOf(_typeof(columnValue)) >= 0) {
          if (isNaN(content)) {
            content = content.toString().replace(/(\d)(?=(\d\d\d)+([^\d]|$))/g, '$1 ');
          } else {
            content = Number(content).toFixed(2).toString();
            content = content.replace(/(\d)(?=(\d\d\d)+([^\d]|$))/g, '$1 ');
          }
        }
        return content;
      }

      /**
       * Формирование контента
       * @param {string} content
       * @param {object} record
       * @returns {string}
       */
    }, {
      key: "render",
      value: function render(content, record) {
        if (['string', 'bigint', 'symbol', 'number'].indexOf(_typeof(content)) < 0) {
          return '';
        }
        if (isNaN(content)) {
          content = content.toString().replace(/(\d)(?=(\d\d\d)+([^\d]|$))/g, '$1 ');
        } else {
          content = Number(content).toFixed(2).toString();
          content = content.replace(/(\d)(?=(\d\d\d)+([^\d]|$))/g, '$1 ');
        }
        if (this._options.currency && ['string', 'number'].indexOf(_typeof(this._options.currency)) >= 0) {
          content += ' <small class="text-muted">' + this._options.currency + '</small>';
        }
        if (this._options.noWrap) {
          content = '<div>' + content + '</div>';
          if (this._options.noWrapToggle) {
            content += '<i class="bi bi-caret-down-fill toggle"></i>';
          }
        }
        return content;
      }
    }]);
  }(Column);

  function _callSuper$a(_this, derived, args) {
    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      } catch (e) {
        return false;
      }
    }
    derived = _getPrototypeOf(derived);
    return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));
  }
  var ColumnsNumbers = /*#__PURE__*/function (_Column) {
    /**
     * Инициализация
     * @param {coreuiTableInstance} table
     * @param {Object}              options
     */
    function ColumnsNumbers(table, options) {
      _classCallCheck(this, ColumnsNumbers);
      options = $.extend(true, {
        type: 'numbers',
        label: '№',
        width: 20,
        attr: {
          "class": 'text-end'
        },
        attrHeader: null
      }, options);
      return _callSuper$a(this, ColumnsNumbers, [table, options]);
    }

    /**
     * Формирование контента
     * @param {string} content
     * @param {object} record
     * @returns {string}
     */
    _inherits(ColumnsNumbers, _Column);
    return _createClass(ColumnsNumbers, [{
      key: "render",
      value: function render(content, record) {
        return this._table._recordsNumber;
      }
    }]);
  }(Column);

  function _callSuper$9(_this, derived, args) {
    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      } catch (e) {
        return false;
      }
    }
    derived = _getPrototypeOf(derived);
    return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));
  }
  var ColumnsSelect = /*#__PURE__*/function (_Column) {
    /**
     * Инициализация
     * @param {coreuiTableInstance} table
     * @param {Object}              options
     */
    function ColumnsSelect(table, options) {
      var _this2;
      _classCallCheck(this, ColumnsSelect);
      var originalOptions = {
        type: 'select',
        field: null,
        label: '',
        show: true,
        width: 35,
        attr: {
          "class": 'coreui-table__select_container text-center'
        },
        attrHeader: {
          "class": 'text-center'
        }
      };
      if (options.hasOwnProperty('attr')) {
        options.attr = coreuiTableUtils.mergeAttr(originalOptions.attr, options.attr);
      }
      if (options.hasOwnProperty('attrHeader')) {
        options.attrHeader = coreuiTableUtils.mergeAttr(originalOptions.attrHeader, options.attrHeader);
      }
      options = $.extend(true, originalOptions, options);
      _this2 = _callSuper$9(this, ColumnsSelect, [table, options]);
      _this2._options.label = tpl['columns/select_label.html'];

      // Показ строк
      table.on('records_show', function () {
        var selects = coreuiTableElements.getRowsSelects(table.getId());
        var selectAll = coreuiTableElements.getRowsSelectAll(table.getId());

        // Отмена обработки нажатия в select колонках
        $(selects).click(function (event) {
          event.stopPropagation();
        });

        // Выбор всех строк
        selectAll.click(function (event) {
          if ($(this).is(':checked')) {
            table.selectAll();
          } else {
            table.unselectAll();
          }
        });
      });
      return _this2;
    }

    /**
     * Формирование контента
     * @param {string} content
     * @param {object} record
     * @returns {string}
     */
    _inherits(ColumnsSelect, _Column);
    return _createClass(ColumnsSelect, [{
      key: "render",
      value: function render(content, record) {
        var select = $(coreuiTableUtils.render(tpl['columns/select.html'], {
          index: record.index
        }));
        var that = this;

        // Выбор строки
        select.click(function () {
          var tr = coreuiTableElements.getTrByIndex(that._table.getId(), record.index);
          if (!tr) {
            return;
          }
          if ($(this).is(':checked')) {
            $(tr).addClass('table-primary');
            coreuiTablePrivate._trigger(that._table, 'record_select', [record]);
          } else {
            $(tr).removeClass('table-primary');
            coreuiTablePrivate._trigger(that._table, 'record_unselect', [record]);
          }
        });
        return select;
      }
    }]);
  }(Column);

  function _callSuper$8(_this, derived, args) {
    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      } catch (e) {
        return false;
      }
    }
    derived = _getPrototypeOf(derived);
    return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));
  }
  var ColumnsSwitch = /*#__PURE__*/function (_Column) {
    /**
     * Инициализация
     * @param {coreuiTableInstance} table
     * @param {Object}              options
     */
    function ColumnsSwitch(table, options) {
      var _this2;
      _classCallCheck(this, ColumnsSwitch);
      options = $.extend(true, {
        type: 'switch',
        label: '',
        field: '',
        show: true,
        disabled: false,
        width: 5,
        valueY: '1',
        valueN: '0',
        attr: {
          "class": 'coreui-table__switch_container'
        },
        attrHeader: {},
        onChange: null
      }, options);
      _this2 = _callSuper$8(this, ColumnsSwitch, [table, options]);

      // Показ строк
      table.on('records_show', function () {
        var containers = coreuiTableElements.getRowsSwitches(table.getId());

        // Отмена обработки нажатия в switch колонках
        containers.click(function (event) {
          event.stopPropagation();
        });
      });
      return _this2;
    }

    /**
     * Формирование контента
     * @param {string} content
     * @param {object} record
     * @returns {jQuery}
     */
    _inherits(ColumnsSwitch, _Column);
    return _createClass(ColumnsSwitch, [{
      key: "render",
      value: function render(content, record) {
        var isChecked = record.data.hasOwnProperty(this._options.field) && record.data[this._options.field] === this._options.valueY;
        var formSwitch = $(coreuiTableUtils.render(tpl['columns/switch.html'], {
          index: record.index,
          field: this._options.field,
          disabled: this._options.disabled,
          checked: isChecked
        }));

        // События нажатия на переключатель
        var that = this;
        var table = this._table;
        $('.coreui-table__switch', formSwitch).change(function (event) {
          var input = this;
          table._records.map(function (recordTable) {
            if (record.index === recordTable.index) {
              recordTable.data[that._options.field] = input.checked ? that._options.valueY : that._options.valueN;
              return false;
            }
          });
          if (that._options.hasOwnProperty('onChange') && (typeof that._options.onChange === 'function' || typeof that._options.onChange === 'string')) {
            if (typeof that._options.onChange === 'function') {
              that._options.onChange(record, input);
            } else {
              var func = new Function('record', 'input', that._options.onChange);
              func(record, input);
            }
            return false;
          }
        });
        return formSwitch;
      }
    }]);
  }(Column);

  function _callSuper$7(_this, derived, args) {
    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      } catch (e) {
        return false;
      }
    }
    derived = _getPrototypeOf(derived);
    return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));
  }
  var ColumnsText = /*#__PURE__*/function (_Column) {
    /**
     * Инициализация
     * @param {coreuiTableInstance} table
     * @param {Object}              options
     */
    function ColumnsText(table, options) {
      var _this2;
      _classCallCheck(this, ColumnsText);
      options = $.extend(true, {
        type: 'text',
        field: null,
        label: null,
        show: true,
        showLabel: true,
        width: null,
        minWidth: null,
        maxWidth: null,
        attr: null,
        noWrap: null,
        noWrapToggle: null,
        attrHeader: null,
        render: null
      }, options);
      _this2 = _callSuper$7(this, ColumnsText, [table, options]);
      var tableOptions = _this2._table.getOptions();
      if (_this2._options.noWrap || _this2._options.noWrap === null && tableOptions.noWrap) {
        if (!_this2._options.attr) {
          _this2._options.attr = {
            "class": 'coreui_table__no-wrap'
          };
        } else {
          _this2._options.attr = coreuiTableUtils.mergeAttr(_this2._options.attr, {
            "class": 'coreui_table__no-wrap'
          });
        }
        _this2._options.noWrap = true;
        if (_this2._options.noWrapToggle || _this2._options.noWrapToggle === null && tableOptions.noWrapToggle) {
          _this2._options.noWrapToggle = true;
        }
      }
      return _this2;
    }

    /**
     * Формирование контента
     * @param {string} content
     * @param {object} record
     * @returns {string}
     */
    _inherits(ColumnsText, _Column);
    return _createClass(ColumnsText, [{
      key: "render",
      value: function render(content, record) {
        if (['string', 'bigint', 'symbol', 'number'].indexOf(_typeof(content)) < 0) {
          return '';
        }
        content = String(content).replace(/</g, '&lt;').replace(/>/g, '&gt;');
        if (this._options.noWrap) {
          content = '<div>' + content + '</div>';
          if (this._options.noWrapToggle) {
            content += '<i class="bi bi-caret-down-fill toggle"></i>';
          }
        }
        return content;
      }
    }]);
  }(Column);

  function _callSuper$6(_this, derived, args) {
    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      } catch (e) {
        return false;
      }
    }
    derived = _getPrototypeOf(derived);
    return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));
  }
  var ColumnsButton = /*#__PURE__*/function (_Column) {
    /**
     * Инициализация
     * @param {coreuiTableInstance} table
     * @param {Object}              options
     */
    function ColumnsButton(table, options) {
      _classCallCheck(this, ColumnsButton);
      options = $.extend(true, {
        type: 'button',
        field: null,
        label: null,
        show: true,
        width: null,
        minWidth: null,
        maxWidth: null
      }, options);
      return _callSuper$6(this, ColumnsButton, [table, options]);
    }

    /**
     * Формирование контента
     * @param {object} content
     * @param {object} record
     * @returns {string}
     */
    _inherits(ColumnsButton, _Column);
    return _createClass(ColumnsButton, [{
      key: "render",
      value: function render(content, record) {
        if (!coreuiTableUtils.isObject(content)) {
          return '';
        }
        if (!coreuiTableUtils.isObject(content.attr)) {
          content.attr = {};
        }
        if (!content.attr.hasOwnProperty('class')) {
          content.attr["class"] = 'btn btn-outline-secondary';
        }
        if (content.attr.hasOwnProperty('type')) {
          delete content.attr.type;
        }
        var attributes = [];
        $.each(content.attr, function (name, value) {
          if (['string', 'number'].indexOf(_typeof(value)) >= 0) {
            attributes.push(name + '="' + value + '"');
          }
        });
        var btn = $(coreuiTableUtils.render(tpl['columns/button.html'], {
          content: content.content,
          attr: attributes.length > 0 ? ' ' + attributes.join(' ') : ''
        }));
        if (content.hasOwnProperty('onClick')) {
          var that = this;
          if (typeof content.onClick === 'function') {
            btn.click(function (event) {
              event.cancelBubble = true;
              event.preventDefault();
              content.onClick(record, that._table);
            });
          } else if (typeof content.onClick === 'string') {
            var func = new Function('record', 'table', content.onClick);
            btn.click(function (event) {
              event.cancelBubble = true;
              event.preventDefault();
              func(record, that._table);
            });
          } else {
            btn.click(function (event) {
              event.cancelBubble = true;
              event.preventDefault();
            });
          }
        } else {
          btn.click(function (event) {
            event.cancelBubble = true;
            event.preventDefault();
          });
        }
        return btn;
      }
    }]);
  }(Column);

  function _callSuper$5(_this, derived, args) {
    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      } catch (e) {
        return false;
      }
    }
    derived = _getPrototypeOf(derived);
    return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));
  }
  var ColumnsLink = /*#__PURE__*/function (_Column) {
    /**
     * Инициализация
     * @param {coreuiTableInstance} table
     * @param {Object}              options
     */
    function ColumnsLink(table, options) {
      _classCallCheck(this, ColumnsLink);
      options = $.extend(true, {
        type: 'link',
        field: null,
        label: null,
        show: true,
        width: null,
        minWidth: null,
        maxWidth: null
      }, options);
      return _callSuper$5(this, ColumnsLink, [table, options]);
    }

    /**
     * Конвертирование значения колонки в текст
     * @param {*} columnValue
     * @returns {string}
     */
    _inherits(ColumnsLink, _Column);
    return _createClass(ColumnsLink, [{
      key: "convertToString",
      value: function convertToString(columnValue) {
        if (['string', 'number'].indexOf(_typeof(columnValue)) >= 0) {
          return String(columnValue);
        } else if (_typeof(columnValue) === 'object' && columnValue.hasOwnProperty('content') && typeof columnValue.content === 'string') {
          return columnValue.content;
        } else {
          return '';
        }
      }

      /**
       * Формирование контента
       * @param {object|string} content
       * @param {object}        record
       * @returns {string}
       */
    }, {
      key: "render",
      value: function render(content, record) {
        if ((typeof content !== 'string' || !content) && (!coreuiTableUtils.isObject(content) || !content.hasOwnProperty('url') || typeof content.url !== 'string' || !content.url)) {
          return '';
        }
        var linkContent = '';
        var attr = {};
        if (typeof content === 'string') {
          attr.href = content;
          linkContent = content;
        } else {
          if (content.hasOwnProperty('attr') && coreuiTableUtils.isObject(content.attr)) {
            attr = content.attr;
          }
          if (attr.hasOwnProperty('href')) {
            delete attr.href;
          }
          attr.href = content.url;
          if (content.hasOwnProperty('content') && typeof content.content === 'string' && content.content) {
            linkContent = content.content;
          } else {
            linkContent = content.url;
          }
        }
        var attributes = [];
        $.each(attr, function (name, value) {
          if (['string', 'number'].indexOf(_typeof(value)) >= 0) {
            attributes.push(name + '="' + value + '"');
          }
        });
        var link = $(coreuiTableUtils.render(tpl['columns/link.html'], {
          content: linkContent,
          attr: attributes.length > 0 ? ' ' + attributes.join(' ') : ''
        }));
        link.click(function (event) {
          event.cancelBubble = true;
          event.preventDefault();
        });
        return link;
      }
    }]);
  }(Column);

  function _callSuper$4(_this, derived, args) {
    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      } catch (e) {
        return false;
      }
    }
    derived = _getPrototypeOf(derived);
    return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));
  }
  var ColumnsMenu = /*#__PURE__*/function (_Column) {
    /**
     * Инициализация
     * @param {coreuiTableInstance} table
     * @param {Object}              options
     */
    function ColumnsMenu(table, options) {
      _classCallCheck(this, ColumnsMenu);
      options = $.extend(true, {
        type: 'menu',
        field: null,
        label: null,
        show: true,
        width: null,
        minWidth: null,
        maxWidth: null
      }, options);
      return _callSuper$4(this, ColumnsMenu, [table, options]);
    }

    /**
     * Формирование контента
     * @param {object|string} content
     * @param {object}        record
     * @returns {string}
     */
    _inherits(ColumnsMenu, _Column);
    return _createClass(ColumnsMenu, [{
      key: "render",
      value: function render(content, record) {
        if (!coreuiTableUtils.isObject(content) || !content.hasOwnProperty('items') || !Array.isArray(content.items) || content.items.length === 0) {
          return '';
        }
        var items = [];
        var attr = {};
        if (Array.isArray(content.items)) {
          $.each(content.items, function (key, item) {
            if (coreuiTableUtils.isObject(item) && typeof item.type === 'string') {
              if (item.type === 'link') {
                if (item.hasOwnProperty('url') && item.hasOwnProperty('content') && typeof item.url === 'string' && typeof item.content === 'string') {
                  var linkAttr = {};
                  if (item.hasOwnProperty('attr') || coreuiTableUtils.isObject(item.attr)) {
                    linkAttr = item.attr;
                  }
                  if (linkAttr.hasOwnProperty('href')) {
                    delete linkAttr.href;
                  }
                  if (!linkAttr.hasOwnProperty('class') || typeof linkAttr["class"] !== 'string') {
                    linkAttr["class"] = 'dropdown-item';
                  } else {
                    linkAttr["class"] += ' dropdown-item';
                  }
                  var linkAttributes = [];
                  $.each(linkAttr, function (name, value) {
                    if (['string', 'number'].indexOf(_typeof(value)) >= 0) {
                      linkAttributes.push(name + '="' + value + '"');
                    }
                  });
                  items.push({
                    type: 'link',
                    url: item.url,
                    content: item.content,
                    attr: linkAttributes
                  });
                }
              } else if (item.type === 'button') {
                if (item.hasOwnProperty('content') && item.hasOwnProperty('onClick') && typeof item.content === 'string' && ['string', 'function'].indexOf(_typeof(item.onClick)) >= 0) {
                  var btnAttr = {};
                  if (item.hasOwnProperty('attr') || coreuiTableUtils.isObject(item.attr)) {
                    btnAttr = item.attr;
                  }
                  if (btnAttr.hasOwnProperty('type')) {
                    delete btnAttr.type;
                  }
                  if (btnAttr.hasOwnProperty('id')) {
                    delete btnAttr['id'];
                  }
                  if (!btnAttr.hasOwnProperty('class') || typeof btnAttr["class"] !== 'string') {
                    btnAttr["class"] = 'dropdown-item';
                  } else {
                    btnAttr["class"] += ' dropdown-item';
                  }
                  var btnAttributes = [];
                  $.each(btnAttr, function (name, value) {
                    if (['string', 'number'].indexOf(_typeof(value)) >= 0) {
                      btnAttributes.push(name + '="' + value + '"');
                    }
                  });
                  items.push({
                    type: 'button',
                    id: coreuiTableUtils.hashCode(),
                    content: item.content,
                    onClick: item.onClick,
                    attr: btnAttributes.length > 0 ? ' ' + btnAttributes.join(' ') : ''
                  });
                }
              } else if (item.type === 'divider') {
                items.push({
                  type: 'divider'
                });
              } else if (item.type === 'header') {
                if (item.hasOwnProperty('content') && typeof item.content === 'string') {
                  items.push({
                    type: 'header',
                    content: item.content
                  });
                }
              }
            }
          });
        }
        if (content.hasOwnProperty('attr') || coreuiTableUtils.isObject(content.attr)) {
          attr = content.attr;
        }
        if (!attr.hasOwnProperty('class') || ['string', 'number'].indexOf(_typeof(attr["class"])) < 0) {
          attr["class"] = 'btn rounded-1';
        }
        if (attr.hasOwnProperty('type')) {
          delete attr.type;
        }
        if (attr.hasOwnProperty('data-bs-toggle')) {
          delete attr['data-bs-toggle'];
        }
        var attributes = [];
        $.each(attr, function (name, value) {
          if (['string', 'number'].indexOf(_typeof(value)) >= 0) {
            attributes.push(name + '="' + value + '"');
          }
        });
        var menuContent = content.hasOwnProperty('content') && typeof content.content === 'string' && content.content ? content.content : '<i class="bi bi-three-dots-vertical"></i>';
        var position = content.hasOwnProperty('position') && typeof content.position === 'string' && content.position ? content.position : 'end';
        var menu = $(coreuiTableUtils.render(tpl['columns/menu.html'], {
          content: menuContent,
          position: position,
          attr: attributes.length > 0 ? ' ' + attributes.join(' ') : '',
          items: items
        }));
        menu.click(function (event) {
          event.cancelBubble = true;
          event.preventDefault();
        });
        var dropdownMenu = null;
        $(menu).on('show.bs.dropdown', function (e) {
          dropdownMenu = $(menu).find('.dropdown-menu');
          $('body').append(dropdownMenu.detach());
          var eOffset = $(e.target).offset();
          dropdownMenu.css({
            'display': 'block',
            'top': eOffset.top + $(e.target).outerHeight(),
            'left': eOffset.left
          });
        });
        $(menu).on('hide.bs.dropdown', function (e) {
          $(menu).append(dropdownMenu.detach());
          dropdownMenu.hide();
        });
        if (Array.isArray(items)) {
          var that = this;
          $.each(items, function (key, item) {
            if (coreuiTableUtils.isObject(item) && typeof item.type === 'string') {
              if (item.type === 'button') {
                if (item.hasOwnProperty('content') && item.hasOwnProperty('onClick') && ['string', 'function'].indexOf(_typeof(item.onClick)) >= 0 && typeof item.content === 'string') {
                  $('button#btn-dropdown-' + item.id, menu).click(function (event) {
                    if (typeof item.onClick === 'function') {
                      item.onClick(record, that._table, event);
                    } else if (typeof item.onClick === 'string') {
                      new Function('record', 'table', 'event', item.onClick)(record, that._table, event);
                    }
                  });
                }
              }
            }
          });
        }
        return menu;
      }
    }]);
  }(Column);

  function _callSuper$3(_this, derived, args) {
    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      } catch (e) {
        return false;
      }
    }
    derived = _getPrototypeOf(derived);
    return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));
  }
  var ColumnsBadge = /*#__PURE__*/function (_Column) {
    /**
     * Инициализация
     * @param {coreuiTableInstance} table
     * @param {Object}              options
     */
    function ColumnsBadge(table, options) {
      _classCallCheck(this, ColumnsBadge);
      options = $.extend(true, {
        type: 'badge',
        field: null,
        label: null,
        show: true,
        width: null,
        minWidth: null,
        maxWidth: null
      }, options);
      return _callSuper$3(this, ColumnsBadge, [table, options]);
    }

    /**
     * Конвертирование значения колонки в текст
     * @param {*} columnValue
     * @returns {string}
     */
    _inherits(ColumnsBadge, _Column);
    return _createClass(ColumnsBadge, [{
      key: "convertToString",
      value: function convertToString(columnValue) {
        if (typeof columnValue === 'string') {
          return columnValue;
        } else if (typeof columnValue === 'number') {
          return String(columnValue);
        } else if (_typeof(columnValue) === 'object' && columnValue.hasOwnProperty('text') && ['string', 'number'].indexOf(_typeof(columnValue.text)) >= 0) {
          return String(columnValue.text);
        } else {
          return '';
        }
      }

      /**
       * Формирование контента
       * @param {object|string|number} content
       * @param {object}               record
       * @returns {string}
       */
    }, {
      key: "render",
      value: function render(content, record) {
        if (['string', 'number'].indexOf(_typeof(content)) >= 0) {
          content = {
            type: 'secondary',
            text: content
          };
        } else if (!coreuiTableUtils.isObject(content) || !content.hasOwnProperty('type') || !content.hasOwnProperty('text') || typeof content.type !== 'string' || typeof content.text !== 'string' || !content.text) {
          return '';
        }
        if (content.type === '' || content.type === 'none') {
          return content.text;
        }
        return coreuiTableUtils.render(tpl['columns/badge.html'], {
          type: content.type,
          text: content.text
        });
      }
    }]);
  }(Column);

  function _callSuper$2(_this, derived, args) {
    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      } catch (e) {
        return false;
      }
    }
    derived = _getPrototypeOf(derived);
    return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));
  }
  var ColumnsComponent = /*#__PURE__*/function (_Column) {
    /**
     * Инициализация
     * @param {coreuiTableInstance} table
     * @param {Object}              options
     */
    function ColumnsComponent(table, options) {
      _classCallCheck(this, ColumnsComponent);
      options = $.extend(true, {
        type: 'component',
        field: null,
        label: null,
        show: true,
        width: null,
        minWidth: null,
        maxWidth: null
      }, options);
      return _callSuper$2(this, ColumnsComponent, [table, options]);
    }

    /**
     * Формирование контента
     * @param {object|string} content
     * @param {object}        record
     * @returns {string}
     */
    _inherits(ColumnsComponent, _Column);
    return _createClass(ColumnsComponent, [{
      key: "render",
      value: function render(content, record) {
        if (!coreuiTableUtils.isObject(content) || !content.hasOwnProperty('component') || typeof content.component !== 'string' || !content.component) {
          return '';
        }
        return coreuiTableRender.renderComponents(this._table, content, 'records_show');
      }
    }]);
  }(Column);

  function _callSuper$1(_this, derived, args) {
    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      } catch (e) {
        return false;
      }
    }
    derived = _getPrototypeOf(derived);
    return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));
  }
  var ColumnsProgress = /*#__PURE__*/function (_Column) {
    /**
     * Инициализация
     * @param {coreuiTableInstance} table
     * @param {Object}              options
     */
    function ColumnsProgress(table, options) {
      _classCallCheck(this, ColumnsProgress);
      options = $.extend(true, {
        type: 'progress',
        field: null,
        label: null,
        show: true,
        width: null,
        minWidth: null,
        maxWidth: null,
        attr: {},
        showPercent: null,
        barColor: 'primary',
        barWidth: null,
        barHeight: null
      }, options);
      return _callSuper$1(this, ColumnsProgress, [table, options]);
    }

    /**
     * Конвертирование значения колонки в текст
     * @param {*} columnValue
     * @returns {string}
     */
    _inherits(ColumnsProgress, _Column);
    return _createClass(ColumnsProgress, [{
      key: "convertToString",
      value: function convertToString(columnValue) {
        if (['string', 'number'].indexOf(_typeof(columnValue)) >= 0) {
          return String(columnValue);
        } else if (_typeof(columnValue) === 'object' && columnValue.hasOwnProperty('percent') && ['string', 'number'].indexOf(_typeof(columnValue.percent)) >= 0) {
          return String(columnValue.percent);
        } else {
          return '';
        }
      }

      /**
       * Формирование контента
       * @param {object|string|number} content
       * @param {object}              record
       * @returns {string}
       */
    }, {
      key: "render",
      value: function render(content, record) {
        if (!coreuiTableUtils.isNumeric(content) && (!coreuiTableUtils.isObject(content) || !content.hasOwnProperty('percent') || !coreuiTableUtils.isNumeric(content.percent))) {
          return '';
        }
        var description = null;
        var percent = 0;
        var percentText = '';
        var color = typeof this._options.barColor === 'string' ? this._options.barColor : 'primary';
        var attr = this._options.attr;
        attr = coreuiTableUtils.mergeAttr(attr, {
          "class": 'progress me-1'
        });
        if (this._options.barWidth) {
          var barWidth = coreuiTableUtils.isNumeric(this._options.barWidth) ? this._options.barWidth + 'px' : this._options.barWidth;
          attr = coreuiTableUtils.mergeAttr(attr, {
            style: 'width:' + barWidth
          });
        }
        if (this._options.barHeight) {
          var barHeight = coreuiTableUtils.isNumeric(this._options.barHeight) ? this._options.barHeight + 'px' : this._options.barHeight;
          attr = coreuiTableUtils.mergeAttr(attr, {
            style: 'height:' + barHeight
          });
        }
        if (coreuiTableUtils.isNumeric(content)) {
          if (content < 0) {
            percent = 0;
          } else if (content > 100) {
            percent = 100;
          } else {
            percent = content;
          }
        } else {
          if (content.percent < 0) {
            percent = 0;
          } else if (content.percent > 100) {
            percent = 100;
          } else {
            percent = content.percent;
          }
          if (content.hasOwnProperty('color') && typeof content.color === 'string') {
            color = content.color;
          }
          if (content.hasOwnProperty('description') && typeof content.description === 'string' && content.description !== '') {
            description = content.description;
          }
        }
        if (this._options.showPercent) {
          percentText = percent + '%';
        }
        var attributes = [];
        $.each(attr, function (name, value) {
          if (['string', 'number'].indexOf(_typeof(value)) >= 0) {
            attributes.push(name + '="' + value + '"');
          }
        });
        return coreuiTableUtils.render(tpl['columns/progress.html'], {
          description: description,
          percent: percent,
          percentText: percentText,
          color: color,
          attr: attributes.length > 0 ? ' ' + attributes.join(' ') : ''
        });
      }
    }]);
  }(Column);

  function _callSuper(_this, derived, args) {
    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      } catch (e) {
        return false;
      }
    }
    derived = _getPrototypeOf(derived);
    return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));
  }
  var ColumnsImage = /*#__PURE__*/function (_Column) {
    /**
     * Инициализация
     * @param {coreuiTableInstance} table
     * @param {Object}              options
     */
    function ColumnsImage(table, options) {
      var _this2;
      _classCallCheck(this, ColumnsImage);
      options = $.extend(true, {
        type: 'image',
        field: null,
        label: null,
        show: true,
        width: null,
        minWidth: null,
        maxWidth: null,
        attr: {},
        imgWidth: null,
        imgHeight: null,
        imgBorder: null,
        imgStyle: null
      }, options);
      _this2 = _callSuper(this, ColumnsImage, [table, options]);
      _this2._table = table;
      _this2._options = $.extend(true, {}, _this2._options, options);
      return _this2;
    }

    /**
     * Формирование контента
     * @param {string} content
     * @param {object} record
     * @returns {string}
     */
    _inherits(ColumnsImage, _Column);
    return _createClass(ColumnsImage, [{
      key: "render",
      value: function render(content, record) {
        if (typeof content !== 'string' || content === '') {
          return '';
        }
        var attr = this._options.attr;
        attr.src = content;
        if (this._options.imgWidth) {
          var imgWidth = coreuiTableUtils.isNumeric(this._options.imgWidth) ? this._options.imgWidth + 'px' : this._options.imgWidth;
          attr = coreuiTableUtils.mergeAttr(attr, {
            style: 'width:' + imgWidth
          });
        }
        if (this._options.imgHeight) {
          var imgHeight = coreuiTableUtils.isNumeric(this._options.imgHeight) ? this._options.imgHeight + 'px' : this._options.imgHeight;
          attr = coreuiTableUtils.mergeAttr(attr, {
            style: 'height:' + imgHeight
          });
        }
        if (this._options.imgBorder) {
          attr = coreuiTableUtils.mergeAttr(attr, {
            "class": 'border border-secondary-subtle'
          });
        }
        if (this._options.imgStyle && typeof this._options.imgStyle === 'string') {
          switch (this._options.imgStyle) {
            case 'circle':
              attr = coreuiTableUtils.mergeAttr(attr, {
                "class": 'rounded-circle'
              });
              break;
            case 'thumb':
              attr = coreuiTableUtils.mergeAttr(attr, {
                "class": 'img-thumbnail'
              });
              break;
            case 'rounded':
              attr = coreuiTableUtils.mergeAttr(attr, {
                "class": 'rounded'
              });
              break;
          }
        }
        var attributes = [];
        $.each(attr, function (name, value) {
          if (['string', 'number'].indexOf(_typeof(value)) >= 0) {
            attributes.push(name + '="' + value + '"');
          }
        });
        return coreuiTableUtils.render(tpl['columns/image.html'], {
          attr: attributes.length > 0 ? ' ' + attributes.join(' ') : ''
        });
      }
    }]);
  }(Column);

  coreuiTable.lang.ru = langRu;
  coreuiTable.lang.en = langEn;
  coreuiTable.controls.link = ControlLink;
  coreuiTable.controls.button = ControlButton;
  coreuiTable.controls.dropdown = ControlDropdown;
  coreuiTable.controls.buttonGroup = ControlButtonGroup;
  coreuiTable.controls.custom = ControlCustom;
  coreuiTable.controls.pageSize = ControlPageSize;
  coreuiTable.controls.pageJump = ControlPageJump;
  coreuiTable.controls.pages = ControlPages;
  coreuiTable.controls.total = ControlTotal;
  coreuiTable.controls.search = ControlSearch;
  coreuiTable.controls.columns = ControlColumns;
  coreuiTable.controls.caption = ControlCaption;
  coreuiTable.controls.filterClear = ControlFilterClear;
  coreuiTable.controls.divider = ControlDivider;
  coreuiTable.filters.text = FilterText;
  coreuiTable.filters.number = FilterNumber;
  coreuiTable.filters.date = FilterDate;
  coreuiTable.filters.datetime = FilterDatetime;
  coreuiTable.filters.dateMonth = FilterDateMonth;
  coreuiTable.filters.dateRange = FilterDateRange;
  coreuiTable.filters.datetimeRange = FilterDatetimeRange;
  coreuiTable.filters.checkbox = FilterCheckbox;
  coreuiTable.filters.radio = FilterRadio;
  coreuiTable.filters.select = FilterSelect;
  coreuiTable.filters["switch"] = FilterSwitch;
  coreuiTable.search.text = SearchText;
  coreuiTable.search.number = SearchNumber;
  coreuiTable.search.date = SearchDate;
  coreuiTable.search.dateMonth = SearchDateMonth;
  coreuiTable.search.datetime = SearchDatetime;
  coreuiTable.search.dateRange = SearchDateRange;
  coreuiTable.search.datetimeRange = SearchDatetimeRange;
  coreuiTable.search.checkbox = SearchCheckbox;
  coreuiTable.search.checkboxBtn = SearchCheckboxBtn;
  coreuiTable.search.radio = SearchRadio;
  coreuiTable.search.radioBtn = SearchRadioBtn;
  coreuiTable.search.select = SearchSelect;
  coreuiTable.search["switch"] = SearchSwitch;
  coreuiTable.columns.date = ColumnsDate;
  coreuiTable.columns.datetime = ColumnsDatetime;
  coreuiTable.columns.dateHuman = ColumnsDateHuman;
  coreuiTable.columns.html = ColumnsHtml;
  coreuiTable.columns.number = ColumnsNumber;
  coreuiTable.columns.money = ColumnsMoney;
  coreuiTable.columns.numbers = ColumnsNumbers;
  coreuiTable.columns.select = ColumnsSelect;
  coreuiTable.columns["switch"] = ColumnsSwitch;
  coreuiTable.columns.text = ColumnsText;
  coreuiTable.columns.button = ColumnsButton;
  coreuiTable.columns.link = ColumnsLink;
  coreuiTable.columns.menu = ColumnsMenu;
  coreuiTable.columns.badge = ColumnsBadge;
  coreuiTable.columns.component = ColumnsComponent;
  coreuiTable.columns.progress = ColumnsProgress;
  coreuiTable.columns.image = ColumnsImage;

  return coreuiTable;

}));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXMiOlsic3JjL2pzL2NvcmV1aS50YWJsZS50ZW1wbGF0ZXMuanMiLCJub2RlX21vZHVsZXMvZWpzL2Vqcy5taW4uanMiLCJzcmMvanMvY29yZXVpLnRhYmxlLnV0aWxzLmpzIiwic3JjL2pzL2NvcmV1aS50YWJsZS5yZW5kZXIuanMiLCJzcmMvanMvY29yZXVpLnRhYmxlLmVsZW1lbnRzLmpzIiwic3JjL2pzL2NvcmV1aS50YWJsZS5wcml2YXRlLmpzIiwic3JjL2pzL2NvcmV1aS50YWJsZS5pbnN0YW5jZS5qcyIsInNyYy9qcy9jb3JldWkudGFibGUuanMiLCJzcmMvanMvbGFuZy9lbi5qcyIsInNyYy9qcy9sYW5nL3J1LmpzIiwic3JjL2pzL2Fic3RyYWN0L0NvbnRyb2wuanMiLCJzcmMvanMvY29udHJvbHMvbGluay5qcyIsInNyYy9qcy9jb250cm9scy9idXR0b24uanMiLCJzcmMvanMvY29udHJvbHMvZHJvcGRvd24uanMiLCJzcmMvanMvY29udHJvbHMvYnV0dG9uX2dyb3VwLmpzIiwic3JjL2pzL2NvbnRyb2xzL2N1c3RvbS5qcyIsInNyYy9qcy9jb250cm9scy9wYWdlX3NpemUuanMiLCJzcmMvanMvY29udHJvbHMvcGFnZV9qdW1wLmpzIiwic3JjL2pzL2NvbnRyb2xzL3BhZ2VzL2NvbnRyb2wuanMiLCJzcmMvanMvY29udHJvbHMvcGFnZXMuanMiLCJzcmMvanMvY29udHJvbHMvdG90YWwuanMiLCJzcmMvanMvY29udHJvbHMvc2VhcmNoLmpzIiwic3JjL2pzL2NvbnRyb2xzL2NvbHVtbnMuanMiLCJzcmMvanMvY29udHJvbHMvY2FwdGlvbi5qcyIsInNyYy9qcy9jb250cm9scy9maWx0ZXJfY2xlYXIuanMiLCJzcmMvanMvY29udHJvbHMvZGl2aWRlci5qcyIsInNyYy9qcy9hYnN0cmFjdC9GaWx0ZXIuanMiLCJzcmMvanMvZmlsdGVycy90ZXh0LmpzIiwic3JjL2pzL2ZpbHRlcnMvbnVtYmVyLmpzIiwic3JjL2pzL2ZpbHRlcnMvZGF0ZS5qcyIsInNyYy9qcy9maWx0ZXJzL2RhdGV0aW1lLmpzIiwic3JjL2pzL2ZpbHRlcnMvZGF0ZV9tb250aC5qcyIsInNyYy9qcy9maWx0ZXJzL2RhdGVfcmFuZ2UuanMiLCJzcmMvanMvZmlsdGVycy9kYXRldGltZV9yYW5nZS5qcyIsInNyYy9qcy9maWx0ZXJzL2NoZWNrYm94LmpzIiwic3JjL2pzL2ZpbHRlcnMvcmFkaW8uanMiLCJzcmMvanMvZmlsdGVycy9zZWxlY3QuanMiLCJzcmMvanMvZmlsdGVycy9zd2l0Y2guanMiLCJzcmMvanMvYWJzdHJhY3QvU2VhcmNoLmpzIiwic3JjL2pzL3NlYXJjaC90ZXh0LmpzIiwic3JjL2pzL3NlYXJjaC9udW1iZXIuanMiLCJzcmMvanMvc2VhcmNoL2RhdGUuanMiLCJzcmMvanMvc2VhcmNoL2RhdGVfbW9udGguanMiLCJzcmMvanMvc2VhcmNoL2RhdGV0aW1lLmpzIiwic3JjL2pzL3NlYXJjaC9kYXRlX3JhbmdlLmpzIiwic3JjL2pzL3NlYXJjaC9kYXRldGltZV9yYW5nZS5qcyIsInNyYy9qcy9zZWFyY2gvY2hlY2tib3guanMiLCJzcmMvanMvc2VhcmNoL2NoZWNrYm94QnRuLmpzIiwic3JjL2pzL3NlYXJjaC9yYWRpby5qcyIsInNyYy9qcy9zZWFyY2gvcmFkaW9CdG4uanMiLCJzcmMvanMvc2VhcmNoL3NlbGVjdC5qcyIsInNyYy9qcy9zZWFyY2gvc3dpdGNoLmpzIiwic3JjL2pzL2Fic3RyYWN0L0NvbHVtbi5qcyIsInNyYy9qcy9jb2x1bW5zL2RhdGUuanMiLCJzcmMvanMvY29sdW1ucy9kYXRldGltZS5qcyIsIm5vZGVfbW9kdWxlcy9tb21lbnQvbW9tZW50LmpzIiwibm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvcnUuanMiLCJzcmMvanMvY29sdW1ucy9kYXRlX2h1bWFuLmpzIiwic3JjL2pzL2NvbHVtbnMvaHRtbC5qcyIsInNyYy9qcy9jb2x1bW5zL251bWJlci5qcyIsInNyYy9qcy9jb2x1bW5zL21vbmV5LmpzIiwic3JjL2pzL2NvbHVtbnMvbnVtYmVycy5qcyIsInNyYy9qcy9jb2x1bW5zL3NlbGVjdC5qcyIsInNyYy9qcy9jb2x1bW5zL3N3aXRjaC5qcyIsInNyYy9qcy9jb2x1bW5zL3RleHQuanMiLCJzcmMvanMvY29sdW1ucy9idXR0b24uanMiLCJzcmMvanMvY29sdW1ucy9saW5rLmpzIiwic3JjL2pzL2NvbHVtbnMvbWVudS5qcyIsInNyYy9qcy9jb2x1bW5zL2JhZGdlLmpzIiwic3JjL2pzL2NvbHVtbnMvY29tcG9uZW50LmpzIiwic3JjL2pzL2NvbHVtbnMvcHJvZ3Jlc3MuanMiLCJzcmMvanMvY29sdW1ucy9pbWFnZS5qcyIsInNyYy9qcy9tYWluLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImxldCB0cGwgPSBPYmplY3QuY3JlYXRlKG51bGwpXG50cGxbJ2NvbHVtbnMvYmFkZ2UuaHRtbCddID0gJzxzcGFuIGNsYXNzPVwiYmFkZ2UgdGV4dC1iZy08JT0gdHlwZSAlPlwiPjwlPSB0ZXh0ICU+PC9zcGFuPidcbnRwbFsnY29sdW1ucy9idXR0b24uaHRtbCddID0gJzxidXR0b24gdHlwZT1cImJ1dHRvblwiPCUtIGF0dHIgJT4+PCUtIGNvbnRlbnQgJT48L2J1dHRvbj4nXG50cGxbJ2NvbHVtbnMvaW1hZ2UuaHRtbCddID0gJzxpbWcgPCUtIGF0dHIgJT4vPidcbnRwbFsnY29sdW1ucy9saW5rLmh0bWwnXSA9ICc8YSA8JS0gYXR0ciAlPj48JS0gY29udGVudCAlPjwvYT4nXG50cGxbJ2NvbHVtbnMvbWVudS5odG1sJ10gPSAnIDxkaXYgY2xhc3M9XCJidG4tZ3JvdXBcIiByb2xlPVwiZ3JvdXBcIj4gPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgZGF0YS1icy10b2dnbGU9XCJkcm9wZG93blwiPCUtIGF0dHIgJT4+IDwlLSBjb250ZW50ICU+IDwvYnV0dG9uPiA8dWwgY2xhc3M9XCJkcm9wZG93bi1tZW51IGRyb3Bkb3duLW1lbnUtPCU9IHBvc2l0aW9uICU+XCI+IDwlICQuZWFjaChpdGVtcywgZnVuY3Rpb24oa2V5LCBpdGVtKSB7ICU+IDwlIGlmIChpdGVtLnR5cGUgPT09IFxcJ2xpbmtcXCcpIHsgJT4gPGxpPjxhIGhyZWY9XCI8JT0gaXRlbS51cmwgJT5cIjwlLSBpdGVtLmF0dHIgJT4+PCU9IGl0ZW0uY29udGVudCAlPjwvYT48L2xpPiA8JSB9IGVsc2UgaWYgKGl0ZW0udHlwZSA9PT0gXFwnYnV0dG9uXFwnKSB7ICU+IDxsaT4gPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgaWQ9XCJidG4tZHJvcGRvd24tPCU9IGl0ZW0uaWQgJT5cIjwlLSBpdGVtLmF0dHIgJT4+IDwlLSBpdGVtLmNvbnRlbnQgJT4gPC9idXR0b24+IDwvbGk+IDwlIH0gZWxzZSBpZiAoaXRlbS50eXBlID09PSBcXCdkaXZpZGVyXFwnKSB7ICU+IDxsaT48aHIgY2xhc3M9XCJkcm9wZG93bi1kaXZpZGVyXCI+PC9saT4gPCUgfSBlbHNlIGlmIChpdGVtLnR5cGUgPT09IFxcJ2hlYWRlclxcJykgeyAlPiA8bGk+PGg2IGNsYXNzPVwiZHJvcGRvd24taGVhZGVyXCI+PCU9IGl0ZW0uY29udGVudCAlPjwvaDY+PC9saT4gPCUgfSAlPiA8JSB9KSAlPiA8L3VsPiA8L2Rpdj4nXG50cGxbJ2NvbHVtbnMvcHJvZ3Jlc3MuaHRtbCddID0gJzwlIGlmIChkZXNjcmlwdGlvbiAhPT0gbnVsbCkgeyAlPiA8c21hbGwgY2xhc3M9XCJ0ZXh0LWJvZHktc2Vjb25kYXJ5XCI+PCU9IGRlc2NyaXB0aW9uICU+PC9zbWFsbD4gPCUgfSAlPiA8ZGl2IGNsYXNzPVwiZC1pbmxpbmUtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXJcIj4gPGRpdiA8JS0gYXR0ciAlPj4gPGRpdiBjbGFzcz1cInByb2dyZXNzLWJhciBiZy08JT0gY29sb3IgJT5cIiBzdHlsZT1cIndpZHRoOjwlPSBwZXJjZW50ICU+JTtcIj48L2Rpdj4gPC9kaXY+IDxzcGFuPjwlPSBwZXJjZW50VGV4dCAlPjwvc3Bhbj4gPC9kaXY+J1xudHBsWydjb2x1bW5zL3NlbGVjdF9sYWJlbC5odG1sJ10gPSAnPGlucHV0IGNsYXNzPVwiY29yZXVpLXRhYmxlX19zZWxlY3QtYWxsIGZvcm0tY2hlY2staW5wdXRcIiB0eXBlPVwiY2hlY2tib3hcIiB2YWx1ZT1cIlwiPidcbnRwbFsnY29sdW1ucy9zZWxlY3QuaHRtbCddID0gJzxpbnB1dCBjbGFzcz1cImNvcmV1aS10YWJsZV9fc2VsZWN0IGZvcm0tY2hlY2staW5wdXRcIiB0eXBlPVwiY2hlY2tib3hcIiB2YWx1ZT1cIjwlPSBpbmRleCAlPlwiPidcbnRwbFsnY29sdW1ucy9zd2l0Y2guaHRtbCddID0gJzxkaXYgY2xhc3M9XCJmb3JtLXN3aXRjaFwiPiA8aW5wdXQgY2xhc3M9XCJmb3JtLWNoZWNrLWlucHV0IGNvcmV1aS10YWJsZV9fc3dpdGNoXCIgdHlwZT1cImNoZWNrYm94XCIgZGF0YS1maWVsZD1cIjwlPSBmaWVsZCAlPlwiIHZhbHVlPVwiPCU9IGluZGV4ICU+XCI8JSBpZiAoY2hlY2tlZCkgeyAlPiBjaGVja2VkPCUgfSAlPjwlIGlmIChkaXNhYmxlZCkgeyAlPiBkaXNhYmxlZDwlIH0gJT4+IDwvZGl2PidcbnRwbFsnY29udGFpbmVyLmh0bWwnXSA9ICcgPGRpdiBpZD1cImNvcmV1aS10YWJsZS08JT0gaWQgJT5cIiBjbGFzcz1cImNvcmV1aS10YWJsZTwlPSBjbGFzc2VzICU+XCI8JSBpZiAod2lkdGhTaXplcykgeyAlPiBzdHlsZT1cIjwlPSB3aWR0aFNpemVzLmpvaW4oXFwnO1xcJykgJT5cIjwlIH0gJT4+IDxkaXYgY2xhc3M9XCJjb3JldWktdGFibGVfX2NvbnRhaW5lciBwb3NpdGlvbi1yZWxhdGl2ZVwiPiA8ZGl2IGNsYXNzPVwiY29yZXVpLXRhYmxlX193cmFwcGVyPCU9IGNsYXNzZXNXcmFwcGVyICU+XCIgPCUgaWYgKGhlaWdodFNpemVzKSB7ICU+c3R5bGU9XCI8JT0gaGVpZ2h0U2l6ZXMuam9pbihcXCc7XFwnKSAlPlwiPCUgfSAlPj48L2Rpdj4gPC9kaXY+IDwvZGl2PidcbnRwbFsnY29udHJvbHMvYnV0dG9uX2dyb3VwLmh0bWwnXSA9ICc8ZGl2IGNsYXNzPVwiYnRuLWdyb3VwXCIgcm9sZT1cImdyb3VwXCI+PC9kaXY+J1xudHBsWydjb250cm9scy9idXR0b25fZ3JvdXAvYnV0dG9uLmh0bWwnXSA9ICc8YnV0dG9uIHR5cGU9XCJidXR0b25cIiA8JS0gYXR0ciAlPj48JT0gY29udGVudCAlPjwvYnV0dG9uPidcbnRwbFsnY29udHJvbHMvYnV0dG9uX2dyb3VwL2Ryb3Bkb3duLmh0bWwnXSA9ICc8ZGl2IGNsYXNzPVwiYnRuLWdyb3VwXCIgcm9sZT1cImdyb3VwXCI+IDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGRhdGEtYnMtdG9nZ2xlPVwiZHJvcGRvd25cIjwlLSBhdHRyICU+PjwlLSBjb250ZW50ICU+PC9idXR0b24+IDx1bCBjbGFzcz1cImRyb3Bkb3duLW1lbnUgZHJvcGRvd24tbWVudS08JT0gcG9zaXRpb24gJT5cIj48L3VsPiA8L2Rpdj4nXG50cGxbJ2NvbnRyb2xzL2J1dHRvbl9ncm91cC9kcm9wZG93bi9idXR0b24uaHRtbCddID0gJzxsaT4gPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJkcm9wZG93bi1pdGVtXCI+PCU9IGNvbnRlbnQgJT48L2J1dHRvbj4gPC9saT4nXG50cGxbJ2NvbnRyb2xzL2J1dHRvbl9ncm91cC9kcm9wZG93bi9kaXZpZGVyLmh0bWwnXSA9ICc8bGk+PGhyIGNsYXNzPVwiZHJvcGRvd24tZGl2aWRlclwiPjwvbGk+J1xudHBsWydjb250cm9scy9idXR0b25fZ3JvdXAvZHJvcGRvd24vbGluay5odG1sJ10gPSAnPGxpPjxhIGNsYXNzPVwiZHJvcGRvd24taXRlbVwiIGhyZWY9XCI8JT0gdXJsICU+XCI+PCU9IGNvbnRlbnQgJT48L2E+PC9saT4nXG50cGxbJ2NvbnRyb2xzL2J1dHRvbl9ncm91cC9saW5rLmh0bWwnXSA9ICc8YSBocmVmPVwiPCU9IHVybCAlPlwiPCUtIGF0dHIgJT4+PCU9IGNvbnRlbnQgJT48L2E+J1xudHBsWydjb250cm9scy9idXR0b24uaHRtbCddID0gJzxidXR0b24gdHlwZT1cImJ1dHRvblwiPCUtIGF0dHIgJT4+PCUtIGNvbnRlbnQgJT48L2J1dHRvbj4nXG50cGxbJ2NvbnRyb2xzL2NhcHRpb24uaHRtbCddID0gJzxkaXYgY2xhc3M9XCJkLWZsZXggZmxleC1jb2x1bW4gbWUtM1wiPiA8c21hbGwgY2xhc3M9XCJ0ZXh0LWJvZHktc2Vjb25kYXJ5IGZ3LW1lZGl1bVwiPiA8JT0gdGl0bGUgJT4gPCUgaWYgKGRlc2NyaXB0aW9uKSB7ICU+IDxpIGNsYXNzPVwiYmkgYmktcXVlc3Rpb24tY2lyY2xlIGNvcmV1aS10YWJsZV9fY3Vyc29yX2hlbHBcIiB0aXRsZT1cIjwlPSBkZXNjcmlwdGlvbiAlPlwiPjwvaT4gPCUgfSAlPiA8L3NtYWxsPiA8YiBjbGFzcz1cInRleHQtbm93cmFwXCI+PCU9IHZhbHVlICU+PC9iPiA8L2Rpdj4nXG50cGxbJ2NvbnRyb2xzL2NvbHVtbnMuaHRtbCddID0gJzxidXR0b24gdHlwZT1cImJ1dHRvblwiPCUtIGJ0bkF0dHIgJT4+PCUtYnRuQ29udGVudCU+PC9idXR0b24+J1xudHBsWydjb250cm9scy9jb2x1bW5zL2xpc3QuaHRtbCddID0gJyA8ZGl2IGNsYXNzPVwiY29yZXVpLXRhYmxlX19jb2x1bW5zIHB4LTMgcHQtMyBwYi00XCI+IDxkaXYgY2xhc3M9XCJtYi0zXCI+IDxkaXYgY2xhc3M9XCJmb3JtLWNoZWNrIGNvcmV1aS10YWJsZV9fY2hlY2tfYWxsXCI+IDxsYWJlbCBjbGFzcz1cImZvcm0tY2hlY2stbGFiZWxcIj4gPGlucHV0IGNsYXNzPVwiZm9ybS1jaGVjay1pbnB1dFwiIHR5cGU9XCJjaGVja2JveFwiIDwlIGlmIChzaG93QWxsID09PSB0cnVlKSB7ICU+Y2hlY2tlZDwlIH0gJT4+IDwlPSBsYW5nLmFsbCAlPiA8L2xhYmVsPiA8L2Rpdj4gPCUgY29sdW1ucy5tYXAoZnVuY3Rpb24oY29sdW1uKSB7ICU+IDxkaXYgY2xhc3M9XCJmb3JtLWNoZWNrIGNvcmV1aS10YWJsZV9jaGVjay1jb2x1bW5cIj4gPGxhYmVsIGNsYXNzPVwiZm9ybS1jaGVjay1sYWJlbFwiPiA8aW5wdXQgY2xhc3M9XCJmb3JtLWNoZWNrLWlucHV0XCIgdHlwZT1cImNoZWNrYm94XCIgdmFsdWU9XCI8JT0gY29sdW1uLmZpZWxkICU+XCIgPCUgaWYgKGNvbHVtbi5zaG93ID09PSB0cnVlKSB7ICU+Y2hlY2tlZDwlIH0gJT4+IDwlPSBjb2x1bW4ubGFiZWwgJT4gPC9sYWJlbD4gPC9kaXY+IDwlIH0pOyAlPiA8L2Rpdj4gPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgPCUtIGJ0bkNvbXBsZXRlQXR0ciAlPj4gPCUtIGJ0bkNvbXBsZXRlQ29udGVudCAlPiA8L2J1dHRvbj4gPC9kaXY+J1xudHBsWydjb250cm9scy9kaXZpZGVyLmh0bWwnXSA9ICc8ZGl2IDwlLSBhdHRyICU+PjwlPSB0ZXh0ICU+PC9kaXY+J1xudHBsWydjb250cm9scy9kcm9wZG93bi5odG1sJ10gPSAnIDxkaXYgY2xhc3M9XCJidG4tZ3JvdXBcIiByb2xlPVwiZ3JvdXBcIj4gPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgZGF0YS1icy10b2dnbGU9XCJkcm9wZG93blwiPCUtIGF0dHIgJT4+PCUtIGNvbnRlbnQgJT48L2J1dHRvbj4gPHVsIGNsYXNzPVwiZHJvcGRvd24tbWVudSBkcm9wZG93bi1tZW51LTwlPSBwb3NpdGlvbiAlPlwiPjwvdWw+IDwvZGl2PidcbnRwbFsnY29udHJvbHMvZHJvcGRvd24vYnV0dG9uLmh0bWwnXSA9ICc8bGk+IDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiZHJvcGRvd24taXRlbVwiPjwlPSBjb250ZW50ICU+PC9idXR0b24+IDwvbGk+J1xudHBsWydjb250cm9scy9kcm9wZG93bi9kaXZpZGVyLmh0bWwnXSA9ICc8bGk+PGhyIGNsYXNzPVwiZHJvcGRvd24tZGl2aWRlclwiPjwvbGk+J1xudHBsWydjb250cm9scy9kcm9wZG93bi9saW5rLmh0bWwnXSA9ICc8bGk+PGEgY2xhc3M9XCJkcm9wZG93bi1pdGVtXCIgaHJlZj1cIjwlPSB1cmwgJT5cIj48JT0gY29udGVudCAlPjwvYT48L2xpPidcbnRwbFsnY29udHJvbHMvZmlsdGVyX2NsZWFyLmh0bWwnXSA9ICc8YnV0dG9uIHR5cGU9XCJidXR0b25cIiA8JS0gYXR0ciAlPj48JS0gY29udGVudCAlPjwvYnV0dG9uPidcbnRwbFsnY29udHJvbHMvbGluay5odG1sJ10gPSAnPGEgaHJlZj1cIjwlLSB1cmwgJT5cIjwlLSBhdHRyICU+PjwlLSBjb250ZW50ICU+PC9hPidcbnRwbFsnY29udHJvbHMvcGFnZS1qdW1wLmh0bWwnXSA9ICcgPGRpdiBjbGFzcz1cImNvcmV1aS10YWJsZV9fcGFnZV9qdW1wX2NvbnRhaW5lclwiPiA8ZGl2IDwlLSBhdHRyICU+PiA8aW5wdXQgdHlwZT1cIm51bWJlclwiIGNsYXNzPVwiZm9ybS1jb250cm9sIGJvcmRlci1zZWNvbmRhcnktc3VidGxlXCIgbWluPVwiMVwiPiA8YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1vdXRsaW5lLXNlY29uZGFyeSBib3JkZXItc2Vjb25kYXJ5LXN1YnRsZVwiIHR5cGU9XCJidXR0b25cIj4gPGkgY2xhc3M9XCJiaSBiaS1jaGV2cm9uLWNvbXBhY3QtcmlnaHRcIj48L2k+IDwvYnV0dG9uPiA8L2Rpdj4gPC9kaXY+J1xudHBsWydjb250cm9scy9wYWdlLXNpemUuaHRtbCddID0gJyA8c2VsZWN0IDwlLSBhdHRyICU+PiA8JSAkLmVhY2gocmVjb3Jkc1BlclBhZ2VMaXN0LCBmdW5jdGlvbihrZXksIGNvdW50KSB7ICU+IDxvcHRpb24gdmFsdWU9XCI8JT0gY291bnQgJT5cIjwlIGlmIChyZWNvcmRzUGVyUGFnZSA9PSBjb3VudCkgeyAlPnNlbGVjdGVkPCUgfSAlPj4gPCUgaWYgKGNvdW50ID09IFxcJzBcXCcpIHsgJT48JT0gbGFuZy5hbGwgJT48JSB9IGVsc2UgeyAlPjwlPSBjb3VudCAlPjwlIH0gJT4gPC9vcHRpb24+IDwlIH0pOyAlPiA8L3NlbGVjdD4nXG50cGxbJ2NvbnRyb2xzL3BhZ2VzLmh0bWwnXSA9ICcgPG5hdj4gPHVsIDwlLSBhdHRyICU+PiA8JSBpZiAoc2hvd1ByZXYpIHsgJT4gPGxpIGNsYXNzPVwicGFnZS1pdGVtIGNvcmV1aS10YWJsZV9fcGFnZV9wcmV2IDwlIGlmICggISBpc0FjdGl2ZVByZXYpIHsgJT4gZGlzYWJsZWQ8JSB9ICU+XCI+IDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwicGFnZS1saW5rXCI+IDxpIGNsYXNzPVwiYmkgYmktY2hldnJvbi1sZWZ0XCI+PC9pPiA8L2J1dHRvbj4gPC9saT4gPCUgfSAlPiA8JSBpZiAoc2hvd1BhZ2VGaXJzdCkgeyAlPiA8bGkgY2xhc3M9XCJwYWdlLWl0ZW1cIj4gPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJwYWdlLWxpbmsgY29yZXVpLXRhYmxlX19wYWdlXCI+IDEgPC9idXR0b24+IDwvbGk+IDwlIH0gJT4gPCUgaWYgKHNob3dEaXZpZGVyU3RhcnQpIHsgJT4gPGxpIGNsYXNzPVwicGFnZS1pdGVtIGRpc2FibGVkXCI+IDxzcGFuIGNsYXNzPVwicGFnZS1saW5rIHB4LTFcIj4uLi48L3NwYW4+IDwvbGk+IDwlIH0gJT4gPCUgcGFnZXMubWFwKGZ1bmN0aW9uKHBhZ2UpIHsgJT4gPCUgaWYgKHBhZ2UgPT0gY3VycmVudFBhZ2UpIHsgJT4gPGxpIGNsYXNzPVwicGFnZS1pdGVtIGFjdGl2ZVwiPiA8c3BhbiBjbGFzcz1cInBhZ2UtbGlua1wiPjwlPSBwYWdlICU+PC9zcGFuPiA8L2xpPiA8JSB9IGVsc2UgeyAlPiA8bGkgY2xhc3M9XCJwYWdlLWl0ZW1cIj4gPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJwYWdlLWxpbmsgY29yZXVpLXRhYmxlX19wYWdlXCI+IDwlPSBwYWdlICU+IDwvYnV0dG9uPiA8L2xpPiA8JSB9ICU+IDwlIH0pOyAlPiA8JSBpZiAoc2hvd0RpdmlkZXJFbmQpIHsgJT4gPGxpIGNsYXNzPVwicGFnZS1pdGVtIGRpc2FibGVkXCI+IDxzcGFuIGNsYXNzPVwicGFnZS1saW5rIHB4LTFcIj4uLi48L3NwYW4+IDwvbGk+IDwlIH0gJT4gPCUgaWYgKHNob3dQYWdlTGFzdCkgeyAlPiA8bGkgY2xhc3M9XCJwYWdlLWl0ZW1cIj4gPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJwYWdlLWxpbmsgY29yZXVpLXRhYmxlX19wYWdlXCI+IDwlPSBwYWdlc1RvdGFsICU+IDwvYnV0dG9uPiA8L2xpPiA8JSB9ICU+IDwlIGlmIChzaG93TmV4dCkgeyAlPiA8bGkgY2xhc3M9XCJwYWdlLWl0ZW0gY29yZXVpLXRhYmxlX19wYWdlX25leHQ8JSBpZiAoICEgaXNBY3RpdmVOZXh0KSB7ICU+IGRpc2FibGVkPCUgfSAlPlwiPiA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cInBhZ2UtbGlua1wiPiA8aSBjbGFzcz1cImJpIGJpLWNoZXZyb24tcmlnaHRcIj48L2k+IDwvYnV0dG9uPiA8L2xpPiA8JSB9ICU+IDwvdWw+IDwvbmF2PidcbnRwbFsnY29udHJvbHMvc2VhcmNoLmh0bWwnXSA9ICc8ZGl2IGNsYXNzPVwiYnRuLWdyb3VwXCI+IDxidXR0b24gdHlwZT1cImJ1dHRvblwiPCUtIGJ0bkF0dHIgJT4+PCUtIGJ0bkNvbnRlbnQgJT48L2J1dHRvbj4gPCUtIGJ0bkNsZWFyICU+IDwvZGl2PiAnXG50cGxbJ2NvbnRyb2xzL3NlYXJjaC9jbGVhci5odG1sJ10gPSAnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgPCUtIGF0dHIgJT4+PCUtIGNvbnRlbnQgJT48L2J1dHRvbj4gJ1xudHBsWydjb250cm9scy9zZWFyY2gvY29udGFpbmVyLmh0bWwnXSA9ICcgPGRpdiBjbGFzcz1cImNvcmV1aS10YWJsZV9fc2VhcmNoIHB4LTMgcHQtMyBwYi00XCI+IDxkaXYgY2xhc3M9XCJtYi0zIGNvcmV1aS10YWJsZV9fc2VhcmNoX2NvbnRyb2xzXCI+PC9kaXY+IDxkaXYgY2xhc3M9XCJkLWZsZXggZmxleC1zbS13cmFwIGZsZXgtbWQtbm93cmFwXCI+IDxkaXYgY2xhc3M9XCJkLW5vbmUgZC1tZC1ibG9ja1wiIHN0eWxlPVwid2lkdGg6PCU9IGxhYmVsV2lkdGggJT47bWluLXdpZHRoOjwlPSBsYWJlbFdpZHRoICU+XCI+PC9kaXY+IDxkaXYgY2xhc3M9XCJkLWZsZXgganVzdGlmeS1jb250ZW50LXN0YXJ0IGZsZXgtd3JhcCBnYXAtMlwiPiA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiA8JS0gYnRuQ29tcGxldGVBdHRyICU+PiA8JS0gYnRuQ29tcGxldGVDb250ZW50ICU+IDwvYnV0dG9uPiA8L2Rpdj4gPC9kaXY+IDwvZGl2PidcbnRwbFsnY29udHJvbHMvc2VhcmNoL2NvbnRyb2wuaHRtbCddID0gJzxkaXYgY2xhc3M9XCJtYi0yIGQtZmxleCBmbGV4LWNvbHVtbiBmbGV4LW1kLXJvdyBcIj4gPGxhYmVsIGNsYXNzPVwiY29sLWZvcm0tbGFiZWwgZnctbWVkaXVtIHRleHQtc3RhcnQgdGV4dC1tZC1lbmQgcGUtMlwiIHN0eWxlPVwibWluLXdpZHRoOjwlPSBsYWJlbFdpZHRoICU+O3dpZHRoOjwlPSBsYWJlbFdpZHRoICU+XCI+IDwlPSBsYWJlbCAlPiA8JSBpZiAoZGVzY3JpcHRpb25MYWJlbCkgeyAlPiA8ZGl2IGNsYXNzPVwidGV4dC1tdXRlZCBmdy1ub3JtYWxcIj4gPHNtYWxsPjwlPSBkZXNjcmlwdGlvbkxhYmVsICU+PC9zbWFsbD4gPC9kaXY+IDwlIH0gJT4gPC9sYWJlbD4gPGRpdiBjbGFzcz1cImZsZXgtZmlsbCBjb3JldWktdGFibGVfX3NlYXJjaC1jb250cm9sX2NvbnRlbnRcIj4gPCUgaWYgKHN1ZmZpeCkgeyAlPjwlLSBzdWZmaXggJT48JSB9ICU+IDwlIGlmIChkZXNjcmlwdGlvbikgeyAlPiA8ZGl2IGNsYXNzPVwidGV4dC1tdXRlZCBmdy1ub3JtYWxcIj4gPHNtYWxsPjwlPSBkZXNjcmlwdGlvbiAlPjwvc21hbGw+IDwvZGl2PiA8JSB9ICU+IDwvZGl2PiA8L2Rpdj4nXG50cGxbJ2NvbnRyb2xzL3RvdGFsLmh0bWwnXSA9ICc8ZGl2IDwlLSBhdHRyICU+PiA8c21hbGw+PCU9IGxhbmcudG90YWwgJT46IDxzcGFuIGNsYXNzPVwiY29yZXVpLXRhYmxlX19jb3VudC10b3RhbFwiPjwlPSByZWNvcmRzVG90YWwgJT48L3NwYW4+PC9zbWFsbD4gPC9kaXY+J1xudHBsWydmaWx0ZXJzL2NoZWNrYm94Lmh0bWwnXSA9ICcgPGRpdiBjbGFzcz1cImJ0bi1ncm91cFwiPiA8JSBpZiAobGFiZWwpIHsgJT4gPHNwYW4gY2xhc3M9XCJpbnB1dC1ncm91cC10ZXh0XCI+PCU9IGxhYmVsICU+PC9zcGFuPiA8JSB9ICU+IDwlICQuZWFjaChpdGVtcywgZnVuY3Rpb24oa2V5LCBpdGVtKSB7ICU+IDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBjbGFzcz1cImJ0bi1jaGVja1wiIGF1dG9jb21wbGV0ZT1cIm9mZlwiIGlkPVwiPCU9IChmaWVsZCArIGtleSkgJT5cIiBuYW1lPVwiPCU9IGZpZWxkICU+XCIgdmFsdWU9XCI8JT0gaXRlbS52YWx1ZSAlPlwiIDwlPSBpdGVtLmNoZWNrZWQgPyBcXCcgY2hlY2tlZFxcJyA6IFxcJ1xcJyAlPj4gPGxhYmVsIGNsYXNzPVwiPCU9IGl0ZW0uY2xhc3MgJT5cIiBmb3I9XCI8JT0gKGZpZWxkICsga2V5KSAlPlwiPjwlPSBpdGVtLnRleHQgJT48L2xhYmVsPiA8JSB9KTsgJT4gPC9kaXY+J1xudHBsWydmaWx0ZXJzL2RhdGVfbW9udGguaHRtbCddID0gJyA8ZGl2IGNsYXNzPVwiaW5wdXQtZ3JvdXBcIj4gPCUgaWYgKGxhYmVsKSB7ICU+IDxzcGFuIGNsYXNzPVwiaW5wdXQtZ3JvdXAtdGV4dFwiPjwlPSBsYWJlbCAlPjwvc3Bhbj4gPCUgfSAlPiA8aW5wdXQgdHlwZT1cIm1vbnRoXCIgPCUtIGF0dHIgJT4+IDwvZGl2PidcbnRwbFsnZmlsdGVycy9kYXRlX3JhbmdlLmh0bWwnXSA9ICcgPGRpdiBjbGFzcz1cImlucHV0LWdyb3VwXCI+IDwlIGlmIChsYWJlbCkgeyAlPiA8c3BhbiBjbGFzcz1cImlucHV0LWdyb3VwLXRleHRcIj48JT0gbGFiZWwgJT48L3NwYW4+IDwlIH0gJT4gPGlucHV0IHR5cGU9XCJkYXRlXCIgPCUtIHN0YXJ0QXR0ciAlPj4gPGlucHV0IHR5cGU9XCJkYXRlXCIgPCUtIGVuZEF0dHIgJT4+IDwvZGl2PidcbnRwbFsnZmlsdGVycy9kYXRlLmh0bWwnXSA9ICcgPGRpdiBjbGFzcz1cImlucHV0LWdyb3VwXCI+IDwlIGlmIChsYWJlbCkgeyAlPiA8c3BhbiBjbGFzcz1cImlucHV0LWdyb3VwLXRleHRcIj48JT0gbGFiZWwgJT48L3NwYW4+IDwlIH0gJT4gPGlucHV0IHR5cGU9XCJkYXRlXCIgPCUtIGF0dHIgJT4+IDwvZGl2PidcbnRwbFsnZmlsdGVycy9kYXRldGltZV9yYW5nZS5odG1sJ10gPSAnIDxkaXYgY2xhc3M9XCJpbnB1dC1ncm91cFwiPiA8JSBpZiAobGFiZWwpIHsgJT4gPHNwYW4gY2xhc3M9XCJpbnB1dC1ncm91cC10ZXh0XCI+PCU9IGxhYmVsICU+PC9zcGFuPiA8JSB9ICU+IDxpbnB1dCB0eXBlPVwiZGF0ZXRpbWUtbG9jYWxcIiA8JS0gc3RhcnRBdHRyICU+PiA8aW5wdXQgdHlwZT1cImRhdGV0aW1lLWxvY2FsXCIgPCUtIGVuZEF0dHIgJT4+IDwvZGl2PidcbnRwbFsnZmlsdGVycy9kYXRldGltZS5odG1sJ10gPSAnIDxkaXYgY2xhc3M9XCJpbnB1dC1ncm91cFwiPiA8JSBpZiAobGFiZWwpIHsgJT4gPHNwYW4gY2xhc3M9XCJpbnB1dC1ncm91cC10ZXh0XCI+PCU9IGxhYmVsICU+PC9zcGFuPiA8JSB9ICU+IDxpbnB1dCB0eXBlPVwiZGF0ZXRpbWUtbG9jYWxcIiA8JS0gYXR0ciAlPj4gPC9kaXY+J1xudHBsWydmaWx0ZXJzL251bWJlci5odG1sJ10gPSAnIDxkaXYgY2xhc3M9XCJpbnB1dC1ncm91cFwiPiA8JSBpZiAobGFiZWwpIHsgJT4gPHNwYW4gY2xhc3M9XCJpbnB1dC1ncm91cC10ZXh0XCI+PCU9IGxhYmVsICU+PC9zcGFuPiA8JSB9ICU+IDxpbnB1dCB0eXBlPVwibnVtYmVyXCIgPCUtIGF0dHJTdGFydCAlPj4gPGlucHV0IHR5cGU9XCJudW1iZXJcIiA8JS0gYXR0ckVuZCAlPj4gPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgPCUtIGJ0bkF0dHIgJT4+IDwlLSBidG5Db250ZW50ICU+IDwvYnV0dG9uPiA8L2Rpdj4nXG50cGxbJ2ZpbHRlcnMvcmFkaW8uaHRtbCddID0gJyA8ZGl2IGNsYXNzPVwiYnRuLWdyb3VwXCI+IDwlIGlmIChsYWJlbCkgeyAlPiA8c3BhbiBjbGFzcz1cImlucHV0LWdyb3VwLXRleHRcIj48JT0gbGFiZWwgJT48L3NwYW4+IDwlIH0gJT4gPCUgJC5lYWNoKGl0ZW1zLCBmdW5jdGlvbihrZXksIGl0ZW0pIHsgJT4gPGlucHV0IHR5cGU9XCJyYWRpb1wiIGNsYXNzPVwiYnRuLWNoZWNrXCIgYXV0b2NvbXBsZXRlPVwib2ZmXCIgaWQ9XCI8JT0gKGZpZWxkICsga2V5KSAlPlwiIG5hbWU9XCI8JT0gZmllbGQgJT5cIiB2YWx1ZT1cIjwlPSBpdGVtLnZhbHVlICU+XCIgPCU9IGl0ZW0uY2hlY2tlZCA/IFxcJyBjaGVja2VkXFwnIDogXFwnXFwnICU+PiA8bGFiZWwgY2xhc3M9XCI8JT0gaXRlbS5jbGFzcyAlPlwiIGZvcj1cIjwlPSAoZmllbGQgKyBrZXkpICU+XCI+PCU9IGl0ZW0udGV4dCAlPjwvbGFiZWw+IDwlIH0pOyAlPiA8L2Rpdj4nXG50cGxbJ2ZpbHRlcnMvc2VsZWN0Lmh0bWwnXSA9ICc8ZGl2IGNsYXNzPVwiaW5wdXQtZ3JvdXAgZmxleC1ub3dyYXBcIj4gPCUgaWYgKGxhYmVsKSB7ICU+IDxzcGFuIGNsYXNzPVwiaW5wdXQtZ3JvdXAtdGV4dFwiPjwlPSBsYWJlbCAlPjwvc3Bhbj4gPCUgfSAlPiA8c2VsZWN0IDwlLSBhdHRyICU+PiA8b3B0aW9uPi0tPC9vcHRpb24+IDwlICQuZWFjaChvcHRpb25zLCBmdW5jdGlvbihrZXksIG9wdGlvbikgeyAlPiA8JSBpZiAob3B0aW9uLnR5cGUgPT09IFxcJ2dyb3VwXFwnKSB7ICU+IDxvcHRncm91cDwlLSBvcHRpb24uYXR0ciAlPj4gPCUgJC5lYWNoKG9wdGlvbi5vcHRpb25zLCBmdW5jdGlvbihrZXksIGdyb3VwT3B0aW9uKSB7ICU+IDxvcHRpb24gPCUtIGdyb3VwT3B0aW9uLmF0dHIgJT4+PCU9IGdyb3VwT3B0aW9uLnRleHQgJT48L29wdGlvbj4gPCUgfSk7ICU+IDwvb3B0Z3JvdXA+IDwlIH0gZWxzZSB7ICU+IDxvcHRpb24gPCUtIG9wdGlvbi5hdHRyICU+PjwlPSBvcHRpb24udGV4dCAlPjwvb3B0aW9uPiA8JSB9ICU+IDwlIH0pOyAlPiA8L3NlbGVjdD4gPC9kaXY+J1xudHBsWydmaWx0ZXJzL3N3aXRjaC5odG1sJ10gPSAnPGRpdiBjbGFzcz1cImZvcm0tY2hlY2sgZm9ybS1zd2l0Y2hcIj4gPGlucHV0IGNsYXNzPVwiZm9ybS1jaGVjay1pbnB1dFwiIHR5cGU9XCJjaGVja2JveFwiIGlkPVwiPCU9IChmaWVsZCArIGlkKSAlPlwiIG5hbWU9XCI8JT0gZmllbGQgJT5cIiB2YWx1ZT1cIjwlPSB2YWx1ZVkgJT5cIiA8JT0gY2hlY2tlZCA/IFxcJyBjaGVja2VkXFwnIDogXFwnXFwnICU+PiA8JSBpZiAobGFiZWwgIT0gXFwnXFwnKSB7ICU+IDxsYWJlbCBjbGFzcz1cImZvcm0tY2hlY2stbGFiZWxcIiBmb3I9XCI8JT0gKGZpZWxkICsgaWQpICU+XCI+PCU9IGxhYmVsICU+PC9sYWJlbD4gPCUgfSAlPiA8L2Rpdj4nXG50cGxbJ2ZpbHRlcnMvdGV4dC5odG1sJ10gPSAnIDxkaXYgY2xhc3M9XCJpbnB1dC1ncm91cFwiPiA8JSBpZiAobGFiZWwpIHsgJT4gPHNwYW4gY2xhc3M9XCJpbnB1dC1ncm91cC10ZXh0XCI+PCU9IGxhYmVsICU+PC9zcGFuPiA8JSB9ICU+IDxpbnB1dCB0eXBlPVwidGV4dFwiIDwlLSBhdHRyICU+PiA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiA8JS0gYnRuQXR0ciAlPj4gPCUtIGJ0bkNvbnRlbnQgJT4gPC9idXR0b24+IDwvZGl2PidcbnRwbFsnc2VhcmNoL2NoZWNrYm94LWJ0bi5odG1sJ10gPSAnIDxkaXYgY2xhc3M9XCJwdC0yXCI+IDxkaXYgY2xhc3M9XCJidG4tZ3JvdXBcIj4gPCUgb3B0aW9ucy5tYXAoZnVuY3Rpb24ob3B0aW9uKSB7ICU+IDxpbnB1dCBjbGFzcz1cImJ0bi1jaGVja1wiIHR5cGU9XCJjaGVja2JveFwiIHZhbHVlPVwiPCUtIG9wdGlvbi52YWx1ZSAlPlwiIGlkPVwiPCU9IG9wdGlvbi5oYXNoICU+XCIgYXV0b2NvbXBsZXRlPVwib2ZmXCIgPCU9IG9wdGlvbi5jaGVja2VkID8gXFwnIGNoZWNrZWRcXCcgOiBcXCdcXCcgJT4+IDxsYWJlbCBjbGFzcz1cIjwlPSBvcHRpb24ub3B0aW9uc0NsYXNzICU+XCIgZm9yPVwiPCU9IG9wdGlvbi5oYXNoICU+XCI+PCU9IG9wdGlvbi50ZXh0ICU+PC9sYWJlbD4gPCUgfSk7ICU+IDwvZGl2PiA8L2Rpdj4nXG50cGxbJ3NlYXJjaC9jaGVja2JveC5odG1sJ10gPSAnIDxkaXYgY2xhc3M9XCJwdC0yXCI+IDwlIG9wdGlvbnMubWFwKGZ1bmN0aW9uKG9wdGlvbikgeyAlPiA8ZGl2IGNsYXNzPVwiZm9ybS1jaGVja1wiPiA8bGFiZWwgY2xhc3M9XCJmb3JtLWNoZWNrLWxhYmVsIGNvcmV1aS10YWJsZV9wb2ludGVyXCI+IDxpbnB1dCBjbGFzcz1cImZvcm0tY2hlY2staW5wdXRcIiB0eXBlPVwiY2hlY2tib3hcIiB2YWx1ZT1cIjwlLSBvcHRpb24udmFsdWUgJT5cIiA8JT0gb3B0aW9uLmNoZWNrZWQgPyBcXCcgY2hlY2tlZFxcJyA6IFxcJ1xcJyAlPj4gPCU9IG9wdGlvbi50ZXh0ICU+IDwvbGFiZWw+IDwvZGl2PiA8JSB9KTsgJT4gPC9kaXY+J1xudHBsWydzZWFyY2gvZGF0ZV9tb250aC5odG1sJ10gPSAnIDxpbnB1dCB0eXBlPVwibW9udGhcIiA8JS0gYXR0ciAlPj4nXG50cGxbJ3NlYXJjaC9kYXRlX3JhbmdlLmh0bWwnXSA9ICc8ZGl2PiA8aW5wdXQgdHlwZT1cImRhdGVcIiA8JS0gc3RhcnRBdHRyICU+PiA8aW5wdXQgdHlwZT1cImRhdGVcIiA8JS0gZW5kQXR0ciAlPj4gPC9kaXY+J1xudHBsWydzZWFyY2gvZGF0ZS5odG1sJ10gPSAnIDxpbnB1dCB0eXBlPVwiZGF0ZVwiIDwlLSBhdHRyICU+PidcbnRwbFsnc2VhcmNoL2RhdGV0aW1lX3JhbmdlLmh0bWwnXSA9ICc8ZGl2PiA8aW5wdXQgdHlwZT1cImRhdGV0aW1lLWxvY2FsXCIgPCUtIHN0YXJ0QXR0ciAlPj4gPGlucHV0IHR5cGU9XCJkYXRldGltZS1sb2NhbFwiIDwlLSBlbmRBdHRyICU+PiA8L2Rpdj4nXG50cGxbJ3NlYXJjaC9kYXRldGltZS5odG1sJ10gPSAnIDxpbnB1dCB0eXBlPVwiZGF0ZXRpbWUtbG9jYWxcIiA8JS0gYXR0ciAlPj4nXG50cGxbJ3NlYXJjaC9udW1iZXIuaHRtbCddID0gJyA8aW5wdXQgdHlwZT1cIm51bWJlclwiIDwlLSBzdGFydEF0dHIgJT4+IDxpbnB1dCB0eXBlPVwibnVtYmVyXCIgPCUtIGVuZEF0dHIgJT4+J1xudHBsWydzZWFyY2gvcmFkaW8tYnRuLmh0bWwnXSA9ICc8ZGl2IGNsYXNzPVwicHQtMlwiPiA8ZGl2IGNsYXNzPVwiYnRuLWdyb3VwXCI+IDxpbnB1dCBjbGFzcz1cImJ0bi1jaGVjayBjb3JldWktdGFibGVfX2FsbFwiIHR5cGU9XCJyYWRpb1wiIG5hbWU9XCI8JT0gZmllbGQgJT5cIiB2YWx1ZT1cIlwiIGlkPVwiPCU9IG9wdGlvbkFsbEhhc2ggJT5cIiBhdXRvY29tcGxldGU9XCJvZmZcIiA8JT0gY2hlY2tlZEFsbCA/IFxcJyBjaGVja2VkXFwnIDogXFwnXFwnICU+PiA8bGFiZWwgY2xhc3M9XCI8JT0gb3B0aW9uT3B0aW9uc0NsYXNzICU+XCIgZm9yPVwiPCU9IG9wdGlvbkFsbEhhc2ggJT5cIj48JT0gbGFuZy5hbGwgJT48L2xhYmVsPiA8JSBvcHRpb25zLm1hcChmdW5jdGlvbihvcHRpb24pIHsgJT4gPGlucHV0IGNsYXNzPVwiYnRuLWNoZWNrXCIgdHlwZT1cInJhZGlvXCIgbmFtZT1cIjwlPSBmaWVsZCAlPlwiIHZhbHVlPVwiPCUtIG9wdGlvbi52YWx1ZSAlPlwiIGlkPVwiPCU9IG9wdGlvbi5oYXNoICU+XCIgYXV0b2NvbXBsZXRlPVwib2ZmXCIgPCU9IG9wdGlvbi5jaGVja2VkID8gXFwnIGNoZWNrZWQ9XCJjaGVja2VkXCJcXCcgOiBcXCdcXCcgJT5cIj4gPGxhYmVsIGNsYXNzPVwiPCU9IG9wdGlvbi5vcHRpb25zQ2xhc3MgJT5cIiBmb3I9XCI8JT0gb3B0aW9uLmhhc2ggJT5cIj48JT0gb3B0aW9uLnRleHQgJT48L2xhYmVsPiA8JSB9KTsgJT4gPC9kaXY+IDwvZGl2PidcbnRwbFsnc2VhcmNoL3JhZGlvLmh0bWwnXSA9ICc8ZGl2IGNsYXNzPVwicHQtMlwiPiA8ZGl2IGNsYXNzPVwiZm9ybS1jaGVja1wiPiA8bGFiZWwgY2xhc3M9XCJmb3JtLWNoZWNrLWxhYmVsIGNvcmV1aS10YWJsZV9wb2ludGVyXCI+IDxpbnB1dCBjbGFzcz1cImZvcm0tY2hlY2staW5wdXQgY29yZXVpLXRhYmxlX19hbGxcIiB0eXBlPVwicmFkaW9cIiBuYW1lPVwiPCU9IGZpZWxkICU+XCIgdmFsdWU9XCJcIjwlPSBjaGVja2VkQWxsID8gXFwnIGNoZWNrZWRcXCcgOiBcXCdcXCcgJT4+IDwlPSBsYW5nLmFsbCAlPiA8L2xhYmVsPiA8L2Rpdj4gPCUgb3B0aW9ucy5tYXAoZnVuY3Rpb24ob3B0aW9uKSB7ICU+IDxkaXYgY2xhc3M9XCJmb3JtLWNoZWNrXCI+IDxsYWJlbCBjbGFzcz1cImZvcm0tY2hlY2stbGFiZWwgY29yZXVpLXRhYmxlX3BvaW50ZXJcIj4gPGlucHV0IGNsYXNzPVwiZm9ybS1jaGVjay1pbnB1dFwiIHR5cGU9XCJyYWRpb1wiIG5hbWU9XCI8JT0gZmllbGQgJT5cIiB2YWx1ZT1cIjwlLSBvcHRpb24udmFsdWUgJT5cIiA8JT0gb3B0aW9uLmNoZWNrZWQgPyBcXCcgY2hlY2tlZD1cImNoZWNrZWRcIlxcJyA6IFxcJ1xcJyAlPj4gPCU9IG9wdGlvbi50ZXh0ICU+IDwvbGFiZWw+IDwvZGl2PiA8JSB9KTsgJT4gPC9kaXY+J1xudHBsWydzZWFyY2gvc2VsZWN0Lmh0bWwnXSA9ICcgPHNlbGVjdCA8JS0gYXR0ciAlPj4gPG9wdGlvbj4tLTwvb3B0aW9uPiA8JSAkLmVhY2gob3B0aW9ucywgZnVuY3Rpb24oa2V5LCBvcHRpb24pIHsgJT4gPCUgaWYgKG9wdGlvbi50eXBlID09PSBcXCdncm91cFxcJykgeyAlPiA8b3B0Z3JvdXA8JS0gb3B0aW9uLmF0dHIgJT4+IDwlICQuZWFjaChvcHRpb24ub3B0aW9ucywgZnVuY3Rpb24oa2V5LCBncm91cE9wdGlvbikgeyAlPiA8b3B0aW9uIDwlLSBncm91cE9wdGlvbi5hdHRyICU+PjwlPSBncm91cE9wdGlvbi50ZXh0ICU+PC9vcHRpb24+IDwlIH0pOyAlPiA8L29wdGdyb3VwPiA8JSB9IGVsc2UgeyAlPiA8b3B0aW9uIDwlLSBvcHRpb24uYXR0ciAlPj48JT0gb3B0aW9uLnRleHQgJT48L29wdGlvbj4gPCUgfSAlPiA8JSB9KTsgJT4gPC9zZWxlY3Q+J1xudHBsWydzZWFyY2gvc3dpdGNoLmh0bWwnXSA9ICc8ZGl2IGNsYXNzPVwiZm9ybS1jaGVjayBmb3JtLXN3aXRjaCBwdC0yXCI+IDxpbnB1dCBjbGFzcz1cImZvcm0tY2hlY2staW5wdXRcIiB0eXBlPVwiY2hlY2tib3hcIiBpZD1cIjwlPSAoZmllbGQgKyBpZCkgJT5cIiBuYW1lPVwiPCU9IGZpZWxkICU+XCIgdmFsdWU9XCI8JT0gdmFsdWVZICU+XCIgPCU9IGNoZWNrZWQgPyBcXCcgY2hlY2tlZFxcJyA6IFxcJ1xcJyAlPj4gPC9kaXY+J1xudHBsWydzZWFyY2gvdGV4dC5odG1sJ10gPSAnPGlucHV0IHR5cGU9XCJ0ZXh0XCIgPCUtIGF0dHIgJT4+J1xudHBsWyd0YWJsZS5odG1sJ10gPSAnIDx0YWJsZSBjbGFzcz1cInRhYmxlIDwlPSBjbGFzc2VzICU+IG1iLTBcIj4gPGNvbGdyb3VwPiA8JSAkLmVhY2goY29sR3JvdXBzLCBmdW5jdGlvbihrZXksIGNvbHVtbkdyb3VwKSB7ICU+IDxjb2w8JSBpZiAoY29sdW1uR3JvdXAuc3R5bGUpIHsgJT4gc3R5bGU9XCI8JT0gY29sdW1uR3JvdXAuc3R5bGUgJT5cIjwlIH0gJT4vPiA8JSB9KTsgJT4gPC9jb2xncm91cD4gPCUgaWYgKHNob3dIZWFkZXJzKSB7ICU+IDx0aGVhZDwlIGlmICh0aGVhZEF0dHIpIHsgJT4gPCUtIHRoZWFkQXR0ciAlPlwiPCUgfSAlPj4gPCUtIGNvbHVtbnNIZWFkZXIgJT4gPC90aGVhZD4gPCUgfSAlPiA8dGJvZHk+PC90Ym9keT4gPCUgaWYgKGNvbHVtbnNGb290ZXIgIT0gXFwnXFwnKSB7ICU+IDx0Zm9vdD4gPCUtIGNvbHVtbnNGb290ZXIgJT4gPC90Zm9vdD4gPCUgfSAlPiA8L3RhYmxlPidcbnRwbFsndGFibGUvY29sdW1ucy9mb290ZXIuaHRtbCddID0gJzx0cj4gPCUgJC5lYWNoKGNvbHVtbnMsIGZ1bmN0aW9uKGtleSwgY29sdW1uKSB7ICU+IDx0ZDwlLSBjb2x1bW4uYXR0ciU+PjwlLSBjb2x1bW4uY29udGVudCAlPjwvdGQ+IDwlIH0pOyAlPiA8L3RyPidcbnRwbFsndGFibGUvY29sdW1ucy9oZWFkZXIuaHRtbCddID0gJzx0ciBjbGFzcz1cImZ3LW1lZGl1bSBiZy13aGl0ZVwiPiA8JSAkLmVhY2goY29sdW1ucywgZnVuY3Rpb24oa2V5LCBjb2x1bW4pIHsgJT4gPHRkPCUtIGNvbHVtbi5hdHRyJT4+PCUtIGNvbHVtbi5jb250ZW50ICU+PC90ZD4gPCUgfSk7ICU+IDwvdHI+J1xudHBsWyd0YWJsZS9jb2x1bW5zL21lbnUvYnV0dG9uLmh0bWwnXSA9ICc8bGk+PGJ1dHRvbiA8JS0gYXR0ciU+PjwlLSB0ZXh0ICU+PC9idXR0b24+PC9saT4nXG50cGxbJ3RhYmxlL2NvbHVtbnMvbWVudS9kaXZpZGVyLmh0bWwnXSA9ICc8bGk+PGhyIGNsYXNzPVwiZHJvcGRvd24tZGl2aWRlclwiPjwvbGk+J1xudHBsWyd0YWJsZS9jb2x1bW5zL21lbnUvaGVhZGVyLmh0bWwnXSA9ICc8bGk+PGg2IGNsYXNzPVwiZHJvcGRvd24taGVhZGVyXCI+PCUtIHRleHQgJT48L2g2PjwvbGk+J1xudHBsWyd0YWJsZS9jb2x1bW5zL21lbnUvbGluay5odG1sJ10gPSAnPGxpPjxhIDwlLSBhdHRyJT4+PCUtIHRleHQgJT48L2E+PC9saT4nXG50cGxbJ3RhYmxlL2NvbHVtbnMvdGQuaHRtbCddID0gJzx0ZDwlLSBhdHRyJT4+IDxzcGFuIGNsYXNzPVwiY29yZXVpLXRhYmxlX19jb2x1bW4tbGFiZWxcIj48JS0gbGFiZWwgJT48L3NwYW4+IDwlIGlmIChkZXNjcmlwdGlvbikgeyAlPiA8c21hbGwgY2xhc3M9XCJjb3JldWktdGFibGVfX2NvbHVtbi1kZXNjcmlwdGlvbiBiaSBiaS1xdWVzdGlvbi1jaXJjbGUgdGV4dC1ib2R5LXNlY29uZGFyeVwiIHRpdGxlPVwiPCU9IGRlc2NyaXB0aW9uICU+XCIgZGF0YS1icy10b2dnbGU9XCJ0b29sdGlwXCIgZGF0YS1icy1wbGFjZW1lbnQ9XCJib3R0b21cIj48L3NtYWxsPiA8JSB9ICU+IDwlIGlmIChzb3J0YWJsZSA9PT0gXFwnYXNjXFwnKSB7ICU+IDxpIGNsYXNzPVwiY29yZXVpLXRhYmxlX19jb2x1bW4tc29ydCBiaSBiaS1zb3J0LWRvd24tYWx0XCI+PC9pPiA8JSB9IGVsc2UgaWYgKHNvcnRhYmxlID09PSBcXCdkZXNjXFwnKSB7ICU+IDxpIGNsYXNzPVwiY29yZXVpLXRhYmxlX19jb2x1bW4tc29ydCBiaSBiaS1zb3J0LWRvd25cIj48L2k+IDwlIH0gJT4gPCUgaWYgKGlzc2V0TWVudSkgeyAlPiA8ZGl2IGNsYXNzPVwiZHJvcGRvd24gZC1pbmxpbmUgZnctbm9ybWFsIGNvcmV1aS10YWJsZV9fY29sdW1uLW1lbnVcIj4gPHNwYW4gY2xhc3M9XCJkcm9wZG93bi10b2dnbGUgPCU9IG1lbnVTaG93QWx3YXlzICU+XCIgZGF0YS1icy10b2dnbGU9XCJkcm9wZG93blwiPiA8aSBjbGFzcz1cImJpIGJpLXRocmVlLWRvdHMtdmVydGljYWxcIj48L2k+IDwvc3Bhbj4gPHVsIGNsYXNzPVwiZHJvcGRvd24tbWVudSBkcm9wZG93bi1tZW51LTwlPSBtZW51UG9zaXRpb24gJT5cIj48L3VsPiA8L2Rpdj4gPCUgfSAlPiA8L3RkPidcbnRwbFsndGFibGUvY29sdW1ucy90ci5odG1sJ10gPSAnPHRyIGNsYXNzPVwiZnctbWVkaXVtIGJnLXdoaXRlXCI+PC90cj4nXG50cGxbJ3RhYmxlL2NvbnRyb2wuaHRtbCddID0gJzxkaXYgaWQ9XCJjb3JldWktdGFibGUtY29udHJvbC08JT0gaWQgJT5cIiBjbGFzcz1cImNvcmV1aS10YWJsZV9fY29udHJvbFwiPjwvZGl2PidcbnRwbFsndGFibGUvY29udHJvbHMvZm9vdGVyLW91dC5odG1sJ10gPSAnIDxkaXYgY2xhc3M9XCJjb3JldWktdGFibGVfX2Zvb3RlciBkLWZsZXgganVzdGlmeS1jb250ZW50LWJldHdlZW5cIj4gPCUgaWYgKGNvbnRyb2xzTGVmdC5sZW5ndGgpIHsgJT4gPGRpdiBjbGFzcz1cImNvcmV1aS10YWJsZV9fY29udHJvbHMgY29yZXVpLXRhYmxlX19jb250cm9sc19sZWZ0IGQtZmxleCBqdXN0aWZ5LWNvbnRlbnQtc3RhcnQgZ2FwLTIgZmxleC13cmFwIGZsZXgtZmlsbCBtYi0xIG10LTIgYWxpZ24taXRlbXMtY2VudGVyXCI+PC9kaXY+IDwlIH0gJT4gPCUgaWYgKGNvbnRyb2xzQ2VudGVyLmxlbmd0aCkgeyAlPiA8ZGl2IGNsYXNzPVwiY29yZXVpLXRhYmxlX19jb250cm9scyBjb3JldWktdGFibGVfX2NvbnRyb2xzX2NlbnRlciBkLWZsZXgganVzdGlmeS1jb250ZW50LWNlbnRlciBnYXAtMiBmbGV4LXdyYXAgZmxleC1maWxsIG1iLTEgbXQtMiBhbGlnbi1pdGVtcy1jZW50ZXJcIj48L2Rpdj4gPCUgfSAlPiA8JSBpZiAoY29udHJvbHNSaWdodC5sZW5ndGgpIHsgJT4gPGRpdiBjbGFzcz1cImNvcmV1aS10YWJsZV9fY29udHJvbHMgY29yZXVpLXRhYmxlX19jb250cm9sc19yaWdodCBkLWZsZXgganVzdGlmeS1jb250ZW50LWVuZCBnYXAtMiBmbGV4LXdyYXAgZmxleC1maWxsIG1iLTEgbXQtMiBhbGlnbi1pdGVtcy1jZW50ZXJcIj48L2Rpdj4gPCUgfSAlPiA8L2Rpdj4nXG50cGxbJ3RhYmxlL2NvbnRyb2xzL2Zvb3Rlci5odG1sJ10gPSAnIDxkaXYgY2xhc3M9XCJjb3JldWktdGFibGVfX2Zvb3RlciBwcy0xIHBlLTEgZC1mbGV4IGp1c3RpZnktY29udGVudC1iZXR3ZWVuIGJvcmRlci10b3AgYm9yZGVyLXNlY29uZGFyeS1zdWJ0bGVcIj4gPCUgaWYgKGNvbnRyb2xzTGVmdC5sZW5ndGgpIHsgJT4gPGRpdiBjbGFzcz1cImNvcmV1aS10YWJsZV9fY29udHJvbHMgY29yZXVpLXRhYmxlX19jb250cm9sc19sZWZ0IGQtZmxleCBqdXN0aWZ5LWNvbnRlbnQtc3RhcnQgZ2FwLTIgZmxleC13cmFwIGZsZXgtZmlsbCBtYi0xIG10LTEgYWxpZ24taXRlbXMtY2VudGVyXCI+PC9kaXY+IDwlIH0gJT4gPCUgaWYgKGNvbnRyb2xzQ2VudGVyLmxlbmd0aCkgeyAlPiA8ZGl2IGNsYXNzPVwiY29yZXVpLXRhYmxlX19jb250cm9scyBjb3JldWktdGFibGVfX2NvbnRyb2xzX2NlbnRlciBkLWZsZXgganVzdGlmeS1jb250ZW50LWNlbnRlciBnYXAtMiBmbGV4LXdyYXAgZmxleC1maWxsIG1iLTEgbXQtMSBhbGlnbi1pdGVtcy1jZW50ZXJcIj48L2Rpdj4gPCUgfSAlPiA8JSBpZiAoY29udHJvbHNSaWdodC5sZW5ndGgpIHsgJT4gPGRpdiBjbGFzcz1cImNvcmV1aS10YWJsZV9fY29udHJvbHMgY29yZXVpLXRhYmxlX19jb250cm9sc19yaWdodCBkLWZsZXgganVzdGlmeS1jb250ZW50LWVuZCBnYXAtMiBmbGV4LXdyYXAgZmxleC1maWxsIG1iLTEgbXQtMSBhbGlnbi1pdGVtcy1jZW50ZXJcIj48L2Rpdj4gPCUgfSAlPiA8L2Rpdj4nXG50cGxbJ3RhYmxlL2NvbnRyb2xzL2hlYWRlci1vdXQuaHRtbCddID0gJyA8ZGl2IGNsYXNzPVwiY29yZXVpLXRhYmxlX19oZWFkZXIgZC1mbGV4IGp1c3RpZnktY29udGVudC1iZXR3ZWVuXCI+IDwlIGlmIChjb250cm9sc0xlZnQubGVuZ3RoKSB7ICU+IDxkaXYgY2xhc3M9XCJjb3JldWktdGFibGVfX2NvbnRyb2xzIGNvcmV1aS10YWJsZV9fY29udHJvbHNfbGVmdCBkLWZsZXgganVzdGlmeS1jb250ZW50LXN0YXJ0IGdhcC0yIGZsZXgtd3JhcCBmbGV4LWZpbGwgbWItMiBtdC0xIGFsaWduLWl0ZW1zLWNlbnRlclwiPjwvZGl2PiA8JSB9ICU+IDwlIGlmIChjb250cm9sc0NlbnRlci5sZW5ndGgpIHsgJT4gPGRpdiBjbGFzcz1cImNvcmV1aS10YWJsZV9fY29udHJvbHMgY29yZXVpLXRhYmxlX19jb250cm9sc19jZW50ZXIgZC1mbGV4IGp1c3RpZnktY29udGVudC1jZW50ZXIgZ2FwLTIgZmxleC13cmFwIGZsZXgtZmlsbCBtYi0yIG10LTEgYWxpZ24taXRlbXMtY2VudGVyXCI+PC9kaXY+IDwlIH0gJT4gPCUgaWYgKGNvbnRyb2xzUmlnaHQubGVuZ3RoKSB7ICU+IDxkaXYgY2xhc3M9XCJjb3JldWktdGFibGVfX2NvbnRyb2xzIGNvcmV1aS10YWJsZV9fY29udHJvbHNfcmlnaHQgZC1mbGV4IGp1c3RpZnktY29udGVudC1lbmQgZ2FwLTIgZmxleC13cmFwIGZsZXgtZmlsbCBtYi0yIG10LTEgYWxpZ24taXRlbXMtY2VudGVyXCI+PC9kaXY+IDwlIH0gJT4gPC9kaXY+J1xudHBsWyd0YWJsZS9jb250cm9scy9oZWFkZXIuaHRtbCddID0gJyA8ZGl2IGNsYXNzPVwiY29yZXVpLXRhYmxlX19oZWFkZXIgcHMtMSBwZS0xIGQtZmxleCBqdXN0aWZ5LWNvbnRlbnQtYmV0d2VlbiBib3JkZXItYm90dG9tIGJvcmRlci1zZWNvbmRhcnktc3VidGxlXCI+IDwlIGlmIChjb250cm9sc0xlZnQubGVuZ3RoKSB7ICU+IDxkaXYgY2xhc3M9XCJjb3JldWktdGFibGVfX2NvbnRyb2xzIGNvcmV1aS10YWJsZV9fY29udHJvbHNfbGVmdCBkLWZsZXgganVzdGlmeS1jb250ZW50LXN0YXJ0IGdhcC0yIGZsZXgtd3JhcCBmbGV4LWZpbGwgbXktMSBhbGlnbi1pdGVtcy1jZW50ZXJcIj48L2Rpdj4gPCUgfSAlPiA8JSBpZiAoY29udHJvbHNDZW50ZXIubGVuZ3RoKSB7ICU+IDxkaXYgY2xhc3M9XCJjb3JldWktdGFibGVfX2NvbnRyb2xzIGNvcmV1aS10YWJsZV9fY29udHJvbHNfY2VudGVyIGQtZmxleCBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyIGdhcC0yIGZsZXgtd3JhcCBmbGV4LWZpbGwgbXktMSBhbGlnbi1pdGVtcy1jZW50ZXJcIj48L2Rpdj4gPCUgfSAlPiA8JSBpZiAoY29udHJvbHNSaWdodC5sZW5ndGgpIHsgJT4gPGRpdiBjbGFzcz1cImNvcmV1aS10YWJsZV9fY29udHJvbHMgY29yZXVpLXRhYmxlX19jb250cm9sc19yaWdodCBkLWZsZXgganVzdGlmeS1jb250ZW50LWVuZCBnYXAtMiBmbGV4LXdyYXAgZmxleC1maWxsIG15LTEgYWxpZ24taXRlbXMtY2VudGVyXCI+PC9kaXY+IDwlIH0gJT4gPC9kaXY+J1xudHBsWyd0YWJsZS9sb2FkZXIuaHRtbCddID0gJzxkaXYgY2xhc3M9XCJjb3JldWktdGFibGUtbG9jayBwb3NpdGlvbi1hYnNvbHV0ZSB3LTEwMCB0b3AtMCBib3R0b20tMFwiPiA8ZGl2IGNsYXNzPVwiY29yZXVpLXRhYmxlLWJsb2NrIGJnLXNlY29uZGFyeS1zdWJ0bGUgcG9zaXRpb24tYWJzb2x1dGUgb3BhY2l0eS01MCB3LTEwMCB0b3AtMCBib3R0b20tMFwiPjwvZGl2PiA8ZGl2IGNsYXNzPVwiY29yZXVpLXRhYmxlLW1lc3NhZ2UgcG9zaXRpb24tcmVsYXRpdmUgZC1mbGV4IGFsaWduLWNvbnRlbnQtY2VudGVyIGp1c3RpZnktY29udGVudC1zdGFydCBnYXAtMiBtdC0zIHB5LTEgcHgtMiBtLWF1dG8gYm9yZGVyIGJvcmRlci1zZWNvbmRhcnktc3VidGxlIHJvdW5kZWQtMyBiZy1ib2R5LXNlY29uZGFyeVwiPiA8ZGl2IGNsYXNzPVwic3Bpbm5lci1ib3JkZXIgdGV4dC1zZWNvbmRhcnkgYWxpZ24tc2VsZi1jZW50ZXJcIj48L2Rpdj4gPHNwYW4gY2xhc3M9XCJsaC1sZ1wiPjwlPSBsYW5nLmxvYWRpbmcgJT48L3NwYW4+IDwvZGl2PiA8L2Rpdj4nXG50cGxbJ3RhYmxlL3JlY29yZC5odG1sJ10gPSAnPHRyPCUtIGF0dHIgJT4gZGF0YS1yZWNvcmQtaW5kZXg9XCI8JT0gaW5kZXggJT5cIj4gPCUgZmllbGRzLm1hcChmdW5jdGlvbihmaWVsZCkgeyAlPiA8dGQ8JS0gZmllbGQuYXR0ciAlPj48L3RkPiA8JSB9KTsgJT4gPC90cj4nXG50cGxbJ3RhYmxlL3JlY29yZC9lbXB0eS5odG1sJ10gPSAnPHRyIGNsYXNzPVwiY29yZXVpLXRhYmxlX19yZWNvcmQtZW1wdHlcIj4gPHRkIGNsYXNzPVwidGV4dC1jZW50ZXJcIiBjb2xzcGFuPVwiPCU9IGNvbHVtbnNDb3VudCAlPlwiPjwlPSBsYW5nLmVtcHR5UmVjb3JkcyAlPjwvdGQ+IDwvdHI+J1xudHBsWyd0YWJsZS9yZWNvcmQvZXhwYW5kLmh0bWwnXSA9ICc8dHIgY2xhc3M9XCJjb3JldWktdGFibGVfX3JlY29yZC1leHBhbmRlZFwiIHN0eWxlPVwiZGlzcGxheTogbm9uZVwiPiA8dGQgY29sc3Bhbj1cIjwlPSBjb2xzcGFuICU+XCI+PC90ZD4gPC90cj4nXG50cGxbJ3RhYmxlL3JlY29yZC9ncm91cC5odG1sJ10gPSAnPHRyPCUtIGF0dHIgJT4+IDx0ZCBjb2xzcGFuPVwiPCU9IGNvbHNwYW4gJT5cIiBjbGFzcz1cImJvcmRlci1lbmRcIj48L3RkPiA8L3RyPic7XG5leHBvcnQgZGVmYXVsdCB0cGw7IiwiKGZ1bmN0aW9uKGYpe2lmKHR5cGVvZiBleHBvcnRzPT09XCJvYmplY3RcIiYmdHlwZW9mIG1vZHVsZSE9PVwidW5kZWZpbmVkXCIpe21vZHVsZS5leHBvcnRzPWYoKX1lbHNlIGlmKHR5cGVvZiBkZWZpbmU9PT1cImZ1bmN0aW9uXCImJmRlZmluZS5hbWQpe2RlZmluZShbXSxmKX1lbHNle3ZhciBnO2lmKHR5cGVvZiB3aW5kb3chPT1cInVuZGVmaW5lZFwiKXtnPXdpbmRvd31lbHNlIGlmKHR5cGVvZiBnbG9iYWwhPT1cInVuZGVmaW5lZFwiKXtnPWdsb2JhbH1lbHNlIGlmKHR5cGVvZiBzZWxmIT09XCJ1bmRlZmluZWRcIil7Zz1zZWxmfWVsc2V7Zz10aGlzfWcuZWpzPWYoKX19KShmdW5jdGlvbigpe3ZhciBkZWZpbmUsbW9kdWxlLGV4cG9ydHM7cmV0dXJuIGZ1bmN0aW9uKCl7ZnVuY3Rpb24gcihlLG4sdCl7ZnVuY3Rpb24gbyhpLGYpe2lmKCFuW2ldKXtpZighZVtpXSl7dmFyIGM9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZTtpZighZiYmYylyZXR1cm4gYyhpLCEwKTtpZih1KXJldHVybiB1KGksITApO3ZhciBhPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIraStcIidcIik7dGhyb3cgYS5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGF9dmFyIHA9bltpXT17ZXhwb3J0czp7fX07ZVtpXVswXS5jYWxsKHAuZXhwb3J0cyxmdW5jdGlvbihyKXt2YXIgbj1lW2ldWzFdW3JdO3JldHVybiBvKG58fHIpfSxwLHAuZXhwb3J0cyxyLGUsbix0KX1yZXR1cm4gbltpXS5leHBvcnRzfWZvcih2YXIgdT1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlLGk9MDtpPHQubGVuZ3RoO2krKylvKHRbaV0pO3JldHVybiBvfXJldHVybiByfSgpKHsxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcInVzZSBzdHJpY3RcIjt2YXIgZnM9cmVxdWlyZShcImZzXCIpO3ZhciBwYXRoPXJlcXVpcmUoXCJwYXRoXCIpO3ZhciB1dGlscz1yZXF1aXJlKFwiLi91dGlsc1wiKTt2YXIgc2NvcGVPcHRpb25XYXJuZWQ9ZmFsc2U7dmFyIF9WRVJTSU9OX1NUUklORz1yZXF1aXJlKFwiLi4vcGFja2FnZS5qc29uXCIpLnZlcnNpb247dmFyIF9ERUZBVUxUX09QRU5fREVMSU1JVEVSPVwiPFwiO3ZhciBfREVGQVVMVF9DTE9TRV9ERUxJTUlURVI9XCI+XCI7dmFyIF9ERUZBVUxUX0RFTElNSVRFUj1cIiVcIjt2YXIgX0RFRkFVTFRfTE9DQUxTX05BTUU9XCJsb2NhbHNcIjt2YXIgX05BTUU9XCJlanNcIjt2YXIgX1JFR0VYX1NUUklORz1cIig8JSV8JSU+fDwlPXw8JS18PCVffDwlI3w8JXwlPnwtJT58XyU+KVwiO3ZhciBfT1BUU19QQVNTQUJMRV9XSVRIX0RBVEE9W1wiZGVsaW1pdGVyXCIsXCJzY29wZVwiLFwiY29udGV4dFwiLFwiZGVidWdcIixcImNvbXBpbGVEZWJ1Z1wiLFwiY2xpZW50XCIsXCJfd2l0aFwiLFwicm1XaGl0ZXNwYWNlXCIsXCJzdHJpY3RcIixcImZpbGVuYW1lXCIsXCJhc3luY1wiXTt2YXIgX09QVFNfUEFTU0FCTEVfV0lUSF9EQVRBX0VYUFJFU1M9X09QVFNfUEFTU0FCTEVfV0lUSF9EQVRBLmNvbmNhdChcImNhY2hlXCIpO3ZhciBfQk9NPS9eXFx1RkVGRi87dmFyIF9KU19JREVOVElGSUVSPS9eW2EtekEtWl8kXVswLTlhLXpBLVpfJF0qJC87ZXhwb3J0cy5jYWNoZT11dGlscy5jYWNoZTtleHBvcnRzLmZpbGVMb2FkZXI9ZnMucmVhZEZpbGVTeW5jO2V4cG9ydHMubG9jYWxzTmFtZT1fREVGQVVMVF9MT0NBTFNfTkFNRTtleHBvcnRzLnByb21pc2VJbXBsPW5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzO1wiKSgpLlByb21pc2U7ZXhwb3J0cy5yZXNvbHZlSW5jbHVkZT1mdW5jdGlvbihuYW1lLGZpbGVuYW1lLGlzRGlyKXt2YXIgZGlybmFtZT1wYXRoLmRpcm5hbWU7dmFyIGV4dG5hbWU9cGF0aC5leHRuYW1lO3ZhciByZXNvbHZlPXBhdGgucmVzb2x2ZTt2YXIgaW5jbHVkZVBhdGg9cmVzb2x2ZShpc0Rpcj9maWxlbmFtZTpkaXJuYW1lKGZpbGVuYW1lKSxuYW1lKTt2YXIgZXh0PWV4dG5hbWUobmFtZSk7aWYoIWV4dCl7aW5jbHVkZVBhdGgrPVwiLmVqc1wifXJldHVybiBpbmNsdWRlUGF0aH07ZnVuY3Rpb24gcmVzb2x2ZVBhdGhzKG5hbWUscGF0aHMpe3ZhciBmaWxlUGF0aDtpZihwYXRocy5zb21lKGZ1bmN0aW9uKHYpe2ZpbGVQYXRoPWV4cG9ydHMucmVzb2x2ZUluY2x1ZGUobmFtZSx2LHRydWUpO3JldHVybiBmcy5leGlzdHNTeW5jKGZpbGVQYXRoKX0pKXtyZXR1cm4gZmlsZVBhdGh9fWZ1bmN0aW9uIGdldEluY2x1ZGVQYXRoKHBhdGgsb3B0aW9ucyl7dmFyIGluY2x1ZGVQYXRoO3ZhciBmaWxlUGF0aDt2YXIgdmlld3M9b3B0aW9ucy52aWV3czt2YXIgbWF0Y2g9L15bQS1aYS16XSs6XFxcXHxeXFwvLy5leGVjKHBhdGgpO2lmKG1hdGNoJiZtYXRjaC5sZW5ndGgpe3BhdGg9cGF0aC5yZXBsYWNlKC9eXFwvKi8sXCJcIik7aWYoQXJyYXkuaXNBcnJheShvcHRpb25zLnJvb3QpKXtpbmNsdWRlUGF0aD1yZXNvbHZlUGF0aHMocGF0aCxvcHRpb25zLnJvb3QpfWVsc2V7aW5jbHVkZVBhdGg9ZXhwb3J0cy5yZXNvbHZlSW5jbHVkZShwYXRoLG9wdGlvbnMucm9vdHx8XCIvXCIsdHJ1ZSl9fWVsc2V7aWYob3B0aW9ucy5maWxlbmFtZSl7ZmlsZVBhdGg9ZXhwb3J0cy5yZXNvbHZlSW5jbHVkZShwYXRoLG9wdGlvbnMuZmlsZW5hbWUpO2lmKGZzLmV4aXN0c1N5bmMoZmlsZVBhdGgpKXtpbmNsdWRlUGF0aD1maWxlUGF0aH19aWYoIWluY2x1ZGVQYXRoJiZBcnJheS5pc0FycmF5KHZpZXdzKSl7aW5jbHVkZVBhdGg9cmVzb2x2ZVBhdGhzKHBhdGgsdmlld3MpfWlmKCFpbmNsdWRlUGF0aCYmdHlwZW9mIG9wdGlvbnMuaW5jbHVkZXIhPT1cImZ1bmN0aW9uXCIpe3Rocm93IG5ldyBFcnJvcignQ291bGQgbm90IGZpbmQgdGhlIGluY2x1ZGUgZmlsZSBcIicrb3B0aW9ucy5lc2NhcGVGdW5jdGlvbihwYXRoKSsnXCInKX19cmV0dXJuIGluY2x1ZGVQYXRofWZ1bmN0aW9uIGhhbmRsZUNhY2hlKG9wdGlvbnMsdGVtcGxhdGUpe3ZhciBmdW5jO3ZhciBmaWxlbmFtZT1vcHRpb25zLmZpbGVuYW1lO3ZhciBoYXNUZW1wbGF0ZT1hcmd1bWVudHMubGVuZ3RoPjE7aWYob3B0aW9ucy5jYWNoZSl7aWYoIWZpbGVuYW1lKXt0aHJvdyBuZXcgRXJyb3IoXCJjYWNoZSBvcHRpb24gcmVxdWlyZXMgYSBmaWxlbmFtZVwiKX1mdW5jPWV4cG9ydHMuY2FjaGUuZ2V0KGZpbGVuYW1lKTtpZihmdW5jKXtyZXR1cm4gZnVuY31pZighaGFzVGVtcGxhdGUpe3RlbXBsYXRlPWZpbGVMb2FkZXIoZmlsZW5hbWUpLnRvU3RyaW5nKCkucmVwbGFjZShfQk9NLFwiXCIpfX1lbHNlIGlmKCFoYXNUZW1wbGF0ZSl7aWYoIWZpbGVuYW1lKXt0aHJvdyBuZXcgRXJyb3IoXCJJbnRlcm5hbCBFSlMgZXJyb3I6IG5vIGZpbGUgbmFtZSBvciB0ZW1wbGF0ZSBcIitcInByb3ZpZGVkXCIpfXRlbXBsYXRlPWZpbGVMb2FkZXIoZmlsZW5hbWUpLnRvU3RyaW5nKCkucmVwbGFjZShfQk9NLFwiXCIpfWZ1bmM9ZXhwb3J0cy5jb21waWxlKHRlbXBsYXRlLG9wdGlvbnMpO2lmKG9wdGlvbnMuY2FjaGUpe2V4cG9ydHMuY2FjaGUuc2V0KGZpbGVuYW1lLGZ1bmMpfXJldHVybiBmdW5jfWZ1bmN0aW9uIHRyeUhhbmRsZUNhY2hlKG9wdGlvbnMsZGF0YSxjYil7dmFyIHJlc3VsdDtpZighY2Ipe2lmKHR5cGVvZiBleHBvcnRzLnByb21pc2VJbXBsPT1cImZ1bmN0aW9uXCIpe3JldHVybiBuZXcgZXhwb3J0cy5wcm9taXNlSW1wbChmdW5jdGlvbihyZXNvbHZlLHJlamVjdCl7dHJ5e3Jlc3VsdD1oYW5kbGVDYWNoZShvcHRpb25zKShkYXRhKTtyZXNvbHZlKHJlc3VsdCl9Y2F0Y2goZXJyKXtyZWplY3QoZXJyKX19KX1lbHNle3Rocm93IG5ldyBFcnJvcihcIlBsZWFzZSBwcm92aWRlIGEgY2FsbGJhY2sgZnVuY3Rpb25cIil9fWVsc2V7dHJ5e3Jlc3VsdD1oYW5kbGVDYWNoZShvcHRpb25zKShkYXRhKX1jYXRjaChlcnIpe3JldHVybiBjYihlcnIpfWNiKG51bGwscmVzdWx0KX19ZnVuY3Rpb24gZmlsZUxvYWRlcihmaWxlUGF0aCl7cmV0dXJuIGV4cG9ydHMuZmlsZUxvYWRlcihmaWxlUGF0aCl9ZnVuY3Rpb24gaW5jbHVkZUZpbGUocGF0aCxvcHRpb25zKXt2YXIgb3B0cz11dGlscy5zaGFsbG93Q29weSh1dGlscy5jcmVhdGVOdWxsUHJvdG9PYmpXaGVyZVBvc3NpYmxlKCksb3B0aW9ucyk7b3B0cy5maWxlbmFtZT1nZXRJbmNsdWRlUGF0aChwYXRoLG9wdHMpO2lmKHR5cGVvZiBvcHRpb25zLmluY2x1ZGVyPT09XCJmdW5jdGlvblwiKXt2YXIgaW5jbHVkZXJSZXN1bHQ9b3B0aW9ucy5pbmNsdWRlcihwYXRoLG9wdHMuZmlsZW5hbWUpO2lmKGluY2x1ZGVyUmVzdWx0KXtpZihpbmNsdWRlclJlc3VsdC5maWxlbmFtZSl7b3B0cy5maWxlbmFtZT1pbmNsdWRlclJlc3VsdC5maWxlbmFtZX1pZihpbmNsdWRlclJlc3VsdC50ZW1wbGF0ZSl7cmV0dXJuIGhhbmRsZUNhY2hlKG9wdHMsaW5jbHVkZXJSZXN1bHQudGVtcGxhdGUpfX19cmV0dXJuIGhhbmRsZUNhY2hlKG9wdHMpfWZ1bmN0aW9uIHJldGhyb3coZXJyLHN0cixmbG5tLGxpbmVubyxlc2Mpe3ZhciBsaW5lcz1zdHIuc3BsaXQoXCJcXG5cIik7dmFyIHN0YXJ0PU1hdGgubWF4KGxpbmVuby0zLDApO3ZhciBlbmQ9TWF0aC5taW4obGluZXMubGVuZ3RoLGxpbmVubyszKTt2YXIgZmlsZW5hbWU9ZXNjKGZsbm0pO3ZhciBjb250ZXh0PWxpbmVzLnNsaWNlKHN0YXJ0LGVuZCkubWFwKGZ1bmN0aW9uKGxpbmUsaSl7dmFyIGN1cnI9aStzdGFydCsxO3JldHVybihjdXJyPT1saW5lbm8/XCIgPj4gXCI6XCIgICAgXCIpK2N1cnIrXCJ8IFwiK2xpbmV9KS5qb2luKFwiXFxuXCIpO2Vyci5wYXRoPWZpbGVuYW1lO2Vyci5tZXNzYWdlPShmaWxlbmFtZXx8XCJlanNcIikrXCI6XCIrbGluZW5vK1wiXFxuXCIrY29udGV4dCtcIlxcblxcblwiK2Vyci5tZXNzYWdlO3Rocm93IGVycn1mdW5jdGlvbiBzdHJpcFNlbWkoc3RyKXtyZXR1cm4gc3RyLnJlcGxhY2UoLzsoXFxzKiQpLyxcIiQxXCIpfWV4cG9ydHMuY29tcGlsZT1mdW5jdGlvbiBjb21waWxlKHRlbXBsYXRlLG9wdHMpe3ZhciB0ZW1wbDtpZihvcHRzJiZvcHRzLnNjb3BlKXtpZighc2NvcGVPcHRpb25XYXJuZWQpe2NvbnNvbGUud2FybihcImBzY29wZWAgb3B0aW9uIGlzIGRlcHJlY2F0ZWQgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiBFSlMgM1wiKTtzY29wZU9wdGlvbldhcm5lZD10cnVlfWlmKCFvcHRzLmNvbnRleHQpe29wdHMuY29udGV4dD1vcHRzLnNjb3BlfWRlbGV0ZSBvcHRzLnNjb3BlfXRlbXBsPW5ldyBUZW1wbGF0ZSh0ZW1wbGF0ZSxvcHRzKTtyZXR1cm4gdGVtcGwuY29tcGlsZSgpfTtleHBvcnRzLnJlbmRlcj1mdW5jdGlvbih0ZW1wbGF0ZSxkLG8pe3ZhciBkYXRhPWR8fHV0aWxzLmNyZWF0ZU51bGxQcm90b09ialdoZXJlUG9zc2libGUoKTt2YXIgb3B0cz1vfHx1dGlscy5jcmVhdGVOdWxsUHJvdG9PYmpXaGVyZVBvc3NpYmxlKCk7aWYoYXJndW1lbnRzLmxlbmd0aD09Mil7dXRpbHMuc2hhbGxvd0NvcHlGcm9tTGlzdChvcHRzLGRhdGEsX09QVFNfUEFTU0FCTEVfV0lUSF9EQVRBKX1yZXR1cm4gaGFuZGxlQ2FjaGUob3B0cyx0ZW1wbGF0ZSkoZGF0YSl9O2V4cG9ydHMucmVuZGVyRmlsZT1mdW5jdGlvbigpe3ZhciBhcmdzPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7dmFyIGZpbGVuYW1lPWFyZ3Muc2hpZnQoKTt2YXIgY2I7dmFyIG9wdHM9e2ZpbGVuYW1lOmZpbGVuYW1lfTt2YXIgZGF0YTt2YXIgdmlld09wdHM7aWYodHlwZW9mIGFyZ3VtZW50c1thcmd1bWVudHMubGVuZ3RoLTFdPT1cImZ1bmN0aW9uXCIpe2NiPWFyZ3MucG9wKCl9aWYoYXJncy5sZW5ndGgpe2RhdGE9YXJncy5zaGlmdCgpO2lmKGFyZ3MubGVuZ3RoKXt1dGlscy5zaGFsbG93Q29weShvcHRzLGFyZ3MucG9wKCkpfWVsc2V7aWYoZGF0YS5zZXR0aW5ncyl7aWYoZGF0YS5zZXR0aW5ncy52aWV3cyl7b3B0cy52aWV3cz1kYXRhLnNldHRpbmdzLnZpZXdzfWlmKGRhdGEuc2V0dGluZ3NbXCJ2aWV3IGNhY2hlXCJdKXtvcHRzLmNhY2hlPXRydWV9dmlld09wdHM9ZGF0YS5zZXR0aW5nc1tcInZpZXcgb3B0aW9uc1wiXTtpZih2aWV3T3B0cyl7dXRpbHMuc2hhbGxvd0NvcHkob3B0cyx2aWV3T3B0cyl9fXV0aWxzLnNoYWxsb3dDb3B5RnJvbUxpc3Qob3B0cyxkYXRhLF9PUFRTX1BBU1NBQkxFX1dJVEhfREFUQV9FWFBSRVNTKX1vcHRzLmZpbGVuYW1lPWZpbGVuYW1lfWVsc2V7ZGF0YT11dGlscy5jcmVhdGVOdWxsUHJvdG9PYmpXaGVyZVBvc3NpYmxlKCl9cmV0dXJuIHRyeUhhbmRsZUNhY2hlKG9wdHMsZGF0YSxjYil9O2V4cG9ydHMuVGVtcGxhdGU9VGVtcGxhdGU7ZXhwb3J0cy5jbGVhckNhY2hlPWZ1bmN0aW9uKCl7ZXhwb3J0cy5jYWNoZS5yZXNldCgpfTtmdW5jdGlvbiBUZW1wbGF0ZSh0ZXh0LG9wdHNQYXJhbSl7dmFyIG9wdHM9dXRpbHMuaGFzT3duT25seU9iamVjdChvcHRzUGFyYW0pO3ZhciBvcHRpb25zPXV0aWxzLmNyZWF0ZU51bGxQcm90b09ialdoZXJlUG9zc2libGUoKTt0aGlzLnRlbXBsYXRlVGV4dD10ZXh0O3RoaXMubW9kZT1udWxsO3RoaXMudHJ1bmNhdGU9ZmFsc2U7dGhpcy5jdXJyZW50TGluZT0xO3RoaXMuc291cmNlPVwiXCI7b3B0aW9ucy5jbGllbnQ9b3B0cy5jbGllbnR8fGZhbHNlO29wdGlvbnMuZXNjYXBlRnVuY3Rpb249b3B0cy5lc2NhcGV8fG9wdHMuZXNjYXBlRnVuY3Rpb258fHV0aWxzLmVzY2FwZVhNTDtvcHRpb25zLmNvbXBpbGVEZWJ1Zz1vcHRzLmNvbXBpbGVEZWJ1ZyE9PWZhbHNlO29wdGlvbnMuZGVidWc9ISFvcHRzLmRlYnVnO29wdGlvbnMuZmlsZW5hbWU9b3B0cy5maWxlbmFtZTtvcHRpb25zLm9wZW5EZWxpbWl0ZXI9b3B0cy5vcGVuRGVsaW1pdGVyfHxleHBvcnRzLm9wZW5EZWxpbWl0ZXJ8fF9ERUZBVUxUX09QRU5fREVMSU1JVEVSO29wdGlvbnMuY2xvc2VEZWxpbWl0ZXI9b3B0cy5jbG9zZURlbGltaXRlcnx8ZXhwb3J0cy5jbG9zZURlbGltaXRlcnx8X0RFRkFVTFRfQ0xPU0VfREVMSU1JVEVSO29wdGlvbnMuZGVsaW1pdGVyPW9wdHMuZGVsaW1pdGVyfHxleHBvcnRzLmRlbGltaXRlcnx8X0RFRkFVTFRfREVMSU1JVEVSO29wdGlvbnMuc3RyaWN0PW9wdHMuc3RyaWN0fHxmYWxzZTtvcHRpb25zLmNvbnRleHQ9b3B0cy5jb250ZXh0O29wdGlvbnMuY2FjaGU9b3B0cy5jYWNoZXx8ZmFsc2U7b3B0aW9ucy5ybVdoaXRlc3BhY2U9b3B0cy5ybVdoaXRlc3BhY2U7b3B0aW9ucy5yb290PW9wdHMucm9vdDtvcHRpb25zLmluY2x1ZGVyPW9wdHMuaW5jbHVkZXI7b3B0aW9ucy5vdXRwdXRGdW5jdGlvbk5hbWU9b3B0cy5vdXRwdXRGdW5jdGlvbk5hbWU7b3B0aW9ucy5sb2NhbHNOYW1lPW9wdHMubG9jYWxzTmFtZXx8ZXhwb3J0cy5sb2NhbHNOYW1lfHxfREVGQVVMVF9MT0NBTFNfTkFNRTtvcHRpb25zLnZpZXdzPW9wdHMudmlld3M7b3B0aW9ucy5hc3luYz1vcHRzLmFzeW5jO29wdGlvbnMuZGVzdHJ1Y3R1cmVkTG9jYWxzPW9wdHMuZGVzdHJ1Y3R1cmVkTG9jYWxzO29wdGlvbnMubGVnYWN5SW5jbHVkZT10eXBlb2Ygb3B0cy5sZWdhY3lJbmNsdWRlIT1cInVuZGVmaW5lZFwiPyEhb3B0cy5sZWdhY3lJbmNsdWRlOnRydWU7aWYob3B0aW9ucy5zdHJpY3Qpe29wdGlvbnMuX3dpdGg9ZmFsc2V9ZWxzZXtvcHRpb25zLl93aXRoPXR5cGVvZiBvcHRzLl93aXRoIT1cInVuZGVmaW5lZFwiP29wdHMuX3dpdGg6dHJ1ZX10aGlzLm9wdHM9b3B0aW9uczt0aGlzLnJlZ2V4PXRoaXMuY3JlYXRlUmVnZXgoKX1UZW1wbGF0ZS5tb2Rlcz17RVZBTDpcImV2YWxcIixFU0NBUEVEOlwiZXNjYXBlZFwiLFJBVzpcInJhd1wiLENPTU1FTlQ6XCJjb21tZW50XCIsTElURVJBTDpcImxpdGVyYWxcIn07VGVtcGxhdGUucHJvdG90eXBlPXtjcmVhdGVSZWdleDpmdW5jdGlvbigpe3ZhciBzdHI9X1JFR0VYX1NUUklORzt2YXIgZGVsaW09dXRpbHMuZXNjYXBlUmVnRXhwQ2hhcnModGhpcy5vcHRzLmRlbGltaXRlcik7dmFyIG9wZW49dXRpbHMuZXNjYXBlUmVnRXhwQ2hhcnModGhpcy5vcHRzLm9wZW5EZWxpbWl0ZXIpO3ZhciBjbG9zZT11dGlscy5lc2NhcGVSZWdFeHBDaGFycyh0aGlzLm9wdHMuY2xvc2VEZWxpbWl0ZXIpO3N0cj1zdHIucmVwbGFjZSgvJS9nLGRlbGltKS5yZXBsYWNlKC88L2csb3BlbikucmVwbGFjZSgvPi9nLGNsb3NlKTtyZXR1cm4gbmV3IFJlZ0V4cChzdHIpfSxjb21waWxlOmZ1bmN0aW9uKCl7dmFyIHNyYzt2YXIgZm47dmFyIG9wdHM9dGhpcy5vcHRzO3ZhciBwcmVwZW5kZWQ9XCJcIjt2YXIgYXBwZW5kZWQ9XCJcIjt2YXIgZXNjYXBlRm49b3B0cy5lc2NhcGVGdW5jdGlvbjt2YXIgY3Rvcjt2YXIgc2FuaXRpemVkRmlsZW5hbWU9b3B0cy5maWxlbmFtZT9KU09OLnN0cmluZ2lmeShvcHRzLmZpbGVuYW1lKTpcInVuZGVmaW5lZFwiO2lmKCF0aGlzLnNvdXJjZSl7dGhpcy5nZW5lcmF0ZVNvdXJjZSgpO3ByZXBlbmRlZCs9JyAgdmFyIF9fb3V0cHV0ID0gXCJcIjtcXG4nK1wiICBmdW5jdGlvbiBfX2FwcGVuZChzKSB7IGlmIChzICE9PSB1bmRlZmluZWQgJiYgcyAhPT0gbnVsbCkgX19vdXRwdXQgKz0gcyB9XFxuXCI7aWYob3B0cy5vdXRwdXRGdW5jdGlvbk5hbWUpe2lmKCFfSlNfSURFTlRJRklFUi50ZXN0KG9wdHMub3V0cHV0RnVuY3Rpb25OYW1lKSl7dGhyb3cgbmV3IEVycm9yKFwib3V0cHV0RnVuY3Rpb25OYW1lIGlzIG5vdCBhIHZhbGlkIEpTIGlkZW50aWZpZXIuXCIpfXByZXBlbmRlZCs9XCIgIHZhciBcIitvcHRzLm91dHB1dEZ1bmN0aW9uTmFtZStcIiA9IF9fYXBwZW5kO1wiK1wiXFxuXCJ9aWYob3B0cy5sb2NhbHNOYW1lJiYhX0pTX0lERU5USUZJRVIudGVzdChvcHRzLmxvY2Fsc05hbWUpKXt0aHJvdyBuZXcgRXJyb3IoXCJsb2NhbHNOYW1lIGlzIG5vdCBhIHZhbGlkIEpTIGlkZW50aWZpZXIuXCIpfWlmKG9wdHMuZGVzdHJ1Y3R1cmVkTG9jYWxzJiZvcHRzLmRlc3RydWN0dXJlZExvY2Fscy5sZW5ndGgpe3ZhciBkZXN0cnVjdHVyaW5nPVwiICB2YXIgX19sb2NhbHMgPSAoXCIrb3B0cy5sb2NhbHNOYW1lK1wiIHx8IHt9KSxcXG5cIjtmb3IodmFyIGk9MDtpPG9wdHMuZGVzdHJ1Y3R1cmVkTG9jYWxzLmxlbmd0aDtpKyspe3ZhciBuYW1lPW9wdHMuZGVzdHJ1Y3R1cmVkTG9jYWxzW2ldO2lmKCFfSlNfSURFTlRJRklFUi50ZXN0KG5hbWUpKXt0aHJvdyBuZXcgRXJyb3IoXCJkZXN0cnVjdHVyZWRMb2NhbHNbXCIraStcIl0gaXMgbm90IGEgdmFsaWQgSlMgaWRlbnRpZmllci5cIil9aWYoaT4wKXtkZXN0cnVjdHVyaW5nKz1cIixcXG4gIFwifWRlc3RydWN0dXJpbmcrPW5hbWUrXCIgPSBfX2xvY2Fscy5cIituYW1lfXByZXBlbmRlZCs9ZGVzdHJ1Y3R1cmluZytcIjtcXG5cIn1pZihvcHRzLl93aXRoIT09ZmFsc2Upe3ByZXBlbmRlZCs9XCIgIHdpdGggKFwiK29wdHMubG9jYWxzTmFtZStcIiB8fCB7fSkge1wiK1wiXFxuXCI7YXBwZW5kZWQrPVwiICB9XCIrXCJcXG5cIn1hcHBlbmRlZCs9XCIgIHJldHVybiBfX291dHB1dDtcIitcIlxcblwiO3RoaXMuc291cmNlPXByZXBlbmRlZCt0aGlzLnNvdXJjZSthcHBlbmRlZH1pZihvcHRzLmNvbXBpbGVEZWJ1Zyl7c3JjPVwidmFyIF9fbGluZSA9IDFcIitcIlxcblwiK1wiICAsIF9fbGluZXMgPSBcIitKU09OLnN0cmluZ2lmeSh0aGlzLnRlbXBsYXRlVGV4dCkrXCJcXG5cIitcIiAgLCBfX2ZpbGVuYW1lID0gXCIrc2FuaXRpemVkRmlsZW5hbWUrXCI7XCIrXCJcXG5cIitcInRyeSB7XCIrXCJcXG5cIit0aGlzLnNvdXJjZStcIn0gY2F0Y2ggKGUpIHtcIitcIlxcblwiK1wiICByZXRocm93KGUsIF9fbGluZXMsIF9fZmlsZW5hbWUsIF9fbGluZSwgZXNjYXBlRm4pO1wiK1wiXFxuXCIrXCJ9XCIrXCJcXG5cIn1lbHNle3NyYz10aGlzLnNvdXJjZX1pZihvcHRzLmNsaWVudCl7c3JjPVwiZXNjYXBlRm4gPSBlc2NhcGVGbiB8fCBcIitlc2NhcGVGbi50b1N0cmluZygpK1wiO1wiK1wiXFxuXCIrc3JjO2lmKG9wdHMuY29tcGlsZURlYnVnKXtzcmM9XCJyZXRocm93ID0gcmV0aHJvdyB8fCBcIityZXRocm93LnRvU3RyaW5nKCkrXCI7XCIrXCJcXG5cIitzcmN9fWlmKG9wdHMuc3RyaWN0KXtzcmM9J1widXNlIHN0cmljdFwiO1xcbicrc3JjfWlmKG9wdHMuZGVidWcpe2NvbnNvbGUubG9nKHNyYyl9aWYob3B0cy5jb21waWxlRGVidWcmJm9wdHMuZmlsZW5hbWUpe3NyYz1zcmMrXCJcXG5cIitcIi8vIyBzb3VyY2VVUkw9XCIrc2FuaXRpemVkRmlsZW5hbWUrXCJcXG5cIn10cnl7aWYob3B0cy5hc3luYyl7dHJ5e2N0b3I9bmV3IEZ1bmN0aW9uKFwicmV0dXJuIChhc3luYyBmdW5jdGlvbigpe30pLmNvbnN0cnVjdG9yO1wiKSgpfWNhdGNoKGUpe2lmKGUgaW5zdGFuY2VvZiBTeW50YXhFcnJvcil7dGhyb3cgbmV3IEVycm9yKFwiVGhpcyBlbnZpcm9ubWVudCBkb2VzIG5vdCBzdXBwb3J0IGFzeW5jL2F3YWl0XCIpfWVsc2V7dGhyb3cgZX19fWVsc2V7Y3Rvcj1GdW5jdGlvbn1mbj1uZXcgY3RvcihvcHRzLmxvY2Fsc05hbWUrXCIsIGVzY2FwZUZuLCBpbmNsdWRlLCByZXRocm93XCIsc3JjKX1jYXRjaChlKXtpZihlIGluc3RhbmNlb2YgU3ludGF4RXJyb3Ipe2lmKG9wdHMuZmlsZW5hbWUpe2UubWVzc2FnZSs9XCIgaW4gXCIrb3B0cy5maWxlbmFtZX1lLm1lc3NhZ2UrPVwiIHdoaWxlIGNvbXBpbGluZyBlanNcXG5cXG5cIjtlLm1lc3NhZ2UrPVwiSWYgdGhlIGFib3ZlIGVycm9yIGlzIG5vdCBoZWxwZnVsLCB5b3UgbWF5IHdhbnQgdG8gdHJ5IEVKUy1MaW50OlxcblwiO2UubWVzc2FnZSs9XCJodHRwczovL2dpdGh1Yi5jb20vUnlhblppbS9FSlMtTGludFwiO2lmKCFvcHRzLmFzeW5jKXtlLm1lc3NhZ2UrPVwiXFxuXCI7ZS5tZXNzYWdlKz1cIk9yLCBpZiB5b3UgbWVhbnQgdG8gY3JlYXRlIGFuIGFzeW5jIGZ1bmN0aW9uLCBwYXNzIGBhc3luYzogdHJ1ZWAgYXMgYW4gb3B0aW9uLlwifX10aHJvdyBlfXZhciByZXR1cm5lZEZuPW9wdHMuY2xpZW50P2ZuOmZ1bmN0aW9uIGFub255bW91cyhkYXRhKXt2YXIgaW5jbHVkZT1mdW5jdGlvbihwYXRoLGluY2x1ZGVEYXRhKXt2YXIgZD11dGlscy5zaGFsbG93Q29weSh1dGlscy5jcmVhdGVOdWxsUHJvdG9PYmpXaGVyZVBvc3NpYmxlKCksZGF0YSk7aWYoaW5jbHVkZURhdGEpe2Q9dXRpbHMuc2hhbGxvd0NvcHkoZCxpbmNsdWRlRGF0YSl9cmV0dXJuIGluY2x1ZGVGaWxlKHBhdGgsb3B0cykoZCl9O3JldHVybiBmbi5hcHBseShvcHRzLmNvbnRleHQsW2RhdGF8fHV0aWxzLmNyZWF0ZU51bGxQcm90b09ialdoZXJlUG9zc2libGUoKSxlc2NhcGVGbixpbmNsdWRlLHJldGhyb3ddKX07aWYob3B0cy5maWxlbmFtZSYmdHlwZW9mIE9iamVjdC5kZWZpbmVQcm9wZXJ0eT09PVwiZnVuY3Rpb25cIil7dmFyIGZpbGVuYW1lPW9wdHMuZmlsZW5hbWU7dmFyIGJhc2VuYW1lPXBhdGguYmFzZW5hbWUoZmlsZW5hbWUscGF0aC5leHRuYW1lKGZpbGVuYW1lKSk7dHJ5e09iamVjdC5kZWZpbmVQcm9wZXJ0eShyZXR1cm5lZEZuLFwibmFtZVwiLHt2YWx1ZTpiYXNlbmFtZSx3cml0YWJsZTpmYWxzZSxlbnVtZXJhYmxlOmZhbHNlLGNvbmZpZ3VyYWJsZTp0cnVlfSl9Y2F0Y2goZSl7fX1yZXR1cm4gcmV0dXJuZWRGbn0sZ2VuZXJhdGVTb3VyY2U6ZnVuY3Rpb24oKXt2YXIgb3B0cz10aGlzLm9wdHM7aWYob3B0cy5ybVdoaXRlc3BhY2Upe3RoaXMudGVtcGxhdGVUZXh0PXRoaXMudGVtcGxhdGVUZXh0LnJlcGxhY2UoL1tcXHJcXG5dKy9nLFwiXFxuXCIpLnJlcGxhY2UoL15cXHMrfFxccyskL2dtLFwiXCIpfXRoaXMudGVtcGxhdGVUZXh0PXRoaXMudGVtcGxhdGVUZXh0LnJlcGxhY2UoL1sgXFx0XSo8JV8vZ20sXCI8JV9cIikucmVwbGFjZSgvXyU+WyBcXHRdKi9nbSxcIl8lPlwiKTt2YXIgc2VsZj10aGlzO3ZhciBtYXRjaGVzPXRoaXMucGFyc2VUZW1wbGF0ZVRleHQoKTt2YXIgZD10aGlzLm9wdHMuZGVsaW1pdGVyO3ZhciBvPXRoaXMub3B0cy5vcGVuRGVsaW1pdGVyO3ZhciBjPXRoaXMub3B0cy5jbG9zZURlbGltaXRlcjtpZihtYXRjaGVzJiZtYXRjaGVzLmxlbmd0aCl7bWF0Y2hlcy5mb3JFYWNoKGZ1bmN0aW9uKGxpbmUsaW5kZXgpe3ZhciBjbG9zaW5nO2lmKGxpbmUuaW5kZXhPZihvK2QpPT09MCYmbGluZS5pbmRleE9mKG8rZCtkKSE9PTApe2Nsb3Npbmc9bWF0Y2hlc1tpbmRleCsyXTtpZighKGNsb3Npbmc9PWQrY3x8Y2xvc2luZz09XCItXCIrZCtjfHxjbG9zaW5nPT1cIl9cIitkK2MpKXt0aHJvdyBuZXcgRXJyb3IoJ0NvdWxkIG5vdCBmaW5kIG1hdGNoaW5nIGNsb3NlIHRhZyBmb3IgXCInK2xpbmUrJ1wiLicpfX1zZWxmLnNjYW5MaW5lKGxpbmUpfSl9fSxwYXJzZVRlbXBsYXRlVGV4dDpmdW5jdGlvbigpe3ZhciBzdHI9dGhpcy50ZW1wbGF0ZVRleHQ7dmFyIHBhdD10aGlzLnJlZ2V4O3ZhciByZXN1bHQ9cGF0LmV4ZWMoc3RyKTt2YXIgYXJyPVtdO3ZhciBmaXJzdFBvczt3aGlsZShyZXN1bHQpe2ZpcnN0UG9zPXJlc3VsdC5pbmRleDtpZihmaXJzdFBvcyE9PTApe2Fyci5wdXNoKHN0ci5zdWJzdHJpbmcoMCxmaXJzdFBvcykpO3N0cj1zdHIuc2xpY2UoZmlyc3RQb3MpfWFyci5wdXNoKHJlc3VsdFswXSk7c3RyPXN0ci5zbGljZShyZXN1bHRbMF0ubGVuZ3RoKTtyZXN1bHQ9cGF0LmV4ZWMoc3RyKX1pZihzdHIpe2Fyci5wdXNoKHN0cil9cmV0dXJuIGFycn0sX2FkZE91dHB1dDpmdW5jdGlvbihsaW5lKXtpZih0aGlzLnRydW5jYXRlKXtsaW5lPWxpbmUucmVwbGFjZSgvXig/OlxcclxcbnxcXHJ8XFxuKS8sXCJcIik7dGhpcy50cnVuY2F0ZT1mYWxzZX1pZighbGluZSl7cmV0dXJuIGxpbmV9bGluZT1saW5lLnJlcGxhY2UoL1xcXFwvZyxcIlxcXFxcXFxcXCIpO2xpbmU9bGluZS5yZXBsYWNlKC9cXG4vZyxcIlxcXFxuXCIpO2xpbmU9bGluZS5yZXBsYWNlKC9cXHIvZyxcIlxcXFxyXCIpO2xpbmU9bGluZS5yZXBsYWNlKC9cIi9nLCdcXFxcXCInKTt0aGlzLnNvdXJjZSs9JyAgICA7IF9fYXBwZW5kKFwiJytsaW5lKydcIiknK1wiXFxuXCJ9LHNjYW5MaW5lOmZ1bmN0aW9uKGxpbmUpe3ZhciBzZWxmPXRoaXM7dmFyIGQ9dGhpcy5vcHRzLmRlbGltaXRlcjt2YXIgbz10aGlzLm9wdHMub3BlbkRlbGltaXRlcjt2YXIgYz10aGlzLm9wdHMuY2xvc2VEZWxpbWl0ZXI7dmFyIG5ld0xpbmVDb3VudD0wO25ld0xpbmVDb3VudD1saW5lLnNwbGl0KFwiXFxuXCIpLmxlbmd0aC0xO3N3aXRjaChsaW5lKXtjYXNlIG8rZDpjYXNlIG8rZCtcIl9cIjp0aGlzLm1vZGU9VGVtcGxhdGUubW9kZXMuRVZBTDticmVhaztjYXNlIG8rZCtcIj1cIjp0aGlzLm1vZGU9VGVtcGxhdGUubW9kZXMuRVNDQVBFRDticmVhaztjYXNlIG8rZCtcIi1cIjp0aGlzLm1vZGU9VGVtcGxhdGUubW9kZXMuUkFXO2JyZWFrO2Nhc2UgbytkK1wiI1wiOnRoaXMubW9kZT1UZW1wbGF0ZS5tb2Rlcy5DT01NRU5UO2JyZWFrO2Nhc2UgbytkK2Q6dGhpcy5tb2RlPVRlbXBsYXRlLm1vZGVzLkxJVEVSQUw7dGhpcy5zb3VyY2UrPScgICAgOyBfX2FwcGVuZChcIicrbGluZS5yZXBsYWNlKG8rZCtkLG8rZCkrJ1wiKScrXCJcXG5cIjticmVhaztjYXNlIGQrZCtjOnRoaXMubW9kZT1UZW1wbGF0ZS5tb2Rlcy5MSVRFUkFMO3RoaXMuc291cmNlKz0nICAgIDsgX19hcHBlbmQoXCInK2xpbmUucmVwbGFjZShkK2QrYyxkK2MpKydcIiknK1wiXFxuXCI7YnJlYWs7Y2FzZSBkK2M6Y2FzZVwiLVwiK2QrYzpjYXNlXCJfXCIrZCtjOmlmKHRoaXMubW9kZT09VGVtcGxhdGUubW9kZXMuTElURVJBTCl7dGhpcy5fYWRkT3V0cHV0KGxpbmUpfXRoaXMubW9kZT1udWxsO3RoaXMudHJ1bmNhdGU9bGluZS5pbmRleE9mKFwiLVwiKT09PTB8fGxpbmUuaW5kZXhPZihcIl9cIik9PT0wO2JyZWFrO2RlZmF1bHQ6aWYodGhpcy5tb2RlKXtzd2l0Y2godGhpcy5tb2RlKXtjYXNlIFRlbXBsYXRlLm1vZGVzLkVWQUw6Y2FzZSBUZW1wbGF0ZS5tb2Rlcy5FU0NBUEVEOmNhc2UgVGVtcGxhdGUubW9kZXMuUkFXOmlmKGxpbmUubGFzdEluZGV4T2YoXCIvL1wiKT5saW5lLmxhc3RJbmRleE9mKFwiXFxuXCIpKXtsaW5lKz1cIlxcblwifX1zd2l0Y2godGhpcy5tb2RlKXtjYXNlIFRlbXBsYXRlLm1vZGVzLkVWQUw6dGhpcy5zb3VyY2UrPVwiICAgIDsgXCIrbGluZStcIlxcblwiO2JyZWFrO2Nhc2UgVGVtcGxhdGUubW9kZXMuRVNDQVBFRDp0aGlzLnNvdXJjZSs9XCIgICAgOyBfX2FwcGVuZChlc2NhcGVGbihcIitzdHJpcFNlbWkobGluZSkrXCIpKVwiK1wiXFxuXCI7YnJlYWs7Y2FzZSBUZW1wbGF0ZS5tb2Rlcy5SQVc6dGhpcy5zb3VyY2UrPVwiICAgIDsgX19hcHBlbmQoXCIrc3RyaXBTZW1pKGxpbmUpK1wiKVwiK1wiXFxuXCI7YnJlYWs7Y2FzZSBUZW1wbGF0ZS5tb2Rlcy5DT01NRU5UOmJyZWFrO2Nhc2UgVGVtcGxhdGUubW9kZXMuTElURVJBTDp0aGlzLl9hZGRPdXRwdXQobGluZSk7YnJlYWt9fWVsc2V7dGhpcy5fYWRkT3V0cHV0KGxpbmUpfX1pZihzZWxmLm9wdHMuY29tcGlsZURlYnVnJiZuZXdMaW5lQ291bnQpe3RoaXMuY3VycmVudExpbmUrPW5ld0xpbmVDb3VudDt0aGlzLnNvdXJjZSs9XCIgICAgOyBfX2xpbmUgPSBcIit0aGlzLmN1cnJlbnRMaW5lK1wiXFxuXCJ9fX07ZXhwb3J0cy5lc2NhcGVYTUw9dXRpbHMuZXNjYXBlWE1MO2V4cG9ydHMuX19leHByZXNzPWV4cG9ydHMucmVuZGVyRmlsZTtleHBvcnRzLlZFUlNJT049X1ZFUlNJT05fU1RSSU5HO2V4cG9ydHMubmFtZT1fTkFNRTtpZih0eXBlb2Ygd2luZG93IT1cInVuZGVmaW5lZFwiKXt3aW5kb3cuZWpzPWV4cG9ydHN9fSx7XCIuLi9wYWNrYWdlLmpzb25cIjo2LFwiLi91dGlsc1wiOjIsZnM6MyxwYXRoOjR9XSwyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcInVzZSBzdHJpY3RcIjt2YXIgcmVnRXhwQ2hhcnM9L1t8XFxcXHt9KClbXFxdXiQrKj8uXS9nO3ZhciBoYXNPd25Qcm9wZXJ0eT1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O3ZhciBoYXNPd249ZnVuY3Rpb24ob2JqLGtleSl7cmV0dXJuIGhhc093blByb3BlcnR5LmFwcGx5KG9iaixba2V5XSl9O2V4cG9ydHMuZXNjYXBlUmVnRXhwQ2hhcnM9ZnVuY3Rpb24oc3RyaW5nKXtpZighc3RyaW5nKXtyZXR1cm5cIlwifXJldHVybiBTdHJpbmcoc3RyaW5nKS5yZXBsYWNlKHJlZ0V4cENoYXJzLFwiXFxcXCQmXCIpfTt2YXIgX0VOQ09ERV9IVE1MX1JVTEVTPXtcIiZcIjpcIiZhbXA7XCIsXCI8XCI6XCImbHQ7XCIsXCI+XCI6XCImZ3Q7XCIsJ1wiJzpcIiYjMzQ7XCIsXCInXCI6XCImIzM5O1wifTt2YXIgX01BVENIX0hUTUw9L1smPD4nXCJdL2c7ZnVuY3Rpb24gZW5jb2RlX2NoYXIoYyl7cmV0dXJuIF9FTkNPREVfSFRNTF9SVUxFU1tjXXx8Y312YXIgZXNjYXBlRnVuY1N0cj1cInZhciBfRU5DT0RFX0hUTUxfUlVMRVMgPSB7XFxuXCIrJyAgICAgIFwiJlwiOiBcIiZhbXA7XCJcXG4nKycgICAgLCBcIjxcIjogXCImbHQ7XCJcXG4nKycgICAgLCBcIj5cIjogXCImZ3Q7XCJcXG4nKycgICAgLCBcXCdcIlxcJzogXCImIzM0O1wiXFxuJysnICAgICwgXCJcXCdcIjogXCImIzM5O1wiXFxuJytcIiAgICB9XFxuXCIrXCIgICwgX01BVENIX0hUTUwgPSAvWyY8PidcXFwiXS9nO1xcblwiK1wiZnVuY3Rpb24gZW5jb2RlX2NoYXIoYykge1xcblwiK1wiICByZXR1cm4gX0VOQ09ERV9IVE1MX1JVTEVTW2NdIHx8IGM7XFxuXCIrXCJ9O1xcblwiO2V4cG9ydHMuZXNjYXBlWE1MPWZ1bmN0aW9uKG1hcmt1cCl7cmV0dXJuIG1hcmt1cD09dW5kZWZpbmVkP1wiXCI6U3RyaW5nKG1hcmt1cCkucmVwbGFjZShfTUFUQ0hfSFRNTCxlbmNvZGVfY2hhcil9O2Z1bmN0aW9uIGVzY2FwZVhNTFRvU3RyaW5nKCl7cmV0dXJuIEZ1bmN0aW9uLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHRoaXMpK1wiO1xcblwiK2VzY2FwZUZ1bmNTdHJ9dHJ5e2lmKHR5cGVvZiBPYmplY3QuZGVmaW5lUHJvcGVydHk9PT1cImZ1bmN0aW9uXCIpe09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLmVzY2FwZVhNTCxcInRvU3RyaW5nXCIse3ZhbHVlOmVzY2FwZVhNTFRvU3RyaW5nfSl9ZWxzZXtleHBvcnRzLmVzY2FwZVhNTC50b1N0cmluZz1lc2NhcGVYTUxUb1N0cmluZ319Y2F0Y2goZXJyKXtjb25zb2xlLndhcm4oXCJVbmFibGUgdG8gc2V0IGVzY2FwZVhNTC50b1N0cmluZyAoaXMgdGhlIEZ1bmN0aW9uIHByb3RvdHlwZSBmcm96ZW4/KVwiKX1leHBvcnRzLnNoYWxsb3dDb3B5PWZ1bmN0aW9uKHRvLGZyb20pe2Zyb209ZnJvbXx8e307aWYodG8hPT1udWxsJiZ0byE9PXVuZGVmaW5lZCl7Zm9yKHZhciBwIGluIGZyb20pe2lmKCFoYXNPd24oZnJvbSxwKSl7Y29udGludWV9aWYocD09PVwiX19wcm90b19fXCJ8fHA9PT1cImNvbnN0cnVjdG9yXCIpe2NvbnRpbnVlfXRvW3BdPWZyb21bcF19fXJldHVybiB0b307ZXhwb3J0cy5zaGFsbG93Q29weUZyb21MaXN0PWZ1bmN0aW9uKHRvLGZyb20sbGlzdCl7bGlzdD1saXN0fHxbXTtmcm9tPWZyb218fHt9O2lmKHRvIT09bnVsbCYmdG8hPT11bmRlZmluZWQpe2Zvcih2YXIgaT0wO2k8bGlzdC5sZW5ndGg7aSsrKXt2YXIgcD1saXN0W2ldO2lmKHR5cGVvZiBmcm9tW3BdIT1cInVuZGVmaW5lZFwiKXtpZighaGFzT3duKGZyb20scCkpe2NvbnRpbnVlfWlmKHA9PT1cIl9fcHJvdG9fX1wifHxwPT09XCJjb25zdHJ1Y3RvclwiKXtjb250aW51ZX10b1twXT1mcm9tW3BdfX19cmV0dXJuIHRvfTtleHBvcnRzLmNhY2hlPXtfZGF0YTp7fSxzZXQ6ZnVuY3Rpb24oa2V5LHZhbCl7dGhpcy5fZGF0YVtrZXldPXZhbH0sZ2V0OmZ1bmN0aW9uKGtleSl7cmV0dXJuIHRoaXMuX2RhdGFba2V5XX0scmVtb3ZlOmZ1bmN0aW9uKGtleSl7ZGVsZXRlIHRoaXMuX2RhdGFba2V5XX0scmVzZXQ6ZnVuY3Rpb24oKXt0aGlzLl9kYXRhPXt9fX07ZXhwb3J0cy5oeXBoZW5Ub0NhbWVsPWZ1bmN0aW9uKHN0cil7cmV0dXJuIHN0ci5yZXBsYWNlKC8tW2Etel0vZyxmdW5jdGlvbihtYXRjaCl7cmV0dXJuIG1hdGNoWzFdLnRvVXBwZXJDYXNlKCl9KX07ZXhwb3J0cy5jcmVhdGVOdWxsUHJvdG9PYmpXaGVyZVBvc3NpYmxlPWZ1bmN0aW9uKCl7aWYodHlwZW9mIE9iamVjdC5jcmVhdGU9PVwiZnVuY3Rpb25cIil7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIE9iamVjdC5jcmVhdGUobnVsbCl9fWlmKCEoe19fcHJvdG9fXzpudWxsfWluc3RhbmNlb2YgT2JqZWN0KSl7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJue19fcHJvdG9fXzpudWxsfX19cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJue319fSgpO2V4cG9ydHMuaGFzT3duT25seU9iamVjdD1mdW5jdGlvbihvYmope3ZhciBvPWV4cG9ydHMuY3JlYXRlTnVsbFByb3RvT2JqV2hlcmVQb3NzaWJsZSgpO2Zvcih2YXIgcCBpbiBvYmope2lmKGhhc093bihvYmoscCkpe29bcF09b2JqW3BdfX1yZXR1cm4gb319LHt9XSwzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXt9LHt9XSw0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsoZnVuY3Rpb24ocHJvY2Vzcyl7ZnVuY3Rpb24gbm9ybWFsaXplQXJyYXkocGFydHMsYWxsb3dBYm92ZVJvb3Qpe3ZhciB1cD0wO2Zvcih2YXIgaT1wYXJ0cy5sZW5ndGgtMTtpPj0wO2ktLSl7dmFyIGxhc3Q9cGFydHNbaV07aWYobGFzdD09PVwiLlwiKXtwYXJ0cy5zcGxpY2UoaSwxKX1lbHNlIGlmKGxhc3Q9PT1cIi4uXCIpe3BhcnRzLnNwbGljZShpLDEpO3VwKyt9ZWxzZSBpZih1cCl7cGFydHMuc3BsaWNlKGksMSk7dXAtLX19aWYoYWxsb3dBYm92ZVJvb3Qpe2Zvcig7dXAtLTt1cCl7cGFydHMudW5zaGlmdChcIi4uXCIpfX1yZXR1cm4gcGFydHN9ZXhwb3J0cy5yZXNvbHZlPWZ1bmN0aW9uKCl7dmFyIHJlc29sdmVkUGF0aD1cIlwiLHJlc29sdmVkQWJzb2x1dGU9ZmFsc2U7Zm9yKHZhciBpPWFyZ3VtZW50cy5sZW5ndGgtMTtpPj0tMSYmIXJlc29sdmVkQWJzb2x1dGU7aS0tKXt2YXIgcGF0aD1pPj0wP2FyZ3VtZW50c1tpXTpwcm9jZXNzLmN3ZCgpO2lmKHR5cGVvZiBwYXRoIT09XCJzdHJpbmdcIil7dGhyb3cgbmV3IFR5cGVFcnJvcihcIkFyZ3VtZW50cyB0byBwYXRoLnJlc29sdmUgbXVzdCBiZSBzdHJpbmdzXCIpfWVsc2UgaWYoIXBhdGgpe2NvbnRpbnVlfXJlc29sdmVkUGF0aD1wYXRoK1wiL1wiK3Jlc29sdmVkUGF0aDtyZXNvbHZlZEFic29sdXRlPXBhdGguY2hhckF0KDApPT09XCIvXCJ9cmVzb2x2ZWRQYXRoPW5vcm1hbGl6ZUFycmF5KGZpbHRlcihyZXNvbHZlZFBhdGguc3BsaXQoXCIvXCIpLGZ1bmN0aW9uKHApe3JldHVybiEhcH0pLCFyZXNvbHZlZEFic29sdXRlKS5qb2luKFwiL1wiKTtyZXR1cm4ocmVzb2x2ZWRBYnNvbHV0ZT9cIi9cIjpcIlwiKStyZXNvbHZlZFBhdGh8fFwiLlwifTtleHBvcnRzLm5vcm1hbGl6ZT1mdW5jdGlvbihwYXRoKXt2YXIgaXNBYnNvbHV0ZT1leHBvcnRzLmlzQWJzb2x1dGUocGF0aCksdHJhaWxpbmdTbGFzaD1zdWJzdHIocGF0aCwtMSk9PT1cIi9cIjtwYXRoPW5vcm1hbGl6ZUFycmF5KGZpbHRlcihwYXRoLnNwbGl0KFwiL1wiKSxmdW5jdGlvbihwKXtyZXR1cm4hIXB9KSwhaXNBYnNvbHV0ZSkuam9pbihcIi9cIik7aWYoIXBhdGgmJiFpc0Fic29sdXRlKXtwYXRoPVwiLlwifWlmKHBhdGgmJnRyYWlsaW5nU2xhc2gpe3BhdGgrPVwiL1wifXJldHVybihpc0Fic29sdXRlP1wiL1wiOlwiXCIpK3BhdGh9O2V4cG9ydHMuaXNBYnNvbHV0ZT1mdW5jdGlvbihwYXRoKXtyZXR1cm4gcGF0aC5jaGFyQXQoMCk9PT1cIi9cIn07ZXhwb3J0cy5qb2luPWZ1bmN0aW9uKCl7dmFyIHBhdGhzPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywwKTtyZXR1cm4gZXhwb3J0cy5ub3JtYWxpemUoZmlsdGVyKHBhdGhzLGZ1bmN0aW9uKHAsaW5kZXgpe2lmKHR5cGVvZiBwIT09XCJzdHJpbmdcIil7dGhyb3cgbmV3IFR5cGVFcnJvcihcIkFyZ3VtZW50cyB0byBwYXRoLmpvaW4gbXVzdCBiZSBzdHJpbmdzXCIpfXJldHVybiBwfSkuam9pbihcIi9cIikpfTtleHBvcnRzLnJlbGF0aXZlPWZ1bmN0aW9uKGZyb20sdG8pe2Zyb209ZXhwb3J0cy5yZXNvbHZlKGZyb20pLnN1YnN0cigxKTt0bz1leHBvcnRzLnJlc29sdmUodG8pLnN1YnN0cigxKTtmdW5jdGlvbiB0cmltKGFycil7dmFyIHN0YXJ0PTA7Zm9yKDtzdGFydDxhcnIubGVuZ3RoO3N0YXJ0Kyspe2lmKGFycltzdGFydF0hPT1cIlwiKWJyZWFrfXZhciBlbmQ9YXJyLmxlbmd0aC0xO2Zvcig7ZW5kPj0wO2VuZC0tKXtpZihhcnJbZW5kXSE9PVwiXCIpYnJlYWt9aWYoc3RhcnQ+ZW5kKXJldHVybltdO3JldHVybiBhcnIuc2xpY2Uoc3RhcnQsZW5kLXN0YXJ0KzEpfXZhciBmcm9tUGFydHM9dHJpbShmcm9tLnNwbGl0KFwiL1wiKSk7dmFyIHRvUGFydHM9dHJpbSh0by5zcGxpdChcIi9cIikpO3ZhciBsZW5ndGg9TWF0aC5taW4oZnJvbVBhcnRzLmxlbmd0aCx0b1BhcnRzLmxlbmd0aCk7dmFyIHNhbWVQYXJ0c0xlbmd0aD1sZW5ndGg7Zm9yKHZhciBpPTA7aTxsZW5ndGg7aSsrKXtpZihmcm9tUGFydHNbaV0hPT10b1BhcnRzW2ldKXtzYW1lUGFydHNMZW5ndGg9aTticmVha319dmFyIG91dHB1dFBhcnRzPVtdO2Zvcih2YXIgaT1zYW1lUGFydHNMZW5ndGg7aTxmcm9tUGFydHMubGVuZ3RoO2krKyl7b3V0cHV0UGFydHMucHVzaChcIi4uXCIpfW91dHB1dFBhcnRzPW91dHB1dFBhcnRzLmNvbmNhdCh0b1BhcnRzLnNsaWNlKHNhbWVQYXJ0c0xlbmd0aCkpO3JldHVybiBvdXRwdXRQYXJ0cy5qb2luKFwiL1wiKX07ZXhwb3J0cy5zZXA9XCIvXCI7ZXhwb3J0cy5kZWxpbWl0ZXI9XCI6XCI7ZXhwb3J0cy5kaXJuYW1lPWZ1bmN0aW9uKHBhdGgpe2lmKHR5cGVvZiBwYXRoIT09XCJzdHJpbmdcIilwYXRoPXBhdGgrXCJcIjtpZihwYXRoLmxlbmd0aD09PTApcmV0dXJuXCIuXCI7dmFyIGNvZGU9cGF0aC5jaGFyQ29kZUF0KDApO3ZhciBoYXNSb290PWNvZGU9PT00Nzt2YXIgZW5kPS0xO3ZhciBtYXRjaGVkU2xhc2g9dHJ1ZTtmb3IodmFyIGk9cGF0aC5sZW5ndGgtMTtpPj0xOy0taSl7Y29kZT1wYXRoLmNoYXJDb2RlQXQoaSk7aWYoY29kZT09PTQ3KXtpZighbWF0Y2hlZFNsYXNoKXtlbmQ9aTticmVha319ZWxzZXttYXRjaGVkU2xhc2g9ZmFsc2V9fWlmKGVuZD09PS0xKXJldHVybiBoYXNSb290P1wiL1wiOlwiLlwiO2lmKGhhc1Jvb3QmJmVuZD09PTEpe3JldHVyblwiL1wifXJldHVybiBwYXRoLnNsaWNlKDAsZW5kKX07ZnVuY3Rpb24gYmFzZW5hbWUocGF0aCl7aWYodHlwZW9mIHBhdGghPT1cInN0cmluZ1wiKXBhdGg9cGF0aCtcIlwiO3ZhciBzdGFydD0wO3ZhciBlbmQ9LTE7dmFyIG1hdGNoZWRTbGFzaD10cnVlO3ZhciBpO2ZvcihpPXBhdGgubGVuZ3RoLTE7aT49MDstLWkpe2lmKHBhdGguY2hhckNvZGVBdChpKT09PTQ3KXtpZighbWF0Y2hlZFNsYXNoKXtzdGFydD1pKzE7YnJlYWt9fWVsc2UgaWYoZW5kPT09LTEpe21hdGNoZWRTbGFzaD1mYWxzZTtlbmQ9aSsxfX1pZihlbmQ9PT0tMSlyZXR1cm5cIlwiO3JldHVybiBwYXRoLnNsaWNlKHN0YXJ0LGVuZCl9ZXhwb3J0cy5iYXNlbmFtZT1mdW5jdGlvbihwYXRoLGV4dCl7dmFyIGY9YmFzZW5hbWUocGF0aCk7aWYoZXh0JiZmLnN1YnN0cigtMSpleHQubGVuZ3RoKT09PWV4dCl7Zj1mLnN1YnN0cigwLGYubGVuZ3RoLWV4dC5sZW5ndGgpfXJldHVybiBmfTtleHBvcnRzLmV4dG5hbWU9ZnVuY3Rpb24ocGF0aCl7aWYodHlwZW9mIHBhdGghPT1cInN0cmluZ1wiKXBhdGg9cGF0aCtcIlwiO3ZhciBzdGFydERvdD0tMTt2YXIgc3RhcnRQYXJ0PTA7dmFyIGVuZD0tMTt2YXIgbWF0Y2hlZFNsYXNoPXRydWU7dmFyIHByZURvdFN0YXRlPTA7Zm9yKHZhciBpPXBhdGgubGVuZ3RoLTE7aT49MDstLWkpe3ZhciBjb2RlPXBhdGguY2hhckNvZGVBdChpKTtpZihjb2RlPT09NDcpe2lmKCFtYXRjaGVkU2xhc2gpe3N0YXJ0UGFydD1pKzE7YnJlYWt9Y29udGludWV9aWYoZW5kPT09LTEpe21hdGNoZWRTbGFzaD1mYWxzZTtlbmQ9aSsxfWlmKGNvZGU9PT00Nil7aWYoc3RhcnREb3Q9PT0tMSlzdGFydERvdD1pO2Vsc2UgaWYocHJlRG90U3RhdGUhPT0xKXByZURvdFN0YXRlPTF9ZWxzZSBpZihzdGFydERvdCE9PS0xKXtwcmVEb3RTdGF0ZT0tMX19aWYoc3RhcnREb3Q9PT0tMXx8ZW5kPT09LTF8fHByZURvdFN0YXRlPT09MHx8cHJlRG90U3RhdGU9PT0xJiZzdGFydERvdD09PWVuZC0xJiZzdGFydERvdD09PXN0YXJ0UGFydCsxKXtyZXR1cm5cIlwifXJldHVybiBwYXRoLnNsaWNlKHN0YXJ0RG90LGVuZCl9O2Z1bmN0aW9uIGZpbHRlcih4cyxmKXtpZih4cy5maWx0ZXIpcmV0dXJuIHhzLmZpbHRlcihmKTt2YXIgcmVzPVtdO2Zvcih2YXIgaT0wO2k8eHMubGVuZ3RoO2krKyl7aWYoZih4c1tpXSxpLHhzKSlyZXMucHVzaCh4c1tpXSl9cmV0dXJuIHJlc312YXIgc3Vic3RyPVwiYWJcIi5zdWJzdHIoLTEpPT09XCJiXCI/ZnVuY3Rpb24oc3RyLHN0YXJ0LGxlbil7cmV0dXJuIHN0ci5zdWJzdHIoc3RhcnQsbGVuKX06ZnVuY3Rpb24oc3RyLHN0YXJ0LGxlbil7aWYoc3RhcnQ8MClzdGFydD1zdHIubGVuZ3RoK3N0YXJ0O3JldHVybiBzdHIuc3Vic3RyKHN0YXJ0LGxlbil9fSkuY2FsbCh0aGlzLHJlcXVpcmUoXCJfcHJvY2Vzc1wiKSl9LHtfcHJvY2Vzczo1fV0sNTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7dmFyIHByb2Nlc3M9bW9kdWxlLmV4cG9ydHM9e307dmFyIGNhY2hlZFNldFRpbWVvdXQ7dmFyIGNhY2hlZENsZWFyVGltZW91dDtmdW5jdGlvbiBkZWZhdWx0U2V0VGltb3V0KCl7dGhyb3cgbmV3IEVycm9yKFwic2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZFwiKX1mdW5jdGlvbiBkZWZhdWx0Q2xlYXJUaW1lb3V0KCl7dGhyb3cgbmV3IEVycm9yKFwiY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkXCIpfShmdW5jdGlvbigpe3RyeXtpZih0eXBlb2Ygc2V0VGltZW91dD09PVwiZnVuY3Rpb25cIil7Y2FjaGVkU2V0VGltZW91dD1zZXRUaW1lb3V0fWVsc2V7Y2FjaGVkU2V0VGltZW91dD1kZWZhdWx0U2V0VGltb3V0fX1jYXRjaChlKXtjYWNoZWRTZXRUaW1lb3V0PWRlZmF1bHRTZXRUaW1vdXR9dHJ5e2lmKHR5cGVvZiBjbGVhclRpbWVvdXQ9PT1cImZ1bmN0aW9uXCIpe2NhY2hlZENsZWFyVGltZW91dD1jbGVhclRpbWVvdXR9ZWxzZXtjYWNoZWRDbGVhclRpbWVvdXQ9ZGVmYXVsdENsZWFyVGltZW91dH19Y2F0Y2goZSl7Y2FjaGVkQ2xlYXJUaW1lb3V0PWRlZmF1bHRDbGVhclRpbWVvdXR9fSkoKTtmdW5jdGlvbiBydW5UaW1lb3V0KGZ1bil7aWYoY2FjaGVkU2V0VGltZW91dD09PXNldFRpbWVvdXQpe3JldHVybiBzZXRUaW1lb3V0KGZ1biwwKX1pZigoY2FjaGVkU2V0VGltZW91dD09PWRlZmF1bHRTZXRUaW1vdXR8fCFjYWNoZWRTZXRUaW1lb3V0KSYmc2V0VGltZW91dCl7Y2FjaGVkU2V0VGltZW91dD1zZXRUaW1lb3V0O3JldHVybiBzZXRUaW1lb3V0KGZ1biwwKX10cnl7cmV0dXJuIGNhY2hlZFNldFRpbWVvdXQoZnVuLDApfWNhdGNoKGUpe3RyeXtyZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKG51bGwsZnVuLDApfWNhdGNoKGUpe3JldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwodGhpcyxmdW4sMCl9fX1mdW5jdGlvbiBydW5DbGVhclRpbWVvdXQobWFya2VyKXtpZihjYWNoZWRDbGVhclRpbWVvdXQ9PT1jbGVhclRpbWVvdXQpe3JldHVybiBjbGVhclRpbWVvdXQobWFya2VyKX1pZigoY2FjaGVkQ2xlYXJUaW1lb3V0PT09ZGVmYXVsdENsZWFyVGltZW91dHx8IWNhY2hlZENsZWFyVGltZW91dCkmJmNsZWFyVGltZW91dCl7Y2FjaGVkQ2xlYXJUaW1lb3V0PWNsZWFyVGltZW91dDtyZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcil9dHJ5e3JldHVybiBjYWNoZWRDbGVhclRpbWVvdXQobWFya2VyKX1jYXRjaChlKXt0cnl7cmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsbWFya2VyKX1jYXRjaChlKXtyZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcyxtYXJrZXIpfX19dmFyIHF1ZXVlPVtdO3ZhciBkcmFpbmluZz1mYWxzZTt2YXIgY3VycmVudFF1ZXVlO3ZhciBxdWV1ZUluZGV4PS0xO2Z1bmN0aW9uIGNsZWFuVXBOZXh0VGljaygpe2lmKCFkcmFpbmluZ3x8IWN1cnJlbnRRdWV1ZSl7cmV0dXJufWRyYWluaW5nPWZhbHNlO2lmKGN1cnJlbnRRdWV1ZS5sZW5ndGgpe3F1ZXVlPWN1cnJlbnRRdWV1ZS5jb25jYXQocXVldWUpfWVsc2V7cXVldWVJbmRleD0tMX1pZihxdWV1ZS5sZW5ndGgpe2RyYWluUXVldWUoKX19ZnVuY3Rpb24gZHJhaW5RdWV1ZSgpe2lmKGRyYWluaW5nKXtyZXR1cm59dmFyIHRpbWVvdXQ9cnVuVGltZW91dChjbGVhblVwTmV4dFRpY2spO2RyYWluaW5nPXRydWU7dmFyIGxlbj1xdWV1ZS5sZW5ndGg7d2hpbGUobGVuKXtjdXJyZW50UXVldWU9cXVldWU7cXVldWU9W107d2hpbGUoKytxdWV1ZUluZGV4PGxlbil7aWYoY3VycmVudFF1ZXVlKXtjdXJyZW50UXVldWVbcXVldWVJbmRleF0ucnVuKCl9fXF1ZXVlSW5kZXg9LTE7bGVuPXF1ZXVlLmxlbmd0aH1jdXJyZW50UXVldWU9bnVsbDtkcmFpbmluZz1mYWxzZTtydW5DbGVhclRpbWVvdXQodGltZW91dCl9cHJvY2Vzcy5uZXh0VGljaz1mdW5jdGlvbihmdW4pe3ZhciBhcmdzPW5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoLTEpO2lmKGFyZ3VtZW50cy5sZW5ndGg+MSl7Zm9yKHZhciBpPTE7aTxhcmd1bWVudHMubGVuZ3RoO2krKyl7YXJnc1tpLTFdPWFyZ3VtZW50c1tpXX19cXVldWUucHVzaChuZXcgSXRlbShmdW4sYXJncykpO2lmKHF1ZXVlLmxlbmd0aD09PTEmJiFkcmFpbmluZyl7cnVuVGltZW91dChkcmFpblF1ZXVlKX19O2Z1bmN0aW9uIEl0ZW0oZnVuLGFycmF5KXt0aGlzLmZ1bj1mdW47dGhpcy5hcnJheT1hcnJheX1JdGVtLnByb3RvdHlwZS5ydW49ZnVuY3Rpb24oKXt0aGlzLmZ1bi5hcHBseShudWxsLHRoaXMuYXJyYXkpfTtwcm9jZXNzLnRpdGxlPVwiYnJvd3NlclwiO3Byb2Nlc3MuYnJvd3Nlcj10cnVlO3Byb2Nlc3MuZW52PXt9O3Byb2Nlc3MuYXJndj1bXTtwcm9jZXNzLnZlcnNpb249XCJcIjtwcm9jZXNzLnZlcnNpb25zPXt9O2Z1bmN0aW9uIG5vb3AoKXt9cHJvY2Vzcy5vbj1ub29wO3Byb2Nlc3MuYWRkTGlzdGVuZXI9bm9vcDtwcm9jZXNzLm9uY2U9bm9vcDtwcm9jZXNzLm9mZj1ub29wO3Byb2Nlc3MucmVtb3ZlTGlzdGVuZXI9bm9vcDtwcm9jZXNzLnJlbW92ZUFsbExpc3RlbmVycz1ub29wO3Byb2Nlc3MuZW1pdD1ub29wO3Byb2Nlc3MucHJlcGVuZExpc3RlbmVyPW5vb3A7cHJvY2Vzcy5wcmVwZW5kT25jZUxpc3RlbmVyPW5vb3A7cHJvY2Vzcy5saXN0ZW5lcnM9ZnVuY3Rpb24obmFtZSl7cmV0dXJuW119O3Byb2Nlc3MuYmluZGluZz1mdW5jdGlvbihuYW1lKXt0aHJvdyBuZXcgRXJyb3IoXCJwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZFwiKX07cHJvY2Vzcy5jd2Q9ZnVuY3Rpb24oKXtyZXR1cm5cIi9cIn07cHJvY2Vzcy5jaGRpcj1mdW5jdGlvbihkaXIpe3Rocm93IG5ldyBFcnJvcihcInByb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZFwiKX07cHJvY2Vzcy51bWFzaz1mdW5jdGlvbigpe3JldHVybiAwfX0se31dLDY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe21vZHVsZS5leHBvcnRzPXtuYW1lOlwiZWpzXCIsZGVzY3JpcHRpb246XCJFbWJlZGRlZCBKYXZhU2NyaXB0IHRlbXBsYXRlc1wiLGtleXdvcmRzOltcInRlbXBsYXRlXCIsXCJlbmdpbmVcIixcImVqc1wiXSx2ZXJzaW9uOlwiMy4xLjlcIixhdXRob3I6XCJNYXR0aGV3IEVlcm5pc3NlIDxtZGVAZmxlZWdpeC5vcmc+IChodHRwOi8vZmxlZWdpeC5vcmcpXCIsbGljZW5zZTpcIkFwYWNoZS0yLjBcIixiaW46e2VqczpcIi4vYmluL2NsaS5qc1wifSxtYWluOlwiLi9saWIvZWpzLmpzXCIsanNkZWxpdnI6XCJlanMubWluLmpzXCIsdW5wa2c6XCJlanMubWluLmpzXCIscmVwb3NpdG9yeTp7dHlwZTpcImdpdFwiLHVybDpcImdpdDovL2dpdGh1Yi5jb20vbWRlL2Vqcy5naXRcIn0sYnVnczpcImh0dHBzOi8vZ2l0aHViLmNvbS9tZGUvZWpzL2lzc3Vlc1wiLGhvbWVwYWdlOlwiaHR0cHM6Ly9naXRodWIuY29tL21kZS9lanNcIixkZXBlbmRlbmNpZXM6e2pha2U6XCJeMTAuOC41XCJ9LGRldkRlcGVuZGVuY2llczp7YnJvd3NlcmlmeTpcIl4xNi41LjFcIixlc2xpbnQ6XCJeNi44LjBcIixcImdpdC1kaXJlY3RvcnktZGVwbG95XCI6XCJeMS41LjFcIixqc2RvYzpcIl40LjAuMlwiLFwibHJ1LWNhY2hlXCI6XCJeNC4wLjFcIixtb2NoYTpcIl4xMC4yLjBcIixcInVnbGlmeS1qc1wiOlwiXjMuMy4xNlwifSxlbmdpbmVzOntub2RlOlwiPj0wLjEwLjBcIn0sc2NyaXB0czp7dGVzdDpcIm5weCBqYWtlIHRlc3RcIn19fSx7fV19LHt9LFsxXSkoMSl9KTtcbiIsIlxyXG5pbXBvcnQgJ2Vqcy9lanMubWluJztcclxuXHJcbmxldCBjb3JldWlUYWJsZVV0aWxzID0ge1xyXG5cclxuICAgIF90ZW1wbGF0ZXM6IHt9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCe0LHRitC10LTQuNC90LXQvdC40LUg0LDRgtGA0LjQsdGD0YLQvtCyXHJcbiAgICAgKiBAcGFyYW0gYXR0cjFcclxuICAgICAqIEBwYXJhbSBhdHRyMlxyXG4gICAgICogQHJldHVybnMge29iamVjdH1cclxuICAgICAqL1xyXG4gICAgbWVyZ2VBdHRyOiBmdW5jdGlvbiAoYXR0cjEsIGF0dHIyKSB7XHJcblxyXG4gICAgICAgIGxldCBtZXJnZUF0dHIgPSBPYmplY3QuYXNzaWduKHt9LCBhdHRyMSk7XHJcblxyXG4gICAgICAgIGlmICh0eXBlb2YgYXR0cjIgPT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgICAgICQuZWFjaChhdHRyMiwgZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAobWVyZ2VBdHRyLmhhc093blByb3BlcnR5KG5hbWUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5hbWUgPT09ICdjbGFzcycpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWVyZ2VBdHRyW25hbWVdICs9ICcgJyArIHZhbHVlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG5hbWUgPT09ICdzdHlsZScpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWVyZ2VBdHRyW25hbWVdICs9ICc7JyArIHZhbHVlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXJnZUF0dHJbbmFtZV0gPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBtZXJnZUF0dHJbbmFtZV0gPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gbWVyZ2VBdHRyO1xyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQn9GA0L7QstC10YDQutCwINC90LAg0YfQuNGB0LvQvlxyXG4gICAgICogQHBhcmFtIG51bVxyXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBpc051bWVyaWM6IGZ1bmN0aW9uKG51bSkge1xyXG4gICAgICAgIHJldHVybiAodHlwZW9mKG51bSkgPT09ICdudW1iZXInIHx8IHR5cGVvZihudW0pID09PSBcInN0cmluZ1wiICYmIG51bS50cmltKCkgIT09ICcnKSAmJiAhIGlzTmFOKG51bSk7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBoYXNoQ29kZTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY3JjMzIoKG5ldyBEYXRlKCkuZ2V0VGltZSgpICsgTWF0aC5yYW5kb20oKSkudG9TdHJpbmcoKSkudG9TdHJpbmcoMTYpO1xyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQn9GA0L7QstC10YDQutCwINC90LAg0L7QsdGK0LXQutGCXHJcbiAgICAgKiBAcGFyYW0gdmFsdWVcclxuICAgICAqL1xyXG4gICAgaXNPYmplY3Q6IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG5cclxuICAgICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJlxyXG4gICAgICAgICAgICAhIEFycmF5LmlzQXJyYXkodmFsdWUpICYmXHJcbiAgICAgICAgICAgIHZhbHVlICE9PSBudWxsO1xyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0gc3RyXHJcbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfVxyXG4gICAgICovXHJcbiAgICBjcmMzMjogZnVuY3Rpb24gKHN0cikge1xyXG5cclxuICAgICAgICBmb3IgKHZhciBhLCBvID0gW10sIGMgPSAwOyBjIDwgMjU2OyBjKyspIHtcclxuICAgICAgICAgICAgYSA9IGM7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGYgPSAwOyBmIDwgODsgZisrKSB7XHJcbiAgICAgICAgICAgICAgICBhID0gMSAmIGEgPyAzOTg4MjkyMzg0IF4gYSA+Pj4gMSA6IGEgPj4+IDFcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBvW2NdID0gYVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZm9yICh2YXIgbiA9IC0xLCB0ID0gMDsgdCA8IHN0ci5sZW5ndGg7IHQrKykge1xyXG4gICAgICAgICAgICBuID0gbiA+Pj4gOCBeIG9bMjU1ICYgKG4gXiBzdHIuY2hhckNvZGVBdCh0KSldXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gKC0xIF4gbikgPj4+IDA7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCg0LXQvdC00LXRgCDRiNCw0LHQu9C+0L3QsFxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRlbXBsYXRlXHJcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gb3B0aW9uc1xyXG4gICAgICogQHJldHVybnMge3N0cmluZ31cclxuICAgICAqL1xyXG4gICAgcmVuZGVyOiBmdW5jdGlvbiAodGVtcGxhdGUsIG9wdGlvbnMpIHtcclxuXHJcbiAgICAgICAgbGV0IHRwbE5hbWUgPSB0aGlzLmNyYzMyKHRlbXBsYXRlKTtcclxuXHJcbiAgICAgICAgaWYgKCAhIHRoaXMuX3RlbXBsYXRlcy5oYXNPd25Qcm9wZXJ0eSh0cGxOYW1lKSkge1xyXG4gICAgICAgICAgICB0aGlzLl90ZW1wbGF0ZXNbdHBsTmFtZV0gPSBlanMuY29tcGlsZSh0ZW1wbGF0ZSlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLl90ZW1wbGF0ZXNbdHBsTmFtZV0ob3B0aW9ucyk7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCg0LDQt9C80LXRgNC90L7RgdGC0Ywg0YHRgtGA0L7QutC4XHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyXHJcbiAgICAgKiBAcGFyYW0ge2ludH0gICAgY291bnRcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSByZXBlYXRcclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIHN0clBhZExlZnQ6IGZ1bmN0aW9uKHN0ciwgY291bnQsIHJlcGVhdCkge1xyXG5cclxuICAgICAgICBzdHIgPSBTdHJpbmcoc3RyKTtcclxuXHJcbiAgICAgICAgaWYgKHN0ci5sZW5ndGggPj0gY291bnQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHN0cjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJlcGVhdCA9IHJlcGVhdCA/IHJlcGVhdCA6ICcwJztcclxuXHJcbiAgICAgICAgcmV0dXJuIChyZXBlYXQucmVwZWF0KGNvdW50KSArIHN0cikuc2xpY2UoLShjb3VudCkpO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY29yZXVpVGFibGVVdGlsczsiLCJcclxuaW1wb3J0IGNvcmV1aVRhYmxlVHBsICAgZnJvbSAnLi9jb3JldWkudGFibGUudGVtcGxhdGVzJztcclxuaW1wb3J0IGNvcmV1aVRhYmxlVXRpbHMgZnJvbSBcIi4vY29yZXVpLnRhYmxlLnV0aWxzXCI7XHJcblxyXG5cclxubGV0IGNvcmV1aVRhYmxlUmVuZGVyID0ge1xyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCh0LHQvtGA0LrQsCDRgtCw0LHQu9C40YbRi1xyXG4gICAgICogQHBhcmFtIHtvYmplY3R9IHRhYmxlXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICByZW5kZXJUYWJsZTogZnVuY3Rpb24gKHRhYmxlKSB7XHJcblxyXG4gICAgICAgIGxldCBvcHRpb25zICAgICAgICAgPSB0YWJsZS5nZXRPcHRpb25zKCk7XHJcbiAgICAgICAgbGV0IHJlY29yZHNFbGVtZW50cyA9IFtdO1xyXG4gICAgICAgIGxldCBjb2x1bW5zSGVhZGVyICAgPSAnJztcclxuICAgICAgICBsZXQgY29sdW1uc0Zvb3RlciAgID0gJyc7XHJcbiAgICAgICAgbGV0IGNvbEdyb3VwcyAgICAgICA9IFtdO1xyXG4gICAgICAgIGxldCBjb2x1bW5FbGVtZW50cyAgPSAkKGNvcmV1aVRhYmxlVHBsWyd0YWJsZS9jb2x1bW5zL3RyLmh0bWwnXSk7XHJcblxyXG5cclxuICAgICAgICAvLyDQmtC+0LvQvtC90LrQuFxyXG4gICAgICAgIGlmICh0YWJsZS5fY29sdW1ucy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICQuZWFjaCh0YWJsZS5fY29sdW1ucywgZnVuY3Rpb24gKGtleSwgY29sdW1uKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoICEgY29sdW1uLmlzU2hvdygpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGxldCBjb2x1bW5PcHRpb25zICA9IGNvbHVtbi5nZXRPcHRpb25zKCk7XHJcbiAgICAgICAgICAgICAgICBsZXQgYXR0cmlidXRlcyAgICAgPSBbXTtcclxuICAgICAgICAgICAgICAgIGxldCBzb3J0YWJsZSAgICAgICA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICBsZXQgbWVudUVsZW1lbnRzICAgPSBbXTtcclxuICAgICAgICAgICAgICAgIGxldCBtZW51U2hvd0Fsd2F5cyA9ICcnO1xyXG4gICAgICAgICAgICAgICAgbGV0IG1lbnVQb3NpdGlvbiAgID0gJ2VuZCc7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGNvbHVtbk9wdGlvbnMuaGFzT3duUHJvcGVydHkoJ2ZpZWxkJykgJiYgdHlwZW9mIGNvbHVtbk9wdGlvbnMuZmllbGQgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29sdW1uT3B0aW9ucy5hdHRySGVhZGVyID0gY29yZXVpVGFibGVVdGlscy5tZXJnZUF0dHIoY29sdW1uT3B0aW9ucy5hdHRySGVhZGVyLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiZGF0YS1maWVsZFwiOiBjb2x1bW5PcHRpb25zLmZpZWxkXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGNvbHVtbk9wdGlvbnMuaGFzT3duUHJvcGVydHkoJ2ZpeGVkJykgJiYgdHlwZW9mIGNvbHVtbk9wdGlvbnMuZml4ZWQgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29sdW1uT3B0aW9ucy5hdHRySGVhZGVyID0gY29yZXVpVGFibGVVdGlscy5tZXJnZUF0dHIoY29sdW1uT3B0aW9ucy5hdHRySGVhZGVyLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzOiAnY29yZXVpLXRhYmxlX19maXhlZF8nICsgY29sdW1uT3B0aW9ucy5maXhlZFxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBjb2x1bW5PcHRpb25zLmF0dHIgPSBjb3JldWlUYWJsZVV0aWxzLm1lcmdlQXR0cihjb2x1bW5PcHRpb25zLmF0dHIsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M6ICdjb3JldWktdGFibGVfX2ZpeGVkXycgKyBjb2x1bW5PcHRpb25zLmZpeGVkXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGNvbHVtbk9wdGlvbnMudHlwZSAhPT0gJ251bWJlcnMnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbHVtbk9wdGlvbnMuaGFzT3duUHJvcGVydHkoJ3NvcnRhYmxlJykgJiYgY29sdW1uT3B0aW9ucy5zb3J0YWJsZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2x1bW5PcHRpb25zLmF0dHJIZWFkZXIgPSBjb3JldWlUYWJsZVV0aWxzLm1lcmdlQXR0cihjb2x1bW5PcHRpb25zLmF0dHJIZWFkZXIsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzOiAnY29yZXVpLXRhYmxlX19zb3J0YWJsZSdcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAodGFibGUuX3NvcnQubGVuZ3RoID4gMCAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2x1bW5PcHRpb25zLmhhc093blByb3BlcnR5KCdmaWVsZCcpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVvZiBjb2x1bW5PcHRpb25zLmZpZWxkID09PSAnc3RyaW5nJyAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2x1bW5PcHRpb25zLmZpZWxkXHJcbiAgICAgICAgICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICQuZWFjaCh0YWJsZS5fc29ydCwgZnVuY3Rpb24gKGtleSwgc29ydEZpZWxkKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbHVtbk9wdGlvbnMuZmllbGQgPT09IHNvcnRGaWVsZC5maWVsZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzb3J0RmllbGQub3JkZXIgPT09ICdhc2MnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvcnRhYmxlID0gJ2FzYyc7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc29ydEZpZWxkLm9yZGVyID09PSAnZGVzYycpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc29ydGFibGUgPSAnZGVzYyc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5zaG93SGVhZGVycyAmJlxyXG4gICAgICAgICAgICAgICAgICAgIGNvbHVtbk9wdGlvbnMuaGFzT3duUHJvcGVydHkoJ21lbnUnKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgIGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QoY29sdW1uT3B0aW9ucy5tZW51KSAmJlxyXG4gICAgICAgICAgICAgICAgICAgIGNvbHVtbk9wdGlvbnMubWVudS5oYXNPd25Qcm9wZXJ0eSgnaXRlbXMnKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgIEFycmF5LmlzQXJyYXkoY29sdW1uT3B0aW9ucy5tZW51Lml0ZW1zKVxyXG4gICAgICAgICAgICAgICAgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjb2x1bW5PcHRpb25zLm1lbnUuaGFzT3duUHJvcGVydHkoJ3Nob3dBbHdheXMnKSAmJiBjb2x1bW5PcHRpb25zLm1lbnUuc2hvd0Fsd2F5cykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtZW51U2hvd0Fsd2F5cyA9ICdjb3JldWktdGFibGVfX2NvbHVtbi1tZW51LWFsd2F5cyc7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoY29sdW1uT3B0aW9ucy5tZW51Lmhhc093blByb3BlcnR5KCdwb3NpdGlvbicpICYmIHR5cGVvZiBjb2x1bW5PcHRpb25zLm1lbnUucG9zaXRpb24gPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lbnVQb3NpdGlvbiA9IGNvbHVtbk9wdGlvbnMubWVudS5wb3NpdGlvbjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGNvbHVtbk9wdGlvbnMubWVudS5pdGVtcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KGl0ZW0pICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtLmhhc093blByb3BlcnR5KCd0eXBlJykgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVvZiBpdGVtLnR5cGUgPT09ICdzdHJpbmcnICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtLnR5cGVcclxuICAgICAgICAgICAgICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGl0ZW0udHlwZS50b0xvd2VyQ2FzZSgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnYnV0dG9uJzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0uaGFzT3duUHJvcGVydHkoJ3RleHQnKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGl0ZW0udGV4dCA9PT0gJ3N0cmluZycgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0uaGFzT3duUHJvcGVydHkoJ29uQ2xpY2snKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWydzdHJpbmcnLCAnZnVuY3Rpb24nXS5pbmRleE9mKHR5cGVvZiBpdGVtLm9uQ2xpY2spID49IDAgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0udGV4dC5sZW5ndGggPiAwXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGF0dHJJdGVtID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgYXR0ciAgICAgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2J1dHRvbicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M6ICdkcm9wZG93bi1pdGVtJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0uaGFzT3duUHJvcGVydHkoJ2F0dHInKSAmJiBjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KGl0ZW0uYXR0cikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyID0gY29yZXVpVGFibGVVdGlscy5tZXJnZUF0dHIoYXR0ciwgaXRlbS5hdHRyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLmVhY2goYXR0ciwgZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0ckl0ZW0ucHVzaChuYW1lICsgJz1cIicgKyB2YWx1ZSArICdcIicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG1lbnVFbGVtZW50ID0gJChjb3JldWlUYWJsZVV0aWxzLnJlbmRlcihjb3JldWlUYWJsZVRwbFsndGFibGUvY29sdW1ucy9tZW51L2J1dHRvbi5odG1sJ10sIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBpdGVtLnRleHQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cjogYXR0ckl0ZW0uam9pbignICcpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lbnVFbGVtZW50LmZpbmQoJ2J1dHRvbicpLmNsaWNrKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGl0ZW0ub25DbGljayA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtLm9uQ2xpY2sodGFibGUpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBpdGVtLm9uQ2xpY2sgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChuZXcgRnVuY3Rpb24oJ3RhYmxlJywgaXRlbS5vbkNsaWNrKSkodGFibGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lbnVFbGVtZW50cy5wdXNoKG1lbnVFbGVtZW50KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnbGluayc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpdGVtLmhhc093blByb3BlcnR5KCd0ZXh0JykgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0uaGFzT3duUHJvcGVydHkoJ3VybCcpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlb2YgaXRlbS50ZXh0ID09PSAnc3RyaW5nJyAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGl0ZW0udXJsID09PSAnc3RyaW5nJyAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS50ZXh0Lmxlbmd0aCA+IDAgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0udXJsLmxlbmd0aCA+IDBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgYXR0ckl0ZW0gPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBhdHRyICAgICA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBocmVmOiBpdGVtLnVybCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzczogJ2Ryb3Bkb3duLWl0ZW0nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbS5oYXNPd25Qcm9wZXJ0eSgnYXR0cicpICYmIGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QoaXRlbS5hdHRyKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHIgPSBjb3JldWlUYWJsZVV0aWxzLm1lcmdlQXR0cihhdHRyLCBpdGVtLmF0dHIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQuZWFjaChhdHRyLCBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRySXRlbS5wdXNoKG5hbWUgKyAnPVwiJyArIHZhbHVlICsgJ1wiJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZW51RWxlbWVudHMucHVzaCgkKGNvcmV1aVRhYmxlVXRpbHMucmVuZGVyKGNvcmV1aVRhYmxlVHBsWyd0YWJsZS9jb2x1bW5zL21lbnUvbGluay5odG1sJ10sIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBpdGVtLnRleHQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cjogYXR0ckl0ZW0uam9pbignICcpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnZGl2aWRlcic6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lbnVFbGVtZW50cy5wdXNoKCQoY29yZXVpVGFibGVUcGxbJ3RhYmxlL2NvbHVtbnMvbWVudS9kaXZpZGVyLmh0bWwnXSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnaGVhZGVyJzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVudUVsZW1lbnRzLnB1c2goJChjb3JldWlUYWJsZVV0aWxzLnJlbmRlcihjb3JldWlUYWJsZVRwbFsndGFibGUvY29sdW1ucy9tZW51L2hlYWRlci5odG1sJ10sIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IGl0ZW0udGV4dFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChjb2x1bW5PcHRpb25zLmF0dHJIZWFkZXIgJiYgY29yZXVpVGFibGVVdGlscy5pc09iamVjdChjb2x1bW5PcHRpb25zLmF0dHJIZWFkZXIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJC5lYWNoKGNvbHVtbk9wdGlvbnMuYXR0ckhlYWRlciwgZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXMucHVzaChuYW1lICsgJz1cIicgKyB2YWx1ZSArICdcIicpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgc3R5bGUgPSBbXTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY29sdW1uT3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnd2lkdGgnKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgIFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIGNvbHVtbk9wdGlvbnMud2lkdGgpID49IDBcclxuICAgICAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCB1bml0ID0gdHlwZW9mIGNvbHVtbk9wdGlvbnMud2lkdGggPT09ICdudW1iZXInID8gJ3B4JyA6ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlLnB1c2goJ3dpZHRoOicgKyBjb2x1bW5PcHRpb25zLndpZHRoICsgdW5pdCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoY29sdW1uT3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnbWluV2lkdGgnKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgIFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIGNvbHVtbk9wdGlvbnMubWluV2lkdGgpID49IDBcclxuICAgICAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCB1bml0ID0gdHlwZW9mIGNvbHVtbk9wdGlvbnMubWluV2lkdGggPT09ICdudW1iZXInID8gJ3B4JyA6ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlLnB1c2goJ21pbi13aWR0aDonICsgY29sdW1uT3B0aW9ucy5taW5XaWR0aCArIHVuaXQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGNvbHVtbk9wdGlvbnMuaGFzT3duUHJvcGVydHkoJ21heFdpZHRoJykgJiZcclxuICAgICAgICAgICAgICAgICAgICBbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiBjb2x1bW5PcHRpb25zLm1heFdpZHRoKSA+PSAwXHJcbiAgICAgICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgdW5pdCA9IHR5cGVvZiBjb2x1bW5PcHRpb25zLm1heFdpZHRoID09PSAnbnVtYmVyJyA/ICdweCcgOiAnJztcclxuICAgICAgICAgICAgICAgICAgICBzdHlsZS5wdXNoKCdtYXgtd2lkdGg6JyArIGNvbHVtbk9wdGlvbnMubWF4V2lkdGggKyB1bml0KTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBjb2xHcm91cHMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHN0eWxlLmxlbmd0aCA+IDAgPyBzdHlsZS5qb2luKCc7JykgOiAnJ1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG5cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5zaG93SGVhZGVycykge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBsYWJlbCA9ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBkZXNjcmlwdGlvbiA9ICcnO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoY29sdW1uT3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnbGFiZWwnKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlb2YgY29sdW1uT3B0aW9ucy5sYWJlbCA9PT0gJ3N0cmluZycgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgKCFjb2x1bW5PcHRpb25zLmhhc093blByb3BlcnR5KCdzaG93TGFiZWwnKSB8fCBjb2x1bW5PcHRpb25zLnNob3dMYWJlbClcclxuICAgICAgICAgICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWwgPSBjb2x1bW5PcHRpb25zLmxhYmVsO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbHVtbk9wdGlvbnMuaGFzT3duUHJvcGVydHkoJ2Rlc2NyaXB0aW9uJykgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGNvbHVtbk9wdGlvbnMubGFiZWwgPT09ICdzdHJpbmcnXHJcbiAgICAgICAgICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uID0gY29sdW1uT3B0aW9ucy5kZXNjcmlwdGlvbjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGxldCBjb2x1bW5FbGVtZW50ID0gJChjb3JldWlUYWJsZVV0aWxzLnJlbmRlcihjb3JldWlUYWJsZVRwbFsndGFibGUvY29sdW1ucy90ZC5odG1sJ10sIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXR0ciAgICAgICAgICA6IGF0dHJpYnV0ZXMubGVuZ3RoID4gMCA/ICgnICcgKyBhdHRyaWJ1dGVzLmpvaW4oJyAnKSkgOiAnJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWwgICAgICAgICA6IGxhYmVsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbiAgIDogZGVzY3JpcHRpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNvcnRhYmxlICAgICAgOiBzb3J0YWJsZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXNzZXRNZW51ICAgICA6IG1lbnVFbGVtZW50cy5sZW5ndGggPiAwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtZW51UG9zaXRpb24gIDogbWVudVBvc2l0aW9uLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtZW51U2hvd0Fsd2F5czogbWVudVNob3dBbHdheXMgPyAnICcgKyBtZW51U2hvd0Fsd2F5cyA6ICcnLFxyXG4gICAgICAgICAgICAgICAgICAgIH0pKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1lbnVFbGVtZW50cy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG1lbnVDb250YWluZXIgPSBjb2x1bW5FbGVtZW50LmZpbmQoJy5jb3JldWktdGFibGVfX2NvbHVtbi1tZW51IHVsJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBtZW51QnV0dG9uICAgID0gY29sdW1uRWxlbWVudC5maW5kKCcuY29yZXVpLXRhYmxlX19jb2x1bW4tbWVudSAuZHJvcGRvd24tdG9nZ2xlJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtZW51QnV0dG9uLmNsaWNrKGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQub3JpZ2luYWxFdmVudC5jYW5jZWxCdWJibGUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lbnVFbGVtZW50cy5tYXAoZnVuY3Rpb24gKGVsZW1lbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lbnVDb250YWluZXIuYXBwZW5kKGVsZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGNvbHVtbkVsZW1lbnRzLmFwcGVuZChjb2x1bW5FbGVtZW50KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgLy8g0KHRgtGA0L7QutC4XHJcbiAgICAgICAgaWYgKHRhYmxlLl9yZWNvcmRzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgdGFibGUuX3JlY29yZHNUb3RhbCAgPSB0YWJsZS5nZXRSZWNvcmRzQ291bnQoKTtcclxuICAgICAgICAgICAgdGFibGUuX3JlY29yZHNOdW1iZXIgPSB0YWJsZS5fcGFnZSA9PT0gMVxyXG4gICAgICAgICAgICAgICAgPyAxXHJcbiAgICAgICAgICAgICAgICA6ICgodGFibGUuX3BhZ2UgLSAxKSAqIHRhYmxlLl9yZWNvcmRzUGVyUGFnZSkgKyAxO1xyXG5cclxuICAgICAgICAgICAgcmVjb3Jkc0VsZW1lbnRzID0gY29yZXVpVGFibGVSZW5kZXIucmVuZGVyUmVjb3Jkcyh0YWJsZSwgdGFibGUuX3JlY29yZHMpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJlY29yZHNFbGVtZW50cyA9IGNvcmV1aVRhYmxlUmVuZGVyLnJlbmRlclJlY29yZHModGFibGUsIFtdKTtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICBpZiAob3B0aW9ucy5zaG93SGVhZGVycyAmJlxyXG4gICAgICAgICAgICBvcHRpb25zLmhhc093blByb3BlcnR5KCdjb2x1bW5zSGVhZGVyJykgJiZcclxuICAgICAgICAgICAgQXJyYXkuaXNBcnJheShvcHRpb25zLmNvbHVtbnNIZWFkZXIpICYmXHJcbiAgICAgICAgICAgIG9wdGlvbnMuY29sdW1uc0hlYWRlci5sZW5ndGggPiAwXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIGxldCByb3dzID0gW107XHJcblxyXG4gICAgICAgICAgICAkLmVhY2gob3B0aW9ucy5jb2x1bW5zSGVhZGVyLCBmdW5jdGlvbiAoa2V5LCBoZWFkZXJSb3cpIHtcclxuICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGhlYWRlclJvdykpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgY2VsbHMgPSBbXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgJC5lYWNoKGhlYWRlclJvdywgZnVuY3Rpb24gKGtleSwgaGVhZGVyQ29sdW1uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KGhlYWRlckNvbHVtbikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBhdHRyaWJ1dGVzID0gW107XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhlYWRlckNvbHVtbi5oYXNPd25Qcm9wZXJ0eSgnYXR0cicpICYmIGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QoaGVhZGVyQ29sdW1uLmF0dHIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJC5lYWNoKGhlYWRlckNvbHVtbi5hdHRyLCBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlcy5wdXNoKG5hbWUgKyAnPVwiJyArIHZhbHVlICsgJ1wiJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2VsbHMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudDogaGVhZGVyQ29sdW1uLmhhc093blByb3BlcnR5KCdjb250ZW50JykgPyBoZWFkZXJDb2x1bW4uY29udGVudCA6ICcnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBoZWFkZXJDb2x1bW4uaGFzT3duUHJvcGVydHkoJ2Rlc2NyaXB0aW9uJykgPyBoZWFkZXJDb2x1bW4uZGVzY3JpcHRpb24gOiAnJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyOiBhdHRyaWJ1dGVzLmxlbmd0aCA+IDAgPyAnICcgKyBhdHRyaWJ1dGVzLmpvaW4oJyAnKSA6ICcnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcm93cy5wdXNoKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb3JldWlUYWJsZVV0aWxzLnJlbmRlcihjb3JldWlUYWJsZVRwbFsndGFibGUvY29sdW1ucy9oZWFkZXIuaHRtbCddLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2x1bW5zOiBjZWxscyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIGNvbHVtbnNIZWFkZXIgPSByb3dzLmpvaW4oJycpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKG9wdGlvbnMuaGFzT3duUHJvcGVydHkoJ2NvbHVtbnNGb290ZXInKSAmJlxyXG4gICAgICAgICAgICBBcnJheS5pc0FycmF5KG9wdGlvbnMuY29sdW1uc0Zvb3RlcikgJiZcclxuICAgICAgICAgICAgb3B0aW9ucy5jb2x1bW5zRm9vdGVyLmxlbmd0aCA+IDBcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgbGV0IHJvd3MgPSBbXTtcclxuXHJcbiAgICAgICAgICAgICQuZWFjaChvcHRpb25zLmNvbHVtbnNGb290ZXIsIGZ1bmN0aW9uIChrZXksIGZvb3RlclJvdykge1xyXG4gICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZm9vdGVyUm93KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBjZWxscyA9IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAkLmVhY2goZm9vdGVyUm93LCBmdW5jdGlvbiAoa2V5LCBmb290ZXJDb2x1bW4pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QoZm9vdGVyQ29sdW1uKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGF0dHJpYnV0ZXMgPSBbXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZm9vdGVyQ29sdW1uLmhhc093blByb3BlcnR5KCdhdHRyJykgJiYgY29yZXVpVGFibGVVdGlscy5pc09iamVjdChmb290ZXJDb2x1bW4uYXR0cikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLmVhY2goZm9vdGVyQ29sdW1uLmF0dHIsIGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzLnB1c2gobmFtZSArICc9XCInICsgdmFsdWUgKyAnXCInKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZWxscy5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBmb290ZXJDb2x1bW4uaGFzT3duUHJvcGVydHkoJ2NvbnRlbnQnKSA/IGZvb3RlckNvbHVtbi5jb250ZW50IDogJycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IGZvb3RlckNvbHVtbi5oYXNPd25Qcm9wZXJ0eSgnZGVzY3JpcHRpb24nKSA/IGZvb3RlckNvbHVtbi5kZXNjcmlwdGlvbiA6ICcnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHI6IGF0dHJpYnV0ZXMubGVuZ3RoID4gMCA/ICcgJyArIGF0dHJpYnV0ZXMuam9pbignICcpIDogJycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICByb3dzLnB1c2goXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvcmV1aVRhYmxlVXRpbHMucmVuZGVyKGNvcmV1aVRhYmxlVHBsWyd0YWJsZS9jb2x1bW5zL2Zvb3Rlci5odG1sJ10sIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbHVtbnM6IGNlbGxzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgY29sdW1uc0Zvb3RlciA9IHJvd3Muam9pbignJyk7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcblxyXG4gICAgICAgIGxldCBjbGFzc2VzID0gW107XHJcblxyXG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5jbGFzcyA9PT0gJ3N0cmluZycgJiYgb3B0aW9ucy5jbGFzcykge1xyXG4gICAgICAgICAgICBjbGFzc2VzLnB1c2gob3B0aW9ucy5jbGFzcyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoICEgY29sdW1uc0Zvb3Rlcikge1xyXG4gICAgICAgICAgICBjbGFzc2VzLnB1c2goJ2VtcHR5LXRmb290Jyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgdGhlYWRBdHRyID0gW107XHJcblxyXG4gICAgICAgIGlmIChvcHRpb25zLmhhc093blByb3BlcnR5KCd0aGVhZFRvcCcpICYmXHJcbiAgICAgICAgICAgIFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIG9wdGlvbnMudGhlYWRUb3ApID49IDBcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgbGV0IHVuaXQgPSBjb3JldWlUYWJsZVV0aWxzLmlzTnVtZXJpYyhvcHRpb25zLnRoZWFkVG9wKSA/ICdweCcgOiAnJztcclxuICAgICAgICAgICAgdGhlYWRBdHRyLnB1c2goJ3N0eWxlPVwidG9wOicgKyBvcHRpb25zLnRoZWFkVG9wICsgdW5pdCArICdcIicpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IHRhYmxlRWxlbWVudCA9ICQoY29yZXVpVGFibGVVdGlscy5yZW5kZXIoY29yZXVpVGFibGVUcGxbJ3RhYmxlLmh0bWwnXSwge1xyXG4gICAgICAgICAgICBjbGFzc2VzOiBjbGFzc2VzLmpvaW4oJyAnKSxcclxuICAgICAgICAgICAgdGhlYWRBdHRyOiB0aGVhZEF0dHIubGVuZ3RoID4gMCA/IHRoZWFkQXR0ci5qb2luKCcgJykgOiAnJyxcclxuICAgICAgICAgICAgc2hvd0hlYWRlcnM6IG9wdGlvbnMuc2hvd0hlYWRlcnMsXHJcbiAgICAgICAgICAgIGNvbHVtbnNIZWFkZXIgOiBjb2x1bW5zSGVhZGVyLFxyXG4gICAgICAgICAgICBjb2xHcm91cHMgOiBjb2xHcm91cHMsXHJcbiAgICAgICAgICAgIGNvbHVtbnNGb290ZXIgOiBjb2x1bW5zRm9vdGVyLFxyXG4gICAgICAgIH0pKTtcclxuXHJcblxyXG4gICAgICAgIGlmIChvcHRpb25zLnNob3dIZWFkZXJzKSB7XHJcbiAgICAgICAgICAgIHRhYmxlRWxlbWVudC5maW5kKCd0aGVhZCcpLmFwcGVuZChjb2x1bW5FbGVtZW50cyk7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgbGV0IHRib2R5ID0gdGFibGVFbGVtZW50LmZpbmQoJ3Rib2R5Jyk7XHJcblxyXG4gICAgICAgIHJlY29yZHNFbGVtZW50cy5tYXAoZnVuY3Rpb24gKHJlY29yZEVsZW1lbnQpIHtcclxuICAgICAgICAgICAgdGJvZHkuYXBwZW5kKHJlY29yZEVsZW1lbnQpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gdGFibGVFbGVtZW50XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCh0LHQvtGA0LrQsCDQt9Cw0L/QuNGB0LXQuSDRgtCw0LHQu9C40YbRi1xyXG4gICAgICogQHBhcmFtIHtvYmplY3R9IHRhYmxlXHJcbiAgICAgKiBAcGFyYW0ge0FycmF5fSAgcmVjb3Jkc1xyXG4gICAgICogQHJldHVybiB7QXJyYXl9XHJcbiAgICAgKi9cclxuICAgIHJlbmRlclJlY29yZHM6IGZ1bmN0aW9uICh0YWJsZSwgcmVjb3Jkcykge1xyXG5cclxuICAgICAgICBsZXQgcmVuZGVyUmVjb3JkcyA9IFtdO1xyXG5cclxuICAgICAgICBpZiAocmVjb3Jkcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIGxldCB0aGF0ICAgID0gdGhpcztcclxuICAgICAgICAgICAgbGV0IG9wdGlvbnMgPSB0YWJsZS5nZXRPcHRpb25zKCk7XHJcbiAgICAgICAgICAgIGxldCBncm91cCAgID0gb3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnZ3JvdXAnKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3Qob3B0aW9ucy5ncm91cCkgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zLmdyb3VwLmhhc093blByb3BlcnR5KCdmaWVsZCcpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIG9wdGlvbnMuZ3JvdXAuZmllbGQgPT09ICdzdHJpbmcnICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5ncm91cC5maWVsZFxyXG4gICAgICAgICAgICAgICAgPyBvcHRpb25zLmdyb3VwXHJcbiAgICAgICAgICAgICAgICA6IG51bGw7XHJcblxyXG5cclxuICAgICAgICAgICAgaWYgKGdyb3VwKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgZ3JvdXBWYWx1ZSAgICA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICBsZXQgZ3JvdXBJbmRleCAgICA9IDA7XHJcbiAgICAgICAgICAgICAgICBsZXQgcmVjb3Jkc0dyb3VwcyA9IHt9O1xyXG5cclxuICAgICAgICAgICAgICAgIHJlY29yZHMubWFwKGZ1bmN0aW9uIChyZWNvcmQpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocmVjb3JkLnNob3cpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlY29yZC5kYXRhLmhhc093blByb3BlcnR5KGdyb3VwLmZpZWxkKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2YgcmVjb3JkLmRhdGFbZ3JvdXAuZmllbGRdKSA+PSAwICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBncm91cFZhbHVlICE9IHJlY29yZC5kYXRhW2dyb3VwLmZpZWxkXVxyXG4gICAgICAgICAgICAgICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdyb3VwVmFsdWUgPSByZWNvcmQuZGF0YVtncm91cC5maWVsZF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBncm91cEluZGV4Kys7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggISByZWNvcmRzR3JvdXBzLmhhc093blByb3BlcnR5KGdyb3VwSW5kZXgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWNvcmRzR3JvdXBzW2dyb3VwSW5kZXhdID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzR3JvdXA6IGdyb3VwSW5kZXggPiAwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlY29yZHM6IFtdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVjb3Jkc0dyb3Vwc1tncm91cEluZGV4XS5yZWNvcmRzLnB1c2gocmVjb3JkKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAkLmVhY2gocmVjb3Jkc0dyb3VwcywgZnVuY3Rpb24gKGtleSwgcmVjb3Jkc0dyb3VwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJlbmRlclJlY29yZHNHcm91cCA9IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICByZWNvcmRzR3JvdXAucmVjb3Jkcy5tYXAoZnVuY3Rpb24gKHJlY29yZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZW5kZXJSZWNvcmRzR3JvdXAucHVzaCh0aGF0LnJlbmRlclJlY29yZCh0YWJsZSwgcmVjb3JkKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhYmxlLl9yZWNvcmRzTnVtYmVyKys7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChyZWNvcmRzR3JvdXAuaXNHcm91cCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZW5kZXJSZWNvcmRzLnB1c2godGhhdC5yZW5kZXJHcm91cCh0YWJsZSwgZ3JvdXAsIHJlY29yZHNHcm91cC5yZWNvcmRzWzBdLCByZW5kZXJSZWNvcmRzR3JvdXApKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJlbmRlclJlY29yZHNHcm91cC5tYXAoZnVuY3Rpb24gKHJlY29yZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZW5kZXJSZWNvcmRzLnB1c2gocmVjb3JkKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJlY29yZHMubWFwKGZ1bmN0aW9uIChyZWNvcmQpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocmVjb3JkLnNob3cpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVyUmVjb3Jkcy5wdXNoKHRoYXQucmVuZGVyUmVjb3JkKHRhYmxlLCByZWNvcmQpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGFibGUuX3JlY29yZHNOdW1iZXIrKztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHJlbmRlclJlY29yZHMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgIHJlbmRlclJlY29yZHMgPSBbXHJcbiAgICAgICAgICAgICAgICAkKGNvcmV1aVRhYmxlVXRpbHMucmVuZGVyKGNvcmV1aVRhYmxlVHBsWyd0YWJsZS9yZWNvcmQvZW1wdHkuaHRtbCddLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29sdW1uc0NvdW50OiB0YWJsZS5fY291bnRDb2x1bW5zU2hvdyxcclxuICAgICAgICAgICAgICAgICAgICBsYW5nOiB0YWJsZS5nZXRMYW5nKCksXHJcbiAgICAgICAgICAgICAgICB9KSlcclxuICAgICAgICAgICAgXTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiByZW5kZXJSZWNvcmRzO1xyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQodCx0L7RgNC60LAg0LfQsNC/0LjRgdC4INGC0LDQsdC70LjRhtGLXHJcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gdGFibGVcclxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSByZWNvcmRcclxuICAgICAqIEByZXR1cm5zIHt7IGF0dHI6IChzdHJpbmcpLCBmaWVsZHM6IChvYmplY3QpIH19fVxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgcmVuZGVyUmVjb3JkOiBmdW5jdGlvbiAodGFibGUsIHJlY29yZCkge1xyXG5cclxuICAgICAgICBsZXQgdGhhdCAgICAgICA9IHRoaXM7XHJcbiAgICAgICAgbGV0IG9wdGlvbnMgICAgPSB0YWJsZS5nZXRPcHRpb25zKCk7XHJcbiAgICAgICAgbGV0IGZpZWxkcyAgICAgPSBbXTtcclxuICAgICAgICBsZXQgcmVjb3JkQXR0ciA9IHtcclxuICAgICAgICAgICAgY2xhc3M6ICdjb3JldWktdGFibGVfX3JlY29yZCdcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB0YWJsZS5fY29sdW1ucy5tYXAoZnVuY3Rpb24gKGNvbHVtbikge1xyXG4gICAgICAgICAgICBpZiAoICEgY29sdW1uLmlzU2hvdygpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGxldCBmaWVsZENvbnRlbnQgPSB0aGF0LnJlbmRlckZpZWxkKHRhYmxlLCBjb2x1bW4sIHJlY29yZCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoZmllbGRDb250ZW50KSB7XHJcbiAgICAgICAgICAgICAgICBmaWVsZHMucHVzaChmaWVsZENvbnRlbnQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5vbkNsaWNrVXJsID09PSAnc3RyaW5nJyAmJiBvcHRpb25zLm9uQ2xpY2tVcmwpIHtcclxuICAgICAgICAgICAgcmVjb3JkQXR0ci5jbGFzcyArPSAnIGNvcmV1aS10YWJsZV9wb2ludGVyJztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChyZWNvcmQubWV0YSkge1xyXG4gICAgICAgICAgICByZWNvcmRBdHRyID0gY29yZXVpVGFibGVVdGlscy5tZXJnZUF0dHIocmVjb3JkQXR0ciwgcmVjb3JkLm1ldGEuYXR0cik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgYXR0cmlidXRlcyA9IFtdO1xyXG5cclxuICAgICAgICAkLmVhY2gocmVjb3JkQXR0ciwgZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XHJcbiAgICAgICAgICAgIGF0dHJpYnV0ZXMucHVzaChuYW1lICsgJz1cIicgKyB2YWx1ZSArICdcIicpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBsZXQgcmVjb3JkRWxlbWVudCA9ICQoXHJcbiAgICAgICAgICAgIGNvcmV1aVRhYmxlVXRpbHMucmVuZGVyKGNvcmV1aVRhYmxlVHBsWyd0YWJsZS9yZWNvcmQuaHRtbCddLCB7XHJcbiAgICAgICAgICAgICAgICBhdHRyICA6IGF0dHJpYnV0ZXMubGVuZ3RoID4gMCA/ICgnICcgKyBhdHRyaWJ1dGVzLmpvaW4oJyAnKSkgOiAnJyxcclxuICAgICAgICAgICAgICAgIGluZGV4IDogcmVjb3JkLmluZGV4LFxyXG4gICAgICAgICAgICAgICAgZmllbGRzOiBmaWVsZHNcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICBmaWVsZHMubWFwKGZ1bmN0aW9uIChmaWVsZCwga2V5KSB7XHJcbiAgICAgICAgICAgICQocmVjb3JkRWxlbWVudFswXS5xdWVyeVNlbGVjdG9yKCc6c2NvcGUgPiB0ZDpudGgtY2hpbGQoJyArIChrZXkgKyAxKSArICcpJykpLmFwcGVuZChmaWVsZC5jb250ZW50KVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gcmVjb3JkRWxlbWVudDtcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KHQsdC+0YDQutCwINGP0YfQtdC50LrQuCDRgtCw0LHQu9C40YbRi1xyXG4gICAgICogQHBhcmFtIHtvYmplY3R9IHRhYmxlXHJcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gY29sdW1uXHJcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gcmVjb3JkXHJcbiAgICAgKiBAcmV0dXJucyB7eyBhdHRyOiAoc3RyaW5nKSwgY29udGVudDogKHN0cmluZykgfX1cclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIHJlbmRlckZpZWxkOiBmdW5jdGlvbiAodGFibGUsIGNvbHVtbiwgcmVjb3JkKSB7XHJcblxyXG4gICAgICAgIGxldCBjb2x1bW5PcHRpb25zID0gY29sdW1uLmdldE9wdGlvbnMoKTtcclxuICAgICAgICBsZXQgY29sdW1uRmllbGQgICA9IGNvbHVtbi5nZXRGaWVsZCgpO1xyXG4gICAgICAgIGxldCBjb250ZW50ICAgICAgID0gbnVsbDtcclxuICAgICAgICBsZXQgZmllbGRQcm9wcyAgICA9IHJlY29yZC5tZXRhICYmIHJlY29yZC5tZXRhLmhhc093blByb3BlcnR5KCdmaWVsZHMnKSAmJiByZWNvcmQubWV0YS5maWVsZHMuaGFzT3duUHJvcGVydHkoY29sdW1uRmllbGQpXHJcbiAgICAgICAgICAgID8gcmVjb3JkLm1ldGEuZmllbGRzW2NvbHVtbkZpZWxkXVxyXG4gICAgICAgICAgICA6IG51bGw7XHJcbiAgICAgICAgbGV0IGZpZWxkQXR0ciA9IGNvbHVtbk9wdGlvbnMuaGFzT3duUHJvcGVydHkoJ2F0dHInKSAmJiBjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KGNvbHVtbk9wdGlvbnMuYXR0cilcclxuICAgICAgICAgICAgPyBjb2x1bW5PcHRpb25zLmF0dHJcclxuICAgICAgICAgICAgOiB7fTtcclxuXHJcbiAgICAgICAgaWYgKGZpZWxkUHJvcHMgJiYgY29yZXVpVGFibGVVdGlscy5pc09iamVjdChmaWVsZFByb3BzKSkge1xyXG4gICAgICAgICAgICBpZiAoZmllbGRQcm9wcyAmJiBmaWVsZFByb3BzLmhhc093blByb3BlcnR5KCdzaG93JykgJiYgISBmaWVsZFByb3BzLnNob3cpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoY29yZXVpVGFibGVVdGlscy5pc09iamVjdChmaWVsZFByb3BzLmF0dHIpKSB7XHJcbiAgICAgICAgICAgICAgICBmaWVsZEF0dHIgPSBjb3JldWlUYWJsZVV0aWxzLm1lcmdlQXR0cihmaWVsZEF0dHIsIGZpZWxkUHJvcHMuYXR0cik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChjb2x1bW5PcHRpb25zLmhhc093blByb3BlcnR5KCdmaXhlZCcpICYmIHR5cGVvZiBjb2x1bW5PcHRpb25zLmZpeGVkID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICBmaWVsZEF0dHIgPSBjb3JldWlUYWJsZVV0aWxzLm1lcmdlQXR0cihmaWVsZEF0dHIsIHtcclxuICAgICAgICAgICAgICAgIGNsYXNzOiAnY29yZXVpLXRhYmxlX19maXhlZF8nICsgY29sdW1uT3B0aW9ucy5maXhlZFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0eXBlb2YgY29sdW1uT3B0aW9ucy5yZW5kZXIgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgY29udGVudCA9IGNvbHVtbk9wdGlvbnMucmVuZGVyKHtcclxuICAgICAgICAgICAgICAgIGRhdGE6IHJlY29yZC5kYXRhLFxyXG4gICAgICAgICAgICAgICAgbWV0YTogcmVjb3JkLm1ldGEsXHJcbiAgICAgICAgICAgICAgICBpbmRleDogcmVjb3JkLmluZGV4LFxyXG4gICAgICAgICAgICB9LCB0YWJsZSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY29udGVudCA9IGNvbHVtbkZpZWxkICYmIHJlY29yZC5kYXRhLmhhc093blByb3BlcnR5KGNvbHVtbkZpZWxkKVxyXG4gICAgICAgICAgICAgICAgPyByZWNvcmQuZGF0YVtjb2x1bW5GaWVsZF1cclxuICAgICAgICAgICAgICAgIDogbnVsbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnRlbnQgPSBjb2x1bW4ucmVuZGVyKGNvbnRlbnQsIHJlY29yZCk7XHJcblxyXG4gICAgICAgIGxldCBmaWVsZEF0dHJSZXN1bHQgPSBbXTtcclxuXHJcbiAgICAgICAgJC5lYWNoKGZpZWxkQXR0ciwgZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XHJcbiAgICAgICAgICAgIGZpZWxkQXR0clJlc3VsdC5wdXNoKG5hbWUgKyAnPVwiJyArIHZhbHVlICsgJ1wiJyk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGF0dHI6ICAgIGZpZWxkQXR0clJlc3VsdC5sZW5ndGggPiAwID8gKCcgJyArIGZpZWxkQXR0clJlc3VsdC5qb2luKCcgJykpIDogJycsXHJcbiAgICAgICAgICAgIGNvbnRlbnQ6IGNvbnRlbnQsXHJcbiAgICAgICAgfTtcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KHQsdC+0YDQutCwINC30LDQv9C40YHQuC3Qs9GA0YPQv9C/0YtcclxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSB0YWJsZVxyXG4gICAgICogQHBhcmFtIHtvYmplY3R9IGdyb3VwXHJcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gcmVjb3JkXHJcbiAgICAgKiBAcGFyYW0ge0FycmF5fSAgcmVuZGVyUmVjb3Jkc1xyXG4gICAgICogQHJldHVybnMge3sgYXR0cjogKHN0cmluZyksIGZpZWxkczogKG9iamVjdCkgfX19XHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICByZW5kZXJHcm91cDogZnVuY3Rpb24gKHRhYmxlLCBncm91cCwgcmVjb3JkLCByZW5kZXJSZWNvcmRzKSB7XHJcblxyXG4gICAgICAgIGxldCBhdHRyID0gZ3JvdXAuaGFzT3duUHJvcGVydHkoJ2F0dHInKSAmJiBjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KGdyb3VwLmF0dHIpXHJcbiAgICAgICAgICAgID8gZ3JvdXAuYXR0clxyXG4gICAgICAgICAgICA6IHt9O1xyXG5cclxuICAgICAgICBpZiAoYXR0ci5oYXNPd25Qcm9wZXJ0eSgnY2xhc3MnKSAmJiB0eXBlb2YgYXR0ci5jbGFzcyA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgYXR0ci5jbGFzcyArPSAnIGNvcmV1aS10YWJsZV9fcmVjb3JkLWdyb3VwJztcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBhdHRyLmNsYXNzID0gJ2NvcmV1aS10YWJsZV9fcmVjb3JkLWdyb3VwJztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBhdHRyaWJ1dGVzID0gW107XHJcblxyXG4gICAgICAgICQuZWFjaChhdHRyLCBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcclxuICAgICAgICAgICAgaWYgKFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIHZhbHVlKSA+PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzLnB1c2gobmFtZSArICc9XCInICsgdmFsdWUgKyAnXCInKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBsZXQgaXNDb2xsYXBzaW5nID0gZ3JvdXAuaGFzT3duUHJvcGVydHkoJ2lzQ29sbGFwc2luZycpID8gISEgZ3JvdXAuaXNDb2xsYXBzaW5nIDogZmFsc2U7XHJcblxyXG4gICAgICAgIGxldCBncm91cEVsZW1lbnQgPSAkKGNvcmV1aVRhYmxlVXRpbHMucmVuZGVyKGNvcmV1aVRhYmxlVHBsWyd0YWJsZS9yZWNvcmQvZ3JvdXAuaHRtbCddLCB7XHJcbiAgICAgICAgICAgIGF0dHI6IGF0dHJpYnV0ZXMubGVuZ3RoID4gMCA/ICgnICcgKyBhdHRyaWJ1dGVzLmpvaW4oJyAnKSkgOiAnJyxcclxuICAgICAgICAgICAgY29sc3BhbjogdGFibGUuX2NvdW50Q29sdW1uc1Nob3csXHJcbiAgICAgICAgICAgIGlzQ29sbGFwc2luZzogaXNDb2xsYXBzaW5nXHJcbiAgICAgICAgfSkpO1xyXG5cclxuICAgICAgICBsZXQgdGQgICAgICA9IGdyb3VwRWxlbWVudC5maW5kKCcgPiB0ZCcpO1xyXG4gICAgICAgIGxldCBjb250ZW50ID0gcmVjb3JkLmRhdGFbZ3JvdXAuZmllbGRdO1xyXG5cclxuXHJcbiAgICAgICAgaWYgKGdyb3VwLmhhc093blByb3BlcnR5KCdyZW5kZXInKSkge1xyXG4gICAgICAgICAgICBsZXQgcmVuZGVyQ29udGVudCA9IG51bGw7XHJcblxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGdyb3VwLnJlbmRlciA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICAgICAgcmVuZGVyQ29udGVudCA9IGdyb3VwLnJlbmRlcihyZWNvcmQpO1xyXG5cclxuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgZ3JvdXAucmVuZGVyID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICAgICAgcmVuZGVyQ29udGVudCA9IChuZXcgRnVuY3Rpb24oJ3JlY29yZCcsIGdyb3VwLnJlbmRlcikpKHJlY29yZCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChyZW5kZXJDb250ZW50KSB7XHJcbiAgICAgICAgICAgICAgICBjb250ZW50ID0gcmVuZGVyQ29udGVudDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIGlmIChpc0NvbGxhcHNpbmcpIHtcclxuICAgICAgICAgICAgbGV0IGNvbGxhcHNlZCA9ICQoJzxpIGNsYXNzPVwiYmkgYmktY2hldnJvbi1kb3duIGNvcmV1aS10YWJsZV9wb2ludGVyIG1lLTFcIj48L2k+Jyk7XHJcblxyXG4gICAgICAgICAgICBjb2xsYXBzZWQuY2xpY2soZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCQodGhpcykuaGFzQ2xhc3MoJ2JpLWNoZXZyb24tZG93bicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5yZW1vdmVDbGFzcygnYmktY2hldnJvbi1kb3duJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCdiaS1jaGV2cm9uLXJpZ2h0Jyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJlbmRlclJlY29yZHMubWFwKGZ1bmN0aW9uIChyZW5kZXJSZWNvcmQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJChyZW5kZXJSZWNvcmQpLmZhZGVPdXQoMTAwKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICQodGhpcykucmVtb3ZlQ2xhc3MoJ2JpLWNoZXZyb24tcmlnaHQnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ2JpLWNoZXZyb24tZG93bicpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICByZW5kZXJSZWNvcmRzLm1hcChmdW5jdGlvbiAocmVuZGVyUmVjb3JkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICQocmVuZGVyUmVjb3JkKS5mYWRlSW4oMTAwKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICB0ZC5hcHBlbmQoY29sbGFwc2VkKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRkLmFwcGVuZChjb250ZW50KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGdyb3VwRWxlbWVudDtcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KHQsdC+0YDQutCwINGA0LDRgdC60YDRi9Cy0LDRjtGJ0LXQudGB0Y8g0YHRgtGA0L7QutC4XHJcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gICAgICAgdGFibGVcclxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBjb250ZW50XHJcbiAgICAgKi9cclxuICAgIHJlbmRlckV4cGFuZDogZnVuY3Rpb24gKHRhYmxlLCBjb250ZW50KSB7XHJcblxyXG4gICAgICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgICAgICAgY29udGVudCA9IGNvcmV1aVRhYmxlUmVuZGVyLnJlbmRlckNvbXBvbmVudHModGFibGUsIGNvbnRlbnQsICdyZWNvcmRfZXhwYW5kX3Nob3cnKTtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICBsZXQgZXhwYW5kUmVjb3JkID0gJChjb3JldWlUYWJsZVV0aWxzLnJlbmRlcihjb3JldWlUYWJsZVRwbFsndGFibGUvcmVjb3JkL2V4cGFuZC5odG1sJ10sIHtcclxuICAgICAgICAgICAgY29sc3BhbjogdGFibGUuX2NvdW50Q29sdW1uc1Nob3csXHJcbiAgICAgICAgfSkpO1xyXG5cclxuICAgICAgICBpZiAoWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2YgY29udGVudCkgPj0gMCkge1xyXG4gICAgICAgICAgICBleHBhbmRSZWNvcmQuZmluZCgndGQnKS5odG1sKGNvbnRlbnQpXHJcblxyXG4gICAgICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShjb250ZW50KSkge1xyXG4gICAgICAgICAgICAkLmVhY2goY29udGVudCwgZnVuY3Rpb24gKGtleSwgaXRlbSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIGl0ZW0pID49IDAgfHxcclxuICAgICAgICAgICAgICAgICAgICBpdGVtIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQgfHxcclxuICAgICAgICAgICAgICAgICAgICAod2luZG93Lmhhc093blByb3BlcnR5KCdqUXVlcnknKSAmJiBpdGVtIGluc3RhbmNlb2YgalF1ZXJ5KVxyXG4gICAgICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZXhwYW5kUmVjb3JkLmZpbmQoJ3RkJykuYXBwZW5kKGl0ZW0pXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGV4cGFuZFJlY29yZDtcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KHQsdC+0YDQutCwINGN0LvQtdC80LXQvdGC0LAg0YPQv9GA0LDQstC70LXQvdC40Y9cclxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSB0YWJsZVxyXG4gICAgICogQHBhcmFtIHtvYmplY3R9IGNvbnRyb2xcclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKiBAcmV0dXJucyB7SFRNTEVsZW1lbnR8alF1ZXJ5fVxyXG4gICAgICovXHJcbiAgICByZW5kZXJDb250cm9sOiBmdW5jdGlvbiAodGFibGUsIGNvbnRyb2wpIHtcclxuXHJcbiAgICAgICAgaWYgKGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QoY29udHJvbCkpIHtcclxuICAgICAgICAgICAgbGV0IGNvbnRyb2xFbGVtZW50ID0gJChjb3JldWlUYWJsZVV0aWxzLnJlbmRlcihjb3JldWlUYWJsZVRwbFsndGFibGUvY29udHJvbC5odG1sJ10sIHtcclxuICAgICAgICAgICAgICAgIGlkOiBjb250cm9sLmdldElkKClcclxuICAgICAgICAgICAgfSkpO1xyXG5cclxuICAgICAgICAgICAgY29udHJvbEVsZW1lbnQuYXBwZW5kKGNvbnRyb2wucmVuZGVyKCkpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGNvbnRyb2xFbGVtZW50O1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KTQvtGA0LzQuNGA0L7QstCw0L3QuNC1INC60L7QvdGC0LXQvdGC0LAg0LrQvtC80L/QvtC90LXQvdGC0LBcclxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSB0YWJsZVxyXG4gICAgICogQHBhcmFtIHtvYmplY3R9IGNvbXBvbmVudHNcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudE5hbWVcclxuICAgICAqIEByZXR1cm4ge0FycmF5fVxyXG4gICAgICovXHJcbiAgICByZW5kZXJDb21wb25lbnRzOiBmdW5jdGlvbiAodGFibGUsIGNvbXBvbmVudHMsIGV2ZW50TmFtZSkge1xyXG5cclxuICAgICAgICBsZXQgcmVzdWx0ID0gW107XHJcblxyXG4gICAgICAgIGlmIChjb21wb25lbnRzIGluc3RhbmNlb2YgT2JqZWN0KSB7XHJcbiAgICAgICAgICAgIGlmICggISBBcnJheS5pc0FycmF5KGNvbXBvbmVudHMpKSB7XHJcbiAgICAgICAgICAgICAgICBjb21wb25lbnRzID0gWyBjb21wb25lbnRzIF07XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY29tcG9uZW50cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjb21wb25lbnRzW2ldID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKGNvbXBvbmVudHNbaV0pO1xyXG5cclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoICEgQXJyYXkuaXNBcnJheShjb21wb25lbnRzW2ldKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudHNbaV0uaGFzT3duUHJvcGVydHkoJ2NvbXBvbmVudCcpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50c1tpXS5jb21wb25lbnQuc3Vic3RyaW5nKDAsIDYpID09PSAnY29yZXVpJ1xyXG4gICAgICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IG5hbWUgPSBjb21wb25lbnRzW2ldLmNvbXBvbmVudC5zcGxpdCgnLicpWzFdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoQ29yZVVJLmhhc093blByb3BlcnR5KG5hbWUpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QoQ29yZVVJW25hbWVdKVxyXG4gICAgICAgICAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgaW5zdGFuY2UgPSBDb3JlVUlbbmFtZV0uY3JlYXRlKGNvbXBvbmVudHNbaV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChpbnN0YW5jZS5yZW5kZXIoKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnROYW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YWJsZS5vbihldmVudE5hbWUsIGluc3RhbmNlLmluaXRFdmVudHMsIGluc3RhbmNlLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNvcmV1aVRhYmxlUmVuZGVyOyIsIlxuaW1wb3J0IGNvcmV1aVRhYmxlUmVuZGVyICBmcm9tIFwiLi9jb3JldWkudGFibGUucmVuZGVyXCI7XG5cblxubGV0IGNvcmV1aVRhYmxlRWxlbWVudHMgPSB7XG5cbiAgICAvKipcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0LrQvtC90YLQtdC50L3QtdGA0LAg0YLQsNCx0LvQuNGG0YtcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGFibGVJZFxuICAgICAqIEByZXR1cm4ge2pRdWVyeX1cbiAgICAgKi9cbiAgICBnZXRDb250YWluZXI6IGZ1bmN0aW9uICh0YWJsZUlkKSB7XG5cbiAgICAgICAgcmV0dXJuICQoJyNjb3JldWktdGFibGUtJyArIHRhYmxlSWQgKyAnID4gLmNvcmV1aS10YWJsZV9fY29udGFpbmVyJyk7XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC+0LHQtdGA0YLQutC4INGC0LDQsdC70LjRhtGLXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRhYmxlSWRcbiAgICAgKiBAcmV0dXJuIHtqUXVlcnl9XG4gICAgICovXG4gICAgZ2V0TG9jazogZnVuY3Rpb24gKHRhYmxlSWQpIHtcblxuICAgICAgICByZXR1cm4gJCgnI2NvcmV1aS10YWJsZS0nICsgdGFibGVJZCArICcgPiAuY29yZXVpLXRhYmxlX19jb250YWluZXIgPiAuY29yZXVpLXRhYmxlLWxvY2snKTtcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0L7QsdC10YDRgtC60Lgg0YLQsNCx0LvQuNGG0YtcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGFibGVJZFxuICAgICAqIEByZXR1cm4ge2pRdWVyeX1cbiAgICAgKi9cbiAgICBnZXRXcmFwcGVyOiBmdW5jdGlvbiAodGFibGVJZCkge1xuXG4gICAgICAgIHJldHVybiAkKCcjY29yZXVpLXRhYmxlLScgKyB0YWJsZUlkICsgJyA+IC5jb3JldWktdGFibGVfX2NvbnRhaW5lciA+IC5jb3JldWktdGFibGVfX3dyYXBwZXInKTtcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0L/QvtC40YHQutC+0LLQvtCz0L4g0LrQvtC90YLQtdC50L3QtdGA0LBcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGFibGVJZFxuICAgICAqIEByZXR1cm4ge2pRdWVyeX1cbiAgICAgKi9cbiAgICBnZXRTZWFyY2hDb250YWluZXI6IGZ1bmN0aW9uICh0YWJsZUlkKSB7XG5cbiAgICAgICAgcmV0dXJuICQoJyNjb3JldWktdGFibGUtJyArIHRhYmxlSWQgKyAnID4gLmNvcmV1aS10YWJsZV9fY29udGFpbmVyID4gLmNvcmV1aS10YWJsZV9fc2VhcmNoJyk7XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC/0L7QuNGB0LrQvtCy0L7Qs9C+INC60L7QvdGC0LXQudC90LXRgNCwXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRhYmxlSWRcbiAgICAgKiBAcmV0dXJuIHtqUXVlcnl9XG4gICAgICovXG4gICAgZ2V0Q29sdW1uc0NvbnRhaW5lcjogZnVuY3Rpb24gKHRhYmxlSWQpIHtcblxuICAgICAgICByZXR1cm4gJCgnI2NvcmV1aS10YWJsZS0nICsgdGFibGVJZCArICcgPiAuY29yZXVpLXRhYmxlX19jb250YWluZXIgPiAuY29yZXVpLXRhYmxlX19jb2x1bW5zJyk7XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC60L7QvdGC0LXQudC90LXRgNCwINC/0L7QuNGB0LrQvtCy0L7Qs9C+INC60L7QvdGC0YDQvtC70LBcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGFibGVJZFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjb250cm9sSWRcbiAgICAgKiBAcmV0dXJuIHtqUXVlcnl9XG4gICAgICovXG4gICAgZ2V0U2VhcmNoQ29udHJvbDogZnVuY3Rpb24gKHRhYmxlSWQsIGNvbnRyb2xJZCkge1xuXG4gICAgICAgIHJldHVybiAkKCcjY29yZXVpLXRhYmxlLScgKyB0YWJsZUlkICsgJyA+IC5jb3JldWktdGFibGVfX2NvbnRhaW5lciA+IC5jb3JldWktdGFibGVfX3NlYXJjaCAuc2VhcmNoLWNvbnRyb2wtJyArIGNvbnRyb2xJZCk7XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC60L7QvdGC0LXQudC90LXRgNCwINC60L7QvdGC0YDQvtC70LBcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGFibGVJZFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjb250cm9sSWRcbiAgICAgKiBAcmV0dXJuIHtqUXVlcnl9XG4gICAgICovXG4gICAgZ2V0Q29udHJvbDogZnVuY3Rpb24gKHRhYmxlSWQsIGNvbnRyb2xJZCkge1xuXG4gICAgICAgIHJldHVybiAkKCcjY29yZXVpLXRhYmxlLScgKyB0YWJsZUlkICsgJyAgI2NvcmV1aS10YWJsZS1jb250cm9sLScgKyBjb250cm9sSWQpO1xuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSDRgtCw0LHQu9C40YbRi1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0YWJsZUlkXG4gICAgICogQHJldHVybiB7alF1ZXJ5fVxuICAgICAqL1xuICAgIGdldFRhYmxlOiBmdW5jdGlvbiAodGFibGVJZCkge1xuXG4gICAgICAgIHJldHVybiAkKCcjY29yZXVpLXRhYmxlLScgKyB0YWJsZUlkICsgJyA+IC5jb3JldWktdGFibGVfX2NvbnRhaW5lciA+IC5jb3JldWktdGFibGVfX3dyYXBwZXIgPiB0YWJsZScpO1xuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSDRgtC10LvQsCDRgtCw0LHQu9C40YbRi1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0YWJsZUlkXG4gICAgICogQHJldHVybiB7alF1ZXJ5fVxuICAgICAqL1xuICAgIGdldFRhYmxlVGJvZHk6IGZ1bmN0aW9uICh0YWJsZUlkKSB7XG5cbiAgICAgICAgcmV0dXJuICQoJyNjb3JldWktdGFibGUtJyArIHRhYmxlSWQgKyAnID4gLmNvcmV1aS10YWJsZV9fY29udGFpbmVyID4gLmNvcmV1aS10YWJsZV9fd3JhcHBlciA+IHRhYmxlID4gdGJvZHknKTtcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0LfQsNCz0L7Qu9C+0LLQutC+0LIg0YLQsNCx0LvQuNGG0YtcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGFibGVJZFxuICAgICAqIEByZXR1cm4ge2pRdWVyeX1cbiAgICAgKi9cbiAgICBnZXRUYWJsZVRoZWFkOiBmdW5jdGlvbiAodGFibGVJZCkge1xuXG4gICAgICAgIHJldHVybiAkKCcjY29yZXVpLXRhYmxlLScgKyB0YWJsZUlkICsgJyA+IC5jb3JldWktdGFibGVfX2NvbnRhaW5lciA+IC5jb3JldWktdGFibGVfX3dyYXBwZXIgPiB0YWJsZSA+IHRoZWFkJyk7XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INGP0YfQtdC10Log0YEg0YHQvtGA0YLQuNGA0L7QstC60L7QuSDQv9C+INGC0LDQsdC70LjRhtC1XG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRhYmxlSWRcbiAgICAgKiBAcmV0dXJuIHtqUXVlcnl9XG4gICAgICovXG4gICAgZ2V0VGFibGVTb3J0YWJsZTogZnVuY3Rpb24gKHRhYmxlSWQpIHtcblxuICAgICAgICByZXR1cm4gJCgnI2NvcmV1aS10YWJsZS0nICsgdGFibGVJZCArICcgPiAuY29yZXVpLXRhYmxlX19jb250YWluZXIgPiAuY29yZXVpLXRhYmxlX193cmFwcGVyID4gdGFibGUgPiB0aGVhZCA+IHRyID4gdGQuY29yZXVpLXRhYmxlX19zb3J0YWJsZScpO1xuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSDRgdGC0YDQvtC6INC30LDQv9C40YHQtdC5XG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRhYmxlSWRcbiAgICAgKiBAcmV0dXJuIHtqUXVlcnl9XG4gICAgICovXG4gICAgZ2V0VHJSZWNvcmRzOiBmdW5jdGlvbiAodGFibGVJZCkge1xuXG4gICAgICAgIHJldHVybiAkKCcjY29yZXVpLXRhYmxlLScgKyB0YWJsZUlkICsgJyA+IC5jb3JldWktdGFibGVfX2NvbnRhaW5lciA+IC5jb3JldWktdGFibGVfX3dyYXBwZXIgPiB0YWJsZSA+IHRib2R5ID4gdHIuY29yZXVpLXRhYmxlX19yZWNvcmQnKTtcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0Y3Qu9C10LzQtdC90YLQsCDRgdGC0YDQvtC60Lgg0L/QviDQutC70Y7Rh9GDXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRhYmxlSWRcbiAgICAgKiBAcGFyYW0ge2ludH0gICAgaW5kZXhcbiAgICAgKiBAcmV0dXJuIHtqUXVlcnl9XG4gICAgICovXG4gICAgZ2V0VHJCeUluZGV4OiBmdW5jdGlvbiAodGFibGVJZCwgaW5kZXgpIHtcblxuICAgICAgICByZXR1cm4gJCgnI2NvcmV1aS10YWJsZS0nICsgdGFibGVJZCArICcgPiAuY29yZXVpLXRhYmxlX19jb250YWluZXIgPiAuY29yZXVpLXRhYmxlX193cmFwcGVyID4gdGFibGUgPiB0Ym9keSA+IHRyW2RhdGEtcmVjb3JkLWluZGV4PVwiJyArIGluZGV4ICsgJ1wiXScpO1xuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSDRjdC70LXQvNC10L3RgtCwINGB0YLRgNC+0LrQuCDQv9C+INC60LvRjtGH0YNcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGFibGVJZFxuICAgICAqIEByZXR1cm4ge2pRdWVyeX1cbiAgICAgKi9cbiAgICBnZXRUckVtcHR5OiBmdW5jdGlvbiAodGFibGVJZCkge1xuXG4gICAgICAgIHJldHVybiAkKCcjY29yZXVpLXRhYmxlLScgKyB0YWJsZUlkICsgJyA+IC5jb3JldWktdGFibGVfX2NvbnRhaW5lciA+IC5jb3JldWktdGFibGVfX3dyYXBwZXIgPiB0YWJsZSA+IHRib2R5ID4gdHIuY29yZXVpLXRhYmxlX19yZWNvcmQtZW1wdHknKTtcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0LrQvtC90YLQtdC90YLQsCDQv9C+0LQg0YHRgtGA0L7QutC+0LlcbiAgICAgKiBAcGFyYW0ge2pRdWVyeX0gcmVjb3JkRWxlbWVudFxuICAgICAqIEByZXR1cm4ge2pRdWVyeX1cbiAgICAgKi9cbiAgICBnZXRFeHBhbmRSb3c6IGZ1bmN0aW9uIChyZWNvcmRFbGVtZW50KSB7XG5cbiAgICAgICAgcmV0dXJuIHJlY29yZEVsZW1lbnQubmV4dCgpLmhhc0NsYXNzKCdjb3JldWktdGFibGVfX3JlY29yZC1leHBhbmRlZCcpXG4gICAgICAgICAgICA/IHJlY29yZEVsZW1lbnQubmV4dCgpXG4gICAgICAgICAgICA6IG51bGw7XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICog0JTQvtCx0LDQstC70LXQvdC40LUg0LrQvtC90YLQtdC90YLQsCDQv9C+0LQg0YHRgtGA0L7QutC+0LlcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gICAgICAgdGFibGVcbiAgICAgKiBAcGFyYW0ge2pRdWVyeX0gICAgICAgcmVjb3JkRWxlbWVudFxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBjb250ZW50XG4gICAgICogQHJldHVybiB7alF1ZXJ5fVxuICAgICAqL1xuICAgIGFkZEV4cGFuZFJvdzogZnVuY3Rpb24gKHRhYmxlLCByZWNvcmRFbGVtZW50LCBjb250ZW50KSB7XG5cbiAgICAgICAgbGV0IGV4cGFuZFJlY29yZCA9IGNvcmV1aVRhYmxlUmVuZGVyLnJlbmRlckV4cGFuZCh0YWJsZSwgY29udGVudCwgJ3JlY29yZF9leHBhbmRfc2hvdycpO1xuXG4gICAgICAgIHJlY29yZEVsZW1lbnQuYWZ0ZXIoZXhwYW5kUmVjb3JkKTtcbiAgICAgICAgcmVjb3JkRWxlbWVudC5uZXh0KCkuc2hvdygnZmFzdCcpO1xuICAgICAgICByZWNvcmRFbGVtZW50LmFkZENsYXNzKCdyZWNvcmQtZXhwYW5kZWQnKTtcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiDQodC60YDRi9GC0LjQtSDQutC+0L3RgtC10L3RgtCwINC/0L7QtCDRgdGC0YDQvtC60L7QuVxuICAgICAqIEBwYXJhbSB7alF1ZXJ5fSByZWNvcmRFeHBhbmRlZFxuICAgICAqIEByZXR1cm4ge2pRdWVyeX1cbiAgICAgKi9cbiAgICBoaWRlRXhwYW5kUm93OiBmdW5jdGlvbiAocmVjb3JkRXhwYW5kZWQpIHtcblxuICAgICAgICByZWNvcmRFeHBhbmRlZC5oaWRlKCdmYXN0JylcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiDQn9C+0LrQsNC3INC60L7QvdGC0LXQvdGC0LAg0L/QvtC0INGB0YLRgNC+0LrQvtC5XG4gICAgICogQHBhcmFtIHtqUXVlcnl9IHJlY29yZEV4cGFuZGVkXG4gICAgICogQHJldHVybiB7alF1ZXJ5fVxuICAgICAqL1xuICAgIHNob3dFeHBhbmRSb3c6IGZ1bmN0aW9uIChyZWNvcmRFeHBhbmRlZCkge1xuXG4gICAgICAgIHJlY29yZEV4cGFuZGVkLnNob3coJ2Zhc3QnKVxuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqINCj0LTQsNC70LXQvdC40LUg0LrQvtC90YLQtdC90YLQsCDQv9C+0LQg0YHRgtGA0L7QutC+0LlcbiAgICAgKiBAcGFyYW0ge2pRdWVyeX0gcmVjb3JkRXhwYW5kZWRcbiAgICAgKiBAcmV0dXJuIHtqUXVlcnl9XG4gICAgICovXG4gICAgcmVtb3ZlRXhwYW5kUm93OiBmdW5jdGlvbiAocmVjb3JkRXhwYW5kZWQpIHtcblxuICAgICAgICByZWNvcmRFeHBhbmRlZC5oaWRlKCdmYXN0JywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgJCh0aGlzKS5yZW1vdmUoKTtcbiAgICAgICAgfSlcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0LLRi9Cx0YDQsNC90L3Ri9GFINC90LAg0YLQsNCx0LvQuNGG0LUg0Y3Qu9C10LzQtdC90YLQvtCyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRhYmxlSWRcbiAgICAgKiBAcmV0dXJuIHtBcnJheX1cbiAgICAgKi9cbiAgICBnZXRTZWxlY3RlZEluZGV4ZXM6IGZ1bmN0aW9uICh0YWJsZUlkKSB7XG5cbiAgICAgICAgbGV0IGluZGV4ZXMgPSBbXTtcblxuICAgICAgICAkKCcjY29yZXVpLXRhYmxlLScgKyB0YWJsZUlkICsgJyA+IC5jb3JldWktdGFibGVfX2NvbnRhaW5lciA+IC5jb3JldWktdGFibGVfX3dyYXBwZXIgPiB0YWJsZSA+IHRib2R5ID4gdHIuY29yZXVpLXRhYmxlX19yZWNvcmQgPiB0ZC5jb3JldWktdGFibGVfX3NlbGVjdF9jb250YWluZXIgPiAuY29yZXVpLXRhYmxlX19zZWxlY3Q6Y2hlY2tlZCcpXG4gICAgICAgICAgICAuZWFjaChmdW5jdGlvbiAoa2V5LCBlbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgaW5kZXhlcy5wdXNoKCQoZWxlbWVudCkudmFsKCkpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIGluZGV4ZXM7XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INCy0YvQsdGA0LDQvdC90YvRhSDQvdCwINGC0LDQsdC70LjRhtC1INGN0LvQtdC80LXQvdGC0L7QslxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0YWJsZUlkXG4gICAgICogQHJldHVybiB7QXJyYXl9XG4gICAgICovXG4gICAgZ2V0Um93c1N3aXRjaGVzOiBmdW5jdGlvbiAodGFibGVJZCkge1xuXG4gICAgICAgIHJldHVybiAkKCcjY29yZXVpLXRhYmxlLScgKyB0YWJsZUlkICsgJyA+IC5jb3JldWktdGFibGVfX2NvbnRhaW5lciA+IC5jb3JldWktdGFibGVfX3dyYXBwZXIgPiB0YWJsZSA+IHRib2R5ID4gdHIuY29yZXVpLXRhYmxlX19yZWNvcmQgPiB0ZC5jb3JldWktdGFibGVfX3N3aXRjaF9jb250YWluZXInKTtcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0Y3Qu9C10LzQtdC90YLQvtCyINCy0YvQsdC+0YDQsCDRgdGC0YDQvtC6XG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRhYmxlSWRcbiAgICAgKiBAcmV0dXJuIHtBcnJheX1cbiAgICAgKi9cbiAgICBnZXRSb3dzU2VsZWN0czogZnVuY3Rpb24gKHRhYmxlSWQpIHtcblxuICAgICAgICByZXR1cm4gJCgnI2NvcmV1aS10YWJsZS0nICsgdGFibGVJZCArICcgPiAuY29yZXVpLXRhYmxlX19jb250YWluZXIgPiAuY29yZXVpLXRhYmxlX193cmFwcGVyICA+IHRhYmxlID4gdGJvZHkgPiB0ci5jb3JldWktdGFibGVfX3JlY29yZCA+IHRkLmNvcmV1aS10YWJsZV9fc2VsZWN0X2NvbnRhaW5lcicpO1xuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSDRjdC70LXQvNC10L3RgtCwINC00LvRjyDQstGL0LHQvtGA0LAg0LLRgdC10YUg0YHRgtGA0L7QulxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0YWJsZUlkXG4gICAgICogQHJldHVybiB7QXJyYXl9XG4gICAgICovXG4gICAgZ2V0Um93c1NlbGVjdEFsbDogZnVuY3Rpb24gKHRhYmxlSWQpIHtcblxuICAgICAgICByZXR1cm4gJCgnI2NvcmV1aS10YWJsZS0nICsgdGFibGVJZCArICcgPiAuY29yZXVpLXRhYmxlX19jb250YWluZXIgPiAuY29yZXVpLXRhYmxlX193cmFwcGVyICA+IHRhYmxlID4gdGhlYWQgPiB0ciA+IHRkIC5jb3JldWktdGFibGVfX3NlbGVjdC1hbGwnKTtcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0Y3Qu9C10LzQtdC90YLQvtCyINC00LvRjyDRgNCw0YHQutGA0YvRgtC40Y8g0Y/Rh9C10LXQulxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0YWJsZUlkXG4gICAgICogQHJldHVybiB7QXJyYXl9XG4gICAgICovXG4gICAgZ2V0Tm9XcmFwVG9nZ2xlczogZnVuY3Rpb24gKHRhYmxlSWQpIHtcblxuICAgICAgICByZXR1cm4gJCgnI2NvcmV1aS10YWJsZS0nICsgdGFibGVJZCArICcgPiAuY29yZXVpLXRhYmxlX19jb250YWluZXIgPiAuY29yZXVpLXRhYmxlX193cmFwcGVyICA+IHRhYmxlID4gdGJvZHkgPiB0ciA+IHRkLmNvcmV1aV90YWJsZV9fbm8td3JhcCA+IGkudG9nZ2xlJyk7XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICog0JLRi9C00LXQu9C10L3QuNC1INGB0YLRgNC+0LrQuCDQsiDRgtCw0LHQu9C40YbQtVxuICAgICAqIEBwYXJhbSB7alF1ZXJ5fSB0clxuICAgICAqL1xuICAgIHNlbGVjdFRyKHRyKSB7XG5cbiAgICAgICAgdHIuYWRkQ2xhc3MoJ3RhYmxlLXByaW1hcnknKTtcbiAgICAgICAgJCgnLmNvcmV1aS10YWJsZV9fc2VsZWN0JywgdHIpLnByb3AoJ2NoZWNrZWQnLCB0cnVlKTtcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiDQktGL0LTQtdC70LXQvdC40LUg0LLRgdC10YUg0YHRgtGA0L7QuiDQsiDRgtCw0LHQu9C40YbQtVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0YWJsZUlkXG4gICAgICovXG4gICAgc2VsZWN0VHJBbGwodGFibGVJZCkge1xuXG4gICAgICAgIGxldCB0YWJsZUNvbnRhaW5lciA9ICcjY29yZXVpLXRhYmxlLScgKyB0YWJsZUlkICsgJyA+IC5jb3JldWktdGFibGVfX2NvbnRhaW5lciA+IC5jb3JldWktdGFibGVfX3dyYXBwZXIgPiB0YWJsZSc7XG5cbiAgICAgICAgJCh0YWJsZUNvbnRhaW5lciArICcgPiB0aGVhZCA+IHRyID4gdGQgPiAuY29yZXVpLXRhYmxlX19zZWxlY3QtYWxsJykucHJvcCgnY2hlY2tlZCcsIHRydWUpO1xuICAgICAgICAkKHRhYmxlQ29udGFpbmVyICsgJyA+IHRib2R5ID4gdHIuY29yZXVpLXRhYmxlX19yZWNvcmQnKS5hZGRDbGFzcygndGFibGUtcHJpbWFyeScpO1xuICAgICAgICAkKHRhYmxlQ29udGFpbmVyICsgJyA+IHRib2R5ID4gdHIuY29yZXVpLXRhYmxlX19yZWNvcmQgPiB0ZCA+IC5jb3JldWktdGFibGVfX3NlbGVjdCcpLnByb3AoJ2NoZWNrZWQnLCB0cnVlKTtcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiDQodC90Y/RgtC40LUg0LLRi9C00LXQu9C10L3QuNC1INGB0YLRgNC+0LrQuCDQsiDRgtCw0LHQu9C40YbQtVxuICAgICAqIEBwYXJhbSB7alF1ZXJ5fSB0clxuICAgICAqL1xuICAgIHVuc2VsZWN0VHIodHIpIHtcblxuICAgICAgICAkKHRyKS5yZW1vdmVDbGFzcygndGFibGUtcHJpbWFyeScpO1xuICAgICAgICAkKCcuY29yZXVpLXRhYmxlX19zZWxlY3QnLCB0cikucHJvcCgnY2hlY2tlZCcsIGZhbHNlKTtcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiDQodC90Y/RgtC40LUg0LLRi9C00LXQu9C10L3QuNC1INGB0L4g0LLRgdC10YUg0YHRgtGA0L7QuiDQsiDRgtCw0LHQu9C40YbQtVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0YWJsZUlkXG4gICAgICovXG4gICAgdW5zZWxlY3RUckFsbCh0YWJsZUlkKSB7XG5cbiAgICAgICAgbGV0IHRhYmxlQ29udGFpbmVyID0gJyNjb3JldWktdGFibGUtJyArIHRhYmxlSWQgKyAnID4gLmNvcmV1aS10YWJsZV9fY29udGFpbmVyID4gLmNvcmV1aS10YWJsZV9fd3JhcHBlciA+IHRhYmxlJztcblxuICAgICAgICAkKHRhYmxlQ29udGFpbmVyICsgJyA+IHRoZWFkID4gdHIgPiB0ZCA+IC5jb3JldWktdGFibGVfX3NlbGVjdC1hbGwnKS5wcm9wKCdjaGVja2VkJywgZmFsc2UpO1xuICAgICAgICAkKHRhYmxlQ29udGFpbmVyICsgJyA+IHRib2R5ID4gdHIuY29yZXVpLXRhYmxlX19yZWNvcmQnKS5yZW1vdmVDbGFzcygndGFibGUtcHJpbWFyeScpO1xuICAgICAgICAkKHRhYmxlQ29udGFpbmVyICsgJyA+IHRib2R5ID4gdHIuY29yZXVpLXRhYmxlX19yZWNvcmQgPiB0ZC5jb3JldWktdGFibGVfX3NlbGVjdF9jb250YWluZXIgPiAuY29yZXVpLXRhYmxlX19zZWxlY3QnKS5wcm9wKCdjaGVja2VkJywgZmFsc2UpO1xuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqINCk0LjQutGB0LDRhtC40Y8g0LrQvtC70L7QvdC+0Log0YHQu9C10LLQsFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0YWJsZUlkXG4gICAgICovXG4gICAgZml4ZWRDb2xzTGVmdDogZnVuY3Rpb24gKHRhYmxlSWQpIHtcblxuICAgICAgICBsZXQgdGFibGVDb250YWluZXIgPSAnI2NvcmV1aS10YWJsZS0nICsgdGFibGVJZCArICcgPiAuY29yZXVpLXRhYmxlX19jb250YWluZXInO1xuICAgICAgICBsZXQgdGFibGVXcmFwcGVyICAgPSB0YWJsZUNvbnRhaW5lciArICcgPiAuY29yZXVpLXRhYmxlX193cmFwcGVyJztcbiAgICAgICAgbGV0IGNvbE9mZnNldCAgICAgID0gMDtcblxuICAgICAgICAkKHRhYmxlV3JhcHBlciArICcgPiB0YWJsZSA+IHRoZWFkID4gdHI6bGFzdC1jaGlsZCA+IHRkLmNvcmV1aS10YWJsZV9fZml4ZWRfbGVmdCcpLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgbGV0IGluZGV4ID0gJCh0aGlzKS5pbmRleCgpICsgMTtcblxuICAgICAgICAgICAgaWYgKGluZGV4ICE9PSAxKSB7XG4gICAgICAgICAgICAgICAgJCh0YWJsZVdyYXBwZXIgKyAnID4gdGFibGUgPiB0aGVhZCA+IHRyOmxhc3QtY2hpbGQgPiB0ZDpudGgtY2hpbGQoJyArIGluZGV4ICsgJyknKS5jc3MoJ2xlZnQnLCBjb2xPZmZzZXQgKyAncHgnKTtcbiAgICAgICAgICAgICAgICAkKHRhYmxlV3JhcHBlciArICcgPiB0YWJsZSA+IHRib2R5ID4gdHIgPiB0ZDpudGgtY2hpbGQoJyArIGluZGV4ICsgJyknKVxuICAgICAgICAgICAgICAgICAgICAvLy5hZGRDbGFzcygnY29yZXVpLXRhYmxlX19maXhlZF9sZWZ0JylcbiAgICAgICAgICAgICAgICAgICAgLmNzcygnbGVmdCcsIGNvbE9mZnNldCArICdweCcpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb2xPZmZzZXQgKz0gJCh0aGlzKS5vdXRlcldpZHRoKCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChjb2xPZmZzZXQgPiAwKSB7XG4gICAgICAgICAgICAkKHRhYmxlQ29udGFpbmVyKS5hZGRDbGFzcygnZml4ZWQtY29sdW1ucycpO1xuICAgICAgICB9XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICog0KTQuNC60YHQsNGG0LjRjyDQutC+0LvQvtC90L7QuiDRgdC/0YDQsNCy0LBcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGFibGVJZFxuICAgICAqL1xuICAgIGZpeGVkQ29sc1JpZ2h0OiBmdW5jdGlvbiAodGFibGVJZCkge1xuXG4gICAgICAgIGxldCB0YWJsZUNvbnRhaW5lciA9ICcjY29yZXVpLXRhYmxlLScgKyB0YWJsZUlkICsgJyA+IC5jb3JldWktdGFibGVfX2NvbnRhaW5lcic7XG4gICAgICAgIGxldCB0YWJsZVdyYXBwZXIgICA9IHRhYmxlQ29udGFpbmVyICsgJyA+IC5jb3JldWktdGFibGVfX3dyYXBwZXInO1xuICAgICAgICBsZXQgY29sT2Zmc2V0ICAgICAgPSAwO1xuXG4gICAgICAgICQoJCh0YWJsZVdyYXBwZXIgKyAnID4gdGFibGUgPiB0aGVhZCA+IHRyOmxhc3QtY2hpbGQgPiB0ZC5jb3JldWktdGFibGVfX2ZpeGVkX3JpZ2h0JykuZ2V0KCkucmV2ZXJzZSgpKS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGxldCBpbmRleCAgPSAkKHRoaXMpLmluZGV4KCkgKyAxO1xuXG4gICAgICAgICAgICBpZiAoaW5kZXggIT09IDEpIHtcbiAgICAgICAgICAgICAgICAkKHRhYmxlV3JhcHBlciArICcgPiB0YWJsZSA+IHRoZWFkID4gdHI6bGFzdC1jaGlsZCA+IHRkOm50aC1jaGlsZCgnICsgaW5kZXggKyAnKScpLmNzcygncmlnaHQnLCBjb2xPZmZzZXQgKyAncHgnKTtcbiAgICAgICAgICAgICAgICAkKHRhYmxlV3JhcHBlciArICcgPiB0YWJsZSA+IHRib2R5ID4gdHIgPiB0ZDpudGgtY2hpbGQoJyArIGluZGV4ICsgJyknKVxuICAgICAgICAgICAgICAgICAgICAvLy5hZGRDbGFzcygnY29yZXVpLXRhYmxlX19maXhlZF9sZWZ0JylcbiAgICAgICAgICAgICAgICAgICAgLmNzcygncmlnaHQnLCBjb2xPZmZzZXQgKyAncHgnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29sT2Zmc2V0ICs9ICQodGhpcykub3V0ZXJXaWR0aCgpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoY29sT2Zmc2V0ID4gMCkge1xuICAgICAgICAgICAgJCh0YWJsZUNvbnRhaW5lcikuYWRkQ2xhc3MoJ2ZpeGVkLWNvbHVtbnMnKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgY29yZXVpVGFibGVFbGVtZW50czsiLCJcclxuaW1wb3J0IGNvcmV1aVRhYmxlVXRpbHMgICAgZnJvbSBcIi4vY29yZXVpLnRhYmxlLnV0aWxzXCI7XHJcbmltcG9ydCBjb3JldWlUYWJsZUVsZW1lbnRzIGZyb20gXCIuL2NvcmV1aS50YWJsZS5lbGVtZW50c1wiO1xyXG5pbXBvcnQgY29yZXVpVGFibGUgZnJvbSBcIi4vY29yZXVpLnRhYmxlXCI7XHJcblxyXG5cclxubGV0IGNvcmV1aVRhYmxlUHJpdmF0ZSA9IHtcclxuXHJcbiAgICAvKipcclxuICAgICAqINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPINC60L7Qu9C+0L3QvtC6XHJcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gdGFibGVXcmFwcGVyXHJcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gdGFibGVcclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGNvbHVtbnNcclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIGluaXRDb2x1bW5zKHRhYmxlV3JhcHBlciwgdGFibGUsIGNvbHVtbnMpIHtcclxuXHJcbiAgICAgICAgbGV0IG9wdGlvbnMgICAgICAgID0gdGFibGUuZ2V0T3B0aW9ucygpO1xyXG4gICAgICAgIGxldCBjb2x1bW5zU3RvcmFnZSA9IG9wdGlvbnMuc2F2ZVN0YXRlICYmIG9wdGlvbnMuaWRcclxuICAgICAgICAgICAgPyBjb3JldWlUYWJsZVByaXZhdGUuZ2V0U3RvcmFnZUZpZWxkKHRhYmxlLmdldElkKCksICdjb2x1bW5zJylcclxuICAgICAgICAgICAgOiBudWxsO1xyXG5cclxuICAgICAgICAkLmVhY2goY29sdW1ucywgZnVuY3Rpb24gKGtleSwgY29sdW1uKSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29sdW1uLnR5cGUgPT09ICd1bmRlZmluZWQnIHx8XHJcbiAgICAgICAgICAgICAgICAhIHRhYmxlV3JhcHBlci5jb2x1bW5zLmhhc093blByb3BlcnR5KGNvbHVtbi50eXBlKVxyXG4gICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgIGNvbHVtbi50eXBlID0gJ3RleHQnO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoICEgY29sdW1uLmhhc093blByb3BlcnR5KCdzaG93JykgfHwgdHlwZW9mIGNvbHVtbi5zaG93ICE9PSAnYm9vbGVhbicpIHtcclxuICAgICAgICAgICAgICAgIGNvbHVtbi5zaG93ID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGNvbHVtbnNTdG9yYWdlKSB7XHJcbiAgICAgICAgICAgICAgICAkLmVhY2goY29sdW1uc1N0b3JhZ2UsIGZ1bmN0aW9uIChrZXkyLCBjb2x1bW5TdG9yYWdlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbHVtblN0b3JhZ2UgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29sdW1uU3RvcmFnZS5oYXNPd25Qcm9wZXJ0eSgnZmllbGQnKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2x1bW5TdG9yYWdlLmhhc093blByb3BlcnR5KCdpc1Nob3cnKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2x1bW5TdG9yYWdlLmZpZWxkID09PSBjb2x1bW4uZmllbGRcclxuICAgICAgICAgICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29sdW1uLnNob3cgPSAhISBjb2x1bW5TdG9yYWdlLmlzU2hvdztcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICAgICAgaWYgKGNvbHVtbi5oYXNPd25Qcm9wZXJ0eSgnZml4ZWQnKSAmJiB0eXBlb2YgY29sdW1uLmZpeGVkID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICAgICAgdGFibGUuX29wdGlvbnMub3ZlcmZsb3cgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBsZXQgY29sdW1uSW5zdGFuY2UgPSBuZXcgY29yZXVpVGFibGUuY29sdW1uc1tjb2x1bW4udHlwZV0odGFibGUsIGNvbHVtbik7XHJcbiAgICAgICAgICAgIHRhYmxlLl9jb2x1bW5zLnB1c2goY29sdW1uSW5zdGFuY2UpO1xyXG5cclxuICAgICAgICAgICAgaWYgKGNvbHVtbkluc3RhbmNlLmlzU2hvdygpKSB7XHJcbiAgICAgICAgICAgICAgICB0YWJsZS5fY291bnRDb2x1bW5zU2hvdysrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPINC/0L7QuNGB0LrQvtCy0YvRhSDQv9C+0LvQtdC5XHJcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gdGFibGVXcmFwcGVyXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gdGFibGVcclxuICAgICAqIEBwYXJhbSB7QXJyYXl9ICBzZWFyY2hDb250cm9sc1xyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgaW5pdFNlYXJjaDogZnVuY3Rpb24gKHRhYmxlV3JhcHBlciwgdGFibGUsIHNlYXJjaENvbnRyb2xzKSB7XHJcblxyXG4gICAgICAgIGxldCBvcHRpb25zICAgICAgPSB0YWJsZS5nZXRPcHRpb25zKCk7XHJcbiAgICAgICAgbGV0IHNlYXJjaFZhbHVlcyA9IG9wdGlvbnMuc2F2ZVN0YXRlICYmIG9wdGlvbnMuaWRcclxuICAgICAgICAgICAgPyBjb3JldWlUYWJsZVByaXZhdGUuZ2V0U3RvcmFnZUZpZWxkKHRhYmxlLmdldElkKCksICdzZWFyY2gnKVxyXG4gICAgICAgICAgICA6IG51bGw7XHJcblxyXG4gICAgICAgICQuZWFjaChzZWFyY2hDb250cm9scywgZnVuY3Rpb24gKGtleSwgY29udHJvbCkge1xyXG4gICAgICAgICAgICBpZiAoICEgY29yZXVpVGFibGVVdGlscy5pc09iamVjdChjb250cm9sKSkge1xyXG4gICAgICAgICAgICAgICAgY29udHJvbCA9IHt9O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoICEgY29udHJvbC5oYXNPd25Qcm9wZXJ0eSgndHlwZScpIHx8XHJcbiAgICAgICAgICAgICAgICB0eXBlb2YgY29udHJvbC50eXBlICE9PSAnc3RyaW5nJyB8fFxyXG4gICAgICAgICAgICAgICAgISB0YWJsZVdyYXBwZXIuc2VhcmNoLmhhc093blByb3BlcnR5KGNvbnRyb2wudHlwZSlcclxuICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICBjb250cm9sLnR5cGUgPSAndGV4dCc7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChvcHRpb25zLnNhdmVTdGF0ZSAmJiBvcHRpb25zLmlkKSB7XHJcbiAgICAgICAgICAgICAgICBjb250cm9sLnZhbHVlID0gbnVsbDtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShzZWFyY2hWYWx1ZXMpICYmIGNvbnRyb2wuaGFzT3duUHJvcGVydHkoJ2ZpZWxkJykpIHtcclxuICAgICAgICAgICAgICAgICAgICAkLmVhY2goc2VhcmNoVmFsdWVzLCBmdW5jdGlvbiAoa2V5LCBzZWFyY2gpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3Qoc2VhcmNoKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VhcmNoLmhhc093blByb3BlcnR5KCdmaWVsZCcpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWFyY2guaGFzT3duUHJvcGVydHkoJ3ZhbHVlJykgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlYXJjaC5maWVsZCAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VhcmNoLmZpZWxkID09PSBjb250cm9sLmZpZWxkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbC52YWx1ZSA9IHNlYXJjaC52YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGxldCBjb250cm9sSW5zdGFuY2UgPSBuZXcgY29yZXVpVGFibGUuc2VhcmNoW2NvbnRyb2wudHlwZV0odGFibGUsIGNvbnRyb2wpO1xyXG4gICAgICAgICAgICB0YWJsZS5fc2VhcmNoLnB1c2goY29udHJvbEluc3RhbmNlKTtcclxuICAgICAgICB9KTtcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y8g0LrQvtC90YLRgNC+0LvQvtCyINC4INGE0LjQu9GM0YLRgNC+0LJcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSB0YWJsZVdyYXBwZXJcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSB0YWJsZVxyXG4gICAgICogQHBhcmFtIHtBcnJheX0gIHJvd3NcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwb3NpdGlvblxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgaW5pdENvbnRyb2xzOiBmdW5jdGlvbiAodGFibGVXcmFwcGVyLCB0YWJsZSwgcm93cywgcG9zaXRpb24pIHtcclxuXHJcbiAgICAgICAgbGV0IHRoYXQgPSB0aGlzO1xyXG5cclxuICAgICAgICAkLmVhY2gocm93cywgZnVuY3Rpb24gKGtleSwgcm93KSB7XHJcblxyXG4gICAgICAgICAgICBsZXQgdHlwZSAgICAgICAgICAgPSAnaW4nO1xyXG4gICAgICAgICAgICBsZXQgY29udHJvbHNMZWZ0ICAgPSBbXTtcclxuICAgICAgICAgICAgbGV0IGNvbnRyb2xzQ2VudGVyID0gW107XHJcbiAgICAgICAgICAgIGxldCBjb250cm9sc1JpZ2h0ICA9IFtdO1xyXG5cclxuICAgICAgICAgICAgaWYgKHR5cGVvZiByb3cudHlwZSA9PT0gJ3N0cmluZycgJiZcclxuICAgICAgICAgICAgICAgIFsnaW4nLCAnb3V0J10uaW5kZXhPZihyb3cudHlwZS50b0xvd2VyQ2FzZSgpKSA+PSAwXHJcbiAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgdHlwZSA9IHJvdy50eXBlLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChyb3cuaGFzT3duUHJvcGVydHkoJ2xlZnQnKSAmJiBBcnJheS5pc0FycmF5KHJvdy5sZWZ0KSkge1xyXG4gICAgICAgICAgICAgICAgJC5lYWNoKHJvdy5sZWZ0LCBmdW5jdGlvbiAoa2V5LCBjb250cm9sKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGluc3RhbmNlID0gdGhhdC5pbml0Q29udHJvbCh0YWJsZVdyYXBwZXIsIHRhYmxlLCBjb250cm9sKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QoaW5zdGFuY2UpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xzTGVmdC5wdXNoKGluc3RhbmNlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHJvdy5oYXNPd25Qcm9wZXJ0eSgnY2VudGVyJykgJiYgQXJyYXkuaXNBcnJheShyb3cuY2VudGVyKSkge1xyXG4gICAgICAgICAgICAgICAgJC5lYWNoKHJvdy5jZW50ZXIsIGZ1bmN0aW9uIChrZXksIGNvbnRyb2wpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgaW5zdGFuY2UgPSB0aGF0LmluaXRDb250cm9sKHRhYmxlV3JhcHBlciwgdGFibGUsIGNvbnRyb2wpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoY29yZXVpVGFibGVVdGlscy5pc09iamVjdChpbnN0YW5jZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbHNDZW50ZXIucHVzaChpbnN0YW5jZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChyb3cuaGFzT3duUHJvcGVydHkoJ3JpZ2h0JykgJiYgQXJyYXkuaXNBcnJheShyb3cucmlnaHQpKSB7XHJcbiAgICAgICAgICAgICAgICAkLmVhY2gocm93LnJpZ2h0LCBmdW5jdGlvbiAoa2V5LCBjb250cm9sKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGluc3RhbmNlID0gdGhhdC5pbml0Q29udHJvbCh0YWJsZVdyYXBwZXIsIHRhYmxlLCBjb250cm9sKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QoaW5zdGFuY2UpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xzUmlnaHQucHVzaChpbnN0YW5jZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChjb250cm9sc0xlZnQubGVuZ3RoID4gMCB8fCBjb250cm9sc0NlbnRlci5sZW5ndGggPiAwIHx8IGNvbnRyb2xzUmlnaHQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgdGFibGUuX2NvbnRyb2xzUG9zaXRpb25zW3Bvc2l0aW9uXS5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICB0eXBlOiB0eXBlLFxyXG4gICAgICAgICAgICAgICAgICAgIGxlZnQ6IGNvbnRyb2xzTGVmdCxcclxuICAgICAgICAgICAgICAgICAgICBjZW50ZXI6IGNvbnRyb2xzQ2VudGVyLFxyXG4gICAgICAgICAgICAgICAgICAgIHJpZ2h0OiBjb250cm9sc1JpZ2h0LFxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y8g0LrQvtC90YLRgNC+0LvQsCDQuNC70Lgg0YTQuNC70YzRgtGA0LBcclxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSB0YWJsZVdyYXBwZXJcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSB0YWJsZVxyXG4gICAgICogQHBhcmFtIHtvYmplY3R9IGNvbnRyb2xcclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIGluaXRDb250cm9sOiBmdW5jdGlvbiAodGFibGVXcmFwcGVyLCB0YWJsZSwgY29udHJvbCkge1xyXG5cclxuICAgICAgICBsZXQgaW5zdGFuY2UgPSBudWxsO1xyXG5cclxuICAgICAgICBpZiAoY29yZXVpVGFibGVVdGlscy5pc09iamVjdChjb250cm9sKSAmJiB0eXBlb2YgY29udHJvbC50eXBlID09PSAnc3RyaW5nJykge1xyXG5cclxuICAgICAgICAgICAgaWYgKHRhYmxlV3JhcHBlci5jb250cm9scy5oYXNPd25Qcm9wZXJ0eShjb250cm9sLnR5cGUpKSB7XHJcbiAgICAgICAgICAgICAgICBpbnN0YW5jZSA9IG5ldyBjb3JldWlUYWJsZS5jb250cm9sc1tjb250cm9sLnR5cGVdKHRhYmxlLCBjb250cm9sKTtcclxuICAgICAgICAgICAgICAgIHRhYmxlLl9jb250cm9scy5wdXNoKGluc3RhbmNlKTtcclxuXHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY29udHJvbC50eXBlLmluZGV4T2YoJ2ZpbHRlcjonKSA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgbGV0IGZpbHRlck5hbWUgPSBjb250cm9sLnR5cGUuc3Vic3RyaW5nKDcpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0YWJsZVdyYXBwZXIuZmlsdGVycy5oYXNPd25Qcm9wZXJ0eShmaWx0ZXJOYW1lKSkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoY29udHJvbC5oYXNPd25Qcm9wZXJ0eSgnZmllbGQnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgb3B0aW9ucyA9IHRhYmxlLmdldE9wdGlvbnMoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLnNhdmVTdGF0ZSAmJiBvcHRpb25zLmlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgZmlsdGVyVmFsdWVzID0gb3B0aW9ucy5zYXZlU3RhdGUgJiYgb3B0aW9ucy5pZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gY29yZXVpVGFibGVQcml2YXRlLmdldFN0b3JhZ2VGaWVsZCh0YWJsZS5nZXRJZCgpLCAnZmlsdGVycycpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBudWxsO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2wudmFsdWUgPSBudWxsO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGZpbHRlclZhbHVlcykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLmVhY2goZmlsdGVyVmFsdWVzLCBmdW5jdGlvbiAoa2V5LCBmaWx0ZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QoZmlsdGVyKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsdGVyLmhhc093blByb3BlcnR5KCdmaWVsZCcpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWx0ZXIuaGFzT3duUHJvcGVydHkoJ3ZhbHVlJykgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbHRlci5maWVsZCAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsdGVyLmZpZWxkID09PSBjb250cm9sLmZpZWxkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbC52YWx1ZSA9IGZpbHRlci52YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGluc3RhbmNlID0gbmV3IGNvcmV1aVRhYmxlLmZpbHRlcnNbZmlsdGVyTmFtZV0odGFibGUsIGNvbnRyb2wpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRhYmxlLl9maWx0ZXJzLnB1c2goaW5zdGFuY2UpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gaW5zdGFuY2U7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPINGB0L7RgNGC0LjRgNC+0LLQutC4XHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gdGFibGVcclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHNvcnRcclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIGluaXRTb3J0OiBmdW5jdGlvbiAodGFibGUsIHNvcnQpIHtcclxuXHJcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoc29ydCkgJiYgc29ydC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICQuZWFjaChzb3J0LCBmdW5jdGlvbiAoa2V5LCBzb3J0RmllbGQpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY29yZXVpVGFibGVVdGlscy5pc09iamVjdChzb3J0RmllbGQpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgc29ydEZpZWxkLmhhc093blByb3BlcnR5KCdmaWVsZCcpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgc29ydEZpZWxkLmhhc093blByb3BlcnR5KCdvcmRlcicpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZW9mIHNvcnRGaWVsZC5maWVsZCA9PT0gJ3N0cmluZycgJiZcclxuICAgICAgICAgICAgICAgICAgICB0eXBlb2Ygc29ydEZpZWxkLm9yZGVyID09PSAnc3RyaW5nJyAmJlxyXG4gICAgICAgICAgICAgICAgICAgIHNvcnRGaWVsZC5maWVsZCAmJlxyXG4gICAgICAgICAgICAgICAgICAgIHNvcnRGaWVsZC5vcmRlciAmJlxyXG4gICAgICAgICAgICAgICAgICAgIFsnYXNjJywgJ2Rlc2MnXS5pbmRleE9mKHNvcnRGaWVsZC5vcmRlcikgPj0gMFxyXG4gICAgICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGFibGUuX3NvcnQucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkOiBzb3J0RmllbGQuZmllbGQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9yZGVyOiBzb3J0RmllbGQub3JkZXJcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQn9C+0LjRgdC6INC/0L4g0LTQsNC90L3Ri9C8INGC0LDQsdC70LjRhtGLXHJcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gdGFibGVcclxuICAgICAqL1xyXG4gICAgc2VhcmNoTG9jYWxSZWNvcmRzOiBmdW5jdGlvbiAodGFibGUpIHtcclxuXHJcbiAgICAgICAgbGV0IHNlYXJjaERhdGEgICAgID0gdGFibGUuZ2V0U2VhcmNoRGF0YSh0cnVlKTtcclxuICAgICAgICBsZXQgZmlsdGVyRGF0YSAgICAgPSB0YWJsZS5nZXRGaWx0ZXJEYXRhKHRydWUpO1xyXG4gICAgICAgIGxldCBjb2x1bW5zT3B0aW9ucyA9IHt9O1xyXG5cclxuICAgICAgICB0YWJsZS5fY29sdW1ucy5tYXAoZnVuY3Rpb24gKGNvbHVtbikge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvbHVtbi5jb252ZXJ0VG9TdHJpbmcgPT09ICdmdW5jdGlvbicgJiZcclxuICAgICAgICAgICAgICAgIHR5cGVvZiBjb2x1bW4uZ2V0RmllbGQgPT09ICdmdW5jdGlvbidcclxuICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgZmllbGQgPSBjb2x1bW4uZ2V0RmllbGQoKVxyXG4gICAgICAgICAgICAgICAgaWYgKGZpZWxkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29sdW1uc09wdGlvbnNbZmllbGRdID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgY29sdW1uc09wdGlvbnNbZmllbGRdLmNvbnZlcnRUb1N0cmluZyA9IGNvbHVtbi5jb252ZXJ0VG9TdHJpbmc7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcblxyXG4gICAgICAgIHRhYmxlLl9yZWNvcmRzLm1hcChmdW5jdGlvbiAocmVjb3JkKSB7XHJcbiAgICAgICAgICAgIGxldCBpc1Nob3cgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgaWYgKHNlYXJjaERhdGEubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgaXNTaG93ID0gY29yZXVpVGFibGVQcml2YXRlLmlzRmlsdGVyZWRSZWNvcmQoc2VhcmNoRGF0YSwgcmVjb3JkLmRhdGEsIGNvbHVtbnNPcHRpb25zKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGlzU2hvdyAmJiBmaWx0ZXJEYXRhLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgIGlzU2hvdyA9IGNvcmV1aVRhYmxlUHJpdmF0ZS5pc0ZpbHRlcmVkUmVjb3JkKGZpbHRlckRhdGEsIHJlY29yZC5kYXRhLCBjb2x1bW5zT3B0aW9ucyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJlY29yZC5zaG93ID0gaXNTaG93O1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQo9GB0YLQsNC90L7QstC60LAg0LfQsNC/0LjRgdC10LlcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSB0YWJsZVxyXG4gICAgICogQHBhcmFtIHtBcnJheX0gIHJlY29yZHNcclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIHNldFJlY29yZHM6IGZ1bmN0aW9uICh0YWJsZSwgcmVjb3Jkcykge1xyXG5cclxuICAgICAgICB0YWJsZS5fcmVjb3Jkc0luZGV4ID0gMTtcclxuICAgICAgICB0YWJsZS5fcmVjb3JkcyAgICAgID0gW107XHJcblxyXG4gICAgICAgIGxldCB0aGF0ID0gdGhpcztcclxuXHJcbiAgICAgICAgJC5lYWNoKHJlY29yZHMsIGZ1bmN0aW9uIChrZXksIHJlY29yZCkge1xyXG5cclxuICAgICAgICAgICAgdGhhdC5hZGRSZWNvcmQodGFibGUsIHJlY29yZCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCU0L7QsdCw0LLQu9C10L3QuNC1INC90L7QstC+0Lkg0LfQsNC/0LjRgdC4XHJcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gdGFibGVcclxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBkYXRhXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYWZ0ZXJJbmRleFxyXG4gICAgICogQHJldHVybiB7b2JqZWN0fG51bGx9XHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBhZGRSZWNvcmQ6IGZ1bmN0aW9uICh0YWJsZSwgZGF0YSwgYWZ0ZXJJbmRleCkge1xyXG5cclxuICAgICAgICBpZiAoY29yZXVpVGFibGVVdGlscy5pc09iamVjdChkYXRhKSkge1xyXG4gICAgICAgICAgICBkYXRhID0gJC5leHRlbmQodHJ1ZSwge30sIGRhdGEpO1xyXG5cclxuICAgICAgICAgICAgbGV0IG1ldGEgPSBkYXRhLmhhc093blByb3BlcnR5KCdfbWV0YScpICYmIGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QoZGF0YS5fbWV0YSlcclxuICAgICAgICAgICAgICAgID8gZGF0YS5fbWV0YVxyXG4gICAgICAgICAgICAgICAgOiBudWxsO1xyXG5cclxuICAgICAgICAgICAgaWYgKG1ldGEpIHtcclxuICAgICAgICAgICAgICAgIGRlbGV0ZSBkYXRhLl9tZXRhO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBsZXQgcmVjb3JkID0ge1xyXG4gICAgICAgICAgICAgICAgaW5kZXg6IHRhYmxlLl9yZWNvcmRzSW5kZXgrKyxcclxuICAgICAgICAgICAgICAgIGRhdGE6IGRhdGEsXHJcbiAgICAgICAgICAgICAgICBzaG93OiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgbWV0YTogbWV0YSxcclxuICAgICAgICAgICAgICAgIHNlcTogdGFibGUuX3NlcSsrLFxyXG4gICAgICAgICAgICB9O1xyXG5cclxuXHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgYWZ0ZXJJbmRleCA9PT0gJ251bWJlcicpIHtcclxuICAgICAgICAgICAgICAgIGlmIChhZnRlckluZGV4ID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGFibGUuX3JlY29yZHMuc3BsaWNlKDAsIDAsIHJlY29yZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlY29yZDtcclxuXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBpbmRleCA9IG51bGw7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICQuZWFjaCh0YWJsZS5fcmVjb3JkcywgZnVuY3Rpb24gKGtleSwgcmVjb3JkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhZnRlckluZGV4ID09PSByZWNvcmQuaW5kZXgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4ID0ga2V5O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpbmRleCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0YWJsZS5fcmVjb3Jkcy5zcGxpY2UoaW5kZXgsIDAsIHJlY29yZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZWNvcmQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRhYmxlLl9yZWNvcmRzLnB1c2gocmVjb3JkKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiByZWNvcmQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0JTQvtCx0LDQstC70LXQvdC40LUg0L3QvtCy0L7QuSDQt9Cw0L/QuNGB0Lgg0L/QtdGA0LXQtCDRg9C60LDQt9Cw0L3QvdC+0LlcclxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSB0YWJsZVxyXG4gICAgICogQHBhcmFtIHtvYmplY3R9IGRhdGFcclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleFxyXG4gICAgICogQHJldHVybiB7b2JqZWN0fG51bGx9XHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBhZGRSZWNvcmRCZWZvcmU6IGZ1bmN0aW9uICh0YWJsZSwgZGF0YSwgaW5kZXgpIHtcclxuXHJcbiAgICAgICAgaWYgKGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QoZGF0YSkgJiYgdHlwZW9mIGluZGV4ID09PSAnbnVtYmVyJykge1xyXG4gICAgICAgICAgICBkYXRhID0gJC5leHRlbmQodHJ1ZSwge30sIGRhdGEpO1xyXG5cclxuICAgICAgICAgICAgbGV0IG1ldGEgPSBkYXRhLmhhc093blByb3BlcnR5KCdfbWV0YScpICYmIGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QoZGF0YS5fbWV0YSlcclxuICAgICAgICAgICAgICAgID8gZGF0YS5fbWV0YVxyXG4gICAgICAgICAgICAgICAgOiBudWxsO1xyXG5cclxuICAgICAgICAgICAgaWYgKG1ldGEpIHtcclxuICAgICAgICAgICAgICAgIGRlbGV0ZSBkYXRhLl9tZXRhO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBsZXQgcmVjb3JkID0ge1xyXG4gICAgICAgICAgICAgICAgaW5kZXg6IHRhYmxlLl9yZWNvcmRzSW5kZXgrKyxcclxuICAgICAgICAgICAgICAgIGRhdGE6IGRhdGEsXHJcbiAgICAgICAgICAgICAgICBzaG93OiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgbWV0YTogbWV0YSxcclxuICAgICAgICAgICAgICAgIHNlcTogdGFibGUuX3NlcSsrLFxyXG4gICAgICAgICAgICB9O1xyXG5cclxuXHJcbiAgICAgICAgICAgIGxldCBpc3NldEtleSAgPSBmYWxzZTtcclxuICAgICAgICAgICAgbGV0IGtleUJlZm9yZSA9IG51bGw7XHJcblxyXG4gICAgICAgICAgICAkLmVhY2godGFibGUuX3JlY29yZHMsIGZ1bmN0aW9uIChrZXksIHJlY29yZCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGluZGV4ID09PSByZWNvcmQuaW5kZXgpIHtcclxuICAgICAgICAgICAgICAgICAgICBpc3NldEtleSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGtleUJlZm9yZSA9IGtleTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBpZiAoaXNzZXRLZXkgJiYga2V5QmVmb3JlKSB7XHJcbiAgICAgICAgICAgICAgICB0YWJsZS5fcmVjb3Jkcy5zcGxpY2Uoa2V5QmVmb3JlLCAwLCByZWNvcmQpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlY29yZDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQn9GA0L7QstC10YDQutCwINC/0L7QtNGF0L7QtNC40YIg0LvQuCDQt9Cw0L/QuNGB0Ywg0L/QvtC0INC/0L7QuNGB0LrQvtCy0YvQtSDQtNCw0L3QvdGL0LVcclxuICAgICAqIEBwYXJhbSB7QXJyYXl9ICBmaWx0ZXJzXHJcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gcmVjb3JkRGF0YVxyXG4gICAgICogQHBhcmFtIHtvYmplY3R9IGNvbHVtbnNPcHRpb25zXHJcbiAgICAgKiBAcmV0dXJuIHtib29sZWFufVxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgaXNGaWx0ZXJlZFJlY29yZDogZnVuY3Rpb24gKGZpbHRlcnMsIHJlY29yZERhdGEsIGNvbHVtbnNPcHRpb25zKSB7XHJcblxyXG4gICAgICAgIGxldCBpc1Nob3cgPSB0cnVlO1xyXG4gICAgICAgICQuZWFjaChmaWx0ZXJzLCBmdW5jdGlvbiAoa2V5LCBmaWx0ZXIpIHtcclxuXHJcbiAgICAgICAgICAgIGxldCBmaWVsZFZhbHVlID0gbnVsbDtcclxuXHJcbiAgICAgICAgICAgIGlmIChyZWNvcmREYXRhLmhhc093blByb3BlcnR5KGZpbHRlci5maWVsZCkgJiYgcmVjb3JkRGF0YVtmaWx0ZXIuZmllbGRdKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoY29sdW1uc09wdGlvbnMgJiZcclxuICAgICAgICAgICAgICAgICAgICBjb2x1bW5zT3B0aW9ucy5oYXNPd25Qcm9wZXJ0eShmaWx0ZXIuZmllbGQpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGNvbHVtbnNPcHRpb25zW2ZpbHRlci5maWVsZF0uY29udmVydFRvU3RyaW5nID09PSAnZnVuY3Rpb24nXHJcbiAgICAgICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgICAgICBmaWVsZFZhbHVlID0gY29sdW1uc09wdGlvbnNbZmlsdGVyLmZpZWxkXS5jb252ZXJ0VG9TdHJpbmcocmVjb3JkRGF0YVtmaWx0ZXIuZmllbGRdKTtcclxuXHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiByZWNvcmREYXRhW2ZpbHRlci5maWVsZF0gPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZmllbGRWYWx1ZSA9IHJlY29yZERhdGFbZmlsdGVyLmZpZWxkXTtcclxuXHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiByZWNvcmREYXRhW2ZpbHRlci5maWVsZF0gPT09ICdudW1iZXInKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZmllbGRWYWx1ZSA9IFN0cmluZyhyZWNvcmREYXRhW2ZpbHRlci5maWVsZF0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICAgICAgaWYgKGZpZWxkVmFsdWUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIGlmICggISBmaWx0ZXIuZmlsdGVyKGZpZWxkVmFsdWUsIGZpbHRlci52YWx1ZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpc1Nob3cgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaXNTaG93ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGlzU2hvdztcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0JLRi9C/0L7Qu9C90LXQvdC40Y8g0LfQsNGA0LXQs9C40YHRgtGA0LjRgNC+0LLQsNC90L3Ri9GFINGE0YPQvdC60YbQuNC5INCyINGD0LrQsNC30LDQvdC90L7QvCDRgdC+0LHRi9GC0LjQuFxyXG4gICAgICogQHBhcmFtIHtvYmplY3R9IHRhYmxlXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxyXG4gICAgICogQHBhcmFtIHtBcnJheX0gIHBhcmFtc1xyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgX3RyaWdnZXI6IGZ1bmN0aW9uKHRhYmxlLCBuYW1lLCBwYXJhbXMpIHtcclxuXHJcbiAgICAgICAgcGFyYW1zID0gcGFyYW1zIHx8IFtdO1xyXG5cclxuICAgICAgICBpZiAodGFibGUuX2V2ZW50cy5oYXNPd25Qcm9wZXJ0eShuYW1lKSAmJiB0YWJsZS5fZXZlbnRzW25hbWVdLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0YWJsZS5fZXZlbnRzW25hbWVdLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgY2FsbGJhY2sgPSB0YWJsZS5fZXZlbnRzW25hbWVdW2ldLmNhbGxiYWNrO1xyXG4gICAgICAgICAgICAgICAgbGV0IGNvbnRleHQgID0gdGFibGUuX2V2ZW50c1tuYW1lXVtpXS5jb250ZXh0ID8gdGFibGUuX2V2ZW50c1tuYW1lXVtpXS5jb250ZXh0IDogdGFibGU7XHJcblxyXG4gICAgICAgICAgICAgICAgY2FsbGJhY2suYXBwbHkoY29udGV4dCwgcGFyYW1zKVxyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0YWJsZS5fZXZlbnRzW25hbWVdW2ldLnNpbmdsZUV4ZWMpIHtcclxuICAgICAgICAgICAgICAgICAgICB0YWJsZS5fZXZlbnRzW25hbWVdLnNwbGljZShpLCAxKTtcclxuICAgICAgICAgICAgICAgICAgICBpLS07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCh0L7RgNGC0LjRgNC+0LLQutCwINC30LDQv9C40YHQtdC5INC/0L4gc2VxXHJcbiAgICAgKiBAcGFyYW0ge0FycmF5fSByZWNvcmRzXHJcbiAgICAgKiBAcmV0dXJuIHsqfVxyXG4gICAgICovXHJcbiAgICBzb3J0UmVjb3Jkc0J5U2VxOiBmdW5jdGlvbiAocmVjb3Jkcykge1xyXG5cclxuICAgICAgICByZXR1cm4gcmVjb3Jkcy5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBhLnNlcSAtIGIuc2VxO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQodC+0YDRgtC40YDQvtCy0LrQsCDQt9Cw0L/QuNGB0LXQuSDQv9C+INGD0LrQsNC30LDQvdC90YvQvCDQv9C+0LvRj9C8XHJcbiAgICAgKiBAcGFyYW0ge0FycmF5fSAgcmVjb3Jkc1xyXG4gICAgICogQHBhcmFtIHtBcnJheX0gIGZpZWxkc1xyXG4gICAgICogQHBhcmFtIHtvYmplY3R9IGNvbHVtbnNDb252ZXJ0ZXJzXHJcbiAgICAgKi9cclxuICAgIHNvcnRSZWNvcmRzQnlGaWVsZHM6IGZ1bmN0aW9uIChyZWNvcmRzLCBmaWVsZHMsIGNvbHVtbnNDb252ZXJ0ZXJzKSB7XHJcblxyXG4gICAgICAgIHJldHVybiByZWNvcmRzLnNvcnQoZnVuY3Rpb24oYSwgYikge1xyXG5cclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmaWVsZHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGxldCBpc3NldEFGaWVsZCA9IGEuZGF0YS5oYXNPd25Qcm9wZXJ0eShmaWVsZHNbaV0uZmllbGQpO1xyXG4gICAgICAgICAgICAgICAgbGV0IGlzc2V0QkZpZWxkID0gYi5kYXRhLmhhc093blByb3BlcnR5KGZpZWxkc1tpXS5maWVsZCk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCAhIGlzc2V0QUZpZWxkICYmICEgaXNzZXRCRmllbGQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gMDtcclxuXHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCAhIGlzc2V0QUZpZWxkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDE7XHJcblxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICggISBpc3NldEJGaWVsZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAtMTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgYVZhbCA9ICcnO1xyXG4gICAgICAgICAgICAgICAgbGV0IGJWYWwgPSAnJztcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoYS5kYXRhLmhhc093blByb3BlcnR5KGZpZWxkc1tpXS5maWVsZCkgJiYgYS5kYXRhW2ZpZWxkc1tpXS5maWVsZF0pIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY29sdW1uc0NvbnZlcnRlcnMgJiYgY29sdW1uc0NvbnZlcnRlcnMuaGFzT3duUHJvcGVydHkoZmllbGRzW2ldLmZpZWxkKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhVmFsID0gY29sdW1uc0NvbnZlcnRlcnNbZmllbGRzW2ldLmZpZWxkXShhLmRhdGFbZmllbGRzW2ldLmZpZWxkXSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2YgYS5kYXRhW2ZpZWxkc1tpXS5maWVsZF0pID49IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYVZhbCA9IFN0cmluZyhhLmRhdGFbZmllbGRzW2ldLmZpZWxkXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChiLmRhdGEuaGFzT3duUHJvcGVydHkoZmllbGRzW2ldLmZpZWxkKSAmJiBiLmRhdGFbZmllbGRzW2ldLmZpZWxkXSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjb2x1bW5zQ29udmVydGVycyAmJiBjb2x1bW5zQ29udmVydGVycy5oYXNPd25Qcm9wZXJ0eShmaWVsZHNbaV0uZmllbGQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJWYWwgPSBjb2x1bW5zQ29udmVydGVyc1tmaWVsZHNbaV0uZmllbGRdKGIuZGF0YVtmaWVsZHNbaV0uZmllbGRdKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiBiLmRhdGFbZmllbGRzW2ldLmZpZWxkXSkgPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBiVmFsID0gU3RyaW5nKGIuZGF0YVtmaWVsZHNbaV0uZmllbGRdKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGFWYWwgPT09IG51bGwgfHwgYVZhbCA9PT0gdW5kZWZpbmVkIHx8IHR5cGVvZiBhVmFsID09PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBhVmFsID0gJyc7XHJcblxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgYVZhbCA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgICAgICAgICAgICAgICBhVmFsID0gSlNPTi5zdHJpbmdpZnkoYVZhbCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGJWYWwgPT09IG51bGwgfHwgYlZhbCA9PT0gdW5kZWZpbmVkIHx8IHR5cGVvZiBiVmFsID09PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBiVmFsID0gJyc7XHJcblxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgYlZhbCA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgICAgICAgICAgICAgICBiVmFsID0gSlNPTi5zdHJpbmdpZnkoYlZhbCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgbGV0IHZhbCA9IGFWYWwgPCBiVmFsXHJcbiAgICAgICAgICAgICAgICAgICAgPyAtMVxyXG4gICAgICAgICAgICAgICAgICAgIDogKGFWYWwgPiBiVmFsID8gMSA6IDApO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChmaWVsZHNbaV0ub3JkZXIgPT09IFwiZGVzY1wiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFsID0gdmFsICogLTE7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHZhbCAhPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWw7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQo9GB0YLQsNC90L7QstC60LAg0YHQvtGA0YLQuNGA0L7QstC60Lgg0LTQu9GPINGD0LrQsNC30LDQvdC90YvRhSDQutC+0LvQvtC90L7QulxyXG4gICAgICogQHBhcmFtIHtvYmplY3R9IHRhYmxlXHJcbiAgICAgKiBAcGFyYW0ge0FycmF5fSAgc29ydFxyXG4gICAgICovXHJcbiAgICBzZXRDb2x1bW5zU29ydDogZnVuY3Rpb24gKHRhYmxlLCBzb3J0KSB7XHJcblxyXG4gICAgICAgIGxldCB0aGVhZCA9IGNvcmV1aVRhYmxlRWxlbWVudHMuZ2V0VGFibGVUaGVhZCh0YWJsZS5nZXRJZCgpKTtcclxuXHJcbiAgICAgICAgJC5lYWNoKHRhYmxlLl9jb2x1bW5zLCBmdW5jdGlvbiAoa2V5LCBjb2x1bW4pIHtcclxuICAgICAgICAgICAgbGV0IG9wdGlvbnMgPSBjb2x1bW4uZ2V0T3B0aW9ucygpO1xyXG5cclxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuaGFzT3duUHJvcGVydHkoJ2ZpZWxkJykgJiZcclxuICAgICAgICAgICAgICAgIG9wdGlvbnMuaGFzT3duUHJvcGVydHkoJ3NvcnRhYmxlJykgJiZcclxuICAgICAgICAgICAgICAgIHR5cGVvZiBvcHRpb25zLmZpZWxkID09PSAnc3RyaW5nJyAmJlxyXG4gICAgICAgICAgICAgICAgb3B0aW9ucy5zb3J0YWJsZVxyXG4gICAgICAgICAgICApIHtcclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgc29ydENvbHVtbiA9IG51bGw7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoc29ydCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAkLmVhY2goc29ydCwgZnVuY3Rpb24gKGtleSwgc29ydEl0ZW0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3Qoc29ydEl0ZW0pICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3J0SXRlbS5oYXNPd25Qcm9wZXJ0eSgnZmllbGQnKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc29ydEl0ZW0uaGFzT3duUHJvcGVydHkoJ29yZGVyJykgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVvZiBzb3J0SXRlbS5maWVsZCA9PT0gJ3N0cmluZycgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVvZiBzb3J0SXRlbS5vcmRlciA9PT0gJ3N0cmluZycgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnMuZmllbGQgPT09IHNvcnRJdGVtLmZpZWxkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc29ydENvbHVtbiA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWVsZDogc29ydEl0ZW0uZmllbGQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3JkZXI6IHNvcnRJdGVtLm9yZGVyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgbGV0IGNvbHVtbkVsZW1lbnQgPSB0aGVhZC5maW5kKCdbZGF0YS1maWVsZD1cIicgKyBvcHRpb25zLmZpZWxkICsgJ1wiXScpO1xyXG4gICAgICAgICAgICAgICAgY29sdW1uRWxlbWVudC5maW5kKCcuY29yZXVpLXRhYmxlX19jb2x1bW4tc29ydCcpLnJlbW92ZSgpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChzb3J0Q29sdW1uICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNvcnRDb2x1bW4ub3JkZXIgPT09ICdhc2MnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbHVtbkVsZW1lbnQuYXBwZW5kKCc8aSBjbGFzcz1cImNvcmV1aS10YWJsZV9fY29sdW1uLXNvcnQgYmkgYmktc29ydC1kb3duLWFsdFwiPjwvaT4nKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2x1bW5FbGVtZW50LmFwcGVuZCgnPGkgY2xhc3M9XCJjb3JldWktdGFibGVfX2NvbHVtbi1zb3J0IGJpIGJpLXNvcnQtZG93blwiPjwvaT4nKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC00LDQvdC90YvRhSDQuNC3INGF0YDQsNC90LjQu9C40YnQsFxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRhYmxlSWRcclxuICAgICAqIEByZXR1cm4ge29iamVjdHxudWxsfVxyXG4gICAgICovXHJcbiAgICBnZXRTdG9yYWdlOiBmdW5jdGlvbiAodGFibGVJZCkge1xyXG5cclxuICAgICAgICBsZXQgc3RvcmFnZSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdjb3JldWlfdGFibGUnKTtcclxuXHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBzdG9yYWdlID09PSAnc3RyaW5nJyAmJiBzdG9yYWdlKSB7XHJcbiAgICAgICAgICAgICAgICBzdG9yYWdlID0gSlNPTi5wYXJzZShzdG9yYWdlKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY29yZXVpVGFibGVVdGlscy5pc09iamVjdChzdG9yYWdlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0YWJsZUlkICYmIHR5cGVvZiB0YWJsZUlkID09PSAnc3RyaW5nJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICA/IChzdG9yYWdlLmhhc093blByb3BlcnR5KHRhYmxlSWQpID8gc3RvcmFnZVt0YWJsZUlkXSA6IG51bGwpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDogc3RvcmFnZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcblxyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQodC+0YXRgNCw0L3QtdC90LjQtSDQtNCw0L3QvdGL0YUg0LIg0YXRgNCw0L3QuNC70LjRidC1XHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gICAgICB0YWJsZUlkXHJcbiAgICAgKiBAcGFyYW0ge29iamVjdHxudWxsfSBzdG9yYWdlXHJcbiAgICAgKi9cclxuICAgIHNldFN0b3JhZ2U6IGZ1bmN0aW9uICh0YWJsZUlkLCBzdG9yYWdlKSB7XHJcblxyXG4gICAgICAgIGlmICh0eXBlb2YgdGFibGVJZCAhPT0gJ3N0cmluZycgfHwgISB0YWJsZUlkKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBzdG9yYWdlQWxsID0gdGhpcy5nZXRTdG9yYWdlKCk7XHJcblxyXG4gICAgICAgIGlmIChjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KHN0b3JhZ2VBbGwpKSB7XHJcbiAgICAgICAgICAgIGlmIChzdG9yYWdlQWxsLmhhc093blByb3BlcnR5KHRhYmxlSWQpKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoc3RvcmFnZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0b3JhZ2VBbGxbdGFibGVJZF0gPSBzdG9yYWdlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBkZWxldGUgc3RvcmFnZUFsbFt0YWJsZUlkXTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc3RvcmFnZSkge1xyXG4gICAgICAgICAgICAgICAgc3RvcmFnZUFsbFt0YWJsZUlkXSA9IHN0b3JhZ2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdjb3JldWlfdGFibGUnLCBKU09OLnN0cmluZ2lmeShzdG9yYWdlQWxsIHx8IHt9KSk7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSDQv9C+0LvRjyDQuNC3INGF0YDQsNC90LjQu9C40YnQsFxyXG4gICAgICogQHBhcmFtIHRhYmxlSWRcclxuICAgICAqIEBwYXJhbSBmaWVsZFxyXG4gICAgICogQHJldHVybiB7KnxudWxsfVxyXG4gICAgICovXHJcbiAgICBnZXRTdG9yYWdlRmllbGQ6IGZ1bmN0aW9uICh0YWJsZUlkLCBmaWVsZCkge1xyXG5cclxuICAgICAgICBsZXQgc3RvcmFnZSA9IHRoaXMuZ2V0U3RvcmFnZSh0YWJsZUlkKSB8fCB7fTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHN0b3JhZ2UuaGFzT3duUHJvcGVydHkoZmllbGQpXHJcbiAgICAgICAgICAgID8gc3RvcmFnZVtmaWVsZF1cclxuICAgICAgICAgICAgOiBudWxsO1xyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQodC+0YXRgNCw0L3QtdC90LjQtSDQv9C+0LvRjyDQsiDRhdGA0LDQvdC40LvQuNGJ0LVcclxuICAgICAqIEBwYXJhbSB0YWJsZUlkXHJcbiAgICAgKiBAcGFyYW0gZmllbGRcclxuICAgICAqIEBwYXJhbSBkYXRhXHJcbiAgICAgKi9cclxuICAgIHNldFN0b3JhZ2VGaWVsZDogZnVuY3Rpb24gKHRhYmxlSWQsIGZpZWxkLCBkYXRhKSB7XHJcblxyXG4gICAgICAgIGxldCBzdG9yYWdlID0gdGhpcy5nZXRTdG9yYWdlKHRhYmxlSWQpIHx8IHt9O1xyXG5cclxuICAgICAgICBpZiAoZGF0YSA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICBpZiAoc3RvcmFnZS5oYXNPd25Qcm9wZXJ0eShmaWVsZCkpIHtcclxuICAgICAgICAgICAgICAgIGRlbGV0ZSBzdG9yYWdlW2ZpZWxkXTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBzdG9yYWdlW2ZpZWxkXSA9IGRhdGE7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnNldFN0b3JhZ2UodGFibGVJZCwgc3RvcmFnZSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNvcmV1aVRhYmxlUHJpdmF0ZTsiLCJcbmltcG9ydCBjb3JldWlUYWJsZVRwbCAgICAgIGZyb20gJy4vY29yZXVpLnRhYmxlLnRlbXBsYXRlcyc7XG5pbXBvcnQgY29yZXVpVGFibGVVdGlscyAgICBmcm9tIFwiLi9jb3JldWkudGFibGUudXRpbHNcIjtcbmltcG9ydCBjb3JldWlUYWJsZVJlbmRlciAgIGZyb20gXCIuL2NvcmV1aS50YWJsZS5yZW5kZXJcIjtcbmltcG9ydCBjb3JldWlUYWJsZUVsZW1lbnRzIGZyb20gXCIuL2NvcmV1aS50YWJsZS5lbGVtZW50c1wiO1xuaW1wb3J0IGNvcmV1aVRhYmxlUHJpdmF0ZSAgZnJvbSBcIi4vY29yZXVpLnRhYmxlLnByaXZhdGVcIjtcblxuXG5sZXQgY29yZXVpVGFibGVJbnN0YW5jZSA9IHtcblxuICAgIF9vcHRpb25zOiB7XG4gICAgICAgIGlkOiBudWxsLFxuICAgICAgICBjbGFzczogJycsXG4gICAgICAgIHByaW1hcnlLZXk6ICdpZCcsXG4gICAgICAgIGxhbmc6ICdlbicsXG4gICAgICAgIGxhbmdJdGVtczoge30sXG4gICAgICAgIHdpZHRoOiBudWxsLFxuICAgICAgICBtaW5XaWR0aDogbnVsbCxcbiAgICAgICAgbWF4V2lkdGg6IG51bGwsXG4gICAgICAgIGhlaWdodDogbnVsbCxcbiAgICAgICAgbWluSGVpZ2h0OiBudWxsLFxuICAgICAgICBuYXhIZWlnaHQ6IG51bGwsXG4gICAgICAgIG92ZXJmbG93OiBmYWxzZSxcbiAgICAgICAgcGFnZTogMSxcbiAgICAgICAgcmVjb3Jkc1BlclBhZ2U6IDI1LFxuICAgICAgICB0aGVhZFRvcDogMCxcbiAgICAgICAgc2F2ZVN0YXRlOiBmYWxzZSxcbiAgICAgICAgbm9Cb3JkZXI6IGZhbHNlLFxuICAgICAgICBub1dyYXA6IGZhbHNlLFxuICAgICAgICBub1dyYXBUb2dnbGU6IGZhbHNlLFxuICAgICAgICBzaG93SGVhZGVyczogdHJ1ZSxcbiAgICAgICAgc2hvd1Njcm9sbFNoYWRvdzogZmFsc2UsXG5cbiAgICAgICAgcmVjb3Jkc1JlcXVlc3Q6IHtcbiAgICAgICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgICAgICB1cmw6IG51bGwsICAvLyAnL21vZC9pbmRleC9vcmRlcnMvP3BhZ2U9W3BhZ2VdJ1xuICAgICAgICB9LFxuXG4gICAgICAgIHJlcXVlc3RQYXJhbXM6IHtcbiAgICAgICAgICAgIHBhZ2U6ICdwYWdlJyxcbiAgICAgICAgICAgIGNvdW50OiAnY291bnQnLFxuICAgICAgICAgICAgc3RhcnQ6ICdzdGFydCcsXG4gICAgICAgICAgICBlbmQ6ICdlbmQnLFxuICAgICAgICAgICAgc29ydDogJ3NvcnQnLFxuICAgICAgICAgICAgc2VhcmNoOiAnc2VhcmNoJ1xuICAgICAgICB9LFxuXG4gICAgICAgIGdyb3VwOiB7XG4gICAgICAgICAgICBmaWVsZDogbnVsbCxcbiAgICAgICAgICAgIGF0dHI6IHt9LFxuICAgICAgICAgICAgcmVuZGVyOiBudWxsXG4gICAgICAgIH0sXG5cbiAgICAgICAgb25DbGljazogbnVsbCxcbiAgICAgICAgb25DbGlja1VybDogbnVsbCxcbiAgICAgICAgc29ydDogW10sXG4gICAgICAgIGhlYWRlcjogW10sXG4gICAgICAgIGZvb3RlcjogW10sXG4gICAgICAgIGNvbHVtbnNIZWFkZXI6IFtdLFxuICAgICAgICBzZWFyY2g6IHtcbiAgICAgICAgICAgIGxhYmVsV2lkdGg6IDIwMCxcbiAgICAgICAgICAgIGNvbnRyb2xzOiBbXSxcbiAgICAgICAgfSxcbiAgICAgICAgY29sdW1uczogW10sXG4gICAgICAgIGNvbHVtbnNGb290ZXI6IFtdLFxuICAgICAgICByZWNvcmRzOiBbXVxuICAgIH0sXG5cbiAgICBfaWQ6ICcnLFxuICAgIF9wYWdlOiAxLFxuICAgIF9yZWNvcmRzSW5kZXg6IDEsXG4gICAgX3JlY29yZHNQZXJQYWdlOiAyNSxcbiAgICBfcmVjb3Jkc1RvdGFsOiAwLFxuICAgIF9yZWNvcmRzTnVtYmVyOiAxLFxuICAgIF9zZXE6IDEsXG4gICAgX2lzUmVjb3Jkc1JlcXVlc3Q6IGZhbHNlLFxuICAgIF9jb3VudENvbHVtbnNTaG93OiAwLFxuXG4gICAgX3JlY29yZHM6IFtdLFxuICAgIF9zb3J0OiBbXSxcbiAgICBfY29sdW1uczogW10sXG4gICAgX3NlYXJjaDogW10sXG4gICAgX2ZpbHRlcnM6IFtdLFxuICAgIF9jb250cm9sczogW10sXG4gICAgX2NvbnRyb2xzUG9zaXRpb25zOiB7XG4gICAgICAgIGhlYWRlcjogW10sXG4gICAgICAgIGZvb3RlcjogW10sXG4gICAgfSxcbiAgICBfZXZlbnRzOiB7fSxcblxuXG4gICAgLyoqXG4gICAgICog0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y9cbiAgICAgKiBAcGFyYW0ge29iamVjdH0gdGFibGVXcmFwcGVyXG4gICAgICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnNcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9pbml0OiBmdW5jdGlvbiAodGFibGVXcmFwcGVyLCBvcHRpb25zKSB7XG5cbiAgICAgICAgdGhpcy5fb3B0aW9ucyA9ICQuZXh0ZW5kKHRydWUsIHt9LCB0aGlzLl9vcHRpb25zLCBvcHRpb25zKTtcbiAgICAgICAgdGhpcy5fZXZlbnRzICA9IHt9O1xuICAgICAgICB0aGlzLl9pZCAgICAgID0gdGhpcy5fb3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnaWQnKSAmJiB0eXBlb2YgdGhpcy5fb3B0aW9ucy5pZCA9PT0gJ3N0cmluZycgJiYgdGhpcy5fb3B0aW9ucy5pZFxuICAgICAgICAgICAgPyB0aGlzLl9vcHRpb25zLmlkXG4gICAgICAgICAgICA6IGNvcmV1aVRhYmxlVXRpbHMuaGFzaENvZGUoKTtcblxuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy5wYWdlID4gMCkge1xuICAgICAgICAgICAgdGhpcy5fcGFnZSA9IHRoaXMuX29wdGlvbnMucGFnZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy5yZWNvcmRzUGVyUGFnZSA+IDApIHtcbiAgICAgICAgICAgIHRoaXMuX3JlY29yZHNQZXJQYWdlID0gdGhpcy5fb3B0aW9ucy5yZWNvcmRzUGVyUGFnZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2lzUmVjb3Jkc1JlcXVlc3QgPSAoXG4gICAgICAgICAgICB0aGlzLl9vcHRpb25zLmhhc093blByb3BlcnR5KCdyZWNvcmRzUmVxdWVzdCcpICYmXG4gICAgICAgICAgICAoXG4gICAgICAgICAgICAgICAgdHlwZW9mIHRoaXMuX29wdGlvbnMucmVjb3Jkc1JlcXVlc3QgPT09ICdmdW5jdGlvbicgfHxcbiAgICAgICAgICAgICAgICAoY29yZXVpVGFibGVVdGlscy5pc09iamVjdCh0aGlzLl9vcHRpb25zLnJlY29yZHNSZXF1ZXN0KSAmJlxuICAgICAgICAgICAgICAgIHRoaXMuX29wdGlvbnMucmVjb3Jkc1JlcXVlc3QuaGFzT3duUHJvcGVydHkoJ3VybCcpICYmXG4gICAgICAgICAgICAgICAgdHlwZW9mIHRoaXMuX29wdGlvbnMucmVjb3Jkc1JlcXVlc3QudXJsID09PSAnc3RyaW5nJyAmJlxuICAgICAgICAgICAgICAgIHRoaXMuX29wdGlvbnMucmVjb3Jkc1JlcXVlc3QudXJsICE9PSAnJyAmJlxuICAgICAgICAgICAgICAgIHRoaXMuX29wdGlvbnMucmVjb3Jkc1JlcXVlc3QudXJsICE9PSAnIycpXG4gICAgICAgICAgICApXG4gICAgICAgICk7XG5cbiAgICAgICAgaWYgKHRoaXMuX2lzUmVjb3Jkc1JlcXVlc3QpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdGhpcy5fb3B0aW9ucy5yZWNvcmRzUmVxdWVzdCA9PT0gJ29iamVjdCcgJiZcbiAgICAgICAgICAgICAgICAoICEgdGhpcy5fb3B0aW9ucy5yZWNvcmRzUmVxdWVzdC5oYXNPd25Qcm9wZXJ0eSgnbWV0aG9kJykgfHxcbiAgICAgICAgICAgICAgICAgdHlwZW9mIHRoaXMuX29wdGlvbnMucmVjb3Jkc1JlcXVlc3QubWV0aG9kICE9PSAnc3RyaW5nJylcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIHRoaXMuX29wdGlvbnMucmVjb3Jkc1JlcXVlc3QubWV0aG9kID0gJ0dFVCc7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHRoaXMuX29wdGlvbnMucmVjb3JkcykpIHtcbiAgICAgICAgICAgIGNvcmV1aVRhYmxlUHJpdmF0ZS5zZXRSZWNvcmRzKHRoaXMsIHRoaXMuX29wdGlvbnMucmVjb3Jkcyk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyDQntGH0LjRgdGC0LrQsCDQt9Cw0L/QuNGB0LXQuSDQv9C+0YHQu9C1INC40L3QuNGG0LjQsNC70LjQt9Cw0YbQuNC4XG4gICAgICAgIHRoaXMuX29wdGlvbnMucmVjb3JkcyA9IFtdO1xuXG4gICAgICAgIC8vINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPINC60L7Qu9C+0L3QvtC6XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5fb3B0aW9ucy5jb2x1bW5zID09PSAnb2JqZWN0JyAmJlxuICAgICAgICAgICAgQXJyYXkuaXNBcnJheSh0aGlzLl9vcHRpb25zLmNvbHVtbnMpICYmXG4gICAgICAgICAgICB0aGlzLl9vcHRpb25zLmNvbHVtbnMubGVuZ3RoID4gMFxuICAgICAgICApIHtcbiAgICAgICAgICAgIGNvcmV1aVRhYmxlUHJpdmF0ZS5pbml0Q29sdW1ucyh0YWJsZVdyYXBwZXIsIHRoaXMsIHRoaXMuX29wdGlvbnMuY29sdW1ucyk7XG4gICAgICAgIH1cblxuXG4gICAgICAgIC8vINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPINC/0L7QuNGB0LrQvtCy0YvRhSDQv9C+0LvQtdC5XG4gICAgICAgIGlmIChjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KHRoaXMuX29wdGlvbnMuc2VhcmNoKSAmJlxuICAgICAgICAgICAgdHlwZW9mIHRoaXMuX29wdGlvbnMuc2VhcmNoLmNvbnRyb2xzID09PSAnb2JqZWN0JyAmJlxuICAgICAgICAgICAgQXJyYXkuaXNBcnJheSh0aGlzLl9vcHRpb25zLnNlYXJjaC5jb250cm9scykgJiZcbiAgICAgICAgICAgIHRoaXMuX29wdGlvbnMuc2VhcmNoLmNvbnRyb2xzLmxlbmd0aCA+IDBcbiAgICAgICAgKSB7XG4gICAgICAgICAgICBjb3JldWlUYWJsZVByaXZhdGUuaW5pdFNlYXJjaCh0YWJsZVdyYXBwZXIsIHRoaXMsIHRoaXMuX29wdGlvbnMuc2VhcmNoLmNvbnRyb2xzKTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgLy8g0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y8g0LrQvtC90YLRgNC+0LvQvtCyINC4INGE0LjQu9GM0YLRgNC+0LJcbiAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMuaGFzT3duUHJvcGVydHkoJ2hlYWRlcicpICYmXG4gICAgICAgICAgICBBcnJheS5pc0FycmF5KHRoaXMuX29wdGlvbnMuaGVhZGVyKSAmJlxuICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy5oZWFkZXIubGVuZ3RoID4gMFxuICAgICAgICApIHtcbiAgICAgICAgICAgIGNvcmV1aVRhYmxlUHJpdmF0ZS5pbml0Q29udHJvbHModGFibGVXcmFwcGVyLCB0aGlzLCB0aGlzLl9vcHRpb25zLmhlYWRlciwgJ2hlYWRlcicpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMuaGFzT3duUHJvcGVydHkoJ2Zvb3RlcicpICYmXG4gICAgICAgICAgICBBcnJheS5pc0FycmF5KHRoaXMuX29wdGlvbnMuZm9vdGVyKSAmJlxuICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy5mb290ZXIubGVuZ3RoID4gMFxuICAgICAgICApIHtcbiAgICAgICAgICAgIGNvcmV1aVRhYmxlUHJpdmF0ZS5pbml0Q29udHJvbHModGFibGVXcmFwcGVyLCB0aGlzLCB0aGlzLl9vcHRpb25zLmZvb3RlciwgJ2Zvb3RlcicpO1xuICAgICAgICB9XG5cblxuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy5zYXZlU3RhdGUgJiYgdGhpcy5fb3B0aW9ucy5pZCkge1xuXG4gICAgICAgICAgICAvLyDQn9C+0LjRgdC6INC/0L4g0YHQvtGF0YDQsNC90LXQvdC90YvQvCDQv9C+0LjRgdC60L7QstGL0Lwg0LTQsNC90L3Ri9C8XG4gICAgICAgICAgICBpZiAoICEgdGhpcy5faXNSZWNvcmRzUmVxdWVzdCkge1xuICAgICAgICAgICAgICAgIGNvcmV1aVRhYmxlUHJpdmF0ZS5zZWFyY2hMb2NhbFJlY29yZHModGhpcyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vINCh0L7RgNGC0LjRgNC+0LLQutCwXG4gICAgICAgICAgICBsZXQgc29ydCA9IGNvcmV1aVRhYmxlUHJpdmF0ZS5nZXRTdG9yYWdlRmllbGQodGhpcy5nZXRJZCgpLCAnc29ydCcpO1xuXG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShzb3J0KSAmJiBzb3J0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBjb3JldWlUYWJsZVByaXZhdGUuaW5pdFNvcnQodGhpcywgc29ydCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoICEgdGhpcy5faXNSZWNvcmRzUmVxdWVzdCAmJiB0aGlzLl9yZWNvcmRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVjb3JkcyA9IGNvcmV1aVRhYmxlUHJpdmF0ZS5zb3J0UmVjb3Jkc0J5RmllbGRzKHRoaXMuX3JlY29yZHMsIHRoaXMuX3NvcnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMuaGFzT3duUHJvcGVydHkoJ3NvcnQnKSAmJlxuICAgICAgICAgICAgICAgIEFycmF5LmlzQXJyYXkodGhpcy5fb3B0aW9ucy5zb3J0KSAmJlxuICAgICAgICAgICAgICAgIHRoaXMuX29wdGlvbnMuc29ydC5sZW5ndGggPiAwXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBjb3JldWlUYWJsZVByaXZhdGUuaW5pdFNvcnQodGhpcywgdGhpcy5fb3B0aW9ucy5zb3J0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPINGB0L7QsdGL0YLQuNC5INGC0LDQsdC70LjRhtGLXG4gICAgICovXG4gICAgaW5pdEV2ZW50czogZnVuY3Rpb24gKCkge1xuXG4gICAgICAgIGxldCB0aGF0ID0gdGhpcztcblxuICAgICAgICAvLyDQn9C+0LrQsNC3INGB0YLRgNC+0LpcbiAgICAgICAgdGhpcy5vbigncmVjb3Jkc19zaG93JywgZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAvLyDQn9C10YDQtdGF0L7QtCDQv9C+INGB0YHRi9C70LrQtVxuICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGF0Ll9vcHRpb25zLm9uQ2xpY2tVcmwgPT09ICdzdHJpbmcnICYmIHRoYXQuX29wdGlvbnMub25DbGlja1VybCkge1xuICAgICAgICAgICAgICAgIGNvcmV1aVRhYmxlRWxlbWVudHMuZ2V0VHJSZWNvcmRzKHRoYXQuZ2V0SWQoKSkuY2xpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgcmVjb3JkS2V5ID0gJCh0aGlzKS5kYXRhKCdyZWNvcmQtaW5kZXgnKTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJlY29yZCAgICA9IHRoYXQuZ2V0UmVjb3JkQnlJbmRleChyZWNvcmRLZXkpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICggISByZWNvcmQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGxldCB1cmwgPSB0aGF0Ll9vcHRpb25zLm9uQ2xpY2tVcmw7XG5cbiAgICAgICAgICAgICAgICAgICAgJC5lYWNoKHJlY29yZC5kYXRhLCBmdW5jdGlvbiAoZmllbGQsIHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgZmllbGRRdW90ZSA9IGZpZWxkLnJlcGxhY2UoLyhbXlxcd1xcZF0pL2csICdcXFxcJDEnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybCA9IHVybC5yZXBsYWNlKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBSZWdFeHAoJ1xcXFxbJyArIGZpZWxkUXVvdGUgKyAnXFxcXF0nLCAnZycpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAodXJsICYmIHVybCAhPT0gJyMnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbi5ocmVmID0gdXJsO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vINCh0L7QsdGL0YLQuNC1INC90LDQttCw0YLQuNGPINC90LAg0YHRgtGA0L7QutGDXG4gICAgICAgICAgICBpZiAoWydmdW5jdGlvbicsICdzdHJpbmcnXS5pbmRleE9mKHR5cGVvZiB0aGF0Ll9vcHRpb25zLm9uQ2xpY2spKSB7XG5cbiAgICAgICAgICAgICAgICBjb3JldWlUYWJsZUVsZW1lbnRzLmdldFRyUmVjb3Jkcyh0aGF0LmdldElkKCkpLmNsaWNrKGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgcmVjb3JkS2V5ID0gJCh0aGlzKS5kYXRhKCdyZWNvcmQtaW5kZXgnKTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJlY29yZCAgICA9IHRoYXQuZ2V0UmVjb3JkQnlJbmRleChyZWNvcmRLZXkpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICggISByZWNvcmQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdGhhdC5fb3B0aW9ucy5vbkNsaWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGF0Ll9vcHRpb25zLm9uQ2xpY2soZXZlbnQsIHJlY29yZCk7XG5cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdGhhdC5fb3B0aW9ucy5vbkNsaWNrID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGZ1bmMgPSBuZXcgRnVuY3Rpb24oJ2V2ZW50JywgJ3JlY29yZCcsIHRoYXQuX29wdGlvbnMub25DbGljayk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmMoZXZlbnQsIHJlY29yZCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8g0KDQsNGB0LrRgNGL0YLQuNC1INGB0YLRgNC+0LrQuFxuICAgICAgICAgICAgY29yZXVpVGFibGVFbGVtZW50cy5nZXROb1dyYXBUb2dnbGVzKHRoYXQuZ2V0SWQoKSkuY2xpY2soZnVuY3Rpb24gKGV2ZW50KSB7XG5cbiAgICAgICAgICAgICAgICBldmVudC5jYW5jZWxCdWJibGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgICAgICAgICBsZXQgcGFyZW50ID0gJCh0aGlzKS5wYXJlbnQoKTtcblxuICAgICAgICAgICAgICAgIGlmIChwYXJlbnQuaGFzQ2xhc3MoJ3Nob3duJykpIHtcbiAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5yZW1vdmVDbGFzcygnYmktY2FyZXQtdXAtZmlsbCcpO1xuICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLmFkZENsYXNzKCdiaS1jYXJldC1kb3duLWZpbGwnKTtcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50LnJlbW92ZUNsYXNzKCdzaG93bicpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICQodGhpcykucmVtb3ZlQ2xhc3MoJ2JpLWNhcmV0LWRvd24tZmlsbCcpO1xuICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLmFkZENsYXNzKCdiaS1jYXJldC11cC1maWxsJyk7XG4gICAgICAgICAgICAgICAgICAgIHBhcmVudC5hZGRDbGFzcygnc2hvd24nKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8g0KTQuNC60YHQsNGG0LjRjyDQutC+0LvQvtC90L7QulxuICAgICAgICAgICAgY29yZXVpVGFibGVFbGVtZW50cy5maXhlZENvbHNMZWZ0KHRoYXQuZ2V0SWQoKSlcbiAgICAgICAgICAgIGNvcmV1aVRhYmxlRWxlbWVudHMuZml4ZWRDb2xzUmlnaHQodGhhdC5nZXRJZCgpKVxuICAgICAgICB9KTtcblxuXG4gICAgICAgIC8vINCf0L7QutCw0Lcg0YLQsNCx0LvQuNGG0YtcbiAgICAgICAgdGhpcy5vbigndGFibGVfc2hvdycsIGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgbGV0IHNvcnRhYmxlQ29sdW1ucyA9IGNvcmV1aVRhYmxlRWxlbWVudHMuZ2V0VGFibGVTb3J0YWJsZSh0aGF0LmdldElkKCkpO1xuICAgICAgICAgICAgaWYgKHNvcnRhYmxlQ29sdW1uc1swXSkge1xuICAgICAgICAgICAgICAgIHNvcnRhYmxlQ29sdW1ucy5jbGljayhmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGZpZWxkID0gJCh0aGlzKS5kYXRhKCdmaWVsZCcpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChmaWVsZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHNvcnRpbmcgICAgICA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGN1cnJlbnRPcmRlciA9IG51bGw7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICQuZWFjaCh0aGF0Ll9zb3J0LCBmdW5jdGlvbiAoa2V5LCBzb3J0RmllbGQpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmaWVsZCA9PT0gc29ydEZpZWxkLmZpZWxkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRPcmRlciA9IHNvcnRGaWVsZC5vcmRlcjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50T3JkZXIgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3J0aW5nLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWVsZDogZmllbGQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9yZGVyOiAnYXNjJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjdXJyZW50T3JkZXIgPT09ICdhc2MnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc29ydGluZy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmllbGQ6IGZpZWxkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcmRlcjogJ2Rlc2MnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzb3J0aW5nLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQuc29ydERlZmF1bHQoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGF0LnNvcnRGaWVsZHMoc29ydGluZyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuXG4gICAgICAgICAgICBpZiAod2luZG93Lmhhc093blByb3BlcnR5KCdib290c3RyYXAnKSAmJiBib290c3RyYXAuaGFzT3duUHJvcGVydHkoJ1Rvb2x0aXAnKSkge1xuICAgICAgICAgICAgICAgICQoJy5jb3JldWktdGFibGVfX2NvbHVtbi1kZXNjcmlwdGlvbicsIGNvcmV1aVRhYmxlRWxlbWVudHMuZ2V0VGFibGVUaGVhZCh0aGF0LmdldElkKCkpKS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgbmV3IGJvb3RzdHJhcC5Ub29sdGlwKHRoaXMpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuXG4gICAgICAgIC8vINCh0L7QsdGL0YLQuNGPINGB0LzQtdC90Ysg0YHQvtGB0YLQvtGP0L3QuNGPXG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLnNhdmVTdGF0ZSAmJiB0aGlzLl9vcHRpb25zLmlkKSB7XG4gICAgICAgICAgICB0aGlzLm9uKCdyZWNvcmRzX3NvcnQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgY29yZXVpVGFibGVQcml2YXRlLnNldFN0b3JhZ2VGaWVsZCh0aGF0LmdldElkKCksICdzb3J0JywgdGhhdC5fc29ydCk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdGhpcy5vbignc2VhcmNoX2NoYW5nZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBjb3JldWlUYWJsZVByaXZhdGUuc2V0U3RvcmFnZUZpZWxkKHRoYXQuZ2V0SWQoKSwgJ3NlYXJjaCcsIHRoYXQuZ2V0U2VhcmNoRGF0YSgpKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB0aGlzLm9uKCdmaWx0ZXJzX2NoYW5nZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBjb3JldWlUYWJsZVByaXZhdGUuc2V0U3RvcmFnZUZpZWxkKHRoYXQuZ2V0SWQoKSwgJ2ZpbHRlcnMnLCB0aGF0LmdldEZpbHRlckRhdGEoKSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdGhpcy5vbignY29sdW1uc19jaGFuZ2UnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgbGV0IGNvbHVtbnMgPSBbXTtcblxuICAgICAgICAgICAgICAgIHRoYXQuX2NvbHVtbnMubWFwKGZ1bmN0aW9uIChjb2x1bW4pIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNvbHVtbk9wdGlvbnMgPSBjb2x1bW4uZ2V0T3B0aW9ucygpO1xuXG4gICAgICAgICAgICAgICAgICAgIGNvbHVtbnMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBmaWVsZDogY29sdW1uT3B0aW9ucy5maWVsZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzU2hvdzogY29sdW1uLmlzU2hvdygpLFxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgY29yZXVpVGFibGVQcml2YXRlLnNldFN0b3JhZ2VGaWVsZCh0aGF0LmdldElkKCksICdjb2x1bW5zJywgY29sdW1ucyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgY29yZXVpVGFibGVQcml2YXRlLl90cmlnZ2VyKHRoaXMsICd0YWJsZV9zaG93JywgWyB0aGlzIF0pO1xuICAgICAgICBjb3JldWlUYWJsZVByaXZhdGUuX3RyaWdnZXIodGhpcywgJ2NvbnRhaW5lcl9zaG93Jyk7XG5cbiAgICAgICAgLy8g0JLRi9C30L7QsiDRgdC+0LHRi9GC0LjRjyDQv9C+0LrQsNC30LAg0YHRgtGA0L7QulxuICAgICAgICBpZiAoICEgdGhpcy5faXNSZWNvcmRzUmVxdWVzdCkge1xuICAgICAgICAgICAgY29yZXVpVGFibGVQcml2YXRlLl90cmlnZ2VyKHRoaXMsICdyZWNvcmRzX3Nob3cnLCBbIHRoaXMgXSk7XG4gICAgICAgIH1cbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0LjQtNC10L3RgtC40YTQuNC60LDRgtC+0YDQsCDRgtCw0LHQu9C40YbRi1xuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAgICovXG4gICAgZ2V0SWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lkO1xuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSDQvtC/0YbQuNC5INGC0LDQsdC70LjRhtGLXG4gICAgICogQHJldHVybnMgeyp9XG4gICAgICovXG4gICAgZ2V0T3B0aW9uczogZnVuY3Rpb24gKCkge1xuXG4gICAgICAgIHJldHVybiAkLmV4dGVuZCh0cnVlLCB7fSwgdGhpcy5fb3B0aW9ucyk7XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZWxlbWVudFxuICAgICAqIEByZXR1cm5zIHsqfVxuICAgICAqL1xuICAgIHJlbmRlcjogZnVuY3Rpb24oZWxlbWVudCkge1xuXG4gICAgICAgIGxldCB0aGF0ICAgICAgICA9IHRoaXM7XG4gICAgICAgIGxldCB3aWR0aFNpemVzICA9IFtdO1xuICAgICAgICBsZXQgaGVpZ2h0U2l6ZXMgPSBbXTtcbiAgICAgICAgbGV0IG9wdGlvbnMgICAgID0gdGhpcy5nZXRPcHRpb25zKCk7XG4gICAgICAgIGxldCByZW5kZXIgICAgICA9IHtcbiAgICAgICAgICAgIGhlYWRlcnNPdXQ6IFtdLFxuICAgICAgICAgICAgaGVhZGVyc0luOiBbXSxcbiAgICAgICAgICAgIGZvb3RlcnNJbjogW10sXG4gICAgICAgICAgICBmb290ZXJzT3V0OiBbXVxuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuX3JlY29yZHNUb3RhbCA9IHRoaXMuX3JlY29yZHMubGVuZ3RoO1xuXG5cbiAgICAgICAgaWYgKG9wdGlvbnMud2lkdGggPiAwKSB7XG4gICAgICAgICAgICBsZXQgdW5pdCA9IHR5cGVvZiBvcHRpb25zLndpZHRoID09PSAnbnVtYmVyJyA/ICdweCcgOiAnJztcbiAgICAgICAgICAgIHdpZHRoU2l6ZXMucHVzaCgnd2lkdGg6JyArIG9wdGlvbnMud2lkdGggKyB1bml0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvcHRpb25zLm1pbldpZHRoID4gMCkge1xuICAgICAgICAgICAgbGV0IHVuaXQgPSB0eXBlb2Ygb3B0aW9ucy5taW5XaWR0aCA9PT0gJ251bWJlcicgPyAncHgnIDogJyc7XG4gICAgICAgICAgICB3aWR0aFNpemVzLnB1c2goJ21pbi13aWR0aDonICsgb3B0aW9ucy5taW5XaWR0aCArIHVuaXQpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG9wdGlvbnMubWF4V2lkdGggPiAwKSB7XG4gICAgICAgICAgICBsZXQgdW5pdCA9IHR5cGVvZiBvcHRpb25zLm1heFdpZHRoID09PSAnbnVtYmVyJyA/ICdweCcgOiAnJztcbiAgICAgICAgICAgIHdpZHRoU2l6ZXMucHVzaCgnbWF4LXdpZHRoOicgKyBvcHRpb25zLm1heFdpZHRoICsgdW5pdCk7XG5cbiAgICAgICAgICAgIG9wdGlvbnMub3ZlcmZsb3cgPSB0cnVlO1xuICAgICAgICB9XG5cblxuICAgICAgICBpZiAob3B0aW9ucy5oZWlnaHQgPiAwKSB7XG4gICAgICAgICAgICBsZXQgdW5pdCA9IHR5cGVvZiBvcHRpb25zLmhlaWdodCA9PT0gJ251bWJlcicgPyAncHgnIDogJyc7XG4gICAgICAgICAgICBoZWlnaHRTaXplcy5wdXNoKCdoZWlnaHQ6JyArIG9wdGlvbnMuaGVpZ2h0ICsgdW5pdCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob3B0aW9ucy5taW5IZWlnaHQgPiAwKSB7XG4gICAgICAgICAgICBsZXQgdW5pdCA9IHR5cGVvZiBvcHRpb25zLm1pbkhlaWdodCA9PT0gJ251bWJlcicgPyAncHgnIDogJyc7XG4gICAgICAgICAgICBoZWlnaHRTaXplcy5wdXNoKCdtaW4taGVpZ2h0OicgKyBvcHRpb25zLm1pbkhlaWdodCArIHVuaXQpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG9wdGlvbnMubWF4SGVpZ2h0ID4gMCkge1xuICAgICAgICAgICAgbGV0IHVuaXQgPSB0eXBlb2Ygb3B0aW9ucy5tYXhIZWlnaHQgPT09ICdudW1iZXInID8gJ3B4JyA6ICcnO1xuICAgICAgICAgICAgaGVpZ2h0U2l6ZXMucHVzaCgnbWF4LWhlaWdodDonICsgb3B0aW9ucy5tYXhIZWlnaHQgKyB1bml0KTtcblxuICAgICAgICAgICAgb3B0aW9ucy5vdmVyZmxvdyA9IHRydWU7XG4gICAgICAgIH1cblxuXG5cbiAgICAgICAgLy8g0JLQtdGA0YXQvdC40LUg0Y3Qu9C10LzQtdC90YLRiyDRg9C/0YDQsNCy0LvQtdC90LjRj1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh0aGlzLl9jb250cm9sc1Bvc2l0aW9ucy5oZWFkZXIpICYmXG4gICAgICAgICAgICB0aGlzLl9jb250cm9sc1Bvc2l0aW9ucy5oZWFkZXIubGVuZ3RoID4gMFxuICAgICAgICApIHtcbiAgICAgICAgICAgICQuZWFjaCh0aGlzLl9jb250cm9sc1Bvc2l0aW9ucy5oZWFkZXIsIGZ1bmN0aW9uIChrZXksIGhlYWRlcikge1xuICAgICAgICAgICAgICAgIGxldCBjb250cm9sc0xlZnQgICA9IFtdO1xuICAgICAgICAgICAgICAgIGxldCBjb250cm9sc0NlbnRlciA9IFtdO1xuICAgICAgICAgICAgICAgIGxldCBjb250cm9sc1JpZ2h0ICA9IFtdO1xuXG4gICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoaGVhZGVyLmxlZnQpICYmIGhlYWRlci5sZWZ0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgJC5lYWNoKGhlYWRlci5sZWZ0LCBmdW5jdGlvbiAoa2V5LCBjb250cm9sKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgY29udHJvbFJlbmRlciA9IGNvcmV1aVRhYmxlUmVuZGVyLnJlbmRlckNvbnRyb2wodGhhdCwgY29udHJvbCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb250cm9sUmVuZGVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbHNMZWZ0LnB1c2goY29udHJvbFJlbmRlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGhlYWRlci5jZW50ZXIpICYmIGhlYWRlci5jZW50ZXIubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAkLmVhY2goaGVhZGVyLmNlbnRlciwgZnVuY3Rpb24gKGtleSwgY29udHJvbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGNvbnRyb2xSZW5kZXIgPSBjb3JldWlUYWJsZVJlbmRlci5yZW5kZXJDb250cm9sKHRoYXQsIGNvbnRyb2wpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29udHJvbFJlbmRlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xzQ2VudGVyLnB1c2goY29udHJvbFJlbmRlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGhlYWRlci5yaWdodCkgJiYgaGVhZGVyLnJpZ2h0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgJC5lYWNoKGhlYWRlci5yaWdodCwgZnVuY3Rpb24gKGtleSwgY29udHJvbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGNvbnRyb2xSZW5kZXIgPSBjb3JldWlUYWJsZVJlbmRlci5yZW5kZXJDb250cm9sKHRoYXQsIGNvbnRyb2wpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29udHJvbFJlbmRlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xzUmlnaHQucHVzaChjb250cm9sUmVuZGVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKGNvbnRyb2xzTGVmdC5sZW5ndGggPiAwIHx8IGNvbnRyb2xzQ2VudGVyLmxlbmd0aCA+IDAgfHwgY29udHJvbHNSaWdodC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChoZWFkZXIudHlwZSA9PT0gJ2luJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGhlYWRlckNvbnRyb2xzID0gJChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3JldWlUYWJsZVV0aWxzLnJlbmRlcihjb3JldWlUYWJsZVRwbFsndGFibGUvY29udHJvbHMvaGVhZGVyLmh0bWwnXSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sc0xlZnQ6IGNvbnRyb2xzTGVmdCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbHNDZW50ZXI6IGNvbnRyb2xzQ2VudGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sc1JpZ2h0OiBjb250cm9sc1JpZ2h0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29udHJvbHNMZWZ0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLmVhY2goY29udHJvbHNMZWZ0LCBmdW5jdGlvbiAoa2V5LCBjb250cm9sKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlckNvbnRyb2xzLmZpbmQoJy5jb3JldWktdGFibGVfX2NvbnRyb2xzX2xlZnQnKS5hcHBlbmQoY29udHJvbClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbnRyb2xzQ2VudGVyLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLmVhY2goY29udHJvbHNDZW50ZXIsIGZ1bmN0aW9uIChrZXksIGNvbnRyb2wpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyQ29udHJvbHMuZmluZCgnLmNvcmV1aS10YWJsZV9fY29udHJvbHNfY2VudGVyJykuYXBwZW5kKGNvbnRyb2wpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb250cm9sc1JpZ2h0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLmVhY2goY29udHJvbHNSaWdodCwgZnVuY3Rpb24gKGtleSwgY29udHJvbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJDb250cm9scy5maW5kKCcuY29yZXVpLXRhYmxlX19jb250cm9sc19yaWdodCcpLmFwcGVuZChjb250cm9sKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICByZW5kZXIuaGVhZGVyc0luLnB1c2goaGVhZGVyQ29udHJvbHMpO1xuXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgaGVhZGVyQ29udHJvbHMgPSAkKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvcmV1aVRhYmxlVXRpbHMucmVuZGVyKGNvcmV1aVRhYmxlVHBsWyd0YWJsZS9jb250cm9scy9oZWFkZXItb3V0Lmh0bWwnXSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sc0xlZnQ6IGNvbnRyb2xzTGVmdCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbHNDZW50ZXI6IGNvbnRyb2xzQ2VudGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sc1JpZ2h0OiBjb250cm9sc1JpZ2h0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29udHJvbHNMZWZ0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLmVhY2goY29udHJvbHNMZWZ0LCBmdW5jdGlvbiAoa2V5LCBjb250cm9sKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlckNvbnRyb2xzLmZpbmQoJy5jb3JldWktdGFibGVfX2NvbnRyb2xzX2xlZnQnKS5hcHBlbmQoY29udHJvbClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbnRyb2xzQ2VudGVyLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLmVhY2goY29udHJvbHNDZW50ZXIsIGZ1bmN0aW9uIChrZXksIGNvbnRyb2wpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyQ29udHJvbHMuZmluZCgnLmNvcmV1aS10YWJsZV9fY29udHJvbHNfY2VudGVyJykuYXBwZW5kKGNvbnRyb2wpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb250cm9sc1JpZ2h0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLmVhY2goY29udHJvbHNSaWdodCwgZnVuY3Rpb24gKGtleSwgY29udHJvbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJDb250cm9scy5maW5kKCcuY29yZXVpLXRhYmxlX19jb250cm9sc19yaWdodCcpLmFwcGVuZChjb250cm9sKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICByZW5kZXIuaGVhZGVyc091dC5wdXNoKGhlYWRlckNvbnRyb2xzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8g0J3QuNC20L3QuNC1INGN0LvQtdC80LXQvdGC0Ysg0YPQv9GA0LDQstC70LXQvdC40Y9cbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodGhpcy5fY29udHJvbHNQb3NpdGlvbnMuZm9vdGVyKSAmJlxuICAgICAgICAgICAgdGhpcy5fY29udHJvbHNQb3NpdGlvbnMuZm9vdGVyLmxlbmd0aCA+IDBcbiAgICAgICAgKSB7XG4gICAgICAgICAgICAkLmVhY2godGhpcy5fY29udHJvbHNQb3NpdGlvbnMuZm9vdGVyLCBmdW5jdGlvbiAoa2V5LCBmb290ZXIpIHtcbiAgICAgICAgICAgICAgICBsZXQgY29udHJvbHNMZWZ0ICAgPSBbXTtcbiAgICAgICAgICAgICAgICBsZXQgY29udHJvbHNDZW50ZXIgPSBbXTtcbiAgICAgICAgICAgICAgICBsZXQgY29udHJvbHNSaWdodCAgPSBbXTtcblxuICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGZvb3Rlci5sZWZ0KSAmJiBmb290ZXIubGVmdC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICQuZWFjaChmb290ZXIubGVmdCwgZnVuY3Rpb24gKGtleSwgY29udHJvbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGNvbnRyb2xSZW5kZXIgPSBjb3JldWlUYWJsZVJlbmRlci5yZW5kZXJDb250cm9sKHRoYXQsIGNvbnRyb2wpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29udHJvbFJlbmRlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xzTGVmdC5wdXNoKGNvbnRyb2xSZW5kZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShmb290ZXIuY2VudGVyKSAmJiBmb290ZXIuY2VudGVyLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgJC5lYWNoKGZvb3Rlci5jZW50ZXIsIGZ1bmN0aW9uIChrZXksIGNvbnRyb2wpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjb250cm9sUmVuZGVyID0gY29yZXVpVGFibGVSZW5kZXIucmVuZGVyQ29udHJvbCh0aGF0LCBjb250cm9sKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbnRyb2xSZW5kZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sc0NlbnRlci5wdXNoKGNvbnRyb2xSZW5kZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShmb290ZXIucmlnaHQpICYmIGZvb3Rlci5yaWdodC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICQuZWFjaChmb290ZXIucmlnaHQsIGZ1bmN0aW9uIChrZXksIGNvbnRyb2wpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjb250cm9sUmVuZGVyID0gY29yZXVpVGFibGVSZW5kZXIucmVuZGVyQ29udHJvbCh0aGF0LCBjb250cm9sKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbnRyb2xSZW5kZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sc1JpZ2h0LnB1c2goY29udHJvbFJlbmRlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChjb250cm9sc0xlZnQubGVuZ3RoID4gMCB8fCBjb250cm9sc0NlbnRlci5sZW5ndGggPiAwIHx8IGNvbnRyb2xzUmlnaHQubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZm9vdGVyLnR5cGUgPT09ICdpbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBmb290ZXJDb250cm9scyA9ICQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29yZXVpVGFibGVVdGlscy5yZW5kZXIoY29yZXVpVGFibGVUcGxbJ3RhYmxlL2NvbnRyb2xzL2Zvb3Rlci5odG1sJ10sIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbHNMZWZ0OiBjb250cm9sc0xlZnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xzQ2VudGVyOiBjb250cm9sc0NlbnRlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbHNSaWdodDogY29udHJvbHNSaWdodCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcblxuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29udHJvbHNMZWZ0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLmVhY2goY29udHJvbHNMZWZ0LCBmdW5jdGlvbiAoa2V5LCBjb250cm9sKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvb3RlckNvbnRyb2xzLmZpbmQoJy5jb3JldWktdGFibGVfX2NvbnRyb2xzX2xlZnQnKS5hcHBlbmQoY29udHJvbClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbnRyb2xzQ2VudGVyLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLmVhY2goY29udHJvbHNDZW50ZXIsIGZ1bmN0aW9uIChrZXksIGNvbnRyb2wpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9vdGVyQ29udHJvbHMuZmluZCgnLmNvcmV1aS10YWJsZV9fY29udHJvbHNfY2VudGVyJykuYXBwZW5kKGNvbnRyb2wpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb250cm9sc1JpZ2h0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLmVhY2goY29udHJvbHNSaWdodCwgZnVuY3Rpb24gKGtleSwgY29udHJvbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb290ZXJDb250cm9scy5maW5kKCcuY29yZXVpLXRhYmxlX19jb250cm9sc19yaWdodCcpLmFwcGVuZChjb250cm9sKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICByZW5kZXIuZm9vdGVyc0luLnB1c2goZm9vdGVyQ29udHJvbHMpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGZvb3RlckNvbnRyb2xzID0gJChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3JldWlUYWJsZVV0aWxzLnJlbmRlcihjb3JldWlUYWJsZVRwbFsndGFibGUvY29udHJvbHMvZm9vdGVyLW91dC5odG1sJ10sIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbHNMZWZ0OiBjb250cm9sc0xlZnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xzQ2VudGVyOiBjb250cm9sc0NlbnRlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbHNSaWdodDogY29udHJvbHNSaWdodCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcblxuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29udHJvbHNMZWZ0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLmVhY2goY29udHJvbHNMZWZ0LCBmdW5jdGlvbiAoa2V5LCBjb250cm9sKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvb3RlckNvbnRyb2xzLmZpbmQoJy5jb3JldWktdGFibGVfX2NvbnRyb2xzX2xlZnQnKS5hcHBlbmQoY29udHJvbClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbnRyb2xzQ2VudGVyLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLmVhY2goY29udHJvbHNDZW50ZXIsIGZ1bmN0aW9uIChrZXksIGNvbnRyb2wpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9vdGVyQ29udHJvbHMuZmluZCgnLmNvcmV1aS10YWJsZV9fY29udHJvbHNfY2VudGVyJykuYXBwZW5kKGNvbnRyb2wpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb250cm9sc1JpZ2h0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLmVhY2goY29udHJvbHNSaWdodCwgZnVuY3Rpb24gKGtleSwgY29udHJvbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb290ZXJDb250cm9scy5maW5kKCcuY29yZXVpLXRhYmxlX19jb250cm9sc19yaWdodCcpLmFwcGVuZChjb250cm9sKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICByZW5kZXIuZm9vdGVyc091dC5wdXNoKGZvb3RlckNvbnRyb2xzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cblxuICAgICAgICAvLyDQl9Cw0LPRgNGD0LfQutCwINC30LDQv9C40YHQtdC5XG4gICAgICAgIGlmICh0aGlzLl9pc1JlY29yZHNSZXF1ZXN0KSB7XG4gICAgICAgICAgICB0aGlzLm9uKCdjb250YWluZXJfc2hvdycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMucmVjb3Jkc1JlcXVlc3QgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhhdC5sb2FkQnlGdW5jdGlvbihvcHRpb25zLnJlY29yZHNSZXF1ZXN0KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGF0LmxvYWQob3B0aW9ucy5yZWNvcmRzUmVxdWVzdC51cmwsIG9wdGlvbnMucmVjb3Jkc1JlcXVlc3QubWV0aG9kKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgbGV0IGNsYXNzZXMgICAgICAgID0gW107XG4gICAgICAgIGxldCBjbGFzc2VzV3JhcHBlciA9IFtdO1xuXG4gICAgICAgIGlmIChvcHRpb25zLmhhc093blByb3BlcnR5KCdub0JvcmRlcicpICYmXG4gICAgICAgICAgICB0eXBlb2Ygb3B0aW9ucy5ub0JvcmRlciA9PT0gJ2Jvb2xlYW4nICYmXG4gICAgICAgICAgICBvcHRpb25zLm5vQm9yZGVyXG4gICAgICAgICkge1xuICAgICAgICAgICAgY2xhc3Nlcy5wdXNoKCdjb3JldWktdGFibGVfX25vX2JvcmRlcicpO1xuICAgICAgICB9XG5cblxuICAgICAgICBpZiAob3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnc2hvd1Njcm9sbFNoYWRvdycpICYmXG4gICAgICAgICAgICB0eXBlb2Ygb3B0aW9ucy5zaG93U2Nyb2xsU2hhZG93ID09PSAnYm9vbGVhbicgJiZcbiAgICAgICAgICAgIG9wdGlvbnMuc2hvd1Njcm9sbFNoYWRvd1xuICAgICAgICApIHtcbiAgICAgICAgICAgIGNsYXNzZXNXcmFwcGVyLnB1c2goJ3RhYmxlLXNjcm9sbC1zaGFkb3cnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvcHRpb25zLmhhc093blByb3BlcnR5KCdvdmVyZmxvdycpICYmXG4gICAgICAgICAgICB0eXBlb2Ygb3B0aW9ucy5vdmVyZmxvdyA9PT0gJ2Jvb2xlYW4nICYmXG4gICAgICAgICAgICBvcHRpb25zLm92ZXJmbG93XG4gICAgICAgICkge1xuICAgICAgICAgICAgY2xhc3Nlc1dyYXBwZXIucHVzaCgnb3ZlcmZsb3cteC1hdXRvJyk7XG4gICAgICAgIH1cblxuXG4gICAgICAgIGxldCB0YWJsZUVsZW1lbnQgICAgID0gY29yZXVpVGFibGVSZW5kZXIucmVuZGVyVGFibGUodGhpcyk7XG4gICAgICAgIGxldCBjb250YWluZXJFbGVtZW50ID0gJChcbiAgICAgICAgICAgIGNvcmV1aVRhYmxlVXRpbHMucmVuZGVyKGNvcmV1aVRhYmxlVHBsWydjb250YWluZXIuaHRtbCddLCB7XG4gICAgICAgICAgICAgICAgaWQ6IHRoaXMuX2lkLFxuICAgICAgICAgICAgICAgIGNsYXNzZXM6IGNsYXNzZXMubGVuZ3RoID4gMCA/ICcgJyArIGNsYXNzZXMuam9pbignICcpIDogJycsXG4gICAgICAgICAgICAgICAgY2xhc3Nlc1dyYXBwZXI6IGNsYXNzZXNXcmFwcGVyLmxlbmd0aCA+IDAgPyAnICcgKyBjbGFzc2VzV3JhcHBlci5qb2luKCcgJykgOiAnJyxcbiAgICAgICAgICAgICAgICB3aWR0aFNpemVzOiB3aWR0aFNpemVzLFxuICAgICAgICAgICAgICAgIGhlaWdodFNpemVzOiBoZWlnaHRTaXplcyxcbiAgICAgICAgICAgIH0pXG4gICAgICAgICk7XG5cblxuICAgICAgICBpZiAocmVuZGVyLmhlYWRlcnNPdXQubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgY29udGFpbmVyRWxlbWVudC5wcmVwZW5kKHJlbmRlci5oZWFkZXJzT3V0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVuZGVyLmhlYWRlcnNJbi5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBjb250YWluZXJFbGVtZW50LmZpbmQoJy5jb3JldWktdGFibGVfX2NvbnRhaW5lcicpLnByZXBlbmQocmVuZGVyLmhlYWRlcnNJbik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlbmRlci5mb290ZXJzSW4ubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgY29udGFpbmVyRWxlbWVudC5maW5kKCcuY29yZXVpLXRhYmxlX19jb250YWluZXInKS5hcHBlbmQocmVuZGVyLmZvb3RlcnNJbik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlbmRlci5mb290ZXJzT3V0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGNvbnRhaW5lckVsZW1lbnQuYXBwZW5kKHJlbmRlci5mb290ZXJzT3V0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnRhaW5lckVsZW1lbnQuZmluZCgnLmNvcmV1aS10YWJsZV9fd3JhcHBlcicpLmh0bWwodGFibGVFbGVtZW50KTtcblxuICAgICAgICBpZiAoZWxlbWVudCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gY29udGFpbmVyRWxlbWVudDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIERvbSBlbGVtZW50XG4gICAgICAgIGxldCBkb21FbGVtZW50ID0gbnVsbDtcblxuICAgICAgICBpZiAodHlwZW9mIGVsZW1lbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBkb21FbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoZWxlbWVudCk7XG5cbiAgICAgICAgfSBlbHNlIGlmIChlbGVtZW50IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpIHtcbiAgICAgICAgICAgIGRvbUVsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRvbUVsZW1lbnQpIHtcbiAgICAgICAgICAgICQoZG9tRWxlbWVudCkuaHRtbChjb250YWluZXJFbGVtZW50KTtcbiAgICAgICAgICAgIHRoaXMuaW5pdEV2ZW50cygpO1xuICAgICAgICB9XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICog0JHQu9C+0LrQuNGA0L7QstC60LAg0YLQsNCx0LvQuNGG0YtcbiAgICAgKi9cbiAgICBsb2NrOiBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgbGV0IGNvbnRhaW5lciA9IGNvcmV1aVRhYmxlRWxlbWVudHMuZ2V0Q29udGFpbmVyKHRoaXMuZ2V0SWQoKSk7XG5cbiAgICAgICAgaWYgKGNvbnRhaW5lclswXSAmJiAhIGNvbnRhaW5lci5maW5kKCcuY29yZXVpLXRhYmxlLWxvY2snKVswXSkge1xuICAgICAgICAgICAgbGV0IGh0bWwgPSAgY29yZXVpVGFibGVVdGlscy5yZW5kZXIoY29yZXVpVGFibGVUcGxbJ3RhYmxlL2xvYWRlci5odG1sJ10sIHtcbiAgICAgICAgICAgICAgICBsYW5nOiB0aGlzLmdldExhbmcoKVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGNvbnRhaW5lci5wcmVwZW5kKGh0bWwpO1xuICAgICAgICB9XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICog0KDQsNC30LHQu9C+0LrQuNGA0L7QstC60LAg0YLQsNCx0LvQuNGG0YtcbiAgICAgKi9cbiAgICB1bmxvY2s6IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICBjb3JldWlUYWJsZUVsZW1lbnRzLmdldExvY2sodGhpcy5nZXRJZCgpKS5oaWRlKDUwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAkKHRoaXMpLnJlbW92ZSgpXG4gICAgICAgIH0pO1xuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqINCX0LDQs9GA0YPQt9C60LAg0YHRgtGA0L7QulxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1cmxcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbWV0aG9kXG4gICAgICovXG4gICAgbG9hZDogZnVuY3Rpb24gKHVybCwgbWV0aG9kKSB7XG5cbiAgICAgICAgdGhpcy5sb2NrKCk7XG5cbiAgICAgICAgbGV0IHRoYXQgICA9IHRoaXM7XG4gICAgICAgIGxldCBwYXJhbXMgPSB7fTtcblxuICAgICAgICBpZiAodXJsLm1hdGNoKC9cXFtwYWdlXFxdLykpIHtcbiAgICAgICAgICAgIHVybCA9IHVybC5yZXBsYWNlKC9cXFtwYWdlXFxdL2csIHRoaXMuX3BhZ2UpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGV0IHBhcmFtUGFnZSA9IGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QodGhpcy5fb3B0aW9ucy5yZXF1ZXN0UGFyYW1zKSAmJiB0aGlzLl9vcHRpb25zLnJlcXVlc3RQYXJhbXMuaGFzT3duUHJvcGVydHkoJ3BhZ2UnKVxuICAgICAgICAgICAgICAgID8gdGhpcy5fb3B0aW9ucy5yZXF1ZXN0UGFyYW1zLnBhZ2VcbiAgICAgICAgICAgICAgICA6ICdwYWdlJztcbiAgICAgICAgICAgIHBhcmFtc1twYXJhbVBhZ2VdID0gdGhpcy5fcGFnZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh1cmwubWF0Y2goL1xcW2NvdW50XFxdLykpIHtcbiAgICAgICAgICAgIHVybCA9IHVybC5yZXBsYWNlKC9cXFtjb3VudFxcXS9nLCB0aGlzLl9yZWNvcmRzUGVyUGFnZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsZXQgcGFyYW1Db3VudCA9IGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QodGhpcy5fb3B0aW9ucy5yZXF1ZXN0UGFyYW1zKSAmJiB0aGlzLl9vcHRpb25zLnJlcXVlc3RQYXJhbXMuaGFzT3duUHJvcGVydHkoJ2NvdW50JylcbiAgICAgICAgICAgICAgICA/IHRoaXMuX29wdGlvbnMucmVxdWVzdFBhcmFtcy5jb3VudFxuICAgICAgICAgICAgICAgIDogJ2NvdW50JztcbiAgICAgICAgICAgIHBhcmFtc1twYXJhbUNvdW50XSA9IHRoaXMuX3JlY29yZHNQZXJQYWdlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHVybC5tYXRjaCgvXFxbc3RhcnRcXF0vKSkge1xuICAgICAgICAgICAgdXJsID0gdXJsLnJlcGxhY2UoL1xcW3N0YXJ0XFxdL2csICgodGhpcy5fcGFnZSAtIDEpICogdGhpcy5fcmVjb3Jkc1BlclBhZ2UpICsgMSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsZXQgcGFyYW1TdGFydCA9IGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QodGhpcy5fb3B0aW9ucy5yZXF1ZXN0UGFyYW1zKSAmJiB0aGlzLl9vcHRpb25zLnJlcXVlc3RQYXJhbXMuaGFzT3duUHJvcGVydHkoJ3N0YXJ0JylcbiAgICAgICAgICAgICAgICA/IHRoaXMuX29wdGlvbnMucmVxdWVzdFBhcmFtcy5zdGFydFxuICAgICAgICAgICAgICAgIDogJ3N0YXJ0JztcbiAgICAgICAgICAgIHBhcmFtc1twYXJhbVN0YXJ0XSA9ICgodGhpcy5fcGFnZSAtIDEpICogdGhpcy5fcmVjb3Jkc1BlclBhZ2UpICsgMTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh1cmwubWF0Y2goL1xcW2VuZFxcXS8pKSB7XG4gICAgICAgICAgICB1cmwgPSB1cmwucmVwbGFjZSgvXFxbZW5kXFxdL2csICgodGhpcy5fcGFnZSAtIDEpICogdGhpcy5fcmVjb3Jkc1BlclBhZ2UpICsgTnVtYmVyKHRoaXMuX3JlY29yZHNQZXJQYWdlKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsZXQgcGFyYW1FbmQgPSBjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KHRoaXMuX29wdGlvbnMucmVxdWVzdFBhcmFtcykgJiYgdGhpcy5fb3B0aW9ucy5yZXF1ZXN0UGFyYW1zLmhhc093blByb3BlcnR5KCdlbmQnKVxuICAgICAgICAgICAgICAgID8gdGhpcy5fb3B0aW9ucy5yZXF1ZXN0UGFyYW1zLmVuZFxuICAgICAgICAgICAgICAgIDogJ2VuZCc7XG4gICAgICAgICAgICBwYXJhbXNbcGFyYW1FbmRdID0gKCh0aGlzLl9wYWdlIC0gMSkgKiB0aGlzLl9yZWNvcmRzUGVyUGFnZSkgKyBOdW1iZXIodGhpcy5fcmVjb3Jkc1BlclBhZ2UpO1xuICAgICAgICB9XG5cblxuICAgICAgICBsZXQgc2VhcmNoRGF0YSA9IHRoaXMuZ2V0U2VhcmNoRGF0YSgpO1xuICAgICAgICBsZXQgZmlsdGVyRGF0YSA9IHRoaXMuZ2V0RmlsdGVyRGF0YSgpO1xuXG4gICAgICAgIGlmIChmaWx0ZXJEYXRhLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGZpbHRlckRhdGEubWFwKGZ1bmN0aW9uIChmaWx0ZXIpIHtcbiAgICAgICAgICAgICAgICBzZWFyY2hEYXRhLnB1c2goZmlsdGVyKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNlYXJjaERhdGEubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgbGV0IHBhcmFtU2VhcmNoID0gY29yZXVpVGFibGVVdGlscy5pc09iamVjdCh0aGlzLl9vcHRpb25zLnJlcXVlc3RQYXJhbXMpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9vcHRpb25zLnJlcXVlc3RQYXJhbXMuaGFzT3duUHJvcGVydHkoJ3NlYXJjaCcpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlb2YgdGhpcy5fb3B0aW9ucy5yZXF1ZXN0UGFyYW1zLnNlYXJjaCA9PT0gJ3N0cmluZydcbiAgICAgICAgICAgICAgICA/IHRoaXMuX29wdGlvbnMucmVxdWVzdFBhcmFtcy5zZWFyY2hcbiAgICAgICAgICAgICAgICA6ICdzZWFyY2gnO1xuXG4gICAgICAgICAgICBwYXJhbXNbcGFyYW1TZWFyY2hdID0ge307XG5cbiAgICAgICAgICAgIHNlYXJjaERhdGEubWFwKGZ1bmN0aW9uIChzZWFyY2hJdGVtKSB7XG4gICAgICAgICAgICAgICAgcGFyYW1zW3BhcmFtU2VhcmNoXVtzZWFyY2hJdGVtLmZpZWxkXSA9IHNlYXJjaEl0ZW0udmFsdWVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuX3NvcnQubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgbGV0IHBhcmFtU29ydCA9IGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QodGhpcy5fb3B0aW9ucy5yZXF1ZXN0UGFyYW1zKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX29wdGlvbnMucmVxdWVzdFBhcmFtcy5oYXNPd25Qcm9wZXJ0eSgnc29ydCcpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIHRoaXMuX29wdGlvbnMucmVxdWVzdFBhcmFtcy5zb3J0ID09PSAnc3RyaW5nJ1xuICAgICAgICAgICAgICAgID8gdGhpcy5fb3B0aW9ucy5yZXF1ZXN0UGFyYW1zLnNvcnRcbiAgICAgICAgICAgICAgICA6ICdzb3J0JztcblxuICAgICAgICAgICAgcGFyYW1zW3BhcmFtU29ydF0gPSB0aGlzLl9zb3J0O1xuICAgICAgICB9XG5cblxuICAgICAgICAkLmFqYXgoe1xuICAgICAgICAgICAgdXJsOiB1cmwsXG4gICAgICAgICAgICBtZXRob2Q6IG1ldGhvZCB8fCAnR0VUJyxcbiAgICAgICAgICAgIGRhdGFUeXBlOiBcImpzb25cIixcbiAgICAgICAgICAgIGRhdGE6IHBhcmFtcyxcbiAgICAgICAgICAgIGJlZm9yZVNlbmQ6IGZ1bmN0aW9uKHhocikge1xuICAgICAgICAgICAgICAgIGNvcmV1aVRhYmxlUHJpdmF0ZS5fdHJpZ2dlcih0aGF0LCAncmVjb3Jkc19sb2FkX3N0YXJ0JywgWyB0aGF0LCB4aHIgXSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24gKHJlc3VsdCkge1xuXG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdC5oYXNPd25Qcm9wZXJ0eSgncmVjb3JkcycpICYmXG4gICAgICAgICAgICAgICAgICAgIHR5cGVvZiByZXN1bHQucmVjb3JkcyA9PT0gJ29iamVjdCcgJiZcbiAgICAgICAgICAgICAgICAgICAgQXJyYXkuaXNBcnJheShyZXN1bHQucmVjb3JkcylcbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHRvdGFsID0gcmVzdWx0Lmhhc093blByb3BlcnR5KCd0b3RhbCcpICYmIGNvcmV1aVRhYmxlVXRpbHMuaXNOdW1lcmljKHJlc3VsdC50b3RhbClcbiAgICAgICAgICAgICAgICAgICAgICAgID8gcmVzdWx0LnRvdGFsXG4gICAgICAgICAgICAgICAgICAgICAgICA6IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIHRoYXQuc2V0UmVjb3JkcyhyZXN1bHQucmVjb3JkcywgdG90YWwpO1xuXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhhdC5zZXRSZWNvcmRzKFtdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uKHhociwgdGV4dFN0YXR1cywgZXJyb3JUaHJvd24pIHtcbiAgICAgICAgICAgICAgICB0aGF0LnNldFJlY29yZHMoW10pO1xuICAgICAgICAgICAgICAgIGNvcmV1aVRhYmxlUHJpdmF0ZS5fdHJpZ2dlcih0aGF0LCAncmVjb3Jkc19sb2FkX2Vycm9yJywgWyB0aGF0LCB4aHIsIHRleHRTdGF0dXMsIGVycm9yVGhyb3duIF0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNvbXBsZXRlOiBmdW5jdGlvbih4aHIsIHRleHRTdGF0dXMpIHtcbiAgICAgICAgICAgICAgICB0aGF0LnVubG9jaygpO1xuICAgICAgICAgICAgICAgIGNvcmV1aVRhYmxlUHJpdmF0ZS5fdHJpZ2dlcih0aGF0LCAncmVjb3Jkc19sb2FkX2VuZCcsIFsgdGhhdCwgeGhyLCB0ZXh0U3RhdHVzIF0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICog0JfQsNCz0YDRg9C30LrQsCDRgdGC0YDQvtC6XG4gICAgICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2tcbiAgICAgKi9cbiAgICBsb2FkQnlGdW5jdGlvbjogZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG5cbiAgICAgICAgbGV0IHRoYXQgICA9IHRoaXM7XG4gICAgICAgIGxldCBwYXJhbXMgPSB7fTtcblxuICAgICAgICBsZXQgcGFyYW1QYWdlID0gY29yZXVpVGFibGVVdGlscy5pc09iamVjdCh0aGlzLl9vcHRpb25zLnJlcXVlc3RQYXJhbXMpICYmIHRoaXMuX29wdGlvbnMucmVxdWVzdFBhcmFtcy5oYXNPd25Qcm9wZXJ0eSgncGFnZScpXG4gICAgICAgICAgICA/IHRoaXMuX29wdGlvbnMucmVxdWVzdFBhcmFtcy5wYWdlXG4gICAgICAgICAgICA6ICdwYWdlJztcblxuICAgICAgICBsZXQgcGFyYW1Db3VudCA9IGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QodGhpcy5fb3B0aW9ucy5yZXF1ZXN0UGFyYW1zKSAmJiB0aGlzLl9vcHRpb25zLnJlcXVlc3RQYXJhbXMuaGFzT3duUHJvcGVydHkoJ2NvdW50JylcbiAgICAgICAgICAgID8gdGhpcy5fb3B0aW9ucy5yZXF1ZXN0UGFyYW1zLmNvdW50XG4gICAgICAgICAgICA6ICdjb3VudCc7XG5cbiAgICAgICAgbGV0IHBhcmFtU3RhcnQgPSBjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KHRoaXMuX29wdGlvbnMucmVxdWVzdFBhcmFtcykgJiYgdGhpcy5fb3B0aW9ucy5yZXF1ZXN0UGFyYW1zLmhhc093blByb3BlcnR5KCdzdGFydCcpXG4gICAgICAgICAgICA/IHRoaXMuX29wdGlvbnMucmVxdWVzdFBhcmFtcy5zdGFydFxuICAgICAgICAgICAgOiAnc3RhcnQnO1xuXG4gICAgICAgIGxldCBwYXJhbUVuZCA9IGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QodGhpcy5fb3B0aW9ucy5yZXF1ZXN0UGFyYW1zKSAmJiB0aGlzLl9vcHRpb25zLnJlcXVlc3RQYXJhbXMuaGFzT3duUHJvcGVydHkoJ2VuZCcpXG4gICAgICAgICAgICA/IHRoaXMuX29wdGlvbnMucmVxdWVzdFBhcmFtcy5lbmRcbiAgICAgICAgICAgIDogJ2VuZCc7XG5cbiAgICAgICAgcGFyYW1zW3BhcmFtQ291bnRdID0gdGhpcy5fcmVjb3Jkc1BlclBhZ2U7XG4gICAgICAgIHBhcmFtc1twYXJhbVBhZ2VdICA9IHRoaXMuX3BhZ2U7XG4gICAgICAgIHBhcmFtc1twYXJhbVN0YXJ0XSA9ICgodGhpcy5fcGFnZSAtIDEpICogdGhpcy5fcmVjb3Jkc1BlclBhZ2UpICsgMTtcbiAgICAgICAgcGFyYW1zW3BhcmFtRW5kXSAgID0gKCh0aGlzLl9wYWdlIC0gMSkgKiB0aGlzLl9yZWNvcmRzUGVyUGFnZSkgKyBOdW1iZXIodGhpcy5fcmVjb3Jkc1BlclBhZ2UpO1xuXG5cblxuICAgICAgICBsZXQgc2VhcmNoRGF0YSA9IHRoaXMuZ2V0U2VhcmNoRGF0YSgpO1xuICAgICAgICBsZXQgZmlsdGVyRGF0YSA9IHRoaXMuZ2V0RmlsdGVyRGF0YSgpO1xuXG4gICAgICAgIGlmIChmaWx0ZXJEYXRhLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICQuZWFjaChmaWx0ZXJEYXRhLCBmdW5jdGlvbiAoa2V5LCBmaWx0ZXIpIHtcbiAgICAgICAgICAgICAgICBzZWFyY2hEYXRhLnB1c2goZmlsdGVyKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNlYXJjaERhdGEubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgbGV0IHBhcmFtU2VhcmNoID0gY29yZXVpVGFibGVVdGlscy5pc09iamVjdCh0aGlzLl9vcHRpb25zLnJlcXVlc3RQYXJhbXMpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9vcHRpb25zLnJlcXVlc3RQYXJhbXMuaGFzT3duUHJvcGVydHkoJ3NlYXJjaCcpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlb2YgdGhpcy5fb3B0aW9ucy5yZXF1ZXN0UGFyYW1zLnNlYXJjaCA9PT0gJ3N0cmluZydcbiAgICAgICAgICAgICAgICA/IHRoaXMuX29wdGlvbnMucmVxdWVzdFBhcmFtcy5zZWFyY2hcbiAgICAgICAgICAgICAgICA6ICdzZWFyY2gnO1xuXG4gICAgICAgICAgICBwYXJhbXNbcGFyYW1TZWFyY2hdID0ge307XG5cbiAgICAgICAgICAgIHNlYXJjaERhdGEubWFwKGZ1bmN0aW9uIChzZWFyY2hJdGVtKSB7XG4gICAgICAgICAgICAgICAgcGFyYW1zW3BhcmFtU2VhcmNoXVtzZWFyY2hJdGVtLmZpZWxkXSA9IHNlYXJjaEl0ZW0udmFsdWVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuX3NvcnQubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgbGV0IHBhcmFtU29ydCA9IGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QodGhpcy5fb3B0aW9ucy5yZXF1ZXN0UGFyYW1zKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX29wdGlvbnMucmVxdWVzdFBhcmFtcy5oYXNPd25Qcm9wZXJ0eSgnc29ydCcpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIHRoaXMuX29wdGlvbnMucmVxdWVzdFBhcmFtcy5zb3J0ID09PSAnc3RyaW5nJ1xuICAgICAgICAgICAgICAgID8gdGhpcy5fb3B0aW9ucy5yZXF1ZXN0UGFyYW1zLnNvcnRcbiAgICAgICAgICAgICAgICA6ICdzb3J0JztcblxuICAgICAgICAgICAgcGFyYW1zW3BhcmFtU29ydF0gPSB0aGlzLl9zb3J0O1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHJlc3VsdCA9IGNhbGxiYWNrKHBhcmFtcywgdGhpcyk7XG5cblxuICAgICAgICAvKipcbiAgICAgICAgICog0KPRgdGC0LDQvdC+0LLQutCwINC30LDQv9C40YHQtdC5XG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhXG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBzZXRSZWNvcmRzIChkYXRhKSB7XG5cbiAgICAgICAgICAgIGlmIChkYXRhLmhhc093blByb3BlcnR5KCdyZWNvcmRzJykgJiZcbiAgICAgICAgICAgICAgICB0eXBlb2YgZGF0YS5yZWNvcmRzID09PSAnb2JqZWN0JyAmJlxuICAgICAgICAgICAgICAgIEFycmF5LmlzQXJyYXkoZGF0YS5yZWNvcmRzKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgbGV0IHRvdGFsID0gZGF0YS5oYXNPd25Qcm9wZXJ0eSgndG90YWwnKSAmJiBjb3JldWlUYWJsZVV0aWxzLmlzTnVtZXJpYyhkYXRhLnRvdGFsKVxuICAgICAgICAgICAgICAgICAgICA/IGRhdGEudG90YWxcbiAgICAgICAgICAgICAgICAgICAgOiBudWxsO1xuICAgICAgICAgICAgICAgIHRoYXQuc2V0UmVjb3JkcyhkYXRhLnJlY29yZHMsIHRvdGFsKTtcblxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGF0LnNldFJlY29yZHMoW10pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cblxuXG4gICAgICAgIGlmIChyZXN1bHQgaW5zdGFuY2VvZiBQcm9taXNlKSB7XG4gICAgICAgICAgICB0aGlzLmxvY2soKTtcblxuICAgICAgICAgICAgcmVzdWx0XG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhhdC51bmxvY2soKTtcblxuICAgICAgICAgICAgICAgICAgICBzZXRSZWNvcmRzKGRhdGEpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmNhdGNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhhdC51bmxvY2soKTtcbiAgICAgICAgICAgICAgICB9KVxuXG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHJlc3VsdCA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIHNldFJlY29yZHMocmVzdWx0KTtcbiAgICAgICAgfVxuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqINCf0LXRgNC10LfQsNCz0YDRg9C30LrQsCDQt9Cw0L/QuNGB0LXQuSDQsiDRgtCw0LHQu9C40YbQtVxuICAgICAqL1xuICAgIHJlbG9hZDogZnVuY3Rpb24gKCkge1xuXG4gICAgICAgIGlmICh0aGlzLl9pc1JlY29yZHNSZXF1ZXN0KSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHRoaXMuX29wdGlvbnMucmVjb3Jkc1JlcXVlc3QgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmxvYWRCeUZ1bmN0aW9uKHRoaXMuX29wdGlvbnMucmVjb3Jkc1JlcXVlc3QpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmxvYWQodGhpcy5fb3B0aW9ucy5yZWNvcmRzUmVxdWVzdC51cmwsIHRoaXMuX29wdGlvbnMucmVjb3Jkc1JlcXVlc3QubWV0aG9kKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqINCf0LXRgNC10YHQvtC30LTQsNC90LjQtSDRgtC10LvQsCDRgtCw0LHQu9C40YbRi1xuICAgICAqL1xuICAgIHJlZnJlc2g6IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICBsZXQgdGFibGUgPSBjb3JldWlUYWJsZVJlbmRlci5yZW5kZXJUYWJsZSh0aGlzKTtcblxuICAgICAgICBjb3JldWlUYWJsZUVsZW1lbnRzLmdldFRhYmxlKHRoaXMuZ2V0SWQoKSkucmVwbGFjZVdpdGgodGFibGUpO1xuXG4gICAgICAgIGNvcmV1aVRhYmxlUHJpdmF0ZS5fdHJpZ2dlcih0aGlzLCAndGFibGVfc2hvdycsIFsgdGhpcyBdKTtcbiAgICAgICAgY29yZXVpVGFibGVQcml2YXRlLl90cmlnZ2VyKHRoaXMsICdyZWNvcmRzX3Nob3cnLCBbIHRoaXMgXSk7XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICog0KPRgdGC0LDQvdC+0LLQutCwINC+0LHRidC10LPQviDQutC+0LvQuNGH0LXRgdGC0LLQsCDQt9Cw0L/QuNGB0LXQuSDQvdCwINGB0YLRgNCw0L3QuNGG0LVcbiAgICAgKiBAcGFyYW0gcmVjb3Jkc1BlclBhZ2VcbiAgICAgKi9cbiAgICBzZXRQYWdlU2l6ZTogZnVuY3Rpb24gKHJlY29yZHNQZXJQYWdlKSB7XG5cbiAgICAgICAgdGhpcy5fcmVjb3Jkc1BlclBhZ2UgPSByZWNvcmRzUGVyUGFnZTtcblxuICAgICAgICBjb3JldWlUYWJsZVByaXZhdGUuX3RyaWdnZXIodGhpcywgJ3BhZ2Vfc2l6ZV91cGRhdGUnKTtcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiDQktGL0LHQvtGAINCy0YHQtdGFINC30LDQv9C40YHQtdC5INCyINGC0LDQsdC70LjRhtC1XG4gICAgICovXG4gICAgc2VsZWN0QWxsOiBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgY29yZXVpVGFibGVFbGVtZW50cy5zZWxlY3RUckFsbCh0aGlzLmdldElkKCkpXG5cbiAgICAgICAgY29yZXVpVGFibGVQcml2YXRlLl90cmlnZ2VyKHRoaXMsICdyZWNvcmRfc2VsZWN0X2FsbCcpO1xuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqINCe0YLQvNC10L3QsCDQstGL0LHQvtGAINCy0YHQtdGFINC30LDQv9C40YHQtdC5INCyINGC0LDQsdC70LjRhtC1XG4gICAgICovXG4gICAgdW5zZWxlY3RBbGw6IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICBjb3JldWlUYWJsZUVsZW1lbnRzLnVuc2VsZWN0VHJBbGwodGhpcy5nZXRJZCgpKVxuXG4gICAgICAgIGNvcmV1aVRhYmxlUHJpdmF0ZS5fdHJpZ2dlcih0aGlzLCAncmVjb3JkX3Vuc2VsZWN0X2FsbCcpO1xuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqINCS0YvQsdC+0YAg0LfQsNC/0LjRgdC4INCyINGC0LDQsdC70LjRhtC1XG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGlkXG4gICAgICovXG4gICAgc2VsZWN0UmVjb3JkOiBmdW5jdGlvbiAoaWQpIHtcblxuICAgICAgICBsZXQgcmVjb3JkID0gdGhpcy5nZXRSZWNvcmRCeUlkKGlkKTtcblxuICAgICAgICBpZiAoICEgcmVjb3JkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgdHIgPSBjb3JldWlUYWJsZUVsZW1lbnRzLmdldFRyQnlJbmRleCh0aGlzLmdldElkKCksIHJlY29yZC5pbmRleCk7XG5cbiAgICAgICAgaWYgKHRyLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29yZXVpVGFibGVFbGVtZW50cy5zZWxlY3RUcih0cilcblxuICAgICAgICBjb3JldWlUYWJsZVByaXZhdGUuX3RyaWdnZXIodGhpcywgJ3JlY29yZF9zZWxlY3QnLCBbIHJlY29yZCBdKTtcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiDQktGL0LHQvtGAINC30LDQv9C40YHQuCDQsiDRgtCw0LHQu9C40YbQtSDQv9C+INC40L3QtNC10LrRgdGDXG4gICAgICogQHBhcmFtIHtpbnR9IGluZGV4XG4gICAgICovXG4gICAgc2VsZWN0UmVjb3JkQnlJbmRleDogZnVuY3Rpb24gKGluZGV4KSB7XG5cbiAgICAgICAgbGV0IHJlY29yZCA9IHRoaXMuZ2V0UmVjb3JkQnlJbmRleChpbmRleCk7XG5cbiAgICAgICAgaWYgKCAhIHJlY29yZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHRyID0gY29yZXVpVGFibGVFbGVtZW50cy5nZXRUckJ5SW5kZXgodGhpcy5nZXRJZCgpLCByZWNvcmQuaW5kZXgpO1xuXG4gICAgICAgIGlmICh0ci5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvcmV1aVRhYmxlRWxlbWVudHMuc2VsZWN0VHIodHIpXG5cbiAgICAgICAgY29yZXVpVGFibGVQcml2YXRlLl90cmlnZ2VyKHRoaXMsICdyZWNvcmRfc2VsZWN0JywgWyByZWNvcmQgXSk7XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICog0J7RgtC80LXQvdCwINCy0YvQsdC+0YDQsCDQt9Cw0L/QuNGB0Lgg0LIg0YLQsNCx0LvQuNGG0LVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWRcbiAgICAgKi9cbiAgICB1bnNlbGVjdFJlY29yZDogZnVuY3Rpb24gKGlkKSB7XG5cbiAgICAgICAgbGV0IHJlY29yZCA9IHRoaXMuZ2V0UmVjb3JkQnlJZChpZCk7XG5cbiAgICAgICAgaWYgKCAhIHJlY29yZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHRyID0gY29yZXVpVGFibGVFbGVtZW50cy5nZXRUckJ5SW5kZXgodGhpcy5nZXRJZCgpLCByZWNvcmQuaW5kZXgpO1xuXG4gICAgICAgIGlmICggISB0cikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29yZXVpVGFibGVFbGVtZW50cy51bnNlbGVjdFRyKHRyKVxuXG4gICAgICAgIGNvcmV1aVRhYmxlUHJpdmF0ZS5fdHJpZ2dlcih0aGlzLCAncmVjb3JkX3Vuc2VsZWN0JywgWyByZWNvcmQuZGF0YSBdKTtcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0LLRi9Cx0YDQsNC90L3Ri9GFIGlkXG4gICAgICogQHJldHVybiB7YXJyYXl9XG4gICAgICovXG4gICAgZ2V0U2VsZWN0ZWRSZWNvcmRzSWQ6IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICBsZXQgcmVjb3JkcyA9IFtdO1xuICAgICAgICBsZXQgdGhhdCAgICA9IHRoaXM7XG4gICAgICAgIGxldCBmaWVsZCAgID0gdGhpcy5fb3B0aW9ucy5wcmltYXJ5S2V5O1xuXG4gICAgICAgICQuZWFjaChjb3JldWlUYWJsZUVsZW1lbnRzLmdldFNlbGVjdGVkSW5kZXhlcyh0aGlzLmdldElkKCkpLCBmdW5jdGlvbiAoa2V5LCBpbmRleCkge1xuICAgICAgICAgICAgbGV0IHJlY29yZCA9IHRoYXQuZ2V0UmVjb3JkQnlJbmRleChpbmRleCk7XG5cbiAgICAgICAgICAgIGlmICggISByZWNvcmQgfHwgISByZWNvcmQuZGF0YS5oYXNPd25Qcm9wZXJ0eShmaWVsZCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJlY29yZHMucHVzaChyZWNvcmQuZGF0YVtmaWVsZF0pO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gcmVjb3JkcztcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0LLRi9Cx0YDQsNC90L3Ri9GFINC30LDQv9C40YHQtdC5XG4gICAgICogQHJldHVybiB7YXJyYXl9XG4gICAgICovXG4gICAgZ2V0U2VsZWN0ZWRSZWNvcmRzOiBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgbGV0IHJlY29yZHMgPSBbXTtcbiAgICAgICAgbGV0IHRoYXQgICAgPSB0aGlzO1xuXG4gICAgICAgICQuZWFjaChjb3JldWlUYWJsZUVsZW1lbnRzLmdldFNlbGVjdGVkSW5kZXhlcyh0aGlzLmdldElkKCkpLCBmdW5jdGlvbiAoa2V5LCBpbmRleCkge1xuICAgICAgICAgICAgbGV0IHJlY29yZCA9IHRoYXQuZ2V0UmVjb3JkQnlJbmRleChpbmRleCk7XG5cbiAgICAgICAgICAgIGlmICggISByZWNvcmQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJlY29yZHMucHVzaChyZWNvcmQpO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gcmVjb3JkcztcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0LfQsNC/0LjRgdC4INC/0L4gaWRcbiAgICAgKiBAcGFyYW0gaWRcbiAgICAgKiBAcmV0dXJuIHtvYmplY3R8bnVsbH1cbiAgICAgKi9cbiAgICBnZXRSZWNvcmQ6IGZ1bmN0aW9uIChpZCkge1xuXG4gICAgICAgIGxldCByZWNvcmQgPSB0aGlzLmdldFJlY29yZEJ5SWQoaWQpO1xuXG4gICAgICAgIGlmICggISByZWNvcmQpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlY29yZC5kYXRhO1xuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSDQt9Cw0L/QuNGB0LXQuVxuICAgICAqL1xuICAgIGdldFJlY29yZHM6IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICBsZXQgcmVjb3JkcyA9IFtdXG5cbiAgICAgICAgJC5lYWNoKHRoaXMuX3JlY29yZHMsIGZ1bmN0aW9uIChrZXksIHJlY29yZCkge1xuICAgICAgICAgICAgcmVjb3Jkcy5wdXNoKCQuZXh0ZW5kKHRydWUsIHt9LCByZWNvcmQpKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHJlY29yZHM7XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC00LDQvdC90YvRhSDQuNC3INGB0YPRidC10YHRgtCy0YPRjtGJ0LjRhSDQt9Cw0L/QuNGB0LXQuVxuICAgICAqIEByZXR1cm4ge0FycmF5fVxuICAgICAqL1xuICAgIGdldERhdGE6IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICBsZXQgZGF0YSA9IFtdXG5cbiAgICAgICAgJC5lYWNoKHRoaXMuX3JlY29yZHMsIGZ1bmN0aW9uIChrZXksIHJlY29yZCkge1xuICAgICAgICAgICAgZGF0YS5wdXNoKCQuZXh0ZW5kKHRydWUsIHt9LCByZWNvcmQuZGF0YSkpO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiDQn9C10YDQtdGF0L7QtCDQuiDQv9GA0LXQtNGL0LTRg9GJ0LXQuSDRgdGC0YDQsNC90LjRhtC1XG4gICAgICovXG4gICAgcHJldlBhZ2U6IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICBpZiAodGhpcy5fcGFnZSA+IDEpIHtcbiAgICAgICAgICAgIHRoaXMuX3BhZ2UtLTtcbiAgICAgICAgICAgIHRoaXMucmVsb2FkKCk7XG4gICAgICAgIH1cbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiDQn9C10YDQtdGF0L7QtCDQuiDRgdC70LXQtNGD0Y7RidC10Lkg0YHRgtGA0LDQvdC40YbQtVxuICAgICAqIEByZXR1cm4ge2FycmF5fVxuICAgICAqL1xuICAgIG5leHRQYWdlOiBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgbGV0IHRvdGFsUGFnZXMgPSB0aGlzLl9yZWNvcmRzVG90YWwgPiAwICYmIHRoaXMuX3JlY29yZHNQZXJQYWdlID4gMFxuICAgICAgICAgICAgPyBNYXRoLmNlaWwodGhpcy5fcmVjb3Jkc1RvdGFsIC8gdGhpcy5fcmVjb3Jkc1BlclBhZ2UpXG4gICAgICAgICAgICA6IDE7XG5cbiAgICAgICAgaWYgKHRoaXMuX3BhZ2UgPCB0b3RhbFBhZ2VzKSB7XG4gICAgICAgICAgICB0aGlzLl9wYWdlKys7XG4gICAgICAgICAgICB0aGlzLnJlbG9hZCgpO1xuICAgICAgICB9XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICog0J/QtdGA0LXRhdC+0LQg0Log0YPQutCw0LfQsNC90L3QvtC5INGB0YLRgNCw0L3QuNGG0LVcbiAgICAgKi9cbiAgICBnb1BhZ2U6IGZ1bmN0aW9uIChwYWdlKSB7XG5cbiAgICAgICAgaWYgKHBhZ2UgPj0gMSkge1xuICAgICAgICAgICAgdGhpcy5fcGFnZSA9IHBhZ2U7XG4gICAgICAgICAgICB0aGlzLnJlbG9hZCgpO1xuICAgICAgICB9XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICog0KDQtdCz0LjRgdGC0YDQsNGG0LjRjyDRhNGD0L3QutGG0LjQuCDQvdCwINGB0L7QsdGL0YLQuNC1XG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IGV2ZW50TmFtZVxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259ICAgICBjYWxsYmFja1xuICAgICAqIEBwYXJhbSB7Kn0gICAgICAgICAgICBjb250ZXh0XG4gICAgICogQHBhcmFtIHtib29sZWFufSAgICAgIHNpbmdsZUV4ZWNcbiAgICAgKi9cbiAgICBvbjogZnVuY3Rpb24oZXZlbnROYW1lLCBjYWxsYmFjaywgY29udGV4dCwgc2luZ2xlRXhlYykge1xuXG4gICAgICAgIGxldCBldmVudE5hbWVzID0gW107XG5cbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZXZlbnROYW1lKSkge1xuICAgICAgICAgICAgJC5lYWNoKGV2ZW50TmFtZSwgZnVuY3Rpb24gKGtleSwgbmFtZSkge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbmFtZSA9PT0gJ3N0cmluZycgJiYgbmFtZSkge1xuICAgICAgICAgICAgICAgICAgICBldmVudE5hbWVzLnB1c2gobmFtZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgZXZlbnROYW1lID09PSAnc3RyaW5nJyAmJiBldmVudE5hbWUpIHtcbiAgICAgICAgICAgIGV2ZW50TmFtZXMucHVzaChldmVudE5hbWUpO1xuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgdGhhdCA9IHRoaXM7XG5cbiAgICAgICAgJC5lYWNoKGV2ZW50TmFtZXMsIGZ1bmN0aW9uIChrZXksIG5hbWUpIHtcblxuICAgICAgICAgICAgaWYgKCAhIEFycmF5LmlzQXJyYXkodGhhdC5fZXZlbnRzW25hbWVdKSkge1xuICAgICAgICAgICAgICAgIHRoYXQuX2V2ZW50c1tuYW1lXSA9IFtdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGF0Ll9ldmVudHNbbmFtZV0ucHVzaCh7XG4gICAgICAgICAgICAgICAgY29udGV4dCA6IGNvbnRleHQgPyBjb250ZXh0IDogdGhhdCxcbiAgICAgICAgICAgICAgICBjYWxsYmFjazogY2FsbGJhY2ssXG4gICAgICAgICAgICAgICAgc2luZ2xlRXhlYzogISEgc2luZ2xlRXhlYyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0L/QtdGA0LXQstC+0LTQvtCyINGC0LXQutGD0YnQtdCz0L4g0Y/Qt9GL0LrQsFxuICAgICAqIEByZXR1cm4ge29iamVjdH1cbiAgICAgKi9cbiAgICBnZXRMYW5nOiBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgcmV0dXJuICQuZXh0ZW5kKHRydWUsIHt9LCB0aGlzLl9vcHRpb25zLmxhbmdJdGVtcyk7XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICog0KPRgdGC0LDQvdC+0LLQutCwINCy0LjQtNC40LzRi9GFINC60L7Qu9C+0L3QvtC6LCDQvdC1INGD0LrQsNC30LDQvdC90YvQtSDQutC+0LvQvtC90LrQuCDQsdGD0LTRg9GCINGB0LrRgNGL0YLRi1xuICAgICAqIEBwYXJhbSB7QXJyYXl9IGNvbHVtbnNcbiAgICAgKi9cbiAgICBzZXRDb2x1bW5zU2hvdzogZnVuY3Rpb24gKGNvbHVtbnMpIHtcblxuICAgICAgICBpZiAoICEgQXJyYXkuaXNBcnJheShjb2x1bW5zKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGlzQ2hhbmdlID0gZmFsc2U7XG4gICAgICAgIGxldCB0YWJsZSAgICA9IHRoaXM7XG5cbiAgICAgICAgdGhpcy5fY291bnRDb2x1bW5zU2hvdyA9IDA7XG5cblxuICAgICAgICB0aGlzLl9jb2x1bW5zLm1hcChmdW5jdGlvbiAoY29sdW1uKSB7XG4gICAgICAgICAgICBsZXQgb3B0aW9ucyA9IGNvbHVtbi5nZXRPcHRpb25zKCk7XG5cbiAgICAgICAgICAgIGlmIChvcHRpb25zLmhhc093blByb3BlcnR5KCdmaWVsZCcpICYmIHR5cGVvZiBvcHRpb25zLmZpZWxkID09PSAnc3RyaW5nJykge1xuXG4gICAgICAgICAgICAgICAgbGV0IGlzU2hvdyA9IGNvbHVtbnMuaW5kZXhPZihvcHRpb25zLmZpZWxkKSA+PSAwO1xuXG4gICAgICAgICAgICAgICAgaWYgKGNvbHVtbi5pc1Nob3coKSAhPT0gaXNTaG93KSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbHVtbi5zZXRTaG93KGlzU2hvdyk7XG4gICAgICAgICAgICAgICAgICAgIGlzQ2hhbmdlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChjb2x1bW4uaXNTaG93KCkpIHtcbiAgICAgICAgICAgICAgICB0YWJsZS5fY291bnRDb2x1bW5zU2hvdysrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuXG4gICAgICAgIGlmIChpc0NoYW5nZSkge1xuICAgICAgICAgICAgY29yZXVpVGFibGVQcml2YXRlLl90cmlnZ2VyKHRoaXMsICdjb2x1bW5zX2NoYW5nZScpO1xuICAgICAgICAgICAgdGhpcy5yZWZyZXNoKCk7XG4gICAgICAgIH1cbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiDQn9C+0LrQsNC3INC60L7Qu9C+0L3QvtC6XG4gICAgICogQHBhcmFtIHtBcnJheX0gY29sdW1uc1xuICAgICAqL1xuICAgIHNob3dDb2x1bW5zOiBmdW5jdGlvbiAoY29sdW1ucykge1xuXG4gICAgICAgIGlmICggISBBcnJheS5pc0FycmF5KGNvbHVtbnMpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgaXNDaGFuZ2UgPSBmYWxzZTtcbiAgICAgICAgbGV0IHRhYmxlICAgID0gdGhpcztcblxuICAgICAgICB0aGlzLl9jb3VudENvbHVtbnNTaG93ID0gMDtcblxuXG4gICAgICAgIHRoaXMuX2NvbHVtbnMubWFwKGZ1bmN0aW9uIChjb2x1bW4pIHtcbiAgICAgICAgICAgIGxldCBvcHRpb25zID0gY29sdW1uLmdldE9wdGlvbnMoKTtcblxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuaGFzT3duUHJvcGVydHkoJ2ZpZWxkJykgJiZcbiAgICAgICAgICAgICAgICB0eXBlb2Ygb3B0aW9ucy5maWVsZCA9PT0gJ3N0cmluZycgJiZcbiAgICAgICAgICAgICAgICBjb2x1bW5zLmluZGV4T2Yob3B0aW9ucy5maWVsZCkgPj0gMCAmJlxuICAgICAgICAgICAgICAgICEgY29sdW1uLmlzU2hvdygpXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBjb2x1bW4uc2V0U2hvdyh0cnVlKTtcbiAgICAgICAgICAgICAgICBpc0NoYW5nZSA9IHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChjb2x1bW4uaXNTaG93KCkpIHtcbiAgICAgICAgICAgICAgICB0YWJsZS5fY291bnRDb2x1bW5zU2hvdysrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuXG4gICAgICAgIGlmIChpc0NoYW5nZSkge1xuICAgICAgICAgICAgY29yZXVpVGFibGVQcml2YXRlLl90cmlnZ2VyKHRoaXMsICdjb2x1bW5zX2NoYW5nZScpO1xuICAgICAgICAgICAgdGhpcy5yZWZyZXNoKCk7XG4gICAgICAgIH1cbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiDQodC60YDRi9GC0LjQtSDQutC+0LvQvtC90L7QulxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGNvbHVtbnNcbiAgICAgKi9cbiAgICBoaWRlQ29sdW1uczogZnVuY3Rpb24gKGNvbHVtbnMpIHtcblxuICAgICAgICBpZiAoICEgQXJyYXkuaXNBcnJheShjb2x1bW5zKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGlzQ2hhbmdlID0gZmFsc2U7XG4gICAgICAgIGxldCB0YWJsZSAgICA9IHRoaXM7XG5cbiAgICAgICAgdGhpcy5fY291bnRDb2x1bW5zU2hvdyA9IDA7XG5cblxuICAgICAgICB0aGlzLl9jb2x1bW5zLm1hcChmdW5jdGlvbiAoY29sdW1uKSB7XG4gICAgICAgICAgICBsZXQgb3B0aW9ucyA9IGNvbHVtbi5nZXRPcHRpb25zKCk7XG5cbiAgICAgICAgICAgIGlmIChvcHRpb25zLmhhc093blByb3BlcnR5KCdmaWVsZCcpICYmXG4gICAgICAgICAgICAgICAgdHlwZW9mIG9wdGlvbnMuZmllbGQgPT09ICdzdHJpbmcnICYmXG4gICAgICAgICAgICAgICAgY29sdW1ucy5pbmRleE9mKG9wdGlvbnMuZmllbGQpID49IDAgJiZcbiAgICAgICAgICAgICAgICBjb2x1bW4uaXNTaG93KClcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIGNvbHVtbi5zZXRTaG93KGZhbHNlKTtcbiAgICAgICAgICAgICAgICBpc0NoYW5nZSA9IHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChjb2x1bW4uaXNTaG93KCkpIHtcbiAgICAgICAgICAgICAgICB0YWJsZS5fY291bnRDb2x1bW5zU2hvdysrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoaXNDaGFuZ2UpIHtcbiAgICAgICAgICAgIGNvcmV1aVRhYmxlUHJpdmF0ZS5fdHJpZ2dlcih0aGlzLCAnY29sdW1uc19jaGFuZ2UnKTtcbiAgICAgICAgICAgIHRoaXMucmVmcmVzaCgpO1xuICAgICAgICB9XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC/0L7QuNGB0LrQvtCy0YvRhSDQtNCw0L3QvdGL0YVcbiAgICAgKiBAcHJvcGVydHkge2Jvb2xlYW59IGV4dE9wdGlvbnNcbiAgICAgKiBAcmV0dXJuIHsqW119XG4gICAgICovXG4gICAgZ2V0U2VhcmNoRGF0YTogZnVuY3Rpb24gKGV4dE9wdGlvbnMpIHtcblxuICAgICAgICBsZXQgc2VhcmNoRGF0YSA9IFtdO1xuXG4gICAgICAgIHRoaXMuX3NlYXJjaC5tYXAoZnVuY3Rpb24gKGNvbnRyb2wpIHtcbiAgICAgICAgICAgIGxldCBmaWVsZCA9IGNvbnRyb2wuZ2V0RmllbGQoKTtcblxuICAgICAgICAgICAgaWYgKGZpZWxkKSB7XG4gICAgICAgICAgICAgICAgbGV0IHZhbHVlID0gY29udHJvbC5nZXRWYWx1ZSgpO1xuXG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBzZWFyY2ggPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmaWVsZDogZmllbGQsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAoZXh0T3B0aW9ucykge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VhcmNoLmZpbHRlciA9IHR5cGVvZiBjb250cm9sLmZpbHRlciA9PT0gJ2Z1bmN0aW9uJyA/IGNvbnRyb2wuZmlsdGVyIDogbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlYXJjaC50eXBlICAgPSBjb250cm9sLl9vcHRpb25zLnR5cGU7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBzZWFyY2hEYXRhLnB1c2goc2VhcmNoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBzZWFyY2hEYXRhO1xuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSDQtNCw0L3QvdGL0YUg0LjQtyDRhNC40LvRjNGC0YDQvtCyXG4gICAgICogQHByb3BlcnR5IHtib29sZWFufSBleHRPcHRpb25zXG4gICAgICogQHJldHVybiB7KltdfVxuICAgICAqL1xuICAgIGdldEZpbHRlckRhdGE6IGZ1bmN0aW9uIChleHRPcHRpb25zKSB7XG5cbiAgICAgICAgbGV0IGZpbHRlckRhdGEgPSBbXTtcblxuICAgICAgICB0aGlzLl9maWx0ZXJzLm1hcChmdW5jdGlvbiAoY29udHJvbCkge1xuICAgICAgICAgICAgbGV0IGZpZWxkID0gY29udHJvbC5nZXRGaWVsZCgpO1xuXG4gICAgICAgICAgICBpZiAoZmllbGQpIHtcbiAgICAgICAgICAgICAgICBsZXQgdmFsdWUgPSBjb250cm9sLmdldFZhbHVlKCk7XG5cbiAgICAgICAgICAgICAgICBpZiAodmFsdWUgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGZpbHRlciA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkOiBmaWVsZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmIChleHRPcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmaWx0ZXIuZmlsdGVyID0gdHlwZW9mIGNvbnRyb2wuZmlsdGVyID09PSAnZnVuY3Rpb24nID8gY29udHJvbC5maWx0ZXIgOiBudWxsO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyRGF0YS5wdXNoKGZpbHRlcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gZmlsdGVyRGF0YTtcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiDQn9C+0LjRgdC6INC/0L4g0YLQsNCx0LvQuNGG0LUg0YEg0LjRgdC/0L7Qu9GM0LfQvtCy0LDQvdC40LXQvCDQtNCw0L3QvdGL0YUg0LjQtyDQv9C+0LjRgdC60LAg0Lgg0YTQuNC70YzRgtGA0L7QslxuICAgICAqL1xuICAgIHNlYXJjaFJlY29yZHM6IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICBsZXQgc2VhcmNoRGF0YSA9IHRoaXMuZ2V0U2VhcmNoRGF0YSgpO1xuICAgICAgICBsZXQgZmlsdGVyRGF0YSA9IHRoaXMuZ2V0RmlsdGVyRGF0YSgpO1xuXG4gICAgICAgIGlmICh0aGlzLl9pc1JlY29yZHNSZXF1ZXN0KSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHRoaXMuX29wdGlvbnMucmVjb3Jkc1JlcXVlc3QgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmxvYWRCeUZ1bmN0aW9uKHRoaXMuX29wdGlvbnMucmVjb3Jkc1JlcXVlc3QpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmxvYWQodGhpcy5fb3B0aW9ucy5yZWNvcmRzUmVxdWVzdC51cmwsIHRoaXMuX29wdGlvbnMucmVjb3Jkc1JlcXVlc3QubWV0aG9kKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvcmV1aVRhYmxlUHJpdmF0ZS5zZWFyY2hMb2NhbFJlY29yZHModGhpcyk7XG4gICAgICAgICAgICB0aGlzLnJlZnJlc2goKTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgY29yZXVpVGFibGVQcml2YXRlLl90cmlnZ2VyKHRoaXMsICdmaWx0ZXJzX2NoYW5nZScsIFsgZmlsdGVyRGF0YSBdKTtcbiAgICAgICAgY29yZXVpVGFibGVQcml2YXRlLl90cmlnZ2VyKHRoaXMsICdzZWFyY2hfY2hhbmdlJywgWyBzZWFyY2hEYXRhIF0pO1xuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqINCe0YfQuNGB0YLQutCwINC/0L7QuNGB0LrQvtCy0YvRhSDQtNCw0L3QvdGL0YVcbiAgICAgKi9cbiAgICBjbGVhclNlYXJjaDogZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICQuZWFjaCh0aGlzLl9zZWFyY2gsIGZ1bmN0aW9uIChrZXksIHNlYXJjaCkge1xuICAgICAgICAgICAgc2VhcmNoLnNldFZhbHVlKG51bGwpO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLnNlYXJjaFJlY29yZHMoKTtcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiDQntGH0LjRgdGC0LrQsCDQv9C+0LjRgdC60L7QstGL0YUg0LTQsNC90L3Ri9GFINCyINGE0LjQu9GM0YLRgNCw0YVcbiAgICAgKi9cbiAgICBjbGVhckZpbHRlcnM6IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAkLmVhY2godGhpcy5fZmlsdGVycywgZnVuY3Rpb24gKGtleSwgZmlsdGVyKSB7XG4gICAgICAgICAgICBmaWx0ZXIuc2V0VmFsdWUobnVsbCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuc2VhcmNoUmVjb3JkcygpO1xuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSDQt9Cw0L/QuNGB0Lgg0L/QviDQuNC90LTQtdC60YHRg1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfG51bWJlcn0gaW5kZXhcbiAgICAgKiBAcmV0dXJuIHtvYmplY3R8bnVsbH1cbiAgICAgKi9cbiAgICBnZXRSZWNvcmRCeUluZGV4OiBmdW5jdGlvbiAoaW5kZXgpIHtcblxuICAgICAgICBpZiAoWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2YgaW5kZXgpIDwgMCB8fCBpbmRleCA9PT0gJycpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgaW5kZXggPSBOdW1iZXIoaW5kZXgpO1xuXG4gICAgICAgIGlmIChpbmRleCA8PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCByZWNvcmQgPSBudWxsO1xuXG4gICAgICAgICQuZWFjaCh0aGlzLl9yZWNvcmRzLCBmdW5jdGlvbiAoa2V5LCByZWNvcmRJdGVtKSB7XG4gICAgICAgICAgICBpZiAocmVjb3JkSXRlbS5pbmRleCA9PT0gaW5kZXgpIHtcbiAgICAgICAgICAgICAgICByZWNvcmQgPSB7XG4gICAgICAgICAgICAgICAgICAgIGluZGV4OiByZWNvcmRJdGVtLmluZGV4LFxuICAgICAgICAgICAgICAgICAgICBkYXRhOiAkLmV4dGVuZCh0cnVlLCB7fSwgcmVjb3JkSXRlbS5kYXRhKSxcbiAgICAgICAgICAgICAgICAgICAgbWV0YTogcmVjb3JkSXRlbS5tZXRhID8gJC5leHRlbmQodHJ1ZSwge30sIHJlY29yZEl0ZW0ubWV0YSkgOiBudWxsLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gcmVjb3JkO1xuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSDQt9Cw0L/QuNGB0Lgg0L/QviBpZFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZFxuICAgICAqIEByZXR1cm4ge29iamVjdHxudWxsfVxuICAgICAqL1xuICAgIGdldFJlY29yZEJ5SWQ6IGZ1bmN0aW9uIChpZCkge1xuXG4gICAgICAgIHJldHVybiB0aGlzLmdldFJlY29yZEJ5RmllbGQodGhpcy5fb3B0aW9ucy5wcmltYXJ5S2V5LCBpZCk7XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC30LDQv9C40YHQuCDQv9C+INC/0L7Qu9GOXG4gICAgICogQHBhcmFtIHtzdHJpbmd9ICAgICAgICBmaWVsZFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfG51bWJlcn0gdmFsdWVcbiAgICAgKiBAcmV0dXJuIHtvYmplY3R8bnVsbH1cbiAgICAgKi9cbiAgICBnZXRSZWNvcmRCeUZpZWxkOiBmdW5jdGlvbiAoZmllbGQsIHZhbHVlKSB7XG5cbiAgICAgICAgaWYgKFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIGZpZWxkKSA8IDAgfHwgZmllbGQgPT09ICcnKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCByZWNvcmQgPSBudWxsO1xuXG4gICAgICAgICQuZWFjaCh0aGlzLl9yZWNvcmRzLCBmdW5jdGlvbiAoa2V5LCByZWNvcmRJdGVtKSB7XG4gICAgICAgICAgICBpZiAocmVjb3JkSXRlbS5kYXRhLmhhc093blByb3BlcnR5KGZpZWxkKSAmJiByZWNvcmRJdGVtLmRhdGFbZmllbGRdID09PSB2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHJlY29yZCA9ICQuZXh0ZW5kKHRydWUsIHt9LCByZWNvcmRJdGVtKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHJlY29yZDtcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0LrQvtC90YLRgNC+0LvQsCDQv9C+INC10LPQviBpZFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZFxuICAgICAqIEByZXR1cm4ge29iamVjdH1cbiAgICAgKi9cbiAgICBnZXRDb250cm9sQnlJZDogZnVuY3Rpb24gKGlkKSB7XG5cbiAgICAgICAgbGV0IHJlc3VsdCA9IG51bGw7XG5cbiAgICAgICAgJC5lYWNoKHRoaXMuX2NvbnRyb2xzLCBmdW5jdGlvbiAoa2V5LCBjb250cm9sKSB7XG4gICAgICAgICAgICBpZiAoY29udHJvbC5oYXNPd25Qcm9wZXJ0eSgnZ2V0SWQnKSAmJlxuICAgICAgICAgICAgICAgIHR5cGVvZiBjb250cm9sLmdldElkID09PSAnZnVuY3Rpb24nICYmXG4gICAgICAgICAgICAgICAgY29udHJvbC5nZXRJZCgpID09PSBpZFxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gY29udHJvbDtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC60L7QvdGC0YDQvtC70LAg0L/QvtC40YHQutCwINC/0L4g0LXQs9C+IGlkXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGlkXG4gICAgICogQHJldHVybiB7b2JqZWN0fVxuICAgICAqL1xuICAgIGdldFNlYXJjaENvbnRyb2xCeUlkOiBmdW5jdGlvbiAoaWQpIHtcblxuICAgICAgICBsZXQgcmVzdWx0ID0gbnVsbDtcblxuICAgICAgICAkLmVhY2godGhpcy5fc2VhcmNoLCBmdW5jdGlvbiAoa2V5LCBzZWFyY2gpIHtcbiAgICAgICAgICAgIGlmIChzZWFyY2guaGFzT3duUHJvcGVydHkoJ2dldElkJykgJiZcbiAgICAgICAgICAgICAgICB0eXBlb2Ygc2VhcmNoLmdldElkID09PSAnZnVuY3Rpb24nICYmXG4gICAgICAgICAgICAgICAgc2VhcmNoLmdldElkKCkgPT09IGlkXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBzZWFyY2g7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqINCh0L7RgNGC0LjRgNC+0LLQutCwINC/0L4g0L/QvtC70Y/QvFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHNvcnRpbmdcbiAgICAgKi9cbiAgICBzb3J0RmllbGRzOiBmdW5jdGlvbiAoc29ydGluZykge1xuXG4gICAgICAgIGlmICggISBBcnJheS5pc0FycmF5KHNvcnRpbmcpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgdGhhdCAgICAgICAgICAgICAgPSB0aGlzO1xuICAgICAgICBsZXQgY29sdW1uc0NvbnZlcnRlcnMgPSB7fTtcblxuICAgICAgICB0aGlzLl9zb3J0ID0gW107XG5cbiAgICAgICAgJC5lYWNoKHNvcnRpbmcsIGZ1bmN0aW9uIChrZXksIHNvcnQpIHtcbiAgICAgICAgICAgIGlmICggISBjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KHNvcnQpIHx8XG4gICAgICAgICAgICAgICAgICEgc29ydC5oYXNPd25Qcm9wZXJ0eSgnZmllbGQnKSB8fFxuICAgICAgICAgICAgICAgICAhIHNvcnQuaGFzT3duUHJvcGVydHkoJ29yZGVyJykgfHxcbiAgICAgICAgICAgICAgICB0eXBlb2Ygc29ydC5maWVsZCAhPT0gJ3N0cmluZycgfHxcbiAgICAgICAgICAgICAgICB0eXBlb2Ygc29ydC5vcmRlciAhPT0gJ3N0cmluZycgfHxcbiAgICAgICAgICAgICAgICAgISBzb3J0LmZpZWxkIHx8XG4gICAgICAgICAgICAgICAgICEgc29ydC5vcmRlclxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgIGxldCBjb2x1bW5Tb3J0YWJsZSA9IGZhbHNlO1xuXG4gICAgICAgICAgICAkLmVhY2godGhhdC5fY29sdW1ucywgZnVuY3Rpb24gKGtleSwgY29sdW1uKSB7XG4gICAgICAgICAgICAgICAgbGV0IG9wdGlvbnMgPSBjb2x1bW4uZ2V0T3B0aW9ucygpO1xuXG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuaGFzT3duUHJvcGVydHkoJ2ZpZWxkJykgJiZcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnc29ydGFibGUnKSAmJlxuICAgICAgICAgICAgICAgICAgICB0eXBlb2Ygb3B0aW9ucy5maWVsZCA9PT0gJ3N0cmluZycgJiZcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5maWVsZCA9PT0gc29ydC5maWVsZCAmJlxuICAgICAgICAgICAgICAgICAgICBvcHRpb25zLnNvcnRhYmxlXG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbHVtblNvcnRhYmxlID0gdHJ1ZTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoY29sdW1uLmhhc093blByb3BlcnR5KCdjb252ZXJ0VG9TdHJpbmcnKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGNvbHVtbi5jb252ZXJ0VG9TdHJpbmcgPT09ICdmdW5jdGlvbidcbiAgICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2x1bW5zQ29udmVydGVyc1tvcHRpb25zLmZpZWxkXSA9IGNvbHVtbi5jb252ZXJ0VG9TdHJpbmc7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cblxuICAgICAgICAgICAgaWYgKGNvbHVtblNvcnRhYmxlKSB7XG4gICAgICAgICAgICAgICAgdGhhdC5fc29ydC5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgZmllbGQ6IHNvcnQuZmllbGQsXG4gICAgICAgICAgICAgICAgICAgIG9yZGVyOiBzb3J0Lm9yZGVyLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuXG4gICAgICAgIGlmICh0aGlzLl9zb3J0Lmxlbmd0aCA+PSAwKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5faXNSZWNvcmRzUmVxdWVzdCkge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdGhpcy5fb3B0aW9ucy5yZWNvcmRzUmVxdWVzdCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmxvYWRCeUZ1bmN0aW9uKHRoaXMuX29wdGlvbnMucmVjb3Jkc1JlcXVlc3QpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubG9hZCh0aGlzLl9vcHRpb25zLnJlY29yZHNSZXF1ZXN0LnVybCwgdGhpcy5fb3B0aW9ucy5yZWNvcmRzUmVxdWVzdC5tZXRob2QpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb3JldWlUYWJsZVByaXZhdGUuc2V0Q29sdW1uc1NvcnQodGhpcywgdGhpcy5fc29ydCk7XG5cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fcmVjb3JkcyA9IGNvcmV1aVRhYmxlUHJpdmF0ZS5zb3J0UmVjb3Jkc0J5RmllbGRzKHRoaXMuX3JlY29yZHMsIHRoaXMuX3NvcnQsIGNvbHVtbnNDb252ZXJ0ZXJzKTtcbiAgICAgICAgICAgICAgICB0aGlzLnJlZnJlc2goKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvcmV1aVRhYmxlUHJpdmF0ZS5fdHJpZ2dlcih0aGlzLCAncmVjb3Jkc19zb3J0JywgWyB0aGlzIF0pO1xuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqINCh0L7RgNGC0LjRgNC+0LLQutCwINC/0L4g0YPQvNC+0LvRh9Cw0L3QuNGOXG4gICAgICovXG4gICAgc29ydERlZmF1bHQ6IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICB0aGlzLl9zb3J0ID0gW107XG5cbiAgICAgICAgaWYgKHRoaXMuX2lzUmVjb3Jkc1JlcXVlc3QpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdGhpcy5fb3B0aW9ucy5yZWNvcmRzUmVxdWVzdCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIHRoaXMubG9hZEJ5RnVuY3Rpb24odGhpcy5fb3B0aW9ucy5yZWNvcmRzUmVxdWVzdCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMubG9hZCh0aGlzLl9vcHRpb25zLnJlY29yZHNSZXF1ZXN0LnVybCwgdGhpcy5fb3B0aW9ucy5yZWNvcmRzUmVxdWVzdC5tZXRob2QpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29yZXVpVGFibGVQcml2YXRlLnNldENvbHVtbnNTb3J0KHRoaXMpO1xuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9yZWNvcmRzID0gY29yZXVpVGFibGVQcml2YXRlLnNvcnRSZWNvcmRzQnlTZXEodGhpcy5fcmVjb3Jkcyk7XG4gICAgICAgICAgICB0aGlzLnJlZnJlc2goKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvcmV1aVRhYmxlUHJpdmF0ZS5fdHJpZ2dlcih0aGlzLCAncmVjb3Jkc19zb3J0JywgWyB0aGlzIF0pO1xuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqINCj0LTQsNC70LXQvdC40LUg0YHRgtGA0L7QutC4INC40Lcg0YLQsNCx0LvQuNGG0Ysg0L/QviDQuNC90LTQtdC60YHRg1xuICAgICAqIEBwYXJhbSBpbmRleFxuICAgICAqL1xuICAgIHJlbW92ZVJlY29yZEJ5SW5kZXg6IGZ1bmN0aW9uIChpbmRleCkge1xuXG4gICAgICAgIGxldCByZWNvcmRLZXkgPSBudWxsO1xuXG4gICAgICAgICQuZWFjaCh0aGlzLl9yZWNvcmRzLCBmdW5jdGlvbiAoa2V5LCByZWNvcmRJdGVtKSB7XG4gICAgICAgICAgICBpZiAocmVjb3JkSXRlbS5pbmRleCA9PT0gaW5kZXgpIHtcbiAgICAgICAgICAgICAgICByZWNvcmRLZXkgPSBrZXk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAocmVjb3JkS2V5ICE9PSBudWxsICYmIHJlY29yZEtleSA+PSAwKSB7XG4gICAgICAgICAgICB0aGlzLl9yZWNvcmRzLnNwbGljZShyZWNvcmRLZXksIDEpO1xuXG4gICAgICAgICAgICBsZXQgdGhhdCA9IHRoaXM7XG4gICAgICAgICAgICBsZXQgdHIgICA9IGNvcmV1aVRhYmxlRWxlbWVudHMuZ2V0VHJCeUluZGV4KHRoaXMuZ2V0SWQoKSwgaW5kZXgpO1xuXG4gICAgICAgICAgICBpZiAodHIubGVuZ3RoID49IDApIHtcbiAgICAgICAgICAgICAgICB0ci5mYWRlT3V0KCdmYXN0JywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB0ci5yZW1vdmUoKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAodGhhdC5fcmVjb3Jkcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0Ym9keSA9IGNvcmV1aVRhYmxlRWxlbWVudHMuZ2V0VGFibGVUYm9keSh0aGF0LmdldElkKCkpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB0Ym9keS5hcHBlbmQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29yZXVpVGFibGVVdGlscy5yZW5kZXIoY29yZXVpVGFibGVUcGxbJ3RhYmxlL3JlY29yZC9lbXB0eS5odG1sJ10sIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sdW1uc0NvdW50OiB0aGF0Ll9jb3VudENvbHVtbnNTaG93LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYW5nOiB0aGF0LmdldExhbmcoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLl9yZWNvcmRzTnVtYmVyLS07XG4gICAgICAgIH1cbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiDQlNC+0LHQsNCy0LvQtdC90LjQtSDRgdGC0YDQvtC60Lgg0LIg0YLQsNCx0LvQuNGG0YMg0L/QvtGB0LvQtSDRgdGC0YDQvtC60Lgg0YEg0LjQvdC00LXQutGB0L7QvFxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSByZWNvcmREYXRhXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGluZGV4XG4gICAgICovXG4gICAgYWRkUmVjb3JkQWZ0ZXJJbmRleDogZnVuY3Rpb24gKHJlY29yZERhdGEsIGluZGV4KSB7XG5cbiAgICAgICAgbGV0IHRyID0gY29yZXVpVGFibGVFbGVtZW50cy5nZXRUckJ5SW5kZXgodGhpcy5nZXRJZCgpLCBpbmRleCk7XG5cbiAgICAgICAgaWYgKHRyLmxlbmd0aCA+PSAwKSB7XG4gICAgICAgICAgICBsZXQgcmVjb3JkID0gY29yZXVpVGFibGVQcml2YXRlLmFkZFJlY29yZCh0aGlzLCByZWNvcmREYXRhLCBpbmRleCk7XG5cbiAgICAgICAgICAgIGlmIChyZWNvcmQpIHtcbiAgICAgICAgICAgICAgICBjb3JldWlUYWJsZUVsZW1lbnRzLmdldFRyRW1wdHkodGhpcy5nZXRJZCgpKS5yZW1vdmUoKTtcblxuICAgICAgICAgICAgICAgIHRyLmFmdGVyKFxuICAgICAgICAgICAgICAgICAgICBjb3JldWlUYWJsZVJlbmRlci5yZW5kZXJSZWNvcmQodGhpcywgcmVjb3JkKVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgdGhpcy5fcmVjb3Jkc051bWJlcisrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICog0JTQvtCx0LDQstC70LXQvdC40LUg0YHRgtGA0L7QutC4INCyINGC0LDQsdC70LjRhtGDINC/0LXRgNC10LQg0YHRgtGA0L7QutC+0Lkg0YEg0LjQvdC00LXQutGB0L7QvFxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSByZWNvcmREYXRhXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGluZGV4XG4gICAgICovXG4gICAgYWRkUmVjb3JkQmVmb3JlSW5kZXg6IGZ1bmN0aW9uIChyZWNvcmREYXRhLCBpbmRleCkge1xuXG4gICAgICAgIGxldCB0ciA9IGNvcmV1aVRhYmxlRWxlbWVudHMuZ2V0VHJCeUluZGV4KHRoaXMuZ2V0SWQoKSwgaW5kZXgpO1xuXG4gICAgICAgIGlmICh0ci5sZW5ndGggPj0gMCkge1xuICAgICAgICAgICAgbGV0IHJlY29yZCA9IGNvcmV1aVRhYmxlUHJpdmF0ZS5hZGRSZWNvcmRCZWZvcmUodGhpcywgcmVjb3JkRGF0YSwgaW5kZXgpO1xuXG4gICAgICAgICAgICBpZiAocmVjb3JkKSB7XG4gICAgICAgICAgICAgICAgY29yZXVpVGFibGVFbGVtZW50cy5nZXRUckVtcHR5KHRoaXMuZ2V0SWQoKSkucmVtb3ZlKCk7XG5cbiAgICAgICAgICAgICAgICB0ci5iZWZvcmUoXG4gICAgICAgICAgICAgICAgICAgIGNvcmV1aVRhYmxlUmVuZGVyLnJlbmRlclJlY29yZCh0aGlzLCByZWNvcmQpXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9yZWNvcmRzTnVtYmVyKys7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiDQlNC+0LHQsNCy0LvQtdC90LjQtSDRgdGC0YDQvtC60Lgg0LIg0L3QsNGH0LDQu9C+INGC0LDQsdC70LjRhtGLXG4gICAgICogQHBhcmFtIHtvYmplY3R9IHJlY29yZERhdGFcbiAgICAgKi9cbiAgICBhZGRSZWNvcmRGaXJzdDogZnVuY3Rpb24gKHJlY29yZERhdGEpIHtcblxuICAgICAgICBsZXQgdGJvZHkgPSBjb3JldWlUYWJsZUVsZW1lbnRzLmdldFRhYmxlVGJvZHkodGhpcy5nZXRJZCgpKTtcblxuICAgICAgICBpZiAodGJvZHkubGVuZ3RoID49IDApIHtcbiAgICAgICAgICAgIGxldCByZWNvcmQgPSBjb3JldWlUYWJsZVByaXZhdGUuYWRkUmVjb3JkKHRoaXMsIHJlY29yZERhdGEsIDApO1xuXG4gICAgICAgICAgICBpZiAocmVjb3JkKSB7XG4gICAgICAgICAgICAgICAgY29yZXVpVGFibGVFbGVtZW50cy5nZXRUckVtcHR5KHRoaXMuZ2V0SWQoKSkucmVtb3ZlKCk7XG5cbiAgICAgICAgICAgICAgICB0Ym9keS5wcmVwZW5kKFxuICAgICAgICAgICAgICAgICAgICBjb3JldWlUYWJsZVJlbmRlci5yZW5kZXJSZWNvcmQodGhpcywgcmVjb3JkKVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgdGhpcy5fcmVjb3Jkc051bWJlcisrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICog0JTQvtCx0LDQstC70LXQvdC40LUg0YHRgtGA0L7QutC4INCyINC60L7QvdC10YYg0YLQsNCx0LvQuNGG0YtcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gcmVjb3JkRGF0YVxuICAgICAqL1xuICAgIGFkZFJlY29yZExhc3Q6IGZ1bmN0aW9uIChyZWNvcmREYXRhKSB7XG5cbiAgICAgICAgbGV0IHRib2R5ID0gY29yZXVpVGFibGVFbGVtZW50cy5nZXRUYWJsZVRib2R5KHRoaXMuZ2V0SWQoKSk7XG5cbiAgICAgICAgaWYgKHRib2R5Lmxlbmd0aCA+PSAwKSB7XG4gICAgICAgICAgICBsZXQgcmVjb3JkID0gY29yZXVpVGFibGVQcml2YXRlLmFkZFJlY29yZCh0aGlzLCByZWNvcmREYXRhKTtcblxuICAgICAgICAgICAgaWYgKHJlY29yZCkge1xuICAgICAgICAgICAgICAgIGNvcmV1aVRhYmxlRWxlbWVudHMuZ2V0VHJFbXB0eSh0aGlzLmdldElkKCkpLnJlbW92ZSgpO1xuXG4gICAgICAgICAgICAgICAgdGJvZHkuYXBwZW5kKFxuICAgICAgICAgICAgICAgICAgICBjb3JldWlUYWJsZVJlbmRlci5yZW5kZXJSZWNvcmQodGhpcywgcmVjb3JkKVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgdGhpcy5fcmVjb3Jkc051bWJlcisrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICog0J/QvtC60LDQtyDRg9C60LDQt9Cw0L3QvdGL0YUg0LfQsNC/0LjRgdC10Lkg0LIg0YLQsNCx0LvQuNGG0LVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSAgcmVjb3Jkc1xuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB0b3RhbFxuICAgICAqL1xuICAgIHNldFJlY29yZHM6IGZ1bmN0aW9uIChyZWNvcmRzLCB0b3RhbCkge1xuXG4gICAgICAgIGlmICggISBBcnJheS5pc0FycmF5KHJlY29yZHMpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9yZWNvcmRzVG90YWwgPSBjb3JldWlUYWJsZVV0aWxzLmlzTnVtZXJpYyh0b3RhbCkgPyBwYXJzZUludCh0b3RhbCkgOiByZWNvcmRzLmxlbmd0aDtcblxuICAgICAgICBjb3JldWlUYWJsZVByaXZhdGUuc2V0UmVjb3Jkcyh0aGlzLCByZWNvcmRzKTtcblxuICAgICAgICBpZiAocmVjb3Jkcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB0aGlzLl9yZWNvcmRzTnVtYmVyID0gdGhpcy5fcGFnZSA9PT0gMVxuICAgICAgICAgICAgICAgID8gMVxuICAgICAgICAgICAgICAgIDogKCh0aGlzLl9wYWdlIC0gMSkgKiB0aGlzLl9yZWNvcmRzUGVyUGFnZSkgKyAxO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHJlY29yZHNFbGVtZW50cyA9IGNvcmV1aVRhYmxlUmVuZGVyLnJlbmRlclJlY29yZHModGhpcywgdGhpcy5fcmVjb3Jkcyk7XG4gICAgICAgIGxldCB0YWJsZUJvZHkgICAgICAgPSBjb3JldWlUYWJsZUVsZW1lbnRzLmdldFRhYmxlVGJvZHkodGhpcy5nZXRJZCgpKTtcblxuICAgICAgICB0YWJsZUJvZHkuaHRtbCgnJyk7XG5cbiAgICAgICAgJC5lYWNoKHJlY29yZHNFbGVtZW50cywgZnVuY3Rpb24gKGtleSwgcmVjb3JkRWxlbWVudCkge1xuICAgICAgICAgICAgdGFibGVCb2R5LmFwcGVuZChyZWNvcmRFbGVtZW50KTtcbiAgICAgICAgfSk7XG5cblxuICAgICAgICBjb3JldWlUYWJsZVByaXZhdGUuX3RyaWdnZXIodGhpcywgJ3JlY29yZHNfc2hvdycsIFsgdGhpcyBdKTtcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0LrQvtC70LjRh9C10YHRgtCy0LAg0YHRgtGA0L7QulxuICAgICAqIEByZXR1cm4ge251bWJlcn1cbiAgICAgKi9cbiAgICBnZXRSZWNvcmRzQ291bnQ6IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICBsZXQgY291bnQgPSAwO1xuXG4gICAgICAgIGlmICh0aGlzLl9pc1JlY29yZHNSZXF1ZXN0KSB7XG4gICAgICAgICAgICBjb3VudCA9IHRoaXMuX3JlY29yZHNUb3RhbDtcblxuICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICB0aGlzLl9yZWNvcmRzLm1hcChmdW5jdGlvbiAocmVjb3JkKSB7XG4gICAgICAgICAgICAgICAgaWYgKHJlY29yZC5zaG93KSB7XG4gICAgICAgICAgICAgICAgICAgIGNvdW50Kys7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY291bnQ7XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICog0KDQsNGB0LrRgNGL0YLQuNC1IC8g0YHQutGA0YvRgtC40LUg0LTQvtC/0L7Qu9C90LjRgtC10LvRjNC90YvRhSDQtNCw0L3QvdGL0YUg0YHRgtGA0L7QutC4XG4gICAgICogQHBhcmFtIHtudW1iZXJ9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWNvcmRJbmRleFxuICAgICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR8alF1ZXJ5fHN0cmluZ3xBcnJheXxmdW5jdGlvbn0gY29udGVudFxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNSZWJ1aWxkIC0gdHJ1ZSBkZWZhdWx0XG4gICAgICovXG4gICAgZXhwYW5kUmVjb3JkQ29udGVudDogZnVuY3Rpb24gKHJlY29yZEluZGV4LCBjb250ZW50LCBpc1JlYnVpbGQpIHtcblxuICAgICAgICBsZXQgcmVjb3JkRWxlbWVudCAgPSBjb3JldWlUYWJsZUVsZW1lbnRzLmdldFRyQnlJbmRleCh0aGlzLmdldElkKCksIHJlY29yZEluZGV4KTtcbiAgICAgICAgbGV0IHJlY29yZEV4cGFuZGVkID0gY29yZXVpVGFibGVFbGVtZW50cy5nZXRFeHBhbmRSb3cocmVjb3JkRWxlbWVudCk7XG5cbiAgICAgICAgaWYgKHJlY29yZEVsZW1lbnQuaGFzQ2xhc3MoJ3JlY29yZC1leHBhbmRlZCcpKSB7XG5cbiAgICAgICAgICAgIGlmIChyZWNvcmRFeHBhbmRlZCkge1xuICAgICAgICAgICAgICAgIGlmIChpc1JlYnVpbGQgPT09IHVuZGVmaW5lZCB8fCBpc1JlYnVpbGQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29yZXVpVGFibGVFbGVtZW50cy5yZW1vdmVFeHBhbmRSb3cocmVjb3JkRXhwYW5kZWQpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvcmV1aVRhYmxlRWxlbWVudHMuaGlkZUV4cGFuZFJvdyhyZWNvcmRFeHBhbmRlZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZWNvcmRFbGVtZW50LnJlbW92ZUNsYXNzKCdyZWNvcmQtZXhwYW5kZWQnKTtcbiAgICAgICAgICAgIGNvcmV1aVRhYmxlUHJpdmF0ZS5fdHJpZ2dlcih0aGlzLCAncmVjb3JkX2V4cGFuZF9oaWRlJywgW3JlY29yZEluZGV4XSk7XG5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChyZWNvcmRFeHBhbmRlZCkge1xuICAgICAgICAgICAgICAgIGNvcmV1aVRhYmxlRWxlbWVudHMuc2hvd0V4cGFuZFJvdyhyZWNvcmRFeHBhbmRlZCk7XG4gICAgICAgICAgICAgICAgcmVjb3JkRWxlbWVudC5hZGRDbGFzcygncmVjb3JkLWV4cGFuZGVkJyk7XG4gICAgICAgICAgICAgICAgY29yZXVpVGFibGVQcml2YXRlLl90cmlnZ2VyKHRoaXMsICdyZWNvcmRfZXhwYW5kX3Nob3cnLCBbcmVjb3JkSW5kZXhdKTtcblxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBsZXQgcmVjb3JkSW5kZXggPSByZWNvcmRFbGVtZW50LmRhdGEoJ3JlY29yZC1pbmRleCcpO1xuXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjb250ZW50ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBjYWxsYmFja1Jlc3VsdCA9IGNvbnRlbnQoKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoY2FsbGJhY2tSZXN1bHQgaW5zdGFuY2VvZiBQcm9taXNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdGhhdCA9IHRoaXM7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrUmVzdWx0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3JldWlUYWJsZUVsZW1lbnRzLmFkZEV4cGFuZFJvdyh0aGF0LCByZWNvcmRFbGVtZW50LCByZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3JldWlUYWJsZVByaXZhdGUuX3RyaWdnZXIodGhhdCwgJ3JlY29yZF9leHBhbmRfc2hvdycsIFtyZWNvcmRJbmRleF0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3JldWlUYWJsZUVsZW1lbnRzLmFkZEV4cGFuZFJvdyh0aGF0LCByZWNvcmRFbGVtZW50LCAnJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvcmV1aVRhYmxlUHJpdmF0ZS5fdHJpZ2dlcih0aGF0LCAncmVjb3JkX2V4cGFuZF9zaG93JywgW3JlY29yZEluZGV4XSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNle1xuICAgICAgICAgICAgICAgICAgICAgICAgY29yZXVpVGFibGVFbGVtZW50cy5hZGRFeHBhbmRSb3codGhpcywgcmVjb3JkRWxlbWVudCwgY2FsbGJhY2tSZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29yZXVpVGFibGVQcml2YXRlLl90cmlnZ2VyKHRoaXMsICdyZWNvcmRfZXhwYW5kX3Nob3cnLCBbcmVjb3JkSW5kZXhdKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY29yZXVpVGFibGVFbGVtZW50cy5hZGRFeHBhbmRSb3codGhpcywgcmVjb3JkRWxlbWVudCwgY29udGVudCk7XG4gICAgICAgICAgICAgICAgICAgIGNvcmV1aVRhYmxlUHJpdmF0ZS5fdHJpZ2dlcih0aGlzLCAncmVjb3JkX2V4cGFuZF9zaG93JywgW3JlY29yZEluZGV4XSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICog0KDQsNGB0LrRgNGL0YLQuNC1IC8g0YHQutGA0YvRgtC40LUg0LTQvtC/0L7Qu9C90LjRgtC10LvRjNC90YvRhSDQtNCw0L3QvdGL0YUg0YHRgtGA0L7QutC4XG4gICAgICogQHBhcmFtIHtudW1iZXJ9ICByZWNvcmRJbmRleFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSAgdXJsXG4gICAgICogQHBhcmFtIHtib29sZWFufSBpc1JlYnVpbGRcbiAgICAgKi9cbiAgICBleHBhbmRSZWNvcmRVcmw6IGZ1bmN0aW9uIChyZWNvcmRJbmRleCwgdXJsLCBpc1JlYnVpbGQpIHtcblxuICAgICAgICBsZXQgdGhhdCA9IHRoaXM7XG5cbiAgICAgICAgdGhpcy5leHBhbmRSZWNvcmRDb250ZW50KHJlY29yZEluZGV4LCBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgIHRoYXQubG9jaygpO1xuXG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuXG4gICAgICAgICAgICAgICAgJC5hamF4KHtcbiAgICAgICAgICAgICAgICAgICAgbWV0aG9kIDogJ2dldCcsXG4gICAgICAgICAgICAgICAgICAgIHVybCAgICA6IHVybCxcbiAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24gKHJlc3BvbnNlLCB0ZXh0U3RhdHVzLCB4aHIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCByZXN1bHQgPSByZXNwb25zZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiByZXNwb25zZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoU3RyaW5nKHhoci5nZXRSZXNwb25zZUhlYWRlcignQ29udGVudC1UeXBlJykpLmluZGV4T2YoJ2FwcGxpY2F0aW9uL2pzb24nKSA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gSlNPTi5wYXJzZShyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24oeGhyLCB0ZXh0U3RhdHVzLCBlcnJvclRocm93bikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KHhociwgdGV4dFN0YXR1cywgZXJyb3JUaHJvd24pO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZTogZnVuY3Rpb24oeGhyLCB0ZXh0U3RhdHVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGF0LnVubG9jaygpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgfSwgaXNSZWJ1aWxkKTtcbiAgICB9XG59XG5cblxuZXhwb3J0IGRlZmF1bHQgY29yZXVpVGFibGVJbnN0YW5jZTsiLCJcclxuaW1wb3J0IGNvcmV1aVRhYmxlSW5zdGFuY2UgZnJvbSAnLi9jb3JldWkudGFibGUuaW5zdGFuY2UnO1xyXG5pbXBvcnQgY29yZXVpVGFibGVVdGlscyAgICBmcm9tIFwiLi9jb3JldWkudGFibGUudXRpbHNcIjtcclxuXHJcbmxldCBjb3JldWlUYWJsZSA9IHtcclxuXHJcbiAgICBjb2x1bW5zOiB7fSxcclxuICAgIGNvbnRyb2xzOiB7fSxcclxuICAgIGZpbHRlcnM6IHt9LFxyXG4gICAgc2VhcmNoOiB7fSxcclxuICAgIGxhbmc6IHt9LFxyXG5cclxuICAgIF9pbnN0YW5jZXM6IHt9LFxyXG4gICAgX3NldHRpbmdzOiB7XHJcbiAgICAgICAgbGFuZzogJ2VuJyxcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gb3B0aW9uc1xyXG4gICAgICogQHJldHVybnMge29iamVjdH1cclxuICAgICAqL1xyXG4gICAgY3JlYXRlOiBmdW5jdGlvbiAob3B0aW9ucykge1xyXG5cclxuICAgICAgICBpZiAoICEgb3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnbGFuZycpIHx8IHR5cGVvZiBvcHRpb25zLmxhbmcgIT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgIG9wdGlvbnMubGFuZyA9IHRoaXMuZ2V0U2V0dGluZygnbGFuZycpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IGxhbmdJdGVtcyAgICAgPSB0aGlzLmxhbmcuaGFzT3duUHJvcGVydHkob3B0aW9ucy5sYW5nKSA/IHRoaXMubGFuZ1tvcHRpb25zLmxhbmddIDoge307XHJcbiAgICAgICAgb3B0aW9ucy5sYW5nSXRlbXMgPSBvcHRpb25zLmhhc093blByb3BlcnR5KCdsYW5nSXRlbXMnKSAmJiBjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KG9wdGlvbnMubGFuZ0l0ZW1zKVxyXG4gICAgICAgICAgICA/ICQuZXh0ZW5kKHRydWUsIHt9LCBsYW5nSXRlbXMsIG9wdGlvbnMubGFuZ0l0ZW1zKVxyXG4gICAgICAgICAgICA6IGxhbmdJdGVtcztcclxuXHJcblxyXG4gICAgICAgIGxldCBpbnN0YW5jZSA9ICQuZXh0ZW5kKHRydWUsIHt9LCBjb3JldWlUYWJsZUluc3RhbmNlKTtcclxuICAgICAgICBpbnN0YW5jZS5faW5pdCh0aGlzLCBvcHRpb25zIGluc3RhbmNlb2YgT2JqZWN0ID8gb3B0aW9ucyA6IHt9KTtcclxuXHJcbiAgICAgICAgbGV0IHRhYmxlSWQgPSBpbnN0YW5jZS5nZXRJZCgpO1xyXG4gICAgICAgIHRoaXMuX2luc3RhbmNlc1t0YWJsZUlkXSA9IGluc3RhbmNlO1xyXG5cclxuICAgICAgICByZXR1cm4gaW5zdGFuY2U7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZFxyXG4gICAgICogQHJldHVybnMge29iamVjdHxudWxsfVxyXG4gICAgICovXHJcbiAgICBnZXQ6IGZ1bmN0aW9uIChpZCkge1xyXG5cclxuICAgICAgICBpZiAoICEgdGhpcy5faW5zdGFuY2VzLmhhc093blByb3BlcnR5KGlkKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICggISAkKCcjY29yZXVpLXRhYmxlLScgKyBpZClbMF0pIHtcclxuICAgICAgICAgICAgZGVsZXRlIHRoaXMuX2luc3RhbmNlc1tpZF07XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2luc3RhbmNlc1tpZF07XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCj0YHRgtCw0L3QvtCy0LrQsCDQvdCw0YHRgtGA0L7QtdC6XHJcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gc2V0dGluZ3NcclxuICAgICAqL1xyXG4gICAgc2V0U2V0dGluZ3M6IGZ1bmN0aW9uKHNldHRpbmdzKSB7XHJcblxyXG4gICAgICAgIHRoaXMuX3NldHRpbmdzID0gJC5leHRlbmQodHJ1ZSwge30sIHRoaXMuX3NldHRpbmdzLCBzZXR0aW5ncyk7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSDQt9C90LDRh9C10L3QuNGPINC90LDRgdGC0YDQvtC50LrQuFxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcclxuICAgICAqL1xyXG4gICAgZ2V0U2V0dGluZzogZnVuY3Rpb24obmFtZSkge1xyXG5cclxuICAgICAgICBsZXQgdmFsdWUgPSBudWxsO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5fc2V0dGluZ3MuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcclxuICAgICAgICAgICAgdmFsdWUgPSB0aGlzLl9zZXR0aW5nc1tuYW1lXTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY29yZXVpVGFibGU7IiwiXHJcbmxldCBsYW5nRW4gPSB7XHJcbiAgICBcImVtcHR5UmVjb3Jkc1wiOiBcIk5vIHJlY29yZHNcIixcclxuICAgIFwibG9hZGluZ1wiOiBcIkxvYWRpbmcuLi5cIixcclxuICAgIFwidG90YWxcIjogXCJUb3RhbFwiLFxyXG4gICAgXCJhbGxcIjogXCJBbGxcIixcclxuICAgIFwiY29tcGxldGVcIjogXCJDb21wbGV0ZVwiLFxyXG4gICAgXCJzZWFyY2hcIjogXCJTZWFyY2hcIixcclxuICAgIFwic2VhcmNoQWN0aW9uXCI6IFwiU2VhcmNoXCIsXHJcbiAgICBcImNsZWFyXCI6IFwiQ2xlYXJcIixcclxuICAgIFwibW9udGhOYW1lc1wiOiBbJ0phbnVhcnknLCdGZWJydWFyeScsJ01hcmNoJywnQXByaWwnLCdNYXknLCdKdW5lJywnSnVseScsJ0F1Z3VzdCcsJ1NlcHRlbWJlcicsJ09jdG9iZXInLCdOb3ZlbWJlcicsJ0RlY2VtYmVyJ10sXHJcbiAgICBcIm1vbnRoTmFtZXNTaG9ydFwiOiBbJ0phbicsJ0ZlYicsJ01hcicsJ0FwcicsJ01heScsJ0p1bicsJ0p1bCcsJ0F1ZycsJ1NlcCcsJ09jdCcsJ05vdicsJ0RlYyddLFxyXG4gICAgXCJkYXlOYW1lc1wiOiBbJ1N1bmRheScsJ01vbmRheScsJ1R1ZXNkYXknLCdXZWRuZXNkYXknLCdUaHVyc2RheScsJ0ZyaWRheScsJ1NhdHVyZGF5J10sXHJcbiAgICBcImRheU5hbWVzTWluXCI6IFsnU3VuJywnTW9uJywnVHVlJywnV2VkJywnVGh1JywnRnJpJywnU2F0J10sXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGxhbmdFbjsiLCJcclxubGV0IGxhbmdSdSA9IHtcclxuICAgIFwiZW1wdHlSZWNvcmRzXCI6IFwi0J3QtdGCINC30LDQv9C40YHQtdC5XCIsXHJcbiAgICBcImxvYWRpbmdcIjogXCLQl9Cw0LPRgNGD0LfQutCwLi4uXCIsXHJcbiAgICBcInRvdGFsXCI6IFwi0JLRgdC10LPQvlwiLFxyXG4gICAgXCJhbGxcIjogXCLQktGB0LVcIixcclxuICAgIFwiY29tcGxldGVcIjogXCLQn9GA0LjQvNC10L3QuNGC0YxcIixcclxuICAgIFwic2VhcmNoXCI6IFwi0J/QvtC40YHQulwiLFxyXG4gICAgXCJzZWFyY2hBY3Rpb25cIjogXCLQmNGB0LrQsNGC0YxcIixcclxuICAgIFwiY2xlYXJcIjogXCLQntGH0LjRgdGC0LjRgtGMXCIsXHJcbiAgICBcIm1vbnRoTmFtZXNcIjogWyfQr9C90LLQsNGA0YwnLCfQpNC10LLRgNCw0LvRjCcsJ9Cc0LDRgNGCJywn0JDQv9GA0LXQu9GMJywn0JzQsNC5Jywn0JjRjtC90YwnLCfQmNGO0LvRjCcsJ9CQ0LLQs9GD0YHRgicsJ9Ch0LXQvdGC0Y/QsdGA0YwnLCfQntC60YLRj9Cx0YDRjCcsJ9Cd0L7Rj9Cx0YDRjCcsJ9CU0LXQutCw0LHRgNGMJ10sXHJcbiAgICBcIm1vbnRoTmFtZXNTaG9ydFwiOiBbJ9Cv0L3QsicsJ9Ck0LXQsicsJ9Cc0LDRgCcsJ9CQ0L/RgCcsJ9Cc0LDQuScsJ9CY0Y7QvScsJ9CY0Y7QuycsJ9CQ0LLQsycsJ9Ch0LXQvScsJ9Ce0LrRgicsJ9Cd0L7RjycsJ9CU0LXQuiddLFxyXG4gICAgXCJkYXlOYW1lc1wiOiBbJ9Cy0L7RgdC60YDQtdGB0LXQvdGM0LUnLCfQv9C+0L3QtdC00LXQu9GM0L3QuNC6Jywn0LLRgtC+0YDQvdC40LonLCfRgdGA0LXQtNCwJywn0YfQtdGC0LLQtdGA0LMnLCfQv9GP0YLQvdC40YbQsCcsJ9GB0YPQsdCx0L7RgtCwJ10sXHJcbiAgICBcImRheU5hbWVzTWluXCI6IFsn0JLRgScsJ9Cf0L0nLCfQktGCJywn0KHRgCcsJ9Cn0YInLCfQn9GCJywn0KHQsSddXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGxhbmdSdTsiLCJpbXBvcnQgY29yZXVpVGFibGVVdGlscyBmcm9tIFwiLi4vY29yZXVpLnRhYmxlLnV0aWxzXCI7XHJcbmltcG9ydCBjb3JldWlUYWJsZUVsZW1lbnRzIGZyb20gXCIuLi9jb3JldWkudGFibGUuZWxlbWVudHNcIjtcclxuXHJcblxyXG5jbGFzcyBDb250cm9sIHtcclxuXHJcbiAgICBfaWQgICAgICA9IG51bGw7XHJcbiAgICBfdGFibGUgICA9IG51bGw7XHJcbiAgICBfb3B0aW9ucyA9IHtcclxuICAgICAgICB0eXBlOiAnJyxcclxuICAgICAgICBpZDogJydcclxuICAgIH07XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y9cclxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSB0YWJsZVxyXG4gICAgICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnNcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IodGFibGUsIG9wdGlvbnMpIHtcclxuXHJcbiAgICAgICAgdGhpcy5fdGFibGUgICA9IHRhYmxlO1xyXG4gICAgICAgIHRoaXMuX29wdGlvbnMgPSAkLmV4dGVuZCh0cnVlLCB0aGlzLl9vcHRpb25zLCBvcHRpb25zKTtcclxuICAgICAgICB0aGlzLl9pZCAgICAgID0gdGhpcy5fb3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnaWQnKSAmJiB0eXBlb2YgdGhpcy5fb3B0aW9ucy5pZCA9PT0gJ3N0cmluZycgJiYgdGhpcy5fb3B0aW9ucy5pZFxyXG4gICAgICAgICAgICA/IHRoaXMuX29wdGlvbnMuaWRcclxuICAgICAgICAgICAgOiBjb3JldWlUYWJsZVV0aWxzLmhhc2hDb2RlKCk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1IElEINGN0LvQtdC80LXQvdGC0LAg0YPQv9GA0LDQstC70LXQvdC40Y9cclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIGdldElkKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9pZDtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0L/QsNGA0LDQvNC10YLRgNC+0LJcclxuICAgICAqIEByZXR1cm5zIHtvYmplY3R9XHJcbiAgICAgKi9cclxuICAgIGdldE9wdGlvbnMoKSB7XHJcbiAgICAgICAgcmV0dXJuICQuZXh0ZW5kKHRydWUsIHt9LCB0aGlzLl9vcHRpb25zKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQpNC+0YDQvNC40YDQvtCy0LDQvdC40LUg0LrQvtC90YLQtdC90YLQsCDQtNC70Y8g0YDQsNC30LzQtdGJ0LXQvdC40Y8g0L3QsCDRgdGC0YDQsNC90LjRhtC1XHJcbiAgICAgKiBAcmV0dXJucyB7Kn1cclxuICAgICAqL1xyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIHJldHVybiAnJztcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgQ29udHJvbDsiLCJcclxuaW1wb3J0IGNvcmV1aVRhYmxlVHBsICAgZnJvbSAnLi4vY29yZXVpLnRhYmxlLnRlbXBsYXRlcyc7XHJcbmltcG9ydCBjb3JldWlUYWJsZVV0aWxzIGZyb20gJy4uL2NvcmV1aS50YWJsZS51dGlscyc7XHJcbmltcG9ydCBDb250cm9sICAgICAgICAgIGZyb20gXCIuLi9hYnN0cmFjdC9Db250cm9sXCI7XHJcblxyXG5jbGFzcyBDb250cm9sTGluayBleHRlbmRzIENvbnRyb2wge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y9cclxuICAgICAqIEBwYXJhbSB7Y29yZXVpVGFibGVJbnN0YW5jZX0gdGFibGVcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSAgICAgICAgICAgICAgb3B0aW9uc1xyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3Rvcih0YWJsZSwgb3B0aW9ucykge1xyXG5cclxuICAgICAgICBvcHRpb25zID0gJC5leHRlbmQodHJ1ZSwge1xyXG4gICAgICAgICAgICBpZDogbnVsbCxcclxuICAgICAgICAgICAgdHlwZTogJ2xpbmsnLFxyXG4gICAgICAgICAgICB1cmw6IG51bGwsXHJcbiAgICAgICAgICAgIGNvbnRlbnQ6IG51bGwsXHJcbiAgICAgICAgICAgIG9uQ2xpY2s6IG51bGwsXHJcbiAgICAgICAgICAgIGF0dHI6IG51bGxcclxuICAgICAgICB9LCBvcHRpb25zKTtcclxuXHJcbiAgICAgICAgc3VwZXIodGFibGUsIG9wdGlvbnMpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCk0L7RgNC80LjRgNC+0LLQsNC90LjQtSDQutC+0L3RgtC10L3RgtCwINC00LvRjyDRgNCw0LfQvNC10YnQtdC90LjRjyDQvdCwINGB0YLRgNCw0L3QuNGG0LVcclxuICAgICAqIEByZXR1cm5zIHtqUXVlcnl9XHJcbiAgICAgKi9cclxuICAgIHJlbmRlcigpIHtcclxuXHJcbiAgICAgICAgbGV0IHRoYXQgICAgICAgPSB0aGlzO1xyXG4gICAgICAgIGxldCBhdHRyaWJ1dGVzID0gW107XHJcblxyXG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5fb3B0aW9ucy5hdHRyID09PSAnb2JqZWN0Jykge1xyXG4gICAgICAgICAgICAkLmVhY2godGhpcy5fb3B0aW9ucy5hdHRyLCBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIGlmIChbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiB2YWx1ZSkgPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXMucHVzaChuYW1lICsgJz1cIicgKyB2YWx1ZSArICdcIicpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBsaW5rID0gJChjb3JldWlUYWJsZVV0aWxzLnJlbmRlcihjb3JldWlUYWJsZVRwbFsnY29udHJvbHMvbGluay5odG1sJ10sIHtcclxuICAgICAgICAgICAgdXJsOiB0aGlzLl9vcHRpb25zLnVybCxcclxuICAgICAgICAgICAgY29udGVudDogdGhpcy5fb3B0aW9ucy5jb250ZW50LFxyXG4gICAgICAgICAgICBhdHRyOiBhdHRyaWJ1dGVzLmxlbmd0aCA+IDAgPyAoJyAnICsgYXR0cmlidXRlcy5qb2luKCcgJykpIDogJycsXHJcbiAgICAgICAgfSkpO1xyXG5cclxuXHJcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLl9vcHRpb25zLm9uQ2xpY2sgPT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIHRoaXMuX29wdGlvbnMub25DbGljayA9PT0gJ3N0cmluZycpIHtcclxuXHJcbiAgICAgICAgICAgIGxpbmsuY2xpY2soZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHRoYXQuX29wdGlvbnMub25DbGljayA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGF0Ll9vcHRpb25zLm9uQ2xpY2soZXZlbnQsIHRoYXQuX3RhYmxlKTtcclxuXHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiB0aGF0Ll9vcHRpb25zLm9uQ2xpY2sgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGZ1bmMgPSBuZXcgRnVuY3Rpb24oJ2V2ZW50JywgJ3RhYmxlJywgJ2NvbnRyb2wnLCB0aGF0Ll9vcHRpb25zLm9uQ2xpY2spO1xyXG4gICAgICAgICAgICAgICAgICAgIGZ1bmMoZXZlbnQsIHRoYXQuX3RhYmxlLCB0aGF0KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gbGluaztcclxuICAgIH1cclxufVxyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IENvbnRyb2xMaW5rOyIsIlxyXG5pbXBvcnQgY29yZXVpVGFibGVUcGwgICBmcm9tICcuLi9jb3JldWkudGFibGUudGVtcGxhdGVzJztcclxuaW1wb3J0IGNvcmV1aVRhYmxlVXRpbHMgZnJvbSAnLi4vY29yZXVpLnRhYmxlLnV0aWxzJztcclxuaW1wb3J0IENvbnRyb2wgICAgICAgICAgZnJvbSBcIi4uL2Fic3RyYWN0L0NvbnRyb2xcIjtcclxuXHJcbmNsYXNzIENvbnRyb2xCdXR0b24gZXh0ZW5kcyBDb250cm9sIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPXHJcbiAgICAgKiBAcGFyYW0ge2NvcmV1aVRhYmxlSW5zdGFuY2V9IHRhYmxlXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gICAgICAgICAgICAgIG9wdGlvbnNcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IodGFibGUsIG9wdGlvbnMpIHtcclxuXHJcbiAgICAgICAgb3B0aW9ucyA9ICQuZXh0ZW5kKHRydWUsIHtcclxuICAgICAgICAgICAgaWQ6IG51bGwsXHJcbiAgICAgICAgICAgIHR5cGU6ICdidXR0b24nLFxyXG4gICAgICAgICAgICBjb250ZW50OiBudWxsLFxyXG4gICAgICAgICAgICBvbkNsaWNrOiBudWxsLFxyXG4gICAgICAgICAgICBhdHRyOiB7XHJcbiAgICAgICAgICAgICAgICBjbGFzczogJ2J0biBidG4tc2Vjb25kYXJ5J1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSwgb3B0aW9ucyk7XHJcblxyXG4gICAgICAgIHN1cGVyKHRhYmxlLCBvcHRpb25zKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQpNC+0YDQvNC40YDQvtCy0LDQvdC40LUg0LrQvtC90YLQtdC90YLQsCDQtNC70Y8g0YDQsNC30LzQtdGJ0LXQvdC40Y8g0L3QsCDRgdGC0YDQsNC90LjRhtC1XHJcbiAgICAgKiBAcmV0dXJucyB7alF1ZXJ5fVxyXG4gICAgICovXHJcbiAgICByZW5kZXIoKSB7XHJcblxyXG4gICAgICAgIGxldCBhdHRyaWJ1dGVzID0gW107XHJcblxyXG4gICAgICAgIGlmIChjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KHRoaXMuX29wdGlvbnMuYXR0cikpIHtcclxuICAgICAgICAgICAgJC5lYWNoKHRoaXMuX29wdGlvbnMuYXR0ciwgZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2YgdmFsdWUpID49IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzLnB1c2gobmFtZSArICc9XCInICsgdmFsdWUgKyAnXCInKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgYnRuID0gJChjb3JldWlUYWJsZVV0aWxzLnJlbmRlcihjb3JldWlUYWJsZVRwbFsnY29udHJvbHMvYnV0dG9uLmh0bWwnXSwge1xyXG4gICAgICAgICAgICBjb250ZW50OiB0aGlzLl9vcHRpb25zLmNvbnRlbnQsXHJcbiAgICAgICAgICAgIGF0dHI6IGF0dHJpYnV0ZXMubGVuZ3RoID4gMCA/ICgnICcgKyBhdHRyaWJ1dGVzLmpvaW4oJyAnKSkgOiAnJyxcclxuICAgICAgICB9KSk7XHJcblxyXG5cclxuICAgICAgICBpZiAodHlwZW9mIHRoaXMuX29wdGlvbnMub25DbGljayA9PT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2YgdGhpcy5fb3B0aW9ucy5vbkNsaWNrID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICBsZXQgdGhhdCA9IHRoaXM7XHJcblxyXG4gICAgICAgICAgICBidG4uY2xpY2soZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHRoYXQuX29wdGlvbnMub25DbGljayA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoYXQuX29wdGlvbnMub25DbGljayhldmVudCwgdGhhdC5fdGFibGUsIHRoYXQpO1xyXG5cclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHRoYXQuX29wdGlvbnMub25DbGljayA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgZnVuYyA9IG5ldyBGdW5jdGlvbignZXZlbnQnLCAndGFibGUnLCAnY29udHJvbCcsIHRoYXQuX29wdGlvbnMub25DbGljayk7XHJcbiAgICAgICAgICAgICAgICAgICAgZnVuYyhldmVudCwgdGhhdC5fdGFibGUsIHRoYXQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBidG47XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IENvbnRyb2xCdXR0b247IiwiXHJcbmltcG9ydCBjb3JldWlUYWJsZVRwbCAgIGZyb20gJy4uL2NvcmV1aS50YWJsZS50ZW1wbGF0ZXMnO1xyXG5pbXBvcnQgY29yZXVpVGFibGVVdGlscyBmcm9tICcuLi9jb3JldWkudGFibGUudXRpbHMnO1xyXG5pbXBvcnQgQ29yZXVpVGFibGVVdGlscyBmcm9tIFwiLi4vY29yZXVpLnRhYmxlLnV0aWxzXCI7XHJcbmltcG9ydCBDb250cm9sICAgICAgICAgIGZyb20gXCIuLi9hYnN0cmFjdC9Db250cm9sXCI7XHJcblxyXG5jbGFzcyBDb250cm9sRHJvcGRvd24gZXh0ZW5kcyBDb250cm9sIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPXHJcbiAgICAgKiBAcGFyYW0ge2NvcmV1aVRhYmxlSW5zdGFuY2V9IHRhYmxlXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gICAgICAgICAgICAgIG9wdGlvbnNcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IodGFibGUsIG9wdGlvbnMpIHtcclxuXHJcbiAgICAgICAgb3B0aW9ucyA9ICQuZXh0ZW5kKHRydWUsIHtcclxuICAgICAgICAgICAgaWQ6IG51bGwsXHJcbiAgICAgICAgICAgIHR5cGU6ICdkcm9wZG93bicsXHJcbiAgICAgICAgICAgIGNvbnRlbnQ6IG51bGwsXHJcbiAgICAgICAgICAgIGl0ZW1zOiBudWxsLFxyXG4gICAgICAgICAgICBhdHRyOiB7XHJcbiAgICAgICAgICAgICAgICBjbGFzczogJ2J0biBidG4tcHJpbWFyeScsXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LCBvcHRpb25zKTtcclxuXHJcbiAgICAgICAgc3VwZXIodGFibGUsIG9wdGlvbnMpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCk0L7RgNC80LjRgNC+0LLQsNC90LjQtSDQutC+0L3RgtC10L3RgtCwINC00LvRjyDRgNCw0LfQvNC10YnQtdC90LjRjyDQvdCwINGB0YLRgNCw0L3QuNGG0LVcclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIHJlbmRlcigpIHtcclxuXHJcbiAgICAgICAgbGV0IG9wdGlvbnMgICAgPSB0aGlzLmdldE9wdGlvbnMoKTtcclxuICAgICAgICBsZXQgdGFibGUgICAgICA9IHRoaXMuX3RhYmxlO1xyXG4gICAgICAgIGxldCB0aGF0ICAgICAgID0gdGhpcztcclxuICAgICAgICBsZXQgaXRlbXMgICAgICA9IFtdO1xyXG4gICAgICAgIGxldCBhdHRyaWJ1dGVzID0gW107XHJcblxyXG5cclxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShvcHRpb25zLml0ZW1zKSkge1xyXG4gICAgICAgICAgICBvcHRpb25zLml0ZW1zLm1hcChmdW5jdGlvbiAoaXRlbSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKENvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QoaXRlbSkgJiYgdHlwZW9mIGl0ZW0udHlwZSA9PT0gJ3N0cmluZycpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0udHlwZSA9PT0gJ2xpbmsnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpdGVtLmhhc093blByb3BlcnR5KCdsaW5rJykgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0uaGFzT3duUHJvcGVydHkoJ2NvbnRlbnQnKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGl0ZW0udXJsID09PSAnc3RyaW5nJyAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGl0ZW0uY29udGVudCA9PT0gJ3N0cmluZydcclxuICAgICAgICAgICAgICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgbGluayA9IGNvcmV1aVRhYmxlVXRpbHMucmVuZGVyKGNvcmV1aVRhYmxlVHBsWydjb250cm9scy9kcm9wZG93bi9saW5rLmh0bWwnXSwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybDogaXRlbS51cmwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudDogaXRlbS5jb250ZW50LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXMucHVzaChsaW5rKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGl0ZW0udHlwZSA9PT0gJ2J1dHRvbicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0uaGFzT3duUHJvcGVydHkoJ2NvbnRlbnQnKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5oYXNPd25Qcm9wZXJ0eSgnb25DbGljaycpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlb2YgaXRlbS5jb250ZW50ID09PSAnc3RyaW5nJyAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgWydzdHJpbmcnLCAnZnVuY3Rpb24nXS5pbmRleE9mKHR5cGVvZiBpdGVtLm9uQ2xpY2spID49IDBcclxuICAgICAgICAgICAgICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgYnV0dG9uID0gJChjb3JldWlUYWJsZVV0aWxzLnJlbmRlcihjb3JldWlUYWJsZVRwbFsnY29udHJvbHMvZHJvcGRvd24vYnV0dG9uLmh0bWwnXSwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybDogaXRlbS51cmwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudDogaXRlbS5jb250ZW50LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbi5jbGljayhmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGl0ZW0ub25DbGljayA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtLm9uQ2xpY2soZXZlbnQsIHRhYmxlLCB0aGF0KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgaXRlbS5vbkNsaWNrID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgZnVuYyA9IG5ldyBGdW5jdGlvbignZXZlbnQnLCAndGFibGUnLCAnY29udHJvbCcsIGl0ZW0ub25DbGljayk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmMoZXZlbnQsIHRhYmxlLCB0aGF0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtcy5wdXNoKGJ1dHRvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaXRlbS50eXBlID09PSAnZGl2aWRlcicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXMucHVzaChjb3JldWlUYWJsZVRwbFsnY29udHJvbHMvZHJvcGRvd24vZGl2aWRlci5odG1sJ10pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoY29yZXVpVGFibGVVdGlscy5pc09iamVjdChvcHRpb25zLmF0dHIpKSB7XHJcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmF0dHIuaGFzT3duUHJvcGVydHkoJ2NsYXNzJykgJiZcclxuICAgICAgICAgICAgICAgIFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIG9wdGlvbnMuYXR0ci5jbGFzcykgPj0gMFxyXG4gICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgIG9wdGlvbnMuYXR0ci5jbGFzcyArPSAnIGRyb3Bkb3duLXRvZ2dsZSc7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmF0dHIuaGFzT3duUHJvcGVydHkoJ3R5cGUnKSkge1xyXG4gICAgICAgICAgICAgICAgZGVsZXRlIG9wdGlvbnMuYXR0ci50eXBlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmF0dHIuaGFzT3duUHJvcGVydHkoJ2lkJykpIHtcclxuICAgICAgICAgICAgICAgIGRlbGV0ZSBvcHRpb25zLmF0dHIuaWQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuYXR0ci5oYXNPd25Qcm9wZXJ0eSgnZGF0YS1icy10b2dnbGUnKSkge1xyXG4gICAgICAgICAgICAgICAgZGVsZXRlIG9wdGlvbnMuYXR0clsnZGF0YS1icy10b2dnbGUnXTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgJC5lYWNoKG9wdGlvbnMuYXR0ciwgZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzLnB1c2gobmFtZSArICc9XCInICsgdmFsdWUgKyAnXCInKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgZHJvcGRvd24gPSAkKGNvcmV1aVRhYmxlVXRpbHMucmVuZGVyKGNvcmV1aVRhYmxlVHBsWydjb250cm9scy9kcm9wZG93bi5odG1sJ10sIHtcclxuICAgICAgICAgICAgY29udGVudDogb3B0aW9ucy5jb250ZW50LFxyXG4gICAgICAgICAgICBwb3NpdGlvbjogb3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgncG9zaXRpb24nKSAmJiB0eXBlb2Ygb3B0aW9ucy5wb3NpdGlvbiA9PT0gJ3N0cmluZycgPyBvcHRpb25zLnBvc2l0aW9uIDogJ2VuZCcsXHJcbiAgICAgICAgICAgIGF0dHI6IGF0dHJpYnV0ZXMubGVuZ3RoID4gMCA/ICgnICcgKyBhdHRyaWJ1dGVzLmpvaW4oJyAnKSkgOiAnJyxcclxuICAgICAgICB9KSk7XHJcblxyXG5cclxuICAgICAgICBpZiAoaXRlbXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICBsZXQgbWVudSA9IGRyb3Bkb3duLmZpbmQoJy5kcm9wZG93bi1tZW51Jyk7XHJcblxyXG4gICAgICAgICAgICBpdGVtcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcclxuICAgICAgICAgICAgICAgIG1lbnUuYXBwZW5kKGl0ZW0pXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIHJldHVybiBkcm9wZG93bjtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgQ29udHJvbERyb3Bkb3duOyIsIlxyXG5pbXBvcnQgY29yZXVpVGFibGVUcGwgICBmcm9tICcuLi9jb3JldWkudGFibGUudGVtcGxhdGVzJztcclxuaW1wb3J0IGNvcmV1aVRhYmxlVXRpbHMgZnJvbSAnLi4vY29yZXVpLnRhYmxlLnV0aWxzJztcclxuaW1wb3J0IENvbnRyb2wgICAgICAgICAgZnJvbSBcIi4uL2Fic3RyYWN0L0NvbnRyb2xcIjtcclxuXHJcbmNsYXNzIENvbnRyb2xCdXR0b25Hcm91cCBleHRlbmRzIENvbnRyb2wge1xyXG5cclxuICAgIF9saW5rID0ge1xyXG4gICAgICAgIGF0dHI6IHsgY2xhc3M6ICdidG4gYnRuLXNlY29uZGFyeScgfVxyXG4gICAgfVxyXG5cclxuICAgIF9idXR0b24gPSAge1xyXG4gICAgICAgIGF0dHI6IHsgY2xhc3M6ICdidG4gYnRuLXNlY29uZGFyeScgfVxyXG4gICAgfVxyXG5cclxuICAgIF9kcm9wZG93biA9IHtcclxuICAgICAgICBhdHRyOiB7IGNsYXNzOiAnYnRuIGJ0bi1zZWNvbmRhcnknIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQmNC90LjRhtC40LDQu9C40LfQsNGG0LjRj1xyXG4gICAgICogQHBhcmFtIHtjb3JldWlUYWJsZUluc3RhbmNlfSB0YWJsZVxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9ICAgICAgICAgICAgICBvcHRpb25zXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKHRhYmxlLCBvcHRpb25zKSB7XHJcblxyXG4gICAgICAgIG9wdGlvbnMgPSAkLmV4dGVuZCh0cnVlLCB7XHJcbiAgICAgICAgICAgIGlkOiBudWxsLFxyXG4gICAgICAgICAgICB0eXBlOiAnYnV0dG9uX2dyb3VwJyxcclxuICAgICAgICAgICAgYnV0dG9uczogbnVsbFxyXG4gICAgICAgIH0sIG9wdGlvbnMpO1xyXG5cclxuICAgICAgICBzdXBlcih0YWJsZSwgb3B0aW9ucyk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KTQvtGA0LzQuNGA0L7QstCw0L3QuNC1INC60L7QvdGC0LXQvdGC0LAg0LTQu9GPINGA0LDQt9C80LXRidC10L3QuNGPINC90LAg0YHRgtGA0LDQvdC40YbQtVxyXG4gICAgICogQHJldHVybnMge3N0cmluZ31cclxuICAgICAqL1xyXG4gICAgcmVuZGVyKCkge1xyXG5cclxuICAgICAgICBsZXQgb3B0aW9ucyA9IHRoaXMuZ2V0T3B0aW9ucygpO1xyXG4gICAgICAgIGxldCBidXR0b25zID0gW107XHJcbiAgICAgICAgbGV0IHRoYXQgICAgPSB0aGlzO1xyXG5cclxuXHJcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkob3B0aW9ucy5idXR0b25zKSkge1xyXG5cclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqINCh0L7Qt9C00LDQvdC40LUg0YHRgdGL0LvQutC4XHJcbiAgICAgICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBidXR0b25cclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIG1ha2VMaW5rKGJ1dHRvbikge1xyXG5cclxuICAgICAgICAgICAgICAgIGxldCByZXN1bHQgPSBudWxsO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChidXR0b24uaGFzT3duUHJvcGVydHkoJ2xpbmsnKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgIGJ1dHRvbi5oYXNPd25Qcm9wZXJ0eSgnY29udGVudCcpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGJ1dHRvbi5saW5rID09PSAnc3RyaW5nJyAmJlxyXG4gICAgICAgICAgICAgICAgICAgIHR5cGVvZiBidXR0b24uY29udGVudCA9PT0gJ3N0cmluZydcclxuICAgICAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBhdHRyaWJ1dGVzID0gW107XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICggISBjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KGJ1dHRvbi5hdHRyKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBidXR0b24uYXR0ciA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJ1dHRvbi5hdHRyLmhhc093blByb3BlcnR5KCdocmVmJykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGJ1dHRvbi5hdHRyLmhyZWY7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoICEgYnV0dG9uLmF0dHIuaGFzT3duUHJvcGVydHkoJ2NsYXNzJykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnV0dG9uLmF0dHIuY2xhc3MgPSB0aGF0Ll9saW5rLmF0dHIuY2xhc3M7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAkLmVhY2goYnV0dG9uLmF0dHIsIGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2YgdmFsdWUpID49IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXMucHVzaChuYW1lICsgJz1cIicgKyB2YWx1ZSArICdcIicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IGNvcmV1aVRhYmxlVXRpbHMucmVuZGVyKGNvcmV1aVRhYmxlVHBsWydjb250cm9scy9idXR0b25fZ3JvdXAvbGluay5odG1sJ10sIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiBidXR0b24udXJsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyOiBhdHRyaWJ1dGVzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBidXR0b24uY29udGVudFxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICog0KHQvtC30LTQsNC90LjQtSDQutC90L7Qv9C60LhcclxuICAgICAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGJ1dHRvblxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgZnVuY3Rpb24gbWFrZUJ1dHRvbihidXR0b24pIHtcclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgcmVzdWx0ID0gbnVsbDtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoYnV0dG9uLmhhc093blByb3BlcnR5KCdjb250ZW50JykgJiZcclxuICAgICAgICAgICAgICAgICAgICBidXR0b24uaGFzT3duUHJvcGVydHkoJ29uQ2xpY2snKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgIHR5cGVvZiBidXR0b24uY29udGVudCA9PT0gJ3N0cmluZycgJiZcclxuICAgICAgICAgICAgICAgICAgICBbJ3N0cmluZycsICdmdW5jdGlvbiddLmluZGV4T2YodHlwZW9mIGJ1dHRvbi5vbkNsaWNrKSA+PSAwXHJcbiAgICAgICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgYXR0cmlidXRlcyA9IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoICEgY29yZXVpVGFibGVVdGlscy5pc09iamVjdChidXR0b24uYXR0cikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnV0dG9uLmF0dHIgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChidXR0b24uYXR0ci5oYXNPd25Qcm9wZXJ0eSgndHlwZScpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBidXR0b24uYXR0ci50eXBlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCAhIGJ1dHRvbi5hdHRyLmhhc093blByb3BlcnR5KCdjbGFzcycpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbi5hdHRyLmNsYXNzID0gdGhhdC5fYnV0dG9uLmF0dHIuY2xhc3M7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAkLmVhY2goYnV0dG9uLmF0dHIsIGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2YgdmFsdWUpID49IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXMucHVzaChuYW1lICsgJz1cIicgKyB2YWx1ZSArICdcIicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG5cclxuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSAkKGNvcmV1aVRhYmxlVXRpbHMucmVuZGVyKGNvcmV1aVRhYmxlVHBsWydjb250cm9scy9idXR0b25fZ3JvdXAvYnV0dG9uLmh0bWwnXSwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBidXR0b24uY29udGVudCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cjogYXR0cmlidXRlc1xyXG4gICAgICAgICAgICAgICAgICAgIH0pKTtcclxuXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChidXR0b24uaGFzT3duUHJvcGVydHkoJ2NvbnRlbnQnKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBidXR0b24uaGFzT3duUHJvcGVydHkoJ29uQ2xpY2snKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ3N0cmluZycsICdmdW5jdGlvbiddLmluZGV4T2YodHlwZW9mIGJ1dHRvbi5vbkNsaWNrKSA+PSAwICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVvZiBidXR0b24uY29udGVudCA9PT0gJ3N0cmluZydcclxuICAgICAgICAgICAgICAgICAgICApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5jbGljayhmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgYnV0dG9uLm9uQ2xpY2sgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBidXR0b24ub25DbGljayhldmVudCwgdGhhdC5fdGFibGUsIHRoYXQpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGJ1dHRvbi5vbkNsaWNrID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBmdW5jID0gbmV3IEZ1bmN0aW9uKCdldmVudCcsICd0YWJsZScsICdjb250cm9sJywgYnV0dG9uLm9uQ2xpY2spO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmMoZXZlbnQsIHRoYXQuX3RhYmxlLCB0aGF0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICog0KHQvtC30LTQsNC90LjQtSDQstGL0L/QsNC00LDRjtGJ0LXQs9C+INC80LXQvdGOXHJcbiAgICAgICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBidXR0b25cclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIG1ha2VEcm9wZG93bihidXR0b24pIHtcclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgcmVzdWx0ID0gbnVsbDtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShidXR0b24uaXRlbXMpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGF0dHJpYnV0ZXMgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgaXRlbXMgICAgICA9IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBidXR0b24uaXRlbXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KGl0ZW0pICYmIHR5cGVvZiBpdGVtLnR5cGUgPT09ICdzdHJpbmcnKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0udHlwZSA9PT0gJ2xpbmsnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0uaGFzT3duUHJvcGVydHkoJ2xpbmsnKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtLmhhc093blByb3BlcnR5KCdjb250ZW50JykgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGl0ZW0udXJsID09PSAnc3RyaW5nJyAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlb2YgaXRlbS5jb250ZW50ID09PSAnc3RyaW5nJyAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtLnVybFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtcy5wdXNoKGNvcmV1aVRhYmxlVXRpbHMucmVuZGVyKGNvcmV1aVRhYmxlVHBsWydjb250cm9scy9idXR0b25fZ3JvdXAvZHJvcGRvd24vbGluay5odG1sJ10sIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybDogaXRlbS51cmwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBpdGVtLmNvbnRlbnQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpdGVtLnR5cGUgPT09ICdidXR0b24nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0uaGFzT3duUHJvcGVydHkoJ2NvbnRlbnQnKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtLmhhc093blByb3BlcnR5KCdvbkNsaWNrJykgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGl0ZW0uY29udGVudCA9PT0gJ3N0cmluZycgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWydzdHJpbmcnLCAnZnVuY3Rpb24nXS5pbmRleE9mKHR5cGVvZiBpdGVtLm9uQ2xpY2spID49IDBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGJ0biA9ICQoY29yZXVpVGFibGVVdGlscy5yZW5kZXIoY29yZXVpVGFibGVUcGxbJ2NvbnRyb2xzL2J1dHRvbl9ncm91cC9kcm9wZG93bi9idXR0b24uaHRtbCddLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBpdGVtLmNvbnRlbnQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ0bi5jbGljayhmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgaXRlbS5vbkNsaWNrID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5vbkNsaWNrKGV2ZW50LCB0aGF0Ll90YWJsZSwgdGhhdCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgaXRlbS5vbkNsaWNrID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBmdW5jID0gbmV3IEZ1bmN0aW9uKCdldmVudCcsICd0YWJsZScsICdjb250cm9sJywgaXRlbS5vbkNsaWNrKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jKGV2ZW50LCB0aGF0Ll90YWJsZSwgdGhhdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXMucHVzaChidG4pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpdGVtLnR5cGUgPT09ICdkaXZpZGVyJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zLnB1c2goY29yZXVpVGFibGVUcGxbJ2NvbnRyb2xzL2J1dHRvbl9ncm91cC9kcm9wZG93bi9kaXZpZGVyLmh0bWwnXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICggISBjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KGJ1dHRvbi5hdHRyKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBidXR0b24uYXR0ciA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJ1dHRvbi5hdHRyLmhhc093blByb3BlcnR5KCd0eXBlJykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGJ1dHRvbi5hdHRyLnR5cGU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoICEgYnV0dG9uLmF0dHIuaGFzT3duUHJvcGVydHkoJ2NsYXNzJykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnV0dG9uLmF0dHIuY2xhc3MgPSB0aGF0Ll9kcm9wZG93bi5hdHRyLmNsYXNzO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJ1dHRvbi5hdHRyLmhhc093blByb3BlcnR5KCdjbGFzcycpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIGJ1dHRvbi5hdHRyLmNsYXNzKSA+PSAwXHJcbiAgICAgICAgICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbi5hdHRyLmNsYXNzICs9ICcgZHJvcGRvd24tdG9nZ2xlJztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICAgICAgICAgICAgICAkLmVhY2goYnV0dG9uLmF0dHIsIGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2YgdmFsdWUpID49IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXMucHVzaChuYW1lICsgJz1cIicgKyB2YWx1ZSArICdcIicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9ICQoY29yZXVpVGFibGVVdGlscy5yZW5kZXIoY29yZXVpVGFibGVUcGxbJ2NvbnRyb2xzL2J1dHRvbl9ncm91cC9saW5rLmh0bWwnXSwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyOiBhdHRyaWJ1dGVzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogYnV0dG9uLmhhc093blByb3BlcnR5KCdwb3NpdGlvbicpICYmIHR5cGVvZiBidXR0b24ucG9zaXRpb24gPT09ICdzdHJpbmcnID8gYnV0dG9uLnBvc2l0aW9uIDogJ2VuZCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IGJ1dHRvbi5jb250ZW50LFxyXG4gICAgICAgICAgICAgICAgICAgIH0pKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW1zLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG1lbnUgPSByZXN1bHQuZmluZCgnLmRyb3Bkb3duLW1lbnUnKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zLm1hcChmdW5jdGlvbiAoaXRlbSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVudS5hcHBlbmQoaXRlbSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgICAgIH1cclxuXHJcblxyXG5cclxuICAgICAgICAgICAgb3B0aW9ucy5idXR0b25zLm1hcChmdW5jdGlvbiAoa2V5LCBidXR0b24pIHtcclxuICAgICAgICAgICAgICAgIGlmIChjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KGJ1dHRvbikgJiYgdHlwZW9mIGJ1dHRvbi50eXBlID09PSAnc3RyaW5nJykge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoYnV0dG9uLnR5cGUgPT09ICdsaW5rJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgbGlua0VsZW1lbnQgPSBtYWtlTGluayhidXR0b24pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxpbmtFbGVtZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBidXR0b25zLnB1c2gobGlua0VsZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYnV0dG9uLnR5cGUgPT09ICdidXR0b24nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBidXR0b25FbGVtZW50ID0gbWFrZUJ1dHRvbihidXR0b24pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGJ1dHRvbkVsZW1lbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbnMucHVzaChidXR0b25FbGVtZW50KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGJ1dHRvbi50eXBlID09PSAnZHJvcGRvd24nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBkcm9wZG93bkVsZW1lbnQgPSBtYWtlRHJvcGRvd24oYnV0dG9uKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkcm9wZG93bkVsZW1lbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbnMucHVzaChkcm9wZG93bkVsZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICBsZXQgYnRuR3JvdXAgPSAkKGNvcmV1aVRhYmxlVHBsWydjb250cm9scy9idXR0b25fZ3JvdXAuaHRtbCddKTtcclxuXHJcbiAgICAgICAgYnV0dG9ucy5tYXAoZnVuY3Rpb24gKGJ1dHRvbikge1xyXG4gICAgICAgICAgICBidG5Hcm91cC5hcHBlbmQoYnV0dG9uKTtcclxuICAgICAgICB9KVxyXG5cclxuICAgICAgICByZXR1cm4gYnRuR3JvdXA7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IENvbnRyb2xCdXR0b25Hcm91cDsiLCJpbXBvcnQgQ29udHJvbCBmcm9tIFwiLi4vYWJzdHJhY3QvQ29udHJvbFwiO1xyXG5cclxuY2xhc3MgQ29udHJvbEN1c3RvbSBleHRlbmRzIENvbnRyb2wge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y9cclxuICAgICAqIEBwYXJhbSB7Y29yZXVpVGFibGVJbnN0YW5jZX0gdGFibGVcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSAgICAgICAgICAgICAgb3B0aW9uc1xyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3Rvcih0YWJsZSwgb3B0aW9ucykge1xyXG5cclxuICAgICAgICBvcHRpb25zID0gJC5leHRlbmQodHJ1ZSwge1xyXG4gICAgICAgICAgICBpZDogbnVsbCxcclxuICAgICAgICAgICAgdHlwZTogJ2N1c3RvbScsXHJcbiAgICAgICAgICAgIGNvbnRlbnQ6IG51bGxcclxuICAgICAgICB9LCBvcHRpb25zKTtcclxuXHJcbiAgICAgICAgc3VwZXIodGFibGUsIG9wdGlvbnMpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCk0L7RgNC80LjRgNC+0LLQsNC90LjQtSDQutC+0L3RgtC10L3RgtCwINC00LvRjyDRgNCw0LfQvNC10YnQtdC90LjRjyDQvdCwINGB0YLRgNCw0L3QuNGG0LVcclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd8SFRNTEVsZW1lbnR8alF1ZXJ5fVxyXG4gICAgICovXHJcbiAgICByZW5kZXIoKSB7XHJcblxyXG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5fb3B0aW9ucy5jb250ZW50ID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fb3B0aW9ucy5jb250ZW50O1xyXG5cclxuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiB0aGlzLl9vcHRpb25zLmNvbnRlbnQgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX29wdGlvbnMuY29udGVudCgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IENvbnRyb2xDdXN0b207IiwiXHJcbmltcG9ydCBjb3JldWlUYWJsZVRwbCAgIGZyb20gXCIuLi9jb3JldWkudGFibGUudGVtcGxhdGVzXCI7XHJcbmltcG9ydCBjb3JldWlUYWJsZVV0aWxzIGZyb20gJy4uL2NvcmV1aS50YWJsZS51dGlscyc7XHJcbmltcG9ydCBDb250cm9sICAgICAgICAgIGZyb20gXCIuLi9hYnN0cmFjdC9Db250cm9sXCI7XHJcblxyXG5cclxuY2xhc3MgQ29udHJvbFBhZ2VTaXplIGV4dGVuZHMgQ29udHJvbCB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQmNC90LjRhtC40LDQu9C40LfQsNGG0LjRj1xyXG4gICAgICogQHBhcmFtIHtjb3JldWlUYWJsZUluc3RhbmNlfSB0YWJsZVxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9ICAgICAgICAgICAgICBvcHRpb25zXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKHRhYmxlLCBvcHRpb25zKSB7XHJcblxyXG4gICAgICAgIGxldCBvcHRpb25zT3JpZ2luYWwgPSB7XHJcbiAgICAgICAgICAgIGlkOiBudWxsLFxyXG4gICAgICAgICAgICB0eXBlOiAncGFnZV9zaXplJyxcclxuICAgICAgICAgICAgYXR0cjoge1xyXG4gICAgICAgICAgICAgICAgY2xhc3M6ICdmb3JtLXNlbGVjdCdcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgbGlzdDogWyAyNSwgNTAsIDEwMCwgMTAwMCBdXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgaWYgKG9wdGlvbnMuaGFzT3duUHJvcGVydHkoJ2F0dHInKSAmJiBjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KG9wdGlvbnMuYXR0cikpIHtcclxuICAgICAgICAgICAgb3B0aW9ucy5hdHRyID0gY29yZXVpVGFibGVVdGlscy5tZXJnZUF0dHIob3B0aW9uc09yaWdpbmFsLmF0dHIsIG9wdGlvbnMuYXR0cik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBvcHRpb25zID0gJC5leHRlbmQodHJ1ZSwgb3B0aW9uc09yaWdpbmFsLCBvcHRpb25zKTtcclxuXHJcbiAgICAgICAgc3VwZXIodGFibGUsIG9wdGlvbnMpO1xyXG5cclxuXHJcbiAgICAgICAgaWYgKCAhIEFycmF5LmlzQXJyYXkodGhpcy5fb3B0aW9ucy5saXN0KSkge1xyXG4gICAgICAgICAgICB0aGlzLl9vcHRpb25zLmxpc3QgPSBbXTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLmxpc3QuaW5kZXhPZih0aGlzLl90YWJsZS5fcmVjb3Jkc1BlclBhZ2UpIDwgMCkge1xyXG4gICAgICAgICAgICB0aGlzLl9vcHRpb25zLmxpc3QudW5zaGlmdCh0aGlzLl90YWJsZS5fcmVjb3Jkc1BlclBhZ2UpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQpNC+0YDQvNC40YDQvtCy0LDQvdC40LUg0LrQvtC90YLQtdC90YLQsCDQtNC70Y8g0YDQsNC30LzQtdGJ0LXQvdC40Y8g0L3QsCDRgdGC0YDQsNC90LjRhtC1XHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxyXG4gICAgICovXHJcbiAgICByZW5kZXIoKSB7XHJcblxyXG4gICAgICAgIGxldCBhdHRyaWJ1dGVzID0gW107XHJcbiAgICAgICAgbGV0IHRhYmxlICAgICAgPSB0aGlzLl90YWJsZTtcclxuXHJcbiAgICAgICAgaWYgKGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QodGhpcy5fb3B0aW9ucy5hdHRyKSkge1xyXG4gICAgICAgICAgICAkLmVhY2godGhpcy5fb3B0aW9ucy5hdHRyLCBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIGlmIChbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiB2YWx1ZSkgPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXMucHVzaChuYW1lICsgJz1cIicgKyB2YWx1ZSArICdcIicpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBjb250cm9sID0gY29yZXVpVGFibGVVdGlscy5yZW5kZXIoY29yZXVpVGFibGVUcGxbJ2NvbnRyb2xzL3BhZ2Utc2l6ZS5odG1sJ10sIHtcclxuICAgICAgICAgICAgcmVjb3Jkc1BlclBhZ2VMaXN0OiB0aGlzLl9vcHRpb25zLmxpc3QsXHJcbiAgICAgICAgICAgIHJlY29yZHNQZXJQYWdlOiB0YWJsZS5fcmVjb3Jkc1BlclBhZ2UsXHJcbiAgICAgICAgICAgIGF0dHI6IGF0dHJpYnV0ZXMubGVuZ3RoID4gMCA/ICgnICcgKyBhdHRyaWJ1dGVzLmpvaW4oJyAnKSkgOiAnJyxcclxuICAgICAgICAgICAgbGFuZzogdGFibGUuZ2V0TGFuZygpLFxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBsZXQgc2VsZWN0UGFnZVNpemUgPSAkKCdzZWxlY3QnLCBjb250cm9sKTtcclxuXHJcbiAgICAgICAgc2VsZWN0UGFnZVNpemUuY2hhbmdlKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdGFibGUuX3BhZ2UgPSAxO1xyXG4gICAgICAgICAgICB0YWJsZS5zZXRQYWdlU2l6ZShOdW1iZXIoc2VsZWN0UGFnZVNpemUudmFsKCkpKTtcclxuICAgICAgICAgICAgdGFibGUucmVsb2FkKCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRhYmxlLm9uKCdwYWdlX3NpemVfdXBkYXRlJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBzZWxlY3RQYWdlU2l6ZS52YWwodGFibGUuX3JlY29yZHNQZXJQYWdlKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGNvbnRyb2w7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IENvbnRyb2xQYWdlU2l6ZTsiLCJcclxuaW1wb3J0IGNvcmV1aVRhYmxlVXRpbHMgZnJvbSAnLi4vY29yZXVpLnRhYmxlLnV0aWxzJztcclxuaW1wb3J0IGNvcmV1aVRhYmxlVHBsICAgZnJvbSBcIi4uL2NvcmV1aS50YWJsZS50ZW1wbGF0ZXNcIjtcclxuaW1wb3J0IENvbnRyb2wgICAgICAgICAgZnJvbSBcIi4uL2Fic3RyYWN0L0NvbnRyb2xcIjtcclxuXHJcblxyXG5jbGFzcyBDb250cm9sUGFnZUp1bXAgZXh0ZW5kcyBDb250cm9sIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPXHJcbiAgICAgKiBAcGFyYW0ge2NvcmV1aVRhYmxlSW5zdGFuY2V9IHRhYmxlXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gICAgICAgICAgICAgIG9wdGlvbnNcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IodGFibGUsIG9wdGlvbnMpIHtcclxuXHJcbiAgICAgICAgbGV0IG9wdGlvbnNPcmlnaW5hbCA9IHtcclxuICAgICAgICAgICAgaWQ6IG51bGwsXHJcbiAgICAgICAgICAgIHR5cGU6ICdwYWdlX2p1bXAnLFxyXG4gICAgICAgICAgICBhdHRyOiB7XHJcbiAgICAgICAgICAgICAgICBjbGFzczogJ2lucHV0LWdyb3VwJ1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGlmIChvcHRpb25zLmhhc093blByb3BlcnR5KCdhdHRyJykgJiYgY29yZXVpVGFibGVVdGlscy5pc09iamVjdChvcHRpb25zLmF0dHIpKSB7XHJcbiAgICAgICAgICAgIG9wdGlvbnMuYXR0ciA9IGNvcmV1aVRhYmxlVXRpbHMubWVyZ2VBdHRyKG9wdGlvbnNPcmlnaW5hbC5hdHRyLCBvcHRpb25zLmF0dHIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgb3B0aW9ucyA9ICQuZXh0ZW5kKHRydWUsIG9wdGlvbnNPcmlnaW5hbCwgb3B0aW9ucyk7XHJcblxyXG4gICAgICAgIHN1cGVyKHRhYmxlLCBvcHRpb25zKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQpNC+0YDQvNC40YDQvtCy0LDQvdC40LUg0LrQvtC90YLQtdC90YLQsCDQtNC70Y8g0YDQsNC30LzQtdGJ0LXQvdC40Y8g0L3QsCDRgdGC0YDQsNC90LjRhtC1XHJcbiAgICAgKiBAcmV0dXJucyB7alF1ZXJ5fVxyXG4gICAgICovXHJcbiAgICByZW5kZXIoKSB7XHJcblxyXG4gICAgICAgIGxldCBhdHRyaWJ1dGVzID0gW107XHJcbiAgICAgICAgbGV0IHRhYmxlICAgICAgPSB0aGlzLl90YWJsZTtcclxuXHJcbiAgICAgICAgaWYgKGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QodGhpcy5fb3B0aW9ucy5hdHRyKSkge1xyXG4gICAgICAgICAgICAkLmVhY2godGhpcy5fb3B0aW9ucy5hdHRyLCBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIGlmIChbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiB2YWx1ZSkgPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXMucHVzaChuYW1lICsgJz1cIicgKyB2YWx1ZSArICdcIicpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBjb250cm9sID0gJChjb3JldWlUYWJsZVV0aWxzLnJlbmRlcihjb3JldWlUYWJsZVRwbFsnY29udHJvbHMvcGFnZS1qdW1wLmh0bWwnXSwge1xyXG4gICAgICAgICAgICBhdHRyOiBhdHRyaWJ1dGVzLmxlbmd0aCA+IDAgPyAoJyAnICsgYXR0cmlidXRlcy5qb2luKCcgJykpIDogJydcclxuICAgICAgICB9KSk7XHJcblxyXG4gICAgICAgIGxldCBpbnB1dCAgID0gJCgnaW5wdXQnLCBjb250cm9sKTtcclxuICAgICAgICBsZXQgYnV0dG9uICA9ICQoJ2J1dHRvbicsIGNvbnRyb2wpO1xyXG5cclxuICAgICAgICBidXR0b24uY2xpY2soZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB0YWJsZS5nb1BhZ2UoaW5wdXQudmFsKCkpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBpbnB1dC5rZXl1cChmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAgICAgaWYgKGV2ZW50LmtleSA9PT0gJ0VudGVyJyB8fCBldmVudC5rZXlDb2RlID09PSAxMykge1xyXG4gICAgICAgICAgICAgICAgdGFibGUuZ29QYWdlKGlucHV0LnZhbCgpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gY29udHJvbDtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgQ29udHJvbFBhZ2VKdW1wOyIsImltcG9ydCBjb3JldWlUYWJsZVV0aWxzIGZyb20gXCIuLi8uLi9jb3JldWkudGFibGUudXRpbHNcIjtcclxuaW1wb3J0IGNvcmV1aVRhYmxlVHBsICAgZnJvbSBcIi4uLy4uL2NvcmV1aS50YWJsZS50ZW1wbGF0ZXNcIjtcclxuXHJcblxyXG5sZXQgY29udHJvbFBhZ2VzID0ge1xyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCk0L7RgNC80LjRgNC+0LLQsNC90LjQtSDQutC+0L3RgtGA0L7Qu9CwXHJcbiAgICAgKiBAcGFyYW0gdGFibGVcclxuICAgICAqIEBwYXJhbSBvcHRpb25zXHJcbiAgICAgKiBAcmV0dXJuIHtqUXVlcnl9XHJcbiAgICAgKi9cclxuICAgIHJlbmRlcjogZnVuY3Rpb24gKHRhYmxlLCBvcHRpb25zKSB7XHJcblxyXG4gICAgICAgIGxldCBhdHRyaWJ1dGVzICAgICAgID0gW107XHJcbiAgICAgICAgbGV0IHNob3dQcmV2ICAgICAgICAgPSAhISBvcHRpb25zLnNob3cucHJldjtcclxuICAgICAgICBsZXQgc2hvd05leHQgICAgICAgICA9ICEhIG9wdGlvbnMuc2hvdy5uZXh0O1xyXG4gICAgICAgIGxldCBzaG93RGl2aWRlclN0YXJ0ID0gZmFsc2U7XHJcbiAgICAgICAgbGV0IHNob3dEaXZpZGVyRW5kICAgPSBmYWxzZTtcclxuICAgICAgICBsZXQgc2hvd1BhZ2VGaXJzdCAgICA9IGZhbHNlO1xyXG4gICAgICAgIGxldCBzaG93UGFnZUxhc3QgICAgID0gZmFsc2U7XHJcbiAgICAgICAgbGV0IHBhZ2VzICAgICAgICAgICAgPSBbXTtcclxuICAgICAgICBsZXQgcGFnZXNUb3RhbCAgICAgICA9IHRhYmxlLl9yZWNvcmRzVG90YWwgPiAwICYmIHRhYmxlLl9yZWNvcmRzUGVyUGFnZSA+IDBcclxuICAgICAgICAgICAgPyBNYXRoLmNlaWwodGFibGUuX3JlY29yZHNUb3RhbCAvIHRhYmxlLl9yZWNvcmRzUGVyUGFnZSlcclxuICAgICAgICAgICAgOiAxO1xyXG5cclxuXHJcbiAgICAgICAgaWYgKGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3Qob3B0aW9ucy5hdHRyKSkge1xyXG4gICAgICAgICAgICAkLmVhY2gob3B0aW9ucy5hdHRyLCBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIGlmIChbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiB2YWx1ZSkgPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXMucHVzaChuYW1lICsgJz1cIicgKyB2YWx1ZSArICdcIicpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0YWJsZS5fcmVjb3Jkc1RvdGFsID4gMCAmJlxyXG4gICAgICAgICAgICBvcHRpb25zLmNvdW50ID4gMCAmJlxyXG4gICAgICAgICAgICBjb3JldWlUYWJsZVV0aWxzLmlzTnVtZXJpYyhvcHRpb25zLmNvdW50KVxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICBsZXQgY291bnQgICAgID0gTWF0aC5taW4ob3B0aW9ucy5jb3VudCwgcGFnZXNUb3RhbCk7XHJcbiAgICAgICAgICAgIGxldCBjb3VudEhhbGYgPSBNYXRoLm1heCgwLCBNYXRoLmZsb29yKGNvdW50IC8gMikpO1xyXG5cclxuICAgICAgICAgICAgaWYgKGNvdW50ICUgMiA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgY291bnRIYWxmIC09IDE7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGxldCBzdGFydCA9IHRhYmxlLl9wYWdlID4gMVxyXG4gICAgICAgICAgICAgICAgPyBNYXRoLm1heCgxLCB0YWJsZS5fcGFnZSAtIGNvdW50SGFsZilcclxuICAgICAgICAgICAgICAgIDogdGFibGUuX3BhZ2U7XHJcblxyXG4gICAgICAgICAgICBpZiAoc3RhcnQgKyBjb3VudCA+IHBhZ2VzVG90YWwpIHtcclxuICAgICAgICAgICAgICAgIHN0YXJ0ID0gcGFnZXNUb3RhbCAtIChjb3VudCAtIDEpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvdW50OyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHBhZ2VzLnB1c2goc3RhcnQgKyBpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmNvdW50ID4gMCAmJlxyXG4gICAgICAgICAgICAgICAgdGFibGUuX3BhZ2UgPiAxXHJcbiAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgcGFnZXMucHVzaCh0YWJsZS5fcGFnZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChwYWdlcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIGlmIChwYWdlc1swXSA+PSAyKSB7XHJcbiAgICAgICAgICAgICAgICBzaG93UGFnZUZpcnN0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAocGFnZXNbMF0gPj0gMykge1xyXG4gICAgICAgICAgICAgICAgc2hvd0RpdmlkZXJTdGFydCA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChwYWdlc1twYWdlcy5sZW5ndGggLSAxXSArIDEgPCBwYWdlc1RvdGFsKSB7XHJcbiAgICAgICAgICAgICAgICBzaG93RGl2aWRlckVuZCA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHBhZ2VzW3BhZ2VzLmxlbmd0aCAtIDFdIDwgcGFnZXNUb3RhbCkge1xyXG4gICAgICAgICAgICAgICAgc2hvd1BhZ2VMYXN0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IGNvbnRyb2wgPSAkKGNvcmV1aVRhYmxlVXRpbHMucmVuZGVyKGNvcmV1aVRhYmxlVHBsWydjb250cm9scy9wYWdlcy5odG1sJ10sIHtcclxuICAgICAgICAgICAgY3VycmVudFBhZ2U6IHRhYmxlLl9wYWdlLFxyXG4gICAgICAgICAgICBpc0FjdGl2ZVByZXY6IHRhYmxlLl9wYWdlID4gMSxcclxuICAgICAgICAgICAgaXNBY3RpdmVOZXh0OiB0YWJsZS5fcGFnZSA8IHBhZ2VzVG90YWwsXHJcbiAgICAgICAgICAgIHBhZ2VzVG90YWw6IHBhZ2VzVG90YWwsXHJcblxyXG4gICAgICAgICAgICBzaG93UHJldjogc2hvd1ByZXYsXHJcbiAgICAgICAgICAgIHNob3dQYWdlRmlyc3Q6IHNob3dQYWdlRmlyc3QsXHJcbiAgICAgICAgICAgIHNob3dEaXZpZGVyU3RhcnQ6IHNob3dEaXZpZGVyU3RhcnQsXHJcblxyXG4gICAgICAgICAgICBwYWdlczogcGFnZXMsXHJcblxyXG4gICAgICAgICAgICBzaG93RGl2aWRlckVuZDogc2hvd0RpdmlkZXJFbmQsXHJcbiAgICAgICAgICAgIHNob3dQYWdlTGFzdDogc2hvd1BhZ2VMYXN0LFxyXG4gICAgICAgICAgICBzaG93TmV4dDogc2hvd05leHQsXHJcblxyXG4gICAgICAgICAgICBhdHRyOiBhdHRyaWJ1dGVzLmxlbmd0aCA+IDAgPyAoJyAnICsgYXR0cmlidXRlcy5qb2luKCcgJykpIDogJycsXHJcbiAgICAgICAgICAgIGxhbmc6IHRhYmxlLmdldExhbmcoKSxcclxuICAgICAgICB9KSk7XHJcblxyXG5cclxuICAgICAgICBsZXQgYnRuUHJldiA9IGNvbnRyb2wuZmluZCgnLmNvcmV1aS10YWJsZV9fcGFnZV9wcmV2JylcclxuICAgICAgICBpZiAoYnRuUHJldlswXSkge1xyXG4gICAgICAgICAgICBpZiAodGFibGUuX3BhZ2UgPD0gMSkge1xyXG4gICAgICAgICAgICAgICAgYnRuUHJldi5hZGRDbGFzcygnZGlzYWJsZWQnKTtcclxuXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBidG5QcmV2LmNsaWNrKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGFibGUuX3BhZ2UgPiAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhYmxlLnByZXZQYWdlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIGxldCBidG5OZXh0ID0gY29udHJvbC5maW5kKCcuY29yZXVpLXRhYmxlX19wYWdlX25leHQnKVxyXG4gICAgICAgIGlmIChidG5OZXh0WzBdKSB7XHJcbiAgICAgICAgICAgIGJ0bk5leHQuY2xpY2soZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgdGFibGUubmV4dFBhZ2UoKTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICBsZXQgYnRuUGFnZXMgPSBjb250cm9sLmZpbmQoJy5jb3JldWktdGFibGVfX3BhZ2UnKVxyXG4gICAgICAgIGlmIChidG5QYWdlc1swXSkge1xyXG4gICAgICAgICAgICBidG5QYWdlcy5jbGljayhmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgcGFnZSA9IE51bWJlcigkLnRyaW0oJCh0aGlzKS50ZXh0KCkpKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAocGFnZSA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICB0YWJsZS5nb1BhZ2UocGFnZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gY29udHJvbDtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY29udHJvbFBhZ2VzOyIsIlxyXG5pbXBvcnQgY29yZXVpVGFibGVVdGlscyBmcm9tICcuLi9jb3JldWkudGFibGUudXRpbHMnO1xyXG5pbXBvcnQgQ29udHJvbCAgICAgICAgICBmcm9tIFwiLi4vYWJzdHJhY3QvQ29udHJvbFwiO1xyXG5pbXBvcnQgY29udHJvbFBhZ2VzICAgICBmcm9tIFwiLi9wYWdlcy9jb250cm9sXCI7XHJcblxyXG5jbGFzcyBDb250cm9sUGFnZXMgZXh0ZW5kcyBDb250cm9sIHtcclxuXHJcbiAgICBfY29udHJvbCA9IG51bGw7XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y9cclxuICAgICAqIEBwYXJhbSB7Y29yZXVpVGFibGVJbnN0YW5jZX0gdGFibGVcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSAgICAgICAgICAgICAgb3B0aW9uc1xyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3Rvcih0YWJsZSwgb3B0aW9ucykge1xyXG5cclxuICAgICAgICBsZXQgb3B0aW9uc09yaWdpbmFsID0ge1xyXG4gICAgICAgICAgICBzaG93OiB7XHJcbiAgICAgICAgICAgICAgICBwcmV2OiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgbmV4dDogdHJ1ZSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgY291bnQ6IDMsXHJcbiAgICAgICAgICAgIGF0dHI6IHtcclxuICAgICAgICAgICAgICAgIGNsYXNzOiAncGFnaW5hdGlvbiBtYi0wJ1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgaWYgKG9wdGlvbnMuaGFzT3duUHJvcGVydHkoJ2F0dHInKSAmJiBjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KG9wdGlvbnMuYXR0cikpIHtcclxuICAgICAgICAgICAgb3B0aW9ucy5hdHRyID0gY29yZXVpVGFibGVVdGlscy5tZXJnZUF0dHIob3B0aW9uc09yaWdpbmFsLmF0dHIsIG9wdGlvbnMuYXR0cik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBvcHRpb25zID0gJC5leHRlbmQodHJ1ZSwgb3B0aW9uc09yaWdpbmFsLCBvcHRpb25zKTtcclxuXHJcbiAgICAgICAgc3VwZXIodGFibGUsIG9wdGlvbnMpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCk0L7RgNC80LjRgNC+0LLQsNC90LjQtSDQutC+0L3RgtC10L3RgtCwINC00LvRjyDRgNCw0LfQvNC10YnQtdC90LjRjyDQvdCwINGB0YLRgNCw0L3QuNGG0LVcclxuICAgICAqIEByZXR1cm5zIHtqUXVlcnl9XHJcbiAgICAgKi9cclxuICAgIHJlbmRlcigpIHtcclxuXHJcbiAgICAgICAgbGV0IHRhYmxlICAgPSB0aGlzLl90YWJsZTtcclxuICAgICAgICBsZXQgb3B0aW9ucyA9IHRoaXMuX29wdGlvbnM7XHJcbiAgICAgICAgbGV0IGNvbnRyb2wgPSBjb250cm9sUGFnZXMucmVuZGVyKHRhYmxlLCBvcHRpb25zKTtcclxuXHJcbiAgICAgICAgdGFibGUub24oJ3JlY29yZHNfc2hvdycsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgbGV0IGNvbnRyb2xVcGRhdGUgPSBjb250cm9sUGFnZXMucmVuZGVyKHRhYmxlLCBvcHRpb25zKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnRyb2wucmVwbGFjZVdpdGgoY29udHJvbFVwZGF0ZSk7XHJcblxyXG4gICAgICAgICAgICBjb250cm9sID0gY29udHJvbFVwZGF0ZTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5fY29udHJvbCA9IGNvbnRyb2w7XHJcblxyXG4gICAgICAgIHJldHVybiBjb250cm9sO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBDb250cm9sUGFnZXM7IiwiXHJcbmltcG9ydCBjb3JldWlUYWJsZVRwbCAgICAgIGZyb20gXCIuLi9jb3JldWkudGFibGUudGVtcGxhdGVzXCI7XHJcbmltcG9ydCBjb3JldWlUYWJsZVV0aWxzICAgIGZyb20gJy4uL2NvcmV1aS50YWJsZS51dGlscyc7XHJcbmltcG9ydCBjb3JldWlUYWJsZUVsZW1lbnRzIGZyb20gXCIuLi9jb3JldWkudGFibGUuZWxlbWVudHNcIjtcclxuaW1wb3J0IENvbnRyb2wgICAgICAgICAgICAgZnJvbSBcIi4uL2Fic3RyYWN0L0NvbnRyb2xcIjtcclxuXHJcbmNsYXNzIENvbnRyb2xUb3RhbCBleHRlbmRzIENvbnRyb2wge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y9cclxuICAgICAqIEBwYXJhbSB7Y29yZXVpVGFibGVJbnN0YW5jZX0gdGFibGVcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSAgICAgICAgICAgICAgb3B0aW9uc1xyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3Rvcih0YWJsZSwgb3B0aW9ucykge1xyXG5cclxuICAgICAgICBsZXQgb3B0aW9uc09yaWdpbmFsID0ge1xyXG4gICAgICAgICAgICB0eXBlOiAndG90YWwnLFxyXG4gICAgICAgICAgICBhdHRyOiB7XHJcbiAgICAgICAgICAgICAgICBjbGFzczogJ3B4LTEnXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBpZiAob3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnYXR0cicpICYmIGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3Qob3B0aW9ucy5hdHRyKSkge1xyXG4gICAgICAgICAgICBvcHRpb25zLmF0dHIgPSBjb3JldWlUYWJsZVV0aWxzLm1lcmdlQXR0cihvcHRpb25zT3JpZ2luYWwuYXR0ciwgb3B0aW9ucy5hdHRyKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIG9wdGlvbnMgPSAkLmV4dGVuZCh0cnVlLCBvcHRpb25zT3JpZ2luYWwsIG9wdGlvbnMpO1xyXG5cclxuICAgICAgICBzdXBlcih0YWJsZSwgb3B0aW9ucyk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KTQvtGA0LzQuNGA0L7QstCw0L3QuNC1INC60L7QvdGC0LXQvdGC0LAg0LTQu9GPINGA0LDQt9C80LXRidC10L3QuNGPINC90LAg0YHRgtGA0LDQvdC40YbQtVxyXG4gICAgICogQHJldHVybnMge3N0cmluZ31cclxuICAgICAqL1xyXG4gICAgcmVuZGVyKCkge1xyXG5cclxuICAgICAgICBsZXQgYXR0cmlidXRlcyA9IFtdO1xyXG4gICAgICAgIGxldCB0YWJsZSAgICAgID0gdGhpcy5fdGFibGU7XHJcblxyXG4gICAgICAgIGlmIChjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KHRoaXMuX29wdGlvbnMuYXR0cikpIHtcclxuICAgICAgICAgICAgJC5lYWNoKHRoaXMuX29wdGlvbnMuYXR0ciwgZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2YgdmFsdWUpID49IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzLnB1c2gobmFtZSArICc9XCInICsgdmFsdWUgKyAnXCInKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgY29udHJvbCA9ICQoY29yZXVpVGFibGVVdGlscy5yZW5kZXIoY29yZXVpVGFibGVUcGxbJ2NvbnRyb2xzL3RvdGFsLmh0bWwnXSwge1xyXG4gICAgICAgICAgICByZWNvcmRzVG90YWw6IHRhYmxlLl9yZWNvcmRzVG90YWwsXHJcbiAgICAgICAgICAgIGF0dHI6IGF0dHJpYnV0ZXMubGVuZ3RoID4gMCA/ICgnICcgKyBhdHRyaWJ1dGVzLmpvaW4oJyAnKSkgOiAnJyxcclxuICAgICAgICAgICAgbGFuZzogdGFibGUuZ2V0TGFuZygpLFxyXG4gICAgICAgIH0pKTtcclxuXHJcbiAgICAgICAgdGFibGUub24oJ3JlY29yZHNfc2hvdycsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgY29udHJvbC5maW5kKCcuY29yZXVpLXRhYmxlX19jb3VudC10b3RhbCcpLnRleHQodGFibGUuX3JlY29yZHNUb3RhbCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiBjb250cm9sO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBDb250cm9sVG90YWw7IiwiXHJcbmltcG9ydCBjb3JldWlUYWJsZVV0aWxzICAgIGZyb20gJy4uL2NvcmV1aS50YWJsZS51dGlscyc7XHJcbmltcG9ydCBjb3JldWlUYWJsZVRwbCAgICAgIGZyb20gXCIuLi9jb3JldWkudGFibGUudGVtcGxhdGVzXCI7XHJcbmltcG9ydCBDb3JldWlUYWJsZVV0aWxzICAgIGZyb20gXCIuLi9jb3JldWkudGFibGUudXRpbHNcIjtcclxuaW1wb3J0IGNvcmV1aVRhYmxlRWxlbWVudHMgZnJvbSBcIi4uL2NvcmV1aS50YWJsZS5lbGVtZW50c1wiO1xyXG5pbXBvcnQgQ29udHJvbCBmcm9tIFwiLi4vYWJzdHJhY3QvQ29udHJvbFwiO1xyXG5cclxuXHJcbmNsYXNzIENvbnRyb2xTZWFyY2ggZXh0ZW5kcyBDb250cm9sIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPXHJcbiAgICAgKiBAcGFyYW0ge2NvcmV1aVRhYmxlSW5zdGFuY2V9IHRhYmxlXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gICAgICAgICAgICAgIG9wdGlvbnNcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IodGFibGUsIG9wdGlvbnMpIHtcclxuXHJcbiAgICAgICAgb3B0aW9ucyA9ICQuZXh0ZW5kKHRydWUsIHtcclxuICAgICAgICAgICAgYnRuOiB7XHJcbiAgICAgICAgICAgICAgICBhdHRyOiB7IGNsYXNzOiAnYnRuIGJ0bi1vdXRsaW5lLXNlY29uZGFyeScgfSxcclxuICAgICAgICAgICAgICAgIGNvbnRlbnQ6IG51bGwsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGJ0bkNsZWFyOiB7XHJcbiAgICAgICAgICAgICAgICBjb250ZW50OiBcIjxpIGNsYXNzPVxcXCJiaSBiaS14IHRleHQtZGFuZ2VyXFxcIj48L2k+XCIsXHJcbiAgICAgICAgICAgICAgICBhdHRyOiB7IGNsYXNzOiAnYnRuIGJ0bi1vdXRsaW5lLXNlY29uZGFyeScgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBidG5Db21wbGV0ZToge1xyXG4gICAgICAgICAgICAgICAgYXR0cjogeyBjbGFzczogJ2J0biBidG4tcHJpbWFyeScgfSxcclxuICAgICAgICAgICAgICAgIGNvbnRlbnQ6IG51bGxcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sIG9wdGlvbnMpO1xyXG5cclxuICAgICAgICBzdXBlcih0YWJsZSwgb3B0aW9ucyk7XHJcblxyXG5cclxuICAgICAgICBpZiAoICEgQ29yZXVpVGFibGVVdGlscy5pc09iamVjdCh0aGlzLl9vcHRpb25zLmJ0bikpIHtcclxuICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy5idG4gPSB7fTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICggISB0aGlzLl9vcHRpb25zLmJ0bi5oYXNPd25Qcm9wZXJ0eSgnY29udGVudCcpIHx8XHJcbiAgICAgICAgICAgIHR5cGVvZiB0aGlzLl9vcHRpb25zLmJ0bi5jb250ZW50ICE9PSAnc3RyaW5nJ1xyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICB0aGlzLl9vcHRpb25zLmJ0bi5jb250ZW50ID0gJzxpIGNsYXNzPVwiYmkgYmktc2VhcmNoXCI+PC9pPiAnICsgdGFibGUuZ2V0TGFuZygpLnNlYXJjaFxyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIGlmICggISBDb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KHRoaXMuX29wdGlvbnMuYnRuQ2xlYXIpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX29wdGlvbnMuYnRuQ2xlYXIgPSB7fTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICggISB0aGlzLl9vcHRpb25zLmJ0bkNsZWFyLmhhc093blByb3BlcnR5KCdjb250ZW50JykgfHxcclxuICAgICAgICAgICAgdHlwZW9mIHRoaXMuX29wdGlvbnMuYnRuQ2xlYXIuY29udGVudCAhPT0gJ3N0cmluZydcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy5idG5DbGVhci5jb250ZW50ID0gdGFibGUuZ2V0TGFuZygpLmNsZWFyXHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgaWYgKCAhIENvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QodGhpcy5fb3B0aW9ucy5idG5Db21wbGV0ZSkpIHtcclxuICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy5idG5Db21wbGV0ZSA9IHt9O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCAhIHRoaXMuX29wdGlvbnMuYnRuQ29tcGxldGUuaGFzT3duUHJvcGVydHkoJ2NvbnRlbnQnKSB8fFxyXG4gICAgICAgICAgICB0eXBlb2YgdGhpcy5fb3B0aW9ucy5idG5Db21wbGV0ZS5jb250ZW50ICE9PSAnc3RyaW5nJ1xyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICB0aGlzLl9vcHRpb25zLmJ0bkNvbXBsZXRlLmNvbnRlbnQgPSB0YWJsZS5nZXRMYW5nKCkuc2VhcmNoQWN0aW9uXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCk0L7RgNC80LjRgNC+0LLQsNC90LjQtSDQutC+0L3RgtC10L3RgtCwINC00LvRjyDRgNCw0LfQvNC10YnQtdC90LjRjyDQvdCwINGB0YLRgNCw0L3QuNGG0LVcclxuICAgICAqIEByZXR1cm5zIHtqUXVlcnl9XHJcbiAgICAgKi9cclxuICAgIHJlbmRlcigpIHtcclxuXHJcbiAgICAgICAgbGV0IGJ0bkF0dHIgICAgPSBbXTtcclxuICAgICAgICBsZXQgYnRuQ29udGVudCA9ICcnO1xyXG4gICAgICAgIGxldCBidG5DbGVhciAgID0gJyc7XHJcbiAgICAgICAgbGV0IHRoYXQgICAgICAgPSB0aGlzO1xyXG4gICAgICAgIGxldCB0YWJsZSAgICAgID0gdGhpcy5fdGFibGU7XHJcblxyXG5cclxuICAgICAgICBpZiAoICEgY29yZXVpVGFibGVVdGlscy5pc09iamVjdCh0aGlzLl9vcHRpb25zLmJ0bikpIHtcclxuICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy5idG4gPSB7fTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCAhIGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QodGhpcy5fb3B0aW9ucy5idG4uYXR0cikpIHtcclxuICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy5idG4uYXR0ciA9IHt9O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCAhIHRoaXMuX29wdGlvbnMuYnRuLmF0dHIuaGFzT3duUHJvcGVydHkoJ2NsYXNzJykgfHxcclxuICAgICAgICAgICAgdHlwZW9mIHRoaXMuX29wdGlvbnMuYnRuLmF0dHIuY2xhc3MgIT09ICdzdHJpbmcnXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX29wdGlvbnMuYnRuLmF0dHIuY2xhc3MgPSAnYnRuLXNlYXJjaC10b2dnbGUnO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuX29wdGlvbnMuYnRuLmF0dHIuY2xhc3MgKz0gJyBidG4tc2VhcmNoLXRvZ2dsZSc7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAkLmVhY2godGhpcy5fb3B0aW9ucy5idG4uYXR0ciwgZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XHJcbiAgICAgICAgICAgIGJ0bkF0dHIucHVzaChuYW1lICsgJz1cIicgKyB2YWx1ZSArICdcIicpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBpZiAodHlwZW9mIHRoaXMuX29wdGlvbnMuYnRuLmNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgIGJ0bkNvbnRlbnQgPSB0aGlzLl9vcHRpb25zLmJ0bi5jb250ZW50O1xyXG4gICAgICAgIH1cclxuXHJcblxyXG5cclxuICAgICAgICBpZiAodGhpcy5fdGFibGUuZ2V0U2VhcmNoRGF0YSgpLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgYnRuQ2xlYXIgPSB0aGlzLl9yZW5kZXJCdG5DbGVhcigpO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIGxldCBjb250cm9sID0gJChjb3JldWlUYWJsZVV0aWxzLnJlbmRlcihjb3JldWlUYWJsZVRwbFsnY29udHJvbHMvc2VhcmNoLmh0bWwnXSwge1xyXG4gICAgICAgICAgICBidG5Db250ZW50OiBidG5Db250ZW50LFxyXG4gICAgICAgICAgICBidG5BdHRyOiBidG5BdHRyLmxlbmd0aCA+IDAgPyAoJyAnICsgYnRuQXR0ci5qb2luKCcgJykpIDogJycsXHJcbiAgICAgICAgICAgIGJ0bkNsZWFyOiBidG5DbGVhclxyXG4gICAgICAgIH0pKTtcclxuXHJcbiAgICAgICAgbGV0IGJ1dHRvblRvZ2dsZSA9IGNvbnRyb2wuZmluZCgnLmJ0bi1zZWFyY2gtdG9nZ2xlJyk7XHJcbiAgICAgICAgbGV0IGJ1dHRvbkNsZWFyICA9IGNvbnRyb2wuZmluZCgnLmJ0bi1jbGVhcicpO1xyXG5cclxuICAgICAgICBidXR0b25Ub2dnbGUuY2xpY2soZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBsZXQgY29udGFpbmVyICAgICAgICA9IGNvcmV1aVRhYmxlRWxlbWVudHMuZ2V0U2VhcmNoQ29udGFpbmVyKHRhYmxlLmdldElkKCkpO1xyXG4gICAgICAgICAgICBsZXQgY29sdW1uc0NvbnRhaW5lciA9IGNvcmV1aVRhYmxlRWxlbWVudHMuZ2V0Q29sdW1uc0NvbnRhaW5lcih0YWJsZS5nZXRJZCgpKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChjb2x1bW5zQ29udGFpbmVyWzBdKSB7XHJcbiAgICAgICAgICAgICAgICBjb2x1bW5zQ29udGFpbmVyLmhpZGUoKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGNvbnRhaW5lclswXSkge1xyXG4gICAgICAgICAgICAgICAgY29udGFpbmVyLmZhZGVUb2dnbGUoJ2Zhc3QnKTtcclxuXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgY29udHJvbHMgICAgICAgICAgID0gW107XHJcbiAgICAgICAgICAgICAgICBsZXQgYnRuQ29tcGxldGVBdHRyICAgID0gW107XHJcbiAgICAgICAgICAgICAgICBsZXQgYnRuQ29tcGxldGVDb250ZW50ID0gJyc7XHJcbiAgICAgICAgICAgICAgICBsZXQgdGFibGVPcHRpb25zICAgICAgID0gdGFibGUuZ2V0T3B0aW9ucygpO1xyXG4gICAgICAgICAgICAgICAgbGV0IGxhYmVsV2lkdGggICAgICAgICA9IHRhYmxlT3B0aW9ucy5zZWFyY2guaGFzT3duUHJvcGVydHkoJ2xhYmVsV2lkdGgnKSAmJiB0YWJsZU9wdGlvbnMuc2VhcmNoLmxhYmVsV2lkdGhcclxuICAgICAgICAgICAgICAgICAgICA/IHRhYmxlT3B0aW9ucy5zZWFyY2gubGFiZWxXaWR0aFxyXG4gICAgICAgICAgICAgICAgICAgIDogMTYwO1xyXG5cclxuICAgICAgICAgICAgICAgIHRhYmxlLl9zZWFyY2gubWFwKGZ1bmN0aW9uIChzZWFyY2hDb250cm9sKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IG9wdGlvbnMgPSBzZWFyY2hDb250cm9sLmdldE9wdGlvbnMoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuaGFzT3duUHJvcGVydHkoJ2ZpZWxkJykgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIG9wdGlvbnMuZmllbGQgPT09ICdzdHJpbmcnICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnMuZmllbGRcclxuICAgICAgICAgICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGRlc2NyaXB0aW9uTGFiZWwgPSBvcHRpb25zLmhhc093blByb3BlcnR5KCdkZXNjcmlwdGlvbkxhYmVsJykgJiYgb3B0aW9ucy5kZXNjcmlwdGlvbkxhYmVsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IG9wdGlvbnMuZGVzY3JpcHRpb25MYWJlbFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBudWxsO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGNvbnRyb2xDb250YWluZXIgPSAkKGNvcmV1aVRhYmxlVXRpbHMucmVuZGVyKGNvcmV1aVRhYmxlVHBsWydjb250cm9scy9zZWFyY2gvY29udHJvbC5odG1sJ10sIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsV2lkdGg6ICAgICAgIGxhYmVsV2lkdGggKyAodHlwZW9mIGxhYmVsV2lkdGggPT09ICdudW1iZXInID8gJ3B4JyA6ICcnKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uTGFiZWw6IGRlc2NyaXB0aW9uTGFiZWwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogICAgICAgICAgICBvcHRpb25zLmhhc093blByb3BlcnR5KCdsYWJlbCcpICYmIHR5cGVvZiBvcHRpb25zLmxhYmVsID09PSAnc3RyaW5nJyA/IG9wdGlvbnMubGFiZWwgOiAnJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAgICAgIG9wdGlvbnMuaGFzT3duUHJvcGVydHkoJ2Rlc2NyaXB0aW9uJykgJiYgdHlwZW9mIG9wdGlvbnMuZGVzY3JpcHRpb24gPT09ICdzdHJpbmcnID8gb3B0aW9ucy5kZXNjcmlwdGlvbiA6ICcnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VmZml4OiAgICAgICAgICAgb3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnc3VmZml4JykgJiYgdHlwZW9mIG9wdGlvbnMuc3VmZml4ID09PSAnc3RyaW5nJyA/IG9wdGlvbnMuc3VmZml4IDogJycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xDb250YWluZXIuZmluZCgnLmNvcmV1aS10YWJsZV9fc2VhcmNoLWNvbnRyb2xfY29udGVudCcpLnByZXBlbmQoc2VhcmNoQ29udHJvbC5yZW5kZXIoKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9scy5wdXNoKGNvbnRyb2xDb250YWluZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuXHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCAhIGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QodGhhdC5fb3B0aW9ucy5idG5Db21wbGV0ZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGF0Ll9vcHRpb25zLmJ0bkNvbXBsZXRlID0ge307XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCAhIGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QodGhhdC5fb3B0aW9ucy5idG5Db21wbGV0ZS5hdHRyKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoYXQuX29wdGlvbnMuYnRuQ29tcGxldGUuYXR0ciA9IHt9O1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0aGF0Ll9vcHRpb25zLmJ0bkNvbXBsZXRlLmF0dHIuaGFzT3duUHJvcGVydHkoJ3R5cGUnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGF0Ll9vcHRpb25zLmJ0bkNvbXBsZXRlLmF0dHIudHlwZTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoICEgdGhhdC5fb3B0aW9ucy5idG5Db21wbGV0ZS5hdHRyLmhhc093blByb3BlcnR5KCdjbGFzcycpIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZW9mIHRoYXQuX29wdGlvbnMuYnRuQ29tcGxldGUuYXR0ci5jbGFzcyAhPT0gJ3N0cmluZydcclxuICAgICAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoYXQuX29wdGlvbnMuYnRuQ29tcGxldGUuYXR0ci5jbGFzcyA9ICdidG4tY29tcGxldGUnO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGF0Ll9vcHRpb25zLmJ0bkNvbXBsZXRlLmF0dHIuY2xhc3MgKz0gJyBidG4tY29tcGxldGUnO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KHRoYXQuX29wdGlvbnMuYnRuQ29tcGxldGUuYXR0cikpIHtcclxuICAgICAgICAgICAgICAgICAgICAkLmVhY2godGhhdC5fb3B0aW9ucy5idG5Db21wbGV0ZS5hdHRyLCBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIHZhbHVlKSA+PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBidG5Db21wbGV0ZUF0dHIucHVzaChuYW1lICsgJz1cIicgKyB2YWx1ZSArICdcIicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHRoYXQuX29wdGlvbnMuYnRuQ29tcGxldGUuY29udGVudCA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgICAgICAgICBidG5Db21wbGV0ZUNvbnRlbnQgPSB0aGF0Ll9vcHRpb25zLmJ0bkNvbXBsZXRlLmNvbnRlbnQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgbGV0IHNlYXJjaENvbnRhaW5lciA9ICQoY29yZXVpVGFibGVVdGlscy5yZW5kZXIoY29yZXVpVGFibGVUcGxbJ2NvbnRyb2xzL3NlYXJjaC9jb250YWluZXIuaHRtbCddLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGFiZWxXaWR0aDogbGFiZWxXaWR0aCArICh0eXBlb2YgbGFiZWxXaWR0aCA9PT0gJ251bWJlcicgPyAncHgnIDogJycpLFxyXG4gICAgICAgICAgICAgICAgICAgIGJ0bkNvbXBsZXRlQXR0cjogICAgYnRuQ29tcGxldGVBdHRyLmxlbmd0aCA+IDAgPyAoJyAnICsgYnRuQ29tcGxldGVBdHRyLmpvaW4oJyAnKSkgOiAnJyxcclxuICAgICAgICAgICAgICAgICAgICBidG5Db21wbGV0ZUNvbnRlbnQ6IGJ0bkNvbXBsZXRlQ29udGVudCxcclxuICAgICAgICAgICAgICAgIH0pKTtcclxuXHJcbiAgICAgICAgICAgICAgICAkKCcuYnRuLWNvbXBsZXRlJywgc2VhcmNoQ29udGFpbmVyKS5jbGljayhmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGFibGUuc2VhcmNoUmVjb3JkcygpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBsZXQgY29udGFpbmVyID0gY29yZXVpVGFibGVFbGVtZW50cy5nZXRTZWFyY2hDb250YWluZXIodGFibGUuZ2V0SWQoKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjb250YWluZXJbMF0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyLmZhZGVPdXQoMjAwKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY29udHJvbHMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBzZWFyY2hDb250cm9scyA9IHNlYXJjaENvbnRhaW5lci5maW5kKCcuY29yZXVpLXRhYmxlX19zZWFyY2hfY29udHJvbHMnKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbHMubWFwKGZ1bmN0aW9uIChjb250cm9sKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlYXJjaENvbnRyb2xzLmFwcGVuZChjb250cm9sKTtcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGxldCB3cmFwcGVyID0gY29yZXVpVGFibGVFbGVtZW50cy5nZXRXcmFwcGVyKHRhYmxlLmdldElkKCkpO1xyXG4gICAgICAgICAgICAgICAgd3JhcHBlci5iZWZvcmUoc2VhcmNoQ29udGFpbmVyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuXHJcbiAgICAgICAgYnV0dG9uQ2xlYXIuY2xpY2soZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB0YWJsZS5jbGVhclNlYXJjaCgpO1xyXG5cclxuICAgICAgICAgICAgbGV0IGNvbnRhaW5lciA9IGNvcmV1aVRhYmxlRWxlbWVudHMuZ2V0U2VhcmNoQ29udGFpbmVyKHRhYmxlLmdldElkKCkpO1xyXG5cclxuICAgICAgICAgICAgaWYgKGNvbnRhaW5lclswXSkge1xyXG4gICAgICAgICAgICAgICAgY29udGFpbmVyLmZhZGVPdXQoJ2Zhc3QnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBidXR0b25DbGVhci5yZW1vdmUoKTtcclxuICAgICAgICB9KTtcclxuXHJcblxyXG4gICAgICAgIHRhYmxlLm9uKCdzZWFyY2hfY2hhbmdlJywgZnVuY3Rpb24gKHNlYXJjaERhdGEpIHtcclxuICAgICAgICAgICAgbGV0IGJ1dHRvbkNsZWFyID0gJCgnYnV0dG9uLmJ0bi1jbGVhcicsIGNvbnRyb2wpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHNlYXJjaERhdGEubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCAhIGJ1dHRvbkNsZWFyWzBdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGJ0bkNsZWFyID0gJCh0aGF0Ll9yZW5kZXJCdG5DbGVhcigpKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgYnRuQ2xlYXIuY2xpY2soZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0YWJsZS5jbGVhclNlYXJjaCgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGNvbnRhaW5lciA9IGNvcmV1aVRhYmxlRWxlbWVudHMuZ2V0U2VhcmNoQ29udGFpbmVyKHRhYmxlLmdldElkKCkpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbnRhaW5lclswXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyLmZhZGVPdXQoJ2Zhc3QnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBidG5DbGVhci5yZW1vdmUoKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgYnRuQ2xlYXIuaW5zZXJ0QWZ0ZXIoYnV0dG9uVG9nZ2xlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBidXR0b25DbGVhci5yZW1vdmUoKTtcclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgY29udGFpbmVyID0gY29yZXVpVGFibGVFbGVtZW50cy5nZXRTZWFyY2hDb250YWluZXIodGFibGUuZ2V0SWQoKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGNvbnRhaW5lclswXSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lci5mYWRlT3V0KCdmYXN0Jyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcblxyXG4gICAgICAgIHJldHVybiBjb250cm9sO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCg0LXQvdC00LXRgCDQutC90L7Qv9C60Lgg0L7RgtC80LXQvdGLXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBfcmVuZGVyQnRuQ2xlYXIgKCkge1xyXG5cclxuICAgICAgICBsZXQgYXR0cmlidXRlcyA9IFtdO1xyXG4gICAgICAgIGxldCBjb250ZW50ICAgID0gJyc7XHJcblxyXG4gICAgICAgIGlmICggISBjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KHRoaXMuX29wdGlvbnMuYnRuQ2xlYXIpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX29wdGlvbnMuYnRuQ2xlYXIgPSB7fTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCAhIGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QodGhpcy5fb3B0aW9ucy5idG5DbGVhci5hdHRyKSkge1xyXG4gICAgICAgICAgICB0aGlzLl9vcHRpb25zLmJ0bkNsZWFyLmF0dHIgPSB7fTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICggISB0aGlzLl9vcHRpb25zLmJ0bkNsZWFyLmF0dHIuaGFzT3duUHJvcGVydHkoJ2NsYXNzJykgfHxcclxuICAgICAgICAgICAgdHlwZW9mIHRoaXMuX29wdGlvbnMuYnRuQ2xlYXIuYXR0ci5jbGFzcyAhPT0gJ3N0cmluZydcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy5idG5DbGVhci5hdHRyLmNsYXNzID0gJ2J0bi1jbGVhcic7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy5idG5DbGVhci5hdHRyLmNsYXNzICs9ICcgYnRuLWNsZWFyJztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICQuZWFjaCh0aGlzLl9vcHRpb25zLmJ0bkNsZWFyLmF0dHIsIGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xyXG4gICAgICAgICAgICBhdHRyaWJ1dGVzLnB1c2gobmFtZSArICc9XCInICsgdmFsdWUgKyAnXCInKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLl9vcHRpb25zLmJ0bkNsZWFyLmNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgIGNvbnRlbnQgPSB0aGlzLl9vcHRpb25zLmJ0bkNsZWFyLmNvbnRlbnQ7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgcmV0dXJuIGNvcmV1aVRhYmxlVXRpbHMucmVuZGVyKGNvcmV1aVRhYmxlVHBsWydjb250cm9scy9zZWFyY2gvY2xlYXIuaHRtbCddLCB7XHJcbiAgICAgICAgICAgIGNvbnRlbnQ6IGNvbnRlbnQsXHJcbiAgICAgICAgICAgIGF0dHI6IGF0dHJpYnV0ZXMubGVuZ3RoID4gMCA/ICgnICcgKyBhdHRyaWJ1dGVzLmpvaW4oJyAnKSkgOiAnJyxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgQ29udHJvbFNlYXJjaDsiLCJcclxuaW1wb3J0IGNvcmV1aVRhYmxlVXRpbHMgICAgZnJvbSAnLi4vY29yZXVpLnRhYmxlLnV0aWxzJztcclxuaW1wb3J0IGNvcmV1aVRhYmxlVHBsICAgICAgZnJvbSBcIi4uL2NvcmV1aS50YWJsZS50ZW1wbGF0ZXNcIjtcclxuaW1wb3J0IENvcmV1aVRhYmxlVXRpbHMgICAgZnJvbSBcIi4uL2NvcmV1aS50YWJsZS51dGlsc1wiO1xyXG5pbXBvcnQgY29yZXVpVGFibGVFbGVtZW50cyBmcm9tIFwiLi4vY29yZXVpLnRhYmxlLmVsZW1lbnRzXCI7XHJcbmltcG9ydCBDb250cm9sICAgICAgICAgICAgIGZyb20gXCIuLi9hYnN0cmFjdC9Db250cm9sXCI7XHJcblxyXG5cclxuY2xhc3MgQ29udHJvbENvbHVtbnMgZXh0ZW5kcyBDb250cm9sIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPXHJcbiAgICAgKiBAcGFyYW0ge2NvcmV1aVRhYmxlSW5zdGFuY2V9IHRhYmxlXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gICAgICAgICAgICAgIG9wdGlvbnNcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IodGFibGUsIG9wdGlvbnMpIHtcclxuXHJcbiAgICAgICAgb3B0aW9ucyA9ICQuZXh0ZW5kKHRydWUsIHtcclxuICAgICAgICAgICAgaWQ6IG51bGwsXHJcbiAgICAgICAgICAgIHR5cGU6ICdjb2x1bW5zJyxcclxuICAgICAgICAgICAgYnRuOiB7XHJcbiAgICAgICAgICAgICAgICBjb250ZW50OiAnPGkgY2xhc3M9XCJiaSBiaS1sYXlvdXQtdGhyZWUtY29sdW1uc1wiPjwvaT4nLFxyXG4gICAgICAgICAgICAgICAgYXR0cjoge1xyXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzOiAnYnRuIGJ0bi1vdXRsaW5lLXNlY29uZGFyeSdcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgYnRuQ29tcGxldGU6IHtcclxuICAgICAgICAgICAgICAgIGNvbnRlbnQ6IG51bGwsXHJcbiAgICAgICAgICAgICAgICBhdHRyOiB7IGNsYXNzOiAnYnRuIGJ0bi1wcmltYXJ5JyB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LCBvcHRpb25zKTtcclxuXHJcbiAgICAgICAgc3VwZXIodGFibGUsIG9wdGlvbnMpO1xyXG5cclxuXHJcbiAgICAgICAgaWYgKCAhIENvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QodGhpcy5fb3B0aW9ucy5idG4pKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX29wdGlvbnMuYnRuID0ge307XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoICEgQ29yZXVpVGFibGVVdGlscy5pc09iamVjdCh0aGlzLl9vcHRpb25zLmJ0bkNvbXBsZXRlKSkge1xyXG4gICAgICAgICAgICB0aGlzLl9vcHRpb25zLmJ0bkNvbXBsZXRlID0ge307XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoQ29yZXVpVGFibGVVdGlscy5pc09iamVjdCh0aGlzLl9vcHRpb25zLmJ0bkNvbXBsZXRlKSAmJlxyXG4gICAgICAgICAgICB0eXBlb2YgdGhpcy5fb3B0aW9ucy5idG5Db21wbGV0ZS5jb250ZW50ICE9PSAnc3RyaW5nJ1xyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICB0aGlzLl9vcHRpb25zLmJ0bkNvbXBsZXRlLmNvbnRlbnQgPSB0YWJsZS5nZXRMYW5nKCkuY29tcGxldGVcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KTQvtGA0LzQuNGA0L7QstCw0L3QuNC1INC60L7QvdGC0LXQvdGC0LAg0LTQu9GPINGA0LDQt9C80LXRidC10L3QuNGPINC90LAg0YHRgtGA0LDQvdC40YbQtVxyXG4gICAgICogQHJldHVybnMge2pRdWVyeX1cclxuICAgICAqL1xyXG4gICAgcmVuZGVyKCkge1xyXG5cclxuICAgICAgICBsZXQgdGhhdCAgICAgICA9IHRoaXM7XHJcbiAgICAgICAgbGV0IHRhYmxlICAgICAgPSB0aGlzLl90YWJsZTtcclxuICAgICAgICBsZXQgYXR0cmlidXRlcyA9IFtdO1xyXG5cclxuICAgICAgICBpZiAoY29yZXVpVGFibGVVdGlscy5pc09iamVjdCh0aGlzLl9vcHRpb25zLmJ0bi5hdHRyKSkge1xyXG4gICAgICAgICAgICAkLmVhY2godGhpcy5fb3B0aW9ucy5idG4uYXR0ciwgZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2YgdmFsdWUpID49IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzLnB1c2gobmFtZSArICc9XCInICsgdmFsdWUgKyAnXCInKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgYnRuID0gJChjb3JldWlUYWJsZVV0aWxzLnJlbmRlcihjb3JldWlUYWJsZVRwbFsnY29udHJvbHMvY29sdW1ucy5odG1sJ10sIHtcclxuICAgICAgICAgICAgYnRuQ29udGVudDogdGhpcy5fb3B0aW9ucy5idG4uY29udGVudCxcclxuICAgICAgICAgICAgYnRuQXR0cjogYXR0cmlidXRlcy5sZW5ndGggPiAwID8gKCcgJyArIGF0dHJpYnV0ZXMuam9pbignICcpKSA6ICcnLFxyXG4gICAgICAgIH0pKTtcclxuXHJcblxyXG4gICAgICAgIGJ0bi5jbGljayhmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGxldCBjb250YWluZXIgICAgICAgPSBjb3JldWlUYWJsZUVsZW1lbnRzLmdldENvbHVtbnNDb250YWluZXIodGFibGUuZ2V0SWQoKSk7XHJcbiAgICAgICAgICAgIGxldCBjb250YWluZXJTZWFyY2ggPSBjb3JldWlUYWJsZUVsZW1lbnRzLmdldFNlYXJjaENvbnRhaW5lcih0YWJsZS5nZXRJZCgpKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChjb250YWluZXJTZWFyY2hbMF0pIHtcclxuICAgICAgICAgICAgICAgIGNvbnRhaW5lclNlYXJjaC5oaWRlKCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChjb250YWluZXJbMF0pIHtcclxuICAgICAgICAgICAgICAgIGNvbnRhaW5lci5mYWRlVG9nZ2xlKCdmYXN0Jyk7XHJcblxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgbGV0IGNvbHVtbnMgICAgICAgICAgICA9IFtdO1xyXG4gICAgICAgICAgICAgICAgbGV0IHNob3dBbGwgICAgICAgICAgICA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBsZXQgYnRuQ29tcGxldGVBdHRyICAgID0gW107XHJcbiAgICAgICAgICAgICAgICBsZXQgYnRuQ29tcGxldGVDb250ZW50ID0gJyc7XHJcbiAgICAgICAgICAgICAgICBsZXQgd3JhcHBlciAgICAgICAgICAgID0gY29yZXVpVGFibGVFbGVtZW50cy5nZXRXcmFwcGVyKHRhYmxlLmdldElkKCkpO1xyXG5cclxuICAgICAgICAgICAgICAgIHRhYmxlLl9jb2x1bW5zLm1hcChmdW5jdGlvbiAoY29sdW1uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IG9wdGlvbnMgPSBjb2x1bW4uZ2V0T3B0aW9ucygpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnZmllbGQnKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlb2Ygb3B0aW9ucy5maWVsZCA9PT0gJ3N0cmluZycgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5maWVsZFxyXG4gICAgICAgICAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgaXNTaG93ID0gY29sdW1uLmlzU2hvdygpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgY29sdW1ucy5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkOiBvcHRpb25zLmZpZWxkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6IG9wdGlvbnMuaGFzT3duUHJvcGVydHkoJ2xhYmVsJykgJiYgdHlwZW9mIG9wdGlvbnMubGFiZWwgPT09ICdzdHJpbmcnID8gb3B0aW9ucy5sYWJlbCA6ICcnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvdzogaXNTaG93LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggISBpc1Nob3cpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3dBbGwgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgb3B0aW9ucyA9IHRoYXQuZ2V0T3B0aW9ucygpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICggISBjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KG9wdGlvbnMuYnRuQ29tcGxldGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5idG5Db21wbGV0ZSA9IHt9O1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmICggISBjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KG9wdGlvbnMuYnRuQ29tcGxldGUuYXR0cikpIHtcclxuICAgICAgICAgICAgICAgICAgICBvcHRpb25zLmJ0bkNvbXBsZXRlLmF0dHIgPSB7fTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5idG5Db21wbGV0ZS5hdHRyLmhhc093blByb3BlcnR5KCd0eXBlJykpIHtcclxuICAgICAgICAgICAgICAgICAgICBkZWxldGUgb3B0aW9ucy5idG5Db21wbGV0ZS5hdHRyLnR5cGU7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCAhIG9wdGlvbnMuYnRuQ29tcGxldGUuYXR0ci5oYXNPd25Qcm9wZXJ0eSgnY2xhc3MnKSB8fFxyXG4gICAgICAgICAgICAgICAgICAgIHR5cGVvZiBvcHRpb25zLmJ0bkNvbXBsZXRlLmF0dHIuY2xhc3MgIT09ICdzdHJpbmcnXHJcbiAgICAgICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgICAgICBvcHRpb25zLmJ0bkNvbXBsZXRlLmF0dHIuY2xhc3MgPSAnYnRuLWNvbXBsZXRlJztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5idG5Db21wbGV0ZS5hdHRyLmNsYXNzICs9ICcgYnRuLWNvbXBsZXRlJztcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY29yZXVpVGFibGVVdGlscy5pc09iamVjdChvcHRpb25zLmJ0bkNvbXBsZXRlLmF0dHIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJC5lYWNoKG9wdGlvbnMuYnRuQ29tcGxldGUuYXR0ciwgZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiB2YWx1ZSkgPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnRuQ29tcGxldGVBdHRyLnB1c2gobmFtZSArICc9XCInICsgdmFsdWUgKyAnXCInKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5idG5Db21wbGV0ZS5jb250ZW50ID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICAgICAgICAgIGJ0bkNvbXBsZXRlQ29udGVudCA9IG9wdGlvbnMuYnRuQ29tcGxldGUuY29udGVudDtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgICAgICAgICAgbGV0IGNvbnRhaW5lckxpc3QgPSAkKGNvcmV1aVRhYmxlVXRpbHMucmVuZGVyKGNvcmV1aVRhYmxlVHBsWydjb250cm9scy9jb2x1bW5zL2xpc3QuaHRtbCddLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2hvd0FsbDogICAgICAgICAgICBzaG93QWxsLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbHVtbnM6ICAgICAgICAgICAgY29sdW1ucyxcclxuICAgICAgICAgICAgICAgICAgICBidG5Db21wbGV0ZUF0dHI6ICAgIGJ0bkNvbXBsZXRlQXR0ci5sZW5ndGggPiAwID8gKCcgJyArIGJ0bkNvbXBsZXRlQXR0ci5qb2luKCcgJykpIDogJycsXHJcbiAgICAgICAgICAgICAgICAgICAgYnRuQ29tcGxldGVDb250ZW50OiBidG5Db21wbGV0ZUNvbnRlbnQsXHJcbiAgICAgICAgICAgICAgICAgICAgbGFuZzogICAgICAgICAgICAgICB0YWJsZS5nZXRMYW5nKCksXHJcbiAgICAgICAgICAgICAgICB9KSk7XHJcblxyXG5cclxuICAgICAgICAgICAgICAgICQoJy5jb3JldWktdGFibGVfX2NoZWNrX2FsbCBpbnB1dCcsIGNvbnRhaW5lckxpc3QpLmNoYW5nZShmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJCgnLmNvcmV1aS10YWJsZV9jaGVjay1jb2x1bW4gaW5wdXQnLCBjb250YWluZXJMaXN0KS5wcm9wKCdjaGVja2VkJywgJCh0aGlzKS5pcyhcIjpjaGVja2VkXCIpKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuXHJcbiAgICAgICAgICAgICAgICAkKCcuYnRuLWNvbXBsZXRlJywgY29udGFpbmVyTGlzdCkuY2xpY2soZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBjb2x1bW5zID0gW107XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICQoJy5jb3JldWktdGFibGVfY2hlY2stY29sdW1uIGlucHV0OmNoZWNrZWQnLCBjb250YWluZXJMaXN0KS5lYWNoKGZ1bmN0aW9uIChrZXksIGlucHV0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbHVtbnMucHVzaCgkKGlucHV0KS52YWwoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHRhYmxlLnNldENvbHVtbnNTaG93KGNvbHVtbnMpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBjb250YWluZXJMaXN0LmZhZGVPdXQoJ2Zhc3QnKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuXHJcbiAgICAgICAgICAgICAgICB3cmFwcGVyLmJlZm9yZShjb250YWluZXJMaXN0KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gYnRuO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBDb250cm9sQ29sdW1uczsiLCJcclxuaW1wb3J0IGNvcmV1aVRhYmxlVHBsICAgZnJvbSAnLi4vY29yZXVpLnRhYmxlLnRlbXBsYXRlcyc7XHJcbmltcG9ydCBjb3JldWlUYWJsZVV0aWxzIGZyb20gJy4uL2NvcmV1aS50YWJsZS51dGlscyc7XHJcbmltcG9ydCBDb250cm9sICAgICAgICAgIGZyb20gXCIuLi9hYnN0cmFjdC9Db250cm9sXCI7XHJcblxyXG5jbGFzcyBDb250cm9sQ2FwdGlvbiBleHRlbmRzIENvbnRyb2wge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y9cclxuICAgICAqIEBwYXJhbSB7Y29yZXVpVGFibGVJbnN0YW5jZX0gdGFibGVcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSAgICAgICAgICAgICAgb3B0aW9uc1xyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3Rvcih0YWJsZSwgb3B0aW9ucykge1xyXG5cclxuICAgICAgICBvcHRpb25zID0gJC5leHRlbmQodHJ1ZSwge1xyXG4gICAgICAgICAgICBpZDogbnVsbCxcclxuICAgICAgICAgICAgdHlwZTogJ2NhcHRpb24nLFxyXG4gICAgICAgICAgICB0aXRsZTogbnVsbCxcclxuICAgICAgICAgICAgZGVzY3JpcHRpb246IG51bGwsXHJcbiAgICAgICAgICAgIHZhbHVlOiBudWxsLFxyXG4gICAgICAgIH0sIG9wdGlvbnMpO1xyXG5cclxuICAgICAgICBzdXBlcih0YWJsZSwgb3B0aW9ucyk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KTQvtGA0LzQuNGA0L7QstCw0L3QuNC1INC60L7QvdGC0LXQvdGC0LAg0LTQu9GPINGA0LDQt9C80LXRidC10L3QuNGPINC90LAg0YHRgtGA0LDQvdC40YbQtVxyXG4gICAgICogQHJldHVybnMge3N0cmluZ31cclxuICAgICAqL1xyXG4gICAgcmVuZGVyKCkge1xyXG5cclxuICAgICAgICByZXR1cm4gY29yZXVpVGFibGVVdGlscy5yZW5kZXIoY29yZXVpVGFibGVUcGxbJ2NvbnRyb2xzL2NhcHRpb24uaHRtbCddLCB7XHJcbiAgICAgICAgICAgIHRpdGxlOiB0aGlzLl9vcHRpb25zLnRpdGxlLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogdGhpcy5fb3B0aW9ucy5kZXNjcmlwdGlvbixcclxuICAgICAgICAgICAgdmFsdWU6IHRoaXMuX29wdGlvbnMudmFsdWUsXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IENvbnRyb2xDYXB0aW9uOyIsIlxyXG5pbXBvcnQgY29yZXVpVGFibGVUcGwgICBmcm9tIFwiLi4vY29yZXVpLnRhYmxlLnRlbXBsYXRlc1wiO1xyXG5pbXBvcnQgY29yZXVpVGFibGVVdGlscyBmcm9tIFwiLi4vY29yZXVpLnRhYmxlLnV0aWxzXCI7XHJcbmltcG9ydCBDb250cm9sICAgICAgICAgIGZyb20gXCIuLi9hYnN0cmFjdC9Db250cm9sXCI7XHJcblxyXG5cclxuY2xhc3MgQ29udHJvbEZpbHRlckNsZWFyIGV4dGVuZHMgQ29udHJvbCB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQmNC90LjRhtC40LDQu9C40LfQsNGG0LjRj1xyXG4gICAgICogQHBhcmFtIHtjb3JldWlUYWJsZUluc3RhbmNlfSB0YWJsZVxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9ICAgICAgICAgICAgICBvcHRpb25zXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKHRhYmxlLCBvcHRpb25zKSB7XHJcblxyXG4gICAgICAgIG9wdGlvbnMgPSAkLmV4dGVuZCh0cnVlLCB7XHJcbiAgICAgICAgICAgIGlkOiBudWxsLFxyXG4gICAgICAgICAgICB0eXBlOiAnZmlsdGVyX2NsZWFyJyxcclxuICAgICAgICAgICAgY29udGVudDogbnVsbCxcclxuICAgICAgICAgICAgYXR0cjoge1xyXG4gICAgICAgICAgICAgICAgY2xhc3M6ICdidG4gYnRuLXNlY29uZGFyeSdcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9LCBvcHRpb25zKTtcclxuXHJcbiAgICAgICAgc3VwZXIodGFibGUsIG9wdGlvbnMpO1xyXG5cclxuICAgICAgICBpZiAoICEgdGhpcy5fb3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnY29udGVudCcpIHx8XHJcbiAgICAgICAgICAgIHR5cGVvZiB0aGlzLl9vcHRpb25zLmNvbnRlbnQgIT09ICdzdHJpbmcnXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX29wdGlvbnMuY29udGVudCA9ICc8aSBjbGFzcz1cImJpIGJpLXhcIj48L2k+ICcgKyB0YWJsZS5nZXRMYW5nKCkuY2xlYXJcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KTQvtGA0LzQuNGA0L7QstCw0L3QuNC1INC60L7QvdGC0LXQvdGC0LBcclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIHJlbmRlcigpIHtcclxuXHJcbiAgICAgICAgbGV0IG9wdGlvbnMgPSB0aGlzLmdldE9wdGlvbnMoKTtcclxuICAgICAgICBsZXQgdGFibGUgICA9IHRoaXMuX3RhYmxlO1xyXG5cclxuICAgICAgICBpZiAoICEgY29yZXVpVGFibGVVdGlscy5pc09iamVjdChvcHRpb25zLmF0dHIpKSB7XHJcbiAgICAgICAgICAgIG9wdGlvbnMuYXR0ciA9IHt9O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKG9wdGlvbnMuYXR0ci5oYXNPd25Qcm9wZXJ0eSgndHlwZScpKSB7XHJcbiAgICAgICAgICAgIGRlbGV0ZSBvcHRpb25zLmF0dHIudHlwZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBmaWx0ZXJEYXRhID0gdGFibGUuZ2V0RmlsdGVyRGF0YSgpO1xyXG5cclxuICAgICAgICBpZiAoZmlsdGVyRGF0YS5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuYXR0ci5oYXNPd25Qcm9wZXJ0eSgnc3R5bGUnKSAmJiB0eXBlb2Ygb3B0aW9ucy5hdHRyLnN0eWxlID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICAgICAgb3B0aW9ucy5hdHRyLnN0eWxlICs9ICc7ZGlzcGxheTpub25lOydcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIG9wdGlvbnMuYXR0ci5zdHlsZSA9IFwiZGlzcGxheTpub25lXCJcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IGF0dHIgPSBbXTtcclxuXHJcbiAgICAgICAgJC5lYWNoKG9wdGlvbnMuYXR0ciwgZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XHJcbiAgICAgICAgICAgIGlmIChbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiB2YWx1ZSkgPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgYXR0ci5wdXNoKG5hbWUgKyAnPVwiJyArIHZhbHVlICsgJ1wiJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcblxyXG4gICAgICAgIGxldCBidXR0b24gPSAkKGNvcmV1aVRhYmxlVXRpbHMucmVuZGVyKGNvcmV1aVRhYmxlVHBsWydjb250cm9scy9maWx0ZXJfY2xlYXIuaHRtbCddLCB7XHJcbiAgICAgICAgICAgIGF0dHI6IGF0dHIubGVuZ3RoID4gMCA/ICgnICcgKyBhdHRyLmpvaW4oJyAnKSkgOiAnJyxcclxuICAgICAgICAgICAgY29udGVudDogb3B0aW9ucy5jb250ZW50ID8gb3B0aW9ucy5jb250ZW50IDogJycsXHJcbiAgICAgICAgfSkpO1xyXG5cclxuXHJcbiAgICAgICAgYnV0dG9uLmNsaWNrKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdGFibGUuY2xlYXJGaWx0ZXJzKCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG5cclxuICAgICAgICB0YWJsZS5vbignZmlsdGVyc19jaGFuZ2UnLCBmdW5jdGlvbiAoZmlsdGVyRGF0YSkge1xyXG4gICAgICAgICAgICBpZiAoZmlsdGVyRGF0YS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICBidXR0b24uc2hvdygpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgYnV0dG9uLmhpZGUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gYnV0dG9uO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBDb250cm9sRmlsdGVyQ2xlYXI7IiwiXHJcbmltcG9ydCBjb3JldWlUYWJsZVRwbCAgIGZyb20gXCIuLi9jb3JldWkudGFibGUudGVtcGxhdGVzXCI7XHJcbmltcG9ydCBjb3JldWlUYWJsZVV0aWxzIGZyb20gJy4uL2NvcmV1aS50YWJsZS51dGlscyc7XHJcbmltcG9ydCBDb250cm9sICAgICAgICAgIGZyb20gXCIuLi9hYnN0cmFjdC9Db250cm9sXCI7XHJcblxyXG5jbGFzcyBDb250cm9sRGl2aWRlciBleHRlbmRzIENvbnRyb2wge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y9cclxuICAgICAqIEBwYXJhbSB7Y29yZXVpVGFibGVJbnN0YW5jZX0gdGFibGVcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSAgICAgICAgICAgICAgb3B0aW9uc1xyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3Rvcih0YWJsZSwgb3B0aW9ucykge1xyXG5cclxuICAgICAgICBvcHRpb25zID0gJC5leHRlbmQodHJ1ZSwge1xyXG4gICAgICAgICAgICB0eXBlOiAnZGl2aWRlcicsXHJcbiAgICAgICAgICAgIHdpZHRoOiA0MCxcclxuICAgICAgICAgICAgdGV4dDogJycsXHJcbiAgICAgICAgICAgIGF0dHI6IHtcclxuICAgICAgICAgICAgICAgIGNsYXNzOiAnZC1pbmxpbmUtYmxvY2sgdGV4dC1ib2R5LXRlcnRpYXJ5IHRleHQtY2VudGVyJyxcclxuICAgICAgICAgICAgICAgIHN0eWxlOiAnaGVpZ2h0OjIwcHgnXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LCBvcHRpb25zKTtcclxuXHJcbiAgICAgICAgc3VwZXIodGFibGUsIG9wdGlvbnMpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCk0L7RgNC80LjRgNC+0LLQsNC90LjQtSDQutC+0L3RgtC10L3RgtCwINC00LvRjyDRgNCw0LfQvNC10YnQtdC90LjRjyDQvdCwINGB0YLRgNCw0L3QuNGG0LVcclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIHJlbmRlcigpIHtcclxuXHJcbiAgICAgICAgbGV0IGF0dHJpYnV0ZXMgPSBbXTtcclxuXHJcbiAgICAgICAgdGhpcy5fb3B0aW9ucy5hdHRyID0gY29yZXVpVGFibGVVdGlscy5tZXJnZUF0dHIodGhpcy5fb3B0aW9ucy5hdHRyLCB7IHN0eWxlOiAnd2lkdGg6JyArIHRoaXMuX29wdGlvbnMud2lkdGggKyAncHgnIH0pO1xyXG5cclxuICAgICAgICAkLmVhY2godGhpcy5fb3B0aW9ucy5hdHRyLCBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcclxuICAgICAgICAgICAgaWYgKFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIHZhbHVlKSA+PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzLnB1c2gobmFtZSArICc9XCInICsgdmFsdWUgKyAnXCInKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gY29yZXVpVGFibGVVdGlscy5yZW5kZXIoY29yZXVpVGFibGVUcGxbJ2NvbnRyb2xzL2RpdmlkZXIuaHRtbCddLCB7XHJcbiAgICAgICAgICAgIGF0dHI6IGF0dHJpYnV0ZXMubGVuZ3RoID4gMCA/ICgnICcgKyBhdHRyaWJ1dGVzLmpvaW4oJyAnKSkgOiAnJyxcclxuICAgICAgICAgICAgdGV4dDogdHlwZW9mIHRoaXMuX29wdGlvbnMudGV4dCA9PT0gJ3N0cmluZycgJiYgdGhpcy5fb3B0aW9ucy50ZXh0ICE9PSAnJyA/IHRoaXMuX29wdGlvbnMudGV4dCA6ICcnLFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBDb250cm9sRGl2aWRlcjsiLCJpbXBvcnQgY29yZXVpVGFibGVVdGlscyBmcm9tIFwiLi4vY29yZXVpLnRhYmxlLnV0aWxzXCI7XHJcblxyXG5cclxuY2xhc3MgRmlsdGVyIHtcclxuXHJcbiAgICBfaWQgICAgICA9IG51bGw7XHJcbiAgICBfdGFibGUgICA9IG51bGw7XHJcbiAgICBfdmFsdWUgICA9IG51bGw7XHJcbiAgICBfY29udHJvbCA9IG51bGw7XHJcbiAgICBfb3B0aW9ucyA9IHtcclxuICAgICAgICBpZDogJycsXHJcbiAgICAgICAgdHlwZTogJycsXHJcbiAgICAgICAgZmllbGQ6IG51bGxcclxuICAgIH07XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y9cclxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSB0YWJsZVxyXG4gICAgICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnNcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IodGFibGUsIG9wdGlvbnMpIHtcclxuXHJcbiAgICAgICAgdGhpcy5fdGFibGUgICA9IHRhYmxlO1xyXG4gICAgICAgIHRoaXMuX29wdGlvbnMgPSAkLmV4dGVuZCh0cnVlLCB0aGlzLl9vcHRpb25zLCBvcHRpb25zKTtcclxuICAgICAgICB0aGlzLl9pZCAgICAgID0gdGhpcy5fb3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnaWQnKSAmJiB0eXBlb2YgdGhpcy5fb3B0aW9ucy5pZCA9PT0gJ3N0cmluZycgJiYgdGhpcy5fb3B0aW9ucy5pZFxyXG4gICAgICAgICAgICA/IHRoaXMuX29wdGlvbnMuaWRcclxuICAgICAgICAgICAgOiBjb3JldWlUYWJsZVV0aWxzLmhhc2hDb2RlKCk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC/0LDRgNCw0LzQtdGC0YDQvtCyXHJcbiAgICAgKiBAcmV0dXJucyB7b2JqZWN0fVxyXG4gICAgICovXHJcbiAgICBnZXRPcHRpb25zKCkge1xyXG4gICAgICAgIHJldHVybiAkLmV4dGVuZCh0cnVlLCB7fSwgdGhpcy5fb3B0aW9ucyk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1IGlkXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxyXG4gICAgICovXHJcbiAgICBnZXRJZCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5faWQ7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KTQuNC70YzRgtGA0LDRhtC40Y8g0LTQsNC90L3Ri9GFXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBmaWVsZFZhbHVlXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBzZWFyY2hWYWx1ZVxyXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAgICAgKi9cclxuICAgIGZpbHRlcihmaWVsZFZhbHVlLCBzZWFyY2hWYWx1ZSkge1xyXG5cclxuICAgICAgICBpZiAoWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2YgZmllbGRWYWx1ZSkgPCAwIHx8XHJcbiAgICAgICAgICAgIFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIHNlYXJjaFZhbHVlKSA8IDBcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGZpZWxkVmFsdWUudG9TdHJpbmcoKS50b0xvd2VyQ2FzZSgpLmluZGV4T2YoXHJcbiAgICAgICAgICAgIHNlYXJjaFZhbHVlLnRvU3RyaW5nKCkudG9Mb3dlckNhc2UoKVxyXG4gICAgICAgICkgPj0gMDtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQo9GB0YLQsNC90L7QstC60LAg0LfQvdCw0YfQtdC90LjRj1xyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXHJcbiAgICAgKi9cclxuICAgIHNldFZhbHVlKHZhbHVlKSB7fVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSDQt9C90LDRh9C10L3QuNGPXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfG51bGx9XHJcbiAgICAgKi9cclxuICAgIGdldFZhbHVlICgpIHt9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC90LDQt9Cy0LDQvdC40LUg0L/QvtC70Y9cclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd8bnVsbH1cclxuICAgICAqL1xyXG4gICAgZ2V0RmllbGQgKCkge1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5fb3B0aW9ucy5maWVsZDtcclxuICAgIH1cclxuXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KTQvtGA0LzQuNGA0L7QstCw0L3QuNC1INC60L7QvdGC0LXQvdGC0LBcclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIHJlbmRlciAoKSB7fVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBGaWx0ZXI7IiwiXHJcbmltcG9ydCBjb3JldWlUYWJsZVRwbCAgICAgIGZyb20gXCIuLi9jb3JldWkudGFibGUudGVtcGxhdGVzXCI7XHJcbmltcG9ydCBjb3JldWlUYWJsZVV0aWxzICAgIGZyb20gXCIuLi9jb3JldWkudGFibGUudXRpbHNcIjtcclxuaW1wb3J0IGNvcmV1aVRhYmxlRWxlbWVudHMgZnJvbSBcIi4uL2NvcmV1aS50YWJsZS5lbGVtZW50c1wiO1xyXG5pbXBvcnQgRmlsdGVyICAgICAgICAgICAgICBmcm9tIFwiLi4vYWJzdHJhY3QvRmlsdGVyXCI7XHJcblxyXG5jbGFzcyBGaWx0ZXJUZXh0IGV4dGVuZHMgRmlsdGVyIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPXHJcbiAgICAgKiBAcGFyYW0ge2NvcmV1aVRhYmxlSW5zdGFuY2V9IHRhYmxlXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gICAgICAgICAgICAgIG9wdGlvbnNcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IodGFibGUsIG9wdGlvbnMpIHtcclxuXHJcbiAgICAgICAgb3B0aW9ucyA9ICQuZXh0ZW5kKHRydWUsIHtcclxuICAgICAgICAgICAgaWQ6IG51bGwsXHJcbiAgICAgICAgICAgIHR5cGU6ICd0ZXh0JyxcclxuICAgICAgICAgICAgZmllbGQ6IG51bGwsXHJcbiAgICAgICAgICAgIGxhYmVsOiBudWxsLFxyXG4gICAgICAgICAgICB2YWx1ZTogbnVsbCxcclxuICAgICAgICAgICAgd2lkdGg6IDIwMCxcclxuICAgICAgICAgICAgYXV0b1NlYXJjaDogbnVsbCxcclxuICAgICAgICAgICAgYXR0cjoge1xyXG4gICAgICAgICAgICAgICAgY2xhc3M6IFwiZm9ybS1jb250cm9sXCIsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGJ0bjoge1xyXG4gICAgICAgICAgICAgICAgYXR0cjogeyBjbGFzczogXCJidG4gYnRuLW91dGxpbmUtc2Vjb25kYXJ5IGJvcmRlci1zZWNvbmRhcnktc3VidGxlXCIgfSxcclxuICAgICAgICAgICAgICAgIGNvbnRlbnQ6ICc8aSBjbGFzcz1cImJpIGJpLXNlYXJjaFwiPjwvaT4nXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LCBvcHRpb25zKTtcclxuXHJcbiAgICAgICAgc3VwZXIodGFibGUsIG9wdGlvbnMpO1xyXG5cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMudmFsdWUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5zZXRWYWx1ZSh0aGlzLl9vcHRpb25zLnZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KPRgdGC0LDQvdC+0LLQutCwINC30L3QsNGH0LXQvdC40Y9cclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfG51bWJlcnxudWxsfSB2YWx1ZVxyXG4gICAgICovXHJcbiAgICBzZXRWYWx1ZSh2YWx1ZSkge1xyXG5cclxuICAgICAgICBpZiAodmFsdWUgIT09IG51bGwgJiZcclxuICAgICAgICAgICAgdHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJyAmJlxyXG4gICAgICAgICAgICB0eXBlb2YgdmFsdWUgIT09ICdudW1iZXInXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX3ZhbHVlID0gdmFsdWVcclxuXHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9jb250cm9sKSB7XHJcbiAgICAgICAgICAgICQoJ2lucHV0JywgdGhpcy5fY29udHJvbCkudmFsKFxyXG4gICAgICAgICAgICAgICAgdGhpcy5fdmFsdWUgPT09IG51bGwgPyAnJyA6IHRoaXMuX3ZhbHVlXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSDQt9C90LDRh9C10L3QuNGPXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfG51bGx9XHJcbiAgICAgKi9cclxuICAgIGdldFZhbHVlKCkge1xyXG5cclxuICAgICAgICBpZiAodGhpcy5fY29udHJvbCkge1xyXG4gICAgICAgICAgICBsZXQgdmFsdWUgPSAkKCdpbnB1dCcsIHRoaXMuX2NvbnRyb2wpLnZhbCgpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYgdmFsdWUgIT09ICcnKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLl92YWx1ZTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQpNC+0YDQvNC40YDQvtCy0LDQvdC40LUg0LrQvtC90YLQtdC90YLQsFxyXG4gICAgICogQHJldHVybnMge3N0cmluZ31cclxuICAgICAqL1xyXG4gICAgcmVuZGVyKCkge1xyXG5cclxuICAgICAgICBsZXQgb3B0aW9ucyA9IHRoaXMuZ2V0T3B0aW9ucygpO1xyXG4gICAgICAgIGxldCBsYWJlbCAgID0gdHlwZW9mIG9wdGlvbnMubGFiZWwgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBvcHRpb25zLmxhYmVsID09PSAnbnVtYmVyJ1xyXG4gICAgICAgICAgICA/IG9wdGlvbnMubGFiZWxcclxuICAgICAgICAgICAgOiAnJztcclxuXHJcbiAgICAgICAgaWYgKCAhIGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3Qob3B0aW9ucy5hdHRyKSkge1xyXG4gICAgICAgICAgICBvcHRpb25zLmF0dHIgPSB7fTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChvcHRpb25zLmhhc093blByb3BlcnR5KCd3aWR0aCcpICYmXHJcbiAgICAgICAgICAgIGNvcmV1aVRhYmxlVXRpbHMuaXNOdW1lcmljKG9wdGlvbnMud2lkdGgpXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmF0dHIuaGFzT3duUHJvcGVydHkoJ3N0eWxlJykpIHtcclxuICAgICAgICAgICAgICAgIG9wdGlvbnMuYXR0clsnc3R5bGUnXSArPSAnO3dpZHRoOicgKyBvcHRpb25zLndpZHRoICsgJ3B4JztcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIG9wdGlvbnMuYXR0clsnc3R5bGUnXSA9ICd3aWR0aDonICsgb3B0aW9ucy53aWR0aCArICdweCc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIG9wdGlvbnMuYXR0clsndmFsdWUnXSA9IHR5cGVvZiB0aGlzLl92YWx1ZSA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIHRoaXMuX3ZhbHVlID09PSAnbnVtYmVyJ1xyXG4gICAgICAgICAgICA/IHRoaXMuX3ZhbHVlXHJcbiAgICAgICAgICAgIDogJyc7XHJcblxyXG4gICAgICAgIGlmIChvcHRpb25zLmF0dHIuaGFzT3duUHJvcGVydHkoJ3R5cGUnKSkge1xyXG4gICAgICAgICAgICBkZWxldGUgb3B0aW9ucy5hdHRyLnR5cGU7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcblxyXG4gICAgICAgIGlmICggISBjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KG9wdGlvbnMuYnRuKSkge1xyXG4gICAgICAgICAgICBvcHRpb25zLmJ0biA9IHt9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoICEgY29yZXVpVGFibGVVdGlscy5pc09iamVjdChvcHRpb25zLmJ0bi5hdHRyKSkge1xyXG4gICAgICAgICAgICBvcHRpb25zLmJ0bi5hdHRyID0ge307XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAob3B0aW9ucy5idG4uYXR0ci5oYXNPd25Qcm9wZXJ0eSgndHlwZScpKSB7XHJcbiAgICAgICAgICAgIGRlbGV0ZSBvcHRpb25zLmJ0bi5hdHRyLnR5cGU7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgbGV0IGF0dHIgICAgPSBbXTtcclxuICAgICAgICBsZXQgYXR0ckJ0biA9IFtdO1xyXG4gICAgICAgIGxldCB0YWJsZSAgID0gdGhpcy5fdGFibGU7XHJcblxyXG4gICAgICAgICQuZWFjaChvcHRpb25zLmF0dHIsIGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xyXG4gICAgICAgICAgICBhdHRyLnB1c2gobmFtZSArICc9XCInICsgdmFsdWUgKyAnXCInKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICAkLmVhY2gob3B0aW9ucy5idG4uYXR0ciwgZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XHJcbiAgICAgICAgICAgIGF0dHJCdG4ucHVzaChuYW1lICsgJz1cIicgKyB2YWx1ZSArICdcIicpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLl9jb250cm9sID0gJChjb3JldWlUYWJsZVV0aWxzLnJlbmRlcihjb3JldWlUYWJsZVRwbFsnZmlsdGVycy90ZXh0Lmh0bWwnXSwge1xyXG4gICAgICAgICAgICBhdHRyOiBhdHRyLmxlbmd0aCA+IDAgPyAoJyAnICsgYXR0ci5qb2luKCcgJykpIDogJycsXHJcbiAgICAgICAgICAgIGxhYmVsOiBsYWJlbCxcclxuICAgICAgICAgICAgYnRuQXR0cjogYXR0ckJ0bi5sZW5ndGggPiAwID8gKCcgJyArIGF0dHJCdG4uam9pbignICcpKSA6ICcnLFxyXG4gICAgICAgICAgICBidG5Db250ZW50OiBvcHRpb25zLmJ0bi5jb250ZW50ID8gb3B0aW9ucy5idG4uY29udGVudCA6ICcnLFxyXG4gICAgICAgIH0pKTtcclxuXHJcbiAgICAgICAgJCgnaW5wdXQnLCB0aGlzLl9jb250cm9sKS5rZXl1cChmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgIGlmIChlLmtleSA9PT0gJ0VudGVyJyB8fCBlLmtleUNvZGUgPT09IDEzKSB7XHJcbiAgICAgICAgICAgICAgICB0YWJsZS5zZWFyY2hSZWNvcmRzKCk7XHJcblxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBvcHRpb25zLmF1dG9TZWFyY2ggPT09ICdib29sZWFuJyAmJiBvcHRpb25zLmF1dG9TZWFyY2gpIHtcclxuICAgICAgICAgICAgICAgIHRhYmxlLnNlYXJjaFJlY29yZHMoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAkKCdidXR0b24nLCB0aGlzLl9jb250cm9sKS5jbGljayhmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgIHRhYmxlLnNlYXJjaFJlY29yZHMoKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbnRyb2w7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IEZpbHRlclRleHQ7IiwiXHJcbmltcG9ydCBjb3JldWlUYWJsZVRwbCAgIGZyb20gXCIuLi9jb3JldWkudGFibGUudGVtcGxhdGVzXCI7XHJcbmltcG9ydCBjb3JldWlUYWJsZVV0aWxzIGZyb20gXCIuLi9jb3JldWkudGFibGUudXRpbHNcIjtcclxuaW1wb3J0IEZpbHRlciAgICAgICAgICAgZnJvbSBcIi4uL2Fic3RyYWN0L0ZpbHRlclwiO1xyXG5cclxuY2xhc3MgRmlsdGVyTnVtYmVyIGV4dGVuZHMgRmlsdGVyIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPXHJcbiAgICAgKiBAcGFyYW0ge2NvcmV1aVRhYmxlSW5zdGFuY2V9IHRhYmxlXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gICAgICAgICAgICAgIG9wdGlvbnNcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IodGFibGUsIG9wdGlvbnMpIHtcclxuXHJcbiAgICAgICAgb3B0aW9ucyA9ICQuZXh0ZW5kKHRydWUsIHtcclxuICAgICAgICAgICAgaWQ6IG51bGwsXHJcbiAgICAgICAgICAgIHR5cGU6ICdudW1iZXInLFxyXG4gICAgICAgICAgICBmaWVsZDogbnVsbCxcclxuICAgICAgICAgICAgbGFiZWw6IG51bGwsXHJcbiAgICAgICAgICAgIHZhbHVlOiBudWxsLFxyXG4gICAgICAgICAgICB3aWR0aDogOTAsXHJcbiAgICAgICAgICAgIGF0dHI6IHtcclxuICAgICAgICAgICAgICAgIGNsYXNzOiBcImZvcm0tY29udHJvbFwiLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBidG46IHtcclxuICAgICAgICAgICAgICAgIGF0dHI6IHsgY2xhc3M6IFwiYnRuIGJ0bi1vdXRsaW5lLXNlY29uZGFyeSBib3JkZXItc2Vjb25kYXJ5LXN1YnRsZVwiIH0sXHJcbiAgICAgICAgICAgICAgICBjb250ZW50OiAnPGkgY2xhc3M9XCJiaSBiaS1zZWFyY2hcIj48L2k+J1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSwgb3B0aW9ucyk7XHJcblxyXG4gICAgICAgIHN1cGVyKHRhYmxlLCBvcHRpb25zKTtcclxuXHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLnZhbHVlICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0VmFsdWUodGhpcy5fb3B0aW9ucy52YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCj0YHRgtCw0L3QvtCy0LrQsCDQt9C90LDRh9C10L3QuNGPXHJcbiAgICAgKiBAcGFyYW0ge29iamVjdHxudWxsfSB2YWx1ZVxyXG4gICAgICovXHJcbiAgICBzZXRWYWx1ZSh2YWx1ZSkge1xyXG5cclxuICAgICAgICBpZiAodmFsdWUpIHtcclxuICAgICAgICAgICAgaWYgKCAhIGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QodmFsdWUpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGxldCBudW1iZXJTdGFydCA9IG51bGw7XHJcbiAgICAgICAgICAgIGxldCBudW1iZXJFbmQgICA9IG51bGw7XHJcblxyXG4gICAgICAgICAgICBpZiAodmFsdWUuaGFzT3duUHJvcGVydHkoJ3N0YXJ0JykgJiZcclxuICAgICAgICAgICAgICAgICh0eXBlb2YgdmFsdWUuc3RhcnQgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiB2YWx1ZS5zdGFydCAhPT0gJ251bWJlcicpICYmXHJcbiAgICAgICAgICAgICAgICB2YWx1ZS5zdGFydCAhPT0gJycgJiZcclxuICAgICAgICAgICAgICAgICEgaXNOYU4oTnVtYmVyKHZhbHVlLnN0YXJ0KSlcclxuICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICBudW1iZXJTdGFydCA9IHZhbHVlLnN0YXJ0O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodmFsdWUuaGFzT3duUHJvcGVydHkoJ2VuZCcpICYmXHJcbiAgICAgICAgICAgICAgICAodHlwZW9mIHZhbHVlLmVuZCA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIHZhbHVlLmVuZCAhPT0gJ251bWJlcicpICYmXHJcbiAgICAgICAgICAgICAgICB2YWx1ZS5lbmQgIT09ICcnICYmXHJcbiAgICAgICAgICAgICAgICAhIGlzTmFOKE51bWJlcih2YWx1ZS5lbmQpKVxyXG4gICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgIG51bWJlckVuZCA9IHZhbHVlLmVuZDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKG51bWJlclN0YXJ0ID09PSBudWxsICYmIG51bWJlckVuZCA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fdmFsdWUgPSBudWxsO1xyXG5cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3ZhbHVlID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0OiBudW1iZXJTdGFydCxcclxuICAgICAgICAgICAgICAgICAgICBlbmQ6ICAgbnVtYmVyRW5kXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3ZhbHVlID0gbnVsbDtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICBpZiAodGhpcy5fY29udHJvbCkge1xyXG4gICAgICAgICAgICBsZXQgaW5wdXRTdGFydCA9IHRoaXMuX2NvbnRyb2wucGFyZW50KCkuZmluZCgnaW5wdXQubnVtYmVyLXN0YXJ0Jyk7XHJcbiAgICAgICAgICAgIGxldCBpbnB1dEVuZCAgID0gdGhpcy5fY29udHJvbC5wYXJlbnQoKS5maW5kKCdpbnB1dC5udW1iZXItZW5kJyk7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5fdmFsdWUgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIGlucHV0U3RhcnQudmFsKCcnKTtcclxuICAgICAgICAgICAgICAgIGlucHV0RW5kLnZhbCgnJyk7XHJcblxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QodGhpcy5fdmFsdWUpKSB7XHJcbiAgICAgICAgICAgICAgICBpbnB1dFN0YXJ0LnZhbCh0eXBlb2YgdGhpcy5fdmFsdWUuc3RhcnQgIT09IG51bGwgPyB0aGlzLl92YWx1ZS5zdGFydCA6ICcnKTtcclxuICAgICAgICAgICAgICAgIGlucHV0RW5kLnZhbCh0eXBlb2YgdGhpcy5fdmFsdWUuZW5kICE9PSBudWxsID8gdGhpcy5fdmFsdWUuZW5kIDogJycpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSDQt9C90LDRh9C10L3QuNGPXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxyXG4gICAgICovXHJcbiAgICBnZXRWYWx1ZSgpIHtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX2NvbnRyb2wpIHtcclxuICAgICAgICAgICAgbGV0IGlucHV0U3RhcnQgPSB0aGlzLl9jb250cm9sLnBhcmVudCgpLmZpbmQoJ2lucHV0Lm51bWJlci1zdGFydCcpO1xyXG4gICAgICAgICAgICBsZXQgaW5wdXRFbmQgICA9IHRoaXMuX2NvbnRyb2wucGFyZW50KCkuZmluZCgnaW5wdXQubnVtYmVyLWVuZCcpO1xyXG5cclxuICAgICAgICAgICAgaWYgKGlucHV0U3RhcnRbMF0gJiYgaW5wdXRFbmRbMF0pIHtcclxuICAgICAgICAgICAgICAgIGxldCB2YWx1ZVN0YXJ0ID0gaW5wdXRTdGFydC52YWwoKTtcclxuICAgICAgICAgICAgICAgIGxldCB2YWx1ZUVuZCAgID0gaW5wdXRFbmQudmFsKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICAgICAgICAgICh0eXBlb2YgdmFsdWVTdGFydCA9PT0gJ3N0cmluZycgJiYgdmFsdWVTdGFydCAhPT0gJycpIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgKHR5cGVvZiB2YWx1ZUVuZCA9PT0gJ3N0cmluZycgJiYgdmFsdWVFbmQgIT09ICcnKVxyXG4gICAgICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IHZhbHVlU3RhcnQgIT09ICcnICYmICEgaXNOYU4oTnVtYmVyKHZhbHVlU3RhcnQpKSA/IE51bWJlcih2YWx1ZVN0YXJ0KSA6IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuZDogdmFsdWVFbmQgIT09ICcnICYmICEgaXNOYU4oTnVtYmVyKHZhbHVlRW5kKSkgPyBOdW1iZXIodmFsdWVFbmQpIDogbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLl92YWx1ZTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQpNC40LvRjNGC0YDQsNGG0LjRjyDQtNCw0L3QvdGL0YVcclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9ICAgICAgICAgICAgICBmaWVsZFZhbHVlXHJcbiAgICAgKiBAcmV0dXJucyB7QXJyYXl8c3RyaW5nfG51bWJlcn0gc2VhcmNoVmFsdWVcclxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gICAgICovXHJcbiAgICBmaWx0ZXIoZmllbGRWYWx1ZSwgc2VhcmNoVmFsdWUpIHtcclxuXHJcbiAgICAgICAgaWYgKFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIGZpZWxkVmFsdWUpIDwgMCB8fFxyXG4gICAgICAgICAgICAhIGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3Qoc2VhcmNoVmFsdWUpIHx8XHJcbiAgICAgICAgICAgIChcclxuICAgICAgICAgICAgICAgIFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIHNlYXJjaFZhbHVlLnN0YXJ0KSA8IDAgJiZcclxuICAgICAgICAgICAgICAgIFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIHNlYXJjaFZhbHVlLmVuZCkgPCAwXHJcbiAgICAgICAgICAgIClcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIGxldCBpc3NldFN0YXJ0ID0gWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2Ygc2VhcmNoVmFsdWUuc3RhcnQpID49IDA7XHJcbiAgICAgICAgbGV0IGlzc2V0RW5kICAgPSBbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiBzZWFyY2hWYWx1ZS5lbmQpID49IDA7XHJcblxyXG4gICAgICAgIGlmIChpc3NldFN0YXJ0ICYmIGlzc2V0RW5kKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmaWVsZFZhbHVlID49IHNlYXJjaFZhbHVlLnN0YXJ0ICYmIGZpZWxkVmFsdWUgPD0gc2VhcmNoVmFsdWUuZW5kO1xyXG5cclxuICAgICAgICB9IGVsc2UgaWYgKGlzc2V0U3RhcnQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZpZWxkVmFsdWUgPj0gc2VhcmNoVmFsdWUuc3RhcnQ7XHJcblxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmaWVsZFZhbHVlIDw9IHNlYXJjaFZhbHVlLmVuZDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KTQvtGA0LzQuNGA0L7QstCw0L3QuNC1INC60L7QvdGC0LXQvdGC0LBcclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIHJlbmRlcigpIHtcclxuXHJcbiAgICAgICAgbGV0IG9wdGlvbnMgPSB0aGlzLmdldE9wdGlvbnMoKTtcclxuICAgICAgICBsZXQgbGFiZWwgICA9IHR5cGVvZiBvcHRpb25zLmxhYmVsID09PSAnc3RyaW5nJyB8fCB0eXBlb2Ygb3B0aW9ucy5sYWJlbCA9PT0gJ251bWJlcidcclxuICAgICAgICAgICAgPyBvcHRpb25zLmxhYmVsXHJcbiAgICAgICAgICAgIDogJyc7XHJcblxyXG4gICAgICAgIGlmICggISBjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KG9wdGlvbnMuYXR0cikpIHtcclxuICAgICAgICAgICAgb3B0aW9ucy5hdHRyID0ge307XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAob3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnd2lkdGgnKSAmJlxyXG4gICAgICAgICAgICBjb3JldWlUYWJsZVV0aWxzLmlzTnVtZXJpYyhvcHRpb25zLndpZHRoKVxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5hdHRyLmhhc093blByb3BlcnR5KCdzdHlsZScpKSB7XHJcbiAgICAgICAgICAgICAgICBvcHRpb25zLmF0dHJbJ3N0eWxlJ10gKz0gJzt3aWR0aDonICsgb3B0aW9ucy53aWR0aCArICdweCc7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBvcHRpb25zLmF0dHJbJ3N0eWxlJ10gPSAnd2lkdGg6JyArIG9wdGlvbnMud2lkdGggKyAncHgnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAob3B0aW9ucy5hdHRyLmhhc093blByb3BlcnR5KCd0eXBlJykpIHtcclxuICAgICAgICAgICAgZGVsZXRlIG9wdGlvbnMuYXR0ci50eXBlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKG9wdGlvbnMuYXR0ci5oYXNPd25Qcm9wZXJ0eSgndmFsdWUnKSkge1xyXG4gICAgICAgICAgICBkZWxldGUgb3B0aW9ucy5hdHRyLnZhbHVlO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIGxldCBmaWVsZCAgICAgPSB0eXBlb2Ygb3B0aW9ucy5maWVsZCA9PT0gJ3N0cmluZycgPyBvcHRpb25zLmZpZWxkIDogJyc7XHJcbiAgICAgICAgbGV0IHN0YXJ0QXR0ciA9IFtdO1xyXG4gICAgICAgIGxldCBlbmRBdHRyICAgPSBbXTtcclxuICAgICAgICBsZXQgYXR0ckJ0biAgID0gW107XHJcbiAgICAgICAgbGV0IHRhYmxlICAgICA9IHRoaXMuX3RhYmxlO1xyXG5cclxuXHJcbiAgICAgICAgJC5lYWNoKG9wdGlvbnMuYXR0ciwgZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XHJcbiAgICAgICAgICAgIGlmIChbJ25hbWUnLCAndmFsdWUnLCAnY2xhc3MnXS5pbmRleE9mKG5hbWUpID49IDAgfHxcclxuICAgICAgICAgICAgICAgIFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIHZhbHVlKSA8IDBcclxuICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHN0YXJ0QXR0ci5wdXNoKG5hbWUgKyAnPVwiJyArIHZhbHVlICsgJ1wiJyk7XHJcbiAgICAgICAgICAgIGVuZEF0dHIucHVzaChuYW1lICsgJz1cIicgKyB2YWx1ZSArICdcIicpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBpZiAob3B0aW9ucy5hdHRyLmhhc093blByb3BlcnR5KCdjbGFzcycpICYmXHJcbiAgICAgICAgICAgIFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIG9wdGlvbnMuYXR0ci5jbGFzcykgPj0gMFxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICBzdGFydEF0dHIucHVzaCgnY2xhc3M9XCInICsgb3B0aW9ucy5hdHRyLmNsYXNzICsgJyBudW1iZXItc3RhcnRcIicpO1xyXG4gICAgICAgICAgICBlbmRBdHRyLnB1c2goJ2NsYXNzPVwiJyArIG9wdGlvbnMuYXR0ci5jbGFzcyArICcgbnVtYmVyLWVuZFwiJyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgc3RhcnRBdHRyLnB1c2goJ2NsYXNzPVwibnVtYmVyLXN0YXJ0XCInKTtcclxuICAgICAgICAgICAgZW5kQXR0ci5wdXNoKCdjbGFzcz1cIm51bWJlci1lbmRcIicpO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIGlmIChmaWVsZCkge1xyXG4gICAgICAgICAgICBzdGFydEF0dHIucHVzaCgnbmFtZT1cIicgKyBmaWVsZCArICdbc3RhcnRdXCInKTtcclxuICAgICAgICAgICAgZW5kQXR0ci5wdXNoKCduYW1lPVwiJyArIGZpZWxkICsgJ1tlbmRdXCInKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHN0YXJ0QXR0ci5wdXNoKCd2YWx1ZT1cIicgKyAodGhpcy5fdmFsdWUgPyB0aGlzLl92YWx1ZS5zdGFydCA6ICcnKSArICdcIicpO1xyXG4gICAgICAgIGVuZEF0dHIucHVzaCgndmFsdWU9XCInICsgKHRoaXMuX3ZhbHVlID8gdGhpcy5fdmFsdWUuZW5kIDogJycpICsgJ1wiJyk7XHJcblxyXG5cclxuXHJcbiAgICAgICAgaWYgKCAhIGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3Qob3B0aW9ucy5idG4pKSB7XHJcbiAgICAgICAgICAgIG9wdGlvbnMuYnRuID0ge307XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICggISBjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KG9wdGlvbnMuYnRuLmF0dHIpKSB7XHJcbiAgICAgICAgICAgIG9wdGlvbnMuYnRuLmF0dHIgPSB7fTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChvcHRpb25zLmJ0bi5hdHRyLmhhc093blByb3BlcnR5KCd0eXBlJykpIHtcclxuICAgICAgICAgICAgZGVsZXRlIG9wdGlvbnMuYnRuLmF0dHIudHlwZTtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICAkLmVhY2gob3B0aW9ucy5idG4uYXR0ciwgZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XHJcbiAgICAgICAgICAgIGF0dHJCdG4ucHVzaChuYW1lICsgJz1cIicgKyB2YWx1ZSArICdcIicpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLl9jb250cm9sID0gJChjb3JldWlUYWJsZVV0aWxzLnJlbmRlcihjb3JldWlUYWJsZVRwbFsnZmlsdGVycy9udW1iZXIuaHRtbCddLCB7XHJcbiAgICAgICAgICAgIGF0dHJTdGFydDogc3RhcnRBdHRyLmxlbmd0aCA+IDAgPyAoJyAnICsgc3RhcnRBdHRyLmpvaW4oJyAnKSkgOiAnJyxcclxuICAgICAgICAgICAgYXR0ckVuZDogZW5kQXR0ci5sZW5ndGggPiAwID8gKCcgJyArIGVuZEF0dHIuam9pbignICcpKSA6ICcnLFxyXG4gICAgICAgICAgICBsYWJlbDogbGFiZWwsXHJcbiAgICAgICAgICAgIGJ0bkF0dHI6IGF0dHJCdG4ubGVuZ3RoID4gMCA/ICgnICcgKyBhdHRyQnRuLmpvaW4oJyAnKSkgOiAnJyxcclxuICAgICAgICAgICAgYnRuQ29udGVudDogb3B0aW9ucy5idG4uY29udGVudCA/IG9wdGlvbnMuYnRuLmNvbnRlbnQgOiAnJyxcclxuICAgICAgICB9KSk7XHJcblxyXG5cclxuICAgICAgICAkKCdpbnB1dC5udW1iZXItc3RhcnQsIGlucHV0Lm51bWJlci1lbmQnLCB0aGlzLl9jb250cm9sKS5rZXl1cChmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgIGlmIChlLmtleSA9PT0gJ0VudGVyJyB8fCBlLmtleUNvZGUgPT09IDEzKSB7XHJcbiAgICAgICAgICAgICAgICB0YWJsZS5zZWFyY2hSZWNvcmRzKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgJCgnYnV0dG9uJywgdGhpcy5fY29udHJvbCkuY2xpY2soZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICB0YWJsZS5zZWFyY2hSZWNvcmRzKCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLl9jb250cm9sO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBGaWx0ZXJOdW1iZXI7IiwiXHJcbmltcG9ydCBjb3JldWlUYWJsZVRwbCAgIGZyb20gXCIuLi9jb3JldWkudGFibGUudGVtcGxhdGVzXCI7XHJcbmltcG9ydCBjb3JldWlUYWJsZVV0aWxzIGZyb20gXCIuLi9jb3JldWkudGFibGUudXRpbHNcIjtcclxuaW1wb3J0IEZpbHRlciAgICAgICAgICAgZnJvbSBcIi4uL2Fic3RyYWN0L0ZpbHRlclwiO1xyXG5cclxuY2xhc3MgRmlsdGVyRGF0ZSBleHRlbmRzIEZpbHRlciB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQmNC90LjRhtC40LDQu9C40LfQsNGG0LjRj1xyXG4gICAgICogQHBhcmFtIHtjb3JldWlUYWJsZUluc3RhbmNlfSB0YWJsZVxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9ICAgICAgICAgICAgICBvcHRpb25zXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKHRhYmxlLCBvcHRpb25zKSB7XHJcblxyXG4gICAgICAgIG9wdGlvbnMgPSAkLmV4dGVuZCh0cnVlLCB7XHJcbiAgICAgICAgICAgIGlkOiBudWxsLFxyXG4gICAgICAgICAgICB0eXBlOiAnZGF0ZScsXHJcbiAgICAgICAgICAgIGZpZWxkOiBudWxsLFxyXG4gICAgICAgICAgICBsYWJlbDogbnVsbCxcclxuICAgICAgICAgICAgdmFsdWU6IG51bGwsXHJcbiAgICAgICAgICAgIHdpZHRoOiAyMDAsXHJcbiAgICAgICAgICAgIGF0dHI6IHtcclxuICAgICAgICAgICAgICAgIGNsYXNzOiBcImZvcm0tY29udHJvbFwiLFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSwgb3B0aW9ucyk7XHJcblxyXG4gICAgICAgIHN1cGVyKHRhYmxlLCBvcHRpb25zKTtcclxuXHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLnZhbHVlICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0VmFsdWUodGhpcy5fb3B0aW9ucy52YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCj0YHRgtCw0L3QvtCy0LrQsCDQt9C90LDRh9C10L3QuNGPXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcclxuICAgICAqL1xyXG4gICAgc2V0VmFsdWUodmFsdWUpIHtcclxuXHJcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycgJiYgdmFsdWUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHZhbHVlICYmXHJcbiAgICAgICAgICAgIChcclxuICAgICAgICAgICAgICAgIHZhbHVlLm1hdGNoKC9eXFxkezR9XFwtXFxkezJ9XFwtXFxkezJ9JC8pID09PSBudWxsIHx8XHJcbiAgICAgICAgICAgICAgICBpc05hTihuZXcgRGF0ZSh2YWx1ZSkpXHJcbiAgICAgICAgICAgIClcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIHRoaXMuX3ZhbHVlID0gdmFsdWU7XHJcblxyXG5cclxuICAgICAgICBpZiAodGhpcy5fY29udHJvbCkge1xyXG4gICAgICAgICAgICAkKCdpbnB1dCcsIHRoaXMuX2NvbnRyb2wpLnZhbChcclxuICAgICAgICAgICAgICAgIHRoaXMuX3ZhbHVlID09PSBudWxsID8gJycgOiB0aGlzLl92YWx1ZVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0LfQvdCw0YfQtdC90LjRj1xyXG4gICAgICogQHJldHVybnMge3N0cmluZ31cclxuICAgICAqL1xyXG4gICAgZ2V0VmFsdWUoKSB7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9jb250cm9sKSB7XHJcbiAgICAgICAgICAgIGxldCB2YWx1ZSA9ICQoJ2lucHV0JywgdGhpcy5fY29udHJvbCkudmFsKCk7XHJcblxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJiB2YWx1ZSAhPT0gJycpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5fdmFsdWU7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KTQuNC70YzRgtGA0LDRhtC40Y8g0LTQsNC90L3Ri9GFXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSAgICAgICAgICAgICAgZmllbGRWYWx1ZVxyXG4gICAgICogQHJldHVybnMge0FycmF5fHN0cmluZ3xudW1iZXJ9IHNlYXJjaFZhbHVlXHJcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICAgICAqL1xyXG4gICAgZmlsdGVyKGZpZWxkVmFsdWUsIHNlYXJjaFZhbHVlKSB7XHJcblxyXG4gICAgICAgIGlmIChbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiBmaWVsZFZhbHVlKSA8IDAgfHxcclxuICAgICAgICAgICAgWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2Ygc2VhcmNoVmFsdWUpIDwgMFxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gZmllbGRWYWx1ZS50b1N0cmluZygpLmluZGV4T2Yoc2VhcmNoVmFsdWUudG9TdHJpbmcoKSkgPT09IDA7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KTQvtGA0LzQuNGA0L7QstCw0L3QuNC1INC60L7QvdGC0LXQvdGC0LBcclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIHJlbmRlcigpIHtcclxuXHJcbiAgICAgICAgbGV0IG9wdGlvbnMgPSB0aGlzLmdldE9wdGlvbnMoKTtcclxuICAgICAgICBsZXQgbGFiZWwgICA9IHR5cGVvZiBvcHRpb25zLmxhYmVsID09PSAnc3RyaW5nJyB8fCB0eXBlb2Ygb3B0aW9ucy5sYWJlbCA9PT0gJ251bWJlcidcclxuICAgICAgICAgICAgPyBvcHRpb25zLmxhYmVsXHJcbiAgICAgICAgICAgIDogJyc7XHJcblxyXG4gICAgICAgIGlmICggISBjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KG9wdGlvbnMuYXR0cikpIHtcclxuICAgICAgICAgICAgb3B0aW9ucy5hdHRyID0ge307XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAob3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnd2lkdGgnKSAmJlxyXG4gICAgICAgICAgICBjb3JldWlUYWJsZVV0aWxzLmlzTnVtZXJpYyhvcHRpb25zLndpZHRoKVxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5hdHRyLmhhc093blByb3BlcnR5KCdzdHlsZScpKSB7XHJcbiAgICAgICAgICAgICAgICBvcHRpb25zLmF0dHJbJ3N0eWxlJ10gKz0gJzt3aWR0aDonICsgb3B0aW9ucy53aWR0aCArICdweCc7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBvcHRpb25zLmF0dHJbJ3N0eWxlJ10gPSAnd2lkdGg6JyArIG9wdGlvbnMud2lkdGggKyAncHgnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBvcHRpb25zLmF0dHJbJ3ZhbHVlJ10gPSB0eXBlb2YgdGhpcy5fdmFsdWUgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiB0aGlzLl92YWx1ZSA9PT0gJ251bWJlcidcclxuICAgICAgICAgICAgPyB0aGlzLl92YWx1ZVxyXG4gICAgICAgICAgICA6ICcnO1xyXG5cclxuICAgICAgICBpZiAob3B0aW9ucy5hdHRyLmhhc093blByb3BlcnR5KCd0eXBlJykpIHtcclxuICAgICAgICAgICAgZGVsZXRlIG9wdGlvbnMuYXR0ci50eXBlO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIGxldCBhdHRyICA9IFtdO1xyXG4gICAgICAgIGxldCB0YWJsZSA9IHRoaXMuX3RhYmxlO1xyXG5cclxuICAgICAgICAkLmVhY2gob3B0aW9ucy5hdHRyLCBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcclxuICAgICAgICAgICAgYXR0ci5wdXNoKG5hbWUgKyAnPVwiJyArIHZhbHVlICsgJ1wiJyk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuX2NvbnRyb2wgPSAkKGNvcmV1aVRhYmxlVXRpbHMucmVuZGVyKGNvcmV1aVRhYmxlVHBsWydmaWx0ZXJzL2RhdGUuaHRtbCddLCB7XHJcbiAgICAgICAgICAgIGF0dHI6IGF0dHIubGVuZ3RoID4gMCA/ICgnICcgKyBhdHRyLmpvaW4oJyAnKSkgOiAnJyxcclxuICAgICAgICAgICAgbGFiZWw6IGxhYmVsXHJcbiAgICAgICAgfSkpO1xyXG5cclxuICAgICAgICAkKCdpbnB1dCcsIHRoaXMuX2NvbnRyb2wpLmNoYW5nZShmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgIHRhYmxlLnNlYXJjaFJlY29yZHMoKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbnRyb2w7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IEZpbHRlckRhdGU7IiwiXHJcbmltcG9ydCBjb3JldWlUYWJsZVRwbCAgICAgIGZyb20gXCIuLi9jb3JldWkudGFibGUudGVtcGxhdGVzXCI7XHJcbmltcG9ydCBjb3JldWlUYWJsZVV0aWxzICAgIGZyb20gXCIuLi9jb3JldWkudGFibGUudXRpbHNcIjtcclxuaW1wb3J0IGNvcmV1aVRhYmxlRWxlbWVudHMgZnJvbSBcIi4uL2NvcmV1aS50YWJsZS5lbGVtZW50c1wiO1xyXG5pbXBvcnQgRmlsdGVyICAgICAgICAgICAgICBmcm9tIFwiLi4vYWJzdHJhY3QvRmlsdGVyXCI7XHJcblxyXG5jbGFzcyBGaWx0ZXJEYXRldGltZSBleHRlbmRzIEZpbHRlciB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQmNC90LjRhtC40LDQu9C40LfQsNGG0LjRj1xyXG4gICAgICogQHBhcmFtIHtjb3JldWlUYWJsZUluc3RhbmNlfSB0YWJsZVxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9ICAgICAgICAgICAgICBvcHRpb25zXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKHRhYmxlLCBvcHRpb25zKSB7XHJcblxyXG4gICAgICAgIG9wdGlvbnMgPSAkLmV4dGVuZCh0cnVlLCB7XHJcbiAgICAgICAgICAgIGlkOiBudWxsLFxyXG4gICAgICAgICAgICB0eXBlOiAnZGF0ZXRpbWUnLFxyXG4gICAgICAgICAgICBmaWVsZDogbnVsbCxcclxuICAgICAgICAgICAgbGFiZWw6IG51bGwsXHJcbiAgICAgICAgICAgIHZhbHVlOiBudWxsLFxyXG4gICAgICAgICAgICB3aWR0aDogMjAwLFxyXG4gICAgICAgICAgICBhdHRyOiB7XHJcbiAgICAgICAgICAgICAgICBjbGFzczogXCJmb3JtLWNvbnRyb2xcIixcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sIG9wdGlvbnMpO1xyXG5cclxuICAgICAgICBzdXBlcih0YWJsZSwgb3B0aW9ucyk7XHJcblxyXG5cclxuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy52YWx1ZSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLnNldFZhbHVlKHRoaXMuX29wdGlvbnMudmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQo9GB0YLQsNC90L7QstC60LAg0LfQvdCw0YfQtdC90LjRj1xyXG4gICAgICogQHBhcmFtIHtzdHJpbmd8bnVsbH0gdmFsdWVcclxuICAgICAqL1xyXG4gICAgc2V0VmFsdWUodmFsdWUpIHtcclxuXHJcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycgJiYgdmFsdWUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHZhbHVlICYmXHJcbiAgICAgICAgICAgIChcclxuICAgICAgICAgICAgICAgIHZhbHVlLm1hdGNoKC9eXFxkezR9XFwtXFxkezJ9XFwtXFxkezJ9KFR8IClcXGR7Mn06XFxkezJ9KDpcXGR7Mn18KSQvKSA9PT0gbnVsbCB8fFxyXG4gICAgICAgICAgICAgICAgaXNOYU4obmV3IERhdGUodmFsdWUpKVxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX3ZhbHVlID0gdmFsdWU7XHJcblxyXG5cclxuICAgICAgICBpZiAodGhpcy5fY29udHJvbCkge1xyXG4gICAgICAgICAgICAkKCdpbnB1dCcsIHRoaXMuX2NvbnRyb2wpLnZhbChcclxuICAgICAgICAgICAgICAgIHRoaXMuX3ZhbHVlID09PSBudWxsID8gJycgOiB0aGlzLl92YWx1ZVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0LfQvdCw0YfQtdC90LjRj1xyXG4gICAgICogQHJldHVybnMge3N0cmluZ3xudWxsfVxyXG4gICAgICovXHJcbiAgICBnZXRWYWx1ZSgpIHtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX2NvbnRyb2wpIHtcclxuICAgICAgICAgICAgbGV0IHZhbHVlID0gJCgnaW5wdXQnLCB0aGlzLl9jb250cm9sKS52YWwoKTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnICYmIHZhbHVlICE9PSAnJykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLl92YWx1ZTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQpNC40LvRjNGC0YDQsNGG0LjRjyDQtNCw0L3QvdGL0YVcclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9ICAgICAgICAgICAgICBmaWVsZFZhbHVlXHJcbiAgICAgKiBAcmV0dXJucyB7QXJyYXl8c3RyaW5nfG51bWJlcn0gc2VhcmNoVmFsdWVcclxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gICAgICovXHJcbiAgICBmaWx0ZXIoZmllbGRWYWx1ZSwgc2VhcmNoVmFsdWUpIHtcclxuXHJcbiAgICAgICAgaWYgKFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIGZpZWxkVmFsdWUpIDwgMCB8fFxyXG4gICAgICAgICAgICBbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiBzZWFyY2hWYWx1ZSkgPCAwXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBmaWVsZFZhbHVlLnRvU3RyaW5nKCkgPT09IHNlYXJjaFZhbHVlLnRvU3RyaW5nKCk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KTQvtGA0LzQuNGA0L7QstCw0L3QuNC1INC60L7QvdGC0LXQvdGC0LBcclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIHJlbmRlcigpIHtcclxuXHJcbiAgICAgICAgbGV0IG9wdGlvbnMgPSB0aGlzLmdldE9wdGlvbnMoKTtcclxuICAgICAgICBsZXQgbGFiZWwgICA9IHR5cGVvZiBvcHRpb25zLmxhYmVsID09PSAnc3RyaW5nJyB8fCB0eXBlb2Ygb3B0aW9ucy5sYWJlbCA9PT0gJ251bWJlcidcclxuICAgICAgICAgICAgPyBvcHRpb25zLmxhYmVsXHJcbiAgICAgICAgICAgIDogJyc7XHJcblxyXG4gICAgICAgIGlmICggISBjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KG9wdGlvbnMuYXR0cikpIHtcclxuICAgICAgICAgICAgb3B0aW9ucy5hdHRyID0ge307XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAob3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnd2lkdGgnKSAmJlxyXG4gICAgICAgICAgICBjb3JldWlUYWJsZVV0aWxzLmlzTnVtZXJpYyhvcHRpb25zLndpZHRoKVxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5hdHRyLmhhc093blByb3BlcnR5KCdzdHlsZScpKSB7XHJcbiAgICAgICAgICAgICAgICBvcHRpb25zLmF0dHJbJ3N0eWxlJ10gKz0gJzt3aWR0aDonICsgb3B0aW9ucy53aWR0aCArICdweCc7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBvcHRpb25zLmF0dHJbJ3N0eWxlJ10gPSAnd2lkdGg6JyArIG9wdGlvbnMud2lkdGggKyAncHgnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBvcHRpb25zLmF0dHJbJ3ZhbHVlJ10gPSB0eXBlb2YgdGhpcy5fdmFsdWUgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiB0aGlzLl92YWx1ZSA9PT0gJ251bWJlcidcclxuICAgICAgICAgICAgPyB0aGlzLl92YWx1ZVxyXG4gICAgICAgICAgICA6ICcnO1xyXG5cclxuICAgICAgICBpZiAob3B0aW9ucy5hdHRyLmhhc093blByb3BlcnR5KCd0eXBlJykpIHtcclxuICAgICAgICAgICAgZGVsZXRlIG9wdGlvbnMuYXR0ci50eXBlO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIGxldCBhdHRyICA9IFtdO1xyXG4gICAgICAgIGxldCB0YWJsZSA9IHRoaXMuX3RhYmxlO1xyXG5cclxuICAgICAgICAkLmVhY2gob3B0aW9ucy5hdHRyLCBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcclxuICAgICAgICAgICAgYXR0ci5wdXNoKG5hbWUgKyAnPVwiJyArIHZhbHVlICsgJ1wiJyk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuX2NvbnRyb2wgPSAkKGNvcmV1aVRhYmxlVXRpbHMucmVuZGVyKGNvcmV1aVRhYmxlVHBsWydmaWx0ZXJzL2RhdGV0aW1lLmh0bWwnXSwge1xyXG4gICAgICAgICAgICBhdHRyOiBhdHRyLmxlbmd0aCA+IDAgPyAoJyAnICsgYXR0ci5qb2luKCcgJykpIDogJycsXHJcbiAgICAgICAgICAgIGxhYmVsOiBsYWJlbFxyXG4gICAgICAgIH0pKTtcclxuXHJcbiAgICAgICAgJCgnaW5wdXQnLCB0aGlzLl9jb250cm9sKS5jaGFuZ2UoZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICB0YWJsZS5zZWFyY2hSZWNvcmRzKCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLl9jb250cm9sO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBGaWx0ZXJEYXRldGltZTsiLCJcclxuaW1wb3J0IGNvcmV1aVRhYmxlVHBsICAgICAgZnJvbSBcIi4uL2NvcmV1aS50YWJsZS50ZW1wbGF0ZXNcIjtcclxuaW1wb3J0IGNvcmV1aVRhYmxlVXRpbHMgICAgZnJvbSBcIi4uL2NvcmV1aS50YWJsZS51dGlsc1wiO1xyXG5pbXBvcnQgY29yZXVpVGFibGVFbGVtZW50cyBmcm9tIFwiLi4vY29yZXVpLnRhYmxlLmVsZW1lbnRzXCI7XHJcbmltcG9ydCBGaWx0ZXIgICAgICAgICAgICAgIGZyb20gXCIuLi9hYnN0cmFjdC9GaWx0ZXJcIjtcclxuXHJcbmNsYXNzIEZpbHRlckRhdGVNb250aCBleHRlbmRzIEZpbHRlciB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQmNC90LjRhtC40LDQu9C40LfQsNGG0LjRj1xyXG4gICAgICogQHBhcmFtIHtjb3JldWlUYWJsZUluc3RhbmNlfSB0YWJsZVxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9ICAgICAgICAgICAgICBvcHRpb25zXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKHRhYmxlLCBvcHRpb25zKSB7XHJcblxyXG4gICAgICAgIG9wdGlvbnMgPSAkLmV4dGVuZCh0cnVlLCB7XHJcbiAgICAgICAgICAgIGlkOiBudWxsLFxyXG4gICAgICAgICAgICB0eXBlOiAnZGF0ZV9tb250aCcsXHJcbiAgICAgICAgICAgIGZpZWxkOiBudWxsLFxyXG4gICAgICAgICAgICBsYWJlbDogbnVsbCxcclxuICAgICAgICAgICAgdmFsdWU6IG51bGwsXHJcbiAgICAgICAgICAgIHdpZHRoOiAyMDAsXHJcbiAgICAgICAgICAgIGF0dHI6IHtcclxuICAgICAgICAgICAgICAgIGNsYXNzOiBcImZvcm0tY29udHJvbFwiLFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSwgb3B0aW9ucyk7XHJcblxyXG4gICAgICAgIHN1cGVyKHRhYmxlLCBvcHRpb25zKTtcclxuXHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLnZhbHVlICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0VmFsdWUodGhpcy5fb3B0aW9ucy52YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCj0YHRgtCw0L3QvtCy0LrQsCDQt9C90LDRh9C10L3QuNGPXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ3xudWxsfSB2YWx1ZVxyXG4gICAgICovXHJcbiAgICBzZXRWYWx1ZSh2YWx1ZSkge1xyXG5cclxuICAgICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJyAmJiB2YWx1ZSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodmFsdWUgJiZcclxuICAgICAgICAgICAgKFxyXG4gICAgICAgICAgICAgICAgdmFsdWUubWF0Y2goL15cXGR7NH1cXC1cXGR7Mn0kLykgPT09IG51bGwgfHxcclxuICAgICAgICAgICAgICAgIGlzTmFOKG5ldyBEYXRlKHZhbHVlKSlcclxuICAgICAgICAgICAgKVxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl92YWx1ZSA9IHZhbHVlO1xyXG5cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX2NvbnRyb2wpIHtcclxuICAgICAgICAgICAgJCgnaW5wdXQnLCB0aGlzLl9jb250cm9sKS52YWwoXHJcbiAgICAgICAgICAgICAgICB0aGlzLl92YWx1ZSA9PT0gbnVsbCA/ICcnIDogdGhpcy5fdmFsdWVcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC30L3QsNGH0LXQvdC40Y9cclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd8bnVsbH1cclxuICAgICAqL1xyXG4gICAgZ2V0VmFsdWUoKSB7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9jb250cm9sKSB7XHJcbiAgICAgICAgICAgIGxldCB2YWx1ZSA9ICQoJ2lucHV0JywgdGhpcy5fY29udHJvbCkudmFsKCk7XHJcblxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJiB2YWx1ZSAhPT0gJycpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5fdmFsdWU7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KTQuNC70YzRgtGA0LDRhtC40Y8g0LTQsNC90L3Ri9GFXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBmaWVsZFZhbHVlXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBzZWFyY2hWYWx1ZVxyXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAgICAgKi9cclxuICAgIGZpbHRlcihmaWVsZFZhbHVlLCBzZWFyY2hWYWx1ZSkge1xyXG5cclxuICAgICAgICBpZiAoWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2YgZmllbGRWYWx1ZSkgPCAwIHx8XHJcbiAgICAgICAgICAgIFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIHNlYXJjaFZhbHVlKSA8IDBcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGZpZWxkVmFsdWUudG9TdHJpbmcoKS50b0xvd2VyQ2FzZSgpLmluZGV4T2YoXHJcbiAgICAgICAgICAgIHNlYXJjaFZhbHVlLnRvU3RyaW5nKCkudG9Mb3dlckNhc2UoKVxyXG4gICAgICAgICkgPT09IDBcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQpNC+0YDQvNC40YDQvtCy0LDQvdC40LUg0LrQvtC90YLQtdC90YLQsFxyXG4gICAgICogQHJldHVybnMge2pRdWVyeX1cclxuICAgICAqL1xyXG4gICAgcmVuZGVyKCkge1xyXG5cclxuICAgICAgICBsZXQgb3B0aW9ucyA9IHRoaXMuZ2V0T3B0aW9ucygpO1xyXG4gICAgICAgIGxldCBsYWJlbCAgID0gdHlwZW9mIG9wdGlvbnMubGFiZWwgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBvcHRpb25zLmxhYmVsID09PSAnbnVtYmVyJ1xyXG4gICAgICAgICAgICA/IG9wdGlvbnMubGFiZWxcclxuICAgICAgICAgICAgOiAnJztcclxuXHJcbiAgICAgICAgaWYgKCAhIGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3Qob3B0aW9ucy5hdHRyKSkge1xyXG4gICAgICAgICAgICBvcHRpb25zLmF0dHIgPSB7fTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChvcHRpb25zLmhhc093blByb3BlcnR5KCd3aWR0aCcpICYmXHJcbiAgICAgICAgICAgIGNvcmV1aVRhYmxlVXRpbHMuaXNOdW1lcmljKG9wdGlvbnMud2lkdGgpXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmF0dHIuaGFzT3duUHJvcGVydHkoJ3N0eWxlJykpIHtcclxuICAgICAgICAgICAgICAgIG9wdGlvbnMuYXR0clsnc3R5bGUnXSArPSAnO3dpZHRoOicgKyBvcHRpb25zLndpZHRoICsgJ3B4JztcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIG9wdGlvbnMuYXR0clsnc3R5bGUnXSA9ICd3aWR0aDonICsgb3B0aW9ucy53aWR0aCArICdweCc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIG9wdGlvbnMuYXR0clsndmFsdWUnXSA9IHR5cGVvZiB0aGlzLl92YWx1ZSA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIHRoaXMuX3ZhbHVlID09PSAnbnVtYmVyJ1xyXG4gICAgICAgICAgICA/IHRoaXMuX3ZhbHVlXHJcbiAgICAgICAgICAgIDogJyc7XHJcblxyXG4gICAgICAgIGlmIChvcHRpb25zLmF0dHIuaGFzT3duUHJvcGVydHkoJ3R5cGUnKSkge1xyXG4gICAgICAgICAgICBkZWxldGUgb3B0aW9ucy5hdHRyLnR5cGU7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgbGV0IGF0dHIgID0gW107XHJcbiAgICAgICAgbGV0IHRhYmxlID0gdGhpcy5fdGFibGU7XHJcblxyXG4gICAgICAgICQuZWFjaChvcHRpb25zLmF0dHIsIGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xyXG4gICAgICAgICAgICBhdHRyLnB1c2gobmFtZSArICc9XCInICsgdmFsdWUgKyAnXCInKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5fY29udHJvbCA9ICQoY29yZXVpVGFibGVVdGlscy5yZW5kZXIoY29yZXVpVGFibGVUcGxbJ2ZpbHRlcnMvZGF0ZV9tb250aC5odG1sJ10sIHtcclxuICAgICAgICAgICAgYXR0cjogYXR0ci5sZW5ndGggPiAwID8gKCcgJyArIGF0dHIuam9pbignICcpKSA6ICcnLFxyXG4gICAgICAgICAgICBsYWJlbDogbGFiZWxcclxuICAgICAgICB9KSk7XHJcblxyXG4gICAgICAgICQoJ2lucHV0JywgdGhpcy5fY29udHJvbCkuY2hhbmdlKGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgdGFibGUuc2VhcmNoUmVjb3JkcygpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5fY29udHJvbDtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgRmlsdGVyRGF0ZU1vbnRoOyIsIlxyXG5pbXBvcnQgY29yZXVpVGFibGVUcGwgICAgICBmcm9tIFwiLi4vY29yZXVpLnRhYmxlLnRlbXBsYXRlc1wiO1xyXG5pbXBvcnQgY29yZXVpVGFibGVVdGlscyAgICBmcm9tIFwiLi4vY29yZXVpLnRhYmxlLnV0aWxzXCI7XHJcbmltcG9ydCBjb3JldWlUYWJsZUVsZW1lbnRzIGZyb20gXCIuLi9jb3JldWkudGFibGUuZWxlbWVudHNcIjtcclxuaW1wb3J0IEZpbHRlciAgICAgICAgICAgICAgZnJvbSBcIi4uL2Fic3RyYWN0L0ZpbHRlclwiO1xyXG5cclxuY2xhc3MgRmlsdGVyRGF0ZVJhbmdlIGV4dGVuZHMgRmlsdGVyIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPXHJcbiAgICAgKiBAcGFyYW0ge2NvcmV1aVRhYmxlSW5zdGFuY2V9IHRhYmxlXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gICAgICAgICAgICAgIG9wdGlvbnNcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IodGFibGUsIG9wdGlvbnMpIHtcclxuXHJcbiAgICAgICAgb3B0aW9ucyA9ICQuZXh0ZW5kKHRydWUsIHtcclxuICAgICAgICAgICAgaWQ6IG51bGwsXHJcbiAgICAgICAgICAgIHR5cGU6ICdkYXRlX3JhbmdlJyxcclxuICAgICAgICAgICAgZmllbGQ6IG51bGwsXHJcbiAgICAgICAgICAgIGxhYmVsOiBudWxsLFxyXG4gICAgICAgICAgICB2YWx1ZTogbnVsbCxcclxuICAgICAgICAgICAgd2lkdGg6IDIwMCxcclxuICAgICAgICAgICAgYXR0cjoge1xyXG4gICAgICAgICAgICAgICAgY2xhc3M6IFwiZm9ybS1jb250cm9sIGQtaW5saW5lLWJsb2NrXCIsXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LCBvcHRpb25zKTtcclxuXHJcbiAgICAgICAgc3VwZXIodGFibGUsIG9wdGlvbnMpO1xyXG5cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMudmFsdWUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5zZXRWYWx1ZSh0aGlzLl9vcHRpb25zLnZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KPRgdGC0LDQvdC+0LLQutCwINC30L3QsNGH0LXQvdC40Y9cclxuICAgICAqIEBwYXJhbSB7b2JqZWN0fG51bGx9IHZhbHVlXHJcbiAgICAgKi9cclxuICAgIHNldFZhbHVlKHZhbHVlKSB7XHJcblxyXG4gICAgICAgIGlmICh2YWx1ZSkge1xyXG4gICAgICAgICAgICBpZiAoICEgY29yZXVpVGFibGVVdGlscy5pc09iamVjdCh2YWx1ZSkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgbGV0IGRhdGVTdGFydCA9IG51bGw7XHJcbiAgICAgICAgICAgIGxldCBkYXRlRW5kICAgPSBudWxsO1xyXG5cclxuICAgICAgICAgICAgaWYgKHZhbHVlLmhhc093blByb3BlcnR5KCdzdGFydCcpICYmXHJcbiAgICAgICAgICAgICAgICB0eXBlb2YgdmFsdWUuc3RhcnQgPT09ICdzdHJpbmcnICYmXHJcbiAgICAgICAgICAgICAgICB2YWx1ZS5zdGFydC5tYXRjaCgvXlxcZHs0fVxcLVxcZHsyfVxcLVxcZHsyfSQvKSA9PT0gbnVsbCAmJlxyXG4gICAgICAgICAgICAgICAgaXNOYU4obmV3IERhdGUodmFsdWUuc3RhcnQpKVxyXG4gICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgIGRhdGVTdGFydCA9IHZhbHVlLnN0YXJ0O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodmFsdWUuaGFzT3duUHJvcGVydHkoJ2VuZCcpICYmXHJcbiAgICAgICAgICAgICAgICB0eXBlb2YgdmFsdWUuZW5kID09PSAnc3RyaW5nJyAmJlxyXG4gICAgICAgICAgICAgICAgdmFsdWUuZW5kLm1hdGNoKC9eXFxkezR9XFwtXFxkezJ9XFwtXFxkezJ9JC8pID09PSBudWxsICYmXHJcbiAgICAgICAgICAgICAgICBpc05hTihuZXcgRGF0ZSh2YWx1ZS5lbmQpKVxyXG4gICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgIGRhdGVFbmQgPSB2YWx1ZS5lbmQ7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChkYXRlU3RhcnQgPT09IG51bGwgJiYgZGF0ZUVuZCA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fdmFsdWUgPSBudWxsO1xyXG5cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3ZhbHVlID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0OiBkYXRlU3RhcnQsXHJcbiAgICAgICAgICAgICAgICAgICAgZW5kOiBkYXRlRW5kXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3ZhbHVlID0gbnVsbDtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICBpZiAodGhpcy5fY29udHJvbCkge1xyXG4gICAgICAgICAgICBsZXQgaW5wdXRTdGFydCA9IHRoaXMuX2NvbnRyb2wucGFyZW50KCkuZmluZCgnaW5wdXQuZGF0ZS1zdGFydCcpO1xyXG4gICAgICAgICAgICBsZXQgaW5wdXRFbmQgICA9IHRoaXMuX2NvbnRyb2wucGFyZW50KCkuZmluZCgnaW5wdXQuZGF0ZS1lbmQnKTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLl92YWx1ZSA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgaW5wdXRTdGFydC52YWwoJycpO1xyXG4gICAgICAgICAgICAgICAgaW5wdXRFbmQudmFsKCcnKTtcclxuXHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY29yZXVpVGFibGVVdGlscy5pc09iamVjdCh0aGlzLl92YWx1ZSkpIHtcclxuICAgICAgICAgICAgICAgIGlucHV0U3RhcnQudmFsKHR5cGVvZiB0aGlzLl92YWx1ZS5zdGFydCAhPT0gbnVsbCA/IHRoaXMuX3ZhbHVlLnN0YXJ0IDogJycpO1xyXG4gICAgICAgICAgICAgICAgaW5wdXRFbmQudmFsKHR5cGVvZiB0aGlzLl92YWx1ZS5lbmQgIT09IG51bGwgPyB0aGlzLl92YWx1ZS5lbmQgOiAnJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC30L3QsNGH0LXQvdC40Y9cclxuICAgICAqIEByZXR1cm5zIHtPYmplY3R8bnVsbH1cclxuICAgICAqL1xyXG4gICAgZ2V0VmFsdWUoKSB7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9jb250cm9sKSB7XHJcbiAgICAgICAgICAgIGxldCBpbnB1dFN0YXJ0ID0gdGhpcy5fY29udHJvbC5wYXJlbnQoKS5maW5kKCdpbnB1dC5kYXRlLXN0YXJ0Jyk7XHJcbiAgICAgICAgICAgIGxldCBpbnB1dEVuZCAgID0gdGhpcy5fY29udHJvbC5wYXJlbnQoKS5maW5kKCdpbnB1dC5kYXRlLWVuZCcpO1xyXG5cclxuICAgICAgICAgICAgaWYgKGlucHV0U3RhcnRbMF0gJiYgaW5wdXRFbmRbMF0pIHtcclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgdmFsdWVTdGFydCA9IGlucHV0U3RhcnQudmFsKCk7XHJcbiAgICAgICAgICAgICAgICBsZXQgdmFsdWVFbmQgICA9IGlucHV0RW5kLnZhbCgpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChcclxuICAgICAgICAgICAgICAgICAgICAodHlwZW9mIHZhbHVlU3RhcnQgPT09ICdzdHJpbmcnICYmIHZhbHVlU3RhcnQgIT09ICcnKSB8fFxyXG4gICAgICAgICAgICAgICAgICAgICh0eXBlb2YgdmFsdWVFbmQgPT09ICdzdHJpbmcnICYmIHZhbHVlRW5kICE9PSAnJylcclxuICAgICAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0OiB2YWx1ZVN0YXJ0ICE9PSAnJyA/IHZhbHVlU3RhcnQgOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbmQ6IHZhbHVlRW5kICE9PSAnJyA/IHZhbHVlRW5kIDogbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCk0LjQu9GM0YLRgNCw0YbQuNGPINC00LDQvdC90YvRhVxyXG4gICAgICogQHJldHVybnMge3N0cmluZ30gICAgICAgICAgICAgIGZpZWxkVmFsdWVcclxuICAgICAqIEByZXR1cm5zIHtBcnJheXxzdHJpbmd8bnVtYmVyfSBzZWFyY2hWYWx1ZVxyXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAgICAgKi9cclxuICAgIGZpbHRlcihmaWVsZFZhbHVlLCBzZWFyY2hWYWx1ZSkge1xyXG5cclxuICAgICAgICBpZiAoWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2YgZmllbGRWYWx1ZSkgPCAwIHx8XHJcbiAgICAgICAgICAgICEgY29yZXVpVGFibGVVdGlscy5pc09iamVjdChzZWFyY2hWYWx1ZSkgfHxcclxuICAgICAgICAgICAgKHR5cGVvZiBzZWFyY2hWYWx1ZS5zdGFydCAhPT0gJ3N0cmluZycgJiYgdHlwZW9mIHNlYXJjaFZhbHVlLmVuZCAhPT0gJ3N0cmluZycpXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICBsZXQgaXNzZXRTdGFydCA9IFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIHNlYXJjaFZhbHVlLnN0YXJ0KSA+PSAwO1xyXG4gICAgICAgIGxldCBpc3NldEVuZCAgID0gWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2Ygc2VhcmNoVmFsdWUuZW5kKSA+PSAwO1xyXG5cclxuICAgICAgICBpZiAoaXNzZXRTdGFydCAmJiBpc3NldEVuZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmllbGRWYWx1ZSA+PSBzZWFyY2hWYWx1ZS5zdGFydCAmJiBmaWVsZFZhbHVlIDw9IHNlYXJjaFZhbHVlLmVuZDtcclxuXHJcbiAgICAgICAgfSBlbHNlIGlmIChpc3NldFN0YXJ0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmaWVsZFZhbHVlID49IHNlYXJjaFZhbHVlLnN0YXJ0O1xyXG5cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gZmllbGRWYWx1ZSA8PSBzZWFyY2hWYWx1ZS5lbmQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCk0L7RgNC80LjRgNC+0LLQsNC90LjQtSDQutC+0L3RgtC10L3RgtCwXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxyXG4gICAgICovXHJcbiAgICByZW5kZXIoKSB7XHJcblxyXG4gICAgICAgIGxldCBvcHRpb25zID0gdGhpcy5nZXRPcHRpb25zKCk7XHJcbiAgICAgICAgbGV0IGxhYmVsICAgPSB0eXBlb2Ygb3B0aW9ucy5sYWJlbCA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIG9wdGlvbnMubGFiZWwgPT09ICdudW1iZXInXHJcbiAgICAgICAgICAgID8gb3B0aW9ucy5sYWJlbFxyXG4gICAgICAgICAgICA6ICcnO1xyXG5cclxuICAgICAgICBpZiAoICEgY29yZXVpVGFibGVVdGlscy5pc09iamVjdChvcHRpb25zLmF0dHIpKSB7XHJcbiAgICAgICAgICAgIG9wdGlvbnMuYXR0ciA9IHt9O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKG9wdGlvbnMuaGFzT3duUHJvcGVydHkoJ3dpZHRoJykgJiZcclxuICAgICAgICAgICAgY29yZXVpVGFibGVVdGlscy5pc051bWVyaWMob3B0aW9ucy53aWR0aClcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuYXR0ci5oYXNPd25Qcm9wZXJ0eSgnc3R5bGUnKSkge1xyXG4gICAgICAgICAgICAgICAgb3B0aW9ucy5hdHRyWydzdHlsZSddICs9ICc7d2lkdGg6JyArIG9wdGlvbnMud2lkdGggKyAncHgnO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgb3B0aW9ucy5hdHRyWydzdHlsZSddID0gJ3dpZHRoOicgKyBvcHRpb25zLndpZHRoICsgJ3B4JztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKG9wdGlvbnMuYXR0ci5oYXNPd25Qcm9wZXJ0eSgndHlwZScpKSB7XHJcbiAgICAgICAgICAgIGRlbGV0ZSBvcHRpb25zLmF0dHIudHlwZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChvcHRpb25zLmF0dHIuaGFzT3duUHJvcGVydHkoJ3ZhbHVlJykpIHtcclxuICAgICAgICAgICAgZGVsZXRlIG9wdGlvbnMuYXR0ci52YWx1ZTtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICBsZXQgZmllbGQgICAgID0gdHlwZW9mIG9wdGlvbnMuZmllbGQgPT09ICdzdHJpbmcnID8gb3B0aW9ucy5maWVsZCA6ICcnO1xyXG4gICAgICAgIGxldCBzdGFydEF0dHIgPSBbXTtcclxuICAgICAgICBsZXQgc3RhcnRFbmQgID0gW107XHJcbiAgICAgICAgbGV0IHRhYmxlICAgICA9IHRoaXMuX3RhYmxlO1xyXG5cclxuXHJcbiAgICAgICAgJC5lYWNoKG9wdGlvbnMuYXR0ciwgZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XHJcbiAgICAgICAgICAgIGlmIChbJ25hbWUnLCAndmFsdWUnLCAnY2xhc3MnXS5pbmRleE9mKG5hbWUpID49IDAgfHxcclxuICAgICAgICAgICAgICAgIFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIHZhbHVlKSA8IDBcclxuICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHN0YXJ0QXR0ci5wdXNoKG5hbWUgKyAnPVwiJyArIHZhbHVlICsgJ1wiJyk7XHJcbiAgICAgICAgICAgIHN0YXJ0RW5kLnB1c2gobmFtZSArICc9XCInICsgdmFsdWUgKyAnXCInKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgaWYgKG9wdGlvbnMuYXR0ci5oYXNPd25Qcm9wZXJ0eSgnY2xhc3MnKSAmJlxyXG4gICAgICAgICAgICBbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiBvcHRpb25zLmF0dHIuY2xhc3MpID49IDBcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgc3RhcnRBdHRyLnB1c2goJ2NsYXNzPVwiJyArIG9wdGlvbnMuYXR0ci5jbGFzcyArICcgZGF0ZS1zdGFydFwiJyk7XHJcbiAgICAgICAgICAgIHN0YXJ0RW5kLnB1c2goJ2NsYXNzPVwiJyArIG9wdGlvbnMuYXR0ci5jbGFzcyArICcgZGF0ZS1lbmRcIicpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHN0YXJ0QXR0ci5wdXNoKCdjbGFzcz1cImRhdGUtc3RhcnRcIicpO1xyXG4gICAgICAgICAgICBzdGFydEVuZC5wdXNoKCdjbGFzcz1cImRhdGUtZW5kXCInKTtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICBpZiAoZmllbGQpIHtcclxuICAgICAgICAgICAgc3RhcnRBdHRyLnB1c2goJ25hbWU9XCInICsgZmllbGQgKyAnW3N0YXJ0XVwiJyk7XHJcbiAgICAgICAgICAgIHN0YXJ0RW5kLnB1c2goJ25hbWU9XCInICsgZmllbGQgKyAnW2VuZF1cIicpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc3RhcnRBdHRyLnB1c2goJ3ZhbHVlPVwiJyArICh0aGlzLl92YWx1ZSA/IHRoaXMuX3ZhbHVlLnN0YXJ0IDogJycpICsgJ1wiJyk7XHJcbiAgICAgICAgc3RhcnRFbmQucHVzaCgndmFsdWU9XCInICsgKHRoaXMuX3ZhbHVlID8gdGhpcy5fdmFsdWUuZW5kIDogJycpICsgJ1wiJyk7XHJcblxyXG5cclxuICAgICAgICBsZXQgY29udHJvbCA9ICQoY29yZXVpVGFibGVVdGlscy5yZW5kZXIoY29yZXVpVGFibGVUcGxbJ2ZpbHRlcnMvZGF0ZV9yYW5nZS5odG1sJ10sIHtcclxuICAgICAgICAgICAgbGFiZWw6IGxhYmVsLFxyXG4gICAgICAgICAgICBzdGFydEF0dHI6IHN0YXJ0QXR0ci5sZW5ndGggPiAwID8gKCcgJyArIHN0YXJ0QXR0ci5qb2luKCcgJykpIDogJycsXHJcbiAgICAgICAgICAgIGVuZEF0dHI6IHN0YXJ0RW5kLmxlbmd0aCA+IDAgPyAoJyAnICsgc3RhcnRFbmQuam9pbignICcpKSA6ICcnLFxyXG4gICAgICAgIH0pKTtcclxuXHJcbiAgICAgICAgJCgnaW5wdXQnLCBjb250cm9sKS5jaGFuZ2UoZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICB0YWJsZS5zZWFyY2hSZWNvcmRzKCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG5cclxuICAgICAgICAkKCdpbnB1dC5kYXRlLXN0YXJ0JywgY29udHJvbCkuY2hhbmdlKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBsZXQgZGF0ZUVuZCA9ICQoJ2lucHV0LmRhdGUtZW5kJywgY29udHJvbCkuYXR0cignbWluJywgJCh0aGlzKS52YWwoKSk7XHJcblxyXG4gICAgICAgICAgICBpZiAoXCJzaG93UGlja2VyXCIgaW4gSFRNTElucHV0RWxlbWVudC5wcm90b3R5cGUpIHtcclxuICAgICAgICAgICAgICAgICQoZGF0ZUVuZClbMF0uc2hvd1BpY2tlcigpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgJCgnaW5wdXQuZGF0ZS1lbmQnLCBjb250cm9sKS5jaGFuZ2UoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICQoJ2lucHV0LmRhdGUtc3RhcnQnLCBjb250cm9sKS5hdHRyKCdtYXgnLCAkKHRoaXMpLnZhbCgpKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5fY29udHJvbCA9IGNvbnRyb2w7XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLl9jb250cm9sO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBGaWx0ZXJEYXRlUmFuZ2U7IiwiXHJcbmltcG9ydCBjb3JldWlUYWJsZVRwbCAgICAgIGZyb20gXCIuLi9jb3JldWkudGFibGUudGVtcGxhdGVzXCI7XHJcbmltcG9ydCBjb3JldWlUYWJsZVV0aWxzICAgIGZyb20gXCIuLi9jb3JldWkudGFibGUudXRpbHNcIjtcclxuaW1wb3J0IGNvcmV1aVRhYmxlRWxlbWVudHMgZnJvbSBcIi4uL2NvcmV1aS50YWJsZS5lbGVtZW50c1wiO1xyXG5pbXBvcnQgRmlsdGVyICAgICAgICAgICAgICBmcm9tIFwiLi4vYWJzdHJhY3QvRmlsdGVyXCI7XHJcblxyXG5jbGFzcyBGaWx0ZXJEYXRldGltZVJhbmdlIGV4dGVuZHMgRmlsdGVyIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPXHJcbiAgICAgKiBAcGFyYW0ge2NvcmV1aVRhYmxlSW5zdGFuY2V9IHRhYmxlXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gICAgICAgICAgICAgIG9wdGlvbnNcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IodGFibGUsIG9wdGlvbnMpIHtcclxuXHJcbiAgICAgICAgb3B0aW9ucyA9ICQuZXh0ZW5kKHRydWUsIHtcclxuICAgICAgICAgICAgaWQ6IG51bGwsXHJcbiAgICAgICAgICAgIHR5cGU6ICdkYXRldGltZV9yYW5nZScsXHJcbiAgICAgICAgICAgIGZpZWxkOiBudWxsLFxyXG4gICAgICAgICAgICBsYWJlbDogbnVsbCxcclxuICAgICAgICAgICAgdmFsdWU6IG51bGwsXHJcbiAgICAgICAgICAgIHdpZHRoOiAyMDAsXHJcbiAgICAgICAgICAgIGF0dHI6IHtcclxuICAgICAgICAgICAgICAgIGNsYXNzOiBcImZvcm0tY29udHJvbCBkLWlubGluZS1ibG9ja1wiLFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSwgb3B0aW9ucyk7XHJcblxyXG4gICAgICAgIHN1cGVyKHRhYmxlLCBvcHRpb25zKTtcclxuXHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLnZhbHVlICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0VmFsdWUodGhpcy5fb3B0aW9ucy52YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCj0YHRgtCw0L3QvtCy0LrQsCDQt9C90LDRh9C10L3QuNGPXHJcbiAgICAgKiBAcGFyYW0ge29iamVjdHxudWxsfSB2YWx1ZVxyXG4gICAgICovXHJcbiAgICBzZXRWYWx1ZSh2YWx1ZSkge1xyXG5cclxuICAgICAgICBpZiAodmFsdWUpIHtcclxuICAgICAgICAgICAgaWYgKCAhIGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QodmFsdWUpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGxldCBkYXRlU3RhcnQgPSBudWxsO1xyXG4gICAgICAgICAgICBsZXQgZGF0ZUVuZCAgID0gbnVsbDtcclxuXHJcbiAgICAgICAgICAgIGlmICh2YWx1ZS5oYXNPd25Qcm9wZXJ0eSgnc3RhcnQnKSAmJlxyXG4gICAgICAgICAgICAgICAgdHlwZW9mIHZhbHVlLnN0YXJ0ID09PSAnc3RyaW5nJyAmJlxyXG4gICAgICAgICAgICAgICAgdmFsdWUuc3RhcnQubWF0Y2goL15cXGR7NH1cXC1cXGR7Mn1cXC1cXGR7Mn0oVHwgKVxcZHsyfTpcXGR7Mn0oOlxcZHsyfXwpJC8pID09PSBudWxsICYmXHJcbiAgICAgICAgICAgICAgICBpc05hTihuZXcgRGF0ZSh2YWx1ZS5zdGFydCkpXHJcbiAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgZGF0ZVN0YXJ0ID0gdmFsdWUuc3RhcnQ7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh2YWx1ZS5oYXNPd25Qcm9wZXJ0eSgnZW5kJykgJiZcclxuICAgICAgICAgICAgICAgIHR5cGVvZiB2YWx1ZS5lbmQgPT09ICdzdHJpbmcnICYmXHJcbiAgICAgICAgICAgICAgICB2YWx1ZS5lbmQubWF0Y2goL15cXGR7NH1cXC1cXGR7Mn1cXC1cXGR7Mn0oVHwgKVxcZHsyfTpcXGR7Mn0oOlxcZHsyfXwpJC8pID09PSBudWxsICYmXHJcbiAgICAgICAgICAgICAgICBpc05hTihuZXcgRGF0ZSh2YWx1ZS5lbmQpKVxyXG4gICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgIGRhdGVFbmQgPSB2YWx1ZS5lbmQ7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChkYXRlU3RhcnQgPT09IG51bGwgJiYgZGF0ZUVuZCA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fdmFsdWUgPSBudWxsO1xyXG5cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3ZhbHVlID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0OiBkYXRlU3RhcnQsXHJcbiAgICAgICAgICAgICAgICAgICAgZW5kOiAgIGRhdGVFbmRcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5fdmFsdWUgPSBudWxsO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9jb250cm9sKSB7XHJcbiAgICAgICAgICAgIGxldCBpbnB1dFN0YXJ0ID0gdGhpcy5fY29udHJvbC5wYXJlbnQoKS5maW5kKCdpbnB1dC5kYXRlLXN0YXJ0Jyk7XHJcbiAgICAgICAgICAgIGxldCBpbnB1dEVuZCAgID0gdGhpcy5fY29udHJvbC5wYXJlbnQoKS5maW5kKCdpbnB1dC5kYXRlLWVuZCcpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuX3ZhbHVlID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBpbnB1dFN0YXJ0LnZhbCgnJyk7XHJcbiAgICAgICAgICAgICAgICBpbnB1dEVuZC52YWwoJycpO1xyXG5cclxuICAgICAgICAgICAgfSBlbHNlIGlmIChjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KHRoaXMuX3ZhbHVlKSkge1xyXG4gICAgICAgICAgICAgICAgaW5wdXRTdGFydC52YWwodHlwZW9mIHRoaXMuX3ZhbHVlLnN0YXJ0ICE9PSBudWxsID8gdGhpcy5fdmFsdWUuc3RhcnQgOiAnJyk7XHJcbiAgICAgICAgICAgICAgICBpbnB1dEVuZC52YWwodHlwZW9mIHRoaXMuX3ZhbHVlLmVuZCAhPT0gbnVsbCA/IHRoaXMuX3ZhbHVlLmVuZCA6ICcnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0LfQvdCw0YfQtdC90LjRj1xyXG4gICAgICogQHJldHVybnMge09iamVjdHxudWxsfVxyXG4gICAgICovXHJcbiAgICBnZXRWYWx1ZSgpIHtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX2NvbnRyb2wpIHtcclxuICAgICAgICAgICAgbGV0IGlucHV0U3RhcnQgPSB0aGlzLl9jb250cm9sLnBhcmVudCgpLmZpbmQoJ2lucHV0LmRhdGUtc3RhcnQnKTtcclxuICAgICAgICAgICAgbGV0IGlucHV0RW5kICAgPSB0aGlzLl9jb250cm9sLnBhcmVudCgpLmZpbmQoJ2lucHV0LmRhdGUtZW5kJyk7XHJcblxyXG4gICAgICAgICAgICBpZiAoaW5wdXRTdGFydFswXSAmJiBpbnB1dEVuZFswXSkge1xyXG4gICAgICAgICAgICAgICAgbGV0IHZhbHVlU3RhcnQgPSBpbnB1dFN0YXJ0LnZhbCgpO1xyXG4gICAgICAgICAgICAgICAgbGV0IHZhbHVlRW5kICAgPSBpbnB1dEVuZC52YWwoKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoKHR5cGVvZiB2YWx1ZVN0YXJ0ID09PSAnc3RyaW5nJyAmJiB2YWx1ZVN0YXJ0ICE9PSAnJykgfHxcclxuICAgICAgICAgICAgICAgICAgICAodHlwZW9mIHZhbHVlRW5kID09PSAnc3RyaW5nJyAmJiB2YWx1ZUVuZCAhPT0gJycpXHJcbiAgICAgICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFydDogdmFsdWVTdGFydCAhPT0gJycgPyB2YWx1ZVN0YXJ0IDogbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZW5kOiB2YWx1ZUVuZCAhPT0gJycgPyB2YWx1ZUVuZCA6IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5fdmFsdWU7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KTQuNC70YzRgtGA0LDRhtC40Y8g0LTQsNC90L3Ri9GFXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSAgICAgICAgICAgICAgZmllbGRWYWx1ZVxyXG4gICAgICogQHJldHVybnMge0FycmF5fHN0cmluZ3xudW1iZXJ9IHNlYXJjaFZhbHVlXHJcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICAgICAqL1xyXG4gICAgZmlsdGVyKGZpZWxkVmFsdWUsIHNlYXJjaFZhbHVlKSB7XHJcblxyXG4gICAgICAgIGlmIChbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiBmaWVsZFZhbHVlKSA8IDAgfHxcclxuICAgICAgICAgICAgISBjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KHNlYXJjaFZhbHVlKSB8fFxyXG4gICAgICAgICAgICAodHlwZW9mIHNlYXJjaFZhbHVlLnN0YXJ0ICE9PSAnc3RyaW5nJyAmJiB0eXBlb2Ygc2VhcmNoVmFsdWUuZW5kICE9PSAnc3RyaW5nJylcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIGxldCBpc3NldFN0YXJ0ID0gWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2Ygc2VhcmNoVmFsdWUuc3RhcnQpID49IDA7XHJcbiAgICAgICAgbGV0IGlzc2V0RW5kICAgPSBbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiBzZWFyY2hWYWx1ZS5lbmQpID49IDA7XHJcblxyXG4gICAgICAgIGlmIChpc3NldFN0YXJ0ICYmIGlzc2V0RW5kKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmaWVsZFZhbHVlID49IHNlYXJjaFZhbHVlLnN0YXJ0ICYmIGZpZWxkVmFsdWUgPD0gc2VhcmNoVmFsdWUuZW5kO1xyXG5cclxuICAgICAgICB9IGVsc2UgaWYgKGlzc2V0U3RhcnQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZpZWxkVmFsdWUgPj0gc2VhcmNoVmFsdWUuc3RhcnQ7XHJcblxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmaWVsZFZhbHVlIDw9IHNlYXJjaFZhbHVlLmVuZDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KTQvtGA0LzQuNGA0L7QstCw0L3QuNC1INC60L7QvdGC0LXQvdGC0LBcclxuICAgICAqIEByZXR1cm5zIHtqUXVlcnl9XHJcbiAgICAgKi9cclxuICAgIHJlbmRlcigpIHtcclxuXHJcbiAgICAgICAgbGV0IG9wdGlvbnMgPSB0aGlzLmdldE9wdGlvbnMoKTtcclxuICAgICAgICBsZXQgbGFiZWwgICA9IHR5cGVvZiBvcHRpb25zLmxhYmVsID09PSAnc3RyaW5nJyB8fCB0eXBlb2Ygb3B0aW9ucy5sYWJlbCA9PT0gJ251bWJlcidcclxuICAgICAgICAgICAgPyBvcHRpb25zLmxhYmVsXHJcbiAgICAgICAgICAgIDogJyc7XHJcblxyXG4gICAgICAgIGlmICggISBjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KG9wdGlvbnMuYXR0cikpIHtcclxuICAgICAgICAgICAgb3B0aW9ucy5hdHRyID0ge307XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAob3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnd2lkdGgnKSAmJlxyXG4gICAgICAgICAgICBjb3JldWlUYWJsZVV0aWxzLmlzTnVtZXJpYyhvcHRpb25zLndpZHRoKVxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5hdHRyLmhhc093blByb3BlcnR5KCdzdHlsZScpKSB7XHJcbiAgICAgICAgICAgICAgICBvcHRpb25zLmF0dHJbJ3N0eWxlJ10gKz0gJzt3aWR0aDonICsgb3B0aW9ucy53aWR0aCArICdweCc7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBvcHRpb25zLmF0dHJbJ3N0eWxlJ10gPSAnd2lkdGg6JyArIG9wdGlvbnMud2lkdGggKyAncHgnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAob3B0aW9ucy5hdHRyLmhhc093blByb3BlcnR5KCd0eXBlJykpIHtcclxuICAgICAgICAgICAgZGVsZXRlIG9wdGlvbnMuYXR0ci50eXBlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKG9wdGlvbnMuYXR0ci5oYXNPd25Qcm9wZXJ0eSgndmFsdWUnKSkge1xyXG4gICAgICAgICAgICBkZWxldGUgb3B0aW9ucy5hdHRyLnZhbHVlO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIGxldCBmaWVsZCAgICAgPSB0eXBlb2Ygb3B0aW9ucy5maWVsZCA9PT0gJ3N0cmluZycgPyBvcHRpb25zLmZpZWxkIDogJyc7XHJcbiAgICAgICAgbGV0IHN0YXJ0QXR0ciA9IFtdO1xyXG4gICAgICAgIGxldCBzdGFydEVuZCAgPSBbXTtcclxuICAgICAgICBsZXQgdGFibGUgICAgID0gdGhpcy5fdGFibGU7XHJcblxyXG5cclxuICAgICAgICAkLmVhY2gob3B0aW9ucy5hdHRyLCBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcclxuICAgICAgICAgICAgaWYgKFsnbmFtZScsICd2YWx1ZScsICdjbGFzcyddLmluZGV4T2YobmFtZSkgPj0gMCB8fFxyXG4gICAgICAgICAgICAgICAgWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2YgdmFsdWUpIDwgMFxyXG4gICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgc3RhcnRBdHRyLnB1c2gobmFtZSArICc9XCInICsgdmFsdWUgKyAnXCInKTtcclxuICAgICAgICAgICAgc3RhcnRFbmQucHVzaChuYW1lICsgJz1cIicgKyB2YWx1ZSArICdcIicpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBpZiAob3B0aW9ucy5hdHRyLmhhc093blByb3BlcnR5KCdjbGFzcycpICYmXHJcbiAgICAgICAgICAgIFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIG9wdGlvbnMuYXR0ci5jbGFzcykgPj0gMFxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICBzdGFydEF0dHIucHVzaCgnY2xhc3M9XCInICsgb3B0aW9ucy5hdHRyLmNsYXNzICsgJyBkYXRlLXN0YXJ0XCInKTtcclxuICAgICAgICAgICAgc3RhcnRFbmQucHVzaCgnY2xhc3M9XCInICsgb3B0aW9ucy5hdHRyLmNsYXNzICsgJyBkYXRlLWVuZFwiJyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgc3RhcnRBdHRyLnB1c2goJ2NsYXNzPVwiZGF0ZS1zdGFydFwiJyk7XHJcbiAgICAgICAgICAgIHN0YXJ0RW5kLnB1c2goJ2NsYXNzPVwiZGF0ZS1lbmRcIicpO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIGlmIChmaWVsZCkge1xyXG4gICAgICAgICAgICBzdGFydEF0dHIucHVzaCgnbmFtZT1cIicgKyBmaWVsZCArICdbc3RhcnRdXCInKTtcclxuICAgICAgICAgICAgc3RhcnRFbmQucHVzaCgnbmFtZT1cIicgKyBmaWVsZCArICdbZW5kXVwiJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzdGFydEF0dHIucHVzaCgndmFsdWU9XCInICsgKHRoaXMuX3ZhbHVlID8gdGhpcy5fdmFsdWUuc3RhcnQgOiAnJykgKyAnXCInKTtcclxuICAgICAgICBzdGFydEVuZC5wdXNoKCd2YWx1ZT1cIicgKyAodGhpcy5fdmFsdWUgPyB0aGlzLl92YWx1ZS5lbmQgOiAnJykgKyAnXCInKTtcclxuXHJcblxyXG4gICAgICAgIGxldCBjb250cm9sID0gJChjb3JldWlUYWJsZVV0aWxzLnJlbmRlcihjb3JldWlUYWJsZVRwbFsnZmlsdGVycy9kYXRldGltZV9yYW5nZS5odG1sJ10sIHtcclxuICAgICAgICAgICAgbGFiZWw6IGxhYmVsLFxyXG4gICAgICAgICAgICBzdGFydEF0dHI6IHN0YXJ0QXR0ci5sZW5ndGggPiAwID8gKCcgJyArIHN0YXJ0QXR0ci5qb2luKCcgJykpIDogJycsXHJcbiAgICAgICAgICAgIGVuZEF0dHI6IHN0YXJ0RW5kLmxlbmd0aCA+IDAgPyAoJyAnICsgc3RhcnRFbmQuam9pbignICcpKSA6ICcnLFxyXG4gICAgICAgIH0pKTtcclxuXHJcbiAgICAgICAgJCgnaW5wdXQnLCBjb250cm9sKS5jaGFuZ2UoZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICB0YWJsZS5zZWFyY2hSZWNvcmRzKCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG5cclxuICAgICAgICAkKCdpbnB1dC5kYXRlLXN0YXJ0JywgY29udHJvbCkuY2hhbmdlKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBsZXQgZGF0ZUVuZCA9ICQoJ2lucHV0LmRhdGUtZW5kJywgY29udHJvbCkuYXR0cignbWluJywgJCh0aGlzKS52YWwoKSk7XHJcblxyXG4gICAgICAgICAgICBpZiAoXCJzaG93UGlja2VyXCIgaW4gSFRNTElucHV0RWxlbWVudC5wcm90b3R5cGUpIHtcclxuICAgICAgICAgICAgICAgICQoZGF0ZUVuZClbMF0uc2hvd1BpY2tlcigpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgJCgnaW5wdXQuZGF0ZS1lbmQnLCBjb250cm9sKS5jaGFuZ2UoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICQoJ2lucHV0LmRhdGUtc3RhcnQnLCBjb250cm9sKS5hdHRyKCdtYXgnLCAkKHRoaXMpLnZhbCgpKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5fY29udHJvbCA9IGNvbnRyb2w7XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLl9jb250cm9sO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBGaWx0ZXJEYXRldGltZVJhbmdlOyIsIlxyXG5pbXBvcnQgY29yZXVpVGFibGVUcGwgICAgICBmcm9tIFwiLi4vY29yZXVpLnRhYmxlLnRlbXBsYXRlc1wiO1xyXG5pbXBvcnQgY29yZXVpVGFibGVVdGlscyAgICBmcm9tIFwiLi4vY29yZXVpLnRhYmxlLnV0aWxzXCI7XHJcbmltcG9ydCBjb3JldWlUYWJsZUVsZW1lbnRzIGZyb20gXCIuLi9jb3JldWkudGFibGUuZWxlbWVudHNcIjtcclxuaW1wb3J0IEZpbHRlciAgICAgICAgICAgICAgZnJvbSBcIi4uL2Fic3RyYWN0L0ZpbHRlclwiO1xyXG5cclxuY2xhc3MgRmlsdGVyQ2hlY2tib3ggZXh0ZW5kcyBGaWx0ZXIge1xyXG5cclxuICAgIF9jbGFzcyA9ICdidG4gYnRuLW91dGxpbmUtc2Vjb25kYXJ5JztcclxuXHJcbiAgICAvKipcclxuICAgICAqINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPXHJcbiAgICAgKiBAcGFyYW0ge2NvcmV1aVRhYmxlSW5zdGFuY2V9IHRhYmxlXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gICAgICAgICAgICAgIG9wdGlvbnNcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IodGFibGUsIG9wdGlvbnMpIHtcclxuXHJcbiAgICAgICAgb3B0aW9ucyA9ICQuZXh0ZW5kKHRydWUsIHtcclxuICAgICAgICAgICAgaWQ6IG51bGwsXHJcbiAgICAgICAgICAgIHR5cGU6ICdjaGVja2JveCcsXHJcbiAgICAgICAgICAgIGZpZWxkOiBudWxsLFxyXG4gICAgICAgICAgICBsYWJlbDogbnVsbCxcclxuICAgICAgICAgICAgdmFsdWU6IG51bGwsXHJcbiAgICAgICAgICAgIG9wdGlvbnM6IFtdLFxyXG4gICAgICAgIH0sIG9wdGlvbnMpO1xyXG5cclxuICAgICAgICBzdXBlcih0YWJsZSwgb3B0aW9ucyk7XHJcblxyXG5cclxuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy52YWx1ZSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLnNldFZhbHVlKHRoaXMuX29wdGlvbnMudmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQo9GB0YLQsNC90L7QstC60LAg0LfQvdCw0YfQtdC90LjRj1xyXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd8bnVtYmVyfG51bGx9IHZhbHVlXHJcbiAgICAgKi9cclxuICAgIHNldFZhbHVlICh2YWx1ZSkge1xyXG5cclxuICAgICAgICBpZiAoWydzdHJpbmcnLCAnbnVtYmVyJywgJ29iamVjdCddLmluZGV4T2YodHlwZW9mIHZhbHVlKSA8IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgaXRlbXMgPSBbXTtcclxuXHJcbiAgICAgICAgICAgICAgICAkLmVhY2godmFsdWUsIGZ1bmN0aW9uIChrZXksIGl0ZW0pIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJyAmJiB0eXBlb2YgdmFsdWUgIT09ICdudW1iZXInKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGl0ZW1zLnB1c2goaXRlbSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLl92YWx1ZSA9IGl0ZW1zO1xyXG5cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3ZhbHVlID0gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLl92YWx1ZSA9IFsgdmFsdWUgXTtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICBpZiAodGhpcy5fY29udHJvbCkge1xyXG4gICAgICAgICAgICAkKCdpbnB1dDpjaGVja2VkJywgdGhpcy5fY29udHJvbCkucHJvcCgnY2hlY2tlZCcsIGZhbHNlKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHRoaXMuX3ZhbHVlKSkge1xyXG4gICAgICAgICAgICAgICAgbGV0IGNvbnRyb2wgPSB0aGlzLl9jb250cm9sO1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuX3ZhbHVlLm1hcChmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAkKCdpbnB1dFt2YWx1ZT1cIicgKyB2YWx1ZSArICdcIl0nLCBjb250cm9sKS5wcm9wKCdjaGVja2VkJywgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSDQt9C90LDRh9C10L3QuNGPXHJcbiAgICAgKiBAcmV0dXJucyB7QXJyYXl8bnVsbH1cclxuICAgICAqL1xyXG4gICAgZ2V0VmFsdWUoKSB7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9jb250cm9sKSB7XHJcbiAgICAgICAgICAgIGxldCBpbnB1dHMgPSAkKCdpbnB1dDpjaGVja2VkJywgdGhpcy5fY29udHJvbCk7XHJcbiAgICAgICAgICAgIGxldCBpdGVtcyAgPSBbXTtcclxuXHJcbiAgICAgICAgICAgICQuZWFjaChpbnB1dHMsIGZ1bmN0aW9uIChrZXksIGlucHV0KSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgdmFsdWUgPSAkKGlucHV0KS5hdHRyKCd2YWx1ZScpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiB2YWx1ZSkgPj0gMCAmJlxyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlICE9PSAnJ1xyXG4gICAgICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaXRlbXMucHVzaCh2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGl0ZW1zLmxlbmd0aCA+IDAgPyBpdGVtcyA6IG51bGw7XHJcblxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl92YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KTQuNC70YzRgtGA0LDRhtC40Y8g0LTQsNC90L3Ri9GFXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBmaWVsZFZhbHVlXHJcbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9ICBzZWFyY2hWYWx1ZVxyXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAgICAgKi9cclxuICAgIGZpbHRlcihmaWVsZFZhbHVlLCBzZWFyY2hWYWx1ZSkge1xyXG5cclxuICAgICAgICBpZiAoWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2YgZmllbGRWYWx1ZSkgPCAwIHx8XHJcbiAgICAgICAgICAgICEgQXJyYXkuaXNBcnJheShzZWFyY2hWYWx1ZSlcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHNlYXJjaFZhbHVlLmluZGV4T2YoZmllbGRWYWx1ZSkgPj0gMDtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQpNC+0YDQvNC40YDQvtCy0LDQvdC40LUg0LrQvtC90YLQtdC90YLQsFxyXG4gICAgICogQHJldHVybnMge3N0cmluZ31cclxuICAgICAqL1xyXG4gICAgcmVuZGVyKCkge1xyXG5cclxuICAgICAgICBsZXQgdGhhdCAgICA9IHRoaXM7XHJcbiAgICAgICAgbGV0IG9wdGlvbnMgPSB0aGlzLmdldE9wdGlvbnMoKTtcclxuICAgICAgICBsZXQgZmllbGQgICA9IHR5cGVvZiBvcHRpb25zLmZpZWxkID09PSAnc3RyaW5nJyA/IG9wdGlvbnMuZmllbGQgOiAnJztcclxuICAgICAgICBsZXQgaXRlbXMgICA9IFtdO1xyXG4gICAgICAgIGxldCBsYWJlbCAgID0gdHlwZW9mIG9wdGlvbnMubGFiZWwgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBvcHRpb25zLmxhYmVsID09PSAnbnVtYmVyJ1xyXG4gICAgICAgICAgICA/IG9wdGlvbnMubGFiZWxcclxuICAgICAgICAgICAgOiAnJztcclxuXHJcbiAgICAgICAgJC5lYWNoKG9wdGlvbnMub3B0aW9ucywgZnVuY3Rpb24gKGtleSwgb3B0aW9uKSB7XHJcbiAgICAgICAgICAgIGlmICggISBjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KG9wdGlvbikgfHxcclxuICAgICAgICAgICAgICAgICEgb3B0aW9uLmhhc093blByb3BlcnR5KCd2YWx1ZScpIHx8XHJcbiAgICAgICAgICAgICAgICBbJ3N0cmluZycsICdudW1lcmljJ10uaW5kZXhPZih0eXBlb2Ygb3B0aW9uLnZhbHVlKSA9PT0gLTFcclxuICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGxldCBjaGVja2VkID0gQXJyYXkuaXNBcnJheSh0aGF0Ll92YWx1ZSkgPyB0aGF0Ll92YWx1ZS5pbmRleE9mKG9wdGlvbi52YWx1ZSkgPj0gMCA6IGZhbHNlO1xyXG4gICAgICAgICAgICBsZXQgdGV4dCAgICA9IG9wdGlvbi5oYXNPd25Qcm9wZXJ0eSgndGV4dCcpXHJcbiAgICAgICAgICAgICAgICA/IG9wdGlvbi50ZXh0XHJcbiAgICAgICAgICAgICAgICA6IG9wdGlvbi52YWx1ZTtcclxuXHJcbiAgICAgICAgICAgIGl0ZW1zLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgdGV4dDogICAgdGV4dCxcclxuICAgICAgICAgICAgICAgIHZhbHVlOiAgIG9wdGlvbi52YWx1ZSxcclxuICAgICAgICAgICAgICAgIGNsYXNzOiAgIG9wdGlvbi5oYXNPd25Qcm9wZXJ0eSgnY2xhc3MnKSAmJiB0eXBlb2Ygb3B0aW9uLmNsYXNzID09PSAnc3RyaW5nJyA/IG9wdGlvbi5jbGFzcyA6IHRoYXQuX2NsYXNzLFxyXG4gICAgICAgICAgICAgICAgY2hlY2tlZDogY2hlY2tlZCxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuX2NvbnRyb2wgPSAkKGNvcmV1aVRhYmxlVXRpbHMucmVuZGVyKGNvcmV1aVRhYmxlVHBsWydmaWx0ZXJzL2NoZWNrYm94Lmh0bWwnXSwge1xyXG4gICAgICAgICAgICBsYWJlbDogbGFiZWwsXHJcbiAgICAgICAgICAgIGl0ZW1zOiBpdGVtcyxcclxuICAgICAgICAgICAgZmllbGQ6IGZpZWxkICsgdGhpcy5nZXRJZCgpLFxyXG4gICAgICAgICAgICBsYW5nOiB0aGlzLl90YWJsZS5nZXRMYW5nKClcclxuICAgICAgICB9KSk7XHJcblxyXG4gICAgICAgICQoJ2lucHV0JywgdGhpcy5fY29udHJvbCkuY2hhbmdlKGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgdGhhdC5fdGFibGUuc2VhcmNoUmVjb3JkcygpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5fY29udHJvbDtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgRmlsdGVyQ2hlY2tib3g7IiwiXHJcbmltcG9ydCBjb3JldWlUYWJsZVRwbCAgICAgIGZyb20gXCIuLi9jb3JldWkudGFibGUudGVtcGxhdGVzXCI7XHJcbmltcG9ydCBjb3JldWlUYWJsZVV0aWxzICAgIGZyb20gXCIuLi9jb3JldWkudGFibGUudXRpbHNcIjtcclxuaW1wb3J0IGNvcmV1aVRhYmxlRWxlbWVudHMgZnJvbSBcIi4uL2NvcmV1aS50YWJsZS5lbGVtZW50c1wiO1xyXG5pbXBvcnQgRmlsdGVyICAgICAgICAgICAgICBmcm9tIFwiLi4vYWJzdHJhY3QvRmlsdGVyXCI7XHJcblxyXG5jbGFzcyBGaWx0ZXJSYWRpbyBleHRlbmRzIEZpbHRlciB7XHJcblxyXG4gICAgX2NsYXNzID0gJ2J0biBidG4tb3V0bGluZS1zZWNvbmRhcnknO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y9cclxuICAgICAqIEBwYXJhbSB7Y29yZXVpVGFibGVJbnN0YW5jZX0gdGFibGVcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSAgICAgICAgICAgICAgb3B0aW9uc1xyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3Rvcih0YWJsZSwgb3B0aW9ucykge1xyXG5cclxuICAgICAgICBvcHRpb25zID0gJC5leHRlbmQodHJ1ZSwge1xyXG4gICAgICAgICAgICBpZDogbnVsbCxcclxuICAgICAgICAgICAgdHlwZTogJ3JhZGlvJyxcclxuICAgICAgICAgICAgZmllbGQ6IG51bGwsXHJcbiAgICAgICAgICAgIGxhYmVsOiBudWxsLFxyXG4gICAgICAgICAgICB2YWx1ZTogbnVsbCxcclxuICAgICAgICAgICAgb3B0aW9uczogW10sXHJcbiAgICAgICAgfSwgb3B0aW9ucyk7XHJcblxyXG4gICAgICAgIHN1cGVyKHRhYmxlLCBvcHRpb25zKTtcclxuXHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLnZhbHVlICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0VmFsdWUodGhpcy5fb3B0aW9ucy52YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCj0YHRgtCw0L3QvtCy0LrQsCDQt9C90LDRh9C10L3QuNGPXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ3xudW1iZXJ8bnVsbH0gdmFsdWVcclxuICAgICAqL1xyXG4gICAgc2V0VmFsdWUodmFsdWUpIHtcclxuXHJcbiAgICAgICAgaWYgKHZhbHVlICE9PSBudWxsICYmXHJcbiAgICAgICAgICAgIHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycgJiZcclxuICAgICAgICAgICAgdHlwZW9mIHZhbHVlICE9PSAnbnVtYmVyJ1xyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl92YWx1ZSA9IHZhbHVlO1xyXG5cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX2NvbnRyb2wpIHtcclxuICAgICAgICAgICAgJCgnaW5wdXQnLCB0aGlzLl9jb250cm9sKS5wcm9wKCdjaGVja2VkJywgZmFsc2UpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuX3ZhbHVlICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAkKCdpbnB1dFt2YWx1ZT1cIicgKyB0aGlzLl92YWx1ZSArICdcIl0nLCB0aGlzLl9jb250cm9sKS5wcm9wKCdjaGVja2VkJywgdHJ1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC30L3QsNGH0LXQvdC40Y9cclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd8bnVsbH1cclxuICAgICAqL1xyXG4gICAgZ2V0VmFsdWUoKSB7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9jb250cm9sKSB7XHJcbiAgICAgICAgICAgIGxldCBpbnB1dCA9ICQoJ2lucHV0OmNoZWNrZWQnLCB0aGlzLl9jb250cm9sKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChpbnB1dCAmJiBpbnB1dFswXSkge1xyXG4gICAgICAgICAgICAgICAgbGV0IHZhbHVlID0gaW5wdXQudmFsKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlID09PSAnJ1xyXG4gICAgICAgICAgICAgICAgICAgID8gbnVsbFxyXG4gICAgICAgICAgICAgICAgICAgIDogdmFsdWVcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcblxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl92YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KTQuNC70YzRgtGA0LDRhtC40Y8g0LTQsNC90L3Ri9GFXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSAgICAgICAgICAgICAgZmllbGRWYWx1ZVxyXG4gICAgICogQHJldHVybnMge0FycmF5fHN0cmluZ3xudW1iZXJ9IHNlYXJjaFZhbHVlXHJcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICAgICAqL1xyXG4gICAgZmlsdGVyKGZpZWxkVmFsdWUsIHNlYXJjaFZhbHVlKSB7XHJcblxyXG4gICAgICAgIGlmIChbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiBmaWVsZFZhbHVlKSA8IDAgfHxcclxuICAgICAgICAgICAgWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2Ygc2VhcmNoVmFsdWUpIDwgMFxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gZmllbGRWYWx1ZS50b1N0cmluZygpLnRvTG93ZXJDYXNlKCkgPT09IHNlYXJjaFZhbHVlLnRvU3RyaW5nKCkudG9Mb3dlckNhc2UoKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQpNC+0YDQvNC40YDQvtCy0LDQvdC40LUg0LrQvtC90YLQtdC90YLQsFxyXG4gICAgICogQHJldHVybnMge3N0cmluZ31cclxuICAgICAqL1xyXG4gICAgcmVuZGVyKCkge1xyXG5cclxuICAgICAgICBsZXQgdGhhdCAgICA9IHRoaXM7XHJcbiAgICAgICAgbGV0IHRhYmxlICAgPSB0aGlzLl90YWJsZTtcclxuICAgICAgICBsZXQgb3B0aW9ucyA9IHRoaXMuZ2V0T3B0aW9ucygpO1xyXG4gICAgICAgIGxldCBmaWVsZCAgID0gdHlwZW9mIG9wdGlvbnMuZmllbGQgPT09ICdzdHJpbmcnID8gb3B0aW9ucy5maWVsZCA6ICcnO1xyXG4gICAgICAgIGxldCBpdGVtcyAgID0gW107XHJcbiAgICAgICAgbGV0IGxhYmVsICAgPSB0eXBlb2Ygb3B0aW9ucy5sYWJlbCA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIG9wdGlvbnMubGFiZWwgPT09ICdudW1iZXInXHJcbiAgICAgICAgICAgID8gb3B0aW9ucy5sYWJlbFxyXG4gICAgICAgICAgICA6ICcnO1xyXG5cclxuICAgICAgICAkLmVhY2gob3B0aW9ucy5vcHRpb25zLCBmdW5jdGlvbiAoa2V5LCBvcHRpb24pIHtcclxuICAgICAgICAgICAgaWYgKCAhIGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3Qob3B0aW9uKSB8fFxyXG4gICAgICAgICAgICAgICAgISBvcHRpb24uaGFzT3duUHJvcGVydHkoJ3ZhbHVlJykgfHxcclxuICAgICAgICAgICAgICAgIFsnc3RyaW5nJywgJ251bWVyaWMnXS5pbmRleE9mKHR5cGVvZiBvcHRpb24udmFsdWUpID09PSAtMVxyXG4gICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgbGV0IHRleHQgPSBvcHRpb24uaGFzT3duUHJvcGVydHkoJ3RleHQnKVxyXG4gICAgICAgICAgICAgICAgPyBvcHRpb24udGV4dFxyXG4gICAgICAgICAgICAgICAgOiBvcHRpb24udmFsdWU7XHJcblxyXG4gICAgICAgICAgICBpdGVtcy5wdXNoKHtcclxuICAgICAgICAgICAgICAgIHRleHQ6ICAgIHRleHQsXHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogICBvcHRpb24udmFsdWUsXHJcbiAgICAgICAgICAgICAgICBjbGFzczogICBvcHRpb24uaGFzT3duUHJvcGVydHkoJ2NsYXNzJykgJiYgdHlwZW9mIG9wdGlvbi5jbGFzcyA9PT0gJ3N0cmluZycgPyBvcHRpb24uY2xhc3MgOiB0aGF0Ll9jbGFzcyxcclxuICAgICAgICAgICAgICAgIGNoZWNrZWQ6IG9wdGlvbi52YWx1ZSA9PSB0aGF0Ll92YWx1ZSxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuX2NvbnRyb2wgPSAkKGNvcmV1aVRhYmxlVXRpbHMucmVuZGVyKGNvcmV1aVRhYmxlVHBsWydmaWx0ZXJzL3JhZGlvLmh0bWwnXSwge1xyXG4gICAgICAgICAgICBsYWJlbDogbGFiZWwsXHJcbiAgICAgICAgICAgIGl0ZW1zOiBpdGVtcyxcclxuICAgICAgICAgICAgZmllbGQ6IGZpZWxkICsgdGhpcy5nZXRJZCgpLFxyXG4gICAgICAgICAgICBsYW5nOiB0aGlzLl90YWJsZS5nZXRMYW5nKClcclxuICAgICAgICB9KSk7XHJcblxyXG5cclxuICAgICAgICAkKCdpbnB1dCcsIHRoaXMuX2NvbnRyb2wpLmNoYW5nZShmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgIHRhYmxlLnNlYXJjaFJlY29yZHMoKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbnRyb2w7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IEZpbHRlclJhZGlvOyIsIlxyXG5pbXBvcnQgY29yZXVpVGFibGVUcGwgICBmcm9tIFwiLi4vY29yZXVpLnRhYmxlLnRlbXBsYXRlc1wiO1xyXG5pbXBvcnQgY29yZXVpVGFibGVVdGlscyBmcm9tIFwiLi4vY29yZXVpLnRhYmxlLnV0aWxzXCI7XHJcbmltcG9ydCBGaWx0ZXIgICAgICAgICAgIGZyb20gXCIuLi9hYnN0cmFjdC9GaWx0ZXJcIjtcclxuXHJcbmNsYXNzIEZpbHRlclNlbGVjdCBleHRlbmRzIEZpbHRlciB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQmNC90LjRhtC40LDQu9C40LfQsNGG0LjRj1xyXG4gICAgICogQHBhcmFtIHtjb3JldWlUYWJsZUluc3RhbmNlfSB0YWJsZVxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9ICAgICAgICAgICAgICBvcHRpb25zXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKHRhYmxlLCBvcHRpb25zKSB7XHJcblxyXG4gICAgICAgIG9wdGlvbnMgPSAkLmV4dGVuZCh0cnVlLCB7XHJcbiAgICAgICAgICAgIGlkOiBudWxsLFxyXG4gICAgICAgICAgICB0eXBlOiAnc2VsZWN0JyxcclxuICAgICAgICAgICAgZmllbGQ6IG51bGwsXHJcbiAgICAgICAgICAgIGxhYmVsOiBudWxsLFxyXG4gICAgICAgICAgICB3aWR0aDogbnVsbCxcclxuICAgICAgICAgICAgdmFsdWU6IG51bGwsXHJcbiAgICAgICAgICAgIGF0dHI6IHtcclxuICAgICAgICAgICAgICAgIGNsYXNzOiAnZm9ybS1zZWxlY3QgZC1pbmxpbmUtYmxvY2snXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIG9wdGlvbnM6IFtdXHJcbiAgICAgICAgfSwgb3B0aW9ucyk7XHJcblxyXG4gICAgICAgIHN1cGVyKHRhYmxlLCBvcHRpb25zKTtcclxuXHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLnZhbHVlICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0VmFsdWUodGhpcy5fb3B0aW9ucy52YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCj0YHRgtCw0L3QvtCy0LrQsCDQt9C90LDRh9C10L3QuNGPXHJcbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ3xudW1iZXJ8bnVsbH0gdmFsdWVcclxuICAgICAqL1xyXG4gICAgc2V0VmFsdWUodmFsdWUpIHtcclxuXHJcbiAgICAgICAgaWYgKFsnc3RyaW5nJywgJ251bWJlcicsICdvYmplY3QnXS5pbmRleE9mKHR5cGVvZiB2YWx1ZSkgPCAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xyXG4gICAgICAgICAgICAgICAgbGV0IGl0ZW1zID0gW107XHJcblxyXG4gICAgICAgICAgICAgICAgJC5lYWNoKHZhbHVlLCBmdW5jdGlvbiAoa2V5LCBpdGVtKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycgJiYgdHlwZW9mIHZhbHVlICE9PSAnbnVtYmVyJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpdGVtcy5wdXNoKGl0ZW0pO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5fdmFsdWUgPSBpdGVtcztcclxuXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl92YWx1ZSA9IG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5fdmFsdWUgPSBbIHZhbHVlIF07XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX2NvbnRyb2wpIHtcclxuICAgICAgICAgICAgJCgnc2VsZWN0IG9wdGlvbjpzZWxlY3RlZCcsIHRoaXMuX2NvbnRyb2wpLnByb3AoJ3NlbGVjdGVkJywgZmFsc2UpO1xyXG5cclxuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodGhpcy5fdmFsdWUpKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgY29udHJvbCA9IHRoaXMuX2NvbnRyb2w7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5fdmFsdWUubWFwKGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICQoJ3NlbGVjdCBvcHRpb25bdmFsdWU9XCInICsgdmFsdWUgKyAnXCJdJywgY29udHJvbCkucHJvcCgnc2VsZWN0ZWQnLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC30L3QsNGH0LXQvdC40Y9cclxuICAgICAqIEByZXR1cm5zIHtBcnJheXxzdHJpbmd8bnVsbH1cclxuICAgICAqL1xyXG4gICAgZ2V0VmFsdWUoKSB7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9jb250cm9sKSB7XHJcbiAgICAgICAgICAgIGxldCBpc011bHRpcGxlID0gISEgJCgnc2VsZWN0JywgdGhpcy5fY29udHJvbCkuYXR0cignbXVsdGlwbGUnKTtcclxuICAgICAgICAgICAgbGV0IG9wdGlvbnMgICAgPSAkKCdzZWxlY3Qgb3B0aW9uOmNoZWNrZWQnLCB0aGlzLl9jb250cm9sKTtcclxuICAgICAgICAgICAgbGV0IGl0ZW1zICAgICAgPSBbXTtcclxuXHJcbiAgICAgICAgICAgICQuZWFjaChvcHRpb25zLCBmdW5jdGlvbiAoa2V5LCBvcHRpb24pIHtcclxuICAgICAgICAgICAgICAgIGxldCB2YWx1ZSA9ICQob3B0aW9uKS5hdHRyKCd2YWx1ZScpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiB2YWx1ZSkgPj0gMCAmJlxyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlICE9PSAnJ1xyXG4gICAgICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaXRlbXMucHVzaCh2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGl0ZW1zLmxlbmd0aCA+IDBcclxuICAgICAgICAgICAgICAgID8gKGlzTXVsdGlwbGUgPyBpdGVtcyA6IGl0ZW1zWzBdKVxyXG4gICAgICAgICAgICAgICAgOiBudWxsO1xyXG5cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fdmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCk0LjQu9GM0YLRgNCw0YbQuNGPINC00LDQvdC90YvRhVxyXG4gICAgICogQHJldHVybnMge3N0cmluZ30gICAgICAgICAgICAgIGZpZWxkVmFsdWVcclxuICAgICAqIEByZXR1cm5zIHtBcnJheXxzdHJpbmd8bnVtYmVyfSBzZWFyY2hWYWx1ZVxyXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAgICAgKi9cclxuICAgIGZpbHRlcihmaWVsZFZhbHVlLCBzZWFyY2hWYWx1ZSkge1xyXG5cclxuICAgICAgICBpZiAoWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2YgZmllbGRWYWx1ZSkgPCAwIHx8XHJcbiAgICAgICAgICAgIChbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiBzZWFyY2hWYWx1ZSkgPCAwICYmICEgQXJyYXkuaXNBcnJheShzZWFyY2hWYWx1ZSkpXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShzZWFyY2hWYWx1ZSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHNlYXJjaFZhbHVlLmluZGV4T2YoZmllbGRWYWx1ZSkgPj0gMDtcclxuXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZpZWxkVmFsdWUudG9TdHJpbmcoKS50b0xvd2VyQ2FzZSgpID09PSBzZWFyY2hWYWx1ZS50b1N0cmluZygpLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCk0L7RgNC80LjRgNC+0LLQsNC90LjQtSDQutC+0L3RgtC10L3RgtCwXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxyXG4gICAgICovXHJcbiAgICByZW5kZXIoKSB7XHJcblxyXG4gICAgICAgIGxldCB0aGF0ICAgICAgICAgID0gdGhpcztcclxuICAgICAgICBsZXQgb3B0aW9ucyAgICAgICA9IHRoaXMuZ2V0T3B0aW9ucygpO1xyXG4gICAgICAgIGxldCBzZWxlY3RPcHRpb25zID0gW107XHJcbiAgICAgICAgbGV0IGF0dHJpYnV0ZXMgICAgPSBbXTtcclxuICAgICAgICBsZXQgdGFibGUgICAgICAgICA9IHRoaXMuX3RhYmxlO1xyXG4gICAgICAgIGxldCBsYWJlbCAgICAgICAgID0gdHlwZW9mIG9wdGlvbnMubGFiZWwgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBvcHRpb25zLmxhYmVsID09PSAnbnVtYmVyJ1xyXG4gICAgICAgICAgICA/IG9wdGlvbnMubGFiZWxcclxuICAgICAgICAgICAgOiAnJztcclxuXHJcbiAgICAgICAgaWYgKCAhIG9wdGlvbnMuaGFzT3duUHJvcGVydHkoJ2F0dHInKSB8fFxyXG4gICAgICAgICAgICAhIGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3Qob3B0aW9ucy5hdHRyKVxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICBvcHRpb25zLmF0dHIgPSB7fTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChvcHRpb25zLmZpZWxkKSB7XHJcbiAgICAgICAgICAgIG9wdGlvbnMuYXR0ci5uYW1lID0gdGhpcy5fb3B0aW9ucy5maWVsZDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChvcHRpb25zLndpZHRoKSB7XHJcbiAgICAgICAgICAgIG9wdGlvbnMuYXR0ciA9IGNvcmV1aVRhYmxlVXRpbHMubWVyZ2VBdHRyKFxyXG4gICAgICAgICAgICAgICAgeyBzdHlsZTogJ3dpZHRoOicgKyBvcHRpb25zLndpZHRoICsgJ3B4JyB9LFxyXG4gICAgICAgICAgICAgICAgb3B0aW9ucy5hdHRyXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAob3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnb3B0aW9ucycpICYmXHJcbiAgICAgICAgICAgIHR5cGVvZiBvcHRpb25zLm9wdGlvbnMgPT09ICdvYmplY3QnICYmXHJcbiAgICAgICAgICAgIG9wdGlvbnMub3B0aW9ucyAhPT0gbnVsbFxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICAkLmVhY2gob3B0aW9ucy5vcHRpb25zLCBmdW5jdGlvbiAoa2V5LCBvcHRpb24pIHtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG9wdGlvbiA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIG9wdGlvbiA9PT0gJ251bWJlcicpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZWxlY3RPcHRpb25zLnB1c2godGhhdC5fYnVpbGRPcHRpb24oe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnb3B0aW9uJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGtleSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogb3B0aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgfSkpO1xyXG5cclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY29yZXVpVGFibGVVdGlscy5pc09iamVjdChvcHRpb24pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHR5cGUgPSBvcHRpb24uaGFzT3duUHJvcGVydHkoJ3R5cGUnKSAmJiB0eXBlb2Ygb3B0aW9uLnR5cGUgPT09ICdzdHJpbmcnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgID8gb3B0aW9uLnR5cGVcclxuICAgICAgICAgICAgICAgICAgICAgICAgOiAnb3B0aW9uJztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGUgPT09ICdncm91cCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHJlbmRlckF0dHIgICA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgZ3JvdXBBdHRyICAgID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBncm91cE9wdGlvbnMgPSBbXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcHRpb24uaGFzT3duUHJvcGVydHkoJ2F0dHInKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29yZXVpVGFibGVVdGlscy5pc09iamVjdChvcHRpb24uYXR0cilcclxuICAgICAgICAgICAgICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBncm91cEF0dHIgPSBvcHRpb24uYXR0cjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbi5oYXNPd25Qcm9wZXJ0eSgnbGFiZWwnKSAmJiBbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZihvcHRpb24ubGFiZWwpKSA+PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBncm91cEF0dHIubGFiZWwgPSBvcHRpb24ubGFiZWw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICQuZWFjaChncm91cEF0dHIsIGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVyQXR0ci5wdXNoKG5hbWUgKyAnPVwiJyArIHZhbHVlICsgJ1wiJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkob3B0aW9uLm9wdGlvbnMpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLmVhY2gob3B0aW9uLm9wdGlvbnMsIGZ1bmN0aW9uIChrZXksIGdyb3VwT3B0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3JvdXBPcHRpb25zLnB1c2godGhhdC5fYnVpbGRPcHRpb24oZ3JvdXBPcHRpb24pKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RPcHRpb25zLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2dyb3VwJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHI6IHJlbmRlckF0dHIubGVuZ3RoID4gMCA/ICgnICcgKyByZW5kZXJBdHRyLmpvaW4oJyAnKSkgOiAnJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnM6IGdyb3VwT3B0aW9ucyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdE9wdGlvbnMucHVzaCh0aGF0Ll9idWlsZE9wdGlvbihvcHRpb24pKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgJC5lYWNoKG9wdGlvbnMuYXR0ciwgZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XHJcbiAgICAgICAgICAgIGF0dHJpYnV0ZXMucHVzaChuYW1lICsgJz1cIicgKyB2YWx1ZSArICdcIicpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLl9jb250cm9sID0gJChjb3JldWlUYWJsZVV0aWxzLnJlbmRlcihjb3JldWlUYWJsZVRwbFsnZmlsdGVycy9zZWxlY3QuaHRtbCddLCB7XHJcbiAgICAgICAgICAgIGxhYmVsOiBsYWJlbCxcclxuICAgICAgICAgICAgYXR0cjogYXR0cmlidXRlcy5sZW5ndGggPiAwID8gKCcgJyArIGF0dHJpYnV0ZXMuam9pbignICcpKSA6ICcnLFxyXG4gICAgICAgICAgICBvcHRpb25zOiBzZWxlY3RPcHRpb25zXHJcbiAgICAgICAgfSkpO1xyXG5cclxuICAgICAgICAkKCdzZWxlY3QnLCB0aGlzLl9jb250cm9sKS5jaGFuZ2UoZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICB0YWJsZS5zZWFyY2hSZWNvcmRzKCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLl9jb250cm9sO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCh0LHQvtGA0LrQsCDQvtC/0YbQuNC4XHJcbiAgICAgKiBAcGFyYW0gb3B0aW9uXHJcbiAgICAgKiBAcmV0dXJuIHtvYmplY3R9XHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBfYnVpbGRPcHRpb24ob3B0aW9uKSB7XHJcblxyXG4gICAgICAgIGxldCBvcHRpb25BdHRyID0gW107XHJcbiAgICAgICAgbGV0IG9wdGlvblRleHQgPSBvcHRpb24uaGFzT3duUHJvcGVydHkoJ3RleHQnKSAmJiBbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZihvcHRpb24udGV4dCkpID49IDBcclxuICAgICAgICAgICAgPyBvcHRpb24udGV4dFxyXG4gICAgICAgICAgICA6ICcnO1xyXG5cclxuICAgICAgICAkLmVhY2gob3B0aW9uLCBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcclxuICAgICAgICAgICAgaWYgKG5hbWUgIT09ICd0ZXh0Jykge1xyXG4gICAgICAgICAgICAgICAgb3B0aW9uQXR0ci5wdXNoKG5hbWUgKyAnPVwiJyArIHZhbHVlICsgJ1wiJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcblxyXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHRoaXMuX3ZhbHVlKSkge1xyXG4gICAgICAgICAgICAkLmVhY2godGhpcy5fdmFsdWUsIGZ1bmN0aW9uIChrZXksIGl0ZW1WYWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGl0ZW1WYWx1ZSA9PSBvcHRpb24udmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICBvcHRpb25BdHRyLnB1c2goJ3NlbGVjdGVkPVwic2VsZWN0ZWRcIicpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fdmFsdWUgPT0gb3B0aW9uLnZhbHVlKSB7XHJcbiAgICAgICAgICAgIG9wdGlvbkF0dHIucHVzaCgnc2VsZWN0ZWQ9XCJzZWxlY3RlZFwiJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICB0eXBlOiAnb3B0aW9uJyxcclxuICAgICAgICAgICAgdGV4dDogb3B0aW9uVGV4dCxcclxuICAgICAgICAgICAgYXR0cjogb3B0aW9uQXR0ci5sZW5ndGggPiAwID8gKCcgJyArIG9wdGlvbkF0dHIuam9pbignICcpKSA6ICcnXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgRmlsdGVyU2VsZWN0OyIsIlxyXG5pbXBvcnQgY29yZXVpVGFibGVUcGwgICBmcm9tIFwiLi4vY29yZXVpLnRhYmxlLnRlbXBsYXRlc1wiO1xyXG5pbXBvcnQgY29yZXVpVGFibGVVdGlscyBmcm9tIFwiLi4vY29yZXVpLnRhYmxlLnV0aWxzXCI7XHJcbmltcG9ydCBGaWx0ZXIgICAgICAgICAgIGZyb20gXCIuLi9hYnN0cmFjdC9GaWx0ZXJcIjtcclxuXHJcbmNsYXNzIEZpbHRlclN3aXRjaCBleHRlbmRzIEZpbHRlciB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQmNC90LjRhtC40LDQu9C40LfQsNGG0LjRj1xyXG4gICAgICogQHBhcmFtIHtjb3JldWlUYWJsZUluc3RhbmNlfSB0YWJsZVxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9ICAgICAgICAgICAgICBvcHRpb25zXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKHRhYmxlLCBvcHRpb25zKSB7XHJcblxyXG4gICAgICAgIG9wdGlvbnMgPSAkLmV4dGVuZCh0cnVlLCB7XHJcbiAgICAgICAgICAgIGlkOiBudWxsLFxyXG4gICAgICAgICAgICB0eXBlOiAnc3dpdGNoJyxcclxuICAgICAgICAgICAgZmllbGQ6IG51bGwsXHJcbiAgICAgICAgICAgIGxhYmVsOiBudWxsLFxyXG4gICAgICAgICAgICB2YWx1ZTogbnVsbCxcclxuICAgICAgICAgICAgdmFsdWVZOiAxXHJcbiAgICAgICAgfSwgb3B0aW9ucyk7XHJcblxyXG4gICAgICAgIHN1cGVyKHRhYmxlLCBvcHRpb25zKTtcclxuXHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLnZhbHVlICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0VmFsdWUodGhpcy5fb3B0aW9ucy52YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCk0LjQu9GM0YLRgNCw0YbQuNGPINC00LDQvdC90YvRhVxyXG4gICAgICogQHJldHVybnMge3N0cmluZ30gICAgICAgICAgICAgIGZpZWxkVmFsdWVcclxuICAgICAqIEByZXR1cm5zIHtBcnJheXxzdHJpbmd8bnVtYmVyfSBzZWFyY2hWYWx1ZVxyXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAgICAgKi9cclxuICAgIGZpbHRlcihmaWVsZFZhbHVlLCBzZWFyY2hWYWx1ZSkge1xyXG5cclxuICAgICAgICBpZiAoWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2YgZmllbGRWYWx1ZSkgPCAwIHx8XHJcbiAgICAgICAgICAgIFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIHNlYXJjaFZhbHVlKSA8IDBcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGZpZWxkVmFsdWUudG9TdHJpbmcoKSA9PT0gc2VhcmNoVmFsdWUudG9TdHJpbmcoKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQo9GB0YLQsNC90L7QstC60LAg0LfQvdCw0YfQtdC90LjRj1xyXG4gICAgICogQHBhcmFtIHtzdHJpbmd8bnVtYmVyfG51bGx9IHZhbHVlXHJcbiAgICAgKi9cclxuICAgIHNldFZhbHVlKHZhbHVlKSB7XHJcblxyXG4gICAgICAgIGlmICh2YWx1ZSAhPT0gbnVsbCAmJlxyXG4gICAgICAgICAgICB0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnICYmXHJcbiAgICAgICAgICAgIHR5cGVvZiB2YWx1ZSAhPT0gJ251bWJlcidcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fdmFsdWUgPSB2YWx1ZVxyXG5cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX2NvbnRyb2wpIHtcclxuICAgICAgICAgICAgbGV0IHZhbHVlWSA9IHR5cGVvZiB0aGlzLl9vcHRpb25zLnZhbHVlWSA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIHRoaXMuX29wdGlvbnMudmFsdWVZID09PSAnbnVtYmVyJ1xyXG4gICAgICAgICAgICAgICAgPyB0aGlzLl9vcHRpb25zLnZhbHVlWVxyXG4gICAgICAgICAgICAgICAgOiAnJ1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuX3ZhbHVlID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAkKCdpbnB1dCcsIHRoaXMuX2NvbnRyb2wpLnByb3AoJ2NoZWNrZWQnLCBmYWxzZSk7XHJcblxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX3ZhbHVlID09PSB2YWx1ZVkpIHtcclxuICAgICAgICAgICAgICAgICQoJ2lucHV0JywgdGhpcy5fY29udHJvbCkucHJvcCgnY2hlY2tlZCcsIHRydWUpO1xyXG5cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICQoJ2lucHV0JywgdGhpcy5fY29udHJvbCkucHJvcCgnY2hlY2tlZCcsIGZhbHNlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0LfQvdCw0YfQtdC90LjRj1xyXG4gICAgICogQHJldHVybnMge3N0cmluZ31cclxuICAgICAqL1xyXG4gICAgZ2V0VmFsdWUoKSB7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9jb250cm9sKSB7XHJcbiAgICAgICAgICAgIGxldCB2YWx1ZSA9ICQoJ2lucHV0OmNoZWNrZWQnLCB0aGlzLl9jb250cm9sKS52YWwoKTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYgdmFsdWUgIT09ICcnKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLl92YWx1ZTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQpNC+0YDQvNC40YDQvtCy0LDQvdC40LUg0LrQvtC90YLQtdC90YLQsFxyXG4gICAgICogQHJldHVybnMge3N0cmluZ31cclxuICAgICAqL1xyXG4gICAgcmVuZGVyKCkge1xyXG5cclxuICAgICAgICBsZXQgdGFibGUgICA9IHRoaXMuX3RhYmxlO1xyXG4gICAgICAgIGxldCBvcHRpb25zID0gdGhpcy5nZXRPcHRpb25zKCk7XHJcbiAgICAgICAgbGV0IHZhbHVlWSAgPSB0eXBlb2Ygb3B0aW9ucy52YWx1ZVkgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBvcHRpb25zLnZhbHVlWSA9PT0gJ251bWJlcidcclxuICAgICAgICAgICAgPyBvcHRpb25zLnZhbHVlWVxyXG4gICAgICAgICAgICA6ICcnXHJcbiAgICAgICAgbGV0IGxhYmVsID0gdHlwZW9mIG9wdGlvbnMubGFiZWwgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBvcHRpb25zLmxhYmVsID09PSAnbnVtYmVyJ1xyXG4gICAgICAgICAgICA/IG9wdGlvbnMubGFiZWxcclxuICAgICAgICAgICAgOiAnJztcclxuXHJcblxyXG4gICAgICAgIHRoaXMuX2NvbnRyb2wgPSAkKGNvcmV1aVRhYmxlVXRpbHMucmVuZGVyKGNvcmV1aVRhYmxlVHBsWydmaWx0ZXJzL3N3aXRjaC5odG1sJ10sIHtcclxuICAgICAgICAgICAgaWQ6IHRoaXMuX2lkLFxyXG4gICAgICAgICAgICB2YWx1ZVk6IHZhbHVlWSxcclxuICAgICAgICAgICAgZmllbGQ6IHR5cGVvZiBvcHRpb25zLmZpZWxkID09PSAnc3RyaW5nJyA/IG9wdGlvbnMuZmllbGQgOiAnJyxcclxuICAgICAgICAgICAgY2hlY2tlZDogdGhpcy5fdmFsdWUgPT0gdmFsdWVZLFxyXG4gICAgICAgICAgICBsYWJlbDogbGFiZWwsXHJcbiAgICAgICAgfSkpO1xyXG5cclxuXHJcbiAgICAgICAgJCgnaW5wdXQnLCB0aGlzLl9jb250cm9sKS5jaGFuZ2UoZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICB0YWJsZS5zZWFyY2hSZWNvcmRzKCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLl9jb250cm9sO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBGaWx0ZXJTd2l0Y2g7IiwiaW1wb3J0IGNvcmV1aVRhYmxlVXRpbHMgZnJvbSBcIi4uL2NvcmV1aS50YWJsZS51dGlsc1wiO1xyXG5cclxuY2xhc3MgU2VhcmNoIHtcclxuXHJcbiAgICBfaWQgICAgICA9IG51bGw7XHJcbiAgICBfdGFibGUgICA9IG51bGw7XHJcbiAgICBfdmFsdWUgICA9IG51bGw7XHJcbiAgICBfY29udHJvbCA9IG51bGw7XHJcbiAgICBfb3B0aW9ucyA9IHtcclxuICAgICAgICBpZDogJycsXHJcbiAgICAgICAgdHlwZTogJycsXHJcbiAgICAgICAgZmllbGQ6IG51bGwsXHJcbiAgICAgICAgbGFiZWw6IG51bGxcclxuICAgIH07XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y9cclxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSB0YWJsZVxyXG4gICAgICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnNcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IodGFibGUsIG9wdGlvbnMpIHtcclxuXHJcbiAgICAgICAgdGhpcy5fdGFibGUgICA9IHRhYmxlO1xyXG4gICAgICAgIHRoaXMuX29wdGlvbnMgPSAkLmV4dGVuZCh0cnVlLCB0aGlzLl9vcHRpb25zLCBvcHRpb25zKTtcclxuICAgICAgICB0aGlzLl9pZCAgICAgID0gdGhpcy5fb3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnaWQnKSAmJiB0eXBlb2YgdGhpcy5fb3B0aW9ucy5pZCA9PT0gJ3N0cmluZycgJiYgdGhpcy5fb3B0aW9ucy5pZFxyXG4gICAgICAgICAgICA/IHRoaXMuX29wdGlvbnMuaWRcclxuICAgICAgICAgICAgOiBjb3JldWlUYWJsZVV0aWxzLmhhc2hDb2RlKCk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC/0LDRgNCw0LzQtdGC0YDQvtCyXHJcbiAgICAgKiBAcmV0dXJucyB7b2JqZWN0fVxyXG4gICAgICovXHJcbiAgICBnZXRPcHRpb25zKCkge1xyXG4gICAgICAgIHJldHVybiAkLmV4dGVuZCh0cnVlLCB7fSwgdGhpcy5fb3B0aW9ucyk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1IGlkXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxyXG4gICAgICovXHJcbiAgICBnZXRJZCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5faWQ7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KPRgdGC0LDQvdC+0LLQutCwINC30L3QsNGH0LXQvdC40Y9cclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxyXG4gICAgICovXHJcbiAgICBzZXRWYWx1ZSh2YWx1ZSkge31cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0LfQvdCw0YfQtdC90LjRj1xyXG4gICAgICogQHJldHVybnMge3N0cmluZ3xudWxsfVxyXG4gICAgICovXHJcbiAgICBnZXRWYWx1ZSAoKSB7fVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSDQvdCw0LfQstCw0L3QuNC1INC/0L7Qu9GPXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfG51bGx9XHJcbiAgICAgKi9cclxuICAgIGdldEZpZWxkICgpIHtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX29wdGlvbnMuZmllbGQ7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KTQuNC70YzRgtGA0LDRhtC40Y8g0LTQsNC90L3Ri9GFXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBmaWVsZFZhbHVlXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBzZWFyY2hWYWx1ZVxyXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAgICAgKi9cclxuICAgIGZpbHRlcihmaWVsZFZhbHVlLCBzZWFyY2hWYWx1ZSkge1xyXG5cclxuICAgICAgICBpZiAoWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2YgZmllbGRWYWx1ZSkgPCAwIHx8XHJcbiAgICAgICAgICAgIFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIHNlYXJjaFZhbHVlKSA8IDBcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGZpZWxkVmFsdWUudG9TdHJpbmcoKS50b0xvd2VyQ2FzZSgpLmluZGV4T2YoXHJcbiAgICAgICAgICAgIHNlYXJjaFZhbHVlLnRvU3RyaW5nKCkudG9Mb3dlckNhc2UoKVxyXG4gICAgICAgICkgPj0gMDtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQpNC+0YDQvNC40YDQvtCy0LDQvdC40LUg0LrQvtC90YLQtdC90YLQsFxyXG4gICAgICogQHJldHVybnMge2pRdWVyeXxzdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIHJlbmRlciAoKSB7fVxyXG59XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgU2VhcmNoOyIsIlxyXG5pbXBvcnQgY29yZXVpVGFibGVUcGwgICAgICBmcm9tIFwiLi4vY29yZXVpLnRhYmxlLnRlbXBsYXRlc1wiO1xyXG5pbXBvcnQgY29yZXVpVGFibGVVdGlscyAgICBmcm9tIFwiLi4vY29yZXVpLnRhYmxlLnV0aWxzXCI7XHJcbmltcG9ydCBjb3JldWlUYWJsZUVsZW1lbnRzIGZyb20gXCIuLi9jb3JldWkudGFibGUuZWxlbWVudHNcIjtcclxuaW1wb3J0IFNlYXJjaCAgICAgICAgICAgICAgZnJvbSBcIi4uL2Fic3RyYWN0L1NlYXJjaFwiO1xyXG5cclxuXHJcbmNsYXNzIFNlYXJjaFRleHQgZXh0ZW5kcyBTZWFyY2gge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y9cclxuICAgICAqIEBwYXJhbSB7Y29yZXVpVGFibGVJbnN0YW5jZX0gdGFibGVcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSAgICAgICAgICAgICAgb3B0aW9uc1xyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3Rvcih0YWJsZSwgb3B0aW9ucykge1xyXG5cclxuICAgICAgICBvcHRpb25zID0gJC5leHRlbmQodHJ1ZSwge1xyXG4gICAgICAgICAgICBpZDogbnVsbCxcclxuICAgICAgICAgICAgdHlwZTogJ3RleHQnLFxyXG4gICAgICAgICAgICBmaWVsZDogbnVsbCxcclxuICAgICAgICAgICAgbGFiZWw6IG51bGwsXHJcbiAgICAgICAgICAgIHZhbHVlOiBudWxsLFxyXG4gICAgICAgICAgICB3aWR0aDogMjAwLFxyXG4gICAgICAgICAgICBhdHRyOiB7XHJcbiAgICAgICAgICAgICAgICBjbGFzczogXCJmb3JtLWNvbnRyb2wgZC1pbmxpbmUtYmxvY2tcIixcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sIG9wdGlvbnMpO1xyXG5cclxuICAgICAgICBzdXBlcih0YWJsZSwgb3B0aW9ucyk7XHJcblxyXG5cclxuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy52YWx1ZSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLnNldFZhbHVlKHRoaXMuX29wdGlvbnMudmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQo9GB0YLQsNC90L7QstC60LAg0LfQvdCw0YfQtdC90LjRj1xyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXHJcbiAgICAgKi9cclxuICAgIHNldFZhbHVlKHZhbHVlKSB7XHJcblxyXG4gICAgICAgIGlmICh2YWx1ZSAhPT0gbnVsbCAmJlxyXG4gICAgICAgICAgICB0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnICYmXHJcbiAgICAgICAgICAgIHR5cGVvZiB2YWx1ZSAhPT0gJ251bWJlcidcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fdmFsdWUgPSB2YWx1ZVxyXG5cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX2NvbnRyb2wpIHtcclxuICAgICAgICAgICAgdGhpcy5fY29udHJvbC52YWwoXHJcbiAgICAgICAgICAgICAgICB0aGlzLl92YWx1ZSA9PT0gbnVsbCA/ICcnIDogdGhpcy5fdmFsdWVcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC30L3QsNGH0LXQvdC40Y9cclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd8bnVsbH1cclxuICAgICAqL1xyXG4gICAgZ2V0VmFsdWUoKSB7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9jb250cm9sKSB7XHJcbiAgICAgICAgICAgIGxldCB2YWx1ZSA9IHRoaXMuX2NvbnRyb2wudmFsKCk7XHJcblxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJiB2YWx1ZSAhPT0gJycpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCk0L7RgNC80LjRgNC+0LLQsNC90LjQtSDQutC+0L3RgtC10L3RgtCwXHJcbiAgICAgKiBAcmV0dXJucyB7alF1ZXJ5fVxyXG4gICAgICovXHJcbiAgICByZW5kZXIoKSB7XHJcblxyXG4gICAgICAgIGlmICggISBjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KHRoaXMuX29wdGlvbnMuYXR0cikpIHtcclxuICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy5hdHRyID0ge307XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnd2lkdGgnKSAmJlxyXG4gICAgICAgICAgICBjb3JldWlUYWJsZVV0aWxzLmlzTnVtZXJpYyh0aGlzLl9vcHRpb25zLndpZHRoKVxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy5hdHRyLmhhc093blByb3BlcnR5KCdzdHlsZScpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9vcHRpb25zLmF0dHJbJ3N0eWxlJ10gKz0gJzt3aWR0aDonICsgdGhpcy5fb3B0aW9ucy53aWR0aCArICdweCc7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9vcHRpb25zLmF0dHJbJ3N0eWxlJ10gPSAnd2lkdGg6JyArIHRoaXMuX29wdGlvbnMud2lkdGggKyAncHgnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9vcHRpb25zLmF0dHJbJ3ZhbHVlJ10gPSB0eXBlb2YgdGhpcy5fdmFsdWUgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiB0aGlzLl92YWx1ZSA9PT0gJ251bWJlcidcclxuICAgICAgICAgICAgPyB0aGlzLl92YWx1ZVxyXG4gICAgICAgICAgICA6ICcnO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy5hdHRyLmhhc093blByb3BlcnR5KCd0eXBlJykpIHtcclxuICAgICAgICAgICAgZGVsZXRlIHRoaXMuX29wdGlvbnMuYXR0ci50eXBlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IGF0dHJpYnV0ZXMgPSBbXTtcclxuICAgICAgICBsZXQgdGFibGUgICAgICA9IHRoaXMuX3RhYmxlO1xyXG5cclxuICAgICAgICAkLmVhY2godGhpcy5fb3B0aW9ucy5hdHRyLCBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcclxuICAgICAgICAgICAgaWYgKFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIHZhbHVlKSA+PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzLnB1c2gobmFtZSArICc9XCInICsgdmFsdWUgKyAnXCInKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLl9jb250cm9sID0gJChjb3JldWlUYWJsZVV0aWxzLnJlbmRlcihjb3JldWlUYWJsZVRwbFsnc2VhcmNoL3RleHQuaHRtbCddLCB7XHJcbiAgICAgICAgICAgIGF0dHI6IGF0dHJpYnV0ZXMubGVuZ3RoID4gMCA/ICgnICcgKyBhdHRyaWJ1dGVzLmpvaW4oJyAnKSkgOiAnJyxcclxuICAgICAgICB9KSk7XHJcblxyXG5cclxuICAgICAgICAkKCdpbnB1dCcsIHRoaXMuX2NvbnRyb2wpLmtleXVwKGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgaWYgKGUua2V5ID09PSAnRW50ZXInIHx8IGUua2V5Q29kZSA9PT0gMTMpIHtcclxuICAgICAgICAgICAgICAgIHRhYmxlLnNlYXJjaFJlY29yZHMoKTtcclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgY29udGFpbmVyID0gY29yZXVpVGFibGVFbGVtZW50cy5nZXRTZWFyY2hDb250YWluZXIodGFibGUuZ2V0SWQoKSk7XHJcbiAgICAgICAgICAgICAgICBjb250YWluZXIuZmFkZU91dCgnZmFzdCcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLl9jb250cm9sO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBTZWFyY2hUZXh0OyIsIlxyXG5pbXBvcnQgY29yZXVpVGFibGVUcGwgICAgICBmcm9tIFwiLi4vY29yZXVpLnRhYmxlLnRlbXBsYXRlc1wiO1xyXG5pbXBvcnQgY29yZXVpVGFibGVVdGlscyAgICBmcm9tIFwiLi4vY29yZXVpLnRhYmxlLnV0aWxzXCI7XHJcbmltcG9ydCBjb3JldWlUYWJsZUVsZW1lbnRzIGZyb20gXCIuLi9jb3JldWkudGFibGUuZWxlbWVudHNcIjtcclxuaW1wb3J0IFNlYXJjaCAgICAgICAgICAgICAgZnJvbSBcIi4uL2Fic3RyYWN0L1NlYXJjaFwiO1xyXG5cclxuY2xhc3MgU2VhcmNoTnVtYmVyIGV4dGVuZHMgU2VhcmNoIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPXHJcbiAgICAgKiBAcGFyYW0ge2NvcmV1aVRhYmxlSW5zdGFuY2V9IHRhYmxlXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gICAgICAgICAgICAgIG9wdGlvbnNcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IodGFibGUsIG9wdGlvbnMpIHtcclxuXHJcbiAgICAgICAgb3B0aW9ucyA9ICQuZXh0ZW5kKHRydWUsIHtcclxuICAgICAgICAgICAgaWQ6IG51bGwsXHJcbiAgICAgICAgICAgIHR5cGU6ICdudW1iZXInLFxyXG4gICAgICAgICAgICBmaWVsZDogbnVsbCxcclxuICAgICAgICAgICAgbGFiZWw6IG51bGwsXHJcbiAgICAgICAgICAgIHZhbHVlOiBudWxsLFxyXG4gICAgICAgICAgICB3aWR0aDogMjAwLFxyXG4gICAgICAgICAgICBhdHRyOiB7XHJcbiAgICAgICAgICAgICAgICBjbGFzczogXCJmb3JtLWNvbnRyb2wgZC1pbmxpbmUtYmxvY2tcIixcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sIG9wdGlvbnMpO1xyXG5cclxuICAgICAgICBzdXBlcih0YWJsZSwgb3B0aW9ucyk7XHJcblxyXG5cclxuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy52YWx1ZSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLnNldFZhbHVlKHRoaXMuX29wdGlvbnMudmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQo9GB0YLQsNC90L7QstC60LAg0LfQvdCw0YfQtdC90LjRj1xyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHZhbHVlXHJcbiAgICAgKi9cclxuICAgIHNldFZhbHVlICh2YWx1ZSkge1xyXG5cclxuICAgICAgICBpZiAodmFsdWUpIHtcclxuICAgICAgICAgICAgaWYgKCAhIGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QodmFsdWUpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGxldCBudW1iZXJTdGFydCA9IG51bGw7XHJcbiAgICAgICAgICAgIGxldCBudW1iZXJFbmQgICA9IG51bGw7XHJcblxyXG4gICAgICAgICAgICBpZiAodmFsdWUuaGFzT3duUHJvcGVydHkoJ3N0YXJ0JykgJiZcclxuICAgICAgICAgICAgICAgIFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIHZhbHVlLnN0YXJ0KSA+PSAwICYmXHJcbiAgICAgICAgICAgICAgICAhIGlzTmFOKE51bWJlcih2YWx1ZS5zdGFydCkpXHJcbiAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgbnVtYmVyU3RhcnQgPSBOdW1iZXIodmFsdWUuc3RhcnQpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodmFsdWUuaGFzT3duUHJvcGVydHkoJ2VuZCcpICYmXHJcbiAgICAgICAgICAgICAgICBbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiB2YWx1ZS5lbmQpID49IDAgJiZcclxuICAgICAgICAgICAgICAgICEgaXNOYU4oTnVtYmVyKHZhbHVlLmVuZCkpXHJcbiAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgbnVtYmVyRW5kID0gTnVtYmVyKHZhbHVlLmVuZCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChudW1iZXJTdGFydCA9PT0gbnVsbCAmJiBudW1iZXJFbmQgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3ZhbHVlID0gbnVsbDtcclxuXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl92YWx1ZSA9IHtcclxuICAgICAgICAgICAgICAgICAgICBzdGFydDogbnVtYmVyU3RhcnQsXHJcbiAgICAgICAgICAgICAgICAgICAgZW5kOiBudW1iZXJFbmRcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5fdmFsdWUgPSBudWxsO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9jb250cm9sKSB7XHJcbiAgICAgICAgICAgIGxldCBpbnB1dFN0YXJ0ID0gdGhpcy5fY29udHJvbC5wYXJlbnQoKS5maW5kKCdpbnB1dC5udW1iZXItc3RhcnQnKTtcclxuICAgICAgICAgICAgbGV0IGlucHV0RW5kICAgPSB0aGlzLl9jb250cm9sLnBhcmVudCgpLmZpbmQoJ2lucHV0Lm51bWJlci1lbmQnKTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLl92YWx1ZSA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgaW5wdXRTdGFydC52YWwoJycpO1xyXG4gICAgICAgICAgICAgICAgaW5wdXRFbmQudmFsKCcnKTtcclxuXHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY29yZXVpVGFibGVVdGlscy5pc09iamVjdCh0aGlzLl92YWx1ZSkpIHtcclxuICAgICAgICAgICAgICAgIGlucHV0U3RhcnQudmFsKHR5cGVvZiB0aGlzLl92YWx1ZS5zdGFydCAhPT0gbnVsbCA/IHRoaXMuX3ZhbHVlLnN0YXJ0IDogJycpO1xyXG4gICAgICAgICAgICAgICAgaW5wdXRFbmQudmFsKHR5cGVvZiB0aGlzLl92YWx1ZS5lbmQgIT09IG51bGwgPyB0aGlzLl92YWx1ZS5lbmQgOiAnJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC30L3QsNGH0LXQvdC40Y9cclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd8bnVsbH1cclxuICAgICAqL1xyXG4gICAgZ2V0VmFsdWUoKSB7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9jb250cm9sKSB7XHJcbiAgICAgICAgICAgIGxldCBpbnB1dFN0YXJ0ID0gdGhpcy5fY29udHJvbC5wYXJlbnQoKS5maW5kKCdpbnB1dC5udW1iZXItc3RhcnQnKTtcclxuICAgICAgICAgICAgbGV0IGlucHV0RW5kICAgPSB0aGlzLl9jb250cm9sLnBhcmVudCgpLmZpbmQoJ2lucHV0Lm51bWJlci1lbmQnKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChpbnB1dFN0YXJ0WzBdICYmIGlucHV0RW5kWzBdKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgbGV0IHZhbHVlU3RhcnQgPSBpbnB1dFN0YXJ0LnZhbCgpO1xyXG4gICAgICAgICAgICAgICAgbGV0IHZhbHVlRW5kICAgPSBpbnB1dEVuZC52YWwoKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgICAgICAgICAgKHR5cGVvZiB2YWx1ZVN0YXJ0ID09PSAnc3RyaW5nJyAmJiB2YWx1ZVN0YXJ0ICE9PSAnJykgfHxcclxuICAgICAgICAgICAgICAgICAgICAodHlwZW9mIHZhbHVlRW5kID09PSAnc3RyaW5nJyAmJiB2YWx1ZUVuZCAhPT0gJycpXHJcbiAgICAgICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFydDogdmFsdWVTdGFydCAhPT0gJycgJiYgISBpc05hTihOdW1iZXIodmFsdWVTdGFydCkpID8gTnVtYmVyKHZhbHVlU3RhcnQpIDogbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZW5kOiB2YWx1ZUVuZCAhPT0gJycgJiYgISBpc05hTihOdW1iZXIodmFsdWVFbmQpKSA/IE51bWJlcih2YWx1ZUVuZCkgOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLl92YWx1ZTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQpNC40LvRjNGC0YDQsNGG0LjRjyDQtNCw0L3QvdGL0YVcclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9ICAgICAgICAgICAgICBmaWVsZFZhbHVlXHJcbiAgICAgKiBAcmV0dXJucyB7QXJyYXl8c3RyaW5nfG51bWJlcn0gc2VhcmNoVmFsdWVcclxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gICAgICovXHJcbiAgICBmaWx0ZXIoZmllbGRWYWx1ZSwgc2VhcmNoVmFsdWUpIHtcclxuXHJcbiAgICAgICAgaWYgKFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIGZpZWxkVmFsdWUpIDwgMCB8fFxyXG4gICAgICAgICAgICAhIGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3Qoc2VhcmNoVmFsdWUpIHx8XHJcbiAgICAgICAgICAgIChcclxuICAgICAgICAgICAgICAgIFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIHNlYXJjaFZhbHVlLnN0YXJ0KSA8IDAgJiZcclxuICAgICAgICAgICAgICAgIFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIHNlYXJjaFZhbHVlLmVuZCkgPCAwXHJcbiAgICAgICAgICAgIClcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIGxldCBpc3NldFN0YXJ0ID0gWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2Ygc2VhcmNoVmFsdWUuc3RhcnQpID49IDA7XHJcbiAgICAgICAgbGV0IGlzc2V0RW5kICAgPSBbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiBzZWFyY2hWYWx1ZS5lbmQpID49IDA7XHJcblxyXG4gICAgICAgIGlmIChpc3NldFN0YXJ0ICYmIGlzc2V0RW5kKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmaWVsZFZhbHVlID49IHNlYXJjaFZhbHVlLnN0YXJ0ICYmIGZpZWxkVmFsdWUgPD0gc2VhcmNoVmFsdWUuZW5kO1xyXG5cclxuICAgICAgICB9IGVsc2UgaWYgKGlzc2V0U3RhcnQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZpZWxkVmFsdWUgPj0gc2VhcmNoVmFsdWUuc3RhcnQ7XHJcblxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmaWVsZFZhbHVlIDw9IHNlYXJjaFZhbHVlLmVuZDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KTQvtGA0LzQuNGA0L7QstCw0L3QuNC1INC60L7QvdGC0LXQvdGC0LBcclxuICAgICAqIEByZXR1cm5zIHtqUXVlcnl9XHJcbiAgICAgKi9cclxuICAgIHJlbmRlcigpIHtcclxuXHJcbiAgICAgICAgaWYgKCAhIGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QodGhpcy5fb3B0aW9ucy5hdHRyKSkge1xyXG4gICAgICAgICAgICB0aGlzLl9vcHRpb25zLmF0dHIgPSB7fTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLmhhc093blByb3BlcnR5KCd3aWR0aCcpICYmXHJcbiAgICAgICAgICAgIGNvcmV1aVRhYmxlVXRpbHMuaXNOdW1lcmljKHRoaXMuX29wdGlvbnMud2lkdGgpXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9vcHRpb25zLmF0dHIuaGFzT3duUHJvcGVydHkoJ3N0eWxlJykpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX29wdGlvbnMuYXR0clsnc3R5bGUnXSArPSAnO3dpZHRoOicgKyB0aGlzLl9vcHRpb25zLndpZHRoICsgJ3B4JztcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX29wdGlvbnMuYXR0clsnc3R5bGUnXSA9ICd3aWR0aDonICsgdGhpcy5fb3B0aW9ucy53aWR0aCArICdweCc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLmF0dHIuaGFzT3duUHJvcGVydHkoJ3R5cGUnKSkge1xyXG4gICAgICAgICAgICBkZWxldGUgdGhpcy5fb3B0aW9ucy5hdHRyLnR5cGU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy5hdHRyLmhhc093blByb3BlcnR5KCd2YWx1ZScpKSB7XHJcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9vcHRpb25zLmF0dHIudmFsdWU7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgbGV0IGZpZWxkICAgICA9IHR5cGVvZiB0aGlzLl9vcHRpb25zLmZpZWxkID09PSAnc3RyaW5nJyA/IHRoaXMuX29wdGlvbnMuZmllbGQgOiAnJztcclxuICAgICAgICBsZXQgc3RhcnRBdHRyID0gW107XHJcbiAgICAgICAgbGV0IHN0YXJ0RW5kICA9IFtdO1xyXG4gICAgICAgIGxldCB0YWJsZSAgICAgPSB0aGlzLl90YWJsZTtcclxuXHJcblxyXG4gICAgICAgICQuZWFjaCh0aGlzLl9vcHRpb25zLmF0dHIsIGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xyXG4gICAgICAgICAgICBpZiAoWyduYW1lJywgJ3ZhbHVlJywgJ2NsYXNzJ10uaW5kZXhPZihuYW1lKSA+PSAwIHx8XHJcbiAgICAgICAgICAgICAgICBbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiB2YWx1ZSkgPCAwXHJcbiAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzdGFydEF0dHIucHVzaChuYW1lICsgJz1cIicgKyB2YWx1ZSArICdcIicpO1xyXG4gICAgICAgICAgICBzdGFydEVuZC5wdXNoKG5hbWUgKyAnPVwiJyArIHZhbHVlICsgJ1wiJyk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLmF0dHIuaGFzT3duUHJvcGVydHkoJ2NsYXNzJykgJiZcclxuICAgICAgICAgICAgWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2YgdGhpcy5fb3B0aW9ucy5hdHRyLmNsYXNzKSA+PSAwXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIHN0YXJ0QXR0ci5wdXNoKCdjbGFzcz1cIicgKyB0aGlzLl9vcHRpb25zLmF0dHIuY2xhc3MgKyAnIG51bWJlci1zdGFydFwiJyk7XHJcbiAgICAgICAgICAgIHN0YXJ0RW5kLnB1c2goJ2NsYXNzPVwiJyArIHRoaXMuX29wdGlvbnMuYXR0ci5jbGFzcyArICcgbnVtYmVyLWVuZFwiJyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgc3RhcnRBdHRyLnB1c2goJ2NsYXNzPVwibnVtYmVyLXN0YXJ0XCInKTtcclxuICAgICAgICAgICAgc3RhcnRFbmQucHVzaCgnY2xhc3M9XCJudW1iZXItZW5kXCInKTtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICBpZiAoZmllbGQpIHtcclxuICAgICAgICAgICAgc3RhcnRBdHRyLnB1c2goJ25hbWU9XCInICsgZmllbGQgKyAnW3N0YXJ0XVwiJyk7XHJcbiAgICAgICAgICAgIHN0YXJ0RW5kLnB1c2goJ25hbWU9XCInICsgZmllbGQgKyAnW2VuZF1cIicpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc3RhcnRBdHRyLnB1c2goJ3ZhbHVlPVwiJyArICh0aGlzLl92YWx1ZSA/IHRoaXMuX3ZhbHVlLnN0YXJ0IDogJycpICsgJ1wiJyk7XHJcbiAgICAgICAgc3RhcnRFbmQucHVzaCgndmFsdWU9XCInICsgKHRoaXMuX3ZhbHVlID8gdGhpcy5fdmFsdWUuZW5kIDogJycpICsgJ1wiJyk7XHJcblxyXG5cclxuICAgICAgICB0aGlzLl9jb250cm9sID0gJChjb3JldWlUYWJsZVV0aWxzLnJlbmRlcihjb3JldWlUYWJsZVRwbFsnc2VhcmNoL251bWJlci5odG1sJ10sIHtcclxuICAgICAgICAgICAgc3RhcnRBdHRyOiBzdGFydEF0dHIubGVuZ3RoID4gMCA/ICgnICcgKyBzdGFydEF0dHIuam9pbignICcpKSA6ICcnLFxyXG4gICAgICAgICAgICBlbmRBdHRyOiBzdGFydEVuZC5sZW5ndGggPiAwID8gKCcgJyArIHN0YXJ0RW5kLmpvaW4oJyAnKSkgOiAnJyxcclxuICAgICAgICB9KSk7XHJcblxyXG4gICAgICAgICQoJ2lucHV0Lm51bWJlci1zdGFydCwgaW5wdXQubnVtYmVyLWVuZCcsIHRoaXMuX2NvbnRyb2wpLmtleXVwKGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgaWYgKGUua2V5ID09PSAnRW50ZXInIHx8IGUua2V5Q29kZSA9PT0gMTMpIHtcclxuICAgICAgICAgICAgICAgIHRhYmxlLnNlYXJjaFJlY29yZHMoKTtcclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgY29udGFpbmVyID0gY29yZXVpVGFibGVFbGVtZW50cy5nZXRTZWFyY2hDb250YWluZXIodGFibGUuZ2V0SWQoKSk7XHJcbiAgICAgICAgICAgICAgICBjb250YWluZXIuZmFkZU91dCgnZmFzdCcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLl9jb250cm9sO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBTZWFyY2hOdW1iZXI7IiwiXHJcbmltcG9ydCBjb3JldWlUYWJsZVRwbCAgICAgIGZyb20gXCIuLi9jb3JldWkudGFibGUudGVtcGxhdGVzXCI7XHJcbmltcG9ydCBjb3JldWlUYWJsZVV0aWxzICAgIGZyb20gXCIuLi9jb3JldWkudGFibGUudXRpbHNcIjtcclxuaW1wb3J0IGNvcmV1aVRhYmxlRWxlbWVudHMgZnJvbSBcIi4uL2NvcmV1aS50YWJsZS5lbGVtZW50c1wiO1xyXG5pbXBvcnQgU2VhcmNoICAgICAgICAgICAgICBmcm9tIFwiLi4vYWJzdHJhY3QvU2VhcmNoXCI7XHJcblxyXG5jbGFzcyBTZWFyY2hEYXRlIGV4dGVuZHMgU2VhcmNoIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPXHJcbiAgICAgKiBAcGFyYW0ge2NvcmV1aVRhYmxlSW5zdGFuY2V9IHRhYmxlXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gICAgICAgICAgICAgIG9wdGlvbnNcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IodGFibGUsIG9wdGlvbnMpIHtcclxuXHJcbiAgICAgICAgb3B0aW9ucyA9ICQuZXh0ZW5kKHRydWUsIHtcclxuICAgICAgICAgICAgaWQ6IG51bGwsXHJcbiAgICAgICAgICAgIHR5cGU6ICdkYXRlJyxcclxuICAgICAgICAgICAgZmllbGQ6IG51bGwsXHJcbiAgICAgICAgICAgIGxhYmVsOiBudWxsLFxyXG4gICAgICAgICAgICB2YWx1ZTogbnVsbCxcclxuICAgICAgICAgICAgd2lkdGg6IDIwMCxcclxuICAgICAgICAgICAgYXR0cjoge1xyXG4gICAgICAgICAgICAgICAgY2xhc3M6IFwiZm9ybS1jb250cm9sIGQtaW5saW5lLWJsb2NrXCIsXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LCBvcHRpb25zKTtcclxuXHJcbiAgICAgICAgc3VwZXIodGFibGUsIG9wdGlvbnMpO1xyXG5cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMudmFsdWUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5zZXRWYWx1ZSh0aGlzLl9vcHRpb25zLnZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KPRgdGC0LDQvdC+0LLQutCwINC30L3QsNGH0LXQvdC40Y9cclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxyXG4gICAgICovXHJcbiAgICBzZXRWYWx1ZSh2YWx1ZSkge1xyXG5cclxuICAgICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJyAmJiB2YWx1ZSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodmFsdWUgJiZcclxuICAgICAgICAgICAgKFxyXG4gICAgICAgICAgICAgICAgdmFsdWUubWF0Y2goL15cXGR7NH1cXC1cXGR7Mn1cXC1cXGR7Mn0kLykgPT09IG51bGwgfHxcclxuICAgICAgICAgICAgICAgIGlzTmFOKG5ldyBEYXRlKHZhbHVlKSlcclxuICAgICAgICAgICAgKVxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl92YWx1ZSA9IHZhbHVlO1xyXG5cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX2NvbnRyb2wpIHtcclxuICAgICAgICAgICAgdGhpcy5fY29udHJvbC52YWwoXHJcbiAgICAgICAgICAgICAgICB0aGlzLl92YWx1ZSA9PT0gbnVsbCA/ICcnIDogdGhpcy5fdmFsdWVcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC30L3QsNGH0LXQvdC40Y9cclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd8bnVsbH1cclxuICAgICAqL1xyXG4gICAgZ2V0VmFsdWUoKSB7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9jb250cm9sKSB7XHJcbiAgICAgICAgICAgIGxldCB2YWx1ZSA9IHRoaXMuX2NvbnRyb2wudmFsKCk7XHJcblxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJiB2YWx1ZSAhPT0gJycpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCk0LjQu9GM0YLRgNCw0YbQuNGPINC00LDQvdC90YvRhVxyXG4gICAgICogQHJldHVybnMge3N0cmluZ30gICAgICAgICAgICAgIGZpZWxkVmFsdWVcclxuICAgICAqIEByZXR1cm5zIHtBcnJheXxzdHJpbmd8bnVtYmVyfSBzZWFyY2hWYWx1ZVxyXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAgICAgKi9cclxuICAgIGZpbHRlcihmaWVsZFZhbHVlLCBzZWFyY2hWYWx1ZSkge1xyXG5cclxuICAgICAgICBpZiAoWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2YgZmllbGRWYWx1ZSkgPCAwIHx8XHJcbiAgICAgICAgICAgIFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIHNlYXJjaFZhbHVlKSA8IDBcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGZpZWxkVmFsdWUudG9TdHJpbmcoKS5pbmRleE9mKHNlYXJjaFZhbHVlLnRvU3RyaW5nKCkpID09PSAwO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCk0L7RgNC80LjRgNC+0LLQsNC90LjQtSDQutC+0L3RgtC10L3RgtCwXHJcbiAgICAgKiBAcmV0dXJucyB7alF1ZXJ5fVxyXG4gICAgICovXHJcbiAgICByZW5kZXIoKSB7XHJcblxyXG4gICAgICAgIGlmICggISBjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KHRoaXMuX29wdGlvbnMuYXR0cikpIHtcclxuICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy5hdHRyID0ge307XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnd2lkdGgnKSAmJlxyXG4gICAgICAgICAgICBjb3JldWlUYWJsZVV0aWxzLmlzTnVtZXJpYyh0aGlzLl9vcHRpb25zLndpZHRoKVxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy5hdHRyLmhhc093blByb3BlcnR5KCdzdHlsZScpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9vcHRpb25zLmF0dHJbJ3N0eWxlJ10gKz0gJzt3aWR0aDonICsgdGhpcy5fb3B0aW9ucy53aWR0aCArICdweCc7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9vcHRpb25zLmF0dHJbJ3N0eWxlJ10gPSAnd2lkdGg6JyArIHRoaXMuX29wdGlvbnMud2lkdGggKyAncHgnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9vcHRpb25zLmF0dHJbJ3ZhbHVlJ10gPSB0eXBlb2YgdGhpcy5fdmFsdWUgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiB0aGlzLl92YWx1ZSA9PT0gJ251bWJlcidcclxuICAgICAgICAgICAgPyB0aGlzLl92YWx1ZVxyXG4gICAgICAgICAgICA6ICcnO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy5hdHRyLmhhc093blByb3BlcnR5KCd0eXBlJykpIHtcclxuICAgICAgICAgICAgZGVsZXRlIHRoaXMuX29wdGlvbnMuYXR0ci50eXBlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IGF0dHJpYnV0ZXMgPSBbXTtcclxuICAgICAgICBsZXQgdGFibGUgICAgICA9IHRoaXMuX3RhYmxlO1xyXG5cclxuICAgICAgICAkLmVhY2godGhpcy5fb3B0aW9ucy5hdHRyLCBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcclxuICAgICAgICAgICAgYXR0cmlidXRlcy5wdXNoKG5hbWUgKyAnPVwiJyArIHZhbHVlICsgJ1wiJyk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuX2NvbnRyb2wgPSAkKGNvcmV1aVRhYmxlVXRpbHMucmVuZGVyKGNvcmV1aVRhYmxlVHBsWydzZWFyY2gvZGF0ZS5odG1sJ10sIHtcclxuICAgICAgICAgICAgYXR0cjogYXR0cmlidXRlcy5sZW5ndGggPiAwID8gKCcgJyArIGF0dHJpYnV0ZXMuam9pbignICcpKSA6ICcnLFxyXG4gICAgICAgIH0pKTtcclxuXHJcblxyXG4gICAgICAgIHRoaXMuX2NvbnRyb2wua2V5dXAoZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICBpZiAoZS5rZXkgPT09ICdFbnRlcicgfHwgZS5rZXlDb2RlID09PSAxMykge1xyXG4gICAgICAgICAgICAgICAgdGFibGUuc2VhcmNoUmVjb3JkcygpO1xyXG5cclxuICAgICAgICAgICAgICAgIGxldCBjb250YWluZXIgPSBjb3JldWlUYWJsZUVsZW1lbnRzLmdldFNlYXJjaENvbnRhaW5lcih0YWJsZS5nZXRJZCgpKTtcclxuICAgICAgICAgICAgICAgIGNvbnRhaW5lci5mYWRlT3V0KCdmYXN0Jyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbnRyb2w7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IFNlYXJjaERhdGU7IiwiXHJcbmltcG9ydCBjb3JldWlUYWJsZVRwbCAgICAgIGZyb20gXCIuLi9jb3JldWkudGFibGUudGVtcGxhdGVzXCI7XHJcbmltcG9ydCBjb3JldWlUYWJsZVV0aWxzICAgIGZyb20gXCIuLi9jb3JldWkudGFibGUudXRpbHNcIjtcclxuaW1wb3J0IGNvcmV1aVRhYmxlRWxlbWVudHMgZnJvbSBcIi4uL2NvcmV1aS50YWJsZS5lbGVtZW50c1wiO1xyXG5pbXBvcnQgU2VhcmNoICAgICAgICAgICAgICBmcm9tIFwiLi4vYWJzdHJhY3QvU2VhcmNoXCI7XHJcblxyXG5jbGFzcyBTZWFyY2hEYXRlTW9udGggZXh0ZW5kcyBTZWFyY2gge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y9cclxuICAgICAqIEBwYXJhbSB7Y29yZXVpVGFibGVJbnN0YW5jZX0gdGFibGVcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSAgICAgICAgICAgICAgb3B0aW9uc1xyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3Rvcih0YWJsZSwgb3B0aW9ucykge1xyXG5cclxuICAgICAgICBvcHRpb25zID0gJC5leHRlbmQodHJ1ZSwge1xyXG4gICAgICAgICAgICBpZDogbnVsbCxcclxuICAgICAgICAgICAgdHlwZTogJ2RhdGVfbW9udGgnLFxyXG4gICAgICAgICAgICBmaWVsZDogbnVsbCxcclxuICAgICAgICAgICAgbGFiZWw6IG51bGwsXHJcbiAgICAgICAgICAgIHZhbHVlOiBudWxsLFxyXG4gICAgICAgICAgICB3aWR0aDogMjAwLFxyXG4gICAgICAgICAgICBhdHRyOiB7XHJcbiAgICAgICAgICAgICAgICBjbGFzczogXCJmb3JtLWNvbnRyb2wgZC1pbmxpbmUtYmxvY2tcIixcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sIG9wdGlvbnMpO1xyXG5cclxuICAgICAgICBzdXBlcih0YWJsZSwgb3B0aW9ucyk7XHJcblxyXG5cclxuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy52YWx1ZSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLnNldFZhbHVlKHRoaXMuX29wdGlvbnMudmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQo9GB0YLQsNC90L7QstC60LAg0LfQvdCw0YfQtdC90LjRj1xyXG4gICAgICogQHBhcmFtIHtzdHJpbmd8bnVsbH0gdmFsdWVcclxuICAgICAqL1xyXG4gICAgc2V0VmFsdWUodmFsdWUpIHtcclxuXHJcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycgJiYgdmFsdWUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHZhbHVlICYmXHJcbiAgICAgICAgICAgIChcclxuICAgICAgICAgICAgICAgIHZhbHVlLm1hdGNoKC9eXFxkezR9XFwtXFxkezJ9JC8pID09PSBudWxsIHx8XHJcbiAgICAgICAgICAgICAgICBpc05hTihuZXcgRGF0ZSh2YWx1ZSkpXHJcbiAgICAgICAgICAgIClcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fdmFsdWUgPSB2YWx1ZTtcclxuXHJcblxyXG5cclxuICAgICAgICBpZiAodGhpcy5fY29udHJvbCkge1xyXG4gICAgICAgICAgICB0aGlzLl9jb250cm9sLnZhbChcclxuICAgICAgICAgICAgICAgIHRoaXMuX3ZhbHVlID09PSBudWxsID8gJycgOiB0aGlzLl92YWx1ZVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0LfQvdCw0YfQtdC90LjRj1xyXG4gICAgICogQHJldHVybnMge3N0cmluZ3xudWxsfVxyXG4gICAgICovXHJcbiAgICBnZXRWYWx1ZSgpIHtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX2NvbnRyb2wpIHtcclxuICAgICAgICAgICAgbGV0IHZhbHVlID0gdGhpcy5fY29udHJvbC52YWwoKTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnICYmIHZhbHVlICE9PSAnJykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLl92YWx1ZTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQpNC40LvRjNGC0YDQsNGG0LjRjyDQtNCw0L3QvdGL0YVcclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IGZpZWxkVmFsdWVcclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IHNlYXJjaFZhbHVlXHJcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICAgICAqL1xyXG4gICAgZmlsdGVyKGZpZWxkVmFsdWUsIHNlYXJjaFZhbHVlKSB7XHJcblxyXG4gICAgICAgIGlmIChbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiBmaWVsZFZhbHVlKSA8IDAgfHxcclxuICAgICAgICAgICAgWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2Ygc2VhcmNoVmFsdWUpIDwgMFxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gZmllbGRWYWx1ZS50b1N0cmluZygpLnRvTG93ZXJDYXNlKCkuaW5kZXhPZihcclxuICAgICAgICAgICAgc2VhcmNoVmFsdWUudG9TdHJpbmcoKS50b0xvd2VyQ2FzZSgpXHJcbiAgICAgICAgKSA9PT0gMFxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCk0L7RgNC80LjRgNC+0LLQsNC90LjQtSDQutC+0L3RgtC10L3RgtCwXHJcbiAgICAgKiBAcmV0dXJucyB7alF1ZXJ5fVxyXG4gICAgICovXHJcbiAgICByZW5kZXIoKSB7XHJcblxyXG4gICAgICAgIGlmICggISBjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KHRoaXMuX29wdGlvbnMuYXR0cikpIHtcclxuICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy5hdHRyID0ge307XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnd2lkdGgnKSAmJlxyXG4gICAgICAgICAgICBjb3JldWlUYWJsZVV0aWxzLmlzTnVtZXJpYyh0aGlzLl9vcHRpb25zLndpZHRoKVxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy5hdHRyLmhhc093blByb3BlcnR5KCdzdHlsZScpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9vcHRpb25zLmF0dHJbJ3N0eWxlJ10gKz0gJzt3aWR0aDonICsgdGhpcy5fb3B0aW9ucy53aWR0aCArICdweCc7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9vcHRpb25zLmF0dHJbJ3N0eWxlJ10gPSAnd2lkdGg6JyArIHRoaXMuX29wdGlvbnMud2lkdGggKyAncHgnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9vcHRpb25zLmF0dHJbJ3ZhbHVlJ10gPSB0eXBlb2YgdGhpcy5fdmFsdWUgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiB0aGlzLl92YWx1ZSA9PT0gJ251bWJlcidcclxuICAgICAgICAgICAgPyB0aGlzLl92YWx1ZVxyXG4gICAgICAgICAgICA6ICcnO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy5hdHRyLmhhc093blByb3BlcnR5KCd0eXBlJykpIHtcclxuICAgICAgICAgICAgZGVsZXRlIHRoaXMuX29wdGlvbnMuYXR0ci50eXBlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IGF0dHJpYnV0ZXMgPSBbXTtcclxuICAgICAgICBsZXQgdGFibGUgICAgICA9IHRoaXMuX3RhYmxlO1xyXG5cclxuICAgICAgICAkLmVhY2godGhpcy5fb3B0aW9ucy5hdHRyLCBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcclxuICAgICAgICAgICAgYXR0cmlidXRlcy5wdXNoKG5hbWUgKyAnPVwiJyArIHZhbHVlICsgJ1wiJyk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuX2NvbnRyb2wgPSAkKGNvcmV1aVRhYmxlVXRpbHMucmVuZGVyKGNvcmV1aVRhYmxlVHBsWydzZWFyY2gvZGF0ZV9tb250aC5odG1sJ10sIHtcclxuICAgICAgICAgICAgYXR0cjogYXR0cmlidXRlcy5sZW5ndGggPiAwID8gKCcgJyArIGF0dHJpYnV0ZXMuam9pbignICcpKSA6ICcnLFxyXG4gICAgICAgIH0pKTtcclxuXHJcbiAgICAgICAgdGhpcy5fY29udHJvbC5rZXl1cChmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgIGlmIChlLmtleSA9PT0gJ0VudGVyJyB8fCBlLmtleUNvZGUgPT09IDEzKSB7XHJcbiAgICAgICAgICAgICAgICB0YWJsZS5zZWFyY2hSZWNvcmRzKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgbGV0IGNvbnRhaW5lciA9IGNvcmV1aVRhYmxlRWxlbWVudHMuZ2V0U2VhcmNoQ29udGFpbmVyKHRhYmxlLmdldElkKCkpO1xyXG4gICAgICAgICAgICAgICAgY29udGFpbmVyLmZhZGVPdXQoJ2Zhc3QnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5fY29udHJvbDtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgU2VhcmNoRGF0ZU1vbnRoOyIsIlxyXG5pbXBvcnQgY29yZXVpVGFibGVUcGwgICAgICBmcm9tIFwiLi4vY29yZXVpLnRhYmxlLnRlbXBsYXRlc1wiO1xyXG5pbXBvcnQgY29yZXVpVGFibGVVdGlscyAgICBmcm9tIFwiLi4vY29yZXVpLnRhYmxlLnV0aWxzXCI7XHJcbmltcG9ydCBjb3JldWlUYWJsZUVsZW1lbnRzIGZyb20gXCIuLi9jb3JldWkudGFibGUuZWxlbWVudHNcIjtcclxuaW1wb3J0IFNlYXJjaCAgICAgICAgICAgICAgZnJvbSBcIi4uL2Fic3RyYWN0L1NlYXJjaFwiO1xyXG5cclxuY2xhc3MgU2VhcmNoRGF0ZXRpbWUgZXh0ZW5kcyBTZWFyY2gge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y9cclxuICAgICAqIEBwYXJhbSB7Y29yZXVpVGFibGVJbnN0YW5jZX0gdGFibGVcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSAgICAgICAgICAgICAgb3B0aW9uc1xyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3Rvcih0YWJsZSwgb3B0aW9ucykge1xyXG5cclxuICAgICAgICBvcHRpb25zID0gJC5leHRlbmQodHJ1ZSwge1xyXG4gICAgICAgICAgICBpZDogbnVsbCxcclxuICAgICAgICAgICAgdHlwZTogJ2RhdGV0aW1lJyxcclxuICAgICAgICAgICAgZmllbGQ6IG51bGwsXHJcbiAgICAgICAgICAgIGxhYmVsOiBudWxsLFxyXG4gICAgICAgICAgICB2YWx1ZTogbnVsbCxcclxuICAgICAgICAgICAgd2lkdGg6IDIwMCxcclxuICAgICAgICAgICAgYXR0cjoge1xyXG4gICAgICAgICAgICAgICAgY2xhc3M6IFwiZm9ybS1jb250cm9sIGQtaW5saW5lLWJsb2NrXCIsXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LCBvcHRpb25zKTtcclxuXHJcbiAgICAgICAgc3VwZXIodGFibGUsIG9wdGlvbnMpO1xyXG5cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMudmFsdWUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5zZXRWYWx1ZSh0aGlzLl9vcHRpb25zLnZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KPRgdGC0LDQvdC+0LLQutCwINC30L3QsNGH0LXQvdC40Y9cclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxyXG4gICAgICovXHJcbiAgICBzZXRWYWx1ZSh2YWx1ZSkge1xyXG5cclxuICAgICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJyAmJiB2YWx1ZSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodmFsdWUgJiZcclxuICAgICAgICAgICAgKFxyXG4gICAgICAgICAgICAgICAgdmFsdWUubWF0Y2goL15cXGR7NH1cXC1cXGR7Mn1cXC1cXGR7Mn0oVHwgKVxcZHsyfTpcXGR7Mn0oOlxcZHsyfXwpJC8pID09PSBudWxsIHx8XHJcbiAgICAgICAgICAgICAgICBpc05hTihuZXcgRGF0ZSh2YWx1ZSkpXHJcbiAgICAgICAgICAgIClcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fdmFsdWUgPSB2YWx1ZTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX2NvbnRyb2wpIHtcclxuICAgICAgICAgICAgdGhpcy5fY29udHJvbC52YWwoXHJcbiAgICAgICAgICAgICAgICB0aGlzLl92YWx1ZSA9PT0gbnVsbCA/ICcnIDogdGhpcy5fdmFsdWVcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC30L3QsNGH0LXQvdC40Y9cclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIGdldFZhbHVlKCkge1xyXG5cclxuICAgICAgICBpZiAodGhpcy5fY29udHJvbCkge1xyXG4gICAgICAgICAgICBsZXQgdmFsdWUgPSB0aGlzLl9jb250cm9sLnZhbCgpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYgdmFsdWUgIT09ICcnKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLl92YWx1ZTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQpNC40LvRjNGC0YDQsNGG0LjRjyDQtNCw0L3QvdGL0YVcclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9ICAgICAgICAgICAgICBmaWVsZFZhbHVlXHJcbiAgICAgKiBAcmV0dXJucyB7QXJyYXl8c3RyaW5nfG51bWJlcn0gc2VhcmNoVmFsdWVcclxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gICAgICovXHJcbiAgICBmaWx0ZXIoZmllbGRWYWx1ZSwgc2VhcmNoVmFsdWUpIHtcclxuXHJcbiAgICAgICAgaWYgKFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIGZpZWxkVmFsdWUpIDwgMCB8fFxyXG4gICAgICAgICAgICBbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiBzZWFyY2hWYWx1ZSkgPCAwXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBmaWVsZFZhbHVlLnRvU3RyaW5nKCkgPT09IHNlYXJjaFZhbHVlLnRvU3RyaW5nKCk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KTQvtGA0LzQuNGA0L7QstCw0L3QuNC1INC60L7QvdGC0LXQvdGC0LBcclxuICAgICAqIEByZXR1cm5zIHtqUXVlcnl9XHJcbiAgICAgKi9cclxuICAgIHJlbmRlcigpIHtcclxuXHJcbiAgICAgICAgaWYgKCAhIGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QodGhpcy5fb3B0aW9ucy5hdHRyKSkge1xyXG4gICAgICAgICAgICB0aGlzLl9vcHRpb25zLmF0dHIgPSB7fTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLmhhc093blByb3BlcnR5KCd3aWR0aCcpICYmXHJcbiAgICAgICAgICAgIGNvcmV1aVRhYmxlVXRpbHMuaXNOdW1lcmljKHRoaXMuX29wdGlvbnMud2lkdGgpXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9vcHRpb25zLmF0dHIuaGFzT3duUHJvcGVydHkoJ3N0eWxlJykpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX29wdGlvbnMuYXR0clsnc3R5bGUnXSArPSAnO3dpZHRoOicgKyB0aGlzLl9vcHRpb25zLndpZHRoICsgJ3B4JztcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX29wdGlvbnMuYXR0clsnc3R5bGUnXSA9ICd3aWR0aDonICsgdGhpcy5fb3B0aW9ucy53aWR0aCArICdweCc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX29wdGlvbnMuYXR0clsndmFsdWUnXSA9IHR5cGVvZiB0aGlzLl92YWx1ZSA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIHRoaXMuX3ZhbHVlID09PSAnbnVtYmVyJ1xyXG4gICAgICAgICAgICA/IHRoaXMuX3ZhbHVlXHJcbiAgICAgICAgICAgIDogJyc7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLmF0dHIuaGFzT3duUHJvcGVydHkoJ3R5cGUnKSkge1xyXG4gICAgICAgICAgICBkZWxldGUgdGhpcy5fb3B0aW9ucy5hdHRyLnR5cGU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgYXR0cmlidXRlcyA9IFtdO1xyXG4gICAgICAgIGxldCB0YWJsZSAgICAgID0gdGhpcy5fdGFibGU7XHJcblxyXG4gICAgICAgICQuZWFjaCh0aGlzLl9vcHRpb25zLmF0dHIsIGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xyXG4gICAgICAgICAgICBpZiAoWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2YgdmFsdWUpID49IDApIHtcclxuICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXMucHVzaChuYW1lICsgJz1cIicgKyB2YWx1ZSArICdcIicpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuX2NvbnRyb2wgPSAkKGNvcmV1aVRhYmxlVXRpbHMucmVuZGVyKGNvcmV1aVRhYmxlVHBsWydzZWFyY2gvZGF0ZXRpbWUuaHRtbCddLCB7XHJcbiAgICAgICAgICAgIGF0dHI6IGF0dHJpYnV0ZXMubGVuZ3RoID4gMCA/ICgnICcgKyBhdHRyaWJ1dGVzLmpvaW4oJyAnKSkgOiAnJyxcclxuICAgICAgICB9KSk7XHJcblxyXG4gICAgICAgIHRoaXMuX2NvbnRyb2wua2V5dXAoZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICBpZiAoZS5rZXkgPT09ICdFbnRlcicgfHwgZS5rZXlDb2RlID09PSAxMykge1xyXG4gICAgICAgICAgICAgICAgdGFibGUuc2VhcmNoUmVjb3JkcygpO1xyXG5cclxuICAgICAgICAgICAgICAgIGxldCBjb250YWluZXIgPSBjb3JldWlUYWJsZUVsZW1lbnRzLmdldFNlYXJjaENvbnRhaW5lcih0YWJsZS5nZXRJZCgpKTtcclxuICAgICAgICAgICAgICAgIGNvbnRhaW5lci5mYWRlT3V0KCdmYXN0Jyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbnRyb2w7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IFNlYXJjaERhdGV0aW1lOyIsIlxyXG5pbXBvcnQgY29yZXVpVGFibGVUcGwgICAgICBmcm9tIFwiLi4vY29yZXVpLnRhYmxlLnRlbXBsYXRlc1wiO1xyXG5pbXBvcnQgY29yZXVpVGFibGVVdGlscyAgICBmcm9tIFwiLi4vY29yZXVpLnRhYmxlLnV0aWxzXCI7XHJcbmltcG9ydCBjb3JldWlUYWJsZUVsZW1lbnRzIGZyb20gXCIuLi9jb3JldWkudGFibGUuZWxlbWVudHNcIjtcclxuaW1wb3J0IFNlYXJjaCAgICAgICAgICAgICAgZnJvbSBcIi4uL2Fic3RyYWN0L1NlYXJjaFwiO1xyXG5cclxuY2xhc3MgU2VhcmNoRGF0ZVJhbmdlIGV4dGVuZHMgU2VhcmNoIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPXHJcbiAgICAgKiBAcGFyYW0ge2NvcmV1aVRhYmxlSW5zdGFuY2V9IHRhYmxlXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gICAgICAgICAgICAgIG9wdGlvbnNcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IodGFibGUsIG9wdGlvbnMpIHtcclxuXHJcbiAgICAgICAgb3B0aW9ucyA9ICQuZXh0ZW5kKHRydWUsIHtcclxuICAgICAgICAgICAgaWQ6IG51bGwsXHJcbiAgICAgICAgICAgIHR5cGU6ICdkYXRlX3JhbmdlJyxcclxuICAgICAgICAgICAgZmllbGQ6IG51bGwsXHJcbiAgICAgICAgICAgIGxhYmVsOiBudWxsLFxyXG4gICAgICAgICAgICB2YWx1ZTogbnVsbCxcclxuICAgICAgICAgICAgd2lkdGg6IDIwMCxcclxuICAgICAgICAgICAgYXR0cjoge1xyXG4gICAgICAgICAgICAgICAgY2xhc3M6IFwiZm9ybS1jb250cm9sIGQtaW5saW5lLWJsb2NrXCIsXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LCBvcHRpb25zKTtcclxuXHJcbiAgICAgICAgc3VwZXIodGFibGUsIG9wdGlvbnMpO1xyXG5cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMudmFsdWUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5zZXRWYWx1ZSh0aGlzLl9vcHRpb25zLnZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KPRgdGC0LDQvdC+0LLQutCwINC30L3QsNGH0LXQvdC40Y9cclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSB2YWx1ZVxyXG4gICAgICovXHJcbiAgICBzZXRWYWx1ZSh2YWx1ZSkge1xyXG5cclxuICAgICAgICBpZiAodmFsdWUpIHtcclxuICAgICAgICAgICAgaWYgKCAhIGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QodmFsdWUpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGxldCBkYXRlU3RhcnQgPSBudWxsO1xyXG4gICAgICAgICAgICBsZXQgZGF0ZUVuZCAgID0gbnVsbDtcclxuXHJcbiAgICAgICAgICAgIGlmICh2YWx1ZS5oYXNPd25Qcm9wZXJ0eSgnc3RhcnQnKSAmJlxyXG4gICAgICAgICAgICAgICAgdHlwZW9mIHZhbHVlLnN0YXJ0ID09PSAnc3RyaW5nJyAmJlxyXG4gICAgICAgICAgICAgICAgdmFsdWUuc3RhcnQubWF0Y2goL15cXGR7NH1cXC1cXGR7Mn1cXC1cXGR7Mn0kLykgPT09IG51bGwgJiZcclxuICAgICAgICAgICAgICAgIGlzTmFOKG5ldyBEYXRlKHZhbHVlLnN0YXJ0KSlcclxuICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICBkYXRlU3RhcnQgPSB2YWx1ZS5zdGFydDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHZhbHVlLmhhc093blByb3BlcnR5KCdlbmQnKSAmJlxyXG4gICAgICAgICAgICAgICAgdHlwZW9mIHZhbHVlLmVuZCA9PT0gJ3N0cmluZycgJiZcclxuICAgICAgICAgICAgICAgIHZhbHVlLmVuZC5tYXRjaCgvXlxcZHs0fVxcLVxcZHsyfVxcLVxcZHsyfSQvKSA9PT0gbnVsbCAmJlxyXG4gICAgICAgICAgICAgICAgaXNOYU4obmV3IERhdGUodmFsdWUuZW5kKSlcclxuICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICBkYXRlRW5kID0gdmFsdWUuZW5kO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoZGF0ZVN0YXJ0ID09PSBudWxsICYmIGRhdGVFbmQgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3ZhbHVlID0gbnVsbDtcclxuXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl92YWx1ZSA9IHtcclxuICAgICAgICAgICAgICAgICAgICBzdGFydDogZGF0ZVN0YXJ0LFxyXG4gICAgICAgICAgICAgICAgICAgIGVuZDogZGF0ZUVuZFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLl92YWx1ZSA9IG51bGw7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX2NvbnRyb2wpIHtcclxuICAgICAgICAgICAgbGV0IGlucHV0U3RhcnQgPSB0aGlzLl9jb250cm9sLnBhcmVudCgpLmZpbmQoJ2lucHV0LmRhdGUtc3RhcnQnKTtcclxuICAgICAgICAgICAgbGV0IGlucHV0RW5kICAgPSB0aGlzLl9jb250cm9sLnBhcmVudCgpLmZpbmQoJ2lucHV0LmRhdGUtZW5kJyk7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5fdmFsdWUgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIGlucHV0U3RhcnQudmFsKCcnKTtcclxuICAgICAgICAgICAgICAgIGlucHV0RW5kLnZhbCgnJyk7XHJcblxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QodGhpcy5fdmFsdWUpKSB7XHJcbiAgICAgICAgICAgICAgICBpbnB1dFN0YXJ0LnZhbCh0eXBlb2YgdGhpcy5fdmFsdWUuc3RhcnQgIT09IG51bGwgPyB0aGlzLl92YWx1ZS5zdGFydCA6ICcnKTtcclxuICAgICAgICAgICAgICAgIGlucHV0RW5kLnZhbCh0eXBlb2YgdGhpcy5fdmFsdWUuZW5kICE9PSBudWxsID8gdGhpcy5fdmFsdWUuZW5kIDogJycpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSDQt9C90LDRh9C10L3QuNGPXHJcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fG51bGx9XHJcbiAgICAgKi9cclxuICAgIGdldFZhbHVlKCkge1xyXG5cclxuICAgICAgICBpZiAodGhpcy5fY29udHJvbCkge1xyXG4gICAgICAgICAgICBsZXQgaW5wdXRTdGFydCA9IHRoaXMuX2NvbnRyb2wucGFyZW50KCkuZmluZCgnaW5wdXQuZGF0ZS1zdGFydCcpO1xyXG4gICAgICAgICAgICBsZXQgaW5wdXRFbmQgICA9IHRoaXMuX2NvbnRyb2wucGFyZW50KCkuZmluZCgnaW5wdXQuZGF0ZS1lbmQnKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChpbnB1dFN0YXJ0WzBdICYmIGlucHV0RW5kWzBdKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgbGV0IHZhbHVlU3RhcnQgPSBpbnB1dFN0YXJ0LnZhbCgpO1xyXG4gICAgICAgICAgICAgICAgbGV0IHZhbHVlRW5kICAgPSBpbnB1dEVuZC52YWwoKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgICAgICAgICAgKHR5cGVvZiB2YWx1ZVN0YXJ0ID09PSAnc3RyaW5nJyAmJiB2YWx1ZVN0YXJ0ICE9PSAnJykgfHxcclxuICAgICAgICAgICAgICAgICAgICAodHlwZW9mIHZhbHVlRW5kID09PSAnc3RyaW5nJyAmJiB2YWx1ZUVuZCAhPT0gJycpXHJcbiAgICAgICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFydDogdmFsdWVTdGFydCAhPT0gJycgPyB2YWx1ZVN0YXJ0IDogbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZW5kOiB2YWx1ZUVuZCAhPT0gJycgPyB2YWx1ZUVuZCA6IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5fdmFsdWU7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KTQuNC70YzRgtGA0LDRhtC40Y8g0LTQsNC90L3Ri9GFXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBmaWVsZFZhbHVlXHJcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBzZWFyY2hWYWx1ZVxyXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAgICAgKi9cclxuICAgIGZpbHRlcihmaWVsZFZhbHVlLCBzZWFyY2hWYWx1ZSkge1xyXG5cclxuICAgICAgICBpZiAoWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2YgZmllbGRWYWx1ZSkgPCAwIHx8XHJcbiAgICAgICAgICAgICEgY29yZXVpVGFibGVVdGlscy5pc09iamVjdChzZWFyY2hWYWx1ZSkgfHxcclxuICAgICAgICAgICAgKHR5cGVvZiBzZWFyY2hWYWx1ZS5zdGFydCAhPT0gJ3N0cmluZycgJiYgdHlwZW9mIHNlYXJjaFZhbHVlLmVuZCAhPT0gJ3N0cmluZycpXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICBsZXQgaXNzZXRTdGFydCA9IFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIHNlYXJjaFZhbHVlLnN0YXJ0KSA+PSAwO1xyXG4gICAgICAgIGxldCBpc3NldEVuZCAgID0gWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2Ygc2VhcmNoVmFsdWUuZW5kKSA+PSAwO1xyXG5cclxuICAgICAgICBpZiAoaXNzZXRTdGFydCAmJiBpc3NldEVuZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmllbGRWYWx1ZSA+PSBzZWFyY2hWYWx1ZS5zdGFydCAmJiBmaWVsZFZhbHVlIDw9IHNlYXJjaFZhbHVlLmVuZDtcclxuXHJcbiAgICAgICAgfSBlbHNlIGlmIChpc3NldFN0YXJ0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmaWVsZFZhbHVlID49IHNlYXJjaFZhbHVlLnN0YXJ0O1xyXG5cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gZmllbGRWYWx1ZSA8PSBzZWFyY2hWYWx1ZS5lbmQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCk0L7RgNC80LjRgNC+0LLQsNC90LjQtSDQutC+0L3RgtC10L3RgtCwXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxyXG4gICAgICovXHJcbiAgICByZW5kZXIoKSB7XHJcblxyXG4gICAgICAgIGxldCBvcHRpb25zID0gdGhpcy5nZXRPcHRpb25zKCk7XHJcblxyXG4gICAgICAgIGlmICggISBjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KG9wdGlvbnMuYXR0cikpIHtcclxuICAgICAgICAgICAgb3B0aW9ucy5hdHRyID0ge307XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAob3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnd2lkdGgnKSAmJlxyXG4gICAgICAgICAgICBjb3JldWlUYWJsZVV0aWxzLmlzTnVtZXJpYyhvcHRpb25zLndpZHRoKVxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5hdHRyLmhhc093blByb3BlcnR5KCdzdHlsZScpKSB7XHJcbiAgICAgICAgICAgICAgICBvcHRpb25zLmF0dHJbJ3N0eWxlJ10gKz0gJzt3aWR0aDonICsgb3B0aW9ucy53aWR0aCArICdweCc7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBvcHRpb25zLmF0dHJbJ3N0eWxlJ10gPSAnd2lkdGg6JyArIG9wdGlvbnMud2lkdGggKyAncHgnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAob3B0aW9ucy5hdHRyLmhhc093blByb3BlcnR5KCd0eXBlJykpIHtcclxuICAgICAgICAgICAgZGVsZXRlIG9wdGlvbnMuYXR0ci50eXBlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKG9wdGlvbnMuYXR0ci5oYXNPd25Qcm9wZXJ0eSgndmFsdWUnKSkge1xyXG4gICAgICAgICAgICBkZWxldGUgb3B0aW9ucy5hdHRyLnZhbHVlO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIGxldCBzdGFydEF0dHIgPSBbXTtcclxuICAgICAgICBsZXQgc3RhcnRFbmQgID0gW107XHJcbiAgICAgICAgbGV0IHRhYmxlICAgICA9IHRoaXMuX3RhYmxlO1xyXG5cclxuXHJcbiAgICAgICAgJC5lYWNoKG9wdGlvbnMuYXR0ciwgZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XHJcbiAgICAgICAgICAgIGlmIChbJ25hbWUnLCAndmFsdWUnLCAnY2xhc3MnXS5pbmRleE9mKG5hbWUpID49IDAgfHxcclxuICAgICAgICAgICAgICAgIFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIHZhbHVlKSA8IDBcclxuICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHN0YXJ0QXR0ci5wdXNoKG5hbWUgKyAnPVwiJyArIHZhbHVlICsgJ1wiJyk7XHJcbiAgICAgICAgICAgIHN0YXJ0RW5kLnB1c2gobmFtZSArICc9XCInICsgdmFsdWUgKyAnXCInKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgaWYgKG9wdGlvbnMuYXR0ci5oYXNPd25Qcm9wZXJ0eSgnY2xhc3MnKSAmJlxyXG4gICAgICAgICAgICBbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiBvcHRpb25zLmF0dHIuY2xhc3MpID49IDBcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgc3RhcnRBdHRyLnB1c2goJ2NsYXNzPVwiJyArIG9wdGlvbnMuYXR0ci5jbGFzcyArICcgZGF0ZS1zdGFydFwiJyk7XHJcbiAgICAgICAgICAgIHN0YXJ0RW5kLnB1c2goJ2NsYXNzPVwiJyArIG9wdGlvbnMuYXR0ci5jbGFzcyArICcgZGF0ZS1lbmRcIicpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHN0YXJ0QXR0ci5wdXNoKCdjbGFzcz1cImRhdGUtc3RhcnRcIicpO1xyXG4gICAgICAgICAgICBzdGFydEVuZC5wdXNoKCdjbGFzcz1cImRhdGUtZW5kXCInKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHN0YXJ0QXR0ci5wdXNoKCd2YWx1ZT1cIicgKyAodGhpcy5fdmFsdWUgPyB0aGlzLl92YWx1ZS5zdGFydCA6ICcnKSArICdcIicpO1xyXG4gICAgICAgIHN0YXJ0RW5kLnB1c2goJ3ZhbHVlPVwiJyArICh0aGlzLl92YWx1ZSA/IHRoaXMuX3ZhbHVlLmVuZCA6ICcnKSArICdcIicpO1xyXG5cclxuXHJcbiAgICAgICAgbGV0IGNvbnRyb2wgPSAkKGNvcmV1aVRhYmxlVXRpbHMucmVuZGVyKGNvcmV1aVRhYmxlVHBsWydzZWFyY2gvZGF0ZV9yYW5nZS5odG1sJ10sIHtcclxuICAgICAgICAgICAgc3RhcnRBdHRyOiBzdGFydEF0dHIubGVuZ3RoID4gMCA/ICgnICcgKyBzdGFydEF0dHIuam9pbignICcpKSA6ICcnLFxyXG4gICAgICAgICAgICBlbmRBdHRyOiBzdGFydEVuZC5sZW5ndGggPiAwID8gKCcgJyArIHN0YXJ0RW5kLmpvaW4oJyAnKSkgOiAnJyxcclxuICAgICAgICB9KSk7XHJcblxyXG4gICAgICAgICQoJ2lucHV0LmRhdGUtc3RhcnQnLCBjb250cm9sKS5jaGFuZ2UoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGxldCBkYXRlRW5kID0gJCgnaW5wdXQuZGF0ZS1lbmQnLCBjb250cm9sKS5hdHRyKCdtaW4nLCAkKHRoaXMpLnZhbCgpKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChcInNob3dQaWNrZXJcIiBpbiBIVE1MSW5wdXRFbGVtZW50LnByb3RvdHlwZSkge1xyXG4gICAgICAgICAgICAgICAgJChkYXRlRW5kKVswXS5zaG93UGlja2VyKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICAkKCdpbnB1dC5kYXRlLWVuZCcsIGNvbnRyb2wpLmNoYW5nZShmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgJCgnaW5wdXQuZGF0ZS1zdGFydCcsIGNvbnRyb2wpLmF0dHIoJ21heCcsICQodGhpcykudmFsKCkpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLl9jb250cm9sID0gY29udHJvbDtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbnRyb2w7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IFNlYXJjaERhdGVSYW5nZTsiLCJcclxuaW1wb3J0IGNvcmV1aVRhYmxlVHBsICAgICAgZnJvbSBcIi4uL2NvcmV1aS50YWJsZS50ZW1wbGF0ZXNcIjtcclxuaW1wb3J0IGNvcmV1aVRhYmxlVXRpbHMgICAgZnJvbSBcIi4uL2NvcmV1aS50YWJsZS51dGlsc1wiO1xyXG5pbXBvcnQgY29yZXVpVGFibGVFbGVtZW50cyBmcm9tIFwiLi4vY29yZXVpLnRhYmxlLmVsZW1lbnRzXCI7XHJcbmltcG9ydCBTZWFyY2ggICAgICAgICAgICAgIGZyb20gXCIuLi9hYnN0cmFjdC9TZWFyY2hcIjtcclxuXHJcbmNsYXNzIFNlYXJjaERhdGV0aW1lUmFuZ2UgZXh0ZW5kcyBTZWFyY2gge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y9cclxuICAgICAqIEBwYXJhbSB7Y29yZXVpVGFibGVJbnN0YW5jZX0gdGFibGVcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSAgICAgICAgICAgICAgb3B0aW9uc1xyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3Rvcih0YWJsZSwgb3B0aW9ucykge1xyXG5cclxuICAgICAgICBvcHRpb25zID0gJC5leHRlbmQodHJ1ZSwge1xyXG4gICAgICAgICAgICBpZDogbnVsbCxcclxuICAgICAgICAgICAgdHlwZTogJ2RhdGV0aW1lX3JhbmdlJyxcclxuICAgICAgICAgICAgZmllbGQ6IG51bGwsXHJcbiAgICAgICAgICAgIGxhYmVsOiBudWxsLFxyXG4gICAgICAgICAgICB2YWx1ZTogbnVsbCxcclxuICAgICAgICAgICAgd2lkdGg6IDIwMCxcclxuICAgICAgICAgICAgYXR0cjoge1xyXG4gICAgICAgICAgICAgICAgY2xhc3M6IFwiZm9ybS1jb250cm9sIGQtaW5saW5lLWJsb2NrXCIsXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LCBvcHRpb25zKTtcclxuXHJcbiAgICAgICAgc3VwZXIodGFibGUsIG9wdGlvbnMpO1xyXG5cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMudmFsdWUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5zZXRWYWx1ZSh0aGlzLl9vcHRpb25zLnZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KPRgdGC0LDQvdC+0LLQutCwINC30L3QsNGH0LXQvdC40Y9cclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSB2YWx1ZVxyXG4gICAgICovXHJcbiAgICBzZXRWYWx1ZSh2YWx1ZSkge1xyXG5cclxuICAgICAgICBpZiAodmFsdWUpIHtcclxuICAgICAgICAgICAgaWYgKCAhIGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QodmFsdWUpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGxldCBkYXRlU3RhcnQgPSBudWxsO1xyXG4gICAgICAgICAgICBsZXQgZGF0ZUVuZCAgID0gbnVsbDtcclxuXHJcbiAgICAgICAgICAgIGlmICh2YWx1ZS5oYXNPd25Qcm9wZXJ0eSgnc3RhcnQnKSAmJlxyXG4gICAgICAgICAgICAgICAgdHlwZW9mIHZhbHVlLnN0YXJ0ID09PSAnc3RyaW5nJyAmJlxyXG4gICAgICAgICAgICAgICAgdmFsdWUuc3RhcnQubWF0Y2goL15cXGR7NH1cXC1cXGR7Mn1cXC1cXGR7Mn0gXFxkezJ9OlxcZHsyfTpcXGR7Mn0kLykgPT09IG51bGwgJiZcclxuICAgICAgICAgICAgICAgIGlzTmFOKG5ldyBEYXRlKHZhbHVlLnN0YXJ0KSlcclxuICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICBkYXRlU3RhcnQgPSB2YWx1ZS5zdGFydDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHZhbHVlLmhhc093blByb3BlcnR5KCdlbmQnKSAmJlxyXG4gICAgICAgICAgICAgICAgdHlwZW9mIHZhbHVlLmVuZCA9PT0gJ3N0cmluZycgJiZcclxuICAgICAgICAgICAgICAgIHZhbHVlLmVuZC5tYXRjaCgvXlxcZHs0fVxcLVxcZHsyfVxcLVxcZHsyfSBcXGR7Mn06XFxkezJ9OlxcZHsyfSQvKSA9PT0gbnVsbCAmJlxyXG4gICAgICAgICAgICAgICAgaXNOYU4obmV3IERhdGUodmFsdWUuZW5kKSlcclxuICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICBkYXRlRW5kID0gdmFsdWUuZW5kO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoZGF0ZVN0YXJ0ID09PSBudWxsICYmIGRhdGVFbmQgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3ZhbHVlID0gbnVsbDtcclxuXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl92YWx1ZSA9IHtcclxuICAgICAgICAgICAgICAgICAgICBzdGFydDogZGF0ZVN0YXJ0LFxyXG4gICAgICAgICAgICAgICAgICAgIGVuZDogZGF0ZUVuZFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLl92YWx1ZSA9IG51bGw7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX2NvbnRyb2wpIHtcclxuICAgICAgICAgICAgbGV0IGlucHV0U3RhcnQgPSB0aGlzLl9jb250cm9sLnBhcmVudCgpLmZpbmQoJ2lucHV0LmRhdGUtc3RhcnQnKTtcclxuICAgICAgICAgICAgbGV0IGlucHV0RW5kICAgPSB0aGlzLl9jb250cm9sLnBhcmVudCgpLmZpbmQoJ2lucHV0LmRhdGUtZW5kJyk7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5fdmFsdWUgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIGlucHV0U3RhcnQudmFsKCcnKTtcclxuICAgICAgICAgICAgICAgIGlucHV0RW5kLnZhbCgnJyk7XHJcblxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QodGhpcy5fdmFsdWUpKSB7XHJcbiAgICAgICAgICAgICAgICBpbnB1dFN0YXJ0LnZhbCh0eXBlb2YgdGhpcy5fdmFsdWUuc3RhcnQgIT09IG51bGwgPyB0aGlzLl92YWx1ZS5zdGFydCA6ICcnKTtcclxuICAgICAgICAgICAgICAgIGlucHV0RW5kLnZhbCh0eXBlb2YgdGhpcy5fdmFsdWUuZW5kICE9PSBudWxsID8gdGhpcy5fdmFsdWUuZW5kIDogJycpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSDQt9C90LDRh9C10L3QuNGPXHJcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fG51bGx9XHJcbiAgICAgKi9cclxuICAgIGdldFZhbHVlKCkge1xyXG5cclxuICAgICAgICBpZiAodGhpcy5fY29udHJvbCkge1xyXG4gICAgICAgICAgICBsZXQgaW5wdXRTdGFydCA9IHRoaXMuX2NvbnRyb2wucGFyZW50KCkuZmluZCgnaW5wdXQuZGF0ZS1zdGFydCcpO1xyXG4gICAgICAgICAgICBsZXQgaW5wdXRFbmQgICA9IHRoaXMuX2NvbnRyb2wucGFyZW50KCkuZmluZCgnaW5wdXQuZGF0ZS1lbmQnKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChpbnB1dFN0YXJ0WzBdICYmIGlucHV0RW5kWzBdKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgbGV0IHZhbHVlU3RhcnQgPSBpbnB1dFN0YXJ0LnZhbCgpO1xyXG4gICAgICAgICAgICAgICAgbGV0IHZhbHVlRW5kICAgPSBpbnB1dEVuZC52YWwoKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgICAgICAgICAgKHR5cGVvZiB2YWx1ZVN0YXJ0ID09PSAnc3RyaW5nJyAmJiB2YWx1ZVN0YXJ0ICE9PSAnJykgfHxcclxuICAgICAgICAgICAgICAgICAgICAodHlwZW9mIHZhbHVlRW5kID09PSAnc3RyaW5nJyAmJiB2YWx1ZUVuZCAhPT0gJycpXHJcbiAgICAgICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFydDogdmFsdWVTdGFydCAhPT0gJycgPyB2YWx1ZVN0YXJ0IDogbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZW5kOiB2YWx1ZUVuZCAhPT0gJycgPyB2YWx1ZUVuZCA6IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5fdmFsdWU7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KTQuNC70YzRgtGA0LDRhtC40Y8g0LTQsNC90L3Ri9GFXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSAgICAgICAgICAgICAgZmllbGRWYWx1ZVxyXG4gICAgICogQHJldHVybnMge0FycmF5fHN0cmluZ3xudW1iZXJ9IHNlYXJjaFZhbHVlXHJcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICAgICAqL1xyXG4gICAgZmlsdGVyKGZpZWxkVmFsdWUsIHNlYXJjaFZhbHVlKSB7XHJcblxyXG4gICAgICAgIGlmIChbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiBmaWVsZFZhbHVlKSA8IDAgfHxcclxuICAgICAgICAgICAgISBjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KHNlYXJjaFZhbHVlKSB8fFxyXG4gICAgICAgICAgICAodHlwZW9mIHNlYXJjaFZhbHVlLnN0YXJ0ICE9PSAnc3RyaW5nJyAmJiB0eXBlb2Ygc2VhcmNoVmFsdWUuZW5kICE9PSAnc3RyaW5nJylcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIGxldCBpc3NldFN0YXJ0ID0gWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2Ygc2VhcmNoVmFsdWUuc3RhcnQpID49IDA7XHJcbiAgICAgICAgbGV0IGlzc2V0RW5kICAgPSBbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiBzZWFyY2hWYWx1ZS5lbmQpID49IDA7XHJcblxyXG4gICAgICAgIGlmIChpc3NldFN0YXJ0ICYmIGlzc2V0RW5kKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmaWVsZFZhbHVlID49IHNlYXJjaFZhbHVlLnN0YXJ0ICYmIGZpZWxkVmFsdWUgPD0gc2VhcmNoVmFsdWUuZW5kO1xyXG5cclxuICAgICAgICB9IGVsc2UgaWYgKGlzc2V0U3RhcnQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZpZWxkVmFsdWUgPj0gc2VhcmNoVmFsdWUuc3RhcnQ7XHJcblxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmaWVsZFZhbHVlIDw9IHNlYXJjaFZhbHVlLmVuZDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KTQvtGA0LzQuNGA0L7QstCw0L3QuNC1INC60L7QvdGC0LXQvdGC0LBcclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIHJlbmRlcigpIHtcclxuXHJcbiAgICAgICAgaWYgKCAhIGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QodGhpcy5fb3B0aW9ucy5hdHRyKSkge1xyXG4gICAgICAgICAgICB0aGlzLl9vcHRpb25zLmF0dHIgPSB7fTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLmhhc093blByb3BlcnR5KCd3aWR0aCcpICYmXHJcbiAgICAgICAgICAgIGNvcmV1aVRhYmxlVXRpbHMuaXNOdW1lcmljKHRoaXMuX29wdGlvbnMud2lkdGgpXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9vcHRpb25zLmF0dHIuaGFzT3duUHJvcGVydHkoJ3N0eWxlJykpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX29wdGlvbnMuYXR0clsnc3R5bGUnXSArPSAnO3dpZHRoOicgKyB0aGlzLl9vcHRpb25zLndpZHRoICsgJ3B4JztcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX29wdGlvbnMuYXR0clsnc3R5bGUnXSA9ICd3aWR0aDonICsgdGhpcy5fb3B0aW9ucy53aWR0aCArICdweCc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLmF0dHIuaGFzT3duUHJvcGVydHkoJ3R5cGUnKSkge1xyXG4gICAgICAgICAgICBkZWxldGUgdGhpcy5fb3B0aW9ucy5hdHRyLnR5cGU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy5hdHRyLmhhc093blByb3BlcnR5KCd2YWx1ZScpKSB7XHJcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9vcHRpb25zLmF0dHIudmFsdWU7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgbGV0IHN0YXJ0QXR0ciA9IFtdO1xyXG4gICAgICAgIGxldCBzdGFydEVuZCAgPSBbXTtcclxuICAgICAgICBsZXQgdGFibGUgICAgID0gdGhpcy5fdGFibGU7XHJcblxyXG5cclxuICAgICAgICAkLmVhY2godGhpcy5fb3B0aW9ucy5hdHRyLCBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcclxuICAgICAgICAgICAgaWYgKFsnbmFtZScsICd2YWx1ZScsICdjbGFzcyddLmluZGV4T2YobmFtZSkgPj0gMCB8fFxyXG4gICAgICAgICAgICAgICAgWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2YgdmFsdWUpIDwgMFxyXG4gICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgc3RhcnRBdHRyLnB1c2gobmFtZSArICc9XCInICsgdmFsdWUgKyAnXCInKTtcclxuICAgICAgICAgICAgc3RhcnRFbmQucHVzaChuYW1lICsgJz1cIicgKyB2YWx1ZSArICdcIicpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy5hdHRyLmhhc093blByb3BlcnR5KCdjbGFzcycpICYmXHJcbiAgICAgICAgICAgIFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIHRoaXMuX29wdGlvbnMuYXR0ci5jbGFzcykgPj0gMFxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICBzdGFydEF0dHIucHVzaCgnY2xhc3M9XCInICsgdGhpcy5fb3B0aW9ucy5hdHRyLmNsYXNzICsgJyBkYXRlLXN0YXJ0XCInKTtcclxuICAgICAgICAgICAgc3RhcnRFbmQucHVzaCgnY2xhc3M9XCInICsgdGhpcy5fb3B0aW9ucy5hdHRyLmNsYXNzICsgJyBkYXRlLWVuZFwiJyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgc3RhcnRBdHRyLnB1c2goJ2NsYXNzPVwiZGF0ZS1zdGFydFwiJyk7XHJcbiAgICAgICAgICAgIHN0YXJ0RW5kLnB1c2goJ2NsYXNzPVwiZGF0ZS1lbmRcIicpO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIHN0YXJ0QXR0ci5wdXNoKCd2YWx1ZT1cIicgKyAodGhpcy5fdmFsdWUgPyB0aGlzLl92YWx1ZS5zdGFydCA6ICcnKSArICdcIicpO1xyXG4gICAgICAgIHN0YXJ0RW5kLnB1c2goJ3ZhbHVlPVwiJyArICh0aGlzLl92YWx1ZSA/IHRoaXMuX3ZhbHVlLmVuZCA6ICcnKSArICdcIicpO1xyXG5cclxuXHJcbiAgICAgICAgbGV0IGNvbnRyb2wgPSAkKGNvcmV1aVRhYmxlVXRpbHMucmVuZGVyKGNvcmV1aVRhYmxlVHBsWydzZWFyY2gvZGF0ZXRpbWVfcmFuZ2UuaHRtbCddLCB7XHJcbiAgICAgICAgICAgIHN0YXJ0QXR0cjogc3RhcnRBdHRyLmxlbmd0aCA+IDAgPyAoJyAnICsgc3RhcnRBdHRyLmpvaW4oJyAnKSkgOiAnJyxcclxuICAgICAgICAgICAgZW5kQXR0cjogc3RhcnRFbmQubGVuZ3RoID4gMCA/ICgnICcgKyBzdGFydEVuZC5qb2luKCcgJykpIDogJycsXHJcbiAgICAgICAgfSkpO1xyXG5cclxuICAgICAgICAkKCdpbnB1dC5kYXRlLXN0YXJ0JywgY29udHJvbCkuY2hhbmdlKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBsZXQgZGF0ZUVuZCA9ICQoJ2lucHV0LmRhdGUtZW5kJywgY29udHJvbCkuYXR0cignbWluJywgJCh0aGlzKS52YWwoKSk7XHJcblxyXG4gICAgICAgICAgICBpZiAoXCJzaG93UGlja2VyXCIgaW4gSFRNTElucHV0RWxlbWVudC5wcm90b3R5cGUpIHtcclxuICAgICAgICAgICAgICAgICQoZGF0ZUVuZClbMF0uc2hvd1BpY2tlcigpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgJCgnaW5wdXQuZGF0ZS1lbmQnLCBjb250cm9sKS5jaGFuZ2UoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICQoJ2lucHV0LmRhdGUtc3RhcnQnLCBjb250cm9sKS5hdHRyKCdtYXgnLCAkKHRoaXMpLnZhbCgpKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5fY29udHJvbCA9IGNvbnRyb2w7XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLl9jb250cm9sO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBTZWFyY2hEYXRldGltZVJhbmdlOyIsIlxyXG5pbXBvcnQgY29yZXVpVGFibGVUcGwgICBmcm9tIFwiLi4vY29yZXVpLnRhYmxlLnRlbXBsYXRlc1wiO1xyXG5pbXBvcnQgY29yZXVpVGFibGVVdGlscyBmcm9tIFwiLi4vY29yZXVpLnRhYmxlLnV0aWxzXCI7XHJcbmltcG9ydCBTZWFyY2ggICAgICAgICAgIGZyb20gXCIuLi9hYnN0cmFjdC9TZWFyY2hcIjtcclxuXHJcbmNsYXNzIFNlYXJjaENoZWNrYm94IGV4dGVuZHMgU2VhcmNoIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPXHJcbiAgICAgKiBAcGFyYW0ge2NvcmV1aVRhYmxlSW5zdGFuY2V9IHRhYmxlXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gICAgICAgICAgICAgIG9wdGlvbnNcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IodGFibGUsIG9wdGlvbnMpIHtcclxuXHJcbiAgICAgICAgb3B0aW9ucyA9ICQuZXh0ZW5kKHRydWUsIHtcclxuICAgICAgICAgICAgaWQ6IG51bGwsXHJcbiAgICAgICAgICAgIHR5cGU6ICdjaGVja2JveCcsXHJcbiAgICAgICAgICAgIGZpZWxkOiBudWxsLFxyXG4gICAgICAgICAgICBsYWJlbDogbnVsbCxcclxuICAgICAgICAgICAgdmFsdWU6IG51bGwsXHJcbiAgICAgICAgICAgIG9wdGlvbnM6IFtdXHJcbiAgICAgICAgfSwgb3B0aW9ucyk7XHJcblxyXG4gICAgICAgIHN1cGVyKHRhYmxlLCBvcHRpb25zKTtcclxuXHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLnZhbHVlICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0VmFsdWUodGhpcy5fb3B0aW9ucy52YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCj0YHRgtCw0L3QvtCy0LrQsCDQt9C90LDRh9C10L3QuNGPXHJcbiAgICAgKiBAcGFyYW0ge0FycmF5fG51bGx9IHZhbHVlXHJcbiAgICAgKi9cclxuICAgIHNldFZhbHVlKHZhbHVlKSB7XHJcblxyXG4gICAgICAgIGlmIChbJ3N0cmluZycsICdudW1iZXInLCAnb2JqZWN0J10uaW5kZXhPZih0eXBlb2YgdmFsdWUpIDwgMCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0Jykge1xyXG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcclxuICAgICAgICAgICAgICAgIGxldCBpdGVtcyA9IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgICQuZWFjaCh2YWx1ZSwgZnVuY3Rpb24gKGtleSwgaXRlbSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgaXRlbSAhPT0gJ3N0cmluZycgJiYgdHlwZW9mIGl0ZW0gIT09ICdudW1iZXInKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGl0ZW1zLnB1c2goaXRlbSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLl92YWx1ZSA9IGl0ZW1zO1xyXG5cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3ZhbHVlID0gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLl92YWx1ZSA9IFsgdmFsdWUgXTtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICBpZiAodGhpcy5fY29udHJvbCkge1xyXG4gICAgICAgICAgICAkKCdpbnB1dDpjaGVja2VkJywgdGhpcy5fY29udHJvbCkucHJvcCgnY2hlY2tlZCcsIGZhbHNlKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHRoaXMuX3ZhbHVlKSkge1xyXG4gICAgICAgICAgICAgICAgJC5lYWNoKHRoaXMuX3ZhbHVlLCBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICQoJ2lucHV0W3ZhbHVlPVwiJyArIHZhbHVlICsgJ1wiXScsIHRoaXMuX2NvbnRyb2wpLnByb3AoJ2NoZWNrZWQnLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC30L3QsNGH0LXQvdC40Y9cclxuICAgICAqIEByZXR1cm5zIHtBcnJheXxudWxsfVxyXG4gICAgICovXHJcbiAgICBnZXRWYWx1ZSgpIHtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX2NvbnRyb2wpIHtcclxuICAgICAgICAgICAgbGV0IGlucHV0cyA9ICQoJ2lucHV0OmNoZWNrZWQnLCB0aGlzLl9jb250cm9sKTtcclxuICAgICAgICAgICAgbGV0IGl0ZW1zICA9IFtdO1xyXG5cclxuICAgICAgICAgICAgJC5lYWNoKGlucHV0cywgZnVuY3Rpb24gKGtleSwgaW5wdXQpIHtcclxuICAgICAgICAgICAgICAgIGxldCB2YWx1ZSA9ICQoaW5wdXQpLmF0dHIoJ3ZhbHVlJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIHZhbHVlKSA+PSAwICYmXHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgIT09ICcnXHJcbiAgICAgICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgICAgICBpdGVtcy5wdXNoKHZhbHVlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gaXRlbXMubGVuZ3RoID4gMCA/IGl0ZW1zIDogbnVsbDtcclxuXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQpNC40LvRjNGC0YDQsNGG0LjRjyDQtNCw0L3QvdGL0YVcclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IGZpZWxkVmFsdWVcclxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gIHNlYXJjaFZhbHVlXHJcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICAgICAqL1xyXG4gICAgZmlsdGVyKGZpZWxkVmFsdWUsIHNlYXJjaFZhbHVlKSB7XHJcblxyXG4gICAgICAgIGlmIChbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiBmaWVsZFZhbHVlKSA8IDAgfHxcclxuICAgICAgICAgICAgISBBcnJheS5pc0FycmF5KHNlYXJjaFZhbHVlKVxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gc2VhcmNoVmFsdWUuaW5kZXhPZihmaWVsZFZhbHVlKSA+PSAwO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCk0L7RgNC80LjRgNC+0LLQsNC90LjQtSDQutC+0L3RgtC10L3RgtCwXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxyXG4gICAgICovXHJcbiAgICByZW5kZXIoKSB7XHJcblxyXG4gICAgICAgIGxldCB0aGF0ICAgID0gdGhpcztcclxuICAgICAgICBsZXQgb3B0aW9ucyA9IFtdO1xyXG5cclxuICAgICAgICAkLmVhY2godGhpcy5fb3B0aW9ucy5vcHRpb25zLCBmdW5jdGlvbiAoa2V5LCBvcHRpb24pIHtcclxuXHJcbiAgICAgICAgICAgIGlmIChbJ3N0cmluZycsICdudW1lcmljJ10uaW5kZXhPZih0eXBlb2Ygb3B0aW9uKSA+PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgY2hlY2tlZCA9IEFycmF5LmlzQXJyYXkodGhhdC5fdmFsdWUpID8gdGhhdC5fdmFsdWUuaW5kZXhPZihrZXkpID49IDAgOiBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgICAgICBvcHRpb25zLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgIHRleHQ6ICAgIG9wdGlvbixcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogICBrZXksXHJcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tlZDogY2hlY2tlZCxcclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlmICggISBjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KG9wdGlvbikgfHxcclxuICAgICAgICAgICAgICAgICAgICAhIG9wdGlvbi5oYXNPd25Qcm9wZXJ0eSgndmFsdWUnKSB8fFxyXG4gICAgICAgICAgICAgICAgICAgIFsnc3RyaW5nJywgJ251bWVyaWMnXS5pbmRleE9mKHR5cGVvZiBvcHRpb24udmFsdWUpID09PSAtMVxyXG4gICAgICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGxldCBjaGVja2VkID0gQXJyYXkuaXNBcnJheSh0aGF0Ll92YWx1ZSkgPyB0aGF0Ll92YWx1ZS5pbmRleE9mKG9wdGlvbi52YWx1ZSkgPj0gMCA6IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgbGV0IHRleHQgICAgPSBvcHRpb24uaGFzT3duUHJvcGVydHkoJ3RleHQnKVxyXG4gICAgICAgICAgICAgICAgICAgID8gb3B0aW9uLnRleHRcclxuICAgICAgICAgICAgICAgICAgICA6IG9wdGlvbi52YWx1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICBvcHRpb25zLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgIHRleHQ6ICAgIHRleHQsXHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICAgb3B0aW9uLnZhbHVlLFxyXG4gICAgICAgICAgICAgICAgICAgIGNoZWNrZWQ6IGNoZWNrZWQsXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLl9jb250cm9sID0gJChjb3JldWlUYWJsZVV0aWxzLnJlbmRlcihjb3JldWlUYWJsZVRwbFsnc2VhcmNoL2NoZWNrYm94Lmh0bWwnXSwge1xyXG4gICAgICAgICAgICBvcHRpb25zOiBvcHRpb25zLFxyXG4gICAgICAgIH0pKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbnRyb2w7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IFNlYXJjaENoZWNrYm94OyIsIlxyXG5pbXBvcnQgY29yZXVpVGFibGVUcGwgICBmcm9tIFwiLi4vY29yZXVpLnRhYmxlLnRlbXBsYXRlc1wiO1xyXG5pbXBvcnQgY29yZXVpVGFibGVVdGlscyBmcm9tIFwiLi4vY29yZXVpLnRhYmxlLnV0aWxzXCI7XHJcbmltcG9ydCBTZWFyY2ggICAgICAgICAgIGZyb20gXCIuLi9hYnN0cmFjdC9TZWFyY2hcIjtcclxuXHJcbmNsYXNzIFNlYXJjaENoZWNrYm94QnRuIGV4dGVuZHMgU2VhcmNoIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPXHJcbiAgICAgKiBAcGFyYW0ge2NvcmV1aVRhYmxlSW5zdGFuY2V9IHRhYmxlXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gICAgICAgICAgICAgIG9wdGlvbnNcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IodGFibGUsIG9wdGlvbnMpIHtcclxuXHJcbiAgICAgICAgb3B0aW9ucyA9ICQuZXh0ZW5kKHRydWUsIHtcclxuICAgICAgICAgICAgaWQ6IG51bGwsXHJcbiAgICAgICAgICAgIHR5cGU6ICdjaGVja2JveEJ0bicsXHJcbiAgICAgICAgICAgIGZpZWxkOiBudWxsLFxyXG4gICAgICAgICAgICBsYWJlbDogbnVsbCxcclxuICAgICAgICAgICAgb3B0aW9uc0NsYXNzOiAnYnRuIGJ0bi1vdXRsaW5lLXNlY29uZGFyeScsXHJcbiAgICAgICAgICAgIHZhbHVlOiBudWxsLFxyXG4gICAgICAgICAgICBvcHRpb25zOiBbXVxyXG4gICAgICAgIH0sIG9wdGlvbnMpO1xyXG5cclxuICAgICAgICBzdXBlcih0YWJsZSwgb3B0aW9ucyk7XHJcblxyXG5cclxuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy52YWx1ZSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLnNldFZhbHVlKHRoaXMuX29wdGlvbnMudmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQo9GB0YLQsNC90L7QstC60LAg0LfQvdCw0YfQtdC90LjRj1xyXG4gICAgICogQHBhcmFtIHtBcnJheXxudWxsfSB2YWx1ZVxyXG4gICAgICovXHJcbiAgICBzZXRWYWx1ZSh2YWx1ZSkge1xyXG5cclxuICAgICAgICBpZiAoWydzdHJpbmcnLCAnbnVtYmVyJywgJ29iamVjdCddLmluZGV4T2YodHlwZW9mIHZhbHVlKSA8IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgaXRlbXMgPSBbXTtcclxuXHJcbiAgICAgICAgICAgICAgICAkLmVhY2godmFsdWUsIGZ1bmN0aW9uIChrZXksIGl0ZW0pIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGl0ZW0gIT09ICdzdHJpbmcnICYmIHR5cGVvZiBpdGVtICE9PSAnbnVtYmVyJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpdGVtcy5wdXNoKGl0ZW0pO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5fdmFsdWUgPSBpdGVtcztcclxuXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl92YWx1ZSA9IG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5fdmFsdWUgPSBbIHZhbHVlIF07XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX2NvbnRyb2wpIHtcclxuICAgICAgICAgICAgJCgnaW5wdXQ6Y2hlY2tlZCcsIHRoaXMuX2NvbnRyb2wpLnByb3AoJ2NoZWNrZWQnLCBmYWxzZSk7XHJcblxyXG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh0aGlzLl92YWx1ZSkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3ZhbHVlLm1hcChmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAkKCdpbnB1dFt2YWx1ZT1cIicgKyB2YWx1ZSArICdcIl0nLCB0aGlzLl9jb250cm9sKS5wcm9wKCdjaGVja2VkJywgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSDQt9C90LDRh9C10L3QuNGPXHJcbiAgICAgKiBAcmV0dXJucyB7QXJyYXl8bnVsbH1cclxuICAgICAqL1xyXG4gICAgZ2V0VmFsdWUoKSB7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9jb250cm9sKSB7XHJcbiAgICAgICAgICAgIGxldCBpbnB1dHMgPSAkKCdpbnB1dDpjaGVja2VkJywgdGhpcy5fY29udHJvbCk7XHJcbiAgICAgICAgICAgIGxldCBpdGVtcyAgPSBbXTtcclxuXHJcbiAgICAgICAgICAgICQuZWFjaChpbnB1dHMsIGZ1bmN0aW9uIChrZXksIGlucHV0KSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgdmFsdWUgPSAkKGlucHV0KS5hdHRyKCd2YWx1ZScpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICgoWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2YgdmFsdWUpID49IDApICYmXHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgIT09ICcnXHJcbiAgICAgICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgICAgICBpdGVtcy5wdXNoKHZhbHVlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gaXRlbXMubGVuZ3RoID4gMCA/IGl0ZW1zIDogbnVsbDtcclxuXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQpNC40LvRjNGC0YDQsNGG0LjRjyDQtNCw0L3QvdGL0YVcclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IGZpZWxkVmFsdWVcclxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gIHNlYXJjaFZhbHVlXHJcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICAgICAqL1xyXG4gICAgZmlsdGVyKGZpZWxkVmFsdWUsIHNlYXJjaFZhbHVlKSB7XHJcblxyXG4gICAgICAgIGlmIChbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiBmaWVsZFZhbHVlKSA8IDAgfHxcclxuICAgICAgICAgICAgISBBcnJheS5pc0FycmF5KHNlYXJjaFZhbHVlKVxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gc2VhcmNoVmFsdWUuaW5kZXhPZihmaWVsZFZhbHVlKSA+PSAwO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCk0L7RgNC80LjRgNC+0LLQsNC90LjQtSDQutC+0L3RgtC10L3RgtCwXHJcbiAgICAgKiBAcmV0dXJucyB7alF1ZXJ5fVxyXG4gICAgICovXHJcbiAgICByZW5kZXIoKSB7XHJcblxyXG4gICAgICAgIGxldCB0aGF0ICAgID0gdGhpcztcclxuICAgICAgICBsZXQgb3B0aW9ucyA9IFtdO1xyXG5cclxuICAgICAgICAkLmVhY2godGhpcy5fb3B0aW9ucy5vcHRpb25zLCBmdW5jdGlvbiAoa2V5LCBvcHRpb24pIHtcclxuXHJcbiAgICAgICAgICAgIGlmIChbJ3N0cmluZycsICdudW1lcmljJ10uaW5kZXhPZih0eXBlb2Ygb3B0aW9uKSA+PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgY2hlY2tlZCA9IEFycmF5LmlzQXJyYXkodGhhdC5fdmFsdWUpID8gdGhhdC5fdmFsdWUuaW5kZXhPZihrZXkpID49IDAgOiBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgICAgICBvcHRpb25zLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgIHRleHQ6ICAgIG9wdGlvbixcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogICBrZXksXHJcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tlZDogY2hlY2tlZCxcclxuICAgICAgICAgICAgICAgICAgICBvcHRpb25zQ2xhc3M6IHRoYXQuX29wdGlvbnMub3B0aW9uc0NsYXNzLFxyXG4gICAgICAgICAgICAgICAgICAgIGhhc2g6IGNvcmV1aVRhYmxlVXRpbHMuaGFzaENvZGUoKVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaWYgKCAhIGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3Qob3B0aW9uKSB8fFxyXG4gICAgICAgICAgICAgICAgICAgICEgb3B0aW9uLmhhc093blByb3BlcnR5KCd2YWx1ZScpIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgWydzdHJpbmcnLCAnbnVtZXJpYyddLmluZGV4T2YodHlwZW9mIG9wdGlvbi52YWx1ZSkgPT09IC0xXHJcbiAgICAgICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgbGV0IGNoZWNrZWQgPSBBcnJheS5pc0FycmF5KHRoYXQuX3ZhbHVlKSA/IHRoYXQuX3ZhbHVlLmluZGV4T2Yob3B0aW9uLnZhbHVlKSA+PSAwIDogZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBsZXQgdGV4dCAgICA9IG9wdGlvbi5oYXNPd25Qcm9wZXJ0eSgndGV4dCcpXHJcbiAgICAgICAgICAgICAgICAgICAgPyBvcHRpb24udGV4dFxyXG4gICAgICAgICAgICAgICAgICAgIDogb3B0aW9uLnZhbHVlO1xyXG5cclxuICAgICAgICAgICAgICAgIG9wdGlvbnMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgdGV4dDogICAgdGV4dCxcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogICBvcHRpb24udmFsdWUsXHJcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tlZDogY2hlY2tlZCxcclxuICAgICAgICAgICAgICAgICAgICBvcHRpb25zQ2xhc3M6IHRoYXQuX29wdGlvbnMub3B0aW9uc0NsYXNzLFxyXG4gICAgICAgICAgICAgICAgICAgIGhhc2g6IGNvcmV1aVRhYmxlVXRpbHMuaGFzaENvZGUoKSxcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuX2NvbnRyb2wgPSAkKGNvcmV1aVRhYmxlVXRpbHMucmVuZGVyKGNvcmV1aVRhYmxlVHBsWydzZWFyY2gvY2hlY2tib3gtYnRuLmh0bWwnXSwge1xyXG4gICAgICAgICAgICBvcHRpb25zOiBvcHRpb25zXHJcbiAgICAgICAgfSkpO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5fY29udHJvbDtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgU2VhcmNoQ2hlY2tib3hCdG47IiwiXHJcbmltcG9ydCBjb3JldWlUYWJsZVRwbCAgIGZyb20gXCIuLi9jb3JldWkudGFibGUudGVtcGxhdGVzXCI7XHJcbmltcG9ydCBjb3JldWlUYWJsZVV0aWxzIGZyb20gXCIuLi9jb3JldWkudGFibGUudXRpbHNcIjtcclxuaW1wb3J0IFNlYXJjaCAgICAgICAgICAgZnJvbSBcIi4uL2Fic3RyYWN0L1NlYXJjaFwiO1xyXG5cclxuY2xhc3MgU2VhcmNoUmFkaW8gZXh0ZW5kcyBTZWFyY2gge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y9cclxuICAgICAqIEBwYXJhbSB7Y29yZXVpVGFibGVJbnN0YW5jZX0gdGFibGVcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSAgICAgICAgICAgICAgb3B0aW9uc1xyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3Rvcih0YWJsZSwgb3B0aW9ucykge1xyXG5cclxuICAgICAgICBvcHRpb25zID0gJC5leHRlbmQodHJ1ZSwge1xyXG4gICAgICAgICAgICBpZDogbnVsbCxcclxuICAgICAgICAgICAgdHlwZTogJ3JhZGlvJyxcclxuICAgICAgICAgICAgZmllbGQ6IG51bGwsXHJcbiAgICAgICAgICAgIGxhYmVsOiBudWxsLFxyXG4gICAgICAgICAgICB2YWx1ZTogbnVsbCxcclxuICAgICAgICAgICAgb3B0aW9uczogW10sXHJcbiAgICAgICAgfSwgb3B0aW9ucyk7XHJcblxyXG4gICAgICAgIHN1cGVyKHRhYmxlLCBvcHRpb25zKTtcclxuXHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLnZhbHVlICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0VmFsdWUodGhpcy5fb3B0aW9ucy52YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCj0YHRgtCw0L3QvtCy0LrQsCDQt9C90LDRh9C10L3QuNGPXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcclxuICAgICAqL1xyXG4gICAgc2V0VmFsdWUodmFsdWUpIHtcclxuXHJcbiAgICAgICAgaWYgKHZhbHVlICE9PSBudWxsICYmXHJcbiAgICAgICAgICAgIHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycgJiZcclxuICAgICAgICAgICAgdHlwZW9mIHZhbHVlICE9PSAnbnVtYmVyJ1xyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl92YWx1ZSA9IHZhbHVlO1xyXG5cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX2NvbnRyb2wpIHtcclxuICAgICAgICAgICAgJCgnaW5wdXQnLCAgdGhpcy5fY29udHJvbCkucHJvcCgnY2hlY2tlZCcsIGZhbHNlKTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLl92YWx1ZSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgJCgnaW5wdXRbdmFsdWU9XCInICsgdGhpcy5fdmFsdWUgKyAnXCJdJywgIHRoaXMuX2NvbnRyb2wpLnByb3AoJ2NoZWNrZWQnLCB0cnVlKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICQoJ2lucHV0LmNvcmV1aS10YWJsZV9fYWxsJywgIHRoaXMuX2NvbnRyb2wpLnByb3AoJ2NoZWNrZWQnLCB0cnVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0LfQvdCw0YfQtdC90LjRj1xyXG4gICAgICogQHJldHVybnMge3N0cmluZ3xudWxsfVxyXG4gICAgICovXHJcbiAgICBnZXRWYWx1ZSgpIHtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX2NvbnRyb2wpIHtcclxuICAgICAgICAgICAgbGV0IGlucHV0ID0gJCgnaW5wdXQ6Y2hlY2tlZCcsIHRoaXMuX2NvbnRyb2wpO1xyXG5cclxuICAgICAgICAgICAgaWYgKGlucHV0ICYmIGlucHV0WzBdKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgdmFsdWUgPSBpbnB1dC52YWwoKTtcclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWUgPT09ICcnXHJcbiAgICAgICAgICAgICAgICAgICAgPyBudWxsXHJcbiAgICAgICAgICAgICAgICAgICAgOiB2YWx1ZVxyXG5cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl92YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KTQuNC70YzRgtGA0LDRhtC40Y8g0LTQsNC90L3Ri9GFXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSAgICAgICAgICAgICAgZmllbGRWYWx1ZVxyXG4gICAgICogQHJldHVybnMge0FycmF5fHN0cmluZ3xudW1iZXJ9IHNlYXJjaFZhbHVlXHJcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICAgICAqL1xyXG4gICAgZmlsdGVyKGZpZWxkVmFsdWUsIHNlYXJjaFZhbHVlKSB7XHJcblxyXG4gICAgICAgIGlmIChbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiBmaWVsZFZhbHVlKSA8IDAgfHxcclxuICAgICAgICAgICAgWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2Ygc2VhcmNoVmFsdWUpIDwgMFxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gZmllbGRWYWx1ZS50b1N0cmluZygpLnRvTG93ZXJDYXNlKCkgPT09IHNlYXJjaFZhbHVlLnRvU3RyaW5nKCkudG9Mb3dlckNhc2UoKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQpNC+0YDQvNC40YDQvtCy0LDQvdC40LUg0LrQvtC90YLQtdC90YLQsFxyXG4gICAgICogQHJldHVybnMge2pRdWVyeX1cclxuICAgICAqL1xyXG4gICAgcmVuZGVyKCkge1xyXG5cclxuICAgICAgICBsZXQgdGhhdCAgICAgICA9IHRoaXM7XHJcbiAgICAgICAgbGV0IGNoZWNrZWRBbGwgPSB0cnVlO1xyXG4gICAgICAgIGxldCBvcHRpb25zICAgID0gW107XHJcblxyXG4gICAgICAgICQuZWFjaCh0aGlzLl9vcHRpb25zLm9wdGlvbnMsIGZ1bmN0aW9uIChrZXksIG9wdGlvbikge1xyXG5cclxuICAgICAgICAgICAgaWYgKFsnc3RyaW5nJywgJ251bWVyaWMnXS5pbmRleE9mKHR5cGVvZiBvcHRpb24pID49IDApIHtcclxuICAgICAgICAgICAgICAgIGxldCBjaGVja2VkID0ga2V5ID09IHRoYXQuX3ZhbHVlO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChjaGVja2VkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tlZEFsbCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIG9wdGlvbnMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgdGV4dDogICAgb3B0aW9uLFxyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiAgIGtleSxcclxuICAgICAgICAgICAgICAgICAgICBjaGVja2VkOiBjaGVja2VkLFxyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaWYgKCAhIGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3Qob3B0aW9uKSB8fFxyXG4gICAgICAgICAgICAgICAgICAgICEgb3B0aW9uLmhhc093blByb3BlcnR5KCd2YWx1ZScpIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgWydzdHJpbmcnLCAnbnVtZXJpYyddLmluZGV4T2YodHlwZW9mIG9wdGlvbi52YWx1ZSkgPT09IC0xXHJcbiAgICAgICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgbGV0IGNoZWNrZWQgPSBvcHRpb24udmFsdWUgPT0gdGhhdC5fdmFsdWU7XHJcbiAgICAgICAgICAgICAgICBsZXQgdGV4dCAgICA9IG9wdGlvbi5oYXNPd25Qcm9wZXJ0eSgndGV4dCcpXHJcbiAgICAgICAgICAgICAgICAgICAgPyBvcHRpb24udGV4dFxyXG4gICAgICAgICAgICAgICAgICAgIDogb3B0aW9uLnZhbHVlO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChjaGVja2VkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tlZEFsbCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIG9wdGlvbnMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgdGV4dDogICAgdGV4dCxcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogICBvcHRpb24udmFsdWUsXHJcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tlZDogY2hlY2tlZCxcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuX2NvbnRyb2wgPSAkKGNvcmV1aVRhYmxlVXRpbHMucmVuZGVyKGNvcmV1aVRhYmxlVHBsWydzZWFyY2gvcmFkaW8uaHRtbCddLCB7XHJcbiAgICAgICAgICAgIG9wdGlvbnM6IG9wdGlvbnMsXHJcbiAgICAgICAgICAgIGNoZWNrZWRBbGw6IGNoZWNrZWRBbGwsXHJcbiAgICAgICAgICAgIGZpZWxkOiBjb3JldWlUYWJsZVV0aWxzLmhhc2hDb2RlKCksXHJcbiAgICAgICAgICAgIGxhbmc6IHRoaXMuX3RhYmxlLmdldExhbmcoKVxyXG4gICAgICAgIH0pKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbnRyb2w7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IFNlYXJjaFJhZGlvOyIsIlxyXG5pbXBvcnQgY29yZXVpVGFibGVUcGwgICBmcm9tIFwiLi4vY29yZXVpLnRhYmxlLnRlbXBsYXRlc1wiO1xyXG5pbXBvcnQgY29yZXVpVGFibGVVdGlscyBmcm9tIFwiLi4vY29yZXVpLnRhYmxlLnV0aWxzXCI7XHJcbmltcG9ydCBTZWFyY2ggICAgICAgICAgIGZyb20gXCIuLi9hYnN0cmFjdC9TZWFyY2hcIjtcclxuXHJcbmNsYXNzIFNlYXJjaFJhZGlvQnRuIGV4dGVuZHMgU2VhcmNoIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPXHJcbiAgICAgKiBAcGFyYW0ge2NvcmV1aVRhYmxlSW5zdGFuY2V9IHRhYmxlXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gICAgICAgICAgICAgIG9wdGlvbnNcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IodGFibGUsIG9wdGlvbnMpIHtcclxuXHJcbiAgICAgICAgb3B0aW9ucyA9ICQuZXh0ZW5kKHRydWUsIHtcclxuICAgICAgICAgICAgaWQ6IG51bGwsXHJcbiAgICAgICAgICAgIHR5cGU6ICdyYWRpb0J0bicsXHJcbiAgICAgICAgICAgIGZpZWxkOiBudWxsLFxyXG4gICAgICAgICAgICBvcHRpb25zQ2xhc3M6ICdidG4gYnRuLW91dGxpbmUtc2Vjb25kYXJ5JyxcclxuICAgICAgICAgICAgbGFiZWw6IG51bGwsXHJcbiAgICAgICAgICAgIHZhbHVlOiBudWxsLFxyXG4gICAgICAgICAgICBvcHRpb25zOiBbXSxcclxuICAgICAgICB9LCBvcHRpb25zKTtcclxuXHJcbiAgICAgICAgc3VwZXIodGFibGUsIG9wdGlvbnMpO1xyXG5cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMudmFsdWUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5zZXRWYWx1ZSh0aGlzLl9vcHRpb25zLnZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KPRgdGC0LDQvdC+0LLQutCwINC30L3QsNGH0LXQvdC40Y9cclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfG51bWJlcn0gdmFsdWVcclxuICAgICAqL1xyXG4gICAgc2V0VmFsdWUodmFsdWUpIHtcclxuXHJcbiAgICAgICAgaWYgKHZhbHVlICE9PSBudWxsICYmXHJcbiAgICAgICAgICAgIHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycgJiZcclxuICAgICAgICAgICAgdHlwZW9mIHZhbHVlICE9PSAnbnVtYmVyJ1xyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl92YWx1ZSA9IHZhbHVlO1xyXG5cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX2NvbnRyb2wpIHtcclxuICAgICAgICAgICAgJCgnaW5wdXQnLCB0aGlzLl9jb250cm9sKS5wcm9wKCdjaGVja2VkJywgZmFsc2UpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuX3ZhbHVlICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAkKCdpbnB1dFt2YWx1ZT1cIicgKyB0aGlzLl92YWx1ZSArICdcIl0nLCB0aGlzLl9jb250cm9sKS5wcm9wKCdjaGVja2VkJywgdHJ1ZSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAkKCdpbnB1dC5jb3JldWktdGFibGVfX2FsbCcsIHRoaXMuX2NvbnRyb2wpLnByb3AoJ2NoZWNrZWQnLCB0cnVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0LfQvdCw0YfQtdC90LjRj1xyXG4gICAgICogQHJldHVybnMge3N0cmluZ3xudWxsfVxyXG4gICAgICovXHJcbiAgICBnZXRWYWx1ZSgpIHtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX2NvbnRyb2wpIHtcclxuICAgICAgICAgICAgbGV0IGlucHV0ID0gJCgnaW5wdXQ6Y2hlY2tlZCcsIHRoaXMuX2NvbnRyb2wpO1xyXG5cclxuICAgICAgICAgICAgaWYgKGlucHV0ICYmIGlucHV0WzBdKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgdmFsdWUgPSBpbnB1dC52YWwoKTtcclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWUgPT09ICcnXHJcbiAgICAgICAgICAgICAgICAgICAgPyBudWxsXHJcbiAgICAgICAgICAgICAgICAgICAgOiB2YWx1ZVxyXG5cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl92YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KTQuNC70YzRgtGA0LDRhtC40Y8g0LTQsNC90L3Ri9GFXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSAgICAgICAgICAgICAgZmllbGRWYWx1ZVxyXG4gICAgICogQHJldHVybnMge0FycmF5fHN0cmluZ3xudW1iZXJ9IHNlYXJjaFZhbHVlXHJcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICAgICAqL1xyXG4gICAgZmlsdGVyKGZpZWxkVmFsdWUsIHNlYXJjaFZhbHVlKSB7XHJcblxyXG4gICAgICAgIGlmIChbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiBmaWVsZFZhbHVlKSA8IDAgfHxcclxuICAgICAgICAgICAgWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2Ygc2VhcmNoVmFsdWUpIDwgMFxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gZmllbGRWYWx1ZS50b1N0cmluZygpLnRvTG93ZXJDYXNlKCkgPT09IHNlYXJjaFZhbHVlLnRvU3RyaW5nKCkudG9Mb3dlckNhc2UoKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQpNC+0YDQvNC40YDQvtCy0LDQvdC40LUg0LrQvtC90YLQtdC90YLQsFxyXG4gICAgICogQHJldHVybnMge3N0cmluZ31cclxuICAgICAqL1xyXG4gICAgcmVuZGVyKCkge1xyXG5cclxuICAgICAgICBsZXQgdGhhdCAgICAgICA9IHRoaXM7XHJcbiAgICAgICAgbGV0IGNoZWNrZWRBbGwgPSB0cnVlO1xyXG4gICAgICAgIGxldCBvcHRpb25zICAgID0gW107XHJcblxyXG4gICAgICAgICQuZWFjaCh0aGlzLl9vcHRpb25zLm9wdGlvbnMsIGZ1bmN0aW9uIChrZXksIG9wdGlvbikge1xyXG5cclxuICAgICAgICAgICAgaWYgKFsnc3RyaW5nJywgJ251bWVyaWMnXS5pbmRleE9mKHR5cGVvZiBvcHRpb24pID49IDApIHtcclxuICAgICAgICAgICAgICAgIGxldCBjaGVja2VkID0ga2V5ID09IHRoYXQuX3ZhbHVlO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChjaGVja2VkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tlZEFsbCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIG9wdGlvbnMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgdGV4dDogICAgb3B0aW9uLFxyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiAgIGtleSxcclxuICAgICAgICAgICAgICAgICAgICBjaGVja2VkOiBjaGVja2VkLFxyXG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnNDbGFzczogdGhhdC5fb3B0aW9ucy5vcHRpb25zQ2xhc3MsXHJcbiAgICAgICAgICAgICAgICAgICAgaGFzaDogY29yZXVpVGFibGVVdGlscy5oYXNoQ29kZSgpLFxyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaWYgKCAhIGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3Qob3B0aW9uKSB8fFxyXG4gICAgICAgICAgICAgICAgICAgICEgb3B0aW9uLmhhc093blByb3BlcnR5KCd2YWx1ZScpIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgWydzdHJpbmcnLCAnbnVtZXJpYyddLmluZGV4T2YodHlwZW9mIG9wdGlvbi52YWx1ZSkgPT09IC0xXHJcbiAgICAgICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgbGV0IGNoZWNrZWQgPSBvcHRpb24udmFsdWUgPT0gdGhhdC5fdmFsdWU7XHJcbiAgICAgICAgICAgICAgICBsZXQgdGV4dCAgICA9IG9wdGlvbi5oYXNPd25Qcm9wZXJ0eSgndGV4dCcpXHJcbiAgICAgICAgICAgICAgICAgICAgPyBvcHRpb24udGV4dFxyXG4gICAgICAgICAgICAgICAgICAgIDogb3B0aW9uLnZhbHVlO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChjaGVja2VkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tlZEFsbCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIG9wdGlvbnMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgdGV4dDogICAgdGV4dCxcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogICBvcHRpb24udmFsdWUsXHJcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tlZDogY2hlY2tlZCxcclxuICAgICAgICAgICAgICAgICAgICBvcHRpb25zQ2xhc3M6IHRoYXQuX29wdGlvbnMub3B0aW9uc0NsYXNzLFxyXG4gICAgICAgICAgICAgICAgICAgIGhhc2g6IGNvcmV1aVRhYmxlVXRpbHMuaGFzaENvZGUoKSxcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuX2NvbnRyb2wgPSAkKGNvcmV1aVRhYmxlVXRpbHMucmVuZGVyKGNvcmV1aVRhYmxlVHBsWydzZWFyY2gvcmFkaW8tYnRuLmh0bWwnXSwge1xyXG4gICAgICAgICAgICBvcHRpb25zOiBvcHRpb25zLFxyXG4gICAgICAgICAgICBjaGVja2VkQWxsOiBjaGVja2VkQWxsLFxyXG4gICAgICAgICAgICBvcHRpb25BbGxIYXNoOiBjb3JldWlUYWJsZVV0aWxzLmhhc2hDb2RlKCksXHJcbiAgICAgICAgICAgIG9wdGlvbk9wdGlvbnNDbGFzczogdGhhdC5fb3B0aW9ucy5vcHRpb25zQ2xhc3MsXHJcbiAgICAgICAgICAgIGZpZWxkOiBjb3JldWlUYWJsZVV0aWxzLmhhc2hDb2RlKCksXHJcbiAgICAgICAgICAgIGxhbmc6IHRoaXMuX3RhYmxlLmdldExhbmcoKVxyXG4gICAgICAgIH0pKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbnRyb2w7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IFNlYXJjaFJhZGlvQnRuOyIsIlxyXG5pbXBvcnQgY29yZXVpVGFibGVUcGwgICBmcm9tIFwiLi4vY29yZXVpLnRhYmxlLnRlbXBsYXRlc1wiO1xyXG5pbXBvcnQgY29yZXVpVGFibGVVdGlscyBmcm9tIFwiLi4vY29yZXVpLnRhYmxlLnV0aWxzXCI7XHJcbmltcG9ydCBTZWFyY2ggICAgICAgICAgIGZyb20gXCIuLi9hYnN0cmFjdC9TZWFyY2hcIjtcclxuXHJcbmNsYXNzIFNlYXJjaFNlbGVjdCBleHRlbmRzIFNlYXJjaCB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQmNC90LjRhtC40LDQu9C40LfQsNGG0LjRj1xyXG4gICAgICogQHBhcmFtIHtjb3JldWlUYWJsZUluc3RhbmNlfSB0YWJsZVxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9ICAgICAgICAgICAgICBvcHRpb25zXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKHRhYmxlLCBvcHRpb25zKSB7XHJcblxyXG4gICAgICAgIG9wdGlvbnMgPSAkLmV4dGVuZCh0cnVlLCB7XHJcbiAgICAgICAgICAgIGlkOiBudWxsLFxyXG4gICAgICAgICAgICB0eXBlOiAnc2VsZWN0JyxcclxuICAgICAgICAgICAgZmllbGQ6IG51bGwsXHJcbiAgICAgICAgICAgIGxhYmVsOiBudWxsLFxyXG4gICAgICAgICAgICB3aWR0aDogbnVsbCxcclxuICAgICAgICAgICAgdmFsdWU6IG51bGwsXHJcbiAgICAgICAgICAgIGF0dHI6IHtcclxuICAgICAgICAgICAgICAgIGNsYXNzOiAnZm9ybS1zZWxlY3QgZC1pbmxpbmUtYmxvY2snXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIG9wdGlvbnM6IFtdXHJcbiAgICAgICAgfSwgb3B0aW9ucyk7XHJcblxyXG4gICAgICAgIHN1cGVyKHRhYmxlLCBvcHRpb25zKTtcclxuXHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLnZhbHVlICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0VmFsdWUodGhpcy5fb3B0aW9ucy52YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCj0YHRgtCw0L3QvtCy0LrQsCDQt9C90LDRh9C10L3QuNGPXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ3xudW1iZXJ8QXJyYXl9IHZhbHVlXHJcbiAgICAgKi9cclxuICAgIHNldFZhbHVlKHZhbHVlKSB7XHJcblxyXG4gICAgICAgIGlmIChbJ3N0cmluZycsICdudW1iZXInLCAnb2JqZWN0J10uaW5kZXhPZih0eXBlb2YgdmFsdWUpIDwgMCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0Jykge1xyXG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcclxuICAgICAgICAgICAgICAgIGxldCBpdGVtcyA9IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgIHZhbHVlLm1hcChmdW5jdGlvbiAoaXRlbSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnICYmIHR5cGVvZiB2YWx1ZSAhPT0gJ251bWJlcicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaXRlbXMucHVzaChpdGVtKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuX3ZhbHVlID0gaXRlbXM7XHJcblxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fdmFsdWUgPSBudWxsO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3ZhbHVlID0gWyB2YWx1ZSBdO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9jb250cm9sKSB7XHJcbiAgICAgICAgICAgICQoJ29wdGlvbjpzZWxlY3RlZCcsIHRoaXMuX2NvbnRyb2wpLnByb3AoJ3NlbGVjdGVkJywgZmFsc2UpO1xyXG5cclxuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodGhpcy5fdmFsdWUpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl92YWx1ZS5tYXAoZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJCgnb3B0aW9uW3ZhbHVlPVwiJyArIHZhbHVlICsgJ1wiXScsIHRoaXMuX2NvbnRyb2wpLnByb3AoJ3NlbGVjdGVkJywgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0LfQvdCw0YfQtdC90LjRj1xyXG4gICAgICogQHJldHVybnMge0FycmF5fHN0cmluZ3xudWxsfVxyXG4gICAgICovXHJcbiAgICBnZXRWYWx1ZSgpIHtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX2NvbnRyb2wpIHtcclxuICAgICAgICAgICAgbGV0IGlzTXVsdGlwbGUgPSAhISB0aGlzLl9jb250cm9sLmF0dHIoJ211bHRpcGxlJyk7XHJcbiAgICAgICAgICAgIGxldCBvcHRpb25zICAgID0gJCgnb3B0aW9uOnNlbGVjdGVkJywgdGhpcy5fY29udHJvbCk7XHJcbiAgICAgICAgICAgIGxldCBpdGVtcyAgICAgID0gW107XHJcblxyXG4gICAgICAgICAgICAkLmVhY2gob3B0aW9ucywgZnVuY3Rpb24gKGtleSwgb3B0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgdmFsdWUgPSAkKG9wdGlvbikuYXR0cigndmFsdWUnKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2YgdmFsdWUpID49IDAgJiZcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZSAhPT0gJydcclxuICAgICAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgICAgIGl0ZW1zLnB1c2godmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBpdGVtcy5sZW5ndGggPiAwXHJcbiAgICAgICAgICAgICAgICA/IChpc011bHRpcGxlID8gaXRlbXMgOiBpdGVtc1swXSlcclxuICAgICAgICAgICAgICAgIDogbnVsbDtcclxuXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQpNC40LvRjNGC0YDQsNGG0LjRjyDQtNCw0L3QvdGL0YVcclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9ICAgICAgICAgICAgICBmaWVsZFZhbHVlXHJcbiAgICAgKiBAcmV0dXJucyB7QXJyYXl8c3RyaW5nfG51bWJlcn0gc2VhcmNoVmFsdWVcclxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gICAgICovXHJcbiAgICBmaWx0ZXIoZmllbGRWYWx1ZSwgc2VhcmNoVmFsdWUpIHtcclxuXHJcbiAgICAgICAgaWYgKFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIGZpZWxkVmFsdWUpIDwgMCB8fFxyXG4gICAgICAgICAgICAoWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2Ygc2VhcmNoVmFsdWUpIDwgMCAmJiAhIEFycmF5LmlzQXJyYXkoc2VhcmNoVmFsdWUpKVxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoc2VhcmNoVmFsdWUpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBzZWFyY2hWYWx1ZS5pbmRleE9mKGZpZWxkVmFsdWUpID49IDA7XHJcblxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmaWVsZFZhbHVlLnRvU3RyaW5nKCkudG9Mb3dlckNhc2UoKSA9PT0gc2VhcmNoVmFsdWUudG9TdHJpbmcoKS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQpNC+0YDQvNC40YDQvtCy0LDQvdC40LUg0LrQvtC90YLQtdC90YLQsFxyXG4gICAgICogQHJldHVybnMge3N0cmluZ31cclxuICAgICAqL1xyXG4gICAgcmVuZGVyKCkge1xyXG5cclxuICAgICAgICBsZXQgdGhhdCAgICAgICAgICA9IHRoaXM7XHJcbiAgICAgICAgbGV0IG9wdGlvbnMgICAgICAgPSB0aGlzLmdldE9wdGlvbnMoKTtcclxuICAgICAgICBsZXQgc2VsZWN0T3B0aW9ucyA9IFtdO1xyXG4gICAgICAgIGxldCBhdHRyaWJ1dGVzICAgID0gW107XHJcblxyXG4gICAgICAgIGlmICggISBvcHRpb25zLmhhc093blByb3BlcnR5KCdhdHRyJykgfHxcclxuICAgICAgICAgICAgICEgY29yZXVpVGFibGVVdGlscy5pc09iamVjdChvcHRpb25zLmF0dHIpXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIG9wdGlvbnMuYXR0ciA9IHt9O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKG9wdGlvbnMuZmllbGQpIHtcclxuICAgICAgICAgICAgb3B0aW9ucy5hdHRyLm5hbWUgPSB0aGlzLl9vcHRpb25zLmZpZWxkO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKG9wdGlvbnMud2lkdGgpIHtcclxuICAgICAgICAgICAgb3B0aW9ucy5hdHRyID0gY29yZXVpVGFibGVVdGlscy5tZXJnZUF0dHIoXHJcbiAgICAgICAgICAgICAgICB7IHN0eWxlOiAnd2lkdGg6JyArIG9wdGlvbnMud2lkdGggKyAncHgnIH0sXHJcbiAgICAgICAgICAgICAgICBvcHRpb25zLmF0dHJcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChvcHRpb25zLmhhc093blByb3BlcnR5KCdvcHRpb25zJykgJiZcclxuICAgICAgICAgICAgdHlwZW9mIG9wdGlvbnMub3B0aW9ucyA9PT0gJ29iamVjdCcgJiZcclxuICAgICAgICAgICAgb3B0aW9ucy5vcHRpb25zICE9PSBudWxsXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICQuZWFjaChvcHRpb25zLm9wdGlvbnMsIGZ1bmN0aW9uIChrZXksIG9wdGlvbikge1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygb3B0aW9uID09PSAnc3RyaW5nJyB8fCB0eXBlb2Ygb3B0aW9uID09PSAnbnVtYmVyJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdE9wdGlvbnMucHVzaCh0aGF0Ll9idWlsZE9wdGlvbih7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdvcHRpb24nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZToga2V5LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBvcHRpb25cclxuICAgICAgICAgICAgICAgICAgICB9KSk7XHJcblxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KG9wdGlvbikpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgdHlwZSA9IG9wdGlvbi5oYXNPd25Qcm9wZXJ0eSgndHlwZScpICYmIHR5cGVvZiBvcHRpb24udHlwZSA9PT0gJ3N0cmluZydcclxuICAgICAgICAgICAgICAgICAgICAgICAgPyBvcHRpb24udHlwZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA6ICdvcHRpb24nO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZSA9PT0gJ2dyb3VwJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgcmVuZGVyQXR0ciAgID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBncm91cEF0dHIgICAgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGdyb3VwT3B0aW9ucyA9IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbi5oYXNPd25Qcm9wZXJ0eSgnYXR0cicpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KG9wdGlvbi5hdHRyKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdyb3VwQXR0ciA9IG9wdGlvbi5hdHRyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob3B0aW9uLmhhc093blByb3BlcnR5KCdsYWJlbCcpICYmIFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mKG9wdGlvbi5sYWJlbCkpID49IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdyb3VwQXR0ci5sYWJlbCA9IG9wdGlvbi5sYWJlbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgJC5lYWNoKGdyb3VwQXR0ciwgZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW5kZXJBdHRyLnB1c2gobmFtZSArICc9XCInICsgdmFsdWUgKyAnXCInKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShvcHRpb24ub3B0aW9ucykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQuZWFjaChvcHRpb24ub3B0aW9ucywgZnVuY3Rpb24gKGtleSwgZ3JvdXBPcHRpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBncm91cE9wdGlvbnMucHVzaCh0aGF0Ll9idWlsZE9wdGlvbihncm91cE9wdGlvbikpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdE9wdGlvbnMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnZ3JvdXAnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cjogcmVuZGVyQXR0ci5sZW5ndGggPiAwID8gKCcgJyArIHJlbmRlckF0dHIuam9pbignICcpKSA6ICcnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uczogZ3JvdXBPcHRpb25zLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0T3B0aW9ucy5wdXNoKHRoYXQuX2J1aWxkT3B0aW9uKG9wdGlvbikpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAkLmVhY2gob3B0aW9ucy5hdHRyLCBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcclxuICAgICAgICAgICAgYXR0cmlidXRlcy5wdXNoKG5hbWUgKyAnPVwiJyArIHZhbHVlICsgJ1wiJyk7XHJcbiAgICAgICAgfSk7XHJcblxyXG5cclxuICAgICAgICB0aGlzLl9jb250cm9sID0gJChjb3JldWlUYWJsZVV0aWxzLnJlbmRlcihjb3JldWlUYWJsZVRwbFsnc2VhcmNoL3NlbGVjdC5odG1sJ10sIHtcclxuICAgICAgICAgICAgZmllbGQ6IG9wdGlvbnMsXHJcbiAgICAgICAgICAgIHZhbHVlOiB0aGlzLl92YWx1ZSxcclxuICAgICAgICAgICAgYXR0cjogYXR0cmlidXRlcy5sZW5ndGggPiAwID8gKCcgJyArIGF0dHJpYnV0ZXMuam9pbignICcpKSA6ICcnLFxyXG4gICAgICAgICAgICBvcHRpb25zOiBzZWxlY3RPcHRpb25zXHJcbiAgICAgICAgfSkpO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5fY29udHJvbDtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQodCx0L7RgNC60LAg0L7Qv9GG0LjQuFxyXG4gICAgICogQHBhcmFtIG9wdGlvblxyXG4gICAgICogQHJldHVybiB7b2JqZWN0fVxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgX2J1aWxkT3B0aW9uKG9wdGlvbikge1xyXG5cclxuICAgICAgICBsZXQgb3B0aW9uQXR0ciA9IFtdO1xyXG4gICAgICAgIGxldCBvcHRpb25UZXh0ID0gb3B0aW9uLmhhc093blByb3BlcnR5KCd0ZXh0JykgJiYgWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2Yob3B0aW9uLnRleHQpKSA+PSAwXHJcbiAgICAgICAgICAgID8gb3B0aW9uLnRleHRcclxuICAgICAgICAgICAgOiAnJztcclxuXHJcbiAgICAgICAgJC5lYWNoKG9wdGlvbiwgZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XHJcbiAgICAgICAgICAgIGlmIChuYW1lICE9PSAndGV4dCcpIHtcclxuICAgICAgICAgICAgICAgIG9wdGlvbkF0dHIucHVzaChuYW1lICsgJz1cIicgKyB2YWx1ZSArICdcIicpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG5cclxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh0aGlzLl92YWx1ZSkpIHtcclxuICAgICAgICAgICAgJC5lYWNoKHRoaXMuX3ZhbHVlLCBmdW5jdGlvbiAoa2V5LCBpdGVtVmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIGlmIChpdGVtVmFsdWUgPT0gb3B0aW9uLnZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9uQXR0ci5wdXNoKCdzZWxlY3RlZD1cInNlbGVjdGVkXCInKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX3ZhbHVlID09IG9wdGlvbi52YWx1ZSkge1xyXG4gICAgICAgICAgICBvcHRpb25BdHRyLnB1c2goJ3NlbGVjdGVkPVwic2VsZWN0ZWRcIicpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgdHlwZTogJ29wdGlvbicsXHJcbiAgICAgICAgICAgIHRleHQ6IG9wdGlvblRleHQsXHJcbiAgICAgICAgICAgIGF0dHI6IG9wdGlvbkF0dHIubGVuZ3RoID4gMCA/ICgnICcgKyBvcHRpb25BdHRyLmpvaW4oJyAnKSkgOiAnJ1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IFNlYXJjaFNlbGVjdDsiLCJcclxuaW1wb3J0IGNvcmV1aVRhYmxlVHBsICAgZnJvbSBcIi4uL2NvcmV1aS50YWJsZS50ZW1wbGF0ZXNcIjtcclxuaW1wb3J0IGNvcmV1aVRhYmxlVXRpbHMgZnJvbSBcIi4uL2NvcmV1aS50YWJsZS51dGlsc1wiO1xyXG5pbXBvcnQgU2VhcmNoICAgICAgICAgICBmcm9tIFwiLi4vYWJzdHJhY3QvU2VhcmNoXCI7XHJcblxyXG5jbGFzcyBTZWFyY2hTd2l0Y2ggZXh0ZW5kcyBTZWFyY2gge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y9cclxuICAgICAqIEBwYXJhbSB7Y29yZXVpVGFibGVJbnN0YW5jZX0gdGFibGVcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSAgICAgICAgICAgICAgb3B0aW9uc1xyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3Rvcih0YWJsZSwgb3B0aW9ucykge1xyXG5cclxuICAgICAgICBvcHRpb25zID0gJC5leHRlbmQodHJ1ZSwge1xyXG4gICAgICAgICAgICBpZDogbnVsbCxcclxuICAgICAgICAgICAgdHlwZTogJ3N3aXRjaCcsXHJcbiAgICAgICAgICAgIGZpZWxkOiBudWxsLFxyXG4gICAgICAgICAgICB2YWx1ZTogbnVsbCxcclxuICAgICAgICAgICAgdmFsdWVZOiAxXHJcbiAgICAgICAgfSwgb3B0aW9ucyk7XHJcblxyXG4gICAgICAgIHN1cGVyKHRhYmxlLCBvcHRpb25zKTtcclxuXHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLnZhbHVlICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0VmFsdWUodGhpcy5fb3B0aW9ucy52YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCj0YHRgtCw0L3QvtCy0LrQsCDQt9C90LDRh9C10L3QuNGPXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ3xudW1iZXJ8bnVsbH0gdmFsdWVcclxuICAgICAqL1xyXG4gICAgc2V0VmFsdWUodmFsdWUpIHtcclxuXHJcbiAgICAgICAgaWYgKHZhbHVlICE9PSBudWxsICYmXHJcbiAgICAgICAgICAgIHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycgJiZcclxuICAgICAgICAgICAgdHlwZW9mIHZhbHVlICE9PSAnbnVtYmVyJ1xyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl92YWx1ZSA9IHZhbHVlXHJcblxyXG5cclxuICAgICAgICBpZiAodGhpcy5fY29udHJvbCkge1xyXG4gICAgICAgICAgICBsZXQgdmFsdWVZID0gdHlwZW9mIHRoaXMuX29wdGlvbnMudmFsdWVZID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgdGhpcy5fb3B0aW9ucy52YWx1ZVkgPT09ICdudW1iZXInXHJcbiAgICAgICAgICAgICAgICA/IHRoaXMuX29wdGlvbnMudmFsdWVZXHJcbiAgICAgICAgICAgICAgICA6ICcnXHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5fdmFsdWUgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICQoJ2lucHV0JywgdGhpcy5fY29udHJvbCkucHJvcCgnY2hlY2tlZCcsIGZhbHNlKTtcclxuXHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5fdmFsdWUgPT09IHZhbHVlWSkge1xyXG4gICAgICAgICAgICAgICAgJCgnaW5wdXQnLCB0aGlzLl9jb250cm9sKS5wcm9wKCdjaGVja2VkJywgdHJ1ZSk7XHJcblxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgJCgnaW5wdXQnLCB0aGlzLl9jb250cm9sKS5wcm9wKCdjaGVja2VkJywgZmFsc2UpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSDQt9C90LDRh9C10L3QuNGPXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfG51bGx9XHJcbiAgICAgKi9cclxuICAgIGdldFZhbHVlKCkge1xyXG5cclxuICAgICAgICBpZiAodGhpcy5fY29udHJvbCkge1xyXG4gICAgICAgICAgICBsZXQgdmFsdWUgPSAkKCdpbnB1dDpjaGVja2VkJywgdGhpcy5fY29udHJvbCkudmFsKCk7XHJcblxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnICYmIHZhbHVlICE9PSAnJykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5fdmFsdWU7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KTQuNC70YzRgtGA0LDRhtC40Y8g0LTQsNC90L3Ri9GFXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSAgICAgICAgICAgICAgZmllbGRWYWx1ZVxyXG4gICAgICogQHJldHVybnMge0FycmF5fHN0cmluZ3xudW1iZXJ9IHNlYXJjaFZhbHVlXHJcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICAgICAqL1xyXG4gICAgZmlsdGVyKGZpZWxkVmFsdWUsIHNlYXJjaFZhbHVlKSB7XHJcblxyXG4gICAgICAgIGlmIChbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiBmaWVsZFZhbHVlKSA8IDAgfHxcclxuICAgICAgICAgICAgWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2Ygc2VhcmNoVmFsdWUpIDwgMFxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gZmllbGRWYWx1ZS50b1N0cmluZygpLnRvTG93ZXJDYXNlKCkgPT09IHNlYXJjaFZhbHVlLnRvU3RyaW5nKCkudG9Mb3dlckNhc2UoKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQpNC+0YDQvNC40YDQvtCy0LDQvdC40LUg0LrQvtC90YLQtdC90YLQsFxyXG4gICAgICogQHJldHVybnMge3N0cmluZ31cclxuICAgICAqL1xyXG4gICAgcmVuZGVyKCkge1xyXG5cclxuICAgICAgICBsZXQgb3B0aW9ucyA9IHRoaXMuZ2V0T3B0aW9ucygpO1xyXG4gICAgICAgIGxldCB2YWx1ZVkgID0gdHlwZW9mIG9wdGlvbnMudmFsdWVZID09PSAnc3RyaW5nJyB8fCB0eXBlb2Ygb3B0aW9ucy52YWx1ZVkgPT09ICdudW1iZXInXHJcbiAgICAgICAgICAgID8gb3B0aW9ucy52YWx1ZVlcclxuICAgICAgICAgICAgOiAnJ1xyXG5cclxuICAgICAgICB0aGlzLl9jb250cm9sID0gJChjb3JldWlUYWJsZVV0aWxzLnJlbmRlcihjb3JldWlUYWJsZVRwbFsnc2VhcmNoL3N3aXRjaC5odG1sJ10sIHtcclxuICAgICAgICAgICAgaWQ6IHRoaXMuX2lkLFxyXG4gICAgICAgICAgICB2YWx1ZVk6IHZhbHVlWSxcclxuICAgICAgICAgICAgZmllbGQ6IHR5cGVvZiBvcHRpb25zLmZpZWxkID09PSAnc3RyaW5nJyA/IG9wdGlvbnMuZmllbGQgOiAnJyxcclxuICAgICAgICAgICAgY2hlY2tlZDogdGhpcy5fdmFsdWUgPT0gdmFsdWVZLFxyXG4gICAgICAgIH0pKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbnRyb2w7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IFNlYXJjaFN3aXRjaDsiLCJcclxuXHJcbmNsYXNzIENvbHVtbiB7XHJcblxyXG4gICAgX3RhYmxlICAgPSBudWxsO1xyXG4gICAgX29wdGlvbnMgPSB7XHJcbiAgICAgICAgdHlwZTogJycsXHJcbiAgICAgICAgZmllbGQ6IG51bGwsXHJcbiAgICAgICAgbGFiZWw6IG51bGwsXHJcbiAgICAgICAgc2hvdzogdHJ1ZSxcclxuICAgICAgICBzaG93TGFiZWw6IHRydWUsXHJcbiAgICAgICAgd2lkdGg6IG51bGwsXHJcbiAgICAgICAgbWluV2lkdGg6IG51bGwsXHJcbiAgICAgICAgbWF4V2lkdGg6IG51bGwsXHJcbiAgICAgICAgYXR0cjogbnVsbCxcclxuICAgICAgICBhdHRySGVhZGVyOiBudWxsLFxyXG4gICAgICAgIHJlbmRlcjogbnVsbFxyXG4gICAgfTtcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQmNC90LjRhtC40LDQu9C40LfQsNGG0LjRj1xyXG4gICAgICogQHBhcmFtIHtjb3JldWlUYWJsZUluc3RhbmNlfSB0YWJsZVxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9ICAgICAgICAgICAgICBvcHRpb25zXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKHRhYmxlLCBvcHRpb25zKSB7XHJcblxyXG4gICAgICAgIHRoaXMuX3RhYmxlICAgPSB0YWJsZTtcclxuICAgICAgICB0aGlzLl9vcHRpb25zID0gJC5leHRlbmQodHJ1ZSwgdGhpcy5fb3B0aW9ucywgb3B0aW9ucyk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KPRgdGC0LDQvdC+0LLQutCwINCy0LjQtNC40LzQvtGB0YLQuCDQutC+0LvQvtC90LrQuFxyXG4gICAgICogQHBhcmFtIHtib29sZWFufSBpc1Nob3dcclxuICAgICAqL1xyXG4gICAgc2V0U2hvdyhpc1Nob3cpIHtcclxuICAgICAgICB0aGlzLl9vcHRpb25zLnNob3cgPSAhISBpc1Nob3c7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0JLQuNC00LjQvNC+0YHRgtC4INC60L7Qu9C+0L3QutC4XHJcbiAgICAgKi9cclxuICAgIGlzU2hvdygpIHtcclxuICAgICAgICByZXR1cm4gISEgdGhpcy5fb3B0aW9ucy5zaG93O1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSDQv9Cw0YDQsNC80LXRgtGA0L7QslxyXG4gICAgICogQHJldHVybnMge29iamVjdH1cclxuICAgICAqL1xyXG4gICAgZ2V0T3B0aW9ucygpIHtcclxuICAgICAgICByZXR1cm4gJC5leHRlbmQoe30sIHRoaXMuX29wdGlvbnMpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSDQuNC80LXQvdC4INC/0L7Qu9GPXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfG51bGx9XHJcbiAgICAgKi9cclxuICAgIGdldEZpZWxkKCkge1xyXG4gICAgICAgIHJldHVybiB0eXBlb2YgdGhpcy5fb3B0aW9ucy5maWVsZCA9PT0gJ3N0cmluZycgPyB0aGlzLl9vcHRpb25zLmZpZWxkIDogbnVsbDtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQpNC+0YDQvNC40YDQvtCy0LDQvdC40LUg0LrQvtC90YLQtdC90YLQsFxyXG4gICAgICogQHBhcmFtIHsqfSAgICAgIGNvbnRlbnRcclxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSByZWNvcmRcclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIHJlbmRlcihjb250ZW50LCByZWNvcmQpIHt9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IENvbHVtbjsiLCJcclxuaW1wb3J0IENvbHVtbiAgICAgICAgICAgZnJvbSBcIi4uL2Fic3RyYWN0L0NvbHVtblwiO1xyXG5pbXBvcnQgY29yZXVpVGFibGVVdGlscyBmcm9tIFwiLi4vY29yZXVpLnRhYmxlLnV0aWxzXCI7XHJcblxyXG5cclxuY2xhc3MgQ29sdW1uc0RhdGUgZXh0ZW5kcyBDb2x1bW4ge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y9cclxuICAgICAqIEBwYXJhbSB7Y29yZXVpVGFibGVJbnN0YW5jZX0gdGFibGVcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSAgICAgICAgICAgICAgb3B0aW9uc1xyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3Rvcih0YWJsZSwgb3B0aW9ucykge1xyXG5cclxuICAgICAgICBvcHRpb25zID0gJC5leHRlbmQodHJ1ZSwge1xyXG4gICAgICAgICAgICB0eXBlOiAnZGF0ZScsXHJcbiAgICAgICAgICAgIGZpZWxkOiBudWxsLFxyXG4gICAgICAgICAgICBsYWJlbDogbnVsbCxcclxuICAgICAgICAgICAgc2hvdzogdHJ1ZSxcclxuICAgICAgICAgICAgd2lkdGg6IG51bGwsXHJcbiAgICAgICAgICAgIGZvcm1hdDogJ0RELk1NLllZWVknLFxyXG4gICAgICAgICAgICBhdHRyOiB7fSxcclxuICAgICAgICAgICAgYXR0ckhlYWRlcjoge30sXHJcbiAgICAgICAgICAgIHJlbmRlcjogbnVsbFxyXG4gICAgICAgIH0sIG9wdGlvbnMpO1xyXG5cclxuICAgICAgICBzdXBlcih0YWJsZSwgb3B0aW9ucyk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KTQvtGA0LzQuNGA0L7QstCw0L3QuNC1INC60L7QvdGC0LXQvdGC0LBcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjb250ZW50XHJcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gcmVjb3JkXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxyXG4gICAgICovXHJcbiAgICByZW5kZXIoY29udGVudCwgcmVjb3JkKSB7XHJcblxyXG4gICAgICAgIGlmICh0eXBlb2YgY29udGVudCAhPT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChjb250ZW50ICE9PSAnJykge1xyXG4gICAgICAgICAgICAgICAgbGV0IGxhbmcgPSB0aGlzLl90YWJsZS5nZXRMYW5nKClcclxuICAgICAgICAgICAgICAgIGxldCBkYXRlID0gbmV3IERhdGUoY29udGVudCk7XHJcblxyXG4gICAgICAgICAgICAgICAgY29udGVudCA9IHRoaXMuX29wdGlvbnMuZm9ybWF0XHJcbiAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL1lZWVkvZywgY29yZXVpVGFibGVVdGlscy5zdHJQYWRMZWZ0KGRhdGUuZ2V0RnVsbFllYXIoKSwgNCkpXHJcbiAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL01NTU0vZywgbGFuZy5tb250aE5hbWVzW2RhdGUuZ2V0TW9udGgoKSArIDFdKVxyXG4gICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9NTU0vZywgbGFuZy5tb250aE5hbWVzU2hvcnRbZGF0ZS5nZXRNb250aCgpICsgMV0pXHJcbiAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL01NL2csIGNvcmV1aVRhYmxlVXRpbHMuc3RyUGFkTGVmdChkYXRlLmdldE1vbnRoKCkgKyAxLCAyKSlcclxuICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvTS9nLCBkYXRlLmdldE1vbnRoKCkgKyAxKVxyXG4gICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9ERC9nLCBjb3JldWlUYWJsZVV0aWxzLnN0clBhZExlZnQoZGF0ZS5nZXREYXRlKCksIDIpKVxyXG4gICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9EL2csIGRhdGUuZ2V0RGF0ZSgpKVxyXG4gICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9kZGRkL2csIGxhbmcuZGF5TmFtZXNbZGF0ZS5nZXRNb250aCgpICsgMV0pXHJcbiAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL2RkZC9nLCBsYW5nLmRheU5hbWVzTWluW2RhdGUuZ2V0TW9udGgoKSArIDFdKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgIGNvbnRlbnQgPSAnJztcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICByZXR1cm4gY29udGVudDtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IENvbHVtbnNEYXRlOyIsIlxyXG5pbXBvcnQgQ29sdW1uICAgICAgICAgICBmcm9tIFwiLi4vYWJzdHJhY3QvQ29sdW1uXCI7XHJcbmltcG9ydCBjb3JldWlUYWJsZVV0aWxzIGZyb20gXCIuLi9jb3JldWkudGFibGUudXRpbHNcIjtcclxuXHJcblxyXG5jbGFzcyBDb2x1bW5zRGF0ZXRpbWUgZXh0ZW5kcyBDb2x1bW4ge1xyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPXHJcbiAgICAgKiBAcGFyYW0ge2NvcmV1aVRhYmxlSW5zdGFuY2V9IHRhYmxlXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gICAgICAgICAgICAgIG9wdGlvbnNcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IodGFibGUsIG9wdGlvbnMpIHtcclxuXHJcbiAgICAgICAgb3B0aW9ucyA9ICQuZXh0ZW5kKHRydWUsIHsgdHlwZTogJ2RhdGV0aW1lJyxcclxuICAgICAgICAgICAgZmllbGQ6IG51bGwsXHJcbiAgICAgICAgICAgIGxhYmVsOiBudWxsLFxyXG4gICAgICAgICAgICBzaG93OiB0cnVlLFxyXG4gICAgICAgICAgICB3aWR0aDogbnVsbCxcclxuICAgICAgICAgICAgZm9ybWF0OiAnREQuTU0uWVlZWSBoaDptbTpzcycsXHJcbiAgICAgICAgICAgIGF0dHI6IHt9LFxyXG4gICAgICAgICAgICBhdHRySGVhZGVyOiB7fSxcclxuICAgICAgICAgICAgcmVuZGVyOiBudWxsXHJcbiAgICAgICAgfSwgb3B0aW9ucyk7XHJcblxyXG4gICAgICAgIHN1cGVyKHRhYmxlLCBvcHRpb25zKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQpNC+0YDQvNC40YDQvtCy0LDQvdC40LUg0LrQvtC90YLQtdC90YLQsFxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGNvbnRlbnRcclxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSByZWNvcmRcclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIHJlbmRlcihjb250ZW50LCByZWNvcmQpIHtcclxuXHJcbiAgICAgICAgaWYgKHR5cGVvZiBjb250ZW50ICE9PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICByZXR1cm4gJyc7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBpZiAoY29udGVudCAhPT0gJycpIHtcclxuICAgICAgICAgICAgICAgIGxldCBsYW5nID0gdGhpcy5fdGFibGUuZ2V0TGFuZygpXHJcbiAgICAgICAgICAgICAgICBsZXQgZGF0ZSA9IG5ldyBEYXRlKGNvbnRlbnQpO1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnRlbnQgPSB0aGlzLl9vcHRpb25zLmZvcm1hdFxyXG4gICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9ZWVlZL2csIGNvcmV1aVRhYmxlVXRpbHMuc3RyUGFkTGVmdChkYXRlLmdldEZ1bGxZZWFyKCksIDQpKVxyXG4gICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9NTU1NL2csIGxhbmcubW9udGhOYW1lc1tkYXRlLmdldE1vbnRoKCkgKyAxXSlcclxuICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvTU1NL2csIGxhbmcubW9udGhOYW1lc1Nob3J0W2RhdGUuZ2V0TW9udGgoKSArIDFdKVxyXG4gICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9NTS9nLCBjb3JldWlUYWJsZVV0aWxzLnN0clBhZExlZnQoZGF0ZS5nZXRNb250aCgpICsgMSwgMikpXHJcbiAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL00vZywgZGF0ZS5nZXRNb250aCgpICsgMSlcclxuICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvREQvZywgY29yZXVpVGFibGVVdGlscy5zdHJQYWRMZWZ0KGRhdGUuZ2V0RGF0ZSgpLCAyKSlcclxuICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvRC9nLCBkYXRlLmdldERhdGUoKSlcclxuICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvZGRkZC9nLCBsYW5nLmRheU5hbWVzW2RhdGUuZ2V0TW9udGgoKSArIDFdKVxyXG4gICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9kZGQvZywgbGFuZy5kYXlOYW1lc01pbltkYXRlLmdldE1vbnRoKCkgKyAxXSlcclxuICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvaGgvZywgY29yZXVpVGFibGVVdGlscy5zdHJQYWRMZWZ0KGRhdGUuZ2V0SG91cnMoKSwgMikpXHJcbiAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL21tL2csIGNvcmV1aVRhYmxlVXRpbHMuc3RyUGFkTGVmdChkYXRlLmdldE1pbnV0ZXMoKSwgMikpXHJcbiAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL20vZywgZGF0ZS5nZXRNaW51dGVzKCkpXHJcbiAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL3NzL2csIGNvcmV1aVRhYmxlVXRpbHMuc3RyUGFkTGVmdChkYXRlLmdldFNlY29uZHMoKSwgMikpXHJcbiAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL3MvZywgZGF0ZS5nZXRTZWNvbmRzKCkpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgY29udGVudCA9ICcnO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGNvbnRlbnQ7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IENvbHVtbnNEYXRldGltZTsiLCIvLyEgbW9tZW50LmpzXG4vLyEgdmVyc2lvbiA6IDIuMzAuMVxuLy8hIGF1dGhvcnMgOiBUaW0gV29vZCwgSXNrcmVuIENoZXJuZXYsIE1vbWVudC5qcyBjb250cmlidXRvcnNcbi8vISBsaWNlbnNlIDogTUlUXG4vLyEgbW9tZW50anMuY29tXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyA/IG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpIDpcbiAgICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoZmFjdG9yeSkgOlxuICAgIGdsb2JhbC5tb21lbnQgPSBmYWN0b3J5KClcbn0odGhpcywgKGZ1bmN0aW9uICgpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgdmFyIGhvb2tDYWxsYmFjaztcblxuICAgIGZ1bmN0aW9uIGhvb2tzKCkge1xuICAgICAgICByZXR1cm4gaG9va0NhbGxiYWNrLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgfVxuXG4gICAgLy8gVGhpcyBpcyBkb25lIHRvIHJlZ2lzdGVyIHRoZSBtZXRob2QgY2FsbGVkIHdpdGggbW9tZW50KClcbiAgICAvLyB3aXRob3V0IGNyZWF0aW5nIGNpcmN1bGFyIGRlcGVuZGVuY2llcy5cbiAgICBmdW5jdGlvbiBzZXRIb29rQ2FsbGJhY2soY2FsbGJhY2spIHtcbiAgICAgICAgaG9va0NhbGxiYWNrID0gY2FsbGJhY2s7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNBcnJheShpbnB1dCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgaW5wdXQgaW5zdGFuY2VvZiBBcnJheSB8fFxuICAgICAgICAgICAgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGlucHV0KSA9PT0gJ1tvYmplY3QgQXJyYXldJ1xuICAgICAgICApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzT2JqZWN0KGlucHV0KSB7XG4gICAgICAgIC8vIElFOCB3aWxsIHRyZWF0IHVuZGVmaW5lZCBhbmQgbnVsbCBhcyBvYmplY3QgaWYgaXQgd2Fzbid0IGZvclxuICAgICAgICAvLyBpbnB1dCAhPSBudWxsXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICBpbnB1dCAhPSBudWxsICYmXG4gICAgICAgICAgICBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaW5wdXQpID09PSAnW29iamVjdCBPYmplY3RdJ1xuICAgICAgICApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGhhc093blByb3AoYSwgYikge1xuICAgICAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGEsIGIpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzT2JqZWN0RW1wdHkob2JqKSB7XG4gICAgICAgIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcykge1xuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKG9iaikubGVuZ3RoID09PSAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIGs7XG4gICAgICAgICAgICBmb3IgKGsgaW4gb2JqKSB7XG4gICAgICAgICAgICAgICAgaWYgKGhhc093blByb3Aob2JqLCBrKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc1VuZGVmaW5lZChpbnB1dCkge1xuICAgICAgICByZXR1cm4gaW5wdXQgPT09IHZvaWQgMDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc051bWJlcihpbnB1dCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgdHlwZW9mIGlucHV0ID09PSAnbnVtYmVyJyB8fFxuICAgICAgICAgICAgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGlucHV0KSA9PT0gJ1tvYmplY3QgTnVtYmVyXSdcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0RhdGUoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIGlucHV0IGluc3RhbmNlb2YgRGF0ZSB8fFxuICAgICAgICAgICAgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGlucHV0KSA9PT0gJ1tvYmplY3QgRGF0ZV0nXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWFwKGFyciwgZm4pIHtcbiAgICAgICAgdmFyIHJlcyA9IFtdLFxuICAgICAgICAgICAgaSxcbiAgICAgICAgICAgIGFyckxlbiA9IGFyci5sZW5ndGg7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBhcnJMZW47ICsraSkge1xuICAgICAgICAgICAgcmVzLnB1c2goZm4oYXJyW2ldLCBpKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBleHRlbmQoYSwgYikge1xuICAgICAgICBmb3IgKHZhciBpIGluIGIpIHtcbiAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wKGIsIGkpKSB7XG4gICAgICAgICAgICAgICAgYVtpXSA9IGJbaV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaGFzT3duUHJvcChiLCAndG9TdHJpbmcnKSkge1xuICAgICAgICAgICAgYS50b1N0cmluZyA9IGIudG9TdHJpbmc7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaGFzT3duUHJvcChiLCAndmFsdWVPZicpKSB7XG4gICAgICAgICAgICBhLnZhbHVlT2YgPSBiLnZhbHVlT2Y7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVVVEMoaW5wdXQsIGZvcm1hdCwgbG9jYWxlLCBzdHJpY3QpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUxvY2FsT3JVVEMoaW5wdXQsIGZvcm1hdCwgbG9jYWxlLCBzdHJpY3QsIHRydWUpLnV0YygpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRlZmF1bHRQYXJzaW5nRmxhZ3MoKSB7XG4gICAgICAgIC8vIFdlIG5lZWQgdG8gZGVlcCBjbG9uZSB0aGlzIG9iamVjdC5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGVtcHR5OiBmYWxzZSxcbiAgICAgICAgICAgIHVudXNlZFRva2VuczogW10sXG4gICAgICAgICAgICB1bnVzZWRJbnB1dDogW10sXG4gICAgICAgICAgICBvdmVyZmxvdzogLTIsXG4gICAgICAgICAgICBjaGFyc0xlZnRPdmVyOiAwLFxuICAgICAgICAgICAgbnVsbElucHV0OiBmYWxzZSxcbiAgICAgICAgICAgIGludmFsaWRFcmE6IG51bGwsXG4gICAgICAgICAgICBpbnZhbGlkTW9udGg6IG51bGwsXG4gICAgICAgICAgICBpbnZhbGlkRm9ybWF0OiBmYWxzZSxcbiAgICAgICAgICAgIHVzZXJJbnZhbGlkYXRlZDogZmFsc2UsXG4gICAgICAgICAgICBpc286IGZhbHNlLFxuICAgICAgICAgICAgcGFyc2VkRGF0ZVBhcnRzOiBbXSxcbiAgICAgICAgICAgIGVyYTogbnVsbCxcbiAgICAgICAgICAgIG1lcmlkaWVtOiBudWxsLFxuICAgICAgICAgICAgcmZjMjgyMjogZmFsc2UsXG4gICAgICAgICAgICB3ZWVrZGF5TWlzbWF0Y2g6IGZhbHNlLFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFBhcnNpbmdGbGFncyhtKSB7XG4gICAgICAgIGlmIChtLl9wZiA9PSBudWxsKSB7XG4gICAgICAgICAgICBtLl9wZiA9IGRlZmF1bHRQYXJzaW5nRmxhZ3MoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbS5fcGY7XG4gICAgfVxuXG4gICAgdmFyIHNvbWU7XG4gICAgaWYgKEFycmF5LnByb3RvdHlwZS5zb21lKSB7XG4gICAgICAgIHNvbWUgPSBBcnJheS5wcm90b3R5cGUuc29tZTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBzb21lID0gZnVuY3Rpb24gKGZ1bikge1xuICAgICAgICAgICAgdmFyIHQgPSBPYmplY3QodGhpcyksXG4gICAgICAgICAgICAgICAgbGVuID0gdC5sZW5ndGggPj4+IDAsXG4gICAgICAgICAgICAgICAgaTtcblxuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGkgaW4gdCAmJiBmdW4uY2FsbCh0aGlzLCB0W2ldLCBpLCB0KSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc1ZhbGlkKG0pIHtcbiAgICAgICAgdmFyIGZsYWdzID0gbnVsbCxcbiAgICAgICAgICAgIHBhcnNlZFBhcnRzID0gZmFsc2UsXG4gICAgICAgICAgICBpc05vd1ZhbGlkID0gbS5fZCAmJiAhaXNOYU4obS5fZC5nZXRUaW1lKCkpO1xuICAgICAgICBpZiAoaXNOb3dWYWxpZCkge1xuICAgICAgICAgICAgZmxhZ3MgPSBnZXRQYXJzaW5nRmxhZ3MobSk7XG4gICAgICAgICAgICBwYXJzZWRQYXJ0cyA9IHNvbWUuY2FsbChmbGFncy5wYXJzZWREYXRlUGFydHMsIGZ1bmN0aW9uIChpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGkgIT0gbnVsbDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaXNOb3dWYWxpZCA9XG4gICAgICAgICAgICAgICAgZmxhZ3Mub3ZlcmZsb3cgPCAwICYmXG4gICAgICAgICAgICAgICAgIWZsYWdzLmVtcHR5ICYmXG4gICAgICAgICAgICAgICAgIWZsYWdzLmludmFsaWRFcmEgJiZcbiAgICAgICAgICAgICAgICAhZmxhZ3MuaW52YWxpZE1vbnRoICYmXG4gICAgICAgICAgICAgICAgIWZsYWdzLmludmFsaWRXZWVrZGF5ICYmXG4gICAgICAgICAgICAgICAgIWZsYWdzLndlZWtkYXlNaXNtYXRjaCAmJlxuICAgICAgICAgICAgICAgICFmbGFncy5udWxsSW5wdXQgJiZcbiAgICAgICAgICAgICAgICAhZmxhZ3MuaW52YWxpZEZvcm1hdCAmJlxuICAgICAgICAgICAgICAgICFmbGFncy51c2VySW52YWxpZGF0ZWQgJiZcbiAgICAgICAgICAgICAgICAoIWZsYWdzLm1lcmlkaWVtIHx8IChmbGFncy5tZXJpZGllbSAmJiBwYXJzZWRQYXJ0cykpO1xuICAgICAgICAgICAgaWYgKG0uX3N0cmljdCkge1xuICAgICAgICAgICAgICAgIGlzTm93VmFsaWQgPVxuICAgICAgICAgICAgICAgICAgICBpc05vd1ZhbGlkICYmXG4gICAgICAgICAgICAgICAgICAgIGZsYWdzLmNoYXJzTGVmdE92ZXIgPT09IDAgJiZcbiAgICAgICAgICAgICAgICAgICAgZmxhZ3MudW51c2VkVG9rZW5zLmxlbmd0aCA9PT0gMCAmJlxuICAgICAgICAgICAgICAgICAgICBmbGFncy5iaWdIb3VyID09PSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKE9iamVjdC5pc0Zyb3plbiA9PSBudWxsIHx8ICFPYmplY3QuaXNGcm96ZW4obSkpIHtcbiAgICAgICAgICAgIG0uX2lzVmFsaWQgPSBpc05vd1ZhbGlkO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGlzTm93VmFsaWQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG0uX2lzVmFsaWQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlSW52YWxpZChmbGFncykge1xuICAgICAgICB2YXIgbSA9IGNyZWF0ZVVUQyhOYU4pO1xuICAgICAgICBpZiAoZmxhZ3MgIT0gbnVsbCkge1xuICAgICAgICAgICAgZXh0ZW5kKGdldFBhcnNpbmdGbGFncyhtKSwgZmxhZ3MpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKG0pLnVzZXJJbnZhbGlkYXRlZCA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbTtcbiAgICB9XG5cbiAgICAvLyBQbHVnaW5zIHRoYXQgYWRkIHByb3BlcnRpZXMgc2hvdWxkIGFsc28gYWRkIHRoZSBrZXkgaGVyZSAobnVsbCB2YWx1ZSksXG4gICAgLy8gc28gd2UgY2FuIHByb3Blcmx5IGNsb25lIG91cnNlbHZlcy5cbiAgICB2YXIgbW9tZW50UHJvcGVydGllcyA9IChob29rcy5tb21lbnRQcm9wZXJ0aWVzID0gW10pLFxuICAgICAgICB1cGRhdGVJblByb2dyZXNzID0gZmFsc2U7XG5cbiAgICBmdW5jdGlvbiBjb3B5Q29uZmlnKHRvLCBmcm9tKSB7XG4gICAgICAgIHZhciBpLFxuICAgICAgICAgICAgcHJvcCxcbiAgICAgICAgICAgIHZhbCxcbiAgICAgICAgICAgIG1vbWVudFByb3BlcnRpZXNMZW4gPSBtb21lbnRQcm9wZXJ0aWVzLmxlbmd0aDtcblxuICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20uX2lzQU1vbWVudE9iamVjdCkpIHtcbiAgICAgICAgICAgIHRvLl9pc0FNb21lbnRPYmplY3QgPSBmcm9tLl9pc0FNb21lbnRPYmplY3Q7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc1VuZGVmaW5lZChmcm9tLl9pKSkge1xuICAgICAgICAgICAgdG8uX2kgPSBmcm9tLl9pO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNVbmRlZmluZWQoZnJvbS5fZikpIHtcbiAgICAgICAgICAgIHRvLl9mID0gZnJvbS5fZjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20uX2wpKSB7XG4gICAgICAgICAgICB0by5fbCA9IGZyb20uX2w7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc1VuZGVmaW5lZChmcm9tLl9zdHJpY3QpKSB7XG4gICAgICAgICAgICB0by5fc3RyaWN0ID0gZnJvbS5fc3RyaWN0O1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNVbmRlZmluZWQoZnJvbS5fdHptKSkge1xuICAgICAgICAgICAgdG8uX3R6bSA9IGZyb20uX3R6bTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20uX2lzVVRDKSkge1xuICAgICAgICAgICAgdG8uX2lzVVRDID0gZnJvbS5faXNVVEM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc1VuZGVmaW5lZChmcm9tLl9vZmZzZXQpKSB7XG4gICAgICAgICAgICB0by5fb2Zmc2V0ID0gZnJvbS5fb2Zmc2V0O1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNVbmRlZmluZWQoZnJvbS5fcGYpKSB7XG4gICAgICAgICAgICB0by5fcGYgPSBnZXRQYXJzaW5nRmxhZ3MoZnJvbSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc1VuZGVmaW5lZChmcm9tLl9sb2NhbGUpKSB7XG4gICAgICAgICAgICB0by5fbG9jYWxlID0gZnJvbS5fbG9jYWxlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG1vbWVudFByb3BlcnRpZXNMZW4gPiAwKSB7XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbW9tZW50UHJvcGVydGllc0xlbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgcHJvcCA9IG1vbWVudFByb3BlcnRpZXNbaV07XG4gICAgICAgICAgICAgICAgdmFsID0gZnJvbVtwcm9wXTtcbiAgICAgICAgICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKHZhbCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdG9bcHJvcF0gPSB2YWw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRvO1xuICAgIH1cblxuICAgIC8vIE1vbWVudCBwcm90b3R5cGUgb2JqZWN0XG4gICAgZnVuY3Rpb24gTW9tZW50KGNvbmZpZykge1xuICAgICAgICBjb3B5Q29uZmlnKHRoaXMsIGNvbmZpZyk7XG4gICAgICAgIHRoaXMuX2QgPSBuZXcgRGF0ZShjb25maWcuX2QgIT0gbnVsbCA/IGNvbmZpZy5fZC5nZXRUaW1lKCkgOiBOYU4pO1xuICAgICAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICB0aGlzLl9kID0gbmV3IERhdGUoTmFOKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBQcmV2ZW50IGluZmluaXRlIGxvb3AgaW4gY2FzZSB1cGRhdGVPZmZzZXQgY3JlYXRlcyBuZXcgbW9tZW50XG4gICAgICAgIC8vIG9iamVjdHMuXG4gICAgICAgIGlmICh1cGRhdGVJblByb2dyZXNzID09PSBmYWxzZSkge1xuICAgICAgICAgICAgdXBkYXRlSW5Qcm9ncmVzcyA9IHRydWU7XG4gICAgICAgICAgICBob29rcy51cGRhdGVPZmZzZXQodGhpcyk7XG4gICAgICAgICAgICB1cGRhdGVJblByb2dyZXNzID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc01vbWVudChvYmopIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIG9iaiBpbnN0YW5jZW9mIE1vbWVudCB8fCAob2JqICE9IG51bGwgJiYgb2JqLl9pc0FNb21lbnRPYmplY3QgIT0gbnVsbClcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB3YXJuKG1zZykge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgICBob29rcy5zdXBwcmVzc0RlcHJlY2F0aW9uV2FybmluZ3MgPT09IGZhbHNlICYmXG4gICAgICAgICAgICB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgICAgIGNvbnNvbGUud2FyblxuICAgICAgICApIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybignRGVwcmVjYXRpb24gd2FybmluZzogJyArIG1zZyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkZXByZWNhdGUobXNnLCBmbikge1xuICAgICAgICB2YXIgZmlyc3RUaW1lID0gdHJ1ZTtcblxuICAgICAgICByZXR1cm4gZXh0ZW5kKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChob29rcy5kZXByZWNhdGlvbkhhbmRsZXIgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGhvb2tzLmRlcHJlY2F0aW9uSGFuZGxlcihudWxsLCBtc2cpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGZpcnN0VGltZSkge1xuICAgICAgICAgICAgICAgIHZhciBhcmdzID0gW10sXG4gICAgICAgICAgICAgICAgICAgIGFyZyxcbiAgICAgICAgICAgICAgICAgICAgaSxcbiAgICAgICAgICAgICAgICAgICAga2V5LFxuICAgICAgICAgICAgICAgICAgICBhcmdMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBhcmdMZW47IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBhcmcgPSAnJztcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBhcmd1bWVudHNbaV0gPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmcgKz0gJ1xcblsnICsgaSArICddICc7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGtleSBpbiBhcmd1bWVudHNbMF0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaGFzT3duUHJvcChhcmd1bWVudHNbMF0sIGtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJnICs9IGtleSArICc6ICcgKyBhcmd1bWVudHNbMF1ba2V5XSArICcsICc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYXJnID0gYXJnLnNsaWNlKDAsIC0yKTsgLy8gUmVtb3ZlIHRyYWlsaW5nIGNvbW1hIGFuZCBzcGFjZVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXJnID0gYXJndW1lbnRzW2ldO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGFyZ3MucHVzaChhcmcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgICAgICAgICBtc2cgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJ1xcbkFyZ3VtZW50czogJyArXG4gICAgICAgICAgICAgICAgICAgICAgICBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmdzKS5qb2luKCcnKSArXG4gICAgICAgICAgICAgICAgICAgICAgICAnXFxuJyArXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXcgRXJyb3IoKS5zdGFja1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgZmlyc3RUaW1lID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgfSwgZm4pO1xuICAgIH1cblxuICAgIHZhciBkZXByZWNhdGlvbnMgPSB7fTtcblxuICAgIGZ1bmN0aW9uIGRlcHJlY2F0ZVNpbXBsZShuYW1lLCBtc2cpIHtcbiAgICAgICAgaWYgKGhvb2tzLmRlcHJlY2F0aW9uSGFuZGxlciAhPSBudWxsKSB7XG4gICAgICAgICAgICBob29rcy5kZXByZWNhdGlvbkhhbmRsZXIobmFtZSwgbXNnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWRlcHJlY2F0aW9uc1tuYW1lXSkge1xuICAgICAgICAgICAgd2Fybihtc2cpO1xuICAgICAgICAgICAgZGVwcmVjYXRpb25zW25hbWVdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGhvb2tzLnN1cHByZXNzRGVwcmVjYXRpb25XYXJuaW5ncyA9IGZhbHNlO1xuICAgIGhvb2tzLmRlcHJlY2F0aW9uSGFuZGxlciA9IG51bGw7XG5cbiAgICBmdW5jdGlvbiBpc0Z1bmN0aW9uKGlucHV0KSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAodHlwZW9mIEZ1bmN0aW9uICE9PSAndW5kZWZpbmVkJyAmJiBpbnB1dCBpbnN0YW5jZW9mIEZ1bmN0aW9uKSB8fFxuICAgICAgICAgICAgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGlucHV0KSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJ1xuICAgICAgICApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldChjb25maWcpIHtcbiAgICAgICAgdmFyIHByb3AsIGk7XG4gICAgICAgIGZvciAoaSBpbiBjb25maWcpIHtcbiAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wKGNvbmZpZywgaSkpIHtcbiAgICAgICAgICAgICAgICBwcm9wID0gY29uZmlnW2ldO1xuICAgICAgICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKHByb3ApKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXNbaV0gPSBwcm9wO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXNbJ18nICsgaV0gPSBwcm9wO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9jb25maWcgPSBjb25maWc7XG4gICAgICAgIC8vIExlbmllbnQgb3JkaW5hbCBwYXJzaW5nIGFjY2VwdHMganVzdCBhIG51bWJlciBpbiBhZGRpdGlvbiB0b1xuICAgICAgICAvLyBudW1iZXIgKyAocG9zc2libHkpIHN0dWZmIGNvbWluZyBmcm9tIF9kYXlPZk1vbnRoT3JkaW5hbFBhcnNlLlxuICAgICAgICAvLyBUT0RPOiBSZW1vdmUgXCJvcmRpbmFsUGFyc2VcIiBmYWxsYmFjayBpbiBuZXh0IG1ham9yIHJlbGVhc2UuXG4gICAgICAgIHRoaXMuX2RheU9mTW9udGhPcmRpbmFsUGFyc2VMZW5pZW50ID0gbmV3IFJlZ0V4cChcbiAgICAgICAgICAgICh0aGlzLl9kYXlPZk1vbnRoT3JkaW5hbFBhcnNlLnNvdXJjZSB8fCB0aGlzLl9vcmRpbmFsUGFyc2Uuc291cmNlKSArXG4gICAgICAgICAgICAgICAgJ3wnICtcbiAgICAgICAgICAgICAgICAvXFxkezEsMn0vLnNvdXJjZVxuICAgICAgICApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1lcmdlQ29uZmlncyhwYXJlbnRDb25maWcsIGNoaWxkQ29uZmlnKSB7XG4gICAgICAgIHZhciByZXMgPSBleHRlbmQoe30sIHBhcmVudENvbmZpZyksXG4gICAgICAgICAgICBwcm9wO1xuICAgICAgICBmb3IgKHByb3AgaW4gY2hpbGRDb25maWcpIHtcbiAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wKGNoaWxkQ29uZmlnLCBwcm9wKSkge1xuICAgICAgICAgICAgICAgIGlmIChpc09iamVjdChwYXJlbnRDb25maWdbcHJvcF0pICYmIGlzT2JqZWN0KGNoaWxkQ29uZmlnW3Byb3BdKSkge1xuICAgICAgICAgICAgICAgICAgICByZXNbcHJvcF0gPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgZXh0ZW5kKHJlc1twcm9wXSwgcGFyZW50Q29uZmlnW3Byb3BdKTtcbiAgICAgICAgICAgICAgICAgICAgZXh0ZW5kKHJlc1twcm9wXSwgY2hpbGRDb25maWdbcHJvcF0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY2hpbGRDb25maWdbcHJvcF0gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICByZXNbcHJvcF0gPSBjaGlsZENvbmZpZ1twcm9wXTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgcmVzW3Byb3BdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmb3IgKHByb3AgaW4gcGFyZW50Q29uZmlnKSB7XG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgaGFzT3duUHJvcChwYXJlbnRDb25maWcsIHByb3ApICYmXG4gICAgICAgICAgICAgICAgIWhhc093blByb3AoY2hpbGRDb25maWcsIHByb3ApICYmXG4gICAgICAgICAgICAgICAgaXNPYmplY3QocGFyZW50Q29uZmlnW3Byb3BdKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgLy8gbWFrZSBzdXJlIGNoYW5nZXMgdG8gcHJvcGVydGllcyBkb24ndCBtb2RpZnkgcGFyZW50IGNvbmZpZ1xuICAgICAgICAgICAgICAgIHJlc1twcm9wXSA9IGV4dGVuZCh7fSwgcmVzW3Byb3BdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIExvY2FsZShjb25maWcpIHtcbiAgICAgICAgaWYgKGNvbmZpZyAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLnNldChjb25maWcpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGtleXM7XG5cbiAgICBpZiAoT2JqZWN0LmtleXMpIHtcbiAgICAgICAga2V5cyA9IE9iamVjdC5rZXlzO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGtleXMgPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgICAgICB2YXIgaSxcbiAgICAgICAgICAgICAgICByZXMgPSBbXTtcbiAgICAgICAgICAgIGZvciAoaSBpbiBvYmopIHtcbiAgICAgICAgICAgICAgICBpZiAoaGFzT3duUHJvcChvYmosIGkpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlcy5wdXNoKGkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgdmFyIGRlZmF1bHRDYWxlbmRhciA9IHtcbiAgICAgICAgc2FtZURheTogJ1tUb2RheSBhdF0gTFQnLFxuICAgICAgICBuZXh0RGF5OiAnW1RvbW9ycm93IGF0XSBMVCcsXG4gICAgICAgIG5leHRXZWVrOiAnZGRkZCBbYXRdIExUJyxcbiAgICAgICAgbGFzdERheTogJ1tZZXN0ZXJkYXkgYXRdIExUJyxcbiAgICAgICAgbGFzdFdlZWs6ICdbTGFzdF0gZGRkZCBbYXRdIExUJyxcbiAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gY2FsZW5kYXIoa2V5LCBtb20sIG5vdykge1xuICAgICAgICB2YXIgb3V0cHV0ID0gdGhpcy5fY2FsZW5kYXJba2V5XSB8fCB0aGlzLl9jYWxlbmRhclsnc2FtZUVsc2UnXTtcbiAgICAgICAgcmV0dXJuIGlzRnVuY3Rpb24ob3V0cHV0KSA/IG91dHB1dC5jYWxsKG1vbSwgbm93KSA6IG91dHB1dDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB6ZXJvRmlsbChudW1iZXIsIHRhcmdldExlbmd0aCwgZm9yY2VTaWduKSB7XG4gICAgICAgIHZhciBhYnNOdW1iZXIgPSAnJyArIE1hdGguYWJzKG51bWJlciksXG4gICAgICAgICAgICB6ZXJvc1RvRmlsbCA9IHRhcmdldExlbmd0aCAtIGFic051bWJlci5sZW5ndGgsXG4gICAgICAgICAgICBzaWduID0gbnVtYmVyID49IDA7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAoc2lnbiA/IChmb3JjZVNpZ24gPyAnKycgOiAnJykgOiAnLScpICtcbiAgICAgICAgICAgIE1hdGgucG93KDEwLCBNYXRoLm1heCgwLCB6ZXJvc1RvRmlsbCkpLnRvU3RyaW5nKCkuc3Vic3RyKDEpICtcbiAgICAgICAgICAgIGFic051bWJlclxuICAgICAgICApO1xuICAgIH1cblxuICAgIHZhciBmb3JtYXR0aW5nVG9rZW5zID1cbiAgICAgICAgICAgIC8oXFxbW15cXFtdKlxcXSl8KFxcXFwpPyhbSGhdbW0oc3MpP3xNb3xNTT9NP00/fERvfERERG98REQ/RD9EP3xkZGQ/ZD98ZG8/fHdbb3x3XT98V1tvfFddP3xRbz98TnsxLDV9fFlZWVlZWXxZWVlZWXxZWVlZfFlZfHl7Miw0fXx5bz98Z2coZ2dnPyk/fEdHKEdHRz8pP3xlfEV8YXxBfGhoP3xISD98a2s/fG1tP3xzcz98U3sxLDl9fHh8WHx6ej98Wlo/fC4pL2csXG4gICAgICAgIGxvY2FsRm9ybWF0dGluZ1Rva2VucyA9IC8oXFxbW15cXFtdKlxcXSl8KFxcXFwpPyhMVFN8TFR8TEw/TD9MP3xsezEsNH0pL2csXG4gICAgICAgIGZvcm1hdEZ1bmN0aW9ucyA9IHt9LFxuICAgICAgICBmb3JtYXRUb2tlbkZ1bmN0aW9ucyA9IHt9O1xuXG4gICAgLy8gdG9rZW46ICAgICdNJ1xuICAgIC8vIHBhZGRlZDogICBbJ01NJywgMl1cbiAgICAvLyBvcmRpbmFsOiAgJ01vJ1xuICAgIC8vIGNhbGxiYWNrOiBmdW5jdGlvbiAoKSB7IHRoaXMubW9udGgoKSArIDEgfVxuICAgIGZ1bmN0aW9uIGFkZEZvcm1hdFRva2VuKHRva2VuLCBwYWRkZWQsIG9yZGluYWwsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBmdW5jID0gY2FsbGJhY2s7XG4gICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBmdW5jID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzW2NhbGxiYWNrXSgpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodG9rZW4pIHtcbiAgICAgICAgICAgIGZvcm1hdFRva2VuRnVuY3Rpb25zW3Rva2VuXSA9IGZ1bmM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhZGRlZCkge1xuICAgICAgICAgICAgZm9ybWF0VG9rZW5GdW5jdGlvbnNbcGFkZGVkWzBdXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gemVyb0ZpbGwoZnVuYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpLCBwYWRkZWRbMV0sIHBhZGRlZFsyXSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcmRpbmFsKSB7XG4gICAgICAgICAgICBmb3JtYXRUb2tlbkZ1bmN0aW9uc1tvcmRpbmFsXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkub3JkaW5hbChcbiAgICAgICAgICAgICAgICAgICAgZnVuYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpLFxuICAgICAgICAgICAgICAgICAgICB0b2tlblxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVtb3ZlRm9ybWF0dGluZ1Rva2VucyhpbnB1dCkge1xuICAgICAgICBpZiAoaW5wdXQubWF0Y2goL1xcW1tcXHNcXFNdLykpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dC5yZXBsYWNlKC9eXFxbfFxcXSQvZywgJycpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpbnB1dC5yZXBsYWNlKC9cXFxcL2csICcnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtYWtlRm9ybWF0RnVuY3Rpb24oZm9ybWF0KSB7XG4gICAgICAgIHZhciBhcnJheSA9IGZvcm1hdC5tYXRjaChmb3JtYXR0aW5nVG9rZW5zKSxcbiAgICAgICAgICAgIGksXG4gICAgICAgICAgICBsZW5ndGg7XG5cbiAgICAgICAgZm9yIChpID0gMCwgbGVuZ3RoID0gYXJyYXkubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChmb3JtYXRUb2tlbkZ1bmN0aW9uc1thcnJheVtpXV0pIHtcbiAgICAgICAgICAgICAgICBhcnJheVtpXSA9IGZvcm1hdFRva2VuRnVuY3Rpb25zW2FycmF5W2ldXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYXJyYXlbaV0gPSByZW1vdmVGb3JtYXR0aW5nVG9rZW5zKGFycmF5W2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAobW9tKSB7XG4gICAgICAgICAgICB2YXIgb3V0cHV0ID0gJycsXG4gICAgICAgICAgICAgICAgaTtcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIG91dHB1dCArPSBpc0Z1bmN0aW9uKGFycmF5W2ldKVxuICAgICAgICAgICAgICAgICAgICA/IGFycmF5W2ldLmNhbGwobW9tLCBmb3JtYXQpXG4gICAgICAgICAgICAgICAgICAgIDogYXJyYXlbaV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gb3V0cHV0O1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8vIGZvcm1hdCBkYXRlIHVzaW5nIG5hdGl2ZSBkYXRlIG9iamVjdFxuICAgIGZ1bmN0aW9uIGZvcm1hdE1vbWVudChtLCBmb3JtYXQpIHtcbiAgICAgICAgaWYgKCFtLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIG0ubG9jYWxlRGF0YSgpLmludmFsaWREYXRlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBmb3JtYXQgPSBleHBhbmRGb3JtYXQoZm9ybWF0LCBtLmxvY2FsZURhdGEoKSk7XG4gICAgICAgIGZvcm1hdEZ1bmN0aW9uc1tmb3JtYXRdID1cbiAgICAgICAgICAgIGZvcm1hdEZ1bmN0aW9uc1tmb3JtYXRdIHx8IG1ha2VGb3JtYXRGdW5jdGlvbihmb3JtYXQpO1xuXG4gICAgICAgIHJldHVybiBmb3JtYXRGdW5jdGlvbnNbZm9ybWF0XShtKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBleHBhbmRGb3JtYXQoZm9ybWF0LCBsb2NhbGUpIHtcbiAgICAgICAgdmFyIGkgPSA1O1xuXG4gICAgICAgIGZ1bmN0aW9uIHJlcGxhY2VMb25nRGF0ZUZvcm1hdFRva2VucyhpbnB1dCkge1xuICAgICAgICAgICAgcmV0dXJuIGxvY2FsZS5sb25nRGF0ZUZvcm1hdChpbnB1dCkgfHwgaW5wdXQ7XG4gICAgICAgIH1cblxuICAgICAgICBsb2NhbEZvcm1hdHRpbmdUb2tlbnMubGFzdEluZGV4ID0gMDtcbiAgICAgICAgd2hpbGUgKGkgPj0gMCAmJiBsb2NhbEZvcm1hdHRpbmdUb2tlbnMudGVzdChmb3JtYXQpKSB7XG4gICAgICAgICAgICBmb3JtYXQgPSBmb3JtYXQucmVwbGFjZShcbiAgICAgICAgICAgICAgICBsb2NhbEZvcm1hdHRpbmdUb2tlbnMsXG4gICAgICAgICAgICAgICAgcmVwbGFjZUxvbmdEYXRlRm9ybWF0VG9rZW5zXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgbG9jYWxGb3JtYXR0aW5nVG9rZW5zLmxhc3RJbmRleCA9IDA7XG4gICAgICAgICAgICBpIC09IDE7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZm9ybWF0O1xuICAgIH1cblxuICAgIHZhciBkZWZhdWx0TG9uZ0RhdGVGb3JtYXQgPSB7XG4gICAgICAgIExUUzogJ2g6bW06c3MgQScsXG4gICAgICAgIExUOiAnaDptbSBBJyxcbiAgICAgICAgTDogJ01NL0REL1lZWVknLFxuICAgICAgICBMTDogJ01NTU0gRCwgWVlZWScsXG4gICAgICAgIExMTDogJ01NTU0gRCwgWVlZWSBoOm1tIEEnLFxuICAgICAgICBMTExMOiAnZGRkZCwgTU1NTSBELCBZWVlZIGg6bW0gQScsXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGxvbmdEYXRlRm9ybWF0KGtleSkge1xuICAgICAgICB2YXIgZm9ybWF0ID0gdGhpcy5fbG9uZ0RhdGVGb3JtYXRba2V5XSxcbiAgICAgICAgICAgIGZvcm1hdFVwcGVyID0gdGhpcy5fbG9uZ0RhdGVGb3JtYXRba2V5LnRvVXBwZXJDYXNlKCldO1xuXG4gICAgICAgIGlmIChmb3JtYXQgfHwgIWZvcm1hdFVwcGVyKSB7XG4gICAgICAgICAgICByZXR1cm4gZm9ybWF0O1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fbG9uZ0RhdGVGb3JtYXRba2V5XSA9IGZvcm1hdFVwcGVyXG4gICAgICAgICAgICAubWF0Y2goZm9ybWF0dGluZ1Rva2VucylcbiAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24gKHRvaykge1xuICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgdG9rID09PSAnTU1NTScgfHxcbiAgICAgICAgICAgICAgICAgICAgdG9rID09PSAnTU0nIHx8XG4gICAgICAgICAgICAgICAgICAgIHRvayA9PT0gJ0REJyB8fFxuICAgICAgICAgICAgICAgICAgICB0b2sgPT09ICdkZGRkJ1xuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdG9rLnNsaWNlKDEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdG9rO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5qb2luKCcnKTtcblxuICAgICAgICByZXR1cm4gdGhpcy5fbG9uZ0RhdGVGb3JtYXRba2V5XTtcbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdEludmFsaWREYXRlID0gJ0ludmFsaWQgZGF0ZSc7XG5cbiAgICBmdW5jdGlvbiBpbnZhbGlkRGF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ludmFsaWREYXRlO1xuICAgIH1cblxuICAgIHZhciBkZWZhdWx0T3JkaW5hbCA9ICclZCcsXG4gICAgICAgIGRlZmF1bHREYXlPZk1vbnRoT3JkaW5hbFBhcnNlID0gL1xcZHsxLDJ9LztcblxuICAgIGZ1bmN0aW9uIG9yZGluYWwobnVtYmVyKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9vcmRpbmFsLnJlcGxhY2UoJyVkJywgbnVtYmVyKTtcbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdFJlbGF0aXZlVGltZSA9IHtcbiAgICAgICAgZnV0dXJlOiAnaW4gJXMnLFxuICAgICAgICBwYXN0OiAnJXMgYWdvJyxcbiAgICAgICAgczogJ2EgZmV3IHNlY29uZHMnLFxuICAgICAgICBzczogJyVkIHNlY29uZHMnLFxuICAgICAgICBtOiAnYSBtaW51dGUnLFxuICAgICAgICBtbTogJyVkIG1pbnV0ZXMnLFxuICAgICAgICBoOiAnYW4gaG91cicsXG4gICAgICAgIGhoOiAnJWQgaG91cnMnLFxuICAgICAgICBkOiAnYSBkYXknLFxuICAgICAgICBkZDogJyVkIGRheXMnLFxuICAgICAgICB3OiAnYSB3ZWVrJyxcbiAgICAgICAgd3c6ICclZCB3ZWVrcycsXG4gICAgICAgIE06ICdhIG1vbnRoJyxcbiAgICAgICAgTU06ICclZCBtb250aHMnLFxuICAgICAgICB5OiAnYSB5ZWFyJyxcbiAgICAgICAgeXk6ICclZCB5ZWFycycsXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIHJlbGF0aXZlVGltZShudW1iZXIsIHdpdGhvdXRTdWZmaXgsIHN0cmluZywgaXNGdXR1cmUpIHtcbiAgICAgICAgdmFyIG91dHB1dCA9IHRoaXMuX3JlbGF0aXZlVGltZVtzdHJpbmddO1xuICAgICAgICByZXR1cm4gaXNGdW5jdGlvbihvdXRwdXQpXG4gICAgICAgICAgICA/IG91dHB1dChudW1iZXIsIHdpdGhvdXRTdWZmaXgsIHN0cmluZywgaXNGdXR1cmUpXG4gICAgICAgICAgICA6IG91dHB1dC5yZXBsYWNlKC8lZC9pLCBudW1iZXIpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBhc3RGdXR1cmUoZGlmZiwgb3V0cHV0KSB7XG4gICAgICAgIHZhciBmb3JtYXQgPSB0aGlzLl9yZWxhdGl2ZVRpbWVbZGlmZiA+IDAgPyAnZnV0dXJlJyA6ICdwYXN0J107XG4gICAgICAgIHJldHVybiBpc0Z1bmN0aW9uKGZvcm1hdCkgPyBmb3JtYXQob3V0cHV0KSA6IGZvcm1hdC5yZXBsYWNlKC8lcy9pLCBvdXRwdXQpO1xuICAgIH1cblxuICAgIHZhciBhbGlhc2VzID0ge1xuICAgICAgICBEOiAnZGF0ZScsXG4gICAgICAgIGRhdGVzOiAnZGF0ZScsXG4gICAgICAgIGRhdGU6ICdkYXRlJyxcbiAgICAgICAgZDogJ2RheScsXG4gICAgICAgIGRheXM6ICdkYXknLFxuICAgICAgICBkYXk6ICdkYXknLFxuICAgICAgICBlOiAnd2Vla2RheScsXG4gICAgICAgIHdlZWtkYXlzOiAnd2Vla2RheScsXG4gICAgICAgIHdlZWtkYXk6ICd3ZWVrZGF5JyxcbiAgICAgICAgRTogJ2lzb1dlZWtkYXknLFxuICAgICAgICBpc293ZWVrZGF5czogJ2lzb1dlZWtkYXknLFxuICAgICAgICBpc293ZWVrZGF5OiAnaXNvV2Vla2RheScsXG4gICAgICAgIERERDogJ2RheU9mWWVhcicsXG4gICAgICAgIGRheW9meWVhcnM6ICdkYXlPZlllYXInLFxuICAgICAgICBkYXlvZnllYXI6ICdkYXlPZlllYXInLFxuICAgICAgICBoOiAnaG91cicsXG4gICAgICAgIGhvdXJzOiAnaG91cicsXG4gICAgICAgIGhvdXI6ICdob3VyJyxcbiAgICAgICAgbXM6ICdtaWxsaXNlY29uZCcsXG4gICAgICAgIG1pbGxpc2Vjb25kczogJ21pbGxpc2Vjb25kJyxcbiAgICAgICAgbWlsbGlzZWNvbmQ6ICdtaWxsaXNlY29uZCcsXG4gICAgICAgIG06ICdtaW51dGUnLFxuICAgICAgICBtaW51dGVzOiAnbWludXRlJyxcbiAgICAgICAgbWludXRlOiAnbWludXRlJyxcbiAgICAgICAgTTogJ21vbnRoJyxcbiAgICAgICAgbW9udGhzOiAnbW9udGgnLFxuICAgICAgICBtb250aDogJ21vbnRoJyxcbiAgICAgICAgUTogJ3F1YXJ0ZXInLFxuICAgICAgICBxdWFydGVyczogJ3F1YXJ0ZXInLFxuICAgICAgICBxdWFydGVyOiAncXVhcnRlcicsXG4gICAgICAgIHM6ICdzZWNvbmQnLFxuICAgICAgICBzZWNvbmRzOiAnc2Vjb25kJyxcbiAgICAgICAgc2Vjb25kOiAnc2Vjb25kJyxcbiAgICAgICAgZ2c6ICd3ZWVrWWVhcicsXG4gICAgICAgIHdlZWt5ZWFyczogJ3dlZWtZZWFyJyxcbiAgICAgICAgd2Vla3llYXI6ICd3ZWVrWWVhcicsXG4gICAgICAgIEdHOiAnaXNvV2Vla1llYXInLFxuICAgICAgICBpc293ZWVreWVhcnM6ICdpc29XZWVrWWVhcicsXG4gICAgICAgIGlzb3dlZWt5ZWFyOiAnaXNvV2Vla1llYXInLFxuICAgICAgICB3OiAnd2VlaycsXG4gICAgICAgIHdlZWtzOiAnd2VlaycsXG4gICAgICAgIHdlZWs6ICd3ZWVrJyxcbiAgICAgICAgVzogJ2lzb1dlZWsnLFxuICAgICAgICBpc293ZWVrczogJ2lzb1dlZWsnLFxuICAgICAgICBpc293ZWVrOiAnaXNvV2VlaycsXG4gICAgICAgIHk6ICd5ZWFyJyxcbiAgICAgICAgeWVhcnM6ICd5ZWFyJyxcbiAgICAgICAgeWVhcjogJ3llYXInLFxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBub3JtYWxpemVVbml0cyh1bml0cykge1xuICAgICAgICByZXR1cm4gdHlwZW9mIHVuaXRzID09PSAnc3RyaW5nJ1xuICAgICAgICAgICAgPyBhbGlhc2VzW3VuaXRzXSB8fCBhbGlhc2VzW3VuaXRzLnRvTG93ZXJDYXNlKCldXG4gICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBub3JtYWxpemVPYmplY3RVbml0cyhpbnB1dE9iamVjdCkge1xuICAgICAgICB2YXIgbm9ybWFsaXplZElucHV0ID0ge30sXG4gICAgICAgICAgICBub3JtYWxpemVkUHJvcCxcbiAgICAgICAgICAgIHByb3A7XG5cbiAgICAgICAgZm9yIChwcm9wIGluIGlucHV0T2JqZWN0KSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duUHJvcChpbnB1dE9iamVjdCwgcHJvcCkpIHtcbiAgICAgICAgICAgICAgICBub3JtYWxpemVkUHJvcCA9IG5vcm1hbGl6ZVVuaXRzKHByb3ApO1xuICAgICAgICAgICAgICAgIGlmIChub3JtYWxpemVkUHJvcCkge1xuICAgICAgICAgICAgICAgICAgICBub3JtYWxpemVkSW5wdXRbbm9ybWFsaXplZFByb3BdID0gaW5wdXRPYmplY3RbcHJvcF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5vcm1hbGl6ZWRJbnB1dDtcbiAgICB9XG5cbiAgICB2YXIgcHJpb3JpdGllcyA9IHtcbiAgICAgICAgZGF0ZTogOSxcbiAgICAgICAgZGF5OiAxMSxcbiAgICAgICAgd2Vla2RheTogMTEsXG4gICAgICAgIGlzb1dlZWtkYXk6IDExLFxuICAgICAgICBkYXlPZlllYXI6IDQsXG4gICAgICAgIGhvdXI6IDEzLFxuICAgICAgICBtaWxsaXNlY29uZDogMTYsXG4gICAgICAgIG1pbnV0ZTogMTQsXG4gICAgICAgIG1vbnRoOiA4LFxuICAgICAgICBxdWFydGVyOiA3LFxuICAgICAgICBzZWNvbmQ6IDE1LFxuICAgICAgICB3ZWVrWWVhcjogMSxcbiAgICAgICAgaXNvV2Vla1llYXI6IDEsXG4gICAgICAgIHdlZWs6IDUsXG4gICAgICAgIGlzb1dlZWs6IDUsXG4gICAgICAgIHllYXI6IDEsXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGdldFByaW9yaXRpemVkVW5pdHModW5pdHNPYmopIHtcbiAgICAgICAgdmFyIHVuaXRzID0gW10sXG4gICAgICAgICAgICB1O1xuICAgICAgICBmb3IgKHUgaW4gdW5pdHNPYmopIHtcbiAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wKHVuaXRzT2JqLCB1KSkge1xuICAgICAgICAgICAgICAgIHVuaXRzLnB1c2goeyB1bml0OiB1LCBwcmlvcml0eTogcHJpb3JpdGllc1t1XSB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB1bml0cy5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgICAgICByZXR1cm4gYS5wcmlvcml0eSAtIGIucHJpb3JpdHk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdW5pdHM7XG4gICAgfVxuXG4gICAgdmFyIG1hdGNoMSA9IC9cXGQvLCAvLyAgICAgICAwIC0gOVxuICAgICAgICBtYXRjaDIgPSAvXFxkXFxkLywgLy8gICAgICAwMCAtIDk5XG4gICAgICAgIG1hdGNoMyA9IC9cXGR7M30vLCAvLyAgICAgMDAwIC0gOTk5XG4gICAgICAgIG1hdGNoNCA9IC9cXGR7NH0vLCAvLyAgICAwMDAwIC0gOTk5OVxuICAgICAgICBtYXRjaDYgPSAvWystXT9cXGR7Nn0vLCAvLyAtOTk5OTk5IC0gOTk5OTk5XG4gICAgICAgIG1hdGNoMXRvMiA9IC9cXGRcXGQ/LywgLy8gICAgICAgMCAtIDk5XG4gICAgICAgIG1hdGNoM3RvNCA9IC9cXGRcXGRcXGRcXGQ/LywgLy8gICAgIDk5OSAtIDk5OTlcbiAgICAgICAgbWF0Y2g1dG82ID0gL1xcZFxcZFxcZFxcZFxcZFxcZD8vLCAvLyAgIDk5OTk5IC0gOTk5OTk5XG4gICAgICAgIG1hdGNoMXRvMyA9IC9cXGR7MSwzfS8sIC8vICAgICAgIDAgLSA5OTlcbiAgICAgICAgbWF0Y2gxdG80ID0gL1xcZHsxLDR9LywgLy8gICAgICAgMCAtIDk5OTlcbiAgICAgICAgbWF0Y2gxdG82ID0gL1srLV0/XFxkezEsNn0vLCAvLyAtOTk5OTk5IC0gOTk5OTk5XG4gICAgICAgIG1hdGNoVW5zaWduZWQgPSAvXFxkKy8sIC8vICAgICAgIDAgLSBpbmZcbiAgICAgICAgbWF0Y2hTaWduZWQgPSAvWystXT9cXGQrLywgLy8gICAgLWluZiAtIGluZlxuICAgICAgICBtYXRjaE9mZnNldCA9IC9afFsrLV1cXGRcXGQ6P1xcZFxcZC9naSwgLy8gKzAwOjAwIC0wMDowMCArMDAwMCAtMDAwMCBvciBaXG4gICAgICAgIG1hdGNoU2hvcnRPZmZzZXQgPSAvWnxbKy1dXFxkXFxkKD86Oj9cXGRcXGQpPy9naSwgLy8gKzAwIC0wMCArMDA6MDAgLTAwOjAwICswMDAwIC0wMDAwIG9yIFpcbiAgICAgICAgbWF0Y2hUaW1lc3RhbXAgPSAvWystXT9cXGQrKFxcLlxcZHsxLDN9KT8vLCAvLyAxMjM0NTY3ODkgMTIzNDU2Nzg5LjEyM1xuICAgICAgICAvLyBhbnkgd29yZCAob3IgdHdvKSBjaGFyYWN0ZXJzIG9yIG51bWJlcnMgaW5jbHVkaW5nIHR3by90aHJlZSB3b3JkIG1vbnRoIGluIGFyYWJpYy5cbiAgICAgICAgLy8gaW5jbHVkZXMgc2NvdHRpc2ggZ2FlbGljIHR3byB3b3JkIGFuZCBoeXBoZW5hdGVkIG1vbnRoc1xuICAgICAgICBtYXRjaFdvcmQgPVxuICAgICAgICAgICAgL1swLTldezAsMjU2fVsnYS16XFx1MDBBMC1cXHUwNUZGXFx1MDcwMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRjA3XFx1RkYxMC1cXHVGRkVGXXsxLDI1Nn18W1xcdTA2MDAtXFx1MDZGRlxcL117MSwyNTZ9KFxccyo/W1xcdTA2MDAtXFx1MDZGRl17MSwyNTZ9KXsxLDJ9L2ksXG4gICAgICAgIG1hdGNoMXRvMk5vTGVhZGluZ1plcm8gPSAvXlsxLTldXFxkPy8sIC8vICAgICAgICAgMS05OVxuICAgICAgICBtYXRjaDF0bzJIYXNaZXJvID0gL14oWzEtOV1cXGR8XFxkKS8sIC8vICAgICAgICAgICAwLTk5XG4gICAgICAgIHJlZ2V4ZXM7XG5cbiAgICByZWdleGVzID0ge307XG5cbiAgICBmdW5jdGlvbiBhZGRSZWdleFRva2VuKHRva2VuLCByZWdleCwgc3RyaWN0UmVnZXgpIHtcbiAgICAgICAgcmVnZXhlc1t0b2tlbl0gPSBpc0Z1bmN0aW9uKHJlZ2V4KVxuICAgICAgICAgICAgPyByZWdleFxuICAgICAgICAgICAgOiBmdW5jdGlvbiAoaXNTdHJpY3QsIGxvY2FsZURhdGEpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBpc1N0cmljdCAmJiBzdHJpY3RSZWdleCA/IHN0cmljdFJlZ2V4IDogcmVnZXg7XG4gICAgICAgICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0UGFyc2VSZWdleEZvclRva2VuKHRva2VuLCBjb25maWcpIHtcbiAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHJlZ2V4ZXMsIHRva2VuKSkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBSZWdFeHAodW5lc2NhcGVGb3JtYXQodG9rZW4pKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZWdleGVzW3Rva2VuXShjb25maWcuX3N0cmljdCwgY29uZmlnLl9sb2NhbGUpO1xuICAgIH1cblxuICAgIC8vIENvZGUgZnJvbSBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzM1NjE0OTMvaXMtdGhlcmUtYS1yZWdleHAtZXNjYXBlLWZ1bmN0aW9uLWluLWphdmFzY3JpcHRcbiAgICBmdW5jdGlvbiB1bmVzY2FwZUZvcm1hdChzKSB7XG4gICAgICAgIHJldHVybiByZWdleEVzY2FwZShcbiAgICAgICAgICAgIHNcbiAgICAgICAgICAgICAgICAucmVwbGFjZSgnXFxcXCcsICcnKVxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKFxuICAgICAgICAgICAgICAgICAgICAvXFxcXChcXFspfFxcXFwoXFxdKXxcXFsoW15cXF1cXFtdKilcXF18XFxcXCguKS9nLFxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAobWF0Y2hlZCwgcDEsIHAyLCBwMywgcDQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwMSB8fCBwMiB8fCBwMyB8fCBwNDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZWdleEVzY2FwZShzKSB7XG4gICAgICAgIHJldHVybiBzLnJlcGxhY2UoL1stXFwvXFxcXF4kKis/LigpfFtcXF17fV0vZywgJ1xcXFwkJicpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFic0Zsb29yKG51bWJlcikge1xuICAgICAgICBpZiAobnVtYmVyIDwgMCkge1xuICAgICAgICAgICAgLy8gLTAgLT4gMFxuICAgICAgICAgICAgcmV0dXJuIE1hdGguY2VpbChudW1iZXIpIHx8IDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gTWF0aC5mbG9vcihudW1iZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9JbnQoYXJndW1lbnRGb3JDb2VyY2lvbikge1xuICAgICAgICB2YXIgY29lcmNlZE51bWJlciA9ICthcmd1bWVudEZvckNvZXJjaW9uLFxuICAgICAgICAgICAgdmFsdWUgPSAwO1xuXG4gICAgICAgIGlmIChjb2VyY2VkTnVtYmVyICE9PSAwICYmIGlzRmluaXRlKGNvZXJjZWROdW1iZXIpKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IGFic0Zsb29yKGNvZXJjZWROdW1iZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cblxuICAgIHZhciB0b2tlbnMgPSB7fTtcblxuICAgIGZ1bmN0aW9uIGFkZFBhcnNlVG9rZW4odG9rZW4sIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBpLFxuICAgICAgICAgICAgZnVuYyA9IGNhbGxiYWNrLFxuICAgICAgICAgICAgdG9rZW5MZW47XG4gICAgICAgIGlmICh0eXBlb2YgdG9rZW4gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICB0b2tlbiA9IFt0b2tlbl07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzTnVtYmVyKGNhbGxiYWNrKSkge1xuICAgICAgICAgICAgZnVuYyA9IGZ1bmN0aW9uIChpbnB1dCwgYXJyYXkpIHtcbiAgICAgICAgICAgICAgICBhcnJheVtjYWxsYmFja10gPSB0b0ludChpbnB1dCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHRva2VuTGVuID0gdG9rZW4ubGVuZ3RoO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdG9rZW5MZW47IGkrKykge1xuICAgICAgICAgICAgdG9rZW5zW3Rva2VuW2ldXSA9IGZ1bmM7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhZGRXZWVrUGFyc2VUb2tlbih0b2tlbiwgY2FsbGJhY2spIHtcbiAgICAgICAgYWRkUGFyc2VUb2tlbih0b2tlbiwgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnLCB0b2tlbikge1xuICAgICAgICAgICAgY29uZmlnLl93ID0gY29uZmlnLl93IHx8IHt9O1xuICAgICAgICAgICAgY2FsbGJhY2soaW5wdXQsIGNvbmZpZy5fdywgY29uZmlnLCB0b2tlbik7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFkZFRpbWVUb0FycmF5RnJvbVRva2VuKHRva2VuLCBpbnB1dCwgY29uZmlnKSB7XG4gICAgICAgIGlmIChpbnB1dCAhPSBudWxsICYmIGhhc093blByb3AodG9rZW5zLCB0b2tlbikpIHtcbiAgICAgICAgICAgIHRva2Vuc1t0b2tlbl0oaW5wdXQsIGNvbmZpZy5fYSwgY29uZmlnLCB0b2tlbik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0xlYXBZZWFyKHllYXIpIHtcbiAgICAgICAgcmV0dXJuICh5ZWFyICUgNCA9PT0gMCAmJiB5ZWFyICUgMTAwICE9PSAwKSB8fCB5ZWFyICUgNDAwID09PSAwO1xuICAgIH1cblxuICAgIHZhciBZRUFSID0gMCxcbiAgICAgICAgTU9OVEggPSAxLFxuICAgICAgICBEQVRFID0gMixcbiAgICAgICAgSE9VUiA9IDMsXG4gICAgICAgIE1JTlVURSA9IDQsXG4gICAgICAgIFNFQ09ORCA9IDUsXG4gICAgICAgIE1JTExJU0VDT05EID0gNixcbiAgICAgICAgV0VFSyA9IDcsXG4gICAgICAgIFdFRUtEQVkgPSA4O1xuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ1knLCAwLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB5ID0gdGhpcy55ZWFyKCk7XG4gICAgICAgIHJldHVybiB5IDw9IDk5OTkgPyB6ZXJvRmlsbCh5LCA0KSA6ICcrJyArIHk7XG4gICAgfSk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ1lZJywgMl0sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMueWVhcigpICUgMTAwO1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydZWVlZJywgNF0sIDAsICd5ZWFyJyk7XG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydZWVlZWScsIDVdLCAwLCAneWVhcicpO1xuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnWVlZWVlZJywgNiwgdHJ1ZV0sIDAsICd5ZWFyJyk7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBhZGRSZWdleFRva2VuKCdZJywgbWF0Y2hTaWduZWQpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ1lZJywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ1lZWVknLCBtYXRjaDF0bzQsIG1hdGNoNCk7XG4gICAgYWRkUmVnZXhUb2tlbignWVlZWVknLCBtYXRjaDF0bzYsIG1hdGNoNik7XG4gICAgYWRkUmVnZXhUb2tlbignWVlZWVlZJywgbWF0Y2gxdG82LCBtYXRjaDYpO1xuXG4gICAgYWRkUGFyc2VUb2tlbihbJ1lZWVlZJywgJ1lZWVlZWSddLCBZRUFSKTtcbiAgICBhZGRQYXJzZVRva2VuKCdZWVlZJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSkge1xuICAgICAgICBhcnJheVtZRUFSXSA9XG4gICAgICAgICAgICBpbnB1dC5sZW5ndGggPT09IDIgPyBob29rcy5wYXJzZVR3b0RpZ2l0WWVhcihpbnB1dCkgOiB0b0ludChpbnB1dCk7XG4gICAgfSk7XG4gICAgYWRkUGFyc2VUb2tlbignWVknLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5KSB7XG4gICAgICAgIGFycmF5W1lFQVJdID0gaG9va3MucGFyc2VUd29EaWdpdFllYXIoaW5wdXQpO1xuICAgIH0pO1xuICAgIGFkZFBhcnNlVG9rZW4oJ1knLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5KSB7XG4gICAgICAgIGFycmF5W1lFQVJdID0gcGFyc2VJbnQoaW5wdXQsIDEwKTtcbiAgICB9KTtcblxuICAgIC8vIEhFTFBFUlNcblxuICAgIGZ1bmN0aW9uIGRheXNJblllYXIoeWVhcikge1xuICAgICAgICByZXR1cm4gaXNMZWFwWWVhcih5ZWFyKSA/IDM2NiA6IDM2NTtcbiAgICB9XG5cbiAgICAvLyBIT09LU1xuXG4gICAgaG9va3MucGFyc2VUd29EaWdpdFllYXIgPSBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIHRvSW50KGlucHV0KSArICh0b0ludChpbnB1dCkgPiA2OCA/IDE5MDAgOiAyMDAwKTtcbiAgICB9O1xuXG4gICAgLy8gTU9NRU5UU1xuXG4gICAgdmFyIGdldFNldFllYXIgPSBtYWtlR2V0U2V0KCdGdWxsWWVhcicsIHRydWUpO1xuXG4gICAgZnVuY3Rpb24gZ2V0SXNMZWFwWWVhcigpIHtcbiAgICAgICAgcmV0dXJuIGlzTGVhcFllYXIodGhpcy55ZWFyKCkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1ha2VHZXRTZXQodW5pdCwga2VlcFRpbWUpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKHZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBzZXQkMSh0aGlzLCB1bml0LCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgaG9va3MudXBkYXRlT2Zmc2V0KHRoaXMsIGtlZXBUaW1lKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGdldCh0aGlzLCB1bml0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXQobW9tLCB1bml0KSB7XG4gICAgICAgIGlmICghbW9tLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIE5hTjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBkID0gbW9tLl9kLFxuICAgICAgICAgICAgaXNVVEMgPSBtb20uX2lzVVRDO1xuXG4gICAgICAgIHN3aXRjaCAodW5pdCkge1xuICAgICAgICAgICAgY2FzZSAnTWlsbGlzZWNvbmRzJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNVVEMgPyBkLmdldFVUQ01pbGxpc2Vjb25kcygpIDogZC5nZXRNaWxsaXNlY29uZHMoKTtcbiAgICAgICAgICAgIGNhc2UgJ1NlY29uZHMnOlxuICAgICAgICAgICAgICAgIHJldHVybiBpc1VUQyA/IGQuZ2V0VVRDU2Vjb25kcygpIDogZC5nZXRTZWNvbmRzKCk7XG4gICAgICAgICAgICBjYXNlICdNaW51dGVzJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNVVEMgPyBkLmdldFVUQ01pbnV0ZXMoKSA6IGQuZ2V0TWludXRlcygpO1xuICAgICAgICAgICAgY2FzZSAnSG91cnMnOlxuICAgICAgICAgICAgICAgIHJldHVybiBpc1VUQyA/IGQuZ2V0VVRDSG91cnMoKSA6IGQuZ2V0SG91cnMoKTtcbiAgICAgICAgICAgIGNhc2UgJ0RhdGUnOlxuICAgICAgICAgICAgICAgIHJldHVybiBpc1VUQyA/IGQuZ2V0VVRDRGF0ZSgpIDogZC5nZXREYXRlKCk7XG4gICAgICAgICAgICBjYXNlICdEYXknOlxuICAgICAgICAgICAgICAgIHJldHVybiBpc1VUQyA/IGQuZ2V0VVRDRGF5KCkgOiBkLmdldERheSgpO1xuICAgICAgICAgICAgY2FzZSAnTW9udGgnOlxuICAgICAgICAgICAgICAgIHJldHVybiBpc1VUQyA/IGQuZ2V0VVRDTW9udGgoKSA6IGQuZ2V0TW9udGgoKTtcbiAgICAgICAgICAgIGNhc2UgJ0Z1bGxZZWFyJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNVVEMgPyBkLmdldFVUQ0Z1bGxZZWFyKCkgOiBkLmdldEZ1bGxZZWFyKCk7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiBOYU47IC8vIEp1c3QgaW4gY2FzZVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0JDEobW9tLCB1bml0LCB2YWx1ZSkge1xuICAgICAgICB2YXIgZCwgaXNVVEMsIHllYXIsIG1vbnRoLCBkYXRlO1xuXG4gICAgICAgIGlmICghbW9tLmlzVmFsaWQoKSB8fCBpc05hTih2YWx1ZSkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGQgPSBtb20uX2Q7XG4gICAgICAgIGlzVVRDID0gbW9tLl9pc1VUQztcblxuICAgICAgICBzd2l0Y2ggKHVuaXQpIHtcbiAgICAgICAgICAgIGNhc2UgJ01pbGxpc2Vjb25kcyc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZvaWQgKGlzVVRDXG4gICAgICAgICAgICAgICAgICAgID8gZC5zZXRVVENNaWxsaXNlY29uZHModmFsdWUpXG4gICAgICAgICAgICAgICAgICAgIDogZC5zZXRNaWxsaXNlY29uZHModmFsdWUpKTtcbiAgICAgICAgICAgIGNhc2UgJ1NlY29uZHMnOlxuICAgICAgICAgICAgICAgIHJldHVybiB2b2lkIChpc1VUQyA/IGQuc2V0VVRDU2Vjb25kcyh2YWx1ZSkgOiBkLnNldFNlY29uZHModmFsdWUpKTtcbiAgICAgICAgICAgIGNhc2UgJ01pbnV0ZXMnOlxuICAgICAgICAgICAgICAgIHJldHVybiB2b2lkIChpc1VUQyA/IGQuc2V0VVRDTWludXRlcyh2YWx1ZSkgOiBkLnNldE1pbnV0ZXModmFsdWUpKTtcbiAgICAgICAgICAgIGNhc2UgJ0hvdXJzJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gdm9pZCAoaXNVVEMgPyBkLnNldFVUQ0hvdXJzKHZhbHVlKSA6IGQuc2V0SG91cnModmFsdWUpKTtcbiAgICAgICAgICAgIGNhc2UgJ0RhdGUnOlxuICAgICAgICAgICAgICAgIHJldHVybiB2b2lkIChpc1VUQyA/IGQuc2V0VVRDRGF0ZSh2YWx1ZSkgOiBkLnNldERhdGUodmFsdWUpKTtcbiAgICAgICAgICAgIC8vIGNhc2UgJ0RheSc6IC8vIE5vdCByZWFsXG4gICAgICAgICAgICAvLyAgICByZXR1cm4gdm9pZCAoaXNVVEMgPyBkLnNldFVUQ0RheSh2YWx1ZSkgOiBkLnNldERheSh2YWx1ZSkpO1xuICAgICAgICAgICAgLy8gY2FzZSAnTW9udGgnOiAvLyBOb3QgdXNlZCBiZWNhdXNlIHdlIG5lZWQgdG8gcGFzcyB0d28gdmFyaWFibGVzXG4gICAgICAgICAgICAvLyAgICAgcmV0dXJuIHZvaWQgKGlzVVRDID8gZC5zZXRVVENNb250aCh2YWx1ZSkgOiBkLnNldE1vbnRoKHZhbHVlKSk7XG4gICAgICAgICAgICBjYXNlICdGdWxsWWVhcic6XG4gICAgICAgICAgICAgICAgYnJlYWs7IC8vIFNlZSBiZWxvdyAuLi5cbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuOyAvLyBKdXN0IGluIGNhc2VcbiAgICAgICAgfVxuXG4gICAgICAgIHllYXIgPSB2YWx1ZTtcbiAgICAgICAgbW9udGggPSBtb20ubW9udGgoKTtcbiAgICAgICAgZGF0ZSA9IG1vbS5kYXRlKCk7XG4gICAgICAgIGRhdGUgPSBkYXRlID09PSAyOSAmJiBtb250aCA9PT0gMSAmJiAhaXNMZWFwWWVhcih5ZWFyKSA/IDI4IDogZGF0ZTtcbiAgICAgICAgdm9pZCAoaXNVVENcbiAgICAgICAgICAgID8gZC5zZXRVVENGdWxsWWVhcih5ZWFyLCBtb250aCwgZGF0ZSlcbiAgICAgICAgICAgIDogZC5zZXRGdWxsWWVhcih5ZWFyLCBtb250aCwgZGF0ZSkpO1xuICAgIH1cblxuICAgIC8vIE1PTUVOVFNcblxuICAgIGZ1bmN0aW9uIHN0cmluZ0dldCh1bml0cykge1xuICAgICAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKTtcbiAgICAgICAgaWYgKGlzRnVuY3Rpb24odGhpc1t1bml0c10pKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpc1t1bml0c10oKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzdHJpbmdTZXQodW5pdHMsIHZhbHVlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdW5pdHMgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICB1bml0cyA9IG5vcm1hbGl6ZU9iamVjdFVuaXRzKHVuaXRzKTtcbiAgICAgICAgICAgIHZhciBwcmlvcml0aXplZCA9IGdldFByaW9yaXRpemVkVW5pdHModW5pdHMpLFxuICAgICAgICAgICAgICAgIGksXG4gICAgICAgICAgICAgICAgcHJpb3JpdGl6ZWRMZW4gPSBwcmlvcml0aXplZC5sZW5ndGg7XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgcHJpb3JpdGl6ZWRMZW47IGkrKykge1xuICAgICAgICAgICAgICAgIHRoaXNbcHJpb3JpdGl6ZWRbaV0udW5pdF0odW5pdHNbcHJpb3JpdGl6ZWRbaV0udW5pdF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdW5pdHMgPSBub3JtYWxpemVVbml0cyh1bml0cyk7XG4gICAgICAgICAgICBpZiAoaXNGdW5jdGlvbih0aGlzW3VuaXRzXSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpc1t1bml0c10odmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1vZChuLCB4KSB7XG4gICAgICAgIHJldHVybiAoKG4gJSB4KSArIHgpICUgeDtcbiAgICB9XG5cbiAgICB2YXIgaW5kZXhPZjtcblxuICAgIGlmIChBcnJheS5wcm90b3R5cGUuaW5kZXhPZikge1xuICAgICAgICBpbmRleE9mID0gQXJyYXkucHJvdG90eXBlLmluZGV4T2Y7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgaW5kZXhPZiA9IGZ1bmN0aW9uIChvKSB7XG4gICAgICAgICAgICAvLyBJIGtub3dcbiAgICAgICAgICAgIHZhciBpO1xuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpc1tpXSA9PT0gbykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGF5c0luTW9udGgoeWVhciwgbW9udGgpIHtcbiAgICAgICAgaWYgKGlzTmFOKHllYXIpIHx8IGlzTmFOKG1vbnRoKSkge1xuICAgICAgICAgICAgcmV0dXJuIE5hTjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbW9kTW9udGggPSBtb2QobW9udGgsIDEyKTtcbiAgICAgICAgeWVhciArPSAobW9udGggLSBtb2RNb250aCkgLyAxMjtcbiAgICAgICAgcmV0dXJuIG1vZE1vbnRoID09PSAxXG4gICAgICAgICAgICA/IGlzTGVhcFllYXIoeWVhcilcbiAgICAgICAgICAgICAgICA/IDI5XG4gICAgICAgICAgICAgICAgOiAyOFxuICAgICAgICAgICAgOiAzMSAtICgobW9kTW9udGggJSA3KSAlIDIpO1xuICAgIH1cblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGFkZEZvcm1hdFRva2VuKCdNJywgWydNTScsIDJdLCAnTW8nLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1vbnRoKCkgKyAxO1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ01NTScsIDAsIDAsIGZ1bmN0aW9uIChmb3JtYXQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLm1vbnRoc1Nob3J0KHRoaXMsIGZvcm1hdCk7XG4gICAgfSk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbignTU1NTScsIDAsIDAsIGZ1bmN0aW9uIChmb3JtYXQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLm1vbnRocyh0aGlzLCBmb3JtYXQpO1xuICAgIH0pO1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgYWRkUmVnZXhUb2tlbignTScsIG1hdGNoMXRvMiwgbWF0Y2gxdG8yTm9MZWFkaW5nWmVybyk7XG4gICAgYWRkUmVnZXhUb2tlbignTU0nLCBtYXRjaDF0bzIsIG1hdGNoMik7XG4gICAgYWRkUmVnZXhUb2tlbignTU1NJywgZnVuY3Rpb24gKGlzU3RyaWN0LCBsb2NhbGUpIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsZS5tb250aHNTaG9ydFJlZ2V4KGlzU3RyaWN0KTtcbiAgICB9KTtcbiAgICBhZGRSZWdleFRva2VuKCdNTU1NJywgZnVuY3Rpb24gKGlzU3RyaWN0LCBsb2NhbGUpIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsZS5tb250aHNSZWdleChpc1N0cmljdCk7XG4gICAgfSk7XG5cbiAgICBhZGRQYXJzZVRva2VuKFsnTScsICdNTSddLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5KSB7XG4gICAgICAgIGFycmF5W01PTlRIXSA9IHRvSW50KGlucHV0KSAtIDE7XG4gICAgfSk7XG5cbiAgICBhZGRQYXJzZVRva2VuKFsnTU1NJywgJ01NTU0nXSwgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnLCB0b2tlbikge1xuICAgICAgICB2YXIgbW9udGggPSBjb25maWcuX2xvY2FsZS5tb250aHNQYXJzZShpbnB1dCwgdG9rZW4sIGNvbmZpZy5fc3RyaWN0KTtcbiAgICAgICAgLy8gaWYgd2UgZGlkbid0IGZpbmQgYSBtb250aCBuYW1lLCBtYXJrIHRoZSBkYXRlIGFzIGludmFsaWQuXG4gICAgICAgIGlmIChtb250aCAhPSBudWxsKSB7XG4gICAgICAgICAgICBhcnJheVtNT05USF0gPSBtb250aDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmludmFsaWRNb250aCA9IGlucHV0O1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBMT0NBTEVTXG5cbiAgICB2YXIgZGVmYXVsdExvY2FsZU1vbnRocyA9XG4gICAgICAgICAgICAnSmFudWFyeV9GZWJydWFyeV9NYXJjaF9BcHJpbF9NYXlfSnVuZV9KdWx5X0F1Z3VzdF9TZXB0ZW1iZXJfT2N0b2Jlcl9Ob3ZlbWJlcl9EZWNlbWJlcicuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICBkZWZhdWx0TG9jYWxlTW9udGhzU2hvcnQgPVxuICAgICAgICAgICAgJ0phbl9GZWJfTWFyX0Fwcl9NYXlfSnVuX0p1bF9BdWdfU2VwX09jdF9Ob3ZfRGVjJy5zcGxpdCgnXycpLFxuICAgICAgICBNT05USFNfSU5fRk9STUFUID0gL0Rbb0RdPyhcXFtbXlxcW1xcXV0qXFxdfFxccykrTU1NTT8vLFxuICAgICAgICBkZWZhdWx0TW9udGhzU2hvcnRSZWdleCA9IG1hdGNoV29yZCxcbiAgICAgICAgZGVmYXVsdE1vbnRoc1JlZ2V4ID0gbWF0Y2hXb3JkO1xuXG4gICAgZnVuY3Rpb24gbG9jYWxlTW9udGhzKG0sIGZvcm1hdCkge1xuICAgICAgICBpZiAoIW0pIHtcbiAgICAgICAgICAgIHJldHVybiBpc0FycmF5KHRoaXMuX21vbnRocylcbiAgICAgICAgICAgICAgICA/IHRoaXMuX21vbnRoc1xuICAgICAgICAgICAgICAgIDogdGhpcy5fbW9udGhzWydzdGFuZGFsb25lJ107XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGlzQXJyYXkodGhpcy5fbW9udGhzKVxuICAgICAgICAgICAgPyB0aGlzLl9tb250aHNbbS5tb250aCgpXVxuICAgICAgICAgICAgOiB0aGlzLl9tb250aHNbXG4gICAgICAgICAgICAgICAgICAodGhpcy5fbW9udGhzLmlzRm9ybWF0IHx8IE1PTlRIU19JTl9GT1JNQVQpLnRlc3QoZm9ybWF0KVxuICAgICAgICAgICAgICAgICAgICAgID8gJ2Zvcm1hdCdcbiAgICAgICAgICAgICAgICAgICAgICA6ICdzdGFuZGFsb25lJ1xuICAgICAgICAgICAgICBdW20ubW9udGgoKV07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbG9jYWxlTW9udGhzU2hvcnQobSwgZm9ybWF0KSB7XG4gICAgICAgIGlmICghbSkge1xuICAgICAgICAgICAgcmV0dXJuIGlzQXJyYXkodGhpcy5fbW9udGhzU2hvcnQpXG4gICAgICAgICAgICAgICAgPyB0aGlzLl9tb250aHNTaG9ydFxuICAgICAgICAgICAgICAgIDogdGhpcy5fbW9udGhzU2hvcnRbJ3N0YW5kYWxvbmUnXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaXNBcnJheSh0aGlzLl9tb250aHNTaG9ydClcbiAgICAgICAgICAgID8gdGhpcy5fbW9udGhzU2hvcnRbbS5tb250aCgpXVxuICAgICAgICAgICAgOiB0aGlzLl9tb250aHNTaG9ydFtcbiAgICAgICAgICAgICAgICAgIE1PTlRIU19JTl9GT1JNQVQudGVzdChmb3JtYXQpID8gJ2Zvcm1hdCcgOiAnc3RhbmRhbG9uZSdcbiAgICAgICAgICAgICAgXVttLm1vbnRoKCldO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGhhbmRsZVN0cmljdFBhcnNlKG1vbnRoTmFtZSwgZm9ybWF0LCBzdHJpY3QpIHtcbiAgICAgICAgdmFyIGksXG4gICAgICAgICAgICBpaSxcbiAgICAgICAgICAgIG1vbSxcbiAgICAgICAgICAgIGxsYyA9IG1vbnRoTmFtZS50b0xvY2FsZUxvd2VyQ2FzZSgpO1xuICAgICAgICBpZiAoIXRoaXMuX21vbnRoc1BhcnNlKSB7XG4gICAgICAgICAgICAvLyB0aGlzIGlzIG5vdCB1c2VkXG4gICAgICAgICAgICB0aGlzLl9tb250aHNQYXJzZSA9IFtdO1xuICAgICAgICAgICAgdGhpcy5fbG9uZ01vbnRoc1BhcnNlID0gW107XG4gICAgICAgICAgICB0aGlzLl9zaG9ydE1vbnRoc1BhcnNlID0gW107XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgMTI7ICsraSkge1xuICAgICAgICAgICAgICAgIG1vbSA9IGNyZWF0ZVVUQyhbMjAwMCwgaV0pO1xuICAgICAgICAgICAgICAgIHRoaXMuX3Nob3J0TW9udGhzUGFyc2VbaV0gPSB0aGlzLm1vbnRoc1Nob3J0KFxuICAgICAgICAgICAgICAgICAgICBtb20sXG4gICAgICAgICAgICAgICAgICAgICcnXG4gICAgICAgICAgICAgICAgKS50b0xvY2FsZUxvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2xvbmdNb250aHNQYXJzZVtpXSA9IHRoaXMubW9udGhzKG1vbSwgJycpLnRvTG9jYWxlTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc3RyaWN0KSB7XG4gICAgICAgICAgICBpZiAoZm9ybWF0ID09PSAnTU1NJykge1xuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX3Nob3J0TW9udGhzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlpICE9PSAtMSA/IGlpIDogbnVsbDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fbG9uZ01vbnRoc1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBpaSAhPT0gLTEgPyBpaSA6IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoZm9ybWF0ID09PSAnTU1NJykge1xuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX3Nob3J0TW9udGhzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgaWYgKGlpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaWk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX2xvbmdNb250aHNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gaWkgIT09IC0xID8gaWkgOiBudWxsO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9sb25nTW9udGhzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgaWYgKGlpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaWk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX3Nob3J0TW9udGhzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlpICE9PSAtMSA/IGlpIDogbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxvY2FsZU1vbnRoc1BhcnNlKG1vbnRoTmFtZSwgZm9ybWF0LCBzdHJpY3QpIHtcbiAgICAgICAgdmFyIGksIG1vbSwgcmVnZXg7XG5cbiAgICAgICAgaWYgKHRoaXMuX21vbnRoc1BhcnNlRXhhY3QpIHtcbiAgICAgICAgICAgIHJldHVybiBoYW5kbGVTdHJpY3RQYXJzZS5jYWxsKHRoaXMsIG1vbnRoTmFtZSwgZm9ybWF0LCBzdHJpY3QpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF0aGlzLl9tb250aHNQYXJzZSkge1xuICAgICAgICAgICAgdGhpcy5fbW9udGhzUGFyc2UgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuX2xvbmdNb250aHNQYXJzZSA9IFtdO1xuICAgICAgICAgICAgdGhpcy5fc2hvcnRNb250aHNQYXJzZSA9IFtdO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVE9ETzogYWRkIHNvcnRpbmdcbiAgICAgICAgLy8gU29ydGluZyBtYWtlcyBzdXJlIGlmIG9uZSBtb250aCAob3IgYWJicikgaXMgYSBwcmVmaXggb2YgYW5vdGhlclxuICAgICAgICAvLyBzZWUgc29ydGluZyBpbiBjb21wdXRlTW9udGhzUGFyc2VcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IDEyOyBpKyspIHtcbiAgICAgICAgICAgIC8vIG1ha2UgdGhlIHJlZ2V4IGlmIHdlIGRvbid0IGhhdmUgaXQgYWxyZWFkeVxuICAgICAgICAgICAgbW9tID0gY3JlYXRlVVRDKFsyMDAwLCBpXSk7XG4gICAgICAgICAgICBpZiAoc3RyaWN0ICYmICF0aGlzLl9sb25nTW9udGhzUGFyc2VbaV0pIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9sb25nTW9udGhzUGFyc2VbaV0gPSBuZXcgUmVnRXhwKFxuICAgICAgICAgICAgICAgICAgICAnXicgKyB0aGlzLm1vbnRocyhtb20sICcnKS5yZXBsYWNlKCcuJywgJycpICsgJyQnLFxuICAgICAgICAgICAgICAgICAgICAnaSdcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIHRoaXMuX3Nob3J0TW9udGhzUGFyc2VbaV0gPSBuZXcgUmVnRXhwKFxuICAgICAgICAgICAgICAgICAgICAnXicgKyB0aGlzLm1vbnRoc1Nob3J0KG1vbSwgJycpLnJlcGxhY2UoJy4nLCAnJykgKyAnJCcsXG4gICAgICAgICAgICAgICAgICAgICdpJ1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXN0cmljdCAmJiAhdGhpcy5fbW9udGhzUGFyc2VbaV0pIHtcbiAgICAgICAgICAgICAgICByZWdleCA9XG4gICAgICAgICAgICAgICAgICAgICdeJyArIHRoaXMubW9udGhzKG1vbSwgJycpICsgJ3xeJyArIHRoaXMubW9udGhzU2hvcnQobW9tLCAnJyk7XG4gICAgICAgICAgICAgICAgdGhpcy5fbW9udGhzUGFyc2VbaV0gPSBuZXcgUmVnRXhwKHJlZ2V4LnJlcGxhY2UoJy4nLCAnJyksICdpJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyB0ZXN0IHRoZSByZWdleFxuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIHN0cmljdCAmJlxuICAgICAgICAgICAgICAgIGZvcm1hdCA9PT0gJ01NTU0nICYmXG4gICAgICAgICAgICAgICAgdGhpcy5fbG9uZ01vbnRoc1BhcnNlW2ldLnRlc3QobW9udGhOYW1lKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgICAgICAgIHN0cmljdCAmJlxuICAgICAgICAgICAgICAgIGZvcm1hdCA9PT0gJ01NTScgJiZcbiAgICAgICAgICAgICAgICB0aGlzLl9zaG9ydE1vbnRoc1BhcnNlW2ldLnRlc3QobW9udGhOYW1lKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCFzdHJpY3QgJiYgdGhpcy5fbW9udGhzUGFyc2VbaV0udGVzdChtb250aE5hbWUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICBmdW5jdGlvbiBzZXRNb250aChtb20sIHZhbHVlKSB7XG4gICAgICAgIGlmICghbW9tLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgLy8gTm8gb3BcbiAgICAgICAgICAgIHJldHVybiBtb207XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgaWYgKC9eXFxkKyQvLnRlc3QodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSB0b0ludCh2YWx1ZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gbW9tLmxvY2FsZURhdGEoKS5tb250aHNQYXJzZSh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgLy8gVE9ETzogQW5vdGhlciBzaWxlbnQgZmFpbHVyZT9cbiAgICAgICAgICAgICAgICBpZiAoIWlzTnVtYmVyKHZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbW9tO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBtb250aCA9IHZhbHVlLFxuICAgICAgICAgICAgZGF0ZSA9IG1vbS5kYXRlKCk7XG5cbiAgICAgICAgZGF0ZSA9IGRhdGUgPCAyOSA/IGRhdGUgOiBNYXRoLm1pbihkYXRlLCBkYXlzSW5Nb250aChtb20ueWVhcigpLCBtb250aCkpO1xuICAgICAgICB2b2lkIChtb20uX2lzVVRDXG4gICAgICAgICAgICA/IG1vbS5fZC5zZXRVVENNb250aChtb250aCwgZGF0ZSlcbiAgICAgICAgICAgIDogbW9tLl9kLnNldE1vbnRoKG1vbnRoLCBkYXRlKSk7XG4gICAgICAgIHJldHVybiBtb207XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0U2V0TW9udGgodmFsdWUpIHtcbiAgICAgICAgaWYgKHZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgICAgIHNldE1vbnRoKHRoaXMsIHZhbHVlKTtcbiAgICAgICAgICAgIGhvb2tzLnVwZGF0ZU9mZnNldCh0aGlzLCB0cnVlKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGdldCh0aGlzLCAnTW9udGgnKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldERheXNJbk1vbnRoKCkge1xuICAgICAgICByZXR1cm4gZGF5c0luTW9udGgodGhpcy55ZWFyKCksIHRoaXMubW9udGgoKSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbW9udGhzU2hvcnRSZWdleChpc1N0cmljdCkge1xuICAgICAgICBpZiAodGhpcy5fbW9udGhzUGFyc2VFeGFjdCkge1xuICAgICAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfbW9udGhzUmVnZXgnKSkge1xuICAgICAgICAgICAgICAgIGNvbXB1dGVNb250aHNQYXJzZS5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlzU3RyaWN0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21vbnRoc1Nob3J0U3RyaWN0UmVnZXg7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9tb250aHNTaG9ydFJlZ2V4O1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfbW9udGhzU2hvcnRSZWdleCcpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbW9udGhzU2hvcnRSZWdleCA9IGRlZmF1bHRNb250aHNTaG9ydFJlZ2V4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21vbnRoc1Nob3J0U3RyaWN0UmVnZXggJiYgaXNTdHJpY3RcbiAgICAgICAgICAgICAgICA/IHRoaXMuX21vbnRoc1Nob3J0U3RyaWN0UmVnZXhcbiAgICAgICAgICAgICAgICA6IHRoaXMuX21vbnRoc1Nob3J0UmVnZXg7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtb250aHNSZWdleChpc1N0cmljdCkge1xuICAgICAgICBpZiAodGhpcy5fbW9udGhzUGFyc2VFeGFjdCkge1xuICAgICAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfbW9udGhzUmVnZXgnKSkge1xuICAgICAgICAgICAgICAgIGNvbXB1dGVNb250aHNQYXJzZS5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlzU3RyaWN0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21vbnRoc1N0cmljdFJlZ2V4O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fbW9udGhzUmVnZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ19tb250aHNSZWdleCcpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbW9udGhzUmVnZXggPSBkZWZhdWx0TW9udGhzUmVnZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbW9udGhzU3RyaWN0UmVnZXggJiYgaXNTdHJpY3RcbiAgICAgICAgICAgICAgICA/IHRoaXMuX21vbnRoc1N0cmljdFJlZ2V4XG4gICAgICAgICAgICAgICAgOiB0aGlzLl9tb250aHNSZWdleDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNvbXB1dGVNb250aHNQYXJzZSgpIHtcbiAgICAgICAgZnVuY3Rpb24gY21wTGVuUmV2KGEsIGIpIHtcbiAgICAgICAgICAgIHJldHVybiBiLmxlbmd0aCAtIGEubGVuZ3RoO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHNob3J0UGllY2VzID0gW10sXG4gICAgICAgICAgICBsb25nUGllY2VzID0gW10sXG4gICAgICAgICAgICBtaXhlZFBpZWNlcyA9IFtdLFxuICAgICAgICAgICAgaSxcbiAgICAgICAgICAgIG1vbSxcbiAgICAgICAgICAgIHNob3J0UCxcbiAgICAgICAgICAgIGxvbmdQO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgMTI7IGkrKykge1xuICAgICAgICAgICAgLy8gbWFrZSB0aGUgcmVnZXggaWYgd2UgZG9uJ3QgaGF2ZSBpdCBhbHJlYWR5XG4gICAgICAgICAgICBtb20gPSBjcmVhdGVVVEMoWzIwMDAsIGldKTtcbiAgICAgICAgICAgIHNob3J0UCA9IHJlZ2V4RXNjYXBlKHRoaXMubW9udGhzU2hvcnQobW9tLCAnJykpO1xuICAgICAgICAgICAgbG9uZ1AgPSByZWdleEVzY2FwZSh0aGlzLm1vbnRocyhtb20sICcnKSk7XG4gICAgICAgICAgICBzaG9ydFBpZWNlcy5wdXNoKHNob3J0UCk7XG4gICAgICAgICAgICBsb25nUGllY2VzLnB1c2gobG9uZ1ApO1xuICAgICAgICAgICAgbWl4ZWRQaWVjZXMucHVzaChsb25nUCk7XG4gICAgICAgICAgICBtaXhlZFBpZWNlcy5wdXNoKHNob3J0UCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gU29ydGluZyBtYWtlcyBzdXJlIGlmIG9uZSBtb250aCAob3IgYWJicikgaXMgYSBwcmVmaXggb2YgYW5vdGhlciBpdFxuICAgICAgICAvLyB3aWxsIG1hdGNoIHRoZSBsb25nZXIgcGllY2UuXG4gICAgICAgIHNob3J0UGllY2VzLnNvcnQoY21wTGVuUmV2KTtcbiAgICAgICAgbG9uZ1BpZWNlcy5zb3J0KGNtcExlblJldik7XG4gICAgICAgIG1peGVkUGllY2VzLnNvcnQoY21wTGVuUmV2KTtcblxuICAgICAgICB0aGlzLl9tb250aHNSZWdleCA9IG5ldyBSZWdFeHAoJ14oJyArIG1peGVkUGllY2VzLmpvaW4oJ3wnKSArICcpJywgJ2knKTtcbiAgICAgICAgdGhpcy5fbW9udGhzU2hvcnRSZWdleCA9IHRoaXMuX21vbnRoc1JlZ2V4O1xuICAgICAgICB0aGlzLl9tb250aHNTdHJpY3RSZWdleCA9IG5ldyBSZWdFeHAoXG4gICAgICAgICAgICAnXignICsgbG9uZ1BpZWNlcy5qb2luKCd8JykgKyAnKScsXG4gICAgICAgICAgICAnaSdcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5fbW9udGhzU2hvcnRTdHJpY3RSZWdleCA9IG5ldyBSZWdFeHAoXG4gICAgICAgICAgICAnXignICsgc2hvcnRQaWVjZXMuam9pbignfCcpICsgJyknLFxuICAgICAgICAgICAgJ2knXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlRGF0ZSh5LCBtLCBkLCBoLCBNLCBzLCBtcykge1xuICAgICAgICAvLyBjYW4ndCBqdXN0IGFwcGx5KCkgdG8gY3JlYXRlIGEgZGF0ZTpcbiAgICAgICAgLy8gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xLzE4MTM0OFxuICAgICAgICB2YXIgZGF0ZTtcbiAgICAgICAgLy8gdGhlIGRhdGUgY29uc3RydWN0b3IgcmVtYXBzIHllYXJzIDAtOTkgdG8gMTkwMC0xOTk5XG4gICAgICAgIGlmICh5IDwgMTAwICYmIHkgPj0gMCkge1xuICAgICAgICAgICAgLy8gcHJlc2VydmUgbGVhcCB5ZWFycyB1c2luZyBhIGZ1bGwgNDAwIHllYXIgY3ljbGUsIHRoZW4gcmVzZXRcbiAgICAgICAgICAgIGRhdGUgPSBuZXcgRGF0ZSh5ICsgNDAwLCBtLCBkLCBoLCBNLCBzLCBtcyk7XG4gICAgICAgICAgICBpZiAoaXNGaW5pdGUoZGF0ZS5nZXRGdWxsWWVhcigpKSkge1xuICAgICAgICAgICAgICAgIGRhdGUuc2V0RnVsbFllYXIoeSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkYXRlID0gbmV3IERhdGUoeSwgbSwgZCwgaCwgTSwgcywgbXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGRhdGU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlVVRDRGF0ZSh5KSB7XG4gICAgICAgIHZhciBkYXRlLCBhcmdzO1xuICAgICAgICAvLyB0aGUgRGF0ZS5VVEMgZnVuY3Rpb24gcmVtYXBzIHllYXJzIDAtOTkgdG8gMTkwMC0xOTk5XG4gICAgICAgIGlmICh5IDwgMTAwICYmIHkgPj0gMCkge1xuICAgICAgICAgICAgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG4gICAgICAgICAgICAvLyBwcmVzZXJ2ZSBsZWFwIHllYXJzIHVzaW5nIGEgZnVsbCA0MDAgeWVhciBjeWNsZSwgdGhlbiByZXNldFxuICAgICAgICAgICAgYXJnc1swXSA9IHkgKyA0MDA7XG4gICAgICAgICAgICBkYXRlID0gbmV3IERhdGUoRGF0ZS5VVEMuYXBwbHkobnVsbCwgYXJncykpO1xuICAgICAgICAgICAgaWYgKGlzRmluaXRlKGRhdGUuZ2V0VVRDRnVsbFllYXIoKSkpIHtcbiAgICAgICAgICAgICAgICBkYXRlLnNldFVUQ0Z1bGxZZWFyKHkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZGF0ZSA9IG5ldyBEYXRlKERhdGUuVVRDLmFwcGx5KG51bGwsIGFyZ3VtZW50cykpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGRhdGU7XG4gICAgfVxuXG4gICAgLy8gc3RhcnQtb2YtZmlyc3Qtd2VlayAtIHN0YXJ0LW9mLXllYXJcbiAgICBmdW5jdGlvbiBmaXJzdFdlZWtPZmZzZXQoeWVhciwgZG93LCBkb3kpIHtcbiAgICAgICAgdmFyIC8vIGZpcnN0LXdlZWsgZGF5IC0tIHdoaWNoIGphbnVhcnkgaXMgYWx3YXlzIGluIHRoZSBmaXJzdCB3ZWVrICg0IGZvciBpc28sIDEgZm9yIG90aGVyKVxuICAgICAgICAgICAgZndkID0gNyArIGRvdyAtIGRveSxcbiAgICAgICAgICAgIC8vIGZpcnN0LXdlZWsgZGF5IGxvY2FsIHdlZWtkYXkgLS0gd2hpY2ggbG9jYWwgd2Vla2RheSBpcyBmd2RcbiAgICAgICAgICAgIGZ3ZGx3ID0gKDcgKyBjcmVhdGVVVENEYXRlKHllYXIsIDAsIGZ3ZCkuZ2V0VVRDRGF5KCkgLSBkb3cpICUgNztcblxuICAgICAgICByZXR1cm4gLWZ3ZGx3ICsgZndkIC0gMTtcbiAgICB9XG5cbiAgICAvLyBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9JU09fd2Vla19kYXRlI0NhbGN1bGF0aW5nX2FfZGF0ZV9naXZlbl90aGVfeWVhci4yQ193ZWVrX251bWJlcl9hbmRfd2Vla2RheVxuICAgIGZ1bmN0aW9uIGRheU9mWWVhckZyb21XZWVrcyh5ZWFyLCB3ZWVrLCB3ZWVrZGF5LCBkb3csIGRveSkge1xuICAgICAgICB2YXIgbG9jYWxXZWVrZGF5ID0gKDcgKyB3ZWVrZGF5IC0gZG93KSAlIDcsXG4gICAgICAgICAgICB3ZWVrT2Zmc2V0ID0gZmlyc3RXZWVrT2Zmc2V0KHllYXIsIGRvdywgZG95KSxcbiAgICAgICAgICAgIGRheU9mWWVhciA9IDEgKyA3ICogKHdlZWsgLSAxKSArIGxvY2FsV2Vla2RheSArIHdlZWtPZmZzZXQsXG4gICAgICAgICAgICByZXNZZWFyLFxuICAgICAgICAgICAgcmVzRGF5T2ZZZWFyO1xuXG4gICAgICAgIGlmIChkYXlPZlllYXIgPD0gMCkge1xuICAgICAgICAgICAgcmVzWWVhciA9IHllYXIgLSAxO1xuICAgICAgICAgICAgcmVzRGF5T2ZZZWFyID0gZGF5c0luWWVhcihyZXNZZWFyKSArIGRheU9mWWVhcjtcbiAgICAgICAgfSBlbHNlIGlmIChkYXlPZlllYXIgPiBkYXlzSW5ZZWFyKHllYXIpKSB7XG4gICAgICAgICAgICByZXNZZWFyID0geWVhciArIDE7XG4gICAgICAgICAgICByZXNEYXlPZlllYXIgPSBkYXlPZlllYXIgLSBkYXlzSW5ZZWFyKHllYXIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzWWVhciA9IHllYXI7XG4gICAgICAgICAgICByZXNEYXlPZlllYXIgPSBkYXlPZlllYXI7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgeWVhcjogcmVzWWVhcixcbiAgICAgICAgICAgIGRheU9mWWVhcjogcmVzRGF5T2ZZZWFyLFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHdlZWtPZlllYXIobW9tLCBkb3csIGRveSkge1xuICAgICAgICB2YXIgd2Vla09mZnNldCA9IGZpcnN0V2Vla09mZnNldChtb20ueWVhcigpLCBkb3csIGRveSksXG4gICAgICAgICAgICB3ZWVrID0gTWF0aC5mbG9vcigobW9tLmRheU9mWWVhcigpIC0gd2Vla09mZnNldCAtIDEpIC8gNykgKyAxLFxuICAgICAgICAgICAgcmVzV2VlayxcbiAgICAgICAgICAgIHJlc1llYXI7XG5cbiAgICAgICAgaWYgKHdlZWsgPCAxKSB7XG4gICAgICAgICAgICByZXNZZWFyID0gbW9tLnllYXIoKSAtIDE7XG4gICAgICAgICAgICByZXNXZWVrID0gd2VlayArIHdlZWtzSW5ZZWFyKHJlc1llYXIsIGRvdywgZG95KTtcbiAgICAgICAgfSBlbHNlIGlmICh3ZWVrID4gd2Vla3NJblllYXIobW9tLnllYXIoKSwgZG93LCBkb3kpKSB7XG4gICAgICAgICAgICByZXNXZWVrID0gd2VlayAtIHdlZWtzSW5ZZWFyKG1vbS55ZWFyKCksIGRvdywgZG95KTtcbiAgICAgICAgICAgIHJlc1llYXIgPSBtb20ueWVhcigpICsgMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc1llYXIgPSBtb20ueWVhcigpO1xuICAgICAgICAgICAgcmVzV2VlayA9IHdlZWs7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgd2VlazogcmVzV2VlayxcbiAgICAgICAgICAgIHllYXI6IHJlc1llYXIsXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gd2Vla3NJblllYXIoeWVhciwgZG93LCBkb3kpIHtcbiAgICAgICAgdmFyIHdlZWtPZmZzZXQgPSBmaXJzdFdlZWtPZmZzZXQoeWVhciwgZG93LCBkb3kpLFxuICAgICAgICAgICAgd2Vla09mZnNldE5leHQgPSBmaXJzdFdlZWtPZmZzZXQoeWVhciArIDEsIGRvdywgZG95KTtcbiAgICAgICAgcmV0dXJuIChkYXlzSW5ZZWFyKHllYXIpIC0gd2Vla09mZnNldCArIHdlZWtPZmZzZXROZXh0KSAvIDc7XG4gICAgfVxuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ3cnLCBbJ3d3JywgMl0sICd3bycsICd3ZWVrJyk7XG4gICAgYWRkRm9ybWF0VG9rZW4oJ1cnLCBbJ1dXJywgMl0sICdXbycsICdpc29XZWVrJyk7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBhZGRSZWdleFRva2VuKCd3JywgbWF0Y2gxdG8yLCBtYXRjaDF0bzJOb0xlYWRpbmdaZXJvKTtcbiAgICBhZGRSZWdleFRva2VuKCd3dycsIG1hdGNoMXRvMiwgbWF0Y2gyKTtcbiAgICBhZGRSZWdleFRva2VuKCdXJywgbWF0Y2gxdG8yLCBtYXRjaDF0bzJOb0xlYWRpbmdaZXJvKTtcbiAgICBhZGRSZWdleFRva2VuKCdXVycsIG1hdGNoMXRvMiwgbWF0Y2gyKTtcblxuICAgIGFkZFdlZWtQYXJzZVRva2VuKFxuICAgICAgICBbJ3cnLCAnd3cnLCAnVycsICdXVyddLFxuICAgICAgICBmdW5jdGlvbiAoaW5wdXQsIHdlZWssIGNvbmZpZywgdG9rZW4pIHtcbiAgICAgICAgICAgIHdlZWtbdG9rZW4uc3Vic3RyKDAsIDEpXSA9IHRvSW50KGlucHV0KTtcbiAgICAgICAgfVxuICAgICk7XG5cbiAgICAvLyBIRUxQRVJTXG5cbiAgICAvLyBMT0NBTEVTXG5cbiAgICBmdW5jdGlvbiBsb2NhbGVXZWVrKG1vbSkge1xuICAgICAgICByZXR1cm4gd2Vla09mWWVhcihtb20sIHRoaXMuX3dlZWsuZG93LCB0aGlzLl93ZWVrLmRveSkud2VlaztcbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdExvY2FsZVdlZWsgPSB7XG4gICAgICAgIGRvdzogMCwgLy8gU3VuZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgIGRveTogNiwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNnRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBsb2NhbGVGaXJzdERheU9mV2VlaygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWsuZG93O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxvY2FsZUZpcnN0RGF5T2ZZZWFyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fd2Vlay5kb3k7XG4gICAgfVxuXG4gICAgLy8gTU9NRU5UU1xuXG4gICAgZnVuY3Rpb24gZ2V0U2V0V2VlayhpbnB1dCkge1xuICAgICAgICB2YXIgd2VlayA9IHRoaXMubG9jYWxlRGF0YSgpLndlZWsodGhpcyk7XG4gICAgICAgIHJldHVybiBpbnB1dCA9PSBudWxsID8gd2VlayA6IHRoaXMuYWRkKChpbnB1dCAtIHdlZWspICogNywgJ2QnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRTZXRJU09XZWVrKGlucHV0KSB7XG4gICAgICAgIHZhciB3ZWVrID0gd2Vla09mWWVhcih0aGlzLCAxLCA0KS53ZWVrO1xuICAgICAgICByZXR1cm4gaW5wdXQgPT0gbnVsbCA/IHdlZWsgOiB0aGlzLmFkZCgoaW5wdXQgLSB3ZWVrKSAqIDcsICdkJyk7XG4gICAgfVxuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ2QnLCAwLCAnZG8nLCAnZGF5Jyk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbignZGQnLCAwLCAwLCBmdW5jdGlvbiAoZm9ybWF0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS53ZWVrZGF5c01pbih0aGlzLCBmb3JtYXQpO1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ2RkZCcsIDAsIDAsIGZ1bmN0aW9uIChmb3JtYXQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLndlZWtkYXlzU2hvcnQodGhpcywgZm9ybWF0KTtcbiAgICB9KTtcblxuICAgIGFkZEZvcm1hdFRva2VuKCdkZGRkJywgMCwgMCwgZnVuY3Rpb24gKGZvcm1hdCkge1xuICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkud2Vla2RheXModGhpcywgZm9ybWF0KTtcbiAgICB9KTtcblxuICAgIGFkZEZvcm1hdFRva2VuKCdlJywgMCwgMCwgJ3dlZWtkYXknKTtcbiAgICBhZGRGb3JtYXRUb2tlbignRScsIDAsIDAsICdpc29XZWVrZGF5Jyk7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBhZGRSZWdleFRva2VuKCdkJywgbWF0Y2gxdG8yKTtcbiAgICBhZGRSZWdleFRva2VuKCdlJywgbWF0Y2gxdG8yKTtcbiAgICBhZGRSZWdleFRva2VuKCdFJywgbWF0Y2gxdG8yKTtcbiAgICBhZGRSZWdleFRva2VuKCdkZCcsIGZ1bmN0aW9uIChpc1N0cmljdCwgbG9jYWxlKSB7XG4gICAgICAgIHJldHVybiBsb2NhbGUud2Vla2RheXNNaW5SZWdleChpc1N0cmljdCk7XG4gICAgfSk7XG4gICAgYWRkUmVnZXhUb2tlbignZGRkJywgZnVuY3Rpb24gKGlzU3RyaWN0LCBsb2NhbGUpIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsZS53ZWVrZGF5c1Nob3J0UmVnZXgoaXNTdHJpY3QpO1xuICAgIH0pO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ2RkZGQnLCBmdW5jdGlvbiAoaXNTdHJpY3QsIGxvY2FsZSkge1xuICAgICAgICByZXR1cm4gbG9jYWxlLndlZWtkYXlzUmVnZXgoaXNTdHJpY3QpO1xuICAgIH0pO1xuXG4gICAgYWRkV2Vla1BhcnNlVG9rZW4oWydkZCcsICdkZGQnLCAnZGRkZCddLCBmdW5jdGlvbiAoaW5wdXQsIHdlZWssIGNvbmZpZywgdG9rZW4pIHtcbiAgICAgICAgdmFyIHdlZWtkYXkgPSBjb25maWcuX2xvY2FsZS53ZWVrZGF5c1BhcnNlKGlucHV0LCB0b2tlbiwgY29uZmlnLl9zdHJpY3QpO1xuICAgICAgICAvLyBpZiB3ZSBkaWRuJ3QgZ2V0IGEgd2Vla2RheSBuYW1lLCBtYXJrIHRoZSBkYXRlIGFzIGludmFsaWRcbiAgICAgICAgaWYgKHdlZWtkYXkgIT0gbnVsbCkge1xuICAgICAgICAgICAgd2Vlay5kID0gd2Vla2RheTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmludmFsaWRXZWVrZGF5ID0gaW5wdXQ7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIGFkZFdlZWtQYXJzZVRva2VuKFsnZCcsICdlJywgJ0UnXSwgZnVuY3Rpb24gKGlucHV0LCB3ZWVrLCBjb25maWcsIHRva2VuKSB7XG4gICAgICAgIHdlZWtbdG9rZW5dID0gdG9JbnQoaW5wdXQpO1xuICAgIH0pO1xuXG4gICAgLy8gSEVMUEVSU1xuXG4gICAgZnVuY3Rpb24gcGFyc2VXZWVrZGF5KGlucHV0LCBsb2NhbGUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpbnB1dCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghaXNOYU4oaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gcGFyc2VJbnQoaW5wdXQsIDEwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlucHV0ID0gbG9jYWxlLndlZWtkYXlzUGFyc2UoaW5wdXQpO1xuICAgICAgICBpZiAodHlwZW9mIGlucHV0ID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGFyc2VJc29XZWVrZGF5KGlucHV0LCBsb2NhbGUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHJldHVybiBsb2NhbGUud2Vla2RheXNQYXJzZShpbnB1dCkgJSA3IHx8IDc7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGlzTmFOKGlucHV0KSA/IG51bGwgOiBpbnB1dDtcbiAgICB9XG5cbiAgICAvLyBMT0NBTEVTXG4gICAgZnVuY3Rpb24gc2hpZnRXZWVrZGF5cyh3cywgbikge1xuICAgICAgICByZXR1cm4gd3Muc2xpY2UobiwgNykuY29uY2F0KHdzLnNsaWNlKDAsIG4pKTtcbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdExvY2FsZVdlZWtkYXlzID1cbiAgICAgICAgICAgICdTdW5kYXlfTW9uZGF5X1R1ZXNkYXlfV2VkbmVzZGF5X1RodXJzZGF5X0ZyaWRheV9TYXR1cmRheScuc3BsaXQoJ18nKSxcbiAgICAgICAgZGVmYXVsdExvY2FsZVdlZWtkYXlzU2hvcnQgPSAnU3VuX01vbl9UdWVfV2VkX1RodV9GcmlfU2F0Jy5zcGxpdCgnXycpLFxuICAgICAgICBkZWZhdWx0TG9jYWxlV2Vla2RheXNNaW4gPSAnU3VfTW9fVHVfV2VfVGhfRnJfU2EnLnNwbGl0KCdfJyksXG4gICAgICAgIGRlZmF1bHRXZWVrZGF5c1JlZ2V4ID0gbWF0Y2hXb3JkLFxuICAgICAgICBkZWZhdWx0V2Vla2RheXNTaG9ydFJlZ2V4ID0gbWF0Y2hXb3JkLFxuICAgICAgICBkZWZhdWx0V2Vla2RheXNNaW5SZWdleCA9IG1hdGNoV29yZDtcblxuICAgIGZ1bmN0aW9uIGxvY2FsZVdlZWtkYXlzKG0sIGZvcm1hdCkge1xuICAgICAgICB2YXIgd2Vla2RheXMgPSBpc0FycmF5KHRoaXMuX3dlZWtkYXlzKVxuICAgICAgICAgICAgPyB0aGlzLl93ZWVrZGF5c1xuICAgICAgICAgICAgOiB0aGlzLl93ZWVrZGF5c1tcbiAgICAgICAgICAgICAgICAgIG0gJiYgbSAhPT0gdHJ1ZSAmJiB0aGlzLl93ZWVrZGF5cy5pc0Zvcm1hdC50ZXN0KGZvcm1hdClcbiAgICAgICAgICAgICAgICAgICAgICA/ICdmb3JtYXQnXG4gICAgICAgICAgICAgICAgICAgICAgOiAnc3RhbmRhbG9uZSdcbiAgICAgICAgICAgICAgXTtcbiAgICAgICAgcmV0dXJuIG0gPT09IHRydWVcbiAgICAgICAgICAgID8gc2hpZnRXZWVrZGF5cyh3ZWVrZGF5cywgdGhpcy5fd2Vlay5kb3cpXG4gICAgICAgICAgICA6IG1cbiAgICAgICAgICAgICAgPyB3ZWVrZGF5c1ttLmRheSgpXVxuICAgICAgICAgICAgICA6IHdlZWtkYXlzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxvY2FsZVdlZWtkYXlzU2hvcnQobSkge1xuICAgICAgICByZXR1cm4gbSA9PT0gdHJ1ZVxuICAgICAgICAgICAgPyBzaGlmdFdlZWtkYXlzKHRoaXMuX3dlZWtkYXlzU2hvcnQsIHRoaXMuX3dlZWsuZG93KVxuICAgICAgICAgICAgOiBtXG4gICAgICAgICAgICAgID8gdGhpcy5fd2Vla2RheXNTaG9ydFttLmRheSgpXVxuICAgICAgICAgICAgICA6IHRoaXMuX3dlZWtkYXlzU2hvcnQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbG9jYWxlV2Vla2RheXNNaW4obSkge1xuICAgICAgICByZXR1cm4gbSA9PT0gdHJ1ZVxuICAgICAgICAgICAgPyBzaGlmdFdlZWtkYXlzKHRoaXMuX3dlZWtkYXlzTWluLCB0aGlzLl93ZWVrLmRvdylcbiAgICAgICAgICAgIDogbVxuICAgICAgICAgICAgICA/IHRoaXMuX3dlZWtkYXlzTWluW20uZGF5KCldXG4gICAgICAgICAgICAgIDogdGhpcy5fd2Vla2RheXNNaW47XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaGFuZGxlU3RyaWN0UGFyc2UkMSh3ZWVrZGF5TmFtZSwgZm9ybWF0LCBzdHJpY3QpIHtcbiAgICAgICAgdmFyIGksXG4gICAgICAgICAgICBpaSxcbiAgICAgICAgICAgIG1vbSxcbiAgICAgICAgICAgIGxsYyA9IHdlZWtkYXlOYW1lLnRvTG9jYWxlTG93ZXJDYXNlKCk7XG4gICAgICAgIGlmICghdGhpcy5fd2Vla2RheXNQYXJzZSkge1xuICAgICAgICAgICAgdGhpcy5fd2Vla2RheXNQYXJzZSA9IFtdO1xuICAgICAgICAgICAgdGhpcy5fc2hvcnRXZWVrZGF5c1BhcnNlID0gW107XG4gICAgICAgICAgICB0aGlzLl9taW5XZWVrZGF5c1BhcnNlID0gW107XG5cbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCA3OyArK2kpIHtcbiAgICAgICAgICAgICAgICBtb20gPSBjcmVhdGVVVEMoWzIwMDAsIDFdKS5kYXkoaSk7XG4gICAgICAgICAgICAgICAgdGhpcy5fbWluV2Vla2RheXNQYXJzZVtpXSA9IHRoaXMud2Vla2RheXNNaW4oXG4gICAgICAgICAgICAgICAgICAgIG1vbSxcbiAgICAgICAgICAgICAgICAgICAgJydcbiAgICAgICAgICAgICAgICApLnRvTG9jYWxlTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fc2hvcnRXZWVrZGF5c1BhcnNlW2ldID0gdGhpcy53ZWVrZGF5c1Nob3J0KFxuICAgICAgICAgICAgICAgICAgICBtb20sXG4gICAgICAgICAgICAgICAgICAgICcnXG4gICAgICAgICAgICAgICAgKS50b0xvY2FsZUxvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3dlZWtkYXlzUGFyc2VbaV0gPSB0aGlzLndlZWtkYXlzKG1vbSwgJycpLnRvTG9jYWxlTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc3RyaWN0KSB7XG4gICAgICAgICAgICBpZiAoZm9ybWF0ID09PSAnZGRkZCcpIHtcbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl93ZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBpaSAhPT0gLTEgPyBpaSA6IG51bGw7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGZvcm1hdCA9PT0gJ2RkZCcpIHtcbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9zaG9ydFdlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlpICE9PSAtMSA/IGlpIDogbnVsbDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fbWluV2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gaWkgIT09IC0xID8gaWkgOiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGZvcm1hdCA9PT0gJ2RkZGQnKSB7XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fd2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICBpZiAoaWkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpaTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fc2hvcnRXZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIGlmIChpaSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9taW5XZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBpaSAhPT0gLTEgPyBpaSA6IG51bGw7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGZvcm1hdCA9PT0gJ2RkZCcpIHtcbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9zaG9ydFdlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgaWYgKGlpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaWk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX3dlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgaWYgKGlpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaWk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX21pbldlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlpICE9PSAtMSA/IGlpIDogbnVsbDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fbWluV2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICBpZiAoaWkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpaTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fd2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICBpZiAoaWkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpaTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fc2hvcnRXZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBpaSAhPT0gLTEgPyBpaSA6IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsb2NhbGVXZWVrZGF5c1BhcnNlKHdlZWtkYXlOYW1lLCBmb3JtYXQsIHN0cmljdCkge1xuICAgICAgICB2YXIgaSwgbW9tLCByZWdleDtcblxuICAgICAgICBpZiAodGhpcy5fd2Vla2RheXNQYXJzZUV4YWN0KSB7XG4gICAgICAgICAgICByZXR1cm4gaGFuZGxlU3RyaWN0UGFyc2UkMS5jYWxsKHRoaXMsIHdlZWtkYXlOYW1lLCBmb3JtYXQsIHN0cmljdCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXRoaXMuX3dlZWtkYXlzUGFyc2UpIHtcbiAgICAgICAgICAgIHRoaXMuX3dlZWtkYXlzUGFyc2UgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuX21pbldlZWtkYXlzUGFyc2UgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuX3Nob3J0V2Vla2RheXNQYXJzZSA9IFtdO1xuICAgICAgICAgICAgdGhpcy5fZnVsbFdlZWtkYXlzUGFyc2UgPSBbXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCA3OyBpKyspIHtcbiAgICAgICAgICAgIC8vIG1ha2UgdGhlIHJlZ2V4IGlmIHdlIGRvbid0IGhhdmUgaXQgYWxyZWFkeVxuXG4gICAgICAgICAgICBtb20gPSBjcmVhdGVVVEMoWzIwMDAsIDFdKS5kYXkoaSk7XG4gICAgICAgICAgICBpZiAoc3RyaWN0ICYmICF0aGlzLl9mdWxsV2Vla2RheXNQYXJzZVtpXSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2Z1bGxXZWVrZGF5c1BhcnNlW2ldID0gbmV3IFJlZ0V4cChcbiAgICAgICAgICAgICAgICAgICAgJ14nICsgdGhpcy53ZWVrZGF5cyhtb20sICcnKS5yZXBsYWNlKCcuJywgJ1xcXFwuPycpICsgJyQnLFxuICAgICAgICAgICAgICAgICAgICAnaSdcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIHRoaXMuX3Nob3J0V2Vla2RheXNQYXJzZVtpXSA9IG5ldyBSZWdFeHAoXG4gICAgICAgICAgICAgICAgICAgICdeJyArIHRoaXMud2Vla2RheXNTaG9ydChtb20sICcnKS5yZXBsYWNlKCcuJywgJ1xcXFwuPycpICsgJyQnLFxuICAgICAgICAgICAgICAgICAgICAnaSdcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIHRoaXMuX21pbldlZWtkYXlzUGFyc2VbaV0gPSBuZXcgUmVnRXhwKFxuICAgICAgICAgICAgICAgICAgICAnXicgKyB0aGlzLndlZWtkYXlzTWluKG1vbSwgJycpLnJlcGxhY2UoJy4nLCAnXFxcXC4/JykgKyAnJCcsXG4gICAgICAgICAgICAgICAgICAgICdpJ1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXRoaXMuX3dlZWtkYXlzUGFyc2VbaV0pIHtcbiAgICAgICAgICAgICAgICByZWdleCA9XG4gICAgICAgICAgICAgICAgICAgICdeJyArXG4gICAgICAgICAgICAgICAgICAgIHRoaXMud2Vla2RheXMobW9tLCAnJykgK1xuICAgICAgICAgICAgICAgICAgICAnfF4nICtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy53ZWVrZGF5c1Nob3J0KG1vbSwgJycpICtcbiAgICAgICAgICAgICAgICAgICAgJ3xeJyArXG4gICAgICAgICAgICAgICAgICAgIHRoaXMud2Vla2RheXNNaW4obW9tLCAnJyk7XG4gICAgICAgICAgICAgICAgdGhpcy5fd2Vla2RheXNQYXJzZVtpXSA9IG5ldyBSZWdFeHAocmVnZXgucmVwbGFjZSgnLicsICcnKSwgJ2knKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHRlc3QgdGhlIHJlZ2V4XG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgc3RyaWN0ICYmXG4gICAgICAgICAgICAgICAgZm9ybWF0ID09PSAnZGRkZCcgJiZcbiAgICAgICAgICAgICAgICB0aGlzLl9mdWxsV2Vla2RheXNQYXJzZVtpXS50ZXN0KHdlZWtkYXlOYW1lKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgICAgICAgIHN0cmljdCAmJlxuICAgICAgICAgICAgICAgIGZvcm1hdCA9PT0gJ2RkZCcgJiZcbiAgICAgICAgICAgICAgICB0aGlzLl9zaG9ydFdlZWtkYXlzUGFyc2VbaV0udGVzdCh3ZWVrZGF5TmFtZSlcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICAgICAgICBzdHJpY3QgJiZcbiAgICAgICAgICAgICAgICBmb3JtYXQgPT09ICdkZCcgJiZcbiAgICAgICAgICAgICAgICB0aGlzLl9taW5XZWVrZGF5c1BhcnNlW2ldLnRlc3Qod2Vla2RheU5hbWUpXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIXN0cmljdCAmJiB0aGlzLl93ZWVrZGF5c1BhcnNlW2ldLnRlc3Qod2Vla2RheU5hbWUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICBmdW5jdGlvbiBnZXRTZXREYXlPZldlZWsoaW5wdXQpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0ICE9IG51bGwgPyB0aGlzIDogTmFOO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGRheSA9IGdldCh0aGlzLCAnRGF5Jyk7XG4gICAgICAgIGlmIChpbnB1dCAhPSBudWxsKSB7XG4gICAgICAgICAgICBpbnB1dCA9IHBhcnNlV2Vla2RheShpbnB1dCwgdGhpcy5sb2NhbGVEYXRhKCkpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYWRkKGlucHV0IC0gZGF5LCAnZCcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGRheTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFNldExvY2FsZURheU9mV2VlayhpbnB1dCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gaW5wdXQgIT0gbnVsbCA/IHRoaXMgOiBOYU47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHdlZWtkYXkgPSAodGhpcy5kYXkoKSArIDcgLSB0aGlzLmxvY2FsZURhdGEoKS5fd2Vlay5kb3cpICUgNztcbiAgICAgICAgcmV0dXJuIGlucHV0ID09IG51bGwgPyB3ZWVrZGF5IDogdGhpcy5hZGQoaW5wdXQgLSB3ZWVrZGF5LCAnZCcpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFNldElTT0RheU9mV2VlayhpbnB1dCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gaW5wdXQgIT0gbnVsbCA/IHRoaXMgOiBOYU47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBiZWhhdmVzIHRoZSBzYW1lIGFzIG1vbWVudCNkYXkgZXhjZXB0XG4gICAgICAgIC8vIGFzIGEgZ2V0dGVyLCByZXR1cm5zIDcgaW5zdGVhZCBvZiAwICgxLTcgcmFuZ2UgaW5zdGVhZCBvZiAwLTYpXG4gICAgICAgIC8vIGFzIGEgc2V0dGVyLCBzdW5kYXkgc2hvdWxkIGJlbG9uZyB0byB0aGUgcHJldmlvdXMgd2Vlay5cblxuICAgICAgICBpZiAoaW5wdXQgIT0gbnVsbCkge1xuICAgICAgICAgICAgdmFyIHdlZWtkYXkgPSBwYXJzZUlzb1dlZWtkYXkoaW5wdXQsIHRoaXMubG9jYWxlRGF0YSgpKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRheSh0aGlzLmRheSgpICUgNyA/IHdlZWtkYXkgOiB3ZWVrZGF5IC0gNyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5kYXkoKSB8fCA3O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gd2Vla2RheXNSZWdleChpc1N0cmljdCkge1xuICAgICAgICBpZiAodGhpcy5fd2Vla2RheXNQYXJzZUV4YWN0KSB7XG4gICAgICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ193ZWVrZGF5c1JlZ2V4JykpIHtcbiAgICAgICAgICAgICAgICBjb21wdXRlV2Vla2RheXNQYXJzZS5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlzU3RyaWN0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWtkYXlzU3RyaWN0UmVnZXg7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl93ZWVrZGF5c1JlZ2V4O1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfd2Vla2RheXNSZWdleCcpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fd2Vla2RheXNSZWdleCA9IGRlZmF1bHRXZWVrZGF5c1JlZ2V4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWtkYXlzU3RyaWN0UmVnZXggJiYgaXNTdHJpY3RcbiAgICAgICAgICAgICAgICA/IHRoaXMuX3dlZWtkYXlzU3RyaWN0UmVnZXhcbiAgICAgICAgICAgICAgICA6IHRoaXMuX3dlZWtkYXlzUmVnZXg7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiB3ZWVrZGF5c1Nob3J0UmVnZXgoaXNTdHJpY3QpIHtcbiAgICAgICAgaWYgKHRoaXMuX3dlZWtkYXlzUGFyc2VFeGFjdCkge1xuICAgICAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfd2Vla2RheXNSZWdleCcpKSB7XG4gICAgICAgICAgICAgICAgY29tcHV0ZVdlZWtkYXlzUGFyc2UuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpc1N0cmljdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl93ZWVrZGF5c1Nob3J0U3RyaWN0UmVnZXg7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl93ZWVrZGF5c1Nob3J0UmVnZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ193ZWVrZGF5c1Nob3J0UmVnZXgnKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3dlZWtkYXlzU2hvcnRSZWdleCA9IGRlZmF1bHRXZWVrZGF5c1Nob3J0UmVnZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fd2Vla2RheXNTaG9ydFN0cmljdFJlZ2V4ICYmIGlzU3RyaWN0XG4gICAgICAgICAgICAgICAgPyB0aGlzLl93ZWVrZGF5c1Nob3J0U3RyaWN0UmVnZXhcbiAgICAgICAgICAgICAgICA6IHRoaXMuX3dlZWtkYXlzU2hvcnRSZWdleDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHdlZWtkYXlzTWluUmVnZXgoaXNTdHJpY3QpIHtcbiAgICAgICAgaWYgKHRoaXMuX3dlZWtkYXlzUGFyc2VFeGFjdCkge1xuICAgICAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfd2Vla2RheXNSZWdleCcpKSB7XG4gICAgICAgICAgICAgICAgY29tcHV0ZVdlZWtkYXlzUGFyc2UuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpc1N0cmljdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl93ZWVrZGF5c01pblN0cmljdFJlZ2V4O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fd2Vla2RheXNNaW5SZWdleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX3dlZWtkYXlzTWluUmVnZXgnKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3dlZWtkYXlzTWluUmVnZXggPSBkZWZhdWx0V2Vla2RheXNNaW5SZWdleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLl93ZWVrZGF5c01pblN0cmljdFJlZ2V4ICYmIGlzU3RyaWN0XG4gICAgICAgICAgICAgICAgPyB0aGlzLl93ZWVrZGF5c01pblN0cmljdFJlZ2V4XG4gICAgICAgICAgICAgICAgOiB0aGlzLl93ZWVrZGF5c01pblJlZ2V4O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY29tcHV0ZVdlZWtkYXlzUGFyc2UoKSB7XG4gICAgICAgIGZ1bmN0aW9uIGNtcExlblJldihhLCBiKSB7XG4gICAgICAgICAgICByZXR1cm4gYi5sZW5ndGggLSBhLmxlbmd0aDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBtaW5QaWVjZXMgPSBbXSxcbiAgICAgICAgICAgIHNob3J0UGllY2VzID0gW10sXG4gICAgICAgICAgICBsb25nUGllY2VzID0gW10sXG4gICAgICAgICAgICBtaXhlZFBpZWNlcyA9IFtdLFxuICAgICAgICAgICAgaSxcbiAgICAgICAgICAgIG1vbSxcbiAgICAgICAgICAgIG1pbnAsXG4gICAgICAgICAgICBzaG9ydHAsXG4gICAgICAgICAgICBsb25ncDtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IDc7IGkrKykge1xuICAgICAgICAgICAgLy8gbWFrZSB0aGUgcmVnZXggaWYgd2UgZG9uJ3QgaGF2ZSBpdCBhbHJlYWR5XG4gICAgICAgICAgICBtb20gPSBjcmVhdGVVVEMoWzIwMDAsIDFdKS5kYXkoaSk7XG4gICAgICAgICAgICBtaW5wID0gcmVnZXhFc2NhcGUodGhpcy53ZWVrZGF5c01pbihtb20sICcnKSk7XG4gICAgICAgICAgICBzaG9ydHAgPSByZWdleEVzY2FwZSh0aGlzLndlZWtkYXlzU2hvcnQobW9tLCAnJykpO1xuICAgICAgICAgICAgbG9uZ3AgPSByZWdleEVzY2FwZSh0aGlzLndlZWtkYXlzKG1vbSwgJycpKTtcbiAgICAgICAgICAgIG1pblBpZWNlcy5wdXNoKG1pbnApO1xuICAgICAgICAgICAgc2hvcnRQaWVjZXMucHVzaChzaG9ydHApO1xuICAgICAgICAgICAgbG9uZ1BpZWNlcy5wdXNoKGxvbmdwKTtcbiAgICAgICAgICAgIG1peGVkUGllY2VzLnB1c2gobWlucCk7XG4gICAgICAgICAgICBtaXhlZFBpZWNlcy5wdXNoKHNob3J0cCk7XG4gICAgICAgICAgICBtaXhlZFBpZWNlcy5wdXNoKGxvbmdwKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBTb3J0aW5nIG1ha2VzIHN1cmUgaWYgb25lIHdlZWtkYXkgKG9yIGFiYnIpIGlzIGEgcHJlZml4IG9mIGFub3RoZXIgaXRcbiAgICAgICAgLy8gd2lsbCBtYXRjaCB0aGUgbG9uZ2VyIHBpZWNlLlxuICAgICAgICBtaW5QaWVjZXMuc29ydChjbXBMZW5SZXYpO1xuICAgICAgICBzaG9ydFBpZWNlcy5zb3J0KGNtcExlblJldik7XG4gICAgICAgIGxvbmdQaWVjZXMuc29ydChjbXBMZW5SZXYpO1xuICAgICAgICBtaXhlZFBpZWNlcy5zb3J0KGNtcExlblJldik7XG5cbiAgICAgICAgdGhpcy5fd2Vla2RheXNSZWdleCA9IG5ldyBSZWdFeHAoJ14oJyArIG1peGVkUGllY2VzLmpvaW4oJ3wnKSArICcpJywgJ2knKTtcbiAgICAgICAgdGhpcy5fd2Vla2RheXNTaG9ydFJlZ2V4ID0gdGhpcy5fd2Vla2RheXNSZWdleDtcbiAgICAgICAgdGhpcy5fd2Vla2RheXNNaW5SZWdleCA9IHRoaXMuX3dlZWtkYXlzUmVnZXg7XG5cbiAgICAgICAgdGhpcy5fd2Vla2RheXNTdHJpY3RSZWdleCA9IG5ldyBSZWdFeHAoXG4gICAgICAgICAgICAnXignICsgbG9uZ1BpZWNlcy5qb2luKCd8JykgKyAnKScsXG4gICAgICAgICAgICAnaSdcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5fd2Vla2RheXNTaG9ydFN0cmljdFJlZ2V4ID0gbmV3IFJlZ0V4cChcbiAgICAgICAgICAgICdeKCcgKyBzaG9ydFBpZWNlcy5qb2luKCd8JykgKyAnKScsXG4gICAgICAgICAgICAnaSdcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5fd2Vla2RheXNNaW5TdHJpY3RSZWdleCA9IG5ldyBSZWdFeHAoXG4gICAgICAgICAgICAnXignICsgbWluUGllY2VzLmpvaW4oJ3wnKSArICcpJyxcbiAgICAgICAgICAgICdpJ1xuICAgICAgICApO1xuICAgIH1cblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGZ1bmN0aW9uIGhGb3JtYXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmhvdXJzKCkgJSAxMiB8fCAxMjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBrRm9ybWF0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5ob3VycygpIHx8IDI0O1xuICAgIH1cblxuICAgIGFkZEZvcm1hdFRva2VuKCdIJywgWydISCcsIDJdLCAwLCAnaG91cicpO1xuICAgIGFkZEZvcm1hdFRva2VuKCdoJywgWydoaCcsIDJdLCAwLCBoRm9ybWF0KTtcbiAgICBhZGRGb3JtYXRUb2tlbignaycsIFsna2snLCAyXSwgMCwga0Zvcm1hdCk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbignaG1tJywgMCwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gJycgKyBoRm9ybWF0LmFwcGx5KHRoaXMpICsgemVyb0ZpbGwodGhpcy5taW51dGVzKCksIDIpO1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ2htbXNzJywgMCwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgJycgK1xuICAgICAgICAgICAgaEZvcm1hdC5hcHBseSh0aGlzKSArXG4gICAgICAgICAgICB6ZXJvRmlsbCh0aGlzLm1pbnV0ZXMoKSwgMikgK1xuICAgICAgICAgICAgemVyb0ZpbGwodGhpcy5zZWNvbmRzKCksIDIpXG4gICAgICAgICk7XG4gICAgfSk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbignSG1tJywgMCwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gJycgKyB0aGlzLmhvdXJzKCkgKyB6ZXJvRmlsbCh0aGlzLm1pbnV0ZXMoKSwgMik7XG4gICAgfSk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbignSG1tc3MnLCAwLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAnJyArXG4gICAgICAgICAgICB0aGlzLmhvdXJzKCkgK1xuICAgICAgICAgICAgemVyb0ZpbGwodGhpcy5taW51dGVzKCksIDIpICtcbiAgICAgICAgICAgIHplcm9GaWxsKHRoaXMuc2Vjb25kcygpLCAyKVxuICAgICAgICApO1xuICAgIH0pO1xuXG4gICAgZnVuY3Rpb24gbWVyaWRpZW0odG9rZW4sIGxvd2VyY2FzZSkge1xuICAgICAgICBhZGRGb3JtYXRUb2tlbih0b2tlbiwgMCwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLm1lcmlkaWVtKFxuICAgICAgICAgICAgICAgIHRoaXMuaG91cnMoKSxcbiAgICAgICAgICAgICAgICB0aGlzLm1pbnV0ZXMoKSxcbiAgICAgICAgICAgICAgICBsb3dlcmNhc2VcbiAgICAgICAgICAgICk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIG1lcmlkaWVtKCdhJywgdHJ1ZSk7XG4gICAgbWVyaWRpZW0oJ0EnLCBmYWxzZSk7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBmdW5jdGlvbiBtYXRjaE1lcmlkaWVtKGlzU3RyaWN0LCBsb2NhbGUpIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsZS5fbWVyaWRpZW1QYXJzZTtcbiAgICB9XG5cbiAgICBhZGRSZWdleFRva2VuKCdhJywgbWF0Y2hNZXJpZGllbSk7XG4gICAgYWRkUmVnZXhUb2tlbignQScsIG1hdGNoTWVyaWRpZW0pO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ0gnLCBtYXRjaDF0bzIsIG1hdGNoMXRvMkhhc1plcm8pO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ2gnLCBtYXRjaDF0bzIsIG1hdGNoMXRvMk5vTGVhZGluZ1plcm8pO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ2snLCBtYXRjaDF0bzIsIG1hdGNoMXRvMk5vTGVhZGluZ1plcm8pO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ0hIJywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ2hoJywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ2trJywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuXG4gICAgYWRkUmVnZXhUb2tlbignaG1tJywgbWF0Y2gzdG80KTtcbiAgICBhZGRSZWdleFRva2VuKCdobW1zcycsIG1hdGNoNXRvNik7XG4gICAgYWRkUmVnZXhUb2tlbignSG1tJywgbWF0Y2gzdG80KTtcbiAgICBhZGRSZWdleFRva2VuKCdIbW1zcycsIG1hdGNoNXRvNik7XG5cbiAgICBhZGRQYXJzZVRva2VuKFsnSCcsICdISCddLCBIT1VSKTtcbiAgICBhZGRQYXJzZVRva2VuKFsnaycsICdrayddLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICAgICAgdmFyIGtJbnB1dCA9IHRvSW50KGlucHV0KTtcbiAgICAgICAgYXJyYXlbSE9VUl0gPSBrSW5wdXQgPT09IDI0ID8gMCA6IGtJbnB1dDtcbiAgICB9KTtcbiAgICBhZGRQYXJzZVRva2VuKFsnYScsICdBJ10sIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgICAgICBjb25maWcuX2lzUG0gPSBjb25maWcuX2xvY2FsZS5pc1BNKGlucHV0KTtcbiAgICAgICAgY29uZmlnLl9tZXJpZGllbSA9IGlucHV0O1xuICAgIH0pO1xuICAgIGFkZFBhcnNlVG9rZW4oWydoJywgJ2hoJ10sIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgICAgICBhcnJheVtIT1VSXSA9IHRvSW50KGlucHV0KTtcbiAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuYmlnSG91ciA9IHRydWU7XG4gICAgfSk7XG4gICAgYWRkUGFyc2VUb2tlbignaG1tJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgICAgIHZhciBwb3MgPSBpbnB1dC5sZW5ndGggLSAyO1xuICAgICAgICBhcnJheVtIT1VSXSA9IHRvSW50KGlucHV0LnN1YnN0cigwLCBwb3MpKTtcbiAgICAgICAgYXJyYXlbTUlOVVRFXSA9IHRvSW50KGlucHV0LnN1YnN0cihwb3MpKTtcbiAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuYmlnSG91ciA9IHRydWU7XG4gICAgfSk7XG4gICAgYWRkUGFyc2VUb2tlbignaG1tc3MnLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICAgICAgdmFyIHBvczEgPSBpbnB1dC5sZW5ndGggLSA0LFxuICAgICAgICAgICAgcG9zMiA9IGlucHV0Lmxlbmd0aCAtIDI7XG4gICAgICAgIGFycmF5W0hPVVJdID0gdG9JbnQoaW5wdXQuc3Vic3RyKDAsIHBvczEpKTtcbiAgICAgICAgYXJyYXlbTUlOVVRFXSA9IHRvSW50KGlucHV0LnN1YnN0cihwb3MxLCAyKSk7XG4gICAgICAgIGFycmF5W1NFQ09ORF0gPSB0b0ludChpbnB1dC5zdWJzdHIocG9zMikpO1xuICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5iaWdIb3VyID0gdHJ1ZTtcbiAgICB9KTtcbiAgICBhZGRQYXJzZVRva2VuKCdIbW0nLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICAgICAgdmFyIHBvcyA9IGlucHV0Lmxlbmd0aCAtIDI7XG4gICAgICAgIGFycmF5W0hPVVJdID0gdG9JbnQoaW5wdXQuc3Vic3RyKDAsIHBvcykpO1xuICAgICAgICBhcnJheVtNSU5VVEVdID0gdG9JbnQoaW5wdXQuc3Vic3RyKHBvcykpO1xuICAgIH0pO1xuICAgIGFkZFBhcnNlVG9rZW4oJ0htbXNzJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgICAgIHZhciBwb3MxID0gaW5wdXQubGVuZ3RoIC0gNCxcbiAgICAgICAgICAgIHBvczIgPSBpbnB1dC5sZW5ndGggLSAyO1xuICAgICAgICBhcnJheVtIT1VSXSA9IHRvSW50KGlucHV0LnN1YnN0cigwLCBwb3MxKSk7XG4gICAgICAgIGFycmF5W01JTlVURV0gPSB0b0ludChpbnB1dC5zdWJzdHIocG9zMSwgMikpO1xuICAgICAgICBhcnJheVtTRUNPTkRdID0gdG9JbnQoaW5wdXQuc3Vic3RyKHBvczIpKTtcbiAgICB9KTtcblxuICAgIC8vIExPQ0FMRVNcblxuICAgIGZ1bmN0aW9uIGxvY2FsZUlzUE0oaW5wdXQpIHtcbiAgICAgICAgLy8gSUU4IFF1aXJrcyBNb2RlICYgSUU3IFN0YW5kYXJkcyBNb2RlIGRvIG5vdCBhbGxvdyBhY2Nlc3Npbmcgc3RyaW5ncyBsaWtlIGFycmF5c1xuICAgICAgICAvLyBVc2luZyBjaGFyQXQgc2hvdWxkIGJlIG1vcmUgY29tcGF0aWJsZS5cbiAgICAgICAgcmV0dXJuIChpbnB1dCArICcnKS50b0xvd2VyQ2FzZSgpLmNoYXJBdCgwKSA9PT0gJ3AnO1xuICAgIH1cblxuICAgIHZhciBkZWZhdWx0TG9jYWxlTWVyaWRpZW1QYXJzZSA9IC9bYXBdXFwuP20/XFwuPy9pLFxuICAgICAgICAvLyBTZXR0aW5nIHRoZSBob3VyIHNob3VsZCBrZWVwIHRoZSB0aW1lLCBiZWNhdXNlIHRoZSB1c2VyIGV4cGxpY2l0bHlcbiAgICAgICAgLy8gc3BlY2lmaWVkIHdoaWNoIGhvdXIgdGhleSB3YW50LiBTbyB0cnlpbmcgdG8gbWFpbnRhaW4gdGhlIHNhbWUgaG91ciAoaW5cbiAgICAgICAgLy8gYSBuZXcgdGltZXpvbmUpIG1ha2VzIHNlbnNlLiBBZGRpbmcvc3VidHJhY3RpbmcgaG91cnMgZG9lcyBub3QgZm9sbG93XG4gICAgICAgIC8vIHRoaXMgcnVsZS5cbiAgICAgICAgZ2V0U2V0SG91ciA9IG1ha2VHZXRTZXQoJ0hvdXJzJywgdHJ1ZSk7XG5cbiAgICBmdW5jdGlvbiBsb2NhbGVNZXJpZGllbShob3VycywgbWludXRlcywgaXNMb3dlcikge1xuICAgICAgICBpZiAoaG91cnMgPiAxMSkge1xuICAgICAgICAgICAgcmV0dXJuIGlzTG93ZXIgPyAncG0nIDogJ1BNJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBpc0xvd2VyID8gJ2FtJyA6ICdBTSc7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgYmFzZUNvbmZpZyA9IHtcbiAgICAgICAgY2FsZW5kYXI6IGRlZmF1bHRDYWxlbmRhcixcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IGRlZmF1bHRMb25nRGF0ZUZvcm1hdCxcbiAgICAgICAgaW52YWxpZERhdGU6IGRlZmF1bHRJbnZhbGlkRGF0ZSxcbiAgICAgICAgb3JkaW5hbDogZGVmYXVsdE9yZGluYWwsXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IGRlZmF1bHREYXlPZk1vbnRoT3JkaW5hbFBhcnNlLFxuICAgICAgICByZWxhdGl2ZVRpbWU6IGRlZmF1bHRSZWxhdGl2ZVRpbWUsXG5cbiAgICAgICAgbW9udGhzOiBkZWZhdWx0TG9jYWxlTW9udGhzLFxuICAgICAgICBtb250aHNTaG9ydDogZGVmYXVsdExvY2FsZU1vbnRoc1Nob3J0LFxuXG4gICAgICAgIHdlZWs6IGRlZmF1bHRMb2NhbGVXZWVrLFxuXG4gICAgICAgIHdlZWtkYXlzOiBkZWZhdWx0TG9jYWxlV2Vla2RheXMsXG4gICAgICAgIHdlZWtkYXlzTWluOiBkZWZhdWx0TG9jYWxlV2Vla2RheXNNaW4sXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6IGRlZmF1bHRMb2NhbGVXZWVrZGF5c1Nob3J0LFxuXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IGRlZmF1bHRMb2NhbGVNZXJpZGllbVBhcnNlLFxuICAgIH07XG5cbiAgICAvLyBpbnRlcm5hbCBzdG9yYWdlIGZvciBsb2NhbGUgY29uZmlnIGZpbGVzXG4gICAgdmFyIGxvY2FsZXMgPSB7fSxcbiAgICAgICAgbG9jYWxlRmFtaWxpZXMgPSB7fSxcbiAgICAgICAgZ2xvYmFsTG9jYWxlO1xuXG4gICAgZnVuY3Rpb24gY29tbW9uUHJlZml4KGFycjEsIGFycjIpIHtcbiAgICAgICAgdmFyIGksXG4gICAgICAgICAgICBtaW5sID0gTWF0aC5taW4oYXJyMS5sZW5ndGgsIGFycjIubGVuZ3RoKTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IG1pbmw7IGkgKz0gMSkge1xuICAgICAgICAgICAgaWYgKGFycjFbaV0gIT09IGFycjJbaV0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWlubDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBub3JtYWxpemVMb2NhbGUoa2V5KSB7XG4gICAgICAgIHJldHVybiBrZXkgPyBrZXkudG9Mb3dlckNhc2UoKS5yZXBsYWNlKCdfJywgJy0nKSA6IGtleTtcbiAgICB9XG5cbiAgICAvLyBwaWNrIHRoZSBsb2NhbGUgZnJvbSB0aGUgYXJyYXlcbiAgICAvLyB0cnkgWydlbi1hdScsICdlbi1nYiddIGFzICdlbi1hdScsICdlbi1nYicsICdlbicsIGFzIGluIG1vdmUgdGhyb3VnaCB0aGUgbGlzdCB0cnlpbmcgZWFjaFxuICAgIC8vIHN1YnN0cmluZyBmcm9tIG1vc3Qgc3BlY2lmaWMgdG8gbGVhc3QsIGJ1dCBtb3ZlIHRvIHRoZSBuZXh0IGFycmF5IGl0ZW0gaWYgaXQncyBhIG1vcmUgc3BlY2lmaWMgdmFyaWFudCB0aGFuIHRoZSBjdXJyZW50IHJvb3RcbiAgICBmdW5jdGlvbiBjaG9vc2VMb2NhbGUobmFtZXMpIHtcbiAgICAgICAgdmFyIGkgPSAwLFxuICAgICAgICAgICAgaixcbiAgICAgICAgICAgIG5leHQsXG4gICAgICAgICAgICBsb2NhbGUsXG4gICAgICAgICAgICBzcGxpdDtcblxuICAgICAgICB3aGlsZSAoaSA8IG5hbWVzLmxlbmd0aCkge1xuICAgICAgICAgICAgc3BsaXQgPSBub3JtYWxpemVMb2NhbGUobmFtZXNbaV0pLnNwbGl0KCctJyk7XG4gICAgICAgICAgICBqID0gc3BsaXQubGVuZ3RoO1xuICAgICAgICAgICAgbmV4dCA9IG5vcm1hbGl6ZUxvY2FsZShuYW1lc1tpICsgMV0pO1xuICAgICAgICAgICAgbmV4dCA9IG5leHQgPyBuZXh0LnNwbGl0KCctJykgOiBudWxsO1xuICAgICAgICAgICAgd2hpbGUgKGogPiAwKSB7XG4gICAgICAgICAgICAgICAgbG9jYWxlID0gbG9hZExvY2FsZShzcGxpdC5zbGljZSgwLCBqKS5qb2luKCctJykpO1xuICAgICAgICAgICAgICAgIGlmIChsb2NhbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGxvY2FsZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICBuZXh0ICYmXG4gICAgICAgICAgICAgICAgICAgIG5leHQubGVuZ3RoID49IGogJiZcbiAgICAgICAgICAgICAgICAgICAgY29tbW9uUHJlZml4KHNwbGl0LCBuZXh0KSA+PSBqIC0gMVxuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICAvL3RoZSBuZXh0IGFycmF5IGl0ZW0gaXMgYmV0dGVyIHRoYW4gYSBzaGFsbG93ZXIgc3Vic3RyaW5nIG9mIHRoaXMgb25lXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBqLS07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpKys7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGdsb2JhbExvY2FsZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0xvY2FsZU5hbWVTYW5lKG5hbWUpIHtcbiAgICAgICAgLy8gUHJldmVudCBuYW1lcyB0aGF0IGxvb2sgbGlrZSBmaWxlc3lzdGVtIHBhdGhzLCBpLmUgY29udGFpbiAnLycgb3IgJ1xcJ1xuICAgICAgICAvLyBFbnN1cmUgbmFtZSBpcyBhdmFpbGFibGUgYW5kIGZ1bmN0aW9uIHJldHVybnMgYm9vbGVhblxuICAgICAgICByZXR1cm4gISEobmFtZSAmJiBuYW1lLm1hdGNoKCdeW14vXFxcXFxcXFxdKiQnKSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbG9hZExvY2FsZShuYW1lKSB7XG4gICAgICAgIHZhciBvbGRMb2NhbGUgPSBudWxsLFxuICAgICAgICAgICAgYWxpYXNlZFJlcXVpcmU7XG4gICAgICAgIC8vIFRPRE86IEZpbmQgYSBiZXR0ZXIgd2F5IHRvIHJlZ2lzdGVyIGFuZCBsb2FkIGFsbCB0aGUgbG9jYWxlcyBpbiBOb2RlXG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIGxvY2FsZXNbbmFtZV0gPT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgICAgIG1vZHVsZSAmJlxuICAgICAgICAgICAgbW9kdWxlLmV4cG9ydHMgJiZcbiAgICAgICAgICAgIGlzTG9jYWxlTmFtZVNhbmUobmFtZSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIG9sZExvY2FsZSA9IGdsb2JhbExvY2FsZS5fYWJicjtcbiAgICAgICAgICAgICAgICBhbGlhc2VkUmVxdWlyZSA9IHJlcXVpcmU7XG4gICAgICAgICAgICAgICAgYWxpYXNlZFJlcXVpcmUoJy4vbG9jYWxlLycgKyBuYW1lKTtcbiAgICAgICAgICAgICAgICBnZXRTZXRHbG9iYWxMb2NhbGUob2xkTG9jYWxlKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAvLyBtYXJrIGFzIG5vdCBmb3VuZCB0byBhdm9pZCByZXBlYXRpbmcgZXhwZW5zaXZlIGZpbGUgcmVxdWlyZSBjYWxsIGNhdXNpbmcgaGlnaCBDUFVcbiAgICAgICAgICAgICAgICAvLyB3aGVuIHRyeWluZyB0byBmaW5kIGVuLVVTLCBlbl9VUywgZW4tdXMgZm9yIGV2ZXJ5IGZvcm1hdCBjYWxsXG4gICAgICAgICAgICAgICAgbG9jYWxlc1tuYW1lXSA9IG51bGw7IC8vIG51bGwgbWVhbnMgbm90IGZvdW5kXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGxvY2FsZXNbbmFtZV07XG4gICAgfVxuXG4gICAgLy8gVGhpcyBmdW5jdGlvbiB3aWxsIGxvYWQgbG9jYWxlIGFuZCB0aGVuIHNldCB0aGUgZ2xvYmFsIGxvY2FsZS4gIElmXG4gICAgLy8gbm8gYXJndW1lbnRzIGFyZSBwYXNzZWQgaW4sIGl0IHdpbGwgc2ltcGx5IHJldHVybiB0aGUgY3VycmVudCBnbG9iYWxcbiAgICAvLyBsb2NhbGUga2V5LlxuICAgIGZ1bmN0aW9uIGdldFNldEdsb2JhbExvY2FsZShrZXksIHZhbHVlcykge1xuICAgICAgICB2YXIgZGF0YTtcbiAgICAgICAgaWYgKGtleSkge1xuICAgICAgICAgICAgaWYgKGlzVW5kZWZpbmVkKHZhbHVlcykpIHtcbiAgICAgICAgICAgICAgICBkYXRhID0gZ2V0TG9jYWxlKGtleSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGRhdGEgPSBkZWZpbmVMb2NhbGUoa2V5LCB2YWx1ZXMpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoZGF0YSkge1xuICAgICAgICAgICAgICAgIC8vIG1vbWVudC5kdXJhdGlvbi5fbG9jYWxlID0gbW9tZW50Ll9sb2NhbGUgPSBkYXRhO1xuICAgICAgICAgICAgICAgIGdsb2JhbExvY2FsZSA9IGRhdGE7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiYgY29uc29sZS53YXJuKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vd2FybiB1c2VyIGlmIGFyZ3VtZW50cyBhcmUgcGFzc2VkIGJ1dCB0aGUgbG9jYWxlIGNvdWxkIG5vdCBiZSBzZXRcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAgICAgICAgICAgICAgICAgJ0xvY2FsZSAnICsga2V5ICsgJyBub3QgZm91bmQuIERpZCB5b3UgZm9yZ2V0IHRvIGxvYWQgaXQ/J1xuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBnbG9iYWxMb2NhbGUuX2FiYnI7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGVmaW5lTG9jYWxlKG5hbWUsIGNvbmZpZykge1xuICAgICAgICBpZiAoY29uZmlnICE9PSBudWxsKSB7XG4gICAgICAgICAgICB2YXIgbG9jYWxlLFxuICAgICAgICAgICAgICAgIHBhcmVudENvbmZpZyA9IGJhc2VDb25maWc7XG4gICAgICAgICAgICBjb25maWcuYWJiciA9IG5hbWU7XG4gICAgICAgICAgICBpZiAobG9jYWxlc1tuYW1lXSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgZGVwcmVjYXRlU2ltcGxlKFxuICAgICAgICAgICAgICAgICAgICAnZGVmaW5lTG9jYWxlT3ZlcnJpZGUnLFxuICAgICAgICAgICAgICAgICAgICAndXNlIG1vbWVudC51cGRhdGVMb2NhbGUobG9jYWxlTmFtZSwgY29uZmlnKSB0byBjaGFuZ2UgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAnYW4gZXhpc3RpbmcgbG9jYWxlLiBtb21lbnQuZGVmaW5lTG9jYWxlKGxvY2FsZU5hbWUsICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJ2NvbmZpZykgc2hvdWxkIG9ubHkgYmUgdXNlZCBmb3IgY3JlYXRpbmcgYSBuZXcgbG9jYWxlICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJ1NlZSBodHRwOi8vbW9tZW50anMuY29tL2d1aWRlcy8jL3dhcm5pbmdzL2RlZmluZS1sb2NhbGUvIGZvciBtb3JlIGluZm8uJ1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgcGFyZW50Q29uZmlnID0gbG9jYWxlc1tuYW1lXS5fY29uZmlnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChjb25maWcucGFyZW50TG9jYWxlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpZiAobG9jYWxlc1tjb25maWcucGFyZW50TG9jYWxlXSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHBhcmVudENvbmZpZyA9IGxvY2FsZXNbY29uZmlnLnBhcmVudExvY2FsZV0uX2NvbmZpZztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBsb2NhbGUgPSBsb2FkTG9jYWxlKGNvbmZpZy5wYXJlbnRMb2NhbGUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAobG9jYWxlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudENvbmZpZyA9IGxvY2FsZS5fY29uZmlnO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFsb2NhbGVGYW1pbGllc1tjb25maWcucGFyZW50TG9jYWxlXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsZUZhbWlsaWVzW2NvbmZpZy5wYXJlbnRMb2NhbGVdID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBsb2NhbGVGYW1pbGllc1tjb25maWcucGFyZW50TG9jYWxlXS5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZzogY29uZmlnLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxvY2FsZXNbbmFtZV0gPSBuZXcgTG9jYWxlKG1lcmdlQ29uZmlncyhwYXJlbnRDb25maWcsIGNvbmZpZykpO1xuXG4gICAgICAgICAgICBpZiAobG9jYWxlRmFtaWxpZXNbbmFtZV0pIHtcbiAgICAgICAgICAgICAgICBsb2NhbGVGYW1pbGllc1tuYW1lXS5mb3JFYWNoKGZ1bmN0aW9uICh4KSB7XG4gICAgICAgICAgICAgICAgICAgIGRlZmluZUxvY2FsZSh4Lm5hbWUsIHguY29uZmlnKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gYmFja3dhcmRzIGNvbXBhdCBmb3Igbm93OiBhbHNvIHNldCB0aGUgbG9jYWxlXG4gICAgICAgICAgICAvLyBtYWtlIHN1cmUgd2Ugc2V0IHRoZSBsb2NhbGUgQUZURVIgYWxsIGNoaWxkIGxvY2FsZXMgaGF2ZSBiZWVuXG4gICAgICAgICAgICAvLyBjcmVhdGVkLCBzbyB3ZSB3b24ndCBlbmQgdXAgd2l0aCB0aGUgY2hpbGQgbG9jYWxlIHNldC5cbiAgICAgICAgICAgIGdldFNldEdsb2JhbExvY2FsZShuYW1lKTtcblxuICAgICAgICAgICAgcmV0dXJuIGxvY2FsZXNbbmFtZV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyB1c2VmdWwgZm9yIHRlc3RpbmdcbiAgICAgICAgICAgIGRlbGV0ZSBsb2NhbGVzW25hbWVdO1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiB1cGRhdGVMb2NhbGUobmFtZSwgY29uZmlnKSB7XG4gICAgICAgIGlmIChjb25maWcgIT0gbnVsbCkge1xuICAgICAgICAgICAgdmFyIGxvY2FsZSxcbiAgICAgICAgICAgICAgICB0bXBMb2NhbGUsXG4gICAgICAgICAgICAgICAgcGFyZW50Q29uZmlnID0gYmFzZUNvbmZpZztcblxuICAgICAgICAgICAgaWYgKGxvY2FsZXNbbmFtZV0gIT0gbnVsbCAmJiBsb2NhbGVzW25hbWVdLnBhcmVudExvY2FsZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgLy8gVXBkYXRlIGV4aXN0aW5nIGNoaWxkIGxvY2FsZSBpbi1wbGFjZSB0byBhdm9pZCBtZW1vcnktbGVha3NcbiAgICAgICAgICAgICAgICBsb2NhbGVzW25hbWVdLnNldChtZXJnZUNvbmZpZ3MobG9jYWxlc1tuYW1lXS5fY29uZmlnLCBjb25maWcpKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gTUVSR0VcbiAgICAgICAgICAgICAgICB0bXBMb2NhbGUgPSBsb2FkTG9jYWxlKG5hbWUpO1xuICAgICAgICAgICAgICAgIGlmICh0bXBMb2NhbGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBwYXJlbnRDb25maWcgPSB0bXBMb2NhbGUuX2NvbmZpZztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uZmlnID0gbWVyZ2VDb25maWdzKHBhcmVudENvbmZpZywgY29uZmlnKTtcbiAgICAgICAgICAgICAgICBpZiAodG1wTG9jYWxlID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gdXBkYXRlTG9jYWxlIGlzIGNhbGxlZCBmb3IgY3JlYXRpbmcgYSBuZXcgbG9jYWxlXG4gICAgICAgICAgICAgICAgICAgIC8vIFNldCBhYmJyIHNvIGl0IHdpbGwgaGF2ZSBhIG5hbWUgKGdldHRlcnMgcmV0dXJuXG4gICAgICAgICAgICAgICAgICAgIC8vIHVuZGVmaW5lZCBvdGhlcndpc2UpLlxuICAgICAgICAgICAgICAgICAgICBjb25maWcuYWJiciA9IG5hbWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGxvY2FsZSA9IG5ldyBMb2NhbGUoY29uZmlnKTtcbiAgICAgICAgICAgICAgICBsb2NhbGUucGFyZW50TG9jYWxlID0gbG9jYWxlc1tuYW1lXTtcbiAgICAgICAgICAgICAgICBsb2NhbGVzW25hbWVdID0gbG9jYWxlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBiYWNrd2FyZHMgY29tcGF0IGZvciBub3c6IGFsc28gc2V0IHRoZSBsb2NhbGVcbiAgICAgICAgICAgIGdldFNldEdsb2JhbExvY2FsZShuYW1lKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIHBhc3MgbnVsbCBmb3IgY29uZmlnIHRvIHVudXBkYXRlLCB1c2VmdWwgZm9yIHRlc3RzXG4gICAgICAgICAgICBpZiAobG9jYWxlc1tuYW1lXSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaWYgKGxvY2FsZXNbbmFtZV0ucGFyZW50TG9jYWxlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgbG9jYWxlc1tuYW1lXSA9IGxvY2FsZXNbbmFtZV0ucGFyZW50TG9jYWxlO1xuICAgICAgICAgICAgICAgICAgICBpZiAobmFtZSA9PT0gZ2V0U2V0R2xvYmFsTG9jYWxlKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdldFNldEdsb2JhbExvY2FsZShuYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobG9jYWxlc1tuYW1lXSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBsb2NhbGVzW25hbWVdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbG9jYWxlc1tuYW1lXTtcbiAgICB9XG5cbiAgICAvLyByZXR1cm5zIGxvY2FsZSBkYXRhXG4gICAgZnVuY3Rpb24gZ2V0TG9jYWxlKGtleSkge1xuICAgICAgICB2YXIgbG9jYWxlO1xuXG4gICAgICAgIGlmIChrZXkgJiYga2V5Ll9sb2NhbGUgJiYga2V5Ll9sb2NhbGUuX2FiYnIpIHtcbiAgICAgICAgICAgIGtleSA9IGtleS5fbG9jYWxlLl9hYmJyO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFrZXkpIHtcbiAgICAgICAgICAgIHJldHVybiBnbG9iYWxMb2NhbGU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWlzQXJyYXkoa2V5KSkge1xuICAgICAgICAgICAgLy9zaG9ydC1jaXJjdWl0IGV2ZXJ5dGhpbmcgZWxzZVxuICAgICAgICAgICAgbG9jYWxlID0gbG9hZExvY2FsZShrZXkpO1xuICAgICAgICAgICAgaWYgKGxvY2FsZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBsb2NhbGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBrZXkgPSBba2V5XTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjaG9vc2VMb2NhbGUoa2V5KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaXN0TG9jYWxlcygpIHtcbiAgICAgICAgcmV0dXJuIGtleXMobG9jYWxlcyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2hlY2tPdmVyZmxvdyhtKSB7XG4gICAgICAgIHZhciBvdmVyZmxvdyxcbiAgICAgICAgICAgIGEgPSBtLl9hO1xuXG4gICAgICAgIGlmIChhICYmIGdldFBhcnNpbmdGbGFncyhtKS5vdmVyZmxvdyA9PT0gLTIpIHtcbiAgICAgICAgICAgIG92ZXJmbG93ID1cbiAgICAgICAgICAgICAgICBhW01PTlRIXSA8IDAgfHwgYVtNT05USF0gPiAxMVxuICAgICAgICAgICAgICAgICAgICA/IE1PTlRIXG4gICAgICAgICAgICAgICAgICAgIDogYVtEQVRFXSA8IDEgfHwgYVtEQVRFXSA+IGRheXNJbk1vbnRoKGFbWUVBUl0sIGFbTU9OVEhdKVxuICAgICAgICAgICAgICAgICAgICAgID8gREFURVxuICAgICAgICAgICAgICAgICAgICAgIDogYVtIT1VSXSA8IDAgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYVtIT1VSXSA+IDI0IHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgIChhW0hPVVJdID09PSAyNCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGFbTUlOVVRFXSAhPT0gMCB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFbU0VDT05EXSAhPT0gMCB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFbTUlMTElTRUNPTkRdICE9PSAwKSlcbiAgICAgICAgICAgICAgICAgICAgICAgID8gSE9VUlxuICAgICAgICAgICAgICAgICAgICAgICAgOiBhW01JTlVURV0gPCAwIHx8IGFbTUlOVVRFXSA+IDU5XG4gICAgICAgICAgICAgICAgICAgICAgICAgID8gTUlOVVRFXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDogYVtTRUNPTkRdIDwgMCB8fCBhW1NFQ09ORF0gPiA1OVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gU0VDT05EXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBhW01JTExJU0VDT05EXSA8IDAgfHwgYVtNSUxMSVNFQ09ORF0gPiA5OTlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gTUlMTElTRUNPTkRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogLTE7XG5cbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MobSkuX292ZXJmbG93RGF5T2ZZZWFyICYmXG4gICAgICAgICAgICAgICAgKG92ZXJmbG93IDwgWUVBUiB8fCBvdmVyZmxvdyA+IERBVEUpXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBvdmVyZmxvdyA9IERBVEU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZ2V0UGFyc2luZ0ZsYWdzKG0pLl9vdmVyZmxvd1dlZWtzICYmIG92ZXJmbG93ID09PSAtMSkge1xuICAgICAgICAgICAgICAgIG92ZXJmbG93ID0gV0VFSztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChnZXRQYXJzaW5nRmxhZ3MobSkuX292ZXJmbG93V2Vla2RheSAmJiBvdmVyZmxvdyA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICBvdmVyZmxvdyA9IFdFRUtEQVk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhtKS5vdmVyZmxvdyA9IG92ZXJmbG93O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG07XG4gICAgfVxuXG4gICAgLy8gaXNvIDg2MDEgcmVnZXhcbiAgICAvLyAwMDAwLTAwLTAwIDAwMDAtVzAwIG9yIDAwMDAtVzAwLTAgKyBUICsgMDAgb3IgMDA6MDAgb3IgMDA6MDA6MDAgb3IgMDA6MDA6MDAuMDAwICsgKzAwOjAwIG9yICswMDAwIG9yICswMClcbiAgICB2YXIgZXh0ZW5kZWRJc29SZWdleCA9XG4gICAgICAgICAgICAvXlxccyooKD86WystXVxcZHs2fXxcXGR7NH0pLSg/OlxcZFxcZC1cXGRcXGR8V1xcZFxcZC1cXGR8V1xcZFxcZHxcXGRcXGRcXGR8XFxkXFxkKSkoPzooVHwgKShcXGRcXGQoPzo6XFxkXFxkKD86OlxcZFxcZCg/OlsuLF1cXGQrKT8pPyk/KShbKy1dXFxkXFxkKD86Oj9cXGRcXGQpP3xcXHMqWik/KT8kLyxcbiAgICAgICAgYmFzaWNJc29SZWdleCA9XG4gICAgICAgICAgICAvXlxccyooKD86WystXVxcZHs2fXxcXGR7NH0pKD86XFxkXFxkXFxkXFxkfFdcXGRcXGRcXGR8V1xcZFxcZHxcXGRcXGRcXGR8XFxkXFxkfCkpKD86KFR8ICkoXFxkXFxkKD86XFxkXFxkKD86XFxkXFxkKD86Wy4sXVxcZCspPyk/KT8pKFsrLV1cXGRcXGQoPzo6P1xcZFxcZCk/fFxccypaKT8pPyQvLFxuICAgICAgICB0elJlZ2V4ID0gL1p8WystXVxcZFxcZCg/Ojo/XFxkXFxkKT8vLFxuICAgICAgICBpc29EYXRlcyA9IFtcbiAgICAgICAgICAgIFsnWVlZWVlZLU1NLUREJywgL1srLV1cXGR7Nn0tXFxkXFxkLVxcZFxcZC9dLFxuICAgICAgICAgICAgWydZWVlZLU1NLUREJywgL1xcZHs0fS1cXGRcXGQtXFxkXFxkL10sXG4gICAgICAgICAgICBbJ0dHR0ctW1ddV1ctRScsIC9cXGR7NH0tV1xcZFxcZC1cXGQvXSxcbiAgICAgICAgICAgIFsnR0dHRy1bV11XVycsIC9cXGR7NH0tV1xcZFxcZC8sIGZhbHNlXSxcbiAgICAgICAgICAgIFsnWVlZWS1EREQnLCAvXFxkezR9LVxcZHszfS9dLFxuICAgICAgICAgICAgWydZWVlZLU1NJywgL1xcZHs0fS1cXGRcXGQvLCBmYWxzZV0sXG4gICAgICAgICAgICBbJ1lZWVlZWU1NREQnLCAvWystXVxcZHsxMH0vXSxcbiAgICAgICAgICAgIFsnWVlZWU1NREQnLCAvXFxkezh9L10sXG4gICAgICAgICAgICBbJ0dHR0dbV11XV0UnLCAvXFxkezR9V1xcZHszfS9dLFxuICAgICAgICAgICAgWydHR0dHW1ddV1cnLCAvXFxkezR9V1xcZHsyfS8sIGZhbHNlXSxcbiAgICAgICAgICAgIFsnWVlZWURERCcsIC9cXGR7N30vXSxcbiAgICAgICAgICAgIFsnWVlZWU1NJywgL1xcZHs2fS8sIGZhbHNlXSxcbiAgICAgICAgICAgIFsnWVlZWScsIC9cXGR7NH0vLCBmYWxzZV0sXG4gICAgICAgIF0sXG4gICAgICAgIC8vIGlzbyB0aW1lIGZvcm1hdHMgYW5kIHJlZ2V4ZXNcbiAgICAgICAgaXNvVGltZXMgPSBbXG4gICAgICAgICAgICBbJ0hIOm1tOnNzLlNTU1MnLCAvXFxkXFxkOlxcZFxcZDpcXGRcXGRcXC5cXGQrL10sXG4gICAgICAgICAgICBbJ0hIOm1tOnNzLFNTU1MnLCAvXFxkXFxkOlxcZFxcZDpcXGRcXGQsXFxkKy9dLFxuICAgICAgICAgICAgWydISDptbTpzcycsIC9cXGRcXGQ6XFxkXFxkOlxcZFxcZC9dLFxuICAgICAgICAgICAgWydISDptbScsIC9cXGRcXGQ6XFxkXFxkL10sXG4gICAgICAgICAgICBbJ0hIbW1zcy5TU1NTJywgL1xcZFxcZFxcZFxcZFxcZFxcZFxcLlxcZCsvXSxcbiAgICAgICAgICAgIFsnSEhtbXNzLFNTU1MnLCAvXFxkXFxkXFxkXFxkXFxkXFxkLFxcZCsvXSxcbiAgICAgICAgICAgIFsnSEhtbXNzJywgL1xcZFxcZFxcZFxcZFxcZFxcZC9dLFxuICAgICAgICAgICAgWydISG1tJywgL1xcZFxcZFxcZFxcZC9dLFxuICAgICAgICAgICAgWydISCcsIC9cXGRcXGQvXSxcbiAgICAgICAgXSxcbiAgICAgICAgYXNwTmV0SnNvblJlZ2V4ID0gL15cXC8/RGF0ZVxcKCgtP1xcZCspL2ksXG4gICAgICAgIC8vIFJGQyAyODIyIHJlZ2V4OiBGb3IgZGV0YWlscyBzZWUgaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzI4MjIjc2VjdGlvbi0zLjNcbiAgICAgICAgcmZjMjgyMiA9XG4gICAgICAgICAgICAvXig/OihNb258VHVlfFdlZHxUaHV8RnJpfFNhdHxTdW4pLD9cXHMpPyhcXGR7MSwyfSlcXHMoSmFufEZlYnxNYXJ8QXByfE1heXxKdW58SnVsfEF1Z3xTZXB8T2N0fE5vdnxEZWMpXFxzKFxcZHsyLDR9KVxccyhcXGRcXGQpOihcXGRcXGQpKD86OihcXGRcXGQpKT9cXHMoPzooVVR8R01UfFtFQ01QXVtTRF1UKXwoW1p6XSl8KFsrLV1cXGR7NH0pKSQvLFxuICAgICAgICBvYnNPZmZzZXRzID0ge1xuICAgICAgICAgICAgVVQ6IDAsXG4gICAgICAgICAgICBHTVQ6IDAsXG4gICAgICAgICAgICBFRFQ6IC00ICogNjAsXG4gICAgICAgICAgICBFU1Q6IC01ICogNjAsXG4gICAgICAgICAgICBDRFQ6IC01ICogNjAsXG4gICAgICAgICAgICBDU1Q6IC02ICogNjAsXG4gICAgICAgICAgICBNRFQ6IC02ICogNjAsXG4gICAgICAgICAgICBNU1Q6IC03ICogNjAsXG4gICAgICAgICAgICBQRFQ6IC03ICogNjAsXG4gICAgICAgICAgICBQU1Q6IC04ICogNjAsXG4gICAgICAgIH07XG5cbiAgICAvLyBkYXRlIGZyb20gaXNvIGZvcm1hdFxuICAgIGZ1bmN0aW9uIGNvbmZpZ0Zyb21JU08oY29uZmlnKSB7XG4gICAgICAgIHZhciBpLFxuICAgICAgICAgICAgbCxcbiAgICAgICAgICAgIHN0cmluZyA9IGNvbmZpZy5faSxcbiAgICAgICAgICAgIG1hdGNoID0gZXh0ZW5kZWRJc29SZWdleC5leGVjKHN0cmluZykgfHwgYmFzaWNJc29SZWdleC5leGVjKHN0cmluZyksXG4gICAgICAgICAgICBhbGxvd1RpbWUsXG4gICAgICAgICAgICBkYXRlRm9ybWF0LFxuICAgICAgICAgICAgdGltZUZvcm1hdCxcbiAgICAgICAgICAgIHR6Rm9ybWF0LFxuICAgICAgICAgICAgaXNvRGF0ZXNMZW4gPSBpc29EYXRlcy5sZW5ndGgsXG4gICAgICAgICAgICBpc29UaW1lc0xlbiA9IGlzb1RpbWVzLmxlbmd0aDtcblxuICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmlzbyA9IHRydWU7XG4gICAgICAgICAgICBmb3IgKGkgPSAwLCBsID0gaXNvRGF0ZXNMZW47IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNvRGF0ZXNbaV1bMV0uZXhlYyhtYXRjaFsxXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgZGF0ZUZvcm1hdCA9IGlzb0RhdGVzW2ldWzBdO1xuICAgICAgICAgICAgICAgICAgICBhbGxvd1RpbWUgPSBpc29EYXRlc1tpXVsyXSAhPT0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkYXRlRm9ybWF0ID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBjb25maWcuX2lzVmFsaWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWF0Y2hbM10pIHtcbiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwLCBsID0gaXNvVGltZXNMZW47IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzb1RpbWVzW2ldWzFdLmV4ZWMobWF0Y2hbM10pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBtYXRjaFsyXSBzaG91bGQgYmUgJ1QnIG9yIHNwYWNlXG4gICAgICAgICAgICAgICAgICAgICAgICB0aW1lRm9ybWF0ID0gKG1hdGNoWzJdIHx8ICcgJykgKyBpc29UaW1lc1tpXVswXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0aW1lRm9ybWF0ID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uZmlnLl9pc1ZhbGlkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWFsbG93VGltZSAmJiB0aW1lRm9ybWF0ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBjb25maWcuX2lzVmFsaWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWF0Y2hbNF0pIHtcbiAgICAgICAgICAgICAgICBpZiAodHpSZWdleC5leGVjKG1hdGNoWzRdKSkge1xuICAgICAgICAgICAgICAgICAgICB0ekZvcm1hdCA9ICdaJztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjb25maWcuX2lzVmFsaWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbmZpZy5fZiA9IGRhdGVGb3JtYXQgKyAodGltZUZvcm1hdCB8fCAnJykgKyAodHpGb3JtYXQgfHwgJycpO1xuICAgICAgICAgICAgY29uZmlnRnJvbVN0cmluZ0FuZEZvcm1hdChjb25maWcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uZmlnLl9pc1ZhbGlkID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBleHRyYWN0RnJvbVJGQzI4MjJTdHJpbmdzKFxuICAgICAgICB5ZWFyU3RyLFxuICAgICAgICBtb250aFN0cixcbiAgICAgICAgZGF5U3RyLFxuICAgICAgICBob3VyU3RyLFxuICAgICAgICBtaW51dGVTdHIsXG4gICAgICAgIHNlY29uZFN0clxuICAgICkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gW1xuICAgICAgICAgICAgdW50cnVuY2F0ZVllYXIoeWVhclN0ciksXG4gICAgICAgICAgICBkZWZhdWx0TG9jYWxlTW9udGhzU2hvcnQuaW5kZXhPZihtb250aFN0ciksXG4gICAgICAgICAgICBwYXJzZUludChkYXlTdHIsIDEwKSxcbiAgICAgICAgICAgIHBhcnNlSW50KGhvdXJTdHIsIDEwKSxcbiAgICAgICAgICAgIHBhcnNlSW50KG1pbnV0ZVN0ciwgMTApLFxuICAgICAgICBdO1xuXG4gICAgICAgIGlmIChzZWNvbmRTdHIpIHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKHBhcnNlSW50KHNlY29uZFN0ciwgMTApKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdW50cnVuY2F0ZVllYXIoeWVhclN0cikge1xuICAgICAgICB2YXIgeWVhciA9IHBhcnNlSW50KHllYXJTdHIsIDEwKTtcbiAgICAgICAgaWYgKHllYXIgPD0gNDkpIHtcbiAgICAgICAgICAgIHJldHVybiAyMDAwICsgeWVhcjtcbiAgICAgICAgfSBlbHNlIGlmICh5ZWFyIDw9IDk5OSkge1xuICAgICAgICAgICAgcmV0dXJuIDE5MDAgKyB5ZWFyO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB5ZWFyO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHByZXByb2Nlc3NSRkMyODIyKHMpIHtcbiAgICAgICAgLy8gUmVtb3ZlIGNvbW1lbnRzIGFuZCBmb2xkaW5nIHdoaXRlc3BhY2UgYW5kIHJlcGxhY2UgbXVsdGlwbGUtc3BhY2VzIHdpdGggYSBzaW5nbGUgc3BhY2VcbiAgICAgICAgcmV0dXJuIHNcbiAgICAgICAgICAgIC5yZXBsYWNlKC9cXChbXigpXSpcXCl8W1xcblxcdF0vZywgJyAnKVxuICAgICAgICAgICAgLnJlcGxhY2UoLyhcXHNcXHMrKS9nLCAnICcpXG4gICAgICAgICAgICAucmVwbGFjZSgvXlxcc1xccyovLCAnJylcbiAgICAgICAgICAgIC5yZXBsYWNlKC9cXHNcXHMqJC8sICcnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjaGVja1dlZWtkYXkod2Vla2RheVN0ciwgcGFyc2VkSW5wdXQsIGNvbmZpZykge1xuICAgICAgICBpZiAod2Vla2RheVN0cikge1xuICAgICAgICAgICAgLy8gVE9ETzogUmVwbGFjZSB0aGUgdmFuaWxsYSBKUyBEYXRlIG9iamVjdCB3aXRoIGFuIGluZGVwZW5kZW50IGRheS1vZi13ZWVrIGNoZWNrLlxuICAgICAgICAgICAgdmFyIHdlZWtkYXlQcm92aWRlZCA9IGRlZmF1bHRMb2NhbGVXZWVrZGF5c1Nob3J0LmluZGV4T2Yod2Vla2RheVN0ciksXG4gICAgICAgICAgICAgICAgd2Vla2RheUFjdHVhbCA9IG5ldyBEYXRlKFxuICAgICAgICAgICAgICAgICAgICBwYXJzZWRJbnB1dFswXSxcbiAgICAgICAgICAgICAgICAgICAgcGFyc2VkSW5wdXRbMV0sXG4gICAgICAgICAgICAgICAgICAgIHBhcnNlZElucHV0WzJdXG4gICAgICAgICAgICAgICAgKS5nZXREYXkoKTtcbiAgICAgICAgICAgIGlmICh3ZWVrZGF5UHJvdmlkZWQgIT09IHdlZWtkYXlBY3R1YWwpIHtcbiAgICAgICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS53ZWVrZGF5TWlzbWF0Y2ggPSB0cnVlO1xuICAgICAgICAgICAgICAgIGNvbmZpZy5faXNWYWxpZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjYWxjdWxhdGVPZmZzZXQob2JzT2Zmc2V0LCBtaWxpdGFyeU9mZnNldCwgbnVtT2Zmc2V0KSB7XG4gICAgICAgIGlmIChvYnNPZmZzZXQpIHtcbiAgICAgICAgICAgIHJldHVybiBvYnNPZmZzZXRzW29ic09mZnNldF07XG4gICAgICAgIH0gZWxzZSBpZiAobWlsaXRhcnlPZmZzZXQpIHtcbiAgICAgICAgICAgIC8vIHRoZSBvbmx5IGFsbG93ZWQgbWlsaXRhcnkgdHogaXMgWlxuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgaG0gPSBwYXJzZUludChudW1PZmZzZXQsIDEwKSxcbiAgICAgICAgICAgICAgICBtID0gaG0gJSAxMDAsXG4gICAgICAgICAgICAgICAgaCA9IChobSAtIG0pIC8gMTAwO1xuICAgICAgICAgICAgcmV0dXJuIGggKiA2MCArIG07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBkYXRlIGFuZCB0aW1lIGZyb20gcmVmIDI4MjIgZm9ybWF0XG4gICAgZnVuY3Rpb24gY29uZmlnRnJvbVJGQzI4MjIoY29uZmlnKSB7XG4gICAgICAgIHZhciBtYXRjaCA9IHJmYzI4MjIuZXhlYyhwcmVwcm9jZXNzUkZDMjgyMihjb25maWcuX2kpKSxcbiAgICAgICAgICAgIHBhcnNlZEFycmF5O1xuICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICAgIHBhcnNlZEFycmF5ID0gZXh0cmFjdEZyb21SRkMyODIyU3RyaW5ncyhcbiAgICAgICAgICAgICAgICBtYXRjaFs0XSxcbiAgICAgICAgICAgICAgICBtYXRjaFszXSxcbiAgICAgICAgICAgICAgICBtYXRjaFsyXSxcbiAgICAgICAgICAgICAgICBtYXRjaFs1XSxcbiAgICAgICAgICAgICAgICBtYXRjaFs2XSxcbiAgICAgICAgICAgICAgICBtYXRjaFs3XVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGlmICghY2hlY2tXZWVrZGF5KG1hdGNoWzFdLCBwYXJzZWRBcnJheSwgY29uZmlnKSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uZmlnLl9hID0gcGFyc2VkQXJyYXk7XG4gICAgICAgICAgICBjb25maWcuX3R6bSA9IGNhbGN1bGF0ZU9mZnNldChtYXRjaFs4XSwgbWF0Y2hbOV0sIG1hdGNoWzEwXSk7XG5cbiAgICAgICAgICAgIGNvbmZpZy5fZCA9IGNyZWF0ZVVUQ0RhdGUuYXBwbHkobnVsbCwgY29uZmlnLl9hKTtcbiAgICAgICAgICAgIGNvbmZpZy5fZC5zZXRVVENNaW51dGVzKGNvbmZpZy5fZC5nZXRVVENNaW51dGVzKCkgLSBjb25maWcuX3R6bSk7XG5cbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLnJmYzI4MjIgPSB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uZmlnLl9pc1ZhbGlkID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBkYXRlIGZyb20gMSkgQVNQLk5FVCwgMikgSVNPLCAzKSBSRkMgMjgyMiBmb3JtYXRzLCBvciA0KSBvcHRpb25hbCBmYWxsYmFjayBpZiBwYXJzaW5nIGlzbid0IHN0cmljdFxuICAgIGZ1bmN0aW9uIGNvbmZpZ0Zyb21TdHJpbmcoY29uZmlnKSB7XG4gICAgICAgIHZhciBtYXRjaGVkID0gYXNwTmV0SnNvblJlZ2V4LmV4ZWMoY29uZmlnLl9pKTtcbiAgICAgICAgaWYgKG1hdGNoZWQgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbmZpZy5fZCA9IG5ldyBEYXRlKCttYXRjaGVkWzFdKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbmZpZ0Zyb21JU08oY29uZmlnKTtcbiAgICAgICAgaWYgKGNvbmZpZy5faXNWYWxpZCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGRlbGV0ZSBjb25maWcuX2lzVmFsaWQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25maWdGcm9tUkZDMjgyMihjb25maWcpO1xuICAgICAgICBpZiAoY29uZmlnLl9pc1ZhbGlkID09PSBmYWxzZSkge1xuICAgICAgICAgICAgZGVsZXRlIGNvbmZpZy5faXNWYWxpZDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb25maWcuX3N0cmljdCkge1xuICAgICAgICAgICAgY29uZmlnLl9pc1ZhbGlkID0gZmFsc2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBGaW5hbCBhdHRlbXB0LCB1c2UgSW5wdXQgRmFsbGJhY2tcbiAgICAgICAgICAgIGhvb2tzLmNyZWF0ZUZyb21JbnB1dEZhbGxiYWNrKGNvbmZpZyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBob29rcy5jcmVhdGVGcm9tSW5wdXRGYWxsYmFjayA9IGRlcHJlY2F0ZShcbiAgICAgICAgJ3ZhbHVlIHByb3ZpZGVkIGlzIG5vdCBpbiBhIHJlY29nbml6ZWQgUkZDMjgyMiBvciBJU08gZm9ybWF0LiBtb21lbnQgY29uc3RydWN0aW9uIGZhbGxzIGJhY2sgdG8ganMgRGF0ZSgpLCAnICtcbiAgICAgICAgICAgICd3aGljaCBpcyBub3QgcmVsaWFibGUgYWNyb3NzIGFsbCBicm93c2VycyBhbmQgdmVyc2lvbnMuIE5vbiBSRkMyODIyL0lTTyBkYXRlIGZvcm1hdHMgYXJlICcgK1xuICAgICAgICAgICAgJ2Rpc2NvdXJhZ2VkLiBQbGVhc2UgcmVmZXIgdG8gaHR0cDovL21vbWVudGpzLmNvbS9ndWlkZXMvIy93YXJuaW5ncy9qcy1kYXRlLyBmb3IgbW9yZSBpbmZvLicsXG4gICAgICAgIGZ1bmN0aW9uIChjb25maWcpIHtcbiAgICAgICAgICAgIGNvbmZpZy5fZCA9IG5ldyBEYXRlKGNvbmZpZy5faSArIChjb25maWcuX3VzZVVUQyA/ICcgVVRDJyA6ICcnKSk7XG4gICAgICAgIH1cbiAgICApO1xuXG4gICAgLy8gUGljayB0aGUgZmlyc3QgZGVmaW5lZCBvZiB0d28gb3IgdGhyZWUgYXJndW1lbnRzLlxuICAgIGZ1bmN0aW9uIGRlZmF1bHRzKGEsIGIsIGMpIHtcbiAgICAgICAgaWYgKGEgIT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIGE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGIgIT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIGI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3VycmVudERhdGVBcnJheShjb25maWcpIHtcbiAgICAgICAgLy8gaG9va3MgaXMgYWN0dWFsbHkgdGhlIGV4cG9ydGVkIG1vbWVudCBvYmplY3RcbiAgICAgICAgdmFyIG5vd1ZhbHVlID0gbmV3IERhdGUoaG9va3Mubm93KCkpO1xuICAgICAgICBpZiAoY29uZmlnLl91c2VVVEMpIHtcbiAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAgbm93VmFsdWUuZ2V0VVRDRnVsbFllYXIoKSxcbiAgICAgICAgICAgICAgICBub3dWYWx1ZS5nZXRVVENNb250aCgpLFxuICAgICAgICAgICAgICAgIG5vd1ZhbHVlLmdldFVUQ0RhdGUoKSxcbiAgICAgICAgICAgIF07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFtub3dWYWx1ZS5nZXRGdWxsWWVhcigpLCBub3dWYWx1ZS5nZXRNb250aCgpLCBub3dWYWx1ZS5nZXREYXRlKCldO1xuICAgIH1cblxuICAgIC8vIGNvbnZlcnQgYW4gYXJyYXkgdG8gYSBkYXRlLlxuICAgIC8vIHRoZSBhcnJheSBzaG91bGQgbWlycm9yIHRoZSBwYXJhbWV0ZXJzIGJlbG93XG4gICAgLy8gbm90ZTogYWxsIHZhbHVlcyBwYXN0IHRoZSB5ZWFyIGFyZSBvcHRpb25hbCBhbmQgd2lsbCBkZWZhdWx0IHRvIHRoZSBsb3dlc3QgcG9zc2libGUgdmFsdWUuXG4gICAgLy8gW3llYXIsIG1vbnRoLCBkYXkgLCBob3VyLCBtaW51dGUsIHNlY29uZCwgbWlsbGlzZWNvbmRdXG4gICAgZnVuY3Rpb24gY29uZmlnRnJvbUFycmF5KGNvbmZpZykge1xuICAgICAgICB2YXIgaSxcbiAgICAgICAgICAgIGRhdGUsXG4gICAgICAgICAgICBpbnB1dCA9IFtdLFxuICAgICAgICAgICAgY3VycmVudERhdGUsXG4gICAgICAgICAgICBleHBlY3RlZFdlZWtkYXksXG4gICAgICAgICAgICB5ZWFyVG9Vc2U7XG5cbiAgICAgICAgaWYgKGNvbmZpZy5fZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY3VycmVudERhdGUgPSBjdXJyZW50RGF0ZUFycmF5KGNvbmZpZyk7XG5cbiAgICAgICAgLy9jb21wdXRlIGRheSBvZiB0aGUgeWVhciBmcm9tIHdlZWtzIGFuZCB3ZWVrZGF5c1xuICAgICAgICBpZiAoY29uZmlnLl93ICYmIGNvbmZpZy5fYVtEQVRFXSA9PSBudWxsICYmIGNvbmZpZy5fYVtNT05USF0gPT0gbnVsbCkge1xuICAgICAgICAgICAgZGF5T2ZZZWFyRnJvbVdlZWtJbmZvKGNvbmZpZyk7XG4gICAgICAgIH1cblxuICAgICAgICAvL2lmIHRoZSBkYXkgb2YgdGhlIHllYXIgaXMgc2V0LCBmaWd1cmUgb3V0IHdoYXQgaXQgaXNcbiAgICAgICAgaWYgKGNvbmZpZy5fZGF5T2ZZZWFyICE9IG51bGwpIHtcbiAgICAgICAgICAgIHllYXJUb1VzZSA9IGRlZmF1bHRzKGNvbmZpZy5fYVtZRUFSXSwgY3VycmVudERhdGVbWUVBUl0pO1xuXG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgY29uZmlnLl9kYXlPZlllYXIgPiBkYXlzSW5ZZWFyKHllYXJUb1VzZSkgfHxcbiAgICAgICAgICAgICAgICBjb25maWcuX2RheU9mWWVhciA9PT0gMFxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuX292ZXJmbG93RGF5T2ZZZWFyID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZGF0ZSA9IGNyZWF0ZVVUQ0RhdGUoeWVhclRvVXNlLCAwLCBjb25maWcuX2RheU9mWWVhcik7XG4gICAgICAgICAgICBjb25maWcuX2FbTU9OVEhdID0gZGF0ZS5nZXRVVENNb250aCgpO1xuICAgICAgICAgICAgY29uZmlnLl9hW0RBVEVdID0gZGF0ZS5nZXRVVENEYXRlKCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBEZWZhdWx0IHRvIGN1cnJlbnQgZGF0ZS5cbiAgICAgICAgLy8gKiBpZiBubyB5ZWFyLCBtb250aCwgZGF5IG9mIG1vbnRoIGFyZSBnaXZlbiwgZGVmYXVsdCB0byB0b2RheVxuICAgICAgICAvLyAqIGlmIGRheSBvZiBtb250aCBpcyBnaXZlbiwgZGVmYXVsdCBtb250aCBhbmQgeWVhclxuICAgICAgICAvLyAqIGlmIG1vbnRoIGlzIGdpdmVuLCBkZWZhdWx0IG9ubHkgeWVhclxuICAgICAgICAvLyAqIGlmIHllYXIgaXMgZ2l2ZW4sIGRvbid0IGRlZmF1bHQgYW55dGhpbmdcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IDMgJiYgY29uZmlnLl9hW2ldID09IG51bGw7ICsraSkge1xuICAgICAgICAgICAgY29uZmlnLl9hW2ldID0gaW5wdXRbaV0gPSBjdXJyZW50RGF0ZVtpXTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFplcm8gb3V0IHdoYXRldmVyIHdhcyBub3QgZGVmYXVsdGVkLCBpbmNsdWRpbmcgdGltZVxuICAgICAgICBmb3IgKDsgaSA8IDc7IGkrKykge1xuICAgICAgICAgICAgY29uZmlnLl9hW2ldID0gaW5wdXRbaV0gPVxuICAgICAgICAgICAgICAgIGNvbmZpZy5fYVtpXSA9PSBudWxsID8gKGkgPT09IDIgPyAxIDogMCkgOiBjb25maWcuX2FbaV07XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDaGVjayBmb3IgMjQ6MDA6MDAuMDAwXG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIGNvbmZpZy5fYVtIT1VSXSA9PT0gMjQgJiZcbiAgICAgICAgICAgIGNvbmZpZy5fYVtNSU5VVEVdID09PSAwICYmXG4gICAgICAgICAgICBjb25maWcuX2FbU0VDT05EXSA9PT0gMCAmJlxuICAgICAgICAgICAgY29uZmlnLl9hW01JTExJU0VDT05EXSA9PT0gMFxuICAgICAgICApIHtcbiAgICAgICAgICAgIGNvbmZpZy5fbmV4dERheSA9IHRydWU7XG4gICAgICAgICAgICBjb25maWcuX2FbSE9VUl0gPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uZmlnLl9kID0gKGNvbmZpZy5fdXNlVVRDID8gY3JlYXRlVVRDRGF0ZSA6IGNyZWF0ZURhdGUpLmFwcGx5KFxuICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgIGlucHV0XG4gICAgICAgICk7XG4gICAgICAgIGV4cGVjdGVkV2Vla2RheSA9IGNvbmZpZy5fdXNlVVRDXG4gICAgICAgICAgICA/IGNvbmZpZy5fZC5nZXRVVENEYXkoKVxuICAgICAgICAgICAgOiBjb25maWcuX2QuZ2V0RGF5KCk7XG5cbiAgICAgICAgLy8gQXBwbHkgdGltZXpvbmUgb2Zmc2V0IGZyb20gaW5wdXQuIFRoZSBhY3R1YWwgdXRjT2Zmc2V0IGNhbiBiZSBjaGFuZ2VkXG4gICAgICAgIC8vIHdpdGggcGFyc2Vab25lLlxuICAgICAgICBpZiAoY29uZmlnLl90em0gIT0gbnVsbCkge1xuICAgICAgICAgICAgY29uZmlnLl9kLnNldFVUQ01pbnV0ZXMoY29uZmlnLl9kLmdldFVUQ01pbnV0ZXMoKSAtIGNvbmZpZy5fdHptKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb25maWcuX25leHREYXkpIHtcbiAgICAgICAgICAgIGNvbmZpZy5fYVtIT1VSXSA9IDI0O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gY2hlY2sgZm9yIG1pc21hdGNoaW5nIGRheSBvZiB3ZWVrXG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIGNvbmZpZy5fdyAmJlxuICAgICAgICAgICAgdHlwZW9mIGNvbmZpZy5fdy5kICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICAgICAgY29uZmlnLl93LmQgIT09IGV4cGVjdGVkV2Vla2RheVxuICAgICAgICApIHtcbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLndlZWtkYXlNaXNtYXRjaCA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkYXlPZlllYXJGcm9tV2Vla0luZm8oY29uZmlnKSB7XG4gICAgICAgIHZhciB3LCB3ZWVrWWVhciwgd2Vlaywgd2Vla2RheSwgZG93LCBkb3ksIHRlbXAsIHdlZWtkYXlPdmVyZmxvdywgY3VyV2VlaztcblxuICAgICAgICB3ID0gY29uZmlnLl93O1xuICAgICAgICBpZiAody5HRyAhPSBudWxsIHx8IHcuVyAhPSBudWxsIHx8IHcuRSAhPSBudWxsKSB7XG4gICAgICAgICAgICBkb3cgPSAxO1xuICAgICAgICAgICAgZG95ID0gNDtcblxuICAgICAgICAgICAgLy8gVE9ETzogV2UgbmVlZCB0byB0YWtlIHRoZSBjdXJyZW50IGlzb1dlZWtZZWFyLCBidXQgdGhhdCBkZXBlbmRzIG9uXG4gICAgICAgICAgICAvLyBob3cgd2UgaW50ZXJwcmV0IG5vdyAobG9jYWwsIHV0YywgZml4ZWQgb2Zmc2V0KS4gU28gY3JlYXRlXG4gICAgICAgICAgICAvLyBhIG5vdyB2ZXJzaW9uIG9mIGN1cnJlbnQgY29uZmlnICh0YWtlIGxvY2FsL3V0Yy9vZmZzZXQgZmxhZ3MsIGFuZFxuICAgICAgICAgICAgLy8gY3JlYXRlIG5vdykuXG4gICAgICAgICAgICB3ZWVrWWVhciA9IGRlZmF1bHRzKFxuICAgICAgICAgICAgICAgIHcuR0csXG4gICAgICAgICAgICAgICAgY29uZmlnLl9hW1lFQVJdLFxuICAgICAgICAgICAgICAgIHdlZWtPZlllYXIoY3JlYXRlTG9jYWwoKSwgMSwgNCkueWVhclxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHdlZWsgPSBkZWZhdWx0cyh3LlcsIDEpO1xuICAgICAgICAgICAgd2Vla2RheSA9IGRlZmF1bHRzKHcuRSwgMSk7XG4gICAgICAgICAgICBpZiAod2Vla2RheSA8IDEgfHwgd2Vla2RheSA+IDcpIHtcbiAgICAgICAgICAgICAgICB3ZWVrZGF5T3ZlcmZsb3cgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZG93ID0gY29uZmlnLl9sb2NhbGUuX3dlZWsuZG93O1xuICAgICAgICAgICAgZG95ID0gY29uZmlnLl9sb2NhbGUuX3dlZWsuZG95O1xuXG4gICAgICAgICAgICBjdXJXZWVrID0gd2Vla09mWWVhcihjcmVhdGVMb2NhbCgpLCBkb3csIGRveSk7XG5cbiAgICAgICAgICAgIHdlZWtZZWFyID0gZGVmYXVsdHMody5nZywgY29uZmlnLl9hW1lFQVJdLCBjdXJXZWVrLnllYXIpO1xuXG4gICAgICAgICAgICAvLyBEZWZhdWx0IHRvIGN1cnJlbnQgd2Vlay5cbiAgICAgICAgICAgIHdlZWsgPSBkZWZhdWx0cyh3LncsIGN1cldlZWsud2Vlayk7XG5cbiAgICAgICAgICAgIGlmICh3LmQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIC8vIHdlZWtkYXkgLS0gbG93IGRheSBudW1iZXJzIGFyZSBjb25zaWRlcmVkIG5leHQgd2Vla1xuICAgICAgICAgICAgICAgIHdlZWtkYXkgPSB3LmQ7XG4gICAgICAgICAgICAgICAgaWYgKHdlZWtkYXkgPCAwIHx8IHdlZWtkYXkgPiA2KSB7XG4gICAgICAgICAgICAgICAgICAgIHdlZWtkYXlPdmVyZmxvdyA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmICh3LmUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIC8vIGxvY2FsIHdlZWtkYXkgLS0gY291bnRpbmcgc3RhcnRzIGZyb20gYmVnaW5uaW5nIG9mIHdlZWtcbiAgICAgICAgICAgICAgICB3ZWVrZGF5ID0gdy5lICsgZG93O1xuICAgICAgICAgICAgICAgIGlmICh3LmUgPCAwIHx8IHcuZSA+IDYpIHtcbiAgICAgICAgICAgICAgICAgICAgd2Vla2RheU92ZXJmbG93ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIGRlZmF1bHQgdG8gYmVnaW5uaW5nIG9mIHdlZWtcbiAgICAgICAgICAgICAgICB3ZWVrZGF5ID0gZG93O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh3ZWVrIDwgMSB8fCB3ZWVrID4gd2Vla3NJblllYXIod2Vla1llYXIsIGRvdywgZG95KSkge1xuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuX292ZXJmbG93V2Vla3MgPSB0cnVlO1xuICAgICAgICB9IGVsc2UgaWYgKHdlZWtkYXlPdmVyZmxvdyAhPSBudWxsKSB7XG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5fb3ZlcmZsb3dXZWVrZGF5ID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRlbXAgPSBkYXlPZlllYXJGcm9tV2Vla3Mod2Vla1llYXIsIHdlZWssIHdlZWtkYXksIGRvdywgZG95KTtcbiAgICAgICAgICAgIGNvbmZpZy5fYVtZRUFSXSA9IHRlbXAueWVhcjtcbiAgICAgICAgICAgIGNvbmZpZy5fZGF5T2ZZZWFyID0gdGVtcC5kYXlPZlllYXI7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBjb25zdGFudCB0aGF0IHJlZmVycyB0byB0aGUgSVNPIHN0YW5kYXJkXG4gICAgaG9va3MuSVNPXzg2MDEgPSBmdW5jdGlvbiAoKSB7fTtcblxuICAgIC8vIGNvbnN0YW50IHRoYXQgcmVmZXJzIHRvIHRoZSBSRkMgMjgyMiBmb3JtXG4gICAgaG9va3MuUkZDXzI4MjIgPSBmdW5jdGlvbiAoKSB7fTtcblxuICAgIC8vIGRhdGUgZnJvbSBzdHJpbmcgYW5kIGZvcm1hdCBzdHJpbmdcbiAgICBmdW5jdGlvbiBjb25maWdGcm9tU3RyaW5nQW5kRm9ybWF0KGNvbmZpZykge1xuICAgICAgICAvLyBUT0RPOiBNb3ZlIHRoaXMgdG8gYW5vdGhlciBwYXJ0IG9mIHRoZSBjcmVhdGlvbiBmbG93IHRvIHByZXZlbnQgY2lyY3VsYXIgZGVwc1xuICAgICAgICBpZiAoY29uZmlnLl9mID09PSBob29rcy5JU09fODYwMSkge1xuICAgICAgICAgICAgY29uZmlnRnJvbUlTTyhjb25maWcpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb25maWcuX2YgPT09IGhvb2tzLlJGQ18yODIyKSB7XG4gICAgICAgICAgICBjb25maWdGcm9tUkZDMjgyMihjb25maWcpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbmZpZy5fYSA9IFtdO1xuICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5lbXB0eSA9IHRydWU7XG5cbiAgICAgICAgLy8gVGhpcyBhcnJheSBpcyB1c2VkIHRvIG1ha2UgYSBEYXRlLCBlaXRoZXIgd2l0aCBgbmV3IERhdGVgIG9yIGBEYXRlLlVUQ2BcbiAgICAgICAgdmFyIHN0cmluZyA9ICcnICsgY29uZmlnLl9pLFxuICAgICAgICAgICAgaSxcbiAgICAgICAgICAgIHBhcnNlZElucHV0LFxuICAgICAgICAgICAgdG9rZW5zLFxuICAgICAgICAgICAgdG9rZW4sXG4gICAgICAgICAgICBza2lwcGVkLFxuICAgICAgICAgICAgc3RyaW5nTGVuZ3RoID0gc3RyaW5nLmxlbmd0aCxcbiAgICAgICAgICAgIHRvdGFsUGFyc2VkSW5wdXRMZW5ndGggPSAwLFxuICAgICAgICAgICAgZXJhLFxuICAgICAgICAgICAgdG9rZW5MZW47XG5cbiAgICAgICAgdG9rZW5zID1cbiAgICAgICAgICAgIGV4cGFuZEZvcm1hdChjb25maWcuX2YsIGNvbmZpZy5fbG9jYWxlKS5tYXRjaChmb3JtYXR0aW5nVG9rZW5zKSB8fCBbXTtcbiAgICAgICAgdG9rZW5MZW4gPSB0b2tlbnMubGVuZ3RoO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdG9rZW5MZW47IGkrKykge1xuICAgICAgICAgICAgdG9rZW4gPSB0b2tlbnNbaV07XG4gICAgICAgICAgICBwYXJzZWRJbnB1dCA9IChzdHJpbmcubWF0Y2goZ2V0UGFyc2VSZWdleEZvclRva2VuKHRva2VuLCBjb25maWcpKSB8fFxuICAgICAgICAgICAgICAgIFtdKVswXTtcbiAgICAgICAgICAgIGlmIChwYXJzZWRJbnB1dCkge1xuICAgICAgICAgICAgICAgIHNraXBwZWQgPSBzdHJpbmcuc3Vic3RyKDAsIHN0cmluZy5pbmRleE9mKHBhcnNlZElucHV0KSk7XG4gICAgICAgICAgICAgICAgaWYgKHNraXBwZWQubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS51bnVzZWRJbnB1dC5wdXNoKHNraXBwZWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzdHJpbmcgPSBzdHJpbmcuc2xpY2UoXG4gICAgICAgICAgICAgICAgICAgIHN0cmluZy5pbmRleE9mKHBhcnNlZElucHV0KSArIHBhcnNlZElucHV0Lmxlbmd0aFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgdG90YWxQYXJzZWRJbnB1dExlbmd0aCArPSBwYXJzZWRJbnB1dC5sZW5ndGg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBkb24ndCBwYXJzZSBpZiBpdCdzIG5vdCBhIGtub3duIHRva2VuXG4gICAgICAgICAgICBpZiAoZm9ybWF0VG9rZW5GdW5jdGlvbnNbdG9rZW5dKSB7XG4gICAgICAgICAgICAgICAgaWYgKHBhcnNlZElucHV0KSB7XG4gICAgICAgICAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmVtcHR5ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykudW51c2VkVG9rZW5zLnB1c2godG9rZW4pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBhZGRUaW1lVG9BcnJheUZyb21Ub2tlbih0b2tlbiwgcGFyc2VkSW5wdXQsIGNvbmZpZyk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNvbmZpZy5fc3RyaWN0ICYmICFwYXJzZWRJbnB1dCkge1xuICAgICAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLnVudXNlZFRva2Vucy5wdXNoKHRva2VuKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGFkZCByZW1haW5pbmcgdW5wYXJzZWQgaW5wdXQgbGVuZ3RoIHRvIHRoZSBzdHJpbmdcbiAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuY2hhcnNMZWZ0T3ZlciA9XG4gICAgICAgICAgICBzdHJpbmdMZW5ndGggLSB0b3RhbFBhcnNlZElucHV0TGVuZ3RoO1xuICAgICAgICBpZiAoc3RyaW5nLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLnVudXNlZElucHV0LnB1c2goc3RyaW5nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGNsZWFyIF8xMmggZmxhZyBpZiBob3VyIGlzIDw9IDEyXG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIGNvbmZpZy5fYVtIT1VSXSA8PSAxMiAmJlxuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuYmlnSG91ciA9PT0gdHJ1ZSAmJlxuICAgICAgICAgICAgY29uZmlnLl9hW0hPVVJdID4gMFxuICAgICAgICApIHtcbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmJpZ0hvdXIgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5wYXJzZWREYXRlUGFydHMgPSBjb25maWcuX2Euc2xpY2UoMCk7XG4gICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLm1lcmlkaWVtID0gY29uZmlnLl9tZXJpZGllbTtcbiAgICAgICAgLy8gaGFuZGxlIG1lcmlkaWVtXG4gICAgICAgIGNvbmZpZy5fYVtIT1VSXSA9IG1lcmlkaWVtRml4V3JhcChcbiAgICAgICAgICAgIGNvbmZpZy5fbG9jYWxlLFxuICAgICAgICAgICAgY29uZmlnLl9hW0hPVVJdLFxuICAgICAgICAgICAgY29uZmlnLl9tZXJpZGllbVxuICAgICAgICApO1xuXG4gICAgICAgIC8vIGhhbmRsZSBlcmFcbiAgICAgICAgZXJhID0gZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuZXJhO1xuICAgICAgICBpZiAoZXJhICE9PSBudWxsKSB7XG4gICAgICAgICAgICBjb25maWcuX2FbWUVBUl0gPSBjb25maWcuX2xvY2FsZS5lcmFzQ29udmVydFllYXIoZXJhLCBjb25maWcuX2FbWUVBUl0pO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uZmlnRnJvbUFycmF5KGNvbmZpZyk7XG4gICAgICAgIGNoZWNrT3ZlcmZsb3coY29uZmlnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtZXJpZGllbUZpeFdyYXAobG9jYWxlLCBob3VyLCBtZXJpZGllbSkge1xuICAgICAgICB2YXIgaXNQbTtcblxuICAgICAgICBpZiAobWVyaWRpZW0gPT0gbnVsbCkge1xuICAgICAgICAgICAgLy8gbm90aGluZyB0byBkb1xuICAgICAgICAgICAgcmV0dXJuIGhvdXI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxvY2FsZS5tZXJpZGllbUhvdXIgIT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIGxvY2FsZS5tZXJpZGllbUhvdXIoaG91ciwgbWVyaWRpZW0pO1xuICAgICAgICB9IGVsc2UgaWYgKGxvY2FsZS5pc1BNICE9IG51bGwpIHtcbiAgICAgICAgICAgIC8vIEZhbGxiYWNrXG4gICAgICAgICAgICBpc1BtID0gbG9jYWxlLmlzUE0obWVyaWRpZW0pO1xuICAgICAgICAgICAgaWYgKGlzUG0gJiYgaG91ciA8IDEyKSB7XG4gICAgICAgICAgICAgICAgaG91ciArPSAxMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghaXNQbSAmJiBob3VyID09PSAxMikge1xuICAgICAgICAgICAgICAgIGhvdXIgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGhvdXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyB0aGlzIGlzIG5vdCBzdXBwb3NlZCB0byBoYXBwZW5cbiAgICAgICAgICAgIHJldHVybiBob3VyO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gZGF0ZSBmcm9tIHN0cmluZyBhbmQgYXJyYXkgb2YgZm9ybWF0IHN0cmluZ3NcbiAgICBmdW5jdGlvbiBjb25maWdGcm9tU3RyaW5nQW5kQXJyYXkoY29uZmlnKSB7XG4gICAgICAgIHZhciB0ZW1wQ29uZmlnLFxuICAgICAgICAgICAgYmVzdE1vbWVudCxcbiAgICAgICAgICAgIHNjb3JlVG9CZWF0LFxuICAgICAgICAgICAgaSxcbiAgICAgICAgICAgIGN1cnJlbnRTY29yZSxcbiAgICAgICAgICAgIHZhbGlkRm9ybWF0Rm91bmQsXG4gICAgICAgICAgICBiZXN0Rm9ybWF0SXNWYWxpZCA9IGZhbHNlLFxuICAgICAgICAgICAgY29uZmlnZkxlbiA9IGNvbmZpZy5fZi5sZW5ndGg7XG5cbiAgICAgICAgaWYgKGNvbmZpZ2ZMZW4gPT09IDApIHtcbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmludmFsaWRGb3JtYXQgPSB0cnVlO1xuICAgICAgICAgICAgY29uZmlnLl9kID0gbmV3IERhdGUoTmFOKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBjb25maWdmTGVuOyBpKyspIHtcbiAgICAgICAgICAgIGN1cnJlbnRTY29yZSA9IDA7XG4gICAgICAgICAgICB2YWxpZEZvcm1hdEZvdW5kID0gZmFsc2U7XG4gICAgICAgICAgICB0ZW1wQ29uZmlnID0gY29weUNvbmZpZyh7fSwgY29uZmlnKTtcbiAgICAgICAgICAgIGlmIChjb25maWcuX3VzZVVUQyAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGVtcENvbmZpZy5fdXNlVVRDID0gY29uZmlnLl91c2VVVEM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0ZW1wQ29uZmlnLl9mID0gY29uZmlnLl9mW2ldO1xuICAgICAgICAgICAgY29uZmlnRnJvbVN0cmluZ0FuZEZvcm1hdCh0ZW1wQ29uZmlnKTtcblxuICAgICAgICAgICAgaWYgKGlzVmFsaWQodGVtcENvbmZpZykpIHtcbiAgICAgICAgICAgICAgICB2YWxpZEZvcm1hdEZvdW5kID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gaWYgdGhlcmUgaXMgYW55IGlucHV0IHRoYXQgd2FzIG5vdCBwYXJzZWQgYWRkIGEgcGVuYWx0eSBmb3IgdGhhdCBmb3JtYXRcbiAgICAgICAgICAgIGN1cnJlbnRTY29yZSArPSBnZXRQYXJzaW5nRmxhZ3ModGVtcENvbmZpZykuY2hhcnNMZWZ0T3ZlcjtcblxuICAgICAgICAgICAgLy9vciB0b2tlbnNcbiAgICAgICAgICAgIGN1cnJlbnRTY29yZSArPSBnZXRQYXJzaW5nRmxhZ3ModGVtcENvbmZpZykudW51c2VkVG9rZW5zLmxlbmd0aCAqIDEwO1xuXG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3ModGVtcENvbmZpZykuc2NvcmUgPSBjdXJyZW50U2NvcmU7XG5cbiAgICAgICAgICAgIGlmICghYmVzdEZvcm1hdElzVmFsaWQpIHtcbiAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgIHNjb3JlVG9CZWF0ID09IG51bGwgfHxcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFNjb3JlIDwgc2NvcmVUb0JlYXQgfHxcbiAgICAgICAgICAgICAgICAgICAgdmFsaWRGb3JtYXRGb3VuZFxuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICBzY29yZVRvQmVhdCA9IGN1cnJlbnRTY29yZTtcbiAgICAgICAgICAgICAgICAgICAgYmVzdE1vbWVudCA9IHRlbXBDb25maWc7XG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWxpZEZvcm1hdEZvdW5kKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBiZXN0Rm9ybWF0SXNWYWxpZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50U2NvcmUgPCBzY29yZVRvQmVhdCkge1xuICAgICAgICAgICAgICAgICAgICBzY29yZVRvQmVhdCA9IGN1cnJlbnRTY29yZTtcbiAgICAgICAgICAgICAgICAgICAgYmVzdE1vbWVudCA9IHRlbXBDb25maWc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZXh0ZW5kKGNvbmZpZywgYmVzdE1vbWVudCB8fCB0ZW1wQ29uZmlnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb25maWdGcm9tT2JqZWN0KGNvbmZpZykge1xuICAgICAgICBpZiAoY29uZmlnLl9kKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaSA9IG5vcm1hbGl6ZU9iamVjdFVuaXRzKGNvbmZpZy5faSksXG4gICAgICAgICAgICBkYXlPckRhdGUgPSBpLmRheSA9PT0gdW5kZWZpbmVkID8gaS5kYXRlIDogaS5kYXk7XG4gICAgICAgIGNvbmZpZy5fYSA9IG1hcChcbiAgICAgICAgICAgIFtpLnllYXIsIGkubW9udGgsIGRheU9yRGF0ZSwgaS5ob3VyLCBpLm1pbnV0ZSwgaS5zZWNvbmQsIGkubWlsbGlzZWNvbmRdLFxuICAgICAgICAgICAgZnVuY3Rpb24gKG9iaikge1xuICAgICAgICAgICAgICAgIHJldHVybiBvYmogJiYgcGFyc2VJbnQob2JqLCAxMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG5cbiAgICAgICAgY29uZmlnRnJvbUFycmF5KGNvbmZpZyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlRnJvbUNvbmZpZyhjb25maWcpIHtcbiAgICAgICAgdmFyIHJlcyA9IG5ldyBNb21lbnQoY2hlY2tPdmVyZmxvdyhwcmVwYXJlQ29uZmlnKGNvbmZpZykpKTtcbiAgICAgICAgaWYgKHJlcy5fbmV4dERheSkge1xuICAgICAgICAgICAgLy8gQWRkaW5nIGlzIHNtYXJ0IGVub3VnaCBhcm91bmQgRFNUXG4gICAgICAgICAgICByZXMuYWRkKDEsICdkJyk7XG4gICAgICAgICAgICByZXMuX25leHREYXkgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHByZXBhcmVDb25maWcoY29uZmlnKSB7XG4gICAgICAgIHZhciBpbnB1dCA9IGNvbmZpZy5faSxcbiAgICAgICAgICAgIGZvcm1hdCA9IGNvbmZpZy5fZjtcblxuICAgICAgICBjb25maWcuX2xvY2FsZSA9IGNvbmZpZy5fbG9jYWxlIHx8IGdldExvY2FsZShjb25maWcuX2wpO1xuXG4gICAgICAgIGlmIChpbnB1dCA9PT0gbnVsbCB8fCAoZm9ybWF0ID09PSB1bmRlZmluZWQgJiYgaW5wdXQgPT09ICcnKSkge1xuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUludmFsaWQoeyBudWxsSW5wdXQ6IHRydWUgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgY29uZmlnLl9pID0gaW5wdXQgPSBjb25maWcuX2xvY2FsZS5wcmVwYXJzZShpbnB1dCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNNb21lbnQoaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IE1vbWVudChjaGVja092ZXJmbG93KGlucHV0KSk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNEYXRlKGlucHV0KSkge1xuICAgICAgICAgICAgY29uZmlnLl9kID0gaW5wdXQ7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNBcnJheShmb3JtYXQpKSB7XG4gICAgICAgICAgICBjb25maWdGcm9tU3RyaW5nQW5kQXJyYXkoY29uZmlnKTtcbiAgICAgICAgfSBlbHNlIGlmIChmb3JtYXQpIHtcbiAgICAgICAgICAgIGNvbmZpZ0Zyb21TdHJpbmdBbmRGb3JtYXQoY29uZmlnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbmZpZ0Zyb21JbnB1dChjb25maWcpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFpc1ZhbGlkKGNvbmZpZykpIHtcbiAgICAgICAgICAgIGNvbmZpZy5fZCA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY29uZmlnO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNvbmZpZ0Zyb21JbnB1dChjb25maWcpIHtcbiAgICAgICAgdmFyIGlucHV0ID0gY29uZmlnLl9pO1xuICAgICAgICBpZiAoaXNVbmRlZmluZWQoaW5wdXQpKSB7XG4gICAgICAgICAgICBjb25maWcuX2QgPSBuZXcgRGF0ZShob29rcy5ub3coKSk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNEYXRlKGlucHV0KSkge1xuICAgICAgICAgICAgY29uZmlnLl9kID0gbmV3IERhdGUoaW5wdXQudmFsdWVPZigpKTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBjb25maWdGcm9tU3RyaW5nKGNvbmZpZyk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNBcnJheShpbnB1dCkpIHtcbiAgICAgICAgICAgIGNvbmZpZy5fYSA9IG1hcChpbnB1dC5zbGljZSgwKSwgZnVuY3Rpb24gKG9iaikge1xuICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZUludChvYmosIDEwKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY29uZmlnRnJvbUFycmF5KGNvbmZpZyk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNPYmplY3QoaW5wdXQpKSB7XG4gICAgICAgICAgICBjb25maWdGcm9tT2JqZWN0KGNvbmZpZyk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNOdW1iZXIoaW5wdXQpKSB7XG4gICAgICAgICAgICAvLyBmcm9tIG1pbGxpc2Vjb25kc1xuICAgICAgICAgICAgY29uZmlnLl9kID0gbmV3IERhdGUoaW5wdXQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaG9va3MuY3JlYXRlRnJvbUlucHV0RmFsbGJhY2soY29uZmlnKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUxvY2FsT3JVVEMoaW5wdXQsIGZvcm1hdCwgbG9jYWxlLCBzdHJpY3QsIGlzVVRDKSB7XG4gICAgICAgIHZhciBjID0ge307XG5cbiAgICAgICAgaWYgKGZvcm1hdCA9PT0gdHJ1ZSB8fCBmb3JtYXQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBzdHJpY3QgPSBmb3JtYXQ7XG4gICAgICAgICAgICBmb3JtYXQgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobG9jYWxlID09PSB0cnVlIHx8IGxvY2FsZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHN0cmljdCA9IGxvY2FsZTtcbiAgICAgICAgICAgIGxvY2FsZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIChpc09iamVjdChpbnB1dCkgJiYgaXNPYmplY3RFbXB0eShpbnB1dCkpIHx8XG4gICAgICAgICAgICAoaXNBcnJheShpbnB1dCkgJiYgaW5wdXQubGVuZ3RoID09PSAwKVxuICAgICAgICApIHtcbiAgICAgICAgICAgIGlucHV0ID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIC8vIG9iamVjdCBjb25zdHJ1Y3Rpb24gbXVzdCBiZSBkb25lIHRoaXMgd2F5LlxuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vbW9tZW50L21vbWVudC9pc3N1ZXMvMTQyM1xuICAgICAgICBjLl9pc0FNb21lbnRPYmplY3QgPSB0cnVlO1xuICAgICAgICBjLl91c2VVVEMgPSBjLl9pc1VUQyA9IGlzVVRDO1xuICAgICAgICBjLl9sID0gbG9jYWxlO1xuICAgICAgICBjLl9pID0gaW5wdXQ7XG4gICAgICAgIGMuX2YgPSBmb3JtYXQ7XG4gICAgICAgIGMuX3N0cmljdCA9IHN0cmljdDtcblxuICAgICAgICByZXR1cm4gY3JlYXRlRnJvbUNvbmZpZyhjKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVMb2NhbChpbnB1dCwgZm9ybWF0LCBsb2NhbGUsIHN0cmljdCkge1xuICAgICAgICByZXR1cm4gY3JlYXRlTG9jYWxPclVUQyhpbnB1dCwgZm9ybWF0LCBsb2NhbGUsIHN0cmljdCwgZmFsc2UpO1xuICAgIH1cblxuICAgIHZhciBwcm90b3R5cGVNaW4gPSBkZXByZWNhdGUoXG4gICAgICAgICAgICAnbW9tZW50KCkubWluIGlzIGRlcHJlY2F0ZWQsIHVzZSBtb21lbnQubWF4IGluc3RlYWQuIGh0dHA6Ly9tb21lbnRqcy5jb20vZ3VpZGVzLyMvd2FybmluZ3MvbWluLW1heC8nLFxuICAgICAgICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBvdGhlciA9IGNyZWF0ZUxvY2FsLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNWYWxpZCgpICYmIG90aGVyLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gb3RoZXIgPCB0aGlzID8gdGhpcyA6IG90aGVyO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjcmVhdGVJbnZhbGlkKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICApLFxuICAgICAgICBwcm90b3R5cGVNYXggPSBkZXByZWNhdGUoXG4gICAgICAgICAgICAnbW9tZW50KCkubWF4IGlzIGRlcHJlY2F0ZWQsIHVzZSBtb21lbnQubWluIGluc3RlYWQuIGh0dHA6Ly9tb21lbnRqcy5jb20vZ3VpZGVzLyMvd2FybmluZ3MvbWluLW1heC8nLFxuICAgICAgICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBvdGhlciA9IGNyZWF0ZUxvY2FsLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNWYWxpZCgpICYmIG90aGVyLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gb3RoZXIgPiB0aGlzID8gdGhpcyA6IG90aGVyO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjcmVhdGVJbnZhbGlkKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuXG4gICAgLy8gUGljayBhIG1vbWVudCBtIGZyb20gbW9tZW50cyBzbyB0aGF0IG1bZm5dKG90aGVyKSBpcyB0cnVlIGZvciBhbGxcbiAgICAvLyBvdGhlci4gVGhpcyByZWxpZXMgb24gdGhlIGZ1bmN0aW9uIGZuIHRvIGJlIHRyYW5zaXRpdmUuXG4gICAgLy9cbiAgICAvLyBtb21lbnRzIHNob3VsZCBlaXRoZXIgYmUgYW4gYXJyYXkgb2YgbW9tZW50IG9iamVjdHMgb3IgYW4gYXJyYXksIHdob3NlXG4gICAgLy8gZmlyc3QgZWxlbWVudCBpcyBhbiBhcnJheSBvZiBtb21lbnQgb2JqZWN0cy5cbiAgICBmdW5jdGlvbiBwaWNrQnkoZm4sIG1vbWVudHMpIHtcbiAgICAgICAgdmFyIHJlcywgaTtcbiAgICAgICAgaWYgKG1vbWVudHMubGVuZ3RoID09PSAxICYmIGlzQXJyYXkobW9tZW50c1swXSkpIHtcbiAgICAgICAgICAgIG1vbWVudHMgPSBtb21lbnRzWzBdO1xuICAgICAgICB9XG4gICAgICAgIGlmICghbW9tZW50cy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVMb2NhbCgpO1xuICAgICAgICB9XG4gICAgICAgIHJlcyA9IG1vbWVudHNbMF07XG4gICAgICAgIGZvciAoaSA9IDE7IGkgPCBtb21lbnRzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBpZiAoIW1vbWVudHNbaV0uaXNWYWxpZCgpIHx8IG1vbWVudHNbaV1bZm5dKHJlcykpIHtcbiAgICAgICAgICAgICAgICByZXMgPSBtb21lbnRzW2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxuXG4gICAgLy8gVE9ETzogVXNlIFtdLnNvcnQgaW5zdGVhZD9cbiAgICBmdW5jdGlvbiBtaW4oKSB7XG4gICAgICAgIHZhciBhcmdzID0gW10uc2xpY2UuY2FsbChhcmd1bWVudHMsIDApO1xuXG4gICAgICAgIHJldHVybiBwaWNrQnkoJ2lzQmVmb3JlJywgYXJncyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWF4KCkge1xuICAgICAgICB2YXIgYXJncyA9IFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAwKTtcblxuICAgICAgICByZXR1cm4gcGlja0J5KCdpc0FmdGVyJywgYXJncyk7XG4gICAgfVxuXG4gICAgdmFyIG5vdyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIERhdGUubm93ID8gRGF0ZS5ub3coKSA6ICtuZXcgRGF0ZSgpO1xuICAgIH07XG5cbiAgICB2YXIgb3JkZXJpbmcgPSBbXG4gICAgICAgICd5ZWFyJyxcbiAgICAgICAgJ3F1YXJ0ZXInLFxuICAgICAgICAnbW9udGgnLFxuICAgICAgICAnd2VlaycsXG4gICAgICAgICdkYXknLFxuICAgICAgICAnaG91cicsXG4gICAgICAgICdtaW51dGUnLFxuICAgICAgICAnc2Vjb25kJyxcbiAgICAgICAgJ21pbGxpc2Vjb25kJyxcbiAgICBdO1xuXG4gICAgZnVuY3Rpb24gaXNEdXJhdGlvblZhbGlkKG0pIHtcbiAgICAgICAgdmFyIGtleSxcbiAgICAgICAgICAgIHVuaXRIYXNEZWNpbWFsID0gZmFsc2UsXG4gICAgICAgICAgICBpLFxuICAgICAgICAgICAgb3JkZXJMZW4gPSBvcmRlcmluZy5sZW5ndGg7XG4gICAgICAgIGZvciAoa2V5IGluIG0pIHtcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICBoYXNPd25Qcm9wKG0sIGtleSkgJiZcbiAgICAgICAgICAgICAgICAhKFxuICAgICAgICAgICAgICAgICAgICBpbmRleE9mLmNhbGwob3JkZXJpbmcsIGtleSkgIT09IC0xICYmXG4gICAgICAgICAgICAgICAgICAgIChtW2tleV0gPT0gbnVsbCB8fCAhaXNOYU4obVtrZXldKSlcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgb3JkZXJMZW47ICsraSkge1xuICAgICAgICAgICAgaWYgKG1bb3JkZXJpbmdbaV1dKSB7XG4gICAgICAgICAgICAgICAgaWYgKHVuaXRIYXNEZWNpbWFsKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsgLy8gb25seSBhbGxvdyBub24taW50ZWdlcnMgZm9yIHNtYWxsZXN0IHVuaXRcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHBhcnNlRmxvYXQobVtvcmRlcmluZ1tpXV0pICE9PSB0b0ludChtW29yZGVyaW5nW2ldXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdW5pdEhhc0RlY2ltYWwgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzVmFsaWQkMSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lzVmFsaWQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlSW52YWxpZCQxKCkge1xuICAgICAgICByZXR1cm4gY3JlYXRlRHVyYXRpb24oTmFOKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBEdXJhdGlvbihkdXJhdGlvbikge1xuICAgICAgICB2YXIgbm9ybWFsaXplZElucHV0ID0gbm9ybWFsaXplT2JqZWN0VW5pdHMoZHVyYXRpb24pLFxuICAgICAgICAgICAgeWVhcnMgPSBub3JtYWxpemVkSW5wdXQueWVhciB8fCAwLFxuICAgICAgICAgICAgcXVhcnRlcnMgPSBub3JtYWxpemVkSW5wdXQucXVhcnRlciB8fCAwLFxuICAgICAgICAgICAgbW9udGhzID0gbm9ybWFsaXplZElucHV0Lm1vbnRoIHx8IDAsXG4gICAgICAgICAgICB3ZWVrcyA9IG5vcm1hbGl6ZWRJbnB1dC53ZWVrIHx8IG5vcm1hbGl6ZWRJbnB1dC5pc29XZWVrIHx8IDAsXG4gICAgICAgICAgICBkYXlzID0gbm9ybWFsaXplZElucHV0LmRheSB8fCAwLFxuICAgICAgICAgICAgaG91cnMgPSBub3JtYWxpemVkSW5wdXQuaG91ciB8fCAwLFxuICAgICAgICAgICAgbWludXRlcyA9IG5vcm1hbGl6ZWRJbnB1dC5taW51dGUgfHwgMCxcbiAgICAgICAgICAgIHNlY29uZHMgPSBub3JtYWxpemVkSW5wdXQuc2Vjb25kIHx8IDAsXG4gICAgICAgICAgICBtaWxsaXNlY29uZHMgPSBub3JtYWxpemVkSW5wdXQubWlsbGlzZWNvbmQgfHwgMDtcblxuICAgICAgICB0aGlzLl9pc1ZhbGlkID0gaXNEdXJhdGlvblZhbGlkKG5vcm1hbGl6ZWRJbnB1dCk7XG5cbiAgICAgICAgLy8gcmVwcmVzZW50YXRpb24gZm9yIGRhdGVBZGRSZW1vdmVcbiAgICAgICAgdGhpcy5fbWlsbGlzZWNvbmRzID1cbiAgICAgICAgICAgICttaWxsaXNlY29uZHMgK1xuICAgICAgICAgICAgc2Vjb25kcyAqIDFlMyArIC8vIDEwMDBcbiAgICAgICAgICAgIG1pbnV0ZXMgKiA2ZTQgKyAvLyAxMDAwICogNjBcbiAgICAgICAgICAgIGhvdXJzICogMTAwMCAqIDYwICogNjA7IC8vdXNpbmcgMTAwMCAqIDYwICogNjAgaW5zdGVhZCBvZiAzNmU1IHRvIGF2b2lkIGZsb2F0aW5nIHBvaW50IHJvdW5kaW5nIGVycm9ycyBodHRwczovL2dpdGh1Yi5jb20vbW9tZW50L21vbWVudC9pc3N1ZXMvMjk3OFxuICAgICAgICAvLyBCZWNhdXNlIG9mIGRhdGVBZGRSZW1vdmUgdHJlYXRzIDI0IGhvdXJzIGFzIGRpZmZlcmVudCBmcm9tIGFcbiAgICAgICAgLy8gZGF5IHdoZW4gd29ya2luZyBhcm91bmQgRFNULCB3ZSBuZWVkIHRvIHN0b3JlIHRoZW0gc2VwYXJhdGVseVxuICAgICAgICB0aGlzLl9kYXlzID0gK2RheXMgKyB3ZWVrcyAqIDc7XG4gICAgICAgIC8vIEl0IGlzIGltcG9zc2libGUgdG8gdHJhbnNsYXRlIG1vbnRocyBpbnRvIGRheXMgd2l0aG91dCBrbm93aW5nXG4gICAgICAgIC8vIHdoaWNoIG1vbnRocyB5b3UgYXJlIGFyZSB0YWxraW5nIGFib3V0LCBzbyB3ZSBoYXZlIHRvIHN0b3JlXG4gICAgICAgIC8vIGl0IHNlcGFyYXRlbHkuXG4gICAgICAgIHRoaXMuX21vbnRocyA9ICttb250aHMgKyBxdWFydGVycyAqIDMgKyB5ZWFycyAqIDEyO1xuXG4gICAgICAgIHRoaXMuX2RhdGEgPSB7fTtcblxuICAgICAgICB0aGlzLl9sb2NhbGUgPSBnZXRMb2NhbGUoKTtcblxuICAgICAgICB0aGlzLl9idWJibGUoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0R1cmF0aW9uKG9iaikge1xuICAgICAgICByZXR1cm4gb2JqIGluc3RhbmNlb2YgRHVyYXRpb247XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYWJzUm91bmQobnVtYmVyKSB7XG4gICAgICAgIGlmIChudW1iZXIgPCAwKSB7XG4gICAgICAgICAgICByZXR1cm4gTWF0aC5yb3VuZCgtMSAqIG51bWJlcikgKiAtMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBNYXRoLnJvdW5kKG51bWJlcik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBjb21wYXJlIHR3byBhcnJheXMsIHJldHVybiB0aGUgbnVtYmVyIG9mIGRpZmZlcmVuY2VzXG4gICAgZnVuY3Rpb24gY29tcGFyZUFycmF5cyhhcnJheTEsIGFycmF5MiwgZG9udENvbnZlcnQpIHtcbiAgICAgICAgdmFyIGxlbiA9IE1hdGgubWluKGFycmF5MS5sZW5ndGgsIGFycmF5Mi5sZW5ndGgpLFxuICAgICAgICAgICAgbGVuZ3RoRGlmZiA9IE1hdGguYWJzKGFycmF5MS5sZW5ndGggLSBhcnJheTIubGVuZ3RoKSxcbiAgICAgICAgICAgIGRpZmZzID0gMCxcbiAgICAgICAgICAgIGk7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIChkb250Q29udmVydCAmJiBhcnJheTFbaV0gIT09IGFycmF5MltpXSkgfHxcbiAgICAgICAgICAgICAgICAoIWRvbnRDb252ZXJ0ICYmIHRvSW50KGFycmF5MVtpXSkgIT09IHRvSW50KGFycmF5MltpXSkpXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBkaWZmcysrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkaWZmcyArIGxlbmd0aERpZmY7XG4gICAgfVxuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgZnVuY3Rpb24gb2Zmc2V0KHRva2VuLCBzZXBhcmF0b3IpIHtcbiAgICAgICAgYWRkRm9ybWF0VG9rZW4odG9rZW4sIDAsIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBvZmZzZXQgPSB0aGlzLnV0Y09mZnNldCgpLFxuICAgICAgICAgICAgICAgIHNpZ24gPSAnKyc7XG4gICAgICAgICAgICBpZiAob2Zmc2V0IDwgMCkge1xuICAgICAgICAgICAgICAgIG9mZnNldCA9IC1vZmZzZXQ7XG4gICAgICAgICAgICAgICAgc2lnbiA9ICctJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgc2lnbiArXG4gICAgICAgICAgICAgICAgemVyb0ZpbGwofn4ob2Zmc2V0IC8gNjApLCAyKSArXG4gICAgICAgICAgICAgICAgc2VwYXJhdG9yICtcbiAgICAgICAgICAgICAgICB6ZXJvRmlsbCh+fm9mZnNldCAlIDYwLCAyKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgb2Zmc2V0KCdaJywgJzonKTtcbiAgICBvZmZzZXQoJ1paJywgJycpO1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgYWRkUmVnZXhUb2tlbignWicsIG1hdGNoU2hvcnRPZmZzZXQpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ1paJywgbWF0Y2hTaG9ydE9mZnNldCk7XG4gICAgYWRkUGFyc2VUb2tlbihbJ1onLCAnWlonXSwgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgICAgIGNvbmZpZy5fdXNlVVRDID0gdHJ1ZTtcbiAgICAgICAgY29uZmlnLl90em0gPSBvZmZzZXRGcm9tU3RyaW5nKG1hdGNoU2hvcnRPZmZzZXQsIGlucHV0KTtcbiAgICB9KTtcblxuICAgIC8vIEhFTFBFUlNcblxuICAgIC8vIHRpbWV6b25lIGNodW5rZXJcbiAgICAvLyAnKzEwOjAwJyA+IFsnMTAnLCAgJzAwJ11cbiAgICAvLyAnLTE1MzAnICA+IFsnLTE1JywgJzMwJ11cbiAgICB2YXIgY2h1bmtPZmZzZXQgPSAvKFtcXCtcXC1dfFxcZFxcZCkvZ2k7XG5cbiAgICBmdW5jdGlvbiBvZmZzZXRGcm9tU3RyaW5nKG1hdGNoZXIsIHN0cmluZykge1xuICAgICAgICB2YXIgbWF0Y2hlcyA9IChzdHJpbmcgfHwgJycpLm1hdGNoKG1hdGNoZXIpLFxuICAgICAgICAgICAgY2h1bmssXG4gICAgICAgICAgICBwYXJ0cyxcbiAgICAgICAgICAgIG1pbnV0ZXM7XG5cbiAgICAgICAgaWYgKG1hdGNoZXMgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgY2h1bmsgPSBtYXRjaGVzW21hdGNoZXMubGVuZ3RoIC0gMV0gfHwgW107XG4gICAgICAgIHBhcnRzID0gKGNodW5rICsgJycpLm1hdGNoKGNodW5rT2Zmc2V0KSB8fCBbJy0nLCAwLCAwXTtcbiAgICAgICAgbWludXRlcyA9ICsocGFydHNbMV0gKiA2MCkgKyB0b0ludChwYXJ0c1syXSk7XG5cbiAgICAgICAgcmV0dXJuIG1pbnV0ZXMgPT09IDAgPyAwIDogcGFydHNbMF0gPT09ICcrJyA/IG1pbnV0ZXMgOiAtbWludXRlcztcbiAgICB9XG5cbiAgICAvLyBSZXR1cm4gYSBtb21lbnQgZnJvbSBpbnB1dCwgdGhhdCBpcyBsb2NhbC91dGMvem9uZSBlcXVpdmFsZW50IHRvIG1vZGVsLlxuICAgIGZ1bmN0aW9uIGNsb25lV2l0aE9mZnNldChpbnB1dCwgbW9kZWwpIHtcbiAgICAgICAgdmFyIHJlcywgZGlmZjtcbiAgICAgICAgaWYgKG1vZGVsLl9pc1VUQykge1xuICAgICAgICAgICAgcmVzID0gbW9kZWwuY2xvbmUoKTtcbiAgICAgICAgICAgIGRpZmYgPVxuICAgICAgICAgICAgICAgIChpc01vbWVudChpbnB1dCkgfHwgaXNEYXRlKGlucHV0KVxuICAgICAgICAgICAgICAgICAgICA/IGlucHV0LnZhbHVlT2YoKVxuICAgICAgICAgICAgICAgICAgICA6IGNyZWF0ZUxvY2FsKGlucHV0KS52YWx1ZU9mKCkpIC0gcmVzLnZhbHVlT2YoKTtcbiAgICAgICAgICAgIC8vIFVzZSBsb3ctbGV2ZWwgYXBpLCBiZWNhdXNlIHRoaXMgZm4gaXMgbG93LWxldmVsIGFwaS5cbiAgICAgICAgICAgIHJlcy5fZC5zZXRUaW1lKHJlcy5fZC52YWx1ZU9mKCkgKyBkaWZmKTtcbiAgICAgICAgICAgIGhvb2tzLnVwZGF0ZU9mZnNldChyZXMsIGZhbHNlKTtcbiAgICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlTG9jYWwoaW5wdXQpLmxvY2FsKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXREYXRlT2Zmc2V0KG0pIHtcbiAgICAgICAgLy8gT24gRmlyZWZveC4yNCBEYXRlI2dldFRpbWV6b25lT2Zmc2V0IHJldHVybnMgYSBmbG9hdGluZyBwb2ludC5cbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL21vbWVudC9tb21lbnQvcHVsbC8xODcxXG4gICAgICAgIHJldHVybiAtTWF0aC5yb3VuZChtLl9kLmdldFRpbWV6b25lT2Zmc2V0KCkpO1xuICAgIH1cblxuICAgIC8vIEhPT0tTXG5cbiAgICAvLyBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgY2FsbGVkIHdoZW5ldmVyIGEgbW9tZW50IGlzIG11dGF0ZWQuXG4gICAgLy8gSXQgaXMgaW50ZW5kZWQgdG8ga2VlcCB0aGUgb2Zmc2V0IGluIHN5bmMgd2l0aCB0aGUgdGltZXpvbmUuXG4gICAgaG9va3MudXBkYXRlT2Zmc2V0ID0gZnVuY3Rpb24gKCkge307XG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICAvLyBrZWVwTG9jYWxUaW1lID0gdHJ1ZSBtZWFucyBvbmx5IGNoYW5nZSB0aGUgdGltZXpvbmUsIHdpdGhvdXRcbiAgICAvLyBhZmZlY3RpbmcgdGhlIGxvY2FsIGhvdXIuIFNvIDU6MzE6MjYgKzAzMDAgLS1bdXRjT2Zmc2V0KDIsIHRydWUpXS0tPlxuICAgIC8vIDU6MzE6MjYgKzAyMDAgSXQgaXMgcG9zc2libGUgdGhhdCA1OjMxOjI2IGRvZXNuJ3QgZXhpc3Qgd2l0aCBvZmZzZXRcbiAgICAvLyArMDIwMCwgc28gd2UgYWRqdXN0IHRoZSB0aW1lIGFzIG5lZWRlZCwgdG8gYmUgdmFsaWQuXG4gICAgLy9cbiAgICAvLyBLZWVwaW5nIHRoZSB0aW1lIGFjdHVhbGx5IGFkZHMvc3VidHJhY3RzIChvbmUgaG91cilcbiAgICAvLyBmcm9tIHRoZSBhY3R1YWwgcmVwcmVzZW50ZWQgdGltZS4gVGhhdCBpcyB3aHkgd2UgY2FsbCB1cGRhdGVPZmZzZXRcbiAgICAvLyBhIHNlY29uZCB0aW1lLiBJbiBjYXNlIGl0IHdhbnRzIHVzIHRvIGNoYW5nZSB0aGUgb2Zmc2V0IGFnYWluXG4gICAgLy8gX2NoYW5nZUluUHJvZ3Jlc3MgPT0gdHJ1ZSBjYXNlLCB0aGVuIHdlIGhhdmUgdG8gYWRqdXN0LCBiZWNhdXNlXG4gICAgLy8gdGhlcmUgaXMgbm8gc3VjaCB0aW1lIGluIHRoZSBnaXZlbiB0aW1lem9uZS5cbiAgICBmdW5jdGlvbiBnZXRTZXRPZmZzZXQoaW5wdXQsIGtlZXBMb2NhbFRpbWUsIGtlZXBNaW51dGVzKSB7XG4gICAgICAgIHZhciBvZmZzZXQgPSB0aGlzLl9vZmZzZXQgfHwgMCxcbiAgICAgICAgICAgIGxvY2FsQWRqdXN0O1xuICAgICAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gaW5wdXQgIT0gbnVsbCA/IHRoaXMgOiBOYU47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlucHV0ICE9IG51bGwpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgaW5wdXQgPSBvZmZzZXRGcm9tU3RyaW5nKG1hdGNoU2hvcnRPZmZzZXQsIGlucHV0KTtcbiAgICAgICAgICAgICAgICBpZiAoaW5wdXQgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChNYXRoLmFicyhpbnB1dCkgPCAxNiAmJiAha2VlcE1pbnV0ZXMpIHtcbiAgICAgICAgICAgICAgICBpbnB1dCA9IGlucHV0ICogNjA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXRoaXMuX2lzVVRDICYmIGtlZXBMb2NhbFRpbWUpIHtcbiAgICAgICAgICAgICAgICBsb2NhbEFkanVzdCA9IGdldERhdGVPZmZzZXQodGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9vZmZzZXQgPSBpbnB1dDtcbiAgICAgICAgICAgIHRoaXMuX2lzVVRDID0gdHJ1ZTtcbiAgICAgICAgICAgIGlmIChsb2NhbEFkanVzdCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hZGQobG9jYWxBZGp1c3QsICdtJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAob2Zmc2V0ICE9PSBpbnB1dCkge1xuICAgICAgICAgICAgICAgIGlmICgha2VlcExvY2FsVGltZSB8fCB0aGlzLl9jaGFuZ2VJblByb2dyZXNzKSB7XG4gICAgICAgICAgICAgICAgICAgIGFkZFN1YnRyYWN0KFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNyZWF0ZUR1cmF0aW9uKGlucHV0IC0gb2Zmc2V0LCAnbScpLFxuICAgICAgICAgICAgICAgICAgICAgICAgMSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZhbHNlXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICghdGhpcy5fY2hhbmdlSW5Qcm9ncmVzcykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jaGFuZ2VJblByb2dyZXNzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgaG9va3MudXBkYXRlT2Zmc2V0KHRoaXMsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jaGFuZ2VJblByb2dyZXNzID0gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9pc1VUQyA/IG9mZnNldCA6IGdldERhdGVPZmZzZXQodGhpcyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRTZXRab25lKGlucHV0LCBrZWVwTG9jYWxUaW1lKSB7XG4gICAgICAgIGlmIChpbnB1dCAhPSBudWxsKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGlucHV0ICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIGlucHV0ID0gLWlucHV0O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLnV0Y09mZnNldChpbnB1dCwga2VlcExvY2FsVGltZSk7XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIC10aGlzLnV0Y09mZnNldCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0T2Zmc2V0VG9VVEMoa2VlcExvY2FsVGltZSkge1xuICAgICAgICByZXR1cm4gdGhpcy51dGNPZmZzZXQoMCwga2VlcExvY2FsVGltZSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0T2Zmc2V0VG9Mb2NhbChrZWVwTG9jYWxUaW1lKSB7XG4gICAgICAgIGlmICh0aGlzLl9pc1VUQykge1xuICAgICAgICAgICAgdGhpcy51dGNPZmZzZXQoMCwga2VlcExvY2FsVGltZSk7XG4gICAgICAgICAgICB0aGlzLl9pc1VUQyA9IGZhbHNlO1xuXG4gICAgICAgICAgICBpZiAoa2VlcExvY2FsVGltZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuc3VidHJhY3QoZ2V0RGF0ZU9mZnNldCh0aGlzKSwgJ20nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXRPZmZzZXRUb1BhcnNlZE9mZnNldCgpIHtcbiAgICAgICAgaWYgKHRoaXMuX3R6bSAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLnV0Y09mZnNldCh0aGlzLl90em0sIGZhbHNlLCB0cnVlKTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdGhpcy5faSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHZhciB0Wm9uZSA9IG9mZnNldEZyb21TdHJpbmcobWF0Y2hPZmZzZXQsIHRoaXMuX2kpO1xuICAgICAgICAgICAgaWYgKHRab25lICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnV0Y09mZnNldCh0Wm9uZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMudXRjT2Zmc2V0KDAsIHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGhhc0FsaWduZWRIb3VyT2Zmc2V0KGlucHV0KSB7XG4gICAgICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpbnB1dCA9IGlucHV0ID8gY3JlYXRlTG9jYWwoaW5wdXQpLnV0Y09mZnNldCgpIDogMDtcblxuICAgICAgICByZXR1cm4gKHRoaXMudXRjT2Zmc2V0KCkgLSBpbnB1dCkgJSA2MCA9PT0gMDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0RheWxpZ2h0U2F2aW5nVGltZSgpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIHRoaXMudXRjT2Zmc2V0KCkgPiB0aGlzLmNsb25lKCkubW9udGgoMCkudXRjT2Zmc2V0KCkgfHxcbiAgICAgICAgICAgIHRoaXMudXRjT2Zmc2V0KCkgPiB0aGlzLmNsb25lKCkubW9udGgoNSkudXRjT2Zmc2V0KClcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0RheWxpZ2h0U2F2aW5nVGltZVNoaWZ0ZWQoKSB7XG4gICAgICAgIGlmICghaXNVbmRlZmluZWQodGhpcy5faXNEU1RTaGlmdGVkKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2lzRFNUU2hpZnRlZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBjID0ge30sXG4gICAgICAgICAgICBvdGhlcjtcblxuICAgICAgICBjb3B5Q29uZmlnKGMsIHRoaXMpO1xuICAgICAgICBjID0gcHJlcGFyZUNvbmZpZyhjKTtcblxuICAgICAgICBpZiAoYy5fYSkge1xuICAgICAgICAgICAgb3RoZXIgPSBjLl9pc1VUQyA/IGNyZWF0ZVVUQyhjLl9hKSA6IGNyZWF0ZUxvY2FsKGMuX2EpO1xuICAgICAgICAgICAgdGhpcy5faXNEU1RTaGlmdGVkID1cbiAgICAgICAgICAgICAgICB0aGlzLmlzVmFsaWQoKSAmJiBjb21wYXJlQXJyYXlzKGMuX2EsIG90aGVyLnRvQXJyYXkoKSkgPiAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5faXNEU1RTaGlmdGVkID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5faXNEU1RTaGlmdGVkO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzTG9jYWwoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzVmFsaWQoKSA/ICF0aGlzLl9pc1VUQyA6IGZhbHNlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzVXRjT2Zmc2V0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pc1ZhbGlkKCkgPyB0aGlzLl9pc1VUQyA6IGZhbHNlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzVXRjKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pc1ZhbGlkKCkgPyB0aGlzLl9pc1VUQyAmJiB0aGlzLl9vZmZzZXQgPT09IDAgOiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyBBU1AuTkVUIGpzb24gZGF0ZSBmb3JtYXQgcmVnZXhcbiAgICB2YXIgYXNwTmV0UmVnZXggPSAvXigtfFxcKyk/KD86KFxcZCopWy4gXSk/KFxcZCspOihcXGQrKSg/OjooXFxkKykoXFwuXFxkKik/KT8kLyxcbiAgICAgICAgLy8gZnJvbSBodHRwOi8vZG9jcy5jbG9zdXJlLWxpYnJhcnkuZ29vZ2xlY29kZS5jb20vZ2l0L2Nsb3N1cmVfZ29vZ19kYXRlX2RhdGUuanMuc291cmNlLmh0bWxcbiAgICAgICAgLy8gc29tZXdoYXQgbW9yZSBpbiBsaW5lIHdpdGggNC40LjMuMiAyMDA0IHNwZWMsIGJ1dCBhbGxvd3MgZGVjaW1hbCBhbnl3aGVyZVxuICAgICAgICAvLyBhbmQgZnVydGhlciBtb2RpZmllZCB0byBhbGxvdyBmb3Igc3RyaW5ncyBjb250YWluaW5nIGJvdGggd2VlayBhbmQgZGF5XG4gICAgICAgIGlzb1JlZ2V4ID1cbiAgICAgICAgICAgIC9eKC18XFwrKT9QKD86KFstK10/WzAtOSwuXSopWSk/KD86KFstK10/WzAtOSwuXSopTSk/KD86KFstK10/WzAtOSwuXSopVyk/KD86KFstK10/WzAtOSwuXSopRCk/KD86VCg/OihbLStdP1swLTksLl0qKUgpPyg/OihbLStdP1swLTksLl0qKU0pPyg/OihbLStdP1swLTksLl0qKVMpPyk/JC87XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVEdXJhdGlvbihpbnB1dCwga2V5KSB7XG4gICAgICAgIHZhciBkdXJhdGlvbiA9IGlucHV0LFxuICAgICAgICAgICAgLy8gbWF0Y2hpbmcgYWdhaW5zdCByZWdleHAgaXMgZXhwZW5zaXZlLCBkbyBpdCBvbiBkZW1hbmRcbiAgICAgICAgICAgIG1hdGNoID0gbnVsbCxcbiAgICAgICAgICAgIHNpZ24sXG4gICAgICAgICAgICByZXQsXG4gICAgICAgICAgICBkaWZmUmVzO1xuXG4gICAgICAgIGlmIChpc0R1cmF0aW9uKGlucHV0KSkge1xuICAgICAgICAgICAgZHVyYXRpb24gPSB7XG4gICAgICAgICAgICAgICAgbXM6IGlucHV0Ll9taWxsaXNlY29uZHMsXG4gICAgICAgICAgICAgICAgZDogaW5wdXQuX2RheXMsXG4gICAgICAgICAgICAgICAgTTogaW5wdXQuX21vbnRocyxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSBpZiAoaXNOdW1iZXIoaW5wdXQpIHx8ICFpc05hTigraW5wdXQpKSB7XG4gICAgICAgICAgICBkdXJhdGlvbiA9IHt9O1xuICAgICAgICAgICAgaWYgKGtleSkge1xuICAgICAgICAgICAgICAgIGR1cmF0aW9uW2tleV0gPSAraW5wdXQ7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGR1cmF0aW9uLm1pbGxpc2Vjb25kcyA9ICtpbnB1dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICgobWF0Y2ggPSBhc3BOZXRSZWdleC5leGVjKGlucHV0KSkpIHtcbiAgICAgICAgICAgIHNpZ24gPSBtYXRjaFsxXSA9PT0gJy0nID8gLTEgOiAxO1xuICAgICAgICAgICAgZHVyYXRpb24gPSB7XG4gICAgICAgICAgICAgICAgeTogMCxcbiAgICAgICAgICAgICAgICBkOiB0b0ludChtYXRjaFtEQVRFXSkgKiBzaWduLFxuICAgICAgICAgICAgICAgIGg6IHRvSW50KG1hdGNoW0hPVVJdKSAqIHNpZ24sXG4gICAgICAgICAgICAgICAgbTogdG9JbnQobWF0Y2hbTUlOVVRFXSkgKiBzaWduLFxuICAgICAgICAgICAgICAgIHM6IHRvSW50KG1hdGNoW1NFQ09ORF0pICogc2lnbixcbiAgICAgICAgICAgICAgICBtczogdG9JbnQoYWJzUm91bmQobWF0Y2hbTUlMTElTRUNPTkRdICogMTAwMCkpICogc2lnbiwgLy8gdGhlIG1pbGxpc2Vjb25kIGRlY2ltYWwgcG9pbnQgaXMgaW5jbHVkZWQgaW4gdGhlIG1hdGNoXG4gICAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2UgaWYgKChtYXRjaCA9IGlzb1JlZ2V4LmV4ZWMoaW5wdXQpKSkge1xuICAgICAgICAgICAgc2lnbiA9IG1hdGNoWzFdID09PSAnLScgPyAtMSA6IDE7XG4gICAgICAgICAgICBkdXJhdGlvbiA9IHtcbiAgICAgICAgICAgICAgICB5OiBwYXJzZUlzbyhtYXRjaFsyXSwgc2lnbiksXG4gICAgICAgICAgICAgICAgTTogcGFyc2VJc28obWF0Y2hbM10sIHNpZ24pLFxuICAgICAgICAgICAgICAgIHc6IHBhcnNlSXNvKG1hdGNoWzRdLCBzaWduKSxcbiAgICAgICAgICAgICAgICBkOiBwYXJzZUlzbyhtYXRjaFs1XSwgc2lnbiksXG4gICAgICAgICAgICAgICAgaDogcGFyc2VJc28obWF0Y2hbNl0sIHNpZ24pLFxuICAgICAgICAgICAgICAgIG06IHBhcnNlSXNvKG1hdGNoWzddLCBzaWduKSxcbiAgICAgICAgICAgICAgICBzOiBwYXJzZUlzbyhtYXRjaFs4XSwgc2lnbiksXG4gICAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2UgaWYgKGR1cmF0aW9uID09IG51bGwpIHtcbiAgICAgICAgICAgIC8vIGNoZWNrcyBmb3IgbnVsbCBvciB1bmRlZmluZWRcbiAgICAgICAgICAgIGR1cmF0aW9uID0ge307XG4gICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgICB0eXBlb2YgZHVyYXRpb24gPT09ICdvYmplY3QnICYmXG4gICAgICAgICAgICAoJ2Zyb20nIGluIGR1cmF0aW9uIHx8ICd0bycgaW4gZHVyYXRpb24pXG4gICAgICAgICkge1xuICAgICAgICAgICAgZGlmZlJlcyA9IG1vbWVudHNEaWZmZXJlbmNlKFxuICAgICAgICAgICAgICAgIGNyZWF0ZUxvY2FsKGR1cmF0aW9uLmZyb20pLFxuICAgICAgICAgICAgICAgIGNyZWF0ZUxvY2FsKGR1cmF0aW9uLnRvKVxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgZHVyYXRpb24gPSB7fTtcbiAgICAgICAgICAgIGR1cmF0aW9uLm1zID0gZGlmZlJlcy5taWxsaXNlY29uZHM7XG4gICAgICAgICAgICBkdXJhdGlvbi5NID0gZGlmZlJlcy5tb250aHM7XG4gICAgICAgIH1cblxuICAgICAgICByZXQgPSBuZXcgRHVyYXRpb24oZHVyYXRpb24pO1xuXG4gICAgICAgIGlmIChpc0R1cmF0aW9uKGlucHV0KSAmJiBoYXNPd25Qcm9wKGlucHV0LCAnX2xvY2FsZScpKSB7XG4gICAgICAgICAgICByZXQuX2xvY2FsZSA9IGlucHV0Ll9sb2NhbGU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNEdXJhdGlvbihpbnB1dCkgJiYgaGFzT3duUHJvcChpbnB1dCwgJ19pc1ZhbGlkJykpIHtcbiAgICAgICAgICAgIHJldC5faXNWYWxpZCA9IGlucHV0Ll9pc1ZhbGlkO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICB9XG5cbiAgICBjcmVhdGVEdXJhdGlvbi5mbiA9IER1cmF0aW9uLnByb3RvdHlwZTtcbiAgICBjcmVhdGVEdXJhdGlvbi5pbnZhbGlkID0gY3JlYXRlSW52YWxpZCQxO1xuXG4gICAgZnVuY3Rpb24gcGFyc2VJc28oaW5wLCBzaWduKSB7XG4gICAgICAgIC8vIFdlJ2Qgbm9ybWFsbHkgdXNlIH5+aW5wIGZvciB0aGlzLCBidXQgdW5mb3J0dW5hdGVseSBpdCBhbHNvXG4gICAgICAgIC8vIGNvbnZlcnRzIGZsb2F0cyB0byBpbnRzLlxuICAgICAgICAvLyBpbnAgbWF5IGJlIHVuZGVmaW5lZCwgc28gY2FyZWZ1bCBjYWxsaW5nIHJlcGxhY2Ugb24gaXQuXG4gICAgICAgIHZhciByZXMgPSBpbnAgJiYgcGFyc2VGbG9hdChpbnAucmVwbGFjZSgnLCcsICcuJykpO1xuICAgICAgICAvLyBhcHBseSBzaWduIHdoaWxlIHdlJ3JlIGF0IGl0XG4gICAgICAgIHJldHVybiAoaXNOYU4ocmVzKSA/IDAgOiByZXMpICogc2lnbjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwb3NpdGl2ZU1vbWVudHNEaWZmZXJlbmNlKGJhc2UsIG90aGVyKSB7XG4gICAgICAgIHZhciByZXMgPSB7fTtcblxuICAgICAgICByZXMubW9udGhzID1cbiAgICAgICAgICAgIG90aGVyLm1vbnRoKCkgLSBiYXNlLm1vbnRoKCkgKyAob3RoZXIueWVhcigpIC0gYmFzZS55ZWFyKCkpICogMTI7XG4gICAgICAgIGlmIChiYXNlLmNsb25lKCkuYWRkKHJlcy5tb250aHMsICdNJykuaXNBZnRlcihvdGhlcikpIHtcbiAgICAgICAgICAgIC0tcmVzLm1vbnRocztcbiAgICAgICAgfVxuXG4gICAgICAgIHJlcy5taWxsaXNlY29uZHMgPSArb3RoZXIgLSArYmFzZS5jbG9uZSgpLmFkZChyZXMubW9udGhzLCAnTScpO1xuXG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbW9tZW50c0RpZmZlcmVuY2UoYmFzZSwgb3RoZXIpIHtcbiAgICAgICAgdmFyIHJlcztcbiAgICAgICAgaWYgKCEoYmFzZS5pc1ZhbGlkKCkgJiYgb3RoZXIuaXNWYWxpZCgpKSkge1xuICAgICAgICAgICAgcmV0dXJuIHsgbWlsbGlzZWNvbmRzOiAwLCBtb250aHM6IDAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIG90aGVyID0gY2xvbmVXaXRoT2Zmc2V0KG90aGVyLCBiYXNlKTtcbiAgICAgICAgaWYgKGJhc2UuaXNCZWZvcmUob3RoZXIpKSB7XG4gICAgICAgICAgICByZXMgPSBwb3NpdGl2ZU1vbWVudHNEaWZmZXJlbmNlKGJhc2UsIG90aGVyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlcyA9IHBvc2l0aXZlTW9tZW50c0RpZmZlcmVuY2Uob3RoZXIsIGJhc2UpO1xuICAgICAgICAgICAgcmVzLm1pbGxpc2Vjb25kcyA9IC1yZXMubWlsbGlzZWNvbmRzO1xuICAgICAgICAgICAgcmVzLm1vbnRocyA9IC1yZXMubW9udGhzO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG5cbiAgICAvLyBUT0RPOiByZW1vdmUgJ25hbWUnIGFyZyBhZnRlciBkZXByZWNhdGlvbiBpcyByZW1vdmVkXG4gICAgZnVuY3Rpb24gY3JlYXRlQWRkZXIoZGlyZWN0aW9uLCBuYW1lKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAodmFsLCBwZXJpb2QpIHtcbiAgICAgICAgICAgIHZhciBkdXIsIHRtcDtcbiAgICAgICAgICAgIC8vaW52ZXJ0IHRoZSBhcmd1bWVudHMsIGJ1dCBjb21wbGFpbiBhYm91dCBpdFxuICAgICAgICAgICAgaWYgKHBlcmlvZCAhPT0gbnVsbCAmJiAhaXNOYU4oK3BlcmlvZCkpIHtcbiAgICAgICAgICAgICAgICBkZXByZWNhdGVTaW1wbGUoXG4gICAgICAgICAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICAgICAgICAgICdtb21lbnQoKS4nICtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWUgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJyhwZXJpb2QsIG51bWJlcikgaXMgZGVwcmVjYXRlZC4gUGxlYXNlIHVzZSBtb21lbnQoKS4nICtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWUgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJyhudW1iZXIsIHBlcmlvZCkuICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJ1NlZSBodHRwOi8vbW9tZW50anMuY29tL2d1aWRlcy8jL3dhcm5pbmdzL2FkZC1pbnZlcnRlZC1wYXJhbS8gZm9yIG1vcmUgaW5mby4nXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB0bXAgPSB2YWw7XG4gICAgICAgICAgICAgICAgdmFsID0gcGVyaW9kO1xuICAgICAgICAgICAgICAgIHBlcmlvZCA9IHRtcDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZHVyID0gY3JlYXRlRHVyYXRpb24odmFsLCBwZXJpb2QpO1xuICAgICAgICAgICAgYWRkU3VidHJhY3QodGhpcywgZHVyLCBkaXJlY3Rpb24pO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYWRkU3VidHJhY3QobW9tLCBkdXJhdGlvbiwgaXNBZGRpbmcsIHVwZGF0ZU9mZnNldCkge1xuICAgICAgICB2YXIgbWlsbGlzZWNvbmRzID0gZHVyYXRpb24uX21pbGxpc2Vjb25kcyxcbiAgICAgICAgICAgIGRheXMgPSBhYnNSb3VuZChkdXJhdGlvbi5fZGF5cyksXG4gICAgICAgICAgICBtb250aHMgPSBhYnNSb3VuZChkdXJhdGlvbi5fbW9udGhzKTtcblxuICAgICAgICBpZiAoIW1vbS5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIC8vIE5vIG9wXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB1cGRhdGVPZmZzZXQgPSB1cGRhdGVPZmZzZXQgPT0gbnVsbCA/IHRydWUgOiB1cGRhdGVPZmZzZXQ7XG5cbiAgICAgICAgaWYgKG1vbnRocykge1xuICAgICAgICAgICAgc2V0TW9udGgobW9tLCBnZXQobW9tLCAnTW9udGgnKSArIG1vbnRocyAqIGlzQWRkaW5nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF5cykge1xuICAgICAgICAgICAgc2V0JDEobW9tLCAnRGF0ZScsIGdldChtb20sICdEYXRlJykgKyBkYXlzICogaXNBZGRpbmcpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtaWxsaXNlY29uZHMpIHtcbiAgICAgICAgICAgIG1vbS5fZC5zZXRUaW1lKG1vbS5fZC52YWx1ZU9mKCkgKyBtaWxsaXNlY29uZHMgKiBpc0FkZGluZyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHVwZGF0ZU9mZnNldCkge1xuICAgICAgICAgICAgaG9va3MudXBkYXRlT2Zmc2V0KG1vbSwgZGF5cyB8fCBtb250aHMpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGFkZCA9IGNyZWF0ZUFkZGVyKDEsICdhZGQnKSxcbiAgICAgICAgc3VidHJhY3QgPSBjcmVhdGVBZGRlcigtMSwgJ3N1YnRyYWN0Jyk7XG5cbiAgICBmdW5jdGlvbiBpc1N0cmluZyhpbnB1dCkge1xuICAgICAgICByZXR1cm4gdHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJyB8fCBpbnB1dCBpbnN0YW5jZW9mIFN0cmluZztcbiAgICB9XG5cbiAgICAvLyB0eXBlIE1vbWVudElucHV0ID0gTW9tZW50IHwgRGF0ZSB8IHN0cmluZyB8IG51bWJlciB8IChudW1iZXIgfCBzdHJpbmcpW10gfCBNb21lbnRJbnB1dE9iamVjdCB8IHZvaWQ7IC8vIG51bGwgfCB1bmRlZmluZWRcbiAgICBmdW5jdGlvbiBpc01vbWVudElucHV0KGlucHV0KSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICBpc01vbWVudChpbnB1dCkgfHxcbiAgICAgICAgICAgIGlzRGF0ZShpbnB1dCkgfHxcbiAgICAgICAgICAgIGlzU3RyaW5nKGlucHV0KSB8fFxuICAgICAgICAgICAgaXNOdW1iZXIoaW5wdXQpIHx8XG4gICAgICAgICAgICBpc051bWJlck9yU3RyaW5nQXJyYXkoaW5wdXQpIHx8XG4gICAgICAgICAgICBpc01vbWVudElucHV0T2JqZWN0KGlucHV0KSB8fFxuICAgICAgICAgICAgaW5wdXQgPT09IG51bGwgfHxcbiAgICAgICAgICAgIGlucHV0ID09PSB1bmRlZmluZWRcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc01vbWVudElucHV0T2JqZWN0KGlucHV0KSB7XG4gICAgICAgIHZhciBvYmplY3RUZXN0ID0gaXNPYmplY3QoaW5wdXQpICYmICFpc09iamVjdEVtcHR5KGlucHV0KSxcbiAgICAgICAgICAgIHByb3BlcnR5VGVzdCA9IGZhbHNlLFxuICAgICAgICAgICAgcHJvcGVydGllcyA9IFtcbiAgICAgICAgICAgICAgICAneWVhcnMnLFxuICAgICAgICAgICAgICAgICd5ZWFyJyxcbiAgICAgICAgICAgICAgICAneScsXG4gICAgICAgICAgICAgICAgJ21vbnRocycsXG4gICAgICAgICAgICAgICAgJ21vbnRoJyxcbiAgICAgICAgICAgICAgICAnTScsXG4gICAgICAgICAgICAgICAgJ2RheXMnLFxuICAgICAgICAgICAgICAgICdkYXknLFxuICAgICAgICAgICAgICAgICdkJyxcbiAgICAgICAgICAgICAgICAnZGF0ZXMnLFxuICAgICAgICAgICAgICAgICdkYXRlJyxcbiAgICAgICAgICAgICAgICAnRCcsXG4gICAgICAgICAgICAgICAgJ2hvdXJzJyxcbiAgICAgICAgICAgICAgICAnaG91cicsXG4gICAgICAgICAgICAgICAgJ2gnLFxuICAgICAgICAgICAgICAgICdtaW51dGVzJyxcbiAgICAgICAgICAgICAgICAnbWludXRlJyxcbiAgICAgICAgICAgICAgICAnbScsXG4gICAgICAgICAgICAgICAgJ3NlY29uZHMnLFxuICAgICAgICAgICAgICAgICdzZWNvbmQnLFxuICAgICAgICAgICAgICAgICdzJyxcbiAgICAgICAgICAgICAgICAnbWlsbGlzZWNvbmRzJyxcbiAgICAgICAgICAgICAgICAnbWlsbGlzZWNvbmQnLFxuICAgICAgICAgICAgICAgICdtcycsXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgaSxcbiAgICAgICAgICAgIHByb3BlcnR5LFxuICAgICAgICAgICAgcHJvcGVydHlMZW4gPSBwcm9wZXJ0aWVzLmxlbmd0aDtcblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgcHJvcGVydHlMZW47IGkgKz0gMSkge1xuICAgICAgICAgICAgcHJvcGVydHkgPSBwcm9wZXJ0aWVzW2ldO1xuICAgICAgICAgICAgcHJvcGVydHlUZXN0ID0gcHJvcGVydHlUZXN0IHx8IGhhc093blByb3AoaW5wdXQsIHByb3BlcnR5KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBvYmplY3RUZXN0ICYmIHByb3BlcnR5VGVzdDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc051bWJlck9yU3RyaW5nQXJyYXkoaW5wdXQpIHtcbiAgICAgICAgdmFyIGFycmF5VGVzdCA9IGlzQXJyYXkoaW5wdXQpLFxuICAgICAgICAgICAgZGF0YVR5cGVUZXN0ID0gZmFsc2U7XG4gICAgICAgIGlmIChhcnJheVRlc3QpIHtcbiAgICAgICAgICAgIGRhdGFUeXBlVGVzdCA9XG4gICAgICAgICAgICAgICAgaW5wdXQuZmlsdGVyKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAhaXNOdW1iZXIoaXRlbSkgJiYgaXNTdHJpbmcoaW5wdXQpO1xuICAgICAgICAgICAgICAgIH0pLmxlbmd0aCA9PT0gMDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXJyYXlUZXN0ICYmIGRhdGFUeXBlVGVzdDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0NhbGVuZGFyU3BlYyhpbnB1dCkge1xuICAgICAgICB2YXIgb2JqZWN0VGVzdCA9IGlzT2JqZWN0KGlucHV0KSAmJiAhaXNPYmplY3RFbXB0eShpbnB1dCksXG4gICAgICAgICAgICBwcm9wZXJ0eVRlc3QgPSBmYWxzZSxcbiAgICAgICAgICAgIHByb3BlcnRpZXMgPSBbXG4gICAgICAgICAgICAgICAgJ3NhbWVEYXknLFxuICAgICAgICAgICAgICAgICduZXh0RGF5JyxcbiAgICAgICAgICAgICAgICAnbGFzdERheScsXG4gICAgICAgICAgICAgICAgJ25leHRXZWVrJyxcbiAgICAgICAgICAgICAgICAnbGFzdFdlZWsnLFxuICAgICAgICAgICAgICAgICdzYW1lRWxzZScsXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgaSxcbiAgICAgICAgICAgIHByb3BlcnR5O1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBwcm9wZXJ0aWVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICBwcm9wZXJ0eSA9IHByb3BlcnRpZXNbaV07XG4gICAgICAgICAgICBwcm9wZXJ0eVRlc3QgPSBwcm9wZXJ0eVRlc3QgfHwgaGFzT3duUHJvcChpbnB1dCwgcHJvcGVydHkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG9iamVjdFRlc3QgJiYgcHJvcGVydHlUZXN0O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldENhbGVuZGFyRm9ybWF0KG15TW9tZW50LCBub3cpIHtcbiAgICAgICAgdmFyIGRpZmYgPSBteU1vbWVudC5kaWZmKG5vdywgJ2RheXMnLCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIGRpZmYgPCAtNlxuICAgICAgICAgICAgPyAnc2FtZUVsc2UnXG4gICAgICAgICAgICA6IGRpZmYgPCAtMVxuICAgICAgICAgICAgICA/ICdsYXN0V2VlaydcbiAgICAgICAgICAgICAgOiBkaWZmIDwgMFxuICAgICAgICAgICAgICAgID8gJ2xhc3REYXknXG4gICAgICAgICAgICAgICAgOiBkaWZmIDwgMVxuICAgICAgICAgICAgICAgICAgPyAnc2FtZURheSdcbiAgICAgICAgICAgICAgICAgIDogZGlmZiA8IDJcbiAgICAgICAgICAgICAgICAgICAgPyAnbmV4dERheSdcbiAgICAgICAgICAgICAgICAgICAgOiBkaWZmIDwgN1xuICAgICAgICAgICAgICAgICAgICAgID8gJ25leHRXZWVrJ1xuICAgICAgICAgICAgICAgICAgICAgIDogJ3NhbWVFbHNlJztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjYWxlbmRhciQxKHRpbWUsIGZvcm1hdHMpIHtcbiAgICAgICAgLy8gU3VwcG9ydCBmb3Igc2luZ2xlIHBhcmFtZXRlciwgZm9ybWF0cyBvbmx5IG92ZXJsb2FkIHRvIHRoZSBjYWxlbmRhciBmdW5jdGlvblxuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgaWYgKCFhcmd1bWVudHNbMF0pIHtcbiAgICAgICAgICAgICAgICB0aW1lID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIGZvcm1hdHMgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGlzTW9tZW50SW5wdXQoYXJndW1lbnRzWzBdKSkge1xuICAgICAgICAgICAgICAgIHRpbWUgPSBhcmd1bWVudHNbMF07XG4gICAgICAgICAgICAgICAgZm9ybWF0cyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNDYWxlbmRhclNwZWMoYXJndW1lbnRzWzBdKSkge1xuICAgICAgICAgICAgICAgIGZvcm1hdHMgPSBhcmd1bWVudHNbMF07XG4gICAgICAgICAgICAgICAgdGltZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBXZSB3YW50IHRvIGNvbXBhcmUgdGhlIHN0YXJ0IG9mIHRvZGF5LCB2cyB0aGlzLlxuICAgICAgICAvLyBHZXR0aW5nIHN0YXJ0LW9mLXRvZGF5IGRlcGVuZHMgb24gd2hldGhlciB3ZSdyZSBsb2NhbC91dGMvb2Zmc2V0IG9yIG5vdC5cbiAgICAgICAgdmFyIG5vdyA9IHRpbWUgfHwgY3JlYXRlTG9jYWwoKSxcbiAgICAgICAgICAgIHNvZCA9IGNsb25lV2l0aE9mZnNldChub3csIHRoaXMpLnN0YXJ0T2YoJ2RheScpLFxuICAgICAgICAgICAgZm9ybWF0ID0gaG9va3MuY2FsZW5kYXJGb3JtYXQodGhpcywgc29kKSB8fCAnc2FtZUVsc2UnLFxuICAgICAgICAgICAgb3V0cHV0ID1cbiAgICAgICAgICAgICAgICBmb3JtYXRzICYmXG4gICAgICAgICAgICAgICAgKGlzRnVuY3Rpb24oZm9ybWF0c1tmb3JtYXRdKVxuICAgICAgICAgICAgICAgICAgICA/IGZvcm1hdHNbZm9ybWF0XS5jYWxsKHRoaXMsIG5vdylcbiAgICAgICAgICAgICAgICAgICAgOiBmb3JtYXRzW2Zvcm1hdF0pO1xuXG4gICAgICAgIHJldHVybiB0aGlzLmZvcm1hdChcbiAgICAgICAgICAgIG91dHB1dCB8fCB0aGlzLmxvY2FsZURhdGEoKS5jYWxlbmRhcihmb3JtYXQsIHRoaXMsIGNyZWF0ZUxvY2FsKG5vdykpXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2xvbmUoKSB7XG4gICAgICAgIHJldHVybiBuZXcgTW9tZW50KHRoaXMpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzQWZ0ZXIoaW5wdXQsIHVuaXRzKSB7XG4gICAgICAgIHZhciBsb2NhbElucHV0ID0gaXNNb21lbnQoaW5wdXQpID8gaW5wdXQgOiBjcmVhdGVMb2NhbChpbnB1dCk7XG4gICAgICAgIGlmICghKHRoaXMuaXNWYWxpZCgpICYmIGxvY2FsSW5wdXQuaXNWYWxpZCgpKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpIHx8ICdtaWxsaXNlY29uZCc7XG4gICAgICAgIGlmICh1bml0cyA9PT0gJ21pbGxpc2Vjb25kJykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudmFsdWVPZigpID4gbG9jYWxJbnB1dC52YWx1ZU9mKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbG9jYWxJbnB1dC52YWx1ZU9mKCkgPCB0aGlzLmNsb25lKCkuc3RhcnRPZih1bml0cykudmFsdWVPZigpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNCZWZvcmUoaW5wdXQsIHVuaXRzKSB7XG4gICAgICAgIHZhciBsb2NhbElucHV0ID0gaXNNb21lbnQoaW5wdXQpID8gaW5wdXQgOiBjcmVhdGVMb2NhbChpbnB1dCk7XG4gICAgICAgIGlmICghKHRoaXMuaXNWYWxpZCgpICYmIGxvY2FsSW5wdXQuaXNWYWxpZCgpKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpIHx8ICdtaWxsaXNlY29uZCc7XG4gICAgICAgIGlmICh1bml0cyA9PT0gJ21pbGxpc2Vjb25kJykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudmFsdWVPZigpIDwgbG9jYWxJbnB1dC52YWx1ZU9mKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmVuZE9mKHVuaXRzKS52YWx1ZU9mKCkgPCBsb2NhbElucHV0LnZhbHVlT2YoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzQmV0d2Vlbihmcm9tLCB0bywgdW5pdHMsIGluY2x1c2l2aXR5KSB7XG4gICAgICAgIHZhciBsb2NhbEZyb20gPSBpc01vbWVudChmcm9tKSA/IGZyb20gOiBjcmVhdGVMb2NhbChmcm9tKSxcbiAgICAgICAgICAgIGxvY2FsVG8gPSBpc01vbWVudCh0bykgPyB0byA6IGNyZWF0ZUxvY2FsKHRvKTtcbiAgICAgICAgaWYgKCEodGhpcy5pc1ZhbGlkKCkgJiYgbG9jYWxGcm9tLmlzVmFsaWQoKSAmJiBsb2NhbFRvLmlzVmFsaWQoKSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpbmNsdXNpdml0eSA9IGluY2x1c2l2aXR5IHx8ICcoKSc7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAoaW5jbHVzaXZpdHlbMF0gPT09ICcoJ1xuICAgICAgICAgICAgICAgID8gdGhpcy5pc0FmdGVyKGxvY2FsRnJvbSwgdW5pdHMpXG4gICAgICAgICAgICAgICAgOiAhdGhpcy5pc0JlZm9yZShsb2NhbEZyb20sIHVuaXRzKSkgJiZcbiAgICAgICAgICAgIChpbmNsdXNpdml0eVsxXSA9PT0gJyknXG4gICAgICAgICAgICAgICAgPyB0aGlzLmlzQmVmb3JlKGxvY2FsVG8sIHVuaXRzKVxuICAgICAgICAgICAgICAgIDogIXRoaXMuaXNBZnRlcihsb2NhbFRvLCB1bml0cykpXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNTYW1lKGlucHV0LCB1bml0cykge1xuICAgICAgICB2YXIgbG9jYWxJbnB1dCA9IGlzTW9tZW50KGlucHV0KSA/IGlucHV0IDogY3JlYXRlTG9jYWwoaW5wdXQpLFxuICAgICAgICAgICAgaW5wdXRNcztcbiAgICAgICAgaWYgKCEodGhpcy5pc1ZhbGlkKCkgJiYgbG9jYWxJbnB1dC5pc1ZhbGlkKCkpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgdW5pdHMgPSBub3JtYWxpemVVbml0cyh1bml0cykgfHwgJ21pbGxpc2Vjb25kJztcbiAgICAgICAgaWYgKHVuaXRzID09PSAnbWlsbGlzZWNvbmQnKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy52YWx1ZU9mKCkgPT09IGxvY2FsSW5wdXQudmFsdWVPZigpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaW5wdXRNcyA9IGxvY2FsSW5wdXQudmFsdWVPZigpO1xuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICB0aGlzLmNsb25lKCkuc3RhcnRPZih1bml0cykudmFsdWVPZigpIDw9IGlucHV0TXMgJiZcbiAgICAgICAgICAgICAgICBpbnB1dE1zIDw9IHRoaXMuY2xvbmUoKS5lbmRPZih1bml0cykudmFsdWVPZigpXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNTYW1lT3JBZnRlcihpbnB1dCwgdW5pdHMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNTYW1lKGlucHV0LCB1bml0cykgfHwgdGhpcy5pc0FmdGVyKGlucHV0LCB1bml0cyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNTYW1lT3JCZWZvcmUoaW5wdXQsIHVuaXRzKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzU2FtZShpbnB1dCwgdW5pdHMpIHx8IHRoaXMuaXNCZWZvcmUoaW5wdXQsIHVuaXRzKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkaWZmKGlucHV0LCB1bml0cywgYXNGbG9hdCkge1xuICAgICAgICB2YXIgdGhhdCwgem9uZURlbHRhLCBvdXRwdXQ7XG5cbiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIE5hTjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoYXQgPSBjbG9uZVdpdGhPZmZzZXQoaW5wdXQsIHRoaXMpO1xuXG4gICAgICAgIGlmICghdGhhdC5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBOYU47XG4gICAgICAgIH1cblxuICAgICAgICB6b25lRGVsdGEgPSAodGhhdC51dGNPZmZzZXQoKSAtIHRoaXMudXRjT2Zmc2V0KCkpICogNmU0O1xuXG4gICAgICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpO1xuXG4gICAgICAgIHN3aXRjaCAodW5pdHMpIHtcbiAgICAgICAgICAgIGNhc2UgJ3llYXInOlxuICAgICAgICAgICAgICAgIG91dHB1dCA9IG1vbnRoRGlmZih0aGlzLCB0aGF0KSAvIDEyO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnbW9udGgnOlxuICAgICAgICAgICAgICAgIG91dHB1dCA9IG1vbnRoRGlmZih0aGlzLCB0aGF0KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3F1YXJ0ZXInOlxuICAgICAgICAgICAgICAgIG91dHB1dCA9IG1vbnRoRGlmZih0aGlzLCB0aGF0KSAvIDM7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdzZWNvbmQnOlxuICAgICAgICAgICAgICAgIG91dHB1dCA9ICh0aGlzIC0gdGhhdCkgLyAxZTM7XG4gICAgICAgICAgICAgICAgYnJlYWs7IC8vIDEwMDBcbiAgICAgICAgICAgIGNhc2UgJ21pbnV0ZSc6XG4gICAgICAgICAgICAgICAgb3V0cHV0ID0gKHRoaXMgLSB0aGF0KSAvIDZlNDtcbiAgICAgICAgICAgICAgICBicmVhazsgLy8gMTAwMCAqIDYwXG4gICAgICAgICAgICBjYXNlICdob3VyJzpcbiAgICAgICAgICAgICAgICBvdXRwdXQgPSAodGhpcyAtIHRoYXQpIC8gMzZlNTtcbiAgICAgICAgICAgICAgICBicmVhazsgLy8gMTAwMCAqIDYwICogNjBcbiAgICAgICAgICAgIGNhc2UgJ2RheSc6XG4gICAgICAgICAgICAgICAgb3V0cHV0ID0gKHRoaXMgLSB0aGF0IC0gem9uZURlbHRhKSAvIDg2NGU1O1xuICAgICAgICAgICAgICAgIGJyZWFrOyAvLyAxMDAwICogNjAgKiA2MCAqIDI0LCBuZWdhdGUgZHN0XG4gICAgICAgICAgICBjYXNlICd3ZWVrJzpcbiAgICAgICAgICAgICAgICBvdXRwdXQgPSAodGhpcyAtIHRoYXQgLSB6b25lRGVsdGEpIC8gNjA0OGU1O1xuICAgICAgICAgICAgICAgIGJyZWFrOyAvLyAxMDAwICogNjAgKiA2MCAqIDI0ICogNywgbmVnYXRlIGRzdFxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBvdXRwdXQgPSB0aGlzIC0gdGhhdDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBhc0Zsb2F0ID8gb3V0cHV0IDogYWJzRmxvb3Iob3V0cHV0KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtb250aERpZmYoYSwgYikge1xuICAgICAgICBpZiAoYS5kYXRlKCkgPCBiLmRhdGUoKSkge1xuICAgICAgICAgICAgLy8gZW5kLW9mLW1vbnRoIGNhbGN1bGF0aW9ucyB3b3JrIGNvcnJlY3Qgd2hlbiB0aGUgc3RhcnQgbW9udGggaGFzIG1vcmVcbiAgICAgICAgICAgIC8vIGRheXMgdGhhbiB0aGUgZW5kIG1vbnRoLlxuICAgICAgICAgICAgcmV0dXJuIC1tb250aERpZmYoYiwgYSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gZGlmZmVyZW5jZSBpbiBtb250aHNcbiAgICAgICAgdmFyIHdob2xlTW9udGhEaWZmID0gKGIueWVhcigpIC0gYS55ZWFyKCkpICogMTIgKyAoYi5tb250aCgpIC0gYS5tb250aCgpKSxcbiAgICAgICAgICAgIC8vIGIgaXMgaW4gKGFuY2hvciAtIDEgbW9udGgsIGFuY2hvciArIDEgbW9udGgpXG4gICAgICAgICAgICBhbmNob3IgPSBhLmNsb25lKCkuYWRkKHdob2xlTW9udGhEaWZmLCAnbW9udGhzJyksXG4gICAgICAgICAgICBhbmNob3IyLFxuICAgICAgICAgICAgYWRqdXN0O1xuXG4gICAgICAgIGlmIChiIC0gYW5jaG9yIDwgMCkge1xuICAgICAgICAgICAgYW5jaG9yMiA9IGEuY2xvbmUoKS5hZGQod2hvbGVNb250aERpZmYgLSAxLCAnbW9udGhzJyk7XG4gICAgICAgICAgICAvLyBsaW5lYXIgYWNyb3NzIHRoZSBtb250aFxuICAgICAgICAgICAgYWRqdXN0ID0gKGIgLSBhbmNob3IpIC8gKGFuY2hvciAtIGFuY2hvcjIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYW5jaG9yMiA9IGEuY2xvbmUoKS5hZGQod2hvbGVNb250aERpZmYgKyAxLCAnbW9udGhzJyk7XG4gICAgICAgICAgICAvLyBsaW5lYXIgYWNyb3NzIHRoZSBtb250aFxuICAgICAgICAgICAgYWRqdXN0ID0gKGIgLSBhbmNob3IpIC8gKGFuY2hvcjIgLSBhbmNob3IpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy9jaGVjayBmb3IgbmVnYXRpdmUgemVybywgcmV0dXJuIHplcm8gaWYgbmVnYXRpdmUgemVyb1xuICAgICAgICByZXR1cm4gLSh3aG9sZU1vbnRoRGlmZiArIGFkanVzdCkgfHwgMDtcbiAgICB9XG5cbiAgICBob29rcy5kZWZhdWx0Rm9ybWF0ID0gJ1lZWVktTU0tRERUSEg6bW06c3NaJztcbiAgICBob29rcy5kZWZhdWx0Rm9ybWF0VXRjID0gJ1lZWVktTU0tRERUSEg6bW06c3NbWl0nO1xuXG4gICAgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNsb25lKCkubG9jYWxlKCdlbicpLmZvcm1hdCgnZGRkIE1NTSBERCBZWVlZIEhIOm1tOnNzIFtHTVRdWlonKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0b0lTT1N0cmluZyhrZWVwT2Zmc2V0KSB7XG4gICAgICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHZhciB1dGMgPSBrZWVwT2Zmc2V0ICE9PSB0cnVlLFxuICAgICAgICAgICAgbSA9IHV0YyA/IHRoaXMuY2xvbmUoKS51dGMoKSA6IHRoaXM7XG4gICAgICAgIGlmIChtLnllYXIoKSA8IDAgfHwgbS55ZWFyKCkgPiA5OTk5KSB7XG4gICAgICAgICAgICByZXR1cm4gZm9ybWF0TW9tZW50KFxuICAgICAgICAgICAgICAgIG0sXG4gICAgICAgICAgICAgICAgdXRjXG4gICAgICAgICAgICAgICAgICAgID8gJ1lZWVlZWS1NTS1ERFtUXUhIOm1tOnNzLlNTU1taXSdcbiAgICAgICAgICAgICAgICAgICAgOiAnWVlZWVlZLU1NLUREW1RdSEg6bW06c3MuU1NTWidcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzRnVuY3Rpb24oRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmcpKSB7XG4gICAgICAgICAgICAvLyBuYXRpdmUgaW1wbGVtZW50YXRpb24gaXMgfjUweCBmYXN0ZXIsIHVzZSBpdCB3aGVuIHdlIGNhblxuICAgICAgICAgICAgaWYgKHV0Yykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnRvRGF0ZSgpLnRvSVNPU3RyaW5nKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRGF0ZSh0aGlzLnZhbHVlT2YoKSArIHRoaXMudXRjT2Zmc2V0KCkgKiA2MCAqIDEwMDApXG4gICAgICAgICAgICAgICAgICAgIC50b0lTT1N0cmluZygpXG4gICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKCdaJywgZm9ybWF0TW9tZW50KG0sICdaJykpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmb3JtYXRNb21lbnQoXG4gICAgICAgICAgICBtLFxuICAgICAgICAgICAgdXRjID8gJ1lZWVktTU0tRERbVF1ISDptbTpzcy5TU1NbWl0nIDogJ1lZWVktTU0tRERbVF1ISDptbTpzcy5TU1NaJ1xuICAgICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybiBhIGh1bWFuIHJlYWRhYmxlIHJlcHJlc2VudGF0aW9uIG9mIGEgbW9tZW50IHRoYXQgY2FuXG4gICAgICogYWxzbyBiZSBldmFsdWF0ZWQgdG8gZ2V0IGEgbmV3IG1vbWVudCB3aGljaCBpcyB0aGUgc2FtZVxuICAgICAqXG4gICAgICogQGxpbmsgaHR0cHM6Ly9ub2RlanMub3JnL2Rpc3QvbGF0ZXN0L2RvY3MvYXBpL3V0aWwuaHRtbCN1dGlsX2N1c3RvbV9pbnNwZWN0X2Z1bmN0aW9uX29uX29iamVjdHNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbnNwZWN0KCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gJ21vbWVudC5pbnZhbGlkKC8qICcgKyB0aGlzLl9pICsgJyAqLyknO1xuICAgICAgICB9XG4gICAgICAgIHZhciBmdW5jID0gJ21vbWVudCcsXG4gICAgICAgICAgICB6b25lID0gJycsXG4gICAgICAgICAgICBwcmVmaXgsXG4gICAgICAgICAgICB5ZWFyLFxuICAgICAgICAgICAgZGF0ZXRpbWUsXG4gICAgICAgICAgICBzdWZmaXg7XG4gICAgICAgIGlmICghdGhpcy5pc0xvY2FsKCkpIHtcbiAgICAgICAgICAgIGZ1bmMgPSB0aGlzLnV0Y09mZnNldCgpID09PSAwID8gJ21vbWVudC51dGMnIDogJ21vbWVudC5wYXJzZVpvbmUnO1xuICAgICAgICAgICAgem9uZSA9ICdaJztcbiAgICAgICAgfVxuICAgICAgICBwcmVmaXggPSAnWycgKyBmdW5jICsgJyhcIl0nO1xuICAgICAgICB5ZWFyID0gMCA8PSB0aGlzLnllYXIoKSAmJiB0aGlzLnllYXIoKSA8PSA5OTk5ID8gJ1lZWVknIDogJ1lZWVlZWSc7XG4gICAgICAgIGRhdGV0aW1lID0gJy1NTS1ERFtUXUhIOm1tOnNzLlNTUyc7XG4gICAgICAgIHN1ZmZpeCA9IHpvbmUgKyAnW1wiKV0nO1xuXG4gICAgICAgIHJldHVybiB0aGlzLmZvcm1hdChwcmVmaXggKyB5ZWFyICsgZGF0ZXRpbWUgKyBzdWZmaXgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGZvcm1hdChpbnB1dFN0cmluZykge1xuICAgICAgICBpZiAoIWlucHV0U3RyaW5nKSB7XG4gICAgICAgICAgICBpbnB1dFN0cmluZyA9IHRoaXMuaXNVdGMoKVxuICAgICAgICAgICAgICAgID8gaG9va3MuZGVmYXVsdEZvcm1hdFV0Y1xuICAgICAgICAgICAgICAgIDogaG9va3MuZGVmYXVsdEZvcm1hdDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgb3V0cHV0ID0gZm9ybWF0TW9tZW50KHRoaXMsIGlucHV0U3RyaW5nKTtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLnBvc3Rmb3JtYXQob3V0cHV0KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBmcm9tKHRpbWUsIHdpdGhvdXRTdWZmaXgpIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgdGhpcy5pc1ZhbGlkKCkgJiZcbiAgICAgICAgICAgICgoaXNNb21lbnQodGltZSkgJiYgdGltZS5pc1ZhbGlkKCkpIHx8IGNyZWF0ZUxvY2FsKHRpbWUpLmlzVmFsaWQoKSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlRHVyYXRpb24oeyB0bzogdGhpcywgZnJvbTogdGltZSB9KVxuICAgICAgICAgICAgICAgIC5sb2NhbGUodGhpcy5sb2NhbGUoKSlcbiAgICAgICAgICAgICAgICAuaHVtYW5pemUoIXdpdGhvdXRTdWZmaXgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLmludmFsaWREYXRlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBmcm9tTm93KHdpdGhvdXRTdWZmaXgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZnJvbShjcmVhdGVMb2NhbCgpLCB3aXRob3V0U3VmZml4KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0byh0aW1lLCB3aXRob3V0U3VmZml4KSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIHRoaXMuaXNWYWxpZCgpICYmXG4gICAgICAgICAgICAoKGlzTW9tZW50KHRpbWUpICYmIHRpbWUuaXNWYWxpZCgpKSB8fCBjcmVhdGVMb2NhbCh0aW1lKS5pc1ZhbGlkKCkpXG4gICAgICAgICkge1xuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUR1cmF0aW9uKHsgZnJvbTogdGhpcywgdG86IHRpbWUgfSlcbiAgICAgICAgICAgICAgICAubG9jYWxlKHRoaXMubG9jYWxlKCkpXG4gICAgICAgICAgICAgICAgLmh1bWFuaXplKCF3aXRob3V0U3VmZml4KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS5pbnZhbGlkRGF0ZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9Ob3cod2l0aG91dFN1ZmZpeCkge1xuICAgICAgICByZXR1cm4gdGhpcy50byhjcmVhdGVMb2NhbCgpLCB3aXRob3V0U3VmZml4KTtcbiAgICB9XG5cbiAgICAvLyBJZiBwYXNzZWQgYSBsb2NhbGUga2V5LCBpdCB3aWxsIHNldCB0aGUgbG9jYWxlIGZvciB0aGlzXG4gICAgLy8gaW5zdGFuY2UuICBPdGhlcndpc2UsIGl0IHdpbGwgcmV0dXJuIHRoZSBsb2NhbGUgY29uZmlndXJhdGlvblxuICAgIC8vIHZhcmlhYmxlcyBmb3IgdGhpcyBpbnN0YW5jZS5cbiAgICBmdW5jdGlvbiBsb2NhbGUoa2V5KSB7XG4gICAgICAgIHZhciBuZXdMb2NhbGVEYXRhO1xuXG4gICAgICAgIGlmIChrZXkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2xvY2FsZS5fYWJicjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5ld0xvY2FsZURhdGEgPSBnZXRMb2NhbGUoa2V5KTtcbiAgICAgICAgICAgIGlmIChuZXdMb2NhbGVEYXRhICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9sb2NhbGUgPSBuZXdMb2NhbGVEYXRhO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgbGFuZyA9IGRlcHJlY2F0ZShcbiAgICAgICAgJ21vbWVudCgpLmxhbmcoKSBpcyBkZXByZWNhdGVkLiBJbnN0ZWFkLCB1c2UgbW9tZW50KCkubG9jYWxlRGF0YSgpIHRvIGdldCB0aGUgbGFuZ3VhZ2UgY29uZmlndXJhdGlvbi4gVXNlIG1vbWVudCgpLmxvY2FsZSgpIHRvIGNoYW5nZSBsYW5ndWFnZXMuJyxcbiAgICAgICAgZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgaWYgKGtleSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGUoa2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICk7XG5cbiAgICBmdW5jdGlvbiBsb2NhbGVEYXRhKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbG9jYWxlO1xuICAgIH1cblxuICAgIHZhciBNU19QRVJfU0VDT05EID0gMTAwMCxcbiAgICAgICAgTVNfUEVSX01JTlVURSA9IDYwICogTVNfUEVSX1NFQ09ORCxcbiAgICAgICAgTVNfUEVSX0hPVVIgPSA2MCAqIE1TX1BFUl9NSU5VVEUsXG4gICAgICAgIE1TX1BFUl80MDBfWUVBUlMgPSAoMzY1ICogNDAwICsgOTcpICogMjQgKiBNU19QRVJfSE9VUjtcblxuICAgIC8vIGFjdHVhbCBtb2R1bG8gLSBoYW5kbGVzIG5lZ2F0aXZlIG51bWJlcnMgKGZvciBkYXRlcyBiZWZvcmUgMTk3MCk6XG4gICAgZnVuY3Rpb24gbW9kJDEoZGl2aWRlbmQsIGRpdmlzb3IpIHtcbiAgICAgICAgcmV0dXJuICgoZGl2aWRlbmQgJSBkaXZpc29yKSArIGRpdmlzb3IpICUgZGl2aXNvcjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsb2NhbFN0YXJ0T2ZEYXRlKHksIG0sIGQpIHtcbiAgICAgICAgLy8gdGhlIGRhdGUgY29uc3RydWN0b3IgcmVtYXBzIHllYXJzIDAtOTkgdG8gMTkwMC0xOTk5XG4gICAgICAgIGlmICh5IDwgMTAwICYmIHkgPj0gMCkge1xuICAgICAgICAgICAgLy8gcHJlc2VydmUgbGVhcCB5ZWFycyB1c2luZyBhIGZ1bGwgNDAwIHllYXIgY3ljbGUsIHRoZW4gcmVzZXRcbiAgICAgICAgICAgIHJldHVybiBuZXcgRGF0ZSh5ICsgNDAwLCBtLCBkKSAtIE1TX1BFUl80MDBfWUVBUlM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IERhdGUoeSwgbSwgZCkudmFsdWVPZigpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdXRjU3RhcnRPZkRhdGUoeSwgbSwgZCkge1xuICAgICAgICAvLyBEYXRlLlVUQyByZW1hcHMgeWVhcnMgMC05OSB0byAxOTAwLTE5OTlcbiAgICAgICAgaWYgKHkgPCAxMDAgJiYgeSA+PSAwKSB7XG4gICAgICAgICAgICAvLyBwcmVzZXJ2ZSBsZWFwIHllYXJzIHVzaW5nIGEgZnVsbCA0MDAgeWVhciBjeWNsZSwgdGhlbiByZXNldFxuICAgICAgICAgICAgcmV0dXJuIERhdGUuVVRDKHkgKyA0MDAsIG0sIGQpIC0gTVNfUEVSXzQwMF9ZRUFSUztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBEYXRlLlVUQyh5LCBtLCBkKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHN0YXJ0T2YodW5pdHMpIHtcbiAgICAgICAgdmFyIHRpbWUsIHN0YXJ0T2ZEYXRlO1xuICAgICAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKTtcbiAgICAgICAgaWYgKHVuaXRzID09PSB1bmRlZmluZWQgfHwgdW5pdHMgPT09ICdtaWxsaXNlY29uZCcgfHwgIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXJ0T2ZEYXRlID0gdGhpcy5faXNVVEMgPyB1dGNTdGFydE9mRGF0ZSA6IGxvY2FsU3RhcnRPZkRhdGU7XG5cbiAgICAgICAgc3dpdGNoICh1bml0cykge1xuICAgICAgICAgICAgY2FzZSAneWVhcic6XG4gICAgICAgICAgICAgICAgdGltZSA9IHN0YXJ0T2ZEYXRlKHRoaXMueWVhcigpLCAwLCAxKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3F1YXJ0ZXInOlxuICAgICAgICAgICAgICAgIHRpbWUgPSBzdGFydE9mRGF0ZShcbiAgICAgICAgICAgICAgICAgICAgdGhpcy55ZWFyKCksXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubW9udGgoKSAtICh0aGlzLm1vbnRoKCkgJSAzKSxcbiAgICAgICAgICAgICAgICAgICAgMVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdtb250aCc6XG4gICAgICAgICAgICAgICAgdGltZSA9IHN0YXJ0T2ZEYXRlKHRoaXMueWVhcigpLCB0aGlzLm1vbnRoKCksIDEpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnd2Vlayc6XG4gICAgICAgICAgICAgICAgdGltZSA9IHN0YXJ0T2ZEYXRlKFxuICAgICAgICAgICAgICAgICAgICB0aGlzLnllYXIoKSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tb250aCgpLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGUoKSAtIHRoaXMud2Vla2RheSgpXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2lzb1dlZWsnOlxuICAgICAgICAgICAgICAgIHRpbWUgPSBzdGFydE9mRGF0ZShcbiAgICAgICAgICAgICAgICAgICAgdGhpcy55ZWFyKCksXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubW9udGgoKSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRlKCkgLSAodGhpcy5pc29XZWVrZGF5KCkgLSAxKVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdkYXknOlxuICAgICAgICAgICAgY2FzZSAnZGF0ZSc6XG4gICAgICAgICAgICAgICAgdGltZSA9IHN0YXJ0T2ZEYXRlKHRoaXMueWVhcigpLCB0aGlzLm1vbnRoKCksIHRoaXMuZGF0ZSgpKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2hvdXInOlxuICAgICAgICAgICAgICAgIHRpbWUgPSB0aGlzLl9kLnZhbHVlT2YoKTtcbiAgICAgICAgICAgICAgICB0aW1lIC09IG1vZCQxKFxuICAgICAgICAgICAgICAgICAgICB0aW1lICsgKHRoaXMuX2lzVVRDID8gMCA6IHRoaXMudXRjT2Zmc2V0KCkgKiBNU19QRVJfTUlOVVRFKSxcbiAgICAgICAgICAgICAgICAgICAgTVNfUEVSX0hPVVJcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnbWludXRlJzpcbiAgICAgICAgICAgICAgICB0aW1lID0gdGhpcy5fZC52YWx1ZU9mKCk7XG4gICAgICAgICAgICAgICAgdGltZSAtPSBtb2QkMSh0aW1lLCBNU19QRVJfTUlOVVRFKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3NlY29uZCc6XG4gICAgICAgICAgICAgICAgdGltZSA9IHRoaXMuX2QudmFsdWVPZigpO1xuICAgICAgICAgICAgICAgIHRpbWUgLT0gbW9kJDEodGltZSwgTVNfUEVSX1NFQ09ORCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9kLnNldFRpbWUodGltZSk7XG4gICAgICAgIGhvb2tzLnVwZGF0ZU9mZnNldCh0aGlzLCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZW5kT2YodW5pdHMpIHtcbiAgICAgICAgdmFyIHRpbWUsIHN0YXJ0T2ZEYXRlO1xuICAgICAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKTtcbiAgICAgICAgaWYgKHVuaXRzID09PSB1bmRlZmluZWQgfHwgdW5pdHMgPT09ICdtaWxsaXNlY29uZCcgfHwgIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXJ0T2ZEYXRlID0gdGhpcy5faXNVVEMgPyB1dGNTdGFydE9mRGF0ZSA6IGxvY2FsU3RhcnRPZkRhdGU7XG5cbiAgICAgICAgc3dpdGNoICh1bml0cykge1xuICAgICAgICAgICAgY2FzZSAneWVhcic6XG4gICAgICAgICAgICAgICAgdGltZSA9IHN0YXJ0T2ZEYXRlKHRoaXMueWVhcigpICsgMSwgMCwgMSkgLSAxO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAncXVhcnRlcic6XG4gICAgICAgICAgICAgICAgdGltZSA9XG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0T2ZEYXRlKFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy55ZWFyKCksXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1vbnRoKCkgLSAodGhpcy5tb250aCgpICUgMykgKyAzLFxuICAgICAgICAgICAgICAgICAgICAgICAgMVxuICAgICAgICAgICAgICAgICAgICApIC0gMTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ21vbnRoJzpcbiAgICAgICAgICAgICAgICB0aW1lID0gc3RhcnRPZkRhdGUodGhpcy55ZWFyKCksIHRoaXMubW9udGgoKSArIDEsIDEpIC0gMTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3dlZWsnOlxuICAgICAgICAgICAgICAgIHRpbWUgPVxuICAgICAgICAgICAgICAgICAgICBzdGFydE9mRGF0ZShcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMueWVhcigpLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tb250aCgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRlKCkgLSB0aGlzLndlZWtkYXkoKSArIDdcbiAgICAgICAgICAgICAgICAgICAgKSAtIDE7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdpc29XZWVrJzpcbiAgICAgICAgICAgICAgICB0aW1lID1cbiAgICAgICAgICAgICAgICAgICAgc3RhcnRPZkRhdGUoXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnllYXIoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubW9udGgoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0ZSgpIC0gKHRoaXMuaXNvV2Vla2RheSgpIC0gMSkgKyA3XG4gICAgICAgICAgICAgICAgICAgICkgLSAxO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnZGF5JzpcbiAgICAgICAgICAgIGNhc2UgJ2RhdGUnOlxuICAgICAgICAgICAgICAgIHRpbWUgPSBzdGFydE9mRGF0ZSh0aGlzLnllYXIoKSwgdGhpcy5tb250aCgpLCB0aGlzLmRhdGUoKSArIDEpIC0gMTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2hvdXInOlxuICAgICAgICAgICAgICAgIHRpbWUgPSB0aGlzLl9kLnZhbHVlT2YoKTtcbiAgICAgICAgICAgICAgICB0aW1lICs9XG4gICAgICAgICAgICAgICAgICAgIE1TX1BFUl9IT1VSIC1cbiAgICAgICAgICAgICAgICAgICAgbW9kJDEoXG4gICAgICAgICAgICAgICAgICAgICAgICB0aW1lICsgKHRoaXMuX2lzVVRDID8gMCA6IHRoaXMudXRjT2Zmc2V0KCkgKiBNU19QRVJfTUlOVVRFKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIE1TX1BFUl9IT1VSXG4gICAgICAgICAgICAgICAgICAgICkgLVxuICAgICAgICAgICAgICAgICAgICAxO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnbWludXRlJzpcbiAgICAgICAgICAgICAgICB0aW1lID0gdGhpcy5fZC52YWx1ZU9mKCk7XG4gICAgICAgICAgICAgICAgdGltZSArPSBNU19QRVJfTUlOVVRFIC0gbW9kJDEodGltZSwgTVNfUEVSX01JTlVURSkgLSAxO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnc2Vjb25kJzpcbiAgICAgICAgICAgICAgICB0aW1lID0gdGhpcy5fZC52YWx1ZU9mKCk7XG4gICAgICAgICAgICAgICAgdGltZSArPSBNU19QRVJfU0VDT05EIC0gbW9kJDEodGltZSwgTVNfUEVSX1NFQ09ORCkgLSAxO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fZC5zZXRUaW1lKHRpbWUpO1xuICAgICAgICBob29rcy51cGRhdGVPZmZzZXQodGhpcywgdHJ1ZSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHZhbHVlT2YoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kLnZhbHVlT2YoKSAtICh0aGlzLl9vZmZzZXQgfHwgMCkgKiA2MDAwMDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB1bml4KCkge1xuICAgICAgICByZXR1cm4gTWF0aC5mbG9vcih0aGlzLnZhbHVlT2YoKSAvIDEwMDApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRvRGF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBEYXRlKHRoaXMudmFsdWVPZigpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0b0FycmF5KCkge1xuICAgICAgICB2YXIgbSA9IHRoaXM7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICBtLnllYXIoKSxcbiAgICAgICAgICAgIG0ubW9udGgoKSxcbiAgICAgICAgICAgIG0uZGF0ZSgpLFxuICAgICAgICAgICAgbS5ob3VyKCksXG4gICAgICAgICAgICBtLm1pbnV0ZSgpLFxuICAgICAgICAgICAgbS5zZWNvbmQoKSxcbiAgICAgICAgICAgIG0ubWlsbGlzZWNvbmQoKSxcbiAgICAgICAgXTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0b09iamVjdCgpIHtcbiAgICAgICAgdmFyIG0gPSB0aGlzO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgeWVhcnM6IG0ueWVhcigpLFxuICAgICAgICAgICAgbW9udGhzOiBtLm1vbnRoKCksXG4gICAgICAgICAgICBkYXRlOiBtLmRhdGUoKSxcbiAgICAgICAgICAgIGhvdXJzOiBtLmhvdXJzKCksXG4gICAgICAgICAgICBtaW51dGVzOiBtLm1pbnV0ZXMoKSxcbiAgICAgICAgICAgIHNlY29uZHM6IG0uc2Vjb25kcygpLFxuICAgICAgICAgICAgbWlsbGlzZWNvbmRzOiBtLm1pbGxpc2Vjb25kcygpLFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICAgICAgLy8gbmV3IERhdGUoTmFOKS50b0pTT04oKSA9PT0gbnVsbFxuICAgICAgICByZXR1cm4gdGhpcy5pc1ZhbGlkKCkgPyB0aGlzLnRvSVNPU3RyaW5nKCkgOiBudWxsO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzVmFsaWQkMigpIHtcbiAgICAgICAgcmV0dXJuIGlzVmFsaWQodGhpcyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGFyc2luZ0ZsYWdzKCkge1xuICAgICAgICByZXR1cm4gZXh0ZW5kKHt9LCBnZXRQYXJzaW5nRmxhZ3ModGhpcykpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGludmFsaWRBdCgpIHtcbiAgICAgICAgcmV0dXJuIGdldFBhcnNpbmdGbGFncyh0aGlzKS5vdmVyZmxvdztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGlvbkRhdGEoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBpbnB1dDogdGhpcy5faSxcbiAgICAgICAgICAgIGZvcm1hdDogdGhpcy5fZixcbiAgICAgICAgICAgIGxvY2FsZTogdGhpcy5fbG9jYWxlLFxuICAgICAgICAgICAgaXNVVEM6IHRoaXMuX2lzVVRDLFxuICAgICAgICAgICAgc3RyaWN0OiB0aGlzLl9zdHJpY3QsXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ04nLCAwLCAwLCAnZXJhQWJicicpO1xuICAgIGFkZEZvcm1hdFRva2VuKCdOTicsIDAsIDAsICdlcmFBYmJyJyk7XG4gICAgYWRkRm9ybWF0VG9rZW4oJ05OTicsIDAsIDAsICdlcmFBYmJyJyk7XG4gICAgYWRkRm9ybWF0VG9rZW4oJ05OTk4nLCAwLCAwLCAnZXJhTmFtZScpO1xuICAgIGFkZEZvcm1hdFRva2VuKCdOTk5OTicsIDAsIDAsICdlcmFOYXJyb3cnKTtcblxuICAgIGFkZEZvcm1hdFRva2VuKCd5JywgWyd5JywgMV0sICd5bycsICdlcmFZZWFyJyk7XG4gICAgYWRkRm9ybWF0VG9rZW4oJ3knLCBbJ3l5JywgMl0sIDAsICdlcmFZZWFyJyk7XG4gICAgYWRkRm9ybWF0VG9rZW4oJ3knLCBbJ3l5eScsIDNdLCAwLCAnZXJhWWVhcicpO1xuICAgIGFkZEZvcm1hdFRva2VuKCd5JywgWyd5eXl5JywgNF0sIDAsICdlcmFZZWFyJyk7XG5cbiAgICBhZGRSZWdleFRva2VuKCdOJywgbWF0Y2hFcmFBYmJyKTtcbiAgICBhZGRSZWdleFRva2VuKCdOTicsIG1hdGNoRXJhQWJicik7XG4gICAgYWRkUmVnZXhUb2tlbignTk5OJywgbWF0Y2hFcmFBYmJyKTtcbiAgICBhZGRSZWdleFRva2VuKCdOTk5OJywgbWF0Y2hFcmFOYW1lKTtcbiAgICBhZGRSZWdleFRva2VuKCdOTk5OTicsIG1hdGNoRXJhTmFycm93KTtcblxuICAgIGFkZFBhcnNlVG9rZW4oXG4gICAgICAgIFsnTicsICdOTicsICdOTk4nLCAnTk5OTicsICdOTk5OTiddLFxuICAgICAgICBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcsIHRva2VuKSB7XG4gICAgICAgICAgICB2YXIgZXJhID0gY29uZmlnLl9sb2NhbGUuZXJhc1BhcnNlKGlucHV0LCB0b2tlbiwgY29uZmlnLl9zdHJpY3QpO1xuICAgICAgICAgICAgaWYgKGVyYSkge1xuICAgICAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmVyYSA9IGVyYTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuaW52YWxpZEVyYSA9IGlucHV0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgKTtcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ3knLCBtYXRjaFVuc2lnbmVkKTtcbiAgICBhZGRSZWdleFRva2VuKCd5eScsIG1hdGNoVW5zaWduZWQpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ3l5eScsIG1hdGNoVW5zaWduZWQpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ3l5eXknLCBtYXRjaFVuc2lnbmVkKTtcbiAgICBhZGRSZWdleFRva2VuKCd5bycsIG1hdGNoRXJhWWVhck9yZGluYWwpO1xuXG4gICAgYWRkUGFyc2VUb2tlbihbJ3knLCAneXknLCAneXl5JywgJ3l5eXknXSwgWUVBUik7XG4gICAgYWRkUGFyc2VUb2tlbihbJ3lvJ10sIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZywgdG9rZW4pIHtcbiAgICAgICAgdmFyIG1hdGNoO1xuICAgICAgICBpZiAoY29uZmlnLl9sb2NhbGUuX2VyYVllYXJPcmRpbmFsUmVnZXgpIHtcbiAgICAgICAgICAgIG1hdGNoID0gaW5wdXQubWF0Y2goY29uZmlnLl9sb2NhbGUuX2VyYVllYXJPcmRpbmFsUmVnZXgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbmZpZy5fbG9jYWxlLmVyYVllYXJPcmRpbmFsUGFyc2UpIHtcbiAgICAgICAgICAgIGFycmF5W1lFQVJdID0gY29uZmlnLl9sb2NhbGUuZXJhWWVhck9yZGluYWxQYXJzZShpbnB1dCwgbWF0Y2gpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYXJyYXlbWUVBUl0gPSBwYXJzZUludChpbnB1dCwgMTApO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICBmdW5jdGlvbiBsb2NhbGVFcmFzKG0sIGZvcm1hdCkge1xuICAgICAgICB2YXIgaSxcbiAgICAgICAgICAgIGwsXG4gICAgICAgICAgICBkYXRlLFxuICAgICAgICAgICAgZXJhcyA9IHRoaXMuX2VyYXMgfHwgZ2V0TG9jYWxlKCdlbicpLl9lcmFzO1xuICAgICAgICBmb3IgKGkgPSAwLCBsID0gZXJhcy5sZW5ndGg7IGkgPCBsOyArK2kpIHtcbiAgICAgICAgICAgIHN3aXRjaCAodHlwZW9mIGVyYXNbaV0uc2luY2UpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdzdHJpbmcnOlxuICAgICAgICAgICAgICAgICAgICAvLyB0cnVuY2F0ZSB0aW1lXG4gICAgICAgICAgICAgICAgICAgIGRhdGUgPSBob29rcyhlcmFzW2ldLnNpbmNlKS5zdGFydE9mKCdkYXknKTtcbiAgICAgICAgICAgICAgICAgICAgZXJhc1tpXS5zaW5jZSA9IGRhdGUudmFsdWVPZigpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc3dpdGNoICh0eXBlb2YgZXJhc1tpXS51bnRpbCkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ3VuZGVmaW5lZCc6XG4gICAgICAgICAgICAgICAgICAgIGVyYXNbaV0udW50aWwgPSArSW5maW5pdHk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICAgICAgICAgICAgICAgIC8vIHRydW5jYXRlIHRpbWVcbiAgICAgICAgICAgICAgICAgICAgZGF0ZSA9IGhvb2tzKGVyYXNbaV0udW50aWwpLnN0YXJ0T2YoJ2RheScpLnZhbHVlT2YoKTtcbiAgICAgICAgICAgICAgICAgICAgZXJhc1tpXS51bnRpbCA9IGRhdGUudmFsdWVPZigpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZXJhcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsb2NhbGVFcmFzUGFyc2UoZXJhTmFtZSwgZm9ybWF0LCBzdHJpY3QpIHtcbiAgICAgICAgdmFyIGksXG4gICAgICAgICAgICBsLFxuICAgICAgICAgICAgZXJhcyA9IHRoaXMuZXJhcygpLFxuICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgIGFiYnIsXG4gICAgICAgICAgICBuYXJyb3c7XG4gICAgICAgIGVyYU5hbWUgPSBlcmFOYW1lLnRvVXBwZXJDYXNlKCk7XG5cbiAgICAgICAgZm9yIChpID0gMCwgbCA9IGVyYXMubGVuZ3RoOyBpIDwgbDsgKytpKSB7XG4gICAgICAgICAgICBuYW1lID0gZXJhc1tpXS5uYW1lLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgICAgICBhYmJyID0gZXJhc1tpXS5hYmJyLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgICAgICBuYXJyb3cgPSBlcmFzW2ldLm5hcnJvdy50b1VwcGVyQ2FzZSgpO1xuXG4gICAgICAgICAgICBpZiAoc3RyaWN0KSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChmb3JtYXQpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnTic6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ05OJzpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnTk5OJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhYmJyID09PSBlcmFOYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVyYXNbaV07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICBjYXNlICdOTk5OJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuYW1lID09PSBlcmFOYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVyYXNbaV07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICBjYXNlICdOTk5OTic6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobmFycm93ID09PSBlcmFOYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVyYXNbaV07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKFtuYW1lLCBhYmJyLCBuYXJyb3ddLmluZGV4T2YoZXJhTmFtZSkgPj0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlcmFzW2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbG9jYWxlRXJhc0NvbnZlcnRZZWFyKGVyYSwgeWVhcikge1xuICAgICAgICB2YXIgZGlyID0gZXJhLnNpbmNlIDw9IGVyYS51bnRpbCA/ICsxIDogLTE7XG4gICAgICAgIGlmICh5ZWFyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBob29rcyhlcmEuc2luY2UpLnllYXIoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBob29rcyhlcmEuc2luY2UpLnllYXIoKSArICh5ZWFyIC0gZXJhLm9mZnNldCkgKiBkaXI7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRFcmFOYW1lKCkge1xuICAgICAgICB2YXIgaSxcbiAgICAgICAgICAgIGwsXG4gICAgICAgICAgICB2YWwsXG4gICAgICAgICAgICBlcmFzID0gdGhpcy5sb2NhbGVEYXRhKCkuZXJhcygpO1xuICAgICAgICBmb3IgKGkgPSAwLCBsID0gZXJhcy5sZW5ndGg7IGkgPCBsOyArK2kpIHtcbiAgICAgICAgICAgIC8vIHRydW5jYXRlIHRpbWVcbiAgICAgICAgICAgIHZhbCA9IHRoaXMuY2xvbmUoKS5zdGFydE9mKCdkYXknKS52YWx1ZU9mKCk7XG5cbiAgICAgICAgICAgIGlmIChlcmFzW2ldLnNpbmNlIDw9IHZhbCAmJiB2YWwgPD0gZXJhc1tpXS51bnRpbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlcmFzW2ldLm5hbWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZXJhc1tpXS51bnRpbCA8PSB2YWwgJiYgdmFsIDw9IGVyYXNbaV0uc2luY2UpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZXJhc1tpXS5uYW1lO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICcnO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldEVyYU5hcnJvdygpIHtcbiAgICAgICAgdmFyIGksXG4gICAgICAgICAgICBsLFxuICAgICAgICAgICAgdmFsLFxuICAgICAgICAgICAgZXJhcyA9IHRoaXMubG9jYWxlRGF0YSgpLmVyYXMoKTtcbiAgICAgICAgZm9yIChpID0gMCwgbCA9IGVyYXMubGVuZ3RoOyBpIDwgbDsgKytpKSB7XG4gICAgICAgICAgICAvLyB0cnVuY2F0ZSB0aW1lXG4gICAgICAgICAgICB2YWwgPSB0aGlzLmNsb25lKCkuc3RhcnRPZignZGF5JykudmFsdWVPZigpO1xuXG4gICAgICAgICAgICBpZiAoZXJhc1tpXS5zaW5jZSA8PSB2YWwgJiYgdmFsIDw9IGVyYXNbaV0udW50aWwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZXJhc1tpXS5uYXJyb3c7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZXJhc1tpXS51bnRpbCA8PSB2YWwgJiYgdmFsIDw9IGVyYXNbaV0uc2luY2UpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZXJhc1tpXS5uYXJyb3c7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gJyc7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0RXJhQWJicigpIHtcbiAgICAgICAgdmFyIGksXG4gICAgICAgICAgICBsLFxuICAgICAgICAgICAgdmFsLFxuICAgICAgICAgICAgZXJhcyA9IHRoaXMubG9jYWxlRGF0YSgpLmVyYXMoKTtcbiAgICAgICAgZm9yIChpID0gMCwgbCA9IGVyYXMubGVuZ3RoOyBpIDwgbDsgKytpKSB7XG4gICAgICAgICAgICAvLyB0cnVuY2F0ZSB0aW1lXG4gICAgICAgICAgICB2YWwgPSB0aGlzLmNsb25lKCkuc3RhcnRPZignZGF5JykudmFsdWVPZigpO1xuXG4gICAgICAgICAgICBpZiAoZXJhc1tpXS5zaW5jZSA8PSB2YWwgJiYgdmFsIDw9IGVyYXNbaV0udW50aWwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZXJhc1tpXS5hYmJyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGVyYXNbaV0udW50aWwgPD0gdmFsICYmIHZhbCA8PSBlcmFzW2ldLnNpbmNlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVyYXNbaV0uYWJicjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAnJztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRFcmFZZWFyKCkge1xuICAgICAgICB2YXIgaSxcbiAgICAgICAgICAgIGwsXG4gICAgICAgICAgICBkaXIsXG4gICAgICAgICAgICB2YWwsXG4gICAgICAgICAgICBlcmFzID0gdGhpcy5sb2NhbGVEYXRhKCkuZXJhcygpO1xuICAgICAgICBmb3IgKGkgPSAwLCBsID0gZXJhcy5sZW5ndGg7IGkgPCBsOyArK2kpIHtcbiAgICAgICAgICAgIGRpciA9IGVyYXNbaV0uc2luY2UgPD0gZXJhc1tpXS51bnRpbCA/ICsxIDogLTE7XG5cbiAgICAgICAgICAgIC8vIHRydW5jYXRlIHRpbWVcbiAgICAgICAgICAgIHZhbCA9IHRoaXMuY2xvbmUoKS5zdGFydE9mKCdkYXknKS52YWx1ZU9mKCk7XG5cbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAoZXJhc1tpXS5zaW5jZSA8PSB2YWwgJiYgdmFsIDw9IGVyYXNbaV0udW50aWwpIHx8XG4gICAgICAgICAgICAgICAgKGVyYXNbaV0udW50aWwgPD0gdmFsICYmIHZhbCA8PSBlcmFzW2ldLnNpbmNlKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgKHRoaXMueWVhcigpIC0gaG9va3MoZXJhc1tpXS5zaW5jZSkueWVhcigpKSAqIGRpciArXG4gICAgICAgICAgICAgICAgICAgIGVyYXNbaV0ub2Zmc2V0XG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLnllYXIoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBlcmFzTmFtZVJlZ2V4KGlzU3RyaWN0KSB7XG4gICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX2VyYXNOYW1lUmVnZXgnKSkge1xuICAgICAgICAgICAgY29tcHV0ZUVyYXNQYXJzZS5jYWxsKHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpc1N0cmljdCA/IHRoaXMuX2VyYXNOYW1lUmVnZXggOiB0aGlzLl9lcmFzUmVnZXg7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZXJhc0FiYnJSZWdleChpc1N0cmljdCkge1xuICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ19lcmFzQWJiclJlZ2V4JykpIHtcbiAgICAgICAgICAgIGNvbXB1dGVFcmFzUGFyc2UuY2FsbCh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaXNTdHJpY3QgPyB0aGlzLl9lcmFzQWJiclJlZ2V4IDogdGhpcy5fZXJhc1JlZ2V4O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGVyYXNOYXJyb3dSZWdleChpc1N0cmljdCkge1xuICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ19lcmFzTmFycm93UmVnZXgnKSkge1xuICAgICAgICAgICAgY29tcHV0ZUVyYXNQYXJzZS5jYWxsKHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpc1N0cmljdCA/IHRoaXMuX2VyYXNOYXJyb3dSZWdleCA6IHRoaXMuX2VyYXNSZWdleDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtYXRjaEVyYUFiYnIoaXNTdHJpY3QsIGxvY2FsZSkge1xuICAgICAgICByZXR1cm4gbG9jYWxlLmVyYXNBYmJyUmVnZXgoaXNTdHJpY3QpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1hdGNoRXJhTmFtZShpc1N0cmljdCwgbG9jYWxlKSB7XG4gICAgICAgIHJldHVybiBsb2NhbGUuZXJhc05hbWVSZWdleChpc1N0cmljdCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWF0Y2hFcmFOYXJyb3coaXNTdHJpY3QsIGxvY2FsZSkge1xuICAgICAgICByZXR1cm4gbG9jYWxlLmVyYXNOYXJyb3dSZWdleChpc1N0cmljdCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWF0Y2hFcmFZZWFyT3JkaW5hbChpc1N0cmljdCwgbG9jYWxlKSB7XG4gICAgICAgIHJldHVybiBsb2NhbGUuX2VyYVllYXJPcmRpbmFsUmVnZXggfHwgbWF0Y2hVbnNpZ25lZDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb21wdXRlRXJhc1BhcnNlKCkge1xuICAgICAgICB2YXIgYWJiclBpZWNlcyA9IFtdLFxuICAgICAgICAgICAgbmFtZVBpZWNlcyA9IFtdLFxuICAgICAgICAgICAgbmFycm93UGllY2VzID0gW10sXG4gICAgICAgICAgICBtaXhlZFBpZWNlcyA9IFtdLFxuICAgICAgICAgICAgaSxcbiAgICAgICAgICAgIGwsXG4gICAgICAgICAgICBlcmFzTmFtZSxcbiAgICAgICAgICAgIGVyYXNBYmJyLFxuICAgICAgICAgICAgZXJhc05hcnJvdyxcbiAgICAgICAgICAgIGVyYXMgPSB0aGlzLmVyYXMoKTtcblxuICAgICAgICBmb3IgKGkgPSAwLCBsID0gZXJhcy5sZW5ndGg7IGkgPCBsOyArK2kpIHtcbiAgICAgICAgICAgIGVyYXNOYW1lID0gcmVnZXhFc2NhcGUoZXJhc1tpXS5uYW1lKTtcbiAgICAgICAgICAgIGVyYXNBYmJyID0gcmVnZXhFc2NhcGUoZXJhc1tpXS5hYmJyKTtcbiAgICAgICAgICAgIGVyYXNOYXJyb3cgPSByZWdleEVzY2FwZShlcmFzW2ldLm5hcnJvdyk7XG5cbiAgICAgICAgICAgIG5hbWVQaWVjZXMucHVzaChlcmFzTmFtZSk7XG4gICAgICAgICAgICBhYmJyUGllY2VzLnB1c2goZXJhc0FiYnIpO1xuICAgICAgICAgICAgbmFycm93UGllY2VzLnB1c2goZXJhc05hcnJvdyk7XG4gICAgICAgICAgICBtaXhlZFBpZWNlcy5wdXNoKGVyYXNOYW1lKTtcbiAgICAgICAgICAgIG1peGVkUGllY2VzLnB1c2goZXJhc0FiYnIpO1xuICAgICAgICAgICAgbWl4ZWRQaWVjZXMucHVzaChlcmFzTmFycm93KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2VyYXNSZWdleCA9IG5ldyBSZWdFeHAoJ14oJyArIG1peGVkUGllY2VzLmpvaW4oJ3wnKSArICcpJywgJ2knKTtcbiAgICAgICAgdGhpcy5fZXJhc05hbWVSZWdleCA9IG5ldyBSZWdFeHAoJ14oJyArIG5hbWVQaWVjZXMuam9pbignfCcpICsgJyknLCAnaScpO1xuICAgICAgICB0aGlzLl9lcmFzQWJiclJlZ2V4ID0gbmV3IFJlZ0V4cCgnXignICsgYWJiclBpZWNlcy5qb2luKCd8JykgKyAnKScsICdpJyk7XG4gICAgICAgIHRoaXMuX2VyYXNOYXJyb3dSZWdleCA9IG5ldyBSZWdFeHAoXG4gICAgICAgICAgICAnXignICsgbmFycm93UGllY2VzLmpvaW4oJ3wnKSArICcpJyxcbiAgICAgICAgICAgICdpJ1xuICAgICAgICApO1xuICAgIH1cblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnZ2cnLCAyXSwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy53ZWVrWWVhcigpICUgMTAwO1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydHRycsIDJdLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzb1dlZWtZZWFyKCkgJSAxMDA7XG4gICAgfSk7XG5cbiAgICBmdW5jdGlvbiBhZGRXZWVrWWVhckZvcm1hdFRva2VuKHRva2VuLCBnZXR0ZXIpIHtcbiAgICAgICAgYWRkRm9ybWF0VG9rZW4oMCwgW3Rva2VuLCB0b2tlbi5sZW5ndGhdLCAwLCBnZXR0ZXIpO1xuICAgIH1cblxuICAgIGFkZFdlZWtZZWFyRm9ybWF0VG9rZW4oJ2dnZ2cnLCAnd2Vla1llYXInKTtcbiAgICBhZGRXZWVrWWVhckZvcm1hdFRva2VuKCdnZ2dnZycsICd3ZWVrWWVhcicpO1xuICAgIGFkZFdlZWtZZWFyRm9ybWF0VG9rZW4oJ0dHR0cnLCAnaXNvV2Vla1llYXInKTtcbiAgICBhZGRXZWVrWWVhckZvcm1hdFRva2VuKCdHR0dHRycsICdpc29XZWVrWWVhcicpO1xuXG4gICAgLy8gQUxJQVNFU1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgYWRkUmVnZXhUb2tlbignRycsIG1hdGNoU2lnbmVkKTtcbiAgICBhZGRSZWdleFRva2VuKCdnJywgbWF0Y2hTaWduZWQpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ0dHJywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ2dnJywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ0dHR0cnLCBtYXRjaDF0bzQsIG1hdGNoNCk7XG4gICAgYWRkUmVnZXhUb2tlbignZ2dnZycsIG1hdGNoMXRvNCwgbWF0Y2g0KTtcbiAgICBhZGRSZWdleFRva2VuKCdHR0dHRycsIG1hdGNoMXRvNiwgbWF0Y2g2KTtcbiAgICBhZGRSZWdleFRva2VuKCdnZ2dnZycsIG1hdGNoMXRvNiwgbWF0Y2g2KTtcblxuICAgIGFkZFdlZWtQYXJzZVRva2VuKFxuICAgICAgICBbJ2dnZ2cnLCAnZ2dnZ2cnLCAnR0dHRycsICdHR0dHRyddLFxuICAgICAgICBmdW5jdGlvbiAoaW5wdXQsIHdlZWssIGNvbmZpZywgdG9rZW4pIHtcbiAgICAgICAgICAgIHdlZWtbdG9rZW4uc3Vic3RyKDAsIDIpXSA9IHRvSW50KGlucHV0KTtcbiAgICAgICAgfVxuICAgICk7XG5cbiAgICBhZGRXZWVrUGFyc2VUb2tlbihbJ2dnJywgJ0dHJ10sIGZ1bmN0aW9uIChpbnB1dCwgd2VlaywgY29uZmlnLCB0b2tlbikge1xuICAgICAgICB3ZWVrW3Rva2VuXSA9IGhvb2tzLnBhcnNlVHdvRGlnaXRZZWFyKGlucHV0KTtcbiAgICB9KTtcblxuICAgIC8vIE1PTUVOVFNcblxuICAgIGZ1bmN0aW9uIGdldFNldFdlZWtZZWFyKGlucHV0KSB7XG4gICAgICAgIHJldHVybiBnZXRTZXRXZWVrWWVhckhlbHBlci5jYWxsKFxuICAgICAgICAgICAgdGhpcyxcbiAgICAgICAgICAgIGlucHV0LFxuICAgICAgICAgICAgdGhpcy53ZWVrKCksXG4gICAgICAgICAgICB0aGlzLndlZWtkYXkoKSArIHRoaXMubG9jYWxlRGF0YSgpLl93ZWVrLmRvdyxcbiAgICAgICAgICAgIHRoaXMubG9jYWxlRGF0YSgpLl93ZWVrLmRvdyxcbiAgICAgICAgICAgIHRoaXMubG9jYWxlRGF0YSgpLl93ZWVrLmRveVxuICAgICAgICApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFNldElTT1dlZWtZZWFyKGlucHV0KSB7XG4gICAgICAgIHJldHVybiBnZXRTZXRXZWVrWWVhckhlbHBlci5jYWxsKFxuICAgICAgICAgICAgdGhpcyxcbiAgICAgICAgICAgIGlucHV0LFxuICAgICAgICAgICAgdGhpcy5pc29XZWVrKCksXG4gICAgICAgICAgICB0aGlzLmlzb1dlZWtkYXkoKSxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICA0XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0SVNPV2Vla3NJblllYXIoKSB7XG4gICAgICAgIHJldHVybiB3ZWVrc0luWWVhcih0aGlzLnllYXIoKSwgMSwgNCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0SVNPV2Vla3NJbklTT1dlZWtZZWFyKCkge1xuICAgICAgICByZXR1cm4gd2Vla3NJblllYXIodGhpcy5pc29XZWVrWWVhcigpLCAxLCA0KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRXZWVrc0luWWVhcigpIHtcbiAgICAgICAgdmFyIHdlZWtJbmZvID0gdGhpcy5sb2NhbGVEYXRhKCkuX3dlZWs7XG4gICAgICAgIHJldHVybiB3ZWVrc0luWWVhcih0aGlzLnllYXIoKSwgd2Vla0luZm8uZG93LCB3ZWVrSW5mby5kb3kpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFdlZWtzSW5XZWVrWWVhcigpIHtcbiAgICAgICAgdmFyIHdlZWtJbmZvID0gdGhpcy5sb2NhbGVEYXRhKCkuX3dlZWs7XG4gICAgICAgIHJldHVybiB3ZWVrc0luWWVhcih0aGlzLndlZWtZZWFyKCksIHdlZWtJbmZvLmRvdywgd2Vla0luZm8uZG95KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRTZXRXZWVrWWVhckhlbHBlcihpbnB1dCwgd2Vlaywgd2Vla2RheSwgZG93LCBkb3kpIHtcbiAgICAgICAgdmFyIHdlZWtzVGFyZ2V0O1xuICAgICAgICBpZiAoaW5wdXQgPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIHdlZWtPZlllYXIodGhpcywgZG93LCBkb3kpLnllYXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB3ZWVrc1RhcmdldCA9IHdlZWtzSW5ZZWFyKGlucHV0LCBkb3csIGRveSk7XG4gICAgICAgICAgICBpZiAod2VlayA+IHdlZWtzVGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgd2VlayA9IHdlZWtzVGFyZ2V0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHNldFdlZWtBbGwuY2FsbCh0aGlzLCBpbnB1dCwgd2Vlaywgd2Vla2RheSwgZG93LCBkb3kpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0V2Vla0FsbCh3ZWVrWWVhciwgd2Vlaywgd2Vla2RheSwgZG93LCBkb3kpIHtcbiAgICAgICAgdmFyIGRheU9mWWVhckRhdGEgPSBkYXlPZlllYXJGcm9tV2Vla3Mod2Vla1llYXIsIHdlZWssIHdlZWtkYXksIGRvdywgZG95KSxcbiAgICAgICAgICAgIGRhdGUgPSBjcmVhdGVVVENEYXRlKGRheU9mWWVhckRhdGEueWVhciwgMCwgZGF5T2ZZZWFyRGF0YS5kYXlPZlllYXIpO1xuXG4gICAgICAgIHRoaXMueWVhcihkYXRlLmdldFVUQ0Z1bGxZZWFyKCkpO1xuICAgICAgICB0aGlzLm1vbnRoKGRhdGUuZ2V0VVRDTW9udGgoKSk7XG4gICAgICAgIHRoaXMuZGF0ZShkYXRlLmdldFVUQ0RhdGUoKSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGFkZEZvcm1hdFRva2VuKCdRJywgMCwgJ1FvJywgJ3F1YXJ0ZXInKTtcblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ1EnLCBtYXRjaDEpO1xuICAgIGFkZFBhcnNlVG9rZW4oJ1EnLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5KSB7XG4gICAgICAgIGFycmF5W01PTlRIXSA9ICh0b0ludChpbnB1dCkgLSAxKSAqIDM7XG4gICAgfSk7XG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICBmdW5jdGlvbiBnZXRTZXRRdWFydGVyKGlucHV0KSB7XG4gICAgICAgIHJldHVybiBpbnB1dCA9PSBudWxsXG4gICAgICAgICAgICA/IE1hdGguY2VpbCgodGhpcy5tb250aCgpICsgMSkgLyAzKVxuICAgICAgICAgICAgOiB0aGlzLm1vbnRoKChpbnB1dCAtIDEpICogMyArICh0aGlzLm1vbnRoKCkgJSAzKSk7XG4gICAgfVxuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ0QnLCBbJ0REJywgMl0sICdEbycsICdkYXRlJyk7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBhZGRSZWdleFRva2VuKCdEJywgbWF0Y2gxdG8yLCBtYXRjaDF0bzJOb0xlYWRpbmdaZXJvKTtcbiAgICBhZGRSZWdleFRva2VuKCdERCcsIG1hdGNoMXRvMiwgbWF0Y2gyKTtcbiAgICBhZGRSZWdleFRva2VuKCdEbycsIGZ1bmN0aW9uIChpc1N0cmljdCwgbG9jYWxlKSB7XG4gICAgICAgIC8vIFRPRE86IFJlbW92ZSBcIm9yZGluYWxQYXJzZVwiIGZhbGxiYWNrIGluIG5leHQgbWFqb3IgcmVsZWFzZS5cbiAgICAgICAgcmV0dXJuIGlzU3RyaWN0XG4gICAgICAgICAgICA/IGxvY2FsZS5fZGF5T2ZNb250aE9yZGluYWxQYXJzZSB8fCBsb2NhbGUuX29yZGluYWxQYXJzZVxuICAgICAgICAgICAgOiBsb2NhbGUuX2RheU9mTW9udGhPcmRpbmFsUGFyc2VMZW5pZW50O1xuICAgIH0pO1xuXG4gICAgYWRkUGFyc2VUb2tlbihbJ0QnLCAnREQnXSwgREFURSk7XG4gICAgYWRkUGFyc2VUb2tlbignRG8nLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5KSB7XG4gICAgICAgIGFycmF5W0RBVEVdID0gdG9JbnQoaW5wdXQubWF0Y2gobWF0Y2gxdG8yKVswXSk7XG4gICAgfSk7XG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICB2YXIgZ2V0U2V0RGF5T2ZNb250aCA9IG1ha2VHZXRTZXQoJ0RhdGUnLCB0cnVlKTtcblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGFkZEZvcm1hdFRva2VuKCdEREQnLCBbJ0REREQnLCAzXSwgJ0RERG8nLCAnZGF5T2ZZZWFyJyk7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBhZGRSZWdleFRva2VuKCdEREQnLCBtYXRjaDF0bzMpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ0REREQnLCBtYXRjaDMpO1xuICAgIGFkZFBhcnNlVG9rZW4oWydEREQnLCAnRERERCddLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICAgICAgY29uZmlnLl9kYXlPZlllYXIgPSB0b0ludChpbnB1dCk7XG4gICAgfSk7XG5cbiAgICAvLyBIRUxQRVJTXG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICBmdW5jdGlvbiBnZXRTZXREYXlPZlllYXIoaW5wdXQpIHtcbiAgICAgICAgdmFyIGRheU9mWWVhciA9XG4gICAgICAgICAgICBNYXRoLnJvdW5kKFxuICAgICAgICAgICAgICAgICh0aGlzLmNsb25lKCkuc3RhcnRPZignZGF5JykgLSB0aGlzLmNsb25lKCkuc3RhcnRPZigneWVhcicpKSAvIDg2NGU1XG4gICAgICAgICAgICApICsgMTtcbiAgICAgICAgcmV0dXJuIGlucHV0ID09IG51bGwgPyBkYXlPZlllYXIgOiB0aGlzLmFkZChpbnB1dCAtIGRheU9mWWVhciwgJ2QnKTtcbiAgICB9XG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBhZGRGb3JtYXRUb2tlbignbScsIFsnbW0nLCAyXSwgMCwgJ21pbnV0ZScpO1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgYWRkUmVnZXhUb2tlbignbScsIG1hdGNoMXRvMiwgbWF0Y2gxdG8ySGFzWmVybyk7XG4gICAgYWRkUmVnZXhUb2tlbignbW0nLCBtYXRjaDF0bzIsIG1hdGNoMik7XG4gICAgYWRkUGFyc2VUb2tlbihbJ20nLCAnbW0nXSwgTUlOVVRFKTtcblxuICAgIC8vIE1PTUVOVFNcblxuICAgIHZhciBnZXRTZXRNaW51dGUgPSBtYWtlR2V0U2V0KCdNaW51dGVzJywgZmFsc2UpO1xuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ3MnLCBbJ3NzJywgMl0sIDAsICdzZWNvbmQnKTtcblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ3MnLCBtYXRjaDF0bzIsIG1hdGNoMXRvMkhhc1plcm8pO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ3NzJywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuICAgIGFkZFBhcnNlVG9rZW4oWydzJywgJ3NzJ10sIFNFQ09ORCk7XG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICB2YXIgZ2V0U2V0U2Vjb25kID0gbWFrZUdldFNldCgnU2Vjb25kcycsIGZhbHNlKTtcblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGFkZEZvcm1hdFRva2VuKCdTJywgMCwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gfn4odGhpcy5taWxsaXNlY29uZCgpIC8gMTAwKTtcbiAgICB9KTtcblxuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnU1MnLCAyXSwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gfn4odGhpcy5taWxsaXNlY29uZCgpIC8gMTApO1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydTU1MnLCAzXSwgMCwgJ21pbGxpc2Vjb25kJyk7XG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydTU1NTJywgNF0sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWlsbGlzZWNvbmQoKSAqIDEwO1xuICAgIH0pO1xuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnU1NTU1MnLCA1XSwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5taWxsaXNlY29uZCgpICogMTAwO1xuICAgIH0pO1xuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnU1NTU1NTJywgNl0sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWlsbGlzZWNvbmQoKSAqIDEwMDA7XG4gICAgfSk7XG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydTU1NTU1NTJywgN10sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWlsbGlzZWNvbmQoKSAqIDEwMDAwO1xuICAgIH0pO1xuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnU1NTU1NTU1MnLCA4XSwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5taWxsaXNlY29uZCgpICogMTAwMDAwO1xuICAgIH0pO1xuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnU1NTU1NTU1NTJywgOV0sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWlsbGlzZWNvbmQoKSAqIDEwMDAwMDA7XG4gICAgfSk7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBhZGRSZWdleFRva2VuKCdTJywgbWF0Y2gxdG8zLCBtYXRjaDEpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ1NTJywgbWF0Y2gxdG8zLCBtYXRjaDIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ1NTUycsIG1hdGNoMXRvMywgbWF0Y2gzKTtcblxuICAgIHZhciB0b2tlbiwgZ2V0U2V0TWlsbGlzZWNvbmQ7XG4gICAgZm9yICh0b2tlbiA9ICdTU1NTJzsgdG9rZW4ubGVuZ3RoIDw9IDk7IHRva2VuICs9ICdTJykge1xuICAgICAgICBhZGRSZWdleFRva2VuKHRva2VuLCBtYXRjaFVuc2lnbmVkKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwYXJzZU1zKGlucHV0LCBhcnJheSkge1xuICAgICAgICBhcnJheVtNSUxMSVNFQ09ORF0gPSB0b0ludCgoJzAuJyArIGlucHV0KSAqIDEwMDApO1xuICAgIH1cblxuICAgIGZvciAodG9rZW4gPSAnUyc7IHRva2VuLmxlbmd0aCA8PSA5OyB0b2tlbiArPSAnUycpIHtcbiAgICAgICAgYWRkUGFyc2VUb2tlbih0b2tlbiwgcGFyc2VNcyk7XG4gICAgfVxuXG4gICAgZ2V0U2V0TWlsbGlzZWNvbmQgPSBtYWtlR2V0U2V0KCdNaWxsaXNlY29uZHMnLCBmYWxzZSk7XG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBhZGRGb3JtYXRUb2tlbigneicsIDAsIDAsICd6b25lQWJicicpO1xuICAgIGFkZEZvcm1hdFRva2VuKCd6eicsIDAsIDAsICd6b25lTmFtZScpO1xuXG4gICAgLy8gTU9NRU5UU1xuXG4gICAgZnVuY3Rpb24gZ2V0Wm9uZUFiYnIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pc1VUQyA/ICdVVEMnIDogJyc7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0Wm9uZU5hbWUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pc1VUQyA/ICdDb29yZGluYXRlZCBVbml2ZXJzYWwgVGltZScgOiAnJztcbiAgICB9XG5cbiAgICB2YXIgcHJvdG8gPSBNb21lbnQucHJvdG90eXBlO1xuXG4gICAgcHJvdG8uYWRkID0gYWRkO1xuICAgIHByb3RvLmNhbGVuZGFyID0gY2FsZW5kYXIkMTtcbiAgICBwcm90by5jbG9uZSA9IGNsb25lO1xuICAgIHByb3RvLmRpZmYgPSBkaWZmO1xuICAgIHByb3RvLmVuZE9mID0gZW5kT2Y7XG4gICAgcHJvdG8uZm9ybWF0ID0gZm9ybWF0O1xuICAgIHByb3RvLmZyb20gPSBmcm9tO1xuICAgIHByb3RvLmZyb21Ob3cgPSBmcm9tTm93O1xuICAgIHByb3RvLnRvID0gdG87XG4gICAgcHJvdG8udG9Ob3cgPSB0b05vdztcbiAgICBwcm90by5nZXQgPSBzdHJpbmdHZXQ7XG4gICAgcHJvdG8uaW52YWxpZEF0ID0gaW52YWxpZEF0O1xuICAgIHByb3RvLmlzQWZ0ZXIgPSBpc0FmdGVyO1xuICAgIHByb3RvLmlzQmVmb3JlID0gaXNCZWZvcmU7XG4gICAgcHJvdG8uaXNCZXR3ZWVuID0gaXNCZXR3ZWVuO1xuICAgIHByb3RvLmlzU2FtZSA9IGlzU2FtZTtcbiAgICBwcm90by5pc1NhbWVPckFmdGVyID0gaXNTYW1lT3JBZnRlcjtcbiAgICBwcm90by5pc1NhbWVPckJlZm9yZSA9IGlzU2FtZU9yQmVmb3JlO1xuICAgIHByb3RvLmlzVmFsaWQgPSBpc1ZhbGlkJDI7XG4gICAgcHJvdG8ubGFuZyA9IGxhbmc7XG4gICAgcHJvdG8ubG9jYWxlID0gbG9jYWxlO1xuICAgIHByb3RvLmxvY2FsZURhdGEgPSBsb2NhbGVEYXRhO1xuICAgIHByb3RvLm1heCA9IHByb3RvdHlwZU1heDtcbiAgICBwcm90by5taW4gPSBwcm90b3R5cGVNaW47XG4gICAgcHJvdG8ucGFyc2luZ0ZsYWdzID0gcGFyc2luZ0ZsYWdzO1xuICAgIHByb3RvLnNldCA9IHN0cmluZ1NldDtcbiAgICBwcm90by5zdGFydE9mID0gc3RhcnRPZjtcbiAgICBwcm90by5zdWJ0cmFjdCA9IHN1YnRyYWN0O1xuICAgIHByb3RvLnRvQXJyYXkgPSB0b0FycmF5O1xuICAgIHByb3RvLnRvT2JqZWN0ID0gdG9PYmplY3Q7XG4gICAgcHJvdG8udG9EYXRlID0gdG9EYXRlO1xuICAgIHByb3RvLnRvSVNPU3RyaW5nID0gdG9JU09TdHJpbmc7XG4gICAgcHJvdG8uaW5zcGVjdCA9IGluc3BlY3Q7XG4gICAgaWYgKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC5mb3IgIT0gbnVsbCkge1xuICAgICAgICBwcm90b1tTeW1ib2wuZm9yKCdub2RlanMudXRpbC5pbnNwZWN0LmN1c3RvbScpXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiAnTW9tZW50PCcgKyB0aGlzLmZvcm1hdCgpICsgJz4nO1xuICAgICAgICB9O1xuICAgIH1cbiAgICBwcm90by50b0pTT04gPSB0b0pTT047XG4gICAgcHJvdG8udG9TdHJpbmcgPSB0b1N0cmluZztcbiAgICBwcm90by51bml4ID0gdW5peDtcbiAgICBwcm90by52YWx1ZU9mID0gdmFsdWVPZjtcbiAgICBwcm90by5jcmVhdGlvbkRhdGEgPSBjcmVhdGlvbkRhdGE7XG4gICAgcHJvdG8uZXJhTmFtZSA9IGdldEVyYU5hbWU7XG4gICAgcHJvdG8uZXJhTmFycm93ID0gZ2V0RXJhTmFycm93O1xuICAgIHByb3RvLmVyYUFiYnIgPSBnZXRFcmFBYmJyO1xuICAgIHByb3RvLmVyYVllYXIgPSBnZXRFcmFZZWFyO1xuICAgIHByb3RvLnllYXIgPSBnZXRTZXRZZWFyO1xuICAgIHByb3RvLmlzTGVhcFllYXIgPSBnZXRJc0xlYXBZZWFyO1xuICAgIHByb3RvLndlZWtZZWFyID0gZ2V0U2V0V2Vla1llYXI7XG4gICAgcHJvdG8uaXNvV2Vla1llYXIgPSBnZXRTZXRJU09XZWVrWWVhcjtcbiAgICBwcm90by5xdWFydGVyID0gcHJvdG8ucXVhcnRlcnMgPSBnZXRTZXRRdWFydGVyO1xuICAgIHByb3RvLm1vbnRoID0gZ2V0U2V0TW9udGg7XG4gICAgcHJvdG8uZGF5c0luTW9udGggPSBnZXREYXlzSW5Nb250aDtcbiAgICBwcm90by53ZWVrID0gcHJvdG8ud2Vla3MgPSBnZXRTZXRXZWVrO1xuICAgIHByb3RvLmlzb1dlZWsgPSBwcm90by5pc29XZWVrcyA9IGdldFNldElTT1dlZWs7XG4gICAgcHJvdG8ud2Vla3NJblllYXIgPSBnZXRXZWVrc0luWWVhcjtcbiAgICBwcm90by53ZWVrc0luV2Vla1llYXIgPSBnZXRXZWVrc0luV2Vla1llYXI7XG4gICAgcHJvdG8uaXNvV2Vla3NJblllYXIgPSBnZXRJU09XZWVrc0luWWVhcjtcbiAgICBwcm90by5pc29XZWVrc0luSVNPV2Vla1llYXIgPSBnZXRJU09XZWVrc0luSVNPV2Vla1llYXI7XG4gICAgcHJvdG8uZGF0ZSA9IGdldFNldERheU9mTW9udGg7XG4gICAgcHJvdG8uZGF5ID0gcHJvdG8uZGF5cyA9IGdldFNldERheU9mV2VlaztcbiAgICBwcm90by53ZWVrZGF5ID0gZ2V0U2V0TG9jYWxlRGF5T2ZXZWVrO1xuICAgIHByb3RvLmlzb1dlZWtkYXkgPSBnZXRTZXRJU09EYXlPZldlZWs7XG4gICAgcHJvdG8uZGF5T2ZZZWFyID0gZ2V0U2V0RGF5T2ZZZWFyO1xuICAgIHByb3RvLmhvdXIgPSBwcm90by5ob3VycyA9IGdldFNldEhvdXI7XG4gICAgcHJvdG8ubWludXRlID0gcHJvdG8ubWludXRlcyA9IGdldFNldE1pbnV0ZTtcbiAgICBwcm90by5zZWNvbmQgPSBwcm90by5zZWNvbmRzID0gZ2V0U2V0U2Vjb25kO1xuICAgIHByb3RvLm1pbGxpc2Vjb25kID0gcHJvdG8ubWlsbGlzZWNvbmRzID0gZ2V0U2V0TWlsbGlzZWNvbmQ7XG4gICAgcHJvdG8udXRjT2Zmc2V0ID0gZ2V0U2V0T2Zmc2V0O1xuICAgIHByb3RvLnV0YyA9IHNldE9mZnNldFRvVVRDO1xuICAgIHByb3RvLmxvY2FsID0gc2V0T2Zmc2V0VG9Mb2NhbDtcbiAgICBwcm90by5wYXJzZVpvbmUgPSBzZXRPZmZzZXRUb1BhcnNlZE9mZnNldDtcbiAgICBwcm90by5oYXNBbGlnbmVkSG91ck9mZnNldCA9IGhhc0FsaWduZWRIb3VyT2Zmc2V0O1xuICAgIHByb3RvLmlzRFNUID0gaXNEYXlsaWdodFNhdmluZ1RpbWU7XG4gICAgcHJvdG8uaXNMb2NhbCA9IGlzTG9jYWw7XG4gICAgcHJvdG8uaXNVdGNPZmZzZXQgPSBpc1V0Y09mZnNldDtcbiAgICBwcm90by5pc1V0YyA9IGlzVXRjO1xuICAgIHByb3RvLmlzVVRDID0gaXNVdGM7XG4gICAgcHJvdG8uem9uZUFiYnIgPSBnZXRab25lQWJicjtcbiAgICBwcm90by56b25lTmFtZSA9IGdldFpvbmVOYW1lO1xuICAgIHByb3RvLmRhdGVzID0gZGVwcmVjYXRlKFxuICAgICAgICAnZGF0ZXMgYWNjZXNzb3IgaXMgZGVwcmVjYXRlZC4gVXNlIGRhdGUgaW5zdGVhZC4nLFxuICAgICAgICBnZXRTZXREYXlPZk1vbnRoXG4gICAgKTtcbiAgICBwcm90by5tb250aHMgPSBkZXByZWNhdGUoXG4gICAgICAgICdtb250aHMgYWNjZXNzb3IgaXMgZGVwcmVjYXRlZC4gVXNlIG1vbnRoIGluc3RlYWQnLFxuICAgICAgICBnZXRTZXRNb250aFxuICAgICk7XG4gICAgcHJvdG8ueWVhcnMgPSBkZXByZWNhdGUoXG4gICAgICAgICd5ZWFycyBhY2Nlc3NvciBpcyBkZXByZWNhdGVkLiBVc2UgeWVhciBpbnN0ZWFkJyxcbiAgICAgICAgZ2V0U2V0WWVhclxuICAgICk7XG4gICAgcHJvdG8uem9uZSA9IGRlcHJlY2F0ZShcbiAgICAgICAgJ21vbWVudCgpLnpvbmUgaXMgZGVwcmVjYXRlZCwgdXNlIG1vbWVudCgpLnV0Y09mZnNldCBpbnN0ZWFkLiBodHRwOi8vbW9tZW50anMuY29tL2d1aWRlcy8jL3dhcm5pbmdzL3pvbmUvJyxcbiAgICAgICAgZ2V0U2V0Wm9uZVxuICAgICk7XG4gICAgcHJvdG8uaXNEU1RTaGlmdGVkID0gZGVwcmVjYXRlKFxuICAgICAgICAnaXNEU1RTaGlmdGVkIGlzIGRlcHJlY2F0ZWQuIFNlZSBodHRwOi8vbW9tZW50anMuY29tL2d1aWRlcy8jL3dhcm5pbmdzL2RzdC1zaGlmdGVkLyBmb3IgbW9yZSBpbmZvcm1hdGlvbicsXG4gICAgICAgIGlzRGF5bGlnaHRTYXZpbmdUaW1lU2hpZnRlZFxuICAgICk7XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVVbml4KGlucHV0KSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVMb2NhbChpbnB1dCAqIDEwMDApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUluWm9uZSgpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUxvY2FsLmFwcGx5KG51bGwsIGFyZ3VtZW50cykucGFyc2Vab25lKCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcHJlUGFyc2VQb3N0Rm9ybWF0KHN0cmluZykge1xuICAgICAgICByZXR1cm4gc3RyaW5nO1xuICAgIH1cblxuICAgIHZhciBwcm90byQxID0gTG9jYWxlLnByb3RvdHlwZTtcblxuICAgIHByb3RvJDEuY2FsZW5kYXIgPSBjYWxlbmRhcjtcbiAgICBwcm90byQxLmxvbmdEYXRlRm9ybWF0ID0gbG9uZ0RhdGVGb3JtYXQ7XG4gICAgcHJvdG8kMS5pbnZhbGlkRGF0ZSA9IGludmFsaWREYXRlO1xuICAgIHByb3RvJDEub3JkaW5hbCA9IG9yZGluYWw7XG4gICAgcHJvdG8kMS5wcmVwYXJzZSA9IHByZVBhcnNlUG9zdEZvcm1hdDtcbiAgICBwcm90byQxLnBvc3Rmb3JtYXQgPSBwcmVQYXJzZVBvc3RGb3JtYXQ7XG4gICAgcHJvdG8kMS5yZWxhdGl2ZVRpbWUgPSByZWxhdGl2ZVRpbWU7XG4gICAgcHJvdG8kMS5wYXN0RnV0dXJlID0gcGFzdEZ1dHVyZTtcbiAgICBwcm90byQxLnNldCA9IHNldDtcbiAgICBwcm90byQxLmVyYXMgPSBsb2NhbGVFcmFzO1xuICAgIHByb3RvJDEuZXJhc1BhcnNlID0gbG9jYWxlRXJhc1BhcnNlO1xuICAgIHByb3RvJDEuZXJhc0NvbnZlcnRZZWFyID0gbG9jYWxlRXJhc0NvbnZlcnRZZWFyO1xuICAgIHByb3RvJDEuZXJhc0FiYnJSZWdleCA9IGVyYXNBYmJyUmVnZXg7XG4gICAgcHJvdG8kMS5lcmFzTmFtZVJlZ2V4ID0gZXJhc05hbWVSZWdleDtcbiAgICBwcm90byQxLmVyYXNOYXJyb3dSZWdleCA9IGVyYXNOYXJyb3dSZWdleDtcblxuICAgIHByb3RvJDEubW9udGhzID0gbG9jYWxlTW9udGhzO1xuICAgIHByb3RvJDEubW9udGhzU2hvcnQgPSBsb2NhbGVNb250aHNTaG9ydDtcbiAgICBwcm90byQxLm1vbnRoc1BhcnNlID0gbG9jYWxlTW9udGhzUGFyc2U7XG4gICAgcHJvdG8kMS5tb250aHNSZWdleCA9IG1vbnRoc1JlZ2V4O1xuICAgIHByb3RvJDEubW9udGhzU2hvcnRSZWdleCA9IG1vbnRoc1Nob3J0UmVnZXg7XG4gICAgcHJvdG8kMS53ZWVrID0gbG9jYWxlV2VlaztcbiAgICBwcm90byQxLmZpcnN0RGF5T2ZZZWFyID0gbG9jYWxlRmlyc3REYXlPZlllYXI7XG4gICAgcHJvdG8kMS5maXJzdERheU9mV2VlayA9IGxvY2FsZUZpcnN0RGF5T2ZXZWVrO1xuXG4gICAgcHJvdG8kMS53ZWVrZGF5cyA9IGxvY2FsZVdlZWtkYXlzO1xuICAgIHByb3RvJDEud2Vla2RheXNNaW4gPSBsb2NhbGVXZWVrZGF5c01pbjtcbiAgICBwcm90byQxLndlZWtkYXlzU2hvcnQgPSBsb2NhbGVXZWVrZGF5c1Nob3J0O1xuICAgIHByb3RvJDEud2Vla2RheXNQYXJzZSA9IGxvY2FsZVdlZWtkYXlzUGFyc2U7XG5cbiAgICBwcm90byQxLndlZWtkYXlzUmVnZXggPSB3ZWVrZGF5c1JlZ2V4O1xuICAgIHByb3RvJDEud2Vla2RheXNTaG9ydFJlZ2V4ID0gd2Vla2RheXNTaG9ydFJlZ2V4O1xuICAgIHByb3RvJDEud2Vla2RheXNNaW5SZWdleCA9IHdlZWtkYXlzTWluUmVnZXg7XG5cbiAgICBwcm90byQxLmlzUE0gPSBsb2NhbGVJc1BNO1xuICAgIHByb3RvJDEubWVyaWRpZW0gPSBsb2NhbGVNZXJpZGllbTtcblxuICAgIGZ1bmN0aW9uIGdldCQxKGZvcm1hdCwgaW5kZXgsIGZpZWxkLCBzZXR0ZXIpIHtcbiAgICAgICAgdmFyIGxvY2FsZSA9IGdldExvY2FsZSgpLFxuICAgICAgICAgICAgdXRjID0gY3JlYXRlVVRDKCkuc2V0KHNldHRlciwgaW5kZXgpO1xuICAgICAgICByZXR1cm4gbG9jYWxlW2ZpZWxkXSh1dGMsIGZvcm1hdCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGlzdE1vbnRoc0ltcGwoZm9ybWF0LCBpbmRleCwgZmllbGQpIHtcbiAgICAgICAgaWYgKGlzTnVtYmVyKGZvcm1hdCkpIHtcbiAgICAgICAgICAgIGluZGV4ID0gZm9ybWF0O1xuICAgICAgICAgICAgZm9ybWF0ID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9ybWF0ID0gZm9ybWF0IHx8ICcnO1xuXG4gICAgICAgIGlmIChpbmRleCAhPSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0JDEoZm9ybWF0LCBpbmRleCwgZmllbGQsICdtb250aCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGksXG4gICAgICAgICAgICBvdXQgPSBbXTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IDEyOyBpKyspIHtcbiAgICAgICAgICAgIG91dFtpXSA9IGdldCQxKGZvcm1hdCwgaSwgZmllbGQsICdtb250aCcpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuXG4gICAgLy8gKClcbiAgICAvLyAoNSlcbiAgICAvLyAoZm10LCA1KVxuICAgIC8vIChmbXQpXG4gICAgLy8gKHRydWUpXG4gICAgLy8gKHRydWUsIDUpXG4gICAgLy8gKHRydWUsIGZtdCwgNSlcbiAgICAvLyAodHJ1ZSwgZm10KVxuICAgIGZ1bmN0aW9uIGxpc3RXZWVrZGF5c0ltcGwobG9jYWxlU29ydGVkLCBmb3JtYXQsIGluZGV4LCBmaWVsZCkge1xuICAgICAgICBpZiAodHlwZW9mIGxvY2FsZVNvcnRlZCA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgICBpZiAoaXNOdW1iZXIoZm9ybWF0KSkge1xuICAgICAgICAgICAgICAgIGluZGV4ID0gZm9ybWF0O1xuICAgICAgICAgICAgICAgIGZvcm1hdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZm9ybWF0ID0gZm9ybWF0IHx8ICcnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZm9ybWF0ID0gbG9jYWxlU29ydGVkO1xuICAgICAgICAgICAgaW5kZXggPSBmb3JtYXQ7XG4gICAgICAgICAgICBsb2NhbGVTb3J0ZWQgPSBmYWxzZTtcblxuICAgICAgICAgICAgaWYgKGlzTnVtYmVyKGZvcm1hdCkpIHtcbiAgICAgICAgICAgICAgICBpbmRleCA9IGZvcm1hdDtcbiAgICAgICAgICAgICAgICBmb3JtYXQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZvcm1hdCA9IGZvcm1hdCB8fCAnJztcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBsb2NhbGUgPSBnZXRMb2NhbGUoKSxcbiAgICAgICAgICAgIHNoaWZ0ID0gbG9jYWxlU29ydGVkID8gbG9jYWxlLl93ZWVrLmRvdyA6IDAsXG4gICAgICAgICAgICBpLFxuICAgICAgICAgICAgb3V0ID0gW107XG5cbiAgICAgICAgaWYgKGluZGV4ICE9IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBnZXQkMShmb3JtYXQsIChpbmRleCArIHNoaWZ0KSAlIDcsIGZpZWxkLCAnZGF5Jyk7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgNzsgaSsrKSB7XG4gICAgICAgICAgICBvdXRbaV0gPSBnZXQkMShmb3JtYXQsIChpICsgc2hpZnQpICUgNywgZmllbGQsICdkYXknKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3V0O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpc3RNb250aHMoZm9ybWF0LCBpbmRleCkge1xuICAgICAgICByZXR1cm4gbGlzdE1vbnRoc0ltcGwoZm9ybWF0LCBpbmRleCwgJ21vbnRocycpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpc3RNb250aHNTaG9ydChmb3JtYXQsIGluZGV4KSB7XG4gICAgICAgIHJldHVybiBsaXN0TW9udGhzSW1wbChmb3JtYXQsIGluZGV4LCAnbW9udGhzU2hvcnQnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaXN0V2Vla2RheXMobG9jYWxlU29ydGVkLCBmb3JtYXQsIGluZGV4KSB7XG4gICAgICAgIHJldHVybiBsaXN0V2Vla2RheXNJbXBsKGxvY2FsZVNvcnRlZCwgZm9ybWF0LCBpbmRleCwgJ3dlZWtkYXlzJyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGlzdFdlZWtkYXlzU2hvcnQobG9jYWxlU29ydGVkLCBmb3JtYXQsIGluZGV4KSB7XG4gICAgICAgIHJldHVybiBsaXN0V2Vla2RheXNJbXBsKGxvY2FsZVNvcnRlZCwgZm9ybWF0LCBpbmRleCwgJ3dlZWtkYXlzU2hvcnQnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaXN0V2Vla2RheXNNaW4obG9jYWxlU29ydGVkLCBmb3JtYXQsIGluZGV4KSB7XG4gICAgICAgIHJldHVybiBsaXN0V2Vla2RheXNJbXBsKGxvY2FsZVNvcnRlZCwgZm9ybWF0LCBpbmRleCwgJ3dlZWtkYXlzTWluJyk7XG4gICAgfVxuXG4gICAgZ2V0U2V0R2xvYmFsTG9jYWxlKCdlbicsIHtcbiAgICAgICAgZXJhczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHNpbmNlOiAnMDAwMS0wMS0wMScsXG4gICAgICAgICAgICAgICAgdW50aWw6ICtJbmZpbml0eSxcbiAgICAgICAgICAgICAgICBvZmZzZXQ6IDEsXG4gICAgICAgICAgICAgICAgbmFtZTogJ0Fubm8gRG9taW5pJyxcbiAgICAgICAgICAgICAgICBuYXJyb3c6ICdBRCcsXG4gICAgICAgICAgICAgICAgYWJicjogJ0FEJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc2luY2U6ICcwMDAwLTEyLTMxJyxcbiAgICAgICAgICAgICAgICB1bnRpbDogLUluZmluaXR5LFxuICAgICAgICAgICAgICAgIG9mZnNldDogMSxcbiAgICAgICAgICAgICAgICBuYW1lOiAnQmVmb3JlIENocmlzdCcsXG4gICAgICAgICAgICAgICAgbmFycm93OiAnQkMnLFxuICAgICAgICAgICAgICAgIGFiYnI6ICdCQycsXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0odGh8c3R8bmR8cmQpLyxcbiAgICAgICAgb3JkaW5hbDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICAgICAgdmFyIGIgPSBudW1iZXIgJSAxMCxcbiAgICAgICAgICAgICAgICBvdXRwdXQgPVxuICAgICAgICAgICAgICAgICAgICB0b0ludCgobnVtYmVyICUgMTAwKSAvIDEwKSA9PT0gMVxuICAgICAgICAgICAgICAgICAgICAgICAgPyAndGgnXG4gICAgICAgICAgICAgICAgICAgICAgICA6IGIgPT09IDFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPyAnc3QnXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDogYiA9PT0gMlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gJ25kJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogYiA9PT0gM1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAncmQnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICd0aCc7XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgb3V0cHV0O1xuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgLy8gU2lkZSBlZmZlY3QgaW1wb3J0c1xuXG4gICAgaG9va3MubGFuZyA9IGRlcHJlY2F0ZShcbiAgICAgICAgJ21vbWVudC5sYW5nIGlzIGRlcHJlY2F0ZWQuIFVzZSBtb21lbnQubG9jYWxlIGluc3RlYWQuJyxcbiAgICAgICAgZ2V0U2V0R2xvYmFsTG9jYWxlXG4gICAgKTtcbiAgICBob29rcy5sYW5nRGF0YSA9IGRlcHJlY2F0ZShcbiAgICAgICAgJ21vbWVudC5sYW5nRGF0YSBpcyBkZXByZWNhdGVkLiBVc2UgbW9tZW50LmxvY2FsZURhdGEgaW5zdGVhZC4nLFxuICAgICAgICBnZXRMb2NhbGVcbiAgICApO1xuXG4gICAgdmFyIG1hdGhBYnMgPSBNYXRoLmFicztcblxuICAgIGZ1bmN0aW9uIGFicygpIHtcbiAgICAgICAgdmFyIGRhdGEgPSB0aGlzLl9kYXRhO1xuXG4gICAgICAgIHRoaXMuX21pbGxpc2Vjb25kcyA9IG1hdGhBYnModGhpcy5fbWlsbGlzZWNvbmRzKTtcbiAgICAgICAgdGhpcy5fZGF5cyA9IG1hdGhBYnModGhpcy5fZGF5cyk7XG4gICAgICAgIHRoaXMuX21vbnRocyA9IG1hdGhBYnModGhpcy5fbW9udGhzKTtcblxuICAgICAgICBkYXRhLm1pbGxpc2Vjb25kcyA9IG1hdGhBYnMoZGF0YS5taWxsaXNlY29uZHMpO1xuICAgICAgICBkYXRhLnNlY29uZHMgPSBtYXRoQWJzKGRhdGEuc2Vjb25kcyk7XG4gICAgICAgIGRhdGEubWludXRlcyA9IG1hdGhBYnMoZGF0YS5taW51dGVzKTtcbiAgICAgICAgZGF0YS5ob3VycyA9IG1hdGhBYnMoZGF0YS5ob3Vycyk7XG4gICAgICAgIGRhdGEubW9udGhzID0gbWF0aEFicyhkYXRhLm1vbnRocyk7XG4gICAgICAgIGRhdGEueWVhcnMgPSBtYXRoQWJzKGRhdGEueWVhcnMpO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFkZFN1YnRyYWN0JDEoZHVyYXRpb24sIGlucHV0LCB2YWx1ZSwgZGlyZWN0aW9uKSB7XG4gICAgICAgIHZhciBvdGhlciA9IGNyZWF0ZUR1cmF0aW9uKGlucHV0LCB2YWx1ZSk7XG5cbiAgICAgICAgZHVyYXRpb24uX21pbGxpc2Vjb25kcyArPSBkaXJlY3Rpb24gKiBvdGhlci5fbWlsbGlzZWNvbmRzO1xuICAgICAgICBkdXJhdGlvbi5fZGF5cyArPSBkaXJlY3Rpb24gKiBvdGhlci5fZGF5cztcbiAgICAgICAgZHVyYXRpb24uX21vbnRocyArPSBkaXJlY3Rpb24gKiBvdGhlci5fbW9udGhzO1xuXG4gICAgICAgIHJldHVybiBkdXJhdGlvbi5fYnViYmxlKCk7XG4gICAgfVxuXG4gICAgLy8gc3VwcG9ydHMgb25seSAyLjAtc3R5bGUgYWRkKDEsICdzJykgb3IgYWRkKGR1cmF0aW9uKVxuICAgIGZ1bmN0aW9uIGFkZCQxKGlucHV0LCB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gYWRkU3VidHJhY3QkMSh0aGlzLCBpbnB1dCwgdmFsdWUsIDEpO1xuICAgIH1cblxuICAgIC8vIHN1cHBvcnRzIG9ubHkgMi4wLXN0eWxlIHN1YnRyYWN0KDEsICdzJykgb3Igc3VidHJhY3QoZHVyYXRpb24pXG4gICAgZnVuY3Rpb24gc3VidHJhY3QkMShpbnB1dCwgdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGFkZFN1YnRyYWN0JDEodGhpcywgaW5wdXQsIHZhbHVlLCAtMSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYWJzQ2VpbChudW1iZXIpIHtcbiAgICAgICAgaWYgKG51bWJlciA8IDApIHtcbiAgICAgICAgICAgIHJldHVybiBNYXRoLmZsb29yKG51bWJlcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gTWF0aC5jZWlsKG51bWJlcik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBidWJibGUoKSB7XG4gICAgICAgIHZhciBtaWxsaXNlY29uZHMgPSB0aGlzLl9taWxsaXNlY29uZHMsXG4gICAgICAgICAgICBkYXlzID0gdGhpcy5fZGF5cyxcbiAgICAgICAgICAgIG1vbnRocyA9IHRoaXMuX21vbnRocyxcbiAgICAgICAgICAgIGRhdGEgPSB0aGlzLl9kYXRhLFxuICAgICAgICAgICAgc2Vjb25kcyxcbiAgICAgICAgICAgIG1pbnV0ZXMsXG4gICAgICAgICAgICBob3VycyxcbiAgICAgICAgICAgIHllYXJzLFxuICAgICAgICAgICAgbW9udGhzRnJvbURheXM7XG5cbiAgICAgICAgLy8gaWYgd2UgaGF2ZSBhIG1peCBvZiBwb3NpdGl2ZSBhbmQgbmVnYXRpdmUgdmFsdWVzLCBidWJibGUgZG93biBmaXJzdFxuICAgICAgICAvLyBjaGVjazogaHR0cHM6Ly9naXRodWIuY29tL21vbWVudC9tb21lbnQvaXNzdWVzLzIxNjZcbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgIShcbiAgICAgICAgICAgICAgICAobWlsbGlzZWNvbmRzID49IDAgJiYgZGF5cyA+PSAwICYmIG1vbnRocyA+PSAwKSB8fFxuICAgICAgICAgICAgICAgIChtaWxsaXNlY29uZHMgPD0gMCAmJiBkYXlzIDw9IDAgJiYgbW9udGhzIDw9IDApXG4gICAgICAgICAgICApXG4gICAgICAgICkge1xuICAgICAgICAgICAgbWlsbGlzZWNvbmRzICs9IGFic0NlaWwobW9udGhzVG9EYXlzKG1vbnRocykgKyBkYXlzKSAqIDg2NGU1O1xuICAgICAgICAgICAgZGF5cyA9IDA7XG4gICAgICAgICAgICBtb250aHMgPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVGhlIGZvbGxvd2luZyBjb2RlIGJ1YmJsZXMgdXAgdmFsdWVzLCBzZWUgdGhlIHRlc3RzIGZvclxuICAgICAgICAvLyBleGFtcGxlcyBvZiB3aGF0IHRoYXQgbWVhbnMuXG4gICAgICAgIGRhdGEubWlsbGlzZWNvbmRzID0gbWlsbGlzZWNvbmRzICUgMTAwMDtcblxuICAgICAgICBzZWNvbmRzID0gYWJzRmxvb3IobWlsbGlzZWNvbmRzIC8gMTAwMCk7XG4gICAgICAgIGRhdGEuc2Vjb25kcyA9IHNlY29uZHMgJSA2MDtcblxuICAgICAgICBtaW51dGVzID0gYWJzRmxvb3Ioc2Vjb25kcyAvIDYwKTtcbiAgICAgICAgZGF0YS5taW51dGVzID0gbWludXRlcyAlIDYwO1xuXG4gICAgICAgIGhvdXJzID0gYWJzRmxvb3IobWludXRlcyAvIDYwKTtcbiAgICAgICAgZGF0YS5ob3VycyA9IGhvdXJzICUgMjQ7XG5cbiAgICAgICAgZGF5cyArPSBhYnNGbG9vcihob3VycyAvIDI0KTtcblxuICAgICAgICAvLyBjb252ZXJ0IGRheXMgdG8gbW9udGhzXG4gICAgICAgIG1vbnRoc0Zyb21EYXlzID0gYWJzRmxvb3IoZGF5c1RvTW9udGhzKGRheXMpKTtcbiAgICAgICAgbW9udGhzICs9IG1vbnRoc0Zyb21EYXlzO1xuICAgICAgICBkYXlzIC09IGFic0NlaWwobW9udGhzVG9EYXlzKG1vbnRoc0Zyb21EYXlzKSk7XG5cbiAgICAgICAgLy8gMTIgbW9udGhzIC0+IDEgeWVhclxuICAgICAgICB5ZWFycyA9IGFic0Zsb29yKG1vbnRocyAvIDEyKTtcbiAgICAgICAgbW9udGhzICU9IDEyO1xuXG4gICAgICAgIGRhdGEuZGF5cyA9IGRheXM7XG4gICAgICAgIGRhdGEubW9udGhzID0gbW9udGhzO1xuICAgICAgICBkYXRhLnllYXJzID0geWVhcnM7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGF5c1RvTW9udGhzKGRheXMpIHtcbiAgICAgICAgLy8gNDAwIHllYXJzIGhhdmUgMTQ2MDk3IGRheXMgKHRha2luZyBpbnRvIGFjY291bnQgbGVhcCB5ZWFyIHJ1bGVzKVxuICAgICAgICAvLyA0MDAgeWVhcnMgaGF2ZSAxMiBtb250aHMgPT09IDQ4MDBcbiAgICAgICAgcmV0dXJuIChkYXlzICogNDgwMCkgLyAxNDYwOTc7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbW9udGhzVG9EYXlzKG1vbnRocykge1xuICAgICAgICAvLyB0aGUgcmV2ZXJzZSBvZiBkYXlzVG9Nb250aHNcbiAgICAgICAgcmV0dXJuIChtb250aHMgKiAxNDYwOTcpIC8gNDgwMDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhcyh1bml0cykge1xuICAgICAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gTmFOO1xuICAgICAgICB9XG4gICAgICAgIHZhciBkYXlzLFxuICAgICAgICAgICAgbW9udGhzLFxuICAgICAgICAgICAgbWlsbGlzZWNvbmRzID0gdGhpcy5fbWlsbGlzZWNvbmRzO1xuXG4gICAgICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpO1xuXG4gICAgICAgIGlmICh1bml0cyA9PT0gJ21vbnRoJyB8fCB1bml0cyA9PT0gJ3F1YXJ0ZXInIHx8IHVuaXRzID09PSAneWVhcicpIHtcbiAgICAgICAgICAgIGRheXMgPSB0aGlzLl9kYXlzICsgbWlsbGlzZWNvbmRzIC8gODY0ZTU7XG4gICAgICAgICAgICBtb250aHMgPSB0aGlzLl9tb250aHMgKyBkYXlzVG9Nb250aHMoZGF5cyk7XG4gICAgICAgICAgICBzd2l0Y2ggKHVuaXRzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnbW9udGgnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbW9udGhzO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3F1YXJ0ZXInOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbW9udGhzIC8gMztcbiAgICAgICAgICAgICAgICBjYXNlICd5ZWFyJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1vbnRocyAvIDEyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gaGFuZGxlIG1pbGxpc2Vjb25kcyBzZXBhcmF0ZWx5IGJlY2F1c2Ugb2YgZmxvYXRpbmcgcG9pbnQgbWF0aCBlcnJvcnMgKGlzc3VlICMxODY3KVxuICAgICAgICAgICAgZGF5cyA9IHRoaXMuX2RheXMgKyBNYXRoLnJvdW5kKG1vbnRoc1RvRGF5cyh0aGlzLl9tb250aHMpKTtcbiAgICAgICAgICAgIHN3aXRjaCAodW5pdHMpIHtcbiAgICAgICAgICAgICAgICBjYXNlICd3ZWVrJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRheXMgLyA3ICsgbWlsbGlzZWNvbmRzIC8gNjA0OGU1O1xuICAgICAgICAgICAgICAgIGNhc2UgJ2RheSc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkYXlzICsgbWlsbGlzZWNvbmRzIC8gODY0ZTU7XG4gICAgICAgICAgICAgICAgY2FzZSAnaG91cic6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkYXlzICogMjQgKyBtaWxsaXNlY29uZHMgLyAzNmU1O1xuICAgICAgICAgICAgICAgIGNhc2UgJ21pbnV0ZSc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkYXlzICogMTQ0MCArIG1pbGxpc2Vjb25kcyAvIDZlNDtcbiAgICAgICAgICAgICAgICBjYXNlICdzZWNvbmQnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGF5cyAqIDg2NDAwICsgbWlsbGlzZWNvbmRzIC8gMTAwMDtcbiAgICAgICAgICAgICAgICAvLyBNYXRoLmZsb29yIHByZXZlbnRzIGZsb2F0aW5nIHBvaW50IG1hdGggZXJyb3JzIGhlcmVcbiAgICAgICAgICAgICAgICBjYXNlICdtaWxsaXNlY29uZCc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLmZsb29yKGRheXMgKiA4NjRlNSkgKyBtaWxsaXNlY29uZHM7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIHVuaXQgJyArIHVuaXRzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1ha2VBcyhhbGlhcykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYXMoYWxpYXMpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIHZhciBhc01pbGxpc2Vjb25kcyA9IG1ha2VBcygnbXMnKSxcbiAgICAgICAgYXNTZWNvbmRzID0gbWFrZUFzKCdzJyksXG4gICAgICAgIGFzTWludXRlcyA9IG1ha2VBcygnbScpLFxuICAgICAgICBhc0hvdXJzID0gbWFrZUFzKCdoJyksXG4gICAgICAgIGFzRGF5cyA9IG1ha2VBcygnZCcpLFxuICAgICAgICBhc1dlZWtzID0gbWFrZUFzKCd3JyksXG4gICAgICAgIGFzTW9udGhzID0gbWFrZUFzKCdNJyksXG4gICAgICAgIGFzUXVhcnRlcnMgPSBtYWtlQXMoJ1EnKSxcbiAgICAgICAgYXNZZWFycyA9IG1ha2VBcygneScpLFxuICAgICAgICB2YWx1ZU9mJDEgPSBhc01pbGxpc2Vjb25kcztcblxuICAgIGZ1bmN0aW9uIGNsb25lJDEoKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVEdXJhdGlvbih0aGlzKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXQkMih1bml0cykge1xuICAgICAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNWYWxpZCgpID8gdGhpc1t1bml0cyArICdzJ10oKSA6IE5hTjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtYWtlR2V0dGVyKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmlzVmFsaWQoKSA/IHRoaXMuX2RhdGFbbmFtZV0gOiBOYU47XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgdmFyIG1pbGxpc2Vjb25kcyA9IG1ha2VHZXR0ZXIoJ21pbGxpc2Vjb25kcycpLFxuICAgICAgICBzZWNvbmRzID0gbWFrZUdldHRlcignc2Vjb25kcycpLFxuICAgICAgICBtaW51dGVzID0gbWFrZUdldHRlcignbWludXRlcycpLFxuICAgICAgICBob3VycyA9IG1ha2VHZXR0ZXIoJ2hvdXJzJyksXG4gICAgICAgIGRheXMgPSBtYWtlR2V0dGVyKCdkYXlzJyksXG4gICAgICAgIG1vbnRocyA9IG1ha2VHZXR0ZXIoJ21vbnRocycpLFxuICAgICAgICB5ZWFycyA9IG1ha2VHZXR0ZXIoJ3llYXJzJyk7XG5cbiAgICBmdW5jdGlvbiB3ZWVrcygpIHtcbiAgICAgICAgcmV0dXJuIGFic0Zsb29yKHRoaXMuZGF5cygpIC8gNyk7XG4gICAgfVxuXG4gICAgdmFyIHJvdW5kID0gTWF0aC5yb3VuZCxcbiAgICAgICAgdGhyZXNob2xkcyA9IHtcbiAgICAgICAgICAgIHNzOiA0NCwgLy8gYSBmZXcgc2Vjb25kcyB0byBzZWNvbmRzXG4gICAgICAgICAgICBzOiA0NSwgLy8gc2Vjb25kcyB0byBtaW51dGVcbiAgICAgICAgICAgIG06IDQ1LCAvLyBtaW51dGVzIHRvIGhvdXJcbiAgICAgICAgICAgIGg6IDIyLCAvLyBob3VycyB0byBkYXlcbiAgICAgICAgICAgIGQ6IDI2LCAvLyBkYXlzIHRvIG1vbnRoL3dlZWtcbiAgICAgICAgICAgIHc6IG51bGwsIC8vIHdlZWtzIHRvIG1vbnRoXG4gICAgICAgICAgICBNOiAxMSwgLy8gbW9udGhzIHRvIHllYXJcbiAgICAgICAgfTtcblxuICAgIC8vIGhlbHBlciBmdW5jdGlvbiBmb3IgbW9tZW50LmZuLmZyb20sIG1vbWVudC5mbi5mcm9tTm93LCBhbmQgbW9tZW50LmR1cmF0aW9uLmZuLmh1bWFuaXplXG4gICAgZnVuY3Rpb24gc3Vic3RpdHV0ZVRpbWVBZ28oc3RyaW5nLCBudW1iZXIsIHdpdGhvdXRTdWZmaXgsIGlzRnV0dXJlLCBsb2NhbGUpIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsZS5yZWxhdGl2ZVRpbWUobnVtYmVyIHx8IDEsICEhd2l0aG91dFN1ZmZpeCwgc3RyaW5nLCBpc0Z1dHVyZSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVsYXRpdmVUaW1lJDEocG9zTmVnRHVyYXRpb24sIHdpdGhvdXRTdWZmaXgsIHRocmVzaG9sZHMsIGxvY2FsZSkge1xuICAgICAgICB2YXIgZHVyYXRpb24gPSBjcmVhdGVEdXJhdGlvbihwb3NOZWdEdXJhdGlvbikuYWJzKCksXG4gICAgICAgICAgICBzZWNvbmRzID0gcm91bmQoZHVyYXRpb24uYXMoJ3MnKSksXG4gICAgICAgICAgICBtaW51dGVzID0gcm91bmQoZHVyYXRpb24uYXMoJ20nKSksXG4gICAgICAgICAgICBob3VycyA9IHJvdW5kKGR1cmF0aW9uLmFzKCdoJykpLFxuICAgICAgICAgICAgZGF5cyA9IHJvdW5kKGR1cmF0aW9uLmFzKCdkJykpLFxuICAgICAgICAgICAgbW9udGhzID0gcm91bmQoZHVyYXRpb24uYXMoJ00nKSksXG4gICAgICAgICAgICB3ZWVrcyA9IHJvdW5kKGR1cmF0aW9uLmFzKCd3JykpLFxuICAgICAgICAgICAgeWVhcnMgPSByb3VuZChkdXJhdGlvbi5hcygneScpKSxcbiAgICAgICAgICAgIGEgPVxuICAgICAgICAgICAgICAgIChzZWNvbmRzIDw9IHRocmVzaG9sZHMuc3MgJiYgWydzJywgc2Vjb25kc10pIHx8XG4gICAgICAgICAgICAgICAgKHNlY29uZHMgPCB0aHJlc2hvbGRzLnMgJiYgWydzcycsIHNlY29uZHNdKSB8fFxuICAgICAgICAgICAgICAgIChtaW51dGVzIDw9IDEgJiYgWydtJ10pIHx8XG4gICAgICAgICAgICAgICAgKG1pbnV0ZXMgPCB0aHJlc2hvbGRzLm0gJiYgWydtbScsIG1pbnV0ZXNdKSB8fFxuICAgICAgICAgICAgICAgIChob3VycyA8PSAxICYmIFsnaCddKSB8fFxuICAgICAgICAgICAgICAgIChob3VycyA8IHRocmVzaG9sZHMuaCAmJiBbJ2hoJywgaG91cnNdKSB8fFxuICAgICAgICAgICAgICAgIChkYXlzIDw9IDEgJiYgWydkJ10pIHx8XG4gICAgICAgICAgICAgICAgKGRheXMgPCB0aHJlc2hvbGRzLmQgJiYgWydkZCcsIGRheXNdKTtcblxuICAgICAgICBpZiAodGhyZXNob2xkcy53ICE9IG51bGwpIHtcbiAgICAgICAgICAgIGEgPVxuICAgICAgICAgICAgICAgIGEgfHxcbiAgICAgICAgICAgICAgICAod2Vla3MgPD0gMSAmJiBbJ3cnXSkgfHxcbiAgICAgICAgICAgICAgICAod2Vla3MgPCB0aHJlc2hvbGRzLncgJiYgWyd3dycsIHdlZWtzXSk7XG4gICAgICAgIH1cbiAgICAgICAgYSA9IGEgfHxcbiAgICAgICAgICAgIChtb250aHMgPD0gMSAmJiBbJ00nXSkgfHxcbiAgICAgICAgICAgIChtb250aHMgPCB0aHJlc2hvbGRzLk0gJiYgWydNTScsIG1vbnRoc10pIHx8XG4gICAgICAgICAgICAoeWVhcnMgPD0gMSAmJiBbJ3knXSkgfHwgWyd5eScsIHllYXJzXTtcblxuICAgICAgICBhWzJdID0gd2l0aG91dFN1ZmZpeDtcbiAgICAgICAgYVszXSA9ICtwb3NOZWdEdXJhdGlvbiA+IDA7XG4gICAgICAgIGFbNF0gPSBsb2NhbGU7XG4gICAgICAgIHJldHVybiBzdWJzdGl0dXRlVGltZUFnby5hcHBseShudWxsLCBhKTtcbiAgICB9XG5cbiAgICAvLyBUaGlzIGZ1bmN0aW9uIGFsbG93cyB5b3UgdG8gc2V0IHRoZSByb3VuZGluZyBmdW5jdGlvbiBmb3IgcmVsYXRpdmUgdGltZSBzdHJpbmdzXG4gICAgZnVuY3Rpb24gZ2V0U2V0UmVsYXRpdmVUaW1lUm91bmRpbmcocm91bmRpbmdGdW5jdGlvbikge1xuICAgICAgICBpZiAocm91bmRpbmdGdW5jdGlvbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gcm91bmQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiByb3VuZGluZ0Z1bmN0aW9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICByb3VuZCA9IHJvdW5kaW5nRnVuY3Rpb247XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gVGhpcyBmdW5jdGlvbiBhbGxvd3MgeW91IHRvIHNldCBhIHRocmVzaG9sZCBmb3IgcmVsYXRpdmUgdGltZSBzdHJpbmdzXG4gICAgZnVuY3Rpb24gZ2V0U2V0UmVsYXRpdmVUaW1lVGhyZXNob2xkKHRocmVzaG9sZCwgbGltaXQpIHtcbiAgICAgICAgaWYgKHRocmVzaG9sZHNbdGhyZXNob2xkXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxpbWl0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aHJlc2hvbGRzW3RocmVzaG9sZF07XG4gICAgICAgIH1cbiAgICAgICAgdGhyZXNob2xkc1t0aHJlc2hvbGRdID0gbGltaXQ7XG4gICAgICAgIGlmICh0aHJlc2hvbGQgPT09ICdzJykge1xuICAgICAgICAgICAgdGhyZXNob2xkcy5zcyA9IGxpbWl0IC0gMTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBodW1hbml6ZShhcmdXaXRoU3VmZml4LCBhcmdUaHJlc2hvbGRzKSB7XG4gICAgICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS5pbnZhbGlkRGF0ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHdpdGhTdWZmaXggPSBmYWxzZSxcbiAgICAgICAgICAgIHRoID0gdGhyZXNob2xkcyxcbiAgICAgICAgICAgIGxvY2FsZSxcbiAgICAgICAgICAgIG91dHB1dDtcblxuICAgICAgICBpZiAodHlwZW9mIGFyZ1dpdGhTdWZmaXggPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICBhcmdUaHJlc2hvbGRzID0gYXJnV2l0aFN1ZmZpeDtcbiAgICAgICAgICAgIGFyZ1dpdGhTdWZmaXggPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIGFyZ1dpdGhTdWZmaXggPT09ICdib29sZWFuJykge1xuICAgICAgICAgICAgd2l0aFN1ZmZpeCA9IGFyZ1dpdGhTdWZmaXg7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBhcmdUaHJlc2hvbGRzID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgdGggPSBPYmplY3QuYXNzaWduKHt9LCB0aHJlc2hvbGRzLCBhcmdUaHJlc2hvbGRzKTtcbiAgICAgICAgICAgIGlmIChhcmdUaHJlc2hvbGRzLnMgIT0gbnVsbCAmJiBhcmdUaHJlc2hvbGRzLnNzID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aC5zcyA9IGFyZ1RocmVzaG9sZHMucyAtIDE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBsb2NhbGUgPSB0aGlzLmxvY2FsZURhdGEoKTtcbiAgICAgICAgb3V0cHV0ID0gcmVsYXRpdmVUaW1lJDEodGhpcywgIXdpdGhTdWZmaXgsIHRoLCBsb2NhbGUpO1xuXG4gICAgICAgIGlmICh3aXRoU3VmZml4KSB7XG4gICAgICAgICAgICBvdXRwdXQgPSBsb2NhbGUucGFzdEZ1dHVyZSgrdGhpcywgb3V0cHV0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBsb2NhbGUucG9zdGZvcm1hdChvdXRwdXQpO1xuICAgIH1cblxuICAgIHZhciBhYnMkMSA9IE1hdGguYWJzO1xuXG4gICAgZnVuY3Rpb24gc2lnbih4KSB7XG4gICAgICAgIHJldHVybiAoeCA+IDApIC0gKHggPCAwKSB8fCAreDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0b0lTT1N0cmluZyQxKCkge1xuICAgICAgICAvLyBmb3IgSVNPIHN0cmluZ3Mgd2UgZG8gbm90IHVzZSB0aGUgbm9ybWFsIGJ1YmJsaW5nIHJ1bGVzOlxuICAgICAgICAvLyAgKiBtaWxsaXNlY29uZHMgYnViYmxlIHVwIHVudGlsIHRoZXkgYmVjb21lIGhvdXJzXG4gICAgICAgIC8vICAqIGRheXMgZG8gbm90IGJ1YmJsZSBhdCBhbGxcbiAgICAgICAgLy8gICogbW9udGhzIGJ1YmJsZSB1cCB1bnRpbCB0aGV5IGJlY29tZSB5ZWFyc1xuICAgICAgICAvLyBUaGlzIGlzIGJlY2F1c2UgdGhlcmUgaXMgbm8gY29udGV4dC1mcmVlIGNvbnZlcnNpb24gYmV0d2VlbiBob3VycyBhbmQgZGF5c1xuICAgICAgICAvLyAodGhpbmsgb2YgY2xvY2sgY2hhbmdlcylcbiAgICAgICAgLy8gYW5kIGFsc28gbm90IGJldHdlZW4gZGF5cyBhbmQgbW9udGhzICgyOC0zMSBkYXlzIHBlciBtb250aClcbiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLmludmFsaWREYXRlKCk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgc2Vjb25kcyA9IGFicyQxKHRoaXMuX21pbGxpc2Vjb25kcykgLyAxMDAwLFxuICAgICAgICAgICAgZGF5cyA9IGFicyQxKHRoaXMuX2RheXMpLFxuICAgICAgICAgICAgbW9udGhzID0gYWJzJDEodGhpcy5fbW9udGhzKSxcbiAgICAgICAgICAgIG1pbnV0ZXMsXG4gICAgICAgICAgICBob3VycyxcbiAgICAgICAgICAgIHllYXJzLFxuICAgICAgICAgICAgcyxcbiAgICAgICAgICAgIHRvdGFsID0gdGhpcy5hc1NlY29uZHMoKSxcbiAgICAgICAgICAgIHRvdGFsU2lnbixcbiAgICAgICAgICAgIHltU2lnbixcbiAgICAgICAgICAgIGRheXNTaWduLFxuICAgICAgICAgICAgaG1zU2lnbjtcblxuICAgICAgICBpZiAoIXRvdGFsKSB7XG4gICAgICAgICAgICAvLyB0aGlzIGlzIHRoZSBzYW1lIGFzIEMjJ3MgKE5vZGEpIGFuZCBweXRob24gKGlzb2RhdGUpLi4uXG4gICAgICAgICAgICAvLyBidXQgbm90IG90aGVyIEpTIChnb29nLmRhdGUpXG4gICAgICAgICAgICByZXR1cm4gJ1AwRCc7XG4gICAgICAgIH1cblxuICAgICAgICAvLyAzNjAwIHNlY29uZHMgLT4gNjAgbWludXRlcyAtPiAxIGhvdXJcbiAgICAgICAgbWludXRlcyA9IGFic0Zsb29yKHNlY29uZHMgLyA2MCk7XG4gICAgICAgIGhvdXJzID0gYWJzRmxvb3IobWludXRlcyAvIDYwKTtcbiAgICAgICAgc2Vjb25kcyAlPSA2MDtcbiAgICAgICAgbWludXRlcyAlPSA2MDtcblxuICAgICAgICAvLyAxMiBtb250aHMgLT4gMSB5ZWFyXG4gICAgICAgIHllYXJzID0gYWJzRmxvb3IobW9udGhzIC8gMTIpO1xuICAgICAgICBtb250aHMgJT0gMTI7XG5cbiAgICAgICAgLy8gaW5zcGlyZWQgYnkgaHR0cHM6Ly9naXRodWIuY29tL2RvcmRpbGxlL21vbWVudC1pc29kdXJhdGlvbi9ibG9iL21hc3Rlci9tb21lbnQuaXNvZHVyYXRpb24uanNcbiAgICAgICAgcyA9IHNlY29uZHMgPyBzZWNvbmRzLnRvRml4ZWQoMykucmVwbGFjZSgvXFwuPzArJC8sICcnKSA6ICcnO1xuXG4gICAgICAgIHRvdGFsU2lnbiA9IHRvdGFsIDwgMCA/ICctJyA6ICcnO1xuICAgICAgICB5bVNpZ24gPSBzaWduKHRoaXMuX21vbnRocykgIT09IHNpZ24odG90YWwpID8gJy0nIDogJyc7XG4gICAgICAgIGRheXNTaWduID0gc2lnbih0aGlzLl9kYXlzKSAhPT0gc2lnbih0b3RhbCkgPyAnLScgOiAnJztcbiAgICAgICAgaG1zU2lnbiA9IHNpZ24odGhpcy5fbWlsbGlzZWNvbmRzKSAhPT0gc2lnbih0b3RhbCkgPyAnLScgOiAnJztcblxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgdG90YWxTaWduICtcbiAgICAgICAgICAgICdQJyArXG4gICAgICAgICAgICAoeWVhcnMgPyB5bVNpZ24gKyB5ZWFycyArICdZJyA6ICcnKSArXG4gICAgICAgICAgICAobW9udGhzID8geW1TaWduICsgbW9udGhzICsgJ00nIDogJycpICtcbiAgICAgICAgICAgIChkYXlzID8gZGF5c1NpZ24gKyBkYXlzICsgJ0QnIDogJycpICtcbiAgICAgICAgICAgIChob3VycyB8fCBtaW51dGVzIHx8IHNlY29uZHMgPyAnVCcgOiAnJykgK1xuICAgICAgICAgICAgKGhvdXJzID8gaG1zU2lnbiArIGhvdXJzICsgJ0gnIDogJycpICtcbiAgICAgICAgICAgIChtaW51dGVzID8gaG1zU2lnbiArIG1pbnV0ZXMgKyAnTScgOiAnJykgK1xuICAgICAgICAgICAgKHNlY29uZHMgPyBobXNTaWduICsgcyArICdTJyA6ICcnKVxuICAgICAgICApO1xuICAgIH1cblxuICAgIHZhciBwcm90byQyID0gRHVyYXRpb24ucHJvdG90eXBlO1xuXG4gICAgcHJvdG8kMi5pc1ZhbGlkID0gaXNWYWxpZCQxO1xuICAgIHByb3RvJDIuYWJzID0gYWJzO1xuICAgIHByb3RvJDIuYWRkID0gYWRkJDE7XG4gICAgcHJvdG8kMi5zdWJ0cmFjdCA9IHN1YnRyYWN0JDE7XG4gICAgcHJvdG8kMi5hcyA9IGFzO1xuICAgIHByb3RvJDIuYXNNaWxsaXNlY29uZHMgPSBhc01pbGxpc2Vjb25kcztcbiAgICBwcm90byQyLmFzU2Vjb25kcyA9IGFzU2Vjb25kcztcbiAgICBwcm90byQyLmFzTWludXRlcyA9IGFzTWludXRlcztcbiAgICBwcm90byQyLmFzSG91cnMgPSBhc0hvdXJzO1xuICAgIHByb3RvJDIuYXNEYXlzID0gYXNEYXlzO1xuICAgIHByb3RvJDIuYXNXZWVrcyA9IGFzV2Vla3M7XG4gICAgcHJvdG8kMi5hc01vbnRocyA9IGFzTW9udGhzO1xuICAgIHByb3RvJDIuYXNRdWFydGVycyA9IGFzUXVhcnRlcnM7XG4gICAgcHJvdG8kMi5hc1llYXJzID0gYXNZZWFycztcbiAgICBwcm90byQyLnZhbHVlT2YgPSB2YWx1ZU9mJDE7XG4gICAgcHJvdG8kMi5fYnViYmxlID0gYnViYmxlO1xuICAgIHByb3RvJDIuY2xvbmUgPSBjbG9uZSQxO1xuICAgIHByb3RvJDIuZ2V0ID0gZ2V0JDI7XG4gICAgcHJvdG8kMi5taWxsaXNlY29uZHMgPSBtaWxsaXNlY29uZHM7XG4gICAgcHJvdG8kMi5zZWNvbmRzID0gc2Vjb25kcztcbiAgICBwcm90byQyLm1pbnV0ZXMgPSBtaW51dGVzO1xuICAgIHByb3RvJDIuaG91cnMgPSBob3VycztcbiAgICBwcm90byQyLmRheXMgPSBkYXlzO1xuICAgIHByb3RvJDIud2Vla3MgPSB3ZWVrcztcbiAgICBwcm90byQyLm1vbnRocyA9IG1vbnRocztcbiAgICBwcm90byQyLnllYXJzID0geWVhcnM7XG4gICAgcHJvdG8kMi5odW1hbml6ZSA9IGh1bWFuaXplO1xuICAgIHByb3RvJDIudG9JU09TdHJpbmcgPSB0b0lTT1N0cmluZyQxO1xuICAgIHByb3RvJDIudG9TdHJpbmcgPSB0b0lTT1N0cmluZyQxO1xuICAgIHByb3RvJDIudG9KU09OID0gdG9JU09TdHJpbmckMTtcbiAgICBwcm90byQyLmxvY2FsZSA9IGxvY2FsZTtcbiAgICBwcm90byQyLmxvY2FsZURhdGEgPSBsb2NhbGVEYXRhO1xuXG4gICAgcHJvdG8kMi50b0lzb1N0cmluZyA9IGRlcHJlY2F0ZShcbiAgICAgICAgJ3RvSXNvU3RyaW5nKCkgaXMgZGVwcmVjYXRlZC4gUGxlYXNlIHVzZSB0b0lTT1N0cmluZygpIGluc3RlYWQgKG5vdGljZSB0aGUgY2FwaXRhbHMpJyxcbiAgICAgICAgdG9JU09TdHJpbmckMVxuICAgICk7XG4gICAgcHJvdG8kMi5sYW5nID0gbGFuZztcblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGFkZEZvcm1hdFRva2VuKCdYJywgMCwgMCwgJ3VuaXgnKTtcbiAgICBhZGRGb3JtYXRUb2tlbigneCcsIDAsIDAsICd2YWx1ZU9mJyk7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBhZGRSZWdleFRva2VuKCd4JywgbWF0Y2hTaWduZWQpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ1gnLCBtYXRjaFRpbWVzdGFtcCk7XG4gICAgYWRkUGFyc2VUb2tlbignWCcsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgICAgICBjb25maWcuX2QgPSBuZXcgRGF0ZShwYXJzZUZsb2F0KGlucHV0KSAqIDEwMDApO1xuICAgIH0pO1xuICAgIGFkZFBhcnNlVG9rZW4oJ3gnLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICAgICAgY29uZmlnLl9kID0gbmV3IERhdGUodG9JbnQoaW5wdXQpKTtcbiAgICB9KTtcblxuICAgIC8vISBtb21lbnQuanNcblxuICAgIGhvb2tzLnZlcnNpb24gPSAnMi4zMC4xJztcblxuICAgIHNldEhvb2tDYWxsYmFjayhjcmVhdGVMb2NhbCk7XG5cbiAgICBob29rcy5mbiA9IHByb3RvO1xuICAgIGhvb2tzLm1pbiA9IG1pbjtcbiAgICBob29rcy5tYXggPSBtYXg7XG4gICAgaG9va3Mubm93ID0gbm93O1xuICAgIGhvb2tzLnV0YyA9IGNyZWF0ZVVUQztcbiAgICBob29rcy51bml4ID0gY3JlYXRlVW5peDtcbiAgICBob29rcy5tb250aHMgPSBsaXN0TW9udGhzO1xuICAgIGhvb2tzLmlzRGF0ZSA9IGlzRGF0ZTtcbiAgICBob29rcy5sb2NhbGUgPSBnZXRTZXRHbG9iYWxMb2NhbGU7XG4gICAgaG9va3MuaW52YWxpZCA9IGNyZWF0ZUludmFsaWQ7XG4gICAgaG9va3MuZHVyYXRpb24gPSBjcmVhdGVEdXJhdGlvbjtcbiAgICBob29rcy5pc01vbWVudCA9IGlzTW9tZW50O1xuICAgIGhvb2tzLndlZWtkYXlzID0gbGlzdFdlZWtkYXlzO1xuICAgIGhvb2tzLnBhcnNlWm9uZSA9IGNyZWF0ZUluWm9uZTtcbiAgICBob29rcy5sb2NhbGVEYXRhID0gZ2V0TG9jYWxlO1xuICAgIGhvb2tzLmlzRHVyYXRpb24gPSBpc0R1cmF0aW9uO1xuICAgIGhvb2tzLm1vbnRoc1Nob3J0ID0gbGlzdE1vbnRoc1Nob3J0O1xuICAgIGhvb2tzLndlZWtkYXlzTWluID0gbGlzdFdlZWtkYXlzTWluO1xuICAgIGhvb2tzLmRlZmluZUxvY2FsZSA9IGRlZmluZUxvY2FsZTtcbiAgICBob29rcy51cGRhdGVMb2NhbGUgPSB1cGRhdGVMb2NhbGU7XG4gICAgaG9va3MubG9jYWxlcyA9IGxpc3RMb2NhbGVzO1xuICAgIGhvb2tzLndlZWtkYXlzU2hvcnQgPSBsaXN0V2Vla2RheXNTaG9ydDtcbiAgICBob29rcy5ub3JtYWxpemVVbml0cyA9IG5vcm1hbGl6ZVVuaXRzO1xuICAgIGhvb2tzLnJlbGF0aXZlVGltZVJvdW5kaW5nID0gZ2V0U2V0UmVsYXRpdmVUaW1lUm91bmRpbmc7XG4gICAgaG9va3MucmVsYXRpdmVUaW1lVGhyZXNob2xkID0gZ2V0U2V0UmVsYXRpdmVUaW1lVGhyZXNob2xkO1xuICAgIGhvb2tzLmNhbGVuZGFyRm9ybWF0ID0gZ2V0Q2FsZW5kYXJGb3JtYXQ7XG4gICAgaG9va3MucHJvdG90eXBlID0gcHJvdG87XG5cbiAgICAvLyBjdXJyZW50bHkgSFRNTDUgaW5wdXQgdHlwZSBvbmx5IHN1cHBvcnRzIDI0LWhvdXIgZm9ybWF0c1xuICAgIGhvb2tzLkhUTUw1X0ZNVCA9IHtcbiAgICAgICAgREFURVRJTUVfTE9DQUw6ICdZWVlZLU1NLUREVEhIOm1tJywgLy8gPGlucHV0IHR5cGU9XCJkYXRldGltZS1sb2NhbFwiIC8+XG4gICAgICAgIERBVEVUSU1FX0xPQ0FMX1NFQ09ORFM6ICdZWVlZLU1NLUREVEhIOm1tOnNzJywgLy8gPGlucHV0IHR5cGU9XCJkYXRldGltZS1sb2NhbFwiIHN0ZXA9XCIxXCIgLz5cbiAgICAgICAgREFURVRJTUVfTE9DQUxfTVM6ICdZWVlZLU1NLUREVEhIOm1tOnNzLlNTUycsIC8vIDxpbnB1dCB0eXBlPVwiZGF0ZXRpbWUtbG9jYWxcIiBzdGVwPVwiMC4wMDFcIiAvPlxuICAgICAgICBEQVRFOiAnWVlZWS1NTS1ERCcsIC8vIDxpbnB1dCB0eXBlPVwiZGF0ZVwiIC8+XG4gICAgICAgIFRJTUU6ICdISDptbScsIC8vIDxpbnB1dCB0eXBlPVwidGltZVwiIC8+XG4gICAgICAgIFRJTUVfU0VDT05EUzogJ0hIOm1tOnNzJywgLy8gPGlucHV0IHR5cGU9XCJ0aW1lXCIgc3RlcD1cIjFcIiAvPlxuICAgICAgICBUSU1FX01TOiAnSEg6bW06c3MuU1NTJywgLy8gPGlucHV0IHR5cGU9XCJ0aW1lXCIgc3RlcD1cIjAuMDAxXCIgLz5cbiAgICAgICAgV0VFSzogJ0dHR0ctW1ddV1cnLCAvLyA8aW5wdXQgdHlwZT1cIndlZWtcIiAvPlxuICAgICAgICBNT05USDogJ1lZWVktTU0nLCAvLyA8aW5wdXQgdHlwZT1cIm1vbnRoXCIgLz5cbiAgICB9O1xuXG4gICAgcmV0dXJuIGhvb2tzO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IFJ1c3NpYW4gW3J1XVxuLy8hIGF1dGhvciA6IFZpa3Rvcm1pbmF0b3IgOiBodHRwczovL2dpdGh1Yi5jb20vVmlrdG9ybWluYXRvclxuLy8hIGF1dGhvciA6IE1lbmVsaW9uIEVsZW5zw7psZSA6IGh0dHBzOi8vZ2l0aHViLmNvbS9PaXJlXG4vLyEgYXV0aG9yIDog0JrQvtGA0LXQvdCx0LXRgNCzINCc0LDRgNC6IDogaHR0cHM6Ly9naXRodWIuY29tL3NvY2tldHBhaXJcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIGZ1bmN0aW9uIHBsdXJhbCh3b3JkLCBudW0pIHtcbiAgICAgICAgdmFyIGZvcm1zID0gd29yZC5zcGxpdCgnXycpO1xuICAgICAgICByZXR1cm4gbnVtICUgMTAgPT09IDEgJiYgbnVtICUgMTAwICE9PSAxMVxuICAgICAgICAgICAgPyBmb3Jtc1swXVxuICAgICAgICAgICAgOiBudW0gJSAxMCA+PSAyICYmIG51bSAlIDEwIDw9IDQgJiYgKG51bSAlIDEwMCA8IDEwIHx8IG51bSAlIDEwMCA+PSAyMClcbiAgICAgICAgICAgICAgPyBmb3Jtc1sxXVxuICAgICAgICAgICAgICA6IGZvcm1zWzJdO1xuICAgIH1cbiAgICBmdW5jdGlvbiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsKG51bWJlciwgd2l0aG91dFN1ZmZpeCwga2V5KSB7XG4gICAgICAgIHZhciBmb3JtYXQgPSB7XG4gICAgICAgICAgICBzczogd2l0aG91dFN1ZmZpeCA/ICfRgdC10LrRg9C90LTQsF/RgdC10LrRg9C90LTRi1/RgdC10LrRg9C90LQnIDogJ9GB0LXQutGD0L3QtNGDX9GB0LXQutGD0L3QtNGLX9GB0LXQutGD0L3QtCcsXG4gICAgICAgICAgICBtbTogd2l0aG91dFN1ZmZpeCA/ICfQvNC40L3Rg9GC0LBf0LzQuNC90YPRgtGLX9C80LjQvdGD0YInIDogJ9C80LjQvdGD0YLRg1/QvNC40L3Rg9GC0Ytf0LzQuNC90YPRgicsXG4gICAgICAgICAgICBoaDogJ9GH0LDRgV/Rh9Cw0YHQsF/Rh9Cw0YHQvtCyJyxcbiAgICAgICAgICAgIGRkOiAn0LTQtdC90Yxf0LTQvdGPX9C00L3QtdC5JyxcbiAgICAgICAgICAgIHd3OiAn0L3QtdC00LXQu9GPX9C90LXQtNC10LvQuF/QvdC10LTQtdC70YwnLFxuICAgICAgICAgICAgTU06ICfQvNC10YHRj9GGX9C80LXRgdGP0YbQsF/QvNC10YHRj9GG0LXQsicsXG4gICAgICAgICAgICB5eTogJ9Cz0L7QtF/Qs9C+0LTQsF/Qu9C10YInLFxuICAgICAgICB9O1xuICAgICAgICBpZiAoa2V5ID09PSAnbScpIHtcbiAgICAgICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4ID8gJ9C80LjQvdGD0YLQsCcgOiAn0LzQuNC90YPRgtGDJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnICcgKyBwbHVyYWwoZm9ybWF0W2tleV0sICtudW1iZXIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHZhciBtb250aHNQYXJzZSA9IFtcbiAgICAgICAgL17Rj9C90LIvaSxcbiAgICAgICAgL17RhNC10LIvaSxcbiAgICAgICAgL17QvNCw0YAvaSxcbiAgICAgICAgL17QsNC/0YAvaSxcbiAgICAgICAgL17QvNCwW9C50Y9dL2ksXG4gICAgICAgIC9e0LjRjtC9L2ksXG4gICAgICAgIC9e0LjRjtC7L2ksXG4gICAgICAgIC9e0LDQstCzL2ksXG4gICAgICAgIC9e0YHQtdC9L2ksXG4gICAgICAgIC9e0L7QutGCL2ksXG4gICAgICAgIC9e0L3QvtGPL2ksXG4gICAgICAgIC9e0LTQtdC6L2ksXG4gICAgXTtcblxuICAgIC8vIGh0dHA6Ly9uZXcuZ3JhbW90YS5ydS9zcHJhdmthL3J1bGVzLzEzOS1wcm9wIDogwqcgMTAzXG4gICAgLy8g0KHQvtC60YDQsNGJ0LXQvdC40Y8g0LzQtdGB0Y/RhtC10LI6IGh0dHA6Ly9uZXcuZ3JhbW90YS5ydS9zcHJhdmthL2J1cm8vc2VhcmNoLWFuc3dlcj9zPTI0MjYzN1xuICAgIC8vIENMRFIgZGF0YTogICAgICAgICAgaHR0cDovL3d3dy51bmljb2RlLm9yZy9jbGRyL2NoYXJ0cy8yOC9zdW1tYXJ5L3J1Lmh0bWwjMTc1M1xuICAgIHZhciBydSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3J1Jywge1xuICAgICAgICBtb250aHM6IHtcbiAgICAgICAgICAgIGZvcm1hdDogJ9GP0L3QstCw0YDRj1/RhNC10LLRgNCw0LvRj1/QvNCw0YDRgtCwX9Cw0L/RgNC10LvRj1/QvNCw0Y9f0LjRjtC90Y9f0LjRjtC70Y9f0LDQstCz0YPRgdGC0LBf0YHQtdC90YLRj9Cx0YDRj1/QvtC60YLRj9Cx0YDRj1/QvdC+0Y/QsdGA0Y9f0LTQtdC60LDQsdGA0Y8nLnNwbGl0KFxuICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIHN0YW5kYWxvbmU6XG4gICAgICAgICAgICAgICAgJ9GP0L3QstCw0YDRjF/RhNC10LLRgNCw0LvRjF/QvNCw0YDRgl/QsNC/0YDQtdC70Yxf0LzQsNC5X9C40Y7QvdGMX9C40Y7Qu9GMX9Cw0LLQs9GD0YHRgl/RgdC10L3RgtGP0LHRgNGMX9C+0LrRgtGP0LHRgNGMX9C90L7Rj9Cx0YDRjF/QtNC10LrQsNCx0YDRjCcuc3BsaXQoXG4gICAgICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgICAgICksXG4gICAgICAgIH0sXG4gICAgICAgIG1vbnRoc1Nob3J0OiB7XG4gICAgICAgICAgICAvLyDQv9C+IENMRFIg0LjQvNC10L3QvdC+IFwi0LjRjtC7LlwiINC4IFwi0LjRjtC9LlwiLCDQvdC+INC60LDQutC+0Lkg0YHQvNGL0YHQuyDQvNC10L3Rj9GC0Ywg0LHRg9C60LLRgyDQvdCwINGC0L7Rh9C60YM/XG4gICAgICAgICAgICBmb3JtYXQ6ICfRj9C90LIuX9GE0LXQstGALl/QvNCw0YAuX9Cw0L/RgC5f0LzQsNGPX9C40Y7QvdGPX9C40Y7Qu9GPX9Cw0LLQsy5f0YHQtdC90YIuX9C+0LrRgi5f0L3QvtGP0LEuX9C00LXQui4nLnNwbGl0KFxuICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIHN0YW5kYWxvbmU6XG4gICAgICAgICAgICAgICAgJ9GP0L3Qsi5f0YTQtdCy0YAuX9C80LDRgNGCX9Cw0L/RgC5f0LzQsNC5X9C40Y7QvdGMX9C40Y7Qu9GMX9Cw0LLQsy5f0YHQtdC90YIuX9C+0LrRgi5f0L3QvtGP0LEuX9C00LXQui4nLnNwbGl0KFxuICAgICAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICB9LFxuICAgICAgICB3ZWVrZGF5czoge1xuICAgICAgICAgICAgc3RhbmRhbG9uZTpcbiAgICAgICAgICAgICAgICAn0LLQvtGB0LrRgNC10YHQtdC90YzQtV/Qv9C+0L3QtdC00LXQu9GM0L3QuNC6X9Cy0YLQvtGA0L3QuNC6X9GB0YDQtdC00LBf0YfQtdGC0LLQtdGA0LNf0L/Rj9GC0L3QuNGG0LBf0YHRg9Cx0LHQvtGC0LAnLnNwbGl0KFxuICAgICAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgZm9ybWF0OiAn0LLQvtGB0LrRgNC10YHQtdC90YzQtV/Qv9C+0L3QtdC00LXQu9GM0L3QuNC6X9Cy0YLQvtGA0L3QuNC6X9GB0YDQtdC00YNf0YfQtdGC0LLQtdGA0LNf0L/Rj9GC0L3QuNGG0YNf0YHRg9Cx0LHQvtGC0YMnLnNwbGl0KFxuICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIGlzRm9ybWF0OiAvXFxbID9b0JLQsl0gPyg/OtC/0YDQvtGI0LvRg9GOfNGB0LvQtdC00YPRjtGJ0YPRjnzRjdGC0YMpPyA/XSA/ZGRkZC8sXG4gICAgICAgIH0sXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICfQstGBX9C/0L1f0LLRgl/RgdGAX9GH0YJf0L/Rgl/RgdCxJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ9Cy0YFf0L/QvV/QstGCX9GB0YBf0YfRgl/Qv9GCX9GB0LEnLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1BhcnNlOiBtb250aHNQYXJzZSxcbiAgICAgICAgbG9uZ01vbnRoc1BhcnNlOiBtb250aHNQYXJzZSxcbiAgICAgICAgc2hvcnRNb250aHNQYXJzZTogbW9udGhzUGFyc2UsXG5cbiAgICAgICAgLy8g0L/QvtC70L3Ri9C1INC90LDQt9Cy0LDQvdC40Y8g0YEg0L/QsNC00LXQttCw0LzQuCwg0L/QviDRgtGA0Lgg0LHRg9C60LLRiywg0LTQu9GPINC90LXQutC+0YLQvtGA0YvRhSwg0L/QviA0INCx0YPQutCy0YssINGB0L7QutGA0LDRidC10L3QuNGPINGBINGC0L7Rh9C60L7QuSDQuCDQsdC10Lcg0YLQvtGH0LrQuFxuICAgICAgICBtb250aHNSZWdleDpcbiAgICAgICAgICAgIC9eKNGP0L3QstCw0YBb0YzRj1180Y/QvdCyXFwuP3zRhNC10LLRgNCw0Ltb0YzRj1180YTQtdCy0YA/XFwuP3zQvNCw0YDRgtCwP3zQvNCw0YBcXC4/fNCw0L/RgNC10Ltb0YzRj1180LDQv9GAXFwuP3zQvNCwW9C50Y9dfNC40Y7QvVvRjNGPXXzQuNGO0L1cXC4/fNC40Y7Qu1vRjNGPXXzQuNGO0LtcXC4/fNCw0LLQs9GD0YHRgtCwP3zQsNCy0LNcXC4/fNGB0LXQvdGC0Y/QsdGAW9GM0Y9dfNGB0LXQvdGCP1xcLj980L7QutGC0Y/QsdGAW9GM0Y9dfNC+0LrRglxcLj980L3QvtGP0LHRgFvRjNGPXXzQvdC+0Y/QsT9cXC4/fNC00LXQutCw0LHRgFvRjNGPXXzQtNC10LpcXC4/KS9pLFxuXG4gICAgICAgIC8vINC60L7Qv9C40Y8g0L/RgNC10LTRi9C00YPRidC10LPQvlxuICAgICAgICBtb250aHNTaG9ydFJlZ2V4OlxuICAgICAgICAgICAgL14o0Y/QvdCy0LDRgFvRjNGPXXzRj9C90LJcXC4/fNGE0LXQstGA0LDQu1vRjNGPXXzRhNC10LLRgD9cXC4/fNC80LDRgNGC0LA/fNC80LDRgFxcLj980LDQv9GA0LXQu1vRjNGPXXzQsNC/0YBcXC4/fNC80LBb0LnRj1180LjRjtC9W9GM0Y9dfNC40Y7QvVxcLj980LjRjtC7W9GM0Y9dfNC40Y7Qu1xcLj980LDQstCz0YPRgdGC0LA/fNCw0LLQs1xcLj980YHQtdC90YLRj9Cx0YBb0YzRj1180YHQtdC90YI/XFwuP3zQvtC60YLRj9Cx0YBb0YzRj1180L7QutGCXFwuP3zQvdC+0Y/QsdGAW9GM0Y9dfNC90L7Rj9CxP1xcLj980LTQtdC60LDQsdGAW9GM0Y9dfNC00LXQulxcLj8pL2ksXG5cbiAgICAgICAgLy8g0L/QvtC70L3Ri9C1INC90LDQt9Cy0LDQvdC40Y8g0YEg0L/QsNC00LXQttCw0LzQuFxuICAgICAgICBtb250aHNTdHJpY3RSZWdleDpcbiAgICAgICAgICAgIC9eKNGP0L3QstCw0YBb0Y/RjF180YTQtdCy0YDQsNC7W9GP0YxdfNC80LDRgNGC0LA/fNCw0L/RgNC10Ltb0Y/RjF180LzQsFvRj9C5XXzQuNGO0L1b0Y/RjF180LjRjtC7W9GP0YxdfNCw0LLQs9GD0YHRgtCwP3zRgdC10L3RgtGP0LHRgFvRj9GMXXzQvtC60YLRj9Cx0YBb0Y/RjF180L3QvtGP0LHRgFvRj9GMXXzQtNC10LrQsNCx0YBb0Y/RjF0pL2ksXG5cbiAgICAgICAgLy8g0JLRi9GA0LDQttC10L3QuNC1LCDQutC+0YLQvtGA0L7QtSDRgdC+0L7RgtCy0LXRgtGB0YLQstGD0LXRgiDRgtC+0LvRjNC60L4g0YHQvtC60YDQsNGJ0ZHQvdC90YvQvCDRhNC+0YDQvNCw0LxcbiAgICAgICAgbW9udGhzU2hvcnRTdHJpY3RSZWdleDpcbiAgICAgICAgICAgIC9eKNGP0L3QslxcLnzRhNC10LLRgD9cXC580LzQsNGAW9GCLl180LDQv9GAXFwufNC80LBb0Y/QuV180LjRjtC9W9GM0Y8uXXzQuNGO0Ltb0YzRjy5dfNCw0LLQs1xcLnzRgdC10L3Rgj9cXC580L7QutGCXFwufNC90L7Rj9CxP1xcLnzQtNC10LpcXC4pL2ksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0g6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQuTU0uWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZINCzLicsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSDQsy4sIEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIEQgTU1NTSBZWVlZINCzLiwgSDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW9Ch0LXQs9C+0LTQvdGPLCDQsl0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1vQl9Cw0LLRgtGA0LAsINCyXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW9CS0YfQtdGA0LAsINCyXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogZnVuY3Rpb24gKG5vdykge1xuICAgICAgICAgICAgICAgIGlmIChub3cud2VlaygpICE9PSB0aGlzLndlZWsoKSkge1xuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKHRoaXMuZGF5KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1vQkiDRgdC70LXQtNGD0Y7RidC10LVdIGRkZGQsIFvQsl0gTFQnO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW9CSINGB0LvQtdC00YPRjtGJ0LjQuV0gZGRkZCwgW9CyXSBMVCc7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdb0JIg0YHQu9C10LTRg9GO0YnRg9GOXSBkZGRkLCBb0LJdIExUJztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmRheSgpID09PSAyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1vQktC+XSBkZGRkLCBb0LJdIExUJztcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW9CSXSBkZGRkLCBb0LJdIExUJztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsYXN0V2VlazogZnVuY3Rpb24gKG5vdykge1xuICAgICAgICAgICAgICAgIGlmIChub3cud2VlaygpICE9PSB0aGlzLndlZWsoKSkge1xuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKHRoaXMuZGF5KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1vQkiDQv9GA0L7RiNC70L7QtV0gZGRkZCwgW9CyXSBMVCc7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdb0JIg0L/RgNC+0YjQu9GL0LldIGRkZGQsIFvQsl0gTFQnO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW9CSINC/0YDQvtGI0LvRg9GOXSBkZGRkLCBb0LJdIExUJztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmRheSgpID09PSAyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1vQktC+XSBkZGRkLCBb0LJdIExUJztcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW9CSXSBkZGRkLCBb0LJdIExUJztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ9GH0LXRgNC10LcgJXMnLFxuICAgICAgICAgICAgcGFzdDogJyVzINC90LDQt9Cw0LQnLFxuICAgICAgICAgICAgczogJ9C90LXRgdC60L7Qu9GM0LrQviDRgdC10LrRg9C90LQnLFxuICAgICAgICAgICAgc3M6IHJlbGF0aXZlVGltZVdpdGhQbHVyYWwsXG4gICAgICAgICAgICBtOiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsLFxuICAgICAgICAgICAgbW06IHJlbGF0aXZlVGltZVdpdGhQbHVyYWwsXG4gICAgICAgICAgICBoOiAn0YfQsNGBJyxcbiAgICAgICAgICAgIGhoOiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsLFxuICAgICAgICAgICAgZDogJ9C00LXQvdGMJyxcbiAgICAgICAgICAgIGRkOiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsLFxuICAgICAgICAgICAgdzogJ9C90LXQtNC10LvRjycsXG4gICAgICAgICAgICB3dzogcmVsYXRpdmVUaW1lV2l0aFBsdXJhbCxcbiAgICAgICAgICAgIE06ICfQvNC10YHRj9GGJyxcbiAgICAgICAgICAgIE1NOiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsLFxuICAgICAgICAgICAgeTogJ9Cz0L7QtCcsXG4gICAgICAgICAgICB5eTogcmVsYXRpdmVUaW1lV2l0aFBsdXJhbCxcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL9C90L7Rh9C4fNGD0YLRgNCwfNC00L3Rj3zQstC10YfQtdGA0LAvaSxcbiAgICAgICAgaXNQTTogZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgICAgICByZXR1cm4gL14o0LTQvdGPfNCy0LXRh9C10YDQsCkkLy50ZXN0KGlucHV0KTtcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW06IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VyIDwgNCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn0L3QvtGH0LgnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9GD0YLRgNCwJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDE3KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfQtNC90Y8nO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9Cy0LXRh9C10YDQsCc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfS0o0Ll80LPQvnzRjykvLFxuICAgICAgICBvcmRpbmFsOiBmdW5jdGlvbiAobnVtYmVyLCBwZXJpb2QpIHtcbiAgICAgICAgICAgIHN3aXRjaCAocGVyaW9kKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnTSc6XG4gICAgICAgICAgICAgICAgY2FzZSAnZCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnREREJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICct0LknO1xuICAgICAgICAgICAgICAgIGNhc2UgJ0QnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJy3Qs9C+JztcbiAgICAgICAgICAgICAgICBjYXNlICd3JzpcbiAgICAgICAgICAgICAgICBjYXNlICdXJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICct0Y8nO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDQsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBydTtcblxufSkpKTtcbiIsIlxyXG5pbXBvcnQgQ29sdW1uIGZyb20gXCIuLi9hYnN0cmFjdC9Db2x1bW5cIjtcclxuaW1wb3J0ICdtb21lbnQnO1xyXG5pbXBvcnQgJ21vbWVudC9sb2NhbGUvcnUnXHJcblxyXG5cclxuY2xhc3MgQ29sdW1uc0RhdGVIdW1hbiBleHRlbmRzIENvbHVtbiB7XHJcblxyXG4gICAgX2xhbmcgPSBudWxsO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y9cclxuICAgICAqIEBwYXJhbSB7Y29yZXVpVGFibGVJbnN0YW5jZX0gdGFibGVcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSAgICAgICAgICAgICAgb3B0aW9uc1xyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3Rvcih0YWJsZSwgb3B0aW9ucykge1xyXG5cclxuICAgICAgICBvcHRpb25zID0gJC5leHRlbmQodHJ1ZSwge1xyXG4gICAgICAgICAgICB0eXBlOiAnZGF0ZScsXHJcbiAgICAgICAgICAgIGZpZWxkOiBudWxsLFxyXG4gICAgICAgICAgICBsYWJlbDogbnVsbCxcclxuICAgICAgICAgICAgc2hvdzogdHJ1ZSxcclxuICAgICAgICAgICAgd2lkdGg6IG51bGwsXHJcbiAgICAgICAgICAgIGZvcm1hdDogJ0RELk1NLllZWVknLFxyXG4gICAgICAgICAgICBhdHRyOiB7fSxcclxuICAgICAgICAgICAgYXR0ckhlYWRlcjoge30sXHJcbiAgICAgICAgICAgIHJlbmRlcjogbnVsbFxyXG4gICAgICAgIH0sIG9wdGlvbnMpO1xyXG5cclxuICAgICAgICBzdXBlcih0YWJsZSwgb3B0aW9ucyk7XHJcblxyXG4gICAgICAgIHRoaXMuX2xhbmcgPSB0YWJsZS5nZXRPcHRpb25zKCkubGFuZztcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQpNC+0YDQvNC40YDQvtCy0LDQvdC40LUg0LrQvtC90YLQtdC90YLQsFxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd8bnVtYmVyfERhdGV9IGNvbnRlbnRcclxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSByZWNvcmRcclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIHJlbmRlcihjb250ZW50LCByZWNvcmQpIHtcclxuXHJcbiAgICAgICAgaWYgKFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIGNvbnRlbnQpIDwgMCB8fCAhIGNvbnRlbnQgaW5zdGFuY2VvZiBEYXRlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAnJztcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBpZiAoY29udGVudCAhPT0gJycpIHtcclxuICAgICAgICAgICAgICAgIGxldCBkYXRlQ29udGVudCA9IGNvbnRlbnQgaW5zdGFuY2VvZiBEYXRlID8gY29udGVudCA6IG5ldyBEYXRlKGNvbnRlbnQpO1xyXG4gICAgICAgICAgICAgICAgbGV0IGRhdGVGb3JtYXQgID0gbW9tZW50KGRhdGVDb250ZW50KS5mb3JtYXQoJ01NLkRELnl5eXkgSEg6bW06c3MnKTtcclxuXHJcbiAgICAgICAgICAgICAgICBjb250ZW50ID0gbW9tZW50KGRhdGVDb250ZW50KS5sb2NhbGUodGhpcy5fbGFuZykuZnJvbU5vdygpO1xyXG4gICAgICAgICAgICAgICAgY29udGVudCA9ICc8c3BhbiB0aXRsZT1cIicgKyBkYXRlRm9ybWF0ICsgJ1wiPicgKyBjb250ZW50ICsgJzwvc3Bhbj4nO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgY29uc29sZS53YXJuKGUpXHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgcmV0dXJuIGNvbnRlbnQ7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCBDb2x1bW5zRGF0ZUh1bWFuOyIsIlxyXG5pbXBvcnQgY29yZXVpVGFibGVVdGlscyBmcm9tIFwiLi4vY29yZXVpLnRhYmxlLnV0aWxzXCI7XHJcbmltcG9ydCBDb2x1bW4gICAgICAgICAgIGZyb20gXCIuLi9hYnN0cmFjdC9Db2x1bW5cIjtcclxuXHJcblxyXG5jbGFzcyBDb2x1bW5zSHRtbCBleHRlbmRzIENvbHVtbiB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQmNC90LjRhtC40LDQu9C40LfQsNGG0LjRj1xyXG4gICAgICogQHBhcmFtIHtjb3JldWlUYWJsZUluc3RhbmNlfSB0YWJsZVxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9ICAgICAgICAgICAgICBvcHRpb25zXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKHRhYmxlLCBvcHRpb25zKSB7XHJcblxyXG4gICAgICAgIG9wdGlvbnMgPSAkLmV4dGVuZCh0cnVlLCB7XHJcbiAgICAgICAgICAgIHR5cGU6ICdodG1sJyxcclxuICAgICAgICAgICAgZmllbGQ6IG51bGwsXHJcbiAgICAgICAgICAgIGxhYmVsOiBudWxsLFxyXG4gICAgICAgICAgICBzaG93OiB0cnVlLFxyXG4gICAgICAgICAgICB3aWR0aDogbnVsbCxcclxuICAgICAgICAgICAgbWluV2lkdGg6IG51bGwsXHJcbiAgICAgICAgICAgIG1heFdpZHRoOiBudWxsLFxyXG4gICAgICAgICAgICBub1dyYXA6IG51bGwsXHJcbiAgICAgICAgICAgIG5vV3JhcFRvZ2dsZTogbnVsbCxcclxuICAgICAgICAgICAgYXR0cjoge30sXHJcbiAgICAgICAgICAgIGF0dHJIZWFkZXI6IHt9LFxyXG4gICAgICAgICAgICByZW5kZXI6IG51bGxcclxuICAgICAgICB9LCBvcHRpb25zKTtcclxuXHJcbiAgICAgICAgc3VwZXIodGFibGUsIG9wdGlvbnMpO1xyXG5cclxuICAgICAgICBsZXQgdGFibGVPcHRpb25zID0gdGhpcy5fdGFibGUuZ2V0T3B0aW9ucygpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy5ub1dyYXAgfHxcclxuICAgICAgICAgICAgKHRoaXMuX29wdGlvbnMubm9XcmFwID09PSBudWxsICYmIHRhYmxlT3B0aW9ucy5ub1dyYXApXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIGlmICggISB0aGlzLl9vcHRpb25zLmF0dHIpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX29wdGlvbnMuYXR0ciA9IHsgY2xhc3MgOiAnY29yZXVpX3RhYmxlX19uby13cmFwJyB9O1xyXG5cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX29wdGlvbnMuYXR0ciA9IGNvcmV1aVRhYmxlVXRpbHMubWVyZ2VBdHRyKHRoaXMuX29wdGlvbnMuYXR0ciwge1xyXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzOiAnY29yZXVpX3RhYmxlX19uby13cmFwJ1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuX29wdGlvbnMubm9XcmFwID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9vcHRpb25zLm5vV3JhcFRvZ2dsZSB8fFxyXG4gICAgICAgICAgICAgICAgKHRoaXMuX29wdGlvbnMubm9XcmFwVG9nZ2xlID09PSBudWxsICYmIHRhYmxlT3B0aW9ucy5ub1dyYXBUb2dnbGUpXHJcbiAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy5ub1dyYXBUb2dnbGUgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCa0L7QvdCy0LXRgNGC0LjRgNC+0LLQsNC90LjQtSDQt9C90LDRh9C10L3QuNGPINC60L7Qu9C+0L3QutC4INCyINGC0LXQutGB0YJcclxuICAgICAqIEBwYXJhbSB7Kn0gY29sdW1uVmFsdWVcclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIGNvbnZlcnRUb1N0cmluZyhjb2x1bW5WYWx1ZSkge1xyXG5cclxuICAgICAgICBpZiAoWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2YgY29sdW1uVmFsdWUpID49IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuIFN0cmluZyhjb2x1bW5WYWx1ZSkucmVwbGFjZSgvPFtePl0qPj8vZ20sICcnKTtcclxuXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQpNC+0YDQvNC40YDQvtCy0LDQvdC40LUg0LrQvtC90YLQtdC90YLQsFxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd8SFRNTEVsZW1lbnR8alF1ZXJ5fSBjb250ZW50XHJcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gICAgICAgICAgICAgICAgICAgIHJlY29yZFxyXG4gICAgICogQHJldHVybnMge3N0cmluZ31cclxuICAgICAqL1xyXG4gICAgcmVuZGVyKGNvbnRlbnQsIHJlY29yZCkge1xyXG5cclxuICAgICAgICBpZiAoWydzdHJpbmcnLCAnYmlnaW50JywgJ3N5bWJvbCcsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiBjb250ZW50KSA8IDAgJiZcclxuICAgICAgICAgICAgISAoY29udGVudCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSAmJlxyXG4gICAgICAgICAgICAhICh3aW5kb3cuaGFzT3duUHJvcGVydHkoJ2pRdWVyeScpICYmIGNvbnRlbnQgaW5zdGFuY2VvZiBqUXVlcnkpXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAnJztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLm5vV3JhcCkge1xyXG4gICAgICAgICAgICBjb250ZW50ID0gJCgnPGRpdj48L2Rpdj4nKS5hcHBlbmQoY29udGVudCk7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy5ub1dyYXBUb2dnbGUpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRlbnQgPSAkKGNvbnRlbnQpLmFmdGVyKCc8aSBjbGFzcz1cImJpIGJpLWNhcmV0LWRvd24tZmlsbCB0b2dnbGVcIj48L2k+JylcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGNvbnRlbnQ7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCBDb2x1bW5zSHRtbDsiLCJcclxuaW1wb3J0IGNvcmV1aVRhYmxlVXRpbHMgZnJvbSBcIi4uL2NvcmV1aS50YWJsZS51dGlsc1wiO1xyXG5pbXBvcnQgQ29sdW1uICAgICAgICAgICBmcm9tIFwiLi4vYWJzdHJhY3QvQ29sdW1uXCI7XHJcblxyXG5jbGFzcyBDb2x1bW5zTnVtYmVyIGV4dGVuZHMgQ29sdW1uIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPXHJcbiAgICAgKiBAcGFyYW0ge2NvcmV1aVRhYmxlSW5zdGFuY2V9IHRhYmxlXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gICAgICAgICAgICAgIG9wdGlvbnNcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IodGFibGUsIG9wdGlvbnMpIHtcclxuXHJcbiAgICAgICAgb3B0aW9ucyA9ICQuZXh0ZW5kKHRydWUsIHtcclxuICAgICAgICAgICAgdHlwZTogJ251bWJlcicsXHJcbiAgICAgICAgICAgIGZpZWxkOiBudWxsLFxyXG4gICAgICAgICAgICBsYWJlbDogbnVsbCxcclxuICAgICAgICAgICAgc2hvdzogdHJ1ZSxcclxuICAgICAgICAgICAgd2lkdGg6IG51bGwsXHJcbiAgICAgICAgICAgIG1pbldpZHRoOiBudWxsLFxyXG4gICAgICAgICAgICBtYXhXaWR0aDogbnVsbCxcclxuICAgICAgICAgICAgbm9XcmFwOiBudWxsLFxyXG4gICAgICAgICAgICBub1dyYXBUb2dnbGU6IG51bGwsXHJcbiAgICAgICAgICAgIGF0dHI6IHt9LFxyXG4gICAgICAgICAgICBhdHRySGVhZGVyOiB7fSxcclxuICAgICAgICAgICAgcmVuZGVyOiBudWxsXHJcbiAgICAgICAgfSwgb3B0aW9ucyk7XHJcblxyXG4gICAgICAgIHN1cGVyKHRhYmxlLCBvcHRpb25zKTtcclxuXHJcblxyXG4gICAgICAgIGxldCB0YWJsZU9wdGlvbnMgPSB0aGlzLl90YWJsZS5nZXRPcHRpb25zKCk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLm5vV3JhcCB8fFxyXG4gICAgICAgICAgICAodGhpcy5fb3B0aW9ucy5ub1dyYXAgPT09IG51bGwgJiYgdGFibGVPcHRpb25zLm5vV3JhcClcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgaWYgKCAhIHRoaXMuX29wdGlvbnMuYXR0cikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy5hdHRyID0geyBjbGFzcyA6ICdjb3JldWlfdGFibGVfX25vLXdyYXAnIH07XHJcblxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy5hdHRyID0gY29yZXVpVGFibGVVdGlscy5tZXJnZUF0dHIodGhpcy5fb3B0aW9ucy5hdHRyLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3M6ICdjb3JldWlfdGFibGVfX25vLXdyYXAnXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy5ub1dyYXAgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMubm9XcmFwVG9nZ2xlIHx8XHJcbiAgICAgICAgICAgICAgICAodGhpcy5fb3B0aW9ucy5ub1dyYXBUb2dnbGUgPT09IG51bGwgJiYgdGFibGVPcHRpb25zLm5vV3JhcFRvZ2dsZSlcclxuICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9vcHRpb25zLm5vV3JhcFRvZ2dsZSA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KTQvtGA0LzQuNGA0L7QstCw0L3QuNC1INC60L7QvdGC0LXQvdGC0LBcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjb250ZW50XHJcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gcmVjb3JkXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxyXG4gICAgICovXHJcbiAgICByZW5kZXIoY29udGVudCwgcmVjb3JkKSB7XHJcblxyXG4gICAgICAgIGlmIChbJ3N0cmluZycsICdiaWdpbnQnLCAnc3ltYm9sJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIGNvbnRlbnQpIDwgMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gJyc7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb250ZW50ID0gU3RyaW5nKGNvbnRlbnQpXHJcbiAgICAgICAgICAgIC5yZXBsYWNlKC8sL2csICcuJylcclxuICAgICAgICAgICAgLnJlcGxhY2UoL1teMC05XFwtXFwuXS9nLCAnJylcclxuICAgICAgICAgICAgLnJlcGxhY2UoL1tcXHNdezIsfS9nLCAnICcpXHJcbiAgICAgICAgICAgIC5yZXBsYWNlKC8oPzwhKFxcLlxcZCp8Xi57MH0pKSg/PShcXGR7M30pKyg/IVxcZCkpL2csICckMSAnKVxyXG4gICAgICAgICAgICAucmVwbGFjZSgvXFwtIC9nLCAnLScpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy5ub1dyYXApIHtcclxuICAgICAgICAgICAgY29udGVudCA9ICc8ZGl2PicgKyBjb250ZW50ICsgJzwvZGl2PidcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9vcHRpb25zLm5vV3JhcFRvZ2dsZSkge1xyXG4gICAgICAgICAgICAgICAgY29udGVudCArPSAnPGkgY2xhc3M9XCJiaSBiaS1jYXJldC1kb3duLWZpbGwgdG9nZ2xlXCI+PC9pPidcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGNvbnRlbnQ7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IENvbHVtbnNOdW1iZXI7IiwiXHJcbmltcG9ydCBjb3JldWlUYWJsZVV0aWxzIGZyb20gXCIuLi9jb3JldWkudGFibGUudXRpbHNcIjtcclxuaW1wb3J0IENvbHVtbiAgICAgICAgICAgZnJvbSBcIi4uL2Fic3RyYWN0L0NvbHVtblwiO1xyXG5cclxuY2xhc3MgQ29sdW1uc01vbmV5IGV4dGVuZHMgQ29sdW1uIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPXHJcbiAgICAgKiBAcGFyYW0ge2NvcmV1aVRhYmxlSW5zdGFuY2V9IHRhYmxlXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gICAgICAgICAgICAgIG9wdGlvbnNcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IodGFibGUsIG9wdGlvbnMpIHtcclxuXHJcbiAgICAgICAgb3B0aW9ucyA9ICQuZXh0ZW5kKHRydWUsIHtcclxuICAgICAgICAgICAgdHlwZTogJ21vbmV5JyxcclxuICAgICAgICAgICAgZmllbGQ6IG51bGwsXHJcbiAgICAgICAgICAgIGxhYmVsOiBudWxsLFxyXG4gICAgICAgICAgICBzaG93OiB0cnVlLFxyXG4gICAgICAgICAgICB3aWR0aDogbnVsbCxcclxuICAgICAgICAgICAgbWluV2lkdGg6IG51bGwsXHJcbiAgICAgICAgICAgIG1heFdpZHRoOiBudWxsLFxyXG4gICAgICAgICAgICBub1dyYXA6IG51bGwsXHJcbiAgICAgICAgICAgIG5vV3JhcFRvZ2dsZTogbnVsbCxcclxuICAgICAgICAgICAgY3VycmVuY3k6IG51bGwsXHJcbiAgICAgICAgICAgIGF0dHI6IHtcclxuICAgICAgICAgICAgICAgIGNsYXNzOiAndGV4dC1lbmQnXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGF0dHJIZWFkZXI6IHtcclxuICAgICAgICAgICAgICAgIGNsYXNzOiAndGV4dC1lbmQnXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHJlbmRlcjogbnVsbFxyXG4gICAgICAgIH0sIG9wdGlvbnMpO1xyXG5cclxuICAgICAgICBzdXBlcih0YWJsZSwgb3B0aW9ucyk7XHJcblxyXG4gICAgICAgIGxldCB0YWJsZU9wdGlvbnMgPSB0aGlzLl90YWJsZS5nZXRPcHRpb25zKCk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLm5vV3JhcCB8fFxyXG4gICAgICAgICAgICAodGhpcy5fb3B0aW9ucy5ub1dyYXAgPT09IG51bGwgJiYgdGFibGVPcHRpb25zLm5vV3JhcClcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgaWYgKCAhIHRoaXMuX29wdGlvbnMuYXR0cikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy5hdHRyID0geyBjbGFzcyA6ICdjb3JldWlfdGFibGVfX25vLXdyYXAnIH07XHJcblxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy5hdHRyID0gY29yZXVpVGFibGVVdGlscy5tZXJnZUF0dHIodGhpcy5fb3B0aW9ucy5hdHRyLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3M6ICdjb3JldWlfdGFibGVfX25vLXdyYXAnXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy5ub1dyYXAgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMubm9XcmFwVG9nZ2xlIHx8XHJcbiAgICAgICAgICAgICAgICAodGhpcy5fb3B0aW9ucy5ub1dyYXBUb2dnbGUgPT09IG51bGwgJiYgdGFibGVPcHRpb25zLm5vV3JhcFRvZ2dsZSlcclxuICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9vcHRpb25zLm5vV3JhcFRvZ2dsZSA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0JrQvtC90LLQtdGA0YLQuNGA0L7QstCw0L3QuNC1INC30L3QsNGH0LXQvdC40Y8g0LrQvtC70L7QvdC60Lgg0LIg0YLQtdC60YHRglxyXG4gICAgICogQHBhcmFtIHsqfSBjb2x1bW5WYWx1ZVxyXG4gICAgICogQHJldHVybnMge3N0cmluZ31cclxuICAgICAqL1xyXG4gICAgY29udmVydFRvU3RyaW5nKGNvbHVtblZhbHVlKSB7XHJcblxyXG4gICAgICAgIGxldCBjb250ZW50ID0gJyc7XHJcblxyXG4gICAgICAgIGlmIChbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiBjb2x1bW5WYWx1ZSkgPj0gMCkge1xyXG4gICAgICAgICAgICBpZiAoaXNOYU4oY29udGVudCkpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50LnRvU3RyaW5nKClcclxuICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvKFxcZCkoPz0oXFxkXFxkXFxkKSsoW15cXGRdfCQpKS9nLCAnJDEgJyk7XHJcblxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY29udGVudCA9IE51bWJlcihjb250ZW50KS50b0ZpeGVkKDIpLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgICAgICBjb250ZW50ID0gY29udGVudC5yZXBsYWNlKC8oXFxkKSg/PShcXGRcXGRcXGQpKyhbXlxcZF18JCkpL2csICckMSAnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGNvbnRlbnQ7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KTQvtGA0LzQuNGA0L7QstCw0L3QuNC1INC60L7QvdGC0LXQvdGC0LBcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjb250ZW50XHJcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gcmVjb3JkXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxyXG4gICAgICovXHJcbiAgICByZW5kZXIoY29udGVudCwgcmVjb3JkKSB7XHJcblxyXG4gICAgICAgIGlmIChbJ3N0cmluZycsICdiaWdpbnQnLCAnc3ltYm9sJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIGNvbnRlbnQpIDwgMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gJyc7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgaWYgKGlzTmFOKGNvbnRlbnQpKSB7XHJcbiAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50LnRvU3RyaW5nKClcclxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKC8oXFxkKSg/PShcXGRcXGRcXGQpKyhbXlxcZF18JCkpL2csICckMSAnKTtcclxuXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY29udGVudCA9IE51bWJlcihjb250ZW50KS50b0ZpeGVkKDIpLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50LnJlcGxhY2UoLyhcXGQpKD89KFxcZFxcZFxcZCkrKFteXFxkXXwkKSkvZywgJyQxICcpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMuY3VycmVuY3kgJiZcclxuICAgICAgICAgICAgWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2YgdGhpcy5fb3B0aW9ucy5jdXJyZW5jeSkgPj0gMFxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICBjb250ZW50ICs9ICcgPHNtYWxsIGNsYXNzPVwidGV4dC1tdXRlZFwiPicgKyB0aGlzLl9vcHRpb25zLmN1cnJlbmN5ICsgJzwvc21hbGw+JztcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy5ub1dyYXApIHtcclxuICAgICAgICAgICAgY29udGVudCA9ICc8ZGl2PicgKyBjb250ZW50ICsgJzwvZGl2PidcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9vcHRpb25zLm5vV3JhcFRvZ2dsZSkge1xyXG4gICAgICAgICAgICAgICAgY29udGVudCArPSAnPGkgY2xhc3M9XCJiaSBiaS1jYXJldC1kb3duLWZpbGwgdG9nZ2xlXCI+PC9pPidcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGNvbnRlbnQ7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCBDb2x1bW5zTW9uZXk7IiwiXHJcbmltcG9ydCBDb2x1bW4gZnJvbSBcIi4uL2Fic3RyYWN0L0NvbHVtblwiO1xyXG5cclxuXHJcbmNsYXNzIENvbHVtbnNOdW1iZXJzIGV4dGVuZHMgQ29sdW1uIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPXHJcbiAgICAgKiBAcGFyYW0ge2NvcmV1aVRhYmxlSW5zdGFuY2V9IHRhYmxlXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gICAgICAgICAgICAgIG9wdGlvbnNcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IodGFibGUsIG9wdGlvbnMpIHtcclxuXHJcbiAgICAgICAgb3B0aW9ucyA9ICQuZXh0ZW5kKHRydWUsIHtcclxuICAgICAgICAgICAgdHlwZTogJ251bWJlcnMnLFxyXG4gICAgICAgICAgICBsYWJlbDogJ+KElicsXHJcbiAgICAgICAgICAgIHdpZHRoOiAyMCxcclxuICAgICAgICAgICAgYXR0cjogeyBjbGFzczogJ3RleHQtZW5kJyB9LFxyXG4gICAgICAgICAgICBhdHRySGVhZGVyOiBudWxsXHJcbiAgICAgICAgfSwgb3B0aW9ucyk7XHJcblxyXG4gICAgICAgIHN1cGVyKHRhYmxlLCBvcHRpb25zKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQpNC+0YDQvNC40YDQvtCy0LDQvdC40LUg0LrQvtC90YLQtdC90YLQsFxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGNvbnRlbnRcclxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSByZWNvcmRcclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIHJlbmRlcihjb250ZW50LCByZWNvcmQpIHtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RhYmxlLl9yZWNvcmRzTnVtYmVyO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBDb2x1bW5zTnVtYmVyczsiLCJcclxuaW1wb3J0IGNvcmV1aVRhYmxlRWxlbWVudHMgZnJvbSBcIi4uL2NvcmV1aS50YWJsZS5lbGVtZW50c1wiO1xyXG5pbXBvcnQgY29yZXVpVGFibGVQcml2YXRlICBmcm9tIFwiLi4vY29yZXVpLnRhYmxlLnByaXZhdGVcIjtcclxuaW1wb3J0IGNvcmV1aVRhYmxlVHBsICAgICAgZnJvbSBcIi4uL2NvcmV1aS50YWJsZS50ZW1wbGF0ZXNcIjtcclxuaW1wb3J0IGNvcmV1aVRhYmxlVXRpbHMgICAgZnJvbSBcIi4uL2NvcmV1aS50YWJsZS51dGlsc1wiO1xyXG5pbXBvcnQgQ29sdW1uICAgICAgICAgICAgICBmcm9tIFwiLi4vYWJzdHJhY3QvQ29sdW1uXCI7XHJcblxyXG5jbGFzcyBDb2x1bW5zU2VsZWN0IGV4dGVuZHMgQ29sdW1uIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPXHJcbiAgICAgKiBAcGFyYW0ge2NvcmV1aVRhYmxlSW5zdGFuY2V9IHRhYmxlXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gICAgICAgICAgICAgIG9wdGlvbnNcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IodGFibGUsIG9wdGlvbnMpIHtcclxuXHJcbiAgICAgICAgbGV0IG9yaWdpbmFsT3B0aW9ucyA9IHtcclxuICAgICAgICAgICAgdHlwZTogJ3NlbGVjdCcsXHJcbiAgICAgICAgICAgIGZpZWxkOiBudWxsLFxyXG4gICAgICAgICAgICBsYWJlbDogJycsXHJcbiAgICAgICAgICAgIHNob3c6IHRydWUsXHJcbiAgICAgICAgICAgIHdpZHRoOiAzNSxcclxuICAgICAgICAgICAgYXR0cjogeyBjbGFzczogJ2NvcmV1aS10YWJsZV9fc2VsZWN0X2NvbnRhaW5lciB0ZXh0LWNlbnRlcicgfSxcclxuICAgICAgICAgICAgYXR0ckhlYWRlcjogeyBjbGFzczogJ3RleHQtY2VudGVyJyB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgaWYgKG9wdGlvbnMuaGFzT3duUHJvcGVydHkoJ2F0dHInKSkge1xyXG4gICAgICAgICAgICBvcHRpb25zLmF0dHIgPSBjb3JldWlUYWJsZVV0aWxzLm1lcmdlQXR0cihvcmlnaW5hbE9wdGlvbnMuYXR0ciwgb3B0aW9ucy5hdHRyKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG9wdGlvbnMuaGFzT3duUHJvcGVydHkoJ2F0dHJIZWFkZXInKSkge1xyXG4gICAgICAgICAgICBvcHRpb25zLmF0dHJIZWFkZXIgPSBjb3JldWlUYWJsZVV0aWxzLm1lcmdlQXR0cihvcmlnaW5hbE9wdGlvbnMuYXR0ckhlYWRlciwgb3B0aW9ucy5hdHRySGVhZGVyKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIG9wdGlvbnMgPSAkLmV4dGVuZCh0cnVlLCBvcmlnaW5hbE9wdGlvbnMsIG9wdGlvbnMpO1xyXG5cclxuICAgICAgICBzdXBlcih0YWJsZSwgb3B0aW9ucyk7XHJcblxyXG5cclxuICAgICAgICB0aGlzLl9vcHRpb25zLmxhYmVsID0gY29yZXVpVGFibGVUcGxbJ2NvbHVtbnMvc2VsZWN0X2xhYmVsLmh0bWwnXTtcclxuXHJcbiAgICAgICAgLy8g0J/QvtC60LDQtyDRgdGC0YDQvtC6XHJcbiAgICAgICAgdGFibGUub24oJ3JlY29yZHNfc2hvdycsIGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgICAgIGxldCBzZWxlY3RzICAgPSBjb3JldWlUYWJsZUVsZW1lbnRzLmdldFJvd3NTZWxlY3RzKHRhYmxlLmdldElkKCkpO1xyXG4gICAgICAgICAgICBsZXQgc2VsZWN0QWxsID0gY29yZXVpVGFibGVFbGVtZW50cy5nZXRSb3dzU2VsZWN0QWxsKHRhYmxlLmdldElkKCkpO1xyXG5cclxuICAgICAgICAgICAgLy8g0J7RgtC80LXQvdCwINC+0LHRgNCw0LHQvtGC0LrQuCDQvdCw0LbQsNGC0LjRjyDQsiBzZWxlY3Qg0LrQvtC70L7QvdC60LDRhVxyXG4gICAgICAgICAgICAkKHNlbGVjdHMpLmNsaWNrKGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgLy8g0JLRi9Cx0L7RgCDQstGB0LXRhSDRgdGC0YDQvtC6XHJcbiAgICAgICAgICAgIHNlbGVjdEFsbC5jbGljayhmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAgICAgICAgIGlmICgkKHRoaXMpLmlzKCc6Y2hlY2tlZCcpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGFibGUuc2VsZWN0QWxsKCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRhYmxlLnVuc2VsZWN0QWxsKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCk0L7RgNC80LjRgNC+0LLQsNC90LjQtSDQutC+0L3RgtC10L3RgtCwXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gY29udGVudFxyXG4gICAgICogQHBhcmFtIHtvYmplY3R9IHJlY29yZFxyXG4gICAgICogQHJldHVybnMge3N0cmluZ31cclxuICAgICAqL1xyXG4gICAgcmVuZGVyKGNvbnRlbnQsIHJlY29yZCkge1xyXG5cclxuICAgICAgICBsZXQgc2VsZWN0ID0gJChcclxuICAgICAgICAgICAgY29yZXVpVGFibGVVdGlscy5yZW5kZXIoY29yZXVpVGFibGVUcGxbJ2NvbHVtbnMvc2VsZWN0Lmh0bWwnXSwge1xyXG4gICAgICAgICAgICAgICAgaW5kZXg6IHJlY29yZC5pbmRleFxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIGxldCB0aGF0ID0gdGhpcztcclxuXHJcbiAgICAgICAgLy8g0JLRi9Cx0L7RgCDRgdGC0YDQvtC60LhcclxuICAgICAgICBzZWxlY3QuY2xpY2soZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBsZXQgdHIgPSBjb3JldWlUYWJsZUVsZW1lbnRzLmdldFRyQnlJbmRleCh0aGF0Ll90YWJsZS5nZXRJZCgpLCByZWNvcmQuaW5kZXgpO1xyXG5cclxuICAgICAgICAgICAgaWYgKCAhIHRyKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICgkKHRoaXMpLmlzKCc6Y2hlY2tlZCcpKSB7XHJcbiAgICAgICAgICAgICAgICAkKHRyKS5hZGRDbGFzcygndGFibGUtcHJpbWFyeScpO1xyXG5cclxuICAgICAgICAgICAgICAgIGNvcmV1aVRhYmxlUHJpdmF0ZS5fdHJpZ2dlcih0aGF0Ll90YWJsZSwgJ3JlY29yZF9zZWxlY3QnLCBbIHJlY29yZCBdKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICQodHIpLnJlbW92ZUNsYXNzKCd0YWJsZS1wcmltYXJ5Jyk7XHJcblxyXG4gICAgICAgICAgICAgICAgY29yZXVpVGFibGVQcml2YXRlLl90cmlnZ2VyKHRoYXQuX3RhYmxlLCAncmVjb3JkX3Vuc2VsZWN0JywgWyByZWNvcmQgXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHNlbGVjdDtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgQ29sdW1uc1NlbGVjdDsiLCJcclxuaW1wb3J0IGNvcmV1aVRhYmxlRWxlbWVudHMgZnJvbSBcIi4uL2NvcmV1aS50YWJsZS5lbGVtZW50c1wiO1xyXG5pbXBvcnQgY29yZXVpVGFibGVUcGwgICAgICBmcm9tIFwiLi4vY29yZXVpLnRhYmxlLnRlbXBsYXRlc1wiO1xyXG5pbXBvcnQgY29yZXVpVGFibGVVdGlscyAgICBmcm9tIFwiLi4vY29yZXVpLnRhYmxlLnV0aWxzXCI7XHJcbmltcG9ydCBDb2x1bW4gICAgICAgICAgICAgIGZyb20gXCIuLi9hYnN0cmFjdC9Db2x1bW5cIjtcclxuXHJcbmNsYXNzIENvbHVtbnNTd2l0Y2ggZXh0ZW5kcyBDb2x1bW4ge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y9cclxuICAgICAqIEBwYXJhbSB7Y29yZXVpVGFibGVJbnN0YW5jZX0gdGFibGVcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSAgICAgICAgICAgICAgb3B0aW9uc1xyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3Rvcih0YWJsZSwgb3B0aW9ucykge1xyXG5cclxuICAgICAgICBvcHRpb25zID0gJC5leHRlbmQodHJ1ZSwge1xyXG4gICAgICAgICAgICB0eXBlOiAnc3dpdGNoJyxcclxuICAgICAgICAgICAgbGFiZWw6ICcnLFxyXG4gICAgICAgICAgICBmaWVsZDogJycsXHJcbiAgICAgICAgICAgIHNob3c6IHRydWUsXHJcbiAgICAgICAgICAgIGRpc2FibGVkOiBmYWxzZSxcclxuICAgICAgICAgICAgd2lkdGg6IDUsXHJcbiAgICAgICAgICAgIHZhbHVlWTogJzEnLFxyXG4gICAgICAgICAgICB2YWx1ZU46ICcwJyxcclxuICAgICAgICAgICAgYXR0cjogeyBjbGFzczogJ2NvcmV1aS10YWJsZV9fc3dpdGNoX2NvbnRhaW5lcicgfSxcclxuICAgICAgICAgICAgYXR0ckhlYWRlcjogeyB9LFxyXG4gICAgICAgICAgICBvbkNoYW5nZTogbnVsbFxyXG4gICAgICAgIH0sIG9wdGlvbnMpO1xyXG5cclxuICAgICAgICBzdXBlcih0YWJsZSwgb3B0aW9ucyk7XHJcblxyXG5cclxuICAgICAgICAvLyDQn9C+0LrQsNC3INGB0YLRgNC+0LpcclxuICAgICAgICB0YWJsZS5vbigncmVjb3Jkc19zaG93JywgZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAgICAgbGV0IGNvbnRhaW5lcnMgPSBjb3JldWlUYWJsZUVsZW1lbnRzLmdldFJvd3NTd2l0Y2hlcyh0YWJsZS5nZXRJZCgpKTtcclxuXHJcbiAgICAgICAgICAgIC8vINCe0YLQvNC10L3QsCDQvtCx0YDQsNCx0L7RgtC60Lgg0L3QsNC20LDRgtC40Y8g0LIgc3dpdGNoINC60L7Qu9C+0L3QutCw0YVcclxuICAgICAgICAgICAgY29udGFpbmVycy5jbGljayhmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQpNC+0YDQvNC40YDQvtCy0LDQvdC40LUg0LrQvtC90YLQtdC90YLQsFxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGNvbnRlbnRcclxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSByZWNvcmRcclxuICAgICAqIEByZXR1cm5zIHtqUXVlcnl9XHJcbiAgICAgKi9cclxuICAgIHJlbmRlcihjb250ZW50LCByZWNvcmQpIHtcclxuXHJcbiAgICAgICAgbGV0IGlzQ2hlY2tlZCA9IHJlY29yZC5kYXRhLmhhc093blByb3BlcnR5KHRoaXMuX29wdGlvbnMuZmllbGQpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlY29yZC5kYXRhW3RoaXMuX29wdGlvbnMuZmllbGRdID09PSB0aGlzLl9vcHRpb25zLnZhbHVlWTtcclxuXHJcbiAgICAgICAgbGV0IGZvcm1Td2l0Y2ggPSAkKGNvcmV1aVRhYmxlVXRpbHMucmVuZGVyKGNvcmV1aVRhYmxlVHBsWydjb2x1bW5zL3N3aXRjaC5odG1sJ10sIHtcclxuICAgICAgICAgICAgaW5kZXg6IHJlY29yZC5pbmRleCxcclxuICAgICAgICAgICAgZmllbGQ6IHRoaXMuX29wdGlvbnMuZmllbGQsXHJcbiAgICAgICAgICAgIGRpc2FibGVkOiB0aGlzLl9vcHRpb25zLmRpc2FibGVkLFxyXG4gICAgICAgICAgICBjaGVja2VkOiBpc0NoZWNrZWRcclxuICAgICAgICB9KSk7XHJcblxyXG4gICAgICAgIC8vINCh0L7QsdGL0YLQuNGPINC90LDQttCw0YLQuNGPINC90LAg0L/QtdGA0LXQutC70Y7Rh9Cw0YLQtdC70YxcclxuICAgICAgICBsZXQgdGhhdCAgPSB0aGlzO1xyXG4gICAgICAgIGxldCB0YWJsZSA9IHRoaXMuX3RhYmxlO1xyXG5cclxuICAgICAgICAkKCcuY29yZXVpLXRhYmxlX19zd2l0Y2gnLCBmb3JtU3dpdGNoKS5jaGFuZ2UoZnVuY3Rpb24gKGV2ZW50KSB7XHJcblxyXG4gICAgICAgICAgICBsZXQgaW5wdXQgPSB0aGlzO1xyXG5cclxuICAgICAgICAgICAgdGFibGUuX3JlY29yZHMubWFwKGZ1bmN0aW9uIChyZWNvcmRUYWJsZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHJlY29yZC5pbmRleCA9PT0gcmVjb3JkVGFibGUuaW5kZXgpIHtcclxuICAgICAgICAgICAgICAgICAgICByZWNvcmRUYWJsZS5kYXRhW3RoYXQuX29wdGlvbnMuZmllbGRdID0gaW5wdXQuY2hlY2tlZCA/IHRoYXQuX29wdGlvbnMudmFsdWVZIDogdGhhdC5fb3B0aW9ucy52YWx1ZU47XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcblxyXG4gICAgICAgICAgICBpZiAodGhhdC5fb3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnb25DaGFuZ2UnKSAmJlxyXG4gICAgICAgICAgICAgICAgKHR5cGVvZiB0aGF0Ll9vcHRpb25zLm9uQ2hhbmdlID09PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiB0aGF0Ll9vcHRpb25zLm9uQ2hhbmdlID09PSAnc3RyaW5nJylcclxuICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHRoYXQuX29wdGlvbnMub25DaGFuZ2UgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGF0Ll9vcHRpb25zLm9uQ2hhbmdlKHJlY29yZCwgaW5wdXQpO1xyXG5cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGZ1bmMgPSBuZXcgRnVuY3Rpb24oJ3JlY29yZCcsICdpbnB1dCcsIHRoYXQuX29wdGlvbnMub25DaGFuZ2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIGZ1bmMocmVjb3JkLCBpbnB1dCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiBmb3JtU3dpdGNoO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBDb2x1bW5zU3dpdGNoOyIsIlxyXG5pbXBvcnQgY29yZXVpVGFibGVVdGlscyBmcm9tIFwiLi4vY29yZXVpLnRhYmxlLnV0aWxzXCI7XHJcbmltcG9ydCBDb2x1bW4gICAgICAgICAgIGZyb20gXCIuLi9hYnN0cmFjdC9Db2x1bW5cIjtcclxuXHJcblxyXG5jbGFzcyBDb2x1bW5zVGV4dCBleHRlbmRzIENvbHVtbiB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQmNC90LjRhtC40LDQu9C40LfQsNGG0LjRj1xyXG4gICAgICogQHBhcmFtIHtjb3JldWlUYWJsZUluc3RhbmNlfSB0YWJsZVxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9ICAgICAgICAgICAgICBvcHRpb25zXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKHRhYmxlLCBvcHRpb25zKSB7XHJcblxyXG4gICAgICAgIG9wdGlvbnMgPSAkLmV4dGVuZCh0cnVlLCB7XHJcbiAgICAgICAgICAgIHR5cGU6ICd0ZXh0JyxcclxuICAgICAgICAgICAgZmllbGQ6IG51bGwsXHJcbiAgICAgICAgICAgIGxhYmVsOiBudWxsLFxyXG4gICAgICAgICAgICBzaG93OiB0cnVlLFxyXG4gICAgICAgICAgICBzaG93TGFiZWw6IHRydWUsXHJcbiAgICAgICAgICAgIHdpZHRoOiBudWxsLFxyXG4gICAgICAgICAgICBtaW5XaWR0aDogbnVsbCxcclxuICAgICAgICAgICAgbWF4V2lkdGg6IG51bGwsXHJcbiAgICAgICAgICAgIGF0dHI6IG51bGwsXHJcbiAgICAgICAgICAgIG5vV3JhcDogbnVsbCxcclxuICAgICAgICAgICAgbm9XcmFwVG9nZ2xlOiBudWxsLFxyXG4gICAgICAgICAgICBhdHRySGVhZGVyOiBudWxsLFxyXG4gICAgICAgICAgICByZW5kZXI6IG51bGxcclxuICAgICAgICB9LCBvcHRpb25zKTtcclxuXHJcbiAgICAgICAgc3VwZXIodGFibGUsIG9wdGlvbnMpO1xyXG5cclxuICAgICAgICBsZXQgdGFibGVPcHRpb25zID0gdGhpcy5fdGFibGUuZ2V0T3B0aW9ucygpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy5ub1dyYXAgfHxcclxuICAgICAgICAgICAgKHRoaXMuX29wdGlvbnMubm9XcmFwID09PSBudWxsICYmIHRhYmxlT3B0aW9ucy5ub1dyYXApXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIGlmICggISB0aGlzLl9vcHRpb25zLmF0dHIpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX29wdGlvbnMuYXR0ciA9IHsgY2xhc3MgOiAnY29yZXVpX3RhYmxlX19uby13cmFwJyB9O1xyXG5cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX29wdGlvbnMuYXR0ciA9IGNvcmV1aVRhYmxlVXRpbHMubWVyZ2VBdHRyKHRoaXMuX29wdGlvbnMuYXR0ciwge1xyXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzOiAnY29yZXVpX3RhYmxlX19uby13cmFwJ1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuX29wdGlvbnMubm9XcmFwID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9vcHRpb25zLm5vV3JhcFRvZ2dsZSB8fFxyXG4gICAgICAgICAgICAgICAgKHRoaXMuX29wdGlvbnMubm9XcmFwVG9nZ2xlID09PSBudWxsICYmIHRhYmxlT3B0aW9ucy5ub1dyYXBUb2dnbGUpXHJcbiAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy5ub1dyYXBUb2dnbGUgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCk0L7RgNC80LjRgNC+0LLQsNC90LjQtSDQutC+0L3RgtC10L3RgtCwXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gY29udGVudFxyXG4gICAgICogQHBhcmFtIHtvYmplY3R9IHJlY29yZFxyXG4gICAgICogQHJldHVybnMge3N0cmluZ31cclxuICAgICAqL1xyXG4gICAgcmVuZGVyKGNvbnRlbnQsIHJlY29yZCkge1xyXG5cclxuICAgICAgICBpZiAoWydzdHJpbmcnLCAnYmlnaW50JywgJ3N5bWJvbCcsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiBjb250ZW50KSA8IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29udGVudCA9IFN0cmluZyhjb250ZW50KVxyXG4gICAgICAgICAgICAucmVwbGFjZSgvPC9nLCAnJmx0OycpXHJcbiAgICAgICAgICAgIC5yZXBsYWNlKC8+L2csICcmZ3Q7Jyk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLm5vV3JhcCkge1xyXG4gICAgICAgICAgICBjb250ZW50ID0gJzxkaXY+JyArIGNvbnRlbnQgKyAnPC9kaXY+J1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMubm9XcmFwVG9nZ2xlKSB7XHJcbiAgICAgICAgICAgICAgICBjb250ZW50ICs9ICc8aSBjbGFzcz1cImJpIGJpLWNhcmV0LWRvd24tZmlsbCB0b2dnbGVcIj48L2k+J1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gY29udGVudDtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IENvbHVtbnNUZXh0OyIsIlxyXG5pbXBvcnQgY29yZXVpVGFibGVVdGlscyBmcm9tIFwiLi4vY29yZXVpLnRhYmxlLnV0aWxzXCI7XHJcbmltcG9ydCBjb3JldWlUYWJsZVRwbCAgIGZyb20gXCIuLi9jb3JldWkudGFibGUudGVtcGxhdGVzXCI7XHJcbmltcG9ydCBDb2x1bW4gICAgICAgICAgIGZyb20gXCIuLi9hYnN0cmFjdC9Db2x1bW5cIjtcclxuXHJcblxyXG5jbGFzcyBDb2x1bW5zQnV0dG9uIGV4dGVuZHMgQ29sdW1uIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPXHJcbiAgICAgKiBAcGFyYW0ge2NvcmV1aVRhYmxlSW5zdGFuY2V9IHRhYmxlXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gICAgICAgICAgICAgIG9wdGlvbnNcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IodGFibGUsIG9wdGlvbnMpIHtcclxuXHJcbiAgICAgICAgb3B0aW9ucyA9ICQuZXh0ZW5kKHRydWUsIHtcclxuICAgICAgICAgICAgdHlwZTogJ2J1dHRvbicsXHJcbiAgICAgICAgICAgIGZpZWxkOiBudWxsLFxyXG4gICAgICAgICAgICBsYWJlbDogbnVsbCxcclxuICAgICAgICAgICAgc2hvdzogdHJ1ZSxcclxuICAgICAgICAgICAgd2lkdGg6IG51bGwsXHJcbiAgICAgICAgICAgIG1pbldpZHRoOiBudWxsLFxyXG4gICAgICAgICAgICBtYXhXaWR0aDogbnVsbCxcclxuICAgICAgICB9LCBvcHRpb25zKTtcclxuXHJcbiAgICAgICAgc3VwZXIodGFibGUsIG9wdGlvbnMpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCk0L7RgNC80LjRgNC+0LLQsNC90LjQtSDQutC+0L3RgtC10L3RgtCwXHJcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gY29udGVudFxyXG4gICAgICogQHBhcmFtIHtvYmplY3R9IHJlY29yZFxyXG4gICAgICogQHJldHVybnMge3N0cmluZ31cclxuICAgICAqL1xyXG4gICAgcmVuZGVyKGNvbnRlbnQsIHJlY29yZCkge1xyXG5cclxuICAgICAgICBpZiAoICEgY29yZXVpVGFibGVVdGlscy5pc09iamVjdChjb250ZW50KSkge1xyXG4gICAgICAgICAgICByZXR1cm4gJyc7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgaWYgKCAhIGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QoY29udGVudC5hdHRyKSkge1xyXG4gICAgICAgICAgICBjb250ZW50LmF0dHIgPSB7fVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCAhIGNvbnRlbnQuYXR0ci5oYXNPd25Qcm9wZXJ0eSgnY2xhc3MnKSkge1xyXG4gICAgICAgICAgICBjb250ZW50LmF0dHIuY2xhc3MgPSAnYnRuIGJ0bi1vdXRsaW5lLXNlY29uZGFyeSdcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChjb250ZW50LmF0dHIuaGFzT3duUHJvcGVydHkoJ3R5cGUnKSkge1xyXG4gICAgICAgICAgICBkZWxldGUgY29udGVudC5hdHRyLnR5cGU7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgbGV0IGF0dHJpYnV0ZXMgPSBbXTtcclxuXHJcbiAgICAgICAgJC5lYWNoKGNvbnRlbnQuYXR0ciwgZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XHJcbiAgICAgICAgICAgIGlmIChbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiB2YWx1ZSkgPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgYXR0cmlidXRlcy5wdXNoKG5hbWUgKyAnPVwiJyArIHZhbHVlICsgJ1wiJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgbGV0IGJ0biA9ICQoXHJcbiAgICAgICAgICAgIGNvcmV1aVRhYmxlVXRpbHMucmVuZGVyKGNvcmV1aVRhYmxlVHBsWydjb2x1bW5zL2J1dHRvbi5odG1sJ10sIHtcclxuICAgICAgICAgICAgICAgIGNvbnRlbnQ6IGNvbnRlbnQuY29udGVudCxcclxuICAgICAgICAgICAgICAgIGF0dHI6IGF0dHJpYnV0ZXMubGVuZ3RoID4gMCA/ICgnICcgKyBhdHRyaWJ1dGVzLmpvaW4oJyAnKSkgOiAnJyxcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICApO1xyXG5cclxuXHJcbiAgICAgICAgaWYgKGNvbnRlbnQuaGFzT3duUHJvcGVydHkoJ29uQ2xpY2snKSkge1xyXG4gICAgICAgICAgICBsZXQgdGhhdCA9IHRoaXM7XHJcblxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvbnRlbnQub25DbGljayA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICAgICAgYnRuLmNsaWNrKGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50LmNhbmNlbEJ1YmJsZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY29udGVudC5vbkNsaWNrKHJlY29yZCwgdGhhdC5fdGFibGUpXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGNvbnRlbnQub25DbGljayA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgICAgIGxldCBmdW5jID0gbmV3IEZ1bmN0aW9uKCdyZWNvcmQnLCAndGFibGUnLCBjb250ZW50Lm9uQ2xpY2spO1xyXG5cclxuICAgICAgICAgICAgICAgIGJ0bi5jbGljayhmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICBldmVudC5jYW5jZWxCdWJibGUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGZ1bmMocmVjb3JkLCB0aGF0Ll90YWJsZSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBidG4uY2xpY2soZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQuY2FuY2VsQnViYmxlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgYnRuLmNsaWNrKGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICAgICAgZXZlbnQuY2FuY2VsQnViYmxlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGJ0bjtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgQ29sdW1uc0J1dHRvbjsiLCJcclxuaW1wb3J0IGNvcmV1aVRhYmxlVXRpbHMgZnJvbSBcIi4uL2NvcmV1aS50YWJsZS51dGlsc1wiO1xyXG5pbXBvcnQgY29yZXVpVGFibGVUcGwgICBmcm9tIFwiLi4vY29yZXVpLnRhYmxlLnRlbXBsYXRlc1wiO1xyXG5pbXBvcnQgQ29sdW1uICAgICAgICAgICBmcm9tIFwiLi4vYWJzdHJhY3QvQ29sdW1uXCI7XHJcblxyXG5jbGFzcyBDb2x1bW5zTGluayBleHRlbmRzIENvbHVtbiB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQmNC90LjRhtC40LDQu9C40LfQsNGG0LjRj1xyXG4gICAgICogQHBhcmFtIHtjb3JldWlUYWJsZUluc3RhbmNlfSB0YWJsZVxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9ICAgICAgICAgICAgICBvcHRpb25zXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKHRhYmxlLCBvcHRpb25zKSB7XHJcblxyXG4gICAgICAgIG9wdGlvbnMgPSAkLmV4dGVuZCh0cnVlLCB7XHJcbiAgICAgICAgICAgIHR5cGU6ICdsaW5rJyxcclxuICAgICAgICAgICAgZmllbGQ6IG51bGwsXHJcbiAgICAgICAgICAgIGxhYmVsOiBudWxsLFxyXG4gICAgICAgICAgICBzaG93OiB0cnVlLFxyXG4gICAgICAgICAgICB3aWR0aDogbnVsbCxcclxuICAgICAgICAgICAgbWluV2lkdGg6IG51bGwsXHJcbiAgICAgICAgICAgIG1heFdpZHRoOiBudWxsLFxyXG4gICAgICAgIH0sIG9wdGlvbnMpO1xyXG5cclxuICAgICAgICBzdXBlcih0YWJsZSwgb3B0aW9ucyk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0JrQvtC90LLQtdGA0YLQuNGA0L7QstCw0L3QuNC1INC30L3QsNGH0LXQvdC40Y8g0LrQvtC70L7QvdC60Lgg0LIg0YLQtdC60YHRglxyXG4gICAgICogQHBhcmFtIHsqfSBjb2x1bW5WYWx1ZVxyXG4gICAgICogQHJldHVybnMge3N0cmluZ31cclxuICAgICAqL1xyXG4gICAgY29udmVydFRvU3RyaW5nKGNvbHVtblZhbHVlKSB7XHJcblxyXG4gICAgICAgIGlmIChbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiBjb2x1bW5WYWx1ZSkgPj0gMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gU3RyaW5nKGNvbHVtblZhbHVlKTtcclxuXHJcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgY29sdW1uVmFsdWUgPT09ICdvYmplY3QnICYmXHJcbiAgICAgICAgICAgIGNvbHVtblZhbHVlLmhhc093blByb3BlcnR5KCdjb250ZW50JykgJiZcclxuICAgICAgICAgICAgdHlwZW9mIGNvbHVtblZhbHVlLmNvbnRlbnQgPT09ICdzdHJpbmcnXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBjb2x1bW5WYWx1ZS5jb250ZW50O1xyXG5cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gJyc7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCk0L7RgNC80LjRgNC+0LLQsNC90LjQtSDQutC+0L3RgtC10L3RgtCwXHJcbiAgICAgKiBAcGFyYW0ge29iamVjdHxzdHJpbmd9IGNvbnRlbnRcclxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSAgICAgICAgcmVjb3JkXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxyXG4gICAgICovXHJcbiAgICByZW5kZXIoY29udGVudCwgcmVjb3JkKSB7XHJcblxyXG4gICAgICAgIGlmIChcclxuICAgICAgICAgICAgKHR5cGVvZiBjb250ZW50ICE9PSAnc3RyaW5nJyB8fCAhIGNvbnRlbnQpXHJcbiAgICAgICAgICAgICYmXHJcbiAgICAgICAgICAgICggISBjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KGNvbnRlbnQpIHx8XHJcbiAgICAgICAgICAgICAgISBjb250ZW50Lmhhc093blByb3BlcnR5KCd1cmwnKSB8fFxyXG4gICAgICAgICAgICAgIHR5cGVvZiBjb250ZW50LnVybCAhPT0gJ3N0cmluZycgfHxcclxuICAgICAgICAgICAgICAhIGNvbnRlbnQudXJsXHJcbiAgICAgICAgICAgIClcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IGxpbmtDb250ZW50ID0gJyc7XHJcbiAgICAgICAgbGV0IGF0dHIgICAgICAgID0ge307XHJcblxyXG4gICAgICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgYXR0ci5ocmVmICAgPSBjb250ZW50O1xyXG4gICAgICAgICAgICBsaW5rQ29udGVudCA9IGNvbnRlbnQ7XHJcblxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmIChjb250ZW50Lmhhc093blByb3BlcnR5KCdhdHRyJykgJiZcclxuICAgICAgICAgICAgICAgIGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QoY29udGVudC5hdHRyKVxyXG4gICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgIGF0dHIgPSBjb250ZW50LmF0dHI7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChhdHRyLmhhc093blByb3BlcnR5KCdocmVmJykpIHtcclxuICAgICAgICAgICAgICAgIGRlbGV0ZSBhdHRyLmhyZWY7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGF0dHIuaHJlZiA9IGNvbnRlbnQudXJsO1xyXG5cclxuXHJcbiAgICAgICAgICAgIGlmIChjb250ZW50Lmhhc093blByb3BlcnR5KCdjb250ZW50JykgJiZcclxuICAgICAgICAgICAgICAgIHR5cGVvZiBjb250ZW50LmNvbnRlbnQgPT09ICdzdHJpbmcnICYmXHJcbiAgICAgICAgICAgICAgICBjb250ZW50LmNvbnRlbnRcclxuICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICBsaW5rQ29udGVudCA9IGNvbnRlbnQuY29udGVudDtcclxuXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBsaW5rQ29udGVudCA9IGNvbnRlbnQudXJsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgbGV0IGF0dHJpYnV0ZXMgPSBbXTtcclxuXHJcbiAgICAgICAgJC5lYWNoKGF0dHIsIGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xyXG4gICAgICAgICAgICBpZiAoWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2YgdmFsdWUpID49IDApIHtcclxuICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXMucHVzaChuYW1lICsgJz1cIicgKyB2YWx1ZSArICdcIicpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGxldCBsaW5rID0gJChcclxuICAgICAgICAgICAgY29yZXVpVGFibGVVdGlscy5yZW5kZXIoY29yZXVpVGFibGVUcGxbJ2NvbHVtbnMvbGluay5odG1sJ10sIHtcclxuICAgICAgICAgICAgICAgIGNvbnRlbnQ6IGxpbmtDb250ZW50LFxyXG4gICAgICAgICAgICAgICAgYXR0cjogYXR0cmlidXRlcy5sZW5ndGggPiAwID8gKCcgJyArIGF0dHJpYnV0ZXMuam9pbignICcpKSA6ICcnLFxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICk7XHJcblxyXG5cclxuICAgICAgICBsaW5rLmNsaWNrKGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICBldmVudC5jYW5jZWxCdWJibGUgPSB0cnVlO1xyXG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gbGluaztcclxuICAgIH1cclxufVxyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IENvbHVtbnNMaW5rOyIsIlxyXG5pbXBvcnQgY29yZXVpVGFibGVVdGlscyBmcm9tIFwiLi4vY29yZXVpLnRhYmxlLnV0aWxzXCI7XHJcbmltcG9ydCBjb3JldWlUYWJsZVRwbCAgIGZyb20gXCIuLi9jb3JldWkudGFibGUudGVtcGxhdGVzXCI7XHJcbmltcG9ydCBDb3JldWlUYWJsZVV0aWxzIGZyb20gXCIuLi9jb3JldWkudGFibGUudXRpbHNcIjtcclxuaW1wb3J0IENvbHVtbiBmcm9tIFwiLi4vYWJzdHJhY3QvQ29sdW1uXCI7XHJcblxyXG5cclxuY2xhc3MgQ29sdW1uc01lbnUgZXh0ZW5kcyBDb2x1bW4ge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y9cclxuICAgICAqIEBwYXJhbSB7Y29yZXVpVGFibGVJbnN0YW5jZX0gdGFibGVcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSAgICAgICAgICAgICAgb3B0aW9uc1xyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3Rvcih0YWJsZSwgb3B0aW9ucykge1xyXG5cclxuICAgICAgICBvcHRpb25zID0gJC5leHRlbmQodHJ1ZSwge1xyXG4gICAgICAgICAgICB0eXBlOiAnbWVudScsXHJcbiAgICAgICAgICAgIGZpZWxkOiBudWxsLFxyXG4gICAgICAgICAgICBsYWJlbDogbnVsbCxcclxuICAgICAgICAgICAgc2hvdzogdHJ1ZSxcclxuICAgICAgICAgICAgd2lkdGg6IG51bGwsXHJcbiAgICAgICAgICAgIG1pbldpZHRoOiBudWxsLFxyXG4gICAgICAgICAgICBtYXhXaWR0aDogbnVsbCxcclxuICAgICAgICB9LCBvcHRpb25zKTtcclxuXHJcbiAgICAgICAgc3VwZXIodGFibGUsIG9wdGlvbnMpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCk0L7RgNC80LjRgNC+0LLQsNC90LjQtSDQutC+0L3RgtC10L3RgtCwXHJcbiAgICAgKiBAcGFyYW0ge29iamVjdHxzdHJpbmd9IGNvbnRlbnRcclxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSAgICAgICAgcmVjb3JkXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxyXG4gICAgICovXHJcbiAgICByZW5kZXIoY29udGVudCwgcmVjb3JkKSB7XHJcblxyXG4gICAgICAgIGlmICggISBjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KGNvbnRlbnQpIHx8XHJcbiAgICAgICAgICAgICAhIGNvbnRlbnQuaGFzT3duUHJvcGVydHkoJ2l0ZW1zJykgfHxcclxuICAgICAgICAgICAgICEgQXJyYXkuaXNBcnJheShjb250ZW50Lml0ZW1zKSB8fFxyXG4gICAgICAgICAgICBjb250ZW50Lml0ZW1zLmxlbmd0aCA9PT0gMFxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICByZXR1cm4gJyc7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgaXRlbXMgPSBbXTtcclxuICAgICAgICBsZXQgYXR0ciAgPSB7fTtcclxuXHJcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoY29udGVudC5pdGVtcykpIHtcclxuICAgICAgICAgICAgJC5lYWNoKGNvbnRlbnQuaXRlbXMsIGZ1bmN0aW9uIChrZXksIGl0ZW0pIHtcclxuICAgICAgICAgICAgICAgIGlmIChDb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KGl0ZW0pICYmIHR5cGVvZiBpdGVtLnR5cGUgPT09ICdzdHJpbmcnKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpdGVtLnR5cGUgPT09ICdsaW5rJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbS5oYXNPd25Qcm9wZXJ0eSgndXJsJykgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0uaGFzT3duUHJvcGVydHkoJ2NvbnRlbnQnKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGl0ZW0udXJsID09PSAnc3RyaW5nJyAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGl0ZW0uY29udGVudCA9PT0gJ3N0cmluZydcclxuICAgICAgICAgICAgICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgbGlua0F0dHIgPSB7fTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbS5oYXNPd25Qcm9wZXJ0eSgnYXR0cicpIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29yZXVpVGFibGVVdGlscy5pc09iamVjdChpdGVtLmF0dHIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5rQXR0ciA9IGl0ZW0uYXR0cjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsaW5rQXR0ci5oYXNPd25Qcm9wZXJ0eSgnaHJlZicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGxpbmtBdHRyLmhyZWY7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCAhIGxpbmtBdHRyLmhhc093blByb3BlcnR5KCdjbGFzcycpIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGxpbmtBdHRyLmNsYXNzICE9PSAnc3RyaW5nJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGlua0F0dHIuY2xhc3MgPSAnZHJvcGRvd24taXRlbSc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmtBdHRyLmNsYXNzICs9ICcgZHJvcGRvd24taXRlbSc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGxpbmtBdHRyaWJ1dGVzID0gW107XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJC5lYWNoKGxpbmtBdHRyLCBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2YgdmFsdWUpID49IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGlua0F0dHJpYnV0ZXMucHVzaChuYW1lICsgJz1cIicgKyB2YWx1ZSArICdcIicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdsaW5rJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6IGl0ZW0udXJsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IGl0ZW0uY29udGVudCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyOiBsaW5rQXR0cmlidXRlcyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaXRlbS50eXBlID09PSAnYnV0dG9uJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbS5oYXNPd25Qcm9wZXJ0eSgnY29udGVudCcpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtLmhhc093blByb3BlcnR5KCdvbkNsaWNrJykgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVvZiBpdGVtLmNvbnRlbnQgPT09ICdzdHJpbmcnICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbJ3N0cmluZycsICdmdW5jdGlvbiddLmluZGV4T2YodHlwZW9mIGl0ZW0ub25DbGljaykgPj0gMFxyXG4gICAgICAgICAgICAgICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBidG5BdHRyID0ge307XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0uaGFzT3duUHJvcGVydHkoJ2F0dHInKSB8fFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QoaXRlbS5hdHRyKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnRuQXR0ciA9IGl0ZW0uYXR0cjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYnRuQXR0ci5oYXNPd25Qcm9wZXJ0eSgndHlwZScpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGJ0bkF0dHIudHlwZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChidG5BdHRyLmhhc093blByb3BlcnR5KCdpZCcpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGJ0bkF0dHJbJ2lkJ107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCAhIGJ0bkF0dHIuaGFzT3duUHJvcGVydHkoJ2NsYXNzJykgfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlb2YgYnRuQXR0ci5jbGFzcyAhPT0gJ3N0cmluZydcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ0bkF0dHIuY2xhc3MgPSAnZHJvcGRvd24taXRlbSc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ0bkF0dHIuY2xhc3MgKz0gJyBkcm9wZG93bi1pdGVtJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgYnRuQXR0cmlidXRlcyA9IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQuZWFjaChidG5BdHRyLCBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2YgdmFsdWUpID49IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnRuQXR0cmlidXRlcy5wdXNoKG5hbWUgKyAnPVwiJyArIHZhbHVlICsgJ1wiJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2J1dHRvbicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IGNvcmV1aVRhYmxlVXRpbHMuaGFzaENvZGUoKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBpdGVtLmNvbnRlbnQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljazogaXRlbS5vbkNsaWNrLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHI6IGJ0bkF0dHJpYnV0ZXMubGVuZ3RoID4gMCA/ICgnICcgKyBidG5BdHRyaWJ1dGVzLmpvaW4oJyAnKSkgOiAnJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGl0ZW0udHlwZSA9PT0gJ2RpdmlkZXInKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2RpdmlkZXInLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpdGVtLnR5cGUgPT09ICdoZWFkZXInKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpdGVtLmhhc093blByb3BlcnR5KCdjb250ZW50JykgJiYgdHlwZW9mIGl0ZW0uY29udGVudCA9PT0gJ3N0cmluZydcclxuICAgICAgICAgICAgICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtcy5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnaGVhZGVyJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBpdGVtLmNvbnRlbnQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoY29udGVudC5oYXNPd25Qcm9wZXJ0eSgnYXR0cicpIHx8XHJcbiAgICAgICAgICAgIGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QoY29udGVudC5hdHRyKVxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICBhdHRyID0gY29udGVudC5hdHRyO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCAhIGF0dHIuaGFzT3duUHJvcGVydHkoJ2NsYXNzJykgfHxcclxuICAgICAgICAgICAgWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2YgYXR0ci5jbGFzcykgPCAwXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIGF0dHIuY2xhc3MgPSAnYnRuIHJvdW5kZWQtMSc7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoYXR0ci5oYXNPd25Qcm9wZXJ0eSgndHlwZScpKSB7XHJcbiAgICAgICAgICAgIGRlbGV0ZSBhdHRyLnR5cGU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoYXR0ci5oYXNPd25Qcm9wZXJ0eSgnZGF0YS1icy10b2dnbGUnKSkge1xyXG4gICAgICAgICAgICBkZWxldGUgYXR0clsnZGF0YS1icy10b2dnbGUnXTtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICBsZXQgYXR0cmlidXRlcyA9IFtdO1xyXG5cclxuICAgICAgICAkLmVhY2goYXR0ciwgZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XHJcbiAgICAgICAgICAgIGlmIChbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiB2YWx1ZSkgPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgYXR0cmlidXRlcy5wdXNoKG5hbWUgKyAnPVwiJyArIHZhbHVlICsgJ1wiJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcblxyXG4gICAgICAgIGxldCBtZW51Q29udGVudCA9IGNvbnRlbnQuaGFzT3duUHJvcGVydHkoJ2NvbnRlbnQnKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVvZiBjb250ZW50LmNvbnRlbnQgPT09ICdzdHJpbmcnICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudC5jb250ZW50XHJcbiAgICAgICAgICAgID8gY29udGVudC5jb250ZW50XHJcbiAgICAgICAgICAgIDogJzxpIGNsYXNzPVwiYmkgYmktdGhyZWUtZG90cy12ZXJ0aWNhbFwiPjwvaT4nO1xyXG5cclxuICAgICAgICBsZXQgcG9zaXRpb24gPSBjb250ZW50Lmhhc093blByb3BlcnR5KCdwb3NpdGlvbicpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGNvbnRlbnQucG9zaXRpb24gPT09ICdzdHJpbmcnICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgY29udGVudC5wb3NpdGlvblxyXG4gICAgICAgICAgICA/IGNvbnRlbnQucG9zaXRpb25cclxuICAgICAgICAgICAgOiAnZW5kJztcclxuXHJcblxyXG4gICAgICAgIGxldCBtZW51ID0gJChcclxuICAgICAgICAgICAgY29yZXVpVGFibGVVdGlscy5yZW5kZXIoY29yZXVpVGFibGVUcGxbJ2NvbHVtbnMvbWVudS5odG1sJ10sIHtcclxuICAgICAgICAgICAgICAgIGNvbnRlbnQ6IG1lbnVDb250ZW50LFxyXG4gICAgICAgICAgICAgICAgcG9zaXRpb246IHBvc2l0aW9uLFxyXG4gICAgICAgICAgICAgICAgYXR0cjogYXR0cmlidXRlcy5sZW5ndGggPiAwID8gKCcgJyArIGF0dHJpYnV0ZXMuam9pbignICcpKSA6ICcnLFxyXG4gICAgICAgICAgICAgICAgaXRlbXM6IGl0ZW1zLFxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIG1lbnUuY2xpY2soZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgIGV2ZW50LmNhbmNlbEJ1YmJsZSA9IHRydWU7XHJcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG5cclxuICAgICAgICBsZXQgZHJvcGRvd25NZW51ID0gbnVsbDtcclxuXHJcbiAgICAgICAgJChtZW51KS5vbignc2hvdy5icy5kcm9wZG93bicsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIGRyb3Bkb3duTWVudSA9ICQobWVudSkuZmluZCgnLmRyb3Bkb3duLW1lbnUnKTtcclxuXHJcbiAgICAgICAgICAgICQoJ2JvZHknKS5hcHBlbmQoZHJvcGRvd25NZW51LmRldGFjaCgpKTtcclxuXHJcbiAgICAgICAgICAgIHZhciBlT2Zmc2V0ID0gJChlLnRhcmdldCkub2Zmc2V0KCk7XHJcblxyXG4gICAgICAgICAgICBkcm9wZG93bk1lbnUuY3NzKHtcclxuICAgICAgICAgICAgICAgICdkaXNwbGF5JzogJ2Jsb2NrJyxcclxuICAgICAgICAgICAgICAgICd0b3AnICAgIDogZU9mZnNldC50b3AgKyAkKGUudGFyZ2V0KS5vdXRlckhlaWdodCgpLFxyXG4gICAgICAgICAgICAgICAgJ2xlZnQnICAgOiBlT2Zmc2V0LmxlZnRcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICQobWVudSkub24oJ2hpZGUuYnMuZHJvcGRvd24nLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICAkKG1lbnUpLmFwcGVuZChkcm9wZG93bk1lbnUuZGV0YWNoKCkpO1xyXG4gICAgICAgICAgICBkcm9wZG93bk1lbnUuaGlkZSgpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuXHJcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoaXRlbXMpKSB7XHJcbiAgICAgICAgICAgIGxldCB0aGF0ID0gdGhpcztcclxuXHJcbiAgICAgICAgICAgICQuZWFjaChpdGVtcywgZnVuY3Rpb24gKGtleSwgaXRlbSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKENvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QoaXRlbSkgJiYgdHlwZW9mIGl0ZW0udHlwZSA9PT0gJ3N0cmluZycpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0udHlwZSA9PT0gJ2J1dHRvbicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0uaGFzT3duUHJvcGVydHkoJ2NvbnRlbnQnKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5oYXNPd25Qcm9wZXJ0eSgnb25DbGljaycpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbJ3N0cmluZycsICdmdW5jdGlvbiddLmluZGV4T2YodHlwZW9mIGl0ZW0ub25DbGljaykgPj0gMCAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGl0ZW0uY29udGVudCA9PT0gJ3N0cmluZydcclxuICAgICAgICAgICAgICAgICAgICAgICAgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgnYnV0dG9uI2J0bi1kcm9wZG93bi0nICsgaXRlbS5pZCwgbWVudSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuY2xpY2soZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgaXRlbS5vbkNsaWNrID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtLm9uQ2xpY2socmVjb3JkLCB0aGF0Ll90YWJsZSwgZXZlbnQpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgaXRlbS5vbkNsaWNrID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKG5ldyBGdW5jdGlvbigncmVjb3JkJywgJ3RhYmxlJywgJ2V2ZW50JywgaXRlbS5vbkNsaWNrKSkocmVjb3JkLCB0aGF0Ll90YWJsZSwgZXZlbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIG1lbnU7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCBDb2x1bW5zTWVudTsiLCJpbXBvcnQgY29yZXVpVGFibGVVdGlscyBmcm9tIFwiLi4vY29yZXVpLnRhYmxlLnV0aWxzXCI7XHJcbmltcG9ydCBjb3JldWlUYWJsZVRwbCAgIGZyb20gXCIuLi9jb3JldWkudGFibGUudGVtcGxhdGVzXCI7XHJcbmltcG9ydCBDb2x1bW4gICAgICAgICAgIGZyb20gXCIuLi9hYnN0cmFjdC9Db2x1bW5cIjtcclxuXHJcbmNsYXNzIENvbHVtbnNCYWRnZSBleHRlbmRzIENvbHVtbiB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQmNC90LjRhtC40LDQu9C40LfQsNGG0LjRj1xyXG4gICAgICogQHBhcmFtIHtjb3JldWlUYWJsZUluc3RhbmNlfSB0YWJsZVxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9ICAgICAgICAgICAgICBvcHRpb25zXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKHRhYmxlLCBvcHRpb25zKSB7XHJcblxyXG4gICAgICAgIG9wdGlvbnMgPSAkLmV4dGVuZCh0cnVlLCB7XHJcbiAgICAgICAgICAgIHR5cGU6ICdiYWRnZScsXHJcbiAgICAgICAgICAgIGZpZWxkOiBudWxsLFxyXG4gICAgICAgICAgICBsYWJlbDogbnVsbCxcclxuICAgICAgICAgICAgc2hvdzogdHJ1ZSxcclxuICAgICAgICAgICAgd2lkdGg6IG51bGwsXHJcbiAgICAgICAgICAgIG1pbldpZHRoOiBudWxsLFxyXG4gICAgICAgICAgICBtYXhXaWR0aDogbnVsbCxcclxuICAgICAgICB9LCBvcHRpb25zKTtcclxuXHJcbiAgICAgICAgc3VwZXIodGFibGUsIG9wdGlvbnMpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCa0L7QvdCy0LXRgNGC0LjRgNC+0LLQsNC90LjQtSDQt9C90LDRh9C10L3QuNGPINC60L7Qu9C+0L3QutC4INCyINGC0LXQutGB0YJcclxuICAgICAqIEBwYXJhbSB7Kn0gY29sdW1uVmFsdWVcclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIGNvbnZlcnRUb1N0cmluZyhjb2x1bW5WYWx1ZSkge1xyXG5cclxuICAgICAgICBpZiAodHlwZW9mIGNvbHVtblZhbHVlID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICByZXR1cm4gY29sdW1uVmFsdWU7XHJcblxyXG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGNvbHVtblZhbHVlID09PSAnbnVtYmVyJykge1xyXG4gICAgICAgICAgICByZXR1cm4gU3RyaW5nKGNvbHVtblZhbHVlKTtcclxuXHJcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgY29sdW1uVmFsdWUgPT09ICdvYmplY3QnICYmXHJcbiAgICAgICAgICAgIGNvbHVtblZhbHVlLmhhc093blByb3BlcnR5KCd0ZXh0JykgJiZcclxuICAgICAgICAgICAgWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2YgY29sdW1uVmFsdWUudGV4dCkgPj0gMFxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICByZXR1cm4gU3RyaW5nKGNvbHVtblZhbHVlLnRleHQpO1xyXG5cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gJyc7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCk0L7RgNC80LjRgNC+0LLQsNC90LjQtSDQutC+0L3RgtC10L3RgtCwXHJcbiAgICAgKiBAcGFyYW0ge29iamVjdHxzdHJpbmd8bnVtYmVyfSBjb250ZW50XHJcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gICAgICAgICAgICAgICByZWNvcmRcclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIHJlbmRlcihjb250ZW50LCByZWNvcmQpIHtcclxuXHJcbiAgICAgICAgaWYgKFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIGNvbnRlbnQpID49IDApIHtcclxuICAgICAgICAgICAgY29udGVudCA9IHsgdHlwZTogJ3NlY29uZGFyeScsIHRleHQ6IGNvbnRlbnQgfTtcclxuXHJcbiAgICAgICAgfSBlbHNlIGlmICggISBjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KGNvbnRlbnQpIHx8XHJcbiAgICAgICAgICAgICAhIGNvbnRlbnQuaGFzT3duUHJvcGVydHkoJ3R5cGUnKSB8fFxyXG4gICAgICAgICAgICAgISBjb250ZW50Lmhhc093blByb3BlcnR5KCd0ZXh0JykgfHxcclxuICAgICAgICAgICAgIHR5cGVvZiBjb250ZW50LnR5cGUgIT09ICdzdHJpbmcnIHx8XHJcbiAgICAgICAgICAgICB0eXBlb2YgY29udGVudC50ZXh0ICE9PSAnc3RyaW5nJyB8fFxyXG4gICAgICAgICAgICAgISBjb250ZW50LnRleHRcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGNvbnRlbnQudHlwZSA9PT0gJycgfHwgY29udGVudC50eXBlID09PSAnbm9uZScpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGNvbnRlbnQudGV4dDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBjb3JldWlUYWJsZVV0aWxzLnJlbmRlcihjb3JldWlUYWJsZVRwbFsnY29sdW1ucy9iYWRnZS5odG1sJ10sIHtcclxuICAgICAgICAgICAgdHlwZTogY29udGVudC50eXBlLFxyXG4gICAgICAgICAgICB0ZXh0OiBjb250ZW50LnRleHRcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgQ29sdW1uc0JhZGdlOyIsImltcG9ydCBjb3JldWlUYWJsZVV0aWxzICBmcm9tIFwiLi4vY29yZXVpLnRhYmxlLnV0aWxzXCI7XHJcbmltcG9ydCBjb3JldWlUYWJsZVJlbmRlciBmcm9tIFwiLi4vY29yZXVpLnRhYmxlLnJlbmRlclwiO1xyXG5pbXBvcnQgQ29sdW1uICAgICAgICAgICAgZnJvbSBcIi4uL2Fic3RyYWN0L0NvbHVtblwiO1xyXG5cclxuY2xhc3MgQ29sdW1uc0NvbXBvbmVudCBleHRlbmRzIENvbHVtbiB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQmNC90LjRhtC40LDQu9C40LfQsNGG0LjRj1xyXG4gICAgICogQHBhcmFtIHtjb3JldWlUYWJsZUluc3RhbmNlfSB0YWJsZVxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9ICAgICAgICAgICAgICBvcHRpb25zXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKHRhYmxlLCBvcHRpb25zKSB7XHJcblxyXG4gICAgICAgIG9wdGlvbnMgPSAkLmV4dGVuZCh0cnVlLCB7XHJcbiAgICAgICAgICAgIHR5cGU6ICdjb21wb25lbnQnLFxyXG4gICAgICAgICAgICBmaWVsZDogbnVsbCxcclxuICAgICAgICAgICAgbGFiZWw6IG51bGwsXHJcbiAgICAgICAgICAgIHNob3c6IHRydWUsXHJcbiAgICAgICAgICAgIHdpZHRoOiBudWxsLFxyXG4gICAgICAgICAgICBtaW5XaWR0aDogbnVsbCxcclxuICAgICAgICAgICAgbWF4V2lkdGg6IG51bGwsXHJcbiAgICAgICAgfSwgb3B0aW9ucyk7XHJcblxyXG4gICAgICAgIHN1cGVyKHRhYmxlLCBvcHRpb25zKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQpNC+0YDQvNC40YDQvtCy0LDQvdC40LUg0LrQvtC90YLQtdC90YLQsFxyXG4gICAgICogQHBhcmFtIHtvYmplY3R8c3RyaW5nfSBjb250ZW50XHJcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gICAgICAgIHJlY29yZFxyXG4gICAgICogQHJldHVybnMge3N0cmluZ31cclxuICAgICAqL1xyXG4gICAgcmVuZGVyKGNvbnRlbnQsIHJlY29yZCkge1xyXG5cclxuICAgICAgICBpZiAoICEgY29yZXVpVGFibGVVdGlscy5pc09iamVjdChjb250ZW50KSB8fFxyXG4gICAgICAgICAgICAgISBjb250ZW50Lmhhc093blByb3BlcnR5KCdjb21wb25lbnQnKSB8fFxyXG4gICAgICAgICAgICAgdHlwZW9mIGNvbnRlbnQuY29tcG9uZW50ICE9PSAnc3RyaW5nJyB8fFxyXG4gICAgICAgICAgICAgISBjb250ZW50LmNvbXBvbmVudFxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICByZXR1cm4gJyc7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gY29yZXVpVGFibGVSZW5kZXIucmVuZGVyQ29tcG9uZW50cyh0aGlzLl90YWJsZSwgY29udGVudCwgJ3JlY29yZHNfc2hvdycpO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgQ29sdW1uc0NvbXBvbmVudDsiLCJpbXBvcnQgY29yZXVpVGFibGVVdGlscyBmcm9tIFwiLi4vY29yZXVpLnRhYmxlLnV0aWxzXCI7XHJcbmltcG9ydCBjb3JldWlUYWJsZVRwbCAgIGZyb20gXCIuLi9jb3JldWkudGFibGUudGVtcGxhdGVzXCI7XHJcbmltcG9ydCBDb2x1bW4gICAgICAgICAgIGZyb20gXCIuLi9hYnN0cmFjdC9Db2x1bW5cIjtcclxuXHJcblxyXG5jbGFzcyBDb2x1bW5zUHJvZ3Jlc3MgZXh0ZW5kcyBDb2x1bW4ge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y9cclxuICAgICAqIEBwYXJhbSB7Y29yZXVpVGFibGVJbnN0YW5jZX0gdGFibGVcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSAgICAgICAgICAgICAgb3B0aW9uc1xyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3Rvcih0YWJsZSwgb3B0aW9ucykge1xyXG5cclxuICAgICAgICBvcHRpb25zID0gJC5leHRlbmQodHJ1ZSwge1xyXG4gICAgICAgICAgICB0eXBlOiAncHJvZ3Jlc3MnLFxyXG4gICAgICAgICAgICBmaWVsZDogbnVsbCxcclxuICAgICAgICAgICAgbGFiZWw6IG51bGwsXHJcbiAgICAgICAgICAgIHNob3c6IHRydWUsXHJcbiAgICAgICAgICAgIHdpZHRoOiBudWxsLFxyXG4gICAgICAgICAgICBtaW5XaWR0aDogbnVsbCxcclxuICAgICAgICAgICAgbWF4V2lkdGg6IG51bGwsXHJcbiAgICAgICAgICAgIGF0dHI6IHt9LFxyXG5cclxuICAgICAgICAgICAgc2hvd1BlcmNlbnQ6IG51bGwsXHJcbiAgICAgICAgICAgIGJhckNvbG9yOiAncHJpbWFyeScsXHJcbiAgICAgICAgICAgIGJhcldpZHRoOiBudWxsLFxyXG4gICAgICAgICAgICBiYXJIZWlnaHQ6IG51bGwsXHJcbiAgICAgICAgfSwgb3B0aW9ucyk7XHJcblxyXG4gICAgICAgIHN1cGVyKHRhYmxlLCBvcHRpb25zKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQmtC+0L3QstC10YDRgtC40YDQvtCy0LDQvdC40LUg0LfQvdCw0YfQtdC90LjRjyDQutC+0LvQvtC90LrQuCDQsiDRgtC10LrRgdGCXHJcbiAgICAgKiBAcGFyYW0geyp9IGNvbHVtblZhbHVlXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxyXG4gICAgICovXHJcbiAgICBjb252ZXJ0VG9TdHJpbmcoY29sdW1uVmFsdWUpIHtcclxuXHJcbiAgICAgICAgaWYgKFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIGNvbHVtblZhbHVlKSA+PSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBTdHJpbmcoY29sdW1uVmFsdWUpO1xyXG5cclxuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBjb2x1bW5WYWx1ZSA9PT0gJ29iamVjdCcgJiZcclxuICAgICAgICAgICAgY29sdW1uVmFsdWUuaGFzT3duUHJvcGVydHkoJ3BlcmNlbnQnKSAmJlxyXG4gICAgICAgICAgICBbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiBjb2x1bW5WYWx1ZS5wZXJjZW50KSA+PSAwXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBTdHJpbmcoY29sdW1uVmFsdWUucGVyY2VudCk7XHJcblxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiAnJztcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KTQvtGA0LzQuNGA0L7QstCw0L3QuNC1INC60L7QvdGC0LXQvdGC0LBcclxuICAgICAqIEBwYXJhbSB7b2JqZWN0fHN0cmluZ3xudW1iZXJ9IGNvbnRlbnRcclxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSAgICAgICAgICAgICAgcmVjb3JkXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxyXG4gICAgICovXHJcbiAgICByZW5kZXIoY29udGVudCwgcmVjb3JkKSB7XHJcblxyXG4gICAgICAgIGlmIChcclxuICAgICAgICAgICAgKCAhIGNvcmV1aVRhYmxlVXRpbHMuaXNOdW1lcmljKGNvbnRlbnQpKSAmJlxyXG4gICAgICAgICAgICAoXHJcbiAgICAgICAgICAgICAgICAhIGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QoY29udGVudCkgfHxcclxuICAgICAgICAgICAgICAgICEgY29udGVudC5oYXNPd25Qcm9wZXJ0eSgncGVyY2VudCcpIHx8XHJcbiAgICAgICAgICAgICAgICAhIGNvcmV1aVRhYmxlVXRpbHMuaXNOdW1lcmljKGNvbnRlbnQucGVyY2VudClcclxuICAgICAgICAgICAgKVxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICByZXR1cm4gJyc7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgZGVzY3JpcHRpb24gPSBudWxsO1xyXG4gICAgICAgIGxldCBwZXJjZW50ICAgICA9IDA7XHJcbiAgICAgICAgbGV0IHBlcmNlbnRUZXh0ID0gJyc7XHJcbiAgICAgICAgbGV0IGNvbG9yICAgICAgID0gdHlwZW9mIHRoaXMuX29wdGlvbnMuYmFyQ29sb3IgPT09ICdzdHJpbmcnID8gdGhpcy5fb3B0aW9ucy5iYXJDb2xvciA6ICdwcmltYXJ5JztcclxuICAgICAgICBsZXQgYXR0ciAgICAgICAgPSB0aGlzLl9vcHRpb25zLmF0dHI7XHJcblxyXG4gICAgICAgIGF0dHIgPSBjb3JldWlUYWJsZVV0aWxzLm1lcmdlQXR0cihhdHRyLCB7IGNsYXNzOiAncHJvZ3Jlc3MgbWUtMScgfSk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLmJhcldpZHRoKSB7XHJcbiAgICAgICAgICAgIGxldCBiYXJXaWR0aCA9IGNvcmV1aVRhYmxlVXRpbHMuaXNOdW1lcmljKHRoaXMuX29wdGlvbnMuYmFyV2lkdGgpXHJcbiAgICAgICAgICAgICAgICA/ICh0aGlzLl9vcHRpb25zLmJhcldpZHRoICsgJ3B4JylcclxuICAgICAgICAgICAgICAgIDogdGhpcy5fb3B0aW9ucy5iYXJXaWR0aDtcclxuICAgICAgICAgICAgYXR0ciA9IGNvcmV1aVRhYmxlVXRpbHMubWVyZ2VBdHRyKGF0dHIsIHsgc3R5bGU6ICd3aWR0aDonICsgYmFyV2lkdGggfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy5iYXJIZWlnaHQpIHtcclxuICAgICAgICAgICAgbGV0IGJhckhlaWdodCA9IGNvcmV1aVRhYmxlVXRpbHMuaXNOdW1lcmljKHRoaXMuX29wdGlvbnMuYmFySGVpZ2h0KVxyXG4gICAgICAgICAgICAgICAgPyAodGhpcy5fb3B0aW9ucy5iYXJIZWlnaHQgKyAncHgnKVxyXG4gICAgICAgICAgICAgICAgOiB0aGlzLl9vcHRpb25zLmJhckhlaWdodDtcclxuICAgICAgICAgICAgYXR0ciA9IGNvcmV1aVRhYmxlVXRpbHMubWVyZ2VBdHRyKGF0dHIsIHsgc3R5bGU6ICdoZWlnaHQ6JyArIGJhckhlaWdodCB9KTtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICBpZiAoY29yZXVpVGFibGVVdGlscy5pc051bWVyaWMoY29udGVudCkpIHtcclxuICAgICAgICAgICAgaWYgKGNvbnRlbnQgPCAwICkge1xyXG4gICAgICAgICAgICAgICAgcGVyY2VudCA9IDA7XHJcblxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNvbnRlbnQgPiAxMDAgKSB7XHJcbiAgICAgICAgICAgICAgICBwZXJjZW50ID0gMTAwO1xyXG5cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHBlcmNlbnQgPSBjb250ZW50O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmIChjb250ZW50LnBlcmNlbnQgPCAwICkge1xyXG4gICAgICAgICAgICAgICAgcGVyY2VudCA9IDA7XHJcblxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNvbnRlbnQucGVyY2VudCA+IDEwMCApIHtcclxuICAgICAgICAgICAgICAgIHBlcmNlbnQgPSAxMDA7XHJcblxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcGVyY2VudCA9IGNvbnRlbnQucGVyY2VudDtcclxuICAgICAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgICAgIGlmIChjb250ZW50Lmhhc093blByb3BlcnR5KCdjb2xvcicpICYmIHR5cGVvZiBjb250ZW50LmNvbG9yID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICAgICAgY29sb3IgPSBjb250ZW50LmNvbG9yO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoY29udGVudC5oYXNPd25Qcm9wZXJ0eSgnZGVzY3JpcHRpb24nKSAmJlxyXG4gICAgICAgICAgICAgICAgdHlwZW9mIGNvbnRlbnQuZGVzY3JpcHRpb24gPT09ICdzdHJpbmcnICYmXHJcbiAgICAgICAgICAgICAgICBjb250ZW50LmRlc2NyaXB0aW9uICE9PSAnJ1xyXG4gICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uID0gY29udGVudC5kZXNjcmlwdGlvbjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMuc2hvd1BlcmNlbnQpIHtcclxuICAgICAgICAgICAgcGVyY2VudFRleHQgPSBwZXJjZW50ICsgJyUnO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIGxldCBhdHRyaWJ1dGVzID0gW107XHJcblxyXG4gICAgICAgICQuZWFjaChhdHRyLCBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcclxuICAgICAgICAgICAgaWYgKFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIHZhbHVlKSA+PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzLnB1c2gobmFtZSArICc9XCInICsgdmFsdWUgKyAnXCInKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuXHJcbiAgICAgICAgcmV0dXJuIGNvcmV1aVRhYmxlVXRpbHMucmVuZGVyKGNvcmV1aVRhYmxlVHBsWydjb2x1bW5zL3Byb2dyZXNzLmh0bWwnXSwge1xyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogZGVzY3JpcHRpb24sXHJcbiAgICAgICAgICAgIHBlcmNlbnQ6IHBlcmNlbnQsXHJcbiAgICAgICAgICAgIHBlcmNlbnRUZXh0OiBwZXJjZW50VGV4dCxcclxuICAgICAgICAgICAgY29sb3I6IGNvbG9yLFxyXG4gICAgICAgICAgICBhdHRyOiBhdHRyaWJ1dGVzLmxlbmd0aCA+IDAgPyAoJyAnICsgYXR0cmlidXRlcy5qb2luKCcgJykpIDogJycsXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IENvbHVtbnNQcm9ncmVzczsiLCJpbXBvcnQgY29yZXVpVGFibGVVdGlscyBmcm9tIFwiLi4vY29yZXVpLnRhYmxlLnV0aWxzXCI7XHJcbmltcG9ydCBjb3JldWlUYWJsZVRwbCAgIGZyb20gXCIuLi9jb3JldWkudGFibGUudGVtcGxhdGVzXCI7XHJcbmltcG9ydCBDb2x1bW4gICAgICAgICAgIGZyb20gXCIuLi9hYnN0cmFjdC9Db2x1bW5cIjtcclxuXHJcbmNsYXNzIENvbHVtbnNJbWFnZSBleHRlbmRzIENvbHVtbiB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQmNC90LjRhtC40LDQu9C40LfQsNGG0LjRj1xyXG4gICAgICogQHBhcmFtIHtjb3JldWlUYWJsZUluc3RhbmNlfSB0YWJsZVxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9ICAgICAgICAgICAgICBvcHRpb25zXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKHRhYmxlLCBvcHRpb25zKSB7XHJcblxyXG4gICAgICAgIG9wdGlvbnMgPSAkLmV4dGVuZCh0cnVlLCB7XHJcbiAgICAgICAgICAgIHR5cGU6ICdpbWFnZScsXHJcbiAgICAgICAgICAgIGZpZWxkOiBudWxsLFxyXG4gICAgICAgICAgICBsYWJlbDogbnVsbCxcclxuICAgICAgICAgICAgc2hvdzogdHJ1ZSxcclxuICAgICAgICAgICAgd2lkdGg6IG51bGwsXHJcbiAgICAgICAgICAgIG1pbldpZHRoOiBudWxsLFxyXG4gICAgICAgICAgICBtYXhXaWR0aDogbnVsbCxcclxuICAgICAgICAgICAgYXR0cjoge30sXHJcbiAgICAgICAgICAgIGltZ1dpZHRoOiBudWxsLFxyXG4gICAgICAgICAgICBpbWdIZWlnaHQ6IG51bGwsXHJcbiAgICAgICAgICAgIGltZ0JvcmRlcjogbnVsbCxcclxuICAgICAgICAgICAgaW1nU3R5bGU6IG51bGwsXHJcbiAgICAgICAgfSwgb3B0aW9ucyk7XHJcblxyXG4gICAgICAgIHN1cGVyKHRhYmxlLCBvcHRpb25zKTtcclxuXHJcbiAgICAgICAgdGhpcy5fdGFibGUgICA9IHRhYmxlO1xyXG4gICAgICAgIHRoaXMuX29wdGlvbnMgPSAkLmV4dGVuZCh0cnVlLCB7fSwgdGhpcy5fb3B0aW9ucywgb3B0aW9ucyk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KTQvtGA0LzQuNGA0L7QstCw0L3QuNC1INC60L7QvdGC0LXQvdGC0LBcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjb250ZW50XHJcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gcmVjb3JkXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxyXG4gICAgICovXHJcbiAgICByZW5kZXIoY29udGVudCwgcmVjb3JkKSB7XHJcblxyXG4gICAgICAgIGlmICh0eXBlb2YgY29udGVudCAhPT0gJ3N0cmluZycgfHwgY29udGVudCA9PT0gJycpIHtcclxuICAgICAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IGF0dHIgPSB0aGlzLl9vcHRpb25zLmF0dHI7XHJcblxyXG4gICAgICAgIGF0dHIuc3JjID0gY29udGVudDtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMuaW1nV2lkdGgpIHtcclxuICAgICAgICAgICAgbGV0IGltZ1dpZHRoID0gY29yZXVpVGFibGVVdGlscy5pc051bWVyaWModGhpcy5fb3B0aW9ucy5pbWdXaWR0aClcclxuICAgICAgICAgICAgICAgID8gKHRoaXMuX29wdGlvbnMuaW1nV2lkdGggKyAncHgnKVxyXG4gICAgICAgICAgICAgICAgOiB0aGlzLl9vcHRpb25zLmltZ1dpZHRoO1xyXG4gICAgICAgICAgICBhdHRyID0gY29yZXVpVGFibGVVdGlscy5tZXJnZUF0dHIoYXR0ciwgeyBzdHlsZTogJ3dpZHRoOicgKyBpbWdXaWR0aCB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLmltZ0hlaWdodCkge1xyXG4gICAgICAgICAgICBsZXQgaW1nSGVpZ2h0ID0gY29yZXVpVGFibGVVdGlscy5pc051bWVyaWModGhpcy5fb3B0aW9ucy5pbWdIZWlnaHQpXHJcbiAgICAgICAgICAgICAgICA/ICh0aGlzLl9vcHRpb25zLmltZ0hlaWdodCArICdweCcpXHJcbiAgICAgICAgICAgICAgICA6IHRoaXMuX29wdGlvbnMuaW1nSGVpZ2h0O1xyXG4gICAgICAgICAgICBhdHRyID0gY29yZXVpVGFibGVVdGlscy5tZXJnZUF0dHIoYXR0ciwgeyBzdHlsZTogJ2hlaWdodDonICsgaW1nSGVpZ2h0IH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMuaW1nQm9yZGVyKSB7XHJcbiAgICAgICAgICAgIGF0dHIgPSBjb3JldWlUYWJsZVV0aWxzLm1lcmdlQXR0cihhdHRyLCB7IGNsYXNzOiAnYm9yZGVyIGJvcmRlci1zZWNvbmRhcnktc3VidGxlJyB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLmltZ1N0eWxlICYmIHR5cGVvZiB0aGlzLl9vcHRpb25zLmltZ1N0eWxlID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICBzd2l0Y2ggKHRoaXMuX29wdGlvbnMuaW1nU3R5bGUpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgJ2NpcmNsZSc6ICBhdHRyID0gY29yZXVpVGFibGVVdGlscy5tZXJnZUF0dHIoYXR0ciwgeyBjbGFzczogJ3JvdW5kZWQtY2lyY2xlJyB9KTsgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICd0aHVtYic6ICAgYXR0ciA9IGNvcmV1aVRhYmxlVXRpbHMubWVyZ2VBdHRyKGF0dHIsIHsgY2xhc3M6ICdpbWctdGh1bWJuYWlsJyB9KTsgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdyb3VuZGVkJzogYXR0ciA9IGNvcmV1aVRhYmxlVXRpbHMubWVyZ2VBdHRyKGF0dHIsIHsgY2xhc3M6ICdyb3VuZGVkJyB9KTsgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICBsZXQgYXR0cmlidXRlcyA9IFtdO1xyXG5cclxuICAgICAgICAkLmVhY2goYXR0ciwgZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XHJcbiAgICAgICAgICAgIGlmIChbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiB2YWx1ZSkgPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgYXR0cmlidXRlcy5wdXNoKG5hbWUgKyAnPVwiJyArIHZhbHVlICsgJ1wiJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGNvcmV1aVRhYmxlVXRpbHMucmVuZGVyKGNvcmV1aVRhYmxlVHBsWydjb2x1bW5zL2ltYWdlLmh0bWwnXSwge1xyXG4gICAgICAgICAgICBhdHRyOiBhdHRyaWJ1dGVzLmxlbmd0aCA+IDAgPyAoJyAnICsgYXR0cmlidXRlcy5qb2luKCcgJykpIDogJycsXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCBDb2x1bW5zSW1hZ2U7IiwiXHJcbmltcG9ydCBjb3JldWlUYWJsZSBmcm9tIFwiLi9jb3JldWkudGFibGVcIjtcclxuXHJcbmltcG9ydCBsYW5nRW4gZnJvbSBcIi4vbGFuZy9lblwiO1xyXG5pbXBvcnQgbGFuZ1J1IGZyb20gXCIuL2xhbmcvcnVcIjtcclxuXHJcbmltcG9ydCBDb250cm9sTGluayAgICAgICAgZnJvbSBcIi4vY29udHJvbHMvbGlua1wiO1xyXG5pbXBvcnQgQ29udHJvbEJ1dHRvbiAgICAgIGZyb20gXCIuL2NvbnRyb2xzL2J1dHRvblwiO1xyXG5pbXBvcnQgQ29udHJvbERyb3Bkb3duICAgIGZyb20gXCIuL2NvbnRyb2xzL2Ryb3Bkb3duXCI7XHJcbmltcG9ydCBDb250cm9sQnV0dG9uR3JvdXAgZnJvbSBcIi4vY29udHJvbHMvYnV0dG9uX2dyb3VwXCI7XHJcbmltcG9ydCBDb250cm9sQ3VzdG9tICAgICAgZnJvbSBcIi4vY29udHJvbHMvY3VzdG9tXCI7XHJcbmltcG9ydCBDb250cm9sUGFnZVNpemUgICAgZnJvbSBcIi4vY29udHJvbHMvcGFnZV9zaXplXCI7XHJcbmltcG9ydCBDb250cm9sUGFnZUp1bXAgICAgZnJvbSBcIi4vY29udHJvbHMvcGFnZV9qdW1wXCI7XHJcbmltcG9ydCBDb250cm9sUGFnZXMgICAgICAgZnJvbSBcIi4vY29udHJvbHMvcGFnZXNcIjtcclxuaW1wb3J0IENvbnRyb2xUb3RhbCAgICAgICBmcm9tIFwiLi9jb250cm9scy90b3RhbFwiO1xyXG5pbXBvcnQgQ29udHJvbFNlYXJjaCAgICAgIGZyb20gXCIuL2NvbnRyb2xzL3NlYXJjaFwiO1xyXG5pbXBvcnQgQ29udHJvbENvbHVtbnMgICAgIGZyb20gXCIuL2NvbnRyb2xzL2NvbHVtbnNcIjtcclxuaW1wb3J0IENvbnRyb2xDYXB0aW9uICAgICBmcm9tIFwiLi9jb250cm9scy9jYXB0aW9uXCI7XHJcbmltcG9ydCBDb250cm9sRmlsdGVyQ2xlYXIgZnJvbSBcIi4vY29udHJvbHMvZmlsdGVyX2NsZWFyXCI7XHJcbmltcG9ydCBDb250cm9sRGl2aWRlciAgICAgZnJvbSBcIi4vY29udHJvbHMvZGl2aWRlclwiO1xyXG5cclxuaW1wb3J0IEZpbHRlclRleHQgICAgICAgICAgIGZyb20gXCIuL2ZpbHRlcnMvdGV4dFwiO1xyXG5pbXBvcnQgRmlsdGVyTnVtYmVyICAgICAgICAgZnJvbSBcIi4vZmlsdGVycy9udW1iZXJcIjtcclxuaW1wb3J0IEZpbHRlckRhdGUgICAgICAgICAgIGZyb20gXCIuL2ZpbHRlcnMvZGF0ZVwiO1xyXG5pbXBvcnQgRmlsdGVyRGF0ZXRpbWUgICAgICAgZnJvbSBcIi4vZmlsdGVycy9kYXRldGltZVwiO1xyXG5pbXBvcnQgRmlsdGVyRGF0ZU1vbnRoICAgICAgZnJvbSBcIi4vZmlsdGVycy9kYXRlX21vbnRoXCI7XHJcbmltcG9ydCBGaWx0ZXJEYXRlUmFuZ2UgICAgICBmcm9tIFwiLi9maWx0ZXJzL2RhdGVfcmFuZ2VcIjtcclxuaW1wb3J0IEZpbHRlckRhdGV0aW1lUmFuZ2UgIGZyb20gXCIuL2ZpbHRlcnMvZGF0ZXRpbWVfcmFuZ2VcIjtcclxuaW1wb3J0IEZpbHRlckNoZWNrYm94ICAgICAgIGZyb20gXCIuL2ZpbHRlcnMvY2hlY2tib3hcIjtcclxuaW1wb3J0IEZpbHRlclJhZGlvICAgICAgICAgIGZyb20gXCIuL2ZpbHRlcnMvcmFkaW9cIjtcclxuaW1wb3J0IEZpbHRlclNlbGVjdCAgICAgICAgIGZyb20gXCIuL2ZpbHRlcnMvc2VsZWN0XCI7XHJcbmltcG9ydCBGaWx0ZXJTd2l0Y2ggICAgICAgICBmcm9tIFwiLi9maWx0ZXJzL3N3aXRjaFwiO1xyXG5cclxuaW1wb3J0IFNlYXJjaFRleHQgICAgICAgICAgZnJvbSBcIi4vc2VhcmNoL3RleHRcIjtcclxuaW1wb3J0IFNlYXJjaE51bWJlciAgICAgICAgZnJvbSBcIi4vc2VhcmNoL251bWJlclwiO1xyXG5pbXBvcnQgU2VhcmNoRGF0ZSAgICAgICAgICBmcm9tIFwiLi9zZWFyY2gvZGF0ZVwiO1xyXG5pbXBvcnQgU2VhcmNoRGF0ZU1vbnRoICAgICBmcm9tIFwiLi9zZWFyY2gvZGF0ZV9tb250aFwiO1xyXG5pbXBvcnQgU2VhcmNoRGF0ZXRpbWUgICAgICBmcm9tIFwiLi9zZWFyY2gvZGF0ZXRpbWVcIjtcclxuaW1wb3J0IFNlYXJjaERhdGVSYW5nZSAgICAgZnJvbSBcIi4vc2VhcmNoL2RhdGVfcmFuZ2VcIjtcclxuaW1wb3J0IFNlYXJjaERhdGV0aW1lUmFuZ2UgZnJvbSBcIi4vc2VhcmNoL2RhdGV0aW1lX3JhbmdlXCI7XHJcbmltcG9ydCBTZWFyY2hDaGVja2JveCAgICAgIGZyb20gXCIuL3NlYXJjaC9jaGVja2JveFwiO1xyXG5pbXBvcnQgU2VhcmNoQ2hlY2tib3hCdG4gICBmcm9tIFwiLi9zZWFyY2gvY2hlY2tib3hCdG5cIjtcclxuaW1wb3J0IFNlYXJjaFJhZGlvICAgICAgICAgZnJvbSBcIi4vc2VhcmNoL3JhZGlvXCI7XHJcbmltcG9ydCBTZWFyY2hSYWRpb0J0biAgICAgIGZyb20gXCIuL3NlYXJjaC9yYWRpb0J0blwiO1xyXG5pbXBvcnQgU2VhcmNoU2VsZWN0ICAgICAgICBmcm9tIFwiLi9zZWFyY2gvc2VsZWN0XCI7XHJcbmltcG9ydCBTZWFyY2hTd2l0Y2ggICAgICAgIGZyb20gXCIuL3NlYXJjaC9zd2l0Y2hcIjtcclxuXHJcbmltcG9ydCBDb2x1bW5zRGF0ZSAgICAgICBmcm9tIFwiLi9jb2x1bW5zL2RhdGVcIjtcclxuaW1wb3J0IENvbHVtbnNEYXRldGltZSAgIGZyb20gXCIuL2NvbHVtbnMvZGF0ZXRpbWVcIjtcclxuaW1wb3J0IENvbHVtbnNEYXRlSHVtYW4gIGZyb20gXCIuL2NvbHVtbnMvZGF0ZV9odW1hblwiO1xyXG5pbXBvcnQgQ29sdW1uc0h0bWwgICAgICAgZnJvbSBcIi4vY29sdW1ucy9odG1sXCI7XHJcbmltcG9ydCBDb2x1bW5zTnVtYmVyICAgICBmcm9tIFwiLi9jb2x1bW5zL251bWJlclwiO1xyXG5pbXBvcnQgQ29sdW1uc01vbmV5ICAgICAgZnJvbSBcIi4vY29sdW1ucy9tb25leVwiO1xyXG5pbXBvcnQgQ29sdW1uc051bWJlcnMgICAgZnJvbSBcIi4vY29sdW1ucy9udW1iZXJzXCI7XHJcbmltcG9ydCBDb2x1bW5zU2VsZWN0ICAgICBmcm9tIFwiLi9jb2x1bW5zL3NlbGVjdFwiO1xyXG5pbXBvcnQgQ29sdW1uc1N3aXRjaCAgICAgZnJvbSBcIi4vY29sdW1ucy9zd2l0Y2hcIjtcclxuaW1wb3J0IENvbHVtbnNUZXh0ICAgICAgIGZyb20gXCIuL2NvbHVtbnMvdGV4dFwiO1xyXG5pbXBvcnQgQ29sdW1uc0J1dHRvbiAgICAgZnJvbSBcIi4vY29sdW1ucy9idXR0b25cIjtcclxuaW1wb3J0IENvbHVtbnNMaW5rICAgICAgIGZyb20gXCIuL2NvbHVtbnMvbGlua1wiO1xyXG5pbXBvcnQgQ29sdW1uc01lbnUgICAgICAgZnJvbSBcIi4vY29sdW1ucy9tZW51XCI7XHJcbmltcG9ydCBDb2x1bW5zQmFkZ2UgICAgICBmcm9tIFwiLi9jb2x1bW5zL2JhZGdlXCI7XHJcbmltcG9ydCBDb2x1bW5zQ29tcG9uZW50ICBmcm9tIFwiLi9jb2x1bW5zL2NvbXBvbmVudFwiO1xyXG5pbXBvcnQgQ29sdW1uc1Byb2dyZXNzICAgZnJvbSBcIi4vY29sdW1ucy9wcm9ncmVzc1wiO1xyXG5pbXBvcnQgQ29sdW1uc0ltYWdlICAgICAgZnJvbSBcIi4vY29sdW1ucy9pbWFnZVwiO1xyXG5cclxuXHJcbmNvcmV1aVRhYmxlLmxhbmcucnUgPSBsYW5nUnU7XHJcbmNvcmV1aVRhYmxlLmxhbmcuZW4gPSBsYW5nRW47XHJcblxyXG5jb3JldWlUYWJsZS5jb250cm9scy5saW5rICAgICAgICA9IENvbnRyb2xMaW5rO1xyXG5jb3JldWlUYWJsZS5jb250cm9scy5idXR0b24gICAgICA9IENvbnRyb2xCdXR0b247XHJcbmNvcmV1aVRhYmxlLmNvbnRyb2xzLmRyb3Bkb3duICAgID0gQ29udHJvbERyb3Bkb3duO1xyXG5jb3JldWlUYWJsZS5jb250cm9scy5idXR0b25Hcm91cCA9IENvbnRyb2xCdXR0b25Hcm91cDtcclxuY29yZXVpVGFibGUuY29udHJvbHMuY3VzdG9tICAgICAgPSBDb250cm9sQ3VzdG9tO1xyXG5jb3JldWlUYWJsZS5jb250cm9scy5wYWdlU2l6ZSAgICA9IENvbnRyb2xQYWdlU2l6ZTtcclxuY29yZXVpVGFibGUuY29udHJvbHMucGFnZUp1bXAgICAgPSBDb250cm9sUGFnZUp1bXA7XHJcbmNvcmV1aVRhYmxlLmNvbnRyb2xzLnBhZ2VzICAgICAgID0gQ29udHJvbFBhZ2VzO1xyXG5jb3JldWlUYWJsZS5jb250cm9scy50b3RhbCAgICAgICA9IENvbnRyb2xUb3RhbDtcclxuY29yZXVpVGFibGUuY29udHJvbHMuc2VhcmNoICAgICAgPSBDb250cm9sU2VhcmNoO1xyXG5jb3JldWlUYWJsZS5jb250cm9scy5jb2x1bW5zICAgICA9IENvbnRyb2xDb2x1bW5zO1xyXG5jb3JldWlUYWJsZS5jb250cm9scy5jYXB0aW9uICAgICA9IENvbnRyb2xDYXB0aW9uO1xyXG5jb3JldWlUYWJsZS5jb250cm9scy5maWx0ZXJDbGVhciA9IENvbnRyb2xGaWx0ZXJDbGVhcjtcclxuY29yZXVpVGFibGUuY29udHJvbHMuZGl2aWRlciAgICAgPSBDb250cm9sRGl2aWRlcjtcclxuXHJcbmNvcmV1aVRhYmxlLmZpbHRlcnMudGV4dCAgICAgICAgICA9IEZpbHRlclRleHQ7XHJcbmNvcmV1aVRhYmxlLmZpbHRlcnMubnVtYmVyICAgICAgICA9IEZpbHRlck51bWJlcjtcclxuY29yZXVpVGFibGUuZmlsdGVycy5kYXRlICAgICAgICAgID0gRmlsdGVyRGF0ZTtcclxuY29yZXVpVGFibGUuZmlsdGVycy5kYXRldGltZSAgICAgID0gRmlsdGVyRGF0ZXRpbWU7XHJcbmNvcmV1aVRhYmxlLmZpbHRlcnMuZGF0ZU1vbnRoICAgICA9IEZpbHRlckRhdGVNb250aDtcclxuY29yZXVpVGFibGUuZmlsdGVycy5kYXRlUmFuZ2UgICAgID0gRmlsdGVyRGF0ZVJhbmdlO1xyXG5jb3JldWlUYWJsZS5maWx0ZXJzLmRhdGV0aW1lUmFuZ2UgPSBGaWx0ZXJEYXRldGltZVJhbmdlO1xyXG5jb3JldWlUYWJsZS5maWx0ZXJzLmNoZWNrYm94ICAgICAgPSBGaWx0ZXJDaGVja2JveDtcclxuY29yZXVpVGFibGUuZmlsdGVycy5yYWRpbyAgICAgICAgID0gRmlsdGVyUmFkaW87XHJcbmNvcmV1aVRhYmxlLmZpbHRlcnMuc2VsZWN0ICAgICAgICA9IEZpbHRlclNlbGVjdDtcclxuY29yZXVpVGFibGUuZmlsdGVycy5zd2l0Y2ggICAgICAgID0gRmlsdGVyU3dpdGNoO1xyXG5cclxuY29yZXVpVGFibGUuc2VhcmNoLnRleHQgICAgICAgICAgPSBTZWFyY2hUZXh0O1xyXG5jb3JldWlUYWJsZS5zZWFyY2gubnVtYmVyICAgICAgICA9IFNlYXJjaE51bWJlcjtcclxuY29yZXVpVGFibGUuc2VhcmNoLmRhdGUgICAgICAgICAgPSBTZWFyY2hEYXRlO1xyXG5jb3JldWlUYWJsZS5zZWFyY2guZGF0ZU1vbnRoICAgICA9IFNlYXJjaERhdGVNb250aDtcclxuY29yZXVpVGFibGUuc2VhcmNoLmRhdGV0aW1lICAgICAgPSBTZWFyY2hEYXRldGltZTtcclxuY29yZXVpVGFibGUuc2VhcmNoLmRhdGVSYW5nZSAgICAgPSBTZWFyY2hEYXRlUmFuZ2U7XHJcbmNvcmV1aVRhYmxlLnNlYXJjaC5kYXRldGltZVJhbmdlID0gU2VhcmNoRGF0ZXRpbWVSYW5nZTtcclxuY29yZXVpVGFibGUuc2VhcmNoLmNoZWNrYm94ICAgICAgPSBTZWFyY2hDaGVja2JveDtcclxuY29yZXVpVGFibGUuc2VhcmNoLmNoZWNrYm94QnRuICAgPSBTZWFyY2hDaGVja2JveEJ0bjtcclxuY29yZXVpVGFibGUuc2VhcmNoLnJhZGlvICAgICAgICAgPSBTZWFyY2hSYWRpbztcclxuY29yZXVpVGFibGUuc2VhcmNoLnJhZGlvQnRuICAgICAgPSBTZWFyY2hSYWRpb0J0bjtcclxuY29yZXVpVGFibGUuc2VhcmNoLnNlbGVjdCAgICAgICAgPSBTZWFyY2hTZWxlY3Q7XHJcbmNvcmV1aVRhYmxlLnNlYXJjaC5zd2l0Y2ggICAgICAgID0gU2VhcmNoU3dpdGNoO1xyXG5cclxuY29yZXVpVGFibGUuY29sdW1ucy5kYXRlICAgICAgPSBDb2x1bW5zRGF0ZTtcclxuY29yZXVpVGFibGUuY29sdW1ucy5kYXRldGltZSAgPSBDb2x1bW5zRGF0ZXRpbWU7XHJcbmNvcmV1aVRhYmxlLmNvbHVtbnMuZGF0ZUh1bWFuID0gQ29sdW1uc0RhdGVIdW1hbjtcclxuY29yZXVpVGFibGUuY29sdW1ucy5odG1sICAgICAgPSBDb2x1bW5zSHRtbDtcclxuY29yZXVpVGFibGUuY29sdW1ucy5udW1iZXIgICAgPSBDb2x1bW5zTnVtYmVyO1xyXG5jb3JldWlUYWJsZS5jb2x1bW5zLm1vbmV5ICAgICA9IENvbHVtbnNNb25leTtcclxuY29yZXVpVGFibGUuY29sdW1ucy5udW1iZXJzICAgPSBDb2x1bW5zTnVtYmVycztcclxuY29yZXVpVGFibGUuY29sdW1ucy5zZWxlY3QgICAgPSBDb2x1bW5zU2VsZWN0O1xyXG5jb3JldWlUYWJsZS5jb2x1bW5zLnN3aXRjaCAgICA9IENvbHVtbnNTd2l0Y2g7XHJcbmNvcmV1aVRhYmxlLmNvbHVtbnMudGV4dCAgICAgID0gQ29sdW1uc1RleHQ7XHJcbmNvcmV1aVRhYmxlLmNvbHVtbnMuYnV0dG9uICAgID0gQ29sdW1uc0J1dHRvbjtcclxuY29yZXVpVGFibGUuY29sdW1ucy5saW5rICAgICAgPSBDb2x1bW5zTGluaztcclxuY29yZXVpVGFibGUuY29sdW1ucy5tZW51ICAgICAgPSBDb2x1bW5zTWVudTtcclxuY29yZXVpVGFibGUuY29sdW1ucy5iYWRnZSAgICAgPSBDb2x1bW5zQmFkZ2U7XHJcbmNvcmV1aVRhYmxlLmNvbHVtbnMuY29tcG9uZW50ID0gQ29sdW1uc0NvbXBvbmVudDtcclxuY29yZXVpVGFibGUuY29sdW1ucy5wcm9ncmVzcyAgPSBDb2x1bW5zUHJvZ3Jlc3M7XHJcbmNvcmV1aVRhYmxlLmNvbHVtbnMuaW1hZ2UgICAgID0gQ29sdW1uc0ltYWdlO1xyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNvcmV1aVRhYmxlOyJdLCJuYW1lcyI6WyJ0cGwiLCJPYmplY3QiLCJjcmVhdGUiLCJmIiwiZXhwb3J0cyIsIm1vZHVsZSIsImRlZmluZSIsImFtZCIsImciLCJ3aW5kb3ciLCJnbG9iYWwiLCJzZWxmIiwiZWpzIiwiciIsImUiLCJuIiwidCIsIm8iLCJpIiwiYyIsInJlcXVpcmUiLCJ1IiwiYSIsIkVycm9yIiwiY29kZSIsInAiLCJjYWxsIiwibGVuZ3RoIiwiZnMiLCJwYXRoIiwidXRpbHMiLCJzY29wZU9wdGlvbldhcm5lZCIsIl9WRVJTSU9OX1NUUklORyIsInZlcnNpb24iLCJfREVGQVVMVF9PUEVOX0RFTElNSVRFUiIsIl9ERUZBVUxUX0NMT1NFX0RFTElNSVRFUiIsIl9ERUZBVUxUX0RFTElNSVRFUiIsIl9ERUZBVUxUX0xPQ0FMU19OQU1FIiwiX05BTUUiLCJfUkVHRVhfU1RSSU5HIiwiX09QVFNfUEFTU0FCTEVfV0lUSF9EQVRBIiwiX09QVFNfUEFTU0FCTEVfV0lUSF9EQVRBX0VYUFJFU1MiLCJjb25jYXQiLCJfQk9NIiwiX0pTX0lERU5USUZJRVIiLCJjYWNoZSIsImZpbGVMb2FkZXIiLCJyZWFkRmlsZVN5bmMiLCJsb2NhbHNOYW1lIiwicHJvbWlzZUltcGwiLCJGdW5jdGlvbiIsIlByb21pc2UiLCJyZXNvbHZlSW5jbHVkZSIsIm5hbWUiLCJmaWxlbmFtZSIsImlzRGlyIiwiZGlybmFtZSIsImV4dG5hbWUiLCJyZXNvbHZlIiwiaW5jbHVkZVBhdGgiLCJleHQiLCJyZXNvbHZlUGF0aHMiLCJwYXRocyIsImZpbGVQYXRoIiwic29tZSIsInYiLCJleGlzdHNTeW5jIiwiZ2V0SW5jbHVkZVBhdGgiLCJvcHRpb25zIiwidmlld3MiLCJtYXRjaCIsImV4ZWMiLCJyZXBsYWNlIiwiQXJyYXkiLCJpc0FycmF5Iiwicm9vdCIsImluY2x1ZGVyIiwiZXNjYXBlRnVuY3Rpb24iLCJoYW5kbGVDYWNoZSIsInRlbXBsYXRlIiwiZnVuYyIsImhhc1RlbXBsYXRlIiwiYXJndW1lbnRzIiwiZ2V0IiwidG9TdHJpbmciLCJjb21waWxlIiwic2V0IiwidHJ5SGFuZGxlQ2FjaGUiLCJkYXRhIiwiY2IiLCJyZXN1bHQiLCJyZWplY3QiLCJlcnIiLCJpbmNsdWRlRmlsZSIsIm9wdHMiLCJzaGFsbG93Q29weSIsImNyZWF0ZU51bGxQcm90b09ialdoZXJlUG9zc2libGUiLCJpbmNsdWRlclJlc3VsdCIsInJldGhyb3ciLCJzdHIiLCJmbG5tIiwibGluZW5vIiwiZXNjIiwibGluZXMiLCJzcGxpdCIsInN0YXJ0IiwiTWF0aCIsIm1heCIsImVuZCIsIm1pbiIsImNvbnRleHQiLCJzbGljZSIsIm1hcCIsImxpbmUiLCJjdXJyIiwiam9pbiIsIm1lc3NhZ2UiLCJzdHJpcFNlbWkiLCJ0ZW1wbCIsInNjb3BlIiwiY29uc29sZSIsIndhcm4iLCJUZW1wbGF0ZSIsInJlbmRlciIsImQiLCJzaGFsbG93Q29weUZyb21MaXN0IiwicmVuZGVyRmlsZSIsImFyZ3MiLCJwcm90b3R5cGUiLCJzaGlmdCIsInZpZXdPcHRzIiwicG9wIiwic2V0dGluZ3MiLCJjbGVhckNhY2hlIiwicmVzZXQiLCJ0ZXh0Iiwib3B0c1BhcmFtIiwiaGFzT3duT25seU9iamVjdCIsInRlbXBsYXRlVGV4dCIsIm1vZGUiLCJ0cnVuY2F0ZSIsImN1cnJlbnRMaW5lIiwic291cmNlIiwiY2xpZW50IiwiZXNjYXBlIiwiZXNjYXBlWE1MIiwiY29tcGlsZURlYnVnIiwiZGVidWciLCJvcGVuRGVsaW1pdGVyIiwiY2xvc2VEZWxpbWl0ZXIiLCJkZWxpbWl0ZXIiLCJzdHJpY3QiLCJybVdoaXRlc3BhY2UiLCJvdXRwdXRGdW5jdGlvbk5hbWUiLCJhc3luYyIsImRlc3RydWN0dXJlZExvY2FscyIsImxlZ2FjeUluY2x1ZGUiLCJfd2l0aCIsInJlZ2V4IiwiY3JlYXRlUmVnZXgiLCJtb2RlcyIsIkVWQUwiLCJFU0NBUEVEIiwiUkFXIiwiQ09NTUVOVCIsIkxJVEVSQUwiLCJkZWxpbSIsImVzY2FwZVJlZ0V4cENoYXJzIiwib3BlbiIsImNsb3NlIiwiUmVnRXhwIiwic3JjIiwiZm4iLCJwcmVwZW5kZWQiLCJhcHBlbmRlZCIsImVzY2FwZUZuIiwiY3RvciIsInNhbml0aXplZEZpbGVuYW1lIiwiSlNPTiIsInN0cmluZ2lmeSIsImdlbmVyYXRlU291cmNlIiwidGVzdCIsImRlc3RydWN0dXJpbmciLCJsb2ciLCJTeW50YXhFcnJvciIsInJldHVybmVkRm4iLCJhbm9ueW1vdXMiLCJpbmNsdWRlIiwiaW5jbHVkZURhdGEiLCJhcHBseSIsImRlZmluZVByb3BlcnR5IiwiYmFzZW5hbWUiLCJ2YWx1ZSIsIndyaXRhYmxlIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIm1hdGNoZXMiLCJwYXJzZVRlbXBsYXRlVGV4dCIsImZvckVhY2giLCJpbmRleCIsImNsb3NpbmciLCJpbmRleE9mIiwic2NhbkxpbmUiLCJwYXQiLCJhcnIiLCJmaXJzdFBvcyIsInB1c2giLCJzdWJzdHJpbmciLCJfYWRkT3V0cHV0IiwibmV3TGluZUNvdW50IiwibGFzdEluZGV4T2YiLCJfX2V4cHJlc3MiLCJWRVJTSU9OIiwicmVnRXhwQ2hhcnMiLCJoYXNPd25Qcm9wZXJ0eSIsImhhc093biIsIm9iaiIsImtleSIsInN0cmluZyIsIlN0cmluZyIsIl9FTkNPREVfSFRNTF9SVUxFUyIsIl9NQVRDSF9IVE1MIiwiZW5jb2RlX2NoYXIiLCJlc2NhcGVGdW5jU3RyIiwibWFya3VwIiwidW5kZWZpbmVkIiwiZXNjYXBlWE1MVG9TdHJpbmciLCJ0byIsImZyb20iLCJsaXN0IiwiX2RhdGEiLCJ2YWwiLCJyZW1vdmUiLCJoeXBoZW5Ub0NhbWVsIiwidG9VcHBlckNhc2UiLCJfX3Byb3RvX18iLCJwcm9jZXNzIiwibm9ybWFsaXplQXJyYXkiLCJwYXJ0cyIsImFsbG93QWJvdmVSb290IiwidXAiLCJsYXN0Iiwic3BsaWNlIiwidW5zaGlmdCIsInJlc29sdmVkUGF0aCIsInJlc29sdmVkQWJzb2x1dGUiLCJjd2QiLCJUeXBlRXJyb3IiLCJjaGFyQXQiLCJmaWx0ZXIiLCJub3JtYWxpemUiLCJpc0Fic29sdXRlIiwidHJhaWxpbmdTbGFzaCIsInN1YnN0ciIsInJlbGF0aXZlIiwidHJpbSIsImZyb21QYXJ0cyIsInRvUGFydHMiLCJzYW1lUGFydHNMZW5ndGgiLCJvdXRwdXRQYXJ0cyIsInNlcCIsImNoYXJDb2RlQXQiLCJoYXNSb290IiwibWF0Y2hlZFNsYXNoIiwic3RhcnREb3QiLCJzdGFydFBhcnQiLCJwcmVEb3RTdGF0ZSIsInhzIiwicmVzIiwibGVuIiwiX3Byb2Nlc3MiLCJjYWNoZWRTZXRUaW1lb3V0IiwiY2FjaGVkQ2xlYXJUaW1lb3V0IiwiZGVmYXVsdFNldFRpbW91dCIsImRlZmF1bHRDbGVhclRpbWVvdXQiLCJzZXRUaW1lb3V0IiwiY2xlYXJUaW1lb3V0IiwicnVuVGltZW91dCIsImZ1biIsInJ1bkNsZWFyVGltZW91dCIsIm1hcmtlciIsInF1ZXVlIiwiZHJhaW5pbmciLCJjdXJyZW50UXVldWUiLCJxdWV1ZUluZGV4IiwiY2xlYW5VcE5leHRUaWNrIiwiZHJhaW5RdWV1ZSIsInRpbWVvdXQiLCJydW4iLCJuZXh0VGljayIsIkl0ZW0iLCJhcnJheSIsInRpdGxlIiwiYnJvd3NlciIsImVudiIsImFyZ3YiLCJ2ZXJzaW9ucyIsIm5vb3AiLCJvbiIsImFkZExpc3RlbmVyIiwib25jZSIsIm9mZiIsInJlbW92ZUxpc3RlbmVyIiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwiZW1pdCIsInByZXBlbmRMaXN0ZW5lciIsInByZXBlbmRPbmNlTGlzdGVuZXIiLCJsaXN0ZW5lcnMiLCJiaW5kaW5nIiwiY2hkaXIiLCJkaXIiLCJ1bWFzayIsImRlc2NyaXB0aW9uIiwia2V5d29yZHMiLCJhdXRob3IiLCJsaWNlbnNlIiwiYmluIiwibWFpbiIsImpzZGVsaXZyIiwidW5wa2ciLCJyZXBvc2l0b3J5IiwidHlwZSIsInVybCIsImJ1Z3MiLCJob21lcGFnZSIsImRlcGVuZGVuY2llcyIsImpha2UiLCJkZXZEZXBlbmRlbmNpZXMiLCJicm93c2VyaWZ5IiwiZXNsaW50IiwianNkb2MiLCJtb2NoYSIsImVuZ2luZXMiLCJub2RlIiwic2NyaXB0cyIsImNvcmV1aVRhYmxlVXRpbHMiLCJfdGVtcGxhdGVzIiwibWVyZ2VBdHRyIiwiYXR0cjEiLCJhdHRyMiIsImFzc2lnbiIsIl90eXBlb2YiLCIkIiwiZWFjaCIsImlzTnVtZXJpYyIsIm51bSIsImlzTmFOIiwiaGFzaENvZGUiLCJjcmMzMiIsIkRhdGUiLCJnZXRUaW1lIiwicmFuZG9tIiwiaXNPYmplY3QiLCJ0cGxOYW1lIiwic3RyUGFkTGVmdCIsImNvdW50IiwicmVwZWF0IiwiY29yZXVpVGFibGVSZW5kZXIiLCJyZW5kZXJUYWJsZSIsInRhYmxlIiwiZ2V0T3B0aW9ucyIsInJlY29yZHNFbGVtZW50cyIsImNvbHVtbnNIZWFkZXIiLCJjb2x1bW5zRm9vdGVyIiwiY29sR3JvdXBzIiwiY29sdW1uRWxlbWVudHMiLCJjb3JldWlUYWJsZVRwbCIsIl9jb2x1bW5zIiwiY29sdW1uIiwiaXNTaG93IiwiY29sdW1uT3B0aW9ucyIsImF0dHJpYnV0ZXMiLCJzb3J0YWJsZSIsIm1lbnVFbGVtZW50cyIsIm1lbnVTaG93QWx3YXlzIiwibWVudVBvc2l0aW9uIiwiZmllbGQiLCJhdHRySGVhZGVyIiwiZml4ZWQiLCJhdHRyIiwiX3NvcnQiLCJzb3J0RmllbGQiLCJvcmRlciIsInNob3dIZWFkZXJzIiwibWVudSIsIml0ZW1zIiwic2hvd0Fsd2F5cyIsInBvc2l0aW9uIiwiaXRlbSIsInRvTG93ZXJDYXNlIiwib25DbGljayIsImF0dHJJdGVtIiwibWVudUVsZW1lbnQiLCJmaW5kIiwiY2xpY2siLCJocmVmIiwic3R5bGUiLCJ3aWR0aCIsInVuaXQiLCJtaW5XaWR0aCIsIm1heFdpZHRoIiwibGFiZWwiLCJzaG93TGFiZWwiLCJjb2x1bW5FbGVtZW50IiwiaXNzZXRNZW51IiwibWVudUNvbnRhaW5lciIsIm1lbnVCdXR0b24iLCJldmVudCIsIm9yaWdpbmFsRXZlbnQiLCJjYW5jZWxCdWJibGUiLCJlbGVtZW50IiwiYXBwZW5kIiwiX3JlY29yZHMiLCJfcmVjb3Jkc1RvdGFsIiwiZ2V0UmVjb3Jkc0NvdW50IiwiX3JlY29yZHNOdW1iZXIiLCJfcGFnZSIsIl9yZWNvcmRzUGVyUGFnZSIsInJlbmRlclJlY29yZHMiLCJyb3dzIiwiaGVhZGVyUm93IiwiY2VsbHMiLCJoZWFkZXJDb2x1bW4iLCJjb250ZW50IiwiY29sdW1ucyIsImZvb3RlclJvdyIsImZvb3RlckNvbHVtbiIsImNsYXNzZXMiLCJ0aGVhZEF0dHIiLCJ0aGVhZFRvcCIsInRhYmxlRWxlbWVudCIsInRib2R5IiwicmVjb3JkRWxlbWVudCIsInJlY29yZHMiLCJ0aGF0IiwiZ3JvdXAiLCJncm91cFZhbHVlIiwiZ3JvdXBJbmRleCIsInJlY29yZHNHcm91cHMiLCJyZWNvcmQiLCJzaG93IiwiaXNHcm91cCIsInJlY29yZHNHcm91cCIsInJlbmRlclJlY29yZHNHcm91cCIsInJlbmRlclJlY29yZCIsInJlbmRlckdyb3VwIiwiY29sdW1uc0NvdW50IiwiX2NvdW50Q29sdW1uc1Nob3ciLCJsYW5nIiwiZ2V0TGFuZyIsImZpZWxkcyIsInJlY29yZEF0dHIiLCJmaWVsZENvbnRlbnQiLCJyZW5kZXJGaWVsZCIsIm9uQ2xpY2tVcmwiLCJtZXRhIiwicXVlcnlTZWxlY3RvciIsImNvbHVtbkZpZWxkIiwiZ2V0RmllbGQiLCJmaWVsZFByb3BzIiwiZmllbGRBdHRyIiwiZmllbGRBdHRyUmVzdWx0IiwiaXNDb2xsYXBzaW5nIiwiZ3JvdXBFbGVtZW50IiwiY29sc3BhbiIsInRkIiwicmVuZGVyQ29udGVudCIsImNvbGxhcHNlZCIsImhhc0NsYXNzIiwicmVtb3ZlQ2xhc3MiLCJhZGRDbGFzcyIsImZhZGVPdXQiLCJmYWRlSW4iLCJyZW5kZXJFeHBhbmQiLCJyZW5kZXJDb21wb25lbnRzIiwiZXhwYW5kUmVjb3JkIiwiaHRtbCIsIkhUTUxFbGVtZW50IiwialF1ZXJ5IiwicmVuZGVyQ29udHJvbCIsImNvbnRyb2wiLCJjb250cm9sRWxlbWVudCIsImlkIiwiZ2V0SWQiLCJjb21wb25lbnRzIiwiZXZlbnROYW1lIiwiY29tcG9uZW50IiwiQ29yZVVJIiwiaW5zdGFuY2UiLCJpbml0RXZlbnRzIiwiY29yZXVpVGFibGVFbGVtZW50cyIsImdldENvbnRhaW5lciIsInRhYmxlSWQiLCJnZXRMb2NrIiwiZ2V0V3JhcHBlciIsImdldFNlYXJjaENvbnRhaW5lciIsImdldENvbHVtbnNDb250YWluZXIiLCJnZXRTZWFyY2hDb250cm9sIiwiY29udHJvbElkIiwiZ2V0Q29udHJvbCIsImdldFRhYmxlIiwiZ2V0VGFibGVUYm9keSIsImdldFRhYmxlVGhlYWQiLCJnZXRUYWJsZVNvcnRhYmxlIiwiZ2V0VHJSZWNvcmRzIiwiZ2V0VHJCeUluZGV4IiwiZ2V0VHJFbXB0eSIsImdldEV4cGFuZFJvdyIsIm5leHQiLCJhZGRFeHBhbmRSb3ciLCJhZnRlciIsImhpZGVFeHBhbmRSb3ciLCJyZWNvcmRFeHBhbmRlZCIsImhpZGUiLCJzaG93RXhwYW5kUm93IiwicmVtb3ZlRXhwYW5kUm93IiwiZ2V0U2VsZWN0ZWRJbmRleGVzIiwiaW5kZXhlcyIsImdldFJvd3NTd2l0Y2hlcyIsImdldFJvd3NTZWxlY3RzIiwiZ2V0Um93c1NlbGVjdEFsbCIsImdldE5vV3JhcFRvZ2dsZXMiLCJzZWxlY3RUciIsInRyIiwicHJvcCIsInNlbGVjdFRyQWxsIiwidGFibGVDb250YWluZXIiLCJ1bnNlbGVjdFRyIiwidW5zZWxlY3RUckFsbCIsImZpeGVkQ29sc0xlZnQiLCJ0YWJsZVdyYXBwZXIiLCJjb2xPZmZzZXQiLCJjc3MiLCJvdXRlcldpZHRoIiwiZml4ZWRDb2xzUmlnaHQiLCJyZXZlcnNlIiwiY29yZXVpVGFibGVQcml2YXRlIiwiaW5pdENvbHVtbnMiLCJjb2x1bW5zU3RvcmFnZSIsInNhdmVTdGF0ZSIsImdldFN0b3JhZ2VGaWVsZCIsImtleTIiLCJjb2x1bW5TdG9yYWdlIiwiX29wdGlvbnMiLCJvdmVyZmxvdyIsImNvbHVtbkluc3RhbmNlIiwiY29yZXVpVGFibGUiLCJpbml0U2VhcmNoIiwic2VhcmNoQ29udHJvbHMiLCJzZWFyY2hWYWx1ZXMiLCJzZWFyY2giLCJjb250cm9sSW5zdGFuY2UiLCJfc2VhcmNoIiwiaW5pdENvbnRyb2xzIiwicm93IiwiY29udHJvbHNMZWZ0IiwiY29udHJvbHNDZW50ZXIiLCJjb250cm9sc1JpZ2h0IiwibGVmdCIsImluaXRDb250cm9sIiwiY2VudGVyIiwicmlnaHQiLCJfY29udHJvbHNQb3NpdGlvbnMiLCJjb250cm9scyIsIl9jb250cm9scyIsImZpbHRlck5hbWUiLCJmaWx0ZXJzIiwiZmlsdGVyVmFsdWVzIiwiX2ZpbHRlcnMiLCJpbml0U29ydCIsInNvcnQiLCJzZWFyY2hMb2NhbFJlY29yZHMiLCJzZWFyY2hEYXRhIiwiZ2V0U2VhcmNoRGF0YSIsImZpbHRlckRhdGEiLCJnZXRGaWx0ZXJEYXRhIiwiY29sdW1uc09wdGlvbnMiLCJjb252ZXJ0VG9TdHJpbmciLCJpc0ZpbHRlcmVkUmVjb3JkIiwic2V0UmVjb3JkcyIsIl9yZWNvcmRzSW5kZXgiLCJhZGRSZWNvcmQiLCJhZnRlckluZGV4IiwiZXh0ZW5kIiwiX21ldGEiLCJzZXEiLCJfc2VxIiwiYWRkUmVjb3JkQmVmb3JlIiwiaXNzZXRLZXkiLCJrZXlCZWZvcmUiLCJyZWNvcmREYXRhIiwiZmllbGRWYWx1ZSIsIl90cmlnZ2VyIiwicGFyYW1zIiwiX2V2ZW50cyIsImNhbGxiYWNrIiwic2luZ2xlRXhlYyIsInNvcnRSZWNvcmRzQnlTZXEiLCJiIiwic29ydFJlY29yZHNCeUZpZWxkcyIsImNvbHVtbnNDb252ZXJ0ZXJzIiwiaXNzZXRBRmllbGQiLCJpc3NldEJGaWVsZCIsImFWYWwiLCJiVmFsIiwic2V0Q29sdW1uc1NvcnQiLCJ0aGVhZCIsInNvcnRDb2x1bW4iLCJzb3J0SXRlbSIsImdldFN0b3JhZ2UiLCJzdG9yYWdlIiwibG9jYWxTdG9yYWdlIiwiZ2V0SXRlbSIsInBhcnNlIiwic2V0U3RvcmFnZSIsInN0b3JhZ2VBbGwiLCJzZXRJdGVtIiwic2V0U3RvcmFnZUZpZWxkIiwiY29yZXVpVGFibGVJbnN0YW5jZSIsInByaW1hcnlLZXkiLCJsYW5nSXRlbXMiLCJoZWlnaHQiLCJtaW5IZWlnaHQiLCJuYXhIZWlnaHQiLCJwYWdlIiwicmVjb3Jkc1BlclBhZ2UiLCJub0JvcmRlciIsIm5vV3JhcCIsIm5vV3JhcFRvZ2dsZSIsInNob3dTY3JvbGxTaGFkb3ciLCJyZWNvcmRzUmVxdWVzdCIsIm1ldGhvZCIsInJlcXVlc3RQYXJhbXMiLCJoZWFkZXIiLCJmb290ZXIiLCJsYWJlbFdpZHRoIiwiX2lkIiwiX2lzUmVjb3Jkc1JlcXVlc3QiLCJfaW5pdCIsInJlY29yZEtleSIsImdldFJlY29yZEJ5SW5kZXgiLCJmaWVsZFF1b3RlIiwibG9jYXRpb24iLCJwcmV2ZW50RGVmYXVsdCIsInBhcmVudCIsInNvcnRhYmxlQ29sdW1ucyIsInNvcnRpbmciLCJjdXJyZW50T3JkZXIiLCJzb3J0RGVmYXVsdCIsInNvcnRGaWVsZHMiLCJib290c3RyYXAiLCJUb29sdGlwIiwid2lkdGhTaXplcyIsImhlaWdodFNpemVzIiwiaGVhZGVyc091dCIsImhlYWRlcnNJbiIsImZvb3RlcnNJbiIsImZvb3RlcnNPdXQiLCJtYXhIZWlnaHQiLCJjb250cm9sUmVuZGVyIiwiaGVhZGVyQ29udHJvbHMiLCJmb290ZXJDb250cm9scyIsImxvYWRCeUZ1bmN0aW9uIiwibG9hZCIsImNsYXNzZXNXcmFwcGVyIiwiY29udGFpbmVyRWxlbWVudCIsInByZXBlbmQiLCJkb21FbGVtZW50IiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsImxvY2siLCJjb250YWluZXIiLCJ1bmxvY2siLCJwYXJhbVBhZ2UiLCJwYXJhbUNvdW50IiwicGFyYW1TdGFydCIsIk51bWJlciIsInBhcmFtRW5kIiwicGFyYW1TZWFyY2giLCJzZWFyY2hJdGVtIiwicGFyYW1Tb3J0IiwiYWpheCIsImRhdGFUeXBlIiwiYmVmb3JlU2VuZCIsInhociIsInN1Y2Nlc3MiLCJ0b3RhbCIsImVycm9yIiwidGV4dFN0YXR1cyIsImVycm9yVGhyb3duIiwiY29tcGxldGUiLCJ0aGVuIiwicmVsb2FkIiwicmVmcmVzaCIsInJlcGxhY2VXaXRoIiwic2V0UGFnZVNpemUiLCJzZWxlY3RBbGwiLCJ1bnNlbGVjdEFsbCIsInNlbGVjdFJlY29yZCIsImdldFJlY29yZEJ5SWQiLCJzZWxlY3RSZWNvcmRCeUluZGV4IiwidW5zZWxlY3RSZWNvcmQiLCJnZXRTZWxlY3RlZFJlY29yZHNJZCIsImdldFNlbGVjdGVkUmVjb3JkcyIsImdldFJlY29yZCIsImdldFJlY29yZHMiLCJnZXREYXRhIiwicHJldlBhZ2UiLCJuZXh0UGFnZSIsInRvdGFsUGFnZXMiLCJjZWlsIiwiZ29QYWdlIiwiZXZlbnROYW1lcyIsInNldENvbHVtbnNTaG93IiwiaXNDaGFuZ2UiLCJzZXRTaG93Iiwic2hvd0NvbHVtbnMiLCJoaWRlQ29sdW1ucyIsImV4dE9wdGlvbnMiLCJnZXRWYWx1ZSIsInNlYXJjaFJlY29yZHMiLCJjbGVhclNlYXJjaCIsInNldFZhbHVlIiwiY2xlYXJGaWx0ZXJzIiwicmVjb3JkSXRlbSIsImdldFJlY29yZEJ5RmllbGQiLCJnZXRDb250cm9sQnlJZCIsImdldFNlYXJjaENvbnRyb2xCeUlkIiwiY29sdW1uU29ydGFibGUiLCJyZW1vdmVSZWNvcmRCeUluZGV4IiwiYWRkUmVjb3JkQWZ0ZXJJbmRleCIsImFkZFJlY29yZEJlZm9yZUluZGV4IiwiYmVmb3JlIiwiYWRkUmVjb3JkRmlyc3QiLCJhZGRSZWNvcmRMYXN0IiwicGFyc2VJbnQiLCJ0YWJsZUJvZHkiLCJleHBhbmRSZWNvcmRDb250ZW50IiwicmVjb3JkSW5kZXgiLCJpc1JlYnVpbGQiLCJjYWxsYmFja1Jlc3VsdCIsImV4cGFuZFJlY29yZFVybCIsInJlc3BvbnNlIiwiZ2V0UmVzcG9uc2VIZWFkZXIiLCJfaW5zdGFuY2VzIiwiX3NldHRpbmdzIiwiZ2V0U2V0dGluZyIsInNldFNldHRpbmdzIiwibGFuZ0VuIiwibGFuZ1J1IiwiQ29udHJvbCIsIl9jbGFzc0NhbGxDaGVjayIsIl9kZWZpbmVQcm9wZXJ0eSIsIl90YWJsZSIsIl9jcmVhdGVDbGFzcyIsIkNvbnRyb2xMaW5rIiwiX0NvbnRyb2wiLCJfY2FsbFN1cGVyIiwiX2luaGVyaXRzIiwibGluayIsIkNvbnRyb2xCdXR0b24iLCJidG4iLCJDb250cm9sRHJvcGRvd24iLCJDb3JldWlUYWJsZVV0aWxzIiwiYnV0dG9uIiwiZHJvcGRvd24iLCJDb250cm9sQnV0dG9uR3JvdXAiLCJfdGhpczIiLCJidXR0b25zIiwibWFrZUxpbmsiLCJfbGluayIsIm1ha2VCdXR0b24iLCJfYnV0dG9uIiwibWFrZURyb3Bkb3duIiwiX2Ryb3Bkb3duIiwibGlua0VsZW1lbnQiLCJidXR0b25FbGVtZW50IiwiZHJvcGRvd25FbGVtZW50IiwiYnRuR3JvdXAiLCJDb250cm9sQ3VzdG9tIiwiQ29udHJvbFBhZ2VTaXplIiwib3B0aW9uc09yaWdpbmFsIiwicmVjb3Jkc1BlclBhZ2VMaXN0Iiwic2VsZWN0UGFnZVNpemUiLCJjaGFuZ2UiLCJDb250cm9sUGFnZUp1bXAiLCJpbnB1dCIsImtleXVwIiwia2V5Q29kZSIsImNvbnRyb2xQYWdlcyIsInNob3dQcmV2IiwicHJldiIsInNob3dOZXh0Iiwic2hvd0RpdmlkZXJTdGFydCIsInNob3dEaXZpZGVyRW5kIiwic2hvd1BhZ2VGaXJzdCIsInNob3dQYWdlTGFzdCIsInBhZ2VzIiwicGFnZXNUb3RhbCIsImNvdW50SGFsZiIsImZsb29yIiwiY3VycmVudFBhZ2UiLCJpc0FjdGl2ZVByZXYiLCJpc0FjdGl2ZU5leHQiLCJidG5QcmV2IiwiYnRuTmV4dCIsImJ0blBhZ2VzIiwiQ29udHJvbFBhZ2VzIiwiY29udHJvbFVwZGF0ZSIsIl9jb250cm9sIiwiQ29udHJvbFRvdGFsIiwicmVjb3Jkc1RvdGFsIiwiQ29udHJvbFNlYXJjaCIsImJ0bkNsZWFyIiwiYnRuQ29tcGxldGUiLCJjbGVhciIsInNlYXJjaEFjdGlvbiIsImJ0bkF0dHIiLCJidG5Db250ZW50IiwiX3JlbmRlckJ0bkNsZWFyIiwiYnV0dG9uVG9nZ2xlIiwiYnV0dG9uQ2xlYXIiLCJjb2x1bW5zQ29udGFpbmVyIiwiZmFkZVRvZ2dsZSIsImJ0bkNvbXBsZXRlQXR0ciIsImJ0bkNvbXBsZXRlQ29udGVudCIsInRhYmxlT3B0aW9ucyIsInNlYXJjaENvbnRyb2wiLCJkZXNjcmlwdGlvbkxhYmVsIiwiY29udHJvbENvbnRhaW5lciIsInN1ZmZpeCIsInNlYXJjaENvbnRhaW5lciIsIndyYXBwZXIiLCJpbnNlcnRBZnRlciIsIkNvbnRyb2xDb2x1bW5zIiwiY29udGFpbmVyU2VhcmNoIiwic2hvd0FsbCIsImNvbnRhaW5lckxpc3QiLCJpcyIsIkNvbnRyb2xDYXB0aW9uIiwiQ29udHJvbEZpbHRlckNsZWFyIiwiQ29udHJvbERpdmlkZXIiLCJGaWx0ZXIiLCJzZWFyY2hWYWx1ZSIsIkZpbHRlclRleHQiLCJfRmlsdGVyIiwiYXV0b1NlYXJjaCIsIl92YWx1ZSIsImF0dHJCdG4iLCJGaWx0ZXJOdW1iZXIiLCJudW1iZXJTdGFydCIsIm51bWJlckVuZCIsImlucHV0U3RhcnQiLCJpbnB1dEVuZCIsInZhbHVlU3RhcnQiLCJ2YWx1ZUVuZCIsImlzc2V0U3RhcnQiLCJpc3NldEVuZCIsInN0YXJ0QXR0ciIsImVuZEF0dHIiLCJhdHRyU3RhcnQiLCJhdHRyRW5kIiwiRmlsdGVyRGF0ZSIsIkZpbHRlckRhdGV0aW1lIiwiRmlsdGVyRGF0ZU1vbnRoIiwiRmlsdGVyRGF0ZVJhbmdlIiwiZGF0ZVN0YXJ0IiwiZGF0ZUVuZCIsInN0YXJ0RW5kIiwiSFRNTElucHV0RWxlbWVudCIsInNob3dQaWNrZXIiLCJGaWx0ZXJEYXRldGltZVJhbmdlIiwiRmlsdGVyQ2hlY2tib3giLCJpbnB1dHMiLCJvcHRpb24iLCJjaGVja2VkIiwiX2NsYXNzIiwiRmlsdGVyUmFkaW8iLCJGaWx0ZXJTZWxlY3QiLCJpc011bHRpcGxlIiwic2VsZWN0T3B0aW9ucyIsIl9idWlsZE9wdGlvbiIsInJlbmRlckF0dHIiLCJncm91cEF0dHIiLCJncm91cE9wdGlvbnMiLCJncm91cE9wdGlvbiIsIm9wdGlvbkF0dHIiLCJvcHRpb25UZXh0IiwiaXRlbVZhbHVlIiwiRmlsdGVyU3dpdGNoIiwidmFsdWVZIiwiU2VhcmNoIiwiU2VhcmNoVGV4dCIsIl9TZWFyY2giLCJTZWFyY2hOdW1iZXIiLCJTZWFyY2hEYXRlIiwiU2VhcmNoRGF0ZU1vbnRoIiwiU2VhcmNoRGF0ZXRpbWUiLCJTZWFyY2hEYXRlUmFuZ2UiLCJTZWFyY2hEYXRldGltZVJhbmdlIiwiU2VhcmNoQ2hlY2tib3giLCJTZWFyY2hDaGVja2JveEJ0biIsIm9wdGlvbnNDbGFzcyIsImhhc2giLCJTZWFyY2hSYWRpbyIsImNoZWNrZWRBbGwiLCJTZWFyY2hSYWRpb0J0biIsIm9wdGlvbkFsbEhhc2giLCJvcHRpb25PcHRpb25zQ2xhc3MiLCJTZWFyY2hTZWxlY3QiLCJTZWFyY2hTd2l0Y2giLCJDb2x1bW4iLCJDb2x1bW5zRGF0ZSIsIl9Db2x1bW4iLCJmb3JtYXQiLCJkYXRlIiwiZ2V0RnVsbFllYXIiLCJtb250aE5hbWVzIiwiZ2V0TW9udGgiLCJtb250aE5hbWVzU2hvcnQiLCJnZXREYXRlIiwiZGF5TmFtZXMiLCJkYXlOYW1lc01pbiIsIkNvbHVtbnNEYXRldGltZSIsImdldEhvdXJzIiwiZ2V0TWludXRlcyIsImdldFNlY29uZHMiLCJmYWN0b3J5IiwibW9tZW50IiwidGhpcyIsImhvb2tDYWxsYmFjayIsImhvb2tzIiwic2V0SG9va0NhbGxiYWNrIiwiaGFzT3duUHJvcCIsImlzT2JqZWN0RW1wdHkiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiayIsImlzVW5kZWZpbmVkIiwiaXNOdW1iZXIiLCJpc0RhdGUiLCJhcnJMZW4iLCJ2YWx1ZU9mIiwiY3JlYXRlVVRDIiwibG9jYWxlIiwiY3JlYXRlTG9jYWxPclVUQyIsInV0YyIsImRlZmF1bHRQYXJzaW5nRmxhZ3MiLCJlbXB0eSIsInVudXNlZFRva2VucyIsInVudXNlZElucHV0IiwiY2hhcnNMZWZ0T3ZlciIsIm51bGxJbnB1dCIsImludmFsaWRFcmEiLCJpbnZhbGlkTW9udGgiLCJpbnZhbGlkRm9ybWF0IiwidXNlckludmFsaWRhdGVkIiwiaXNvIiwicGFyc2VkRGF0ZVBhcnRzIiwiZXJhIiwibWVyaWRpZW0iLCJyZmMyODIyIiwid2Vla2RheU1pc21hdGNoIiwiZ2V0UGFyc2luZ0ZsYWdzIiwibSIsIl9wZiIsImlzVmFsaWQiLCJmbGFncyIsInBhcnNlZFBhcnRzIiwiaXNOb3dWYWxpZCIsIl9kIiwiaW52YWxpZFdlZWtkYXkiLCJfc3RyaWN0IiwiYmlnSG91ciIsImlzRnJvemVuIiwiX2lzVmFsaWQiLCJjcmVhdGVJbnZhbGlkIiwiTmFOIiwibW9tZW50UHJvcGVydGllcyIsInVwZGF0ZUluUHJvZ3Jlc3MiLCJjb3B5Q29uZmlnIiwibW9tZW50UHJvcGVydGllc0xlbiIsIl9pc0FNb21lbnRPYmplY3QiLCJfaSIsIl9mIiwiX2wiLCJfdHptIiwiX2lzVVRDIiwiX29mZnNldCIsIl9sb2NhbGUiLCJNb21lbnQiLCJjb25maWciLCJ1cGRhdGVPZmZzZXQiLCJpc01vbWVudCIsIm1zZyIsInN1cHByZXNzRGVwcmVjYXRpb25XYXJuaW5ncyIsImRlcHJlY2F0ZSIsImZpcnN0VGltZSIsImRlcHJlY2F0aW9uSGFuZGxlciIsImFyZyIsImFyZ0xlbiIsInN0YWNrIiwiZGVwcmVjYXRpb25zIiwiZGVwcmVjYXRlU2ltcGxlIiwiaXNGdW5jdGlvbiIsIl9jb25maWciLCJfZGF5T2ZNb250aE9yZGluYWxQYXJzZUxlbmllbnQiLCJfZGF5T2ZNb250aE9yZGluYWxQYXJzZSIsIl9vcmRpbmFsUGFyc2UiLCJtZXJnZUNvbmZpZ3MiLCJwYXJlbnRDb25maWciLCJjaGlsZENvbmZpZyIsIkxvY2FsZSIsImtleXMiLCJkZWZhdWx0Q2FsZW5kYXIiLCJzYW1lRGF5IiwibmV4dERheSIsIm5leHRXZWVrIiwibGFzdERheSIsImxhc3RXZWVrIiwic2FtZUVsc2UiLCJjYWxlbmRhciIsIm1vbSIsIm5vdyIsIm91dHB1dCIsIl9jYWxlbmRhciIsInplcm9GaWxsIiwibnVtYmVyIiwidGFyZ2V0TGVuZ3RoIiwiZm9yY2VTaWduIiwiYWJzTnVtYmVyIiwiYWJzIiwiemVyb3NUb0ZpbGwiLCJzaWduIiwicG93IiwiZm9ybWF0dGluZ1Rva2VucyIsImxvY2FsRm9ybWF0dGluZ1Rva2VucyIsImZvcm1hdEZ1bmN0aW9ucyIsImZvcm1hdFRva2VuRnVuY3Rpb25zIiwiYWRkRm9ybWF0VG9rZW4iLCJ0b2tlbiIsInBhZGRlZCIsIm9yZGluYWwiLCJsb2NhbGVEYXRhIiwicmVtb3ZlRm9ybWF0dGluZ1Rva2VucyIsIm1ha2VGb3JtYXRGdW5jdGlvbiIsImZvcm1hdE1vbWVudCIsImludmFsaWREYXRlIiwiZXhwYW5kRm9ybWF0IiwicmVwbGFjZUxvbmdEYXRlRm9ybWF0VG9rZW5zIiwibG9uZ0RhdGVGb3JtYXQiLCJsYXN0SW5kZXgiLCJkZWZhdWx0TG9uZ0RhdGVGb3JtYXQiLCJMVFMiLCJMVCIsIkwiLCJMTCIsIkxMTCIsIkxMTEwiLCJfbG9uZ0RhdGVGb3JtYXQiLCJmb3JtYXRVcHBlciIsInRvayIsImRlZmF1bHRJbnZhbGlkRGF0ZSIsIl9pbnZhbGlkRGF0ZSIsImRlZmF1bHRPcmRpbmFsIiwiZGVmYXVsdERheU9mTW9udGhPcmRpbmFsUGFyc2UiLCJfb3JkaW5hbCIsImRlZmF1bHRSZWxhdGl2ZVRpbWUiLCJmdXR1cmUiLCJwYXN0IiwicyIsInNzIiwibW0iLCJoIiwiaGgiLCJkZCIsInciLCJ3dyIsIk0iLCJNTSIsInkiLCJ5eSIsInJlbGF0aXZlVGltZSIsIndpdGhvdXRTdWZmaXgiLCJpc0Z1dHVyZSIsIl9yZWxhdGl2ZVRpbWUiLCJwYXN0RnV0dXJlIiwiZGlmZiIsImFsaWFzZXMiLCJEIiwiZGF0ZXMiLCJkYXlzIiwiZGF5Iiwid2Vla2RheXMiLCJ3ZWVrZGF5IiwiRSIsImlzb3dlZWtkYXlzIiwiaXNvd2Vla2RheSIsIkRERCIsImRheW9meWVhcnMiLCJkYXlvZnllYXIiLCJob3VycyIsImhvdXIiLCJtcyIsIm1pbGxpc2Vjb25kcyIsIm1pbGxpc2Vjb25kIiwibWludXRlcyIsIm1pbnV0ZSIsIm1vbnRocyIsIm1vbnRoIiwiUSIsInF1YXJ0ZXJzIiwicXVhcnRlciIsInNlY29uZHMiLCJzZWNvbmQiLCJnZyIsIndlZWt5ZWFycyIsIndlZWt5ZWFyIiwiR0ciLCJpc293ZWVreWVhcnMiLCJpc293ZWVreWVhciIsIndlZWtzIiwid2VlayIsIlciLCJpc293ZWVrcyIsImlzb3dlZWsiLCJ5ZWFycyIsInllYXIiLCJub3JtYWxpemVVbml0cyIsInVuaXRzIiwibm9ybWFsaXplT2JqZWN0VW5pdHMiLCJpbnB1dE9iamVjdCIsIm5vcm1hbGl6ZWRJbnB1dCIsIm5vcm1hbGl6ZWRQcm9wIiwicHJpb3JpdGllcyIsImlzb1dlZWtkYXkiLCJkYXlPZlllYXIiLCJ3ZWVrWWVhciIsImlzb1dlZWtZZWFyIiwiaXNvV2VlayIsImdldFByaW9yaXRpemVkVW5pdHMiLCJ1bml0c09iaiIsInByaW9yaXR5IiwibWF0Y2gxIiwibWF0Y2gyIiwibWF0Y2gzIiwibWF0Y2g0IiwibWF0Y2g2IiwibWF0Y2gxdG8yIiwibWF0Y2gzdG80IiwibWF0Y2g1dG82IiwibWF0Y2gxdG8zIiwibWF0Y2gxdG80IiwibWF0Y2gxdG82IiwibWF0Y2hVbnNpZ25lZCIsIm1hdGNoU2lnbmVkIiwibWF0Y2hPZmZzZXQiLCJtYXRjaFNob3J0T2Zmc2V0IiwibWF0Y2hUaW1lc3RhbXAiLCJtYXRjaFdvcmQiLCJtYXRjaDF0bzJOb0xlYWRpbmdaZXJvIiwibWF0Y2gxdG8ySGFzWmVybyIsInJlZ2V4ZXMiLCJhZGRSZWdleFRva2VuIiwic3RyaWN0UmVnZXgiLCJpc1N0cmljdCIsImdldFBhcnNlUmVnZXhGb3JUb2tlbiIsInVuZXNjYXBlRm9ybWF0IiwicmVnZXhFc2NhcGUiLCJtYXRjaGVkIiwicDEiLCJwMiIsInAzIiwicDQiLCJhYnNGbG9vciIsInRvSW50IiwiYXJndW1lbnRGb3JDb2VyY2lvbiIsImNvZXJjZWROdW1iZXIiLCJpc0Zpbml0ZSIsInRva2VucyIsImFkZFBhcnNlVG9rZW4iLCJ0b2tlbkxlbiIsImFkZFdlZWtQYXJzZVRva2VuIiwiX3ciLCJhZGRUaW1lVG9BcnJheUZyb21Ub2tlbiIsIl9hIiwiaXNMZWFwWWVhciIsIllFQVIiLCJNT05USCIsIkRBVEUiLCJIT1VSIiwiTUlOVVRFIiwiU0VDT05EIiwiTUlMTElTRUNPTkQiLCJXRUVLIiwiV0VFS0RBWSIsInBhcnNlVHdvRGlnaXRZZWFyIiwiZGF5c0luWWVhciIsImdldFNldFllYXIiLCJtYWtlR2V0U2V0IiwiZ2V0SXNMZWFwWWVhciIsImtlZXBUaW1lIiwic2V0JDEiLCJpc1VUQyIsImdldFVUQ01pbGxpc2Vjb25kcyIsImdldE1pbGxpc2Vjb25kcyIsImdldFVUQ1NlY29uZHMiLCJnZXRVVENNaW51dGVzIiwiZ2V0VVRDSG91cnMiLCJnZXRVVENEYXRlIiwiZ2V0VVRDRGF5IiwiZ2V0RGF5IiwiZ2V0VVRDTW9udGgiLCJnZXRVVENGdWxsWWVhciIsInNldFVUQ01pbGxpc2Vjb25kcyIsInNldE1pbGxpc2Vjb25kcyIsInNldFVUQ1NlY29uZHMiLCJzZXRTZWNvbmRzIiwic2V0VVRDTWludXRlcyIsInNldE1pbnV0ZXMiLCJzZXRVVENIb3VycyIsInNldEhvdXJzIiwic2V0VVRDRGF0ZSIsInNldERhdGUiLCJzZXRVVENGdWxsWWVhciIsInNldEZ1bGxZZWFyIiwic3RyaW5nR2V0Iiwic3RyaW5nU2V0IiwicHJpb3JpdGl6ZWQiLCJwcmlvcml0aXplZExlbiIsIm1vZCIsIngiLCJkYXlzSW5Nb250aCIsIm1vZE1vbnRoIiwibW9udGhzU2hvcnQiLCJtb250aHNTaG9ydFJlZ2V4IiwibW9udGhzUmVnZXgiLCJtb250aHNQYXJzZSIsImRlZmF1bHRMb2NhbGVNb250aHMiLCJkZWZhdWx0TG9jYWxlTW9udGhzU2hvcnQiLCJNT05USFNfSU5fRk9STUFUIiwiZGVmYXVsdE1vbnRoc1Nob3J0UmVnZXgiLCJkZWZhdWx0TW9udGhzUmVnZXgiLCJsb2NhbGVNb250aHMiLCJfbW9udGhzIiwiaXNGb3JtYXQiLCJsb2NhbGVNb250aHNTaG9ydCIsIl9tb250aHNTaG9ydCIsImhhbmRsZVN0cmljdFBhcnNlIiwibW9udGhOYW1lIiwiaWkiLCJsbGMiLCJ0b0xvY2FsZUxvd2VyQ2FzZSIsIl9tb250aHNQYXJzZSIsIl9sb25nTW9udGhzUGFyc2UiLCJfc2hvcnRNb250aHNQYXJzZSIsImxvY2FsZU1vbnRoc1BhcnNlIiwiX21vbnRoc1BhcnNlRXhhY3QiLCJzZXRNb250aCIsInNldFVUQ01vbnRoIiwiZ2V0U2V0TW9udGgiLCJnZXREYXlzSW5Nb250aCIsImNvbXB1dGVNb250aHNQYXJzZSIsIl9tb250aHNTaG9ydFN0cmljdFJlZ2V4IiwiX21vbnRoc1Nob3J0UmVnZXgiLCJfbW9udGhzU3RyaWN0UmVnZXgiLCJfbW9udGhzUmVnZXgiLCJjbXBMZW5SZXYiLCJzaG9ydFBpZWNlcyIsImxvbmdQaWVjZXMiLCJtaXhlZFBpZWNlcyIsInNob3J0UCIsImxvbmdQIiwiY3JlYXRlRGF0ZSIsImNyZWF0ZVVUQ0RhdGUiLCJVVEMiLCJmaXJzdFdlZWtPZmZzZXQiLCJkb3ciLCJkb3kiLCJmd2QiLCJmd2RsdyIsImRheU9mWWVhckZyb21XZWVrcyIsImxvY2FsV2Vla2RheSIsIndlZWtPZmZzZXQiLCJyZXNZZWFyIiwicmVzRGF5T2ZZZWFyIiwid2Vla09mWWVhciIsInJlc1dlZWsiLCJ3ZWVrc0luWWVhciIsIndlZWtPZmZzZXROZXh0IiwibG9jYWxlV2VlayIsIl93ZWVrIiwiZGVmYXVsdExvY2FsZVdlZWsiLCJsb2NhbGVGaXJzdERheU9mV2VlayIsImxvY2FsZUZpcnN0RGF5T2ZZZWFyIiwiZ2V0U2V0V2VlayIsImFkZCIsImdldFNldElTT1dlZWsiLCJ3ZWVrZGF5c01pbiIsIndlZWtkYXlzU2hvcnQiLCJ3ZWVrZGF5c01pblJlZ2V4Iiwid2Vla2RheXNTaG9ydFJlZ2V4Iiwid2Vla2RheXNSZWdleCIsIndlZWtkYXlzUGFyc2UiLCJwYXJzZVdlZWtkYXkiLCJwYXJzZUlzb1dlZWtkYXkiLCJzaGlmdFdlZWtkYXlzIiwid3MiLCJkZWZhdWx0TG9jYWxlV2Vla2RheXMiLCJkZWZhdWx0TG9jYWxlV2Vla2RheXNTaG9ydCIsImRlZmF1bHRMb2NhbGVXZWVrZGF5c01pbiIsImRlZmF1bHRXZWVrZGF5c1JlZ2V4IiwiZGVmYXVsdFdlZWtkYXlzU2hvcnRSZWdleCIsImRlZmF1bHRXZWVrZGF5c01pblJlZ2V4IiwibG9jYWxlV2Vla2RheXMiLCJfd2Vla2RheXMiLCJsb2NhbGVXZWVrZGF5c1Nob3J0IiwiX3dlZWtkYXlzU2hvcnQiLCJsb2NhbGVXZWVrZGF5c01pbiIsIl93ZWVrZGF5c01pbiIsImhhbmRsZVN0cmljdFBhcnNlJDEiLCJ3ZWVrZGF5TmFtZSIsIl93ZWVrZGF5c1BhcnNlIiwiX3Nob3J0V2Vla2RheXNQYXJzZSIsIl9taW5XZWVrZGF5c1BhcnNlIiwibG9jYWxlV2Vla2RheXNQYXJzZSIsIl93ZWVrZGF5c1BhcnNlRXhhY3QiLCJfZnVsbFdlZWtkYXlzUGFyc2UiLCJnZXRTZXREYXlPZldlZWsiLCJnZXRTZXRMb2NhbGVEYXlPZldlZWsiLCJnZXRTZXRJU09EYXlPZldlZWsiLCJjb21wdXRlV2Vla2RheXNQYXJzZSIsIl93ZWVrZGF5c1N0cmljdFJlZ2V4IiwiX3dlZWtkYXlzUmVnZXgiLCJfd2Vla2RheXNTaG9ydFN0cmljdFJlZ2V4IiwiX3dlZWtkYXlzU2hvcnRSZWdleCIsIl93ZWVrZGF5c01pblN0cmljdFJlZ2V4IiwiX3dlZWtkYXlzTWluUmVnZXgiLCJtaW5QaWVjZXMiLCJtaW5wIiwic2hvcnRwIiwibG9uZ3AiLCJoRm9ybWF0Iiwia0Zvcm1hdCIsImxvd2VyY2FzZSIsIm1hdGNoTWVyaWRpZW0iLCJfbWVyaWRpZW1QYXJzZSIsImtJbnB1dCIsIl9pc1BtIiwiaXNQTSIsIl9tZXJpZGllbSIsInBvcyIsInBvczEiLCJwb3MyIiwibG9jYWxlSXNQTSIsImRlZmF1bHRMb2NhbGVNZXJpZGllbVBhcnNlIiwiZ2V0U2V0SG91ciIsImxvY2FsZU1lcmlkaWVtIiwiaXNMb3dlciIsImJhc2VDb25maWciLCJkYXlPZk1vbnRoT3JkaW5hbFBhcnNlIiwibWVyaWRpZW1QYXJzZSIsImxvY2FsZXMiLCJsb2NhbGVGYW1pbGllcyIsImdsb2JhbExvY2FsZSIsImNvbW1vblByZWZpeCIsImFycjEiLCJhcnIyIiwibWlubCIsIm5vcm1hbGl6ZUxvY2FsZSIsImNob29zZUxvY2FsZSIsIm5hbWVzIiwiaiIsImxvYWRMb2NhbGUiLCJpc0xvY2FsZU5hbWVTYW5lIiwib2xkTG9jYWxlIiwiYWxpYXNlZFJlcXVpcmUiLCJfYWJiciIsImdldFNldEdsb2JhbExvY2FsZSIsInZhbHVlcyIsImdldExvY2FsZSIsImRlZmluZUxvY2FsZSIsImFiYnIiLCJwYXJlbnRMb2NhbGUiLCJ1cGRhdGVMb2NhbGUiLCJ0bXBMb2NhbGUiLCJsaXN0TG9jYWxlcyIsImNoZWNrT3ZlcmZsb3ciLCJfb3ZlcmZsb3dEYXlPZlllYXIiLCJfb3ZlcmZsb3dXZWVrcyIsIl9vdmVyZmxvd1dlZWtkYXkiLCJleHRlbmRlZElzb1JlZ2V4IiwiYmFzaWNJc29SZWdleCIsInR6UmVnZXgiLCJpc29EYXRlcyIsImlzb1RpbWVzIiwiYXNwTmV0SnNvblJlZ2V4Iiwib2JzT2Zmc2V0cyIsIlVUIiwiR01UIiwiRURUIiwiRVNUIiwiQ0RUIiwiQ1NUIiwiTURUIiwiTVNUIiwiUERUIiwiUFNUIiwiY29uZmlnRnJvbUlTTyIsImwiLCJhbGxvd1RpbWUiLCJkYXRlRm9ybWF0IiwidGltZUZvcm1hdCIsInR6Rm9ybWF0IiwiaXNvRGF0ZXNMZW4iLCJpc29UaW1lc0xlbiIsImNvbmZpZ0Zyb21TdHJpbmdBbmRGb3JtYXQiLCJleHRyYWN0RnJvbVJGQzI4MjJTdHJpbmdzIiwieWVhclN0ciIsIm1vbnRoU3RyIiwiZGF5U3RyIiwiaG91clN0ciIsIm1pbnV0ZVN0ciIsInNlY29uZFN0ciIsInVudHJ1bmNhdGVZZWFyIiwicHJlcHJvY2Vzc1JGQzI4MjIiLCJjaGVja1dlZWtkYXkiLCJ3ZWVrZGF5U3RyIiwicGFyc2VkSW5wdXQiLCJ3ZWVrZGF5UHJvdmlkZWQiLCJ3ZWVrZGF5QWN0dWFsIiwiY2FsY3VsYXRlT2Zmc2V0Iiwib2JzT2Zmc2V0IiwibWlsaXRhcnlPZmZzZXQiLCJudW1PZmZzZXQiLCJobSIsImNvbmZpZ0Zyb21SRkMyODIyIiwicGFyc2VkQXJyYXkiLCJjb25maWdGcm9tU3RyaW5nIiwiY3JlYXRlRnJvbUlucHV0RmFsbGJhY2siLCJfdXNlVVRDIiwiZGVmYXVsdHMiLCJjdXJyZW50RGF0ZUFycmF5Iiwibm93VmFsdWUiLCJjb25maWdGcm9tQXJyYXkiLCJjdXJyZW50RGF0ZSIsImV4cGVjdGVkV2Vla2RheSIsInllYXJUb1VzZSIsImRheU9mWWVhckZyb21XZWVrSW5mbyIsIl9kYXlPZlllYXIiLCJfbmV4dERheSIsInRlbXAiLCJ3ZWVrZGF5T3ZlcmZsb3ciLCJjdXJXZWVrIiwiY3JlYXRlTG9jYWwiLCJJU09fODYwMSIsIlJGQ18yODIyIiwic2tpcHBlZCIsInN0cmluZ0xlbmd0aCIsInRvdGFsUGFyc2VkSW5wdXRMZW5ndGgiLCJtZXJpZGllbUZpeFdyYXAiLCJlcmFzQ29udmVydFllYXIiLCJpc1BtIiwibWVyaWRpZW1Ib3VyIiwiY29uZmlnRnJvbVN0cmluZ0FuZEFycmF5IiwidGVtcENvbmZpZyIsImJlc3RNb21lbnQiLCJzY29yZVRvQmVhdCIsImN1cnJlbnRTY29yZSIsInZhbGlkRm9ybWF0Rm91bmQiLCJiZXN0Rm9ybWF0SXNWYWxpZCIsImNvbmZpZ2ZMZW4iLCJzY29yZSIsImNvbmZpZ0Zyb21PYmplY3QiLCJkYXlPckRhdGUiLCJjcmVhdGVGcm9tQ29uZmlnIiwicHJlcGFyZUNvbmZpZyIsInByZXBhcnNlIiwiY29uZmlnRnJvbUlucHV0IiwicHJvdG90eXBlTWluIiwib3RoZXIiLCJwcm90b3R5cGVNYXgiLCJwaWNrQnkiLCJtb21lbnRzIiwib3JkZXJpbmciLCJpc0R1cmF0aW9uVmFsaWQiLCJ1bml0SGFzRGVjaW1hbCIsIm9yZGVyTGVuIiwicGFyc2VGbG9hdCIsImlzVmFsaWQkMSIsImNyZWF0ZUludmFsaWQkMSIsImNyZWF0ZUR1cmF0aW9uIiwiRHVyYXRpb24iLCJkdXJhdGlvbiIsIl9taWxsaXNlY29uZHMiLCJfZGF5cyIsIl9idWJibGUiLCJpc0R1cmF0aW9uIiwiYWJzUm91bmQiLCJyb3VuZCIsImNvbXBhcmVBcnJheXMiLCJhcnJheTEiLCJhcnJheTIiLCJkb250Q29udmVydCIsImxlbmd0aERpZmYiLCJkaWZmcyIsIm9mZnNldCIsInNlcGFyYXRvciIsInV0Y09mZnNldCIsIm9mZnNldEZyb21TdHJpbmciLCJjaHVua09mZnNldCIsIm1hdGNoZXIiLCJjaHVuayIsImNsb25lV2l0aE9mZnNldCIsIm1vZGVsIiwiY2xvbmUiLCJzZXRUaW1lIiwibG9jYWwiLCJnZXREYXRlT2Zmc2V0IiwiZ2V0VGltZXpvbmVPZmZzZXQiLCJnZXRTZXRPZmZzZXQiLCJrZWVwTG9jYWxUaW1lIiwia2VlcE1pbnV0ZXMiLCJsb2NhbEFkanVzdCIsIl9jaGFuZ2VJblByb2dyZXNzIiwiYWRkU3VidHJhY3QiLCJnZXRTZXRab25lIiwic2V0T2Zmc2V0VG9VVEMiLCJzZXRPZmZzZXRUb0xvY2FsIiwic3VidHJhY3QiLCJzZXRPZmZzZXRUb1BhcnNlZE9mZnNldCIsInRab25lIiwiaGFzQWxpZ25lZEhvdXJPZmZzZXQiLCJpc0RheWxpZ2h0U2F2aW5nVGltZSIsImlzRGF5bGlnaHRTYXZpbmdUaW1lU2hpZnRlZCIsIl9pc0RTVFNoaWZ0ZWQiLCJ0b0FycmF5IiwiaXNMb2NhbCIsImlzVXRjT2Zmc2V0IiwiaXNVdGMiLCJhc3BOZXRSZWdleCIsImlzb1JlZ2V4IiwicmV0IiwiZGlmZlJlcyIsInBhcnNlSXNvIiwibW9tZW50c0RpZmZlcmVuY2UiLCJpbnZhbGlkIiwiaW5wIiwicG9zaXRpdmVNb21lbnRzRGlmZmVyZW5jZSIsImJhc2UiLCJpc0FmdGVyIiwiaXNCZWZvcmUiLCJjcmVhdGVBZGRlciIsImRpcmVjdGlvbiIsInBlcmlvZCIsImR1ciIsInRtcCIsImlzQWRkaW5nIiwiaXNTdHJpbmciLCJpc01vbWVudElucHV0IiwiaXNOdW1iZXJPclN0cmluZ0FycmF5IiwiaXNNb21lbnRJbnB1dE9iamVjdCIsIm9iamVjdFRlc3QiLCJwcm9wZXJ0eVRlc3QiLCJwcm9wZXJ0aWVzIiwicHJvcGVydHkiLCJwcm9wZXJ0eUxlbiIsImFycmF5VGVzdCIsImRhdGFUeXBlVGVzdCIsImlzQ2FsZW5kYXJTcGVjIiwiZ2V0Q2FsZW5kYXJGb3JtYXQiLCJteU1vbWVudCIsImNhbGVuZGFyJDEiLCJ0aW1lIiwiZm9ybWF0cyIsInNvZCIsInN0YXJ0T2YiLCJjYWxlbmRhckZvcm1hdCIsImxvY2FsSW5wdXQiLCJlbmRPZiIsImlzQmV0d2VlbiIsImluY2x1c2l2aXR5IiwibG9jYWxGcm9tIiwibG9jYWxUbyIsImlzU2FtZSIsImlucHV0TXMiLCJpc1NhbWVPckFmdGVyIiwiaXNTYW1lT3JCZWZvcmUiLCJhc0Zsb2F0Iiwiem9uZURlbHRhIiwibW9udGhEaWZmIiwid2hvbGVNb250aERpZmYiLCJhbmNob3IiLCJhbmNob3IyIiwiYWRqdXN0IiwiZGVmYXVsdEZvcm1hdCIsImRlZmF1bHRGb3JtYXRVdGMiLCJ0b0lTT1N0cmluZyIsImtlZXBPZmZzZXQiLCJ0b0RhdGUiLCJpbnNwZWN0Iiwiem9uZSIsInByZWZpeCIsImRhdGV0aW1lIiwiaW5wdXRTdHJpbmciLCJwb3N0Zm9ybWF0IiwiaHVtYW5pemUiLCJmcm9tTm93IiwidG9Ob3ciLCJuZXdMb2NhbGVEYXRhIiwiTVNfUEVSX1NFQ09ORCIsIk1TX1BFUl9NSU5VVEUiLCJNU19QRVJfSE9VUiIsIk1TX1BFUl80MDBfWUVBUlMiLCJtb2QkMSIsImRpdmlkZW5kIiwiZGl2aXNvciIsImxvY2FsU3RhcnRPZkRhdGUiLCJ1dGNTdGFydE9mRGF0ZSIsInN0YXJ0T2ZEYXRlIiwidW5peCIsInRvT2JqZWN0IiwidG9KU09OIiwiaXNWYWxpZCQyIiwicGFyc2luZ0ZsYWdzIiwiaW52YWxpZEF0IiwiY3JlYXRpb25EYXRhIiwibWF0Y2hFcmFBYmJyIiwibWF0Y2hFcmFOYW1lIiwibWF0Y2hFcmFOYXJyb3ciLCJlcmFzUGFyc2UiLCJtYXRjaEVyYVllYXJPcmRpbmFsIiwiX2VyYVllYXJPcmRpbmFsUmVnZXgiLCJlcmFZZWFyT3JkaW5hbFBhcnNlIiwibG9jYWxlRXJhcyIsImVyYXMiLCJfZXJhcyIsInNpbmNlIiwidW50aWwiLCJJbmZpbml0eSIsImxvY2FsZUVyYXNQYXJzZSIsImVyYU5hbWUiLCJuYXJyb3ciLCJsb2NhbGVFcmFzQ29udmVydFllYXIiLCJnZXRFcmFOYW1lIiwiZ2V0RXJhTmFycm93IiwiZ2V0RXJhQWJiciIsImdldEVyYVllYXIiLCJlcmFzTmFtZVJlZ2V4IiwiY29tcHV0ZUVyYXNQYXJzZSIsIl9lcmFzTmFtZVJlZ2V4IiwiX2VyYXNSZWdleCIsImVyYXNBYmJyUmVnZXgiLCJfZXJhc0FiYnJSZWdleCIsImVyYXNOYXJyb3dSZWdleCIsIl9lcmFzTmFycm93UmVnZXgiLCJhYmJyUGllY2VzIiwibmFtZVBpZWNlcyIsIm5hcnJvd1BpZWNlcyIsImVyYXNOYW1lIiwiZXJhc0FiYnIiLCJlcmFzTmFycm93IiwiYWRkV2Vla1llYXJGb3JtYXRUb2tlbiIsImdldHRlciIsImdldFNldFdlZWtZZWFyIiwiZ2V0U2V0V2Vla1llYXJIZWxwZXIiLCJnZXRTZXRJU09XZWVrWWVhciIsImdldElTT1dlZWtzSW5ZZWFyIiwiZ2V0SVNPV2Vla3NJbklTT1dlZWtZZWFyIiwiZ2V0V2Vla3NJblllYXIiLCJ3ZWVrSW5mbyIsImdldFdlZWtzSW5XZWVrWWVhciIsIndlZWtzVGFyZ2V0Iiwic2V0V2Vla0FsbCIsImRheU9mWWVhckRhdGEiLCJnZXRTZXRRdWFydGVyIiwiZ2V0U2V0RGF5T2ZNb250aCIsImdldFNldERheU9mWWVhciIsImdldFNldE1pbnV0ZSIsImdldFNldFNlY29uZCIsImdldFNldE1pbGxpc2Vjb25kIiwicGFyc2VNcyIsImdldFpvbmVBYmJyIiwiZ2V0Wm9uZU5hbWUiLCJwcm90byIsIlN5bWJvbCIsImZvciIsImVyYU5hcnJvdyIsImVyYUFiYnIiLCJlcmFZZWFyIiwiaXNvV2Vla3MiLCJ3ZWVrc0luV2Vla1llYXIiLCJpc29XZWVrc0luWWVhciIsImlzb1dlZWtzSW5JU09XZWVrWWVhciIsInBhcnNlWm9uZSIsImlzRFNUIiwiem9uZUFiYnIiLCJ6b25lTmFtZSIsImlzRFNUU2hpZnRlZCIsImNyZWF0ZVVuaXgiLCJjcmVhdGVJblpvbmUiLCJwcmVQYXJzZVBvc3RGb3JtYXQiLCJwcm90byQxIiwiZmlyc3REYXlPZlllYXIiLCJmaXJzdERheU9mV2VlayIsImdldCQxIiwic2V0dGVyIiwibGlzdE1vbnRoc0ltcGwiLCJvdXQiLCJsaXN0V2Vla2RheXNJbXBsIiwibG9jYWxlU29ydGVkIiwibGlzdE1vbnRocyIsImxpc3RNb250aHNTaG9ydCIsImxpc3RXZWVrZGF5cyIsImxpc3RXZWVrZGF5c1Nob3J0IiwibGlzdFdlZWtkYXlzTWluIiwibGFuZ0RhdGEiLCJtYXRoQWJzIiwiYWRkU3VidHJhY3QkMSIsImFkZCQxIiwic3VidHJhY3QkMSIsImFic0NlaWwiLCJidWJibGUiLCJtb250aHNGcm9tRGF5cyIsIm1vbnRoc1RvRGF5cyIsImRheXNUb01vbnRocyIsImFzIiwibWFrZUFzIiwiYWxpYXMiLCJhc01pbGxpc2Vjb25kcyIsImFzU2Vjb25kcyIsImFzTWludXRlcyIsImFzSG91cnMiLCJhc0RheXMiLCJhc1dlZWtzIiwiYXNNb250aHMiLCJhc1F1YXJ0ZXJzIiwiYXNZZWFycyIsInZhbHVlT2YkMSIsImNsb25lJDEiLCJnZXQkMiIsIm1ha2VHZXR0ZXIiLCJ0aHJlc2hvbGRzIiwic3Vic3RpdHV0ZVRpbWVBZ28iLCJyZWxhdGl2ZVRpbWUkMSIsInBvc05lZ0R1cmF0aW9uIiwiZ2V0U2V0UmVsYXRpdmVUaW1lUm91bmRpbmciLCJyb3VuZGluZ0Z1bmN0aW9uIiwiZ2V0U2V0UmVsYXRpdmVUaW1lVGhyZXNob2xkIiwidGhyZXNob2xkIiwibGltaXQiLCJhcmdXaXRoU3VmZml4IiwiYXJnVGhyZXNob2xkcyIsIndpdGhTdWZmaXgiLCJ0aCIsImFicyQxIiwidG9JU09TdHJpbmckMSIsInRvdGFsU2lnbiIsInltU2lnbiIsImRheXNTaWduIiwiaG1zU2lnbiIsInRvRml4ZWQiLCJwcm90byQyIiwidG9Jc29TdHJpbmciLCJyZWxhdGl2ZVRpbWVSb3VuZGluZyIsInJlbGF0aXZlVGltZVRocmVzaG9sZCIsIkhUTUw1X0ZNVCIsIkRBVEVUSU1FX0xPQ0FMIiwiREFURVRJTUVfTE9DQUxfU0VDT05EUyIsIkRBVEVUSU1FX0xPQ0FMX01TIiwiVElNRSIsIlRJTUVfU0VDT05EUyIsIlRJTUVfTVMiLCJwbHVyYWwiLCJ3b3JkIiwiZm9ybXMiLCJyZWxhdGl2ZVRpbWVXaXRoUGx1cmFsIiwicnUiLCJzdGFuZGFsb25lIiwibG9uZ01vbnRoc1BhcnNlIiwic2hvcnRNb250aHNQYXJzZSIsIm1vbnRoc1N0cmljdFJlZ2V4IiwibW9udGhzU2hvcnRTdHJpY3RSZWdleCIsIkNvbHVtbnNEYXRlSHVtYW4iLCJfbGFuZyIsImRhdGVDb250ZW50IiwiQ29sdW1uc0h0bWwiLCJjb2x1bW5WYWx1ZSIsIkNvbHVtbnNOdW1iZXIiLCJDb2x1bW5zTW9uZXkiLCJjdXJyZW5jeSIsIkNvbHVtbnNOdW1iZXJzIiwiQ29sdW1uc1NlbGVjdCIsIm9yaWdpbmFsT3B0aW9ucyIsInNlbGVjdHMiLCJzdG9wUHJvcGFnYXRpb24iLCJzZWxlY3QiLCJDb2x1bW5zU3dpdGNoIiwiZGlzYWJsZWQiLCJ2YWx1ZU4iLCJvbkNoYW5nZSIsImNvbnRhaW5lcnMiLCJpc0NoZWNrZWQiLCJmb3JtU3dpdGNoIiwicmVjb3JkVGFibGUiLCJDb2x1bW5zVGV4dCIsIkNvbHVtbnNCdXR0b24iLCJDb2x1bW5zTGluayIsImxpbmtDb250ZW50IiwiQ29sdW1uc01lbnUiLCJsaW5rQXR0ciIsImxpbmtBdHRyaWJ1dGVzIiwiYnRuQXR0cmlidXRlcyIsIm1lbnVDb250ZW50IiwiZHJvcGRvd25NZW51IiwiZGV0YWNoIiwiZU9mZnNldCIsInRhcmdldCIsInRvcCIsIm91dGVySGVpZ2h0IiwiQ29sdW1uc0JhZGdlIiwiQ29sdW1uc0NvbXBvbmVudCIsIkNvbHVtbnNQcm9ncmVzcyIsInNob3dQZXJjZW50IiwiYmFyQ29sb3IiLCJiYXJXaWR0aCIsImJhckhlaWdodCIsInBlcmNlbnQiLCJwZXJjZW50VGV4dCIsImNvbG9yIiwiQ29sdW1uc0ltYWdlIiwiaW1nV2lkdGgiLCJpbWdIZWlnaHQiLCJpbWdCb3JkZXIiLCJpbWdTdHlsZSIsImVuIiwiYnV0dG9uR3JvdXAiLCJjdXN0b20iLCJwYWdlU2l6ZSIsInBhZ2VKdW1wIiwiY2FwdGlvbiIsImZpbHRlckNsZWFyIiwiZGl2aWRlciIsImRhdGVNb250aCIsImRhdGVSYW5nZSIsImRhdGV0aW1lUmFuZ2UiLCJjaGVja2JveCIsInJhZGlvIiwiY2hlY2tib3hCdG4iLCJyYWRpb0J0biIsImRhdGVIdW1hbiIsIm1vbmV5IiwibnVtYmVycyIsImJhZGdlIiwicHJvZ3Jlc3MiLCJpbWFnZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztFQUFBLElBQUlBLEdBQUcsR0FBR0MsTUFBTSxDQUFDQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7RUFDN0JGLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQyxHQUFHLDREQUE0RCxDQUFBO0VBQ3hGQSxHQUFHLENBQUMscUJBQXFCLENBQUMsR0FBRywwREFBMEQsQ0FBQTtFQUN2RkEsR0FBRyxDQUFDLG9CQUFvQixDQUFDLEdBQUcsb0JBQW9CLENBQUE7RUFDaERBLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxHQUFHLG1DQUFtQyxDQUFBO0VBQzlEQSxHQUFHLENBQUMsbUJBQW1CLENBQUMsR0FBRywwc0JBQTBzQixDQUFBO0VBQ3J1QkEsR0FBRyxDQUFDLHVCQUF1QixDQUFDLEdBQUcsd1NBQXdTLENBQUE7RUFDdlVBLEdBQUcsQ0FBQywyQkFBMkIsQ0FBQyxHQUFHLG9GQUFvRixDQUFBO0VBQ3ZIQSxHQUFHLENBQUMscUJBQXFCLENBQUMsR0FBRyw0RkFBNEYsQ0FBQTtFQUN6SEEsR0FBRyxDQUFDLHFCQUFxQixDQUFDLEdBQUcsK05BQStOLENBQUE7RUFDNVBBLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLHNWQUFzVixDQUFBO0VBQzlXQSxHQUFHLENBQUMsNEJBQTRC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