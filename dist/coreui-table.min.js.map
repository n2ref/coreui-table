{"version":3,"file":"coreui-table.min.js","sources":["coreui-table.min.js"],"sourcesContent":["(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, (global.CoreUI = global.CoreUI || {}, global.CoreUI.table = factory()));\n})(this, (function () { 'use strict';\n\n  function _assertThisInitialized(e) {\n    if (void 0 === e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    return e;\n  }\n  function _callSuper(t, o, e) {\n    return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e));\n  }\n  function _classCallCheck(a, n) {\n    if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\");\n  }\n  function _defineProperties(e, r) {\n    for (var t = 0; t < r.length; t++) {\n      var o = r[t];\n      o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o);\n    }\n  }\n  function _createClass(e, r, t) {\n    return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", {\n      writable: !1\n    }), e;\n  }\n  function _defineProperty(e, r, t) {\n    return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n      value: t,\n      enumerable: !0,\n      configurable: !0,\n      writable: !0\n    }) : e[r] = t, e;\n  }\n  function _getPrototypeOf(t) {\n    return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) {\n      return t.__proto__ || Object.getPrototypeOf(t);\n    }, _getPrototypeOf(t);\n  }\n  function _inherits(t, e) {\n    if (\"function\" != typeof e && null !== e) throw new TypeError(\"Super expression must either be null or a function\");\n    t.prototype = Object.create(e && e.prototype, {\n      constructor: {\n        value: t,\n        writable: !0,\n        configurable: !0\n      }\n    }), Object.defineProperty(t, \"prototype\", {\n      writable: !1\n    }), e && _setPrototypeOf(t, e);\n  }\n  function _isNativeReflectConstruct() {\n    try {\n      var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    } catch (t) {}\n    return (_isNativeReflectConstruct = function () {\n      return !!t;\n    })();\n  }\n  function _possibleConstructorReturn(t, e) {\n    if (e && (\"object\" == typeof e || \"function\" == typeof e)) return e;\n    if (void 0 !== e) throw new TypeError(\"Derived constructors may only return object or undefined\");\n    return _assertThisInitialized(t);\n  }\n  function _setPrototypeOf(t, e) {\n    return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) {\n      return t.__proto__ = e, t;\n    }, _setPrototypeOf(t, e);\n  }\n  function _toPrimitive(t, r) {\n    if (\"object\" != typeof t || !t) return t;\n    var e = t[Symbol.toPrimitive];\n    if (void 0 !== e) {\n      var i = e.call(t, r || \"default\");\n      if (\"object\" != typeof i) return i;\n      throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (\"string\" === r ? String : Number)(t);\n  }\n  function _toPropertyKey(t) {\n    var i = _toPrimitive(t, \"string\");\n    return \"symbol\" == typeof i ? i : i + \"\";\n  }\n  function _typeof(o) {\n    \"@babel/helpers - typeof\";\n\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n      return typeof o;\n    } : function (o) {\n      return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n    }, _typeof(o);\n  }\n\n  var tpl = Object.create(null);\n  tpl['columns/badge.html'] = '<span class=\"badge text-bg-<%= type %>\"><%= text %></span>';\n  tpl['columns/button.html'] = '<button type=\"button\"<%- attr %>><%- content %></button>';\n  tpl['columns/image.html'] = '<img <%- attr %>/>';\n  tpl['columns/link.html'] = '<a <%- attr %>><%- content %></a>';\n  tpl['columns/menu.html'] = ' <div class=\"btn-group\" role=\"group\"> <button type=\"button\" data-bs-toggle=\"dropdown\"<%- attr %>> <%- content %> </button> <ul class=\"dropdown-menu dropdown-menu-<%= position %>\"> <% $.each(items, function(key, item) { %> <% if (item.type === \\'link\\') { %> <li><a href=\"<%= item.url %>\"<%- item.attr %>><%- item.content %></a></li> <% } else if (item.type === \\'button\\') { %> <li> <button type=\"button\" id=\"btn-dropdown-<%= item.id %>\"<%- item.attr %>> <%- item.content %> </button> </li> <% } else if (item.type === \\'divider\\') { %> <li><hr class=\"dropdown-divider\"></li> <% } else if (item.type === \\'header\\') { %> <li><h6 class=\"dropdown-header\"><%- item.content %></h6></li> <% } %> <% }) %> </ul> </div>';\n  tpl['columns/progress.html'] = '<% if (description !== null) { %> <small class=\"text-body-secondary\"><%= description %></small> <% } %> <div class=\"d-inline-flex align-items-center\"> <div <%- attr %>> <div class=\"progress-bar bg-<%= color %>\" style=\"width:<%= percent %>%;\"></div> </div> <span><%= percentText %></span> </div>';\n  tpl['columns/select_label.html'] = '<input class=\"coreui-table__select-all form-check-input\" type=\"checkbox\" value=\"\">';\n  tpl['columns/select.html'] = '<input class=\"coreui-table__select form-check-input\" type=\"checkbox\" value=\"<%= index %>\">';\n  tpl['columns/switch.html'] = '<div class=\"form-switch\"> <input class=\"form-check-input coreui-table__switch\" type=\"checkbox\" data-field=\"<%= field %>\" value=\"<%= index %>\"<% if (checked) { %> checked<% } %><% if (disabled) { %> disabled<% } %>> </div>';\n  tpl['container.html'] = ' <div id=\"coreui-table-<%= id %>\" class=\"coreui-table<%= classes %>\"<% if (widthSizes) { %> style=\"<%= widthSizes.join(\\';\\') %>\"<% } %>> <div class=\"coreui-table__container position-relative\"> <div class=\"coreui-table__wrapper<%= classesWrapper %>\" <% if (heightSizes) { %>style=\"<%= heightSizes.join(\\';\\') %>\"<% } %>></div> </div> </div>';\n  tpl['controls/button_group.html'] = '<div class=\"btn-group\" role=\"group\"></div>';\n  tpl['controls/button_group/button.html'] = '<button type=\"button\" <%- attr %>><%- content %></button>';\n  tpl['controls/button_group/dropdown.html'] = '<div class=\"btn-group\" role=\"group\"> <button type=\"button\" data-bs-toggle=\"dropdown\"<%- attr %>><%- content %></button> <ul class=\"dropdown-menu dropdown-menu-<%= position %>\"></ul> </div>';\n  tpl['controls/button_group/dropdown/button.html'] = '<li> <button type=\"button\" class=\"dropdown-item\"><%- content %></button> </li>';\n  tpl['controls/button_group/dropdown/divider.html'] = '<li><hr class=\"dropdown-divider\"></li>';\n  tpl['controls/button_group/dropdown/link.html'] = '<li><a class=\"dropdown-item\" href=\"<%= url %>\"><%- content %></a></li>';\n  tpl['controls/button_group/link.html'] = '<a href=\"<%= url %>\"<%- attr %>><%- content %></a>';\n  tpl['controls/button.html'] = '<button type=\"button\"<%- attr %>><%- content %></button>';\n  tpl['controls/caption.html'] = '<div class=\"d-flex flex-column me-3\"> <small class=\"text-body-secondary fw-medium\"> <%= title %> <% if (description) { %> <i class=\"bi bi-question-circle coreui-table__cursor_help\" title=\"<%= description %>\"></i> <% } %> </small> <b class=\"text-nowrap\"><%= value %></b> </div>';\n  tpl['controls/columns.html'] = '<button type=\"button\"<%- btnAttr %>><%-btnContent%></button>';\n  tpl['controls/columns/list.html'] = ' <div class=\"coreui-table__columns px-3 pt-3 pb-4\"> <div class=\"mb-3\"> <div class=\"form-check coreui-table__check_all\"> <label class=\"form-check-label\"> <input class=\"form-check-input\" type=\"checkbox\" <% if (showAll === true) { %>checked<% } %>> <%= lang.all %> </label> </div> <% columns.map(function(column) { %> <div class=\"form-check coreui-table_check-column\"> <label class=\"form-check-label\"> <input class=\"form-check-input\" type=\"checkbox\" value=\"<%= column.field %>\" <% if (column.show === true) { %>checked<% } %>> <%= column.label %> </label> </div> <% }); %> </div> <button type=\"button\" <%- btnCompleteAttr %>> <%- btnCompleteContent %> </button> </div>';\n  tpl['controls/divider.html'] = '<div <%- attr %>><%= text %></div>';\n  tpl['controls/dropdown.html'] = ' <div class=\"btn-group\" role=\"group\"> <button type=\"button\" data-bs-toggle=\"dropdown\"<%- attr %>><%- content %></button> <ul class=\"dropdown-menu dropdown-menu-<%= position %>\"></ul> </div>';\n  tpl['controls/dropdown/button.html'] = '<li> <button type=\"button\" class=\"dropdown-item\"><%- content %></button> </li>';\n  tpl['controls/dropdown/divider.html'] = '<li><hr class=\"dropdown-divider\"></li>';\n  tpl['controls/dropdown/link.html'] = '<li><a class=\"dropdown-item\" href=\"<%= url %>\"><%- content %></a></li>';\n  tpl['controls/filter_clear.html'] = '<button type=\"button\" <%- attr %>><%- content %></button>';\n  tpl['controls/link.html'] = '<a href=\"<%- url %>\"<%- attr %>><%- content %></a>';\n  tpl['controls/page-jump.html'] = ' <div class=\"coreui-table__page_jump_container\"> <div <%- attr %>> <input type=\"number\" class=\"form-control border-secondary-subtle\" min=\"1\"> <button class=\"btn btn-outline-secondary border-secondary-subtle\" type=\"button\"> <i class=\"bi bi-chevron-compact-right\"></i> </button> </div> </div>';\n  tpl['controls/page-size.html'] = ' <select <%- attr %>> <% recordsPerPageList.map(function(count) { %> <option value=\"<%= count %>\"<% if (recordsPerPage == count) { %>selected<% } %>> <% if (count == \\'0\\') { %><%= lang.all %><% } else { %><%= count %><% } %> </option> <% }); %> </select>';\n  tpl['controls/pages.html'] = ' <nav> <ul <%- attr %>> <% if (showPrev) { %> <li class=\"page-item coreui-table__page_prev <% if ( ! isActivePrev) { %> disabled<% } %>\"> <button type=\"button\" class=\"page-link\"> <i class=\"bi bi-chevron-left\"></i> </button> </li> <% } %> <% if (showPageFirst) { %> <li class=\"page-item\"> <button type=\"button\" class=\"page-link coreui-table__page\"> 1 </button> </li> <% } %> <% if (showDividerStart) { %> <li class=\"page-item disabled\"> <span class=\"page-link px-1\">...</span> </li> <% } %> <% pages.map(function(page) { %> <% if (page == currentPage) { %> <li class=\"page-item active\"> <span class=\"page-link\"><%= page %></span> </li> <% } else { %> <li class=\"page-item\"> <button type=\"button\" class=\"page-link coreui-table__page\"> <%= page %> </button> </li> <% } %> <% }); %> <% if (showDividerEnd) { %> <li class=\"page-item disabled\"> <span class=\"page-link px-1\">...</span> </li> <% } %> <% if (showPageLast) { %> <li class=\"page-item\"> <button type=\"button\" class=\"page-link coreui-table__page\"> <%= pagesTotal %> </button> </li> <% } %> <% if (showNext) { %> <li class=\"page-item coreui-table__page_next<% if ( ! isActiveNext) { %> disabled<% } %>\"> <button type=\"button\" class=\"page-link\"> <i class=\"bi bi-chevron-right\"></i> </button> </li> <% } %> </ul> </nav>';\n  tpl['controls/search.html'] = '<div class=\"btn-group\"> <button type=\"button\"<%- btnAttr %>><%- btnContent %></button> <%- btnClear %> </div> ';\n  tpl['controls/search/clear.html'] = '<button type=\"button\" <%- attr %>><%- content %></button> ';\n  tpl['controls/search/container.html'] = ' <div class=\"coreui-table__search px-3 pt-3 pb-4\"> <div class=\"mb-3 coreui-table__search_controls\"></div> <div class=\"d-flex flex-sm-wrap flex-md-nowrap\"> <div class=\"d-none d-md-block\" style=\"width:<%= labelWidth %>;min-width:<%= labelWidth %>\"></div> <div class=\"d-flex justify-content-start flex-wrap gap-2\"> <button type=\"button\" <%- btnCompleteAttr %>> <%- btnCompleteContent %> </button> </div> </div> </div>';\n  tpl['controls/search/control.html'] = '<div class=\"mb-2 d-flex flex-column flex-md-row \"> <label class=\"col-form-label fw-medium text-start text-md-end pe-2\" style=\"min-width:<%= labelWidth %>;width:<%= labelWidth %>\"> <%= label %> <% if (descriptionLabel) { %> <div class=\"text-muted fw-normal\"> <small><%= descriptionLabel %></small> </div> <% } %> </label> <div class=\"flex-fill coreui-table__search-control_content\"> <% if (suffix) { %><%- suffix %><% } %> <% if (description) { %> <div class=\"text-muted fw-normal\"> <small><%= description %></small> </div> <% } %> </div> </div>';\n  tpl['controls/total.html'] = '<div <%- attr %>> <small><%= lang.total %>: <span class=\"coreui-table__count-total\"><%= recordsTotal %></span></small> </div>';\n  tpl['filters/checkbox.html'] = ' <div class=\"btn-group\"> <% if (label) { %> <span class=\"input-group-text\"><%= label %></span> <% } %> <% $.each(items, function(key, item) { %> <input type=\"checkbox\" class=\"btn-check\" autocomplete=\"off\" id=\"<%= (field + key) %>\" name=\"<%= field %>\" value=\"<%= item.value %>\" <%= item.checked ? \\' checked\\' : \\'\\' %>> <label class=\"<%= item.class %>\" for=\"<%= (field + key) %>\"><%= item.text %></label> <% }); %> </div>';\n  tpl['filters/date_month.html'] = ' <div class=\"input-group\"> <% if (label) { %> <span class=\"input-group-text\"><%= label %></span> <% } %> <input type=\"month\" <%- attr %>> </div>';\n  tpl['filters/date_range.html'] = ' <div class=\"input-group\"> <% if (label) { %> <span class=\"input-group-text\"><%= label %></span> <% } %> <input type=\"date\" <%- startAttr %>> <input type=\"date\" <%- endAttr %>> </div>';\n  tpl['filters/date.html'] = ' <div class=\"input-group\"> <% if (label) { %> <span class=\"input-group-text\"><%= label %></span> <% } %> <input type=\"date\" <%- attr %>> </div>';\n  tpl['filters/datetime_range.html'] = ' <div class=\"input-group\"> <% if (label) { %> <span class=\"input-group-text\"><%= label %></span> <% } %> <input type=\"datetime-local\" <%- startAttr %>> <input type=\"datetime-local\" <%- endAttr %>> </div>';\n  tpl['filters/datetime.html'] = ' <div class=\"input-group\"> <% if (label) { %> <span class=\"input-group-text\"><%= label %></span> <% } %> <input type=\"datetime-local\" <%- attr %>> </div>';\n  tpl['filters/number.html'] = ' <div class=\"input-group\"> <% if (label) { %> <span class=\"input-group-text\"><%= label %></span> <% } %> <input type=\"number\" <%- attrStart %>> <input type=\"number\" <%- attrEnd %>> <button type=\"button\" <%- btnAttr %>> <%- btnContent %> </button> </div>';\n  tpl['filters/radio.html'] = ' <div class=\"btn-group\"> <% if (label) { %> <span class=\"input-group-text\"><%= label %></span> <% } %> <% $.each(items, function(key, item) { %> <input type=\"radio\" class=\"btn-check\" autocomplete=\"off\" id=\"<%= (field + key) %>\" name=\"<%= field %>\" value=\"<%= item.value %>\" <%= item.checked ? \\' checked\\' : \\'\\' %>> <label class=\"<%= item.class %>\" for=\"<%= (field + key) %>\"><%= item.text %></label> <% }); %> </div>';\n  tpl['filters/select.html'] = '<div class=\"input-group flex-nowrap\"> <% if (label) { %> <span class=\"input-group-text\"><%= label %></span> <% } %> <select <%- attr %>> <option>--</option> <% $.each(options, function(key, option) { %> <% if (option.type === \\'group\\') { %> <optgroup<%- option.attr %>> <% $.each(option.options, function(key, groupOption) { %> <option <%- groupOption.attr %>><%= groupOption.text %></option> <% }); %> </optgroup> <% } else { %> <option <%- option.attr %>><%= option.text %></option> <% } %> <% }); %> </select> </div>';\n  tpl['filters/switch.html'] = '<div class=\"form-check form-switch\"> <input class=\"form-check-input\" type=\"checkbox\" id=\"<%= (field + id) %>\" name=\"<%= field %>\" value=\"<%= valueY %>\" <%= checked ? \\' checked\\' : \\'\\' %>> <% if (label != \\'\\') { %> <label class=\"form-check-label\" for=\"<%= (field + id) %>\"><%= label %></label> <% } %> </div>';\n  tpl['filters/text.html'] = ' <div class=\"input-group\"> <% if (label) { %> <span class=\"input-group-text\"><%= label %></span> <% } %> <input type=\"text\" <%- attr %>> <button type=\"button\" <%- btnAttr %>> <%- btnContent %> </button> </div>';\n  tpl['search/checkbox-btn.html'] = ' <div class=\"pt-2\"> <div class=\"btn-group\"> <% options.map(function(option) { %> <input class=\"btn-check\" type=\"checkbox\" value=\"<%- option.value %>\" id=\"<%= option.hash %>\" autocomplete=\"off\" <%= option.checked ? \\' checked\\' : \\'\\' %>> <label class=\"<%= option.optionsClass %>\" for=\"<%= option.hash %>\"><%= option.text %></label> <% }); %> </div> </div>';\n  tpl['search/checkbox.html'] = ' <div class=\"pt-2\"> <% options.map(function(option) { %> <div class=\"form-check\"> <label class=\"form-check-label coreui-table_pointer\"> <input class=\"form-check-input\" type=\"checkbox\" value=\"<%- option.value %>\" <%= option.checked ? \\' checked\\' : \\'\\' %>> <%= option.text %> </label> </div> <% }); %> </div>';\n  tpl['search/date_month.html'] = ' <input type=\"month\" <%- attr %>>';\n  tpl['search/date_range.html'] = '<div> <input type=\"date\" <%- startAttr %>> <input type=\"date\" <%- endAttr %>> </div>';\n  tpl['search/date.html'] = ' <input type=\"date\" <%- attr %>>';\n  tpl['search/datetime_range.html'] = '<div> <input type=\"datetime-local\" <%- startAttr %>> <input type=\"datetime-local\" <%- endAttr %>> </div>';\n  tpl['search/datetime.html'] = ' <input type=\"datetime-local\" <%- attr %>>';\n  tpl['search/number.html'] = ' <input type=\"number\" <%- startAttr %>> <input type=\"number\" <%- endAttr %>>';\n  tpl['search/radio-btn.html'] = '<div class=\"pt-2\"> <div class=\"btn-group\"> <input class=\"btn-check coreui-table__all\" type=\"radio\" name=\"<%= field %>\" value=\"\" id=\"<%= optionAllHash %>\" autocomplete=\"off\" <%= checkedAll ? \\' checked\\' : \\'\\' %>> <label class=\"<%= optionOptionsClass %>\" for=\"<%= optionAllHash %>\"><%= lang.all %></label> <% options.map(function(option) { %> <input class=\"btn-check\" type=\"radio\" name=\"<%= field %>\" value=\"<%- option.value %>\" id=\"<%= option.hash %>\" autocomplete=\"off\" <%= option.checked ? \\' checked=\"checked\"\\' : \\'\\' %>\"> <label class=\"<%= option.optionsClass %>\" for=\"<%= option.hash %>\"><%= option.text %></label> <% }); %> </div> </div>';\n  tpl['search/radio.html'] = '<div class=\"pt-2\"> <div class=\"form-check\"> <label class=\"form-check-label coreui-table_pointer\"> <input class=\"form-check-input coreui-table__all\" type=\"radio\" name=\"<%= field %>\" value=\"\"<%= checkedAll ? \\' checked\\' : \\'\\' %>> <%= lang.all %> </label> </div> <% options.map(function(option) { %> <div class=\"form-check\"> <label class=\"form-check-label coreui-table_pointer\"> <input class=\"form-check-input\" type=\"radio\" name=\"<%= field %>\" value=\"<%- option.value %>\" <%= option.checked ? \\' checked=\"checked\"\\' : \\'\\' %>> <%= option.text %> </label> </div> <% }); %> </div>';\n  tpl['search/select.html'] = ' <select <%- attr %>> <option>--</option> <% $.each(options, function(key, option) { %> <% if (option.type === \\'group\\') { %> <optgroup<%- option.attr %>> <% $.each(option.options, function(key, groupOption) { %> <option <%- groupOption.attr %>><%= groupOption.text %></option> <% }); %> </optgroup> <% } else { %> <option <%- option.attr %>><%= option.text %></option> <% } %> <% }); %> </select>';\n  tpl['search/switch.html'] = '<div class=\"form-check form-switch pt-2\"> <input class=\"form-check-input\" type=\"checkbox\" id=\"<%= (field + id) %>\" name=\"<%= field %>\" value=\"<%= valueY %>\" <%= checked ? \\' checked\\' : \\'\\' %>> </div>';\n  tpl['search/text.html'] = '<input type=\"text\" <%- attr %>>';\n  tpl['table.html'] = ' <table class=\"table <%= classes %> mb-0\"> <colgroup> <% $.each(colGroups, function(key, columnGroup) { %> <col<% if (columnGroup.style) { %> style=\"<%= columnGroup.style %>\"<% } %>/> <% }); %> </colgroup> <% if (showHeaders) { %> <thead<% if (theadAttr) { %> <%- theadAttr %>\"<% } %>> <%- columnsHeader %> </thead> <% } %> <tbody></tbody> <% if (columnsFooter != \\'\\') { %> <tfoot> <%- columnsFooter %> </tfoot> <% } %> </table>';\n  tpl['table/columns/footer.html'] = '<tr> <% $.each(columns, function(key, column) { %> <td<%- column.attr%>><%- column.content %></td> <% }); %> </tr>';\n  tpl['table/columns/header.html'] = '<tr class=\"fw-medium bg-body\"> <% columns.map(function(column) { %> <td<%- column.attr%>> <span class=\"coreui-table__column-border\"></span> <span class=\"coreui-table__column-label\"><%- column.content %></span> </td> <% }); %> </tr>';\n  tpl['table/columns/menu/button.html'] = '<li><button <%- attr%>><%- text %></button></li>';\n  tpl['table/columns/menu/divider.html'] = '<li><hr class=\"dropdown-divider\"></li>';\n  tpl['table/columns/menu/header.html'] = '<li><h6 class=\"dropdown-header\"><%- text %></h6></li>';\n  tpl['table/columns/menu/link.html'] = '<li><a <%- attr%>><%- text %></a></li>';\n  tpl['table/columns/td.html'] = '<td<%- attr%>> <span class=\"coreui-table__column-border\"></span> <span class=\"coreui-table__column-label\"><%- label %></span> <% if (description) { %> <small class=\"coreui-table__column-description bi bi-question-circle text-body-secondary\" title=\"<%= description %>\" data-bs-toggle=\"tooltip\" data-bs-placement=\"bottom\"></small> <% } %> <% if (sortable === \\'asc\\') { %> <i class=\"coreui-table__column-sort bi bi-sort-down-alt\"></i> <% } else if (sortable === \\'desc\\') { %> <i class=\"coreui-table__column-sort bi bi-sort-down\"></i> <% } %> <% if (issetMenu) { %> <div class=\"dropdown d-inline fw-normal coreui-table__column-menu\"> <span class=\"dropdown-toggle <%= menuShowAlways %>\" data-bs-toggle=\"dropdown\"> <i class=\"bi bi-three-dots-vertical\"></i> </span> <ul class=\"dropdown-menu dropdown-menu-<%= menuPosition %>\"></ul> </div> <% } %> </td>';\n  tpl['table/columns/tr.html'] = '<tr class=\"fw-medium bg-body\"></tr>';\n  tpl['table/control.html'] = '<div id=\"coreui-table-control-<%= id %>\" class=\"coreui-table__control\"></div>';\n  tpl['table/controls/footer-out.html'] = ' <div class=\"coreui-table__footer d-flex justify-content-between\"> <% if (controlsLeft.length) { %> <div class=\"coreui-table__controls coreui-table__controls_left d-flex justify-content-start gap-2 flex-wrap flex-fill mb-1 mt-2 align-items-center\"></div> <% } %> <% if (controlsCenter.length) { %> <div class=\"coreui-table__controls coreui-table__controls_center d-flex justify-content-center gap-2 flex-wrap flex-fill mb-1 mt-2 align-items-center\"></div> <% } %> <% if (controlsRight.length) { %> <div class=\"coreui-table__controls coreui-table__controls_right d-flex justify-content-end gap-2 flex-wrap flex-fill mb-1 mt-2 align-items-center\"></div> <% } %> </div>';\n  tpl['table/controls/footer.html'] = ' <div class=\"coreui-table__footer ps-1 pe-1 d-flex justify-content-between border-top border-secondary-subtle\"> <% if (controlsLeft.length) { %> <div class=\"coreui-table__controls coreui-table__controls_left d-flex justify-content-start gap-2 flex-wrap flex-fill mb-1 mt-1 align-items-center\"></div> <% } %> <% if (controlsCenter.length) { %> <div class=\"coreui-table__controls coreui-table__controls_center d-flex justify-content-center gap-2 flex-wrap flex-fill mb-1 mt-1 align-items-center\"></div> <% } %> <% if (controlsRight.length) { %> <div class=\"coreui-table__controls coreui-table__controls_right d-flex justify-content-end gap-2 flex-wrap flex-fill mb-1 mt-1 align-items-center\"></div> <% } %> </div>';\n  tpl['table/controls/header-out.html'] = ' <div class=\"coreui-table__header d-flex justify-content-between\"> <% if (controlsLeft.length) { %> <div class=\"coreui-table__controls coreui-table__controls_left d-flex justify-content-start gap-2 flex-wrap flex-fill mb-2 mt-1 align-items-center\"></div> <% } %> <% if (controlsCenter.length) { %> <div class=\"coreui-table__controls coreui-table__controls_center d-flex justify-content-center gap-2 flex-wrap flex-fill mb-2 mt-1 align-items-center\"></div> <% } %> <% if (controlsRight.length) { %> <div class=\"coreui-table__controls coreui-table__controls_right d-flex justify-content-end gap-2 flex-wrap flex-fill mb-2 mt-1 align-items-center\"></div> <% } %> </div>';\n  tpl['table/controls/header.html'] = ' <div class=\"coreui-table__header ps-1 pe-1 d-flex justify-content-between border-bottom border-secondary-subtle\"> <% if (controlsLeft.length) { %> <div class=\"coreui-table__controls coreui-table__controls_left d-flex justify-content-start gap-2 flex-wrap flex-fill my-1 align-items-center\"></div> <% } %> <% if (controlsCenter.length) { %> <div class=\"coreui-table__controls coreui-table__controls_center d-flex justify-content-center gap-2 flex-wrap flex-fill my-1 align-items-center\"></div> <% } %> <% if (controlsRight.length) { %> <div class=\"coreui-table__controls coreui-table__controls_right d-flex justify-content-end gap-2 flex-wrap flex-fill my-1 align-items-center\"></div> <% } %> </div>';\n  tpl['table/loader.html'] = '<div class=\"coreui-table-lock position-absolute w-100 top-0 bottom-0\"> <div class=\"coreui-table-block bg-secondary-subtle position-absolute opacity-50 w-100 top-0 bottom-0\"></div> <div class=\"coreui-table-message position-relative shadow-sm d-flex align-content-center justify-content-start gap-2 mt-3 py-1 px-2 m-auto border border-secondary-subtle rounded-3 bg-body-secondary\"> <div class=\"spinner-border text-secondary align-self-center\"></div> <span class=\"lh-lg\"><%= lang.loading %></span> </div> </div>';\n  tpl['table/record.html'] = '<tr<%- attr %> data-record-index=\"<%= index %>\"> <% fields.map(function(field) { %> <td<%- field.attr %>></td> <% }); %> </tr>';\n  tpl['table/record/empty.html'] = '<tr class=\"coreui-table__record-empty\"> <td class=\"text-center\" colspan=\"<%= columnsCount %>\"><%= lang.emptyRecords %></td> </tr>';\n  tpl['table/record/expand.html'] = '<tr class=\"coreui-table__record-expanded\" style=\"display: none\"> <td colspan=\"<%= colspan %>\"></td> </tr>';\n  tpl['table/record/group.html'] = '<tr<%- attr %>> <td colspan=\"<%= colspan %>\" class=\"border-end\"></td> </tr>';\n\n  (function (f) {\n    if (typeof exports === \"object\" && typeof module !== \"undefined\") {\n      module.exports = f();\n    } else if (typeof define === \"function\" && define.amd) {\n      define([], f);\n    } else {\n      var g;\n      if (typeof window !== \"undefined\") {\n        g = window;\n      } else if (typeof global !== \"undefined\") {\n        g = global;\n      } else if (typeof self !== \"undefined\") {\n        g = self;\n      } else {\n        g = this;\n      }\n      g.ejs = f();\n    }\n  })(function () {\n    return function () {\n      function r(e, n, t) {\n        function o(i, f) {\n          if (!n[i]) {\n            if (!e[i]) {\n              var c = \"function\" == typeof require && require;\n              if (!f && c) return c(i, !0);\n              if (u) return u(i, !0);\n              var a = new Error(\"Cannot find module '\" + i + \"'\");\n              throw a.code = \"MODULE_NOT_FOUND\", a;\n            }\n            var p = n[i] = {\n              exports: {}\n            };\n            e[i][0].call(p.exports, function (r) {\n              var n = e[i][1][r];\n              return o(n || r);\n            }, p, p.exports, r, e, n, t);\n          }\n          return n[i].exports;\n        }\n        for (var u = \"function\" == typeof require && require, i = 0; i < t.length; i++) o(t[i]);\n        return o;\n      }\n      return r;\n    }()({\n      1: [function (require, module, exports) {\n\n        var fs = require(\"fs\");\n        var path = require(\"path\");\n        var utils = require(\"./utils\");\n        var scopeOptionWarned = false;\n        var _VERSION_STRING = require(\"../package.json\").version;\n        var _DEFAULT_OPEN_DELIMITER = \"<\";\n        var _DEFAULT_CLOSE_DELIMITER = \">\";\n        var _DEFAULT_DELIMITER = \"%\";\n        var _DEFAULT_LOCALS_NAME = \"locals\";\n        var _NAME = \"ejs\";\n        var _REGEX_STRING = \"(<%%|%%>|<%=|<%-|<%_|<%#|<%|%>|-%>|_%>)\";\n        var _OPTS_PASSABLE_WITH_DATA = [\"delimiter\", \"scope\", \"context\", \"debug\", \"compileDebug\", \"client\", \"_with\", \"rmWhitespace\", \"strict\", \"filename\", \"async\"];\n        var _OPTS_PASSABLE_WITH_DATA_EXPRESS = _OPTS_PASSABLE_WITH_DATA.concat(\"cache\");\n        var _BOM = /^\\uFEFF/;\n        var _JS_IDENTIFIER = /^[a-zA-Z_$][0-9a-zA-Z_$]*$/;\n        exports.cache = utils.cache;\n        exports.fileLoader = fs.readFileSync;\n        exports.localsName = _DEFAULT_LOCALS_NAME;\n        exports.promiseImpl = new Function(\"return this;\")().Promise;\n        exports.resolveInclude = function (name, filename, isDir) {\n          var dirname = path.dirname;\n          var extname = path.extname;\n          var resolve = path.resolve;\n          var includePath = resolve(isDir ? filename : dirname(filename), name);\n          var ext = extname(name);\n          if (!ext) {\n            includePath += \".ejs\";\n          }\n          return includePath;\n        };\n        function resolvePaths(name, paths) {\n          var filePath;\n          if (paths.some(function (v) {\n            filePath = exports.resolveInclude(name, v, true);\n            return fs.existsSync(filePath);\n          })) {\n            return filePath;\n          }\n        }\n        function getIncludePath(path, options) {\n          var includePath;\n          var filePath;\n          var views = options.views;\n          var match = /^[A-Za-z]+:\\\\|^\\//.exec(path);\n          if (match && match.length) {\n            path = path.replace(/^\\/*/, \"\");\n            if (Array.isArray(options.root)) {\n              includePath = resolvePaths(path, options.root);\n            } else {\n              includePath = exports.resolveInclude(path, options.root || \"/\", true);\n            }\n          } else {\n            if (options.filename) {\n              filePath = exports.resolveInclude(path, options.filename);\n              if (fs.existsSync(filePath)) {\n                includePath = filePath;\n              }\n            }\n            if (!includePath && Array.isArray(views)) {\n              includePath = resolvePaths(path, views);\n            }\n            if (!includePath && typeof options.includer !== \"function\") {\n              throw new Error('Could not find the include file \"' + options.escapeFunction(path) + '\"');\n            }\n          }\n          return includePath;\n        }\n        function handleCache(options, template) {\n          var func;\n          var filename = options.filename;\n          var hasTemplate = arguments.length > 1;\n          if (options.cache) {\n            if (!filename) {\n              throw new Error(\"cache option requires a filename\");\n            }\n            func = exports.cache.get(filename);\n            if (func) {\n              return func;\n            }\n            if (!hasTemplate) {\n              template = fileLoader(filename).toString().replace(_BOM, \"\");\n            }\n          } else if (!hasTemplate) {\n            if (!filename) {\n              throw new Error(\"Internal EJS error: no file name or template \" + \"provided\");\n            }\n            template = fileLoader(filename).toString().replace(_BOM, \"\");\n          }\n          func = exports.compile(template, options);\n          if (options.cache) {\n            exports.cache.set(filename, func);\n          }\n          return func;\n        }\n        function tryHandleCache(options, data, cb) {\n          var result;\n          if (!cb) {\n            if (typeof exports.promiseImpl == \"function\") {\n              return new exports.promiseImpl(function (resolve, reject) {\n                try {\n                  result = handleCache(options)(data);\n                  resolve(result);\n                } catch (err) {\n                  reject(err);\n                }\n              });\n            } else {\n              throw new Error(\"Please provide a callback function\");\n            }\n          } else {\n            try {\n              result = handleCache(options)(data);\n            } catch (err) {\n              return cb(err);\n            }\n            cb(null, result);\n          }\n        }\n        function fileLoader(filePath) {\n          return exports.fileLoader(filePath);\n        }\n        function includeFile(path, options) {\n          var opts = utils.shallowCopy(utils.createNullProtoObjWherePossible(), options);\n          opts.filename = getIncludePath(path, opts);\n          if (typeof options.includer === \"function\") {\n            var includerResult = options.includer(path, opts.filename);\n            if (includerResult) {\n              if (includerResult.filename) {\n                opts.filename = includerResult.filename;\n              }\n              if (includerResult.template) {\n                return handleCache(opts, includerResult.template);\n              }\n            }\n          }\n          return handleCache(opts);\n        }\n        function rethrow(err, str, flnm, lineno, esc) {\n          var lines = str.split(\"\\n\");\n          var start = Math.max(lineno - 3, 0);\n          var end = Math.min(lines.length, lineno + 3);\n          var filename = esc(flnm);\n          var context = lines.slice(start, end).map(function (line, i) {\n            var curr = i + start + 1;\n            return (curr == lineno ? \" >> \" : \"    \") + curr + \"| \" + line;\n          }).join(\"\\n\");\n          err.path = filename;\n          err.message = (filename || \"ejs\") + \":\" + lineno + \"\\n\" + context + \"\\n\\n\" + err.message;\n          throw err;\n        }\n        function stripSemi(str) {\n          return str.replace(/;(\\s*$)/, \"$1\");\n        }\n        exports.compile = function compile(template, opts) {\n          var templ;\n          if (opts && opts.scope) {\n            if (!scopeOptionWarned) {\n              console.warn(\"`scope` option is deprecated and will be removed in EJS 3\");\n              scopeOptionWarned = true;\n            }\n            if (!opts.context) {\n              opts.context = opts.scope;\n            }\n            delete opts.scope;\n          }\n          templ = new Template(template, opts);\n          return templ.compile();\n        };\n        exports.render = function (template, d, o) {\n          var data = d || utils.createNullProtoObjWherePossible();\n          var opts = o || utils.createNullProtoObjWherePossible();\n          if (arguments.length == 2) {\n            utils.shallowCopyFromList(opts, data, _OPTS_PASSABLE_WITH_DATA);\n          }\n          return handleCache(opts, template)(data);\n        };\n        exports.renderFile = function () {\n          var args = Array.prototype.slice.call(arguments);\n          var filename = args.shift();\n          var cb;\n          var opts = {\n            filename: filename\n          };\n          var data;\n          var viewOpts;\n          if (typeof arguments[arguments.length - 1] == \"function\") {\n            cb = args.pop();\n          }\n          if (args.length) {\n            data = args.shift();\n            if (args.length) {\n              utils.shallowCopy(opts, args.pop());\n            } else {\n              if (data.settings) {\n                if (data.settings.views) {\n                  opts.views = data.settings.views;\n                }\n                if (data.settings[\"view cache\"]) {\n                  opts.cache = true;\n                }\n                viewOpts = data.settings[\"view options\"];\n                if (viewOpts) {\n                  utils.shallowCopy(opts, viewOpts);\n                }\n              }\n              utils.shallowCopyFromList(opts, data, _OPTS_PASSABLE_WITH_DATA_EXPRESS);\n            }\n            opts.filename = filename;\n          } else {\n            data = utils.createNullProtoObjWherePossible();\n          }\n          return tryHandleCache(opts, data, cb);\n        };\n        exports.Template = Template;\n        exports.clearCache = function () {\n          exports.cache.reset();\n        };\n        function Template(text, optsParam) {\n          var opts = utils.hasOwnOnlyObject(optsParam);\n          var options = utils.createNullProtoObjWherePossible();\n          this.templateText = text;\n          this.mode = null;\n          this.truncate = false;\n          this.currentLine = 1;\n          this.source = \"\";\n          options.client = opts.client || false;\n          options.escapeFunction = opts.escape || opts.escapeFunction || utils.escapeXML;\n          options.compileDebug = opts.compileDebug !== false;\n          options.debug = !!opts.debug;\n          options.filename = opts.filename;\n          options.openDelimiter = opts.openDelimiter || exports.openDelimiter || _DEFAULT_OPEN_DELIMITER;\n          options.closeDelimiter = opts.closeDelimiter || exports.closeDelimiter || _DEFAULT_CLOSE_DELIMITER;\n          options.delimiter = opts.delimiter || exports.delimiter || _DEFAULT_DELIMITER;\n          options.strict = opts.strict || false;\n          options.context = opts.context;\n          options.cache = opts.cache || false;\n          options.rmWhitespace = opts.rmWhitespace;\n          options.root = opts.root;\n          options.includer = opts.includer;\n          options.outputFunctionName = opts.outputFunctionName;\n          options.localsName = opts.localsName || exports.localsName || _DEFAULT_LOCALS_NAME;\n          options.views = opts.views;\n          options.async = opts.async;\n          options.destructuredLocals = opts.destructuredLocals;\n          options.legacyInclude = typeof opts.legacyInclude != \"undefined\" ? !!opts.legacyInclude : true;\n          if (options.strict) {\n            options._with = false;\n          } else {\n            options._with = typeof opts._with != \"undefined\" ? opts._with : true;\n          }\n          this.opts = options;\n          this.regex = this.createRegex();\n        }\n        Template.modes = {\n          EVAL: \"eval\",\n          ESCAPED: \"escaped\",\n          RAW: \"raw\",\n          COMMENT: \"comment\",\n          LITERAL: \"literal\"\n        };\n        Template.prototype = {\n          createRegex: function () {\n            var str = _REGEX_STRING;\n            var delim = utils.escapeRegExpChars(this.opts.delimiter);\n            var open = utils.escapeRegExpChars(this.opts.openDelimiter);\n            var close = utils.escapeRegExpChars(this.opts.closeDelimiter);\n            str = str.replace(/%/g, delim).replace(/</g, open).replace(/>/g, close);\n            return new RegExp(str);\n          },\n          compile: function () {\n            var src;\n            var fn;\n            var opts = this.opts;\n            var prepended = \"\";\n            var appended = \"\";\n            var escapeFn = opts.escapeFunction;\n            var ctor;\n            var sanitizedFilename = opts.filename ? JSON.stringify(opts.filename) : \"undefined\";\n            if (!this.source) {\n              this.generateSource();\n              prepended += '  var __output = \"\";\\n' + \"  function __append(s) { if (s !== undefined && s !== null) __output += s }\\n\";\n              if (opts.outputFunctionName) {\n                if (!_JS_IDENTIFIER.test(opts.outputFunctionName)) {\n                  throw new Error(\"outputFunctionName is not a valid JS identifier.\");\n                }\n                prepended += \"  var \" + opts.outputFunctionName + \" = __append;\" + \"\\n\";\n              }\n              if (opts.localsName && !_JS_IDENTIFIER.test(opts.localsName)) {\n                throw new Error(\"localsName is not a valid JS identifier.\");\n              }\n              if (opts.destructuredLocals && opts.destructuredLocals.length) {\n                var destructuring = \"  var __locals = (\" + opts.localsName + \" || {}),\\n\";\n                for (var i = 0; i < opts.destructuredLocals.length; i++) {\n                  var name = opts.destructuredLocals[i];\n                  if (!_JS_IDENTIFIER.test(name)) {\n                    throw new Error(\"destructuredLocals[\" + i + \"] is not a valid JS identifier.\");\n                  }\n                  if (i > 0) {\n                    destructuring += \",\\n  \";\n                  }\n                  destructuring += name + \" = __locals.\" + name;\n                }\n                prepended += destructuring + \";\\n\";\n              }\n              if (opts._with !== false) {\n                prepended += \"  with (\" + opts.localsName + \" || {}) {\" + \"\\n\";\n                appended += \"  }\" + \"\\n\";\n              }\n              appended += \"  return __output;\" + \"\\n\";\n              this.source = prepended + this.source + appended;\n            }\n            if (opts.compileDebug) {\n              src = \"var __line = 1\" + \"\\n\" + \"  , __lines = \" + JSON.stringify(this.templateText) + \"\\n\" + \"  , __filename = \" + sanitizedFilename + \";\" + \"\\n\" + \"try {\" + \"\\n\" + this.source + \"} catch (e) {\" + \"\\n\" + \"  rethrow(e, __lines, __filename, __line, escapeFn);\" + \"\\n\" + \"}\" + \"\\n\";\n            } else {\n              src = this.source;\n            }\n            if (opts.client) {\n              src = \"escapeFn = escapeFn || \" + escapeFn.toString() + \";\" + \"\\n\" + src;\n              if (opts.compileDebug) {\n                src = \"rethrow = rethrow || \" + rethrow.toString() + \";\" + \"\\n\" + src;\n              }\n            }\n            if (opts.strict) {\n              src = '\"use strict\";\\n' + src;\n            }\n            if (opts.debug) {\n              console.log(src);\n            }\n            if (opts.compileDebug && opts.filename) {\n              src = src + \"\\n\" + \"//# sourceURL=\" + sanitizedFilename + \"\\n\";\n            }\n            try {\n              if (opts.async) {\n                try {\n                  ctor = new Function(\"return (async function(){}).constructor;\")();\n                } catch (e) {\n                  if (e instanceof SyntaxError) {\n                    throw new Error(\"This environment does not support async/await\");\n                  } else {\n                    throw e;\n                  }\n                }\n              } else {\n                ctor = Function;\n              }\n              fn = new ctor(opts.localsName + \", escapeFn, include, rethrow\", src);\n            } catch (e) {\n              if (e instanceof SyntaxError) {\n                if (opts.filename) {\n                  e.message += \" in \" + opts.filename;\n                }\n                e.message += \" while compiling ejs\\n\\n\";\n                e.message += \"If the above error is not helpful, you may want to try EJS-Lint:\\n\";\n                e.message += \"https://github.com/RyanZim/EJS-Lint\";\n                if (!opts.async) {\n                  e.message += \"\\n\";\n                  e.message += \"Or, if you meant to create an async function, pass `async: true` as an option.\";\n                }\n              }\n              throw e;\n            }\n            var returnedFn = opts.client ? fn : function anonymous(data) {\n              var include = function (path, includeData) {\n                var d = utils.shallowCopy(utils.createNullProtoObjWherePossible(), data);\n                if (includeData) {\n                  d = utils.shallowCopy(d, includeData);\n                }\n                return includeFile(path, opts)(d);\n              };\n              return fn.apply(opts.context, [data || utils.createNullProtoObjWherePossible(), escapeFn, include, rethrow]);\n            };\n            if (opts.filename && typeof Object.defineProperty === \"function\") {\n              var filename = opts.filename;\n              var basename = path.basename(filename, path.extname(filename));\n              try {\n                Object.defineProperty(returnedFn, \"name\", {\n                  value: basename,\n                  writable: false,\n                  enumerable: false,\n                  configurable: true\n                });\n              } catch (e) {}\n            }\n            return returnedFn;\n          },\n          generateSource: function () {\n            var opts = this.opts;\n            if (opts.rmWhitespace) {\n              this.templateText = this.templateText.replace(/[\\r\\n]+/g, \"\\n\").replace(/^\\s+|\\s+$/gm, \"\");\n            }\n            this.templateText = this.templateText.replace(/[ \\t]*<%_/gm, \"<%_\").replace(/_%>[ \\t]*/gm, \"_%>\");\n            var self = this;\n            var matches = this.parseTemplateText();\n            var d = this.opts.delimiter;\n            var o = this.opts.openDelimiter;\n            var c = this.opts.closeDelimiter;\n            if (matches && matches.length) {\n              matches.forEach(function (line, index) {\n                var closing;\n                if (line.indexOf(o + d) === 0 && line.indexOf(o + d + d) !== 0) {\n                  closing = matches[index + 2];\n                  if (!(closing == d + c || closing == \"-\" + d + c || closing == \"_\" + d + c)) {\n                    throw new Error('Could not find matching close tag for \"' + line + '\".');\n                  }\n                }\n                self.scanLine(line);\n              });\n            }\n          },\n          parseTemplateText: function () {\n            var str = this.templateText;\n            var pat = this.regex;\n            var result = pat.exec(str);\n            var arr = [];\n            var firstPos;\n            while (result) {\n              firstPos = result.index;\n              if (firstPos !== 0) {\n                arr.push(str.substring(0, firstPos));\n                str = str.slice(firstPos);\n              }\n              arr.push(result[0]);\n              str = str.slice(result[0].length);\n              result = pat.exec(str);\n            }\n            if (str) {\n              arr.push(str);\n            }\n            return arr;\n          },\n          _addOutput: function (line) {\n            if (this.truncate) {\n              line = line.replace(/^(?:\\r\\n|\\r|\\n)/, \"\");\n              this.truncate = false;\n            }\n            if (!line) {\n              return line;\n            }\n            line = line.replace(/\\\\/g, \"\\\\\\\\\");\n            line = line.replace(/\\n/g, \"\\\\n\");\n            line = line.replace(/\\r/g, \"\\\\r\");\n            line = line.replace(/\"/g, '\\\\\"');\n            this.source += '    ; __append(\"' + line + '\")' + \"\\n\";\n          },\n          scanLine: function (line) {\n            var self = this;\n            var d = this.opts.delimiter;\n            var o = this.opts.openDelimiter;\n            var c = this.opts.closeDelimiter;\n            var newLineCount = 0;\n            newLineCount = line.split(\"\\n\").length - 1;\n            switch (line) {\n              case o + d:\n              case o + d + \"_\":\n                this.mode = Template.modes.EVAL;\n                break;\n              case o + d + \"=\":\n                this.mode = Template.modes.ESCAPED;\n                break;\n              case o + d + \"-\":\n                this.mode = Template.modes.RAW;\n                break;\n              case o + d + \"#\":\n                this.mode = Template.modes.COMMENT;\n                break;\n              case o + d + d:\n                this.mode = Template.modes.LITERAL;\n                this.source += '    ; __append(\"' + line.replace(o + d + d, o + d) + '\")' + \"\\n\";\n                break;\n              case d + d + c:\n                this.mode = Template.modes.LITERAL;\n                this.source += '    ; __append(\"' + line.replace(d + d + c, d + c) + '\")' + \"\\n\";\n                break;\n              case d + c:\n              case \"-\" + d + c:\n              case \"_\" + d + c:\n                if (this.mode == Template.modes.LITERAL) {\n                  this._addOutput(line);\n                }\n                this.mode = null;\n                this.truncate = line.indexOf(\"-\") === 0 || line.indexOf(\"_\") === 0;\n                break;\n              default:\n                if (this.mode) {\n                  switch (this.mode) {\n                    case Template.modes.EVAL:\n                    case Template.modes.ESCAPED:\n                    case Template.modes.RAW:\n                      if (line.lastIndexOf(\"//\") > line.lastIndexOf(\"\\n\")) {\n                        line += \"\\n\";\n                      }\n                  }\n                  switch (this.mode) {\n                    case Template.modes.EVAL:\n                      this.source += \"    ; \" + line + \"\\n\";\n                      break;\n                    case Template.modes.ESCAPED:\n                      this.source += \"    ; __append(escapeFn(\" + stripSemi(line) + \"))\" + \"\\n\";\n                      break;\n                    case Template.modes.RAW:\n                      this.source += \"    ; __append(\" + stripSemi(line) + \")\" + \"\\n\";\n                      break;\n                    case Template.modes.COMMENT:\n                      break;\n                    case Template.modes.LITERAL:\n                      this._addOutput(line);\n                      break;\n                  }\n                } else {\n                  this._addOutput(line);\n                }\n            }\n            if (self.opts.compileDebug && newLineCount) {\n              this.currentLine += newLineCount;\n              this.source += \"    ; __line = \" + this.currentLine + \"\\n\";\n            }\n          }\n        };\n        exports.escapeXML = utils.escapeXML;\n        exports.__express = exports.renderFile;\n        exports.VERSION = _VERSION_STRING;\n        exports.name = _NAME;\n        if (typeof window != \"undefined\") {\n          window.ejs = exports;\n        }\n      }, {\n        \"../package.json\": 6,\n        \"./utils\": 2,\n        fs: 3,\n        path: 4\n      }],\n      2: [function (require, module, exports) {\n\n        var regExpChars = /[|\\\\{}()[\\]^$+*?.]/g;\n        var hasOwnProperty = Object.prototype.hasOwnProperty;\n        var hasOwn = function (obj, key) {\n          return hasOwnProperty.apply(obj, [key]);\n        };\n        exports.escapeRegExpChars = function (string) {\n          if (!string) {\n            return \"\";\n          }\n          return String(string).replace(regExpChars, \"\\\\$&\");\n        };\n        var _ENCODE_HTML_RULES = {\n          \"&\": \"&amp;\",\n          \"<\": \"&lt;\",\n          \">\": \"&gt;\",\n          '\"': \"&#34;\",\n          \"'\": \"&#39;\"\n        };\n        var _MATCH_HTML = /[&<>'\"]/g;\n        function encode_char(c) {\n          return _ENCODE_HTML_RULES[c] || c;\n        }\n        var escapeFuncStr = \"var _ENCODE_HTML_RULES = {\\n\" + '      \"&\": \"&amp;\"\\n' + '    , \"<\": \"&lt;\"\\n' + '    , \">\": \"&gt;\"\\n' + '    , \\'\"\\': \"&#34;\"\\n' + '    , \"\\'\": \"&#39;\"\\n' + \"    }\\n\" + \"  , _MATCH_HTML = /[&<>'\\\"]/g;\\n\" + \"function encode_char(c) {\\n\" + \"  return _ENCODE_HTML_RULES[c] || c;\\n\" + \"};\\n\";\n        exports.escapeXML = function (markup) {\n          return markup == undefined ? \"\" : String(markup).replace(_MATCH_HTML, encode_char);\n        };\n        function escapeXMLToString() {\n          return Function.prototype.toString.call(this) + \";\\n\" + escapeFuncStr;\n        }\n        try {\n          if (typeof Object.defineProperty === \"function\") {\n            Object.defineProperty(exports.escapeXML, \"toString\", {\n              value: escapeXMLToString\n            });\n          } else {\n            exports.escapeXML.toString = escapeXMLToString;\n          }\n        } catch (err) {\n          console.warn(\"Unable to set escapeXML.toString (is the Function prototype frozen?)\");\n        }\n        exports.shallowCopy = function (to, from) {\n          from = from || {};\n          if (to !== null && to !== undefined) {\n            for (var p in from) {\n              if (!hasOwn(from, p)) {\n                continue;\n              }\n              if (p === \"__proto__\" || p === \"constructor\") {\n                continue;\n              }\n              to[p] = from[p];\n            }\n          }\n          return to;\n        };\n        exports.shallowCopyFromList = function (to, from, list) {\n          list = list || [];\n          from = from || {};\n          if (to !== null && to !== undefined) {\n            for (var i = 0; i < list.length; i++) {\n              var p = list[i];\n              if (typeof from[p] != \"undefined\") {\n                if (!hasOwn(from, p)) {\n                  continue;\n                }\n                if (p === \"__proto__\" || p === \"constructor\") {\n                  continue;\n                }\n                to[p] = from[p];\n              }\n            }\n          }\n          return to;\n        };\n        exports.cache = {\n          _data: {},\n          set: function (key, val) {\n            this._data[key] = val;\n          },\n          get: function (key) {\n            return this._data[key];\n          },\n          remove: function (key) {\n            delete this._data[key];\n          },\n          reset: function () {\n            this._data = {};\n          }\n        };\n        exports.hyphenToCamel = function (str) {\n          return str.replace(/-[a-z]/g, function (match) {\n            return match[1].toUpperCase();\n          });\n        };\n        exports.createNullProtoObjWherePossible = function () {\n          if (typeof Object.create == \"function\") {\n            return function () {\n              return Object.create(null);\n            };\n          }\n          if (!({\n            __proto__: null\n          } instanceof Object)) {\n            return function () {\n              return {\n                __proto__: null\n              };\n            };\n          }\n          return function () {\n            return {};\n          };\n        }();\n        exports.hasOwnOnlyObject = function (obj) {\n          var o = exports.createNullProtoObjWherePossible();\n          for (var p in obj) {\n            if (hasOwn(obj, p)) {\n              o[p] = obj[p];\n            }\n          }\n          return o;\n        };\n      }, {}],\n      3: [function (require, module, exports) {}, {}],\n      4: [function (require, module, exports) {\n        (function (process) {\n          function normalizeArray(parts, allowAboveRoot) {\n            var up = 0;\n            for (var i = parts.length - 1; i >= 0; i--) {\n              var last = parts[i];\n              if (last === \".\") {\n                parts.splice(i, 1);\n              } else if (last === \"..\") {\n                parts.splice(i, 1);\n                up++;\n              } else if (up) {\n                parts.splice(i, 1);\n                up--;\n              }\n            }\n            if (allowAboveRoot) {\n              for (; up--; up) {\n                parts.unshift(\"..\");\n              }\n            }\n            return parts;\n          }\n          exports.resolve = function () {\n            var resolvedPath = \"\",\n              resolvedAbsolute = false;\n            for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n              var path = i >= 0 ? arguments[i] : process.cwd();\n              if (typeof path !== \"string\") {\n                throw new TypeError(\"Arguments to path.resolve must be strings\");\n              } else if (!path) {\n                continue;\n              }\n              resolvedPath = path + \"/\" + resolvedPath;\n              resolvedAbsolute = path.charAt(0) === \"/\";\n            }\n            resolvedPath = normalizeArray(filter(resolvedPath.split(\"/\"), function (p) {\n              return !!p;\n            }), !resolvedAbsolute).join(\"/\");\n            return (resolvedAbsolute ? \"/\" : \"\") + resolvedPath || \".\";\n          };\n          exports.normalize = function (path) {\n            var isAbsolute = exports.isAbsolute(path),\n              trailingSlash = substr(path, -1) === \"/\";\n            path = normalizeArray(filter(path.split(\"/\"), function (p) {\n              return !!p;\n            }), !isAbsolute).join(\"/\");\n            if (!path && !isAbsolute) {\n              path = \".\";\n            }\n            if (path && trailingSlash) {\n              path += \"/\";\n            }\n            return (isAbsolute ? \"/\" : \"\") + path;\n          };\n          exports.isAbsolute = function (path) {\n            return path.charAt(0) === \"/\";\n          };\n          exports.join = function () {\n            var paths = Array.prototype.slice.call(arguments, 0);\n            return exports.normalize(filter(paths, function (p, index) {\n              if (typeof p !== \"string\") {\n                throw new TypeError(\"Arguments to path.join must be strings\");\n              }\n              return p;\n            }).join(\"/\"));\n          };\n          exports.relative = function (from, to) {\n            from = exports.resolve(from).substr(1);\n            to = exports.resolve(to).substr(1);\n            function trim(arr) {\n              var start = 0;\n              for (; start < arr.length; start++) {\n                if (arr[start] !== \"\") break;\n              }\n              var end = arr.length - 1;\n              for (; end >= 0; end--) {\n                if (arr[end] !== \"\") break;\n              }\n              if (start > end) return [];\n              return arr.slice(start, end - start + 1);\n            }\n            var fromParts = trim(from.split(\"/\"));\n            var toParts = trim(to.split(\"/\"));\n            var length = Math.min(fromParts.length, toParts.length);\n            var samePartsLength = length;\n            for (var i = 0; i < length; i++) {\n              if (fromParts[i] !== toParts[i]) {\n                samePartsLength = i;\n                break;\n              }\n            }\n            var outputParts = [];\n            for (var i = samePartsLength; i < fromParts.length; i++) {\n              outputParts.push(\"..\");\n            }\n            outputParts = outputParts.concat(toParts.slice(samePartsLength));\n            return outputParts.join(\"/\");\n          };\n          exports.sep = \"/\";\n          exports.delimiter = \":\";\n          exports.dirname = function (path) {\n            if (typeof path !== \"string\") path = path + \"\";\n            if (path.length === 0) return \".\";\n            var code = path.charCodeAt(0);\n            var hasRoot = code === 47;\n            var end = -1;\n            var matchedSlash = true;\n            for (var i = path.length - 1; i >= 1; --i) {\n              code = path.charCodeAt(i);\n              if (code === 47) {\n                if (!matchedSlash) {\n                  end = i;\n                  break;\n                }\n              } else {\n                matchedSlash = false;\n              }\n            }\n            if (end === -1) return hasRoot ? \"/\" : \".\";\n            if (hasRoot && end === 1) {\n              return \"/\";\n            }\n            return path.slice(0, end);\n          };\n          function basename(path) {\n            if (typeof path !== \"string\") path = path + \"\";\n            var start = 0;\n            var end = -1;\n            var matchedSlash = true;\n            var i;\n            for (i = path.length - 1; i >= 0; --i) {\n              if (path.charCodeAt(i) === 47) {\n                if (!matchedSlash) {\n                  start = i + 1;\n                  break;\n                }\n              } else if (end === -1) {\n                matchedSlash = false;\n                end = i + 1;\n              }\n            }\n            if (end === -1) return \"\";\n            return path.slice(start, end);\n          }\n          exports.basename = function (path, ext) {\n            var f = basename(path);\n            if (ext && f.substr(-1 * ext.length) === ext) {\n              f = f.substr(0, f.length - ext.length);\n            }\n            return f;\n          };\n          exports.extname = function (path) {\n            if (typeof path !== \"string\") path = path + \"\";\n            var startDot = -1;\n            var startPart = 0;\n            var end = -1;\n            var matchedSlash = true;\n            var preDotState = 0;\n            for (var i = path.length - 1; i >= 0; --i) {\n              var code = path.charCodeAt(i);\n              if (code === 47) {\n                if (!matchedSlash) {\n                  startPart = i + 1;\n                  break;\n                }\n                continue;\n              }\n              if (end === -1) {\n                matchedSlash = false;\n                end = i + 1;\n              }\n              if (code === 46) {\n                if (startDot === -1) startDot = i;else if (preDotState !== 1) preDotState = 1;\n              } else if (startDot !== -1) {\n                preDotState = -1;\n              }\n            }\n            if (startDot === -1 || end === -1 || preDotState === 0 || preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n              return \"\";\n            }\n            return path.slice(startDot, end);\n          };\n          function filter(xs, f) {\n            if (xs.filter) return xs.filter(f);\n            var res = [];\n            for (var i = 0; i < xs.length; i++) {\n              if (f(xs[i], i, xs)) res.push(xs[i]);\n            }\n            return res;\n          }\n          var substr = \"ab\".substr(-1) === \"b\" ? function (str, start, len) {\n            return str.substr(start, len);\n          } : function (str, start, len) {\n            if (start < 0) start = str.length + start;\n            return str.substr(start, len);\n          };\n        }).call(this, require(\"_process\"));\n      }, {\n        _process: 5\n      }],\n      5: [function (require, module, exports) {\n        var process = module.exports = {};\n        var cachedSetTimeout;\n        var cachedClearTimeout;\n        function defaultSetTimout() {\n          throw new Error(\"setTimeout has not been defined\");\n        }\n        function defaultClearTimeout() {\n          throw new Error(\"clearTimeout has not been defined\");\n        }\n        (function () {\n          try {\n            if (typeof setTimeout === \"function\") {\n              cachedSetTimeout = setTimeout;\n            } else {\n              cachedSetTimeout = defaultSetTimout;\n            }\n          } catch (e) {\n            cachedSetTimeout = defaultSetTimout;\n          }\n          try {\n            if (typeof clearTimeout === \"function\") {\n              cachedClearTimeout = clearTimeout;\n            } else {\n              cachedClearTimeout = defaultClearTimeout;\n            }\n          } catch (e) {\n            cachedClearTimeout = defaultClearTimeout;\n          }\n        })();\n        function runTimeout(fun) {\n          if (cachedSetTimeout === setTimeout) {\n            return setTimeout(fun, 0);\n          }\n          if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n            cachedSetTimeout = setTimeout;\n            return setTimeout(fun, 0);\n          }\n          try {\n            return cachedSetTimeout(fun, 0);\n          } catch (e) {\n            try {\n              return cachedSetTimeout.call(null, fun, 0);\n            } catch (e) {\n              return cachedSetTimeout.call(this, fun, 0);\n            }\n          }\n        }\n        function runClearTimeout(marker) {\n          if (cachedClearTimeout === clearTimeout) {\n            return clearTimeout(marker);\n          }\n          if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n            cachedClearTimeout = clearTimeout;\n            return clearTimeout(marker);\n          }\n          try {\n            return cachedClearTimeout(marker);\n          } catch (e) {\n            try {\n              return cachedClearTimeout.call(null, marker);\n            } catch (e) {\n              return cachedClearTimeout.call(this, marker);\n            }\n          }\n        }\n        var queue = [];\n        var draining = false;\n        var currentQueue;\n        var queueIndex = -1;\n        function cleanUpNextTick() {\n          if (!draining || !currentQueue) {\n            return;\n          }\n          draining = false;\n          if (currentQueue.length) {\n            queue = currentQueue.concat(queue);\n          } else {\n            queueIndex = -1;\n          }\n          if (queue.length) {\n            drainQueue();\n          }\n        }\n        function drainQueue() {\n          if (draining) {\n            return;\n          }\n          var timeout = runTimeout(cleanUpNextTick);\n          draining = true;\n          var len = queue.length;\n          while (len) {\n            currentQueue = queue;\n            queue = [];\n            while (++queueIndex < len) {\n              if (currentQueue) {\n                currentQueue[queueIndex].run();\n              }\n            }\n            queueIndex = -1;\n            len = queue.length;\n          }\n          currentQueue = null;\n          draining = false;\n          runClearTimeout(timeout);\n        }\n        process.nextTick = function (fun) {\n          var args = new Array(arguments.length - 1);\n          if (arguments.length > 1) {\n            for (var i = 1; i < arguments.length; i++) {\n              args[i - 1] = arguments[i];\n            }\n          }\n          queue.push(new Item(fun, args));\n          if (queue.length === 1 && !draining) {\n            runTimeout(drainQueue);\n          }\n        };\n        function Item(fun, array) {\n          this.fun = fun;\n          this.array = array;\n        }\n        Item.prototype.run = function () {\n          this.fun.apply(null, this.array);\n        };\n        process.title = \"browser\";\n        process.browser = true;\n        process.env = {};\n        process.argv = [];\n        process.version = \"\";\n        process.versions = {};\n        function noop() {}\n        process.on = noop;\n        process.addListener = noop;\n        process.once = noop;\n        process.off = noop;\n        process.removeListener = noop;\n        process.removeAllListeners = noop;\n        process.emit = noop;\n        process.prependListener = noop;\n        process.prependOnceListener = noop;\n        process.listeners = function (name) {\n          return [];\n        };\n        process.binding = function (name) {\n          throw new Error(\"process.binding is not supported\");\n        };\n        process.cwd = function () {\n          return \"/\";\n        };\n        process.chdir = function (dir) {\n          throw new Error(\"process.chdir is not supported\");\n        };\n        process.umask = function () {\n          return 0;\n        };\n      }, {}],\n      6: [function (require, module, exports) {\n        module.exports = {\n          name: \"ejs\",\n          description: \"Embedded JavaScript templates\",\n          keywords: [\"template\", \"engine\", \"ejs\"],\n          version: \"3.1.9\",\n          author: \"Matthew Eernisse <mde@fleegix.org> (http://fleegix.org)\",\n          license: \"Apache-2.0\",\n          bin: {\n            ejs: \"./bin/cli.js\"\n          },\n          main: \"./lib/ejs.js\",\n          jsdelivr: \"ejs.min.js\",\n          unpkg: \"ejs.min.js\",\n          repository: {\n            type: \"git\",\n            url: \"git://github.com/mde/ejs.git\"\n          },\n          bugs: \"https://github.com/mde/ejs/issues\",\n          homepage: \"https://github.com/mde/ejs\",\n          dependencies: {\n            jake: \"^10.8.5\"\n          },\n          devDependencies: {\n            browserify: \"^16.5.1\",\n            eslint: \"^6.8.0\",\n            \"git-directory-deploy\": \"^1.5.1\",\n            jsdoc: \"^4.0.2\",\n            \"lru-cache\": \"^4.0.1\",\n            mocha: \"^10.2.0\",\n            \"uglify-js\": \"^3.3.16\"\n          },\n          engines: {\n            node: \">=0.10.0\"\n          },\n          scripts: {\n            test: \"npx jake test\"\n          }\n        };\n      }, {}]\n    }, {}, [1])(1);\n  });\n\n  var TableUtils = {\n    _templates: {},\n    /**\n     * Объединение атрибутов\n     * @param attr1\n     * @param attr2\n     * @returns {object}\n     */\n    mergeAttr: function mergeAttr(attr1, attr2) {\n      var mergeAttr = Object.assign({}, attr1);\n      if (_typeof(attr2) === 'object') {\n        $.each(attr2, function (name, value) {\n          if (mergeAttr.hasOwnProperty(name)) {\n            if (name === 'class') {\n              mergeAttr[name] += ' ' + value;\n            } else if (name === 'style') {\n              mergeAttr[name] += ';' + value;\n            } else {\n              mergeAttr[name] = value;\n            }\n          } else {\n            mergeAttr[name] = value;\n          }\n        });\n      }\n      return mergeAttr;\n    },\n    /**\n     * Проверка на число\n     * @param num\n     * @returns {boolean}\n     * @private\n     */\n    isNumeric: function isNumeric(num) {\n      return (typeof num === 'number' || typeof num === \"string\" && num.trim() !== '') && !isNaN(num);\n    },\n    /**\n     * @returns {string}\n     * @private\n     */\n    hashCode: function hashCode() {\n      return this.crc32((new Date().getTime() + Math.random()).toString()).toString(16);\n    },\n    /**\n     * Проверка на объект\n     * @param value\n     */\n    isObject: function isObject(value) {\n      return _typeof(value) === 'object' && !Array.isArray(value) && value !== null;\n    },\n    /**\n     * @param str\n     * @returns {number}\n     */\n    crc32: function crc32(str) {\n      for (var a, o = [], c = 0; c < 256; c++) {\n        a = c;\n        for (var f = 0; f < 8; f++) {\n          a = 1 & a ? 3988292384 ^ a >>> 1 : a >>> 1;\n        }\n        o[c] = a;\n      }\n      for (var n = -1, t = 0; t < str.length; t++) {\n        n = n >>> 8 ^ o[255 & (n ^ str.charCodeAt(t))];\n      }\n      return (-1 ^ n) >>> 0;\n    },\n    /**\n     * Рендер шаблона\n     * @param {string} template\n     * @param {object} options\n     * @returns {string}\n     */\n    render: function render(template, options) {\n      var tplName = this.crc32(template);\n      if (!this._templates.hasOwnProperty(tplName)) {\n        this._templates[tplName] = ejs.compile(template);\n      }\n      return this._templates[tplName](options);\n    },\n    /**\n     * Размерность строки\n     * @param {string} str\n     * @param {int}    count\n     * @param {string} repeat\n     * @returns {string}\n     */\n    strPadLeft: function strPadLeft(str, count, repeat) {\n      str = String(str);\n      if (str.length >= count) {\n        return str;\n      }\n      repeat = repeat ? repeat : '0';\n      return (repeat.repeat(count) + str).slice(-count);\n    }\n  };\n\n  var TableRender = {\n    /**\n     * Сборка таблицы\n     * @param {TableInstance} table\n     * @private\n     */\n    renderTable: function renderTable(table) {\n      var options = table.getOptions();\n      var recordsElements = [];\n      var columnsHeader = '';\n      var columnsFooter = '';\n      var colGroups = [];\n      var columnElements = $(tpl['table/columns/tr.html']);\n\n      // Колонки\n      if (table._columns.length > 0) {\n        table._columns.map(function (column) {\n          if (!column.isShow()) {\n            return;\n          }\n          var columnOptions = column.getOptions();\n          var attributes = [];\n          var sortable = null;\n          var menuElements = [];\n          var menuShowAlways = '';\n          var menuPosition = 'end';\n          if (columnOptions.hasOwnProperty('field') && typeof columnOptions.field === 'string') {\n            columnOptions.attrHeader = TableUtils.mergeAttr(columnOptions.attrHeader, {\n              \"data-field\": columnOptions.field\n            });\n          }\n          if (columnOptions.hasOwnProperty('fixed') && typeof columnOptions.fixed === 'string') {\n            columnOptions.attrHeader = TableUtils.mergeAttr(columnOptions.attrHeader, {\n              \"class\": 'coreui-table__fixed_' + columnOptions.fixed\n            });\n            columnOptions.attr = TableUtils.mergeAttr(columnOptions.attr, {\n              \"class\": 'coreui-table__fixed_' + columnOptions.fixed\n            });\n          }\n          if (columnOptions.type !== 'numbers') {\n            if (columnOptions.hasOwnProperty('sortable') && columnOptions.sortable) {\n              columnOptions.attrHeader = TableUtils.mergeAttr(columnOptions.attrHeader, {\n                \"class\": 'coreui-table__sortable'\n              });\n            }\n            if (table._sort.length > 0 && columnOptions.hasOwnProperty('field') && typeof columnOptions.field === 'string' && columnOptions.field) {\n              $.each(table._sort, function (key, sortField) {\n                if (columnOptions.field === sortField.field) {\n                  if (sortField.order === 'asc') {\n                    sortable = 'asc';\n                  } else if (sortField.order === 'desc') {\n                    sortable = 'desc';\n                  }\n                  return false;\n                }\n              });\n            }\n          }\n          if (options.showHeaders && columnOptions.hasOwnProperty('menu') && TableUtils.isObject(columnOptions.menu) && columnOptions.menu.hasOwnProperty('items') && Array.isArray(columnOptions.menu.items)) {\n            if (columnOptions.menu.hasOwnProperty('showAlways') && columnOptions.menu.showAlways) {\n              menuShowAlways = 'coreui-table__column-menu-always';\n            }\n            if (columnOptions.menu.hasOwnProperty('position') && typeof columnOptions.menu.position === 'string') {\n              menuPosition = columnOptions.menu.position;\n            }\n            columnOptions.menu.items.map(function (item) {\n              if (TableUtils.isObject(item) && item.hasOwnProperty('type') && typeof item.type === 'string' && item.type) {\n                switch (item.type.toLowerCase()) {\n                  case 'button':\n                    if (item.hasOwnProperty('text') && typeof item.text === 'string' && item.hasOwnProperty('onClick') && ['string', 'function'].indexOf(_typeof(item.onClick)) >= 0 && item.text.length > 0) {\n                      var attrItem = [];\n                      var attr = {\n                        type: 'button',\n                        \"class\": 'dropdown-item'\n                      };\n                      if (item.hasOwnProperty('attr') && TableUtils.isObject(item.attr)) {\n                        attr = TableUtils.mergeAttr(attr, item.attr);\n                      }\n                      $.each(attr, function (name, value) {\n                        attrItem.push(name + '=\"' + value + '\"');\n                      });\n                      var menuElement = $(TableUtils.render(tpl['table/columns/menu/button.html'], {\n                        text: item.text,\n                        attr: attrItem.join(' ')\n                      }));\n                      menuElement.find('button').click(function (event) {\n                        var prop = {\n                          table: table,\n                          event: event\n                        };\n                        if (typeof item.onClick === 'function') {\n                          item.onClick(prop);\n                        } else if (typeof item.onClick === 'string') {\n                          new Function('prop', item.onClick)(prop);\n                        }\n                      });\n                      menuElements.push(menuElement);\n                    }\n                    break;\n                  case 'link':\n                    if (item.hasOwnProperty('text') && item.hasOwnProperty('url') && typeof item.text === 'string' && typeof item.url === 'string' && item.text.length > 0 && item.url.length > 0) {\n                      var _attrItem = [];\n                      var _attr = {\n                        href: item.url,\n                        \"class\": 'dropdown-item'\n                      };\n                      if (item.hasOwnProperty('attr') && TableUtils.isObject(item.attr)) {\n                        _attr = TableUtils.mergeAttr(_attr, item.attr);\n                      }\n                      $.each(_attr, function (name, value) {\n                        _attrItem.push(name + '=\"' + value + '\"');\n                      });\n                      menuElements.push($(TableUtils.render(tpl['table/columns/menu/link.html'], {\n                        text: item.text,\n                        attr: _attrItem.join(' ')\n                      })));\n                    }\n                    break;\n                  case 'divider':\n                    menuElements.push($(tpl['table/columns/menu/divider.html']));\n                    break;\n                  case 'header':\n                    menuElements.push($(TableUtils.render(tpl['table/columns/menu/header.html'], {\n                      text: item.text\n                    })));\n                    break;\n                }\n              }\n            });\n          }\n          if (columnOptions.attrHeader && TableUtils.isObject(columnOptions.attrHeader)) {\n            $.each(columnOptions.attrHeader, function (name, value) {\n              attributes.push(name + '=\"' + value + '\"');\n            });\n          }\n          var style = [];\n          if (columnOptions.hasOwnProperty('width') && ['string', 'number'].indexOf(_typeof(columnOptions.width)) >= 0) {\n            var unit = typeof columnOptions.width === 'number' ? 'px' : '';\n            style.push('width:' + columnOptions.width + unit);\n          }\n          if (columnOptions.hasOwnProperty('minWidth') && ['string', 'number'].indexOf(_typeof(columnOptions.minWidth)) >= 0) {\n            var _unit = typeof columnOptions.minWidth === 'number' ? 'px' : '';\n            style.push('min-width:' + columnOptions.minWidth + _unit);\n          }\n          if (columnOptions.hasOwnProperty('maxWidth') && ['string', 'number'].indexOf(_typeof(columnOptions.maxWidth)) >= 0) {\n            var _unit2 = typeof columnOptions.maxWidth === 'number' ? 'px' : '';\n            style.push('max-width:' + columnOptions.maxWidth + _unit2);\n          }\n          colGroups.push({\n            style: style.length > 0 ? style.join(';') : ''\n          });\n          if (options.showHeaders) {\n            var label = '';\n            var description = '';\n            if (columnOptions.hasOwnProperty('label') && typeof columnOptions.label === 'string' && (!columnOptions.hasOwnProperty('showLabel') || columnOptions.showLabel)) {\n              label = columnOptions.label;\n            }\n            if (columnOptions.hasOwnProperty('description') && typeof columnOptions.label === 'string') {\n              description = columnOptions.description;\n            }\n            var columnElement = $(TableUtils.render(tpl['table/columns/td.html'], {\n              attr: attributes.length > 0 ? ' ' + attributes.join(' ') : '',\n              label: label,\n              description: description,\n              sortable: sortable,\n              issetMenu: menuElements.length > 0,\n              menuPosition: menuPosition,\n              menuShowAlways: menuShowAlways ? ' ' + menuShowAlways : ''\n            }));\n            if (menuElements.length) {\n              var menuContainer = columnElement.find('.coreui-table__column-menu ul');\n              var menuButton = columnElement.find('.coreui-table__column-menu .dropdown-toggle');\n              menuButton.click(function (event) {\n                event.originalEvent.cancelBubble = true;\n              });\n              menuElements.map(function (element) {\n                menuContainer.append(element);\n              });\n            }\n            columnElements.append(columnElement);\n          }\n        });\n      }\n\n      // Строки\n      if (table._records.length > 0) {\n        table._recordsTotal = table.getRecordsCount();\n        table._recordsNumber = table._page === 1 ? 1 : (table._page - 1) * table._recordsPerPage + 1;\n        recordsElements = TableRender.renderRecords(table, table._records);\n      } else {\n        recordsElements = TableRender.renderRecords(table, []);\n      }\n      if (options.showHeaders && options.hasOwnProperty('columnsHeader') && Array.isArray(options.columnsHeader) && options.columnsHeader.length > 0) {\n        var rows = [];\n        options.columnsHeader.map(function (headerRow) {\n          if (Array.isArray(headerRow)) {\n            var cells = [];\n            headerRow.map(function (headerColumn) {\n              if (TableUtils.isObject(headerColumn)) {\n                var attributes = [];\n                if (headerColumn.hasOwnProperty('attr') && TableUtils.isObject(headerColumn.attr)) {\n                  $.each(headerColumn.attr, function (name, value) {\n                    attributes.push(name + '=\"' + value + '\"');\n                  });\n                }\n                cells.push({\n                  content: headerColumn.hasOwnProperty('content') ? headerColumn.content : '',\n                  description: headerColumn.hasOwnProperty('description') ? headerColumn.description : '',\n                  attr: attributes.length > 0 ? ' ' + attributes.join(' ') : ''\n                });\n              }\n            });\n            rows.push(TableUtils.render(tpl['table/columns/header.html'], {\n              columns: cells\n            }));\n          }\n        });\n        columnsHeader = rows.join('');\n      }\n      if (options.hasOwnProperty('columnsFooter') && Array.isArray(options.columnsFooter) && options.columnsFooter.length > 0) {\n        var _rows = [];\n        $.each(options.columnsFooter, function (key, footerRow) {\n          if (Array.isArray(footerRow)) {\n            var cells = [];\n            $.each(footerRow, function (key, footerColumn) {\n              if (TableUtils.isObject(footerColumn)) {\n                var attributes = [];\n                if (footerColumn.hasOwnProperty('attr') && TableUtils.isObject(footerColumn.attr)) {\n                  $.each(footerColumn.attr, function (name, value) {\n                    attributes.push(name + '=\"' + value + '\"');\n                  });\n                }\n                cells.push({\n                  content: footerColumn.hasOwnProperty('content') ? footerColumn.content : '',\n                  description: footerColumn.hasOwnProperty('description') ? footerColumn.description : '',\n                  attr: attributes.length > 0 ? ' ' + attributes.join(' ') : ''\n                });\n              }\n            });\n            _rows.push(TableUtils.render(tpl['table/columns/footer.html'], {\n              columns: cells\n            }));\n          }\n        });\n        columnsFooter = _rows.join('');\n      }\n      var classes = [];\n      if (typeof options[\"class\"] === 'string' && options[\"class\"]) {\n        classes.push(options[\"class\"]);\n      }\n      if (!columnsFooter) {\n        classes.push('empty-tfoot');\n      }\n      var theadAttr = [];\n      if (options.hasOwnProperty('theadTop') && ['string', 'number'].indexOf(_typeof(options.theadTop)) >= 0) {\n        var unit = TableUtils.isNumeric(options.theadTop) ? 'px' : '';\n        theadAttr.push('style=\"top:' + options.theadTop + unit + '\"');\n      }\n      var tableElement = $(TableUtils.render(tpl['table.html'], {\n        classes: classes.join(' '),\n        theadAttr: theadAttr.length > 0 ? theadAttr.join(' ') : '',\n        showHeaders: options.showHeaders,\n        columnsHeader: columnsHeader,\n        colGroups: colGroups,\n        columnsFooter: columnsFooter\n      }));\n      if (options.showHeaders) {\n        tableElement.find('thead').append(columnElements);\n      }\n      var tbody = tableElement.find('tbody');\n      recordsElements.map(function (recordElement) {\n        tbody.append(recordElement);\n      });\n      return tableElement;\n    },\n    /**\n     * Сборка записей таблицы\n     * @param {object} table\n     * @param {Array}  records\n     * @return {Array}\n     */\n    renderRecords: function renderRecords(table, records) {\n      var renderRecords = [];\n      if (records.length > 0) {\n        var that = this;\n        var options = table.getOptions();\n        var group = options.hasOwnProperty('group') && TableUtils.isObject(options.group) && options.group.hasOwnProperty('field') && typeof options.group.field === 'string' && options.group.field ? options.group : null;\n        if (group) {\n          var groupValue = null;\n          var groupIndex = 0;\n          var recordsGroups = {};\n          records.map(function (record) {\n            if (record.show) {\n              if (record.data.hasOwnProperty(group.field) && ['string', 'number'].indexOf(_typeof(record.data[group.field])) >= 0 && groupValue != record.data[group.field]) {\n                groupValue = record.data[group.field];\n                groupIndex++;\n              }\n              if (!recordsGroups.hasOwnProperty(groupIndex)) {\n                recordsGroups[groupIndex] = {\n                  isGroup: groupIndex > 0,\n                  records: []\n                };\n              }\n              recordsGroups[groupIndex].records.push(record);\n            }\n          });\n          $.each(recordsGroups, function (key, recordsGroup) {\n            var renderRecordsGroup = [];\n            recordsGroup.records.map(function (record) {\n              renderRecordsGroup.push(that.renderRecord(table, record));\n              table._recordsNumber++;\n            });\n            if (recordsGroup.isGroup) {\n              renderRecords.push(that.renderGroup(table, group, recordsGroup.records[0], renderRecordsGroup));\n            }\n            renderRecordsGroup.map(function (record) {\n              renderRecords.push(record);\n            });\n          });\n        } else {\n          records.map(function (record) {\n            if (record.show) {\n              renderRecords.push(that.renderRecord(table, record));\n              table._recordsNumber++;\n            }\n          });\n        }\n      }\n      if (renderRecords.length === 0) {\n        renderRecords = [$(TableUtils.render(tpl['table/record/empty.html'], {\n          columnsCount: table._countColumnsShow,\n          lang: table.getLang()\n        }))];\n      }\n      return renderRecords;\n    },\n    /**\n     * Сборка записи таблицы\n     * @param {TableInstance} table\n     * @param {object}        record\n     * @returns {{ attr: (string), fields: (object) }}}\n     * @private\n     */\n    renderRecord: function renderRecord(table, record) {\n      var that = this;\n      var options = table.getOptions();\n      var fields = [];\n      var recordAttr = {\n        \"class\": 'coreui-table__record'\n      };\n      table._columns.map(function (column) {\n        if (!column.isShow()) {\n          return;\n        }\n        var fieldContent = that.renderField(table, column, record);\n        if (fieldContent) {\n          fields.push(fieldContent);\n        }\n      });\n      if (typeof options.onClickUrl === 'string' && options.onClickUrl || options.onClick) {\n        recordAttr[\"class\"] += ' coreui-table_pointer';\n      }\n      if (record.meta) {\n        recordAttr = TableUtils.mergeAttr(recordAttr, record.meta.attr);\n      }\n      var attributes = [];\n      $.each(recordAttr, function (name, value) {\n        attributes.push(name + '=\"' + value + '\"');\n      });\n      var recordElement = $(TableUtils.render(tpl['table/record.html'], {\n        attr: attributes.length > 0 ? ' ' + attributes.join(' ') : '',\n        index: record.index,\n        fields: fields\n      }));\n      fields.map(function (field, key) {\n        $(recordElement[0].querySelector(':scope > td:nth-child(' + (key + 1) + ')')).append(field.content);\n      });\n      return recordElement;\n    },\n    /**\n     * Сборка ячейки таблицы\n     * @param {TableInstance} table\n     * @param {Column}              column\n     * @param {object}              record\n     * @returns {{ attr: (string), content: (string) }}\n     * @private\n     */\n    renderField: function renderField(table, column, record) {\n      var columnOptions = column.getOptions();\n      var columnField = column.getField();\n      var content = null;\n      var fieldProps = record.meta && record.meta.hasOwnProperty('fields') && record.meta.fields.hasOwnProperty(columnField) ? record.meta.fields[columnField] : null;\n      var fieldAttr = columnOptions.hasOwnProperty('attr') && TableUtils.isObject(columnOptions.attr) ? columnOptions.attr : {};\n      if (fieldProps && TableUtils.isObject(fieldProps)) {\n        if (fieldProps && fieldProps.hasOwnProperty('show') && !fieldProps.show) {\n          return null;\n        }\n        if (TableUtils.isObject(fieldProps.attr)) {\n          fieldAttr = TableUtils.mergeAttr(fieldAttr, fieldProps.attr);\n        }\n      }\n      if (columnOptions.hasOwnProperty('fixed') && typeof columnOptions.fixed === 'string') {\n        fieldAttr = TableUtils.mergeAttr(fieldAttr, {\n          \"class\": 'coreui-table__fixed_' + columnOptions.fixed\n        });\n      }\n      if (typeof columnOptions.render === 'function') {\n        content = columnOptions.render({\n          table: table,\n          record: record,\n          field: columnField\n        }, table);\n      } else {\n        content = columnField && record.data.hasOwnProperty(columnField) ? record.data[columnField] : null;\n      }\n      content = column.render(content, record);\n      if (typeof column.getActions === 'function') {\n        var actions = column.getActions(content, columnField, record);\n        if (TableUtils.isObject(actions)) {\n          record.fields[columnField] = actions;\n        }\n      }\n      var fieldAttrResult = [];\n      $.each(fieldAttr, function (name, value) {\n        fieldAttrResult.push(name + '=\"' + value + '\"');\n      });\n      return {\n        attr: fieldAttrResult.length > 0 ? ' ' + fieldAttrResult.join(' ') : '',\n        content: content\n      };\n    },\n    /**\n     * Сборка записи-группы\n     * @param {TableInstance} table\n     * @param {object}              group\n     * @param {object}              record\n     * @param {Array}               renderRecords\n     * @returns {{ attr: (string), fields: (object) }}}\n     * @private\n     */\n    renderGroup: function renderGroup(table, group, record, renderRecords) {\n      var attr = group.hasOwnProperty('attr') && TableUtils.isObject(group.attr) ? group.attr : {};\n      if (attr.hasOwnProperty('class') && typeof attr[\"class\"] === 'string') {\n        attr[\"class\"] += ' coreui-table__record-group';\n      } else {\n        attr[\"class\"] = 'coreui-table__record-group';\n      }\n      var attributes = [];\n      $.each(attr, function (name, value) {\n        if (['string', 'number'].indexOf(_typeof(value)) >= 0) {\n          attributes.push(name + '=\"' + value + '\"');\n        }\n      });\n      var isCollapsing = group.hasOwnProperty('isCollapsing') ? !!group.isCollapsing : false;\n      var groupElement = $(TableUtils.render(tpl['table/record/group.html'], {\n        attr: attributes.length > 0 ? ' ' + attributes.join(' ') : '',\n        colspan: table._countColumnsShow,\n        isCollapsing: isCollapsing\n      }));\n      var td = groupElement.find(' > td');\n      var content = record.data[group.field];\n      if (group.hasOwnProperty('render')) {\n        var renderContent = null;\n        var prop = {\n          table: table,\n          record: record\n        };\n        if (typeof group.render === 'function') {\n          renderContent = group.render(prop);\n        } else if (typeof group.render === 'string') {\n          renderContent = new Function('prop', group.render)(prop);\n        }\n        if (renderContent) {\n          content = renderContent;\n        }\n      }\n      if (isCollapsing) {\n        var collapsed = $('<i class=\"bi bi-chevron-down coreui-table_pointer me-1\"></i>');\n        collapsed.click(function () {\n          if ($(this).hasClass('bi-chevron-down')) {\n            $(this).removeClass('bi-chevron-down').addClass('bi-chevron-right');\n            renderRecords.map(function (renderRecord) {\n              $(renderRecord).fadeOut(100);\n            });\n          } else {\n            $(this).removeClass('bi-chevron-right').addClass('bi-chevron-down');\n            renderRecords.map(function (renderRecord) {\n              $(renderRecord).fadeIn(100);\n            });\n          }\n        });\n        td.append(collapsed);\n      }\n      td.append(content);\n      return groupElement;\n    },\n    /**\n     * Сборка раскрывающейся строки\n     * @param {object}       table\n     * @param {Array|string} content\n     */\n    renderExpand: function renderExpand(table, content) {\n      if (_typeof(content) === 'object') {\n        content = TableRender.renderComponents(table, content, 'record_expand_show');\n      }\n      var expandRecord = $(TableUtils.render(tpl['table/record/expand.html'], {\n        colspan: table._countColumnsShow\n      }));\n      if (['string', 'number'].indexOf(_typeof(content)) >= 0) {\n        expandRecord.find('td').html(content);\n      } else if (Array.isArray(content)) {\n        $.each(content, function (key, item) {\n          if (['string', 'number'].indexOf(_typeof(item)) >= 0 || item instanceof HTMLElement || window.hasOwnProperty('jQuery') && item instanceof jQuery) {\n            expandRecord.find('td').append(item);\n          }\n        });\n      }\n      return expandRecord;\n    },\n    /**\n     * Сборка элемента управления\n     * @param {object} table\n     * @param {object} control\n     * @private\n     * @returns {HTMLElement|jQuery}\n     */\n    renderControl: function renderControl(table, control) {\n      if (TableUtils.isObject(control)) {\n        var controlElement = $(TableUtils.render(tpl['table/control.html'], {\n          id: control.getId()\n        }));\n        controlElement.append(control.render());\n        return controlElement;\n      }\n    },\n    /**\n     * Формирование контента компонента\n     * @param {object} table\n     * @param {object} components\n     * @param {string} eventName\n     * @return {Array}\n     */\n    renderComponents: function renderComponents(table, components, eventName) {\n      var result = [];\n      if (components instanceof Object) {\n        if (!Array.isArray(components)) {\n          components = [components];\n        }\n        for (var i = 0; i < components.length; i++) {\n          if (typeof components[i] === 'string') {\n            result.push(components[i]);\n          } else if (components[i] instanceof Object && typeof components[i].render === 'function' && typeof components[i].initEvents === 'function') {\n            result.push(components[i].render());\n            if (eventName) {\n              table.on(eventName, components[i].initEvents, components[i], true);\n            }\n          } else if (TableUtils.isObject(components[i]) && components[i].hasOwnProperty('component') && components[i].component.substring(0, 6) === 'coreui') {\n            var name = components[i].component.split('.')[1];\n            if (CoreUI.hasOwnProperty(name) && TableUtils.isObject(CoreUI[name])) {\n              var instance = CoreUI[name].create(components[i]);\n              result.push(instance.render());\n              if (eventName) {\n                table.on(eventName, instance.initEvents, instance, true);\n              }\n            }\n          }\n        }\n      }\n      return result;\n    }\n  };\n\n  var TableElements = {\n    /**\n     * Получение контейнера таблицы\n     * @param {string} tableId\n     * @return {jQuery}\n     */\n    getContainer: function getContainer(tableId) {\n      return $('#coreui-table-' + tableId + ' > .coreui-table__container');\n    },\n    /**\n     * Получение обертки таблицы\n     * @param {string} tableId\n     * @return {jQuery}\n     */\n    getLock: function getLock(tableId) {\n      return $('#coreui-table-' + tableId + ' > .coreui-table__container > .coreui-table-lock');\n    },\n    /**\n     * Получение обертки таблицы\n     * @param {string} tableId\n     * @return {jQuery}\n     */\n    getWrapper: function getWrapper(tableId) {\n      return $('#coreui-table-' + tableId + ' > .coreui-table__container > .coreui-table__wrapper');\n    },\n    /**\n     * Получение поискового контейнера\n     * @param {string} tableId\n     * @return {jQuery}\n     */\n    getSearchContainer: function getSearchContainer(tableId) {\n      return $('#coreui-table-' + tableId + ' > .coreui-table__container > .coreui-table__search');\n    },\n    /**\n     * Получение поискового контейнера\n     * @param {string} tableId\n     * @return {jQuery}\n     */\n    getColumnsContainer: function getColumnsContainer(tableId) {\n      return $('#coreui-table-' + tableId + ' > .coreui-table__container > .coreui-table__columns');\n    },\n    /**\n     * Получение контейнера поискового контрола\n     * @param {string} tableId\n     * @param {string} controlId\n     * @return {jQuery}\n     */\n    getSearchControl: function getSearchControl(tableId, controlId) {\n      return $('#coreui-table-' + tableId + ' > .coreui-table__container > .coreui-table__search .search-control-' + controlId);\n    },\n    /**\n     * Получение контейнера контрола\n     * @param {string} tableId\n     * @param {string} controlId\n     * @return {jQuery}\n     */\n    getControl: function getControl(tableId, controlId) {\n      return $('#coreui-table-' + tableId + '  #coreui-table-control-' + controlId);\n    },\n    /**\n     * Получение таблицы\n     * @param {string} tableId\n     * @return {jQuery}\n     */\n    getTable: function getTable(tableId) {\n      return $('#coreui-table-' + tableId + ' > .coreui-table__container > .coreui-table__wrapper > table');\n    },\n    /**\n     * Получение тела таблицы\n     * @param {string} tableId\n     * @return {jQuery}\n     */\n    getTableTbody: function getTableTbody(tableId) {\n      return $('#coreui-table-' + tableId + ' > .coreui-table__container > .coreui-table__wrapper > table > tbody');\n    },\n    /**\n     * Получение заголовков таблицы\n     * @param {string} tableId\n     * @return {jQuery}\n     */\n    getTableThead: function getTableThead(tableId) {\n      return $('#coreui-table-' + tableId + ' > .coreui-table__container > .coreui-table__wrapper > table > thead');\n    },\n    /**\n     * Получение ячеек с сортировкой по таблице\n     * @param {string} tableId\n     * @return {jQuery}\n     */\n    getTableSortable: function getTableSortable(tableId) {\n      return $('#coreui-table-' + tableId + ' > .coreui-table__container > .coreui-table__wrapper > table > thead > tr > td.coreui-table__sortable');\n    },\n    /**\n     * Получение строк записей\n     * @param {string} tableId\n     * @return {jQuery}\n     */\n    getTrRecords: function getTrRecords(tableId) {\n      return $('#coreui-table-' + tableId + ' > .coreui-table__container > .coreui-table__wrapper > table > tbody > tr.coreui-table__record');\n    },\n    /**\n     * Получение элемента строки по ключу\n     * @param {string} tableId\n     * @param {int}    index\n     * @return {jQuery}\n     */\n    getTrByIndex: function getTrByIndex(tableId, index) {\n      return $('#coreui-table-' + tableId + ' > .coreui-table__container > .coreui-table__wrapper > table > tbody > tr[data-record-index=\"' + index + '\"]');\n    },\n    /**\n     * Получение элемента строки по ключу\n     * @param {string} tableId\n     * @return {jQuery}\n     */\n    getTrEmpty: function getTrEmpty(tableId) {\n      return $('#coreui-table-' + tableId + ' > .coreui-table__container > .coreui-table__wrapper > table > tbody > tr.coreui-table__record-empty');\n    },\n    /**\n     * Получение контента под строкой\n     * @param {jQuery} recordElement\n     * @return {jQuery}\n     */\n    getExpandRow: function getExpandRow(recordElement) {\n      return recordElement.next().hasClass('coreui-table__record-expanded') ? recordElement.next() : null;\n    },\n    /**\n     * Добавление контента под строкой\n     * @param {object}       table\n     * @param {jQuery}       recordElement\n     * @param {Array|string} content\n     * @return {jQuery}\n     */\n    addExpandRow: function addExpandRow(table, recordElement, content) {\n      var expandRecord = TableRender.renderExpand(table, content, 'record_expand_show');\n      recordElement.after(expandRecord);\n      recordElement.next().show('fast');\n      recordElement.addClass('record-expanded');\n    },\n    /**\n     * Скрытие контента под строкой\n     * @param {jQuery} recordExpanded\n     * @return {jQuery}\n     */\n    hideExpandRow: function hideExpandRow(recordExpanded) {\n      recordExpanded.hide('fast');\n    },\n    /**\n     * Показ контента под строкой\n     * @param {jQuery} recordExpanded\n     * @return {jQuery}\n     */\n    showExpandRow: function showExpandRow(recordExpanded) {\n      recordExpanded.show('fast');\n    },\n    /**\n     * Удаление контента под строкой\n     * @param {jQuery} recordExpanded\n     * @return {jQuery}\n     */\n    removeExpandRow: function removeExpandRow(recordExpanded) {\n      recordExpanded.hide('fast', function () {\n        $(this).remove();\n      });\n    },\n    /**\n     * Получение выбранных на таблице элементов\n     * @param {string} tableId\n     * @return {Array}\n     */\n    getSelectedIndexes: function getSelectedIndexes(tableId) {\n      var indexes = [];\n      $('#coreui-table-' + tableId + ' > .coreui-table__container > .coreui-table__wrapper > table > tbody > tr.coreui-table__record > td.coreui-table__select_container > .coreui-table__select:checked').each(function (key, element) {\n        indexes.push($(element).val());\n      });\n      return indexes;\n    },\n    /**\n     * Получение выбранных на таблице элементов\n     * @param {string} tableId\n     * @return {Array}\n     */\n    getRowsSwitches: function getRowsSwitches(tableId) {\n      return $('#coreui-table-' + tableId + ' > .coreui-table__container > .coreui-table__wrapper > table > tbody > tr.coreui-table__record > td.coreui-table__switch_container');\n    },\n    /**\n     * Получение элементов выбора строк\n     * @param {string} tableId\n     * @return {Array}\n     */\n    getRowsSelects: function getRowsSelects(tableId) {\n      return $('#coreui-table-' + tableId + ' > .coreui-table__container > .coreui-table__wrapper  > table > tbody > tr.coreui-table__record > td.coreui-table__select_container');\n    },\n    /**\n     * Получение элемента для выбора всех строк\n     * @param {string} tableId\n     * @return {Array}\n     */\n    getRowsSelectAll: function getRowsSelectAll(tableId) {\n      return $('#coreui-table-' + tableId + ' > .coreui-table__container > .coreui-table__wrapper  > table > thead > tr > td .coreui-table__select-all');\n    },\n    /**\n     * Получение элементов для раскрытия ячеек\n     * @param {string} tableId\n     * @return {Array}\n     */\n    getNoWrapToggles: function getNoWrapToggles(tableId) {\n      return $('#coreui-table-' + tableId + ' > .coreui-table__container > .coreui-table__wrapper  > table > tbody > tr > td.coreui_table__no-wrap > i.toggle');\n    },\n    /**\n     * Выделение строки в таблице\n     * @param {jQuery} tr\n     */\n    selectTr: function selectTr(tr) {\n      tr.addClass('table-primary');\n      $('.coreui-table__select', tr).prop('checked', true);\n    },\n    /**\n     * Выделение всех строк в таблице\n     * @param {string} tableId\n     */\n    selectTrAll: function selectTrAll(tableId) {\n      var tableContainer = '#coreui-table-' + tableId + ' > .coreui-table__container > .coreui-table__wrapper > table';\n      $(tableContainer + ' > thead > tr > td > .coreui-table__select-all').prop('checked', true);\n      $(tableContainer + ' > tbody > tr.coreui-table__record').addClass('table-primary');\n      $(tableContainer + ' > tbody > tr.coreui-table__record > td > .coreui-table__select').prop('checked', true);\n    },\n    /**\n     * Снятие выделение строки в таблице\n     * @param {jQuery} tr\n     */\n    unselectTr: function unselectTr(tr) {\n      $(tr).removeClass('table-primary');\n      $('.coreui-table__select', tr).prop('checked', false);\n    },\n    /**\n     * Снятие выделение со всех строк в таблице\n     * @param {string} tableId\n     */\n    unselectTrAll: function unselectTrAll(tableId) {\n      var tableContainer = '#coreui-table-' + tableId + ' > .coreui-table__container > .coreui-table__wrapper > table';\n      $(tableContainer + ' > thead > tr > td > .coreui-table__select-all').prop('checked', false);\n      $(tableContainer + ' > tbody > tr.coreui-table__record').removeClass('table-primary');\n      $(tableContainer + ' > tbody > tr.coreui-table__record > td.coreui-table__select_container > .coreui-table__select').prop('checked', false);\n    },\n    /**\n     * Фиксация колонок слева\n     * @param {string} tableId\n     */\n    fixedColsLeft: function fixedColsLeft(tableId) {\n      var tableContainer = '#coreui-table-' + tableId + ' > .coreui-table__container';\n      var tableWrapper = tableContainer + ' > .coreui-table__wrapper';\n      var colOffset = 0;\n      $(tableWrapper + ' > table > thead > tr:last-child > td.coreui-table__fixed_left').each(function () {\n        var index = $(this).index() + 1;\n        if (index !== 1) {\n          $(tableWrapper + ' > table > thead > tr:last-child > td:nth-child(' + index + ')').css('left', colOffset + 'px');\n          $(tableWrapper + ' > table > tbody > tr > td:nth-child(' + index + ')')\n          //.addClass('coreui-table__fixed_left')\n          .css('left', colOffset + 'px');\n        }\n        colOffset += $(this).outerWidth();\n      });\n      if (colOffset > 0) {\n        $(tableContainer).addClass('fixed-columns');\n      }\n    },\n    /**\n     * Фиксация колонок справа\n     * @param {string} tableId\n     */\n    fixedColsRight: function fixedColsRight(tableId) {\n      var tableContainer = '#coreui-table-' + tableId + ' > .coreui-table__container';\n      var tableWrapper = tableContainer + ' > .coreui-table__wrapper';\n      var colOffset = 0;\n      $($(tableWrapper + ' > table > thead > tr:last-child > td.coreui-table__fixed_right').get().reverse()).each(function () {\n        var index = $(this).index() + 1;\n        if (index !== 1) {\n          $(tableWrapper + ' > table > thead > tr:last-child > td:nth-child(' + index + ')').css('right', colOffset + 'px');\n          $(tableWrapper + ' > table > tbody > tr > td:nth-child(' + index + ')')\n          //.addClass('coreui-table__fixed_left')\n          .css('right', colOffset + 'px');\n        }\n        colOffset += $(this).outerWidth();\n      });\n      if (colOffset > 0) {\n        $(tableContainer).addClass('fixed-columns');\n      }\n    }\n  };\n\n  var TablePrivate = {\n    /**\n     * Инициализация колонок\n     * @param {Table}         tableWrapper\n     * @param {TableInstance} table\n     * @param {Array}         columns\n     * @private\n     */\n    initColumns: function initColumns(tableWrapper, table, columns) {\n      var options = table.getOptions();\n      var columnsStorage = options.saveState && options.id ? TablePrivate.getStorageField(table.getId(), 'columns') : null;\n      columns.map(function (column) {\n        if (typeof column.type === 'undefined' || !tableWrapper.columns.hasOwnProperty(column.type)) {\n          column.type = 'text';\n        }\n        if (!column.hasOwnProperty('show') || typeof column.show !== 'boolean') {\n          column.show = true;\n        }\n        if (columnsStorage) {\n          $.each(columnsStorage, function (key2, columnStorage) {\n            if (columnStorage && columnStorage.hasOwnProperty('field') && columnStorage.hasOwnProperty('isShow') && columnStorage.field === column.field) {\n              column.show = !!columnStorage.isShow;\n              return false;\n            }\n          });\n        }\n        if (column.hasOwnProperty('fixed') && typeof column.fixed === 'string') {\n          table._options.overflow = true;\n        }\n        var columnInstance = new Table.columns[column.type](table, column);\n        table._columns.push(columnInstance);\n        if (columnInstance.isShow()) {\n          table._countColumnsShow++;\n        }\n      });\n    },\n    /**\n     * Инициализация поисковых полей\n     * @param {object} tableWrapper\n     * @param {Object} table\n     * @param {Array}  searchControls\n     * @private\n     */\n    initSearch: function initSearch(tableWrapper, table, searchControls) {\n      var options = table.getOptions();\n      var searchValues = options.saveState && options.id ? TablePrivate.getStorageField(table.getId(), 'search') : null;\n      $.each(searchControls, function (key, control) {\n        if (!TableUtils.isObject(control)) {\n          control = {};\n        }\n        if (!control.hasOwnProperty('type') || typeof control.type !== 'string' || !tableWrapper.search.hasOwnProperty(control.type)) {\n          control.type = 'text';\n        }\n        if (options.saveState && options.id) {\n          control.value = null;\n          if (Array.isArray(searchValues) && control.hasOwnProperty('field')) {\n            $.each(searchValues, function (key, search) {\n              if (TableUtils.isObject(search) && search.hasOwnProperty('field') && search.hasOwnProperty('value') && search.field && search.field === control.field) {\n                control.value = search.value;\n                return false;\n              }\n            });\n          }\n        }\n        var controlInstance = new Table.search[control.type](table, control);\n        table._search.push(controlInstance);\n      });\n    },\n    /**\n     * Инициализация контролов и фильтров\n     * @param {Object} tableWrapper\n     * @param {Object} table\n     * @param {Array}  rows\n     * @param {string} position\n     * @private\n     */\n    initControls: function initControls(tableWrapper, table, rows, position) {\n      var that = this;\n      rows.map(function (row) {\n        var type = 'in';\n        var controlsLeft = [];\n        var controlsCenter = [];\n        var controlsRight = [];\n        if (typeof row.type === 'string' && ['in', 'out'].indexOf(row.type.toLowerCase()) >= 0) {\n          type = row.type.toLowerCase();\n        }\n        if (row.hasOwnProperty('left') && Array.isArray(row.left)) {\n          row.left.map(function (control) {\n            var instance = that.initControl(tableWrapper, table, control);\n            if (TableUtils.isObject(instance)) {\n              controlsLeft.push(instance);\n            }\n          });\n        }\n        if (row.hasOwnProperty('center') && Array.isArray(row.center)) {\n          row.center.map(function (control) {\n            var instance = that.initControl(tableWrapper, table, control);\n            if (TableUtils.isObject(instance)) {\n              controlsCenter.push(instance);\n            }\n          });\n        }\n        if (row.hasOwnProperty('right') && Array.isArray(row.right)) {\n          row.right.map(function (control) {\n            var instance = that.initControl(tableWrapper, table, control);\n            if (TableUtils.isObject(instance)) {\n              controlsRight.push(instance);\n            }\n          });\n        }\n        if (controlsLeft.length > 0 || controlsCenter.length > 0 || controlsRight.length > 0) {\n          table._controlsPositions[position].push({\n            type: type,\n            left: controlsLeft,\n            center: controlsCenter,\n            right: controlsRight\n          });\n        }\n      });\n    },\n    /**\n     * Инициализация контрола или фильтра\n     * @param {object} tableWrapper\n     * @param {Object} table\n     * @param {object} control\n     * @private\n     */\n    initControl: function initControl(tableWrapper, table, control) {\n      var instance = null;\n      if (TableUtils.isObject(control) && typeof control.type === 'string') {\n        if (tableWrapper.controls.hasOwnProperty(control.type)) {\n          instance = new Table.controls[control.type](table, control);\n          table._controls.push(instance);\n        } else if (control.type.indexOf('filter:') === 0) {\n          var filterName = control.type.substring(7);\n          if (tableWrapper.filters.hasOwnProperty(filterName)) {\n            if (control.hasOwnProperty('field')) {\n              var options = table.getOptions();\n              if (options.saveState && options.id) {\n                var filterValues = options.saveState && options.id ? TablePrivate.getStorageField(table.getId(), 'filters') : null;\n                control.value = null;\n                if (Array.isArray(filterValues)) {\n                  $.each(filterValues, function (key, filter) {\n                    if (TableUtils.isObject(filter) && filter.hasOwnProperty('field') && filter.hasOwnProperty('value') && filter.field && filter.field === control.field) {\n                      control.value = filter.value;\n                      return false;\n                    }\n                  });\n                }\n              }\n            }\n            instance = new Table.filters[filterName](table, control);\n            table._filters.push(instance);\n          }\n        }\n      }\n      return instance;\n    },\n    /**\n     * Инициализация сортировки\n     * @param {Object} table\n     * @param {Array} sort\n     * @private\n     */\n    initSort: function initSort(table, sort) {\n      if (Array.isArray(sort) && sort.length > 0) {\n        $.each(sort, function (key, sortField) {\n          if (TableUtils.isObject(sortField) && sortField.hasOwnProperty('field') && sortField.hasOwnProperty('order') && typeof sortField.field === 'string' && typeof sortField.order === 'string' && sortField.field && sortField.order && ['asc', 'desc'].indexOf(sortField.order) >= 0) {\n            table._sort.push({\n              field: sortField.field,\n              order: sortField.order\n            });\n          }\n        });\n      }\n    },\n    /**\n     * Поиск по данным таблицы\n     * @param {object} table\n     */\n    searchLocalRecords: function searchLocalRecords(table) {\n      var searchData = table.getSearchData(true);\n      var filterData = table.getFilterData(true);\n      var columnsOptions = {};\n      table._columns.map(function (column) {\n        if (typeof column.convertToString === 'function' && typeof column.getField === 'function') {\n          var field = column.getField();\n          if (field) {\n            columnsOptions[field] = {};\n            columnsOptions[field].convertToString = column.convertToString;\n          }\n        }\n      });\n      table._records.map(function (record) {\n        var isShow = true;\n        if (searchData.length > 0) {\n          isShow = TablePrivate.isFilteredRecord(searchData, record.data, columnsOptions);\n        }\n        if (isShow && filterData.length > 0) {\n          isShow = TablePrivate.isFilteredRecord(filterData, record.data, columnsOptions);\n        }\n        record.show = isShow;\n      });\n    },\n    /**\n     * Установка записей\n     * @param {Object} table\n     * @param {Array}  records\n     * @private\n     */\n    setRecords: function setRecords(table, records) {\n      table._recordsIndex = 1;\n      table._records = [];\n      var that = this;\n      $.each(records, function (key, record) {\n        that.addRecord(table, record);\n      });\n    },\n    /**\n     * Добавление новой записи\n     * @param {object} table\n     * @param {object} data\n     * @param {number} afterIndex\n     * @return {object|null}\n     * @private\n     */\n    addRecord: function addRecord(table, data, afterIndex) {\n      if (TableUtils.isObject(data)) {\n        data = $.extend(true, {}, data);\n        var meta = data.hasOwnProperty('_meta') && TableUtils.isObject(data._meta) ? data._meta : null;\n        if (meta) {\n          delete data._meta;\n        }\n        var record = {\n          index: table._recordsIndex++,\n          data: data,\n          fields: {},\n          show: true,\n          meta: meta,\n          seq: table._seq++\n        };\n        if (typeof afterIndex === 'number') {\n          if (afterIndex === 0) {\n            table._records.splice(0, 0, record);\n            return record;\n          } else {\n            var index = null;\n            $.each(table._records, function (key, record) {\n              if (afterIndex === record.index) {\n                index = key;\n                return false;\n              }\n            });\n            if (index !== null) {\n              table._records.splice(index, 0, record);\n              return record;\n            }\n          }\n        } else {\n          table._records.push(record);\n          return record;\n        }\n      }\n      return null;\n    },\n    /**\n     * Добавление новой записи перед указанной\n     * @param {object} table\n     * @param {object} data\n     * @param {number} index\n     * @return {object|null}\n     * @private\n     */\n    addRecordBefore: function addRecordBefore(table, data, index) {\n      if (TableUtils.isObject(data) && typeof index === 'number') {\n        data = $.extend(true, {}, data);\n        var meta = data.hasOwnProperty('_meta') && TableUtils.isObject(data._meta) ? data._meta : null;\n        if (meta) {\n          delete data._meta;\n        }\n        var record = {\n          index: table._recordsIndex++,\n          data: data,\n          show: true,\n          meta: meta,\n          seq: table._seq++\n        };\n        var issetKey = false;\n        var keyBefore = null;\n        $.each(table._records, function (key, record) {\n          if (index === record.index) {\n            issetKey = true;\n            return false;\n          }\n          keyBefore = key;\n        });\n        if (issetKey && keyBefore) {\n          table._records.splice(keyBefore, 0, record);\n          return record;\n        }\n      }\n      return null;\n    },\n    /**\n     * Проверка подходит ли запись под поисковые данные\n     * @param {Array}  filters\n     * @param {object} recordData\n     * @param {object} columnsOptions\n     * @return {boolean}\n     * @private\n     */\n    isFilteredRecord: function isFilteredRecord(filters, recordData, columnsOptions) {\n      var isShow = true;\n      $.each(filters, function (key, filter) {\n        var fieldValue = null;\n        if (recordData.hasOwnProperty(filter.field) && recordData[filter.field]) {\n          if (columnsOptions && columnsOptions.hasOwnProperty(filter.field) && typeof columnsOptions[filter.field].convertToString === 'function') {\n            fieldValue = columnsOptions[filter.field].convertToString(recordData[filter.field]);\n          } else if (typeof recordData[filter.field] === 'string') {\n            fieldValue = recordData[filter.field];\n          } else if (typeof recordData[filter.field] === 'number') {\n            fieldValue = String(recordData[filter.field]);\n          }\n        }\n        if (fieldValue !== null) {\n          if (!filter.filter(fieldValue, filter.value)) {\n            isShow = false;\n            return false;\n          }\n        } else {\n          isShow = false;\n          return false;\n        }\n      });\n      return isShow;\n    },\n    /**\n     * Выполнения зарегистрированных функций в указанном событии\n     * @param {object} table\n     * @param {string} name\n     * @param {Array}  params\n     * @private\n     */\n    _trigger: function _trigger(table, name, params) {\n      params = params || [];\n      if (table._events.hasOwnProperty(name) && table._events[name].length > 0) {\n        for (var i = 0; i < table._events[name].length; i++) {\n          var callback = table._events[name][i].callback;\n          var context = table._events[name][i].context ? table._events[name][i].context : table;\n          callback.apply(context, params);\n          if (table._events[name][i].singleExec) {\n            table._events[name].splice(i, 1);\n            i--;\n          }\n        }\n      }\n    },\n    /**\n     * Сортировка записей по seq\n     * @param {Array} records\n     * @return {*}\n     */\n    sortRecordsBySeq: function sortRecordsBySeq(records) {\n      return records.sort(function (a, b) {\n        return a.seq - b.seq;\n      });\n    },\n    /**\n     * Сортировка записей по указанным полям\n     * @param {Array}  records\n     * @param {Array}  fields\n     * @param {object} columnsConverters\n     */\n    sortRecordsByFields: function sortRecordsByFields(records, fields, columnsConverters) {\n      return records.sort(function (a, b) {\n        for (var i = 0; i < fields.length; i++) {\n          var issetAField = a.data.hasOwnProperty(fields[i].field);\n          var issetBField = b.data.hasOwnProperty(fields[i].field);\n          if (!issetAField && !issetBField) {\n            return 0;\n          } else if (!issetAField) {\n            return 1;\n          } else if (!issetBField) {\n            return -1;\n          }\n          var aVal = '';\n          var bVal = '';\n          if (a.data.hasOwnProperty(fields[i].field) && a.data[fields[i].field]) {\n            if (columnsConverters && columnsConverters.hasOwnProperty(fields[i].field)) {\n              aVal = columnsConverters[fields[i].field](a.data[fields[i].field]);\n            } else if (['string', 'number'].indexOf(_typeof(a.data[fields[i].field])) >= 0) {\n              aVal = String(a.data[fields[i].field]);\n            }\n          }\n          if (b.data.hasOwnProperty(fields[i].field) && b.data[fields[i].field]) {\n            if (columnsConverters && columnsConverters.hasOwnProperty(fields[i].field)) {\n              bVal = columnsConverters[fields[i].field](b.data[fields[i].field]);\n            } else if (['string', 'number'].indexOf(_typeof(b.data[fields[i].field])) >= 0) {\n              bVal = String(b.data[fields[i].field]);\n            }\n          }\n          if (aVal === null || aVal === undefined || typeof aVal === \"function\") {\n            aVal = '';\n          } else if (_typeof(aVal) === 'object') {\n            aVal = JSON.stringify(aVal);\n          }\n          if (bVal === null || bVal === undefined || typeof bVal === \"function\") {\n            bVal = '';\n          } else if (_typeof(bVal) === 'object') {\n            bVal = JSON.stringify(bVal);\n          }\n          var val = aVal < bVal ? -1 : aVal > bVal ? 1 : 0;\n          if (fields[i].order === \"desc\") {\n            val = val * -1;\n          }\n          if (val !== 0) {\n            return val;\n          }\n        }\n      });\n    },\n    /**\n     * Установка сортировки для указанных колонок\n     * @param {object} table\n     * @param {Array}  sort\n     */\n    setColumnsSort: function setColumnsSort(table, sort) {\n      var thead = TableElements.getTableThead(table.getId());\n      $.each(table._columns, function (key, column) {\n        var options = column.getOptions();\n        if (options.hasOwnProperty('field') && options.hasOwnProperty('sortable') && typeof options.field === 'string' && options.sortable) {\n          var sortColumn = null;\n          if (Array.isArray(sort)) {\n            $.each(sort, function (key, sortItem) {\n              if (TableUtils.isObject(sortItem) && sortItem.hasOwnProperty('field') && sortItem.hasOwnProperty('order') && typeof sortItem.field === 'string' && typeof sortItem.order === 'string' && options.field === sortItem.field) {\n                sortColumn = {\n                  field: sortItem.field,\n                  order: sortItem.order\n                };\n              }\n            });\n          }\n          var columnElement = thead.find('[data-field=\"' + options.field + '\"]');\n          columnElement.find('.coreui-table__column-sort').remove();\n          if (sortColumn !== null) {\n            if (sortColumn.order === 'asc') {\n              columnElement.append('<i class=\"coreui-table__column-sort bi bi-sort-down-alt\"></i>');\n            } else {\n              columnElement.append('<i class=\"coreui-table__column-sort bi bi-sort-down\"></i>');\n            }\n          }\n        }\n      });\n    },\n    /**\n     * Получение данных из хранилища\n     * @param {string} tableId\n     * @return {object|null}\n     */\n    getStorage: function getStorage(tableId) {\n      var storage = localStorage.getItem('coreui_table');\n      try {\n        if (typeof storage === 'string' && storage) {\n          storage = JSON.parse(storage);\n          if (TableUtils.isObject(storage)) {\n            return tableId && typeof tableId === 'string' ? storage.hasOwnProperty(tableId) ? storage[tableId] : null : storage;\n          }\n        }\n        return null;\n      } catch (e) {\n        return null;\n      }\n    },\n    /**\n     * Сохранение данных в хранилище\n     * @param {string}      tableId\n     * @param {object|null} storage\n     */\n    setStorage: function setStorage(tableId, storage) {\n      if (typeof tableId !== 'string' || !tableId) {\n        return;\n      }\n      var storageAll = this.getStorage();\n      if (TableUtils.isObject(storageAll)) {\n        if (storageAll.hasOwnProperty(tableId)) {\n          if (storage) {\n            storageAll[tableId] = storage;\n          } else {\n            delete storageAll[tableId];\n          }\n        } else if (storage) {\n          storageAll[tableId] = storage;\n        }\n      }\n      localStorage.setItem('coreui_table', JSON.stringify(storageAll || {}));\n    },\n    /**\n     * Получение поля из хранилища\n     * @param tableId\n     * @param field\n     * @return {*|null}\n     */\n    getStorageField: function getStorageField(tableId, field) {\n      var storage = this.getStorage(tableId) || {};\n      return storage.hasOwnProperty(field) ? storage[field] : null;\n    },\n    /**\n     * Сохранение поля в хранилище\n     * @param tableId\n     * @param field\n     * @param data\n     */\n    setStorageField: function setStorageField(tableId, field, data) {\n      var storage = this.getStorage(tableId) || {};\n      if (data === null) {\n        if (storage.hasOwnProperty(field)) {\n          delete storage[field];\n        }\n      } else {\n        storage[field] = data;\n      }\n      this.setStorage(tableId, storage);\n    }\n  };\n\n  var TableInstance = /*#__PURE__*/function () {\n    /**\n     * Инициализация\n     * @param {object} tableWrapper\n     * @param {object} options\n     * @private\n     */\n    function TableInstance(tableWrapper, options) {\n      _classCallCheck(this, TableInstance);\n      _defineProperty(this, \"_options\", {\n        id: null,\n        \"class\": '',\n        primaryKey: 'id',\n        lang: 'en',\n        langItems: {},\n        width: null,\n        minWidth: null,\n        maxWidth: null,\n        height: null,\n        minHeight: null,\n        naxHeight: null,\n        overflow: false,\n        page: 1,\n        recordsPerPage: 25,\n        theadTop: 0,\n        saveState: false,\n        noWrap: false,\n        noWrapToggle: false,\n        showHeaders: true,\n        showScrollShadow: false,\n        recordsRequest: {\n          method: 'GET',\n          url: null // '/mod/index/orders/?page=[page]'\n        },\n        requestParams: {\n          page: 'page',\n          count: 'count',\n          start: 'start',\n          end: 'end',\n          sort: 'sort',\n          search: 'search'\n        },\n        group: {\n          field: null,\n          attr: {},\n          render: null\n        },\n        onClick: null,\n        onClickUrl: null,\n        sort: [],\n        header: [],\n        footer: [],\n        columnsHeader: [],\n        search: {\n          labelWidth: 200,\n          controls: []\n        },\n        columns: [],\n        columnsFooter: [],\n        records: []\n      });\n      _defineProperty(this, \"_id\", '');\n      _defineProperty(this, \"_page\", 1);\n      _defineProperty(this, \"_recordsIndex\", 1);\n      _defineProperty(this, \"_recordsPerPage\", 25);\n      _defineProperty(this, \"_recordsTotal\", 0);\n      _defineProperty(this, \"_recordsNumber\", 1);\n      _defineProperty(this, \"_seq\", 1);\n      _defineProperty(this, \"_isRecordsRequest\", false);\n      _defineProperty(this, \"_countColumnsShow\", 0);\n      _defineProperty(this, \"_records\", []);\n      _defineProperty(this, \"_sort\", []);\n      _defineProperty(this, \"_columns\", []);\n      _defineProperty(this, \"_search\", []);\n      _defineProperty(this, \"_filters\", []);\n      _defineProperty(this, \"_controls\", []);\n      _defineProperty(this, \"_controlsPositions\", {\n        header: [],\n        footer: []\n      });\n      _defineProperty(this, \"_events\", {});\n      this._options = $.extend(true, {}, this._options, options);\n      this._events = {};\n      this._id = this._options.hasOwnProperty('id') && typeof this._options.id === 'string' && this._options.id ? this._options.id : TableUtils.hashCode();\n      if (this._options.page > 0) {\n        this._page = this._options.page;\n      }\n      if (this._options.saveState && this._options.id) {\n        var pageSize = TablePrivate.getStorageField(this._id, 'page_size');\n        if (TableUtils.isNumeric(pageSize) && pageSize > 0) {\n          this._recordsPerPage = pageSize;\n        } else if (this._options.recordsPerPage > 0) {\n          this._recordsPerPage = this._options.recordsPerPage;\n        }\n      } else if (this._options.recordsPerPage > 0) {\n        this._recordsPerPage = this._options.recordsPerPage;\n      }\n      this._isRecordsRequest = this._options.hasOwnProperty('recordsRequest') && (typeof this._options.recordsRequest === 'function' || TableUtils.isObject(this._options.recordsRequest) && this._options.recordsRequest.hasOwnProperty('url') && typeof this._options.recordsRequest.url === 'string' && this._options.recordsRequest.url !== '' && this._options.recordsRequest.url !== '#');\n      if (this._isRecordsRequest) {\n        if (_typeof(this._options.recordsRequest) === 'object' && (!this._options.recordsRequest.hasOwnProperty('method') || typeof this._options.recordsRequest.method !== 'string')) {\n          this._options.recordsRequest.method = 'GET';\n        }\n      } else if (Array.isArray(this._options.records)) {\n        TablePrivate.setRecords(this, this._options.records);\n      }\n\n      // Очистка записей после инициализации\n      this._options.records = [];\n\n      // Инициализация колонок\n      if (_typeof(this._options.columns) === 'object' && Array.isArray(this._options.columns) && this._options.columns.length > 0) {\n        TablePrivate.initColumns(tableWrapper, this, this._options.columns);\n      }\n\n      // Инициализация поисковых полей\n      if (TableUtils.isObject(this._options.search) && _typeof(this._options.search.controls) === 'object' && Array.isArray(this._options.search.controls) && this._options.search.controls.length > 0) {\n        TablePrivate.initSearch(tableWrapper, this, this._options.search.controls);\n      }\n\n      // Инициализация контролов и фильтров\n      if (this._options.hasOwnProperty('header') && Array.isArray(this._options.header) && this._options.header.length > 0) {\n        TablePrivate.initControls(tableWrapper, this, this._options.header, 'header');\n      }\n      if (this._options.hasOwnProperty('footer') && Array.isArray(this._options.footer) && this._options.footer.length > 0) {\n        TablePrivate.initControls(tableWrapper, this, this._options.footer, 'footer');\n      }\n      if (this._options.saveState && this._options.id) {\n        // Поиск по сохраненным поисковым данным\n        if (!this._isRecordsRequest) {\n          TablePrivate.searchLocalRecords(this);\n        }\n\n        // Сортировка\n        var sort = TablePrivate.getStorageField(this.getId(), 'sort');\n        if (Array.isArray(sort) && sort.length > 0) {\n          TablePrivate.initSort(this, sort);\n          if (!this._isRecordsRequest && this._records.length > 0) {\n            this._records = TablePrivate.sortRecordsByFields(this._records, this._sort);\n          }\n        }\n      } else {\n        if (this._options.hasOwnProperty('sort') && Array.isArray(this._options.sort) && this._options.sort.length > 0) {\n          TablePrivate.initSort(this, this._options.sort);\n        }\n      }\n    }\n\n    /**\n     * Инициализация событий таблицы\n     */\n    return _createClass(TableInstance, [{\n      key: \"initEvents\",\n      value: function initEvents() {\n        var table = this;\n\n        // Показ строк\n        this.on('records_show', function () {\n          // Переход по ссылке\n          if (typeof table._options.onClickUrl === 'string' && table._options.onClickUrl) {\n            TableElements.getTrRecords(table.getId()).click(function () {\n              var recordKey = $(this).data('record-index');\n              var record = table.getRecordByIndex(recordKey);\n              if (!record) {\n                return;\n              }\n              var url = table._options.onClickUrl;\n              $.each(record.data, function (field, value) {\n                var fieldQuote = field.replace(/([^\\w\\d])/g, '\\\\$1');\n                url = url.replace(new RegExp('\\\\[' + fieldQuote + '\\\\]', 'g'), value);\n              });\n              if (url && url !== '#') {\n                location.href = url;\n              }\n            });\n          }\n\n          // Событие нажатия на строку\n          if (['function', 'string'].indexOf(_typeof(table._options.onClick))) {\n            TableElements.getTrRecords(table.getId()).click(function (event) {\n              var recordKey = $(this).data('record-index');\n              var record = table.getRecordByIndex(recordKey);\n              if (!record) {\n                return;\n              }\n              var prop = {\n                table: table,\n                record: record,\n                event: event\n              };\n              if (typeof table._options.onClick === 'function') {\n                table._options.onClick(prop);\n              } else if (typeof table._options.onClick === 'string') {\n                var func = new Function('prop', table._options.onClick);\n                func(prop);\n              }\n            });\n          }\n\n          // Раскрытие строки\n          TableElements.getNoWrapToggles(table.getId()).click(function (event) {\n            event.cancelBubble = true;\n            event.preventDefault();\n            var parent = $(this).parent();\n            if (parent.hasClass('shown')) {\n              $(this).removeClass('bi-caret-up-fill');\n              $(this).addClass('bi-caret-down-fill');\n              parent.removeClass('shown');\n            } else {\n              $(this).removeClass('bi-caret-down-fill');\n              $(this).addClass('bi-caret-up-fill');\n              parent.addClass('shown');\n            }\n          });\n\n          // Фиксация колонок\n          TableElements.fixedColsLeft(table.getId());\n          TableElements.fixedColsRight(table.getId());\n        });\n\n        // Показ таблицы\n        this.on('table_show', function () {\n          var sortableColumns = TableElements.getTableSortable(table.getId());\n          if (sortableColumns[0]) {\n            sortableColumns.click(function (event) {\n              var field = $(this).data('field');\n              if (field) {\n                var sorting = [];\n                var currentOrder = null;\n                $.each(table._sort, function (key, sortField) {\n                  if (field === sortField.field) {\n                    currentOrder = sortField.order;\n                    return false;\n                  }\n                });\n                if (currentOrder === null) {\n                  sorting.push({\n                    field: field,\n                    order: 'asc'\n                  });\n                } else if (currentOrder === 'asc') {\n                  sorting.push({\n                    field: field,\n                    order: 'desc'\n                  });\n                }\n                if (sorting.length === 0) {\n                  table.sortDefault();\n                } else {\n                  table.sortFields(sorting);\n                }\n              }\n            });\n          }\n          if (window.hasOwnProperty('bootstrap') && bootstrap.hasOwnProperty('Tooltip')) {\n            $('.coreui-table__column-description', TableElements.getTableThead(table.getId())).each(function () {\n              new bootstrap.Tooltip(this);\n            });\n          }\n        });\n\n        // События смены состояния\n        if (this._options.saveState && this._options.id) {\n          this.on('records_sort', function () {\n            TablePrivate.setStorageField(table.getId(), 'sort', table._sort);\n          });\n          this.on('search_change', function () {\n            TablePrivate.setStorageField(table.getId(), 'search', table.getSearchData());\n          });\n          this.on('filters_change', function () {\n            TablePrivate.setStorageField(table.getId(), 'filters', table.getFilterData());\n          });\n          this.on('page_size_update', function () {\n            TablePrivate.setStorageField(table.getId(), 'page_size', table._recordsPerPage);\n          });\n          this.on('columns_change', function () {\n            var columns = [];\n            table._columns.map(function (column) {\n              var columnOptions = column.getOptions();\n              columns.push({\n                field: columnOptions.field,\n                isShow: column.isShow()\n              });\n            });\n            TablePrivate.setStorageField(table.getId(), 'columns', columns);\n          });\n        }\n        TablePrivate._trigger(this, 'table_show', [this]);\n        TablePrivate._trigger(this, 'container_show');\n\n        // Вызов события показа строк\n        if (!this._isRecordsRequest) {\n          TablePrivate._trigger(this, 'records_show', [this]);\n        }\n      }\n\n      /**\n       * Получение идентификатора таблицы\n       * @returns {string}\n       */\n    }, {\n      key: \"getId\",\n      value: function getId() {\n        return this._id;\n      }\n\n      /**\n       * Получение опций таблицы\n       * @returns {*}\n       */\n    }, {\n      key: \"getOptions\",\n      value: function getOptions() {\n        return $.extend(true, {}, this._options);\n      }\n\n      /**\n       *\n       * @param element\n       * @returns {*}\n       */\n    }, {\n      key: \"render\",\n      value: function render(element) {\n        var that = this;\n        var widthSizes = [];\n        var heightSizes = [];\n        var options = this.getOptions();\n        var render = {\n          headersOut: [],\n          headersIn: [],\n          footersIn: [],\n          footersOut: []\n        };\n        this._recordsTotal = this._records.length;\n        if (options.width > 0) {\n          var unit = typeof options.width === 'number' ? 'px' : '';\n          widthSizes.push('width:' + options.width + unit);\n        }\n        if (options.minWidth > 0) {\n          var _unit = typeof options.minWidth === 'number' ? 'px' : '';\n          widthSizes.push('min-width:' + options.minWidth + _unit);\n        }\n        if (options.maxWidth > 0) {\n          var _unit2 = typeof options.maxWidth === 'number' ? 'px' : '';\n          widthSizes.push('max-width:' + options.maxWidth + _unit2);\n          options.overflow = true;\n        }\n        if (options.height > 0) {\n          var _unit3 = typeof options.height === 'number' ? 'px' : '';\n          heightSizes.push('height:' + options.height + _unit3);\n        }\n        if (options.minHeight > 0) {\n          var _unit4 = typeof options.minHeight === 'number' ? 'px' : '';\n          heightSizes.push('min-height:' + options.minHeight + _unit4);\n        }\n        if (options.maxHeight > 0) {\n          var _unit5 = typeof options.maxHeight === 'number' ? 'px' : '';\n          heightSizes.push('max-height:' + options.maxHeight + _unit5);\n          options.overflow = true;\n        }\n\n        // Верхние элементы управления\n        if (Array.isArray(this._controlsPositions.header) && this._controlsPositions.header.length > 0) {\n          this._controlsPositions.header.map(function (header) {\n            var controlsLeft = [];\n            var controlsCenter = [];\n            var controlsRight = [];\n            if (Array.isArray(header.left) && header.left.length > 0) {\n              header.left.map(function (control) {\n                var controlRender = TableRender.renderControl(that, control);\n                if (controlRender) {\n                  controlsLeft.push(controlRender);\n                }\n              });\n            }\n            if (Array.isArray(header.center) && header.center.length > 0) {\n              header.center.map(function (control) {\n                var controlRender = TableRender.renderControl(that, control);\n                if (controlRender) {\n                  controlsCenter.push(controlRender);\n                }\n              });\n            }\n            if (Array.isArray(header.right) && header.right.length > 0) {\n              header.right.map(function (control) {\n                var controlRender = TableRender.renderControl(that, control);\n                if (controlRender) {\n                  controlsRight.push(controlRender);\n                }\n              });\n            }\n            if (controlsLeft.length > 0 || controlsCenter.length > 0 || controlsRight.length > 0) {\n              if (header.type === 'in') {\n                var headerControls = $(TableUtils.render(tpl['table/controls/header.html'], {\n                  controlsLeft: controlsLeft,\n                  controlsCenter: controlsCenter,\n                  controlsRight: controlsRight\n                }));\n                if (controlsLeft.length > 0) {\n                  $.each(controlsLeft, function (key, control) {\n                    headerControls.find('.coreui-table__controls_left').append(control);\n                  });\n                }\n                if (controlsCenter.length > 0) {\n                  $.each(controlsCenter, function (key, control) {\n                    headerControls.find('.coreui-table__controls_center').append(control);\n                  });\n                }\n                if (controlsRight.length > 0) {\n                  $.each(controlsRight, function (key, control) {\n                    headerControls.find('.coreui-table__controls_right').append(control);\n                  });\n                }\n                render.headersIn.push(headerControls);\n              } else {\n                var _headerControls = $(TableUtils.render(tpl['table/controls/header-out.html'], {\n                  controlsLeft: controlsLeft,\n                  controlsCenter: controlsCenter,\n                  controlsRight: controlsRight\n                }));\n                if (controlsLeft.length > 0) {\n                  $.each(controlsLeft, function (key, control) {\n                    _headerControls.find('.coreui-table__controls_left').append(control);\n                  });\n                }\n                if (controlsCenter.length > 0) {\n                  $.each(controlsCenter, function (key, control) {\n                    _headerControls.find('.coreui-table__controls_center').append(control);\n                  });\n                }\n                if (controlsRight.length > 0) {\n                  $.each(controlsRight, function (key, control) {\n                    _headerControls.find('.coreui-table__controls_right').append(control);\n                  });\n                }\n                render.headersOut.push(_headerControls);\n              }\n            }\n          });\n        }\n\n        // Нижние элементы управления\n        if (Array.isArray(this._controlsPositions.footer) && this._controlsPositions.footer.length > 0) {\n          this._controlsPositions.footer.map(function (footer) {\n            var controlsLeft = [];\n            var controlsCenter = [];\n            var controlsRight = [];\n            if (Array.isArray(footer.left) && footer.left.length > 0) {\n              $.each(footer.left, function (key, control) {\n                var controlRender = TableRender.renderControl(that, control);\n                if (controlRender) {\n                  controlsLeft.push(controlRender);\n                }\n              });\n            }\n            if (Array.isArray(footer.center) && footer.center.length > 0) {\n              $.each(footer.center, function (key, control) {\n                var controlRender = TableRender.renderControl(that, control);\n                if (controlRender) {\n                  controlsCenter.push(controlRender);\n                }\n              });\n            }\n            if (Array.isArray(footer.right) && footer.right.length > 0) {\n              $.each(footer.right, function (key, control) {\n                var controlRender = TableRender.renderControl(that, control);\n                if (controlRender) {\n                  controlsRight.push(controlRender);\n                }\n              });\n            }\n            if (controlsLeft.length > 0 || controlsCenter.length > 0 || controlsRight.length > 0) {\n              if (footer.type === 'in') {\n                var footerControls = $(TableUtils.render(tpl['table/controls/footer.html'], {\n                  controlsLeft: controlsLeft,\n                  controlsCenter: controlsCenter,\n                  controlsRight: controlsRight\n                }));\n                if (controlsLeft.length > 0) {\n                  $.each(controlsLeft, function (key, control) {\n                    footerControls.find('.coreui-table__controls_left').append(control);\n                  });\n                }\n                if (controlsCenter.length > 0) {\n                  $.each(controlsCenter, function (key, control) {\n                    footerControls.find('.coreui-table__controls_center').append(control);\n                  });\n                }\n                if (controlsRight.length > 0) {\n                  $.each(controlsRight, function (key, control) {\n                    footerControls.find('.coreui-table__controls_right').append(control);\n                  });\n                }\n                render.footersIn.push(footerControls);\n              } else {\n                var _footerControls = $(TableUtils.render(tpl['table/controls/footer-out.html'], {\n                  controlsLeft: controlsLeft,\n                  controlsCenter: controlsCenter,\n                  controlsRight: controlsRight\n                }));\n                if (controlsLeft.length > 0) {\n                  $.each(controlsLeft, function (key, control) {\n                    _footerControls.find('.coreui-table__controls_left').append(control);\n                  });\n                }\n                if (controlsCenter.length > 0) {\n                  $.each(controlsCenter, function (key, control) {\n                    _footerControls.find('.coreui-table__controls_center').append(control);\n                  });\n                }\n                if (controlsRight.length > 0) {\n                  $.each(controlsRight, function (key, control) {\n                    _footerControls.find('.coreui-table__controls_right').append(control);\n                  });\n                }\n                render.footersOut.push(_footerControls);\n              }\n            }\n          });\n        }\n\n        // Загрузка записей\n        if (this._isRecordsRequest) {\n          this.on('container_show', function () {\n            if (typeof options.recordsRequest === 'function') {\n              that.loadByFunction(options.recordsRequest);\n            } else {\n              that.load(options.recordsRequest.url, options.recordsRequest.method);\n            }\n          });\n        }\n        var classes = [];\n        var classesWrapper = [];\n        if (options.hasOwnProperty('theme') && typeof options.theme === 'string' && options.theme) {\n          classes.push('coreui-theme-' + options.theme);\n        }\n        if (options.hasOwnProperty('showScrollShadow') && typeof options.showScrollShadow === 'boolean' && options.showScrollShadow) {\n          classesWrapper.push('table-scroll-shadow');\n        }\n        if (options.hasOwnProperty('overflow') && typeof options.overflow === 'boolean' && options.overflow) {\n          classesWrapper.push('overflow-x-auto');\n        }\n        var tableElement = TableRender.renderTable(this);\n        var containerElement = $(TableUtils.render(tpl['container.html'], {\n          id: this._id,\n          classes: classes.length > 0 ? ' ' + classes.join(' ') : '',\n          classesWrapper: classesWrapper.length > 0 ? ' ' + classesWrapper.join(' ') : '',\n          classesRoot: classesWrapper.length > 0 ? ' ' + classesWrapper.join(' ') : '',\n          widthSizes: widthSizes,\n          heightSizes: heightSizes\n        }));\n        if (render.headersOut.length > 0) {\n          containerElement.prepend(render.headersOut);\n        }\n        if (render.headersIn.length > 0) {\n          containerElement.find('.coreui-table__container').prepend(render.headersIn);\n        }\n        if (render.footersIn.length > 0) {\n          containerElement.find('.coreui-table__container').append(render.footersIn);\n        }\n        if (render.footersOut.length > 0) {\n          containerElement.append(render.footersOut);\n        }\n        containerElement.find('.coreui-table__wrapper').html(tableElement);\n        if (element === undefined) {\n          return containerElement;\n        }\n\n        // Dom element\n        var domElement = null;\n        if (typeof element === 'string') {\n          domElement = document.getElementById(element);\n        } else if (element instanceof HTMLElement) {\n          domElement = element;\n        }\n        if (domElement) {\n          $(domElement).html(containerElement);\n          this.initEvents();\n        }\n      }\n\n      /**\n       * Блокировка таблицы\n       */\n    }, {\n      key: \"lock\",\n      value: function lock() {\n        var container = TableElements.getContainer(this.getId());\n        if (container[0] && !container.find('.coreui-table-lock')[0]) {\n          var html = TableUtils.render(tpl['table/loader.html'], {\n            lang: this.getLang()\n          });\n          container.prepend(html);\n        }\n      }\n\n      /**\n       * Разблокировка таблицы\n       */\n    }, {\n      key: \"unlock\",\n      value: function unlock() {\n        TableElements.getLock(this.getId()).hide(50, function () {\n          $(this).remove();\n        });\n      }\n\n      /**\n       * Загрузка строк\n       * @param {string} url\n       * @param {string} method\n       */\n    }, {\n      key: \"load\",\n      value: function load(url, method) {\n        this.lock();\n        var that = this;\n        var params = {};\n        if (url.match(/\\[page\\]/)) {\n          url = url.replace(/\\[page\\]/g, this._page);\n        } else {\n          var paramPage = TableUtils.isObject(this._options.requestParams) && this._options.requestParams.hasOwnProperty('page') ? this._options.requestParams.page : 'page';\n          params[paramPage] = this._page;\n        }\n        if (url.match(/\\[count\\]/)) {\n          url = url.replace(/\\[count\\]/g, this._recordsPerPage);\n        } else {\n          var paramCount = TableUtils.isObject(this._options.requestParams) && this._options.requestParams.hasOwnProperty('count') ? this._options.requestParams.count : 'count';\n          params[paramCount] = this._recordsPerPage;\n        }\n        if (url.match(/\\[start\\]/)) {\n          url = url.replace(/\\[start\\]/g, (this._page - 1) * this._recordsPerPage + 1);\n        } else {\n          var paramStart = TableUtils.isObject(this._options.requestParams) && this._options.requestParams.hasOwnProperty('start') ? this._options.requestParams.start : 'start';\n          params[paramStart] = (this._page - 1) * this._recordsPerPage + 1;\n        }\n        if (url.match(/\\[end\\]/)) {\n          url = url.replace(/\\[end\\]/g, (this._page - 1) * this._recordsPerPage + Number(this._recordsPerPage));\n        } else {\n          var paramEnd = TableUtils.isObject(this._options.requestParams) && this._options.requestParams.hasOwnProperty('end') ? this._options.requestParams.end : 'end';\n          params[paramEnd] = (this._page - 1) * this._recordsPerPage + Number(this._recordsPerPage);\n        }\n        var searchData = this.getSearchData();\n        var filterData = this.getFilterData();\n        if (filterData.length > 0) {\n          filterData.map(function (filter) {\n            searchData.push(filter);\n          });\n        }\n        if (searchData.length > 0) {\n          var paramSearch = TableUtils.isObject(this._options.requestParams) && this._options.requestParams.hasOwnProperty('search') && typeof this._options.requestParams.search === 'string' ? this._options.requestParams.search : 'search';\n          params[paramSearch] = {};\n          searchData.map(function (searchItem) {\n            params[paramSearch][searchItem.field] = searchItem.value;\n          });\n        }\n        if (this._sort.length > 0) {\n          var paramSort = TableUtils.isObject(this._options.requestParams) && this._options.requestParams.hasOwnProperty('sort') && typeof this._options.requestParams.sort === 'string' ? this._options.requestParams.sort : 'sort';\n          params[paramSort] = this._sort;\n        }\n        $.ajax({\n          url: url,\n          method: method || 'GET',\n          dataType: \"json\",\n          data: params,\n          beforeSend: function beforeSend(xhr) {\n            TablePrivate._trigger(that, 'records_load_start', [that, xhr]);\n          },\n          success: function success(result) {\n            if (result.hasOwnProperty('records') && _typeof(result.records) === 'object' && Array.isArray(result.records)) {\n              var total = result.hasOwnProperty('total') && TableUtils.isNumeric(result.total) ? result.total : null;\n              that.setRecords(result.records, total);\n            } else {\n              that.setRecords([]);\n            }\n          },\n          error: function error(xhr, textStatus, errorThrown) {\n            that.setRecords([]);\n            TablePrivate._trigger(that, 'records_load_error', [that, xhr, textStatus, errorThrown]);\n          },\n          complete: function complete(xhr, textStatus) {\n            that.unlock();\n            TablePrivate._trigger(that, 'records_load_end', [that, xhr, textStatus]);\n          }\n        });\n      }\n\n      /**\n       * Загрузка строк\n       * @param {function} callback\n       */\n    }, {\n      key: \"loadByFunction\",\n      value: function loadByFunction(callback) {\n        var that = this;\n        var params = {};\n        var paramPage = TableUtils.isObject(this._options.requestParams) && this._options.requestParams.hasOwnProperty('page') ? this._options.requestParams.page : 'page';\n        var paramCount = TableUtils.isObject(this._options.requestParams) && this._options.requestParams.hasOwnProperty('count') ? this._options.requestParams.count : 'count';\n        var paramStart = TableUtils.isObject(this._options.requestParams) && this._options.requestParams.hasOwnProperty('start') ? this._options.requestParams.start : 'start';\n        var paramEnd = TableUtils.isObject(this._options.requestParams) && this._options.requestParams.hasOwnProperty('end') ? this._options.requestParams.end : 'end';\n        params[paramCount] = this._recordsPerPage;\n        params[paramPage] = this._page;\n        params[paramStart] = (this._page - 1) * this._recordsPerPage + 1;\n        params[paramEnd] = (this._page - 1) * this._recordsPerPage + Number(this._recordsPerPage);\n        var searchData = this.getSearchData();\n        var filterData = this.getFilterData();\n        if (filterData.length > 0) {\n          $.each(filterData, function (key, filter) {\n            searchData.push(filter);\n          });\n        }\n        if (searchData.length > 0) {\n          var paramSearch = TableUtils.isObject(this._options.requestParams) && this._options.requestParams.hasOwnProperty('search') && typeof this._options.requestParams.search === 'string' ? this._options.requestParams.search : 'search';\n          params[paramSearch] = {};\n          searchData.map(function (searchItem) {\n            params[paramSearch][searchItem.field] = searchItem.value;\n          });\n        }\n        if (this._sort.length > 0) {\n          var paramSort = TableUtils.isObject(this._options.requestParams) && this._options.requestParams.hasOwnProperty('sort') && typeof this._options.requestParams.sort === 'string' ? this._options.requestParams.sort : 'sort';\n          params[paramSort] = this._sort;\n        }\n        var result = callback(params, this);\n\n        /**\n         * Установка записей\n         * @param {Object} data\n         */\n        function setRecords(data) {\n          if (data.hasOwnProperty('records') && _typeof(data.records) === 'object' && Array.isArray(data.records)) {\n            var total = data.hasOwnProperty('total') && TableUtils.isNumeric(data.total) ? data.total : null;\n            that.setRecords(data.records, total);\n          } else {\n            that.setRecords([]);\n          }\n        }\n        if (result instanceof Promise) {\n          this.lock();\n          result.then(function (data) {\n            that.unlock();\n            setRecords(data);\n          })[\"catch\"](function () {\n            that.unlock();\n          });\n        } else if (_typeof(result) === 'object') {\n          setRecords(result);\n        }\n      }\n\n      /**\n       * Перезагрузка записей в таблице\n       */\n    }, {\n      key: \"reload\",\n      value: function reload() {\n        if (this._isRecordsRequest) {\n          if (typeof this._options.recordsRequest === 'function') {\n            this.loadByFunction(this._options.recordsRequest);\n          } else {\n            this.load(this._options.recordsRequest.url, this._options.recordsRequest.method);\n          }\n        }\n      }\n\n      /**\n       * Пересоздание тела таблицы\n       */\n    }, {\n      key: \"refresh\",\n      value: function refresh() {\n        var table = TableRender.renderTable(this);\n        TableElements.getTable(this.getId()).replaceWith(table);\n        TablePrivate._trigger(this, 'table_show', [this]);\n        TablePrivate._trigger(this, 'records_show', [this]);\n      }\n\n      /**\n       * Установка общего количества записей на странице\n       * @param recordsPerPage\n       */\n    }, {\n      key: \"setPageSize\",\n      value: function setPageSize(recordsPerPage) {\n        this._recordsPerPage = recordsPerPage;\n        TablePrivate._trigger(this, 'page_size_update');\n      }\n\n      /**\n       * Выбор всех записей в таблице\n       */\n    }, {\n      key: \"selectAll\",\n      value: function selectAll() {\n        TableElements.selectTrAll(this.getId());\n        TablePrivate._trigger(this, 'record_select_all');\n      }\n\n      /**\n       * Отмена выбор всех записей в таблице\n       */\n    }, {\n      key: \"unselectAll\",\n      value: function unselectAll() {\n        TableElements.unselectTrAll(this.getId());\n        TablePrivate._trigger(this, 'record_unselect_all');\n      }\n\n      /**\n       * Выбор записи в таблице\n       * @param {string} id\n       */\n    }, {\n      key: \"selectRecord\",\n      value: function selectRecord(id) {\n        var record = this.getRecordById(id);\n        if (!record) {\n          return;\n        }\n        var tr = TableElements.getTrByIndex(this.getId(), record.index);\n        if (tr.length === 0) {\n          return;\n        }\n        TableElements.selectTr(tr);\n        TablePrivate._trigger(this, 'record_select', [record]);\n      }\n\n      /**\n       * Выбор записи в таблице по индексу\n       * @param {int} index\n       */\n    }, {\n      key: \"selectRecordByIndex\",\n      value: function selectRecordByIndex(index) {\n        var record = this.getRecordByIndex(index);\n        if (!record) {\n          return;\n        }\n        var tr = TableElements.getTrByIndex(this.getId(), record.index);\n        if (tr.length === 0) {\n          return;\n        }\n        TableElements.selectTr(tr);\n        TablePrivate._trigger(this, 'record_select', [record]);\n      }\n\n      /**\n       * Отмена выбора записи в таблице\n       * @param {string} id\n       */\n    }, {\n      key: \"unselectRecord\",\n      value: function unselectRecord(id) {\n        var record = this.getRecordById(id);\n        if (!record) {\n          return;\n        }\n        var tr = TableElements.getTrByIndex(this.getId(), record.index);\n        if (!tr) {\n          return;\n        }\n        TableElements.unselectTr(tr);\n        TablePrivate._trigger(this, 'record_unselect', [record.data]);\n      }\n\n      /**\n       * Получение выбранных id\n       * @return {array}\n       */\n    }, {\n      key: \"getSelectedRecordsId\",\n      value: function getSelectedRecordsId() {\n        var records = [];\n        var that = this;\n        var field = this._options.primaryKey;\n        $.each(TableElements.getSelectedIndexes(this.getId()), function (key, index) {\n          var record = that.getRecordByIndex(index);\n          if (!record || !record.data.hasOwnProperty(field)) {\n            return;\n          }\n          records.push(record.data[field]);\n        });\n        return records;\n      }\n\n      /**\n       * Получение выбранных записей\n       * @return {array}\n       */\n    }, {\n      key: \"getSelectedRecords\",\n      value: function getSelectedRecords() {\n        var records = [];\n        var that = this;\n        $.each(TableElements.getSelectedIndexes(this.getId()), function (key, index) {\n          var record = that.getRecordByIndex(index);\n          if (!record) {\n            return;\n          }\n          records.push(record);\n        });\n        return records;\n      }\n\n      /**\n       * Получение записи по id\n       * @param id\n       * @return {object|null}\n       * @deprecated\n       */\n    }, {\n      key: \"getRecord\",\n      value: function getRecord(id) {\n        var record = this.getRecordById(id);\n        if (!record) {\n          return null;\n        }\n        return record.data;\n      }\n\n      /**\n       * Получение записей\n       */\n    }, {\n      key: \"getRecords\",\n      value: function getRecords() {\n        var records = [];\n        $.each(this._records, function (key, record) {\n          records.push($.extend(true, {}, record));\n        });\n        return records;\n      }\n\n      /**\n       * Получение данных из существующих записей\n       * @return {Array}\n       * @deprecated getRecordsData\n       */\n    }, {\n      key: \"getData\",\n      value: function getData() {\n        return this.getRecordsData();\n      }\n\n      /**\n       * Получение данных из существующих записей\n       * @return {Array}\n       */\n    }, {\n      key: \"getRecordsData\",\n      value: function getRecordsData() {\n        var data = [];\n        $.each(this._records, function (key, record) {\n          data.push($.extend(true, {}, record.data));\n        });\n        return data;\n      }\n\n      /**\n       * Переход к предыдущей странице\n       */\n    }, {\n      key: \"prevPage\",\n      value: function prevPage() {\n        if (this._page > 1) {\n          this._page--;\n          this.reload();\n        }\n      }\n\n      /**\n       * Переход к следующей странице\n       * @return {array}\n       */\n    }, {\n      key: \"nextPage\",\n      value: function nextPage() {\n        var totalPages = this._recordsTotal > 0 && this._recordsPerPage > 0 ? Math.ceil(this._recordsTotal / this._recordsPerPage) : 1;\n        if (this._page < totalPages) {\n          this._page++;\n          this.reload();\n        }\n      }\n\n      /**\n       * Переход к указанной странице\n       */\n    }, {\n      key: \"goPage\",\n      value: function goPage(page) {\n        if (page >= 1) {\n          this._page = page;\n          this.reload();\n        }\n      }\n\n      /**\n       * Регистрация функции на событие\n       * @param {Array|string} eventName\n       * @param {function}     callback\n       * @param {*}            context\n       * @param {boolean}      singleExec\n       */\n    }, {\n      key: \"on\",\n      value: function on(eventName, callback, context, singleExec) {\n        var eventNames = [];\n        if (Array.isArray(eventName)) {\n          $.each(eventName, function (key, name) {\n            if (typeof name === 'string' && name) {\n              eventNames.push(name);\n            }\n          });\n        } else if (typeof eventName === 'string' && eventName) {\n          eventNames.push(eventName);\n        } else {\n          return;\n        }\n        var that = this;\n        $.each(eventNames, function (key, name) {\n          if (!Array.isArray(that._events[name])) {\n            that._events[name] = [];\n          }\n          that._events[name].push({\n            context: context ? context : that,\n            callback: callback,\n            singleExec: !!singleExec\n          });\n        });\n      }\n\n      /**\n       * Получение переводов текущего языка\n       * @return {object}\n       */\n    }, {\n      key: \"getLang\",\n      value: function getLang() {\n        return $.extend(true, {}, this._options.langItems);\n      }\n\n      /**\n       * Установка видимых колонок, не указанные колонки будут скрыты\n       * @param {Array} columns\n       */\n    }, {\n      key: \"setColumnsShow\",\n      value: function setColumnsShow(columns) {\n        if (!Array.isArray(columns)) {\n          return;\n        }\n        var isChange = false;\n        var table = this;\n        this._countColumnsShow = 0;\n        this._columns.map(function (column) {\n          var options = column.getOptions();\n          if (options.hasOwnProperty('field') && typeof options.field === 'string') {\n            var isShow = columns.indexOf(options.field) >= 0;\n            if (column.isShow() !== isShow) {\n              column.setShow(isShow);\n              isChange = true;\n            }\n          }\n          if (column.isShow()) {\n            table._countColumnsShow++;\n          }\n        });\n        if (isChange) {\n          TablePrivate._trigger(this, 'columns_change');\n          this.refresh();\n        }\n      }\n\n      /**\n       * Показ колонок\n       * @param {Array} columns\n       */\n    }, {\n      key: \"showColumns\",\n      value: function showColumns(columns) {\n        if (!Array.isArray(columns)) {\n          return;\n        }\n        var isChange = false;\n        var table = this;\n        this._countColumnsShow = 0;\n        this._columns.map(function (column) {\n          var options = column.getOptions();\n          if (options.hasOwnProperty('field') && typeof options.field === 'string' && columns.indexOf(options.field) >= 0 && !column.isShow()) {\n            column.setShow(true);\n            isChange = true;\n          }\n          if (column.isShow()) {\n            table._countColumnsShow++;\n          }\n        });\n        if (isChange) {\n          TablePrivate._trigger(this, 'columns_change');\n          this.refresh();\n        }\n      }\n\n      /**\n       * Скрытие колонок\n       * @param {Array} columns\n       */\n    }, {\n      key: \"hideColumns\",\n      value: function hideColumns(columns) {\n        if (!Array.isArray(columns)) {\n          return;\n        }\n        var isChange = false;\n        var table = this;\n        this._countColumnsShow = 0;\n        this._columns.map(function (column) {\n          var options = column.getOptions();\n          if (options.hasOwnProperty('field') && typeof options.field === 'string' && columns.indexOf(options.field) >= 0 && column.isShow()) {\n            column.setShow(false);\n            isChange = true;\n          }\n          if (column.isShow()) {\n            table._countColumnsShow++;\n          }\n        });\n        if (isChange) {\n          TablePrivate._trigger(this, 'columns_change');\n          this.refresh();\n        }\n      }\n\n      /**\n       * Получение поисковых данных\n       * @property {boolean} extOptions\n       * @return {*[]}\n       */\n    }, {\n      key: \"getSearchData\",\n      value: function getSearchData(extOptions) {\n        var searchData = [];\n        this._search.map(function (control) {\n          var field = control.getField();\n          if (field) {\n            var value = control.getValue();\n            if (value !== null) {\n              var search = {\n                field: field,\n                value: value\n              };\n              if (extOptions) {\n                search.filter = typeof control.filter === 'function' ? control.filter : null;\n                search.type = control._options.type;\n              }\n              searchData.push(search);\n            }\n          }\n        });\n        return searchData;\n      }\n\n      /**\n       * Получение данных из фильтров\n       * @property {boolean} extOptions\n       * @return {*[]}\n       */\n    }, {\n      key: \"getFilterData\",\n      value: function getFilterData(extOptions) {\n        var filterData = [];\n        this._filters.map(function (control) {\n          var field = control.getField();\n          if (field) {\n            var value = control.getValue();\n            if (value !== null) {\n              var filter = {\n                field: field,\n                value: value\n              };\n              if (extOptions) {\n                filter.filter = typeof control.filter === 'function' ? control.filter : null;\n              }\n              filterData.push(filter);\n            }\n          }\n        });\n        return filterData;\n      }\n\n      /**\n       * Поиск по таблице с использованием данных из поиска и фильтров\n       */\n    }, {\n      key: \"searchRecords\",\n      value: function searchRecords() {\n        var searchData = this.getSearchData();\n        var filterData = this.getFilterData();\n        this._page = 1;\n        if (this._isRecordsRequest) {\n          if (typeof this._options.recordsRequest === 'function') {\n            this.loadByFunction(this._options.recordsRequest);\n          } else {\n            this.load(this._options.recordsRequest.url, this._options.recordsRequest.method);\n          }\n        } else {\n          TablePrivate.searchLocalRecords(this);\n          this.refresh();\n        }\n        TablePrivate._trigger(this, 'filters_change', [filterData]);\n        TablePrivate._trigger(this, 'search_change', [searchData]);\n      }\n\n      /**\n       * Очистка поисковых данных\n       */\n    }, {\n      key: \"clearSearch\",\n      value: function clearSearch() {\n        $.each(this._search, function (key, search) {\n          search.setValue(null);\n        });\n        this.searchRecords();\n      }\n\n      /**\n       * Очистка поисковых данных в фильтрах\n       */\n    }, {\n      key: \"clearFilters\",\n      value: function clearFilters() {\n        $.each(this._filters, function (key, filter) {\n          filter.setValue(null);\n        });\n        this.searchRecords();\n      }\n\n      /**\n       * Получение записи по индексу\n       * @param {string|number} index\n       * @return {object|null}\n       */\n    }, {\n      key: \"getRecordByIndex\",\n      value: function getRecordByIndex(index) {\n        if (['string', 'number'].indexOf(_typeof(index)) < 0 || index === '') {\n          return null;\n        }\n        index = Number(index);\n        if (index <= 0) {\n          return null;\n        }\n        var record = null;\n        $.each(this._records, function (key, recordItem) {\n          if (recordItem.index === index) {\n            record = {\n              index: recordItem.index,\n              data: $.extend(true, {}, recordItem.data),\n              meta: recordItem.meta ? $.extend(true, {}, recordItem.meta) : null\n            };\n            return false;\n          }\n        });\n        return record;\n      }\n\n      /**\n       * Получение записи по id\n       * @param {string} id\n       * @return {object|null}\n       */\n    }, {\n      key: \"getRecordById\",\n      value: function getRecordById(id) {\n        return this.getRecordByField(this._options.primaryKey, id);\n      }\n\n      /**\n       * Получение записи по полю и его значению\n       * @param {string}        field\n       * @param {string|number} value\n       * @return {object|null}\n       */\n    }, {\n      key: \"getRecordByField\",\n      value: function getRecordByField(field, value) {\n        var record = null;\n        $.each(this._records, function (key, recordItem) {\n          if (recordItem.data.hasOwnProperty(field) && recordItem.data[field] === value) {\n            record = $.extend(true, {}, recordItem);\n            return false;\n          }\n        });\n        return record;\n      }\n\n      /**\n       * Получение контрола по его id\n       * @param {string} id\n       * @return {object}\n       */\n    }, {\n      key: \"getControlById\",\n      value: function getControlById(id) {\n        var result = null;\n        $.each(this._controls, function (key, control) {\n          if (control.hasOwnProperty('getId') && typeof control.getId === 'function' && control.getId() === id) {\n            result = control;\n            return false;\n          }\n        });\n        return result;\n      }\n\n      /**\n       * Получение контрола поиска по его id\n       * @param {string} id\n       * @return {object}\n       */\n    }, {\n      key: \"getSearchControlById\",\n      value: function getSearchControlById(id) {\n        var result = null;\n        $.each(this._search, function (key, search) {\n          if (search.hasOwnProperty('getId') && typeof search.getId === 'function' && search.getId() === id) {\n            result = search;\n            return false;\n          }\n        });\n        return result;\n      }\n\n      /**\n       * Сортировка по полям\n       * @param {Array} sorting\n       */\n    }, {\n      key: \"sortFields\",\n      value: function sortFields(sorting) {\n        if (!Array.isArray(sorting)) {\n          return;\n        }\n        var that = this;\n        var columnsConverters = {};\n        this._sort = [];\n        $.each(sorting, function (key, sort) {\n          if (!TableUtils.isObject(sort) || !sort.hasOwnProperty('field') || !sort.hasOwnProperty('order') || typeof sort.field !== 'string' || typeof sort.order !== 'string' || !sort.field || !sort.order) {\n            return;\n          }\n          var columnSortable = false;\n          $.each(that._columns, function (key, column) {\n            var options = column.getOptions();\n            if (options.hasOwnProperty('field') && options.hasOwnProperty('sortable') && typeof options.field === 'string' && options.field === sort.field && options.sortable) {\n              columnSortable = true;\n              if (typeof column.convertToString === 'function') {\n                columnsConverters[options.field] = column.convertToString;\n              }\n              return false;\n            }\n          });\n          if (columnSortable) {\n            that._sort.push({\n              field: sort.field,\n              order: sort.order\n            });\n          }\n        });\n        this._page = 1;\n        if (this._sort.length >= 0) {\n          if (this._isRecordsRequest) {\n            if (typeof this._options.recordsRequest === 'function') {\n              this.loadByFunction(this._options.recordsRequest);\n            } else {\n              this.load(this._options.recordsRequest.url, this._options.recordsRequest.method);\n            }\n            TablePrivate.setColumnsSort(this, this._sort);\n          } else {\n            this._records = TablePrivate.sortRecordsByFields(this._records, this._sort, columnsConverters);\n            this.refresh();\n          }\n        }\n        TablePrivate._trigger(this, 'records_sort', [this]);\n      }\n\n      /**\n       * Сортировка по умолчанию\n       */\n    }, {\n      key: \"sortDefault\",\n      value: function sortDefault() {\n        this._sort = [];\n        if (this._isRecordsRequest) {\n          if (typeof this._options.recordsRequest === 'function') {\n            this.loadByFunction(this._options.recordsRequest);\n          } else {\n            this.load(this._options.recordsRequest.url, this._options.recordsRequest.method);\n          }\n          TablePrivate.setColumnsSort(this);\n        } else {\n          this._records = TablePrivate.sortRecordsBySeq(this._records);\n          this.refresh();\n        }\n        TablePrivate._trigger(this, 'records_sort', [this]);\n      }\n\n      /**\n       * Удаление строки из таблицы по индексу\n       * @param index\n       */\n    }, {\n      key: \"removeRecordByIndex\",\n      value: function removeRecordByIndex(index) {\n        var recordKey = null;\n        $.each(this._records, function (key, recordItem) {\n          if (recordItem.index === index) {\n            recordKey = key;\n            return false;\n          }\n        });\n        if (recordKey !== null && recordKey >= 0) {\n          this._records.splice(recordKey, 1);\n          var that = this;\n          var tr = TableElements.getTrByIndex(this.getId(), index);\n          if (tr.length >= 0) {\n            var emptyRecords = that._records.length === 0;\n            tr.fadeOut('fast', function () {\n              tr.remove();\n              if (emptyRecords) {\n                var tbody = TableElements.getTableTbody(that.getId());\n                tbody.append(TableUtils.render(tpl['table/record/empty.html'], {\n                  columnsCount: that._countColumnsShow,\n                  lang: that.getLang()\n                }));\n              }\n            });\n          }\n          this._recordsNumber--;\n        }\n      }\n\n      /**\n       * Добавление строки в таблицу после строки с индексом\n       * @param {object} recordData\n       * @param {number} index\n       */\n    }, {\n      key: \"addRecordAfterIndex\",\n      value: function addRecordAfterIndex(recordData, index) {\n        var tr = TableElements.getTrByIndex(this.getId(), index);\n        if (tr.length >= 0) {\n          var record = TablePrivate.addRecord(this, recordData, index);\n          if (record) {\n            TableElements.getTrEmpty(this.getId()).remove();\n            tr.after(TableRender.renderRecord(this, record));\n            this._recordsNumber++;\n          }\n        }\n      }\n\n      /**\n       * Добавление строки в таблицу перед строкой с индексом\n       * @param {object} recordData\n       * @param {number} index\n       */\n    }, {\n      key: \"addRecordBeforeIndex\",\n      value: function addRecordBeforeIndex(recordData, index) {\n        var tr = TableElements.getTrByIndex(this.getId(), index);\n        if (tr.length >= 0) {\n          var record = TablePrivate.addRecordBefore(this, recordData, index);\n          if (record) {\n            TableElements.getTrEmpty(this.getId()).remove();\n            tr.before(TableRender.renderRecord(this, record));\n            this._recordsNumber++;\n          }\n        }\n      }\n\n      /**\n       * Добавление строки в начало таблицы\n       * @param {object} recordData\n       */\n    }, {\n      key: \"addRecordFirst\",\n      value: function addRecordFirst(recordData) {\n        var tbody = TableElements.getTableTbody(this.getId());\n        if (tbody.length >= 0) {\n          var record = TablePrivate.addRecord(this, recordData, 0);\n          if (record) {\n            TableElements.getTrEmpty(this.getId()).remove();\n            tbody.prepend(TableRender.renderRecord(this, record));\n            this._recordsNumber++;\n          }\n        }\n      }\n\n      /**\n       * Добавление строки в конец таблицы\n       * @param {object} recordData\n       */\n    }, {\n      key: \"addRecordLast\",\n      value: function addRecordLast(recordData) {\n        var tbody = TableElements.getTableTbody(this.getId());\n        if (tbody.length >= 0) {\n          var record = TablePrivate.addRecord(this, recordData);\n          if (record) {\n            TableElements.getTrEmpty(this.getId()).remove();\n            tbody.append(TableRender.renderRecord(this, record));\n            this._recordsNumber++;\n          }\n        }\n      }\n\n      /**\n       * Установка записей для таблицы\n       * @param {Array}  records\n       * @param {number} total\n       */\n    }, {\n      key: \"setRecords\",\n      value: function setRecords(records, total) {\n        if (!Array.isArray(records)) {\n          return;\n        }\n        this._recordsTotal = TableUtils.isNumeric(total) ? parseInt(total) : records.length;\n        TablePrivate.setRecords(this, records);\n        if (records.length > 0) {\n          this._recordsNumber = this._page === 1 ? 1 : (this._page - 1) * this._recordsPerPage + 1;\n        }\n        var recordsElements = TableRender.renderRecords(this, this._records);\n        var tableBody = TableElements.getTableTbody(this.getId());\n        tableBody.html('');\n        $.each(recordsElements, function (key, recordElement) {\n          tableBody.append(recordElement);\n        });\n        TablePrivate._trigger(this, 'records_show', [this]);\n      }\n\n      /**\n       * Получение количества строк\n       * @return {number}\n       */\n    }, {\n      key: \"getRecordsCount\",\n      value: function getRecordsCount() {\n        var count = 0;\n        if (this._isRecordsRequest) {\n          count = this._recordsTotal;\n        } else {\n          this._records.map(function (record) {\n            if (record.show) {\n              count++;\n            }\n          });\n        }\n        return count;\n      }\n\n      /**\n       * Раскрытие / скрытие дополнительных данных строки\n       * @param {number}                                   recordIndex\n       * @param {HTMLElement|jQuery|string|Array|function} content\n       * @param {boolean}                                  isRebuild - true default\n       */\n    }, {\n      key: \"expandRecordContent\",\n      value: function expandRecordContent(recordIndex, content, isRebuild) {\n        var recordElement = TableElements.getTrByIndex(this.getId(), recordIndex);\n        var recordExpanded = TableElements.getExpandRow(recordElement);\n        if (recordElement.hasClass('record-expanded')) {\n          if (recordExpanded) {\n            if (isRebuild === undefined || isRebuild) {\n              TableElements.removeExpandRow(recordExpanded);\n            } else {\n              TableElements.hideExpandRow(recordExpanded);\n            }\n          }\n          recordElement.removeClass('record-expanded');\n          TablePrivate._trigger(this, 'record_expand_hide', [recordIndex]);\n        } else {\n          if (recordExpanded) {\n            TableElements.showExpandRow(recordExpanded);\n            recordElement.addClass('record-expanded');\n            TablePrivate._trigger(this, 'record_expand_show', [recordIndex]);\n          } else {\n            var _recordIndex = recordElement.data('record-index');\n            if (typeof content === 'function') {\n              var callbackResult = content();\n              if (callbackResult instanceof Promise) {\n                var that = this;\n                callbackResult.then(function (result) {\n                  TableElements.addExpandRow(that, recordElement, result);\n                  TablePrivate._trigger(that, 'record_expand_show', [_recordIndex]);\n                })[\"catch\"](function () {\n                  TableElements.addExpandRow(that, recordElement, '');\n                  TablePrivate._trigger(that, 'record_expand_show', [_recordIndex]);\n                });\n              } else {\n                TableElements.addExpandRow(this, recordElement, callbackResult);\n                TablePrivate._trigger(this, 'record_expand_show', [_recordIndex]);\n              }\n            } else {\n              TableElements.addExpandRow(this, recordElement, content);\n              TablePrivate._trigger(this, 'record_expand_show', [_recordIndex]);\n            }\n          }\n        }\n      }\n\n      /**\n       * Раскрытие / скрытие дополнительных данных строки\n       * @param {number}  recordIndex\n       * @param {string}  url\n       * @param {boolean} isRebuild\n       */\n    }, {\n      key: \"expandRecordUrl\",\n      value: function expandRecordUrl(recordIndex, url, isRebuild) {\n        var that = this;\n        this.expandRecordContent(recordIndex, function () {\n          that.lock();\n          return new Promise(function (resolve, reject) {\n            $.ajax({\n              method: 'get',\n              url: url,\n              success: function success(response, textStatus, xhr) {\n                var result = response;\n                if (typeof response === 'string') {\n                  if (String(xhr.getResponseHeader('Content-Type')).indexOf('application/json') === 0) {\n                    try {\n                      result = JSON.parse(response);\n                    } catch (e) {\n                      console.warn(e);\n                    }\n                  }\n                }\n                resolve(result);\n              },\n              error: function error(xhr, textStatus, errorThrown) {\n                reject(xhr, textStatus, errorThrown);\n              },\n              complete: function complete(xhr, textStatus) {\n                that.unlock();\n              }\n            });\n          });\n        }, isRebuild);\n      }\n    }]);\n  }();\n\n  var Table = {\n    columns: {},\n    controls: {},\n    filters: {},\n    search: {},\n    lang: {},\n    _instances: {},\n    _settings: {\n      lang: 'en'\n    },\n    /**\n     * @param {object} options\n     * @returns {object}\n     */\n    create: function create(options) {\n      if (!options.hasOwnProperty('lang') || typeof options.lang !== 'string') {\n        options.lang = this.getSetting('lang');\n      }\n      var langItems = this.lang.hasOwnProperty(options.lang) ? this.lang[options.lang] : {};\n      options.langItems = options.hasOwnProperty('langItems') && TableUtils.isObject(options.langItems) ? $.extend(true, {}, langItems, options.langItems) : langItems;\n      var instance = new TableInstance(this, options instanceof Object ? options : {});\n      var tableId = instance.getId();\n      this._instances[tableId] = instance;\n      return instance;\n    },\n    /**\n     * @param {string} id\n     * @returns {object|null}\n     */\n    get: function get(id) {\n      if (!this._instances.hasOwnProperty(id)) {\n        return null;\n      }\n      if (!$('#coreui-table-' + id)[0]) {\n        delete this._instances[id];\n        return null;\n      }\n      return this._instances[id];\n    },\n    /**\n     * Установка настроек\n     * @param {object} settings\n     */\n    setSettings: function setSettings(settings) {\n      this._settings = $.extend(true, {}, this._settings, settings);\n    },\n    /**\n     * Получение значения настройки\n     * @param {string} name\n     */\n    getSetting: function getSetting(name) {\n      var value = null;\n      if (this._settings.hasOwnProperty(name)) {\n        value = this._settings[name];\n      }\n      return value;\n    }\n  };\n\n  var langEn = {\n    \"emptyRecords\": \"No records\",\n    \"loading\": \"Loading...\",\n    \"total\": \"Total\",\n    \"all\": \"All\",\n    \"complete\": \"Complete\",\n    \"search\": \"Search\",\n    \"searchAction\": \"Search\",\n    \"clear\": \"Clear\",\n    \"monthNames\": ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\n    \"monthNamesShort\": ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n    \"dayNames\": ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n    \"dayNamesMin\": ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']\n  };\n\n  var langRu = {\n    \"emptyRecords\": \"Нет записей\",\n    \"loading\": \"Загрузка...\",\n    \"total\": \"Всего\",\n    \"all\": \"Все\",\n    \"complete\": \"Применить\",\n    \"search\": \"Поиск\",\n    \"searchAction\": \"Искать\",\n    \"clear\": \"Очистить\",\n    \"monthNames\": ['Январь', 'Февраль', 'Март', 'Апрель', 'Май', 'Июнь', 'Июль', 'Август', 'Сентябрь', 'Октябрь', 'Ноябрь', 'Декабрь'],\n    \"monthNamesShort\": ['Янв', 'Фев', 'Мар', 'Апр', 'Май', 'Июн', 'Июл', 'Авг', 'Сен', 'Окт', 'Ноя', 'Дек'],\n    \"dayNames\": ['воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота'],\n    \"dayNamesMin\": ['Вс', 'Пн', 'Вт', 'Ср', 'Чт', 'Пт', 'Сб']\n  };\n\n  var Control = /*#__PURE__*/function () {\n    /**\n     * Инициализация\n     * @param {object} table\n     * @param {object} options\n     */\n    function Control(table, options) {\n      _classCallCheck(this, Control);\n      _defineProperty(this, \"_id\", null);\n      _defineProperty(this, \"_table\", null);\n      _defineProperty(this, \"_options\", {\n        type: '',\n        id: ''\n      });\n      this._table = table;\n      this._options = $.extend(true, this._options, options);\n      this._id = this._options.hasOwnProperty('id') && typeof this._options.id === 'string' && this._options.id ? this._options.id : TableUtils.hashCode();\n    }\n\n    /**\n     * Получение ID элемента управления\n     * @returns {string}\n     */\n    return _createClass(Control, [{\n      key: \"getId\",\n      value: function getId() {\n        return this._id;\n      }\n\n      /**\n       * Получение параметров\n       * @returns {object}\n       */\n    }, {\n      key: \"getOptions\",\n      value: function getOptions() {\n        return $.extend(true, {}, this._options);\n      }\n\n      /**\n       * Формирование контента для размещения на странице\n       * @returns {*}\n       */\n    }, {\n      key: \"render\",\n      value: function render() {\n        return '';\n      }\n    }]);\n  }();\n\n  var ControlLink = /*#__PURE__*/function (_Control) {\n    /**\n     * Инициализация\n     * @param {TableInstance} table\n     * @param {Object}              options\n     */\n    function ControlLink(table, options) {\n      _classCallCheck(this, ControlLink);\n      options = $.extend(true, {\n        id: null,\n        type: 'link',\n        url: null,\n        content: null,\n        onClick: null,\n        attr: null\n      }, options);\n      return _callSuper(this, ControlLink, [table, options]);\n    }\n\n    /**\n     * Формирование контента для размещения на странице\n     * @returns {jQuery}\n     */\n    _inherits(ControlLink, _Control);\n    return _createClass(ControlLink, [{\n      key: \"render\",\n      value: function render() {\n        var that = this;\n        var attributes = [];\n        if (_typeof(this._options.attr) === 'object') {\n          $.each(this._options.attr, function (name, value) {\n            if (['string', 'number'].indexOf(_typeof(value)) >= 0) {\n              attributes.push(name + '=\"' + value + '\"');\n            }\n          });\n        }\n        var link = $(TableUtils.render(tpl['controls/link.html'], {\n          url: this._options.url,\n          content: this._options.content,\n          attr: attributes.length > 0 ? ' ' + attributes.join(' ') : ''\n        }));\n        if (typeof this._options.onClick === 'function' || typeof this._options.onClick === 'string') {\n          link.click(function (event) {\n            var prop = {\n              table: that._table,\n              control: that,\n              event: event\n            };\n            if (typeof that._options.onClick === 'function') {\n              return that._options.onClick(prop);\n            } else if (typeof that._options.onClick === 'string') {\n              var func = new Function('prop', that._options.onClick);\n              func(prop);\n            }\n          });\n        }\n        return link;\n      }\n    }]);\n  }(Control);\n\n  var ControlButton = /*#__PURE__*/function (_Control) {\n    /**\n     * Инициализация\n     * @param {TableInstance} table\n     * @param {Object}              options\n     */\n    function ControlButton(table, options) {\n      _classCallCheck(this, ControlButton);\n      options = $.extend(true, {\n        id: null,\n        type: 'button',\n        content: null,\n        onClick: null,\n        attr: {\n          \"class\": 'btn btn-secondary'\n        }\n      }, options);\n      return _callSuper(this, ControlButton, [table, options]);\n    }\n\n    /**\n     * Формирование контента для размещения на странице\n     * @returns {jQuery}\n     */\n    _inherits(ControlButton, _Control);\n    return _createClass(ControlButton, [{\n      key: \"render\",\n      value: function render() {\n        var attributes = [];\n        if (TableUtils.isObject(this._options.attr)) {\n          $.each(this._options.attr, function (name, value) {\n            if (['string', 'number'].indexOf(_typeof(value)) >= 0) {\n              attributes.push(name + '=\"' + value + '\"');\n            }\n          });\n        }\n        var btn = $(TableUtils.render(tpl['controls/button.html'], {\n          content: this._options.content,\n          attr: attributes.length > 0 ? ' ' + attributes.join(' ') : ''\n        }));\n        if (typeof this._options.onClick === 'function' || typeof this._options.onClick === 'string') {\n          var that = this;\n          btn.click(function (event) {\n            var prop = {\n              table: that._table,\n              control: that,\n              event: event\n            };\n            if (typeof that._options.onClick === 'function') {\n              that._options.onClick(prop);\n            } else if (typeof that._options.onClick === 'string') {\n              var func = new Function('prop', that._options.onClick);\n              func(prop);\n            }\n          });\n        }\n        return btn;\n      }\n    }]);\n  }(Control);\n\n  var ControlDropdown = /*#__PURE__*/function (_Control) {\n    /**\n     * Инициализация\n     * @param {TableInstance} table\n     * @param {Object}              options\n     */\n    function ControlDropdown(table, options) {\n      _classCallCheck(this, ControlDropdown);\n      options = $.extend(true, {\n        id: null,\n        type: 'dropdown',\n        content: null,\n        items: null,\n        attr: {\n          \"class\": 'btn btn-secondary dropdown-toggle'\n        }\n      }, options);\n      return _callSuper(this, ControlDropdown, [table, options]);\n    }\n\n    /**\n     * Формирование контента для размещения на странице\n     * @returns {string}\n     */\n    _inherits(ControlDropdown, _Control);\n    return _createClass(ControlDropdown, [{\n      key: \"render\",\n      value: function render() {\n        var options = this.getOptions();\n        var table = this._table;\n        var that = this;\n        var items = [];\n        var attributes = [];\n        if (Array.isArray(options.items)) {\n          options.items.map(function (item) {\n            if (TableUtils.isObject(item) && typeof item.type === 'string') {\n              if (item.type === 'link') {\n                if (item.hasOwnProperty('url') && item.hasOwnProperty('content') && typeof item.url === 'string' && typeof item.content === 'string') {\n                  var link = TableUtils.render(tpl['controls/dropdown/link.html'], {\n                    url: item.url,\n                    content: item.content\n                  });\n                  items.push(link);\n                }\n              } else if (item.type === 'button') {\n                if (item.hasOwnProperty('content') && typeof item.content === 'string') {\n                  var button = $(TableUtils.render(tpl['controls/dropdown/button.html'], {\n                    url: item.url,\n                    content: item.content\n                  }));\n                  if (item.hasOwnProperty('onClick') && ['string', 'function'].indexOf(_typeof(item.onClick)) >= 0) {\n                    button.click(function (event) {\n                      var prop = {\n                        table: table,\n                        control: that,\n                        event: event\n                      };\n                      if (typeof item.onClick === 'function') {\n                        item.onClick(prop);\n                      } else if (typeof item.onClick === 'string') {\n                        var func = new Function('prop', item.onClick);\n                        func(prop);\n                      }\n                    });\n                  }\n                  items.push(button);\n                }\n              } else if (item.type === 'divider') {\n                items.push(tpl['controls/dropdown/divider.html']);\n              }\n            }\n          });\n        }\n        if (TableUtils.isObject(options.attr)) {\n          if (options.attr.hasOwnProperty('type')) {\n            delete options.attr.type;\n          }\n          if (options.attr.hasOwnProperty('id')) {\n            delete options.attr.id;\n          }\n          if (options.attr.hasOwnProperty('data-bs-toggle')) {\n            delete options.attr['data-bs-toggle'];\n          }\n          $.each(options.attr, function (name, value) {\n            attributes.push(name + '=\"' + value + '\"');\n          });\n        }\n        var dropdown = $(TableUtils.render(tpl['controls/dropdown.html'], {\n          content: options.content,\n          position: options.hasOwnProperty('position') && typeof options.position === 'string' ? options.position : 'end',\n          attr: attributes.length > 0 ? ' ' + attributes.join(' ') : ''\n        }));\n        if (items.length > 0) {\n          var menu = dropdown.find('.dropdown-menu');\n          items.map(function (item) {\n            menu.append(item);\n          });\n        }\n        return dropdown;\n      }\n    }]);\n  }(Control);\n\n  var ControlButtonGroup = /*#__PURE__*/function (_Control) {\n    /**\n     * Инициализация\n     * @param {TableInstance} table\n     * @param {Object}              options\n     */\n    function ControlButtonGroup(table, options) {\n      var _this;\n      _classCallCheck(this, ControlButtonGroup);\n      options = $.extend(true, {\n        id: null,\n        type: 'button_group',\n        buttons: null\n      }, options);\n      _this = _callSuper(this, ControlButtonGroup, [table, options]);\n      _defineProperty(_this, \"_link\", {\n        attr: {\n          \"class\": 'btn btn-secondary'\n        }\n      });\n      _defineProperty(_this, \"_button\", {\n        attr: {\n          \"class\": 'btn btn-secondary'\n        }\n      });\n      _defineProperty(_this, \"_dropdown\", {\n        attr: {\n          \"class\": 'btn btn-secondary dropdown-toggle'\n        }\n      });\n      return _this;\n    }\n\n    /**\n     * Формирование контента для размещения на странице\n     * @returns {string}\n     */\n    _inherits(ControlButtonGroup, _Control);\n    return _createClass(ControlButtonGroup, [{\n      key: \"render\",\n      value: function render() {\n        var options = this.getOptions();\n        var buttons = [];\n        var that = this;\n        if (Array.isArray(options.buttons)) {\n          /**\n           * Создание ссылки\n           * @param {Object} link\n           */\n          var makeLink = function makeLink(link) {\n            var result = null;\n            if (link.hasOwnProperty('url') && link.hasOwnProperty('content') && typeof link.url === 'string' && typeof link.content === 'string') {\n              var attributes = [];\n              if (!TableUtils.isObject(link.attr)) {\n                link.attr = {};\n              }\n              if (link.attr.hasOwnProperty('href')) {\n                delete link.attr.href;\n              }\n              if (!link.attr.hasOwnProperty('class')) {\n                link.attr[\"class\"] = that._link.attr[\"class\"];\n              }\n              $.each(link.attr, function (name, value) {\n                if (['string', 'number'].indexOf(_typeof(value)) >= 0) {\n                  attributes.push(name + '=\"' + value + '\"');\n                }\n              });\n              result = TableUtils.render(tpl['controls/button_group/link.html'], {\n                url: link.url,\n                attr: attributes.length > 0 ? ' ' + attributes.join(' ') : '',\n                content: link.content\n              });\n            }\n            return result;\n          };\n          /**\n           * Создание кнопки\n           * @param {Object} button\n           */\n          var makeButton = function makeButton(button) {\n            var result = null;\n            if (button.hasOwnProperty('content') && typeof button.content === 'string') {\n              var attributes = [];\n              if (!TableUtils.isObject(button.attr)) {\n                button.attr = {};\n              }\n              if (button.attr.hasOwnProperty('type')) {\n                delete button.attr.type;\n              }\n              if (!button.attr.hasOwnProperty('class')) {\n                button.attr[\"class\"] = that._button.attr[\"class\"];\n              }\n              $.each(button.attr, function (name, value) {\n                if (['string', 'number'].indexOf(_typeof(value)) >= 0) {\n                  attributes.push(name + '=\"' + value + '\"');\n                }\n              });\n              result = $(TableUtils.render(tpl['controls/button_group/button.html'], {\n                content: button.content,\n                attr: attributes.length > 0 ? ' ' + attributes.join(' ') : ''\n              }));\n              if (button.hasOwnProperty('onClick') && ['string', 'function'].indexOf(_typeof(button.onClick)) >= 0) {\n                result.click(function (event) {\n                  var prop = {\n                    table: that._table,\n                    control: that,\n                    event: event\n                  };\n                  if (typeof button.onClick === 'function') {\n                    button.onClick(prop);\n                  } else if (typeof button.onClick === 'string') {\n                    var func = new Function('prop', button.onClick);\n                    func(prop);\n                  }\n                });\n              }\n            }\n            return result;\n          };\n          /**\n           * Создание выпадающего меню\n           * @param {Object} button\n           */\n          var makeDropdown = function makeDropdown(button) {\n            var result = null;\n            if (Array.isArray(button.items)) {\n              var attributes = [];\n              var items = [];\n              button.items.map(function (item) {\n                if (TableUtils.isObject(item) && typeof item.type === 'string') {\n                  if (item.type === 'link') {\n                    if (item.hasOwnProperty('url') && item.hasOwnProperty('content') && typeof item.url === 'string' && typeof item.content === 'string' && item.url) {\n                      items.push(TableUtils.render(tpl['controls/button_group/dropdown/link.html'], {\n                        url: item.url,\n                        content: item.content\n                      }));\n                    }\n                  } else if (item.type === 'button') {\n                    if (item.hasOwnProperty('content') && typeof item.content === 'string') {\n                      var btn = $(TableUtils.render(tpl['controls/button_group/dropdown/button.html'], {\n                        content: item.content\n                      }));\n                      if (item.hasOwnProperty('onClick') && ['string', 'function'].indexOf(_typeof(item.onClick)) >= 0) {\n                        btn.click(function (event) {\n                          var prop = {\n                            table: that._table,\n                            control: that,\n                            event: event\n                          };\n                          if (typeof item.onClick === 'function') {\n                            item.onClick(prop);\n                          } else if (typeof item.onClick === 'string') {\n                            var func = new Function('prop', item.onClick);\n                            func(prop);\n                          }\n                        });\n                      }\n                      items.push(btn);\n                    }\n                  } else if (item.type === 'divider') {\n                    items.push(tpl['controls/button_group/dropdown/divider.html']);\n                  }\n                }\n              });\n              if (!TableUtils.isObject(button.attr)) {\n                button.attr = {};\n              }\n              if (button.attr.hasOwnProperty('type')) {\n                delete button.attr.type;\n              }\n              if (!button.attr.hasOwnProperty('class')) {\n                button.attr[\"class\"] = that._dropdown.attr[\"class\"];\n              }\n              $.each(button.attr, function (name, value) {\n                if (['string', 'number'].indexOf(_typeof(value)) >= 0) {\n                  attributes.push(name + '=\"' + value + '\"');\n                }\n              });\n              result = $(TableUtils.render(tpl['controls/button_group/dropdown.html'], {\n                attr: attributes.length > 0 ? ' ' + attributes.join(' ') : '',\n                position: button.hasOwnProperty('position') && typeof button.position === 'string' ? button.position : 'end',\n                content: button.content\n              }));\n              if (items.length > 0) {\n                var menu = result.find('.dropdown-menu');\n                items.map(function (item) {\n                  menu.append(item);\n                });\n              }\n            }\n            return result;\n          };\n          options.buttons.map(function (button) {\n            if (TableUtils.isObject(button) && typeof button.type === 'string') {\n              if (button.type === 'link') {\n                var linkElement = makeLink(button);\n                if (linkElement) {\n                  buttons.push(linkElement);\n                }\n              } else if (button.type === 'button') {\n                var buttonElement = makeButton(button);\n                if (buttonElement) {\n                  buttons.push(buttonElement);\n                }\n              } else if (button.type === 'dropdown') {\n                var dropdownElement = makeDropdown(button);\n                if (dropdownElement) {\n                  buttons.push(dropdownElement);\n                }\n              }\n            }\n          });\n        }\n        var btnGroup = $(tpl['controls/button_group.html']);\n        buttons.map(function (button) {\n          btnGroup.append(button);\n        });\n        return btnGroup;\n      }\n    }]);\n  }(Control);\n\n  var ControlCustom = /*#__PURE__*/function (_Control) {\n    /**\n     * Инициализация\n     * @param {TableInstance} table\n     * @param {Object}              options\n     */\n    function ControlCustom(table, options) {\n      _classCallCheck(this, ControlCustom);\n      options = $.extend(true, {\n        id: null,\n        type: 'custom',\n        content: null\n      }, options);\n      return _callSuper(this, ControlCustom, [table, options]);\n    }\n\n    /**\n     * Формирование контента для размещения на странице\n     * @returns {string|HTMLElement|jQuery}\n     */\n    _inherits(ControlCustom, _Control);\n    return _createClass(ControlCustom, [{\n      key: \"render\",\n      value: function render() {\n        if (typeof this._options.content === 'string') {\n          return this._options.content;\n        } else if (typeof this._options.content === 'function') {\n          var prop = {\n            table: this._options.table\n          };\n          return this._options.content(prop);\n        }\n      }\n    }]);\n  }(Control);\n\n  var ControlPageSize = /*#__PURE__*/function (_Control) {\n    /**\n     * Инициализация\n     * @param {TableInstance} table\n     * @param {Object}              options\n     */\n    function ControlPageSize(table, options) {\n      var _this;\n      _classCallCheck(this, ControlPageSize);\n      var optionsOriginal = {\n        id: null,\n        type: 'page_size',\n        attr: {\n          \"class\": 'form-select'\n        },\n        list: [25, 50, 100, 1000]\n      };\n      if (options.hasOwnProperty('attr') && TableUtils.isObject(options.attr)) {\n        options.attr = TableUtils.mergeAttr(optionsOriginal.attr, options.attr);\n      }\n      options = $.extend(true, optionsOriginal, options);\n      _this = _callSuper(this, ControlPageSize, [table, options]);\n      if (!Array.isArray(_this._options.list)) {\n        _this._options.list = [];\n      }\n      if (_this._options.list.indexOf(_this._table._recordsPerPage) < 0) {\n        _this._options.list.unshift(_this._table._recordsPerPage);\n      }\n      return _this;\n    }\n\n    /**\n     * Формирование контента для размещения на странице\n     * @returns {jQuery}\n     */\n    _inherits(ControlPageSize, _Control);\n    return _createClass(ControlPageSize, [{\n      key: \"render\",\n      value: function render() {\n        var attributes = [];\n        var table = this._table;\n        if (TableUtils.isObject(this._options.attr)) {\n          $.each(this._options.attr, function (name, value) {\n            if (['string', 'number'].indexOf(_typeof(value)) >= 0) {\n              attributes.push(name + '=\"' + value + '\"');\n            }\n          });\n        }\n        var control = $(TableUtils.render(tpl['controls/page-size.html'], {\n          recordsPerPageList: this._options.list,\n          recordsPerPage: table._recordsPerPage,\n          attr: attributes.length > 0 ? ' ' + attributes.join(' ') : '',\n          lang: table.getLang()\n        }));\n        control.change(function () {\n          table._page = 1;\n          table.setPageSize(Number(control.val()));\n          table.reload();\n        });\n        table.on('page_size_update', function () {\n          control.val(table._recordsPerPage);\n        });\n        return control;\n      }\n    }]);\n  }(Control);\n\n  var ControlPageJump = /*#__PURE__*/function (_Control) {\n    /**\n     * Инициализация\n     * @param {TableInstance} table\n     * @param {Object}              options\n     */\n    function ControlPageJump(table, options) {\n      _classCallCheck(this, ControlPageJump);\n      var optionsOriginal = {\n        id: null,\n        type: 'page_jump',\n        attr: {\n          \"class\": 'input-group'\n        }\n      };\n      if (options.hasOwnProperty('attr') && TableUtils.isObject(options.attr)) {\n        options.attr = TableUtils.mergeAttr(optionsOriginal.attr, options.attr);\n      }\n      options = $.extend(true, optionsOriginal, options);\n      return _callSuper(this, ControlPageJump, [table, options]);\n    }\n\n    /**\n     * Формирование контента для размещения на странице\n     * @returns {jQuery}\n     */\n    _inherits(ControlPageJump, _Control);\n    return _createClass(ControlPageJump, [{\n      key: \"render\",\n      value: function render() {\n        var attributes = [];\n        var table = this._table;\n        if (TableUtils.isObject(this._options.attr)) {\n          $.each(this._options.attr, function (name, value) {\n            if (['string', 'number'].indexOf(_typeof(value)) >= 0) {\n              attributes.push(name + '=\"' + value + '\"');\n            }\n          });\n        }\n        var control = $(TableUtils.render(tpl['controls/page-jump.html'], {\n          attr: attributes.length > 0 ? ' ' + attributes.join(' ') : ''\n        }));\n        var input = $('input', control);\n        var button = $('button', control);\n        button.click(function () {\n          table.goPage(input.val());\n        });\n        input.keyup(function (event) {\n          if (event.key === 'Enter' || event.keyCode === 13) {\n            table.goPage(input.val());\n          }\n        });\n        return control;\n      }\n    }]);\n  }(Control);\n\n  var controlPages = {\n    /**\n     * Формирование контрола\n     * @param {TableInstance} table\n     * @param {object}              options\n     * @return {jQuery}\n     */\n    render: function render(table, options) {\n      var attributes = [];\n      var showPrev = !!options.show.prev;\n      var showNext = !!options.show.next;\n      var showDividerStart = false;\n      var showDividerEnd = false;\n      var showPageFirst = false;\n      var showPageLast = false;\n      var pages = [];\n      var pagesTotal = table._recordsTotal > 0 && table._recordsPerPage > 0 ? Math.ceil(table._recordsTotal / table._recordsPerPage) : 1;\n      if (TableUtils.isObject(options.attr)) {\n        $.each(options.attr, function (name, value) {\n          if (['string', 'number'].indexOf(_typeof(value)) >= 0) {\n            attributes.push(name + '=\"' + value + '\"');\n          }\n        });\n      }\n      if (table._recordsTotal > 0 && options.count > 0 && TableUtils.isNumeric(options.count)) {\n        var count = Math.min(options.count, pagesTotal);\n        var countHalf = Math.max(0, Math.floor(count / 2));\n        if (count % 2 === 0) {\n          countHalf -= 1;\n        }\n        var start = table._page > 1 ? Math.max(1, table._page - countHalf) : table._page;\n        if (start + count > pagesTotal) {\n          start = pagesTotal - (count - 1);\n        }\n        for (var i = 0; i < count; i++) {\n          pages.push(start + i);\n        }\n      } else {\n        if (options.count > 0 && table._page > 1) {\n          pages.push(table._page);\n        }\n      }\n      if (pages.length > 0) {\n        if (pages[0] >= 2) {\n          showPageFirst = true;\n        }\n        if (pages[0] >= 3) {\n          showDividerStart = true;\n        }\n        if (pages[pages.length - 1] + 1 < pagesTotal) {\n          showDividerEnd = true;\n        }\n        if (pages[pages.length - 1] < pagesTotal) {\n          showPageLast = true;\n        }\n      }\n      var control = $(TableUtils.render(tpl['controls/pages.html'], {\n        currentPage: table._page,\n        isActivePrev: table._page > 1,\n        isActiveNext: table._page < pagesTotal,\n        pagesTotal: pagesTotal,\n        showPrev: showPrev,\n        showPageFirst: showPageFirst,\n        showDividerStart: showDividerStart,\n        pages: pages,\n        showDividerEnd: showDividerEnd,\n        showPageLast: showPageLast,\n        showNext: showNext,\n        attr: attributes.length > 0 ? ' ' + attributes.join(' ') : '',\n        lang: table.getLang()\n      }));\n      var btnPrev = control.find('.coreui-table__page_prev');\n      if (btnPrev[0]) {\n        if (table._page <= 1) {\n          btnPrev.addClass('disabled');\n        } else {\n          btnPrev.click(function () {\n            if (table._page > 1) {\n              table.prevPage();\n            }\n          });\n        }\n      }\n      var btnNext = control.find('.coreui-table__page_next');\n      if (btnNext[0]) {\n        btnNext.click(function () {\n          table.nextPage();\n        });\n      }\n      var btnPages = control.find('.coreui-table__page');\n      if (btnPages[0]) {\n        btnPages.click(function () {\n          var page = Number($.trim($(this).text()));\n          if (page > 0) {\n            table.goPage(page);\n          }\n        });\n      }\n      return control;\n    }\n  };\n\n  var ControlPages = /*#__PURE__*/function (_Control) {\n    /**\n     * Инициализация\n     * @param {TableInstance} table\n     * @param {Object}              options\n     */\n    function ControlPages(table, options) {\n      var _this;\n      _classCallCheck(this, ControlPages);\n      var optionsOriginal = {\n        show: {\n          prev: true,\n          next: true\n        },\n        count: 3,\n        attr: {\n          \"class\": 'pagination mb-0'\n        }\n      };\n      if (options.hasOwnProperty('attr') && TableUtils.isObject(options.attr)) {\n        options.attr = TableUtils.mergeAttr(optionsOriginal.attr, options.attr);\n      }\n      options = $.extend(true, optionsOriginal, options);\n      _this = _callSuper(this, ControlPages, [table, options]);\n      _defineProperty(_this, \"_control\", null);\n      return _this;\n    }\n\n    /**\n     * Формирование контента для размещения на странице\n     * @returns {jQuery}\n     */\n    _inherits(ControlPages, _Control);\n    return _createClass(ControlPages, [{\n      key: \"render\",\n      value: function render() {\n        var table = this._table;\n        var options = this._options;\n        var control = controlPages.render(table, options);\n        table.on('records_show', function () {\n          var controlUpdate = controlPages.render(table, options);\n          control.replaceWith(controlUpdate);\n          control = controlUpdate;\n        });\n        this._control = control;\n        return control;\n      }\n    }]);\n  }(Control);\n\n  var ControlTotal = /*#__PURE__*/function (_Control) {\n    /**\n     * Инициализация\n     * @param {TableInstance} table\n     * @param {Object}              options\n     */\n    function ControlTotal(table, options) {\n      _classCallCheck(this, ControlTotal);\n      var optionsOriginal = {\n        type: 'total',\n        attr: {\n          \"class\": 'px-1'\n        }\n      };\n      if (options.hasOwnProperty('attr') && TableUtils.isObject(options.attr)) {\n        options.attr = TableUtils.mergeAttr(optionsOriginal.attr, options.attr);\n      }\n      options = $.extend(true, optionsOriginal, options);\n      return _callSuper(this, ControlTotal, [table, options]);\n    }\n\n    /**\n     * Формирование контента для размещения на странице\n     * @returns {string}\n     */\n    _inherits(ControlTotal, _Control);\n    return _createClass(ControlTotal, [{\n      key: \"render\",\n      value: function render() {\n        var attributes = [];\n        var table = this._table;\n        if (TableUtils.isObject(this._options.attr)) {\n          $.each(this._options.attr, function (name, value) {\n            if (['string', 'number'].indexOf(_typeof(value)) >= 0) {\n              attributes.push(name + '=\"' + value + '\"');\n            }\n          });\n        }\n        var control = $(TableUtils.render(tpl['controls/total.html'], {\n          recordsTotal: table._recordsTotal,\n          attr: attributes.length > 0 ? ' ' + attributes.join(' ') : '',\n          lang: table.getLang()\n        }));\n        table.on('records_show', function () {\n          control.find('.coreui-table__count-total').text(table._recordsTotal);\n        });\n        return control;\n      }\n    }]);\n  }(Control);\n\n  var ControlSearch = /*#__PURE__*/function (_Control) {\n    /**\n     * Инициализация\n     * @param {TableInstance} table\n     * @param {Object}              options\n     */\n    function ControlSearch(table, options) {\n      var _this;\n      _classCallCheck(this, ControlSearch);\n      options = $.extend(true, {\n        btn: {\n          attr: {\n            \"class\": 'btn btn-outline-secondary'\n          },\n          content: null\n        },\n        btnClear: {\n          content: \"<i class=\\\"bi bi-x text-danger\\\"></i>\",\n          attr: {\n            \"class\": 'btn btn-outline-secondary'\n          }\n        },\n        btnComplete: {\n          attr: {\n            \"class\": 'btn btn-primary'\n          },\n          content: null\n        }\n      }, options);\n      _this = _callSuper(this, ControlSearch, [table, options]);\n      if (!TableUtils.isObject(_this._options.btn)) {\n        _this._options.btn = {};\n      }\n      if (!_this._options.btn.hasOwnProperty('content') || typeof _this._options.btn.content !== 'string') {\n        _this._options.btn.content = '<i class=\"bi bi-search\"></i> ' + table.getLang().search;\n      }\n      if (!TableUtils.isObject(_this._options.btnClear)) {\n        _this._options.btnClear = {};\n      }\n      if (!_this._options.btnClear.hasOwnProperty('content') || typeof _this._options.btnClear.content !== 'string') {\n        _this._options.btnClear.content = table.getLang().clear;\n      }\n      if (!TableUtils.isObject(_this._options.btnComplete)) {\n        _this._options.btnComplete = {};\n      }\n      if (!_this._options.btnComplete.hasOwnProperty('content') || typeof _this._options.btnComplete.content !== 'string') {\n        _this._options.btnComplete.content = table.getLang().searchAction;\n      }\n      return _this;\n    }\n\n    /**\n     * Формирование контента для размещения на странице\n     * @returns {jQuery}\n     */\n    _inherits(ControlSearch, _Control);\n    return _createClass(ControlSearch, [{\n      key: \"render\",\n      value: function render() {\n        var btnAttr = [];\n        var btnContent = '';\n        var btnClear = '';\n        var that = this;\n        var table = this._table;\n        if (!TableUtils.isObject(this._options.btn)) {\n          this._options.btn = {};\n        }\n        if (!TableUtils.isObject(this._options.btn.attr)) {\n          this._options.btn.attr = {};\n        }\n        if (!this._options.btn.attr.hasOwnProperty('class') || typeof this._options.btn.attr[\"class\"] !== 'string') {\n          this._options.btn.attr[\"class\"] = 'btn-search-toggle';\n        } else {\n          this._options.btn.attr[\"class\"] += ' btn-search-toggle';\n        }\n        $.each(this._options.btn.attr, function (name, value) {\n          btnAttr.push(name + '=\"' + value + '\"');\n        });\n        if (typeof this._options.btn.content === 'string') {\n          btnContent = this._options.btn.content;\n        }\n        if (this._table.getSearchData().length > 0) {\n          btnClear = this._renderBtnClear();\n        }\n        var control = $(TableUtils.render(tpl['controls/search.html'], {\n          btnContent: btnContent,\n          btnAttr: btnAttr.length > 0 ? ' ' + btnAttr.join(' ') : '',\n          btnClear: btnClear\n        }));\n        var buttonToggle = control.find('.btn-search-toggle');\n        var buttonClear = control.find('.btn-clear');\n        buttonToggle.click(function () {\n          var container = TableElements.getSearchContainer(table.getId());\n          var columnsContainer = TableElements.getColumnsContainer(table.getId());\n          if (columnsContainer[0]) {\n            columnsContainer.hide();\n          }\n          if (container[0]) {\n            container.fadeToggle('fast');\n          } else {\n            var controls = [];\n            var btnCompleteAttr = [];\n            var btnCompleteContent = '';\n            var tableOptions = table.getOptions();\n            var labelWidth = tableOptions.search.hasOwnProperty('labelWidth') && tableOptions.search.labelWidth ? tableOptions.search.labelWidth : 160;\n            table._search.map(function (searchControl) {\n              var options = searchControl.getOptions();\n              if (options.hasOwnProperty('field') && typeof options.field === 'string' && options.field) {\n                var descriptionLabel = options.hasOwnProperty('descriptionLabel') && options.descriptionLabel ? options.descriptionLabel : null;\n                var controlContainer = $(TableUtils.render(tpl['controls/search/control.html'], {\n                  labelWidth: labelWidth + (typeof labelWidth === 'number' ? 'px' : ''),\n                  descriptionLabel: descriptionLabel,\n                  label: options.hasOwnProperty('label') && typeof options.label === 'string' ? options.label : '',\n                  description: options.hasOwnProperty('description') && typeof options.description === 'string' ? options.description : '',\n                  suffix: options.hasOwnProperty('suffix') && typeof options.suffix === 'string' ? options.suffix : ''\n                }));\n                controlContainer.find('.coreui-table__search-control_content').prepend(searchControl.render());\n                controls.push(controlContainer);\n              }\n            });\n            if (!TableUtils.isObject(that._options.btnComplete)) {\n              that._options.btnComplete = {};\n            }\n            if (!TableUtils.isObject(that._options.btnComplete.attr)) {\n              that._options.btnComplete.attr = {};\n            }\n            if (that._options.btnComplete.attr.hasOwnProperty('type')) {\n              delete that._options.btnComplete.attr.type;\n            }\n            if (!that._options.btnComplete.attr.hasOwnProperty('class') || typeof that._options.btnComplete.attr[\"class\"] !== 'string') {\n              that._options.btnComplete.attr[\"class\"] = 'btn-complete';\n            } else {\n              that._options.btnComplete.attr[\"class\"] += ' btn-complete';\n            }\n            if (TableUtils.isObject(that._options.btnComplete.attr)) {\n              $.each(that._options.btnComplete.attr, function (name, value) {\n                if (['string', 'number'].indexOf(_typeof(value)) >= 0) {\n                  btnCompleteAttr.push(name + '=\"' + value + '\"');\n                }\n              });\n            }\n            if (typeof that._options.btnComplete.content === 'string') {\n              btnCompleteContent = that._options.btnComplete.content;\n            }\n            var searchContainer = $(TableUtils.render(tpl['controls/search/container.html'], {\n              labelWidth: labelWidth + (typeof labelWidth === 'number' ? 'px' : ''),\n              btnCompleteAttr: btnCompleteAttr.length > 0 ? ' ' + btnCompleteAttr.join(' ') : '',\n              btnCompleteContent: btnCompleteContent\n            }));\n            $('.btn-complete', searchContainer).click(function () {\n              table.searchRecords();\n              var container = TableElements.getSearchContainer(table.getId());\n              if (container[0]) {\n                container.fadeOut(200);\n              }\n            });\n            if (controls.length > 0) {\n              var searchControls = searchContainer.find('.coreui-table__search_controls');\n              controls.map(function (control) {\n                searchControls.append(control);\n              });\n            }\n            var wrapper = TableElements.getWrapper(table.getId());\n            wrapper.before(searchContainer);\n          }\n        });\n        buttonClear.click(function () {\n          table.clearSearch();\n          var container = TableElements.getSearchContainer(table.getId());\n          if (container[0]) {\n            container.fadeOut('fast');\n          }\n          buttonClear.remove();\n        });\n        table.on('search_change', function (searchData) {\n          var buttonClear = $('button.btn-clear', control);\n          if (searchData.length > 0) {\n            if (!buttonClear[0]) {\n              var _btnClear = $(that._renderBtnClear());\n              _btnClear.click(function () {\n                table.clearSearch();\n                var container = TableElements.getSearchContainer(table.getId());\n                if (container[0]) {\n                  container.fadeOut('fast');\n                }\n                _btnClear.remove();\n              });\n              _btnClear.insertAfter(buttonToggle);\n            }\n          } else {\n            buttonClear.remove();\n            var container = TableElements.getSearchContainer(table.getId());\n            if (container[0]) {\n              container.fadeOut('fast');\n            }\n          }\n        });\n        return control;\n      }\n\n      /**\n       * Рендер кнопки отмены\n       * @private\n       */\n    }, {\n      key: \"_renderBtnClear\",\n      value: function _renderBtnClear() {\n        var attributes = [];\n        var content = '';\n        if (!TableUtils.isObject(this._options.btnClear)) {\n          this._options.btnClear = {};\n        }\n        if (!TableUtils.isObject(this._options.btnClear.attr)) {\n          this._options.btnClear.attr = {};\n        }\n        if (!this._options.btnClear.attr.hasOwnProperty('class') || typeof this._options.btnClear.attr[\"class\"] !== 'string') {\n          this._options.btnClear.attr[\"class\"] = 'btn-clear';\n        } else {\n          this._options.btnClear.attr[\"class\"] += ' btn-clear';\n        }\n        $.each(this._options.btnClear.attr, function (name, value) {\n          attributes.push(name + '=\"' + value + '\"');\n        });\n        if (typeof this._options.btnClear.content === 'string') {\n          content = this._options.btnClear.content;\n        }\n        return TableUtils.render(tpl['controls/search/clear.html'], {\n          content: content,\n          attr: attributes.length > 0 ? ' ' + attributes.join(' ') : ''\n        });\n      }\n    }]);\n  }(Control);\n\n  var ControlColumns = /*#__PURE__*/function (_Control) {\n    /**\n     * Инициализация\n     * @param {TableInstance} table\n     * @param {Object}              options\n     */\n    function ControlColumns(table, options) {\n      var _this;\n      _classCallCheck(this, ControlColumns);\n      options = $.extend(true, {\n        id: null,\n        type: 'columns',\n        btn: {\n          content: '<i class=\"bi bi-layout-three-columns\"></i>',\n          attr: {\n            \"class\": 'btn btn-outline-secondary'\n          }\n        },\n        btnComplete: {\n          content: null,\n          attr: {\n            \"class\": 'btn btn-primary'\n          }\n        }\n      }, options);\n      _this = _callSuper(this, ControlColumns, [table, options]);\n      if (!TableUtils.isObject(_this._options.btn)) {\n        _this._options.btn = {};\n      }\n      if (!TableUtils.isObject(_this._options.btnComplete)) {\n        _this._options.btnComplete = {};\n      }\n      if (TableUtils.isObject(_this._options.btnComplete) && typeof _this._options.btnComplete.content !== 'string') {\n        _this._options.btnComplete.content = table.getLang().complete;\n      }\n      return _this;\n    }\n\n    /**\n     * Формирование контента для размещения на странице\n     * @returns {jQuery}\n     */\n    _inherits(ControlColumns, _Control);\n    return _createClass(ControlColumns, [{\n      key: \"render\",\n      value: function render() {\n        var that = this;\n        var table = this._table;\n        var attributes = [];\n        if (TableUtils.isObject(this._options.btn.attr)) {\n          $.each(this._options.btn.attr, function (name, value) {\n            if (['string', 'number'].indexOf(_typeof(value)) >= 0) {\n              attributes.push(name + '=\"' + value + '\"');\n            }\n          });\n        }\n        var btn = $(TableUtils.render(tpl['controls/columns.html'], {\n          btnContent: this._options.btn.content,\n          btnAttr: attributes.length > 0 ? ' ' + attributes.join(' ') : ''\n        }));\n        btn.click(function () {\n          var container = TableElements.getColumnsContainer(table.getId());\n          var containerSearch = TableElements.getSearchContainer(table.getId());\n          if (containerSearch[0]) {\n            containerSearch.hide();\n          }\n          if (container[0]) {\n            container.fadeToggle('fast');\n          } else {\n            var columns = [];\n            var showAll = true;\n            var btnCompleteAttr = [];\n            var btnCompleteContent = '';\n            var wrapper = TableElements.getWrapper(table.getId());\n            table._columns.map(function (column) {\n              var options = column.getOptions();\n              if (options.hasOwnProperty('field') && typeof options.field === 'string' && options.field) {\n                var isShow = column.isShow();\n                columns.push({\n                  field: options.field,\n                  label: options.hasOwnProperty('label') && typeof options.label === 'string' ? options.label : '',\n                  show: isShow\n                });\n                if (!isShow) {\n                  showAll = false;\n                }\n              }\n            });\n            var options = that.getOptions();\n            if (!TableUtils.isObject(options.btnComplete)) {\n              options.btnComplete = {};\n            }\n            if (!TableUtils.isObject(options.btnComplete.attr)) {\n              options.btnComplete.attr = {};\n            }\n            if (options.btnComplete.attr.hasOwnProperty('type')) {\n              delete options.btnComplete.attr.type;\n            }\n            if (!options.btnComplete.attr.hasOwnProperty('class') || typeof options.btnComplete.attr[\"class\"] !== 'string') {\n              options.btnComplete.attr[\"class\"] = 'btn-complete';\n            } else {\n              options.btnComplete.attr[\"class\"] += ' btn-complete';\n            }\n            if (TableUtils.isObject(options.btnComplete.attr)) {\n              $.each(options.btnComplete.attr, function (name, value) {\n                if (['string', 'number'].indexOf(_typeof(value)) >= 0) {\n                  btnCompleteAttr.push(name + '=\"' + value + '\"');\n                }\n              });\n            }\n            if (typeof options.btnComplete.content === 'string') {\n              btnCompleteContent = options.btnComplete.content;\n            }\n            var containerList = $(TableUtils.render(tpl['controls/columns/list.html'], {\n              showAll: showAll,\n              columns: columns,\n              btnCompleteAttr: btnCompleteAttr.length > 0 ? ' ' + btnCompleteAttr.join(' ') : '',\n              btnCompleteContent: btnCompleteContent,\n              lang: table.getLang()\n            }));\n            $('.coreui-table__check_all input', containerList).change(function () {\n              $('.coreui-table_check-column input', containerList).prop('checked', $(this).is(\":checked\"));\n            });\n            $('.btn-complete', containerList).click(function () {\n              var columns = [];\n              $('.coreui-table_check-column input:checked', containerList).each(function (key, input) {\n                columns.push($(input).val());\n              });\n              table.setColumnsShow(columns);\n              containerList.fadeOut('fast');\n            });\n            wrapper.before(containerList);\n          }\n        });\n        return btn;\n      }\n    }]);\n  }(Control);\n\n  var ControlCaption = /*#__PURE__*/function (_Control) {\n    /**\n     * Инициализация\n     * @param {TableInstance} table\n     * @param {Object}              options\n     */\n    function ControlCaption(table, options) {\n      _classCallCheck(this, ControlCaption);\n      options = $.extend(true, {\n        id: null,\n        type: 'caption',\n        title: null,\n        description: null,\n        value: null\n      }, options);\n      return _callSuper(this, ControlCaption, [table, options]);\n    }\n\n    /**\n     * Формирование контента для размещения на странице\n     * @returns {string}\n     */\n    _inherits(ControlCaption, _Control);\n    return _createClass(ControlCaption, [{\n      key: \"render\",\n      value: function render() {\n        return TableUtils.render(tpl['controls/caption.html'], {\n          title: this._options.title,\n          description: this._options.description,\n          value: this._options.value\n        });\n      }\n    }]);\n  }(Control);\n\n  var ControlFilterClear = /*#__PURE__*/function (_Control) {\n    /**\n     * Инициализация\n     * @param {TableInstance} table\n     * @param {Object}              options\n     */\n    function ControlFilterClear(table, options) {\n      var _this;\n      _classCallCheck(this, ControlFilterClear);\n      options = $.extend(true, {\n        id: null,\n        type: 'filter_clear',\n        content: null,\n        attr: {\n          \"class\": 'btn btn-secondary'\n        }\n      }, options);\n      _this = _callSuper(this, ControlFilterClear, [table, options]);\n      if (!_this._options.hasOwnProperty('content') || typeof _this._options.content !== 'string') {\n        _this._options.content = '<i class=\"bi bi-x\"></i> ' + table.getLang().clear;\n      }\n      return _this;\n    }\n\n    /**\n     * Формирование контента\n     * @returns {string}\n     */\n    _inherits(ControlFilterClear, _Control);\n    return _createClass(ControlFilterClear, [{\n      key: \"render\",\n      value: function render() {\n        var options = this.getOptions();\n        var table = this._table;\n        if (!TableUtils.isObject(options.attr)) {\n          options.attr = {};\n        }\n        if (options.attr.hasOwnProperty('type')) {\n          delete options.attr.type;\n        }\n        var filterData = table.getFilterData();\n        if (filterData.length === 0) {\n          if (options.attr.hasOwnProperty('style') && typeof options.attr.style === 'string') {\n            options.attr.style += ';display:none;';\n          } else {\n            options.attr.style = \"display:none\";\n          }\n        }\n        var attr = [];\n        $.each(options.attr, function (name, value) {\n          if (['string', 'number'].indexOf(_typeof(value)) >= 0) {\n            attr.push(name + '=\"' + value + '\"');\n          }\n        });\n        var button = $(TableUtils.render(tpl['controls/filter_clear.html'], {\n          attr: attr.length > 0 ? ' ' + attr.join(' ') : '',\n          content: options.content ? options.content : ''\n        }));\n        button.click(function () {\n          table.clearFilters();\n        });\n        table.on('filters_change', function (filterData) {\n          if (filterData.length > 0) {\n            button.show();\n          } else {\n            button.hide();\n          }\n        });\n        return button;\n      }\n    }]);\n  }(Control);\n\n  var ControlDivider = /*#__PURE__*/function (_Control) {\n    /**\n     * Инициализация\n     * @param {TableInstance} table\n     * @param {Object}              options\n     */\n    function ControlDivider(table, options) {\n      _classCallCheck(this, ControlDivider);\n      options = $.extend(true, {\n        type: 'divider',\n        width: 40,\n        text: '',\n        attr: {\n          \"class\": 'd-inline-block text-body-tertiary text-center',\n          style: 'height:20px'\n        }\n      }, options);\n      return _callSuper(this, ControlDivider, [table, options]);\n    }\n\n    /**\n     * Формирование контента для размещения на странице\n     * @returns {string}\n     */\n    _inherits(ControlDivider, _Control);\n    return _createClass(ControlDivider, [{\n      key: \"render\",\n      value: function render() {\n        var attributes = [];\n        this._options.attr = TableUtils.mergeAttr(this._options.attr, {\n          style: 'width:' + this._options.width + 'px'\n        });\n        $.each(this._options.attr, function (name, value) {\n          if (['string', 'number'].indexOf(_typeof(value)) >= 0) {\n            attributes.push(name + '=\"' + value + '\"');\n          }\n        });\n        return TableUtils.render(tpl['controls/divider.html'], {\n          attr: attributes.length > 0 ? ' ' + attributes.join(' ') : '',\n          text: typeof this._options.text === 'string' && this._options.text !== '' ? this._options.text : ''\n        });\n      }\n    }]);\n  }(Control);\n\n  var Filter = /*#__PURE__*/function () {\n    /**\n     * Инициализация\n     * @param {object} table\n     * @param {object} options\n     */\n    function Filter(table, options) {\n      _classCallCheck(this, Filter);\n      _defineProperty(this, \"_id\", null);\n      _defineProperty(this, \"_table\", null);\n      _defineProperty(this, \"_value\", null);\n      _defineProperty(this, \"_control\", null);\n      _defineProperty(this, \"_options\", {\n        id: '',\n        type: '',\n        field: null\n      });\n      this._table = table;\n      this._options = $.extend(true, this._options, options);\n      this._id = this._options.hasOwnProperty('id') && typeof this._options.id === 'string' && this._options.id ? this._options.id : TableUtils.hashCode();\n    }\n\n    /**\n     * Получение параметров\n     * @returns {object}\n     */\n    return _createClass(Filter, [{\n      key: \"getOptions\",\n      value: function getOptions() {\n        return $.extend(true, {}, this._options);\n      }\n\n      /**\n       * Получение id\n       * @returns {string}\n       */\n    }, {\n      key: \"getId\",\n      value: function getId() {\n        return this._id;\n      }\n\n      /**\n       * Фильтрация данных\n       * @returns {string} fieldValue\n       * @returns {string} searchValue\n       * @returns {boolean}\n       */\n    }, {\n      key: \"filter\",\n      value: function filter(fieldValue, searchValue) {\n        if (['string', 'number'].indexOf(_typeof(fieldValue)) < 0 || ['string', 'number'].indexOf(_typeof(searchValue)) < 0) {\n          return false;\n        }\n        return fieldValue.toString().toLowerCase().indexOf(searchValue.toString().toLowerCase()) >= 0;\n      }\n\n      /**\n       * Установка значения\n       * @param {string} value\n       */\n    }, {\n      key: \"setValue\",\n      value: function setValue(value) {}\n\n      /**\n       * Получение значения\n       * @returns {string|null}\n       */\n    }, {\n      key: \"getValue\",\n      value: function getValue() {}\n\n      /**\n       * Получение название поля\n       * @returns {string|null}\n       */\n    }, {\n      key: \"getField\",\n      value: function getField() {\n        return this._options.field;\n      }\n\n      /**\n       * Формирование контента\n       * @returns {string}\n       */\n    }, {\n      key: \"render\",\n      value: function render() {}\n    }]);\n  }();\n\n  var FilterText = /*#__PURE__*/function (_Filter) {\n    /**\n     * Инициализация\n     * @param {TableInstance} table\n     * @param {Object}              options\n     */\n    function FilterText(table, options) {\n      var _this;\n      _classCallCheck(this, FilterText);\n      options = $.extend(true, {\n        id: null,\n        type: 'text',\n        field: null,\n        label: null,\n        value: null,\n        width: 200,\n        autoSearch: null,\n        attr: {\n          \"class\": \"form-control\"\n        },\n        btn: {\n          attr: {\n            \"class\": \"btn btn-outline-secondary border-secondary-subtle\"\n          },\n          content: '<i class=\"bi bi-search\"></i>'\n        }\n      }, options);\n      _this = _callSuper(this, FilterText, [table, options]);\n      if (_this._options.value !== null) {\n        _this.setValue(_this._options.value);\n      }\n      return _this;\n    }\n\n    /**\n     * Установка значения\n     * @param {string|number|null} value\n     */\n    _inherits(FilterText, _Filter);\n    return _createClass(FilterText, [{\n      key: \"setValue\",\n      value: function setValue(value) {\n        if (value !== null && typeof value !== 'string' && typeof value !== 'number') {\n          return;\n        }\n        this._value = value;\n        if (this._control) {\n          $('input', this._control).val(this._value === null ? '' : this._value);\n        }\n      }\n\n      /**\n       * Получение значения\n       * @returns {string|null}\n       */\n    }, {\n      key: \"getValue\",\n      value: function getValue() {\n        if (this._control) {\n          var value = $('input', this._control).val();\n          return typeof value !== 'string' || value === '' ? null : value;\n        }\n        return this._value;\n      }\n\n      /**\n       * Формирование контента\n       * @returns {string}\n       */\n    }, {\n      key: \"render\",\n      value: function render() {\n        var options = this.getOptions();\n        var label = typeof options.label === 'string' || typeof options.label === 'number' ? options.label : '';\n        if (!TableUtils.isObject(options.attr)) {\n          options.attr = {};\n        }\n        if (options.hasOwnProperty('width') && TableUtils.isNumeric(options.width)) {\n          if (options.attr.hasOwnProperty('style')) {\n            options.attr['style'] += ';width:' + options.width + 'px';\n          } else {\n            options.attr['style'] = 'width:' + options.width + 'px';\n          }\n        }\n        options.attr['value'] = typeof this._value === 'string' || typeof this._value === 'number' ? this._value : '';\n        if (options.attr.hasOwnProperty('type')) {\n          delete options.attr.type;\n        }\n        if (!TableUtils.isObject(options.btn)) {\n          options.btn = {};\n        }\n        if (!TableUtils.isObject(options.btn.attr)) {\n          options.btn.attr = {};\n        }\n        if (options.btn.attr.hasOwnProperty('type')) {\n          delete options.btn.attr.type;\n        }\n        var attr = [];\n        var attrBtn = [];\n        var table = this._table;\n        $.each(options.attr, function (name, value) {\n          attr.push(name + '=\"' + value + '\"');\n        });\n        $.each(options.btn.attr, function (name, value) {\n          attrBtn.push(name + '=\"' + value + '\"');\n        });\n        this._control = $(TableUtils.render(tpl['filters/text.html'], {\n          attr: attr.length > 0 ? ' ' + attr.join(' ') : '',\n          label: label,\n          btnAttr: attrBtn.length > 0 ? ' ' + attrBtn.join(' ') : '',\n          btnContent: options.btn.content ? options.btn.content : ''\n        }));\n        $('input', this._control).keyup(function (e) {\n          if (e.key === 'Enter' || e.keyCode === 13) {\n            table.searchRecords();\n          } else if (typeof options.autoSearch === 'boolean' && options.autoSearch) {\n            table.searchRecords();\n          }\n        });\n        $('button', this._control).click(function (e) {\n          table.searchRecords();\n        });\n        return this._control;\n      }\n    }]);\n  }(Filter);\n\n  var FilterNumber = /*#__PURE__*/function (_Filter) {\n    /**\n     * Инициализация\n     * @param {TableInstance} table\n     * @param {Object}              options\n     */\n    function FilterNumber(table, options) {\n      var _this;\n      _classCallCheck(this, FilterNumber);\n      options = $.extend(true, {\n        id: null,\n        type: 'number',\n        field: null,\n        label: null,\n        value: null,\n        width: 90,\n        attr: {\n          \"class\": \"form-control\"\n        },\n        btn: {\n          attr: {\n            \"class\": \"btn btn-outline-secondary border-secondary-subtle\"\n          },\n          content: '<i class=\"bi bi-search\"></i>'\n        }\n      }, options);\n      _this = _callSuper(this, FilterNumber, [table, options]);\n      if (_this._options.value !== null) {\n        _this.setValue(_this._options.value);\n      }\n      return _this;\n    }\n\n    /**\n     * Установка значения\n     * @param {object|null} value\n     */\n    _inherits(FilterNumber, _Filter);\n    return _createClass(FilterNumber, [{\n      key: \"setValue\",\n      value: function setValue(value) {\n        if (value) {\n          if (!TableUtils.isObject(value)) {\n            return;\n          }\n          var numberStart = null;\n          var numberEnd = null;\n          if (value.hasOwnProperty('start') && (typeof value.start === 'string' || typeof value.start !== 'number') && value.start !== '' && !isNaN(Number(value.start))) {\n            numberStart = value.start;\n          }\n          if (value.hasOwnProperty('end') && (typeof value.end === 'string' || typeof value.end !== 'number') && value.end !== '' && !isNaN(Number(value.end))) {\n            numberEnd = value.end;\n          }\n          if (numberStart === null && numberEnd === null) {\n            this._value = null;\n          } else {\n            this._value = {\n              start: numberStart,\n              end: numberEnd\n            };\n          }\n        } else {\n          this._value = null;\n        }\n        if (this._control) {\n          var inputStart = this._control.parent().find('input.number-start');\n          var inputEnd = this._control.parent().find('input.number-end');\n          if (this._value === null) {\n            inputStart.val('');\n            inputEnd.val('');\n          } else if (TableUtils.isObject(this._value)) {\n            inputStart.val(_typeof(this._value.start) !== null ? this._value.start : '');\n            inputEnd.val(_typeof(this._value.end) !== null ? this._value.end : '');\n          }\n        }\n      }\n\n      /**\n       * Получение значения\n       * @returns {string}\n       */\n    }, {\n      key: \"getValue\",\n      value: function getValue() {\n        if (this._control) {\n          var inputStart = this._control.parent().find('input.number-start');\n          var inputEnd = this._control.parent().find('input.number-end');\n          if (inputStart[0] && inputEnd[0]) {\n            var valueStart = inputStart.val();\n            var valueEnd = inputEnd.val();\n            if (typeof valueStart === 'string' && valueStart !== '' || typeof valueEnd === 'string' && valueEnd !== '') {\n              return {\n                start: valueStart !== '' && !isNaN(Number(valueStart)) ? Number(valueStart) : null,\n                end: valueEnd !== '' && !isNaN(Number(valueEnd)) ? Number(valueEnd) : null\n              };\n            }\n          }\n          return null;\n        }\n        return this._value;\n      }\n\n      /**\n       * Фильтрация данных\n       * @returns {string}              fieldValue\n       * @returns {Array|string|number} searchValue\n       * @returns {boolean}\n       */\n    }, {\n      key: \"filter\",\n      value: function filter(fieldValue, searchValue) {\n        if (['string', 'number'].indexOf(_typeof(fieldValue)) < 0 || !TableUtils.isObject(searchValue) || ['string', 'number'].indexOf(_typeof(searchValue.start)) < 0 && ['string', 'number'].indexOf(_typeof(searchValue.end)) < 0) {\n          return false;\n        }\n        var issetStart = ['string', 'number'].indexOf(_typeof(searchValue.start)) >= 0;\n        var issetEnd = ['string', 'number'].indexOf(_typeof(searchValue.end)) >= 0;\n        if (issetStart && issetEnd) {\n          return fieldValue >= searchValue.start && fieldValue <= searchValue.end;\n        } else if (issetStart) {\n          return fieldValue >= searchValue.start;\n        } else {\n          return fieldValue <= searchValue.end;\n        }\n      }\n\n      /**\n       * Формирование контента\n       * @returns {string}\n       */\n    }, {\n      key: \"render\",\n      value: function render() {\n        var options = this.getOptions();\n        var label = typeof options.label === 'string' || typeof options.label === 'number' ? options.label : '';\n        if (!TableUtils.isObject(options.attr)) {\n          options.attr = {};\n        }\n        if (options.hasOwnProperty('width') && TableUtils.isNumeric(options.width)) {\n          if (options.attr.hasOwnProperty('style')) {\n            options.attr['style'] += ';width:' + options.width + 'px';\n          } else {\n            options.attr['style'] = 'width:' + options.width + 'px';\n          }\n        }\n        if (options.attr.hasOwnProperty('type')) {\n          delete options.attr.type;\n        }\n        if (options.attr.hasOwnProperty('value')) {\n          delete options.attr.value;\n        }\n        var field = typeof options.field === 'string' ? options.field : '';\n        var startAttr = [];\n        var endAttr = [];\n        var attrBtn = [];\n        var table = this._table;\n        $.each(options.attr, function (name, value) {\n          if (['name', 'value', 'class'].indexOf(name) >= 0 || ['string', 'number'].indexOf(_typeof(value)) < 0) {\n            return;\n          }\n          startAttr.push(name + '=\"' + value + '\"');\n          endAttr.push(name + '=\"' + value + '\"');\n        });\n        if (options.attr.hasOwnProperty('class') && ['string', 'number'].indexOf(_typeof(options.attr[\"class\"])) >= 0) {\n          startAttr.push('class=\"' + options.attr[\"class\"] + ' number-start\"');\n          endAttr.push('class=\"' + options.attr[\"class\"] + ' number-end\"');\n        } else {\n          startAttr.push('class=\"number-start\"');\n          endAttr.push('class=\"number-end\"');\n        }\n        if (field) {\n          startAttr.push('name=\"' + field + '[start]\"');\n          endAttr.push('name=\"' + field + '[end]\"');\n        }\n        startAttr.push('value=\"' + (this._value ? this._value.start : '') + '\"');\n        endAttr.push('value=\"' + (this._value ? this._value.end : '') + '\"');\n        if (!TableUtils.isObject(options.btn)) {\n          options.btn = {};\n        }\n        if (!TableUtils.isObject(options.btn.attr)) {\n          options.btn.attr = {};\n        }\n        if (options.btn.attr.hasOwnProperty('type')) {\n          delete options.btn.attr.type;\n        }\n        $.each(options.btn.attr, function (name, value) {\n          attrBtn.push(name + '=\"' + value + '\"');\n        });\n        this._control = $(TableUtils.render(tpl['filters/number.html'], {\n          attrStart: startAttr.length > 0 ? ' ' + startAttr.join(' ') : '',\n          attrEnd: endAttr.length > 0 ? ' ' + endAttr.join(' ') : '',\n          label: label,\n          btnAttr: attrBtn.length > 0 ? ' ' + attrBtn.join(' ') : '',\n          btnContent: options.btn.content ? options.btn.content : ''\n        }));\n        $('input.number-start, input.number-end', this._control).keyup(function (e) {\n          if (e.key === 'Enter' || e.keyCode === 13) {\n            table.searchRecords();\n          }\n        });\n        $('button', this._control).click(function (e) {\n          table.searchRecords();\n        });\n        return this._control;\n      }\n    }]);\n  }(Filter);\n\n  var FilterDate = /*#__PURE__*/function (_Filter) {\n    /**\n     * Инициализация\n     * @param {TableInstance} table\n     * @param {Object}              options\n     */\n    function FilterDate(table, options) {\n      var _this;\n      _classCallCheck(this, FilterDate);\n      options = $.extend(true, {\n        id: null,\n        type: 'date',\n        field: null,\n        label: null,\n        value: null,\n        width: 200,\n        attr: {\n          \"class\": \"form-control\"\n        }\n      }, options);\n      _this = _callSuper(this, FilterDate, [table, options]);\n      if (_this._options.value !== null) {\n        _this.setValue(_this._options.value);\n      }\n      return _this;\n    }\n\n    /**\n     * Установка значения\n     * @param {string} value\n     */\n    _inherits(FilterDate, _Filter);\n    return _createClass(FilterDate, [{\n      key: \"setValue\",\n      value: function setValue(value) {\n        if (typeof value !== 'string' && value !== null) {\n          return;\n        }\n        if (value && (value.match(/^\\d{4}\\-\\d{2}\\-\\d{2}$/) === null || isNaN(new Date(value)))) {\n          return;\n        }\n        this._value = value;\n        if (this._control) {\n          $('input', this._control).val(this._value === null ? '' : this._value);\n        }\n      }\n\n      /**\n       * Получение значения\n       * @returns {string}\n       */\n    }, {\n      key: \"getValue\",\n      value: function getValue() {\n        if (this._control) {\n          var value = $('input', this._control).val();\n          return typeof value !== 'string' || value === '' ? null : value;\n        }\n        return this._value;\n      }\n\n      /**\n       * Фильтрация данных\n       * @returns {string}              fieldValue\n       * @returns {Array|string|number} searchValue\n       * @returns {boolean}\n       */\n    }, {\n      key: \"filter\",\n      value: function filter(fieldValue, searchValue) {\n        if (['string', 'number'].indexOf(_typeof(fieldValue)) < 0 || ['string', 'number'].indexOf(_typeof(searchValue)) < 0) {\n          return false;\n        }\n        return fieldValue.toString().indexOf(searchValue.toString()) === 0;\n      }\n\n      /**\n       * Формирование контента\n       * @returns {string}\n       */\n    }, {\n      key: \"render\",\n      value: function render() {\n        var options = this.getOptions();\n        var label = typeof options.label === 'string' || typeof options.label === 'number' ? options.label : '';\n        if (!TableUtils.isObject(options.attr)) {\n          options.attr = {};\n        }\n        if (options.hasOwnProperty('width') && TableUtils.isNumeric(options.width)) {\n          if (options.attr.hasOwnProperty('style')) {\n            options.attr['style'] += ';width:' + options.width + 'px';\n          } else {\n            options.attr['style'] = 'width:' + options.width + 'px';\n          }\n        }\n        options.attr['value'] = typeof this._value === 'string' || typeof this._value === 'number' ? this._value : '';\n        if (options.attr.hasOwnProperty('type')) {\n          delete options.attr.type;\n        }\n        var attr = [];\n        var table = this._table;\n        $.each(options.attr, function (name, value) {\n          attr.push(name + '=\"' + value + '\"');\n        });\n        this._control = $(TableUtils.render(tpl['filters/date.html'], {\n          attr: attr.length > 0 ? ' ' + attr.join(' ') : '',\n          label: label\n        }));\n        $('input', this._control).change(function (e) {\n          table.searchRecords();\n        });\n        return this._control;\n      }\n    }]);\n  }(Filter);\n\n  var FilterDatetime = /*#__PURE__*/function (_Filter) {\n    /**\n     * Инициализация\n     * @param {TableInstance} table\n     * @param {Object}              options\n     */\n    function FilterDatetime(table, options) {\n      var _this;\n      _classCallCheck(this, FilterDatetime);\n      options = $.extend(true, {\n        id: null,\n        type: 'datetime',\n        field: null,\n        label: null,\n        value: null,\n        width: 200,\n        attr: {\n          \"class\": \"form-control\"\n        }\n      }, options);\n      _this = _callSuper(this, FilterDatetime, [table, options]);\n      if (_this._options.value !== null) {\n        _this.setValue(_this._options.value);\n      }\n      return _this;\n    }\n\n    /**\n     * Установка значения\n     * @param {string|null} value\n     */\n    _inherits(FilterDatetime, _Filter);\n    return _createClass(FilterDatetime, [{\n      key: \"setValue\",\n      value: function setValue(value) {\n        if (typeof value !== 'string' && value !== null) {\n          return;\n        }\n        if (value && (value.match(/^\\d{4}\\-\\d{2}\\-\\d{2}(T| )\\d{2}:\\d{2}(:\\d{2}|)$/) === null || isNaN(new Date(value)))) {\n          return;\n        }\n        this._value = value;\n        if (this._control) {\n          $('input', this._control).val(this._value === null ? '' : this._value);\n        }\n      }\n\n      /**\n       * Получение значения\n       * @returns {string|null}\n       */\n    }, {\n      key: \"getValue\",\n      value: function getValue() {\n        if (this._control) {\n          var value = $('input', this._control).val();\n          return typeof value !== 'string' || value === '' ? null : value;\n        }\n        return this._value;\n      }\n\n      /**\n       * Фильтрация данных\n       * @returns {string}              fieldValue\n       * @returns {Array|string|number} searchValue\n       * @returns {boolean}\n       */\n    }, {\n      key: \"filter\",\n      value: function filter(fieldValue, searchValue) {\n        if (['string', 'number'].indexOf(_typeof(fieldValue)) < 0 || ['string', 'number'].indexOf(_typeof(searchValue)) < 0) {\n          return false;\n        }\n        return fieldValue.toString() === searchValue.toString();\n      }\n\n      /**\n       * Формирование контента\n       * @returns {string}\n       */\n    }, {\n      key: \"render\",\n      value: function render() {\n        var options = this.getOptions();\n        var label = typeof options.label === 'string' || typeof options.label === 'number' ? options.label : '';\n        if (!TableUtils.isObject(options.attr)) {\n          options.attr = {};\n        }\n        if (options.hasOwnProperty('width') && TableUtils.isNumeric(options.width)) {\n          if (options.attr.hasOwnProperty('style')) {\n            options.attr['style'] += ';width:' + options.width + 'px';\n          } else {\n            options.attr['style'] = 'width:' + options.width + 'px';\n          }\n        }\n        options.attr['value'] = typeof this._value === 'string' || typeof this._value === 'number' ? this._value : '';\n        if (options.attr.hasOwnProperty('type')) {\n          delete options.attr.type;\n        }\n        var attr = [];\n        var table = this._table;\n        $.each(options.attr, function (name, value) {\n          attr.push(name + '=\"' + value + '\"');\n        });\n        this._control = $(TableUtils.render(tpl['filters/datetime.html'], {\n          attr: attr.length > 0 ? ' ' + attr.join(' ') : '',\n          label: label\n        }));\n        $('input', this._control).change(function (e) {\n          table.searchRecords();\n        });\n        return this._control;\n      }\n    }]);\n  }(Filter);\n\n  var FilterDateMonth = /*#__PURE__*/function (_Filter) {\n    /**\n     * Инициализация\n     * @param {TableInstance} table\n     * @param {Object}              options\n     */\n    function FilterDateMonth(table, options) {\n      var _this;\n      _classCallCheck(this, FilterDateMonth);\n      options = $.extend(true, {\n        id: null,\n        type: 'date_month',\n        field: null,\n        label: null,\n        value: null,\n        width: 200,\n        attr: {\n          \"class\": \"form-control\"\n        }\n      }, options);\n      _this = _callSuper(this, FilterDateMonth, [table, options]);\n      if (_this._options.value !== null) {\n        _this.setValue(_this._options.value);\n      }\n      return _this;\n    }\n\n    /**\n     * Установка значения\n     * @param {string|null} value\n     */\n    _inherits(FilterDateMonth, _Filter);\n    return _createClass(FilterDateMonth, [{\n      key: \"setValue\",\n      value: function setValue(value) {\n        if (typeof value !== 'string' && value !== null) {\n          return;\n        }\n        if (value && (value.match(/^\\d{4}\\-\\d{2}$/) === null || isNaN(new Date(value)))) {\n          return;\n        }\n        this._value = value;\n        if (this._control) {\n          $('input', this._control).val(this._value === null ? '' : this._value);\n        }\n      }\n\n      /**\n       * Получение значения\n       * @returns {string|null}\n       */\n    }, {\n      key: \"getValue\",\n      value: function getValue() {\n        if (this._control) {\n          var value = $('input', this._control).val();\n          return typeof value !== 'string' || value === '' ? null : value;\n        }\n        return this._value;\n      }\n\n      /**\n       * Фильтрация данных\n       * @returns {string} fieldValue\n       * @returns {string} searchValue\n       * @returns {boolean}\n       */\n    }, {\n      key: \"filter\",\n      value: function filter(fieldValue, searchValue) {\n        if (['string', 'number'].indexOf(_typeof(fieldValue)) < 0 || ['string', 'number'].indexOf(_typeof(searchValue)) < 0) {\n          return false;\n        }\n        return fieldValue.toString().toLowerCase().indexOf(searchValue.toString().toLowerCase()) === 0;\n      }\n\n      /**\n       * Формирование контента\n       * @returns {jQuery}\n       */\n    }, {\n      key: \"render\",\n      value: function render() {\n        var options = this.getOptions();\n        var label = typeof options.label === 'string' || typeof options.label === 'number' ? options.label : '';\n        if (!TableUtils.isObject(options.attr)) {\n          options.attr = {};\n        }\n        if (options.hasOwnProperty('width') && TableUtils.isNumeric(options.width)) {\n          if (options.attr.hasOwnProperty('style')) {\n            options.attr['style'] += ';width:' + options.width + 'px';\n          } else {\n            options.attr['style'] = 'width:' + options.width + 'px';\n          }\n        }\n        options.attr['value'] = typeof this._value === 'string' || typeof this._value === 'number' ? this._value : '';\n        if (options.attr.hasOwnProperty('type')) {\n          delete options.attr.type;\n        }\n        var attr = [];\n        var table = this._table;\n        $.each(options.attr, function (name, value) {\n          attr.push(name + '=\"' + value + '\"');\n        });\n        this._control = $(TableUtils.render(tpl['filters/date_month.html'], {\n          attr: attr.length > 0 ? ' ' + attr.join(' ') : '',\n          label: label\n        }));\n        $('input', this._control).change(function (e) {\n          table.searchRecords();\n        });\n        return this._control;\n      }\n    }]);\n  }(Filter);\n\n  var FilterDateRange = /*#__PURE__*/function (_Filter) {\n    /**\n     * Инициализация\n     * @param {TableInstance} table\n     * @param {Object}              options\n     */\n    function FilterDateRange(table, options) {\n      var _this;\n      _classCallCheck(this, FilterDateRange);\n      options = $.extend(true, {\n        id: null,\n        type: 'date_range',\n        field: null,\n        label: null,\n        value: null,\n        width: 200,\n        attr: {\n          \"class\": \"form-control d-inline-block\"\n        }\n      }, options);\n      _this = _callSuper(this, FilterDateRange, [table, options]);\n      if (_this._options.value !== null) {\n        _this.setValue(_this._options.value);\n      }\n      return _this;\n    }\n\n    /**\n     * Установка значения\n     * @param {object|null} value\n     */\n    _inherits(FilterDateRange, _Filter);\n    return _createClass(FilterDateRange, [{\n      key: \"setValue\",\n      value: function setValue(value) {\n        if (value) {\n          if (!TableUtils.isObject(value)) {\n            return;\n          }\n          var dateStart = null;\n          var dateEnd = null;\n          if (value.hasOwnProperty('start') && typeof value.start === 'string' && value.start.match(/^\\d{4}\\-\\d{2}\\-\\d{2}$/) !== null && !isNaN(new Date(value.start))) {\n            dateStart = value.start;\n          }\n          if (value.hasOwnProperty('end') && typeof value.end === 'string' && value.end.match(/^\\d{4}\\-\\d{2}\\-\\d{2}$/) !== null && !isNaN(new Date(value.end))) {\n            dateEnd = value.end;\n          }\n          if (dateStart === null && dateEnd === null) {\n            this._value = null;\n          } else {\n            this._value = {\n              start: dateStart,\n              end: dateEnd\n            };\n          }\n        } else {\n          this._value = null;\n        }\n        if (this._control) {\n          var inputStart = this._control.parent().find('input.date-start');\n          var inputEnd = this._control.parent().find('input.date-end');\n          if (this._value === null) {\n            inputStart.val('');\n            inputEnd.val('');\n          } else if (TableUtils.isObject(this._value)) {\n            inputStart.val(_typeof(this._value.start) !== null ? this._value.start : '');\n            inputEnd.val(_typeof(this._value.end) !== null ? this._value.end : '');\n          }\n        }\n      }\n\n      /**\n       * Получение значения\n       * @returns {Object|null}\n       */\n    }, {\n      key: \"getValue\",\n      value: function getValue() {\n        if (this._control) {\n          var inputStart = this._control.parent().find('input.date-start');\n          var inputEnd = this._control.parent().find('input.date-end');\n          if (inputStart[0] && inputEnd[0]) {\n            var valueStart = inputStart.val();\n            var valueEnd = inputEnd.val();\n            if (typeof valueStart === 'string' && valueStart !== '' || typeof valueEnd === 'string' && valueEnd !== '') {\n              return {\n                start: valueStart !== '' ? valueStart : null,\n                end: valueEnd !== '' ? valueEnd : null\n              };\n            }\n          }\n          return null;\n        }\n        return this._value;\n      }\n\n      /**\n       * Фильтрация данных\n       * @returns {string}              fieldValue\n       * @returns {Array|string|number} searchValue\n       * @returns {boolean}\n       */\n    }, {\n      key: \"filter\",\n      value: function filter(fieldValue, searchValue) {\n        if (['string', 'number'].indexOf(_typeof(fieldValue)) < 0 || !TableUtils.isObject(searchValue) || typeof searchValue.start !== 'string' && typeof searchValue.end !== 'string') {\n          return false;\n        }\n        var issetStart = ['string', 'number'].indexOf(_typeof(searchValue.start)) >= 0;\n        var issetEnd = ['string', 'number'].indexOf(_typeof(searchValue.end)) >= 0;\n        if (issetStart && issetEnd) {\n          return fieldValue >= searchValue.start && fieldValue <= searchValue.end;\n        } else if (issetStart) {\n          return fieldValue >= searchValue.start;\n        } else {\n          return fieldValue <= searchValue.end;\n        }\n      }\n\n      /**\n       * Формирование контента\n       * @returns {string}\n       */\n    }, {\n      key: \"render\",\n      value: function render() {\n        var options = this.getOptions();\n        var label = typeof options.label === 'string' || typeof options.label === 'number' ? options.label : '';\n        if (!TableUtils.isObject(options.attr)) {\n          options.attr = {};\n        }\n        if (options.hasOwnProperty('width') && TableUtils.isNumeric(options.width)) {\n          if (options.attr.hasOwnProperty('style')) {\n            options.attr['style'] += ';width:' + options.width + 'px';\n          } else {\n            options.attr['style'] = 'width:' + options.width + 'px';\n          }\n        }\n        if (options.attr.hasOwnProperty('type')) {\n          delete options.attr.type;\n        }\n        if (options.attr.hasOwnProperty('value')) {\n          delete options.attr.value;\n        }\n        var field = typeof options.field === 'string' ? options.field : '';\n        var startAttr = [];\n        var startEnd = [];\n        var table = this._table;\n        $.each(options.attr, function (name, value) {\n          if (['name', 'value', 'class'].indexOf(name) >= 0 || ['string', 'number'].indexOf(_typeof(value)) < 0) {\n            return;\n          }\n          startAttr.push(name + '=\"' + value + '\"');\n          startEnd.push(name + '=\"' + value + '\"');\n        });\n        if (options.attr.hasOwnProperty('class') && ['string', 'number'].indexOf(_typeof(options.attr[\"class\"])) >= 0) {\n          startAttr.push('class=\"' + options.attr[\"class\"] + ' date-start\"');\n          startEnd.push('class=\"' + options.attr[\"class\"] + ' date-end\"');\n        } else {\n          startAttr.push('class=\"date-start\"');\n          startEnd.push('class=\"date-end\"');\n        }\n        if (field) {\n          startAttr.push('name=\"' + field + '[start]\"');\n          startEnd.push('name=\"' + field + '[end]\"');\n        }\n        startAttr.push('value=\"' + (this._value ? this._value.start : '') + '\"');\n        startEnd.push('value=\"' + (this._value ? this._value.end : '') + '\"');\n        var control = $(TableUtils.render(tpl['filters/date_range.html'], {\n          label: label,\n          startAttr: startAttr.length > 0 ? ' ' + startAttr.join(' ') : '',\n          endAttr: startEnd.length > 0 ? ' ' + startEnd.join(' ') : ''\n        }));\n        $('input', control).change(function (e) {\n          table.searchRecords();\n        });\n        $('input.date-start', control).change(function () {\n          var dateEnd = $('input.date-end', control).attr('min', $(this).val());\n          if (\"showPicker\" in HTMLInputElement.prototype) {\n            $(dateEnd)[0].showPicker();\n          }\n        });\n        $('input.date-end', control).change(function () {\n          $('input.date-start', control).attr('max', $(this).val());\n        });\n        this._control = control;\n        return this._control;\n      }\n    }]);\n  }(Filter);\n\n  var FilterDatetimeRange = /*#__PURE__*/function (_Filter) {\n    /**\n     * Инициализация\n     * @param {TableInstance} table\n     * @param {Object}              options\n     */\n    function FilterDatetimeRange(table, options) {\n      var _this;\n      _classCallCheck(this, FilterDatetimeRange);\n      options = $.extend(true, {\n        id: null,\n        type: 'datetime_range',\n        field: null,\n        label: null,\n        value: null,\n        width: 200,\n        attr: {\n          \"class\": \"form-control d-inline-block\"\n        }\n      }, options);\n      _this = _callSuper(this, FilterDatetimeRange, [table, options]);\n      if (_this._options.value !== null) {\n        _this.setValue(_this._options.value);\n      }\n      return _this;\n    }\n\n    /**\n     * Установка значения\n     * @param {object|null} value\n     */\n    _inherits(FilterDatetimeRange, _Filter);\n    return _createClass(FilterDatetimeRange, [{\n      key: \"setValue\",\n      value: function setValue(value) {\n        if (value) {\n          if (!TableUtils.isObject(value)) {\n            return;\n          }\n          var dateStart = null;\n          var dateEnd = null;\n          if (value.hasOwnProperty('start') && typeof value.start === 'string' && value.start.match(/^\\d{4}\\-\\d{2}\\-\\d{2}(T| )\\d{2}:\\d{2}(:\\d{2}|)$/) !== null && !isNaN(new Date(value.start))) {\n            dateStart = value.start;\n          }\n          if (value.hasOwnProperty('end') && typeof value.end === 'string' && value.end.match(/^\\d{4}\\-\\d{2}\\-\\d{2}(T| )\\d{2}:\\d{2}(:\\d{2}|)$/) !== null && !isNaN(new Date(value.end))) {\n            dateEnd = value.end;\n          }\n          if (dateStart === null && dateEnd === null) {\n            this._value = null;\n          } else {\n            this._value = {\n              start: dateStart,\n              end: dateEnd\n            };\n          }\n        } else {\n          this._value = null;\n        }\n        if (this._control) {\n          var inputStart = this._control.parent().find('input.date-start');\n          var inputEnd = this._control.parent().find('input.date-end');\n          if (this._value === null) {\n            inputStart.val('');\n            inputEnd.val('');\n          } else if (TableUtils.isObject(this._value)) {\n            inputStart.val(_typeof(this._value.start) !== null ? this._value.start : '');\n            inputEnd.val(_typeof(this._value.end) !== null ? this._value.end : '');\n          }\n        }\n      }\n\n      /**\n       * Получение значения\n       * @returns {Object|null}\n       */\n    }, {\n      key: \"getValue\",\n      value: function getValue() {\n        if (this._control) {\n          var inputStart = this._control.parent().find('input.date-start');\n          var inputEnd = this._control.parent().find('input.date-end');\n          if (inputStart[0] && inputEnd[0]) {\n            var valueStart = inputStart.val();\n            var valueEnd = inputEnd.val();\n            if (typeof valueStart === 'string' && valueStart !== '' || typeof valueEnd === 'string' && valueEnd !== '') {\n              return {\n                start: valueStart !== '' ? valueStart : null,\n                end: valueEnd !== '' ? valueEnd : null\n              };\n            }\n          }\n          return null;\n        }\n        return this._value;\n      }\n\n      /**\n       * Фильтрация данных\n       * @returns {string}              fieldValue\n       * @returns {Array|string|number} searchValue\n       * @returns {boolean}\n       */\n    }, {\n      key: \"filter\",\n      value: function filter(fieldValue, searchValue) {\n        if (['string', 'number'].indexOf(_typeof(fieldValue)) < 0 || !TableUtils.isObject(searchValue) || typeof searchValue.start !== 'string' && typeof searchValue.end !== 'string') {\n          return false;\n        }\n        var issetStart = ['string', 'number'].indexOf(_typeof(searchValue.start)) >= 0;\n        var issetEnd = ['string', 'number'].indexOf(_typeof(searchValue.end)) >= 0;\n        if (issetStart && issetEnd) {\n          return fieldValue >= searchValue.start && fieldValue <= searchValue.end;\n        } else if (issetStart) {\n          return fieldValue >= searchValue.start;\n        } else {\n          return fieldValue <= searchValue.end;\n        }\n      }\n\n      /**\n       * Формирование контента\n       * @returns {jQuery}\n       */\n    }, {\n      key: \"render\",\n      value: function render() {\n        var options = this.getOptions();\n        var label = typeof options.label === 'string' || typeof options.label === 'number' ? options.label : '';\n        if (!TableUtils.isObject(options.attr)) {\n          options.attr = {};\n        }\n        if (options.hasOwnProperty('width') && TableUtils.isNumeric(options.width)) {\n          if (options.attr.hasOwnProperty('style')) {\n            options.attr['style'] += ';width:' + options.width + 'px';\n          } else {\n            options.attr['style'] = 'width:' + options.width + 'px';\n          }\n        }\n        if (options.attr.hasOwnProperty('type')) {\n          delete options.attr.type;\n        }\n        if (options.attr.hasOwnProperty('value')) {\n          delete options.attr.value;\n        }\n        var field = typeof options.field === 'string' ? options.field : '';\n        var startAttr = [];\n        var startEnd = [];\n        var table = this._table;\n        $.each(options.attr, function (name, value) {\n          if (['name', 'value', 'class'].indexOf(name) >= 0 || ['string', 'number'].indexOf(_typeof(value)) < 0) {\n            return;\n          }\n          startAttr.push(name + '=\"' + value + '\"');\n          startEnd.push(name + '=\"' + value + '\"');\n        });\n        if (options.attr.hasOwnProperty('class') && ['string', 'number'].indexOf(_typeof(options.attr[\"class\"])) >= 0) {\n          startAttr.push('class=\"' + options.attr[\"class\"] + ' date-start\"');\n          startEnd.push('class=\"' + options.attr[\"class\"] + ' date-end\"');\n        } else {\n          startAttr.push('class=\"date-start\"');\n          startEnd.push('class=\"date-end\"');\n        }\n        if (field) {\n          startAttr.push('name=\"' + field + '[start]\"');\n          startEnd.push('name=\"' + field + '[end]\"');\n        }\n        startAttr.push('value=\"' + (this._value ? this._value.start : '') + '\"');\n        startEnd.push('value=\"' + (this._value ? this._value.end : '') + '\"');\n        var control = $(TableUtils.render(tpl['filters/datetime_range.html'], {\n          label: label,\n          startAttr: startAttr.length > 0 ? ' ' + startAttr.join(' ') : '',\n          endAttr: startEnd.length > 0 ? ' ' + startEnd.join(' ') : ''\n        }));\n        $('input', control).change(function (e) {\n          table.searchRecords();\n        });\n        $('input.date-start', control).change(function () {\n          var dateEnd = $('input.date-end', control).attr('min', $(this).val());\n          if (\"showPicker\" in HTMLInputElement.prototype) {\n            $(dateEnd)[0].showPicker();\n          }\n        });\n        $('input.date-end', control).change(function () {\n          $('input.date-start', control).attr('max', $(this).val());\n        });\n        this._control = control;\n        return this._control;\n      }\n    }]);\n  }(Filter);\n\n  var FilterCheckbox = /*#__PURE__*/function (_Filter) {\n    /**\n     * Инициализация\n     * @param {TableInstance} table\n     * @param {Object}              options\n     */\n    function FilterCheckbox(table, options) {\n      var _this;\n      _classCallCheck(this, FilterCheckbox);\n      options = $.extend(true, {\n        id: null,\n        type: 'checkbox',\n        field: null,\n        label: null,\n        value: null,\n        options: []\n      }, options);\n      _this = _callSuper(this, FilterCheckbox, [table, options]);\n      _defineProperty(_this, \"_class\", 'btn btn-outline-secondary');\n      if (_this._options.value !== null) {\n        _this.setValue(_this._options.value);\n      }\n      return _this;\n    }\n\n    /**\n     * Установка значения\n     * @param {Array|string|number|null} value\n     */\n    _inherits(FilterCheckbox, _Filter);\n    return _createClass(FilterCheckbox, [{\n      key: \"setValue\",\n      value: function setValue(value) {\n        if (['string', 'number', 'object'].indexOf(_typeof(value)) < 0) {\n          return;\n        }\n        if (_typeof(value) === 'object') {\n          if (Array.isArray(value)) {\n            var items = [];\n            value.map(function (item) {\n              if (['string', 'number'].indexOf(_typeof(item)) >= 0) {\n                items.push(item);\n              }\n            });\n            this._value = items;\n          } else {\n            this._value = null;\n          }\n        } else {\n          this._value = [value];\n        }\n        if (this._control) {\n          $('input:checked', this._control).prop('checked', false);\n          if (Array.isArray(this._value)) {\n            var control = this._control;\n            this._value.map(function (value) {\n              $('input[value=\"' + value + '\"]', control).prop('checked', true);\n            });\n          }\n        }\n      }\n\n      /**\n       * Получение значения\n       * @returns {Array|null}\n       */\n    }, {\n      key: \"getValue\",\n      value: function getValue() {\n        if (this._control) {\n          var inputs = $('input:checked', this._control);\n          var items = [];\n          $.each(inputs, function (key, input) {\n            var value = $(input).attr('value');\n            if (['string', 'number'].indexOf(_typeof(value)) >= 0 && value !== '') {\n              items.push(value);\n            }\n          });\n          return items.length > 0 ? items : null;\n        } else {\n          return this._value;\n        }\n      }\n\n      /**\n       * Фильтрация данных\n       * @returns {string} fieldValue\n       * @returns {Array}  searchValue\n       * @returns {boolean}\n       */\n    }, {\n      key: \"filter\",\n      value: function filter(fieldValue, searchValue) {\n        if (['string', 'number'].indexOf(_typeof(fieldValue)) < 0 || !Array.isArray(searchValue)) {\n          return false;\n        }\n        return searchValue.indexOf(fieldValue) >= 0;\n      }\n\n      /**\n       * Формирование контента\n       * @returns {string}\n       */\n    }, {\n      key: \"render\",\n      value: function render() {\n        var that = this;\n        var options = this.getOptions();\n        var field = typeof options.field === 'string' ? options.field : '';\n        var items = [];\n        var label = typeof options.label === 'string' || typeof options.label === 'number' ? options.label : '';\n        $.each(options.options, function (key, option) {\n          if (!TableUtils.isObject(option) || !option.hasOwnProperty('value') || ['string', 'numeric'].indexOf(_typeof(option.value)) === -1) {\n            return;\n          }\n          var checked = Array.isArray(that._value) ? that._value.indexOf(option.value) >= 0 : false;\n          var text = option.hasOwnProperty('text') ? option.text : option.value;\n          items.push({\n            text: text,\n            value: option.value,\n            \"class\": option.hasOwnProperty('class') && typeof option[\"class\"] === 'string' ? option[\"class\"] : that._class,\n            checked: checked\n          });\n        });\n        this._control = $(TableUtils.render(tpl['filters/checkbox.html'], {\n          label: label,\n          items: items,\n          field: field + this.getId(),\n          lang: this._table.getLang()\n        }));\n        $('input', this._control).change(function (e) {\n          that._table.searchRecords();\n        });\n        return this._control;\n      }\n    }]);\n  }(Filter);\n\n  var FilterRadio = /*#__PURE__*/function (_Filter) {\n    /**\n     * Инициализация\n     * @param {TableInstance} table\n     * @param {Object}              options\n     */\n    function FilterRadio(table, options) {\n      var _this;\n      _classCallCheck(this, FilterRadio);\n      options = $.extend(true, {\n        id: null,\n        type: 'radio',\n        field: null,\n        label: null,\n        value: null,\n        options: []\n      }, options);\n      _this = _callSuper(this, FilterRadio, [table, options]);\n      _defineProperty(_this, \"_class\", 'btn btn-outline-secondary');\n      if (_this._options.value !== null) {\n        _this.setValue(_this._options.value);\n      }\n      return _this;\n    }\n\n    /**\n     * Установка значения\n     * @param {string|number|null} value\n     */\n    _inherits(FilterRadio, _Filter);\n    return _createClass(FilterRadio, [{\n      key: \"setValue\",\n      value: function setValue(value) {\n        if (value !== null && typeof value !== 'string' && typeof value !== 'number') {\n          return;\n        }\n        this._value = value;\n        if (this._control) {\n          $('input', this._control).prop('checked', false);\n          if (this._value !== null) {\n            $('input[value=\"' + this._value + '\"]', this._control).prop('checked', true);\n          }\n        }\n      }\n\n      /**\n       * Получение значения\n       * @returns {string|null}\n       */\n    }, {\n      key: \"getValue\",\n      value: function getValue() {\n        if (this._control) {\n          var input = $('input:checked', this._control);\n          if (input && input[0]) {\n            var value = input.val();\n            return value === '' ? null : value;\n          }\n          return null;\n        } else {\n          return this._value;\n        }\n      }\n\n      /**\n       * Фильтрация данных\n       * @returns {string}              fieldValue\n       * @returns {Array|string|number} searchValue\n       * @returns {boolean}\n       */\n    }, {\n      key: \"filter\",\n      value: function filter(fieldValue, searchValue) {\n        if (['string', 'number'].indexOf(_typeof(fieldValue)) < 0 || ['string', 'number'].indexOf(_typeof(searchValue)) < 0) {\n          return false;\n        }\n        return fieldValue.toString().toLowerCase() === searchValue.toString().toLowerCase();\n      }\n\n      /**\n       * Формирование контента\n       * @returns {string}\n       */\n    }, {\n      key: \"render\",\n      value: function render() {\n        var that = this;\n        var table = this._table;\n        var options = this.getOptions();\n        var field = typeof options.field === 'string' ? options.field : '';\n        var items = [];\n        var label = typeof options.label === 'string' || typeof options.label === 'number' ? options.label : '';\n        $.each(options.options, function (key, option) {\n          if (!TableUtils.isObject(option) || !option.hasOwnProperty('value') || ['string', 'numeric'].indexOf(_typeof(option.value)) === -1) {\n            return;\n          }\n          var text = option.hasOwnProperty('text') ? option.text : option.value;\n          items.push({\n            text: text,\n            value: option.value,\n            \"class\": option.hasOwnProperty('class') && typeof option[\"class\"] === 'string' ? option[\"class\"] : that._class,\n            checked: option.value == that._value\n          });\n        });\n        this._control = $(TableUtils.render(tpl['filters/radio.html'], {\n          label: label,\n          items: items,\n          field: field + this.getId(),\n          lang: this._table.getLang()\n        }));\n        $('input', this._control).change(function (e) {\n          table.searchRecords();\n        });\n        return this._control;\n      }\n    }]);\n  }(Filter);\n\n  var FilterSelect = /*#__PURE__*/function (_Filter) {\n    /**\n     * Инициализация\n     * @param {TableInstance} table\n     * @param {Object}              options\n     */\n    function FilterSelect(table, options) {\n      var _this;\n      _classCallCheck(this, FilterSelect);\n      options = $.extend(true, {\n        id: null,\n        type: 'select',\n        field: null,\n        label: null,\n        width: null,\n        value: null,\n        attr: {\n          \"class\": 'form-select d-inline-block'\n        },\n        options: []\n      }, options);\n      _this = _callSuper(this, FilterSelect, [table, options]);\n      if (_this._options.value !== null) {\n        _this.setValue(_this._options.value);\n      }\n      return _this;\n    }\n\n    /**\n     * Установка значения\n     * @param {Array|string|number|null} value\n     */\n    _inherits(FilterSelect, _Filter);\n    return _createClass(FilterSelect, [{\n      key: \"setValue\",\n      value: function setValue(value) {\n        if (['string', 'number', 'object'].indexOf(_typeof(value)) < 0) {\n          return;\n        }\n        if (_typeof(value) === 'object') {\n          if (Array.isArray(value)) {\n            var items = [];\n            value.map(function (item) {\n              if (['string', 'number'].indexOf(_typeof(item)) >= 0) {\n                items.push(item);\n              }\n            });\n            this._value = items;\n          } else {\n            this._value = null;\n          }\n        } else {\n          this._value = [value];\n        }\n        if (this._control) {\n          $('select option:selected', this._control).prop('selected', false);\n          if (Array.isArray(this._value)) {\n            var control = this._control;\n            this._value.map(function (value) {\n              $('select option[value=\"' + value + '\"]', control).prop('selected', true);\n            });\n          }\n        }\n      }\n\n      /**\n       * Получение значения\n       * @returns {Array|string|null}\n       */\n    }, {\n      key: \"getValue\",\n      value: function getValue() {\n        if (this._control) {\n          var isMultiple = !!$('select', this._control).attr('multiple');\n          var options = $('select option:checked', this._control);\n          var items = [];\n          $.each(options, function (key, option) {\n            var value = $(option).attr('value');\n            if (['string', 'number'].indexOf(_typeof(value)) >= 0 && value !== '') {\n              items.push(value);\n            }\n          });\n          return items.length > 0 ? isMultiple ? items : items[0] : null;\n        } else {\n          return this._value;\n        }\n      }\n\n      /**\n       * Фильтрация данных\n       * @returns {string}              fieldValue\n       * @returns {Array|string|number} searchValue\n       * @returns {boolean}\n       */\n    }, {\n      key: \"filter\",\n      value: function filter(fieldValue, searchValue) {\n        if (['string', 'number'].indexOf(_typeof(fieldValue)) < 0 || ['string', 'number'].indexOf(_typeof(searchValue)) < 0 && !Array.isArray(searchValue)) {\n          return false;\n        }\n        if (Array.isArray(searchValue)) {\n          return searchValue.indexOf(fieldValue) >= 0;\n        } else {\n          return fieldValue.toString().toLowerCase() === searchValue.toString().toLowerCase();\n        }\n      }\n\n      /**\n       * Формирование контента\n       * @returns {string}\n       */\n    }, {\n      key: \"render\",\n      value: function render() {\n        var that = this;\n        var options = this.getOptions();\n        var selectOptions = [];\n        var attributes = [];\n        var table = this._table;\n        var label = typeof options.label === 'string' || typeof options.label === 'number' ? options.label : '';\n        if (!options.hasOwnProperty('attr') || !TableUtils.isObject(options.attr)) {\n          options.attr = {};\n        }\n        if (options.field) {\n          options.attr.name = this._options.field;\n        }\n        if (options.width) {\n          options.attr = TableUtils.mergeAttr({\n            style: 'width:' + options.width + 'px'\n          }, options.attr);\n        }\n        if (options.hasOwnProperty('options') && _typeof(options.options) === 'object' && options.options !== null) {\n          $.each(options.options, function (key, option) {\n            if (typeof option === 'string' || typeof option === 'number') {\n              selectOptions.push(that._buildOption({\n                type: 'option',\n                value: key,\n                text: option\n              }));\n            } else if (TableUtils.isObject(option)) {\n              var type = option.hasOwnProperty('type') && typeof option.type === 'string' ? option.type : 'option';\n              if (type === 'group') {\n                var renderAttr = [];\n                var groupAttr = {};\n                var groupOptions = [];\n                if (option.hasOwnProperty('attr') && TableUtils.isObject(option.attr)) {\n                  groupAttr = option.attr;\n                }\n                if (option.hasOwnProperty('label') && ['string', 'number'].indexOf(_typeof(option.label)) >= 0) {\n                  groupAttr.label = option.label;\n                }\n                $.each(groupAttr, function (name, value) {\n                  renderAttr.push(name + '=\"' + value + '\"');\n                });\n                if (Array.isArray(option.options)) {\n                  $.each(option.options, function (key, groupOption) {\n                    groupOptions.push(that._buildOption(groupOption));\n                  });\n                }\n                selectOptions.push({\n                  type: 'group',\n                  attr: renderAttr.length > 0 ? ' ' + renderAttr.join(' ') : '',\n                  options: groupOptions\n                });\n              } else {\n                selectOptions.push(that._buildOption(option));\n              }\n            }\n          });\n        }\n        $.each(options.attr, function (name, value) {\n          attributes.push(name + '=\"' + value + '\"');\n        });\n        this._control = $(TableUtils.render(tpl['filters/select.html'], {\n          label: label,\n          attr: attributes.length > 0 ? ' ' + attributes.join(' ') : '',\n          options: selectOptions\n        }));\n        $('select', this._control).change(function (e) {\n          table.searchRecords();\n        });\n        return this._control;\n      }\n\n      /**\n       * Сборка опции\n       * @param option\n       * @return {object}\n       * @private\n       */\n    }, {\n      key: \"_buildOption\",\n      value: function _buildOption(option) {\n        var optionAttr = [];\n        var optionText = option.hasOwnProperty('text') && ['string', 'number'].indexOf(_typeof(option.text)) >= 0 ? option.text : '';\n        $.each(option, function (name, value) {\n          if (name !== 'text') {\n            optionAttr.push(name + '=\"' + value + '\"');\n          }\n        });\n        if (Array.isArray(this._value)) {\n          $.each(this._value, function (key, itemValue) {\n            if (itemValue == option.value) {\n              optionAttr.push('selected=\"selected\"');\n              return false;\n            }\n          });\n        } else if (this._value == option.value) {\n          optionAttr.push('selected=\"selected\"');\n        }\n        return {\n          type: 'option',\n          text: optionText,\n          attr: optionAttr.length > 0 ? ' ' + optionAttr.join(' ') : ''\n        };\n      }\n    }]);\n  }(Filter);\n\n  var FilterSwitch = /*#__PURE__*/function (_Filter) {\n    /**\n     * Инициализация\n     * @param {TableInstance} table\n     * @param {Object}              options\n     */\n    function FilterSwitch(table, options) {\n      var _this;\n      _classCallCheck(this, FilterSwitch);\n      options = $.extend(true, {\n        id: null,\n        type: 'switch',\n        field: null,\n        label: null,\n        value: null,\n        valueY: 1\n      }, options);\n      _this = _callSuper(this, FilterSwitch, [table, options]);\n      if (_this._options.value !== null) {\n        _this.setValue(_this._options.value);\n      }\n      return _this;\n    }\n\n    /**\n     * Фильтрация данных\n     * @returns {string}              fieldValue\n     * @returns {Array|string|number} searchValue\n     * @returns {boolean}\n     */\n    _inherits(FilterSwitch, _Filter);\n    return _createClass(FilterSwitch, [{\n      key: \"filter\",\n      value: function filter(fieldValue, searchValue) {\n        if (['string', 'number'].indexOf(_typeof(fieldValue)) < 0 || ['string', 'number'].indexOf(_typeof(searchValue)) < 0) {\n          return false;\n        }\n        return fieldValue.toString() === searchValue.toString();\n      }\n\n      /**\n       * Установка значения\n       * @param {string|number|null} value\n       */\n    }, {\n      key: \"setValue\",\n      value: function setValue(value) {\n        if (value !== null && typeof value !== 'string' && typeof value !== 'number') {\n          return;\n        }\n        this._value = value;\n        if (this._control) {\n          var valueY = typeof this._options.valueY === 'string' || typeof this._options.valueY === 'number' ? this._options.valueY : '';\n          if (this._value === null) {\n            $('input', this._control).prop('checked', false);\n          } else if (this._value === valueY) {\n            $('input', this._control).prop('checked', true);\n          } else {\n            $('input', this._control).prop('checked', false);\n          }\n        }\n      }\n\n      /**\n       * Получение значения\n       * @returns {string}\n       */\n    }, {\n      key: \"getValue\",\n      value: function getValue() {\n        if (this._control) {\n          var value = $('input:checked', this._control).val();\n          return typeof value !== 'string' || value === '' ? null : value;\n        }\n        return this._value;\n      }\n\n      /**\n       * Формирование контента\n       * @returns {string}\n       */\n    }, {\n      key: \"render\",\n      value: function render() {\n        var table = this._table;\n        var options = this.getOptions();\n        var valueY = typeof options.valueY === 'string' || typeof options.valueY === 'number' ? options.valueY : '';\n        var label = typeof options.label === 'string' || typeof options.label === 'number' ? options.label : '';\n        this._control = $(TableUtils.render(tpl['filters/switch.html'], {\n          id: this._id,\n          valueY: valueY,\n          field: typeof options.field === 'string' ? options.field : '',\n          checked: this._value == valueY,\n          label: label\n        }));\n        $('input', this._control).change(function (e) {\n          table.searchRecords();\n        });\n        return this._control;\n      }\n    }]);\n  }(Filter);\n\n  var Search = /*#__PURE__*/function () {\n    /**\n     * Инициализация\n     * @param {object} table\n     * @param {object} options\n     */\n    function Search(table, options) {\n      _classCallCheck(this, Search);\n      _defineProperty(this, \"_id\", null);\n      _defineProperty(this, \"_table\", null);\n      _defineProperty(this, \"_value\", null);\n      _defineProperty(this, \"_control\", null);\n      _defineProperty(this, \"_options\", {\n        id: '',\n        type: '',\n        field: null,\n        label: null\n      });\n      this._table = table;\n      this._options = $.extend(true, this._options, options);\n      this._id = this._options.hasOwnProperty('id') && typeof this._options.id === 'string' && this._options.id ? this._options.id : TableUtils.hashCode();\n    }\n\n    /**\n     * Получение параметров\n     * @returns {object}\n     */\n    return _createClass(Search, [{\n      key: \"getOptions\",\n      value: function getOptions() {\n        return $.extend(true, {}, this._options);\n      }\n\n      /**\n       * Получение id\n       * @returns {string}\n       */\n    }, {\n      key: \"getId\",\n      value: function getId() {\n        return this._id;\n      }\n\n      /**\n       * Установка значения\n       * @param {string} value\n       */\n    }, {\n      key: \"setValue\",\n      value: function setValue(value) {}\n\n      /**\n       * Получение значения\n       * @returns {string|null}\n       */\n    }, {\n      key: \"getValue\",\n      value: function getValue() {}\n\n      /**\n       * Получение название поля\n       * @returns {string|null}\n       */\n    }, {\n      key: \"getField\",\n      value: function getField() {\n        return this._options.field;\n      }\n\n      /**\n       * Фильтрация данных\n       * @returns {string} fieldValue\n       * @returns {string} searchValue\n       * @returns {boolean}\n       */\n    }, {\n      key: \"filter\",\n      value: function filter(fieldValue, searchValue) {\n        if (['string', 'number'].indexOf(_typeof(fieldValue)) < 0 || ['string', 'number'].indexOf(_typeof(searchValue)) < 0) {\n          return false;\n        }\n        return fieldValue.toString().toLowerCase().indexOf(searchValue.toString().toLowerCase()) >= 0;\n      }\n\n      /**\n       * Формирование контента\n       * @returns {jQuery|string}\n       */\n    }, {\n      key: \"render\",\n      value: function render() {}\n    }]);\n  }();\n\n  var SearchText = /*#__PURE__*/function (_Search) {\n    /**\n     * Инициализация\n     * @param {TableInstance} table\n     * @param {Object}              options\n     */\n    function SearchText(table, options) {\n      var _this;\n      _classCallCheck(this, SearchText);\n      options = $.extend(true, {\n        id: null,\n        type: 'text',\n        field: null,\n        label: null,\n        value: null,\n        width: 200,\n        attr: {\n          \"class\": \"form-control d-inline-block\"\n        }\n      }, options);\n      _this = _callSuper(this, SearchText, [table, options]);\n      if (_this._options.value !== null) {\n        _this.setValue(_this._options.value);\n      }\n      return _this;\n    }\n\n    /**\n     * Установка значения\n     * @param {string} value\n     */\n    _inherits(SearchText, _Search);\n    return _createClass(SearchText, [{\n      key: \"setValue\",\n      value: function setValue(value) {\n        if (value !== null && typeof value !== 'string' && typeof value !== 'number') {\n          return;\n        }\n        this._value = value;\n        if (this._control) {\n          this._control.val(this._value === null ? '' : this._value);\n        }\n      }\n\n      /**\n       * Получение значения\n       * @returns {string|null}\n       */\n    }, {\n      key: \"getValue\",\n      value: function getValue() {\n        if (this._control) {\n          var value = this._control.val();\n          return typeof value !== 'string' || value === '' ? null : value;\n        }\n        return this._value;\n      }\n\n      /**\n       * Формирование контента\n       * @returns {jQuery}\n       */\n    }, {\n      key: \"render\",\n      value: function render() {\n        if (!TableUtils.isObject(this._options.attr)) {\n          this._options.attr = {};\n        }\n        if (this._options.hasOwnProperty('width') && TableUtils.isNumeric(this._options.width)) {\n          if (this._options.attr.hasOwnProperty('style')) {\n            this._options.attr['style'] += ';width:' + this._options.width + 'px';\n          } else {\n            this._options.attr['style'] = 'width:' + this._options.width + 'px';\n          }\n        }\n        this._options.attr['value'] = typeof this._value === 'string' || typeof this._value === 'number' ? this._value : '';\n        if (this._options.attr.hasOwnProperty('type')) {\n          delete this._options.attr.type;\n        }\n        var attributes = [];\n        var table = this._table;\n        $.each(this._options.attr, function (name, value) {\n          if (['string', 'number'].indexOf(_typeof(value)) >= 0) {\n            attributes.push(name + '=\"' + value + '\"');\n          }\n        });\n        this._control = $(TableUtils.render(tpl['search/text.html'], {\n          attr: attributes.length > 0 ? ' ' + attributes.join(' ') : ''\n        }));\n        $('input', this._control).keyup(function (e) {\n          if (e.key === 'Enter' || e.keyCode === 13) {\n            table.searchRecords();\n            var container = TableElements.getSearchContainer(table.getId());\n            container.fadeOut('fast');\n          }\n        });\n        return this._control;\n      }\n    }]);\n  }(Search);\n\n  var SearchNumber = /*#__PURE__*/function (_Search) {\n    /**\n     * Инициализация\n     * @param {TableInstance} table\n     * @param {Object}              options\n     */\n    function SearchNumber(table, options) {\n      var _this;\n      _classCallCheck(this, SearchNumber);\n      options = $.extend(true, {\n        id: null,\n        type: 'number',\n        field: null,\n        label: null,\n        value: null,\n        width: 200,\n        attr: {\n          \"class\": \"form-control d-inline-block\"\n        }\n      }, options);\n      _this = _callSuper(this, SearchNumber, [table, options]);\n      if (_this._options.value !== null) {\n        _this.setValue(_this._options.value);\n      }\n      return _this;\n    }\n\n    /**\n     * Установка значения\n     * @param {Object} value\n     */\n    _inherits(SearchNumber, _Search);\n    return _createClass(SearchNumber, [{\n      key: \"setValue\",\n      value: function setValue(value) {\n        if (value) {\n          if (!TableUtils.isObject(value)) {\n            return;\n          }\n          var numberStart = null;\n          var numberEnd = null;\n          if (value.hasOwnProperty('start') && ['string', 'number'].indexOf(_typeof(value.start)) >= 0 && !isNaN(Number(value.start))) {\n            numberStart = Number(value.start);\n          }\n          if (value.hasOwnProperty('end') && ['string', 'number'].indexOf(_typeof(value.end)) >= 0 && !isNaN(Number(value.end))) {\n            numberEnd = Number(value.end);\n          }\n          if (numberStart === null && numberEnd === null) {\n            this._value = null;\n          } else {\n            this._value = {\n              start: numberStart,\n              end: numberEnd\n            };\n          }\n        } else {\n          this._value = null;\n        }\n        if (this._control) {\n          var inputStart = this._control.parent().find('input.number-start');\n          var inputEnd = this._control.parent().find('input.number-end');\n          if (this._value === null) {\n            inputStart.val('');\n            inputEnd.val('');\n          } else if (TableUtils.isObject(this._value)) {\n            inputStart.val(_typeof(this._value.start) !== null ? this._value.start : '');\n            inputEnd.val(_typeof(this._value.end) !== null ? this._value.end : '');\n          }\n        }\n      }\n\n      /**\n       * Получение значения\n       * @returns {string|null}\n       */\n    }, {\n      key: \"getValue\",\n      value: function getValue() {\n        if (this._control) {\n          var inputStart = this._control.parent().find('input.number-start');\n          var inputEnd = this._control.parent().find('input.number-end');\n          if (inputStart[0] && inputEnd[0]) {\n            var valueStart = inputStart.val();\n            var valueEnd = inputEnd.val();\n            if (typeof valueStart === 'string' && valueStart !== '' || typeof valueEnd === 'string' && valueEnd !== '') {\n              return {\n                start: valueStart !== '' && !isNaN(Number(valueStart)) ? Number(valueStart) : null,\n                end: valueEnd !== '' && !isNaN(Number(valueEnd)) ? Number(valueEnd) : null\n              };\n            }\n          }\n          return null;\n        }\n        return this._value;\n      }\n\n      /**\n       * Фильтрация данных\n       * @returns {string}              fieldValue\n       * @returns {Array|string|number} searchValue\n       * @returns {boolean}\n       */\n    }, {\n      key: \"filter\",\n      value: function filter(fieldValue, searchValue) {\n        if (['string', 'number'].indexOf(_typeof(fieldValue)) < 0 || !TableUtils.isObject(searchValue) || ['string', 'number'].indexOf(_typeof(searchValue.start)) < 0 && ['string', 'number'].indexOf(_typeof(searchValue.end)) < 0) {\n          return false;\n        }\n        var issetStart = ['string', 'number'].indexOf(_typeof(searchValue.start)) >= 0;\n        var issetEnd = ['string', 'number'].indexOf(_typeof(searchValue.end)) >= 0;\n        if (issetStart && issetEnd) {\n          return fieldValue >= searchValue.start && fieldValue <= searchValue.end;\n        } else if (issetStart) {\n          return fieldValue >= searchValue.start;\n        } else {\n          return fieldValue <= searchValue.end;\n        }\n      }\n\n      /**\n       * Формирование контента\n       * @returns {jQuery}\n       */\n    }, {\n      key: \"render\",\n      value: function render() {\n        if (!TableUtils.isObject(this._options.attr)) {\n          this._options.attr = {};\n        }\n        if (this._options.hasOwnProperty('width') && TableUtils.isNumeric(this._options.width)) {\n          if (this._options.attr.hasOwnProperty('style')) {\n            this._options.attr['style'] += ';width:' + this._options.width + 'px';\n          } else {\n            this._options.attr['style'] = 'width:' + this._options.width + 'px';\n          }\n        }\n        if (this._options.attr.hasOwnProperty('type')) {\n          delete this._options.attr.type;\n        }\n        if (this._options.attr.hasOwnProperty('value')) {\n          delete this._options.attr.value;\n        }\n        var field = typeof this._options.field === 'string' ? this._options.field : '';\n        var startAttr = [];\n        var startEnd = [];\n        var table = this._table;\n        $.each(this._options.attr, function (name, value) {\n          if (['name', 'value', 'class'].indexOf(name) >= 0 || ['string', 'number'].indexOf(_typeof(value)) < 0) {\n            return;\n          }\n          startAttr.push(name + '=\"' + value + '\"');\n          startEnd.push(name + '=\"' + value + '\"');\n        });\n        if (this._options.attr.hasOwnProperty('class') && ['string', 'number'].indexOf(_typeof(this._options.attr[\"class\"])) >= 0) {\n          startAttr.push('class=\"' + this._options.attr[\"class\"] + ' number-start\"');\n          startEnd.push('class=\"' + this._options.attr[\"class\"] + ' number-end\"');\n        } else {\n          startAttr.push('class=\"number-start\"');\n          startEnd.push('class=\"number-end\"');\n        }\n        if (field) {\n          startAttr.push('name=\"' + field + '[start]\"');\n          startEnd.push('name=\"' + field + '[end]\"');\n        }\n        startAttr.push('value=\"' + (this._value ? this._value.start : '') + '\"');\n        startEnd.push('value=\"' + (this._value ? this._value.end : '') + '\"');\n        this._control = $(TableUtils.render(tpl['search/number.html'], {\n          startAttr: startAttr.length > 0 ? ' ' + startAttr.join(' ') : '',\n          endAttr: startEnd.length > 0 ? ' ' + startEnd.join(' ') : ''\n        }));\n        $('input.number-start, input.number-end', this._control).keyup(function (e) {\n          if (e.key === 'Enter' || e.keyCode === 13) {\n            table.searchRecords();\n            var container = TableElements.getSearchContainer(table.getId());\n            container.fadeOut('fast');\n          }\n        });\n        return this._control;\n      }\n    }]);\n  }(Search);\n\n  var SearchDate = /*#__PURE__*/function (_Search) {\n    /**\n     * Инициализация\n     * @param {TableInstance} table\n     * @param {Object}        options\n     */\n    function SearchDate(table, options) {\n      var _this;\n      _classCallCheck(this, SearchDate);\n      options = $.extend(true, {\n        id: null,\n        type: 'date',\n        field: null,\n        label: null,\n        value: null,\n        width: 200,\n        attr: {\n          \"class\": \"form-control d-inline-block\"\n        }\n      }, options);\n      _this = _callSuper(this, SearchDate, [table, options]);\n      if (_this._options.value !== null) {\n        _this.setValue(_this._options.value);\n      }\n      return _this;\n    }\n\n    /**\n     * Установка значения\n     * @param {string} value\n     */\n    _inherits(SearchDate, _Search);\n    return _createClass(SearchDate, [{\n      key: \"setValue\",\n      value: function setValue(value) {\n        if (typeof value !== 'string' && value !== null) {\n          return;\n        }\n        if (value && (value.match(/^\\d{4}\\-\\d{2}\\-\\d{2}$/) === null || isNaN(new Date(value)))) {\n          return;\n        }\n        this._value = value;\n        if (this._control) {\n          this._control.val(this._value === null ? '' : this._value);\n        }\n      }\n\n      /**\n       * Получение значения\n       * @returns {string|null}\n       */\n    }, {\n      key: \"getValue\",\n      value: function getValue() {\n        if (this._control) {\n          var value = this._control.val();\n          return typeof value !== 'string' || value === '' ? null : value;\n        }\n        return this._value;\n      }\n\n      /**\n       * Фильтрация данных\n       * @returns {string}              fieldValue\n       * @returns {Array|string|number} searchValue\n       * @returns {boolean}\n       */\n    }, {\n      key: \"filter\",\n      value: function filter(fieldValue, searchValue) {\n        if (['string', 'number'].indexOf(_typeof(fieldValue)) < 0 || ['string', 'number'].indexOf(_typeof(searchValue)) < 0) {\n          return false;\n        }\n        return fieldValue.toString().indexOf(searchValue.toString()) === 0;\n      }\n\n      /**\n       * Формирование контента\n       * @returns {jQuery}\n       */\n    }, {\n      key: \"render\",\n      value: function render() {\n        if (!TableUtils.isObject(this._options.attr)) {\n          this._options.attr = {};\n        }\n        if (this._options.hasOwnProperty('width') && TableUtils.isNumeric(this._options.width)) {\n          if (this._options.attr.hasOwnProperty('style')) {\n            this._options.attr['style'] += ';width:' + this._options.width + 'px';\n          } else {\n            this._options.attr['style'] = 'width:' + this._options.width + 'px';\n          }\n        }\n        this._options.attr['value'] = typeof this._value === 'string' || typeof this._value === 'number' ? this._value : '';\n        if (this._options.attr.hasOwnProperty('type')) {\n          delete this._options.attr.type;\n        }\n        var attributes = [];\n        var table = this._table;\n        $.each(this._options.attr, function (name, value) {\n          attributes.push(name + '=\"' + value + '\"');\n        });\n        this._control = $(TableUtils.render(tpl['search/date.html'], {\n          attr: attributes.length > 0 ? ' ' + attributes.join(' ') : ''\n        }));\n        this._control.keyup(function (e) {\n          if (e.key === 'Enter' || e.keyCode === 13) {\n            table.searchRecords();\n            var container = TableElements.getSearchContainer(table.getId());\n            container.fadeOut('fast');\n          }\n        });\n        return this._control;\n      }\n    }]);\n  }(Search);\n\n  var SearchDateMonth = /*#__PURE__*/function (_Search) {\n    /**\n     * Инициализация\n     * @param {TableInstance} table\n     * @param {Object}              options\n     */\n    function SearchDateMonth(table, options) {\n      var _this;\n      _classCallCheck(this, SearchDateMonth);\n      options = $.extend(true, {\n        id: null,\n        type: 'date_month',\n        field: null,\n        label: null,\n        value: null,\n        width: 200,\n        attr: {\n          \"class\": \"form-control d-inline-block\"\n        }\n      }, options);\n      _this = _callSuper(this, SearchDateMonth, [table, options]);\n      if (_this._options.value !== null) {\n        _this.setValue(_this._options.value);\n      }\n      return _this;\n    }\n\n    /**\n     * Установка значения\n     * @param {string|null} value\n     */\n    _inherits(SearchDateMonth, _Search);\n    return _createClass(SearchDateMonth, [{\n      key: \"setValue\",\n      value: function setValue(value) {\n        if (typeof value !== 'string' && value !== null) {\n          return;\n        }\n        if (value && (value.match(/^\\d{4}\\-\\d{2}$/) === null || isNaN(new Date(value)))) {\n          return;\n        }\n        this._value = value;\n        if (this._control) {\n          this._control.val(this._value === null ? '' : this._value);\n        }\n      }\n\n      /**\n       * Получение значения\n       * @returns {string|null}\n       */\n    }, {\n      key: \"getValue\",\n      value: function getValue() {\n        if (this._control) {\n          var value = this._control.val();\n          return typeof value !== 'string' || value === '' ? null : value;\n        }\n        return this._value;\n      }\n\n      /**\n       * Фильтрация данных\n       * @returns {string} fieldValue\n       * @returns {string} searchValue\n       * @returns {boolean}\n       */\n    }, {\n      key: \"filter\",\n      value: function filter(fieldValue, searchValue) {\n        if (['string', 'number'].indexOf(_typeof(fieldValue)) < 0 || ['string', 'number'].indexOf(_typeof(searchValue)) < 0) {\n          return false;\n        }\n        return fieldValue.toString().toLowerCase().indexOf(searchValue.toString().toLowerCase()) === 0;\n      }\n\n      /**\n       * Формирование контента\n       * @returns {jQuery}\n       */\n    }, {\n      key: \"render\",\n      value: function render() {\n        if (!TableUtils.isObject(this._options.attr)) {\n          this._options.attr = {};\n        }\n        if (this._options.hasOwnProperty('width') && TableUtils.isNumeric(this._options.width)) {\n          if (this._options.attr.hasOwnProperty('style')) {\n            this._options.attr['style'] += ';width:' + this._options.width + 'px';\n          } else {\n            this._options.attr['style'] = 'width:' + this._options.width + 'px';\n          }\n        }\n        this._options.attr['value'] = typeof this._value === 'string' || typeof this._value === 'number' ? this._value : '';\n        if (this._options.attr.hasOwnProperty('type')) {\n          delete this._options.attr.type;\n        }\n        var attributes = [];\n        var table = this._table;\n        $.each(this._options.attr, function (name, value) {\n          attributes.push(name + '=\"' + value + '\"');\n        });\n        this._control = $(TableUtils.render(tpl['search/date_month.html'], {\n          attr: attributes.length > 0 ? ' ' + attributes.join(' ') : ''\n        }));\n        this._control.keyup(function (e) {\n          if (e.key === 'Enter' || e.keyCode === 13) {\n            table.searchRecords();\n            var container = TableElements.getSearchContainer(table.getId());\n            container.fadeOut('fast');\n          }\n        });\n        return this._control;\n      }\n    }]);\n  }(Search);\n\n  var SearchDatetime = /*#__PURE__*/function (_Search) {\n    /**\n     * Инициализация\n     * @param {TableInstance} table\n     * @param {Object}              options\n     */\n    function SearchDatetime(table, options) {\n      var _this;\n      _classCallCheck(this, SearchDatetime);\n      options = $.extend(true, {\n        id: null,\n        type: 'datetime',\n        field: null,\n        label: null,\n        value: null,\n        width: 200,\n        attr: {\n          \"class\": \"form-control d-inline-block\"\n        }\n      }, options);\n      _this = _callSuper(this, SearchDatetime, [table, options]);\n      if (_this._options.value !== null) {\n        _this.setValue(_this._options.value);\n      }\n      return _this;\n    }\n\n    /**\n     * Установка значения\n     * @param {string} value\n     */\n    _inherits(SearchDatetime, _Search);\n    return _createClass(SearchDatetime, [{\n      key: \"setValue\",\n      value: function setValue(value) {\n        if (typeof value !== 'string' && value !== null) {\n          return;\n        }\n        if (value && (value.match(/^\\d{4}\\-\\d{2}\\-\\d{2}(T| )\\d{2}:\\d{2}(:\\d{2}|)$/) === null || isNaN(new Date(value)))) {\n          return;\n        }\n        this._value = value;\n        if (this._control) {\n          this._control.val(this._value === null ? '' : this._value);\n        }\n      }\n\n      /**\n       * Получение значения\n       * @returns {string}\n       */\n    }, {\n      key: \"getValue\",\n      value: function getValue() {\n        if (this._control) {\n          var value = this._control.val();\n          return typeof value !== 'string' || value === '' ? null : value;\n        }\n        return this._value;\n      }\n\n      /**\n       * Фильтрация данных\n       * @returns {string}              fieldValue\n       * @returns {Array|string|number} searchValue\n       * @returns {boolean}\n       */\n    }, {\n      key: \"filter\",\n      value: function filter(fieldValue, searchValue) {\n        if (['string', 'number'].indexOf(_typeof(fieldValue)) < 0 || ['string', 'number'].indexOf(_typeof(searchValue)) < 0) {\n          return false;\n        }\n        return fieldValue.toString() === searchValue.toString();\n      }\n\n      /**\n       * Формирование контента\n       * @returns {jQuery}\n       */\n    }, {\n      key: \"render\",\n      value: function render() {\n        if (!TableUtils.isObject(this._options.attr)) {\n          this._options.attr = {};\n        }\n        if (this._options.hasOwnProperty('width') && TableUtils.isNumeric(this._options.width)) {\n          if (this._options.attr.hasOwnProperty('style')) {\n            this._options.attr['style'] += ';width:' + this._options.width + 'px';\n          } else {\n            this._options.attr['style'] = 'width:' + this._options.width + 'px';\n          }\n        }\n        this._options.attr['value'] = typeof this._value === 'string' || typeof this._value === 'number' ? this._value : '';\n        if (this._options.attr.hasOwnProperty('type')) {\n          delete this._options.attr.type;\n        }\n        var attributes = [];\n        var table = this._table;\n        $.each(this._options.attr, function (name, value) {\n          if (['string', 'number'].indexOf(_typeof(value)) >= 0) {\n            attributes.push(name + '=\"' + value + '\"');\n          }\n        });\n        this._control = $(TableUtils.render(tpl['search/datetime.html'], {\n          attr: attributes.length > 0 ? ' ' + attributes.join(' ') : ''\n        }));\n        this._control.keyup(function (e) {\n          if (e.key === 'Enter' || e.keyCode === 13) {\n            table.searchRecords();\n            var container = TableElements.getSearchContainer(table.getId());\n            container.fadeOut('fast');\n          }\n        });\n        return this._control;\n      }\n    }]);\n  }(Search);\n\n  var SearchDateRange = /*#__PURE__*/function (_Search) {\n    /**\n     * Инициализация\n     * @param {TableInstance} table\n     * @param {Object}              options\n     */\n    function SearchDateRange(table, options) {\n      var _this;\n      _classCallCheck(this, SearchDateRange);\n      options = $.extend(true, {\n        id: null,\n        type: 'date_range',\n        field: null,\n        label: null,\n        value: null,\n        width: 200,\n        attr: {\n          \"class\": \"form-control d-inline-block\"\n        }\n      }, options);\n      _this = _callSuper(this, SearchDateRange, [table, options]);\n      if (_this._options.value !== null) {\n        _this.setValue(_this._options.value);\n      }\n      return _this;\n    }\n\n    /**\n     * Установка значения\n     * @param {Object} value\n     */\n    _inherits(SearchDateRange, _Search);\n    return _createClass(SearchDateRange, [{\n      key: \"setValue\",\n      value: function setValue(value) {\n        if (value) {\n          if (!TableUtils.isObject(value)) {\n            return;\n          }\n          var dateStart = null;\n          var dateEnd = null;\n          if (value.hasOwnProperty('start') && typeof value.start === 'string' && value.start.match(/^\\d{4}\\-\\d{2}\\-\\d{2}$/) === null && isNaN(new Date(value.start))) {\n            dateStart = value.start;\n          }\n          if (value.hasOwnProperty('end') && typeof value.end === 'string' && value.end.match(/^\\d{4}\\-\\d{2}\\-\\d{2}$/) === null && isNaN(new Date(value.end))) {\n            dateEnd = value.end;\n          }\n          if (dateStart === null && dateEnd === null) {\n            this._value = null;\n          } else {\n            this._value = {\n              start: dateStart,\n              end: dateEnd\n            };\n          }\n        } else {\n          this._value = null;\n        }\n        if (this._control) {\n          var inputStart = this._control.parent().find('input.date-start');\n          var inputEnd = this._control.parent().find('input.date-end');\n          if (this._value === null) {\n            inputStart.val('');\n            inputEnd.val('');\n          } else if (TableUtils.isObject(this._value)) {\n            inputStart.val(_typeof(this._value.start) !== null ? this._value.start : '');\n            inputEnd.val(_typeof(this._value.end) !== null ? this._value.end : '');\n          }\n        }\n      }\n\n      /**\n       * Получение значения\n       * @returns {Object|null}\n       */\n    }, {\n      key: \"getValue\",\n      value: function getValue() {\n        if (this._control) {\n          var inputStart = this._control.parent().find('input.date-start');\n          var inputEnd = this._control.parent().find('input.date-end');\n          if (inputStart[0] && inputEnd[0]) {\n            var valueStart = inputStart.val();\n            var valueEnd = inputEnd.val();\n            if (typeof valueStart === 'string' && valueStart !== '' || typeof valueEnd === 'string' && valueEnd !== '') {\n              return {\n                start: valueStart !== '' ? valueStart : null,\n                end: valueEnd !== '' ? valueEnd : null\n              };\n            }\n          }\n          return null;\n        }\n        return this._value;\n      }\n\n      /**\n       * Фильтрация данных\n       * @returns {string} fieldValue\n       * @returns {Object} searchValue\n       * @returns {boolean}\n       */\n    }, {\n      key: \"filter\",\n      value: function filter(fieldValue, searchValue) {\n        if (['string', 'number'].indexOf(_typeof(fieldValue)) < 0 || !TableUtils.isObject(searchValue) || typeof searchValue.start !== 'string' && typeof searchValue.end !== 'string') {\n          return false;\n        }\n        var issetStart = ['string', 'number'].indexOf(_typeof(searchValue.start)) >= 0;\n        var issetEnd = ['string', 'number'].indexOf(_typeof(searchValue.end)) >= 0;\n        if (issetStart && issetEnd) {\n          return fieldValue >= searchValue.start && fieldValue <= searchValue.end;\n        } else if (issetStart) {\n          return fieldValue >= searchValue.start;\n        } else {\n          return fieldValue <= searchValue.end;\n        }\n      }\n\n      /**\n       * Формирование контента\n       * @returns {string}\n       */\n    }, {\n      key: \"render\",\n      value: function render() {\n        var options = this.getOptions();\n        if (!TableUtils.isObject(options.attr)) {\n          options.attr = {};\n        }\n        if (options.hasOwnProperty('width') && TableUtils.isNumeric(options.width)) {\n          if (options.attr.hasOwnProperty('style')) {\n            options.attr['style'] += ';width:' + options.width + 'px';\n          } else {\n            options.attr['style'] = 'width:' + options.width + 'px';\n          }\n        }\n        if (options.attr.hasOwnProperty('type')) {\n          delete options.attr.type;\n        }\n        if (options.attr.hasOwnProperty('value')) {\n          delete options.attr.value;\n        }\n        var startAttr = [];\n        var startEnd = [];\n        $.each(options.attr, function (name, value) {\n          if (['name', 'value', 'class'].indexOf(name) >= 0 || ['string', 'number'].indexOf(_typeof(value)) < 0) {\n            return;\n          }\n          startAttr.push(name + '=\"' + value + '\"');\n          startEnd.push(name + '=\"' + value + '\"');\n        });\n        if (options.attr.hasOwnProperty('class') && ['string', 'number'].indexOf(_typeof(options.attr[\"class\"])) >= 0) {\n          startAttr.push('class=\"' + options.attr[\"class\"] + ' date-start\"');\n          startEnd.push('class=\"' + options.attr[\"class\"] + ' date-end\"');\n        } else {\n          startAttr.push('class=\"date-start\"');\n          startEnd.push('class=\"date-end\"');\n        }\n        startAttr.push('value=\"' + (this._value ? this._value.start : '') + '\"');\n        startEnd.push('value=\"' + (this._value ? this._value.end : '') + '\"');\n        var control = $(TableUtils.render(tpl['search/date_range.html'], {\n          startAttr: startAttr.length > 0 ? ' ' + startAttr.join(' ') : '',\n          endAttr: startEnd.length > 0 ? ' ' + startEnd.join(' ') : ''\n        }));\n        $('input.date-start', control).change(function () {\n          var dateEnd = $('input.date-end', control).attr('min', $(this).val());\n          if (\"showPicker\" in HTMLInputElement.prototype) {\n            $(dateEnd)[0].showPicker();\n          }\n        });\n        $('input.date-end', control).change(function () {\n          $('input.date-start', control).attr('max', $(this).val());\n        });\n        this._control = control;\n        return this._control;\n      }\n    }]);\n  }(Search);\n\n  var SearchDatetimeRange = /*#__PURE__*/function (_Search) {\n    /**\n     * Инициализация\n     * @param {TableInstance} table\n     * @param {Object}              options\n     */\n    function SearchDatetimeRange(table, options) {\n      var _this;\n      _classCallCheck(this, SearchDatetimeRange);\n      options = $.extend(true, {\n        id: null,\n        type: 'datetime_range',\n        field: null,\n        label: null,\n        value: null,\n        width: 200,\n        attr: {\n          \"class\": \"form-control d-inline-block\"\n        }\n      }, options);\n      _this = _callSuper(this, SearchDatetimeRange, [table, options]);\n      if (_this._options.value !== null) {\n        _this.setValue(_this._options.value);\n      }\n      return _this;\n    }\n\n    /**\n     * Установка значения\n     * @param {Object} value\n     */\n    _inherits(SearchDatetimeRange, _Search);\n    return _createClass(SearchDatetimeRange, [{\n      key: \"setValue\",\n      value: function setValue(value) {\n        if (value) {\n          if (!TableUtils.isObject(value)) {\n            return;\n          }\n          var dateStart = null;\n          var dateEnd = null;\n          if (value.hasOwnProperty('start') && typeof value.start === 'string' && value.start.match(/^\\d{4}\\-\\d{2}\\-\\d{2} \\d{2}:\\d{2}:\\d{2}$/) === null && isNaN(new Date(value.start))) {\n            dateStart = value.start;\n          }\n          if (value.hasOwnProperty('end') && typeof value.end === 'string' && value.end.match(/^\\d{4}\\-\\d{2}\\-\\d{2} \\d{2}:\\d{2}:\\d{2}$/) === null && isNaN(new Date(value.end))) {\n            dateEnd = value.end;\n          }\n          if (dateStart === null && dateEnd === null) {\n            this._value = null;\n          } else {\n            this._value = {\n              start: dateStart,\n              end: dateEnd\n            };\n          }\n        } else {\n          this._value = null;\n        }\n        if (this._control) {\n          var inputStart = this._control.parent().find('input.date-start');\n          var inputEnd = this._control.parent().find('input.date-end');\n          if (this._value === null) {\n            inputStart.val('');\n            inputEnd.val('');\n          } else if (TableUtils.isObject(this._value)) {\n            inputStart.val(_typeof(this._value.start) !== null ? this._value.start : '');\n            inputEnd.val(_typeof(this._value.end) !== null ? this._value.end : '');\n          }\n        }\n      }\n\n      /**\n       * Получение значения\n       * @returns {Object|null}\n       */\n    }, {\n      key: \"getValue\",\n      value: function getValue() {\n        if (this._control) {\n          var inputStart = this._control.parent().find('input.date-start');\n          var inputEnd = this._control.parent().find('input.date-end');\n          if (inputStart[0] && inputEnd[0]) {\n            var valueStart = inputStart.val();\n            var valueEnd = inputEnd.val();\n            if (typeof valueStart === 'string' && valueStart !== '' || typeof valueEnd === 'string' && valueEnd !== '') {\n              return {\n                start: valueStart !== '' ? valueStart : null,\n                end: valueEnd !== '' ? valueEnd : null\n              };\n            }\n          }\n          return null;\n        }\n        return this._value;\n      }\n\n      /**\n       * Фильтрация данных\n       * @returns {string}              fieldValue\n       * @returns {Array|string|number} searchValue\n       * @returns {boolean}\n       */\n    }, {\n      key: \"filter\",\n      value: function filter(fieldValue, searchValue) {\n        if (['string', 'number'].indexOf(_typeof(fieldValue)) < 0 || !TableUtils.isObject(searchValue) || typeof searchValue.start !== 'string' && typeof searchValue.end !== 'string') {\n          return false;\n        }\n        var issetStart = ['string', 'number'].indexOf(_typeof(searchValue.start)) >= 0;\n        var issetEnd = ['string', 'number'].indexOf(_typeof(searchValue.end)) >= 0;\n        if (issetStart && issetEnd) {\n          return fieldValue >= searchValue.start && fieldValue <= searchValue.end;\n        } else if (issetStart) {\n          return fieldValue >= searchValue.start;\n        } else {\n          return fieldValue <= searchValue.end;\n        }\n      }\n\n      /**\n       * Формирование контента\n       * @returns {string}\n       */\n    }, {\n      key: \"render\",\n      value: function render() {\n        if (!TableUtils.isObject(this._options.attr)) {\n          this._options.attr = {};\n        }\n        if (this._options.hasOwnProperty('width') && TableUtils.isNumeric(this._options.width)) {\n          if (this._options.attr.hasOwnProperty('style')) {\n            this._options.attr['style'] += ';width:' + this._options.width + 'px';\n          } else {\n            this._options.attr['style'] = 'width:' + this._options.width + 'px';\n          }\n        }\n        if (this._options.attr.hasOwnProperty('type')) {\n          delete this._options.attr.type;\n        }\n        if (this._options.attr.hasOwnProperty('value')) {\n          delete this._options.attr.value;\n        }\n        var startAttr = [];\n        var startEnd = [];\n        this._table;\n        $.each(this._options.attr, function (name, value) {\n          if (['name', 'value', 'class'].indexOf(name) >= 0 || ['string', 'number'].indexOf(_typeof(value)) < 0) {\n            return;\n          }\n          startAttr.push(name + '=\"' + value + '\"');\n          startEnd.push(name + '=\"' + value + '\"');\n        });\n        if (this._options.attr.hasOwnProperty('class') && ['string', 'number'].indexOf(_typeof(this._options.attr[\"class\"])) >= 0) {\n          startAttr.push('class=\"' + this._options.attr[\"class\"] + ' date-start\"');\n          startEnd.push('class=\"' + this._options.attr[\"class\"] + ' date-end\"');\n        } else {\n          startAttr.push('class=\"date-start\"');\n          startEnd.push('class=\"date-end\"');\n        }\n        startAttr.push('value=\"' + (this._value ? this._value.start : '') + '\"');\n        startEnd.push('value=\"' + (this._value ? this._value.end : '') + '\"');\n        var control = $(TableUtils.render(tpl['search/datetime_range.html'], {\n          startAttr: startAttr.length > 0 ? ' ' + startAttr.join(' ') : '',\n          endAttr: startEnd.length > 0 ? ' ' + startEnd.join(' ') : ''\n        }));\n        $('input.date-start', control).change(function () {\n          var dateEnd = $('input.date-end', control).attr('min', $(this).val());\n          if (\"showPicker\" in HTMLInputElement.prototype) {\n            $(dateEnd)[0].showPicker();\n          }\n        });\n        $('input.date-end', control).change(function () {\n          $('input.date-start', control).attr('max', $(this).val());\n        });\n        this._control = control;\n        return this._control;\n      }\n    }]);\n  }(Search);\n\n  var SearchCheckbox = /*#__PURE__*/function (_Search) {\n    /**\n     * Инициализация\n     * @param {TableInstance} table\n     * @param {Object}              options\n     */\n    function SearchCheckbox(table, options) {\n      var _this;\n      _classCallCheck(this, SearchCheckbox);\n      options = $.extend(true, {\n        id: null,\n        type: 'checkbox',\n        field: null,\n        label: null,\n        value: null,\n        options: []\n      }, options);\n      _this = _callSuper(this, SearchCheckbox, [table, options]);\n      if (_this._options.value !== null) {\n        _this.setValue(_this._options.value);\n      }\n      return _this;\n    }\n\n    /**\n     * Установка значения\n     * @param {Array|null} value\n     */\n    _inherits(SearchCheckbox, _Search);\n    return _createClass(SearchCheckbox, [{\n      key: \"setValue\",\n      value: function setValue(value) {\n        if (['string', 'number', 'object'].indexOf(_typeof(value)) < 0) {\n          return;\n        }\n        if (_typeof(value) === 'object') {\n          if (Array.isArray(value)) {\n            var items = [];\n            value.map(function (item) {\n              if (['string', 'number'].indexOf(_typeof(item)) >= 0) {\n                items.push(item);\n              }\n            });\n            this._value = items;\n          } else {\n            this._value = null;\n          }\n        } else {\n          this._value = [value];\n        }\n        if (this._control) {\n          $('input:checked', this._control).prop('checked', false);\n          if (Array.isArray(this._value)) {\n            $.each(this._value, function (key, value) {\n              $('input[value=\"' + value + '\"]', this._control).prop('checked', true);\n            });\n          }\n        }\n      }\n\n      /**\n       * Получение значения\n       * @returns {Array|null}\n       */\n    }, {\n      key: \"getValue\",\n      value: function getValue() {\n        if (this._control) {\n          var inputs = $('input:checked', this._control);\n          var items = [];\n          $.each(inputs, function (key, input) {\n            var value = $(input).attr('value');\n            if (['string', 'number'].indexOf(_typeof(value)) >= 0 && value !== '') {\n              items.push(value);\n            }\n          });\n          return items.length > 0 ? items : null;\n        } else {\n          return this._value;\n        }\n      }\n\n      /**\n       * Фильтрация данных\n       * @returns {string} fieldValue\n       * @returns {Array}  searchValue\n       * @returns {boolean}\n       */\n    }, {\n      key: \"filter\",\n      value: function filter(fieldValue, searchValue) {\n        if (['string', 'number'].indexOf(_typeof(fieldValue)) < 0 || !Array.isArray(searchValue)) {\n          return false;\n        }\n        return searchValue.indexOf(fieldValue) >= 0;\n      }\n\n      /**\n       * Формирование контента\n       * @returns {string}\n       */\n    }, {\n      key: \"render\",\n      value: function render() {\n        var that = this;\n        var options = [];\n        $.each(this._options.options, function (key, option) {\n          if (['string', 'numeric'].indexOf(_typeof(option)) >= 0) {\n            var checked = Array.isArray(that._value) ? that._value.indexOf(key) >= 0 : false;\n            options.push({\n              text: option,\n              value: key,\n              checked: checked\n            });\n          } else {\n            if (!TableUtils.isObject(option) || !option.hasOwnProperty('value') || ['string', 'numeric'].indexOf(_typeof(option.value)) === -1) {\n              return;\n            }\n            var _checked = Array.isArray(that._value) ? that._value.indexOf(option.value) >= 0 : false;\n            var text = option.hasOwnProperty('text') ? option.text : option.value;\n            options.push({\n              text: text,\n              value: option.value,\n              checked: _checked\n            });\n          }\n        });\n        this._control = $(TableUtils.render(tpl['search/checkbox.html'], {\n          options: options\n        }));\n        return this._control;\n      }\n    }]);\n  }(Search);\n\n  var SearchCheckboxBtn = /*#__PURE__*/function (_Search) {\n    /**\n     * Инициализация\n     * @param {TableInstance} table\n     * @param {Object}              options\n     */\n    function SearchCheckboxBtn(table, options) {\n      var _this;\n      _classCallCheck(this, SearchCheckboxBtn);\n      options = $.extend(true, {\n        id: null,\n        type: 'checkboxBtn',\n        field: null,\n        label: null,\n        optionsClass: 'btn btn-outline-secondary',\n        value: null,\n        options: []\n      }, options);\n      _this = _callSuper(this, SearchCheckboxBtn, [table, options]);\n      if (_this._options.value !== null) {\n        _this.setValue(_this._options.value);\n      }\n      return _this;\n    }\n\n    /**\n     * Установка значения\n     * @param {Array|null} value\n     */\n    _inherits(SearchCheckboxBtn, _Search);\n    return _createClass(SearchCheckboxBtn, [{\n      key: \"setValue\",\n      value: function setValue(value) {\n        if (['string', 'number', 'object'].indexOf(_typeof(value)) < 0) {\n          return;\n        }\n        if (_typeof(value) === 'object') {\n          if (Array.isArray(value)) {\n            var items = [];\n            value.map(function (item) {\n              if (['string', 'number'].indexOf(_typeof(item)) >= 0) {\n                items.push(item);\n              }\n            });\n            this._value = items;\n          } else {\n            this._value = null;\n          }\n        } else {\n          this._value = [value];\n        }\n        if (this._control) {\n          $('input:checked', this._control).prop('checked', false);\n          if (Array.isArray(this._value)) {\n            this._value.map(function (value) {\n              $('input[value=\"' + value + '\"]', this._control).prop('checked', true);\n            });\n          }\n        }\n      }\n\n      /**\n       * Получение значения\n       * @returns {Array|null}\n       */\n    }, {\n      key: \"getValue\",\n      value: function getValue() {\n        if (this._control) {\n          var inputs = $('input:checked', this._control);\n          var items = [];\n          $.each(inputs, function (key, input) {\n            var value = $(input).attr('value');\n            if (['string', 'number'].indexOf(_typeof(value)) >= 0 && value !== '') {\n              items.push(value);\n            }\n          });\n          return items.length > 0 ? items : null;\n        } else {\n          return this._value;\n        }\n      }\n\n      /**\n       * Фильтрация данных\n       * @returns {string} fieldValue\n       * @returns {Array}  searchValue\n       * @returns {boolean}\n       */\n    }, {\n      key: \"filter\",\n      value: function filter(fieldValue, searchValue) {\n        if (['string', 'number'].indexOf(_typeof(fieldValue)) < 0 || !Array.isArray(searchValue)) {\n          return false;\n        }\n        return searchValue.indexOf(fieldValue) >= 0;\n      }\n\n      /**\n       * Формирование контента\n       * @returns {jQuery}\n       */\n    }, {\n      key: \"render\",\n      value: function render() {\n        var that = this;\n        var options = [];\n        $.each(this._options.options, function (key, option) {\n          if (['string', 'numeric'].indexOf(_typeof(option)) >= 0) {\n            var checked = Array.isArray(that._value) ? that._value.indexOf(key) >= 0 : false;\n            options.push({\n              text: option,\n              value: key,\n              checked: checked,\n              optionsClass: that._options.optionsClass,\n              hash: TableUtils.hashCode()\n            });\n          } else {\n            if (!TableUtils.isObject(option) || !option.hasOwnProperty('value') || ['string', 'numeric'].indexOf(_typeof(option.value)) === -1) {\n              return;\n            }\n            var _checked = Array.isArray(that._value) ? that._value.indexOf(option.value) >= 0 : false;\n            var text = option.hasOwnProperty('text') ? option.text : option.value;\n            options.push({\n              text: text,\n              value: option.value,\n              checked: _checked,\n              optionsClass: that._options.optionsClass,\n              hash: TableUtils.hashCode()\n            });\n          }\n        });\n        this._control = $(TableUtils.render(tpl['search/checkbox-btn.html'], {\n          options: options\n        }));\n        return this._control;\n      }\n    }]);\n  }(Search);\n\n  var SearchRadio = /*#__PURE__*/function (_Search) {\n    /**\n     * Инициализация\n     * @param {TableInstance} table\n     * @param {Object}              options\n     */\n    function SearchRadio(table, options) {\n      var _this;\n      _classCallCheck(this, SearchRadio);\n      options = $.extend(true, {\n        id: null,\n        type: 'radio',\n        field: null,\n        label: null,\n        value: null,\n        options: []\n      }, options);\n      _this = _callSuper(this, SearchRadio, [table, options]);\n      if (_this._options.value !== null) {\n        _this.setValue(_this._options.value);\n      }\n      return _this;\n    }\n\n    /**\n     * Установка значения\n     * @param {string} value\n     */\n    _inherits(SearchRadio, _Search);\n    return _createClass(SearchRadio, [{\n      key: \"setValue\",\n      value: function setValue(value) {\n        if (value !== null && typeof value !== 'string' && typeof value !== 'number') {\n          return;\n        }\n        this._value = value;\n        if (this._control) {\n          $('input', this._control).prop('checked', false);\n          if (this._value !== null) {\n            $('input[value=\"' + this._value + '\"]', this._control).prop('checked', true);\n          } else {\n            $('input.coreui-table__all', this._control).prop('checked', true);\n          }\n        }\n      }\n\n      /**\n       * Получение значения\n       * @returns {string|null}\n       */\n    }, {\n      key: \"getValue\",\n      value: function getValue() {\n        if (this._control) {\n          var input = $('input:checked', this._control);\n          if (input && input[0]) {\n            var value = input.val();\n            return value === '' ? null : value;\n          } else {\n            return null;\n          }\n        } else {\n          return this._value;\n        }\n      }\n\n      /**\n       * Фильтрация данных\n       * @returns {string}              fieldValue\n       * @returns {Array|string|number} searchValue\n       * @returns {boolean}\n       */\n    }, {\n      key: \"filter\",\n      value: function filter(fieldValue, searchValue) {\n        if (['string', 'number'].indexOf(_typeof(fieldValue)) < 0 || ['string', 'number'].indexOf(_typeof(searchValue)) < 0) {\n          return false;\n        }\n        return fieldValue.toString().toLowerCase() === searchValue.toString().toLowerCase();\n      }\n\n      /**\n       * Формирование контента\n       * @returns {jQuery}\n       */\n    }, {\n      key: \"render\",\n      value: function render() {\n        var that = this;\n        var checkedAll = true;\n        var options = [];\n        $.each(this._options.options, function (key, option) {\n          if (['string', 'numeric'].indexOf(_typeof(option)) >= 0) {\n            var checked = key == that._value;\n            if (checked) {\n              checkedAll = false;\n            }\n            options.push({\n              text: option,\n              value: key,\n              checked: checked\n            });\n          } else {\n            if (!TableUtils.isObject(option) || !option.hasOwnProperty('value') || ['string', 'numeric'].indexOf(_typeof(option.value)) === -1) {\n              return;\n            }\n            var _checked = option.value == that._value;\n            var text = option.hasOwnProperty('text') ? option.text : option.value;\n            if (_checked) {\n              checkedAll = false;\n            }\n            options.push({\n              text: text,\n              value: option.value,\n              checked: _checked\n            });\n          }\n        });\n        this._control = $(TableUtils.render(tpl['search/radio.html'], {\n          options: options,\n          checkedAll: checkedAll,\n          field: TableUtils.hashCode(),\n          lang: this._table.getLang()\n        }));\n        return this._control;\n      }\n    }]);\n  }(Search);\n\n  var SearchRadioBtn = /*#__PURE__*/function (_Search) {\n    /**\n     * Инициализация\n     * @param {TableInstance} table\n     * @param {Object}              options\n     */\n    function SearchRadioBtn(table, options) {\n      var _this;\n      _classCallCheck(this, SearchRadioBtn);\n      options = $.extend(true, {\n        id: null,\n        type: 'radioBtn',\n        field: null,\n        optionsClass: 'btn btn-outline-secondary',\n        label: null,\n        value: null,\n        options: []\n      }, options);\n      _this = _callSuper(this, SearchRadioBtn, [table, options]);\n      if (_this._options.value !== null) {\n        _this.setValue(_this._options.value);\n      }\n      return _this;\n    }\n\n    /**\n     * Установка значения\n     * @param {string|number} value\n     */\n    _inherits(SearchRadioBtn, _Search);\n    return _createClass(SearchRadioBtn, [{\n      key: \"setValue\",\n      value: function setValue(value) {\n        if (value !== null && typeof value !== 'string' && typeof value !== 'number') {\n          return;\n        }\n        this._value = value;\n        if (this._control) {\n          $('input', this._control).prop('checked', false);\n          if (this._value !== null) {\n            $('input[value=\"' + this._value + '\"]', this._control).prop('checked', true);\n          } else {\n            $('input.coreui-table__all', this._control).prop('checked', true);\n          }\n        }\n      }\n\n      /**\n       * Получение значения\n       * @returns {string|null}\n       */\n    }, {\n      key: \"getValue\",\n      value: function getValue() {\n        if (this._control) {\n          var input = $('input:checked', this._control);\n          if (input && input[0]) {\n            var value = input.val();\n            return value === '' ? null : value;\n          } else {\n            return null;\n          }\n        } else {\n          return this._value;\n        }\n      }\n\n      /**\n       * Фильтрация данных\n       * @returns {string}              fieldValue\n       * @returns {Array|string|number} searchValue\n       * @returns {boolean}\n       */\n    }, {\n      key: \"filter\",\n      value: function filter(fieldValue, searchValue) {\n        if (['string', 'number'].indexOf(_typeof(fieldValue)) < 0 || ['string', 'number'].indexOf(_typeof(searchValue)) < 0) {\n          return false;\n        }\n        return fieldValue.toString().toLowerCase() === searchValue.toString().toLowerCase();\n      }\n\n      /**\n       * Формирование контента\n       * @returns {string}\n       */\n    }, {\n      key: \"render\",\n      value: function render() {\n        var that = this;\n        var checkedAll = true;\n        var options = [];\n        $.each(this._options.options, function (key, option) {\n          if (['string', 'numeric'].indexOf(_typeof(option)) >= 0) {\n            var checked = key == that._value;\n            if (checked) {\n              checkedAll = false;\n            }\n            options.push({\n              text: option,\n              value: key,\n              checked: checked,\n              optionsClass: that._options.optionsClass,\n              hash: TableUtils.hashCode()\n            });\n          } else {\n            if (!TableUtils.isObject(option) || !option.hasOwnProperty('value') || ['string', 'numeric'].indexOf(_typeof(option.value)) === -1) {\n              return;\n            }\n            var _checked = option.value == that._value;\n            var text = option.hasOwnProperty('text') ? option.text : option.value;\n            if (_checked) {\n              checkedAll = false;\n            }\n            options.push({\n              text: text,\n              value: option.value,\n              checked: _checked,\n              optionsClass: that._options.optionsClass,\n              hash: TableUtils.hashCode()\n            });\n          }\n        });\n        this._control = $(TableUtils.render(tpl['search/radio-btn.html'], {\n          options: options,\n          checkedAll: checkedAll,\n          optionAllHash: TableUtils.hashCode(),\n          optionOptionsClass: that._options.optionsClass,\n          field: TableUtils.hashCode(),\n          lang: this._table.getLang()\n        }));\n        return this._control;\n      }\n    }]);\n  }(Search);\n\n  var SearchSelect = /*#__PURE__*/function (_Search) {\n    /**\n     * Инициализация\n     * @param {TableInstance} table\n     * @param {Object}              options\n     */\n    function SearchSelect(table, options) {\n      var _this;\n      _classCallCheck(this, SearchSelect);\n      options = $.extend(true, {\n        id: null,\n        type: 'select',\n        field: null,\n        label: null,\n        width: null,\n        value: null,\n        attr: {\n          \"class\": 'form-select d-inline-block'\n        },\n        options: []\n      }, options);\n      _this = _callSuper(this, SearchSelect, [table, options]);\n      if (_this._options.value !== null) {\n        _this.setValue(_this._options.value);\n      }\n      return _this;\n    }\n\n    /**\n     * Установка значения\n     * @param {string|number|Array} value\n     */\n    _inherits(SearchSelect, _Search);\n    return _createClass(SearchSelect, [{\n      key: \"setValue\",\n      value: function setValue(value) {\n        if (['string', 'number', 'object'].indexOf(_typeof(value)) < 0) {\n          return;\n        }\n        if (_typeof(value) === 'object') {\n          if (Array.isArray(value)) {\n            var items = [];\n            value.map(function (item) {\n              if (['string', 'number'].indexOf(_typeof(item)) >= 0) {\n                items.push(item);\n              }\n            });\n            this._value = items;\n          } else {\n            this._value = null;\n          }\n        } else {\n          this._value = [value];\n        }\n        if (this._control) {\n          $('option:selected', this._control).prop('selected', false);\n          if (Array.isArray(this._value)) {\n            this._value.map(function (value) {\n              $('option[value=\"' + value + '\"]', this._control).prop('selected', true);\n            });\n          }\n        }\n      }\n\n      /**\n       * Получение значения\n       * @returns {Array|string|null}\n       */\n    }, {\n      key: \"getValue\",\n      value: function getValue() {\n        if (this._control) {\n          var isMultiple = !!this._control.attr('multiple');\n          var options = $('option:selected', this._control);\n          var items = [];\n          $.each(options, function (key, option) {\n            var value = $(option).attr('value');\n            if (['string', 'number'].indexOf(_typeof(value)) >= 0 && value !== '') {\n              items.push(value);\n            }\n          });\n          return items.length > 0 ? isMultiple ? items : items[0] : null;\n        } else {\n          return this._value;\n        }\n      }\n\n      /**\n       * Фильтрация данных\n       * @returns {string}              fieldValue\n       * @returns {Array|string|number} searchValue\n       * @returns {boolean}\n       */\n    }, {\n      key: \"filter\",\n      value: function filter(fieldValue, searchValue) {\n        if (['string', 'number'].indexOf(_typeof(fieldValue)) < 0 || ['string', 'number'].indexOf(_typeof(searchValue)) < 0 && !Array.isArray(searchValue)) {\n          return false;\n        }\n        if (Array.isArray(searchValue)) {\n          return searchValue.indexOf(fieldValue) >= 0;\n        } else {\n          return fieldValue.toString().toLowerCase() === searchValue.toString().toLowerCase();\n        }\n      }\n\n      /**\n       * Формирование контента\n       * @returns {string}\n       */\n    }, {\n      key: \"render\",\n      value: function render() {\n        var that = this;\n        var options = this.getOptions();\n        var selectOptions = [];\n        var attributes = [];\n        if (!options.hasOwnProperty('attr') || !TableUtils.isObject(options.attr)) {\n          options.attr = {};\n        }\n        if (options.field) {\n          options.attr.name = this._options.field;\n        }\n        if (options.width) {\n          options.attr = TableUtils.mergeAttr({\n            style: 'width:' + options.width + 'px'\n          }, options.attr);\n        }\n        if (options.hasOwnProperty('options') && _typeof(options.options) === 'object' && options.options !== null) {\n          $.each(options.options, function (key, option) {\n            if (typeof option === 'string' || typeof option === 'number') {\n              selectOptions.push(that._buildOption({\n                type: 'option',\n                value: key,\n                text: option\n              }));\n            } else if (TableUtils.isObject(option)) {\n              var type = option.hasOwnProperty('type') && typeof option.type === 'string' ? option.type : 'option';\n              if (type === 'group') {\n                var renderAttr = [];\n                var groupAttr = {};\n                var groupOptions = [];\n                if (option.hasOwnProperty('attr') && TableUtils.isObject(option.attr)) {\n                  groupAttr = option.attr;\n                }\n                if (option.hasOwnProperty('label') && ['string', 'number'].indexOf(_typeof(option.label)) >= 0) {\n                  groupAttr.label = option.label;\n                }\n                $.each(groupAttr, function (name, value) {\n                  renderAttr.push(name + '=\"' + value + '\"');\n                });\n                if (Array.isArray(option.options)) {\n                  $.each(option.options, function (key, groupOption) {\n                    groupOptions.push(that._buildOption(groupOption));\n                  });\n                }\n                selectOptions.push({\n                  type: 'group',\n                  attr: renderAttr.length > 0 ? ' ' + renderAttr.join(' ') : '',\n                  options: groupOptions\n                });\n              } else {\n                selectOptions.push(that._buildOption(option));\n              }\n            }\n          });\n        }\n        $.each(options.attr, function (name, value) {\n          attributes.push(name + '=\"' + value + '\"');\n        });\n        this._control = $(TableUtils.render(tpl['search/select.html'], {\n          field: options,\n          value: this._value,\n          attr: attributes.length > 0 ? ' ' + attributes.join(' ') : '',\n          options: selectOptions\n        }));\n        return this._control;\n      }\n\n      /**\n       * Сборка опции\n       * @param option\n       * @return {object}\n       * @private\n       */\n    }, {\n      key: \"_buildOption\",\n      value: function _buildOption(option) {\n        var optionAttr = [];\n        var optionText = option.hasOwnProperty('text') && ['string', 'number'].indexOf(_typeof(option.text)) >= 0 ? option.text : '';\n        $.each(option, function (name, value) {\n          if (name !== 'text') {\n            optionAttr.push(name + '=\"' + value + '\"');\n          }\n        });\n        if (Array.isArray(this._value)) {\n          $.each(this._value, function (key, itemValue) {\n            if (itemValue == option.value) {\n              optionAttr.push('selected=\"selected\"');\n              return false;\n            }\n          });\n        } else if (this._value == option.value) {\n          optionAttr.push('selected=\"selected\"');\n        }\n        return {\n          type: 'option',\n          text: optionText,\n          attr: optionAttr.length > 0 ? ' ' + optionAttr.join(' ') : ''\n        };\n      }\n    }]);\n  }(Search);\n\n  var SearchSwitch = /*#__PURE__*/function (_Search) {\n    /**\n     * Инициализация\n     * @param {TableInstance} table\n     * @param {Object}              options\n     */\n    function SearchSwitch(table, options) {\n      var _this;\n      _classCallCheck(this, SearchSwitch);\n      options = $.extend(true, {\n        id: null,\n        type: 'switch',\n        field: null,\n        value: null,\n        valueY: 1\n      }, options);\n      _this = _callSuper(this, SearchSwitch, [table, options]);\n      if (_this._options.value !== null) {\n        _this.setValue(_this._options.value);\n      }\n      return _this;\n    }\n\n    /**\n     * Установка значения\n     * @param {string|number|null} value\n     */\n    _inherits(SearchSwitch, _Search);\n    return _createClass(SearchSwitch, [{\n      key: \"setValue\",\n      value: function setValue(value) {\n        if (value !== null && typeof value !== 'string' && typeof value !== 'number') {\n          return;\n        }\n        this._value = value;\n        if (this._control) {\n          var valueY = typeof this._options.valueY === 'string' || typeof this._options.valueY === 'number' ? this._options.valueY : '';\n          if (this._value === null) {\n            $('input', this._control).prop('checked', false);\n          } else if (this._value === valueY) {\n            $('input', this._control).prop('checked', true);\n          } else {\n            $('input', this._control).prop('checked', false);\n          }\n        }\n      }\n\n      /**\n       * Получение значения\n       * @returns {string|null}\n       */\n    }, {\n      key: \"getValue\",\n      value: function getValue() {\n        if (this._control) {\n          var value = $('input:checked', this._control).val();\n          return typeof value !== 'string' || value === '' ? null : value;\n        }\n        return this._value;\n      }\n\n      /**\n       * Фильтрация данных\n       * @returns {string}              fieldValue\n       * @returns {Array|string|number} searchValue\n       * @returns {boolean}\n       */\n    }, {\n      key: \"filter\",\n      value: function filter(fieldValue, searchValue) {\n        if (['string', 'number'].indexOf(_typeof(fieldValue)) < 0 || ['string', 'number'].indexOf(_typeof(searchValue)) < 0) {\n          return false;\n        }\n        return fieldValue.toString().toLowerCase() === searchValue.toString().toLowerCase();\n      }\n\n      /**\n       * Формирование контента\n       * @returns {string}\n       */\n    }, {\n      key: \"render\",\n      value: function render() {\n        var options = this.getOptions();\n        var valueY = typeof options.valueY === 'string' || typeof options.valueY === 'number' ? options.valueY : '';\n        this._control = $(TableUtils.render(tpl['search/switch.html'], {\n          id: this._id,\n          valueY: valueY,\n          field: typeof options.field === 'string' ? options.field : '',\n          checked: this._value == valueY\n        }));\n        return this._control;\n      }\n    }]);\n  }(Search);\n\n  var Column = /*#__PURE__*/function () {\n    /**\n     * Инициализация\n     * @param {TableInstance} table\n     * @param {Object}              options\n     */\n    function Column(table, options) {\n      _classCallCheck(this, Column);\n      _defineProperty(this, \"_table\", null);\n      _defineProperty(this, \"_options\", {\n        type: '',\n        field: null,\n        label: null,\n        show: true,\n        showLabel: true,\n        width: null,\n        minWidth: null,\n        maxWidth: null,\n        attr: null,\n        attrHeader: null,\n        render: null\n      });\n      this._table = table;\n      this._options = $.extend(true, this._options, options);\n    }\n\n    /**\n     * Установка видимости колонки\n     * @param {boolean} isShow\n     */\n    return _createClass(Column, [{\n      key: \"setShow\",\n      value: function setShow(isShow) {\n        this._options.show = !!isShow;\n      }\n\n      /**\n       * Видимости колонки\n       */\n    }, {\n      key: \"isShow\",\n      value: function isShow() {\n        return !!this._options.show;\n      }\n\n      /**\n       * Получение параметров\n       * @returns {object}\n       */\n    }, {\n      key: \"getOptions\",\n      value: function getOptions() {\n        return $.extend({}, this._options);\n      }\n\n      /**\n       * Получение имени поля\n       * @returns {string|null}\n       */\n    }, {\n      key: \"getField\",\n      value: function getField() {\n        return typeof this._options.field === 'string' ? this._options.field : null;\n      }\n\n      /**\n       * Формирование контента\n       * @param {*}      content\n       * @param {object} record\n       * @returns {string}\n       */\n    }, {\n      key: \"render\",\n      value: function render(content, record) {}\n    }]);\n  }();\n\n  var ColumnsDate = /*#__PURE__*/function (_Column) {\n    /**\n     * Инициализация\n     * @param {TableInstance} table\n     * @param {Object}              options\n     */\n    function ColumnsDate(table, options) {\n      _classCallCheck(this, ColumnsDate);\n      options = $.extend(true, {\n        type: 'date',\n        field: null,\n        label: null,\n        show: true,\n        width: null,\n        format: 'DD.MM.YYYY',\n        attr: {},\n        attrHeader: {},\n        render: null\n      }, options);\n      return _callSuper(this, ColumnsDate, [table, options]);\n    }\n\n    /**\n     * Формирование контента\n     * @param {string} content\n     * @param {object} record\n     * @returns {string}\n     */\n    _inherits(ColumnsDate, _Column);\n    return _createClass(ColumnsDate, [{\n      key: \"render\",\n      value: function render(content, record) {\n        if (typeof content !== 'string') {\n          return '';\n        }\n        try {\n          if (content !== '') {\n            var lang = this._table.getLang();\n            var date = new Date(content);\n            content = this._options.format.replace(/YYYY/g, TableUtils.strPadLeft(date.getFullYear(), 4)).replace(/MMMM/g, lang.monthNames[date.getMonth() + 1]).replace(/MMM/g, lang.monthNamesShort[date.getMonth() + 1]).replace(/MM/g, TableUtils.strPadLeft(date.getMonth() + 1, 2)).replace(/M/g, date.getMonth() + 1).replace(/DD/g, TableUtils.strPadLeft(date.getDate(), 2)).replace(/D/g, date.getDate()).replace(/dddd/g, lang.dayNames[date.getMonth() + 1]).replace(/ddd/g, lang.dayNamesMin[date.getMonth() + 1]);\n          }\n        } catch (e) {\n          content = '';\n        }\n        return content;\n      }\n    }]);\n  }(Column);\n\n  var ColumnsDatetime = /*#__PURE__*/function (_Column) {\n    /**\n     * Инициализация\n     * @param {TableInstance} table\n     * @param {Object}              options\n     */\n    function ColumnsDatetime(table, options) {\n      _classCallCheck(this, ColumnsDatetime);\n      options = $.extend(true, {\n        type: 'datetime',\n        field: null,\n        label: null,\n        show: true,\n        width: null,\n        format: 'DD.MM.YYYY hh:mm:ss',\n        attr: {},\n        attrHeader: {},\n        render: null\n      }, options);\n      return _callSuper(this, ColumnsDatetime, [table, options]);\n    }\n\n    /**\n     * Формирование контента\n     * @param {string} content\n     * @param {object} record\n     * @returns {string}\n     */\n    _inherits(ColumnsDatetime, _Column);\n    return _createClass(ColumnsDatetime, [{\n      key: \"render\",\n      value: function render(content, record) {\n        if (typeof content !== 'string') {\n          return '';\n        }\n        try {\n          if (content !== '') {\n            var lang = this._table.getLang();\n            var date = new Date(content);\n            content = this._options.format.replace(/YYYY/g, TableUtils.strPadLeft(date.getFullYear(), 4)).replace(/MMMM/g, lang.monthNames[date.getMonth() + 1]).replace(/MMM/g, lang.monthNamesShort[date.getMonth() + 1]).replace(/MM/g, TableUtils.strPadLeft(date.getMonth() + 1, 2)).replace(/M/g, date.getMonth() + 1).replace(/DD/g, TableUtils.strPadLeft(date.getDate(), 2)).replace(/D/g, date.getDate()).replace(/dddd/g, lang.dayNames[date.getMonth() + 1]).replace(/ddd/g, lang.dayNamesMin[date.getMonth() + 1]).replace(/hh/g, TableUtils.strPadLeft(date.getHours(), 2)).replace(/mm/g, TableUtils.strPadLeft(date.getMinutes(), 2)).replace(/m/g, date.getMinutes()).replace(/ss/g, TableUtils.strPadLeft(date.getSeconds(), 2)).replace(/s/g, date.getSeconds());\n          }\n        } catch (e) {\n          content = '';\n        }\n        return content;\n      }\n    }]);\n  }(Column);\n\n  var hookCallback;\n  function hooks() {\n    return hookCallback.apply(null, arguments);\n  }\n\n  // This is done to register the method called with moment()\n  // without creating circular dependencies.\n  function setHookCallback(callback) {\n    hookCallback = callback;\n  }\n\n  function isArray(input) {\n    return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';\n  }\n\n  function isObject(input) {\n    // IE8 will treat undefined and null as object if it wasn't for\n    // input != null\n    return input != null && Object.prototype.toString.call(input) === '[object Object]';\n  }\n\n  function hasOwnProp(a, b) {\n    return Object.prototype.hasOwnProperty.call(a, b);\n  }\n\n  function isObjectEmpty(obj) {\n    if (Object.getOwnPropertyNames) {\n      return Object.getOwnPropertyNames(obj).length === 0;\n    } else {\n      var k;\n      for (k in obj) {\n        if (hasOwnProp(obj, k)) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }\n\n  function isUndefined(input) {\n    return input === void 0;\n  }\n\n  function isNumber(input) {\n    return typeof input === 'number' || Object.prototype.toString.call(input) === '[object Number]';\n  }\n\n  function isDate(input) {\n    return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';\n  }\n\n  function map(arr, fn) {\n    var res = [],\n      i,\n      arrLen = arr.length;\n    for (i = 0; i < arrLen; ++i) {\n      res.push(fn(arr[i], i));\n    }\n    return res;\n  }\n\n  function extend(a, b) {\n    for (var i in b) {\n      if (hasOwnProp(b, i)) {\n        a[i] = b[i];\n      }\n    }\n    if (hasOwnProp(b, 'toString')) {\n      a.toString = b.toString;\n    }\n    if (hasOwnProp(b, 'valueOf')) {\n      a.valueOf = b.valueOf;\n    }\n    return a;\n  }\n\n  function createUTC(input, format, locale, strict) {\n    return createLocalOrUTC(input, format, locale, strict, true).utc();\n  }\n\n  function defaultParsingFlags() {\n    // We need to deep clone this object.\n    return {\n      empty: false,\n      unusedTokens: [],\n      unusedInput: [],\n      overflow: -2,\n      charsLeftOver: 0,\n      nullInput: false,\n      invalidEra: null,\n      invalidMonth: null,\n      invalidFormat: false,\n      userInvalidated: false,\n      iso: false,\n      parsedDateParts: [],\n      era: null,\n      meridiem: null,\n      rfc2822: false,\n      weekdayMismatch: false\n    };\n  }\n  function getParsingFlags(m) {\n    if (m._pf == null) {\n      m._pf = defaultParsingFlags();\n    }\n    return m._pf;\n  }\n\n  var some;\n  if (Array.prototype.some) {\n    some = Array.prototype.some;\n  } else {\n    some = function (fun) {\n      var t = Object(this),\n        len = t.length >>> 0,\n        i;\n      for (i = 0; i < len; i++) {\n        if (i in t && fun.call(this, t[i], i, t)) {\n          return true;\n        }\n      }\n      return false;\n    };\n  }\n\n  function isValid$2(m) {\n    var flags = null,\n      parsedParts = false,\n      isNowValid = m._d && !isNaN(m._d.getTime());\n    if (isNowValid) {\n      flags = getParsingFlags(m);\n      parsedParts = some.call(flags.parsedDateParts, function (i) {\n        return i != null;\n      });\n      isNowValid = flags.overflow < 0 && !flags.empty && !flags.invalidEra && !flags.invalidMonth && !flags.invalidWeekday && !flags.weekdayMismatch && !flags.nullInput && !flags.invalidFormat && !flags.userInvalidated && (!flags.meridiem || flags.meridiem && parsedParts);\n      if (m._strict) {\n        isNowValid = isNowValid && flags.charsLeftOver === 0 && flags.unusedTokens.length === 0 && flags.bigHour === undefined;\n      }\n    }\n    if (Object.isFrozen == null || !Object.isFrozen(m)) {\n      m._isValid = isNowValid;\n    } else {\n      return isNowValid;\n    }\n    return m._isValid;\n  }\n  function createInvalid$1(flags) {\n    var m = createUTC(NaN);\n    if (flags != null) {\n      extend(getParsingFlags(m), flags);\n    } else {\n      getParsingFlags(m).userInvalidated = true;\n    }\n    return m;\n  }\n\n  // Plugins that add properties should also add the key here (null value),\n  // so we can properly clone ourselves.\n  var momentProperties = hooks.momentProperties = [],\n    updateInProgress = false;\n  function copyConfig(to, from) {\n    var i,\n      prop,\n      val,\n      momentPropertiesLen = momentProperties.length;\n    if (!isUndefined(from._isAMomentObject)) {\n      to._isAMomentObject = from._isAMomentObject;\n    }\n    if (!isUndefined(from._i)) {\n      to._i = from._i;\n    }\n    if (!isUndefined(from._f)) {\n      to._f = from._f;\n    }\n    if (!isUndefined(from._l)) {\n      to._l = from._l;\n    }\n    if (!isUndefined(from._strict)) {\n      to._strict = from._strict;\n    }\n    if (!isUndefined(from._tzm)) {\n      to._tzm = from._tzm;\n    }\n    if (!isUndefined(from._isUTC)) {\n      to._isUTC = from._isUTC;\n    }\n    if (!isUndefined(from._offset)) {\n      to._offset = from._offset;\n    }\n    if (!isUndefined(from._pf)) {\n      to._pf = getParsingFlags(from);\n    }\n    if (!isUndefined(from._locale)) {\n      to._locale = from._locale;\n    }\n    if (momentPropertiesLen > 0) {\n      for (i = 0; i < momentPropertiesLen; i++) {\n        prop = momentProperties[i];\n        val = from[prop];\n        if (!isUndefined(val)) {\n          to[prop] = val;\n        }\n      }\n    }\n    return to;\n  }\n\n  // Moment prototype object\n  function Moment(config) {\n    copyConfig(this, config);\n    this._d = new Date(config._d != null ? config._d.getTime() : NaN);\n    if (!this.isValid()) {\n      this._d = new Date(NaN);\n    }\n    // Prevent infinite loop in case updateOffset creates new moment\n    // objects.\n    if (updateInProgress === false) {\n      updateInProgress = true;\n      hooks.updateOffset(this);\n      updateInProgress = false;\n    }\n  }\n  function isMoment(obj) {\n    return obj instanceof Moment || obj != null && obj._isAMomentObject != null;\n  }\n\n  function warn(msg) {\n    if (hooks.suppressDeprecationWarnings === false && typeof console !== 'undefined' && console.warn) {\n      console.warn('Deprecation warning: ' + msg);\n    }\n  }\n  function deprecate(msg, fn) {\n    var firstTime = true;\n    return extend(function () {\n      if (hooks.deprecationHandler != null) {\n        hooks.deprecationHandler(null, msg);\n      }\n      if (firstTime) {\n        var args = [],\n          arg,\n          i,\n          key,\n          argLen = arguments.length;\n        for (i = 0; i < argLen; i++) {\n          arg = '';\n          if (typeof arguments[i] === 'object') {\n            arg += '\\n[' + i + '] ';\n            for (key in arguments[0]) {\n              if (hasOwnProp(arguments[0], key)) {\n                arg += key + ': ' + arguments[0][key] + ', ';\n              }\n            }\n            arg = arg.slice(0, -2); // Remove trailing comma and space\n          } else {\n            arg = arguments[i];\n          }\n          args.push(arg);\n        }\n        warn(msg + '\\nArguments: ' + Array.prototype.slice.call(args).join('') + '\\n' + new Error().stack);\n        firstTime = false;\n      }\n      return fn.apply(this, arguments);\n    }, fn);\n  }\n  var deprecations = {};\n  function deprecateSimple(name, msg) {\n    if (hooks.deprecationHandler != null) {\n      hooks.deprecationHandler(name, msg);\n    }\n    if (!deprecations[name]) {\n      warn(msg);\n      deprecations[name] = true;\n    }\n  }\n  hooks.suppressDeprecationWarnings = false;\n  hooks.deprecationHandler = null;\n\n  function isFunction(input) {\n    return typeof Function !== 'undefined' && input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';\n  }\n\n  function set$1(config) {\n    var prop, i;\n    for (i in config) {\n      if (hasOwnProp(config, i)) {\n        prop = config[i];\n        if (isFunction(prop)) {\n          this[i] = prop;\n        } else {\n          this['_' + i] = prop;\n        }\n      }\n    }\n    this._config = config;\n    // Lenient ordinal parsing accepts just a number in addition to\n    // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.\n    // TODO: Remove \"ordinalParse\" fallback in next major release.\n    this._dayOfMonthOrdinalParseLenient = new RegExp((this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) + '|' + /\\d{1,2}/.source);\n  }\n  function mergeConfigs(parentConfig, childConfig) {\n    var res = extend({}, parentConfig),\n      prop;\n    for (prop in childConfig) {\n      if (hasOwnProp(childConfig, prop)) {\n        if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {\n          res[prop] = {};\n          extend(res[prop], parentConfig[prop]);\n          extend(res[prop], childConfig[prop]);\n        } else if (childConfig[prop] != null) {\n          res[prop] = childConfig[prop];\n        } else {\n          delete res[prop];\n        }\n      }\n    }\n    for (prop in parentConfig) {\n      if (hasOwnProp(parentConfig, prop) && !hasOwnProp(childConfig, prop) && isObject(parentConfig[prop])) {\n        // make sure changes to properties don't modify parent config\n        res[prop] = extend({}, res[prop]);\n      }\n    }\n    return res;\n  }\n\n  function Locale(config) {\n    if (config != null) {\n      this.set(config);\n    }\n  }\n\n  var keys;\n  if (Object.keys) {\n    keys = Object.keys;\n  } else {\n    keys = function (obj) {\n      var i,\n        res = [];\n      for (i in obj) {\n        if (hasOwnProp(obj, i)) {\n          res.push(i);\n        }\n      }\n      return res;\n    };\n  }\n\n  var defaultCalendar = {\n    sameDay: '[Today at] LT',\n    nextDay: '[Tomorrow at] LT',\n    nextWeek: 'dddd [at] LT',\n    lastDay: '[Yesterday at] LT',\n    lastWeek: '[Last] dddd [at] LT',\n    sameElse: 'L'\n  };\n  function calendar$1(key, mom, now) {\n    var output = this._calendar[key] || this._calendar['sameElse'];\n    return isFunction(output) ? output.call(mom, now) : output;\n  }\n\n  function zeroFill(number, targetLength, forceSign) {\n    var absNumber = '' + Math.abs(number),\n      zerosToFill = targetLength - absNumber.length,\n      sign = number >= 0;\n    return (sign ? forceSign ? '+' : '' : '-') + Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;\n  }\n\n  var formattingTokens = /(\\[[^\\[]*\\])|(\\\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,\n    localFormattingTokens = /(\\[[^\\[]*\\])|(\\\\)?(LTS|LT|LL?L?L?|l{1,4})/g,\n    formatFunctions = {},\n    formatTokenFunctions = {};\n\n  // token:    'M'\n  // padded:   ['MM', 2]\n  // ordinal:  'Mo'\n  // callback: function () { this.month() + 1 }\n  function addFormatToken(token, padded, ordinal, callback) {\n    var func = callback;\n    if (typeof callback === 'string') {\n      func = function () {\n        return this[callback]();\n      };\n    }\n    if (token) {\n      formatTokenFunctions[token] = func;\n    }\n    if (padded) {\n      formatTokenFunctions[padded[0]] = function () {\n        return zeroFill(func.apply(this, arguments), padded[1], padded[2]);\n      };\n    }\n    if (ordinal) {\n      formatTokenFunctions[ordinal] = function () {\n        return this.localeData().ordinal(func.apply(this, arguments), token);\n      };\n    }\n  }\n  function removeFormattingTokens(input) {\n    if (input.match(/\\[[\\s\\S]/)) {\n      return input.replace(/^\\[|\\]$/g, '');\n    }\n    return input.replace(/\\\\/g, '');\n  }\n  function makeFormatFunction(format) {\n    var array = format.match(formattingTokens),\n      i,\n      length;\n    for (i = 0, length = array.length; i < length; i++) {\n      if (formatTokenFunctions[array[i]]) {\n        array[i] = formatTokenFunctions[array[i]];\n      } else {\n        array[i] = removeFormattingTokens(array[i]);\n      }\n    }\n    return function (mom) {\n      var output = '',\n        i;\n      for (i = 0; i < length; i++) {\n        output += isFunction(array[i]) ? array[i].call(mom, format) : array[i];\n      }\n      return output;\n    };\n  }\n\n  // format date using native date object\n  function formatMoment(m, format) {\n    if (!m.isValid()) {\n      return m.localeData().invalidDate();\n    }\n    format = expandFormat(format, m.localeData());\n    formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);\n    return formatFunctions[format](m);\n  }\n  function expandFormat(format, locale) {\n    var i = 5;\n    function replaceLongDateFormatTokens(input) {\n      return locale.longDateFormat(input) || input;\n    }\n    localFormattingTokens.lastIndex = 0;\n    while (i >= 0 && localFormattingTokens.test(format)) {\n      format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);\n      localFormattingTokens.lastIndex = 0;\n      i -= 1;\n    }\n    return format;\n  }\n\n  var defaultLongDateFormat = {\n    LTS: 'h:mm:ss A',\n    LT: 'h:mm A',\n    L: 'MM/DD/YYYY',\n    LL: 'MMMM D, YYYY',\n    LLL: 'MMMM D, YYYY h:mm A',\n    LLLL: 'dddd, MMMM D, YYYY h:mm A'\n  };\n  function longDateFormat(key) {\n    var format = this._longDateFormat[key],\n      formatUpper = this._longDateFormat[key.toUpperCase()];\n    if (format || !formatUpper) {\n      return format;\n    }\n    this._longDateFormat[key] = formatUpper.match(formattingTokens).map(function (tok) {\n      if (tok === 'MMMM' || tok === 'MM' || tok === 'DD' || tok === 'dddd') {\n        return tok.slice(1);\n      }\n      return tok;\n    }).join('');\n    return this._longDateFormat[key];\n  }\n\n  var defaultInvalidDate = 'Invalid date';\n  function invalidDate() {\n    return this._invalidDate;\n  }\n\n  var defaultOrdinal = '%d',\n    defaultDayOfMonthOrdinalParse = /\\d{1,2}/;\n  function ordinal(number) {\n    return this._ordinal.replace('%d', number);\n  }\n\n  var defaultRelativeTime = {\n    future: 'in %s',\n    past: '%s ago',\n    s: 'a few seconds',\n    ss: '%d seconds',\n    m: 'a minute',\n    mm: '%d minutes',\n    h: 'an hour',\n    hh: '%d hours',\n    d: 'a day',\n    dd: '%d days',\n    w: 'a week',\n    ww: '%d weeks',\n    M: 'a month',\n    MM: '%d months',\n    y: 'a year',\n    yy: '%d years'\n  };\n  function relativeTime$1(number, withoutSuffix, string, isFuture) {\n    var output = this._relativeTime[string];\n    return isFunction(output) ? output(number, withoutSuffix, string, isFuture) : output.replace(/%d/i, number);\n  }\n  function pastFuture(diff, output) {\n    var format = this._relativeTime[diff > 0 ? 'future' : 'past'];\n    return isFunction(format) ? format(output) : format.replace(/%s/i, output);\n  }\n\n  var aliases = {\n    D: 'date',\n    dates: 'date',\n    date: 'date',\n    d: 'day',\n    days: 'day',\n    day: 'day',\n    e: 'weekday',\n    weekdays: 'weekday',\n    weekday: 'weekday',\n    E: 'isoWeekday',\n    isoweekdays: 'isoWeekday',\n    isoweekday: 'isoWeekday',\n    DDD: 'dayOfYear',\n    dayofyears: 'dayOfYear',\n    dayofyear: 'dayOfYear',\n    h: 'hour',\n    hours: 'hour',\n    hour: 'hour',\n    ms: 'millisecond',\n    milliseconds: 'millisecond',\n    millisecond: 'millisecond',\n    m: 'minute',\n    minutes: 'minute',\n    minute: 'minute',\n    M: 'month',\n    months: 'month',\n    month: 'month',\n    Q: 'quarter',\n    quarters: 'quarter',\n    quarter: 'quarter',\n    s: 'second',\n    seconds: 'second',\n    second: 'second',\n    gg: 'weekYear',\n    weekyears: 'weekYear',\n    weekyear: 'weekYear',\n    GG: 'isoWeekYear',\n    isoweekyears: 'isoWeekYear',\n    isoweekyear: 'isoWeekYear',\n    w: 'week',\n    weeks: 'week',\n    week: 'week',\n    W: 'isoWeek',\n    isoweeks: 'isoWeek',\n    isoweek: 'isoWeek',\n    y: 'year',\n    years: 'year',\n    year: 'year'\n  };\n  function normalizeUnits(units) {\n    return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;\n  }\n  function normalizeObjectUnits(inputObject) {\n    var normalizedInput = {},\n      normalizedProp,\n      prop;\n    for (prop in inputObject) {\n      if (hasOwnProp(inputObject, prop)) {\n        normalizedProp = normalizeUnits(prop);\n        if (normalizedProp) {\n          normalizedInput[normalizedProp] = inputObject[prop];\n        }\n      }\n    }\n    return normalizedInput;\n  }\n\n  var priorities = {\n    date: 9,\n    day: 11,\n    weekday: 11,\n    isoWeekday: 11,\n    dayOfYear: 4,\n    hour: 13,\n    millisecond: 16,\n    minute: 14,\n    month: 8,\n    quarter: 7,\n    second: 15,\n    weekYear: 1,\n    isoWeekYear: 1,\n    week: 5,\n    isoWeek: 5,\n    year: 1\n  };\n  function getPrioritizedUnits(unitsObj) {\n    var units = [],\n      u;\n    for (u in unitsObj) {\n      if (hasOwnProp(unitsObj, u)) {\n        units.push({\n          unit: u,\n          priority: priorities[u]\n        });\n      }\n    }\n    units.sort(function (a, b) {\n      return a.priority - b.priority;\n    });\n    return units;\n  }\n\n  var match1 = /\\d/,\n    //       0 - 9\n    match2 = /\\d\\d/,\n    //      00 - 99\n    match3 = /\\d{3}/,\n    //     000 - 999\n    match4 = /\\d{4}/,\n    //    0000 - 9999\n    match6 = /[+-]?\\d{6}/,\n    // -999999 - 999999\n    match1to2 = /\\d\\d?/,\n    //       0 - 99\n    match3to4 = /\\d\\d\\d\\d?/,\n    //     999 - 9999\n    match5to6 = /\\d\\d\\d\\d\\d\\d?/,\n    //   99999 - 999999\n    match1to3 = /\\d{1,3}/,\n    //       0 - 999\n    match1to4 = /\\d{1,4}/,\n    //       0 - 9999\n    match1to6 = /[+-]?\\d{1,6}/,\n    // -999999 - 999999\n    matchUnsigned = /\\d+/,\n    //       0 - inf\n    matchSigned = /[+-]?\\d+/,\n    //    -inf - inf\n    matchOffset = /Z|[+-]\\d\\d:?\\d\\d/gi,\n    // +00:00 -00:00 +0000 -0000 or Z\n    matchShortOffset = /Z|[+-]\\d\\d(?::?\\d\\d)?/gi,\n    // +00 -00 +00:00 -00:00 +0000 -0000 or Z\n    matchTimestamp = /[+-]?\\d+(\\.\\d{1,3})?/,\n    // 123456789 123456789.123\n    // any word (or two) characters or numbers including two/three word month in arabic.\n    // includes scottish gaelic two word and hyphenated months\n    matchWord = /[0-9]{0,256}['a-z\\u00A0-\\u05FF\\u0700-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFF07\\uFF10-\\uFFEF]{1,256}|[\\u0600-\\u06FF\\/]{1,256}(\\s*?[\\u0600-\\u06FF]{1,256}){1,2}/i,\n    match1to2NoLeadingZero = /^[1-9]\\d?/,\n    //         1-99\n    match1to2HasZero = /^([1-9]\\d|\\d)/,\n    //           0-99\n    regexes;\n  regexes = {};\n  function addRegexToken(token, regex, strictRegex) {\n    regexes[token] = isFunction(regex) ? regex : function (isStrict, localeData) {\n      return isStrict && strictRegex ? strictRegex : regex;\n    };\n  }\n  function getParseRegexForToken(token, config) {\n    if (!hasOwnProp(regexes, token)) {\n      return new RegExp(unescapeFormat(token));\n    }\n    return regexes[token](config._strict, config._locale);\n  }\n\n  // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript\n  function unescapeFormat(s) {\n    return regexEscape(s.replace('\\\\', '').replace(/\\\\(\\[)|\\\\(\\])|\\[([^\\]\\[]*)\\]|\\\\(.)/g, function (matched, p1, p2, p3, p4) {\n      return p1 || p2 || p3 || p4;\n    }));\n  }\n  function regexEscape(s) {\n    return s.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n  }\n\n  function absFloor(number) {\n    if (number < 0) {\n      // -0 -> 0\n      return Math.ceil(number) || 0;\n    } else {\n      return Math.floor(number);\n    }\n  }\n\n  function toInt(argumentForCoercion) {\n    var coercedNumber = +argumentForCoercion,\n      value = 0;\n    if (coercedNumber !== 0 && isFinite(coercedNumber)) {\n      value = absFloor(coercedNumber);\n    }\n    return value;\n  }\n\n  var tokens = {};\n  function addParseToken(token, callback) {\n    var i,\n      func = callback,\n      tokenLen;\n    if (typeof token === 'string') {\n      token = [token];\n    }\n    if (isNumber(callback)) {\n      func = function (input, array) {\n        array[callback] = toInt(input);\n      };\n    }\n    tokenLen = token.length;\n    for (i = 0; i < tokenLen; i++) {\n      tokens[token[i]] = func;\n    }\n  }\n  function addWeekParseToken(token, callback) {\n    addParseToken(token, function (input, array, config, token) {\n      config._w = config._w || {};\n      callback(input, config._w, config, token);\n    });\n  }\n  function addTimeToArrayFromToken(token, input, config) {\n    if (input != null && hasOwnProp(tokens, token)) {\n      tokens[token](input, config._a, config, token);\n    }\n  }\n\n  function isLeapYear(year) {\n    return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;\n  }\n\n  var YEAR = 0,\n    MONTH = 1,\n    DATE = 2,\n    HOUR = 3,\n    MINUTE = 4,\n    SECOND = 5,\n    MILLISECOND = 6,\n    WEEK = 7,\n    WEEKDAY = 8;\n\n  // FORMATTING\n\n  addFormatToken('Y', 0, 0, function () {\n    var y = this.year();\n    return y <= 9999 ? zeroFill(y, 4) : '+' + y;\n  });\n  addFormatToken(0, ['YY', 2], 0, function () {\n    return this.year() % 100;\n  });\n  addFormatToken(0, ['YYYY', 4], 0, 'year');\n  addFormatToken(0, ['YYYYY', 5], 0, 'year');\n  addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');\n\n  // PARSING\n\n  addRegexToken('Y', matchSigned);\n  addRegexToken('YY', match1to2, match2);\n  addRegexToken('YYYY', match1to4, match4);\n  addRegexToken('YYYYY', match1to6, match6);\n  addRegexToken('YYYYYY', match1to6, match6);\n  addParseToken(['YYYYY', 'YYYYYY'], YEAR);\n  addParseToken('YYYY', function (input, array) {\n    array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);\n  });\n  addParseToken('YY', function (input, array) {\n    array[YEAR] = hooks.parseTwoDigitYear(input);\n  });\n  addParseToken('Y', function (input, array) {\n    array[YEAR] = parseInt(input, 10);\n  });\n\n  // HELPERS\n\n  function daysInYear(year) {\n    return isLeapYear(year) ? 366 : 365;\n  }\n\n  // HOOKS\n\n  hooks.parseTwoDigitYear = function (input) {\n    return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);\n  };\n\n  // MOMENTS\n\n  var getSetYear = makeGetSet('FullYear', true);\n  function getIsLeapYear() {\n    return isLeapYear(this.year());\n  }\n\n  function makeGetSet(unit, keepTime) {\n    return function (value) {\n      if (value != null) {\n        set(this, unit, value);\n        hooks.updateOffset(this, keepTime);\n        return this;\n      } else {\n        return get$2(this, unit);\n      }\n    };\n  }\n  function get$2(mom, unit) {\n    if (!mom.isValid()) {\n      return NaN;\n    }\n    var d = mom._d,\n      isUTC = mom._isUTC;\n    switch (unit) {\n      case 'Milliseconds':\n        return isUTC ? d.getUTCMilliseconds() : d.getMilliseconds();\n      case 'Seconds':\n        return isUTC ? d.getUTCSeconds() : d.getSeconds();\n      case 'Minutes':\n        return isUTC ? d.getUTCMinutes() : d.getMinutes();\n      case 'Hours':\n        return isUTC ? d.getUTCHours() : d.getHours();\n      case 'Date':\n        return isUTC ? d.getUTCDate() : d.getDate();\n      case 'Day':\n        return isUTC ? d.getUTCDay() : d.getDay();\n      case 'Month':\n        return isUTC ? d.getUTCMonth() : d.getMonth();\n      case 'FullYear':\n        return isUTC ? d.getUTCFullYear() : d.getFullYear();\n      default:\n        return NaN;\n      // Just in case\n    }\n  }\n  function set(mom, unit, value) {\n    var d, isUTC, year, month, date;\n    if (!mom.isValid() || isNaN(value)) {\n      return;\n    }\n    d = mom._d;\n    isUTC = mom._isUTC;\n    switch (unit) {\n      case 'Milliseconds':\n        return void (isUTC ? d.setUTCMilliseconds(value) : d.setMilliseconds(value));\n      case 'Seconds':\n        return void (isUTC ? d.setUTCSeconds(value) : d.setSeconds(value));\n      case 'Minutes':\n        return void (isUTC ? d.setUTCMinutes(value) : d.setMinutes(value));\n      case 'Hours':\n        return void (isUTC ? d.setUTCHours(value) : d.setHours(value));\n      case 'Date':\n        return void (isUTC ? d.setUTCDate(value) : d.setDate(value));\n      // case 'Day': // Not real\n      //    return void (isUTC ? d.setUTCDay(value) : d.setDay(value));\n      // case 'Month': // Not used because we need to pass two variables\n      //     return void (isUTC ? d.setUTCMonth(value) : d.setMonth(value));\n      case 'FullYear':\n        break;\n      // See below ...\n      default:\n        return;\n      // Just in case\n    }\n    year = value;\n    month = mom.month();\n    date = mom.date();\n    date = date === 29 && month === 1 && !isLeapYear(year) ? 28 : date;\n    void (isUTC ? d.setUTCFullYear(year, month, date) : d.setFullYear(year, month, date));\n  }\n\n  // MOMENTS\n\n  function stringGet(units) {\n    units = normalizeUnits(units);\n    if (isFunction(this[units])) {\n      return this[units]();\n    }\n    return this;\n  }\n  function stringSet(units, value) {\n    if (typeof units === 'object') {\n      units = normalizeObjectUnits(units);\n      var prioritized = getPrioritizedUnits(units),\n        i,\n        prioritizedLen = prioritized.length;\n      for (i = 0; i < prioritizedLen; i++) {\n        this[prioritized[i].unit](units[prioritized[i].unit]);\n      }\n    } else {\n      units = normalizeUnits(units);\n      if (isFunction(this[units])) {\n        return this[units](value);\n      }\n    }\n    return this;\n  }\n\n  function mod$1(n, x) {\n    return (n % x + x) % x;\n  }\n\n  var indexOf;\n  if (Array.prototype.indexOf) {\n    indexOf = Array.prototype.indexOf;\n  } else {\n    indexOf = function (o) {\n      // I know\n      var i;\n      for (i = 0; i < this.length; ++i) {\n        if (this[i] === o) {\n          return i;\n        }\n      }\n      return -1;\n    };\n  }\n\n  function daysInMonth(year, month) {\n    if (isNaN(year) || isNaN(month)) {\n      return NaN;\n    }\n    var modMonth = mod$1(month, 12);\n    year += (month - modMonth) / 12;\n    return modMonth === 1 ? isLeapYear(year) ? 29 : 28 : 31 - modMonth % 7 % 2;\n  }\n\n  // FORMATTING\n\n  addFormatToken('M', ['MM', 2], 'Mo', function () {\n    return this.month() + 1;\n  });\n  addFormatToken('MMM', 0, 0, function (format) {\n    return this.localeData().monthsShort(this, format);\n  });\n  addFormatToken('MMMM', 0, 0, function (format) {\n    return this.localeData().months(this, format);\n  });\n\n  // PARSING\n\n  addRegexToken('M', match1to2, match1to2NoLeadingZero);\n  addRegexToken('MM', match1to2, match2);\n  addRegexToken('MMM', function (isStrict, locale) {\n    return locale.monthsShortRegex(isStrict);\n  });\n  addRegexToken('MMMM', function (isStrict, locale) {\n    return locale.monthsRegex(isStrict);\n  });\n  addParseToken(['M', 'MM'], function (input, array) {\n    array[MONTH] = toInt(input) - 1;\n  });\n  addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {\n    var month = config._locale.monthsParse(input, token, config._strict);\n    // if we didn't find a month name, mark the date as invalid.\n    if (month != null) {\n      array[MONTH] = month;\n    } else {\n      getParsingFlags(config).invalidMonth = input;\n    }\n  });\n\n  // LOCALES\n\n  var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),\n    defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),\n    MONTHS_IN_FORMAT = /D[oD]?(\\[[^\\[\\]]*\\]|\\s)+MMMM?/,\n    defaultMonthsShortRegex = matchWord,\n    defaultMonthsRegex = matchWord;\n  function localeMonths(m, format) {\n    if (!m) {\n      return isArray(this._months) ? this._months : this._months['standalone'];\n    }\n    return isArray(this._months) ? this._months[m.month()] : this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? 'format' : 'standalone'][m.month()];\n  }\n  function localeMonthsShort(m, format) {\n    if (!m) {\n      return isArray(this._monthsShort) ? this._monthsShort : this._monthsShort['standalone'];\n    }\n    return isArray(this._monthsShort) ? this._monthsShort[m.month()] : this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];\n  }\n  function handleStrictParse$1(monthName, format, strict) {\n    var i,\n      ii,\n      mom,\n      llc = monthName.toLocaleLowerCase();\n    if (!this._monthsParse) {\n      // this is not used\n      this._monthsParse = [];\n      this._longMonthsParse = [];\n      this._shortMonthsParse = [];\n      for (i = 0; i < 12; ++i) {\n        mom = createUTC([2000, i]);\n        this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();\n        this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();\n      }\n    }\n    if (strict) {\n      if (format === 'MMM') {\n        ii = indexOf.call(this._shortMonthsParse, llc);\n        return ii !== -1 ? ii : null;\n      } else {\n        ii = indexOf.call(this._longMonthsParse, llc);\n        return ii !== -1 ? ii : null;\n      }\n    } else {\n      if (format === 'MMM') {\n        ii = indexOf.call(this._shortMonthsParse, llc);\n        if (ii !== -1) {\n          return ii;\n        }\n        ii = indexOf.call(this._longMonthsParse, llc);\n        return ii !== -1 ? ii : null;\n      } else {\n        ii = indexOf.call(this._longMonthsParse, llc);\n        if (ii !== -1) {\n          return ii;\n        }\n        ii = indexOf.call(this._shortMonthsParse, llc);\n        return ii !== -1 ? ii : null;\n      }\n    }\n  }\n  function localeMonthsParse(monthName, format, strict) {\n    var i, mom, regex;\n    if (this._monthsParseExact) {\n      return handleStrictParse$1.call(this, monthName, format, strict);\n    }\n    if (!this._monthsParse) {\n      this._monthsParse = [];\n      this._longMonthsParse = [];\n      this._shortMonthsParse = [];\n    }\n\n    // TODO: add sorting\n    // Sorting makes sure if one month (or abbr) is a prefix of another\n    // see sorting in computeMonthsParse\n    for (i = 0; i < 12; i++) {\n      // make the regex if we don't have it already\n      mom = createUTC([2000, i]);\n      if (strict && !this._longMonthsParse[i]) {\n        this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');\n        this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');\n      }\n      if (!strict && !this._monthsParse[i]) {\n        regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');\n        this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');\n      }\n      // test the regex\n      if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {\n        return i;\n      } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {\n        return i;\n      } else if (!strict && this._monthsParse[i].test(monthName)) {\n        return i;\n      }\n    }\n  }\n\n  // MOMENTS\n\n  function setMonth(mom, value) {\n    if (!mom.isValid()) {\n      // No op\n      return mom;\n    }\n    if (typeof value === 'string') {\n      if (/^\\d+$/.test(value)) {\n        value = toInt(value);\n      } else {\n        value = mom.localeData().monthsParse(value);\n        // TODO: Another silent failure?\n        if (!isNumber(value)) {\n          return mom;\n        }\n      }\n    }\n    var month = value,\n      date = mom.date();\n    date = date < 29 ? date : Math.min(date, daysInMonth(mom.year(), month));\n    void (mom._isUTC ? mom._d.setUTCMonth(month, date) : mom._d.setMonth(month, date));\n    return mom;\n  }\n  function getSetMonth(value) {\n    if (value != null) {\n      setMonth(this, value);\n      hooks.updateOffset(this, true);\n      return this;\n    } else {\n      return get$2(this, 'Month');\n    }\n  }\n  function getDaysInMonth() {\n    return daysInMonth(this.year(), this.month());\n  }\n  function monthsShortRegex(isStrict) {\n    if (this._monthsParseExact) {\n      if (!hasOwnProp(this, '_monthsRegex')) {\n        computeMonthsParse.call(this);\n      }\n      if (isStrict) {\n        return this._monthsShortStrictRegex;\n      } else {\n        return this._monthsShortRegex;\n      }\n    } else {\n      if (!hasOwnProp(this, '_monthsShortRegex')) {\n        this._monthsShortRegex = defaultMonthsShortRegex;\n      }\n      return this._monthsShortStrictRegex && isStrict ? this._monthsShortStrictRegex : this._monthsShortRegex;\n    }\n  }\n  function monthsRegex(isStrict) {\n    if (this._monthsParseExact) {\n      if (!hasOwnProp(this, '_monthsRegex')) {\n        computeMonthsParse.call(this);\n      }\n      if (isStrict) {\n        return this._monthsStrictRegex;\n      } else {\n        return this._monthsRegex;\n      }\n    } else {\n      if (!hasOwnProp(this, '_monthsRegex')) {\n        this._monthsRegex = defaultMonthsRegex;\n      }\n      return this._monthsStrictRegex && isStrict ? this._monthsStrictRegex : this._monthsRegex;\n    }\n  }\n  function computeMonthsParse() {\n    function cmpLenRev(a, b) {\n      return b.length - a.length;\n    }\n    var shortPieces = [],\n      longPieces = [],\n      mixedPieces = [],\n      i,\n      mom,\n      shortP,\n      longP;\n    for (i = 0; i < 12; i++) {\n      // make the regex if we don't have it already\n      mom = createUTC([2000, i]);\n      shortP = regexEscape(this.monthsShort(mom, ''));\n      longP = regexEscape(this.months(mom, ''));\n      shortPieces.push(shortP);\n      longPieces.push(longP);\n      mixedPieces.push(longP);\n      mixedPieces.push(shortP);\n    }\n    // Sorting makes sure if one month (or abbr) is a prefix of another it\n    // will match the longer piece.\n    shortPieces.sort(cmpLenRev);\n    longPieces.sort(cmpLenRev);\n    mixedPieces.sort(cmpLenRev);\n    this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');\n    this._monthsShortRegex = this._monthsRegex;\n    this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');\n    this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');\n  }\n\n  function createDate(y, m, d, h, M, s, ms) {\n    // can't just apply() to create a date:\n    // https://stackoverflow.com/q/181348\n    var date;\n    // the date constructor remaps years 0-99 to 1900-1999\n    if (y < 100 && y >= 0) {\n      // preserve leap years using a full 400 year cycle, then reset\n      date = new Date(y + 400, m, d, h, M, s, ms);\n      if (isFinite(date.getFullYear())) {\n        date.setFullYear(y);\n      }\n    } else {\n      date = new Date(y, m, d, h, M, s, ms);\n    }\n    return date;\n  }\n  function createUTCDate(y) {\n    var date, args;\n    // the Date.UTC function remaps years 0-99 to 1900-1999\n    if (y < 100 && y >= 0) {\n      args = Array.prototype.slice.call(arguments);\n      // preserve leap years using a full 400 year cycle, then reset\n      args[0] = y + 400;\n      date = new Date(Date.UTC.apply(null, args));\n      if (isFinite(date.getUTCFullYear())) {\n        date.setUTCFullYear(y);\n      }\n    } else {\n      date = new Date(Date.UTC.apply(null, arguments));\n    }\n    return date;\n  }\n\n  // start-of-first-week - start-of-year\n  function firstWeekOffset(year, dow, doy) {\n    var\n      // first-week day -- which january is always in the first week (4 for iso, 1 for other)\n      fwd = 7 + dow - doy,\n      // first-week day local weekday -- which local weekday is fwd\n      fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;\n    return -fwdlw + fwd - 1;\n  }\n\n  // https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday\n  function dayOfYearFromWeeks(year, week, weekday, dow, doy) {\n    var localWeekday = (7 + weekday - dow) % 7,\n      weekOffset = firstWeekOffset(year, dow, doy),\n      dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,\n      resYear,\n      resDayOfYear;\n    if (dayOfYear <= 0) {\n      resYear = year - 1;\n      resDayOfYear = daysInYear(resYear) + dayOfYear;\n    } else if (dayOfYear > daysInYear(year)) {\n      resYear = year + 1;\n      resDayOfYear = dayOfYear - daysInYear(year);\n    } else {\n      resYear = year;\n      resDayOfYear = dayOfYear;\n    }\n    return {\n      year: resYear,\n      dayOfYear: resDayOfYear\n    };\n  }\n  function weekOfYear(mom, dow, doy) {\n    var weekOffset = firstWeekOffset(mom.year(), dow, doy),\n      week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,\n      resWeek,\n      resYear;\n    if (week < 1) {\n      resYear = mom.year() - 1;\n      resWeek = week + weeksInYear(resYear, dow, doy);\n    } else if (week > weeksInYear(mom.year(), dow, doy)) {\n      resWeek = week - weeksInYear(mom.year(), dow, doy);\n      resYear = mom.year() + 1;\n    } else {\n      resYear = mom.year();\n      resWeek = week;\n    }\n    return {\n      week: resWeek,\n      year: resYear\n    };\n  }\n  function weeksInYear(year, dow, doy) {\n    var weekOffset = firstWeekOffset(year, dow, doy),\n      weekOffsetNext = firstWeekOffset(year + 1, dow, doy);\n    return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;\n  }\n\n  // FORMATTING\n\n  addFormatToken('w', ['ww', 2], 'wo', 'week');\n  addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');\n\n  // PARSING\n\n  addRegexToken('w', match1to2, match1to2NoLeadingZero);\n  addRegexToken('ww', match1to2, match2);\n  addRegexToken('W', match1to2, match1to2NoLeadingZero);\n  addRegexToken('WW', match1to2, match2);\n  addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {\n    week[token.substr(0, 1)] = toInt(input);\n  });\n\n  // HELPERS\n\n  // LOCALES\n\n  function localeWeek(mom) {\n    return weekOfYear(mom, this._week.dow, this._week.doy).week;\n  }\n  var defaultLocaleWeek = {\n    dow: 0,\n    // Sunday is the first day of the week.\n    doy: 6 // The week that contains Jan 6th is the first week of the year.\n  };\n  function localeFirstDayOfWeek() {\n    return this._week.dow;\n  }\n  function localeFirstDayOfYear() {\n    return this._week.doy;\n  }\n\n  // MOMENTS\n\n  function getSetWeek(input) {\n    var week = this.localeData().week(this);\n    return input == null ? week : this.add((input - week) * 7, 'd');\n  }\n  function getSetISOWeek(input) {\n    var week = weekOfYear(this, 1, 4).week;\n    return input == null ? week : this.add((input - week) * 7, 'd');\n  }\n\n  // FORMATTING\n\n  addFormatToken('d', 0, 'do', 'day');\n  addFormatToken('dd', 0, 0, function (format) {\n    return this.localeData().weekdaysMin(this, format);\n  });\n  addFormatToken('ddd', 0, 0, function (format) {\n    return this.localeData().weekdaysShort(this, format);\n  });\n  addFormatToken('dddd', 0, 0, function (format) {\n    return this.localeData().weekdays(this, format);\n  });\n  addFormatToken('e', 0, 0, 'weekday');\n  addFormatToken('E', 0, 0, 'isoWeekday');\n\n  // PARSING\n\n  addRegexToken('d', match1to2);\n  addRegexToken('e', match1to2);\n  addRegexToken('E', match1to2);\n  addRegexToken('dd', function (isStrict, locale) {\n    return locale.weekdaysMinRegex(isStrict);\n  });\n  addRegexToken('ddd', function (isStrict, locale) {\n    return locale.weekdaysShortRegex(isStrict);\n  });\n  addRegexToken('dddd', function (isStrict, locale) {\n    return locale.weekdaysRegex(isStrict);\n  });\n  addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {\n    var weekday = config._locale.weekdaysParse(input, token, config._strict);\n    // if we didn't get a weekday name, mark the date as invalid\n    if (weekday != null) {\n      week.d = weekday;\n    } else {\n      getParsingFlags(config).invalidWeekday = input;\n    }\n  });\n  addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {\n    week[token] = toInt(input);\n  });\n\n  // HELPERS\n\n  function parseWeekday(input, locale) {\n    if (typeof input !== 'string') {\n      return input;\n    }\n    if (!isNaN(input)) {\n      return parseInt(input, 10);\n    }\n    input = locale.weekdaysParse(input);\n    if (typeof input === 'number') {\n      return input;\n    }\n    return null;\n  }\n  function parseIsoWeekday(input, locale) {\n    if (typeof input === 'string') {\n      return locale.weekdaysParse(input) % 7 || 7;\n    }\n    return isNaN(input) ? null : input;\n  }\n\n  // LOCALES\n  function shiftWeekdays(ws, n) {\n    return ws.slice(n, 7).concat(ws.slice(0, n));\n  }\n  var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),\n    defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),\n    defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),\n    defaultWeekdaysRegex = matchWord,\n    defaultWeekdaysShortRegex = matchWord,\n    defaultWeekdaysMinRegex = matchWord;\n  function localeWeekdays(m, format) {\n    var weekdays = isArray(this._weekdays) ? this._weekdays : this._weekdays[m && m !== true && this._weekdays.isFormat.test(format) ? 'format' : 'standalone'];\n    return m === true ? shiftWeekdays(weekdays, this._week.dow) : m ? weekdays[m.day()] : weekdays;\n  }\n  function localeWeekdaysShort(m) {\n    return m === true ? shiftWeekdays(this._weekdaysShort, this._week.dow) : m ? this._weekdaysShort[m.day()] : this._weekdaysShort;\n  }\n  function localeWeekdaysMin(m) {\n    return m === true ? shiftWeekdays(this._weekdaysMin, this._week.dow) : m ? this._weekdaysMin[m.day()] : this._weekdaysMin;\n  }\n  function handleStrictParse(weekdayName, format, strict) {\n    var i,\n      ii,\n      mom,\n      llc = weekdayName.toLocaleLowerCase();\n    if (!this._weekdaysParse) {\n      this._weekdaysParse = [];\n      this._shortWeekdaysParse = [];\n      this._minWeekdaysParse = [];\n      for (i = 0; i < 7; ++i) {\n        mom = createUTC([2000, 1]).day(i);\n        this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();\n        this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();\n        this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();\n      }\n    }\n    if (strict) {\n      if (format === 'dddd') {\n        ii = indexOf.call(this._weekdaysParse, llc);\n        return ii !== -1 ? ii : null;\n      } else if (format === 'ddd') {\n        ii = indexOf.call(this._shortWeekdaysParse, llc);\n        return ii !== -1 ? ii : null;\n      } else {\n        ii = indexOf.call(this._minWeekdaysParse, llc);\n        return ii !== -1 ? ii : null;\n      }\n    } else {\n      if (format === 'dddd') {\n        ii = indexOf.call(this._weekdaysParse, llc);\n        if (ii !== -1) {\n          return ii;\n        }\n        ii = indexOf.call(this._shortWeekdaysParse, llc);\n        if (ii !== -1) {\n          return ii;\n        }\n        ii = indexOf.call(this._minWeekdaysParse, llc);\n        return ii !== -1 ? ii : null;\n      } else if (format === 'ddd') {\n        ii = indexOf.call(this._shortWeekdaysParse, llc);\n        if (ii !== -1) {\n          return ii;\n        }\n        ii = indexOf.call(this._weekdaysParse, llc);\n        if (ii !== -1) {\n          return ii;\n        }\n        ii = indexOf.call(this._minWeekdaysParse, llc);\n        return ii !== -1 ? ii : null;\n      } else {\n        ii = indexOf.call(this._minWeekdaysParse, llc);\n        if (ii !== -1) {\n          return ii;\n        }\n        ii = indexOf.call(this._weekdaysParse, llc);\n        if (ii !== -1) {\n          return ii;\n        }\n        ii = indexOf.call(this._shortWeekdaysParse, llc);\n        return ii !== -1 ? ii : null;\n      }\n    }\n  }\n  function localeWeekdaysParse(weekdayName, format, strict) {\n    var i, mom, regex;\n    if (this._weekdaysParseExact) {\n      return handleStrictParse.call(this, weekdayName, format, strict);\n    }\n    if (!this._weekdaysParse) {\n      this._weekdaysParse = [];\n      this._minWeekdaysParse = [];\n      this._shortWeekdaysParse = [];\n      this._fullWeekdaysParse = [];\n    }\n    for (i = 0; i < 7; i++) {\n      // make the regex if we don't have it already\n\n      mom = createUTC([2000, 1]).day(i);\n      if (strict && !this._fullWeekdaysParse[i]) {\n        this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\\\\.?') + '$', 'i');\n        this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\\\\.?') + '$', 'i');\n        this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\\\\.?') + '$', 'i');\n      }\n      if (!this._weekdaysParse[i]) {\n        regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');\n        this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');\n      }\n      // test the regex\n      if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {\n        return i;\n      } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {\n        return i;\n      } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {\n        return i;\n      } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {\n        return i;\n      }\n    }\n  }\n\n  // MOMENTS\n\n  function getSetDayOfWeek(input) {\n    if (!this.isValid()) {\n      return input != null ? this : NaN;\n    }\n    var day = get$2(this, 'Day');\n    if (input != null) {\n      input = parseWeekday(input, this.localeData());\n      return this.add(input - day, 'd');\n    } else {\n      return day;\n    }\n  }\n  function getSetLocaleDayOfWeek(input) {\n    if (!this.isValid()) {\n      return input != null ? this : NaN;\n    }\n    var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;\n    return input == null ? weekday : this.add(input - weekday, 'd');\n  }\n  function getSetISODayOfWeek(input) {\n    if (!this.isValid()) {\n      return input != null ? this : NaN;\n    }\n\n    // behaves the same as moment#day except\n    // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)\n    // as a setter, sunday should belong to the previous week.\n\n    if (input != null) {\n      var weekday = parseIsoWeekday(input, this.localeData());\n      return this.day(this.day() % 7 ? weekday : weekday - 7);\n    } else {\n      return this.day() || 7;\n    }\n  }\n  function weekdaysRegex(isStrict) {\n    if (this._weekdaysParseExact) {\n      if (!hasOwnProp(this, '_weekdaysRegex')) {\n        computeWeekdaysParse.call(this);\n      }\n      if (isStrict) {\n        return this._weekdaysStrictRegex;\n      } else {\n        return this._weekdaysRegex;\n      }\n    } else {\n      if (!hasOwnProp(this, '_weekdaysRegex')) {\n        this._weekdaysRegex = defaultWeekdaysRegex;\n      }\n      return this._weekdaysStrictRegex && isStrict ? this._weekdaysStrictRegex : this._weekdaysRegex;\n    }\n  }\n  function weekdaysShortRegex(isStrict) {\n    if (this._weekdaysParseExact) {\n      if (!hasOwnProp(this, '_weekdaysRegex')) {\n        computeWeekdaysParse.call(this);\n      }\n      if (isStrict) {\n        return this._weekdaysShortStrictRegex;\n      } else {\n        return this._weekdaysShortRegex;\n      }\n    } else {\n      if (!hasOwnProp(this, '_weekdaysShortRegex')) {\n        this._weekdaysShortRegex = defaultWeekdaysShortRegex;\n      }\n      return this._weekdaysShortStrictRegex && isStrict ? this._weekdaysShortStrictRegex : this._weekdaysShortRegex;\n    }\n  }\n  function weekdaysMinRegex(isStrict) {\n    if (this._weekdaysParseExact) {\n      if (!hasOwnProp(this, '_weekdaysRegex')) {\n        computeWeekdaysParse.call(this);\n      }\n      if (isStrict) {\n        return this._weekdaysMinStrictRegex;\n      } else {\n        return this._weekdaysMinRegex;\n      }\n    } else {\n      if (!hasOwnProp(this, '_weekdaysMinRegex')) {\n        this._weekdaysMinRegex = defaultWeekdaysMinRegex;\n      }\n      return this._weekdaysMinStrictRegex && isStrict ? this._weekdaysMinStrictRegex : this._weekdaysMinRegex;\n    }\n  }\n  function computeWeekdaysParse() {\n    function cmpLenRev(a, b) {\n      return b.length - a.length;\n    }\n    var minPieces = [],\n      shortPieces = [],\n      longPieces = [],\n      mixedPieces = [],\n      i,\n      mom,\n      minp,\n      shortp,\n      longp;\n    for (i = 0; i < 7; i++) {\n      // make the regex if we don't have it already\n      mom = createUTC([2000, 1]).day(i);\n      minp = regexEscape(this.weekdaysMin(mom, ''));\n      shortp = regexEscape(this.weekdaysShort(mom, ''));\n      longp = regexEscape(this.weekdays(mom, ''));\n      minPieces.push(minp);\n      shortPieces.push(shortp);\n      longPieces.push(longp);\n      mixedPieces.push(minp);\n      mixedPieces.push(shortp);\n      mixedPieces.push(longp);\n    }\n    // Sorting makes sure if one weekday (or abbr) is a prefix of another it\n    // will match the longer piece.\n    minPieces.sort(cmpLenRev);\n    shortPieces.sort(cmpLenRev);\n    longPieces.sort(cmpLenRev);\n    mixedPieces.sort(cmpLenRev);\n    this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');\n    this._weekdaysShortRegex = this._weekdaysRegex;\n    this._weekdaysMinRegex = this._weekdaysRegex;\n    this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');\n    this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');\n    this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i');\n  }\n\n  // FORMATTING\n\n  function hFormat() {\n    return this.hours() % 12 || 12;\n  }\n  function kFormat() {\n    return this.hours() || 24;\n  }\n  addFormatToken('H', ['HH', 2], 0, 'hour');\n  addFormatToken('h', ['hh', 2], 0, hFormat);\n  addFormatToken('k', ['kk', 2], 0, kFormat);\n  addFormatToken('hmm', 0, 0, function () {\n    return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);\n  });\n  addFormatToken('hmmss', 0, 0, function () {\n    return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);\n  });\n  addFormatToken('Hmm', 0, 0, function () {\n    return '' + this.hours() + zeroFill(this.minutes(), 2);\n  });\n  addFormatToken('Hmmss', 0, 0, function () {\n    return '' + this.hours() + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);\n  });\n  function meridiem(token, lowercase) {\n    addFormatToken(token, 0, 0, function () {\n      return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);\n    });\n  }\n  meridiem('a', true);\n  meridiem('A', false);\n\n  // PARSING\n\n  function matchMeridiem(isStrict, locale) {\n    return locale._meridiemParse;\n  }\n  addRegexToken('a', matchMeridiem);\n  addRegexToken('A', matchMeridiem);\n  addRegexToken('H', match1to2, match1to2HasZero);\n  addRegexToken('h', match1to2, match1to2NoLeadingZero);\n  addRegexToken('k', match1to2, match1to2NoLeadingZero);\n  addRegexToken('HH', match1to2, match2);\n  addRegexToken('hh', match1to2, match2);\n  addRegexToken('kk', match1to2, match2);\n  addRegexToken('hmm', match3to4);\n  addRegexToken('hmmss', match5to6);\n  addRegexToken('Hmm', match3to4);\n  addRegexToken('Hmmss', match5to6);\n  addParseToken(['H', 'HH'], HOUR);\n  addParseToken(['k', 'kk'], function (input, array, config) {\n    var kInput = toInt(input);\n    array[HOUR] = kInput === 24 ? 0 : kInput;\n  });\n  addParseToken(['a', 'A'], function (input, array, config) {\n    config._isPm = config._locale.isPM(input);\n    config._meridiem = input;\n  });\n  addParseToken(['h', 'hh'], function (input, array, config) {\n    array[HOUR] = toInt(input);\n    getParsingFlags(config).bigHour = true;\n  });\n  addParseToken('hmm', function (input, array, config) {\n    var pos = input.length - 2;\n    array[HOUR] = toInt(input.substr(0, pos));\n    array[MINUTE] = toInt(input.substr(pos));\n    getParsingFlags(config).bigHour = true;\n  });\n  addParseToken('hmmss', function (input, array, config) {\n    var pos1 = input.length - 4,\n      pos2 = input.length - 2;\n    array[HOUR] = toInt(input.substr(0, pos1));\n    array[MINUTE] = toInt(input.substr(pos1, 2));\n    array[SECOND] = toInt(input.substr(pos2));\n    getParsingFlags(config).bigHour = true;\n  });\n  addParseToken('Hmm', function (input, array, config) {\n    var pos = input.length - 2;\n    array[HOUR] = toInt(input.substr(0, pos));\n    array[MINUTE] = toInt(input.substr(pos));\n  });\n  addParseToken('Hmmss', function (input, array, config) {\n    var pos1 = input.length - 4,\n      pos2 = input.length - 2;\n    array[HOUR] = toInt(input.substr(0, pos1));\n    array[MINUTE] = toInt(input.substr(pos1, 2));\n    array[SECOND] = toInt(input.substr(pos2));\n  });\n\n  // LOCALES\n\n  function localeIsPM(input) {\n    // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays\n    // Using charAt should be more compatible.\n    return (input + '').toLowerCase().charAt(0) === 'p';\n  }\n  var defaultLocaleMeridiemParse = /[ap]\\.?m?\\.?/i,\n    // Setting the hour should keep the time, because the user explicitly\n    // specified which hour they want. So trying to maintain the same hour (in\n    // a new timezone) makes sense. Adding/subtracting hours does not follow\n    // this rule.\n    getSetHour = makeGetSet('Hours', true);\n  function localeMeridiem(hours, minutes, isLower) {\n    if (hours > 11) {\n      return isLower ? 'pm' : 'PM';\n    } else {\n      return isLower ? 'am' : 'AM';\n    }\n  }\n\n  var baseConfig = {\n    calendar: defaultCalendar,\n    longDateFormat: defaultLongDateFormat,\n    invalidDate: defaultInvalidDate,\n    ordinal: defaultOrdinal,\n    dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,\n    relativeTime: defaultRelativeTime,\n    months: defaultLocaleMonths,\n    monthsShort: defaultLocaleMonthsShort,\n    week: defaultLocaleWeek,\n    weekdays: defaultLocaleWeekdays,\n    weekdaysMin: defaultLocaleWeekdaysMin,\n    weekdaysShort: defaultLocaleWeekdaysShort,\n    meridiemParse: defaultLocaleMeridiemParse\n  };\n\n  // internal storage for locale config files\n  var locales = {},\n    localeFamilies = {},\n    globalLocale;\n  function commonPrefix(arr1, arr2) {\n    var i,\n      minl = Math.min(arr1.length, arr2.length);\n    for (i = 0; i < minl; i += 1) {\n      if (arr1[i] !== arr2[i]) {\n        return i;\n      }\n    }\n    return minl;\n  }\n  function normalizeLocale(key) {\n    return key ? key.toLowerCase().replace('_', '-') : key;\n  }\n\n  // pick the locale from the array\n  // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each\n  // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root\n  function chooseLocale(names) {\n    var i = 0,\n      j,\n      next,\n      locale,\n      split;\n    while (i < names.length) {\n      split = normalizeLocale(names[i]).split('-');\n      j = split.length;\n      next = normalizeLocale(names[i + 1]);\n      next = next ? next.split('-') : null;\n      while (j > 0) {\n        locale = loadLocale(split.slice(0, j).join('-'));\n        if (locale) {\n          return locale;\n        }\n        if (next && next.length >= j && commonPrefix(split, next) >= j - 1) {\n          //the next array item is better than a shallower substring of this one\n          break;\n        }\n        j--;\n      }\n      i++;\n    }\n    return globalLocale;\n  }\n  function isLocaleNameSane(name) {\n    // Prevent names that look like filesystem paths, i.e contain '/' or '\\'\n    // Ensure name is available and function returns boolean\n    return !!(name && name.match('^[^/\\\\\\\\]*$'));\n  }\n  function loadLocale(name) {\n    var oldLocale = null,\n      aliasedRequire;\n    // TODO: Find a better way to register and load all the locales in Node\n    if (locales[name] === undefined && typeof module !== 'undefined' && module && module.exports && isLocaleNameSane(name)) {\n      try {\n        oldLocale = globalLocale._abbr;\n        aliasedRequire = require;\n        aliasedRequire('./locale/' + name);\n        getSetGlobalLocale(oldLocale);\n      } catch (e) {\n        // mark as not found to avoid repeating expensive file require call causing high CPU\n        // when trying to find en-US, en_US, en-us for every format call\n        locales[name] = null; // null means not found\n      }\n    }\n    return locales[name];\n  }\n\n  // This function will load locale and then set the global locale.  If\n  // no arguments are passed in, it will simply return the current global\n  // locale key.\n  function getSetGlobalLocale(key, values) {\n    var data;\n    if (key) {\n      if (isUndefined(values)) {\n        data = getLocale(key);\n      } else {\n        data = defineLocale(key, values);\n      }\n      if (data) {\n        // moment.duration._locale = moment._locale = data;\n        globalLocale = data;\n      } else {\n        if (typeof console !== 'undefined' && console.warn) {\n          //warn user if arguments are passed but the locale could not be set\n          console.warn('Locale ' + key + ' not found. Did you forget to load it?');\n        }\n      }\n    }\n    return globalLocale._abbr;\n  }\n  function defineLocale(name, config) {\n    if (config !== null) {\n      var locale,\n        parentConfig = baseConfig;\n      config.abbr = name;\n      if (locales[name] != null) {\n        deprecateSimple('defineLocaleOverride', 'use moment.updateLocale(localeName, config) to change ' + 'an existing locale. moment.defineLocale(localeName, ' + 'config) should only be used for creating a new locale ' + 'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');\n        parentConfig = locales[name]._config;\n      } else if (config.parentLocale != null) {\n        if (locales[config.parentLocale] != null) {\n          parentConfig = locales[config.parentLocale]._config;\n        } else {\n          locale = loadLocale(config.parentLocale);\n          if (locale != null) {\n            parentConfig = locale._config;\n          } else {\n            if (!localeFamilies[config.parentLocale]) {\n              localeFamilies[config.parentLocale] = [];\n            }\n            localeFamilies[config.parentLocale].push({\n              name: name,\n              config: config\n            });\n            return null;\n          }\n        }\n      }\n      locales[name] = new Locale(mergeConfigs(parentConfig, config));\n      if (localeFamilies[name]) {\n        localeFamilies[name].forEach(function (x) {\n          defineLocale(x.name, x.config);\n        });\n      }\n\n      // backwards compat for now: also set the locale\n      // make sure we set the locale AFTER all child locales have been\n      // created, so we won't end up with the child locale set.\n      getSetGlobalLocale(name);\n      return locales[name];\n    } else {\n      // useful for testing\n      delete locales[name];\n      return null;\n    }\n  }\n  function updateLocale(name, config) {\n    if (config != null) {\n      var locale,\n        tmpLocale,\n        parentConfig = baseConfig;\n      if (locales[name] != null && locales[name].parentLocale != null) {\n        // Update existing child locale in-place to avoid memory-leaks\n        locales[name].set(mergeConfigs(locales[name]._config, config));\n      } else {\n        // MERGE\n        tmpLocale = loadLocale(name);\n        if (tmpLocale != null) {\n          parentConfig = tmpLocale._config;\n        }\n        config = mergeConfigs(parentConfig, config);\n        if (tmpLocale == null) {\n          // updateLocale is called for creating a new locale\n          // Set abbr so it will have a name (getters return\n          // undefined otherwise).\n          config.abbr = name;\n        }\n        locale = new Locale(config);\n        locale.parentLocale = locales[name];\n        locales[name] = locale;\n      }\n\n      // backwards compat for now: also set the locale\n      getSetGlobalLocale(name);\n    } else {\n      // pass null for config to unupdate, useful for tests\n      if (locales[name] != null) {\n        if (locales[name].parentLocale != null) {\n          locales[name] = locales[name].parentLocale;\n          if (name === getSetGlobalLocale()) {\n            getSetGlobalLocale(name);\n          }\n        } else if (locales[name] != null) {\n          delete locales[name];\n        }\n      }\n    }\n    return locales[name];\n  }\n\n  // returns locale data\n  function getLocale(key) {\n    var locale;\n    if (key && key._locale && key._locale._abbr) {\n      key = key._locale._abbr;\n    }\n    if (!key) {\n      return globalLocale;\n    }\n    if (!isArray(key)) {\n      //short-circuit everything else\n      locale = loadLocale(key);\n      if (locale) {\n        return locale;\n      }\n      key = [key];\n    }\n    return chooseLocale(key);\n  }\n  function listLocales() {\n    return keys(locales);\n  }\n\n  function checkOverflow(m) {\n    var overflow,\n      a = m._a;\n    if (a && getParsingFlags(m).overflow === -2) {\n      overflow = a[MONTH] < 0 || a[MONTH] > 11 ? MONTH : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH]) ? DATE : a[HOUR] < 0 || a[HOUR] > 24 || a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0) ? HOUR : a[MINUTE] < 0 || a[MINUTE] > 59 ? MINUTE : a[SECOND] < 0 || a[SECOND] > 59 ? SECOND : a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND : -1;\n      if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {\n        overflow = DATE;\n      }\n      if (getParsingFlags(m)._overflowWeeks && overflow === -1) {\n        overflow = WEEK;\n      }\n      if (getParsingFlags(m)._overflowWeekday && overflow === -1) {\n        overflow = WEEKDAY;\n      }\n      getParsingFlags(m).overflow = overflow;\n    }\n    return m;\n  }\n\n  // iso 8601 regex\n  // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)\n  var extendedIsoRegex = /^\\s*((?:[+-]\\d{6}|\\d{4})-(?:\\d\\d-\\d\\d|W\\d\\d-\\d|W\\d\\d|\\d\\d\\d|\\d\\d))(?:(T| )(\\d\\d(?::\\d\\d(?::\\d\\d(?:[.,]\\d+)?)?)?)([+-]\\d\\d(?::?\\d\\d)?|\\s*Z)?)?$/,\n    basicIsoRegex = /^\\s*((?:[+-]\\d{6}|\\d{4})(?:\\d\\d\\d\\d|W\\d\\d\\d|W\\d\\d|\\d\\d\\d|\\d\\d|))(?:(T| )(\\d\\d(?:\\d\\d(?:\\d\\d(?:[.,]\\d+)?)?)?)([+-]\\d\\d(?::?\\d\\d)?|\\s*Z)?)?$/,\n    tzRegex = /Z|[+-]\\d\\d(?::?\\d\\d)?/,\n    isoDates = [['YYYYYY-MM-DD', /[+-]\\d{6}-\\d\\d-\\d\\d/], ['YYYY-MM-DD', /\\d{4}-\\d\\d-\\d\\d/], ['GGGG-[W]WW-E', /\\d{4}-W\\d\\d-\\d/], ['GGGG-[W]WW', /\\d{4}-W\\d\\d/, false], ['YYYY-DDD', /\\d{4}-\\d{3}/], ['YYYY-MM', /\\d{4}-\\d\\d/, false], ['YYYYYYMMDD', /[+-]\\d{10}/], ['YYYYMMDD', /\\d{8}/], ['GGGG[W]WWE', /\\d{4}W\\d{3}/], ['GGGG[W]WW', /\\d{4}W\\d{2}/, false], ['YYYYDDD', /\\d{7}/], ['YYYYMM', /\\d{6}/, false], ['YYYY', /\\d{4}/, false]],\n    // iso time formats and regexes\n    isoTimes = [['HH:mm:ss.SSSS', /\\d\\d:\\d\\d:\\d\\d\\.\\d+/], ['HH:mm:ss,SSSS', /\\d\\d:\\d\\d:\\d\\d,\\d+/], ['HH:mm:ss', /\\d\\d:\\d\\d:\\d\\d/], ['HH:mm', /\\d\\d:\\d\\d/], ['HHmmss.SSSS', /\\d\\d\\d\\d\\d\\d\\.\\d+/], ['HHmmss,SSSS', /\\d\\d\\d\\d\\d\\d,\\d+/], ['HHmmss', /\\d\\d\\d\\d\\d\\d/], ['HHmm', /\\d\\d\\d\\d/], ['HH', /\\d\\d/]],\n    aspNetJsonRegex = /^\\/?Date\\((-?\\d+)/i,\n    // RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3\n    rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\\s)?(\\d{1,2})\\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\\s(\\d{2,4})\\s(\\d\\d):(\\d\\d)(?::(\\d\\d))?\\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\\d{4}))$/,\n    obsOffsets = {\n      UT: 0,\n      GMT: 0,\n      EDT: -4 * 60,\n      EST: -5 * 60,\n      CDT: -5 * 60,\n      CST: -6 * 60,\n      MDT: -6 * 60,\n      MST: -7 * 60,\n      PDT: -7 * 60,\n      PST: -8 * 60\n    };\n\n  // date from iso format\n  function configFromISO(config) {\n    var i,\n      l,\n      string = config._i,\n      match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),\n      allowTime,\n      dateFormat,\n      timeFormat,\n      tzFormat,\n      isoDatesLen = isoDates.length,\n      isoTimesLen = isoTimes.length;\n    if (match) {\n      getParsingFlags(config).iso = true;\n      for (i = 0, l = isoDatesLen; i < l; i++) {\n        if (isoDates[i][1].exec(match[1])) {\n          dateFormat = isoDates[i][0];\n          allowTime = isoDates[i][2] !== false;\n          break;\n        }\n      }\n      if (dateFormat == null) {\n        config._isValid = false;\n        return;\n      }\n      if (match[3]) {\n        for (i = 0, l = isoTimesLen; i < l; i++) {\n          if (isoTimes[i][1].exec(match[3])) {\n            // match[2] should be 'T' or space\n            timeFormat = (match[2] || ' ') + isoTimes[i][0];\n            break;\n          }\n        }\n        if (timeFormat == null) {\n          config._isValid = false;\n          return;\n        }\n      }\n      if (!allowTime && timeFormat != null) {\n        config._isValid = false;\n        return;\n      }\n      if (match[4]) {\n        if (tzRegex.exec(match[4])) {\n          tzFormat = 'Z';\n        } else {\n          config._isValid = false;\n          return;\n        }\n      }\n      config._f = dateFormat + (timeFormat || '') + (tzFormat || '');\n      configFromStringAndFormat(config);\n    } else {\n      config._isValid = false;\n    }\n  }\n  function extractFromRFC2822Strings(yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {\n    var result = [untruncateYear(yearStr), defaultLocaleMonthsShort.indexOf(monthStr), parseInt(dayStr, 10), parseInt(hourStr, 10), parseInt(minuteStr, 10)];\n    if (secondStr) {\n      result.push(parseInt(secondStr, 10));\n    }\n    return result;\n  }\n  function untruncateYear(yearStr) {\n    var year = parseInt(yearStr, 10);\n    if (year <= 49) {\n      return 2000 + year;\n    } else if (year <= 999) {\n      return 1900 + year;\n    }\n    return year;\n  }\n  function preprocessRFC2822(s) {\n    // Remove comments and folding whitespace and replace multiple-spaces with a single space\n    return s.replace(/\\([^()]*\\)|[\\n\\t]/g, ' ').replace(/(\\s\\s+)/g, ' ').replace(/^\\s\\s*/, '').replace(/\\s\\s*$/, '');\n  }\n  function checkWeekday(weekdayStr, parsedInput, config) {\n    if (weekdayStr) {\n      // TODO: Replace the vanilla JS Date object with an independent day-of-week check.\n      var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr),\n        weekdayActual = new Date(parsedInput[0], parsedInput[1], parsedInput[2]).getDay();\n      if (weekdayProvided !== weekdayActual) {\n        getParsingFlags(config).weekdayMismatch = true;\n        config._isValid = false;\n        return false;\n      }\n    }\n    return true;\n  }\n  function calculateOffset(obsOffset, militaryOffset, numOffset) {\n    if (obsOffset) {\n      return obsOffsets[obsOffset];\n    } else if (militaryOffset) {\n      // the only allowed military tz is Z\n      return 0;\n    } else {\n      var hm = parseInt(numOffset, 10),\n        m = hm % 100,\n        h = (hm - m) / 100;\n      return h * 60 + m;\n    }\n  }\n\n  // date and time from ref 2822 format\n  function configFromRFC2822(config) {\n    var match = rfc2822.exec(preprocessRFC2822(config._i)),\n      parsedArray;\n    if (match) {\n      parsedArray = extractFromRFC2822Strings(match[4], match[3], match[2], match[5], match[6], match[7]);\n      if (!checkWeekday(match[1], parsedArray, config)) {\n        return;\n      }\n      config._a = parsedArray;\n      config._tzm = calculateOffset(match[8], match[9], match[10]);\n      config._d = createUTCDate.apply(null, config._a);\n      config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);\n      getParsingFlags(config).rfc2822 = true;\n    } else {\n      config._isValid = false;\n    }\n  }\n\n  // date from 1) ASP.NET, 2) ISO, 3) RFC 2822 formats, or 4) optional fallback if parsing isn't strict\n  function configFromString(config) {\n    var matched = aspNetJsonRegex.exec(config._i);\n    if (matched !== null) {\n      config._d = new Date(+matched[1]);\n      return;\n    }\n    configFromISO(config);\n    if (config._isValid === false) {\n      delete config._isValid;\n    } else {\n      return;\n    }\n    configFromRFC2822(config);\n    if (config._isValid === false) {\n      delete config._isValid;\n    } else {\n      return;\n    }\n    if (config._strict) {\n      config._isValid = false;\n    } else {\n      // Final attempt, use Input Fallback\n      hooks.createFromInputFallback(config);\n    }\n  }\n  hooks.createFromInputFallback = deprecate('value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' + 'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' + 'discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.', function (config) {\n    config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));\n  });\n\n  // Pick the first defined of two or three arguments.\n  function defaults(a, b, c) {\n    if (a != null) {\n      return a;\n    }\n    if (b != null) {\n      return b;\n    }\n    return c;\n  }\n\n  function currentDateArray(config) {\n    // hooks is actually the exported moment object\n    var nowValue = new Date(hooks.now());\n    if (config._useUTC) {\n      return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];\n    }\n    return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];\n  }\n\n  // convert an array to a date.\n  // the array should mirror the parameters below\n  // note: all values past the year are optional and will default to the lowest possible value.\n  // [year, month, day , hour, minute, second, millisecond]\n  function configFromArray(config) {\n    var i,\n      date,\n      input = [],\n      currentDate,\n      expectedWeekday,\n      yearToUse;\n    if (config._d) {\n      return;\n    }\n    currentDate = currentDateArray(config);\n\n    //compute day of the year from weeks and weekdays\n    if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {\n      dayOfYearFromWeekInfo(config);\n    }\n\n    //if the day of the year is set, figure out what it is\n    if (config._dayOfYear != null) {\n      yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);\n      if (config._dayOfYear > daysInYear(yearToUse) || config._dayOfYear === 0) {\n        getParsingFlags(config)._overflowDayOfYear = true;\n      }\n      date = createUTCDate(yearToUse, 0, config._dayOfYear);\n      config._a[MONTH] = date.getUTCMonth();\n      config._a[DATE] = date.getUTCDate();\n    }\n\n    // Default to current date.\n    // * if no year, month, day of month are given, default to today\n    // * if day of month is given, default month and year\n    // * if month is given, default only year\n    // * if year is given, don't default anything\n    for (i = 0; i < 3 && config._a[i] == null; ++i) {\n      config._a[i] = input[i] = currentDate[i];\n    }\n\n    // Zero out whatever was not defaulted, including time\n    for (; i < 7; i++) {\n      config._a[i] = input[i] = config._a[i] == null ? i === 2 ? 1 : 0 : config._a[i];\n    }\n\n    // Check for 24:00:00.000\n    if (config._a[HOUR] === 24 && config._a[MINUTE] === 0 && config._a[SECOND] === 0 && config._a[MILLISECOND] === 0) {\n      config._nextDay = true;\n      config._a[HOUR] = 0;\n    }\n    config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);\n    expectedWeekday = config._useUTC ? config._d.getUTCDay() : config._d.getDay();\n\n    // Apply timezone offset from input. The actual utcOffset can be changed\n    // with parseZone.\n    if (config._tzm != null) {\n      config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);\n    }\n    if (config._nextDay) {\n      config._a[HOUR] = 24;\n    }\n\n    // check for mismatching day of week\n    if (config._w && typeof config._w.d !== 'undefined' && config._w.d !== expectedWeekday) {\n      getParsingFlags(config).weekdayMismatch = true;\n    }\n  }\n  function dayOfYearFromWeekInfo(config) {\n    var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow, curWeek;\n    w = config._w;\n    if (w.GG != null || w.W != null || w.E != null) {\n      dow = 1;\n      doy = 4;\n\n      // TODO: We need to take the current isoWeekYear, but that depends on\n      // how we interpret now (local, utc, fixed offset). So create\n      // a now version of current config (take local/utc/offset flags, and\n      // create now).\n      weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);\n      week = defaults(w.W, 1);\n      weekday = defaults(w.E, 1);\n      if (weekday < 1 || weekday > 7) {\n        weekdayOverflow = true;\n      }\n    } else {\n      dow = config._locale._week.dow;\n      doy = config._locale._week.doy;\n      curWeek = weekOfYear(createLocal(), dow, doy);\n      weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);\n\n      // Default to current week.\n      week = defaults(w.w, curWeek.week);\n      if (w.d != null) {\n        // weekday -- low day numbers are considered next week\n        weekday = w.d;\n        if (weekday < 0 || weekday > 6) {\n          weekdayOverflow = true;\n        }\n      } else if (w.e != null) {\n        // local weekday -- counting starts from beginning of week\n        weekday = w.e + dow;\n        if (w.e < 0 || w.e > 6) {\n          weekdayOverflow = true;\n        }\n      } else {\n        // default to beginning of week\n        weekday = dow;\n      }\n    }\n    if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {\n      getParsingFlags(config)._overflowWeeks = true;\n    } else if (weekdayOverflow != null) {\n      getParsingFlags(config)._overflowWeekday = true;\n    } else {\n      temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);\n      config._a[YEAR] = temp.year;\n      config._dayOfYear = temp.dayOfYear;\n    }\n  }\n\n  // constant that refers to the ISO standard\n  hooks.ISO_8601 = function () {};\n\n  // constant that refers to the RFC 2822 form\n  hooks.RFC_2822 = function () {};\n\n  // date from string and format string\n  function configFromStringAndFormat(config) {\n    // TODO: Move this to another part of the creation flow to prevent circular deps\n    if (config._f === hooks.ISO_8601) {\n      configFromISO(config);\n      return;\n    }\n    if (config._f === hooks.RFC_2822) {\n      configFromRFC2822(config);\n      return;\n    }\n    config._a = [];\n    getParsingFlags(config).empty = true;\n\n    // This array is used to make a Date, either with `new Date` or `Date.UTC`\n    var string = '' + config._i,\n      i,\n      parsedInput,\n      tokens,\n      token,\n      skipped,\n      stringLength = string.length,\n      totalParsedInputLength = 0,\n      era,\n      tokenLen;\n    tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];\n    tokenLen = tokens.length;\n    for (i = 0; i < tokenLen; i++) {\n      token = tokens[i];\n      parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];\n      if (parsedInput) {\n        skipped = string.substr(0, string.indexOf(parsedInput));\n        if (skipped.length > 0) {\n          getParsingFlags(config).unusedInput.push(skipped);\n        }\n        string = string.slice(string.indexOf(parsedInput) + parsedInput.length);\n        totalParsedInputLength += parsedInput.length;\n      }\n      // don't parse if it's not a known token\n      if (formatTokenFunctions[token]) {\n        if (parsedInput) {\n          getParsingFlags(config).empty = false;\n        } else {\n          getParsingFlags(config).unusedTokens.push(token);\n        }\n        addTimeToArrayFromToken(token, parsedInput, config);\n      } else if (config._strict && !parsedInput) {\n        getParsingFlags(config).unusedTokens.push(token);\n      }\n    }\n\n    // add remaining unparsed input length to the string\n    getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;\n    if (string.length > 0) {\n      getParsingFlags(config).unusedInput.push(string);\n    }\n\n    // clear _12h flag if hour is <= 12\n    if (config._a[HOUR] <= 12 && getParsingFlags(config).bigHour === true && config._a[HOUR] > 0) {\n      getParsingFlags(config).bigHour = undefined;\n    }\n    getParsingFlags(config).parsedDateParts = config._a.slice(0);\n    getParsingFlags(config).meridiem = config._meridiem;\n    // handle meridiem\n    config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);\n\n    // handle era\n    era = getParsingFlags(config).era;\n    if (era !== null) {\n      config._a[YEAR] = config._locale.erasConvertYear(era, config._a[YEAR]);\n    }\n    configFromArray(config);\n    checkOverflow(config);\n  }\n  function meridiemFixWrap(locale, hour, meridiem) {\n    var isPm;\n    if (meridiem == null) {\n      // nothing to do\n      return hour;\n    }\n    if (locale.meridiemHour != null) {\n      return locale.meridiemHour(hour, meridiem);\n    } else if (locale.isPM != null) {\n      // Fallback\n      isPm = locale.isPM(meridiem);\n      if (isPm && hour < 12) {\n        hour += 12;\n      }\n      if (!isPm && hour === 12) {\n        hour = 0;\n      }\n      return hour;\n    } else {\n      // this is not supposed to happen\n      return hour;\n    }\n  }\n\n  // date from string and array of format strings\n  function configFromStringAndArray(config) {\n    var tempConfig,\n      bestMoment,\n      scoreToBeat,\n      i,\n      currentScore,\n      validFormatFound,\n      bestFormatIsValid = false,\n      configfLen = config._f.length;\n    if (configfLen === 0) {\n      getParsingFlags(config).invalidFormat = true;\n      config._d = new Date(NaN);\n      return;\n    }\n    for (i = 0; i < configfLen; i++) {\n      currentScore = 0;\n      validFormatFound = false;\n      tempConfig = copyConfig({}, config);\n      if (config._useUTC != null) {\n        tempConfig._useUTC = config._useUTC;\n      }\n      tempConfig._f = config._f[i];\n      configFromStringAndFormat(tempConfig);\n      if (isValid$2(tempConfig)) {\n        validFormatFound = true;\n      }\n\n      // if there is any input that was not parsed add a penalty for that format\n      currentScore += getParsingFlags(tempConfig).charsLeftOver;\n\n      //or tokens\n      currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;\n      getParsingFlags(tempConfig).score = currentScore;\n      if (!bestFormatIsValid) {\n        if (scoreToBeat == null || currentScore < scoreToBeat || validFormatFound) {\n          scoreToBeat = currentScore;\n          bestMoment = tempConfig;\n          if (validFormatFound) {\n            bestFormatIsValid = true;\n          }\n        }\n      } else {\n        if (currentScore < scoreToBeat) {\n          scoreToBeat = currentScore;\n          bestMoment = tempConfig;\n        }\n      }\n    }\n    extend(config, bestMoment || tempConfig);\n  }\n\n  function configFromObject(config) {\n    if (config._d) {\n      return;\n    }\n    var i = normalizeObjectUnits(config._i),\n      dayOrDate = i.day === undefined ? i.date : i.day;\n    config._a = map([i.year, i.month, dayOrDate, i.hour, i.minute, i.second, i.millisecond], function (obj) {\n      return obj && parseInt(obj, 10);\n    });\n    configFromArray(config);\n  }\n\n  function createFromConfig(config) {\n    var res = new Moment(checkOverflow(prepareConfig(config)));\n    if (res._nextDay) {\n      // Adding is smart enough around DST\n      res.add(1, 'd');\n      res._nextDay = undefined;\n    }\n    return res;\n  }\n  function prepareConfig(config) {\n    var input = config._i,\n      format = config._f;\n    config._locale = config._locale || getLocale(config._l);\n    if (input === null || format === undefined && input === '') {\n      return createInvalid$1({\n        nullInput: true\n      });\n    }\n    if (typeof input === 'string') {\n      config._i = input = config._locale.preparse(input);\n    }\n    if (isMoment(input)) {\n      return new Moment(checkOverflow(input));\n    } else if (isDate(input)) {\n      config._d = input;\n    } else if (isArray(format)) {\n      configFromStringAndArray(config);\n    } else if (format) {\n      configFromStringAndFormat(config);\n    } else {\n      configFromInput(config);\n    }\n    if (!isValid$2(config)) {\n      config._d = null;\n    }\n    return config;\n  }\n  function configFromInput(config) {\n    var input = config._i;\n    if (isUndefined(input)) {\n      config._d = new Date(hooks.now());\n    } else if (isDate(input)) {\n      config._d = new Date(input.valueOf());\n    } else if (typeof input === 'string') {\n      configFromString(config);\n    } else if (isArray(input)) {\n      config._a = map(input.slice(0), function (obj) {\n        return parseInt(obj, 10);\n      });\n      configFromArray(config);\n    } else if (isObject(input)) {\n      configFromObject(config);\n    } else if (isNumber(input)) {\n      // from milliseconds\n      config._d = new Date(input);\n    } else {\n      hooks.createFromInputFallback(config);\n    }\n  }\n  function createLocalOrUTC(input, format, locale, strict, isUTC) {\n    var c = {};\n    if (format === true || format === false) {\n      strict = format;\n      format = undefined;\n    }\n    if (locale === true || locale === false) {\n      strict = locale;\n      locale = undefined;\n    }\n    if (isObject(input) && isObjectEmpty(input) || isArray(input) && input.length === 0) {\n      input = undefined;\n    }\n    // object construction must be done this way.\n    // https://github.com/moment/moment/issues/1423\n    c._isAMomentObject = true;\n    c._useUTC = c._isUTC = isUTC;\n    c._l = locale;\n    c._i = input;\n    c._f = format;\n    c._strict = strict;\n    return createFromConfig(c);\n  }\n\n  function createLocal(input, format, locale, strict) {\n    return createLocalOrUTC(input, format, locale, strict, false);\n  }\n\n  var prototypeMin = deprecate('moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/', function () {\n      var other = createLocal.apply(null, arguments);\n      if (this.isValid() && other.isValid()) {\n        return other < this ? this : other;\n      } else {\n        return createInvalid$1();\n      }\n    }),\n    prototypeMax = deprecate('moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/', function () {\n      var other = createLocal.apply(null, arguments);\n      if (this.isValid() && other.isValid()) {\n        return other > this ? this : other;\n      } else {\n        return createInvalid$1();\n      }\n    });\n\n  // Pick a moment m from moments so that m[fn](other) is true for all\n  // other. This relies on the function fn to be transitive.\n  //\n  // moments should either be an array of moment objects or an array, whose\n  // first element is an array of moment objects.\n  function pickBy(fn, moments) {\n    var res, i;\n    if (moments.length === 1 && isArray(moments[0])) {\n      moments = moments[0];\n    }\n    if (!moments.length) {\n      return createLocal();\n    }\n    res = moments[0];\n    for (i = 1; i < moments.length; ++i) {\n      if (!moments[i].isValid() || moments[i][fn](res)) {\n        res = moments[i];\n      }\n    }\n    return res;\n  }\n\n  // TODO: Use [].sort instead?\n  function min() {\n    var args = [].slice.call(arguments, 0);\n    return pickBy('isBefore', args);\n  }\n  function max() {\n    var args = [].slice.call(arguments, 0);\n    return pickBy('isAfter', args);\n  }\n\n  var now = function () {\n    return Date.now ? Date.now() : +new Date();\n  };\n\n  var ordering = ['year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', 'millisecond'];\n  function isDurationValid(m) {\n    var key,\n      unitHasDecimal = false,\n      i,\n      orderLen = ordering.length;\n    for (key in m) {\n      if (hasOwnProp(m, key) && !(indexOf.call(ordering, key) !== -1 && (m[key] == null || !isNaN(m[key])))) {\n        return false;\n      }\n    }\n    for (i = 0; i < orderLen; ++i) {\n      if (m[ordering[i]]) {\n        if (unitHasDecimal) {\n          return false; // only allow non-integers for smallest unit\n        }\n        if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {\n          unitHasDecimal = true;\n        }\n      }\n    }\n    return true;\n  }\n  function isValid$1() {\n    return this._isValid;\n  }\n  function createInvalid() {\n    return createDuration(NaN);\n  }\n\n  function Duration(duration) {\n    var normalizedInput = normalizeObjectUnits(duration),\n      years = normalizedInput.year || 0,\n      quarters = normalizedInput.quarter || 0,\n      months = normalizedInput.month || 0,\n      weeks = normalizedInput.week || normalizedInput.isoWeek || 0,\n      days = normalizedInput.day || 0,\n      hours = normalizedInput.hour || 0,\n      minutes = normalizedInput.minute || 0,\n      seconds = normalizedInput.second || 0,\n      milliseconds = normalizedInput.millisecond || 0;\n    this._isValid = isDurationValid(normalizedInput);\n\n    // representation for dateAddRemove\n    this._milliseconds = +milliseconds + seconds * 1e3 +\n    // 1000\n    minutes * 6e4 +\n    // 1000 * 60\n    hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978\n    // Because of dateAddRemove treats 24 hours as different from a\n    // day when working around DST, we need to store them separately\n    this._days = +days + weeks * 7;\n    // It is impossible to translate months into days without knowing\n    // which months you are are talking about, so we have to store\n    // it separately.\n    this._months = +months + quarters * 3 + years * 12;\n    this._data = {};\n    this._locale = getLocale();\n    this._bubble();\n  }\n  function isDuration(obj) {\n    return obj instanceof Duration;\n  }\n\n  function absRound(number) {\n    if (number < 0) {\n      return Math.round(-1 * number) * -1;\n    } else {\n      return Math.round(number);\n    }\n  }\n\n  // compare two arrays, return the number of differences\n  function compareArrays(array1, array2, dontConvert) {\n    var len = Math.min(array1.length, array2.length),\n      lengthDiff = Math.abs(array1.length - array2.length),\n      diffs = 0,\n      i;\n    for (i = 0; i < len; i++) {\n      if (dontConvert && array1[i] !== array2[i] || !dontConvert && toInt(array1[i]) !== toInt(array2[i])) {\n        diffs++;\n      }\n    }\n    return diffs + lengthDiff;\n  }\n\n  // FORMATTING\n\n  function offset(token, separator) {\n    addFormatToken(token, 0, 0, function () {\n      var offset = this.utcOffset(),\n        sign = '+';\n      if (offset < 0) {\n        offset = -offset;\n        sign = '-';\n      }\n      return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~offset % 60, 2);\n    });\n  }\n  offset('Z', ':');\n  offset('ZZ', '');\n\n  // PARSING\n\n  addRegexToken('Z', matchShortOffset);\n  addRegexToken('ZZ', matchShortOffset);\n  addParseToken(['Z', 'ZZ'], function (input, array, config) {\n    config._useUTC = true;\n    config._tzm = offsetFromString(matchShortOffset, input);\n  });\n\n  // HELPERS\n\n  // timezone chunker\n  // '+10:00' > ['10',  '00']\n  // '-1530'  > ['-15', '30']\n  var chunkOffset = /([\\+\\-]|\\d\\d)/gi;\n  function offsetFromString(matcher, string) {\n    var matches = (string || '').match(matcher),\n      chunk,\n      parts,\n      minutes;\n    if (matches === null) {\n      return null;\n    }\n    chunk = matches[matches.length - 1] || [];\n    parts = (chunk + '').match(chunkOffset) || ['-', 0, 0];\n    minutes = +(parts[1] * 60) + toInt(parts[2]);\n    return minutes === 0 ? 0 : parts[0] === '+' ? minutes : -minutes;\n  }\n\n  // Return a moment from input, that is local/utc/zone equivalent to model.\n  function cloneWithOffset(input, model) {\n    var res, diff;\n    if (model._isUTC) {\n      res = model.clone();\n      diff = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();\n      // Use low-level api, because this fn is low-level api.\n      res._d.setTime(res._d.valueOf() + diff);\n      hooks.updateOffset(res, false);\n      return res;\n    } else {\n      return createLocal(input).local();\n    }\n  }\n  function getDateOffset(m) {\n    // On Firefox.24 Date#getTimezoneOffset returns a floating point.\n    // https://github.com/moment/moment/pull/1871\n    return -Math.round(m._d.getTimezoneOffset());\n  }\n\n  // HOOKS\n\n  // This function will be called whenever a moment is mutated.\n  // It is intended to keep the offset in sync with the timezone.\n  hooks.updateOffset = function () {};\n\n  // MOMENTS\n\n  // keepLocalTime = true means only change the timezone, without\n  // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->\n  // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset\n  // +0200, so we adjust the time as needed, to be valid.\n  //\n  // Keeping the time actually adds/subtracts (one hour)\n  // from the actual represented time. That is why we call updateOffset\n  // a second time. In case it wants us to change the offset again\n  // _changeInProgress == true case, then we have to adjust, because\n  // there is no such time in the given timezone.\n  function getSetOffset(input, keepLocalTime, keepMinutes) {\n    var offset = this._offset || 0,\n      localAdjust;\n    if (!this.isValid()) {\n      return input != null ? this : NaN;\n    }\n    if (input != null) {\n      if (typeof input === 'string') {\n        input = offsetFromString(matchShortOffset, input);\n        if (input === null) {\n          return this;\n        }\n      } else if (Math.abs(input) < 16 && !keepMinutes) {\n        input = input * 60;\n      }\n      if (!this._isUTC && keepLocalTime) {\n        localAdjust = getDateOffset(this);\n      }\n      this._offset = input;\n      this._isUTC = true;\n      if (localAdjust != null) {\n        this.add(localAdjust, 'm');\n      }\n      if (offset !== input) {\n        if (!keepLocalTime || this._changeInProgress) {\n          addSubtract$1(this, createDuration(input - offset, 'm'), 1, false);\n        } else if (!this._changeInProgress) {\n          this._changeInProgress = true;\n          hooks.updateOffset(this, true);\n          this._changeInProgress = null;\n        }\n      }\n      return this;\n    } else {\n      return this._isUTC ? offset : getDateOffset(this);\n    }\n  }\n  function getSetZone(input, keepLocalTime) {\n    if (input != null) {\n      if (typeof input !== 'string') {\n        input = -input;\n      }\n      this.utcOffset(input, keepLocalTime);\n      return this;\n    } else {\n      return -this.utcOffset();\n    }\n  }\n  function setOffsetToUTC(keepLocalTime) {\n    return this.utcOffset(0, keepLocalTime);\n  }\n  function setOffsetToLocal(keepLocalTime) {\n    if (this._isUTC) {\n      this.utcOffset(0, keepLocalTime);\n      this._isUTC = false;\n      if (keepLocalTime) {\n        this.subtract(getDateOffset(this), 'm');\n      }\n    }\n    return this;\n  }\n  function setOffsetToParsedOffset() {\n    if (this._tzm != null) {\n      this.utcOffset(this._tzm, false, true);\n    } else if (typeof this._i === 'string') {\n      var tZone = offsetFromString(matchOffset, this._i);\n      if (tZone != null) {\n        this.utcOffset(tZone);\n      } else {\n        this.utcOffset(0, true);\n      }\n    }\n    return this;\n  }\n  function hasAlignedHourOffset(input) {\n    if (!this.isValid()) {\n      return false;\n    }\n    input = input ? createLocal(input).utcOffset() : 0;\n    return (this.utcOffset() - input) % 60 === 0;\n  }\n  function isDaylightSavingTime() {\n    return this.utcOffset() > this.clone().month(0).utcOffset() || this.utcOffset() > this.clone().month(5).utcOffset();\n  }\n  function isDaylightSavingTimeShifted() {\n    if (!isUndefined(this._isDSTShifted)) {\n      return this._isDSTShifted;\n    }\n    var c = {},\n      other;\n    copyConfig(c, this);\n    c = prepareConfig(c);\n    if (c._a) {\n      other = c._isUTC ? createUTC(c._a) : createLocal(c._a);\n      this._isDSTShifted = this.isValid() && compareArrays(c._a, other.toArray()) > 0;\n    } else {\n      this._isDSTShifted = false;\n    }\n    return this._isDSTShifted;\n  }\n  function isLocal() {\n    return this.isValid() ? !this._isUTC : false;\n  }\n  function isUtcOffset() {\n    return this.isValid() ? this._isUTC : false;\n  }\n  function isUtc() {\n    return this.isValid() ? this._isUTC && this._offset === 0 : false;\n  }\n\n  // ASP.NET json date format regex\n  var aspNetRegex = /^(-|\\+)?(?:(\\d*)[. ])?(\\d+):(\\d+)(?::(\\d+)(\\.\\d*)?)?$/,\n    // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html\n    // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere\n    // and further modified to allow for strings containing both week and day\n    isoRegex = /^(-|\\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;\n  function createDuration(input, key) {\n    var duration = input,\n      // matching against regexp is expensive, do it on demand\n      match = null,\n      sign,\n      ret,\n      diffRes;\n    if (isDuration(input)) {\n      duration = {\n        ms: input._milliseconds,\n        d: input._days,\n        M: input._months\n      };\n    } else if (isNumber(input) || !isNaN(+input)) {\n      duration = {};\n      if (key) {\n        duration[key] = +input;\n      } else {\n        duration.milliseconds = +input;\n      }\n    } else if (match = aspNetRegex.exec(input)) {\n      sign = match[1] === '-' ? -1 : 1;\n      duration = {\n        y: 0,\n        d: toInt(match[DATE]) * sign,\n        h: toInt(match[HOUR]) * sign,\n        m: toInt(match[MINUTE]) * sign,\n        s: toInt(match[SECOND]) * sign,\n        ms: toInt(absRound(match[MILLISECOND] * 1000)) * sign // the millisecond decimal point is included in the match\n      };\n    } else if (match = isoRegex.exec(input)) {\n      sign = match[1] === '-' ? -1 : 1;\n      duration = {\n        y: parseIso(match[2], sign),\n        M: parseIso(match[3], sign),\n        w: parseIso(match[4], sign),\n        d: parseIso(match[5], sign),\n        h: parseIso(match[6], sign),\n        m: parseIso(match[7], sign),\n        s: parseIso(match[8], sign)\n      };\n    } else if (duration == null) {\n      // checks for null or undefined\n      duration = {};\n    } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {\n      diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));\n      duration = {};\n      duration.ms = diffRes.milliseconds;\n      duration.M = diffRes.months;\n    }\n    ret = new Duration(duration);\n    if (isDuration(input) && hasOwnProp(input, '_locale')) {\n      ret._locale = input._locale;\n    }\n    if (isDuration(input) && hasOwnProp(input, '_isValid')) {\n      ret._isValid = input._isValid;\n    }\n    return ret;\n  }\n  createDuration.fn = Duration.prototype;\n  createDuration.invalid = createInvalid;\n  function parseIso(inp, sign) {\n    // We'd normally use ~~inp for this, but unfortunately it also\n    // converts floats to ints.\n    // inp may be undefined, so careful calling replace on it.\n    var res = inp && parseFloat(inp.replace(',', '.'));\n    // apply sign while we're at it\n    return (isNaN(res) ? 0 : res) * sign;\n  }\n  function positiveMomentsDifference(base, other) {\n    var res = {};\n    res.months = other.month() - base.month() + (other.year() - base.year()) * 12;\n    if (base.clone().add(res.months, 'M').isAfter(other)) {\n      --res.months;\n    }\n    res.milliseconds = +other - +base.clone().add(res.months, 'M');\n    return res;\n  }\n  function momentsDifference(base, other) {\n    var res;\n    if (!(base.isValid() && other.isValid())) {\n      return {\n        milliseconds: 0,\n        months: 0\n      };\n    }\n    other = cloneWithOffset(other, base);\n    if (base.isBefore(other)) {\n      res = positiveMomentsDifference(base, other);\n    } else {\n      res = positiveMomentsDifference(other, base);\n      res.milliseconds = -res.milliseconds;\n      res.months = -res.months;\n    }\n    return res;\n  }\n\n  // TODO: remove 'name' arg after deprecation is removed\n  function createAdder(direction, name) {\n    return function (val, period) {\n      var dur, tmp;\n      //invert the arguments, but complain about it\n      if (period !== null && !isNaN(+period)) {\n        deprecateSimple(name, 'moment().' + name + '(period, number) is deprecated. Please use moment().' + name + '(number, period). ' + 'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');\n        tmp = val;\n        val = period;\n        period = tmp;\n      }\n      dur = createDuration(val, period);\n      addSubtract$1(this, dur, direction);\n      return this;\n    };\n  }\n  function addSubtract$1(mom, duration, isAdding, updateOffset) {\n    var milliseconds = duration._milliseconds,\n      days = absRound(duration._days),\n      months = absRound(duration._months);\n    if (!mom.isValid()) {\n      // No op\n      return;\n    }\n    updateOffset = updateOffset == null ? true : updateOffset;\n    if (months) {\n      setMonth(mom, get$2(mom, 'Month') + months * isAdding);\n    }\n    if (days) {\n      set(mom, 'Date', get$2(mom, 'Date') + days * isAdding);\n    }\n    if (milliseconds) {\n      mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);\n    }\n    if (updateOffset) {\n      hooks.updateOffset(mom, days || months);\n    }\n  }\n  var add$1 = createAdder(1, 'add'),\n    subtract$1 = createAdder(-1, 'subtract');\n\n  function isString(input) {\n    return typeof input === 'string' || input instanceof String;\n  }\n\n  // type MomentInput = Moment | Date | string | number | (number | string)[] | MomentInputObject | void; // null | undefined\n  function isMomentInput(input) {\n    return isMoment(input) || isDate(input) || isString(input) || isNumber(input) || isNumberOrStringArray(input) || isMomentInputObject(input) || input === null || input === undefined;\n  }\n  function isMomentInputObject(input) {\n    var objectTest = isObject(input) && !isObjectEmpty(input),\n      propertyTest = false,\n      properties = ['years', 'year', 'y', 'months', 'month', 'M', 'days', 'day', 'd', 'dates', 'date', 'D', 'hours', 'hour', 'h', 'minutes', 'minute', 'm', 'seconds', 'second', 's', 'milliseconds', 'millisecond', 'ms'],\n      i,\n      property,\n      propertyLen = properties.length;\n    for (i = 0; i < propertyLen; i += 1) {\n      property = properties[i];\n      propertyTest = propertyTest || hasOwnProp(input, property);\n    }\n    return objectTest && propertyTest;\n  }\n  function isNumberOrStringArray(input) {\n    var arrayTest = isArray(input),\n      dataTypeTest = false;\n    if (arrayTest) {\n      dataTypeTest = input.filter(function (item) {\n        return !isNumber(item) && isString(input);\n      }).length === 0;\n    }\n    return arrayTest && dataTypeTest;\n  }\n\n  function isCalendarSpec(input) {\n    var objectTest = isObject(input) && !isObjectEmpty(input),\n      propertyTest = false,\n      properties = ['sameDay', 'nextDay', 'lastDay', 'nextWeek', 'lastWeek', 'sameElse'],\n      i,\n      property;\n    for (i = 0; i < properties.length; i += 1) {\n      property = properties[i];\n      propertyTest = propertyTest || hasOwnProp(input, property);\n    }\n    return objectTest && propertyTest;\n  }\n\n  function getCalendarFormat(myMoment, now) {\n    var diff = myMoment.diff(now, 'days', true);\n    return diff < -6 ? 'sameElse' : diff < -1 ? 'lastWeek' : diff < 0 ? 'lastDay' : diff < 1 ? 'sameDay' : diff < 2 ? 'nextDay' : diff < 7 ? 'nextWeek' : 'sameElse';\n  }\n  function calendar(time, formats) {\n    // Support for single parameter, formats only overload to the calendar function\n    if (arguments.length === 1) {\n      if (!arguments[0]) {\n        time = undefined;\n        formats = undefined;\n      } else if (isMomentInput(arguments[0])) {\n        time = arguments[0];\n        formats = undefined;\n      } else if (isCalendarSpec(arguments[0])) {\n        formats = arguments[0];\n        time = undefined;\n      }\n    }\n    // We want to compare the start of today, vs this.\n    // Getting start-of-today depends on whether we're local/utc/offset or not.\n    var now = time || createLocal(),\n      sod = cloneWithOffset(now, this).startOf('day'),\n      format = hooks.calendarFormat(this, sod) || 'sameElse',\n      output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);\n    return this.format(output || this.localeData().calendar(format, this, createLocal(now)));\n  }\n\n  function clone$1() {\n    return new Moment(this);\n  }\n\n  function isAfter(input, units) {\n    var localInput = isMoment(input) ? input : createLocal(input);\n    if (!(this.isValid() && localInput.isValid())) {\n      return false;\n    }\n    units = normalizeUnits(units) || 'millisecond';\n    if (units === 'millisecond') {\n      return this.valueOf() > localInput.valueOf();\n    } else {\n      return localInput.valueOf() < this.clone().startOf(units).valueOf();\n    }\n  }\n  function isBefore(input, units) {\n    var localInput = isMoment(input) ? input : createLocal(input);\n    if (!(this.isValid() && localInput.isValid())) {\n      return false;\n    }\n    units = normalizeUnits(units) || 'millisecond';\n    if (units === 'millisecond') {\n      return this.valueOf() < localInput.valueOf();\n    } else {\n      return this.clone().endOf(units).valueOf() < localInput.valueOf();\n    }\n  }\n  function isBetween(from, to, units, inclusivity) {\n    var localFrom = isMoment(from) ? from : createLocal(from),\n      localTo = isMoment(to) ? to : createLocal(to);\n    if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {\n      return false;\n    }\n    inclusivity = inclusivity || '()';\n    return (inclusivity[0] === '(' ? this.isAfter(localFrom, units) : !this.isBefore(localFrom, units)) && (inclusivity[1] === ')' ? this.isBefore(localTo, units) : !this.isAfter(localTo, units));\n  }\n  function isSame(input, units) {\n    var localInput = isMoment(input) ? input : createLocal(input),\n      inputMs;\n    if (!(this.isValid() && localInput.isValid())) {\n      return false;\n    }\n    units = normalizeUnits(units) || 'millisecond';\n    if (units === 'millisecond') {\n      return this.valueOf() === localInput.valueOf();\n    } else {\n      inputMs = localInput.valueOf();\n      return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();\n    }\n  }\n  function isSameOrAfter(input, units) {\n    return this.isSame(input, units) || this.isAfter(input, units);\n  }\n  function isSameOrBefore(input, units) {\n    return this.isSame(input, units) || this.isBefore(input, units);\n  }\n\n  function diff(input, units, asFloat) {\n    var that, zoneDelta, output;\n    if (!this.isValid()) {\n      return NaN;\n    }\n    that = cloneWithOffset(input, this);\n    if (!that.isValid()) {\n      return NaN;\n    }\n    zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;\n    units = normalizeUnits(units);\n    switch (units) {\n      case 'year':\n        output = monthDiff(this, that) / 12;\n        break;\n      case 'month':\n        output = monthDiff(this, that);\n        break;\n      case 'quarter':\n        output = monthDiff(this, that) / 3;\n        break;\n      case 'second':\n        output = (this - that) / 1e3;\n        break;\n      // 1000\n      case 'minute':\n        output = (this - that) / 6e4;\n        break;\n      // 1000 * 60\n      case 'hour':\n        output = (this - that) / 36e5;\n        break;\n      // 1000 * 60 * 60\n      case 'day':\n        output = (this - that - zoneDelta) / 864e5;\n        break;\n      // 1000 * 60 * 60 * 24, negate dst\n      case 'week':\n        output = (this - that - zoneDelta) / 6048e5;\n        break;\n      // 1000 * 60 * 60 * 24 * 7, negate dst\n      default:\n        output = this - that;\n    }\n    return asFloat ? output : absFloor(output);\n  }\n  function monthDiff(a, b) {\n    if (a.date() < b.date()) {\n      // end-of-month calculations work correct when the start month has more\n      // days than the end month.\n      return -monthDiff(b, a);\n    }\n    // difference in months\n    var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month()),\n      // b is in (anchor - 1 month, anchor + 1 month)\n      anchor = a.clone().add(wholeMonthDiff, 'months'),\n      anchor2,\n      adjust;\n    if (b - anchor < 0) {\n      anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');\n      // linear across the month\n      adjust = (b - anchor) / (anchor - anchor2);\n    } else {\n      anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');\n      // linear across the month\n      adjust = (b - anchor) / (anchor2 - anchor);\n    }\n\n    //check for negative zero, return zero if negative zero\n    return -(wholeMonthDiff + adjust) || 0;\n  }\n\n  hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';\n  hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';\n  function toString() {\n    return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');\n  }\n  function toISOString$1(keepOffset) {\n    if (!this.isValid()) {\n      return null;\n    }\n    var utc = keepOffset !== true,\n      m = utc ? this.clone().utc() : this;\n    if (m.year() < 0 || m.year() > 9999) {\n      return formatMoment(m, utc ? 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYYYY-MM-DD[T]HH:mm:ss.SSSZ');\n    }\n    if (isFunction(Date.prototype.toISOString)) {\n      // native implementation is ~50x faster, use it when we can\n      if (utc) {\n        return this.toDate().toISOString();\n      } else {\n        return new Date(this.valueOf() + this.utcOffset() * 60 * 1000).toISOString().replace('Z', formatMoment(m, 'Z'));\n      }\n    }\n    return formatMoment(m, utc ? 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYY-MM-DD[T]HH:mm:ss.SSSZ');\n  }\n\n  /**\n   * Return a human readable representation of a moment that can\n   * also be evaluated to get a new moment which is the same\n   *\n   * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects\n   */\n  function inspect() {\n    if (!this.isValid()) {\n      return 'moment.invalid(/* ' + this._i + ' */)';\n    }\n    var func = 'moment',\n      zone = '',\n      prefix,\n      year,\n      datetime,\n      suffix;\n    if (!this.isLocal()) {\n      func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';\n      zone = 'Z';\n    }\n    prefix = '[' + func + '(\"]';\n    year = 0 <= this.year() && this.year() <= 9999 ? 'YYYY' : 'YYYYYY';\n    datetime = '-MM-DD[T]HH:mm:ss.SSS';\n    suffix = zone + '[\")]';\n    return this.format(prefix + year + datetime + suffix);\n  }\n  function format(inputString) {\n    if (!inputString) {\n      inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;\n    }\n    var output = formatMoment(this, inputString);\n    return this.localeData().postformat(output);\n  }\n\n  function from(time, withoutSuffix) {\n    if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {\n      return createDuration({\n        to: this,\n        from: time\n      }).locale(this.locale()).humanize(!withoutSuffix);\n    } else {\n      return this.localeData().invalidDate();\n    }\n  }\n  function fromNow(withoutSuffix) {\n    return this.from(createLocal(), withoutSuffix);\n  }\n\n  function to(time, withoutSuffix) {\n    if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {\n      return createDuration({\n        from: this,\n        to: time\n      }).locale(this.locale()).humanize(!withoutSuffix);\n    } else {\n      return this.localeData().invalidDate();\n    }\n  }\n  function toNow(withoutSuffix) {\n    return this.to(createLocal(), withoutSuffix);\n  }\n\n  // If passed a locale key, it will set the locale for this\n  // instance.  Otherwise, it will return the locale configuration\n  // variables for this instance.\n  function locale(key) {\n    var newLocaleData;\n    if (key === undefined) {\n      return this._locale._abbr;\n    } else {\n      newLocaleData = getLocale(key);\n      if (newLocaleData != null) {\n        this._locale = newLocaleData;\n      }\n      return this;\n    }\n  }\n  var lang = deprecate('moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.', function (key) {\n    if (key === undefined) {\n      return this.localeData();\n    } else {\n      return this.locale(key);\n    }\n  });\n  function localeData() {\n    return this._locale;\n  }\n\n  var MS_PER_SECOND = 1000,\n    MS_PER_MINUTE = 60 * MS_PER_SECOND,\n    MS_PER_HOUR = 60 * MS_PER_MINUTE,\n    MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR;\n\n  // actual modulo - handles negative numbers (for dates before 1970):\n  function mod(dividend, divisor) {\n    return (dividend % divisor + divisor) % divisor;\n  }\n  function localStartOfDate(y, m, d) {\n    // the date constructor remaps years 0-99 to 1900-1999\n    if (y < 100 && y >= 0) {\n      // preserve leap years using a full 400 year cycle, then reset\n      return new Date(y + 400, m, d) - MS_PER_400_YEARS;\n    } else {\n      return new Date(y, m, d).valueOf();\n    }\n  }\n  function utcStartOfDate(y, m, d) {\n    // Date.UTC remaps years 0-99 to 1900-1999\n    if (y < 100 && y >= 0) {\n      // preserve leap years using a full 400 year cycle, then reset\n      return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;\n    } else {\n      return Date.UTC(y, m, d);\n    }\n  }\n  function startOf(units) {\n    var time, startOfDate;\n    units = normalizeUnits(units);\n    if (units === undefined || units === 'millisecond' || !this.isValid()) {\n      return this;\n    }\n    startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;\n    switch (units) {\n      case 'year':\n        time = startOfDate(this.year(), 0, 1);\n        break;\n      case 'quarter':\n        time = startOfDate(this.year(), this.month() - this.month() % 3, 1);\n        break;\n      case 'month':\n        time = startOfDate(this.year(), this.month(), 1);\n        break;\n      case 'week':\n        time = startOfDate(this.year(), this.month(), this.date() - this.weekday());\n        break;\n      case 'isoWeek':\n        time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1));\n        break;\n      case 'day':\n      case 'date':\n        time = startOfDate(this.year(), this.month(), this.date());\n        break;\n      case 'hour':\n        time = this._d.valueOf();\n        time -= mod(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR);\n        break;\n      case 'minute':\n        time = this._d.valueOf();\n        time -= mod(time, MS_PER_MINUTE);\n        break;\n      case 'second':\n        time = this._d.valueOf();\n        time -= mod(time, MS_PER_SECOND);\n        break;\n    }\n    this._d.setTime(time);\n    hooks.updateOffset(this, true);\n    return this;\n  }\n  function endOf(units) {\n    var time, startOfDate;\n    units = normalizeUnits(units);\n    if (units === undefined || units === 'millisecond' || !this.isValid()) {\n      return this;\n    }\n    startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;\n    switch (units) {\n      case 'year':\n        time = startOfDate(this.year() + 1, 0, 1) - 1;\n        break;\n      case 'quarter':\n        time = startOfDate(this.year(), this.month() - this.month() % 3 + 3, 1) - 1;\n        break;\n      case 'month':\n        time = startOfDate(this.year(), this.month() + 1, 1) - 1;\n        break;\n      case 'week':\n        time = startOfDate(this.year(), this.month(), this.date() - this.weekday() + 7) - 1;\n        break;\n      case 'isoWeek':\n        time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1) + 7) - 1;\n        break;\n      case 'day':\n      case 'date':\n        time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;\n        break;\n      case 'hour':\n        time = this._d.valueOf();\n        time += MS_PER_HOUR - mod(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR) - 1;\n        break;\n      case 'minute':\n        time = this._d.valueOf();\n        time += MS_PER_MINUTE - mod(time, MS_PER_MINUTE) - 1;\n        break;\n      case 'second':\n        time = this._d.valueOf();\n        time += MS_PER_SECOND - mod(time, MS_PER_SECOND) - 1;\n        break;\n    }\n    this._d.setTime(time);\n    hooks.updateOffset(this, true);\n    return this;\n  }\n\n  function valueOf$1() {\n    return this._d.valueOf() - (this._offset || 0) * 60000;\n  }\n  function unix() {\n    return Math.floor(this.valueOf() / 1000);\n  }\n  function toDate() {\n    return new Date(this.valueOf());\n  }\n  function toArray() {\n    var m = this;\n    return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];\n  }\n  function toObject() {\n    var m = this;\n    return {\n      years: m.year(),\n      months: m.month(),\n      date: m.date(),\n      hours: m.hours(),\n      minutes: m.minutes(),\n      seconds: m.seconds(),\n      milliseconds: m.milliseconds()\n    };\n  }\n  function toJSON() {\n    // new Date(NaN).toJSON() === null\n    return this.isValid() ? this.toISOString() : null;\n  }\n\n  function isValid() {\n    return isValid$2(this);\n  }\n  function parsingFlags() {\n    return extend({}, getParsingFlags(this));\n  }\n  function invalidAt() {\n    return getParsingFlags(this).overflow;\n  }\n\n  function creationData() {\n    return {\n      input: this._i,\n      format: this._f,\n      locale: this._locale,\n      isUTC: this._isUTC,\n      strict: this._strict\n    };\n  }\n\n  addFormatToken('N', 0, 0, 'eraAbbr');\n  addFormatToken('NN', 0, 0, 'eraAbbr');\n  addFormatToken('NNN', 0, 0, 'eraAbbr');\n  addFormatToken('NNNN', 0, 0, 'eraName');\n  addFormatToken('NNNNN', 0, 0, 'eraNarrow');\n  addFormatToken('y', ['y', 1], 'yo', 'eraYear');\n  addFormatToken('y', ['yy', 2], 0, 'eraYear');\n  addFormatToken('y', ['yyy', 3], 0, 'eraYear');\n  addFormatToken('y', ['yyyy', 4], 0, 'eraYear');\n  addRegexToken('N', matchEraAbbr);\n  addRegexToken('NN', matchEraAbbr);\n  addRegexToken('NNN', matchEraAbbr);\n  addRegexToken('NNNN', matchEraName);\n  addRegexToken('NNNNN', matchEraNarrow);\n  addParseToken(['N', 'NN', 'NNN', 'NNNN', 'NNNNN'], function (input, array, config, token) {\n    var era = config._locale.erasParse(input, token, config._strict);\n    if (era) {\n      getParsingFlags(config).era = era;\n    } else {\n      getParsingFlags(config).invalidEra = input;\n    }\n  });\n  addRegexToken('y', matchUnsigned);\n  addRegexToken('yy', matchUnsigned);\n  addRegexToken('yyy', matchUnsigned);\n  addRegexToken('yyyy', matchUnsigned);\n  addRegexToken('yo', matchEraYearOrdinal);\n  addParseToken(['y', 'yy', 'yyy', 'yyyy'], YEAR);\n  addParseToken(['yo'], function (input, array, config, token) {\n    var match;\n    if (config._locale._eraYearOrdinalRegex) {\n      match = input.match(config._locale._eraYearOrdinalRegex);\n    }\n    if (config._locale.eraYearOrdinalParse) {\n      array[YEAR] = config._locale.eraYearOrdinalParse(input, match);\n    } else {\n      array[YEAR] = parseInt(input, 10);\n    }\n  });\n  function localeEras(m, format) {\n    var i,\n      l,\n      date,\n      eras = this._eras || getLocale('en')._eras;\n    for (i = 0, l = eras.length; i < l; ++i) {\n      switch (typeof eras[i].since) {\n        case 'string':\n          // truncate time\n          date = hooks(eras[i].since).startOf('day');\n          eras[i].since = date.valueOf();\n          break;\n      }\n      switch (typeof eras[i].until) {\n        case 'undefined':\n          eras[i].until = +Infinity;\n          break;\n        case 'string':\n          // truncate time\n          date = hooks(eras[i].until).startOf('day').valueOf();\n          eras[i].until = date.valueOf();\n          break;\n      }\n    }\n    return eras;\n  }\n  function localeErasParse(eraName, format, strict) {\n    var i,\n      l,\n      eras = this.eras(),\n      name,\n      abbr,\n      narrow;\n    eraName = eraName.toUpperCase();\n    for (i = 0, l = eras.length; i < l; ++i) {\n      name = eras[i].name.toUpperCase();\n      abbr = eras[i].abbr.toUpperCase();\n      narrow = eras[i].narrow.toUpperCase();\n      if (strict) {\n        switch (format) {\n          case 'N':\n          case 'NN':\n          case 'NNN':\n            if (abbr === eraName) {\n              return eras[i];\n            }\n            break;\n          case 'NNNN':\n            if (name === eraName) {\n              return eras[i];\n            }\n            break;\n          case 'NNNNN':\n            if (narrow === eraName) {\n              return eras[i];\n            }\n            break;\n        }\n      } else if ([name, abbr, narrow].indexOf(eraName) >= 0) {\n        return eras[i];\n      }\n    }\n  }\n  function localeErasConvertYear(era, year) {\n    var dir = era.since <= era.until ? +1 : -1;\n    if (year === undefined) {\n      return hooks(era.since).year();\n    } else {\n      return hooks(era.since).year() + (year - era.offset) * dir;\n    }\n  }\n  function getEraName() {\n    var i,\n      l,\n      val,\n      eras = this.localeData().eras();\n    for (i = 0, l = eras.length; i < l; ++i) {\n      // truncate time\n      val = this.clone().startOf('day').valueOf();\n      if (eras[i].since <= val && val <= eras[i].until) {\n        return eras[i].name;\n      }\n      if (eras[i].until <= val && val <= eras[i].since) {\n        return eras[i].name;\n      }\n    }\n    return '';\n  }\n  function getEraNarrow() {\n    var i,\n      l,\n      val,\n      eras = this.localeData().eras();\n    for (i = 0, l = eras.length; i < l; ++i) {\n      // truncate time\n      val = this.clone().startOf('day').valueOf();\n      if (eras[i].since <= val && val <= eras[i].until) {\n        return eras[i].narrow;\n      }\n      if (eras[i].until <= val && val <= eras[i].since) {\n        return eras[i].narrow;\n      }\n    }\n    return '';\n  }\n  function getEraAbbr() {\n    var i,\n      l,\n      val,\n      eras = this.localeData().eras();\n    for (i = 0, l = eras.length; i < l; ++i) {\n      // truncate time\n      val = this.clone().startOf('day').valueOf();\n      if (eras[i].since <= val && val <= eras[i].until) {\n        return eras[i].abbr;\n      }\n      if (eras[i].until <= val && val <= eras[i].since) {\n        return eras[i].abbr;\n      }\n    }\n    return '';\n  }\n  function getEraYear() {\n    var i,\n      l,\n      dir,\n      val,\n      eras = this.localeData().eras();\n    for (i = 0, l = eras.length; i < l; ++i) {\n      dir = eras[i].since <= eras[i].until ? +1 : -1;\n\n      // truncate time\n      val = this.clone().startOf('day').valueOf();\n      if (eras[i].since <= val && val <= eras[i].until || eras[i].until <= val && val <= eras[i].since) {\n        return (this.year() - hooks(eras[i].since).year()) * dir + eras[i].offset;\n      }\n    }\n    return this.year();\n  }\n  function erasNameRegex(isStrict) {\n    if (!hasOwnProp(this, '_erasNameRegex')) {\n      computeErasParse.call(this);\n    }\n    return isStrict ? this._erasNameRegex : this._erasRegex;\n  }\n  function erasAbbrRegex(isStrict) {\n    if (!hasOwnProp(this, '_erasAbbrRegex')) {\n      computeErasParse.call(this);\n    }\n    return isStrict ? this._erasAbbrRegex : this._erasRegex;\n  }\n  function erasNarrowRegex(isStrict) {\n    if (!hasOwnProp(this, '_erasNarrowRegex')) {\n      computeErasParse.call(this);\n    }\n    return isStrict ? this._erasNarrowRegex : this._erasRegex;\n  }\n  function matchEraAbbr(isStrict, locale) {\n    return locale.erasAbbrRegex(isStrict);\n  }\n  function matchEraName(isStrict, locale) {\n    return locale.erasNameRegex(isStrict);\n  }\n  function matchEraNarrow(isStrict, locale) {\n    return locale.erasNarrowRegex(isStrict);\n  }\n  function matchEraYearOrdinal(isStrict, locale) {\n    return locale._eraYearOrdinalRegex || matchUnsigned;\n  }\n  function computeErasParse() {\n    var abbrPieces = [],\n      namePieces = [],\n      narrowPieces = [],\n      mixedPieces = [],\n      i,\n      l,\n      erasName,\n      erasAbbr,\n      erasNarrow,\n      eras = this.eras();\n    for (i = 0, l = eras.length; i < l; ++i) {\n      erasName = regexEscape(eras[i].name);\n      erasAbbr = regexEscape(eras[i].abbr);\n      erasNarrow = regexEscape(eras[i].narrow);\n      namePieces.push(erasName);\n      abbrPieces.push(erasAbbr);\n      narrowPieces.push(erasNarrow);\n      mixedPieces.push(erasName);\n      mixedPieces.push(erasAbbr);\n      mixedPieces.push(erasNarrow);\n    }\n    this._erasRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');\n    this._erasNameRegex = new RegExp('^(' + namePieces.join('|') + ')', 'i');\n    this._erasAbbrRegex = new RegExp('^(' + abbrPieces.join('|') + ')', 'i');\n    this._erasNarrowRegex = new RegExp('^(' + narrowPieces.join('|') + ')', 'i');\n  }\n\n  // FORMATTING\n\n  addFormatToken(0, ['gg', 2], 0, function () {\n    return this.weekYear() % 100;\n  });\n  addFormatToken(0, ['GG', 2], 0, function () {\n    return this.isoWeekYear() % 100;\n  });\n  function addWeekYearFormatToken(token, getter) {\n    addFormatToken(0, [token, token.length], 0, getter);\n  }\n  addWeekYearFormatToken('gggg', 'weekYear');\n  addWeekYearFormatToken('ggggg', 'weekYear');\n  addWeekYearFormatToken('GGGG', 'isoWeekYear');\n  addWeekYearFormatToken('GGGGG', 'isoWeekYear');\n\n  // ALIASES\n\n  // PARSING\n\n  addRegexToken('G', matchSigned);\n  addRegexToken('g', matchSigned);\n  addRegexToken('GG', match1to2, match2);\n  addRegexToken('gg', match1to2, match2);\n  addRegexToken('GGGG', match1to4, match4);\n  addRegexToken('gggg', match1to4, match4);\n  addRegexToken('GGGGG', match1to6, match6);\n  addRegexToken('ggggg', match1to6, match6);\n  addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {\n    week[token.substr(0, 2)] = toInt(input);\n  });\n  addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {\n    week[token] = hooks.parseTwoDigitYear(input);\n  });\n\n  // MOMENTS\n\n  function getSetWeekYear(input) {\n    return getSetWeekYearHelper.call(this, input, this.week(), this.weekday() + this.localeData()._week.dow, this.localeData()._week.dow, this.localeData()._week.doy);\n  }\n  function getSetISOWeekYear(input) {\n    return getSetWeekYearHelper.call(this, input, this.isoWeek(), this.isoWeekday(), 1, 4);\n  }\n  function getISOWeeksInYear() {\n    return weeksInYear(this.year(), 1, 4);\n  }\n  function getISOWeeksInISOWeekYear() {\n    return weeksInYear(this.isoWeekYear(), 1, 4);\n  }\n  function getWeeksInYear() {\n    var weekInfo = this.localeData()._week;\n    return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);\n  }\n  function getWeeksInWeekYear() {\n    var weekInfo = this.localeData()._week;\n    return weeksInYear(this.weekYear(), weekInfo.dow, weekInfo.doy);\n  }\n  function getSetWeekYearHelper(input, week, weekday, dow, doy) {\n    var weeksTarget;\n    if (input == null) {\n      return weekOfYear(this, dow, doy).year;\n    } else {\n      weeksTarget = weeksInYear(input, dow, doy);\n      if (week > weeksTarget) {\n        week = weeksTarget;\n      }\n      return setWeekAll.call(this, input, week, weekday, dow, doy);\n    }\n  }\n  function setWeekAll(weekYear, week, weekday, dow, doy) {\n    var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),\n      date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);\n    this.year(date.getUTCFullYear());\n    this.month(date.getUTCMonth());\n    this.date(date.getUTCDate());\n    return this;\n  }\n\n  // FORMATTING\n\n  addFormatToken('Q', 0, 'Qo', 'quarter');\n\n  // PARSING\n\n  addRegexToken('Q', match1);\n  addParseToken('Q', function (input, array) {\n    array[MONTH] = (toInt(input) - 1) * 3;\n  });\n\n  // MOMENTS\n\n  function getSetQuarter(input) {\n    return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);\n  }\n\n  // FORMATTING\n\n  addFormatToken('D', ['DD', 2], 'Do', 'date');\n\n  // PARSING\n\n  addRegexToken('D', match1to2, match1to2NoLeadingZero);\n  addRegexToken('DD', match1to2, match2);\n  addRegexToken('Do', function (isStrict, locale) {\n    // TODO: Remove \"ordinalParse\" fallback in next major release.\n    return isStrict ? locale._dayOfMonthOrdinalParse || locale._ordinalParse : locale._dayOfMonthOrdinalParseLenient;\n  });\n  addParseToken(['D', 'DD'], DATE);\n  addParseToken('Do', function (input, array) {\n    array[DATE] = toInt(input.match(match1to2)[0]);\n  });\n\n  // MOMENTS\n\n  var getSetDayOfMonth = makeGetSet('Date', true);\n\n  // FORMATTING\n\n  addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');\n\n  // PARSING\n\n  addRegexToken('DDD', match1to3);\n  addRegexToken('DDDD', match3);\n  addParseToken(['DDD', 'DDDD'], function (input, array, config) {\n    config._dayOfYear = toInt(input);\n  });\n\n  // HELPERS\n\n  // MOMENTS\n\n  function getSetDayOfYear(input) {\n    var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;\n    return input == null ? dayOfYear : this.add(input - dayOfYear, 'd');\n  }\n\n  // FORMATTING\n\n  addFormatToken('m', ['mm', 2], 0, 'minute');\n\n  // PARSING\n\n  addRegexToken('m', match1to2, match1to2HasZero);\n  addRegexToken('mm', match1to2, match2);\n  addParseToken(['m', 'mm'], MINUTE);\n\n  // MOMENTS\n\n  var getSetMinute = makeGetSet('Minutes', false);\n\n  // FORMATTING\n\n  addFormatToken('s', ['ss', 2], 0, 'second');\n\n  // PARSING\n\n  addRegexToken('s', match1to2, match1to2HasZero);\n  addRegexToken('ss', match1to2, match2);\n  addParseToken(['s', 'ss'], SECOND);\n\n  // MOMENTS\n\n  var getSetSecond = makeGetSet('Seconds', false);\n\n  // FORMATTING\n\n  addFormatToken('S', 0, 0, function () {\n    return ~~(this.millisecond() / 100);\n  });\n  addFormatToken(0, ['SS', 2], 0, function () {\n    return ~~(this.millisecond() / 10);\n  });\n  addFormatToken(0, ['SSS', 3], 0, 'millisecond');\n  addFormatToken(0, ['SSSS', 4], 0, function () {\n    return this.millisecond() * 10;\n  });\n  addFormatToken(0, ['SSSSS', 5], 0, function () {\n    return this.millisecond() * 100;\n  });\n  addFormatToken(0, ['SSSSSS', 6], 0, function () {\n    return this.millisecond() * 1000;\n  });\n  addFormatToken(0, ['SSSSSSS', 7], 0, function () {\n    return this.millisecond() * 10000;\n  });\n  addFormatToken(0, ['SSSSSSSS', 8], 0, function () {\n    return this.millisecond() * 100000;\n  });\n  addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {\n    return this.millisecond() * 1000000;\n  });\n\n  // PARSING\n\n  addRegexToken('S', match1to3, match1);\n  addRegexToken('SS', match1to3, match2);\n  addRegexToken('SSS', match1to3, match3);\n  var token, getSetMillisecond;\n  for (token = 'SSSS'; token.length <= 9; token += 'S') {\n    addRegexToken(token, matchUnsigned);\n  }\n  function parseMs(input, array) {\n    array[MILLISECOND] = toInt(('0.' + input) * 1000);\n  }\n  for (token = 'S'; token.length <= 9; token += 'S') {\n    addParseToken(token, parseMs);\n  }\n  getSetMillisecond = makeGetSet('Milliseconds', false);\n\n  // FORMATTING\n\n  addFormatToken('z', 0, 0, 'zoneAbbr');\n  addFormatToken('zz', 0, 0, 'zoneName');\n\n  // MOMENTS\n\n  function getZoneAbbr() {\n    return this._isUTC ? 'UTC' : '';\n  }\n  function getZoneName() {\n    return this._isUTC ? 'Coordinated Universal Time' : '';\n  }\n\n  var proto$2 = Moment.prototype;\n  proto$2.add = add$1;\n  proto$2.calendar = calendar;\n  proto$2.clone = clone$1;\n  proto$2.diff = diff;\n  proto$2.endOf = endOf;\n  proto$2.format = format;\n  proto$2.from = from;\n  proto$2.fromNow = fromNow;\n  proto$2.to = to;\n  proto$2.toNow = toNow;\n  proto$2.get = stringGet;\n  proto$2.invalidAt = invalidAt;\n  proto$2.isAfter = isAfter;\n  proto$2.isBefore = isBefore;\n  proto$2.isBetween = isBetween;\n  proto$2.isSame = isSame;\n  proto$2.isSameOrAfter = isSameOrAfter;\n  proto$2.isSameOrBefore = isSameOrBefore;\n  proto$2.isValid = isValid;\n  proto$2.lang = lang;\n  proto$2.locale = locale;\n  proto$2.localeData = localeData;\n  proto$2.max = prototypeMax;\n  proto$2.min = prototypeMin;\n  proto$2.parsingFlags = parsingFlags;\n  proto$2.set = stringSet;\n  proto$2.startOf = startOf;\n  proto$2.subtract = subtract$1;\n  proto$2.toArray = toArray;\n  proto$2.toObject = toObject;\n  proto$2.toDate = toDate;\n  proto$2.toISOString = toISOString$1;\n  proto$2.inspect = inspect;\n  if (typeof Symbol !== 'undefined' && Symbol.for != null) {\n    proto$2[Symbol.for('nodejs.util.inspect.custom')] = function () {\n      return 'Moment<' + this.format() + '>';\n    };\n  }\n  proto$2.toJSON = toJSON;\n  proto$2.toString = toString;\n  proto$2.unix = unix;\n  proto$2.valueOf = valueOf$1;\n  proto$2.creationData = creationData;\n  proto$2.eraName = getEraName;\n  proto$2.eraNarrow = getEraNarrow;\n  proto$2.eraAbbr = getEraAbbr;\n  proto$2.eraYear = getEraYear;\n  proto$2.year = getSetYear;\n  proto$2.isLeapYear = getIsLeapYear;\n  proto$2.weekYear = getSetWeekYear;\n  proto$2.isoWeekYear = getSetISOWeekYear;\n  proto$2.quarter = proto$2.quarters = getSetQuarter;\n  proto$2.month = getSetMonth;\n  proto$2.daysInMonth = getDaysInMonth;\n  proto$2.week = proto$2.weeks = getSetWeek;\n  proto$2.isoWeek = proto$2.isoWeeks = getSetISOWeek;\n  proto$2.weeksInYear = getWeeksInYear;\n  proto$2.weeksInWeekYear = getWeeksInWeekYear;\n  proto$2.isoWeeksInYear = getISOWeeksInYear;\n  proto$2.isoWeeksInISOWeekYear = getISOWeeksInISOWeekYear;\n  proto$2.date = getSetDayOfMonth;\n  proto$2.day = proto$2.days = getSetDayOfWeek;\n  proto$2.weekday = getSetLocaleDayOfWeek;\n  proto$2.isoWeekday = getSetISODayOfWeek;\n  proto$2.dayOfYear = getSetDayOfYear;\n  proto$2.hour = proto$2.hours = getSetHour;\n  proto$2.minute = proto$2.minutes = getSetMinute;\n  proto$2.second = proto$2.seconds = getSetSecond;\n  proto$2.millisecond = proto$2.milliseconds = getSetMillisecond;\n  proto$2.utcOffset = getSetOffset;\n  proto$2.utc = setOffsetToUTC;\n  proto$2.local = setOffsetToLocal;\n  proto$2.parseZone = setOffsetToParsedOffset;\n  proto$2.hasAlignedHourOffset = hasAlignedHourOffset;\n  proto$2.isDST = isDaylightSavingTime;\n  proto$2.isLocal = isLocal;\n  proto$2.isUtcOffset = isUtcOffset;\n  proto$2.isUtc = isUtc;\n  proto$2.isUTC = isUtc;\n  proto$2.zoneAbbr = getZoneAbbr;\n  proto$2.zoneName = getZoneName;\n  proto$2.dates = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);\n  proto$2.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);\n  proto$2.years = deprecate('years accessor is deprecated. Use year instead', getSetYear);\n  proto$2.zone = deprecate('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/', getSetZone);\n  proto$2.isDSTShifted = deprecate('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information', isDaylightSavingTimeShifted);\n\n  function createUnix(input) {\n    return createLocal(input * 1000);\n  }\n  function createInZone() {\n    return createLocal.apply(null, arguments).parseZone();\n  }\n\n  function preParsePostFormat(string) {\n    return string;\n  }\n\n  var proto$1 = Locale.prototype;\n  proto$1.calendar = calendar$1;\n  proto$1.longDateFormat = longDateFormat;\n  proto$1.invalidDate = invalidDate;\n  proto$1.ordinal = ordinal;\n  proto$1.preparse = preParsePostFormat;\n  proto$1.postformat = preParsePostFormat;\n  proto$1.relativeTime = relativeTime$1;\n  proto$1.pastFuture = pastFuture;\n  proto$1.set = set$1;\n  proto$1.eras = localeEras;\n  proto$1.erasParse = localeErasParse;\n  proto$1.erasConvertYear = localeErasConvertYear;\n  proto$1.erasAbbrRegex = erasAbbrRegex;\n  proto$1.erasNameRegex = erasNameRegex;\n  proto$1.erasNarrowRegex = erasNarrowRegex;\n  proto$1.months = localeMonths;\n  proto$1.monthsShort = localeMonthsShort;\n  proto$1.monthsParse = localeMonthsParse;\n  proto$1.monthsRegex = monthsRegex;\n  proto$1.monthsShortRegex = monthsShortRegex;\n  proto$1.week = localeWeek;\n  proto$1.firstDayOfYear = localeFirstDayOfYear;\n  proto$1.firstDayOfWeek = localeFirstDayOfWeek;\n  proto$1.weekdays = localeWeekdays;\n  proto$1.weekdaysMin = localeWeekdaysMin;\n  proto$1.weekdaysShort = localeWeekdaysShort;\n  proto$1.weekdaysParse = localeWeekdaysParse;\n  proto$1.weekdaysRegex = weekdaysRegex;\n  proto$1.weekdaysShortRegex = weekdaysShortRegex;\n  proto$1.weekdaysMinRegex = weekdaysMinRegex;\n  proto$1.isPM = localeIsPM;\n  proto$1.meridiem = localeMeridiem;\n\n  function get$1(format, index, field, setter) {\n    var locale = getLocale(),\n      utc = createUTC().set(setter, index);\n    return locale[field](utc, format);\n  }\n  function listMonthsImpl(format, index, field) {\n    if (isNumber(format)) {\n      index = format;\n      format = undefined;\n    }\n    format = format || '';\n    if (index != null) {\n      return get$1(format, index, field, 'month');\n    }\n    var i,\n      out = [];\n    for (i = 0; i < 12; i++) {\n      out[i] = get$1(format, i, field, 'month');\n    }\n    return out;\n  }\n\n  // ()\n  // (5)\n  // (fmt, 5)\n  // (fmt)\n  // (true)\n  // (true, 5)\n  // (true, fmt, 5)\n  // (true, fmt)\n  function listWeekdaysImpl(localeSorted, format, index, field) {\n    if (typeof localeSorted === 'boolean') {\n      if (isNumber(format)) {\n        index = format;\n        format = undefined;\n      }\n      format = format || '';\n    } else {\n      format = localeSorted;\n      index = format;\n      localeSorted = false;\n      if (isNumber(format)) {\n        index = format;\n        format = undefined;\n      }\n      format = format || '';\n    }\n    var locale = getLocale(),\n      shift = localeSorted ? locale._week.dow : 0,\n      i,\n      out = [];\n    if (index != null) {\n      return get$1(format, (index + shift) % 7, field, 'day');\n    }\n    for (i = 0; i < 7; i++) {\n      out[i] = get$1(format, (i + shift) % 7, field, 'day');\n    }\n    return out;\n  }\n  function listMonths(format, index) {\n    return listMonthsImpl(format, index, 'months');\n  }\n  function listMonthsShort(format, index) {\n    return listMonthsImpl(format, index, 'monthsShort');\n  }\n  function listWeekdays(localeSorted, format, index) {\n    return listWeekdaysImpl(localeSorted, format, index, 'weekdays');\n  }\n  function listWeekdaysShort(localeSorted, format, index) {\n    return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');\n  }\n  function listWeekdaysMin(localeSorted, format, index) {\n    return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');\n  }\n\n  getSetGlobalLocale('en', {\n    eras: [{\n      since: '0001-01-01',\n      until: +Infinity,\n      offset: 1,\n      name: 'Anno Domini',\n      narrow: 'AD',\n      abbr: 'AD'\n    }, {\n      since: '0000-12-31',\n      until: -Infinity,\n      offset: 1,\n      name: 'Before Christ',\n      narrow: 'BC',\n      abbr: 'BC'\n    }],\n    dayOfMonthOrdinalParse: /\\d{1,2}(th|st|nd|rd)/,\n    ordinal: function (number) {\n      var b = number % 10,\n        output = toInt(number % 100 / 10) === 1 ? 'th' : b === 1 ? 'st' : b === 2 ? 'nd' : b === 3 ? 'rd' : 'th';\n      return number + output;\n    }\n  });\n\n  // Side effect imports\n  hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', getSetGlobalLocale);\n  hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', getLocale);\n\n  var mathAbs = Math.abs;\n  function abs$1() {\n    var data = this._data;\n    this._milliseconds = mathAbs(this._milliseconds);\n    this._days = mathAbs(this._days);\n    this._months = mathAbs(this._months);\n    data.milliseconds = mathAbs(data.milliseconds);\n    data.seconds = mathAbs(data.seconds);\n    data.minutes = mathAbs(data.minutes);\n    data.hours = mathAbs(data.hours);\n    data.months = mathAbs(data.months);\n    data.years = mathAbs(data.years);\n    return this;\n  }\n\n  function addSubtract(duration, input, value, direction) {\n    var other = createDuration(input, value);\n    duration._milliseconds += direction * other._milliseconds;\n    duration._days += direction * other._days;\n    duration._months += direction * other._months;\n    return duration._bubble();\n  }\n\n  // supports only 2.0-style add(1, 's') or add(duration)\n  function add(input, value) {\n    return addSubtract(this, input, value, 1);\n  }\n\n  // supports only 2.0-style subtract(1, 's') or subtract(duration)\n  function subtract(input, value) {\n    return addSubtract(this, input, value, -1);\n  }\n\n  function absCeil(number) {\n    if (number < 0) {\n      return Math.floor(number);\n    } else {\n      return Math.ceil(number);\n    }\n  }\n\n  function bubble() {\n    var milliseconds = this._milliseconds,\n      days = this._days,\n      months = this._months,\n      data = this._data,\n      seconds,\n      minutes,\n      hours,\n      years,\n      monthsFromDays;\n\n    // if we have a mix of positive and negative values, bubble down first\n    // check: https://github.com/moment/moment/issues/2166\n    if (!(milliseconds >= 0 && days >= 0 && months >= 0 || milliseconds <= 0 && days <= 0 && months <= 0)) {\n      milliseconds += absCeil(monthsToDays(months) + days) * 864e5;\n      days = 0;\n      months = 0;\n    }\n\n    // The following code bubbles up values, see the tests for\n    // examples of what that means.\n    data.milliseconds = milliseconds % 1000;\n    seconds = absFloor(milliseconds / 1000);\n    data.seconds = seconds % 60;\n    minutes = absFloor(seconds / 60);\n    data.minutes = minutes % 60;\n    hours = absFloor(minutes / 60);\n    data.hours = hours % 24;\n    days += absFloor(hours / 24);\n\n    // convert days to months\n    monthsFromDays = absFloor(daysToMonths(days));\n    months += monthsFromDays;\n    days -= absCeil(monthsToDays(monthsFromDays));\n\n    // 12 months -> 1 year\n    years = absFloor(months / 12);\n    months %= 12;\n    data.days = days;\n    data.months = months;\n    data.years = years;\n    return this;\n  }\n  function daysToMonths(days) {\n    // 400 years have 146097 days (taking into account leap year rules)\n    // 400 years have 12 months === 4800\n    return days * 4800 / 146097;\n  }\n  function monthsToDays(months) {\n    // the reverse of daysToMonths\n    return months * 146097 / 4800;\n  }\n\n  function as(units) {\n    if (!this.isValid()) {\n      return NaN;\n    }\n    var days,\n      months,\n      milliseconds = this._milliseconds;\n    units = normalizeUnits(units);\n    if (units === 'month' || units === 'quarter' || units === 'year') {\n      days = this._days + milliseconds / 864e5;\n      months = this._months + daysToMonths(days);\n      switch (units) {\n        case 'month':\n          return months;\n        case 'quarter':\n          return months / 3;\n        case 'year':\n          return months / 12;\n      }\n    } else {\n      // handle milliseconds separately because of floating point math errors (issue #1867)\n      days = this._days + Math.round(monthsToDays(this._months));\n      switch (units) {\n        case 'week':\n          return days / 7 + milliseconds / 6048e5;\n        case 'day':\n          return days + milliseconds / 864e5;\n        case 'hour':\n          return days * 24 + milliseconds / 36e5;\n        case 'minute':\n          return days * 1440 + milliseconds / 6e4;\n        case 'second':\n          return days * 86400 + milliseconds / 1000;\n        // Math.floor prevents floating point math errors here\n        case 'millisecond':\n          return Math.floor(days * 864e5) + milliseconds;\n        default:\n          throw new Error('Unknown unit ' + units);\n      }\n    }\n  }\n  function makeAs(alias) {\n    return function () {\n      return this.as(alias);\n    };\n  }\n  var asMilliseconds = makeAs('ms'),\n    asSeconds = makeAs('s'),\n    asMinutes = makeAs('m'),\n    asHours = makeAs('h'),\n    asDays = makeAs('d'),\n    asWeeks = makeAs('w'),\n    asMonths = makeAs('M'),\n    asQuarters = makeAs('Q'),\n    asYears = makeAs('y'),\n    valueOf = asMilliseconds;\n\n  function clone() {\n    return createDuration(this);\n  }\n\n  function get(units) {\n    units = normalizeUnits(units);\n    return this.isValid() ? this[units + 's']() : NaN;\n  }\n  function makeGetter(name) {\n    return function () {\n      return this.isValid() ? this._data[name] : NaN;\n    };\n  }\n  var milliseconds = makeGetter('milliseconds'),\n    seconds = makeGetter('seconds'),\n    minutes = makeGetter('minutes'),\n    hours = makeGetter('hours'),\n    days = makeGetter('days'),\n    months = makeGetter('months'),\n    years = makeGetter('years');\n  function weeks() {\n    return absFloor(this.days() / 7);\n  }\n\n  var round = Math.round,\n    thresholds = {\n      ss: 44,\n      // a few seconds to seconds\n      s: 45,\n      // seconds to minute\n      m: 45,\n      // minutes to hour\n      h: 22,\n      // hours to day\n      d: 26,\n      // days to month/week\n      w: null,\n      // weeks to month\n      M: 11 // months to year\n    };\n\n  // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize\n  function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {\n    return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);\n  }\n  function relativeTime(posNegDuration, withoutSuffix, thresholds, locale) {\n    var duration = createDuration(posNegDuration).abs(),\n      seconds = round(duration.as('s')),\n      minutes = round(duration.as('m')),\n      hours = round(duration.as('h')),\n      days = round(duration.as('d')),\n      months = round(duration.as('M')),\n      weeks = round(duration.as('w')),\n      years = round(duration.as('y')),\n      a = seconds <= thresholds.ss && ['s', seconds] || seconds < thresholds.s && ['ss', seconds] || minutes <= 1 && ['m'] || minutes < thresholds.m && ['mm', minutes] || hours <= 1 && ['h'] || hours < thresholds.h && ['hh', hours] || days <= 1 && ['d'] || days < thresholds.d && ['dd', days];\n    if (thresholds.w != null) {\n      a = a || weeks <= 1 && ['w'] || weeks < thresholds.w && ['ww', weeks];\n    }\n    a = a || months <= 1 && ['M'] || months < thresholds.M && ['MM', months] || years <= 1 && ['y'] || ['yy', years];\n    a[2] = withoutSuffix;\n    a[3] = +posNegDuration > 0;\n    a[4] = locale;\n    return substituteTimeAgo.apply(null, a);\n  }\n\n  // This function allows you to set the rounding function for relative time strings\n  function getSetRelativeTimeRounding(roundingFunction) {\n    if (roundingFunction === undefined) {\n      return round;\n    }\n    if (typeof roundingFunction === 'function') {\n      round = roundingFunction;\n      return true;\n    }\n    return false;\n  }\n\n  // This function allows you to set a threshold for relative time strings\n  function getSetRelativeTimeThreshold(threshold, limit) {\n    if (thresholds[threshold] === undefined) {\n      return false;\n    }\n    if (limit === undefined) {\n      return thresholds[threshold];\n    }\n    thresholds[threshold] = limit;\n    if (threshold === 's') {\n      thresholds.ss = limit - 1;\n    }\n    return true;\n  }\n  function humanize(argWithSuffix, argThresholds) {\n    if (!this.isValid()) {\n      return this.localeData().invalidDate();\n    }\n    var withSuffix = false,\n      th = thresholds,\n      locale,\n      output;\n    if (typeof argWithSuffix === 'object') {\n      argThresholds = argWithSuffix;\n      argWithSuffix = false;\n    }\n    if (typeof argWithSuffix === 'boolean') {\n      withSuffix = argWithSuffix;\n    }\n    if (typeof argThresholds === 'object') {\n      th = Object.assign({}, thresholds, argThresholds);\n      if (argThresholds.s != null && argThresholds.ss == null) {\n        th.ss = argThresholds.s - 1;\n      }\n    }\n    locale = this.localeData();\n    output = relativeTime(this, !withSuffix, th, locale);\n    if (withSuffix) {\n      output = locale.pastFuture(+this, output);\n    }\n    return locale.postformat(output);\n  }\n\n  var abs = Math.abs;\n  function sign(x) {\n    return (x > 0) - (x < 0) || +x;\n  }\n  function toISOString() {\n    // for ISO strings we do not use the normal bubbling rules:\n    //  * milliseconds bubble up until they become hours\n    //  * days do not bubble at all\n    //  * months bubble up until they become years\n    // This is because there is no context-free conversion between hours and days\n    // (think of clock changes)\n    // and also not between days and months (28-31 days per month)\n    if (!this.isValid()) {\n      return this.localeData().invalidDate();\n    }\n    var seconds = abs(this._milliseconds) / 1000,\n      days = abs(this._days),\n      months = abs(this._months),\n      minutes,\n      hours,\n      years,\n      s,\n      total = this.asSeconds(),\n      totalSign,\n      ymSign,\n      daysSign,\n      hmsSign;\n    if (!total) {\n      // this is the same as C#'s (Noda) and python (isodate)...\n      // but not other JS (goog.date)\n      return 'P0D';\n    }\n\n    // 3600 seconds -> 60 minutes -> 1 hour\n    minutes = absFloor(seconds / 60);\n    hours = absFloor(minutes / 60);\n    seconds %= 60;\n    minutes %= 60;\n\n    // 12 months -> 1 year\n    years = absFloor(months / 12);\n    months %= 12;\n\n    // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js\n    s = seconds ? seconds.toFixed(3).replace(/\\.?0+$/, '') : '';\n    totalSign = total < 0 ? '-' : '';\n    ymSign = sign(this._months) !== sign(total) ? '-' : '';\n    daysSign = sign(this._days) !== sign(total) ? '-' : '';\n    hmsSign = sign(this._milliseconds) !== sign(total) ? '-' : '';\n    return totalSign + 'P' + (years ? ymSign + years + 'Y' : '') + (months ? ymSign + months + 'M' : '') + (days ? daysSign + days + 'D' : '') + (hours || minutes || seconds ? 'T' : '') + (hours ? hmsSign + hours + 'H' : '') + (minutes ? hmsSign + minutes + 'M' : '') + (seconds ? hmsSign + s + 'S' : '');\n  }\n\n  var proto = Duration.prototype;\n  proto.isValid = isValid$1;\n  proto.abs = abs$1;\n  proto.add = add;\n  proto.subtract = subtract;\n  proto.as = as;\n  proto.asMilliseconds = asMilliseconds;\n  proto.asSeconds = asSeconds;\n  proto.asMinutes = asMinutes;\n  proto.asHours = asHours;\n  proto.asDays = asDays;\n  proto.asWeeks = asWeeks;\n  proto.asMonths = asMonths;\n  proto.asQuarters = asQuarters;\n  proto.asYears = asYears;\n  proto.valueOf = valueOf;\n  proto._bubble = bubble;\n  proto.clone = clone;\n  proto.get = get;\n  proto.milliseconds = milliseconds;\n  proto.seconds = seconds;\n  proto.minutes = minutes;\n  proto.hours = hours;\n  proto.days = days;\n  proto.weeks = weeks;\n  proto.months = months;\n  proto.years = years;\n  proto.humanize = humanize;\n  proto.toISOString = toISOString;\n  proto.toString = toISOString;\n  proto.toJSON = toISOString;\n  proto.locale = locale;\n  proto.localeData = localeData;\n  proto.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', toISOString);\n  proto.lang = lang;\n\n  // FORMATTING\n\n  addFormatToken('X', 0, 0, 'unix');\n  addFormatToken('x', 0, 0, 'valueOf');\n\n  // PARSING\n\n  addRegexToken('x', matchSigned);\n  addRegexToken('X', matchTimestamp);\n  addParseToken('X', function (input, array, config) {\n    config._d = new Date(parseFloat(input) * 1000);\n  });\n  addParseToken('x', function (input, array, config) {\n    config._d = new Date(toInt(input));\n  });\n\n  //! moment.js\n  hooks.version = '2.30.1';\n  setHookCallback(createLocal);\n  hooks.fn = proto$2;\n  hooks.min = min;\n  hooks.max = max;\n  hooks.now = now;\n  hooks.utc = createUTC;\n  hooks.unix = createUnix;\n  hooks.months = listMonths;\n  hooks.isDate = isDate;\n  hooks.locale = getSetGlobalLocale;\n  hooks.invalid = createInvalid$1;\n  hooks.duration = createDuration;\n  hooks.isMoment = isMoment;\n  hooks.weekdays = listWeekdays;\n  hooks.parseZone = createInZone;\n  hooks.localeData = getLocale;\n  hooks.isDuration = isDuration;\n  hooks.monthsShort = listMonthsShort;\n  hooks.weekdaysMin = listWeekdaysMin;\n  hooks.defineLocale = defineLocale;\n  hooks.updateLocale = updateLocale;\n  hooks.locales = listLocales;\n  hooks.weekdaysShort = listWeekdaysShort;\n  hooks.normalizeUnits = normalizeUnits;\n  hooks.relativeTimeRounding = getSetRelativeTimeRounding;\n  hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;\n  hooks.calendarFormat = getCalendarFormat;\n  hooks.prototype = proto$2;\n\n  // currently HTML5 input type only supports 24-hour formats\n  hooks.HTML5_FMT = {\n    DATETIME_LOCAL: 'YYYY-MM-DDTHH:mm',\n    // <input type=\"datetime-local\" />\n    DATETIME_LOCAL_SECONDS: 'YYYY-MM-DDTHH:mm:ss',\n    // <input type=\"datetime-local\" step=\"1\" />\n    DATETIME_LOCAL_MS: 'YYYY-MM-DDTHH:mm:ss.SSS',\n    // <input type=\"datetime-local\" step=\"0.001\" />\n    DATE: 'YYYY-MM-DD',\n    // <input type=\"date\" />\n    TIME: 'HH:mm',\n    // <input type=\"time\" />\n    TIME_SECONDS: 'HH:mm:ss',\n    // <input type=\"time\" step=\"1\" />\n    TIME_MS: 'HH:mm:ss.SSS',\n    // <input type=\"time\" step=\"0.001\" />\n    WEEK: 'GGGG-[W]WW',\n    // <input type=\"week\" />\n    MONTH: 'YYYY-MM' // <input type=\"month\" />\n  };\n\n  //! moment.js locale configuration\n  function plural(word, num) {\n    var forms = word.split('_');\n    return num % 10 === 1 && num % 100 !== 11 ? forms[0] : num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20) ? forms[1] : forms[2];\n  }\n  function relativeTimeWithPlural(number, withoutSuffix, key) {\n    var format = {\n      ss: withoutSuffix ? 'секунда_секунды_секунд' : 'секунду_секунды_секунд',\n      mm: withoutSuffix ? 'минута_минуты_минут' : 'минуту_минуты_минут',\n      hh: 'час_часа_часов',\n      dd: 'день_дня_дней',\n      ww: 'неделя_недели_недель',\n      MM: 'месяц_месяца_месяцев',\n      yy: 'год_года_лет'\n    };\n    if (key === 'm') {\n      return withoutSuffix ? 'минута' : 'минуту';\n    } else {\n      return number + ' ' + plural(format[key], +number);\n    }\n  }\n  var monthsParse = [/^янв/i, /^фев/i, /^мар/i, /^апр/i, /^ма[йя]/i, /^июн/i, /^июл/i, /^авг/i, /^сен/i, /^окт/i, /^ноя/i, /^дек/i];\n\n  // http://new.gramota.ru/spravka/rules/139-prop : § 103\n  // Сокращения месяцев: http://new.gramota.ru/spravka/buro/search-answer?s=242637\n  // CLDR data:          http://www.unicode.org/cldr/charts/28/summary/ru.html#1753\n  hooks.defineLocale('ru', {\n    months: {\n      format: 'января_февраля_марта_апреля_мая_июня_июля_августа_сентября_октября_ноября_декабря'.split('_'),\n      standalone: 'январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь'.split('_')\n    },\n    monthsShort: {\n      // по CLDR именно \"июл.\" и \"июн.\", но какой смысл менять букву на точку?\n      format: 'янв._февр._мар._апр._мая_июня_июля_авг._сент._окт._нояб._дек.'.split('_'),\n      standalone: 'янв._февр._март_апр._май_июнь_июль_авг._сент._окт._нояб._дек.'.split('_')\n    },\n    weekdays: {\n      standalone: 'воскресенье_понедельник_вторник_среда_четверг_пятница_суббота'.split('_'),\n      format: 'воскресенье_понедельник_вторник_среду_четверг_пятницу_субботу'.split('_'),\n      isFormat: /\\[ ?[Вв] ?(?:прошлую|следующую|эту)? ?] ?dddd/\n    },\n    weekdaysShort: 'вс_пн_вт_ср_чт_пт_сб'.split('_'),\n    weekdaysMin: 'вс_пн_вт_ср_чт_пт_сб'.split('_'),\n    monthsParse: monthsParse,\n    longMonthsParse: monthsParse,\n    shortMonthsParse: monthsParse,\n    // полные названия с падежами, по три буквы, для некоторых, по 4 буквы, сокращения с точкой и без точки\n    monthsRegex: /^(январ[ья]|янв\\.?|феврал[ья]|февр?\\.?|марта?|мар\\.?|апрел[ья]|апр\\.?|ма[йя]|июн[ья]|июн\\.?|июл[ья]|июл\\.?|августа?|авг\\.?|сентябр[ья]|сент?\\.?|октябр[ья]|окт\\.?|ноябр[ья]|нояб?\\.?|декабр[ья]|дек\\.?)/i,\n    // копия предыдущего\n    monthsShortRegex: /^(январ[ья]|янв\\.?|феврал[ья]|февр?\\.?|марта?|мар\\.?|апрел[ья]|апр\\.?|ма[йя]|июн[ья]|июн\\.?|июл[ья]|июл\\.?|августа?|авг\\.?|сентябр[ья]|сент?\\.?|октябр[ья]|окт\\.?|ноябр[ья]|нояб?\\.?|декабр[ья]|дек\\.?)/i,\n    // полные названия с падежами\n    monthsStrictRegex: /^(январ[яь]|феврал[яь]|марта?|апрел[яь]|ма[яй]|июн[яь]|июл[яь]|августа?|сентябр[яь]|октябр[яь]|ноябр[яь]|декабр[яь])/i,\n    // Выражение, которое соответствует только сокращённым формам\n    monthsShortStrictRegex: /^(янв\\.|февр?\\.|мар[т.]|апр\\.|ма[яй]|июн[ья.]|июл[ья.]|авг\\.|сент?\\.|окт\\.|нояб?\\.|дек\\.)/i,\n    longDateFormat: {\n      LT: 'H:mm',\n      LTS: 'H:mm:ss',\n      L: 'DD.MM.YYYY',\n      LL: 'D MMMM YYYY г.',\n      LLL: 'D MMMM YYYY г., H:mm',\n      LLLL: 'dddd, D MMMM YYYY г., H:mm'\n    },\n    calendar: {\n      sameDay: '[Сегодня, в] LT',\n      nextDay: '[Завтра, в] LT',\n      lastDay: '[Вчера, в] LT',\n      nextWeek: function (now) {\n        if (now.week() !== this.week()) {\n          switch (this.day()) {\n            case 0:\n              return '[В следующее] dddd, [в] LT';\n            case 1:\n            case 2:\n            case 4:\n              return '[В следующий] dddd, [в] LT';\n            case 3:\n            case 5:\n            case 6:\n              return '[В следующую] dddd, [в] LT';\n          }\n        } else {\n          if (this.day() === 2) {\n            return '[Во] dddd, [в] LT';\n          } else {\n            return '[В] dddd, [в] LT';\n          }\n        }\n      },\n      lastWeek: function (now) {\n        if (now.week() !== this.week()) {\n          switch (this.day()) {\n            case 0:\n              return '[В прошлое] dddd, [в] LT';\n            case 1:\n            case 2:\n            case 4:\n              return '[В прошлый] dddd, [в] LT';\n            case 3:\n            case 5:\n            case 6:\n              return '[В прошлую] dddd, [в] LT';\n          }\n        } else {\n          if (this.day() === 2) {\n            return '[Во] dddd, [в] LT';\n          } else {\n            return '[В] dddd, [в] LT';\n          }\n        }\n      },\n      sameElse: 'L'\n    },\n    relativeTime: {\n      future: 'через %s',\n      past: '%s назад',\n      s: 'несколько секунд',\n      ss: relativeTimeWithPlural,\n      m: relativeTimeWithPlural,\n      mm: relativeTimeWithPlural,\n      h: 'час',\n      hh: relativeTimeWithPlural,\n      d: 'день',\n      dd: relativeTimeWithPlural,\n      w: 'неделя',\n      ww: relativeTimeWithPlural,\n      M: 'месяц',\n      MM: relativeTimeWithPlural,\n      y: 'год',\n      yy: relativeTimeWithPlural\n    },\n    meridiemParse: /ночи|утра|дня|вечера/i,\n    isPM: function (input) {\n      return /^(дня|вечера)$/.test(input);\n    },\n    meridiem: function (hour, minute, isLower) {\n      if (hour < 4) {\n        return 'ночи';\n      } else if (hour < 12) {\n        return 'утра';\n      } else if (hour < 17) {\n        return 'дня';\n      } else {\n        return 'вечера';\n      }\n    },\n    dayOfMonthOrdinalParse: /\\d{1,2}-(й|го|я)/,\n    ordinal: function (number, period) {\n      switch (period) {\n        case 'M':\n        case 'd':\n        case 'DDD':\n          return number + '-й';\n        case 'D':\n          return number + '-го';\n        case 'w':\n        case 'W':\n          return number + '-я';\n        default:\n          return number;\n      }\n    },\n    week: {\n      dow: 1,\n      // Monday is the first day of the week.\n      doy: 4 // The week that contains Jan 4th is the first week of the year.\n    }\n  });\n\n  var ColumnsDateHuman = /*#__PURE__*/function (_Column) {\n    /**\n     * Инициализация\n     * @param {TableInstance} table\n     * @param {Object}              options\n     */\n    function ColumnsDateHuman(table, options) {\n      var _this;\n      _classCallCheck(this, ColumnsDateHuman);\n      options = $.extend(true, {\n        type: 'dateHuman',\n        field: null,\n        label: null,\n        show: true,\n        width: null,\n        attr: {},\n        attrHeader: {},\n        render: null\n      }, options);\n      _this = _callSuper(this, ColumnsDateHuman, [table, options]);\n      _defineProperty(_this, \"_lang\", null);\n      _this._lang = table.getOptions().lang;\n      return _this;\n    }\n\n    /**\n     * Формирование контента\n     * @param {string|number|Date} content\n     * @param {object} record\n     * @returns {string}\n     */\n    _inherits(ColumnsDateHuman, _Column);\n    return _createClass(ColumnsDateHuman, [{\n      key: \"render\",\n      value: function render(content, record) {\n        if (['string', 'number'].indexOf(_typeof(content)) < 0 || !(content instanceof Date)) {\n          return '';\n        }\n        try {\n          if (content !== '') {\n            var dateContent = content instanceof Date ? content : new Date(content);\n            var dateFormat = hooks(dateContent).format('MM.DD.yyyy HH:mm:ss');\n            content = hooks(dateContent).locale(this._lang).fromNow();\n            content = '<span title=\"' + dateFormat + '\">' + content + '</span>';\n          }\n        } catch (e) {\n          console.warn(e);\n        }\n        return content;\n      }\n    }]);\n  }(Column);\n\n  var ColumnsHtml = /*#__PURE__*/function (_Column) {\n    /**\n     * Инициализация\n     * @param {TableInstance} table\n     * @param {Object}              options\n     */\n    function ColumnsHtml(table, options) {\n      var _this;\n      _classCallCheck(this, ColumnsHtml);\n      options = $.extend(true, {\n        type: 'html',\n        field: null,\n        label: null,\n        show: true,\n        width: null,\n        minWidth: null,\n        maxWidth: null,\n        noWrap: null,\n        noWrapToggle: null,\n        attr: {},\n        attrHeader: {},\n        render: null\n      }, options);\n      _this = _callSuper(this, ColumnsHtml, [table, options]);\n      var tableOptions = _this._table.getOptions();\n      if (_this._options.noWrap || _this._options.noWrap === null && tableOptions.noWrap) {\n        if (!_this._options.attr) {\n          _this._options.attr = {\n            \"class\": 'coreui_table__no-wrap'\n          };\n        } else {\n          _this._options.attr = TableUtils.mergeAttr(_this._options.attr, {\n            \"class\": 'coreui_table__no-wrap'\n          });\n        }\n        _this._options.noWrap = true;\n        if (_this._options.noWrapToggle || _this._options.noWrapToggle === null && tableOptions.noWrapToggle) {\n          _this._options.noWrapToggle = true;\n        }\n      }\n      return _this;\n    }\n\n    /**\n     * Конвертирование значения колонки в текст\n     * @param {*} columnValue\n     * @returns {string}\n     */\n    _inherits(ColumnsHtml, _Column);\n    return _createClass(ColumnsHtml, [{\n      key: \"convertToString\",\n      value: function convertToString(columnValue) {\n        if (['string', 'number'].indexOf(_typeof(columnValue)) >= 0) {\n          return String(columnValue).replace(/<[^>]*>?/gm, '');\n        } else {\n          return '';\n        }\n      }\n\n      /**\n       * Формирование контента\n       * @param {string|HTMLElement|jQuery} content\n       * @param {object}                    record\n       * @returns {string}\n       */\n    }, {\n      key: \"render\",\n      value: function render(content, record) {\n        if (['string', 'bigint', 'symbol', 'number'].indexOf(_typeof(content)) < 0 && !(content instanceof HTMLElement) && !(window.hasOwnProperty('jQuery') && content instanceof jQuery)) {\n          return '';\n        }\n        if (this._options.noWrap) {\n          content = $('<div></div>').append(content);\n          if (this._options.noWrapToggle) {\n            content = $(content).after('<i class=\"bi bi-caret-down-fill toggle\"></i>');\n          }\n        }\n        return content;\n      }\n    }]);\n  }(Column);\n\n  var ColumnsNumber = /*#__PURE__*/function (_Column) {\n    /**\n     * Инициализация\n     * @param {TableInstance} table\n     * @param {Object}              options\n     */\n    function ColumnsNumber(table, options) {\n      var _this;\n      _classCallCheck(this, ColumnsNumber);\n      options = $.extend(true, {\n        type: 'number',\n        field: null,\n        label: null,\n        show: true,\n        width: null,\n        minWidth: null,\n        maxWidth: null,\n        noWrap: null,\n        noWrapToggle: null,\n        attr: {},\n        attrHeader: {},\n        render: null\n      }, options);\n      _this = _callSuper(this, ColumnsNumber, [table, options]);\n      var tableOptions = _this._table.getOptions();\n      if (_this._options.noWrap || _this._options.noWrap === null && tableOptions.noWrap) {\n        if (!_this._options.attr) {\n          _this._options.attr = {\n            \"class\": 'coreui_table__no-wrap'\n          };\n        } else {\n          _this._options.attr = TableUtils.mergeAttr(_this._options.attr, {\n            \"class\": 'coreui_table__no-wrap'\n          });\n        }\n        _this._options.noWrap = true;\n        if (_this._options.noWrapToggle || _this._options.noWrapToggle === null && tableOptions.noWrapToggle) {\n          _this._options.noWrapToggle = true;\n        }\n      }\n      return _this;\n    }\n\n    /**\n     * Формирование контента\n     * @param {string} content\n     * @param {object} record\n     * @returns {string}\n     */\n    _inherits(ColumnsNumber, _Column);\n    return _createClass(ColumnsNumber, [{\n      key: \"render\",\n      value: function render(content, record) {\n        if (['string', 'bigint', 'symbol', 'number'].indexOf(_typeof(content)) < 0) {\n          return '';\n        }\n        content = String(content).replace(/,/g, '.').replace(/[^0-9\\-\\.]/g, '').replace(/[\\s]{2,}/g, ' ').replace(/(?<!(\\.\\d*|^.{0}))(?=(\\d{3})+(?!\\d))/g, '$1 ').replace(/\\- /g, '-');\n        if (this._options.noWrap) {\n          content = '<div>' + content + '</div>';\n          if (this._options.noWrapToggle) {\n            content += '<i class=\"bi bi-caret-down-fill toggle\"></i>';\n          }\n        }\n        return content;\n      }\n    }]);\n  }(Column);\n\n  var ColumnsMoney = /*#__PURE__*/function (_Column) {\n    /**\n     * Инициализация\n     * @param {TableInstance} table\n     * @param {Object}              options\n     */\n    function ColumnsMoney(table, options) {\n      var _this;\n      _classCallCheck(this, ColumnsMoney);\n      options = $.extend(true, {\n        type: 'money',\n        field: null,\n        label: null,\n        show: true,\n        width: null,\n        minWidth: null,\n        maxWidth: null,\n        noWrap: null,\n        noWrapToggle: null,\n        currency: null,\n        attr: {\n          \"class\": 'text-end'\n        },\n        attrHeader: {\n          \"class\": 'text-end'\n        },\n        render: null\n      }, options);\n      _this = _callSuper(this, ColumnsMoney, [table, options]);\n      var tableOptions = _this._table.getOptions();\n      if (_this._options.noWrap || _this._options.noWrap === null && tableOptions.noWrap) {\n        if (!_this._options.attr) {\n          _this._options.attr = {\n            \"class\": 'coreui_table__no-wrap'\n          };\n        } else {\n          _this._options.attr = TableUtils.mergeAttr(_this._options.attr, {\n            \"class\": 'coreui_table__no-wrap'\n          });\n        }\n        _this._options.noWrap = true;\n        if (_this._options.noWrapToggle || _this._options.noWrapToggle === null && tableOptions.noWrapToggle) {\n          _this._options.noWrapToggle = true;\n        }\n      }\n      return _this;\n    }\n\n    /**\n     * Конвертирование значения колонки в текст\n     * @param {*} columnValue\n     * @returns {string}\n     */\n    _inherits(ColumnsMoney, _Column);\n    return _createClass(ColumnsMoney, [{\n      key: \"convertToString\",\n      value: function convertToString(columnValue) {\n        var content = '';\n        if (['string', 'number'].indexOf(_typeof(columnValue)) >= 0) {\n          if (isNaN(content)) {\n            content = content.toString().replace(/(\\d)(?=(\\d\\d\\d)+([^\\d]|$))/g, '$1 ');\n          } else {\n            content = Number(content).toFixed(2).toString();\n            content = content.replace(/(\\d)(?=(\\d\\d\\d)+([^\\d]|$))/g, '$1 ');\n          }\n        }\n        return content;\n      }\n\n      /**\n       * Формирование контента\n       * @param {string} content\n       * @param {object} record\n       * @returns {string}\n       */\n    }, {\n      key: \"render\",\n      value: function render(content, record) {\n        if (['string', 'bigint', 'symbol', 'number'].indexOf(_typeof(content)) < 0) {\n          return '';\n        }\n        if (isNaN(content)) {\n          content = content.toString().replace(/(\\d)(?=(\\d\\d\\d)+([^\\d]|$))/g, '$1 ');\n        } else {\n          content = Number(content).toFixed(2).toString();\n          content = content.replace(/(\\d)(?=(\\d\\d\\d)+([^\\d]|$))/g, '$1 ');\n        }\n        if (this._options.currency && ['string', 'number'].indexOf(_typeof(this._options.currency)) >= 0) {\n          content += ' <small class=\"text-muted\">' + this._options.currency + '</small>';\n        }\n        if (this._options.noWrap) {\n          content = '<div>' + content + '</div>';\n          if (this._options.noWrapToggle) {\n            content += '<i class=\"bi bi-caret-down-fill toggle\"></i>';\n          }\n        }\n        return content;\n      }\n    }]);\n  }(Column);\n\n  var ColumnsNumbers = /*#__PURE__*/function (_Column) {\n    /**\n     * Инициализация\n     * @param {TableInstance} table\n     * @param {Object}              options\n     */\n    function ColumnsNumbers(table, options) {\n      _classCallCheck(this, ColumnsNumbers);\n      options = $.extend(true, {\n        type: 'numbers',\n        label: '№',\n        width: 20,\n        attr: {\n          \"class\": 'text-end'\n        },\n        attrHeader: null\n      }, options);\n      return _callSuper(this, ColumnsNumbers, [table, options]);\n    }\n\n    /**\n     * Формирование контента\n     * @param {string} content\n     * @param {object} record\n     * @returns {string}\n     */\n    _inherits(ColumnsNumbers, _Column);\n    return _createClass(ColumnsNumbers, [{\n      key: \"render\",\n      value: function render(content, record) {\n        return this._table._recordsNumber;\n      }\n    }]);\n  }(Column);\n\n  var ColumnsSelect = /*#__PURE__*/function (_Column) {\n    /**\n     * Инициализация\n     * @param {TableInstance} table\n     * @param {Object}              options\n     */\n    function ColumnsSelect(table, options) {\n      var _this;\n      _classCallCheck(this, ColumnsSelect);\n      var originalOptions = {\n        type: 'select',\n        field: null,\n        label: '',\n        show: true,\n        width: 35,\n        attr: {\n          \"class\": 'coreui-table__select_container text-center'\n        },\n        attrHeader: {\n          \"class\": 'text-center'\n        }\n      };\n      if (options.hasOwnProperty('attr')) {\n        options.attr = TableUtils.mergeAttr(originalOptions.attr, options.attr);\n      }\n      if (options.hasOwnProperty('attrHeader')) {\n        options.attrHeader = TableUtils.mergeAttr(originalOptions.attrHeader, options.attrHeader);\n      }\n      options = $.extend(true, originalOptions, options);\n      _this = _callSuper(this, ColumnsSelect, [table, options]);\n      _this._options.label = tpl['columns/select_label.html'];\n\n      // Показ строк\n      table.on('records_show', function () {\n        var selects = TableElements.getRowsSelects(table.getId());\n        var selectAll = TableElements.getRowsSelectAll(table.getId());\n\n        // Отмена обработки нажатия в select колонках\n        $(selects).click(function (event) {\n          event.stopPropagation();\n        });\n\n        // Выбор всех строк\n        selectAll.click(function (event) {\n          if ($(this).is(':checked')) {\n            table.selectAll();\n          } else {\n            table.unselectAll();\n          }\n        });\n      });\n      return _this;\n    }\n\n    /**\n     * Получение списка методов которые можно совершать с ячейкой строки\n     * @param {jQuery} content\n     * @param {string} field\n     * @param {object} record\n     */\n    _inherits(ColumnsSelect, _Column);\n    return _createClass(ColumnsSelect, [{\n      key: \"getActions\",\n      value: function getActions(content, field, record) {\n        return {\n          setActive: function setActive() {\n            if (content) {\n              $(content).prop('checked', true).trigger('click');\n            }\n          },\n          setInactive: function setInactive() {\n            if (content) {\n              $(content).prop('checked', false).trigger('click');\n            }\n          }\n        };\n      }\n\n      /**\n       * Формирование контента\n       * @param {string} content\n       * @param {object} record\n       * @returns {jQuery}\n       */\n    }, {\n      key: \"render\",\n      value: function render(content, record) {\n        var select = $(TableUtils.render(tpl['columns/select.html'], {\n          index: record.index\n        }));\n        var that = this;\n\n        // Выбор строки\n        select.click(function () {\n          var tr = TableElements.getTrByIndex(that._table.getId(), record.index);\n          if (!tr) {\n            return;\n          }\n          if ($(this).is(':checked')) {\n            $(tr).addClass('table-primary');\n            TablePrivate._trigger(that._table, 'record_select', [record]);\n          } else {\n            $(tr).removeClass('table-primary');\n            TablePrivate._trigger(that._table, 'record_unselect', [record]);\n          }\n        });\n        return select;\n      }\n    }]);\n  }(Column);\n\n  var ColumnsSwitch = /*#__PURE__*/function (_Column) {\n    /**\n     * Инициализация\n     * @param {TableInstance} table\n     * @param {Object}              options\n     */\n    function ColumnsSwitch(table, options) {\n      var _this;\n      _classCallCheck(this, ColumnsSwitch);\n      options = $.extend(true, {\n        type: 'switch',\n        label: '',\n        field: '',\n        show: true,\n        disabled: false,\n        width: 5,\n        valueY: 1,\n        valueN: 0,\n        attr: {\n          \"class\": 'coreui-table__switch_container'\n        },\n        attrHeader: {},\n        onChange: null\n      }, options);\n      _this = _callSuper(this, ColumnsSwitch, [table, options]);\n\n      // Показ строк\n      table.on('records_show', function () {\n        var containers = TableElements.getRowsSwitches(table.getId());\n\n        // Отмена обработки нажатия в switch колонках\n        containers.click(function (event) {\n          event.stopPropagation();\n        });\n      });\n      return _this;\n    }\n\n    /**\n     * Получение списка методов которые можно совершать с ячейкой строки\n     * @param {jQuery} content\n     * @param {string} field\n     * @param {object} record\n     */\n    _inherits(ColumnsSwitch, _Column);\n    return _createClass(ColumnsSwitch, [{\n      key: \"getActions\",\n      value: function getActions(content, field, record) {\n        return {\n          /**\n           * Активация переключателя\n           */\n          setActive: function setActive() {\n            if (content) {\n              $('.coreui-table__switch', content).prop('checked', true).trigger('change');\n            }\n          },\n          /**\n           * Деактивация переключателя\n           */\n          setInactive: function setInactive() {\n            if (content) {\n              $('.coreui-table__switch', content).prop('checked', false).trigger('change');\n            }\n          }\n        };\n      }\n\n      /**\n       * Формирование контента\n       * @param {string} content\n       * @param {object} record\n       * @returns {jQuery}\n       */\n    }, {\n      key: \"render\",\n      value: function render(content, record) {\n        var isChecked = content === this._options.valueY;\n        var formSwitch = $(TableUtils.render(tpl['columns/switch.html'], {\n          index: record.index,\n          field: this._options.field,\n          disabled: this._options.disabled,\n          checked: isChecked\n        }));\n\n        // События нажатия на переключатель\n        var that = this;\n        var table = this._table;\n        $('.coreui-table__switch', formSwitch).change(function (event) {\n          var input = this;\n          table._records.map(function (recordTable) {\n            if (record.index === recordTable.index) {\n              recordTable.data[that._options.field] = input.checked ? that._options.valueY : that._options.valueN;\n              return false;\n            }\n          });\n          if (that._options.hasOwnProperty('onChange') && (typeof that._options.onChange === 'function' || typeof that._options.onChange === 'string')) {\n            var prop = {\n              table: table,\n              record: record,\n              input: input,\n              event: event\n            };\n            if (typeof that._options.onChange === 'function') {\n              that._options.onChange(prop);\n            } else {\n              var func = new Function('prop', that._options.onChange);\n              func(prop);\n            }\n            return false;\n          }\n        });\n        return formSwitch;\n      }\n    }]);\n  }(Column);\n\n  var ColumnsText = /*#__PURE__*/function (_Column) {\n    /**\n     * Инициализация\n     * @param {TableInstance} table\n     * @param {Object}              options\n     */\n    function ColumnsText(table, options) {\n      var _this;\n      _classCallCheck(this, ColumnsText);\n      options = $.extend(true, {\n        type: 'text',\n        field: null,\n        label: null,\n        show: true,\n        showLabel: true,\n        width: null,\n        minWidth: null,\n        maxWidth: null,\n        attr: null,\n        noWrap: null,\n        noWrapToggle: null,\n        attrHeader: null,\n        render: null\n      }, options);\n      _this = _callSuper(this, ColumnsText, [table, options]);\n      var tableOptions = _this._table.getOptions();\n      if (_this._options.noWrap || _this._options.noWrap === null && tableOptions.noWrap) {\n        if (!_this._options.attr) {\n          _this._options.attr = {\n            \"class\": 'coreui_table__no-wrap'\n          };\n        } else {\n          _this._options.attr = TableUtils.mergeAttr(_this._options.attr, {\n            \"class\": 'coreui_table__no-wrap'\n          });\n        }\n        _this._options.noWrap = true;\n        if (_this._options.noWrapToggle || _this._options.noWrapToggle === null && tableOptions.noWrapToggle) {\n          _this._options.noWrapToggle = true;\n        }\n      }\n      return _this;\n    }\n\n    /**\n     * Формирование контента\n     * @param {string} content\n     * @param {object} record\n     * @returns {string}\n     */\n    _inherits(ColumnsText, _Column);\n    return _createClass(ColumnsText, [{\n      key: \"render\",\n      value: function render(content, record) {\n        if (['string', 'bigint', 'symbol', 'number'].indexOf(_typeof(content)) < 0) {\n          return '';\n        }\n        content = String(content).replace(/</g, '&lt;').replace(/>/g, '&gt;');\n        if (this._options.noWrap) {\n          content = '<div>' + content + '</div>';\n          if (this._options.noWrapToggle) {\n            content += '<i class=\"bi bi-caret-down-fill toggle\"></i>';\n          }\n        }\n        return content;\n      }\n    }]);\n  }(Column);\n\n  var ColumnsButton = /*#__PURE__*/function (_Column) {\n    /**\n     * Инициализация\n     * @param {TableInstance} table\n     * @param {Object}              options\n     */\n    function ColumnsButton(table, options) {\n      _classCallCheck(this, ColumnsButton);\n      options = $.extend(true, {\n        type: 'button',\n        field: null,\n        label: null,\n        show: true,\n        width: null,\n        minWidth: null,\n        maxWidth: null\n      }, options);\n      return _callSuper(this, ColumnsButton, [table, options]);\n    }\n\n    /**\n     * Формирование контента\n     * @param {object} content\n     * @param {object} record\n     * @returns {string}\n     */\n    _inherits(ColumnsButton, _Column);\n    return _createClass(ColumnsButton, [{\n      key: \"render\",\n      value: function render(content, record) {\n        if (!TableUtils.isObject(content)) {\n          return '';\n        }\n        if (!TableUtils.isObject(content.attr)) {\n          content.attr = {};\n        }\n        if (!content.attr.hasOwnProperty('class')) {\n          content.attr[\"class\"] = 'btn btn-outline-secondary';\n        }\n        if (content.attr.hasOwnProperty('type')) {\n          delete content.attr.type;\n        }\n        var attributes = [];\n        $.each(content.attr, function (name, value) {\n          if (['string', 'number'].indexOf(_typeof(value)) >= 0) {\n            attributes.push(name + '=\"' + value + '\"');\n          }\n        });\n        var btn = $(TableUtils.render(tpl['columns/button.html'], {\n          content: content.content,\n          attr: attributes.length > 0 ? ' ' + attributes.join(' ') : ''\n        }));\n        if (content.hasOwnProperty('onClick')) {\n          var that = this;\n          var prop = {\n            table: that._table,\n            record: record\n          };\n          if (typeof content.onClick === 'function') {\n            btn.click(function (event) {\n              event.cancelBubble = true;\n              event.preventDefault();\n              prop.event = event;\n              content.onClick(prop);\n            });\n          } else if (typeof content.onClick === 'string') {\n            var func = new Function('prop', content.onClick);\n            btn.click(function (event) {\n              event.cancelBubble = true;\n              event.preventDefault();\n              prop.event = event;\n              func(prop);\n            });\n          } else {\n            btn.click(function (event) {\n              event.cancelBubble = true;\n              event.preventDefault();\n            });\n          }\n        } else {\n          btn.click(function (event) {\n            event.cancelBubble = true;\n            event.preventDefault();\n          });\n        }\n        return btn;\n      }\n    }]);\n  }(Column);\n\n  var ColumnsLink = /*#__PURE__*/function (_Column) {\n    /**\n     * Инициализация\n     * @param {TableInstance} table\n     * @param {Object}              options\n     */\n    function ColumnsLink(table, options) {\n      _classCallCheck(this, ColumnsLink);\n      options = $.extend(true, {\n        type: 'link',\n        field: null,\n        label: null,\n        show: true,\n        width: null,\n        minWidth: null,\n        maxWidth: null\n      }, options);\n      return _callSuper(this, ColumnsLink, [table, options]);\n    }\n\n    /**\n     * Конвертирование значения колонки в текст\n     * @param {*} columnValue\n     * @returns {string}\n     */\n    _inherits(ColumnsLink, _Column);\n    return _createClass(ColumnsLink, [{\n      key: \"convertToString\",\n      value: function convertToString(columnValue) {\n        if (['string', 'number'].indexOf(_typeof(columnValue)) >= 0) {\n          return String(columnValue);\n        } else if (_typeof(columnValue) === 'object' && columnValue.hasOwnProperty('content') && typeof columnValue.content === 'string') {\n          return columnValue.content;\n        } else {\n          return '';\n        }\n      }\n\n      /**\n       * Формирование контента\n       * @param {object|string} content\n       * @param {object}        record\n       * @returns {string}\n       */\n    }, {\n      key: \"render\",\n      value: function render(content, record) {\n        if ((typeof content !== 'string' || !content) && (!TableUtils.isObject(content) || !content.hasOwnProperty('url') || typeof content.url !== 'string' || !content.url)) {\n          return '';\n        }\n        var linkContent = '';\n        var attr = {};\n        if (typeof content === 'string') {\n          attr.href = content;\n          linkContent = content;\n        } else {\n          if (content.hasOwnProperty('attr') && TableUtils.isObject(content.attr)) {\n            attr = content.attr;\n          }\n          if (attr.hasOwnProperty('href')) {\n            delete attr.href;\n          }\n          attr.href = content.url;\n          if (content.hasOwnProperty('content') && typeof content.content === 'string' && content.content) {\n            linkContent = content.content;\n          } else {\n            linkContent = content.url;\n          }\n        }\n        var attributes = [];\n        $.each(attr, function (name, value) {\n          if (['string', 'number'].indexOf(_typeof(value)) >= 0) {\n            attributes.push(name + '=\"' + value + '\"');\n          }\n        });\n        var link = $(TableUtils.render(tpl['columns/link.html'], {\n          content: linkContent,\n          attr: attributes.length > 0 ? ' ' + attributes.join(' ') : ''\n        }));\n        link.click(function (event) {\n          event.cancelBubble = true;\n          event.preventDefault();\n        });\n        return link;\n      }\n    }]);\n  }(Column);\n\n  var ColumnsMenu = /*#__PURE__*/function (_Column) {\n    /**\n     * Инициализация\n     * @param {TableInstance} table\n     * @param {Object}              options\n     */\n    function ColumnsMenu(table, options) {\n      _classCallCheck(this, ColumnsMenu);\n      options = $.extend(true, {\n        type: 'menu',\n        field: null,\n        label: null,\n        show: true,\n        width: null,\n        minWidth: null,\n        maxWidth: null\n      }, options);\n      return _callSuper(this, ColumnsMenu, [table, options]);\n    }\n\n    /**\n     * Формирование контента\n     * @param {object|string} content\n     * @param {object}        record\n     * @returns {string}\n     */\n    _inherits(ColumnsMenu, _Column);\n    return _createClass(ColumnsMenu, [{\n      key: \"render\",\n      value: function render(content, record) {\n        if (!TableUtils.isObject(content) || !content.hasOwnProperty('items') || !Array.isArray(content.items) || content.items.length === 0) {\n          return '';\n        }\n        var items = [];\n        var attr = {};\n        if (Array.isArray(content.items)) {\n          $.each(content.items, function (key, item) {\n            if (TableUtils.isObject(item) && typeof item.type === 'string') {\n              if (item.type === 'link') {\n                if (item.hasOwnProperty('url') && item.hasOwnProperty('content') && typeof item.url === 'string' && typeof item.content === 'string') {\n                  var linkAttr = {};\n                  if (item.hasOwnProperty('attr') || TableUtils.isObject(item.attr)) {\n                    linkAttr = item.attr;\n                  }\n                  if (linkAttr.hasOwnProperty('href')) {\n                    delete linkAttr.href;\n                  }\n                  if (!linkAttr.hasOwnProperty('class') || typeof linkAttr[\"class\"] !== 'string') {\n                    linkAttr[\"class\"] = 'dropdown-item';\n                  } else {\n                    linkAttr[\"class\"] += ' dropdown-item';\n                  }\n                  var linkAttributes = [];\n                  $.each(linkAttr, function (name, value) {\n                    if (['string', 'number'].indexOf(_typeof(value)) >= 0) {\n                      linkAttributes.push(name + '=\"' + value + '\"');\n                    }\n                  });\n                  items.push({\n                    type: 'link',\n                    url: item.url,\n                    content: item.content,\n                    attr: linkAttributes\n                  });\n                }\n              } else if (item.type === 'button') {\n                if (item.hasOwnProperty('content') && item.hasOwnProperty('onClick') && typeof item.content === 'string' && ['string', 'function'].indexOf(_typeof(item.onClick)) >= 0) {\n                  var btnAttr = {};\n                  if (item.hasOwnProperty('attr') || TableUtils.isObject(item.attr)) {\n                    btnAttr = item.attr;\n                  }\n                  if (btnAttr.hasOwnProperty('type')) {\n                    delete btnAttr.type;\n                  }\n                  if (btnAttr.hasOwnProperty('id')) {\n                    delete btnAttr['id'];\n                  }\n                  if (!btnAttr.hasOwnProperty('class') || typeof btnAttr[\"class\"] !== 'string') {\n                    btnAttr[\"class\"] = 'dropdown-item';\n                  } else {\n                    btnAttr[\"class\"] += ' dropdown-item';\n                  }\n                  var btnAttributes = [];\n                  $.each(btnAttr, function (name, value) {\n                    if (['string', 'number'].indexOf(_typeof(value)) >= 0) {\n                      btnAttributes.push(name + '=\"' + value + '\"');\n                    }\n                  });\n                  items.push({\n                    type: 'button',\n                    id: TableUtils.hashCode(),\n                    content: item.content,\n                    onClick: item.onClick,\n                    attr: btnAttributes.length > 0 ? ' ' + btnAttributes.join(' ') : ''\n                  });\n                }\n              } else if (item.type === 'divider') {\n                items.push({\n                  type: 'divider'\n                });\n              } else if (item.type === 'header') {\n                if (item.hasOwnProperty('content') && typeof item.content === 'string') {\n                  items.push({\n                    type: 'header',\n                    content: item.content\n                  });\n                }\n              }\n            }\n          });\n        }\n        if (content.hasOwnProperty('attr') && TableUtils.isObject(content.attr)) {\n          attr = content.attr;\n        }\n        if (!attr.hasOwnProperty('class') || ['string', 'number'].indexOf(_typeof(attr[\"class\"])) < 0) {\n          attr[\"class\"] = 'btn rounded-1';\n        }\n        if (attr.hasOwnProperty('type')) {\n          delete attr.type;\n        }\n        if (attr.hasOwnProperty('data-bs-toggle')) {\n          delete attr['data-bs-toggle'];\n        }\n        var attributes = [];\n        $.each(attr, function (name, value) {\n          if (['string', 'number'].indexOf(_typeof(value)) >= 0) {\n            attributes.push(name + '=\"' + value + '\"');\n          }\n        });\n        var menuContent = content.hasOwnProperty('content') && typeof content.content === 'string' && content.content ? content.content : '<i class=\"bi bi-three-dots-vertical\"></i>';\n        var position = content.hasOwnProperty('position') && typeof content.position === 'string' && content.position ? content.position : 'end';\n        var menu = $(TableUtils.render(tpl['columns/menu.html'], {\n          content: menuContent,\n          position: position,\n          attr: attributes.length > 0 ? ' ' + attributes.join(' ') : '',\n          items: items\n        }));\n        menu.click(function (event) {\n          event.cancelBubble = true;\n          event.preventDefault();\n        });\n        var dropdownMenu = null;\n        $(menu).on('show.bs.dropdown', function (e) {\n          dropdownMenu = $(menu).find('.dropdown-menu');\n          $('body').append(dropdownMenu.detach());\n          var eOffset = $(e.target).offset();\n          dropdownMenu.css({\n            'display': 'block',\n            'top': eOffset.top + $(e.target).outerHeight(),\n            'left': eOffset.left\n          });\n        });\n        $(menu).on('hide.bs.dropdown', function (e) {\n          $(menu).append(dropdownMenu.detach());\n          dropdownMenu.hide();\n        });\n        if (Array.isArray(items)) {\n          var that = this;\n          $.each(items, function (key, item) {\n            if (TableUtils.isObject(item) && typeof item.type === 'string') {\n              if (item.type === 'button') {\n                if (item.hasOwnProperty('content') && item.hasOwnProperty('onClick') && ['string', 'function'].indexOf(_typeof(item.onClick)) >= 0 && typeof item.content === 'string') {\n                  $('button#btn-dropdown-' + item.id, menu).click(function (event) {\n                    var prop = {\n                      table: that._table,\n                      record: record,\n                      event: event\n                    };\n                    if (typeof item.onClick === 'function') {\n                      item.onClick(prop);\n                    } else if (typeof item.onClick === 'string') {\n                      new Function('prop', item.onClick)(prop);\n                    }\n                  });\n                }\n              }\n            }\n          });\n        }\n        return menu;\n      }\n    }]);\n  }(Column);\n\n  var ColumnsBadge = /*#__PURE__*/function (_Column) {\n    /**\n     * Инициализация\n     * @param {TableInstance} table\n     * @param {Object}              options\n     */\n    function ColumnsBadge(table, options) {\n      _classCallCheck(this, ColumnsBadge);\n      options = $.extend(true, {\n        type: 'badge',\n        field: null,\n        label: null,\n        show: true,\n        width: null,\n        minWidth: null,\n        maxWidth: null\n      }, options);\n      return _callSuper(this, ColumnsBadge, [table, options]);\n    }\n\n    /**\n     * Конвертирование значения колонки в текст\n     * @param {*} columnValue\n     * @returns {string}\n     */\n    _inherits(ColumnsBadge, _Column);\n    return _createClass(ColumnsBadge, [{\n      key: \"convertToString\",\n      value: function convertToString(columnValue) {\n        if (typeof columnValue === 'string') {\n          return columnValue;\n        } else if (typeof columnValue === 'number') {\n          return String(columnValue);\n        } else if (_typeof(columnValue) === 'object' && columnValue.hasOwnProperty('text') && ['string', 'number'].indexOf(_typeof(columnValue.text)) >= 0) {\n          return String(columnValue.text);\n        } else {\n          return '';\n        }\n      }\n\n      /**\n       * Формирование контента\n       * @param {object|string|number} content\n       * @param {object}               record\n       * @returns {string}\n       */\n    }, {\n      key: \"render\",\n      value: function render(content, record) {\n        if (['string', 'number'].indexOf(_typeof(content)) >= 0) {\n          content = {\n            type: 'secondary',\n            text: content\n          };\n        } else if (!TableUtils.isObject(content) || !content.hasOwnProperty('type') || !content.hasOwnProperty('text') || typeof content.type !== 'string' || typeof content.text !== 'string' || !content.text) {\n          return '';\n        }\n        if (content.type === '' || content.type === 'none') {\n          return content.text;\n        }\n        return TableUtils.render(tpl['columns/badge.html'], {\n          type: content.type,\n          text: content.text\n        });\n      }\n    }]);\n  }(Column);\n\n  var ColumnsComponent = /*#__PURE__*/function (_Column) {\n    /**\n     * Инициализация\n     * @param {TableInstance} table\n     * @param {Object}              options\n     */\n    function ColumnsComponent(table, options) {\n      _classCallCheck(this, ColumnsComponent);\n      options = $.extend(true, {\n        type: 'component',\n        field: null,\n        label: null,\n        show: true,\n        width: null,\n        minWidth: null,\n        maxWidth: null\n      }, options);\n      return _callSuper(this, ColumnsComponent, [table, options]);\n    }\n\n    /**\n     * Формирование контента\n     * @param {object|string} content\n     * @param {object}        record\n     * @returns {string}\n     */\n    _inherits(ColumnsComponent, _Column);\n    return _createClass(ColumnsComponent, [{\n      key: \"render\",\n      value: function render(content, record) {\n        if (!TableUtils.isObject(content) || !content.hasOwnProperty('component') || typeof content.component !== 'string' || !content.component) {\n          return '';\n        }\n        return TableRender.renderComponents(this._table, content, 'records_show');\n      }\n    }]);\n  }(Column);\n\n  var ColumnsProgress = /*#__PURE__*/function (_Column) {\n    /**\n     * Инициализация\n     * @param {TableInstance} table\n     * @param {Object}              options\n     */\n    function ColumnsProgress(table, options) {\n      _classCallCheck(this, ColumnsProgress);\n      options = $.extend(true, {\n        type: 'progress',\n        field: null,\n        label: null,\n        show: true,\n        width: null,\n        minWidth: null,\n        maxWidth: null,\n        attr: {},\n        showPercent: null,\n        barColor: 'primary',\n        barWidth: null,\n        barHeight: null\n      }, options);\n      return _callSuper(this, ColumnsProgress, [table, options]);\n    }\n\n    /**\n     * Конвертирование значения колонки в текст\n     * @param {*} columnValue\n     * @returns {string}\n     */\n    _inherits(ColumnsProgress, _Column);\n    return _createClass(ColumnsProgress, [{\n      key: \"convertToString\",\n      value: function convertToString(columnValue) {\n        if (['string', 'number'].indexOf(_typeof(columnValue)) >= 0) {\n          return String(columnValue);\n        } else if (_typeof(columnValue) === 'object' && columnValue.hasOwnProperty('percent') && ['string', 'number'].indexOf(_typeof(columnValue.percent)) >= 0) {\n          return String(columnValue.percent);\n        } else {\n          return '';\n        }\n      }\n\n      /**\n       * Формирование контента\n       * @param {object|string|number} content\n       * @param {object}              record\n       * @returns {string}\n       */\n    }, {\n      key: \"render\",\n      value: function render(content, record) {\n        if (!TableUtils.isNumeric(content) && (!TableUtils.isObject(content) || !content.hasOwnProperty('percent') || !TableUtils.isNumeric(content.percent))) {\n          return '';\n        }\n        var description = null;\n        var percent = 0;\n        var percentText = '';\n        var color = typeof this._options.barColor === 'string' ? this._options.barColor : 'primary';\n        var attr = this._options.attr;\n        attr = TableUtils.mergeAttr(attr, {\n          \"class\": 'progress me-1'\n        });\n        if (this._options.barWidth) {\n          var barWidth = TableUtils.isNumeric(this._options.barWidth) ? this._options.barWidth + 'px' : this._options.barWidth;\n          attr = TableUtils.mergeAttr(attr, {\n            style: 'width:' + barWidth\n          });\n        }\n        if (this._options.barHeight) {\n          var barHeight = TableUtils.isNumeric(this._options.barHeight) ? this._options.barHeight + 'px' : this._options.barHeight;\n          attr = TableUtils.mergeAttr(attr, {\n            style: 'height:' + barHeight\n          });\n        }\n        if (TableUtils.isNumeric(content)) {\n          if (content < 0) {\n            percent = 0;\n          } else if (content > 100) {\n            percent = 100;\n          } else {\n            percent = content;\n          }\n        } else {\n          if (content.percent < 0) {\n            percent = 0;\n          } else if (content.percent > 100) {\n            percent = 100;\n          } else {\n            percent = content.percent;\n          }\n          if (content.hasOwnProperty('color') && typeof content.color === 'string') {\n            color = content.color;\n          }\n          if (content.hasOwnProperty('description') && typeof content.description === 'string' && content.description !== '') {\n            description = content.description;\n          }\n        }\n        if (this._options.showPercent) {\n          percentText = percent + '%';\n        }\n        var attributes = [];\n        $.each(attr, function (name, value) {\n          if (['string', 'number'].indexOf(_typeof(value)) >= 0) {\n            attributes.push(name + '=\"' + value + '\"');\n          }\n        });\n        return TableUtils.render(tpl['columns/progress.html'], {\n          description: description,\n          percent: percent,\n          percentText: percentText,\n          color: color,\n          attr: attributes.length > 0 ? ' ' + attributes.join(' ') : ''\n        });\n      }\n    }]);\n  }(Column);\n\n  var ColumnsImage = /*#__PURE__*/function (_Column) {\n    /**\n     * Инициализация\n     * @param {TableInstance} table\n     * @param {Object}              options\n     */\n    function ColumnsImage(table, options) {\n      var _this;\n      _classCallCheck(this, ColumnsImage);\n      options = $.extend(true, {\n        type: 'image',\n        field: null,\n        label: null,\n        show: true,\n        width: null,\n        minWidth: null,\n        maxWidth: null,\n        attr: {},\n        imgWidth: null,\n        imgHeight: null,\n        imgBorder: null,\n        imgStyle: null\n      }, options);\n      _this = _callSuper(this, ColumnsImage, [table, options]);\n      _this._table = table;\n      _this._options = $.extend(true, {}, _this._options, options);\n      return _this;\n    }\n\n    /**\n     * Формирование контента\n     * @param {string} content\n     * @param {object} record\n     * @returns {string}\n     */\n    _inherits(ColumnsImage, _Column);\n    return _createClass(ColumnsImage, [{\n      key: \"render\",\n      value: function render(content, record) {\n        if (typeof content !== 'string' || content === '') {\n          return '';\n        }\n        var attr = this._options.attr;\n        attr.src = content;\n        if (this._options.imgWidth) {\n          var imgWidth = TableUtils.isNumeric(this._options.imgWidth) ? this._options.imgWidth + 'px' : this._options.imgWidth;\n          attr = TableUtils.mergeAttr(attr, {\n            style: 'width:' + imgWidth\n          });\n        }\n        if (this._options.imgHeight) {\n          var imgHeight = TableUtils.isNumeric(this._options.imgHeight) ? this._options.imgHeight + 'px' : this._options.imgHeight;\n          attr = TableUtils.mergeAttr(attr, {\n            style: 'height:' + imgHeight\n          });\n        }\n        if (this._options.imgBorder) {\n          attr = TableUtils.mergeAttr(attr, {\n            \"class\": 'border border-secondary-subtle'\n          });\n        }\n        if (this._options.imgStyle && typeof this._options.imgStyle === 'string') {\n          switch (this._options.imgStyle) {\n            case 'circle':\n              attr = TableUtils.mergeAttr(attr, {\n                \"class\": 'rounded-circle'\n              });\n              break;\n            case 'thumb':\n              attr = TableUtils.mergeAttr(attr, {\n                \"class\": 'img-thumbnail'\n              });\n              break;\n            case 'rounded':\n              attr = TableUtils.mergeAttr(attr, {\n                \"class\": 'rounded'\n              });\n              break;\n          }\n        }\n        var attributes = [];\n        $.each(attr, function (name, value) {\n          if (['string', 'number'].indexOf(_typeof(value)) >= 0) {\n            attributes.push(name + '=\"' + value + '\"');\n          }\n        });\n        return TableUtils.render(tpl['columns/image.html'], {\n          attr: attributes.length > 0 ? ' ' + attributes.join(' ') : ''\n        });\n      }\n    }]);\n  }(Column);\n\n  Table.lang.ru = langRu;\n  Table.lang.en = langEn;\n  Table.controls.link = ControlLink;\n  Table.controls.button = ControlButton;\n  Table.controls.dropdown = ControlDropdown;\n  Table.controls.buttonGroup = ControlButtonGroup;\n  Table.controls.custom = ControlCustom;\n  Table.controls.pageSize = ControlPageSize;\n  Table.controls.pageJump = ControlPageJump;\n  Table.controls.pages = ControlPages;\n  Table.controls.total = ControlTotal;\n  Table.controls.search = ControlSearch;\n  Table.controls.columns = ControlColumns;\n  Table.controls.caption = ControlCaption;\n  Table.controls.filterClear = ControlFilterClear;\n  Table.controls.divider = ControlDivider;\n  Table.filters.text = FilterText;\n  Table.filters.number = FilterNumber;\n  Table.filters.date = FilterDate;\n  Table.filters.datetime = FilterDatetime;\n  Table.filters.dateMonth = FilterDateMonth;\n  Table.filters.dateRange = FilterDateRange;\n  Table.filters.datetimeRange = FilterDatetimeRange;\n  Table.filters.checkbox = FilterCheckbox;\n  Table.filters.radio = FilterRadio;\n  Table.filters.select = FilterSelect;\n  Table.filters[\"switch\"] = FilterSwitch;\n  Table.search.text = SearchText;\n  Table.search.number = SearchNumber;\n  Table.search.date = SearchDate;\n  Table.search.dateMonth = SearchDateMonth;\n  Table.search.datetime = SearchDatetime;\n  Table.search.dateRange = SearchDateRange;\n  Table.search.datetimeRange = SearchDatetimeRange;\n  Table.search.checkbox = SearchCheckbox;\n  Table.search.checkboxBtn = SearchCheckboxBtn;\n  Table.search.radio = SearchRadio;\n  Table.search.radioBtn = SearchRadioBtn;\n  Table.search.select = SearchSelect;\n  Table.search[\"switch\"] = SearchSwitch;\n  Table.columns.date = ColumnsDate;\n  Table.columns.datetime = ColumnsDatetime;\n  Table.columns.dateHuman = ColumnsDateHuman;\n  Table.columns.html = ColumnsHtml;\n  Table.columns.number = ColumnsNumber;\n  Table.columns.money = ColumnsMoney;\n  Table.columns.numbers = ColumnsNumbers;\n  Table.columns.select = ColumnsSelect;\n  Table.columns[\"switch\"] = ColumnsSwitch;\n  Table.columns.text = ColumnsText;\n  Table.columns.button = ColumnsButton;\n  Table.columns.link = ColumnsLink;\n  Table.columns.menu = ColumnsMenu;\n  Table.columns.badge = ColumnsBadge;\n  Table.columns.component = ColumnsComponent;\n  Table.columns.progress = ColumnsProgress;\n  Table.columns.image = ColumnsImage;\n\n  return Table;\n\n}));\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXMiOlsic3JjL2pzL3RhYmxlLnRwbC5qcyIsIm5vZGVfbW9kdWxlcy9lanMvZWpzLm1pbi5qcyIsInNyYy9qcy90YWJsZS51dGlscy5qcyIsInNyYy9qcy90YWJsZS5yZW5kZXIuanMiLCJzcmMvanMvdGFibGUuZWxlbWVudHMuanMiLCJzcmMvanMvdGFibGUucHJpdmF0ZS5qcyIsInNyYy9qcy90YWJsZS5pbnN0YW5jZS5qcyIsInNyYy9qcy90YWJsZS5qcyIsInNyYy9qcy9sYW5nL2VuLmpzIiwic3JjL2pzL2xhbmcvcnUuanMiLCJzcmMvanMvYWJzdHJhY3QvQ29udHJvbC5qcyIsInNyYy9qcy9jb250cm9scy9saW5rLmpzIiwic3JjL2pzL2NvbnRyb2xzL2J1dHRvbi5qcyIsInNyYy9qcy9jb250cm9scy9kcm9wZG93bi5qcyIsInNyYy9qcy9jb250cm9scy9idXR0b25fZ3JvdXAuanMiLCJzcmMvanMvY29udHJvbHMvY3VzdG9tLmpzIiwic3JjL2pzL2NvbnRyb2xzL3BhZ2Vfc2l6ZS5qcyIsInNyYy9qcy9jb250cm9scy9wYWdlX2p1bXAuanMiLCJzcmMvanMvY29udHJvbHMvcGFnZXMvY29udHJvbC5qcyIsInNyYy9qcy9jb250cm9scy9wYWdlcy5qcyIsInNyYy9qcy9jb250cm9scy90b3RhbC5qcyIsInNyYy9qcy9jb250cm9scy9zZWFyY2guanMiLCJzcmMvanMvY29udHJvbHMvY29sdW1ucy5qcyIsInNyYy9qcy9jb250cm9scy9jYXB0aW9uLmpzIiwic3JjL2pzL2NvbnRyb2xzL2ZpbHRlcl9jbGVhci5qcyIsInNyYy9qcy9jb250cm9scy9kaXZpZGVyLmpzIiwic3JjL2pzL2Fic3RyYWN0L0ZpbHRlci5qcyIsInNyYy9qcy9maWx0ZXJzL3RleHQuanMiLCJzcmMvanMvZmlsdGVycy9udW1iZXIuanMiLCJzcmMvanMvZmlsdGVycy9kYXRlLmpzIiwic3JjL2pzL2ZpbHRlcnMvZGF0ZXRpbWUuanMiLCJzcmMvanMvZmlsdGVycy9kYXRlX21vbnRoLmpzIiwic3JjL2pzL2ZpbHRlcnMvZGF0ZV9yYW5nZS5qcyIsInNyYy9qcy9maWx0ZXJzL2RhdGV0aW1lX3JhbmdlLmpzIiwic3JjL2pzL2ZpbHRlcnMvY2hlY2tib3guanMiLCJzcmMvanMvZmlsdGVycy9yYWRpby5qcyIsInNyYy9qcy9maWx0ZXJzL3NlbGVjdC5qcyIsInNyYy9qcy9maWx0ZXJzL3N3aXRjaC5qcyIsInNyYy9qcy9hYnN0cmFjdC9TZWFyY2guanMiLCJzcmMvanMvc2VhcmNoL3RleHQuanMiLCJzcmMvanMvc2VhcmNoL251bWJlci5qcyIsInNyYy9qcy9zZWFyY2gvZGF0ZS5qcyIsInNyYy9qcy9zZWFyY2gvZGF0ZV9tb250aC5qcyIsInNyYy9qcy9zZWFyY2gvZGF0ZXRpbWUuanMiLCJzcmMvanMvc2VhcmNoL2RhdGVfcmFuZ2UuanMiLCJzcmMvanMvc2VhcmNoL2RhdGV0aW1lX3JhbmdlLmpzIiwic3JjL2pzL3NlYXJjaC9jaGVja2JveC5qcyIsInNyYy9qcy9zZWFyY2gvY2hlY2tib3hCdG4uanMiLCJzcmMvanMvc2VhcmNoL3JhZGlvLmpzIiwic3JjL2pzL3NlYXJjaC9yYWRpb0J0bi5qcyIsInNyYy9qcy9zZWFyY2gvc2VsZWN0LmpzIiwic3JjL2pzL3NlYXJjaC9zd2l0Y2guanMiLCJzcmMvanMvYWJzdHJhY3QvQ29sdW1uLmpzIiwic3JjL2pzL2NvbHVtbnMvZGF0ZS5qcyIsInNyYy9qcy9jb2x1bW5zL2RhdGV0aW1lLmpzIiwibm9kZV9tb2R1bGVzL21vbWVudC9zcmMvbGliL3V0aWxzL2hvb2tzLmpzIiwibm9kZV9tb2R1bGVzL21vbWVudC9zcmMvbGliL3V0aWxzL2lzLWFycmF5LmpzIiwibm9kZV9tb2R1bGVzL21vbWVudC9zcmMvbGliL3V0aWxzL2lzLW9iamVjdC5qcyIsIm5vZGVfbW9kdWxlcy9tb21lbnQvc3JjL2xpYi91dGlscy9oYXMtb3duLXByb3AuanMiLCJub2RlX21vZHVsZXMvbW9tZW50L3NyYy9saWIvdXRpbHMvaXMtb2JqZWN0LWVtcHR5LmpzIiwibm9kZV9tb2R1bGVzL21vbWVudC9zcmMvbGliL3V0aWxzL2lzLXVuZGVmaW5lZC5qcyIsIm5vZGVfbW9kdWxlcy9tb21lbnQvc3JjL2xpYi91dGlscy9pcy1udW1iZXIuanMiLCJub2RlX21vZHVsZXMvbW9tZW50L3NyYy9saWIvdXRpbHMvaXMtZGF0ZS5qcyIsIm5vZGVfbW9kdWxlcy9tb21lbnQvc3JjL2xpYi91dGlscy9tYXAuanMiLCJub2RlX21vZHVsZXMvbW9tZW50L3NyYy9saWIvdXRpbHMvZXh0ZW5kLmpzIiwibm9kZV9tb2R1bGVzL21vbWVudC9zcmMvbGliL2NyZWF0ZS91dGMuanMiLCJub2RlX21vZHVsZXMvbW9tZW50L3NyYy9saWIvY3JlYXRlL3BhcnNpbmctZmxhZ3MuanMiLCJub2RlX21vZHVsZXMvbW9tZW50L3NyYy9saWIvdXRpbHMvc29tZS5qcyIsIm5vZGVfbW9kdWxlcy9tb21lbnQvc3JjL2xpYi9jcmVhdGUvdmFsaWQuanMiLCJub2RlX21vZHVsZXMvbW9tZW50L3NyYy9saWIvbW9tZW50L2NvbnN0cnVjdG9yLmpzIiwibm9kZV9tb2R1bGVzL21vbWVudC9zcmMvbGliL3V0aWxzL2RlcHJlY2F0ZS5qcyIsIm5vZGVfbW9kdWxlcy9tb21lbnQvc3JjL2xpYi91dGlscy9pcy1mdW5jdGlvbi5qcyIsIm5vZGVfbW9kdWxlcy9tb21lbnQvc3JjL2xpYi9sb2NhbGUvc2V0LmpzIiwibm9kZV9tb2R1bGVzL21vbWVudC9zcmMvbGliL2xvY2FsZS9jb25zdHJ1Y3Rvci5qcyIsIm5vZGVfbW9kdWxlcy9tb21lbnQvc3JjL2xpYi91dGlscy9rZXlzLmpzIiwibm9kZV9tb2R1bGVzL21vbWVudC9zcmMvbGliL2xvY2FsZS9jYWxlbmRhci5qcyIsIm5vZGVfbW9kdWxlcy9tb21lbnQvc3JjL2xpYi91dGlscy96ZXJvLWZpbGwuanMiLCJub2RlX21vZHVsZXMvbW9tZW50L3NyYy9saWIvZm9ybWF0L2Zvcm1hdC5qcyIsIm5vZGVfbW9kdWxlcy9tb21lbnQvc3JjL2xpYi9sb2NhbGUvZm9ybWF0cy5qcyIsIm5vZGVfbW9kdWxlcy9tb21lbnQvc3JjL2xpYi9sb2NhbGUvaW52YWxpZC5qcyIsIm5vZGVfbW9kdWxlcy9tb21lbnQvc3JjL2xpYi9sb2NhbGUvb3JkaW5hbC5qcyIsIm5vZGVfbW9kdWxlcy9tb21lbnQvc3JjL2xpYi9sb2NhbGUvcmVsYXRpdmUuanMiLCJub2RlX21vZHVsZXMvbW9tZW50L3NyYy9saWIvdW5pdHMvYWxpYXNlcy5qcyIsIm5vZGVfbW9kdWxlcy9tb21lbnQvc3JjL2xpYi91bml0cy9wcmlvcml0aWVzLmpzIiwibm9kZV9tb2R1bGVzL21vbWVudC9zcmMvbGliL3BhcnNlL3JlZ2V4LmpzIiwibm9kZV9tb2R1bGVzL21vbWVudC9zcmMvbGliL3V0aWxzL2Ficy1mbG9vci5qcyIsIm5vZGVfbW9kdWxlcy9tb21lbnQvc3JjL2xpYi91dGlscy90by1pbnQuanMiLCJub2RlX21vZHVsZXMvbW9tZW50L3NyYy9saWIvcGFyc2UvdG9rZW4uanMiLCJub2RlX21vZHVsZXMvbW9tZW50L3NyYy9saWIvdXRpbHMvaXMtbGVhcC15ZWFyLmpzIiwibm9kZV9tb2R1bGVzL21vbWVudC9zcmMvbGliL3VuaXRzL2NvbnN0YW50cy5qcyIsIm5vZGVfbW9kdWxlcy9tb21lbnQvc3JjL2xpYi91bml0cy95ZWFyLmpzIiwibm9kZV9tb2R1bGVzL21vbWVudC9zcmMvbGliL21vbWVudC9nZXQtc2V0LmpzIiwibm9kZV9tb2R1bGVzL21vbWVudC9zcmMvbGliL3V0aWxzL21vZC5qcyIsIm5vZGVfbW9kdWxlcy9tb21lbnQvc3JjL2xpYi91dGlscy9pbmRleC1vZi5qcyIsIm5vZGVfbW9kdWxlcy9tb21lbnQvc3JjL2xpYi91bml0cy9tb250aC5qcyIsIm5vZGVfbW9kdWxlcy9tb21lbnQvc3JjL2xpYi9jcmVhdGUvZGF0ZS1mcm9tLWFycmF5LmpzIiwibm9kZV9tb2R1bGVzL21vbWVudC9zcmMvbGliL3VuaXRzL3dlZWstY2FsZW5kYXItdXRpbHMuanMiLCJub2RlX21vZHVsZXMvbW9tZW50L3NyYy9saWIvdW5pdHMvd2Vlay5qcyIsIm5vZGVfbW9kdWxlcy9tb21lbnQvc3JjL2xpYi91bml0cy9kYXktb2Ytd2Vlay5qcyIsIm5vZGVfbW9kdWxlcy9tb21lbnQvc3JjL2xpYi91bml0cy9ob3VyLmpzIiwibm9kZV9tb2R1bGVzL21vbWVudC9zcmMvbGliL2xvY2FsZS9iYXNlLWNvbmZpZy5qcyIsIm5vZGVfbW9kdWxlcy9tb21lbnQvc3JjL2xpYi9sb2NhbGUvbG9jYWxlcy5qcyIsIm5vZGVfbW9kdWxlcy9tb21lbnQvc3JjL2xpYi9jcmVhdGUvY2hlY2stb3ZlcmZsb3cuanMiLCJub2RlX21vZHVsZXMvbW9tZW50L3NyYy9saWIvY3JlYXRlL2Zyb20tc3RyaW5nLmpzIiwibm9kZV9tb2R1bGVzL21vbWVudC9zcmMvbGliL3V0aWxzL2RlZmF1bHRzLmpzIiwibm9kZV9tb2R1bGVzL21vbWVudC9zcmMvbGliL2NyZWF0ZS9mcm9tLWFycmF5LmpzIiwibm9kZV9tb2R1bGVzL21vbWVudC9zcmMvbGliL2NyZWF0ZS9mcm9tLXN0cmluZy1hbmQtZm9ybWF0LmpzIiwibm9kZV9tb2R1bGVzL21vbWVudC9zcmMvbGliL2NyZWF0ZS9mcm9tLXN0cmluZy1hbmQtYXJyYXkuanMiLCJub2RlX21vZHVsZXMvbW9tZW50L3NyYy9saWIvY3JlYXRlL2Zyb20tb2JqZWN0LmpzIiwibm9kZV9tb2R1bGVzL21vbWVudC9zcmMvbGliL2NyZWF0ZS9mcm9tLWFueXRoaW5nLmpzIiwibm9kZV9tb2R1bGVzL21vbWVudC9zcmMvbGliL2NyZWF0ZS9sb2NhbC5qcyIsIm5vZGVfbW9kdWxlcy9tb21lbnQvc3JjL2xpYi9tb21lbnQvbWluLW1heC5qcyIsIm5vZGVfbW9kdWxlcy9tb21lbnQvc3JjL2xpYi9tb21lbnQvbm93LmpzIiwibm9kZV9tb2R1bGVzL21vbWVudC9zcmMvbGliL2R1cmF0aW9uL3ZhbGlkLmpzIiwibm9kZV9tb2R1bGVzL21vbWVudC9zcmMvbGliL2R1cmF0aW9uL2NvbnN0cnVjdG9yLmpzIiwibm9kZV9tb2R1bGVzL21vbWVudC9zcmMvbGliL3V0aWxzL2Ficy1yb3VuZC5qcyIsIm5vZGVfbW9kdWxlcy9tb21lbnQvc3JjL2xpYi91dGlscy9jb21wYXJlLWFycmF5cy5qcyIsIm5vZGVfbW9kdWxlcy9tb21lbnQvc3JjL2xpYi91bml0cy9vZmZzZXQuanMiLCJub2RlX21vZHVsZXMvbW9tZW50L3NyYy9saWIvZHVyYXRpb24vY3JlYXRlLmpzIiwibm9kZV9tb2R1bGVzL21vbWVudC9zcmMvbGliL21vbWVudC9hZGQtc3VidHJhY3QuanMiLCJub2RlX21vZHVsZXMvbW9tZW50L3NyYy9saWIvdXRpbHMvaXMtc3RyaW5nLmpzIiwibm9kZV9tb2R1bGVzL21vbWVudC9zcmMvbGliL3V0aWxzL2lzLW1vbWVudC1pbnB1dC5qcyIsIm5vZGVfbW9kdWxlcy9tb21lbnQvc3JjL2xpYi91dGlscy9pcy1jYWxlbmRhci1zcGVjLmpzIiwibm9kZV9tb2R1bGVzL21vbWVudC9zcmMvbGliL21vbWVudC9jYWxlbmRhci5qcyIsIm5vZGVfbW9kdWxlcy9tb21lbnQvc3JjL2xpYi9tb21lbnQvY2xvbmUuanMiLCJub2RlX21vZHVsZXMvbW9tZW50L3NyYy9saWIvbW9tZW50L2NvbXBhcmUuanMiLCJub2RlX21vZHVsZXMvbW9tZW50L3NyYy9saWIvbW9tZW50L2RpZmYuanMiLCJub2RlX21vZHVsZXMvbW9tZW50L3NyYy9saWIvbW9tZW50L2Zvcm1hdC5qcyIsIm5vZGVfbW9kdWxlcy9tb21lbnQvc3JjL2xpYi9tb21lbnQvZnJvbS5qcyIsIm5vZGVfbW9kdWxlcy9tb21lbnQvc3JjL2xpYi9tb21lbnQvdG8uanMiLCJub2RlX21vZHVsZXMvbW9tZW50L3NyYy9saWIvbW9tZW50L2xvY2FsZS5qcyIsIm5vZGVfbW9kdWxlcy9tb21lbnQvc3JjL2xpYi9tb21lbnQvc3RhcnQtZW5kLW9mLmpzIiwibm9kZV9tb2R1bGVzL21vbWVudC9zcmMvbGliL21vbWVudC90by10eXBlLmpzIiwibm9kZV9tb2R1bGVzL21vbWVudC9zcmMvbGliL21vbWVudC92YWxpZC5qcyIsIm5vZGVfbW9kdWxlcy9tb21lbnQvc3JjL2xpYi9tb21lbnQvY3JlYXRpb24tZGF0YS5qcyIsIm5vZGVfbW9kdWxlcy9tb21lbnQvc3JjL2xpYi91bml0cy9lcmEuanMiLCJub2RlX21vZHVsZXMvbW9tZW50L3NyYy9saWIvdW5pdHMvd2Vlay15ZWFyLmpzIiwibm9kZV9tb2R1bGVzL21vbWVudC9zcmMvbGliL3VuaXRzL3F1YXJ0ZXIuanMiLCJub2RlX21vZHVsZXMvbW9tZW50L3NyYy9saWIvdW5pdHMvZGF5LW9mLW1vbnRoLmpzIiwibm9kZV9tb2R1bGVzL21vbWVudC9zcmMvbGliL3VuaXRzL2RheS1vZi15ZWFyLmpzIiwibm9kZV9tb2R1bGVzL21vbWVudC9zcmMvbGliL3VuaXRzL21pbnV0ZS5qcyIsIm5vZGVfbW9kdWxlcy9tb21lbnQvc3JjL2xpYi91bml0cy9zZWNvbmQuanMiLCJub2RlX21vZHVsZXMvbW9tZW50L3NyYy9saWIvdW5pdHMvbWlsbGlzZWNvbmQuanMiLCJub2RlX21vZHVsZXMvbW9tZW50L3NyYy9saWIvdW5pdHMvdGltZXpvbmUuanMiLCJub2RlX21vZHVsZXMvbW9tZW50L3NyYy9saWIvbW9tZW50L3Byb3RvdHlwZS5qcyIsIm5vZGVfbW9kdWxlcy9tb21lbnQvc3JjL2xpYi9tb21lbnQvbW9tZW50LmpzIiwibm9kZV9tb2R1bGVzL21vbWVudC9zcmMvbGliL2xvY2FsZS9wcmUtcG9zdC1mb3JtYXQuanMiLCJub2RlX21vZHVsZXMvbW9tZW50L3NyYy9saWIvbG9jYWxlL3Byb3RvdHlwZS5qcyIsIm5vZGVfbW9kdWxlcy9tb21lbnQvc3JjL2xpYi9sb2NhbGUvbGlzdHMuanMiLCJub2RlX21vZHVsZXMvbW9tZW50L3NyYy9saWIvbG9jYWxlL2VuLmpzIiwibm9kZV9tb2R1bGVzL21vbWVudC9zcmMvbGliL2xvY2FsZS9sb2NhbGUuanMiLCJub2RlX21vZHVsZXMvbW9tZW50L3NyYy9saWIvZHVyYXRpb24vYWJzLmpzIiwibm9kZV9tb2R1bGVzL21vbWVudC9zcmMvbGliL2R1cmF0aW9uL2FkZC1zdWJ0cmFjdC5qcyIsIm5vZGVfbW9kdWxlcy9tb21lbnQvc3JjL2xpYi91dGlscy9hYnMtY2VpbC5qcyIsIm5vZGVfbW9kdWxlcy9tb21lbnQvc3JjL2xpYi9kdXJhdGlvbi9idWJibGUuanMiLCJub2RlX21vZHVsZXMvbW9tZW50L3NyYy9saWIvZHVyYXRpb24vYXMuanMiLCJub2RlX21vZHVsZXMvbW9tZW50L3NyYy9saWIvZHVyYXRpb24vY2xvbmUuanMiLCJub2RlX21vZHVsZXMvbW9tZW50L3NyYy9saWIvZHVyYXRpb24vZ2V0LmpzIiwibm9kZV9tb2R1bGVzL21vbWVudC9zcmMvbGliL2R1cmF0aW9uL2h1bWFuaXplLmpzIiwibm9kZV9tb2R1bGVzL21vbWVudC9zcmMvbGliL2R1cmF0aW9uL2lzby1zdHJpbmcuanMiLCJub2RlX21vZHVsZXMvbW9tZW50L3NyYy9saWIvZHVyYXRpb24vcHJvdG90eXBlLmpzIiwibm9kZV9tb2R1bGVzL21vbWVudC9zcmMvbGliL3VuaXRzL3RpbWVzdGFtcC5qcyIsIm5vZGVfbW9kdWxlcy9tb21lbnQvc3JjL21vbWVudC5qcyIsIm5vZGVfbW9kdWxlcy9tb21lbnQvc3JjL2xvY2FsZS9ydS5qcyIsInNyYy9qcy9jb2x1bW5zL2RhdGVfaHVtYW4uanMiLCJzcmMvanMvY29sdW1ucy9odG1sLmpzIiwic3JjL2pzL2NvbHVtbnMvbnVtYmVyLmpzIiwic3JjL2pzL2NvbHVtbnMvbW9uZXkuanMiLCJzcmMvanMvY29sdW1ucy9udW1iZXJzLmpzIiwic3JjL2pzL2NvbHVtbnMvc2VsZWN0LmpzIiwic3JjL2pzL2NvbHVtbnMvc3dpdGNoLmpzIiwic3JjL2pzL2NvbHVtbnMvdGV4dC5qcyIsInNyYy9qcy9jb2x1bW5zL2J1dHRvbi5qcyIsInNyYy9qcy9jb2x1bW5zL2xpbmsuanMiLCJzcmMvanMvY29sdW1ucy9tZW51LmpzIiwic3JjL2pzL2NvbHVtbnMvYmFkZ2UuanMiLCJzcmMvanMvY29sdW1ucy9jb21wb25lbnQuanMiLCJzcmMvanMvY29sdW1ucy9wcm9ncmVzcy5qcyIsInNyYy9qcy9jb2x1bW5zL2ltYWdlLmpzIiwic3JjL21haW4uanMiXSwic291cmNlc0NvbnRlbnQiOlsibGV0IHRwbCA9IE9iamVjdC5jcmVhdGUobnVsbClcbnRwbFsnY29sdW1ucy9iYWRnZS5odG1sJ10gPSAnPHNwYW4gY2xhc3M9XCJiYWRnZSB0ZXh0LWJnLTwlPSB0eXBlICU+XCI+PCU9IHRleHQgJT48L3NwYW4+J1xudHBsWydjb2x1bW5zL2J1dHRvbi5odG1sJ10gPSAnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCI8JS0gYXR0ciAlPj48JS0gY29udGVudCAlPjwvYnV0dG9uPidcbnRwbFsnY29sdW1ucy9pbWFnZS5odG1sJ10gPSAnPGltZyA8JS0gYXR0ciAlPi8+J1xudHBsWydjb2x1bW5zL2xpbmsuaHRtbCddID0gJzxhIDwlLSBhdHRyICU+PjwlLSBjb250ZW50ICU+PC9hPidcbnRwbFsnY29sdW1ucy9tZW51Lmh0bWwnXSA9ICcgPGRpdiBjbGFzcz1cImJ0bi1ncm91cFwiIHJvbGU9XCJncm91cFwiPiA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBkYXRhLWJzLXRvZ2dsZT1cImRyb3Bkb3duXCI8JS0gYXR0ciAlPj4gPCUtIGNvbnRlbnQgJT4gPC9idXR0b24+IDx1bCBjbGFzcz1cImRyb3Bkb3duLW1lbnUgZHJvcGRvd24tbWVudS08JT0gcG9zaXRpb24gJT5cIj4gPCUgJC5lYWNoKGl0ZW1zLCBmdW5jdGlvbihrZXksIGl0ZW0pIHsgJT4gPCUgaWYgKGl0ZW0udHlwZSA9PT0gXFwnbGlua1xcJykgeyAlPiA8bGk+PGEgaHJlZj1cIjwlPSBpdGVtLnVybCAlPlwiPCUtIGl0ZW0uYXR0ciAlPj48JS0gaXRlbS5jb250ZW50ICU+PC9hPjwvbGk+IDwlIH0gZWxzZSBpZiAoaXRlbS50eXBlID09PSBcXCdidXR0b25cXCcpIHsgJT4gPGxpPiA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBpZD1cImJ0bi1kcm9wZG93bi08JT0gaXRlbS5pZCAlPlwiPCUtIGl0ZW0uYXR0ciAlPj4gPCUtIGl0ZW0uY29udGVudCAlPiA8L2J1dHRvbj4gPC9saT4gPCUgfSBlbHNlIGlmIChpdGVtLnR5cGUgPT09IFxcJ2RpdmlkZXJcXCcpIHsgJT4gPGxpPjxociBjbGFzcz1cImRyb3Bkb3duLWRpdmlkZXJcIj48L2xpPiA8JSB9IGVsc2UgaWYgKGl0ZW0udHlwZSA9PT0gXFwnaGVhZGVyXFwnKSB7ICU+IDxsaT48aDYgY2xhc3M9XCJkcm9wZG93bi1oZWFkZXJcIj48JS0gaXRlbS5jb250ZW50ICU+PC9oNj48L2xpPiA8JSB9ICU+IDwlIH0pICU+IDwvdWw+IDwvZGl2PidcbnRwbFsnY29sdW1ucy9wcm9ncmVzcy5odG1sJ10gPSAnPCUgaWYgKGRlc2NyaXB0aW9uICE9PSBudWxsKSB7ICU+IDxzbWFsbCBjbGFzcz1cInRleHQtYm9keS1zZWNvbmRhcnlcIj48JT0gZGVzY3JpcHRpb24gJT48L3NtYWxsPiA8JSB9ICU+IDxkaXYgY2xhc3M9XCJkLWlubGluZS1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlclwiPiA8ZGl2IDwlLSBhdHRyICU+PiA8ZGl2IGNsYXNzPVwicHJvZ3Jlc3MtYmFyIGJnLTwlPSBjb2xvciAlPlwiIHN0eWxlPVwid2lkdGg6PCU9IHBlcmNlbnQgJT4lO1wiPjwvZGl2PiA8L2Rpdj4gPHNwYW4+PCU9IHBlcmNlbnRUZXh0ICU+PC9zcGFuPiA8L2Rpdj4nXG50cGxbJ2NvbHVtbnMvc2VsZWN0X2xhYmVsLmh0bWwnXSA9ICc8aW5wdXQgY2xhc3M9XCJjb3JldWktdGFibGVfX3NlbGVjdC1hbGwgZm9ybS1jaGVjay1pbnB1dFwiIHR5cGU9XCJjaGVja2JveFwiIHZhbHVlPVwiXCI+J1xudHBsWydjb2x1bW5zL3NlbGVjdC5odG1sJ10gPSAnPGlucHV0IGNsYXNzPVwiY29yZXVpLXRhYmxlX19zZWxlY3QgZm9ybS1jaGVjay1pbnB1dFwiIHR5cGU9XCJjaGVja2JveFwiIHZhbHVlPVwiPCU9IGluZGV4ICU+XCI+J1xudHBsWydjb2x1bW5zL3N3aXRjaC5odG1sJ10gPSAnPGRpdiBjbGFzcz1cImZvcm0tc3dpdGNoXCI+IDxpbnB1dCBjbGFzcz1cImZvcm0tY2hlY2staW5wdXQgY29yZXVpLXRhYmxlX19zd2l0Y2hcIiB0eXBlPVwiY2hlY2tib3hcIiBkYXRhLWZpZWxkPVwiPCU9IGZpZWxkICU+XCIgdmFsdWU9XCI8JT0gaW5kZXggJT5cIjwlIGlmIChjaGVja2VkKSB7ICU+IGNoZWNrZWQ8JSB9ICU+PCUgaWYgKGRpc2FibGVkKSB7ICU+IGRpc2FibGVkPCUgfSAlPj4gPC9kaXY+J1xudHBsWydjb250YWluZXIuaHRtbCddID0gJyA8ZGl2IGlkPVwiY29yZXVpLXRhYmxlLTwlPSBpZCAlPlwiIGNsYXNzPVwiY29yZXVpLXRhYmxlPCU9IGNsYXNzZXMgJT5cIjwlIGlmICh3aWR0aFNpemVzKSB7ICU+IHN0eWxlPVwiPCU9IHdpZHRoU2l6ZXMuam9pbihcXCc7XFwnKSAlPlwiPCUgfSAlPj4gPGRpdiBjbGFzcz1cImNvcmV1aS10YWJsZV9fY29udGFpbmVyIHBvc2l0aW9uLXJlbGF0aXZlXCI+IDxkaXYgY2xhc3M9XCJjb3JldWktdGFibGVfX3dyYXBwZXI8JT0gY2xhc3Nlc1dyYXBwZXIgJT5cIiA8JSBpZiAoaGVpZ2h0U2l6ZXMpIHsgJT5zdHlsZT1cIjwlPSBoZWlnaHRTaXplcy5qb2luKFxcJztcXCcpICU+XCI8JSB9ICU+PjwvZGl2PiA8L2Rpdj4gPC9kaXY+J1xudHBsWydjb250cm9scy9idXR0b25fZ3JvdXAuaHRtbCddID0gJzxkaXYgY2xhc3M9XCJidG4tZ3JvdXBcIiByb2xlPVwiZ3JvdXBcIj48L2Rpdj4nXG50cGxbJ2NvbnRyb2xzL2J1dHRvbl9ncm91cC9idXR0b24uaHRtbCddID0gJzxidXR0b24gdHlwZT1cImJ1dHRvblwiIDwlLSBhdHRyICU+PjwlLSBjb250ZW50ICU+PC9idXR0b24+J1xudHBsWydjb250cm9scy9idXR0b25fZ3JvdXAvZHJvcGRvd24uaHRtbCddID0gJzxkaXYgY2xhc3M9XCJidG4tZ3JvdXBcIiByb2xlPVwiZ3JvdXBcIj4gPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgZGF0YS1icy10b2dnbGU9XCJkcm9wZG93blwiPCUtIGF0dHIgJT4+PCUtIGNvbnRlbnQgJT48L2J1dHRvbj4gPHVsIGNsYXNzPVwiZHJvcGRvd24tbWVudSBkcm9wZG93bi1tZW51LTwlPSBwb3NpdGlvbiAlPlwiPjwvdWw+IDwvZGl2PidcbnRwbFsnY29udHJvbHMvYnV0dG9uX2dyb3VwL2Ryb3Bkb3duL2J1dHRvbi5odG1sJ10gPSAnPGxpPiA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImRyb3Bkb3duLWl0ZW1cIj48JS0gY29udGVudCAlPjwvYnV0dG9uPiA8L2xpPidcbnRwbFsnY29udHJvbHMvYnV0dG9uX2dyb3VwL2Ryb3Bkb3duL2RpdmlkZXIuaHRtbCddID0gJzxsaT48aHIgY2xhc3M9XCJkcm9wZG93bi1kaXZpZGVyXCI+PC9saT4nXG50cGxbJ2NvbnRyb2xzL2J1dHRvbl9ncm91cC9kcm9wZG93bi9saW5rLmh0bWwnXSA9ICc8bGk+PGEgY2xhc3M9XCJkcm9wZG93bi1pdGVtXCIgaHJlZj1cIjwlPSB1cmwgJT5cIj48JS0gY29udGVudCAlPjwvYT48L2xpPidcbnRwbFsnY29udHJvbHMvYnV0dG9uX2dyb3VwL2xpbmsuaHRtbCddID0gJzxhIGhyZWY9XCI8JT0gdXJsICU+XCI8JS0gYXR0ciAlPj48JS0gY29udGVudCAlPjwvYT4nXG50cGxbJ2NvbnRyb2xzL2J1dHRvbi5odG1sJ10gPSAnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCI8JS0gYXR0ciAlPj48JS0gY29udGVudCAlPjwvYnV0dG9uPidcbnRwbFsnY29udHJvbHMvY2FwdGlvbi5odG1sJ10gPSAnPGRpdiBjbGFzcz1cImQtZmxleCBmbGV4LWNvbHVtbiBtZS0zXCI+IDxzbWFsbCBjbGFzcz1cInRleHQtYm9keS1zZWNvbmRhcnkgZnctbWVkaXVtXCI+IDwlPSB0aXRsZSAlPiA8JSBpZiAoZGVzY3JpcHRpb24pIHsgJT4gPGkgY2xhc3M9XCJiaSBiaS1xdWVzdGlvbi1jaXJjbGUgY29yZXVpLXRhYmxlX19jdXJzb3JfaGVscFwiIHRpdGxlPVwiPCU9IGRlc2NyaXB0aW9uICU+XCI+PC9pPiA8JSB9ICU+IDwvc21hbGw+IDxiIGNsYXNzPVwidGV4dC1ub3dyYXBcIj48JT0gdmFsdWUgJT48L2I+IDwvZGl2PidcbnRwbFsnY29udHJvbHMvY29sdW1ucy5odG1sJ10gPSAnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCI8JS0gYnRuQXR0ciAlPj48JS1idG5Db250ZW50JT48L2J1dHRvbj4nXG50cGxbJ2NvbnRyb2xzL2NvbHVtbnMvbGlzdC5odG1sJ10gPSAnIDxkaXYgY2xhc3M9XCJjb3JldWktdGFibGVfX2NvbHVtbnMgcHgtMyBwdC0zIHBiLTRcIj4gPGRpdiBjbGFzcz1cIm1iLTNcIj4gPGRpdiBjbGFzcz1cImZvcm0tY2hlY2sgY29yZXVpLXRhYmxlX19jaGVja19hbGxcIj4gPGxhYmVsIGNsYXNzPVwiZm9ybS1jaGVjay1sYWJlbFwiPiA8aW5wdXQgY2xhc3M9XCJmb3JtLWNoZWNrLWlucHV0XCIgdHlwZT1cImNoZWNrYm94XCIgPCUgaWYgKHNob3dBbGwgPT09IHRydWUpIHsgJT5jaGVja2VkPCUgfSAlPj4gPCU9IGxhbmcuYWxsICU+IDwvbGFiZWw+IDwvZGl2PiA8JSBjb2x1bW5zLm1hcChmdW5jdGlvbihjb2x1bW4pIHsgJT4gPGRpdiBjbGFzcz1cImZvcm0tY2hlY2sgY29yZXVpLXRhYmxlX2NoZWNrLWNvbHVtblwiPiA8bGFiZWwgY2xhc3M9XCJmb3JtLWNoZWNrLWxhYmVsXCI+IDxpbnB1dCBjbGFzcz1cImZvcm0tY2hlY2staW5wdXRcIiB0eXBlPVwiY2hlY2tib3hcIiB2YWx1ZT1cIjwlPSBjb2x1bW4uZmllbGQgJT5cIiA8JSBpZiAoY29sdW1uLnNob3cgPT09IHRydWUpIHsgJT5jaGVja2VkPCUgfSAlPj4gPCU9IGNvbHVtbi5sYWJlbCAlPiA8L2xhYmVsPiA8L2Rpdj4gPCUgfSk7ICU+IDwvZGl2PiA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiA8JS0gYnRuQ29tcGxldGVBdHRyICU+PiA8JS0gYnRuQ29tcGxldGVDb250ZW50ICU+IDwvYnV0dG9uPiA8L2Rpdj4nXG50cGxbJ2NvbnRyb2xzL2RpdmlkZXIuaHRtbCddID0gJzxkaXYgPCUtIGF0dHIgJT4+PCU9IHRleHQgJT48L2Rpdj4nXG50cGxbJ2NvbnRyb2xzL2Ryb3Bkb3duLmh0bWwnXSA9ICcgPGRpdiBjbGFzcz1cImJ0bi1ncm91cFwiIHJvbGU9XCJncm91cFwiPiA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBkYXRhLWJzLXRvZ2dsZT1cImRyb3Bkb3duXCI8JS0gYXR0ciAlPj48JS0gY29udGVudCAlPjwvYnV0dG9uPiA8dWwgY2xhc3M9XCJkcm9wZG93bi1tZW51IGRyb3Bkb3duLW1lbnUtPCU9IHBvc2l0aW9uICU+XCI+PC91bD4gPC9kaXY+J1xudHBsWydjb250cm9scy9kcm9wZG93bi9idXR0b24uaHRtbCddID0gJzxsaT4gPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJkcm9wZG93bi1pdGVtXCI+PCUtIGNvbnRlbnQgJT48L2J1dHRvbj4gPC9saT4nXG50cGxbJ2NvbnRyb2xzL2Ryb3Bkb3duL2RpdmlkZXIuaHRtbCddID0gJzxsaT48aHIgY2xhc3M9XCJkcm9wZG93bi1kaXZpZGVyXCI+PC9saT4nXG50cGxbJ2NvbnRyb2xzL2Ryb3Bkb3duL2xpbmsuaHRtbCddID0gJzxsaT48YSBjbGFzcz1cImRyb3Bkb3duLWl0ZW1cIiBocmVmPVwiPCU9IHVybCAlPlwiPjwlLSBjb250ZW50ICU+PC9hPjwvbGk+J1xudHBsWydjb250cm9scy9maWx0ZXJfY2xlYXIuaHRtbCddID0gJzxidXR0b24gdHlwZT1cImJ1dHRvblwiIDwlLSBhdHRyICU+PjwlLSBjb250ZW50ICU+PC9idXR0b24+J1xudHBsWydjb250cm9scy9saW5rLmh0bWwnXSA9ICc8YSBocmVmPVwiPCUtIHVybCAlPlwiPCUtIGF0dHIgJT4+PCUtIGNvbnRlbnQgJT48L2E+J1xudHBsWydjb250cm9scy9wYWdlLWp1bXAuaHRtbCddID0gJyA8ZGl2IGNsYXNzPVwiY29yZXVpLXRhYmxlX19wYWdlX2p1bXBfY29udGFpbmVyXCI+IDxkaXYgPCUtIGF0dHIgJT4+IDxpbnB1dCB0eXBlPVwibnVtYmVyXCIgY2xhc3M9XCJmb3JtLWNvbnRyb2wgYm9yZGVyLXNlY29uZGFyeS1zdWJ0bGVcIiBtaW49XCIxXCI+IDxidXR0b24gY2xhc3M9XCJidG4gYnRuLW91dGxpbmUtc2Vjb25kYXJ5IGJvcmRlci1zZWNvbmRhcnktc3VidGxlXCIgdHlwZT1cImJ1dHRvblwiPiA8aSBjbGFzcz1cImJpIGJpLWNoZXZyb24tY29tcGFjdC1yaWdodFwiPjwvaT4gPC9idXR0b24+IDwvZGl2PiA8L2Rpdj4nXG50cGxbJ2NvbnRyb2xzL3BhZ2Utc2l6ZS5odG1sJ10gPSAnIDxzZWxlY3QgPCUtIGF0dHIgJT4+IDwlIHJlY29yZHNQZXJQYWdlTGlzdC5tYXAoZnVuY3Rpb24oY291bnQpIHsgJT4gPG9wdGlvbiB2YWx1ZT1cIjwlPSBjb3VudCAlPlwiPCUgaWYgKHJlY29yZHNQZXJQYWdlID09IGNvdW50KSB7ICU+c2VsZWN0ZWQ8JSB9ICU+PiA8JSBpZiAoY291bnQgPT0gXFwnMFxcJykgeyAlPjwlPSBsYW5nLmFsbCAlPjwlIH0gZWxzZSB7ICU+PCU9IGNvdW50ICU+PCUgfSAlPiA8L29wdGlvbj4gPCUgfSk7ICU+IDwvc2VsZWN0PidcbnRwbFsnY29udHJvbHMvcGFnZXMuaHRtbCddID0gJyA8bmF2PiA8dWwgPCUtIGF0dHIgJT4+IDwlIGlmIChzaG93UHJldikgeyAlPiA8bGkgY2xhc3M9XCJwYWdlLWl0ZW0gY29yZXVpLXRhYmxlX19wYWdlX3ByZXYgPCUgaWYgKCAhIGlzQWN0aXZlUHJldikgeyAlPiBkaXNhYmxlZDwlIH0gJT5cIj4gPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJwYWdlLWxpbmtcIj4gPGkgY2xhc3M9XCJiaSBiaS1jaGV2cm9uLWxlZnRcIj48L2k+IDwvYnV0dG9uPiA8L2xpPiA8JSB9ICU+IDwlIGlmIChzaG93UGFnZUZpcnN0KSB7ICU+IDxsaSBjbGFzcz1cInBhZ2UtaXRlbVwiPiA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cInBhZ2UtbGluayBjb3JldWktdGFibGVfX3BhZ2VcIj4gMSA8L2J1dHRvbj4gPC9saT4gPCUgfSAlPiA8JSBpZiAoc2hvd0RpdmlkZXJTdGFydCkgeyAlPiA8bGkgY2xhc3M9XCJwYWdlLWl0ZW0gZGlzYWJsZWRcIj4gPHNwYW4gY2xhc3M9XCJwYWdlLWxpbmsgcHgtMVwiPi4uLjwvc3Bhbj4gPC9saT4gPCUgfSAlPiA8JSBwYWdlcy5tYXAoZnVuY3Rpb24ocGFnZSkgeyAlPiA8JSBpZiAocGFnZSA9PSBjdXJyZW50UGFnZSkgeyAlPiA8bGkgY2xhc3M9XCJwYWdlLWl0ZW0gYWN0aXZlXCI+IDxzcGFuIGNsYXNzPVwicGFnZS1saW5rXCI+PCU9IHBhZ2UgJT48L3NwYW4+IDwvbGk+IDwlIH0gZWxzZSB7ICU+IDxsaSBjbGFzcz1cInBhZ2UtaXRlbVwiPiA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cInBhZ2UtbGluayBjb3JldWktdGFibGVfX3BhZ2VcIj4gPCU9IHBhZ2UgJT4gPC9idXR0b24+IDwvbGk+IDwlIH0gJT4gPCUgfSk7ICU+IDwlIGlmIChzaG93RGl2aWRlckVuZCkgeyAlPiA8bGkgY2xhc3M9XCJwYWdlLWl0ZW0gZGlzYWJsZWRcIj4gPHNwYW4gY2xhc3M9XCJwYWdlLWxpbmsgcHgtMVwiPi4uLjwvc3Bhbj4gPC9saT4gPCUgfSAlPiA8JSBpZiAoc2hvd1BhZ2VMYXN0KSB7ICU+IDxsaSBjbGFzcz1cInBhZ2UtaXRlbVwiPiA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cInBhZ2UtbGluayBjb3JldWktdGFibGVfX3BhZ2VcIj4gPCU9IHBhZ2VzVG90YWwgJT4gPC9idXR0b24+IDwvbGk+IDwlIH0gJT4gPCUgaWYgKHNob3dOZXh0KSB7ICU+IDxsaSBjbGFzcz1cInBhZ2UtaXRlbSBjb3JldWktdGFibGVfX3BhZ2VfbmV4dDwlIGlmICggISBpc0FjdGl2ZU5leHQpIHsgJT4gZGlzYWJsZWQ8JSB9ICU+XCI+IDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwicGFnZS1saW5rXCI+IDxpIGNsYXNzPVwiYmkgYmktY2hldnJvbi1yaWdodFwiPjwvaT4gPC9idXR0b24+IDwvbGk+IDwlIH0gJT4gPC91bD4gPC9uYXY+J1xudHBsWydjb250cm9scy9zZWFyY2guaHRtbCddID0gJzxkaXYgY2xhc3M9XCJidG4tZ3JvdXBcIj4gPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCI8JS0gYnRuQXR0ciAlPj48JS0gYnRuQ29udGVudCAlPjwvYnV0dG9uPiA8JS0gYnRuQ2xlYXIgJT4gPC9kaXY+ICdcbnRwbFsnY29udHJvbHMvc2VhcmNoL2NsZWFyLmh0bWwnXSA9ICc8YnV0dG9uIHR5cGU9XCJidXR0b25cIiA8JS0gYXR0ciAlPj48JS0gY29udGVudCAlPjwvYnV0dG9uPiAnXG50cGxbJ2NvbnRyb2xzL3NlYXJjaC9jb250YWluZXIuaHRtbCddID0gJyA8ZGl2IGNsYXNzPVwiY29yZXVpLXRhYmxlX19zZWFyY2ggcHgtMyBwdC0zIHBiLTRcIj4gPGRpdiBjbGFzcz1cIm1iLTMgY29yZXVpLXRhYmxlX19zZWFyY2hfY29udHJvbHNcIj48L2Rpdj4gPGRpdiBjbGFzcz1cImQtZmxleCBmbGV4LXNtLXdyYXAgZmxleC1tZC1ub3dyYXBcIj4gPGRpdiBjbGFzcz1cImQtbm9uZSBkLW1kLWJsb2NrXCIgc3R5bGU9XCJ3aWR0aDo8JT0gbGFiZWxXaWR0aCAlPjttaW4td2lkdGg6PCU9IGxhYmVsV2lkdGggJT5cIj48L2Rpdj4gPGRpdiBjbGFzcz1cImQtZmxleCBqdXN0aWZ5LWNvbnRlbnQtc3RhcnQgZmxleC13cmFwIGdhcC0yXCI+IDxidXR0b24gdHlwZT1cImJ1dHRvblwiIDwlLSBidG5Db21wbGV0ZUF0dHIgJT4+IDwlLSBidG5Db21wbGV0ZUNvbnRlbnQgJT4gPC9idXR0b24+IDwvZGl2PiA8L2Rpdj4gPC9kaXY+J1xudHBsWydjb250cm9scy9zZWFyY2gvY29udHJvbC5odG1sJ10gPSAnPGRpdiBjbGFzcz1cIm1iLTIgZC1mbGV4IGZsZXgtY29sdW1uIGZsZXgtbWQtcm93IFwiPiA8bGFiZWwgY2xhc3M9XCJjb2wtZm9ybS1sYWJlbCBmdy1tZWRpdW0gdGV4dC1zdGFydCB0ZXh0LW1kLWVuZCBwZS0yXCIgc3R5bGU9XCJtaW4td2lkdGg6PCU9IGxhYmVsV2lkdGggJT47d2lkdGg6PCU9IGxhYmVsV2lkdGggJT5cIj4gPCU9IGxhYmVsICU+IDwlIGlmIChkZXNjcmlwdGlvbkxhYmVsKSB7ICU+IDxkaXYgY2xhc3M9XCJ0ZXh0LW11dGVkIGZ3LW5vcm1hbFwiPiA8c21hbGw+PCU9IGRlc2NyaXB0aW9uTGFiZWwgJT48L3NtYWxsPiA8L2Rpdj4gPCUgfSAlPiA8L2xhYmVsPiA8ZGl2IGNsYXNzPVwiZmxleC1maWxsIGNvcmV1aS10YWJsZV9fc2VhcmNoLWNvbnRyb2xfY29udGVudFwiPiA8JSBpZiAoc3VmZml4KSB7ICU+PCUtIHN1ZmZpeCAlPjwlIH0gJT4gPCUgaWYgKGRlc2NyaXB0aW9uKSB7ICU+IDxkaXYgY2xhc3M9XCJ0ZXh0LW11dGVkIGZ3LW5vcm1hbFwiPiA8c21hbGw+PCU9IGRlc2NyaXB0aW9uICU+PC9zbWFsbD4gPC9kaXY+IDwlIH0gJT4gPC9kaXY+IDwvZGl2PidcbnRwbFsnY29udHJvbHMvdG90YWwuaHRtbCddID0gJzxkaXYgPCUtIGF0dHIgJT4+IDxzbWFsbD48JT0gbGFuZy50b3RhbCAlPjogPHNwYW4gY2xhc3M9XCJjb3JldWktdGFibGVfX2NvdW50LXRvdGFsXCI+PCU9IHJlY29yZHNUb3RhbCAlPjwvc3Bhbj48L3NtYWxsPiA8L2Rpdj4nXG50cGxbJ2ZpbHRlcnMvY2hlY2tib3guaHRtbCddID0gJyA8ZGl2IGNsYXNzPVwiYnRuLWdyb3VwXCI+IDwlIGlmIChsYWJlbCkgeyAlPiA8c3BhbiBjbGFzcz1cImlucHV0LWdyb3VwLXRleHRcIj48JT0gbGFiZWwgJT48L3NwYW4+IDwlIH0gJT4gPCUgJC5lYWNoKGl0ZW1zLCBmdW5jdGlvbihrZXksIGl0ZW0pIHsgJT4gPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIGNsYXNzPVwiYnRuLWNoZWNrXCIgYXV0b2NvbXBsZXRlPVwib2ZmXCIgaWQ9XCI8JT0gKGZpZWxkICsga2V5KSAlPlwiIG5hbWU9XCI8JT0gZmllbGQgJT5cIiB2YWx1ZT1cIjwlPSBpdGVtLnZhbHVlICU+XCIgPCU9IGl0ZW0uY2hlY2tlZCA/IFxcJyBjaGVja2VkXFwnIDogXFwnXFwnICU+PiA8bGFiZWwgY2xhc3M9XCI8JT0gaXRlbS5jbGFzcyAlPlwiIGZvcj1cIjwlPSAoZmllbGQgKyBrZXkpICU+XCI+PCU9IGl0ZW0udGV4dCAlPjwvbGFiZWw+IDwlIH0pOyAlPiA8L2Rpdj4nXG50cGxbJ2ZpbHRlcnMvZGF0ZV9tb250aC5odG1sJ10gPSAnIDxkaXYgY2xhc3M9XCJpbnB1dC1ncm91cFwiPiA8JSBpZiAobGFiZWwpIHsgJT4gPHNwYW4gY2xhc3M9XCJpbnB1dC1ncm91cC10ZXh0XCI+PCU9IGxhYmVsICU+PC9zcGFuPiA8JSB9ICU+IDxpbnB1dCB0eXBlPVwibW9udGhcIiA8JS0gYXR0ciAlPj4gPC9kaXY+J1xudHBsWydmaWx0ZXJzL2RhdGVfcmFuZ2UuaHRtbCddID0gJyA8ZGl2IGNsYXNzPVwiaW5wdXQtZ3JvdXBcIj4gPCUgaWYgKGxhYmVsKSB7ICU+IDxzcGFuIGNsYXNzPVwiaW5wdXQtZ3JvdXAtdGV4dFwiPjwlPSBsYWJlbCAlPjwvc3Bhbj4gPCUgfSAlPiA8aW5wdXQgdHlwZT1cImRhdGVcIiA8JS0gc3RhcnRBdHRyICU+PiA8aW5wdXQgdHlwZT1cImRhdGVcIiA8JS0gZW5kQXR0ciAlPj4gPC9kaXY+J1xudHBsWydmaWx0ZXJzL2RhdGUuaHRtbCddID0gJyA8ZGl2IGNsYXNzPVwiaW5wdXQtZ3JvdXBcIj4gPCUgaWYgKGxhYmVsKSB7ICU+IDxzcGFuIGNsYXNzPVwiaW5wdXQtZ3JvdXAtdGV4dFwiPjwlPSBsYWJlbCAlPjwvc3Bhbj4gPCUgfSAlPiA8aW5wdXQgdHlwZT1cImRhdGVcIiA8JS0gYXR0ciAlPj4gPC9kaXY+J1xudHBsWydmaWx0ZXJzL2RhdGV0aW1lX3JhbmdlLmh0bWwnXSA9ICcgPGRpdiBjbGFzcz1cImlucHV0LWdyb3VwXCI+IDwlIGlmIChsYWJlbCkgeyAlPiA8c3BhbiBjbGFzcz1cImlucHV0LWdyb3VwLXRleHRcIj48JT0gbGFiZWwgJT48L3NwYW4+IDwlIH0gJT4gPGlucHV0IHR5cGU9XCJkYXRldGltZS1sb2NhbFwiIDwlLSBzdGFydEF0dHIgJT4+IDxpbnB1dCB0eXBlPVwiZGF0ZXRpbWUtbG9jYWxcIiA8JS0gZW5kQXR0ciAlPj4gPC9kaXY+J1xudHBsWydmaWx0ZXJzL2RhdGV0aW1lLmh0bWwnXSA9ICcgPGRpdiBjbGFzcz1cImlucHV0LWdyb3VwXCI+IDwlIGlmIChsYWJlbCkgeyAlPiA8c3BhbiBjbGFzcz1cImlucHV0LWdyb3VwLXRleHRcIj48JT0gbGFiZWwgJT48L3NwYW4+IDwlIH0gJT4gPGlucHV0IHR5cGU9XCJkYXRldGltZS1sb2NhbFwiIDwlLSBhdHRyICU+PiA8L2Rpdj4nXG50cGxbJ2ZpbHRlcnMvbnVtYmVyLmh0bWwnXSA9ICcgPGRpdiBjbGFzcz1cImlucHV0LWdyb3VwXCI+IDwlIGlmIChsYWJlbCkgeyAlPiA8c3BhbiBjbGFzcz1cImlucHV0LWdyb3VwLXRleHRcIj48JT0gbGFiZWwgJT48L3NwYW4+IDwlIH0gJT4gPGlucHV0IHR5cGU9XCJudW1iZXJcIiA8JS0gYXR0clN0YXJ0ICU+PiA8aW5wdXQgdHlwZT1cIm51bWJlclwiIDwlLSBhdHRyRW5kICU+PiA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiA8JS0gYnRuQXR0ciAlPj4gPCUtIGJ0bkNvbnRlbnQgJT4gPC9idXR0b24+IDwvZGl2PidcbnRwbFsnZmlsdGVycy9yYWRpby5odG1sJ10gPSAnIDxkaXYgY2xhc3M9XCJidG4tZ3JvdXBcIj4gPCUgaWYgKGxhYmVsKSB7ICU+IDxzcGFuIGNsYXNzPVwiaW5wdXQtZ3JvdXAtdGV4dFwiPjwlPSBsYWJlbCAlPjwvc3Bhbj4gPCUgfSAlPiA8JSAkLmVhY2goaXRlbXMsIGZ1bmN0aW9uKGtleSwgaXRlbSkgeyAlPiA8aW5wdXQgdHlwZT1cInJhZGlvXCIgY2xhc3M9XCJidG4tY2hlY2tcIiBhdXRvY29tcGxldGU9XCJvZmZcIiBpZD1cIjwlPSAoZmllbGQgKyBrZXkpICU+XCIgbmFtZT1cIjwlPSBmaWVsZCAlPlwiIHZhbHVlPVwiPCU9IGl0ZW0udmFsdWUgJT5cIiA8JT0gaXRlbS5jaGVja2VkID8gXFwnIGNoZWNrZWRcXCcgOiBcXCdcXCcgJT4+IDxsYWJlbCBjbGFzcz1cIjwlPSBpdGVtLmNsYXNzICU+XCIgZm9yPVwiPCU9IChmaWVsZCArIGtleSkgJT5cIj48JT0gaXRlbS50ZXh0ICU+PC9sYWJlbD4gPCUgfSk7ICU+IDwvZGl2PidcbnRwbFsnZmlsdGVycy9zZWxlY3QuaHRtbCddID0gJzxkaXYgY2xhc3M9XCJpbnB1dC1ncm91cCBmbGV4LW5vd3JhcFwiPiA8JSBpZiAobGFiZWwpIHsgJT4gPHNwYW4gY2xhc3M9XCJpbnB1dC1ncm91cC10ZXh0XCI+PCU9IGxhYmVsICU+PC9zcGFuPiA8JSB9ICU+IDxzZWxlY3QgPCUtIGF0dHIgJT4+IDxvcHRpb24+LS08L29wdGlvbj4gPCUgJC5lYWNoKG9wdGlvbnMsIGZ1bmN0aW9uKGtleSwgb3B0aW9uKSB7ICU+IDwlIGlmIChvcHRpb24udHlwZSA9PT0gXFwnZ3JvdXBcXCcpIHsgJT4gPG9wdGdyb3VwPCUtIG9wdGlvbi5hdHRyICU+PiA8JSAkLmVhY2gob3B0aW9uLm9wdGlvbnMsIGZ1bmN0aW9uKGtleSwgZ3JvdXBPcHRpb24pIHsgJT4gPG9wdGlvbiA8JS0gZ3JvdXBPcHRpb24uYXR0ciAlPj48JT0gZ3JvdXBPcHRpb24udGV4dCAlPjwvb3B0aW9uPiA8JSB9KTsgJT4gPC9vcHRncm91cD4gPCUgfSBlbHNlIHsgJT4gPG9wdGlvbiA8JS0gb3B0aW9uLmF0dHIgJT4+PCU9IG9wdGlvbi50ZXh0ICU+PC9vcHRpb24+IDwlIH0gJT4gPCUgfSk7ICU+IDwvc2VsZWN0PiA8L2Rpdj4nXG50cGxbJ2ZpbHRlcnMvc3dpdGNoLmh0bWwnXSA9ICc8ZGl2IGNsYXNzPVwiZm9ybS1jaGVjayBmb3JtLXN3aXRjaFwiPiA8aW5wdXQgY2xhc3M9XCJmb3JtLWNoZWNrLWlucHV0XCIgdHlwZT1cImNoZWNrYm94XCIgaWQ9XCI8JT0gKGZpZWxkICsgaWQpICU+XCIgbmFtZT1cIjwlPSBmaWVsZCAlPlwiIHZhbHVlPVwiPCU9IHZhbHVlWSAlPlwiIDwlPSBjaGVja2VkID8gXFwnIGNoZWNrZWRcXCcgOiBcXCdcXCcgJT4+IDwlIGlmIChsYWJlbCAhPSBcXCdcXCcpIHsgJT4gPGxhYmVsIGNsYXNzPVwiZm9ybS1jaGVjay1sYWJlbFwiIGZvcj1cIjwlPSAoZmllbGQgKyBpZCkgJT5cIj48JT0gbGFiZWwgJT48L2xhYmVsPiA8JSB9ICU+IDwvZGl2PidcbnRwbFsnZmlsdGVycy90ZXh0Lmh0bWwnXSA9ICcgPGRpdiBjbGFzcz1cImlucHV0LWdyb3VwXCI+IDwlIGlmIChsYWJlbCkgeyAlPiA8c3BhbiBjbGFzcz1cImlucHV0LWdyb3VwLXRleHRcIj48JT0gbGFiZWwgJT48L3NwYW4+IDwlIH0gJT4gPGlucHV0IHR5cGU9XCJ0ZXh0XCIgPCUtIGF0dHIgJT4+IDxidXR0b24gdHlwZT1cImJ1dHRvblwiIDwlLSBidG5BdHRyICU+PiA8JS0gYnRuQ29udGVudCAlPiA8L2J1dHRvbj4gPC9kaXY+J1xudHBsWydzZWFyY2gvY2hlY2tib3gtYnRuLmh0bWwnXSA9ICcgPGRpdiBjbGFzcz1cInB0LTJcIj4gPGRpdiBjbGFzcz1cImJ0bi1ncm91cFwiPiA8JSBvcHRpb25zLm1hcChmdW5jdGlvbihvcHRpb24pIHsgJT4gPGlucHV0IGNsYXNzPVwiYnRuLWNoZWNrXCIgdHlwZT1cImNoZWNrYm94XCIgdmFsdWU9XCI8JS0gb3B0aW9uLnZhbHVlICU+XCIgaWQ9XCI8JT0gb3B0aW9uLmhhc2ggJT5cIiBhdXRvY29tcGxldGU9XCJvZmZcIiA8JT0gb3B0aW9uLmNoZWNrZWQgPyBcXCcgY2hlY2tlZFxcJyA6IFxcJ1xcJyAlPj4gPGxhYmVsIGNsYXNzPVwiPCU9IG9wdGlvbi5vcHRpb25zQ2xhc3MgJT5cIiBmb3I9XCI8JT0gb3B0aW9uLmhhc2ggJT5cIj48JT0gb3B0aW9uLnRleHQgJT48L2xhYmVsPiA8JSB9KTsgJT4gPC9kaXY+IDwvZGl2PidcbnRwbFsnc2VhcmNoL2NoZWNrYm94Lmh0bWwnXSA9ICcgPGRpdiBjbGFzcz1cInB0LTJcIj4gPCUgb3B0aW9ucy5tYXAoZnVuY3Rpb24ob3B0aW9uKSB7ICU+IDxkaXYgY2xhc3M9XCJmb3JtLWNoZWNrXCI+IDxsYWJlbCBjbGFzcz1cImZvcm0tY2hlY2stbGFiZWwgY29yZXVpLXRhYmxlX3BvaW50ZXJcIj4gPGlucHV0IGNsYXNzPVwiZm9ybS1jaGVjay1pbnB1dFwiIHR5cGU9XCJjaGVja2JveFwiIHZhbHVlPVwiPCUtIG9wdGlvbi52YWx1ZSAlPlwiIDwlPSBvcHRpb24uY2hlY2tlZCA/IFxcJyBjaGVja2VkXFwnIDogXFwnXFwnICU+PiA8JT0gb3B0aW9uLnRleHQgJT4gPC9sYWJlbD4gPC9kaXY+IDwlIH0pOyAlPiA8L2Rpdj4nXG50cGxbJ3NlYXJjaC9kYXRlX21vbnRoLmh0bWwnXSA9ICcgPGlucHV0IHR5cGU9XCJtb250aFwiIDwlLSBhdHRyICU+PidcbnRwbFsnc2VhcmNoL2RhdGVfcmFuZ2UuaHRtbCddID0gJzxkaXY+IDxpbnB1dCB0eXBlPVwiZGF0ZVwiIDwlLSBzdGFydEF0dHIgJT4+IDxpbnB1dCB0eXBlPVwiZGF0ZVwiIDwlLSBlbmRBdHRyICU+PiA8L2Rpdj4nXG50cGxbJ3NlYXJjaC9kYXRlLmh0bWwnXSA9ICcgPGlucHV0IHR5cGU9XCJkYXRlXCIgPCUtIGF0dHIgJT4+J1xudHBsWydzZWFyY2gvZGF0ZXRpbWVfcmFuZ2UuaHRtbCddID0gJzxkaXY+IDxpbnB1dCB0eXBlPVwiZGF0ZXRpbWUtbG9jYWxcIiA8JS0gc3RhcnRBdHRyICU+PiA8aW5wdXQgdHlwZT1cImRhdGV0aW1lLWxvY2FsXCIgPCUtIGVuZEF0dHIgJT4+IDwvZGl2PidcbnRwbFsnc2VhcmNoL2RhdGV0aW1lLmh0bWwnXSA9ICcgPGlucHV0IHR5cGU9XCJkYXRldGltZS1sb2NhbFwiIDwlLSBhdHRyICU+PidcbnRwbFsnc2VhcmNoL251bWJlci5odG1sJ10gPSAnIDxpbnB1dCB0eXBlPVwibnVtYmVyXCIgPCUtIHN0YXJ0QXR0ciAlPj4gPGlucHV0IHR5cGU9XCJudW1iZXJcIiA8JS0gZW5kQXR0ciAlPj4nXG50cGxbJ3NlYXJjaC9yYWRpby1idG4uaHRtbCddID0gJzxkaXYgY2xhc3M9XCJwdC0yXCI+IDxkaXYgY2xhc3M9XCJidG4tZ3JvdXBcIj4gPGlucHV0IGNsYXNzPVwiYnRuLWNoZWNrIGNvcmV1aS10YWJsZV9fYWxsXCIgdHlwZT1cInJhZGlvXCIgbmFtZT1cIjwlPSBmaWVsZCAlPlwiIHZhbHVlPVwiXCIgaWQ9XCI8JT0gb3B0aW9uQWxsSGFzaCAlPlwiIGF1dG9jb21wbGV0ZT1cIm9mZlwiIDwlPSBjaGVja2VkQWxsID8gXFwnIGNoZWNrZWRcXCcgOiBcXCdcXCcgJT4+IDxsYWJlbCBjbGFzcz1cIjwlPSBvcHRpb25PcHRpb25zQ2xhc3MgJT5cIiBmb3I9XCI8JT0gb3B0aW9uQWxsSGFzaCAlPlwiPjwlPSBsYW5nLmFsbCAlPjwvbGFiZWw+IDwlIG9wdGlvbnMubWFwKGZ1bmN0aW9uKG9wdGlvbikgeyAlPiA8aW5wdXQgY2xhc3M9XCJidG4tY2hlY2tcIiB0eXBlPVwicmFkaW9cIiBuYW1lPVwiPCU9IGZpZWxkICU+XCIgdmFsdWU9XCI8JS0gb3B0aW9uLnZhbHVlICU+XCIgaWQ9XCI8JT0gb3B0aW9uLmhhc2ggJT5cIiBhdXRvY29tcGxldGU9XCJvZmZcIiA8JT0gb3B0aW9uLmNoZWNrZWQgPyBcXCcgY2hlY2tlZD1cImNoZWNrZWRcIlxcJyA6IFxcJ1xcJyAlPlwiPiA8bGFiZWwgY2xhc3M9XCI8JT0gb3B0aW9uLm9wdGlvbnNDbGFzcyAlPlwiIGZvcj1cIjwlPSBvcHRpb24uaGFzaCAlPlwiPjwlPSBvcHRpb24udGV4dCAlPjwvbGFiZWw+IDwlIH0pOyAlPiA8L2Rpdj4gPC9kaXY+J1xudHBsWydzZWFyY2gvcmFkaW8uaHRtbCddID0gJzxkaXYgY2xhc3M9XCJwdC0yXCI+IDxkaXYgY2xhc3M9XCJmb3JtLWNoZWNrXCI+IDxsYWJlbCBjbGFzcz1cImZvcm0tY2hlY2stbGFiZWwgY29yZXVpLXRhYmxlX3BvaW50ZXJcIj4gPGlucHV0IGNsYXNzPVwiZm9ybS1jaGVjay1pbnB1dCBjb3JldWktdGFibGVfX2FsbFwiIHR5cGU9XCJyYWRpb1wiIG5hbWU9XCI8JT0gZmllbGQgJT5cIiB2YWx1ZT1cIlwiPCU9IGNoZWNrZWRBbGwgPyBcXCcgY2hlY2tlZFxcJyA6IFxcJ1xcJyAlPj4gPCU9IGxhbmcuYWxsICU+IDwvbGFiZWw+IDwvZGl2PiA8JSBvcHRpb25zLm1hcChmdW5jdGlvbihvcHRpb24pIHsgJT4gPGRpdiBjbGFzcz1cImZvcm0tY2hlY2tcIj4gPGxhYmVsIGNsYXNzPVwiZm9ybS1jaGVjay1sYWJlbCBjb3JldWktdGFibGVfcG9pbnRlclwiPiA8aW5wdXQgY2xhc3M9XCJmb3JtLWNoZWNrLWlucHV0XCIgdHlwZT1cInJhZGlvXCIgbmFtZT1cIjwlPSBmaWVsZCAlPlwiIHZhbHVlPVwiPCUtIG9wdGlvbi52YWx1ZSAlPlwiIDwlPSBvcHRpb24uY2hlY2tlZCA/IFxcJyBjaGVja2VkPVwiY2hlY2tlZFwiXFwnIDogXFwnXFwnICU+PiA8JT0gb3B0aW9uLnRleHQgJT4gPC9sYWJlbD4gPC9kaXY+IDwlIH0pOyAlPiA8L2Rpdj4nXG50cGxbJ3NlYXJjaC9zZWxlY3QuaHRtbCddID0gJyA8c2VsZWN0IDwlLSBhdHRyICU+PiA8b3B0aW9uPi0tPC9vcHRpb24+IDwlICQuZWFjaChvcHRpb25zLCBmdW5jdGlvbihrZXksIG9wdGlvbikgeyAlPiA8JSBpZiAob3B0aW9uLnR5cGUgPT09IFxcJ2dyb3VwXFwnKSB7ICU+IDxvcHRncm91cDwlLSBvcHRpb24uYXR0ciAlPj4gPCUgJC5lYWNoKG9wdGlvbi5vcHRpb25zLCBmdW5jdGlvbihrZXksIGdyb3VwT3B0aW9uKSB7ICU+IDxvcHRpb24gPCUtIGdyb3VwT3B0aW9uLmF0dHIgJT4+PCU9IGdyb3VwT3B0aW9uLnRleHQgJT48L29wdGlvbj4gPCUgfSk7ICU+IDwvb3B0Z3JvdXA+IDwlIH0gZWxzZSB7ICU+IDxvcHRpb24gPCUtIG9wdGlvbi5hdHRyICU+PjwlPSBvcHRpb24udGV4dCAlPjwvb3B0aW9uPiA8JSB9ICU+IDwlIH0pOyAlPiA8L3NlbGVjdD4nXG50cGxbJ3NlYXJjaC9zd2l0Y2guaHRtbCddID0gJzxkaXYgY2xhc3M9XCJmb3JtLWNoZWNrIGZvcm0tc3dpdGNoIHB0LTJcIj4gPGlucHV0IGNsYXNzPVwiZm9ybS1jaGVjay1pbnB1dFwiIHR5cGU9XCJjaGVja2JveFwiIGlkPVwiPCU9IChmaWVsZCArIGlkKSAlPlwiIG5hbWU9XCI8JT0gZmllbGQgJT5cIiB2YWx1ZT1cIjwlPSB2YWx1ZVkgJT5cIiA8JT0gY2hlY2tlZCA/IFxcJyBjaGVja2VkXFwnIDogXFwnXFwnICU+PiA8L2Rpdj4nXG50cGxbJ3NlYXJjaC90ZXh0Lmh0bWwnXSA9ICc8aW5wdXQgdHlwZT1cInRleHRcIiA8JS0gYXR0ciAlPj4nXG50cGxbJ3RhYmxlLmh0bWwnXSA9ICcgPHRhYmxlIGNsYXNzPVwidGFibGUgPCU9IGNsYXNzZXMgJT4gbWItMFwiPiA8Y29sZ3JvdXA+IDwlICQuZWFjaChjb2xHcm91cHMsIGZ1bmN0aW9uKGtleSwgY29sdW1uR3JvdXApIHsgJT4gPGNvbDwlIGlmIChjb2x1bW5Hcm91cC5zdHlsZSkgeyAlPiBzdHlsZT1cIjwlPSBjb2x1bW5Hcm91cC5zdHlsZSAlPlwiPCUgfSAlPi8+IDwlIH0pOyAlPiA8L2NvbGdyb3VwPiA8JSBpZiAoc2hvd0hlYWRlcnMpIHsgJT4gPHRoZWFkPCUgaWYgKHRoZWFkQXR0cikgeyAlPiA8JS0gdGhlYWRBdHRyICU+XCI8JSB9ICU+PiA8JS0gY29sdW1uc0hlYWRlciAlPiA8L3RoZWFkPiA8JSB9ICU+IDx0Ym9keT48L3Rib2R5PiA8JSBpZiAoY29sdW1uc0Zvb3RlciAhPSBcXCdcXCcpIHsgJT4gPHRmb290PiA8JS0gY29sdW1uc0Zvb3RlciAlPiA8L3Rmb290PiA8JSB9ICU+IDwvdGFibGU+J1xudHBsWyd0YWJsZS9jb2x1bW5zL2Zvb3Rlci5odG1sJ10gPSAnPHRyPiA8JSAkLmVhY2goY29sdW1ucywgZnVuY3Rpb24oa2V5LCBjb2x1bW4pIHsgJT4gPHRkPCUtIGNvbHVtbi5hdHRyJT4+PCUtIGNvbHVtbi5jb250ZW50ICU+PC90ZD4gPCUgfSk7ICU+IDwvdHI+J1xudHBsWyd0YWJsZS9jb2x1bW5zL2hlYWRlci5odG1sJ10gPSAnPHRyIGNsYXNzPVwiZnctbWVkaXVtIGJnLWJvZHlcIj4gPCUgY29sdW1ucy5tYXAoZnVuY3Rpb24oY29sdW1uKSB7ICU+IDx0ZDwlLSBjb2x1bW4uYXR0ciU+PiA8c3BhbiBjbGFzcz1cImNvcmV1aS10YWJsZV9fY29sdW1uLWJvcmRlclwiPjwvc3Bhbj4gPHNwYW4gY2xhc3M9XCJjb3JldWktdGFibGVfX2NvbHVtbi1sYWJlbFwiPjwlLSBjb2x1bW4uY29udGVudCAlPjwvc3Bhbj4gPC90ZD4gPCUgfSk7ICU+IDwvdHI+J1xudHBsWyd0YWJsZS9jb2x1bW5zL21lbnUvYnV0dG9uLmh0bWwnXSA9ICc8bGk+PGJ1dHRvbiA8JS0gYXR0ciU+PjwlLSB0ZXh0ICU+PC9idXR0b24+PC9saT4nXG50cGxbJ3RhYmxlL2NvbHVtbnMvbWVudS9kaXZpZGVyLmh0bWwnXSA9ICc8bGk+PGhyIGNsYXNzPVwiZHJvcGRvd24tZGl2aWRlclwiPjwvbGk+J1xudHBsWyd0YWJsZS9jb2x1bW5zL21lbnUvaGVhZGVyLmh0bWwnXSA9ICc8bGk+PGg2IGNsYXNzPVwiZHJvcGRvd24taGVhZGVyXCI+PCUtIHRleHQgJT48L2g2PjwvbGk+J1xudHBsWyd0YWJsZS9jb2x1bW5zL21lbnUvbGluay5odG1sJ10gPSAnPGxpPjxhIDwlLSBhdHRyJT4+PCUtIHRleHQgJT48L2E+PC9saT4nXG50cGxbJ3RhYmxlL2NvbHVtbnMvdGQuaHRtbCddID0gJzx0ZDwlLSBhdHRyJT4+IDxzcGFuIGNsYXNzPVwiY29yZXVpLXRhYmxlX19jb2x1bW4tYm9yZGVyXCI+PC9zcGFuPiA8c3BhbiBjbGFzcz1cImNvcmV1aS10YWJsZV9fY29sdW1uLWxhYmVsXCI+PCUtIGxhYmVsICU+PC9zcGFuPiA8JSBpZiAoZGVzY3JpcHRpb24pIHsgJT4gPHNtYWxsIGNsYXNzPVwiY29yZXVpLXRhYmxlX19jb2x1bW4tZGVzY3JpcHRpb24gYmkgYmktcXVlc3Rpb24tY2lyY2xlIHRleHQtYm9keS1zZWNvbmRhcnlcIiB0aXRsZT1cIjwlPSBkZXNjcmlwdGlvbiAlPlwiIGRhdGEtYnMtdG9nZ2xlPVwidG9vbHRpcFwiIGRhdGEtYnMtcGxhY2VtZW50PVwiYm90dG9tXCI+PC9zbWFsbD4gPCUgfSAlPiA8JSBpZiAoc29ydGFibGUgPT09IFxcJ2FzY1xcJykgeyAlPiA8aSBjbGFzcz1cImNvcmV1aS10YWJsZV9fY29sdW1uLXNvcnQgYmkgYmktc29ydC1kb3duLWFsdFwiPjwvaT4gPCUgfSBlbHNlIGlmIChzb3J0YWJsZSA9PT0gXFwnZGVzY1xcJykgeyAlPiA8aSBjbGFzcz1cImNvcmV1aS10YWJsZV9fY29sdW1uLXNvcnQgYmkgYmktc29ydC1kb3duXCI+PC9pPiA8JSB9ICU+IDwlIGlmIChpc3NldE1lbnUpIHsgJT4gPGRpdiBjbGFzcz1cImRyb3Bkb3duIGQtaW5saW5lIGZ3LW5vcm1hbCBjb3JldWktdGFibGVfX2NvbHVtbi1tZW51XCI+IDxzcGFuIGNsYXNzPVwiZHJvcGRvd24tdG9nZ2xlIDwlPSBtZW51U2hvd0Fsd2F5cyAlPlwiIGRhdGEtYnMtdG9nZ2xlPVwiZHJvcGRvd25cIj4gPGkgY2xhc3M9XCJiaSBiaS10aHJlZS1kb3RzLXZlcnRpY2FsXCI+PC9pPiA8L3NwYW4+IDx1bCBjbGFzcz1cImRyb3Bkb3duLW1lbnUgZHJvcGRvd24tbWVudS08JT0gbWVudVBvc2l0aW9uICU+XCI+PC91bD4gPC9kaXY+IDwlIH0gJT4gPC90ZD4nXG50cGxbJ3RhYmxlL2NvbHVtbnMvdHIuaHRtbCddID0gJzx0ciBjbGFzcz1cImZ3LW1lZGl1bSBiZy1ib2R5XCI+PC90cj4nXG50cGxbJ3RhYmxlL2NvbnRyb2wuaHRtbCddID0gJzxkaXYgaWQ9XCJjb3JldWktdGFibGUtY29udHJvbC08JT0gaWQgJT5cIiBjbGFzcz1cImNvcmV1aS10YWJsZV9fY29udHJvbFwiPjwvZGl2PidcbnRwbFsndGFibGUvY29udHJvbHMvZm9vdGVyLW91dC5odG1sJ10gPSAnIDxkaXYgY2xhc3M9XCJjb3JldWktdGFibGVfX2Zvb3RlciBkLWZsZXgganVzdGlmeS1jb250ZW50LWJldHdlZW5cIj4gPCUgaWYgKGNvbnRyb2xzTGVmdC5sZW5ndGgpIHsgJT4gPGRpdiBjbGFzcz1cImNvcmV1aS10YWJsZV9fY29udHJvbHMgY29yZXVpLXRhYmxlX19jb250cm9sc19sZWZ0IGQtZmxleCBqdXN0aWZ5LWNvbnRlbnQtc3RhcnQgZ2FwLTIgZmxleC13cmFwIGZsZXgtZmlsbCBtYi0xIG10LTIgYWxpZ24taXRlbXMtY2VudGVyXCI+PC9kaXY+IDwlIH0gJT4gPCUgaWYgKGNvbnRyb2xzQ2VudGVyLmxlbmd0aCkgeyAlPiA8ZGl2IGNsYXNzPVwiY29yZXVpLXRhYmxlX19jb250cm9scyBjb3JldWktdGFibGVfX2NvbnRyb2xzX2NlbnRlciBkLWZsZXgganVzdGlmeS1jb250ZW50LWNlbnRlciBnYXAtMiBmbGV4LXdyYXAgZmxleC1maWxsIG1iLTEgbXQtMiBhbGlnbi1pdGVtcy1jZW50ZXJcIj48L2Rpdj4gPCUgfSAlPiA8JSBpZiAoY29udHJvbHNSaWdodC5sZW5ndGgpIHsgJT4gPGRpdiBjbGFzcz1cImNvcmV1aS10YWJsZV9fY29udHJvbHMgY29yZXVpLXRhYmxlX19jb250cm9sc19yaWdodCBkLWZsZXgganVzdGlmeS1jb250ZW50LWVuZCBnYXAtMiBmbGV4LXdyYXAgZmxleC1maWxsIG1iLTEgbXQtMiBhbGlnbi1pdGVtcy1jZW50ZXJcIj48L2Rpdj4gPCUgfSAlPiA8L2Rpdj4nXG50cGxbJ3RhYmxlL2NvbnRyb2xzL2Zvb3Rlci5odG1sJ10gPSAnIDxkaXYgY2xhc3M9XCJjb3JldWktdGFibGVfX2Zvb3RlciBwcy0xIHBlLTEgZC1mbGV4IGp1c3RpZnktY29udGVudC1iZXR3ZWVuIGJvcmRlci10b3AgYm9yZGVyLXNlY29uZGFyeS1zdWJ0bGVcIj4gPCUgaWYgKGNvbnRyb2xzTGVmdC5sZW5ndGgpIHsgJT4gPGRpdiBjbGFzcz1cImNvcmV1aS10YWJsZV9fY29udHJvbHMgY29yZXVpLXRhYmxlX19jb250cm9sc19sZWZ0IGQtZmxleCBqdXN0aWZ5LWNvbnRlbnQtc3RhcnQgZ2FwLTIgZmxleC13cmFwIGZsZXgtZmlsbCBtYi0xIG10LTEgYWxpZ24taXRlbXMtY2VudGVyXCI+PC9kaXY+IDwlIH0gJT4gPCUgaWYgKGNvbnRyb2xzQ2VudGVyLmxlbmd0aCkgeyAlPiA8ZGl2IGNsYXNzPVwiY29yZXVpLXRhYmxlX19jb250cm9scyBjb3JldWktdGFibGVfX2NvbnRyb2xzX2NlbnRlciBkLWZsZXgganVzdGlmeS1jb250ZW50LWNlbnRlciBnYXAtMiBmbGV4LXdyYXAgZmxleC1maWxsIG1iLTEgbXQtMSBhbGlnbi1pdGVtcy1jZW50ZXJcIj48L2Rpdj4gPCUgfSAlPiA8JSBpZiAoY29udHJvbHNSaWdodC5sZW5ndGgpIHsgJT4gPGRpdiBjbGFzcz1cImNvcmV1aS10YWJsZV9fY29udHJvbHMgY29yZXVpLXRhYmxlX19jb250cm9sc19yaWdodCBkLWZsZXgganVzdGlmeS1jb250ZW50LWVuZCBnYXAtMiBmbGV4LXdyYXAgZmxleC1maWxsIG1iLTEgbXQtMSBhbGlnbi1pdGVtcy1jZW50ZXJcIj48L2Rpdj4gPCUgfSAlPiA8L2Rpdj4nXG50cGxbJ3RhYmxlL2NvbnRyb2xzL2hlYWRlci1vdXQuaHRtbCddID0gJyA8ZGl2IGNsYXNzPVwiY29yZXVpLXRhYmxlX19oZWFkZXIgZC1mbGV4IGp1c3RpZnktY29udGVudC1iZXR3ZWVuXCI+IDwlIGlmIChjb250cm9sc0xlZnQubGVuZ3RoKSB7ICU+IDxkaXYgY2xhc3M9XCJjb3JldWktdGFibGVfX2NvbnRyb2xzIGNvcmV1aS10YWJsZV9fY29udHJvbHNfbGVmdCBkLWZsZXgganVzdGlmeS1jb250ZW50LXN0YXJ0IGdhcC0yIGZsZXgtd3JhcCBmbGV4LWZpbGwgbWItMiBtdC0xIGFsaWduLWl0ZW1zLWNlbnRlclwiPjwvZGl2PiA8JSB9ICU+IDwlIGlmIChjb250cm9sc0NlbnRlci5sZW5ndGgpIHsgJT4gPGRpdiBjbGFzcz1cImNvcmV1aS10YWJsZV9fY29udHJvbHMgY29yZXVpLXRhYmxlX19jb250cm9sc19jZW50ZXIgZC1mbGV4IGp1c3RpZnktY29udGVudC1jZW50ZXIgZ2FwLTIgZmxleC13cmFwIGZsZXgtZmlsbCBtYi0yIG10LTEgYWxpZ24taXRlbXMtY2VudGVyXCI+PC9kaXY+IDwlIH0gJT4gPCUgaWYgKGNvbnRyb2xzUmlnaHQubGVuZ3RoKSB7ICU+IDxkaXYgY2xhc3M9XCJjb3JldWktdGFibGVfX2NvbnRyb2xzIGNvcmV1aS10YWJsZV9fY29udHJvbHNfcmlnaHQgZC1mbGV4IGp1c3RpZnktY29udGVudC1lbmQgZ2FwLTIgZmxleC13cmFwIGZsZXgtZmlsbCBtYi0yIG10LTEgYWxpZ24taXRlbXMtY2VudGVyXCI+PC9kaXY+IDwlIH0gJT4gPC9kaXY+J1xudHBsWyd0YWJsZS9jb250cm9scy9oZWFkZXIuaHRtbCddID0gJyA8ZGl2IGNsYXNzPVwiY29yZXVpLXRhYmxlX19oZWFkZXIgcHMtMSBwZS0xIGQtZmxleCBqdXN0aWZ5LWNvbnRlbnQtYmV0d2VlbiBib3JkZXItYm90dG9tIGJvcmRlci1zZWNvbmRhcnktc3VidGxlXCI+IDwlIGlmIChjb250cm9sc0xlZnQubGVuZ3RoKSB7ICU+IDxkaXYgY2xhc3M9XCJjb3JldWktdGFibGVfX2NvbnRyb2xzIGNvcmV1aS10YWJsZV9fY29udHJvbHNfbGVmdCBkLWZsZXgganVzdGlmeS1jb250ZW50LXN0YXJ0IGdhcC0yIGZsZXgtd3JhcCBmbGV4LWZpbGwgbXktMSBhbGlnbi1pdGVtcy1jZW50ZXJcIj48L2Rpdj4gPCUgfSAlPiA8JSBpZiAoY29udHJvbHNDZW50ZXIubGVuZ3RoKSB7ICU+IDxkaXYgY2xhc3M9XCJjb3JldWktdGFibGVfX2NvbnRyb2xzIGNvcmV1aS10YWJsZV9fY29udHJvbHNfY2VudGVyIGQtZmxleCBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyIGdhcC0yIGZsZXgtd3JhcCBmbGV4LWZpbGwgbXktMSBhbGlnbi1pdGVtcy1jZW50ZXJcIj48L2Rpdj4gPCUgfSAlPiA8JSBpZiAoY29udHJvbHNSaWdodC5sZW5ndGgpIHsgJT4gPGRpdiBjbGFzcz1cImNvcmV1aS10YWJsZV9fY29udHJvbHMgY29yZXVpLXRhYmxlX19jb250cm9sc19yaWdodCBkLWZsZXgganVzdGlmeS1jb250ZW50LWVuZCBnYXAtMiBmbGV4LXdyYXAgZmxleC1maWxsIG15LTEgYWxpZ24taXRlbXMtY2VudGVyXCI+PC9kaXY+IDwlIH0gJT4gPC9kaXY+J1xudHBsWyd0YWJsZS9sb2FkZXIuaHRtbCddID0gJzxkaXYgY2xhc3M9XCJjb3JldWktdGFibGUtbG9jayBwb3NpdGlvbi1hYnNvbHV0ZSB3LTEwMCB0b3AtMCBib3R0b20tMFwiPiA8ZGl2IGNsYXNzPVwiY29yZXVpLXRhYmxlLWJsb2NrIGJnLXNlY29uZGFyeS1zdWJ0bGUgcG9zaXRpb24tYWJzb2x1dGUgb3BhY2l0eS01MCB3LTEwMCB0b3AtMCBib3R0b20tMFwiPjwvZGl2PiA8ZGl2IGNsYXNzPVwiY29yZXVpLXRhYmxlLW1lc3NhZ2UgcG9zaXRpb24tcmVsYXRpdmUgc2hhZG93LXNtIGQtZmxleCBhbGlnbi1jb250ZW50LWNlbnRlciBqdXN0aWZ5LWNvbnRlbnQtc3RhcnQgZ2FwLTIgbXQtMyBweS0xIHB4LTIgbS1hdXRvIGJvcmRlciBib3JkZXItc2Vjb25kYXJ5LXN1YnRsZSByb3VuZGVkLTMgYmctYm9keS1zZWNvbmRhcnlcIj4gPGRpdiBjbGFzcz1cInNwaW5uZXItYm9yZGVyIHRleHQtc2Vjb25kYXJ5IGFsaWduLXNlbGYtY2VudGVyXCI+PC9kaXY+IDxzcGFuIGNsYXNzPVwibGgtbGdcIj48JT0gbGFuZy5sb2FkaW5nICU+PC9zcGFuPiA8L2Rpdj4gPC9kaXY+J1xudHBsWyd0YWJsZS9yZWNvcmQuaHRtbCddID0gJzx0cjwlLSBhdHRyICU+IGRhdGEtcmVjb3JkLWluZGV4PVwiPCU9IGluZGV4ICU+XCI+IDwlIGZpZWxkcy5tYXAoZnVuY3Rpb24oZmllbGQpIHsgJT4gPHRkPCUtIGZpZWxkLmF0dHIgJT4+PC90ZD4gPCUgfSk7ICU+IDwvdHI+J1xudHBsWyd0YWJsZS9yZWNvcmQvZW1wdHkuaHRtbCddID0gJzx0ciBjbGFzcz1cImNvcmV1aS10YWJsZV9fcmVjb3JkLWVtcHR5XCI+IDx0ZCBjbGFzcz1cInRleHQtY2VudGVyXCIgY29sc3Bhbj1cIjwlPSBjb2x1bW5zQ291bnQgJT5cIj48JT0gbGFuZy5lbXB0eVJlY29yZHMgJT48L3RkPiA8L3RyPidcbnRwbFsndGFibGUvcmVjb3JkL2V4cGFuZC5odG1sJ10gPSAnPHRyIGNsYXNzPVwiY29yZXVpLXRhYmxlX19yZWNvcmQtZXhwYW5kZWRcIiBzdHlsZT1cImRpc3BsYXk6IG5vbmVcIj4gPHRkIGNvbHNwYW49XCI8JT0gY29sc3BhbiAlPlwiPjwvdGQ+IDwvdHI+J1xudHBsWyd0YWJsZS9yZWNvcmQvZ3JvdXAuaHRtbCddID0gJzx0cjwlLSBhdHRyICU+PiA8dGQgY29sc3Bhbj1cIjwlPSBjb2xzcGFuICU+XCIgY2xhc3M9XCJib3JkZXItZW5kXCI+PC90ZD4gPC90cj4nO1xuZXhwb3J0IGRlZmF1bHQgdHBsOyIsIihmdW5jdGlvbihmKXtpZih0eXBlb2YgZXhwb3J0cz09PVwib2JqZWN0XCImJnR5cGVvZiBtb2R1bGUhPT1cInVuZGVmaW5lZFwiKXttb2R1bGUuZXhwb3J0cz1mKCl9ZWxzZSBpZih0eXBlb2YgZGVmaW5lPT09XCJmdW5jdGlvblwiJiZkZWZpbmUuYW1kKXtkZWZpbmUoW10sZil9ZWxzZXt2YXIgZztpZih0eXBlb2Ygd2luZG93IT09XCJ1bmRlZmluZWRcIil7Zz13aW5kb3d9ZWxzZSBpZih0eXBlb2YgZ2xvYmFsIT09XCJ1bmRlZmluZWRcIil7Zz1nbG9iYWx9ZWxzZSBpZih0eXBlb2Ygc2VsZiE9PVwidW5kZWZpbmVkXCIpe2c9c2VsZn1lbHNle2c9dGhpc31nLmVqcz1mKCl9fSkoZnVuY3Rpb24oKXt2YXIgZGVmaW5lLG1vZHVsZSxleHBvcnRzO3JldHVybiBmdW5jdGlvbigpe2Z1bmN0aW9uIHIoZSxuLHQpe2Z1bmN0aW9uIG8oaSxmKXtpZighbltpXSl7aWYoIWVbaV0pe3ZhciBjPVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmU7aWYoIWYmJmMpcmV0dXJuIGMoaSwhMCk7aWYodSlyZXR1cm4gdShpLCEwKTt2YXIgYT1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK2krXCInXCIpO3Rocm93IGEuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixhfXZhciBwPW5baV09e2V4cG9ydHM6e319O2VbaV1bMF0uY2FsbChwLmV4cG9ydHMsZnVuY3Rpb24ocil7dmFyIG49ZVtpXVsxXVtyXTtyZXR1cm4gbyhufHxyKX0scCxwLmV4cG9ydHMscixlLG4sdCl9cmV0dXJuIG5baV0uZXhwb3J0c31mb3IodmFyIHU9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZSxpPTA7aTx0Lmxlbmd0aDtpKyspbyh0W2ldKTtyZXR1cm4gb31yZXR1cm4gcn0oKSh7MTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XCJ1c2Ugc3RyaWN0XCI7dmFyIGZzPXJlcXVpcmUoXCJmc1wiKTt2YXIgcGF0aD1yZXF1aXJlKFwicGF0aFwiKTt2YXIgdXRpbHM9cmVxdWlyZShcIi4vdXRpbHNcIik7dmFyIHNjb3BlT3B0aW9uV2FybmVkPWZhbHNlO3ZhciBfVkVSU0lPTl9TVFJJTkc9cmVxdWlyZShcIi4uL3BhY2thZ2UuanNvblwiKS52ZXJzaW9uO3ZhciBfREVGQVVMVF9PUEVOX0RFTElNSVRFUj1cIjxcIjt2YXIgX0RFRkFVTFRfQ0xPU0VfREVMSU1JVEVSPVwiPlwiO3ZhciBfREVGQVVMVF9ERUxJTUlURVI9XCIlXCI7dmFyIF9ERUZBVUxUX0xPQ0FMU19OQU1FPVwibG9jYWxzXCI7dmFyIF9OQU1FPVwiZWpzXCI7dmFyIF9SRUdFWF9TVFJJTkc9XCIoPCUlfCUlPnw8JT18PCUtfDwlX3w8JSN8PCV8JT58LSU+fF8lPilcIjt2YXIgX09QVFNfUEFTU0FCTEVfV0lUSF9EQVRBPVtcImRlbGltaXRlclwiLFwic2NvcGVcIixcImNvbnRleHRcIixcImRlYnVnXCIsXCJjb21waWxlRGVidWdcIixcImNsaWVudFwiLFwiX3dpdGhcIixcInJtV2hpdGVzcGFjZVwiLFwic3RyaWN0XCIsXCJmaWxlbmFtZVwiLFwiYXN5bmNcIl07dmFyIF9PUFRTX1BBU1NBQkxFX1dJVEhfREFUQV9FWFBSRVNTPV9PUFRTX1BBU1NBQkxFX1dJVEhfREFUQS5jb25jYXQoXCJjYWNoZVwiKTt2YXIgX0JPTT0vXlxcdUZFRkYvO3ZhciBfSlNfSURFTlRJRklFUj0vXlthLXpBLVpfJF1bMC05YS16QS1aXyRdKiQvO2V4cG9ydHMuY2FjaGU9dXRpbHMuY2FjaGU7ZXhwb3J0cy5maWxlTG9hZGVyPWZzLnJlYWRGaWxlU3luYztleHBvcnRzLmxvY2Fsc05hbWU9X0RFRkFVTFRfTE9DQUxTX05BTUU7ZXhwb3J0cy5wcm9taXNlSW1wbD1uZXcgRnVuY3Rpb24oXCJyZXR1cm4gdGhpcztcIikoKS5Qcm9taXNlO2V4cG9ydHMucmVzb2x2ZUluY2x1ZGU9ZnVuY3Rpb24obmFtZSxmaWxlbmFtZSxpc0Rpcil7dmFyIGRpcm5hbWU9cGF0aC5kaXJuYW1lO3ZhciBleHRuYW1lPXBhdGguZXh0bmFtZTt2YXIgcmVzb2x2ZT1wYXRoLnJlc29sdmU7dmFyIGluY2x1ZGVQYXRoPXJlc29sdmUoaXNEaXI/ZmlsZW5hbWU6ZGlybmFtZShmaWxlbmFtZSksbmFtZSk7dmFyIGV4dD1leHRuYW1lKG5hbWUpO2lmKCFleHQpe2luY2x1ZGVQYXRoKz1cIi5lanNcIn1yZXR1cm4gaW5jbHVkZVBhdGh9O2Z1bmN0aW9uIHJlc29sdmVQYXRocyhuYW1lLHBhdGhzKXt2YXIgZmlsZVBhdGg7aWYocGF0aHMuc29tZShmdW5jdGlvbih2KXtmaWxlUGF0aD1leHBvcnRzLnJlc29sdmVJbmNsdWRlKG5hbWUsdix0cnVlKTtyZXR1cm4gZnMuZXhpc3RzU3luYyhmaWxlUGF0aCl9KSl7cmV0dXJuIGZpbGVQYXRofX1mdW5jdGlvbiBnZXRJbmNsdWRlUGF0aChwYXRoLG9wdGlvbnMpe3ZhciBpbmNsdWRlUGF0aDt2YXIgZmlsZVBhdGg7dmFyIHZpZXdzPW9wdGlvbnMudmlld3M7dmFyIG1hdGNoPS9eW0EtWmEtel0rOlxcXFx8XlxcLy8uZXhlYyhwYXRoKTtpZihtYXRjaCYmbWF0Y2gubGVuZ3RoKXtwYXRoPXBhdGgucmVwbGFjZSgvXlxcLyovLFwiXCIpO2lmKEFycmF5LmlzQXJyYXkob3B0aW9ucy5yb290KSl7aW5jbHVkZVBhdGg9cmVzb2x2ZVBhdGhzKHBhdGgsb3B0aW9ucy5yb290KX1lbHNle2luY2x1ZGVQYXRoPWV4cG9ydHMucmVzb2x2ZUluY2x1ZGUocGF0aCxvcHRpb25zLnJvb3R8fFwiL1wiLHRydWUpfX1lbHNle2lmKG9wdGlvbnMuZmlsZW5hbWUpe2ZpbGVQYXRoPWV4cG9ydHMucmVzb2x2ZUluY2x1ZGUocGF0aCxvcHRpb25zLmZpbGVuYW1lKTtpZihmcy5leGlzdHNTeW5jKGZpbGVQYXRoKSl7aW5jbHVkZVBhdGg9ZmlsZVBhdGh9fWlmKCFpbmNsdWRlUGF0aCYmQXJyYXkuaXNBcnJheSh2aWV3cykpe2luY2x1ZGVQYXRoPXJlc29sdmVQYXRocyhwYXRoLHZpZXdzKX1pZighaW5jbHVkZVBhdGgmJnR5cGVvZiBvcHRpb25zLmluY2x1ZGVyIT09XCJmdW5jdGlvblwiKXt0aHJvdyBuZXcgRXJyb3IoJ0NvdWxkIG5vdCBmaW5kIHRoZSBpbmNsdWRlIGZpbGUgXCInK29wdGlvbnMuZXNjYXBlRnVuY3Rpb24ocGF0aCkrJ1wiJyl9fXJldHVybiBpbmNsdWRlUGF0aH1mdW5jdGlvbiBoYW5kbGVDYWNoZShvcHRpb25zLHRlbXBsYXRlKXt2YXIgZnVuYzt2YXIgZmlsZW5hbWU9b3B0aW9ucy5maWxlbmFtZTt2YXIgaGFzVGVtcGxhdGU9YXJndW1lbnRzLmxlbmd0aD4xO2lmKG9wdGlvbnMuY2FjaGUpe2lmKCFmaWxlbmFtZSl7dGhyb3cgbmV3IEVycm9yKFwiY2FjaGUgb3B0aW9uIHJlcXVpcmVzIGEgZmlsZW5hbWVcIil9ZnVuYz1leHBvcnRzLmNhY2hlLmdldChmaWxlbmFtZSk7aWYoZnVuYyl7cmV0dXJuIGZ1bmN9aWYoIWhhc1RlbXBsYXRlKXt0ZW1wbGF0ZT1maWxlTG9hZGVyKGZpbGVuYW1lKS50b1N0cmluZygpLnJlcGxhY2UoX0JPTSxcIlwiKX19ZWxzZSBpZighaGFzVGVtcGxhdGUpe2lmKCFmaWxlbmFtZSl7dGhyb3cgbmV3IEVycm9yKFwiSW50ZXJuYWwgRUpTIGVycm9yOiBubyBmaWxlIG5hbWUgb3IgdGVtcGxhdGUgXCIrXCJwcm92aWRlZFwiKX10ZW1wbGF0ZT1maWxlTG9hZGVyKGZpbGVuYW1lKS50b1N0cmluZygpLnJlcGxhY2UoX0JPTSxcIlwiKX1mdW5jPWV4cG9ydHMuY29tcGlsZSh0ZW1wbGF0ZSxvcHRpb25zKTtpZihvcHRpb25zLmNhY2hlKXtleHBvcnRzLmNhY2hlLnNldChmaWxlbmFtZSxmdW5jKX1yZXR1cm4gZnVuY31mdW5jdGlvbiB0cnlIYW5kbGVDYWNoZShvcHRpb25zLGRhdGEsY2Ipe3ZhciByZXN1bHQ7aWYoIWNiKXtpZih0eXBlb2YgZXhwb3J0cy5wcm9taXNlSW1wbD09XCJmdW5jdGlvblwiKXtyZXR1cm4gbmV3IGV4cG9ydHMucHJvbWlzZUltcGwoZnVuY3Rpb24ocmVzb2x2ZSxyZWplY3Qpe3RyeXtyZXN1bHQ9aGFuZGxlQ2FjaGUob3B0aW9ucykoZGF0YSk7cmVzb2x2ZShyZXN1bHQpfWNhdGNoKGVycil7cmVqZWN0KGVycil9fSl9ZWxzZXt0aHJvdyBuZXcgRXJyb3IoXCJQbGVhc2UgcHJvdmlkZSBhIGNhbGxiYWNrIGZ1bmN0aW9uXCIpfX1lbHNle3RyeXtyZXN1bHQ9aGFuZGxlQ2FjaGUob3B0aW9ucykoZGF0YSl9Y2F0Y2goZXJyKXtyZXR1cm4gY2IoZXJyKX1jYihudWxsLHJlc3VsdCl9fWZ1bmN0aW9uIGZpbGVMb2FkZXIoZmlsZVBhdGgpe3JldHVybiBleHBvcnRzLmZpbGVMb2FkZXIoZmlsZVBhdGgpfWZ1bmN0aW9uIGluY2x1ZGVGaWxlKHBhdGgsb3B0aW9ucyl7dmFyIG9wdHM9dXRpbHMuc2hhbGxvd0NvcHkodXRpbHMuY3JlYXRlTnVsbFByb3RvT2JqV2hlcmVQb3NzaWJsZSgpLG9wdGlvbnMpO29wdHMuZmlsZW5hbWU9Z2V0SW5jbHVkZVBhdGgocGF0aCxvcHRzKTtpZih0eXBlb2Ygb3B0aW9ucy5pbmNsdWRlcj09PVwiZnVuY3Rpb25cIil7dmFyIGluY2x1ZGVyUmVzdWx0PW9wdGlvbnMuaW5jbHVkZXIocGF0aCxvcHRzLmZpbGVuYW1lKTtpZihpbmNsdWRlclJlc3VsdCl7aWYoaW5jbHVkZXJSZXN1bHQuZmlsZW5hbWUpe29wdHMuZmlsZW5hbWU9aW5jbHVkZXJSZXN1bHQuZmlsZW5hbWV9aWYoaW5jbHVkZXJSZXN1bHQudGVtcGxhdGUpe3JldHVybiBoYW5kbGVDYWNoZShvcHRzLGluY2x1ZGVyUmVzdWx0LnRlbXBsYXRlKX19fXJldHVybiBoYW5kbGVDYWNoZShvcHRzKX1mdW5jdGlvbiByZXRocm93KGVycixzdHIsZmxubSxsaW5lbm8sZXNjKXt2YXIgbGluZXM9c3RyLnNwbGl0KFwiXFxuXCIpO3ZhciBzdGFydD1NYXRoLm1heChsaW5lbm8tMywwKTt2YXIgZW5kPU1hdGgubWluKGxpbmVzLmxlbmd0aCxsaW5lbm8rMyk7dmFyIGZpbGVuYW1lPWVzYyhmbG5tKTt2YXIgY29udGV4dD1saW5lcy5zbGljZShzdGFydCxlbmQpLm1hcChmdW5jdGlvbihsaW5lLGkpe3ZhciBjdXJyPWkrc3RhcnQrMTtyZXR1cm4oY3Vycj09bGluZW5vP1wiID4+IFwiOlwiICAgIFwiKStjdXJyK1wifCBcIitsaW5lfSkuam9pbihcIlxcblwiKTtlcnIucGF0aD1maWxlbmFtZTtlcnIubWVzc2FnZT0oZmlsZW5hbWV8fFwiZWpzXCIpK1wiOlwiK2xpbmVubytcIlxcblwiK2NvbnRleHQrXCJcXG5cXG5cIitlcnIubWVzc2FnZTt0aHJvdyBlcnJ9ZnVuY3Rpb24gc3RyaXBTZW1pKHN0cil7cmV0dXJuIHN0ci5yZXBsYWNlKC87KFxccyokKS8sXCIkMVwiKX1leHBvcnRzLmNvbXBpbGU9ZnVuY3Rpb24gY29tcGlsZSh0ZW1wbGF0ZSxvcHRzKXt2YXIgdGVtcGw7aWYob3B0cyYmb3B0cy5zY29wZSl7aWYoIXNjb3BlT3B0aW9uV2FybmVkKXtjb25zb2xlLndhcm4oXCJgc2NvcGVgIG9wdGlvbiBpcyBkZXByZWNhdGVkIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gRUpTIDNcIik7c2NvcGVPcHRpb25XYXJuZWQ9dHJ1ZX1pZighb3B0cy5jb250ZXh0KXtvcHRzLmNvbnRleHQ9b3B0cy5zY29wZX1kZWxldGUgb3B0cy5zY29wZX10ZW1wbD1uZXcgVGVtcGxhdGUodGVtcGxhdGUsb3B0cyk7cmV0dXJuIHRlbXBsLmNvbXBpbGUoKX07ZXhwb3J0cy5yZW5kZXI9ZnVuY3Rpb24odGVtcGxhdGUsZCxvKXt2YXIgZGF0YT1kfHx1dGlscy5jcmVhdGVOdWxsUHJvdG9PYmpXaGVyZVBvc3NpYmxlKCk7dmFyIG9wdHM9b3x8dXRpbHMuY3JlYXRlTnVsbFByb3RvT2JqV2hlcmVQb3NzaWJsZSgpO2lmKGFyZ3VtZW50cy5sZW5ndGg9PTIpe3V0aWxzLnNoYWxsb3dDb3B5RnJvbUxpc3Qob3B0cyxkYXRhLF9PUFRTX1BBU1NBQkxFX1dJVEhfREFUQSl9cmV0dXJuIGhhbmRsZUNhY2hlKG9wdHMsdGVtcGxhdGUpKGRhdGEpfTtleHBvcnRzLnJlbmRlckZpbGU9ZnVuY3Rpb24oKXt2YXIgYXJncz1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO3ZhciBmaWxlbmFtZT1hcmdzLnNoaWZ0KCk7dmFyIGNiO3ZhciBvcHRzPXtmaWxlbmFtZTpmaWxlbmFtZX07dmFyIGRhdGE7dmFyIHZpZXdPcHRzO2lmKHR5cGVvZiBhcmd1bWVudHNbYXJndW1lbnRzLmxlbmd0aC0xXT09XCJmdW5jdGlvblwiKXtjYj1hcmdzLnBvcCgpfWlmKGFyZ3MubGVuZ3RoKXtkYXRhPWFyZ3Muc2hpZnQoKTtpZihhcmdzLmxlbmd0aCl7dXRpbHMuc2hhbGxvd0NvcHkob3B0cyxhcmdzLnBvcCgpKX1lbHNle2lmKGRhdGEuc2V0dGluZ3Mpe2lmKGRhdGEuc2V0dGluZ3Mudmlld3Mpe29wdHMudmlld3M9ZGF0YS5zZXR0aW5ncy52aWV3c31pZihkYXRhLnNldHRpbmdzW1widmlldyBjYWNoZVwiXSl7b3B0cy5jYWNoZT10cnVlfXZpZXdPcHRzPWRhdGEuc2V0dGluZ3NbXCJ2aWV3IG9wdGlvbnNcIl07aWYodmlld09wdHMpe3V0aWxzLnNoYWxsb3dDb3B5KG9wdHMsdmlld09wdHMpfX11dGlscy5zaGFsbG93Q29weUZyb21MaXN0KG9wdHMsZGF0YSxfT1BUU19QQVNTQUJMRV9XSVRIX0RBVEFfRVhQUkVTUyl9b3B0cy5maWxlbmFtZT1maWxlbmFtZX1lbHNle2RhdGE9dXRpbHMuY3JlYXRlTnVsbFByb3RvT2JqV2hlcmVQb3NzaWJsZSgpfXJldHVybiB0cnlIYW5kbGVDYWNoZShvcHRzLGRhdGEsY2IpfTtleHBvcnRzLlRlbXBsYXRlPVRlbXBsYXRlO2V4cG9ydHMuY2xlYXJDYWNoZT1mdW5jdGlvbigpe2V4cG9ydHMuY2FjaGUucmVzZXQoKX07ZnVuY3Rpb24gVGVtcGxhdGUodGV4dCxvcHRzUGFyYW0pe3ZhciBvcHRzPXV0aWxzLmhhc093bk9ubHlPYmplY3Qob3B0c1BhcmFtKTt2YXIgb3B0aW9ucz11dGlscy5jcmVhdGVOdWxsUHJvdG9PYmpXaGVyZVBvc3NpYmxlKCk7dGhpcy50ZW1wbGF0ZVRleHQ9dGV4dDt0aGlzLm1vZGU9bnVsbDt0aGlzLnRydW5jYXRlPWZhbHNlO3RoaXMuY3VycmVudExpbmU9MTt0aGlzLnNvdXJjZT1cIlwiO29wdGlvbnMuY2xpZW50PW9wdHMuY2xpZW50fHxmYWxzZTtvcHRpb25zLmVzY2FwZUZ1bmN0aW9uPW9wdHMuZXNjYXBlfHxvcHRzLmVzY2FwZUZ1bmN0aW9ufHx1dGlscy5lc2NhcGVYTUw7b3B0aW9ucy5jb21waWxlRGVidWc9b3B0cy5jb21waWxlRGVidWchPT1mYWxzZTtvcHRpb25zLmRlYnVnPSEhb3B0cy5kZWJ1ZztvcHRpb25zLmZpbGVuYW1lPW9wdHMuZmlsZW5hbWU7b3B0aW9ucy5vcGVuRGVsaW1pdGVyPW9wdHMub3BlbkRlbGltaXRlcnx8ZXhwb3J0cy5vcGVuRGVsaW1pdGVyfHxfREVGQVVMVF9PUEVOX0RFTElNSVRFUjtvcHRpb25zLmNsb3NlRGVsaW1pdGVyPW9wdHMuY2xvc2VEZWxpbWl0ZXJ8fGV4cG9ydHMuY2xvc2VEZWxpbWl0ZXJ8fF9ERUZBVUxUX0NMT1NFX0RFTElNSVRFUjtvcHRpb25zLmRlbGltaXRlcj1vcHRzLmRlbGltaXRlcnx8ZXhwb3J0cy5kZWxpbWl0ZXJ8fF9ERUZBVUxUX0RFTElNSVRFUjtvcHRpb25zLnN0cmljdD1vcHRzLnN0cmljdHx8ZmFsc2U7b3B0aW9ucy5jb250ZXh0PW9wdHMuY29udGV4dDtvcHRpb25zLmNhY2hlPW9wdHMuY2FjaGV8fGZhbHNlO29wdGlvbnMucm1XaGl0ZXNwYWNlPW9wdHMucm1XaGl0ZXNwYWNlO29wdGlvbnMucm9vdD1vcHRzLnJvb3Q7b3B0aW9ucy5pbmNsdWRlcj1vcHRzLmluY2x1ZGVyO29wdGlvbnMub3V0cHV0RnVuY3Rpb25OYW1lPW9wdHMub3V0cHV0RnVuY3Rpb25OYW1lO29wdGlvbnMubG9jYWxzTmFtZT1vcHRzLmxvY2Fsc05hbWV8fGV4cG9ydHMubG9jYWxzTmFtZXx8X0RFRkFVTFRfTE9DQUxTX05BTUU7b3B0aW9ucy52aWV3cz1vcHRzLnZpZXdzO29wdGlvbnMuYXN5bmM9b3B0cy5hc3luYztvcHRpb25zLmRlc3RydWN0dXJlZExvY2Fscz1vcHRzLmRlc3RydWN0dXJlZExvY2FscztvcHRpb25zLmxlZ2FjeUluY2x1ZGU9dHlwZW9mIG9wdHMubGVnYWN5SW5jbHVkZSE9XCJ1bmRlZmluZWRcIj8hIW9wdHMubGVnYWN5SW5jbHVkZTp0cnVlO2lmKG9wdGlvbnMuc3RyaWN0KXtvcHRpb25zLl93aXRoPWZhbHNlfWVsc2V7b3B0aW9ucy5fd2l0aD10eXBlb2Ygb3B0cy5fd2l0aCE9XCJ1bmRlZmluZWRcIj9vcHRzLl93aXRoOnRydWV9dGhpcy5vcHRzPW9wdGlvbnM7dGhpcy5yZWdleD10aGlzLmNyZWF0ZVJlZ2V4KCl9VGVtcGxhdGUubW9kZXM9e0VWQUw6XCJldmFsXCIsRVNDQVBFRDpcImVzY2FwZWRcIixSQVc6XCJyYXdcIixDT01NRU5UOlwiY29tbWVudFwiLExJVEVSQUw6XCJsaXRlcmFsXCJ9O1RlbXBsYXRlLnByb3RvdHlwZT17Y3JlYXRlUmVnZXg6ZnVuY3Rpb24oKXt2YXIgc3RyPV9SRUdFWF9TVFJJTkc7dmFyIGRlbGltPXV0aWxzLmVzY2FwZVJlZ0V4cENoYXJzKHRoaXMub3B0cy5kZWxpbWl0ZXIpO3ZhciBvcGVuPXV0aWxzLmVzY2FwZVJlZ0V4cENoYXJzKHRoaXMub3B0cy5vcGVuRGVsaW1pdGVyKTt2YXIgY2xvc2U9dXRpbHMuZXNjYXBlUmVnRXhwQ2hhcnModGhpcy5vcHRzLmNsb3NlRGVsaW1pdGVyKTtzdHI9c3RyLnJlcGxhY2UoLyUvZyxkZWxpbSkucmVwbGFjZSgvPC9nLG9wZW4pLnJlcGxhY2UoLz4vZyxjbG9zZSk7cmV0dXJuIG5ldyBSZWdFeHAoc3RyKX0sY29tcGlsZTpmdW5jdGlvbigpe3ZhciBzcmM7dmFyIGZuO3ZhciBvcHRzPXRoaXMub3B0czt2YXIgcHJlcGVuZGVkPVwiXCI7dmFyIGFwcGVuZGVkPVwiXCI7dmFyIGVzY2FwZUZuPW9wdHMuZXNjYXBlRnVuY3Rpb247dmFyIGN0b3I7dmFyIHNhbml0aXplZEZpbGVuYW1lPW9wdHMuZmlsZW5hbWU/SlNPTi5zdHJpbmdpZnkob3B0cy5maWxlbmFtZSk6XCJ1bmRlZmluZWRcIjtpZighdGhpcy5zb3VyY2Upe3RoaXMuZ2VuZXJhdGVTb3VyY2UoKTtwcmVwZW5kZWQrPScgIHZhciBfX291dHB1dCA9IFwiXCI7XFxuJytcIiAgZnVuY3Rpb24gX19hcHBlbmQocykgeyBpZiAocyAhPT0gdW5kZWZpbmVkICYmIHMgIT09IG51bGwpIF9fb3V0cHV0ICs9IHMgfVxcblwiO2lmKG9wdHMub3V0cHV0RnVuY3Rpb25OYW1lKXtpZighX0pTX0lERU5USUZJRVIudGVzdChvcHRzLm91dHB1dEZ1bmN0aW9uTmFtZSkpe3Rocm93IG5ldyBFcnJvcihcIm91dHB1dEZ1bmN0aW9uTmFtZSBpcyBub3QgYSB2YWxpZCBKUyBpZGVudGlmaWVyLlwiKX1wcmVwZW5kZWQrPVwiICB2YXIgXCIrb3B0cy5vdXRwdXRGdW5jdGlvbk5hbWUrXCIgPSBfX2FwcGVuZDtcIitcIlxcblwifWlmKG9wdHMubG9jYWxzTmFtZSYmIV9KU19JREVOVElGSUVSLnRlc3Qob3B0cy5sb2NhbHNOYW1lKSl7dGhyb3cgbmV3IEVycm9yKFwibG9jYWxzTmFtZSBpcyBub3QgYSB2YWxpZCBKUyBpZGVudGlmaWVyLlwiKX1pZihvcHRzLmRlc3RydWN0dXJlZExvY2FscyYmb3B0cy5kZXN0cnVjdHVyZWRMb2NhbHMubGVuZ3RoKXt2YXIgZGVzdHJ1Y3R1cmluZz1cIiAgdmFyIF9fbG9jYWxzID0gKFwiK29wdHMubG9jYWxzTmFtZStcIiB8fCB7fSksXFxuXCI7Zm9yKHZhciBpPTA7aTxvcHRzLmRlc3RydWN0dXJlZExvY2Fscy5sZW5ndGg7aSsrKXt2YXIgbmFtZT1vcHRzLmRlc3RydWN0dXJlZExvY2Fsc1tpXTtpZighX0pTX0lERU5USUZJRVIudGVzdChuYW1lKSl7dGhyb3cgbmV3IEVycm9yKFwiZGVzdHJ1Y3R1cmVkTG9jYWxzW1wiK2krXCJdIGlzIG5vdCBhIHZhbGlkIEpTIGlkZW50aWZpZXIuXCIpfWlmKGk+MCl7ZGVzdHJ1Y3R1cmluZys9XCIsXFxuICBcIn1kZXN0cnVjdHVyaW5nKz1uYW1lK1wiID0gX19sb2NhbHMuXCIrbmFtZX1wcmVwZW5kZWQrPWRlc3RydWN0dXJpbmcrXCI7XFxuXCJ9aWYob3B0cy5fd2l0aCE9PWZhbHNlKXtwcmVwZW5kZWQrPVwiICB3aXRoIChcIitvcHRzLmxvY2Fsc05hbWUrXCIgfHwge30pIHtcIitcIlxcblwiO2FwcGVuZGVkKz1cIiAgfVwiK1wiXFxuXCJ9YXBwZW5kZWQrPVwiICByZXR1cm4gX19vdXRwdXQ7XCIrXCJcXG5cIjt0aGlzLnNvdXJjZT1wcmVwZW5kZWQrdGhpcy5zb3VyY2UrYXBwZW5kZWR9aWYob3B0cy5jb21waWxlRGVidWcpe3NyYz1cInZhciBfX2xpbmUgPSAxXCIrXCJcXG5cIitcIiAgLCBfX2xpbmVzID0gXCIrSlNPTi5zdHJpbmdpZnkodGhpcy50ZW1wbGF0ZVRleHQpK1wiXFxuXCIrXCIgICwgX19maWxlbmFtZSA9IFwiK3Nhbml0aXplZEZpbGVuYW1lK1wiO1wiK1wiXFxuXCIrXCJ0cnkge1wiK1wiXFxuXCIrdGhpcy5zb3VyY2UrXCJ9IGNhdGNoIChlKSB7XCIrXCJcXG5cIitcIiAgcmV0aHJvdyhlLCBfX2xpbmVzLCBfX2ZpbGVuYW1lLCBfX2xpbmUsIGVzY2FwZUZuKTtcIitcIlxcblwiK1wifVwiK1wiXFxuXCJ9ZWxzZXtzcmM9dGhpcy5zb3VyY2V9aWYob3B0cy5jbGllbnQpe3NyYz1cImVzY2FwZUZuID0gZXNjYXBlRm4gfHwgXCIrZXNjYXBlRm4udG9TdHJpbmcoKStcIjtcIitcIlxcblwiK3NyYztpZihvcHRzLmNvbXBpbGVEZWJ1Zyl7c3JjPVwicmV0aHJvdyA9IHJldGhyb3cgfHwgXCIrcmV0aHJvdy50b1N0cmluZygpK1wiO1wiK1wiXFxuXCIrc3JjfX1pZihvcHRzLnN0cmljdCl7c3JjPSdcInVzZSBzdHJpY3RcIjtcXG4nK3NyY31pZihvcHRzLmRlYnVnKXtjb25zb2xlLmxvZyhzcmMpfWlmKG9wdHMuY29tcGlsZURlYnVnJiZvcHRzLmZpbGVuYW1lKXtzcmM9c3JjK1wiXFxuXCIrXCIvLyMgc291cmNlVVJMPVwiK3Nhbml0aXplZEZpbGVuYW1lK1wiXFxuXCJ9dHJ5e2lmKG9wdHMuYXN5bmMpe3RyeXtjdG9yPW5ldyBGdW5jdGlvbihcInJldHVybiAoYXN5bmMgZnVuY3Rpb24oKXt9KS5jb25zdHJ1Y3RvcjtcIikoKX1jYXRjaChlKXtpZihlIGluc3RhbmNlb2YgU3ludGF4RXJyb3Ipe3Rocm93IG5ldyBFcnJvcihcIlRoaXMgZW52aXJvbm1lbnQgZG9lcyBub3Qgc3VwcG9ydCBhc3luYy9hd2FpdFwiKX1lbHNle3Rocm93IGV9fX1lbHNle2N0b3I9RnVuY3Rpb259Zm49bmV3IGN0b3Iob3B0cy5sb2NhbHNOYW1lK1wiLCBlc2NhcGVGbiwgaW5jbHVkZSwgcmV0aHJvd1wiLHNyYyl9Y2F0Y2goZSl7aWYoZSBpbnN0YW5jZW9mIFN5bnRheEVycm9yKXtpZihvcHRzLmZpbGVuYW1lKXtlLm1lc3NhZ2UrPVwiIGluIFwiK29wdHMuZmlsZW5hbWV9ZS5tZXNzYWdlKz1cIiB3aGlsZSBjb21waWxpbmcgZWpzXFxuXFxuXCI7ZS5tZXNzYWdlKz1cIklmIHRoZSBhYm92ZSBlcnJvciBpcyBub3QgaGVscGZ1bCwgeW91IG1heSB3YW50IHRvIHRyeSBFSlMtTGludDpcXG5cIjtlLm1lc3NhZ2UrPVwiaHR0cHM6Ly9naXRodWIuY29tL1J5YW5aaW0vRUpTLUxpbnRcIjtpZighb3B0cy5hc3luYyl7ZS5tZXNzYWdlKz1cIlxcblwiO2UubWVzc2FnZSs9XCJPciwgaWYgeW91IG1lYW50IHRvIGNyZWF0ZSBhbiBhc3luYyBmdW5jdGlvbiwgcGFzcyBgYXN5bmM6IHRydWVgIGFzIGFuIG9wdGlvbi5cIn19dGhyb3cgZX12YXIgcmV0dXJuZWRGbj1vcHRzLmNsaWVudD9mbjpmdW5jdGlvbiBhbm9ueW1vdXMoZGF0YSl7dmFyIGluY2x1ZGU9ZnVuY3Rpb24ocGF0aCxpbmNsdWRlRGF0YSl7dmFyIGQ9dXRpbHMuc2hhbGxvd0NvcHkodXRpbHMuY3JlYXRlTnVsbFByb3RvT2JqV2hlcmVQb3NzaWJsZSgpLGRhdGEpO2lmKGluY2x1ZGVEYXRhKXtkPXV0aWxzLnNoYWxsb3dDb3B5KGQsaW5jbHVkZURhdGEpfXJldHVybiBpbmNsdWRlRmlsZShwYXRoLG9wdHMpKGQpfTtyZXR1cm4gZm4uYXBwbHkob3B0cy5jb250ZXh0LFtkYXRhfHx1dGlscy5jcmVhdGVOdWxsUHJvdG9PYmpXaGVyZVBvc3NpYmxlKCksZXNjYXBlRm4saW5jbHVkZSxyZXRocm93XSl9O2lmKG9wdHMuZmlsZW5hbWUmJnR5cGVvZiBPYmplY3QuZGVmaW5lUHJvcGVydHk9PT1cImZ1bmN0aW9uXCIpe3ZhciBmaWxlbmFtZT1vcHRzLmZpbGVuYW1lO3ZhciBiYXNlbmFtZT1wYXRoLmJhc2VuYW1lKGZpbGVuYW1lLHBhdGguZXh0bmFtZShmaWxlbmFtZSkpO3RyeXtPYmplY3QuZGVmaW5lUHJvcGVydHkocmV0dXJuZWRGbixcIm5hbWVcIix7dmFsdWU6YmFzZW5hbWUsd3JpdGFibGU6ZmFsc2UsZW51bWVyYWJsZTpmYWxzZSxjb25maWd1cmFibGU6dHJ1ZX0pfWNhdGNoKGUpe319cmV0dXJuIHJldHVybmVkRm59LGdlbmVyYXRlU291cmNlOmZ1bmN0aW9uKCl7dmFyIG9wdHM9dGhpcy5vcHRzO2lmKG9wdHMucm1XaGl0ZXNwYWNlKXt0aGlzLnRlbXBsYXRlVGV4dD10aGlzLnRlbXBsYXRlVGV4dC5yZXBsYWNlKC9bXFxyXFxuXSsvZyxcIlxcblwiKS5yZXBsYWNlKC9eXFxzK3xcXHMrJC9nbSxcIlwiKX10aGlzLnRlbXBsYXRlVGV4dD10aGlzLnRlbXBsYXRlVGV4dC5yZXBsYWNlKC9bIFxcdF0qPCVfL2dtLFwiPCVfXCIpLnJlcGxhY2UoL18lPlsgXFx0XSovZ20sXCJfJT5cIik7dmFyIHNlbGY9dGhpczt2YXIgbWF0Y2hlcz10aGlzLnBhcnNlVGVtcGxhdGVUZXh0KCk7dmFyIGQ9dGhpcy5vcHRzLmRlbGltaXRlcjt2YXIgbz10aGlzLm9wdHMub3BlbkRlbGltaXRlcjt2YXIgYz10aGlzLm9wdHMuY2xvc2VEZWxpbWl0ZXI7aWYobWF0Y2hlcyYmbWF0Y2hlcy5sZW5ndGgpe21hdGNoZXMuZm9yRWFjaChmdW5jdGlvbihsaW5lLGluZGV4KXt2YXIgY2xvc2luZztpZihsaW5lLmluZGV4T2YobytkKT09PTAmJmxpbmUuaW5kZXhPZihvK2QrZCkhPT0wKXtjbG9zaW5nPW1hdGNoZXNbaW5kZXgrMl07aWYoIShjbG9zaW5nPT1kK2N8fGNsb3Npbmc9PVwiLVwiK2QrY3x8Y2xvc2luZz09XCJfXCIrZCtjKSl7dGhyb3cgbmV3IEVycm9yKCdDb3VsZCBub3QgZmluZCBtYXRjaGluZyBjbG9zZSB0YWcgZm9yIFwiJytsaW5lKydcIi4nKX19c2VsZi5zY2FuTGluZShsaW5lKX0pfX0scGFyc2VUZW1wbGF0ZVRleHQ6ZnVuY3Rpb24oKXt2YXIgc3RyPXRoaXMudGVtcGxhdGVUZXh0O3ZhciBwYXQ9dGhpcy5yZWdleDt2YXIgcmVzdWx0PXBhdC5leGVjKHN0cik7dmFyIGFycj1bXTt2YXIgZmlyc3RQb3M7d2hpbGUocmVzdWx0KXtmaXJzdFBvcz1yZXN1bHQuaW5kZXg7aWYoZmlyc3RQb3MhPT0wKXthcnIucHVzaChzdHIuc3Vic3RyaW5nKDAsZmlyc3RQb3MpKTtzdHI9c3RyLnNsaWNlKGZpcnN0UG9zKX1hcnIucHVzaChyZXN1bHRbMF0pO3N0cj1zdHIuc2xpY2UocmVzdWx0WzBdLmxlbmd0aCk7cmVzdWx0PXBhdC5leGVjKHN0cil9aWYoc3RyKXthcnIucHVzaChzdHIpfXJldHVybiBhcnJ9LF9hZGRPdXRwdXQ6ZnVuY3Rpb24obGluZSl7aWYodGhpcy50cnVuY2F0ZSl7bGluZT1saW5lLnJlcGxhY2UoL14oPzpcXHJcXG58XFxyfFxcbikvLFwiXCIpO3RoaXMudHJ1bmNhdGU9ZmFsc2V9aWYoIWxpbmUpe3JldHVybiBsaW5lfWxpbmU9bGluZS5yZXBsYWNlKC9cXFxcL2csXCJcXFxcXFxcXFwiKTtsaW5lPWxpbmUucmVwbGFjZSgvXFxuL2csXCJcXFxcblwiKTtsaW5lPWxpbmUucmVwbGFjZSgvXFxyL2csXCJcXFxcclwiKTtsaW5lPWxpbmUucmVwbGFjZSgvXCIvZywnXFxcXFwiJyk7dGhpcy5zb3VyY2UrPScgICAgOyBfX2FwcGVuZChcIicrbGluZSsnXCIpJytcIlxcblwifSxzY2FuTGluZTpmdW5jdGlvbihsaW5lKXt2YXIgc2VsZj10aGlzO3ZhciBkPXRoaXMub3B0cy5kZWxpbWl0ZXI7dmFyIG89dGhpcy5vcHRzLm9wZW5EZWxpbWl0ZXI7dmFyIGM9dGhpcy5vcHRzLmNsb3NlRGVsaW1pdGVyO3ZhciBuZXdMaW5lQ291bnQ9MDtuZXdMaW5lQ291bnQ9bGluZS5zcGxpdChcIlxcblwiKS5sZW5ndGgtMTtzd2l0Y2gobGluZSl7Y2FzZSBvK2Q6Y2FzZSBvK2QrXCJfXCI6dGhpcy5tb2RlPVRlbXBsYXRlLm1vZGVzLkVWQUw7YnJlYWs7Y2FzZSBvK2QrXCI9XCI6dGhpcy5tb2RlPVRlbXBsYXRlLm1vZGVzLkVTQ0FQRUQ7YnJlYWs7Y2FzZSBvK2QrXCItXCI6dGhpcy5tb2RlPVRlbXBsYXRlLm1vZGVzLlJBVzticmVhaztjYXNlIG8rZCtcIiNcIjp0aGlzLm1vZGU9VGVtcGxhdGUubW9kZXMuQ09NTUVOVDticmVhaztjYXNlIG8rZCtkOnRoaXMubW9kZT1UZW1wbGF0ZS5tb2Rlcy5MSVRFUkFMO3RoaXMuc291cmNlKz0nICAgIDsgX19hcHBlbmQoXCInK2xpbmUucmVwbGFjZShvK2QrZCxvK2QpKydcIiknK1wiXFxuXCI7YnJlYWs7Y2FzZSBkK2QrYzp0aGlzLm1vZGU9VGVtcGxhdGUubW9kZXMuTElURVJBTDt0aGlzLnNvdXJjZSs9JyAgICA7IF9fYXBwZW5kKFwiJytsaW5lLnJlcGxhY2UoZCtkK2MsZCtjKSsnXCIpJytcIlxcblwiO2JyZWFrO2Nhc2UgZCtjOmNhc2VcIi1cIitkK2M6Y2FzZVwiX1wiK2QrYzppZih0aGlzLm1vZGU9PVRlbXBsYXRlLm1vZGVzLkxJVEVSQUwpe3RoaXMuX2FkZE91dHB1dChsaW5lKX10aGlzLm1vZGU9bnVsbDt0aGlzLnRydW5jYXRlPWxpbmUuaW5kZXhPZihcIi1cIik9PT0wfHxsaW5lLmluZGV4T2YoXCJfXCIpPT09MDticmVhaztkZWZhdWx0OmlmKHRoaXMubW9kZSl7c3dpdGNoKHRoaXMubW9kZSl7Y2FzZSBUZW1wbGF0ZS5tb2Rlcy5FVkFMOmNhc2UgVGVtcGxhdGUubW9kZXMuRVNDQVBFRDpjYXNlIFRlbXBsYXRlLm1vZGVzLlJBVzppZihsaW5lLmxhc3RJbmRleE9mKFwiLy9cIik+bGluZS5sYXN0SW5kZXhPZihcIlxcblwiKSl7bGluZSs9XCJcXG5cIn19c3dpdGNoKHRoaXMubW9kZSl7Y2FzZSBUZW1wbGF0ZS5tb2Rlcy5FVkFMOnRoaXMuc291cmNlKz1cIiAgICA7IFwiK2xpbmUrXCJcXG5cIjticmVhaztjYXNlIFRlbXBsYXRlLm1vZGVzLkVTQ0FQRUQ6dGhpcy5zb3VyY2UrPVwiICAgIDsgX19hcHBlbmQoZXNjYXBlRm4oXCIrc3RyaXBTZW1pKGxpbmUpK1wiKSlcIitcIlxcblwiO2JyZWFrO2Nhc2UgVGVtcGxhdGUubW9kZXMuUkFXOnRoaXMuc291cmNlKz1cIiAgICA7IF9fYXBwZW5kKFwiK3N0cmlwU2VtaShsaW5lKStcIilcIitcIlxcblwiO2JyZWFrO2Nhc2UgVGVtcGxhdGUubW9kZXMuQ09NTUVOVDpicmVhaztjYXNlIFRlbXBsYXRlLm1vZGVzLkxJVEVSQUw6dGhpcy5fYWRkT3V0cHV0KGxpbmUpO2JyZWFrfX1lbHNle3RoaXMuX2FkZE91dHB1dChsaW5lKX19aWYoc2VsZi5vcHRzLmNvbXBpbGVEZWJ1ZyYmbmV3TGluZUNvdW50KXt0aGlzLmN1cnJlbnRMaW5lKz1uZXdMaW5lQ291bnQ7dGhpcy5zb3VyY2UrPVwiICAgIDsgX19saW5lID0gXCIrdGhpcy5jdXJyZW50TGluZStcIlxcblwifX19O2V4cG9ydHMuZXNjYXBlWE1MPXV0aWxzLmVzY2FwZVhNTDtleHBvcnRzLl9fZXhwcmVzcz1leHBvcnRzLnJlbmRlckZpbGU7ZXhwb3J0cy5WRVJTSU9OPV9WRVJTSU9OX1NUUklORztleHBvcnRzLm5hbWU9X05BTUU7aWYodHlwZW9mIHdpbmRvdyE9XCJ1bmRlZmluZWRcIil7d2luZG93LmVqcz1leHBvcnRzfX0se1wiLi4vcGFja2FnZS5qc29uXCI6NixcIi4vdXRpbHNcIjoyLGZzOjMscGF0aDo0fV0sMjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XCJ1c2Ugc3RyaWN0XCI7dmFyIHJlZ0V4cENoYXJzPS9bfFxcXFx7fSgpW1xcXV4kKyo/Ll0vZzt2YXIgaGFzT3duUHJvcGVydHk9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTt2YXIgaGFzT3duPWZ1bmN0aW9uKG9iaixrZXkpe3JldHVybiBoYXNPd25Qcm9wZXJ0eS5hcHBseShvYmosW2tleV0pfTtleHBvcnRzLmVzY2FwZVJlZ0V4cENoYXJzPWZ1bmN0aW9uKHN0cmluZyl7aWYoIXN0cmluZyl7cmV0dXJuXCJcIn1yZXR1cm4gU3RyaW5nKHN0cmluZykucmVwbGFjZShyZWdFeHBDaGFycyxcIlxcXFwkJlwiKX07dmFyIF9FTkNPREVfSFRNTF9SVUxFUz17XCImXCI6XCImYW1wO1wiLFwiPFwiOlwiJmx0O1wiLFwiPlwiOlwiJmd0O1wiLCdcIic6XCImIzM0O1wiLFwiJ1wiOlwiJiMzOTtcIn07dmFyIF9NQVRDSF9IVE1MPS9bJjw+J1wiXS9nO2Z1bmN0aW9uIGVuY29kZV9jaGFyKGMpe3JldHVybiBfRU5DT0RFX0hUTUxfUlVMRVNbY118fGN9dmFyIGVzY2FwZUZ1bmNTdHI9XCJ2YXIgX0VOQ09ERV9IVE1MX1JVTEVTID0ge1xcblwiKycgICAgICBcIiZcIjogXCImYW1wO1wiXFxuJysnICAgICwgXCI8XCI6IFwiJmx0O1wiXFxuJysnICAgICwgXCI+XCI6IFwiJmd0O1wiXFxuJysnICAgICwgXFwnXCJcXCc6IFwiJiMzNDtcIlxcbicrJyAgICAsIFwiXFwnXCI6IFwiJiMzOTtcIlxcbicrXCIgICAgfVxcblwiK1wiICAsIF9NQVRDSF9IVE1MID0gL1smPD4nXFxcIl0vZztcXG5cIitcImZ1bmN0aW9uIGVuY29kZV9jaGFyKGMpIHtcXG5cIitcIiAgcmV0dXJuIF9FTkNPREVfSFRNTF9SVUxFU1tjXSB8fCBjO1xcblwiK1wifTtcXG5cIjtleHBvcnRzLmVzY2FwZVhNTD1mdW5jdGlvbihtYXJrdXApe3JldHVybiBtYXJrdXA9PXVuZGVmaW5lZD9cIlwiOlN0cmluZyhtYXJrdXApLnJlcGxhY2UoX01BVENIX0hUTUwsZW5jb2RlX2NoYXIpfTtmdW5jdGlvbiBlc2NhcGVYTUxUb1N0cmluZygpe3JldHVybiBGdW5jdGlvbi5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh0aGlzKStcIjtcXG5cIitlc2NhcGVGdW5jU3RyfXRyeXtpZih0eXBlb2YgT2JqZWN0LmRlZmluZVByb3BlcnR5PT09XCJmdW5jdGlvblwiKXtPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cy5lc2NhcGVYTUwsXCJ0b1N0cmluZ1wiLHt2YWx1ZTplc2NhcGVYTUxUb1N0cmluZ30pfWVsc2V7ZXhwb3J0cy5lc2NhcGVYTUwudG9TdHJpbmc9ZXNjYXBlWE1MVG9TdHJpbmd9fWNhdGNoKGVycil7Y29uc29sZS53YXJuKFwiVW5hYmxlIHRvIHNldCBlc2NhcGVYTUwudG9TdHJpbmcgKGlzIHRoZSBGdW5jdGlvbiBwcm90b3R5cGUgZnJvemVuPylcIil9ZXhwb3J0cy5zaGFsbG93Q29weT1mdW5jdGlvbih0byxmcm9tKXtmcm9tPWZyb218fHt9O2lmKHRvIT09bnVsbCYmdG8hPT11bmRlZmluZWQpe2Zvcih2YXIgcCBpbiBmcm9tKXtpZighaGFzT3duKGZyb20scCkpe2NvbnRpbnVlfWlmKHA9PT1cIl9fcHJvdG9fX1wifHxwPT09XCJjb25zdHJ1Y3RvclwiKXtjb250aW51ZX10b1twXT1mcm9tW3BdfX1yZXR1cm4gdG99O2V4cG9ydHMuc2hhbGxvd0NvcHlGcm9tTGlzdD1mdW5jdGlvbih0byxmcm9tLGxpc3Qpe2xpc3Q9bGlzdHx8W107ZnJvbT1mcm9tfHx7fTtpZih0byE9PW51bGwmJnRvIT09dW5kZWZpbmVkKXtmb3IodmFyIGk9MDtpPGxpc3QubGVuZ3RoO2krKyl7dmFyIHA9bGlzdFtpXTtpZih0eXBlb2YgZnJvbVtwXSE9XCJ1bmRlZmluZWRcIil7aWYoIWhhc093bihmcm9tLHApKXtjb250aW51ZX1pZihwPT09XCJfX3Byb3RvX19cInx8cD09PVwiY29uc3RydWN0b3JcIil7Y29udGludWV9dG9bcF09ZnJvbVtwXX19fXJldHVybiB0b307ZXhwb3J0cy5jYWNoZT17X2RhdGE6e30sc2V0OmZ1bmN0aW9uKGtleSx2YWwpe3RoaXMuX2RhdGFba2V5XT12YWx9LGdldDpmdW5jdGlvbihrZXkpe3JldHVybiB0aGlzLl9kYXRhW2tleV19LHJlbW92ZTpmdW5jdGlvbihrZXkpe2RlbGV0ZSB0aGlzLl9kYXRhW2tleV19LHJlc2V0OmZ1bmN0aW9uKCl7dGhpcy5fZGF0YT17fX19O2V4cG9ydHMuaHlwaGVuVG9DYW1lbD1mdW5jdGlvbihzdHIpe3JldHVybiBzdHIucmVwbGFjZSgvLVthLXpdL2csZnVuY3Rpb24obWF0Y2gpe3JldHVybiBtYXRjaFsxXS50b1VwcGVyQ2FzZSgpfSl9O2V4cG9ydHMuY3JlYXRlTnVsbFByb3RvT2JqV2hlcmVQb3NzaWJsZT1mdW5jdGlvbigpe2lmKHR5cGVvZiBPYmplY3QuY3JlYXRlPT1cImZ1bmN0aW9uXCIpe3JldHVybiBmdW5jdGlvbigpe3JldHVybiBPYmplY3QuY3JlYXRlKG51bGwpfX1pZighKHtfX3Byb3RvX186bnVsbH1pbnN0YW5jZW9mIE9iamVjdCkpe3JldHVybiBmdW5jdGlvbigpe3JldHVybntfX3Byb3RvX186bnVsbH19fXJldHVybiBmdW5jdGlvbigpe3JldHVybnt9fX0oKTtleHBvcnRzLmhhc093bk9ubHlPYmplY3Q9ZnVuY3Rpb24ob2JqKXt2YXIgbz1leHBvcnRzLmNyZWF0ZU51bGxQcm90b09ialdoZXJlUG9zc2libGUoKTtmb3IodmFyIHAgaW4gb2JqKXtpZihoYXNPd24ob2JqLHApKXtvW3BdPW9ialtwXX19cmV0dXJuIG99fSx7fV0sMzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7fSx7fV0sNDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7KGZ1bmN0aW9uKHByb2Nlc3Mpe2Z1bmN0aW9uIG5vcm1hbGl6ZUFycmF5KHBhcnRzLGFsbG93QWJvdmVSb290KXt2YXIgdXA9MDtmb3IodmFyIGk9cGFydHMubGVuZ3RoLTE7aT49MDtpLS0pe3ZhciBsYXN0PXBhcnRzW2ldO2lmKGxhc3Q9PT1cIi5cIil7cGFydHMuc3BsaWNlKGksMSl9ZWxzZSBpZihsYXN0PT09XCIuLlwiKXtwYXJ0cy5zcGxpY2UoaSwxKTt1cCsrfWVsc2UgaWYodXApe3BhcnRzLnNwbGljZShpLDEpO3VwLS19fWlmKGFsbG93QWJvdmVSb290KXtmb3IoO3VwLS07dXApe3BhcnRzLnVuc2hpZnQoXCIuLlwiKX19cmV0dXJuIHBhcnRzfWV4cG9ydHMucmVzb2x2ZT1mdW5jdGlvbigpe3ZhciByZXNvbHZlZFBhdGg9XCJcIixyZXNvbHZlZEFic29sdXRlPWZhbHNlO2Zvcih2YXIgaT1hcmd1bWVudHMubGVuZ3RoLTE7aT49LTEmJiFyZXNvbHZlZEFic29sdXRlO2ktLSl7dmFyIHBhdGg9aT49MD9hcmd1bWVudHNbaV06cHJvY2Vzcy5jd2QoKTtpZih0eXBlb2YgcGF0aCE9PVwic3RyaW5nXCIpe3Rocm93IG5ldyBUeXBlRXJyb3IoXCJBcmd1bWVudHMgdG8gcGF0aC5yZXNvbHZlIG11c3QgYmUgc3RyaW5nc1wiKX1lbHNlIGlmKCFwYXRoKXtjb250aW51ZX1yZXNvbHZlZFBhdGg9cGF0aCtcIi9cIityZXNvbHZlZFBhdGg7cmVzb2x2ZWRBYnNvbHV0ZT1wYXRoLmNoYXJBdCgwKT09PVwiL1wifXJlc29sdmVkUGF0aD1ub3JtYWxpemVBcnJheShmaWx0ZXIocmVzb2x2ZWRQYXRoLnNwbGl0KFwiL1wiKSxmdW5jdGlvbihwKXtyZXR1cm4hIXB9KSwhcmVzb2x2ZWRBYnNvbHV0ZSkuam9pbihcIi9cIik7cmV0dXJuKHJlc29sdmVkQWJzb2x1dGU/XCIvXCI6XCJcIikrcmVzb2x2ZWRQYXRofHxcIi5cIn07ZXhwb3J0cy5ub3JtYWxpemU9ZnVuY3Rpb24ocGF0aCl7dmFyIGlzQWJzb2x1dGU9ZXhwb3J0cy5pc0Fic29sdXRlKHBhdGgpLHRyYWlsaW5nU2xhc2g9c3Vic3RyKHBhdGgsLTEpPT09XCIvXCI7cGF0aD1ub3JtYWxpemVBcnJheShmaWx0ZXIocGF0aC5zcGxpdChcIi9cIiksZnVuY3Rpb24ocCl7cmV0dXJuISFwfSksIWlzQWJzb2x1dGUpLmpvaW4oXCIvXCIpO2lmKCFwYXRoJiYhaXNBYnNvbHV0ZSl7cGF0aD1cIi5cIn1pZihwYXRoJiZ0cmFpbGluZ1NsYXNoKXtwYXRoKz1cIi9cIn1yZXR1cm4oaXNBYnNvbHV0ZT9cIi9cIjpcIlwiKStwYXRofTtleHBvcnRzLmlzQWJzb2x1dGU9ZnVuY3Rpb24ocGF0aCl7cmV0dXJuIHBhdGguY2hhckF0KDApPT09XCIvXCJ9O2V4cG9ydHMuam9pbj1mdW5jdGlvbigpe3ZhciBwYXRocz1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMCk7cmV0dXJuIGV4cG9ydHMubm9ybWFsaXplKGZpbHRlcihwYXRocyxmdW5jdGlvbihwLGluZGV4KXtpZih0eXBlb2YgcCE9PVwic3RyaW5nXCIpe3Rocm93IG5ldyBUeXBlRXJyb3IoXCJBcmd1bWVudHMgdG8gcGF0aC5qb2luIG11c3QgYmUgc3RyaW5nc1wiKX1yZXR1cm4gcH0pLmpvaW4oXCIvXCIpKX07ZXhwb3J0cy5yZWxhdGl2ZT1mdW5jdGlvbihmcm9tLHRvKXtmcm9tPWV4cG9ydHMucmVzb2x2ZShmcm9tKS5zdWJzdHIoMSk7dG89ZXhwb3J0cy5yZXNvbHZlKHRvKS5zdWJzdHIoMSk7ZnVuY3Rpb24gdHJpbShhcnIpe3ZhciBzdGFydD0wO2Zvcig7c3RhcnQ8YXJyLmxlbmd0aDtzdGFydCsrKXtpZihhcnJbc3RhcnRdIT09XCJcIilicmVha312YXIgZW5kPWFyci5sZW5ndGgtMTtmb3IoO2VuZD49MDtlbmQtLSl7aWYoYXJyW2VuZF0hPT1cIlwiKWJyZWFrfWlmKHN0YXJ0PmVuZClyZXR1cm5bXTtyZXR1cm4gYXJyLnNsaWNlKHN0YXJ0LGVuZC1zdGFydCsxKX12YXIgZnJvbVBhcnRzPXRyaW0oZnJvbS5zcGxpdChcIi9cIikpO3ZhciB0b1BhcnRzPXRyaW0odG8uc3BsaXQoXCIvXCIpKTt2YXIgbGVuZ3RoPU1hdGgubWluKGZyb21QYXJ0cy5sZW5ndGgsdG9QYXJ0cy5sZW5ndGgpO3ZhciBzYW1lUGFydHNMZW5ndGg9bGVuZ3RoO2Zvcih2YXIgaT0wO2k8bGVuZ3RoO2krKyl7aWYoZnJvbVBhcnRzW2ldIT09dG9QYXJ0c1tpXSl7c2FtZVBhcnRzTGVuZ3RoPWk7YnJlYWt9fXZhciBvdXRwdXRQYXJ0cz1bXTtmb3IodmFyIGk9c2FtZVBhcnRzTGVuZ3RoO2k8ZnJvbVBhcnRzLmxlbmd0aDtpKyspe291dHB1dFBhcnRzLnB1c2goXCIuLlwiKX1vdXRwdXRQYXJ0cz1vdXRwdXRQYXJ0cy5jb25jYXQodG9QYXJ0cy5zbGljZShzYW1lUGFydHNMZW5ndGgpKTtyZXR1cm4gb3V0cHV0UGFydHMuam9pbihcIi9cIil9O2V4cG9ydHMuc2VwPVwiL1wiO2V4cG9ydHMuZGVsaW1pdGVyPVwiOlwiO2V4cG9ydHMuZGlybmFtZT1mdW5jdGlvbihwYXRoKXtpZih0eXBlb2YgcGF0aCE9PVwic3RyaW5nXCIpcGF0aD1wYXRoK1wiXCI7aWYocGF0aC5sZW5ndGg9PT0wKXJldHVyblwiLlwiO3ZhciBjb2RlPXBhdGguY2hhckNvZGVBdCgwKTt2YXIgaGFzUm9vdD1jb2RlPT09NDc7dmFyIGVuZD0tMTt2YXIgbWF0Y2hlZFNsYXNoPXRydWU7Zm9yKHZhciBpPXBhdGgubGVuZ3RoLTE7aT49MTstLWkpe2NvZGU9cGF0aC5jaGFyQ29kZUF0KGkpO2lmKGNvZGU9PT00Nyl7aWYoIW1hdGNoZWRTbGFzaCl7ZW5kPWk7YnJlYWt9fWVsc2V7bWF0Y2hlZFNsYXNoPWZhbHNlfX1pZihlbmQ9PT0tMSlyZXR1cm4gaGFzUm9vdD9cIi9cIjpcIi5cIjtpZihoYXNSb290JiZlbmQ9PT0xKXtyZXR1cm5cIi9cIn1yZXR1cm4gcGF0aC5zbGljZSgwLGVuZCl9O2Z1bmN0aW9uIGJhc2VuYW1lKHBhdGgpe2lmKHR5cGVvZiBwYXRoIT09XCJzdHJpbmdcIilwYXRoPXBhdGgrXCJcIjt2YXIgc3RhcnQ9MDt2YXIgZW5kPS0xO3ZhciBtYXRjaGVkU2xhc2g9dHJ1ZTt2YXIgaTtmb3IoaT1wYXRoLmxlbmd0aC0xO2k+PTA7LS1pKXtpZihwYXRoLmNoYXJDb2RlQXQoaSk9PT00Nyl7aWYoIW1hdGNoZWRTbGFzaCl7c3RhcnQ9aSsxO2JyZWFrfX1lbHNlIGlmKGVuZD09PS0xKXttYXRjaGVkU2xhc2g9ZmFsc2U7ZW5kPWkrMX19aWYoZW5kPT09LTEpcmV0dXJuXCJcIjtyZXR1cm4gcGF0aC5zbGljZShzdGFydCxlbmQpfWV4cG9ydHMuYmFzZW5hbWU9ZnVuY3Rpb24ocGF0aCxleHQpe3ZhciBmPWJhc2VuYW1lKHBhdGgpO2lmKGV4dCYmZi5zdWJzdHIoLTEqZXh0Lmxlbmd0aCk9PT1leHQpe2Y9Zi5zdWJzdHIoMCxmLmxlbmd0aC1leHQubGVuZ3RoKX1yZXR1cm4gZn07ZXhwb3J0cy5leHRuYW1lPWZ1bmN0aW9uKHBhdGgpe2lmKHR5cGVvZiBwYXRoIT09XCJzdHJpbmdcIilwYXRoPXBhdGgrXCJcIjt2YXIgc3RhcnREb3Q9LTE7dmFyIHN0YXJ0UGFydD0wO3ZhciBlbmQ9LTE7dmFyIG1hdGNoZWRTbGFzaD10cnVlO3ZhciBwcmVEb3RTdGF0ZT0wO2Zvcih2YXIgaT1wYXRoLmxlbmd0aC0xO2k+PTA7LS1pKXt2YXIgY29kZT1wYXRoLmNoYXJDb2RlQXQoaSk7aWYoY29kZT09PTQ3KXtpZighbWF0Y2hlZFNsYXNoKXtzdGFydFBhcnQ9aSsxO2JyZWFrfWNvbnRpbnVlfWlmKGVuZD09PS0xKXttYXRjaGVkU2xhc2g9ZmFsc2U7ZW5kPWkrMX1pZihjb2RlPT09NDYpe2lmKHN0YXJ0RG90PT09LTEpc3RhcnREb3Q9aTtlbHNlIGlmKHByZURvdFN0YXRlIT09MSlwcmVEb3RTdGF0ZT0xfWVsc2UgaWYoc3RhcnREb3QhPT0tMSl7cHJlRG90U3RhdGU9LTF9fWlmKHN0YXJ0RG90PT09LTF8fGVuZD09PS0xfHxwcmVEb3RTdGF0ZT09PTB8fHByZURvdFN0YXRlPT09MSYmc3RhcnREb3Q9PT1lbmQtMSYmc3RhcnREb3Q9PT1zdGFydFBhcnQrMSl7cmV0dXJuXCJcIn1yZXR1cm4gcGF0aC5zbGljZShzdGFydERvdCxlbmQpfTtmdW5jdGlvbiBmaWx0ZXIoeHMsZil7aWYoeHMuZmlsdGVyKXJldHVybiB4cy5maWx0ZXIoZik7dmFyIHJlcz1bXTtmb3IodmFyIGk9MDtpPHhzLmxlbmd0aDtpKyspe2lmKGYoeHNbaV0saSx4cykpcmVzLnB1c2goeHNbaV0pfXJldHVybiByZXN9dmFyIHN1YnN0cj1cImFiXCIuc3Vic3RyKC0xKT09PVwiYlwiP2Z1bmN0aW9uKHN0cixzdGFydCxsZW4pe3JldHVybiBzdHIuc3Vic3RyKHN0YXJ0LGxlbil9OmZ1bmN0aW9uKHN0cixzdGFydCxsZW4pe2lmKHN0YXJ0PDApc3RhcnQ9c3RyLmxlbmd0aCtzdGFydDtyZXR1cm4gc3RyLnN1YnN0cihzdGFydCxsZW4pfX0pLmNhbGwodGhpcyxyZXF1aXJlKFwiX3Byb2Nlc3NcIikpfSx7X3Byb2Nlc3M6NX1dLDU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe3ZhciBwcm9jZXNzPW1vZHVsZS5leHBvcnRzPXt9O3ZhciBjYWNoZWRTZXRUaW1lb3V0O3ZhciBjYWNoZWRDbGVhclRpbWVvdXQ7ZnVuY3Rpb24gZGVmYXVsdFNldFRpbW91dCgpe3Rocm93IG5ldyBFcnJvcihcInNldFRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWRcIil9ZnVuY3Rpb24gZGVmYXVsdENsZWFyVGltZW91dCgpe3Rocm93IG5ldyBFcnJvcihcImNsZWFyVGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZFwiKX0oZnVuY3Rpb24oKXt0cnl7aWYodHlwZW9mIHNldFRpbWVvdXQ9PT1cImZ1bmN0aW9uXCIpe2NhY2hlZFNldFRpbWVvdXQ9c2V0VGltZW91dH1lbHNle2NhY2hlZFNldFRpbWVvdXQ9ZGVmYXVsdFNldFRpbW91dH19Y2F0Y2goZSl7Y2FjaGVkU2V0VGltZW91dD1kZWZhdWx0U2V0VGltb3V0fXRyeXtpZih0eXBlb2YgY2xlYXJUaW1lb3V0PT09XCJmdW5jdGlvblwiKXtjYWNoZWRDbGVhclRpbWVvdXQ9Y2xlYXJUaW1lb3V0fWVsc2V7Y2FjaGVkQ2xlYXJUaW1lb3V0PWRlZmF1bHRDbGVhclRpbWVvdXR9fWNhdGNoKGUpe2NhY2hlZENsZWFyVGltZW91dD1kZWZhdWx0Q2xlYXJUaW1lb3V0fX0pKCk7ZnVuY3Rpb24gcnVuVGltZW91dChmdW4pe2lmKGNhY2hlZFNldFRpbWVvdXQ9PT1zZXRUaW1lb3V0KXtyZXR1cm4gc2V0VGltZW91dChmdW4sMCl9aWYoKGNhY2hlZFNldFRpbWVvdXQ9PT1kZWZhdWx0U2V0VGltb3V0fHwhY2FjaGVkU2V0VGltZW91dCkmJnNldFRpbWVvdXQpe2NhY2hlZFNldFRpbWVvdXQ9c2V0VGltZW91dDtyZXR1cm4gc2V0VGltZW91dChmdW4sMCl9dHJ5e3JldHVybiBjYWNoZWRTZXRUaW1lb3V0KGZ1biwwKX1jYXRjaChlKXt0cnl7cmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbChudWxsLGZ1biwwKX1jYXRjaChlKXtyZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKHRoaXMsZnVuLDApfX19ZnVuY3Rpb24gcnVuQ2xlYXJUaW1lb3V0KG1hcmtlcil7aWYoY2FjaGVkQ2xlYXJUaW1lb3V0PT09Y2xlYXJUaW1lb3V0KXtyZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcil9aWYoKGNhY2hlZENsZWFyVGltZW91dD09PWRlZmF1bHRDbGVhclRpbWVvdXR8fCFjYWNoZWRDbGVhclRpbWVvdXQpJiZjbGVhclRpbWVvdXQpe2NhY2hlZENsZWFyVGltZW91dD1jbGVhclRpbWVvdXQ7cmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpfXRyeXtyZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0KG1hcmtlcil9Y2F0Y2goZSl7dHJ5e3JldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbChudWxsLG1hcmtlcil9Y2F0Y2goZSl7cmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKHRoaXMsbWFya2VyKX19fXZhciBxdWV1ZT1bXTt2YXIgZHJhaW5pbmc9ZmFsc2U7dmFyIGN1cnJlbnRRdWV1ZTt2YXIgcXVldWVJbmRleD0tMTtmdW5jdGlvbiBjbGVhblVwTmV4dFRpY2soKXtpZighZHJhaW5pbmd8fCFjdXJyZW50UXVldWUpe3JldHVybn1kcmFpbmluZz1mYWxzZTtpZihjdXJyZW50UXVldWUubGVuZ3RoKXtxdWV1ZT1jdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKX1lbHNle3F1ZXVlSW5kZXg9LTF9aWYocXVldWUubGVuZ3RoKXtkcmFpblF1ZXVlKCl9fWZ1bmN0aW9uIGRyYWluUXVldWUoKXtpZihkcmFpbmluZyl7cmV0dXJufXZhciB0aW1lb3V0PXJ1blRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtkcmFpbmluZz10cnVlO3ZhciBsZW49cXVldWUubGVuZ3RoO3doaWxlKGxlbil7Y3VycmVudFF1ZXVlPXF1ZXVlO3F1ZXVlPVtdO3doaWxlKCsrcXVldWVJbmRleDxsZW4pe2lmKGN1cnJlbnRRdWV1ZSl7Y3VycmVudFF1ZXVlW3F1ZXVlSW5kZXhdLnJ1bigpfX1xdWV1ZUluZGV4PS0xO2xlbj1xdWV1ZS5sZW5ndGh9Y3VycmVudFF1ZXVlPW51bGw7ZHJhaW5pbmc9ZmFsc2U7cnVuQ2xlYXJUaW1lb3V0KHRpbWVvdXQpfXByb2Nlc3MubmV4dFRpY2s9ZnVuY3Rpb24oZnVuKXt2YXIgYXJncz1uZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aC0xKTtpZihhcmd1bWVudHMubGVuZ3RoPjEpe2Zvcih2YXIgaT0xO2k8YXJndW1lbnRzLmxlbmd0aDtpKyspe2FyZ3NbaS0xXT1hcmd1bWVudHNbaV19fXF1ZXVlLnB1c2gobmV3IEl0ZW0oZnVuLGFyZ3MpKTtpZihxdWV1ZS5sZW5ndGg9PT0xJiYhZHJhaW5pbmcpe3J1blRpbWVvdXQoZHJhaW5RdWV1ZSl9fTtmdW5jdGlvbiBJdGVtKGZ1bixhcnJheSl7dGhpcy5mdW49ZnVuO3RoaXMuYXJyYXk9YXJyYXl9SXRlbS5wcm90b3R5cGUucnVuPWZ1bmN0aW9uKCl7dGhpcy5mdW4uYXBwbHkobnVsbCx0aGlzLmFycmF5KX07cHJvY2Vzcy50aXRsZT1cImJyb3dzZXJcIjtwcm9jZXNzLmJyb3dzZXI9dHJ1ZTtwcm9jZXNzLmVudj17fTtwcm9jZXNzLmFyZ3Y9W107cHJvY2Vzcy52ZXJzaW9uPVwiXCI7cHJvY2Vzcy52ZXJzaW9ucz17fTtmdW5jdGlvbiBub29wKCl7fXByb2Nlc3Mub249bm9vcDtwcm9jZXNzLmFkZExpc3RlbmVyPW5vb3A7cHJvY2Vzcy5vbmNlPW5vb3A7cHJvY2Vzcy5vZmY9bm9vcDtwcm9jZXNzLnJlbW92ZUxpc3RlbmVyPW5vb3A7cHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnM9bm9vcDtwcm9jZXNzLmVtaXQ9bm9vcDtwcm9jZXNzLnByZXBlbmRMaXN0ZW5lcj1ub29wO3Byb2Nlc3MucHJlcGVuZE9uY2VMaXN0ZW5lcj1ub29wO3Byb2Nlc3MubGlzdGVuZXJzPWZ1bmN0aW9uKG5hbWUpe3JldHVybltdfTtwcm9jZXNzLmJpbmRpbmc9ZnVuY3Rpb24obmFtZSl7dGhyb3cgbmV3IEVycm9yKFwicHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWRcIil9O3Byb2Nlc3MuY3dkPWZ1bmN0aW9uKCl7cmV0dXJuXCIvXCJ9O3Byb2Nlc3MuY2hkaXI9ZnVuY3Rpb24oZGlyKXt0aHJvdyBuZXcgRXJyb3IoXCJwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWRcIil9O3Byb2Nlc3MudW1hc2s9ZnVuY3Rpb24oKXtyZXR1cm4gMH19LHt9XSw2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXttb2R1bGUuZXhwb3J0cz17bmFtZTpcImVqc1wiLGRlc2NyaXB0aW9uOlwiRW1iZWRkZWQgSmF2YVNjcmlwdCB0ZW1wbGF0ZXNcIixrZXl3b3JkczpbXCJ0ZW1wbGF0ZVwiLFwiZW5naW5lXCIsXCJlanNcIl0sdmVyc2lvbjpcIjMuMS45XCIsYXV0aG9yOlwiTWF0dGhldyBFZXJuaXNzZSA8bWRlQGZsZWVnaXgub3JnPiAoaHR0cDovL2ZsZWVnaXgub3JnKVwiLGxpY2Vuc2U6XCJBcGFjaGUtMi4wXCIsYmluOntlanM6XCIuL2Jpbi9jbGkuanNcIn0sbWFpbjpcIi4vbGliL2Vqcy5qc1wiLGpzZGVsaXZyOlwiZWpzLm1pbi5qc1wiLHVucGtnOlwiZWpzLm1pbi5qc1wiLHJlcG9zaXRvcnk6e3R5cGU6XCJnaXRcIix1cmw6XCJnaXQ6Ly9naXRodWIuY29tL21kZS9lanMuZ2l0XCJ9LGJ1Z3M6XCJodHRwczovL2dpdGh1Yi5jb20vbWRlL2Vqcy9pc3N1ZXNcIixob21lcGFnZTpcImh0dHBzOi8vZ2l0aHViLmNvbS9tZGUvZWpzXCIsZGVwZW5kZW5jaWVzOntqYWtlOlwiXjEwLjguNVwifSxkZXZEZXBlbmRlbmNpZXM6e2Jyb3dzZXJpZnk6XCJeMTYuNS4xXCIsZXNsaW50OlwiXjYuOC4wXCIsXCJnaXQtZGlyZWN0b3J5LWRlcGxveVwiOlwiXjEuNS4xXCIsanNkb2M6XCJeNC4wLjJcIixcImxydS1jYWNoZVwiOlwiXjQuMC4xXCIsbW9jaGE6XCJeMTAuMi4wXCIsXCJ1Z2xpZnktanNcIjpcIl4zLjMuMTZcIn0sZW5naW5lczp7bm9kZTpcIj49MC4xMC4wXCJ9LHNjcmlwdHM6e3Rlc3Q6XCJucHggamFrZSB0ZXN0XCJ9fX0se31dfSx7fSxbMV0pKDEpfSk7XG4iLCJcbmltcG9ydCAnZWpzL2Vqcy5taW4nO1xuXG5sZXQgVGFibGVVdGlscyA9IHtcblxuICAgIF90ZW1wbGF0ZXM6IHt9LFxuXG5cbiAgICAvKipcbiAgICAgKiDQntCx0YrQtdC00LjQvdC10L3QuNC1INCw0YLRgNC40LHRg9GC0L7QslxuICAgICAqIEBwYXJhbSBhdHRyMVxuICAgICAqIEBwYXJhbSBhdHRyMlxuICAgICAqIEByZXR1cm5zIHtvYmplY3R9XG4gICAgICovXG4gICAgbWVyZ2VBdHRyOiBmdW5jdGlvbiAoYXR0cjEsIGF0dHIyKSB7XG5cbiAgICAgICAgbGV0IG1lcmdlQXR0ciA9IE9iamVjdC5hc3NpZ24oe30sIGF0dHIxKTtcblxuICAgICAgICBpZiAodHlwZW9mIGF0dHIyID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgJC5lYWNoKGF0dHIyLCBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcbiAgICAgICAgICAgICAgICBpZiAobWVyZ2VBdHRyLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChuYW1lID09PSAnY2xhc3MnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXJnZUF0dHJbbmFtZV0gKz0gJyAnICsgdmFsdWU7XG5cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChuYW1lID09PSAnc3R5bGUnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXJnZUF0dHJbbmFtZV0gKz0gJzsnICsgdmFsdWU7XG5cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lcmdlQXR0cltuYW1lXSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBtZXJnZUF0dHJbbmFtZV0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBtZXJnZUF0dHI7XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICog0J/RgNC+0LLQtdGA0LrQsCDQvdCwINGH0LjRgdC70L5cbiAgICAgKiBAcGFyYW0gbnVtXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBpc051bWVyaWM6IGZ1bmN0aW9uKG51bSkge1xuICAgICAgICByZXR1cm4gKHR5cGVvZihudW0pID09PSAnbnVtYmVyJyB8fCB0eXBlb2YobnVtKSA9PT0gXCJzdHJpbmdcIiAmJiBudW0udHJpbSgpICE9PSAnJykgJiYgISBpc05hTihudW0pO1xuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBoYXNoQ29kZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNyYzMyKChuZXcgRGF0ZSgpLmdldFRpbWUoKSArIE1hdGgucmFuZG9tKCkpLnRvU3RyaW5nKCkpLnRvU3RyaW5nKDE2KTtcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiDQn9GA0L7QstC10YDQutCwINC90LAg0L7QsdGK0LXQutGCXG4gICAgICogQHBhcmFtIHZhbHVlXG4gICAgICovXG4gICAgaXNPYmplY3Q6IGZ1bmN0aW9uICh2YWx1ZSkge1xuXG4gICAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmXG4gICAgICAgICAgICAhIEFycmF5LmlzQXJyYXkodmFsdWUpICYmXG4gICAgICAgICAgICB2YWx1ZSAhPT0gbnVsbDtcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0gc3RyXG4gICAgICogQHJldHVybnMge251bWJlcn1cbiAgICAgKi9cbiAgICBjcmMzMjogZnVuY3Rpb24gKHN0cikge1xuXG4gICAgICAgIGZvciAodmFyIGEsIG8gPSBbXSwgYyA9IDA7IGMgPCAyNTY7IGMrKykge1xuICAgICAgICAgICAgYSA9IGM7XG4gICAgICAgICAgICBmb3IgKHZhciBmID0gMDsgZiA8IDg7IGYrKykge1xuICAgICAgICAgICAgICAgIGEgPSAxICYgYSA/IDM5ODgyOTIzODQgXiBhID4+PiAxIDogYSA+Pj4gMVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb1tjXSA9IGFcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAodmFyIG4gPSAtMSwgdCA9IDA7IHQgPCBzdHIubGVuZ3RoOyB0KyspIHtcbiAgICAgICAgICAgIG4gPSBuID4+PiA4IF4gb1syNTUgJiAobiBeIHN0ci5jaGFyQ29kZUF0KHQpKV1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAoLTEgXiBuKSA+Pj4gMDtcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiDQoNC10L3QtNC10YAg0YjQsNCx0LvQvtC90LBcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGVtcGxhdGVcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gb3B0aW9uc1xuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAgICovXG4gICAgcmVuZGVyOiBmdW5jdGlvbiAodGVtcGxhdGUsIG9wdGlvbnMpIHtcblxuICAgICAgICBsZXQgdHBsTmFtZSA9IHRoaXMuY3JjMzIodGVtcGxhdGUpO1xuXG4gICAgICAgIGlmICggISB0aGlzLl90ZW1wbGF0ZXMuaGFzT3duUHJvcGVydHkodHBsTmFtZSkpIHtcbiAgICAgICAgICAgIHRoaXMuX3RlbXBsYXRlc1t0cGxOYW1lXSA9IGVqcy5jb21waWxlKHRlbXBsYXRlKVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuX3RlbXBsYXRlc1t0cGxOYW1lXShvcHRpb25zKTtcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiDQoNCw0LfQvNC10YDQvdC+0YHRgtGMINGB0YLRgNC+0LrQuFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJcbiAgICAgKiBAcGFyYW0ge2ludH0gICAgY291bnRcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcmVwZWF0XG4gICAgICogQHJldHVybnMge3N0cmluZ31cbiAgICAgKi9cbiAgICBzdHJQYWRMZWZ0OiBmdW5jdGlvbihzdHIsIGNvdW50LCByZXBlYXQpIHtcblxuICAgICAgICBzdHIgPSBTdHJpbmcoc3RyKTtcblxuICAgICAgICBpZiAoc3RyLmxlbmd0aCA+PSBjb3VudCkge1xuICAgICAgICAgICAgcmV0dXJuIHN0cjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlcGVhdCA9IHJlcGVhdCA/IHJlcGVhdCA6ICcwJztcblxuICAgICAgICByZXR1cm4gKHJlcGVhdC5yZXBlYXQoY291bnQpICsgc3RyKS5zbGljZSgtKGNvdW50KSk7XG4gICAgfVxufVxuXG5cbmV4cG9ydCBkZWZhdWx0IFRhYmxlVXRpbHM7IiwiXG5pbXBvcnQgVGFibGVUcGwgICBmcm9tICcuL3RhYmxlLnRwbCc7XG5pbXBvcnQgVGFibGVVdGlscyBmcm9tIFwiLi90YWJsZS51dGlsc1wiO1xuXG5cbmxldCBUYWJsZVJlbmRlciA9IHtcblxuXG4gICAgLyoqXG4gICAgICog0KHQsdC+0YDQutCwINGC0LDQsdC70LjRhtGLXG4gICAgICogQHBhcmFtIHtUYWJsZUluc3RhbmNlfSB0YWJsZVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgcmVuZGVyVGFibGU6IGZ1bmN0aW9uICh0YWJsZSkge1xuXG4gICAgICAgIGxldCBvcHRpb25zICAgICAgICAgPSB0YWJsZS5nZXRPcHRpb25zKCk7XG4gICAgICAgIGxldCByZWNvcmRzRWxlbWVudHMgPSBbXTtcbiAgICAgICAgbGV0IGNvbHVtbnNIZWFkZXIgICA9ICcnO1xuICAgICAgICBsZXQgY29sdW1uc0Zvb3RlciAgID0gJyc7XG4gICAgICAgIGxldCBjb2xHcm91cHMgICAgICAgPSBbXTtcbiAgICAgICAgbGV0IGNvbHVtbkVsZW1lbnRzICA9ICQoVGFibGVUcGxbJ3RhYmxlL2NvbHVtbnMvdHIuaHRtbCddKTtcblxuXG4gICAgICAgIC8vINCa0L7Qu9C+0L3QutC4XG4gICAgICAgIGlmICh0YWJsZS5fY29sdW1ucy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB0YWJsZS5fY29sdW1ucy5tYXAoZnVuY3Rpb24gKGNvbHVtbikge1xuICAgICAgICAgICAgICAgIGlmICggISBjb2x1bW4uaXNTaG93KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGxldCBjb2x1bW5PcHRpb25zICA9IGNvbHVtbi5nZXRPcHRpb25zKCk7XG4gICAgICAgICAgICAgICAgbGV0IGF0dHJpYnV0ZXMgICAgID0gW107XG4gICAgICAgICAgICAgICAgbGV0IHNvcnRhYmxlICAgICAgID0gbnVsbDtcbiAgICAgICAgICAgICAgICBsZXQgbWVudUVsZW1lbnRzICAgPSBbXTtcbiAgICAgICAgICAgICAgICBsZXQgbWVudVNob3dBbHdheXMgPSAnJztcbiAgICAgICAgICAgICAgICBsZXQgbWVudVBvc2l0aW9uICAgPSAnZW5kJztcblxuICAgICAgICAgICAgICAgIGlmIChjb2x1bW5PcHRpb25zLmhhc093blByb3BlcnR5KCdmaWVsZCcpICYmIHR5cGVvZiBjb2x1bW5PcHRpb25zLmZpZWxkID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgICAgICBjb2x1bW5PcHRpb25zLmF0dHJIZWFkZXIgPSBUYWJsZVV0aWxzLm1lcmdlQXR0cihjb2x1bW5PcHRpb25zLmF0dHJIZWFkZXIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiZGF0YS1maWVsZFwiOiBjb2x1bW5PcHRpb25zLmZpZWxkXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChjb2x1bW5PcHRpb25zLmhhc093blByb3BlcnR5KCdmaXhlZCcpICYmIHR5cGVvZiBjb2x1bW5PcHRpb25zLmZpeGVkID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgICAgICBjb2x1bW5PcHRpb25zLmF0dHJIZWFkZXIgPSBUYWJsZVV0aWxzLm1lcmdlQXR0cihjb2x1bW5PcHRpb25zLmF0dHJIZWFkZXIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzOiAnY29yZXVpLXRhYmxlX19maXhlZF8nICsgY29sdW1uT3B0aW9ucy5maXhlZFxuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICBjb2x1bW5PcHRpb25zLmF0dHIgPSBUYWJsZVV0aWxzLm1lcmdlQXR0cihjb2x1bW5PcHRpb25zLmF0dHIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzOiAnY29yZXVpLXRhYmxlX19maXhlZF8nICsgY29sdW1uT3B0aW9ucy5maXhlZFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoY29sdW1uT3B0aW9ucy50eXBlICE9PSAnbnVtYmVycycpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbHVtbk9wdGlvbnMuaGFzT3duUHJvcGVydHkoJ3NvcnRhYmxlJykgJiYgY29sdW1uT3B0aW9ucy5zb3J0YWJsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29sdW1uT3B0aW9ucy5hdHRySGVhZGVyID0gVGFibGVVdGlscy5tZXJnZUF0dHIoY29sdW1uT3B0aW9ucy5hdHRySGVhZGVyLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M6ICdjb3JldWktdGFibGVfX3NvcnRhYmxlJ1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAodGFibGUuX3NvcnQubGVuZ3RoID4gMCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgY29sdW1uT3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnZmllbGQnKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGNvbHVtbk9wdGlvbnMuZmllbGQgPT09ICdzdHJpbmcnICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2x1bW5PcHRpb25zLmZpZWxkXG4gICAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJC5lYWNoKHRhYmxlLl9zb3J0LCBmdW5jdGlvbiAoa2V5LCBzb3J0RmllbGQpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb2x1bW5PcHRpb25zLmZpZWxkID09PSBzb3J0RmllbGQuZmllbGQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNvcnRGaWVsZC5vcmRlciA9PT0gJ2FzYycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvcnRhYmxlID0gJ2FzYyc7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzb3J0RmllbGQub3JkZXIgPT09ICdkZXNjJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc29ydGFibGUgPSAnZGVzYyc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5zaG93SGVhZGVycyAmJlxuICAgICAgICAgICAgICAgICAgICBjb2x1bW5PcHRpb25zLmhhc093blByb3BlcnR5KCdtZW51JykgJiZcbiAgICAgICAgICAgICAgICAgICAgVGFibGVVdGlscy5pc09iamVjdChjb2x1bW5PcHRpb25zLm1lbnUpICYmXG4gICAgICAgICAgICAgICAgICAgIGNvbHVtbk9wdGlvbnMubWVudS5oYXNPd25Qcm9wZXJ0eSgnaXRlbXMnKSAmJlxuICAgICAgICAgICAgICAgICAgICBBcnJheS5pc0FycmF5KGNvbHVtbk9wdGlvbnMubWVudS5pdGVtcylcbiAgICAgICAgICAgICAgICApIHtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoY29sdW1uT3B0aW9ucy5tZW51Lmhhc093blByb3BlcnR5KCdzaG93QWx3YXlzJykgJiYgY29sdW1uT3B0aW9ucy5tZW51LnNob3dBbHdheXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lbnVTaG93QWx3YXlzID0gJ2NvcmV1aS10YWJsZV9fY29sdW1uLW1lbnUtYWx3YXlzJztcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmIChjb2x1bW5PcHRpb25zLm1lbnUuaGFzT3duUHJvcGVydHkoJ3Bvc2l0aW9uJykgJiYgdHlwZW9mIGNvbHVtbk9wdGlvbnMubWVudS5wb3NpdGlvbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lbnVQb3NpdGlvbiA9IGNvbHVtbk9wdGlvbnMubWVudS5wb3NpdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGNvbHVtbk9wdGlvbnMubWVudS5pdGVtcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFRhYmxlVXRpbHMuaXNPYmplY3QoaXRlbSkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtLmhhc093blByb3BlcnR5KCd0eXBlJykgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlb2YgaXRlbS50eXBlID09PSAnc3RyaW5nJyAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0udHlwZVxuICAgICAgICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChpdGVtLnR5cGUudG9Mb3dlckNhc2UoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdidXR0b24nOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0uaGFzT3duUHJvcGVydHkoJ3RleHQnKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVvZiBpdGVtLnRleHQgPT09ICdzdHJpbmcnICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5oYXNPd25Qcm9wZXJ0eSgnb25DbGljaycpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWydzdHJpbmcnLCAnZnVuY3Rpb24nXS5pbmRleE9mKHR5cGVvZiBpdGVtLm9uQ2xpY2spID49IDAgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtLnRleHQubGVuZ3RoID4gMFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGF0dHJJdGVtID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGF0dHIgICAgID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnYnV0dG9uJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M6ICdkcm9wZG93bi1pdGVtJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0uaGFzT3duUHJvcGVydHkoJ2F0dHInKSAmJiBUYWJsZVV0aWxzLmlzT2JqZWN0KGl0ZW0uYXR0cikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0ciA9IFRhYmxlVXRpbHMubWVyZ2VBdHRyKGF0dHIsIGl0ZW0uYXR0cik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJC5lYWNoKGF0dHIsIGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRySXRlbS5wdXNoKG5hbWUgKyAnPVwiJyArIHZhbHVlICsgJ1wiJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgbWVudUVsZW1lbnQgPSAkKFRhYmxlVXRpbHMucmVuZGVyKFRhYmxlVHBsWyd0YWJsZS9jb2x1bW5zL21lbnUvYnV0dG9uLmh0bWwnXSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBpdGVtLnRleHQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHI6IGF0dHJJdGVtLmpvaW4oJyAnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZW51RWxlbWVudC5maW5kKCdidXR0b24nKS5jbGljayhmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHByb3AgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YWJsZTogdGFibGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudDogZXZlbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBpdGVtLm9uQ2xpY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0ub25DbGljayhwcm9wKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBpdGVtLm9uQ2xpY2sgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAobmV3IEZ1bmN0aW9uKCdwcm9wJywgaXRlbS5vbkNsaWNrKSkocHJvcCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lbnVFbGVtZW50cy5wdXNoKG1lbnVFbGVtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2xpbmsnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0uaGFzT3duUHJvcGVydHkoJ3RleHQnKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0uaGFzT3duUHJvcGVydHkoJ3VybCcpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGl0ZW0udGV4dCA9PT0gJ3N0cmluZycgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlb2YgaXRlbS51cmwgPT09ICdzdHJpbmcnICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS50ZXh0Lmxlbmd0aCA+IDAgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtLnVybC5sZW5ndGggPiAwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgYXR0ckl0ZW0gPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgYXR0ciAgICAgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY6IGl0ZW0udXJsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzczogJ2Ryb3Bkb3duLWl0ZW0nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbS5oYXNPd25Qcm9wZXJ0eSgnYXR0cicpICYmIFRhYmxlVXRpbHMuaXNPYmplY3QoaXRlbS5hdHRyKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyID0gVGFibGVVdGlscy5tZXJnZUF0dHIoYXR0ciwgaXRlbS5hdHRyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLmVhY2goYXR0ciwgZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJJdGVtLnB1c2gobmFtZSArICc9XCInICsgdmFsdWUgKyAnXCInKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lbnVFbGVtZW50cy5wdXNoKCQoVGFibGVVdGlscy5yZW5kZXIoVGFibGVUcGxbJ3RhYmxlL2NvbHVtbnMvbWVudS9saW5rLmh0bWwnXSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBpdGVtLnRleHQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHI6IGF0dHJJdGVtLmpvaW4oJyAnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnZGl2aWRlcic6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZW51RWxlbWVudHMucHVzaCgkKFRhYmxlVHBsWyd0YWJsZS9jb2x1bW5zL21lbnUvZGl2aWRlci5odG1sJ10pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2hlYWRlcic6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZW51RWxlbWVudHMucHVzaCgkKFRhYmxlVXRpbHMucmVuZGVyKFRhYmxlVHBsWyd0YWJsZS9jb2x1bW5zL21lbnUvaGVhZGVyLmh0bWwnXSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IGl0ZW0udGV4dFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKGNvbHVtbk9wdGlvbnMuYXR0ckhlYWRlciAmJiBUYWJsZVV0aWxzLmlzT2JqZWN0KGNvbHVtbk9wdGlvbnMuYXR0ckhlYWRlcikpIHtcbiAgICAgICAgICAgICAgICAgICAgJC5lYWNoKGNvbHVtbk9wdGlvbnMuYXR0ckhlYWRlciwgZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzLnB1c2gobmFtZSArICc9XCInICsgdmFsdWUgKyAnXCInKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgICAgICBsZXQgc3R5bGUgPSBbXTtcblxuICAgICAgICAgICAgICAgIGlmIChjb2x1bW5PcHRpb25zLmhhc093blByb3BlcnR5KCd3aWR0aCcpICYmXG4gICAgICAgICAgICAgICAgICAgIFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIGNvbHVtbk9wdGlvbnMud2lkdGgpID49IDBcbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHVuaXQgPSB0eXBlb2YgY29sdW1uT3B0aW9ucy53aWR0aCA9PT0gJ251bWJlcicgPyAncHgnIDogJyc7XG4gICAgICAgICAgICAgICAgICAgIHN0eWxlLnB1c2goJ3dpZHRoOicgKyBjb2x1bW5PcHRpb25zLndpZHRoICsgdW5pdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChjb2x1bW5PcHRpb25zLmhhc093blByb3BlcnR5KCdtaW5XaWR0aCcpICYmXG4gICAgICAgICAgICAgICAgICAgIFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIGNvbHVtbk9wdGlvbnMubWluV2lkdGgpID49IDBcbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHVuaXQgPSB0eXBlb2YgY29sdW1uT3B0aW9ucy5taW5XaWR0aCA9PT0gJ251bWJlcicgPyAncHgnIDogJyc7XG4gICAgICAgICAgICAgICAgICAgIHN0eWxlLnB1c2goJ21pbi13aWR0aDonICsgY29sdW1uT3B0aW9ucy5taW5XaWR0aCArIHVuaXQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoY29sdW1uT3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnbWF4V2lkdGgnKSAmJlxuICAgICAgICAgICAgICAgICAgICBbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiBjb2x1bW5PcHRpb25zLm1heFdpZHRoKSA+PSAwXG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCB1bml0ID0gdHlwZW9mIGNvbHVtbk9wdGlvbnMubWF4V2lkdGggPT09ICdudW1iZXInID8gJ3B4JyA6ICcnO1xuICAgICAgICAgICAgICAgICAgICBzdHlsZS5wdXNoKCdtYXgtd2lkdGg6JyArIGNvbHVtbk9wdGlvbnMubWF4V2lkdGggKyB1bml0KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjb2xHcm91cHMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIHN0eWxlOiBzdHlsZS5sZW5ndGggPiAwID8gc3R5bGUuam9pbignOycpIDogJydcbiAgICAgICAgICAgICAgICB9KTtcblxuXG5cbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5zaG93SGVhZGVycykge1xuICAgICAgICAgICAgICAgICAgICBsZXQgbGFiZWwgPSAnJztcbiAgICAgICAgICAgICAgICAgICAgbGV0IGRlc2NyaXB0aW9uID0gJyc7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbHVtbk9wdGlvbnMuaGFzT3duUHJvcGVydHkoJ2xhYmVsJykgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVvZiBjb2x1bW5PcHRpb25zLmxhYmVsID09PSAnc3RyaW5nJyAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgKCFjb2x1bW5PcHRpb25zLmhhc093blByb3BlcnR5KCdzaG93TGFiZWwnKSB8fCBjb2x1bW5PcHRpb25zLnNob3dMYWJlbClcbiAgICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsYWJlbCA9IGNvbHVtbk9wdGlvbnMubGFiZWw7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAoY29sdW1uT3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnZGVzY3JpcHRpb24nKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGNvbHVtbk9wdGlvbnMubGFiZWwgPT09ICdzdHJpbmcnXG4gICAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb24gPSBjb2x1bW5PcHRpb25zLmRlc2NyaXB0aW9uO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgbGV0IGNvbHVtbkVsZW1lbnQgPSAkKFRhYmxlVXRpbHMucmVuZGVyKFRhYmxlVHBsWyd0YWJsZS9jb2x1bW5zL3RkLmh0bWwnXSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXR0ciAgICAgICAgICA6IGF0dHJpYnV0ZXMubGVuZ3RoID4gMCA/ICgnICcgKyBhdHRyaWJ1dGVzLmpvaW4oJyAnKSkgOiAnJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsICAgICAgICAgOiBsYWJlbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uICAgOiBkZXNjcmlwdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICAgIHNvcnRhYmxlICAgICAgOiBzb3J0YWJsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzc2V0TWVudSAgICAgOiBtZW51RWxlbWVudHMubGVuZ3RoID4gMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lbnVQb3NpdGlvbiAgOiBtZW51UG9zaXRpb24sXG4gICAgICAgICAgICAgICAgICAgICAgICBtZW51U2hvd0Fsd2F5czogbWVudVNob3dBbHdheXMgPyAnICcgKyBtZW51U2hvd0Fsd2F5cyA6ICcnLFxuICAgICAgICAgICAgICAgICAgICB9KSk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKG1lbnVFbGVtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBtZW51Q29udGFpbmVyID0gY29sdW1uRWxlbWVudC5maW5kKCcuY29yZXVpLXRhYmxlX19jb2x1bW4tbWVudSB1bCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG1lbnVCdXR0b24gICAgPSBjb2x1bW5FbGVtZW50LmZpbmQoJy5jb3JldWktdGFibGVfX2NvbHVtbi1tZW51IC5kcm9wZG93bi10b2dnbGUnKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgbWVudUJ1dHRvbi5jbGljayhmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudC5vcmlnaW5hbEV2ZW50LmNhbmNlbEJ1YmJsZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgbWVudUVsZW1lbnRzLm1hcChmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lbnVDb250YWluZXIuYXBwZW5kKGVsZW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBjb2x1bW5FbGVtZW50cy5hcHBlbmQoY29sdW1uRWxlbWVudCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuXG4gICAgICAgIC8vINCh0YLRgNC+0LrQuFxuICAgICAgICBpZiAodGFibGUuX3JlY29yZHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdGFibGUuX3JlY29yZHNUb3RhbCAgPSB0YWJsZS5nZXRSZWNvcmRzQ291bnQoKTtcbiAgICAgICAgICAgIHRhYmxlLl9yZWNvcmRzTnVtYmVyID0gdGFibGUuX3BhZ2UgPT09IDFcbiAgICAgICAgICAgICAgICA/IDFcbiAgICAgICAgICAgICAgICA6ICgodGFibGUuX3BhZ2UgLSAxKSAqIHRhYmxlLl9yZWNvcmRzUGVyUGFnZSkgKyAxO1xuXG4gICAgICAgICAgICByZWNvcmRzRWxlbWVudHMgPSBUYWJsZVJlbmRlci5yZW5kZXJSZWNvcmRzKHRhYmxlLCB0YWJsZS5fcmVjb3Jkcyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZWNvcmRzRWxlbWVudHMgPSBUYWJsZVJlbmRlci5yZW5kZXJSZWNvcmRzKHRhYmxlLCBbXSk7XG4gICAgICAgIH1cblxuXG4gICAgICAgIGlmIChvcHRpb25zLnNob3dIZWFkZXJzICYmXG4gICAgICAgICAgICBvcHRpb25zLmhhc093blByb3BlcnR5KCdjb2x1bW5zSGVhZGVyJykgJiZcbiAgICAgICAgICAgIEFycmF5LmlzQXJyYXkob3B0aW9ucy5jb2x1bW5zSGVhZGVyKSAmJlxuICAgICAgICAgICAgb3B0aW9ucy5jb2x1bW5zSGVhZGVyLmxlbmd0aCA+IDBcbiAgICAgICAgKSB7XG4gICAgICAgICAgICBsZXQgcm93cyA9IFtdO1xuXG4gICAgICAgICAgICBvcHRpb25zLmNvbHVtbnNIZWFkZXIubWFwKGZ1bmN0aW9uIChoZWFkZXJSb3cpIHtcbiAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShoZWFkZXJSb3cpKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBjZWxscyA9IFtdO1xuXG4gICAgICAgICAgICAgICAgICAgIGhlYWRlclJvdy5tYXAoZnVuY3Rpb24gKGhlYWRlckNvbHVtbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFRhYmxlVXRpbHMuaXNPYmplY3QoaGVhZGVyQ29sdW1uKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBhdHRyaWJ1dGVzID0gW107XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaGVhZGVyQ29sdW1uLmhhc093blByb3BlcnR5KCdhdHRyJykgJiYgVGFibGVVdGlscy5pc09iamVjdChoZWFkZXJDb2x1bW4uYXR0cikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJC5lYWNoKGhlYWRlckNvbHVtbi5hdHRyLCBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXMucHVzaChuYW1lICsgJz1cIicgKyB2YWx1ZSArICdcIicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZWxscy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudDogaGVhZGVyQ29sdW1uLmhhc093blByb3BlcnR5KCdjb250ZW50JykgPyBoZWFkZXJDb2x1bW4uY29udGVudCA6ICcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogaGVhZGVyQ29sdW1uLmhhc093blByb3BlcnR5KCdkZXNjcmlwdGlvbicpID8gaGVhZGVyQ29sdW1uLmRlc2NyaXB0aW9uIDogJycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHI6IGF0dHJpYnV0ZXMubGVuZ3RoID4gMCA/ICcgJyArIGF0dHJpYnV0ZXMuam9pbignICcpIDogJycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIHJvd3MucHVzaChUYWJsZVV0aWxzLnJlbmRlcihUYWJsZVRwbFsndGFibGUvY29sdW1ucy9oZWFkZXIuaHRtbCddLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2x1bW5zOiBjZWxscyxcbiAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBjb2x1bW5zSGVhZGVyID0gcm93cy5qb2luKCcnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvcHRpb25zLmhhc093blByb3BlcnR5KCdjb2x1bW5zRm9vdGVyJykgJiZcbiAgICAgICAgICAgIEFycmF5LmlzQXJyYXkob3B0aW9ucy5jb2x1bW5zRm9vdGVyKSAmJlxuICAgICAgICAgICAgb3B0aW9ucy5jb2x1bW5zRm9vdGVyLmxlbmd0aCA+IDBcbiAgICAgICAgKSB7XG4gICAgICAgICAgICBsZXQgcm93cyA9IFtdO1xuXG4gICAgICAgICAgICAkLmVhY2gob3B0aW9ucy5jb2x1bW5zRm9vdGVyLCBmdW5jdGlvbiAoa2V5LCBmb290ZXJSb3cpIHtcbiAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShmb290ZXJSb3cpKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBjZWxscyA9IFtdO1xuXG4gICAgICAgICAgICAgICAgICAgICQuZWFjaChmb290ZXJSb3csIGZ1bmN0aW9uIChrZXksIGZvb3RlckNvbHVtbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFRhYmxlVXRpbHMuaXNPYmplY3QoZm9vdGVyQ29sdW1uKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBhdHRyaWJ1dGVzID0gW107XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZm9vdGVyQ29sdW1uLmhhc093blByb3BlcnR5KCdhdHRyJykgJiYgVGFibGVVdGlscy5pc09iamVjdChmb290ZXJDb2x1bW4uYXR0cikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJC5lYWNoKGZvb3RlckNvbHVtbi5hdHRyLCBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXMucHVzaChuYW1lICsgJz1cIicgKyB2YWx1ZSArICdcIicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZWxscy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudDogZm9vdGVyQ29sdW1uLmhhc093blByb3BlcnR5KCdjb250ZW50JykgPyBmb290ZXJDb2x1bW4uY29udGVudCA6ICcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogZm9vdGVyQ29sdW1uLmhhc093blByb3BlcnR5KCdkZXNjcmlwdGlvbicpID8gZm9vdGVyQ29sdW1uLmRlc2NyaXB0aW9uIDogJycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHI6IGF0dHJpYnV0ZXMubGVuZ3RoID4gMCA/ICcgJyArIGF0dHJpYnV0ZXMuam9pbignICcpIDogJycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIHJvd3MucHVzaChcbiAgICAgICAgICAgICAgICAgICAgICAgIFRhYmxlVXRpbHMucmVuZGVyKFRhYmxlVHBsWyd0YWJsZS9jb2x1bW5zL2Zvb3Rlci5odG1sJ10sIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2x1bW5zOiBjZWxscyxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGNvbHVtbnNGb290ZXIgPSByb3dzLmpvaW4oJycpO1xuICAgICAgICB9XG5cblxuXG4gICAgICAgIGxldCBjbGFzc2VzID0gW107XG5cbiAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zLmNsYXNzID09PSAnc3RyaW5nJyAmJiBvcHRpb25zLmNsYXNzKSB7XG4gICAgICAgICAgICBjbGFzc2VzLnB1c2gob3B0aW9ucy5jbGFzcyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoICEgY29sdW1uc0Zvb3Rlcikge1xuICAgICAgICAgICAgY2xhc3Nlcy5wdXNoKCdlbXB0eS10Zm9vdCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHRoZWFkQXR0ciA9IFtdO1xuXG4gICAgICAgIGlmIChvcHRpb25zLmhhc093blByb3BlcnR5KCd0aGVhZFRvcCcpICYmXG4gICAgICAgICAgICBbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiBvcHRpb25zLnRoZWFkVG9wKSA+PSAwXG4gICAgICAgICkge1xuICAgICAgICAgICAgbGV0IHVuaXQgPSBUYWJsZVV0aWxzLmlzTnVtZXJpYyhvcHRpb25zLnRoZWFkVG9wKSA/ICdweCcgOiAnJztcbiAgICAgICAgICAgIHRoZWFkQXR0ci5wdXNoKCdzdHlsZT1cInRvcDonICsgb3B0aW9ucy50aGVhZFRvcCArIHVuaXQgKyAnXCInKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCB0YWJsZUVsZW1lbnQgPSAkKFRhYmxlVXRpbHMucmVuZGVyKFRhYmxlVHBsWyd0YWJsZS5odG1sJ10sIHtcbiAgICAgICAgICAgIGNsYXNzZXM6IGNsYXNzZXMuam9pbignICcpLFxuICAgICAgICAgICAgdGhlYWRBdHRyOiB0aGVhZEF0dHIubGVuZ3RoID4gMCA/IHRoZWFkQXR0ci5qb2luKCcgJykgOiAnJyxcbiAgICAgICAgICAgIHNob3dIZWFkZXJzOiBvcHRpb25zLnNob3dIZWFkZXJzLFxuICAgICAgICAgICAgY29sdW1uc0hlYWRlciA6IGNvbHVtbnNIZWFkZXIsXG4gICAgICAgICAgICBjb2xHcm91cHMgOiBjb2xHcm91cHMsXG4gICAgICAgICAgICBjb2x1bW5zRm9vdGVyIDogY29sdW1uc0Zvb3RlcixcbiAgICAgICAgfSkpO1xuXG5cbiAgICAgICAgaWYgKG9wdGlvbnMuc2hvd0hlYWRlcnMpIHtcbiAgICAgICAgICAgIHRhYmxlRWxlbWVudC5maW5kKCd0aGVhZCcpLmFwcGVuZChjb2x1bW5FbGVtZW50cyk7XG4gICAgICAgIH1cblxuXG4gICAgICAgIGxldCB0Ym9keSA9IHRhYmxlRWxlbWVudC5maW5kKCd0Ym9keScpO1xuXG4gICAgICAgIHJlY29yZHNFbGVtZW50cy5tYXAoZnVuY3Rpb24gKHJlY29yZEVsZW1lbnQpIHtcbiAgICAgICAgICAgIHRib2R5LmFwcGVuZChyZWNvcmRFbGVtZW50KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHRhYmxlRWxlbWVudFxuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqINCh0LHQvtGA0LrQsCDQt9Cw0L/QuNGB0LXQuSDRgtCw0LHQu9C40YbRi1xuICAgICAqIEBwYXJhbSB7b2JqZWN0fSB0YWJsZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9ICByZWNvcmRzXG4gICAgICogQHJldHVybiB7QXJyYXl9XG4gICAgICovXG4gICAgcmVuZGVyUmVjb3JkczogZnVuY3Rpb24gKHRhYmxlLCByZWNvcmRzKSB7XG5cbiAgICAgICAgbGV0IHJlbmRlclJlY29yZHMgPSBbXTtcblxuICAgICAgICBpZiAocmVjb3Jkcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBsZXQgdGhhdCAgICA9IHRoaXM7XG4gICAgICAgICAgICBsZXQgb3B0aW9ucyA9IHRhYmxlLmdldE9wdGlvbnMoKTtcbiAgICAgICAgICAgIGxldCBncm91cCAgID0gb3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnZ3JvdXAnKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICBUYWJsZVV0aWxzLmlzT2JqZWN0KG9wdGlvbnMuZ3JvdXApICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnMuZ3JvdXAuaGFzT3duUHJvcGVydHkoJ2ZpZWxkJykgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIG9wdGlvbnMuZ3JvdXAuZmllbGQgPT09ICdzdHJpbmcnICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnMuZ3JvdXAuZmllbGRcbiAgICAgICAgICAgICAgICA/IG9wdGlvbnMuZ3JvdXBcbiAgICAgICAgICAgICAgICA6IG51bGw7XG5cblxuICAgICAgICAgICAgaWYgKGdyb3VwKSB7XG4gICAgICAgICAgICAgICAgbGV0IGdyb3VwVmFsdWUgICAgPSBudWxsO1xuICAgICAgICAgICAgICAgIGxldCBncm91cEluZGV4ICAgID0gMDtcbiAgICAgICAgICAgICAgICBsZXQgcmVjb3Jkc0dyb3VwcyA9IHt9O1xuXG4gICAgICAgICAgICAgICAgcmVjb3Jkcy5tYXAoZnVuY3Rpb24gKHJlY29yZCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVjb3JkLnNob3cpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZWNvcmQuZGF0YS5oYXNPd25Qcm9wZXJ0eShncm91cC5maWVsZCkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiByZWNvcmQuZGF0YVtncm91cC5maWVsZF0pID49IDAgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBncm91cFZhbHVlICE9IHJlY29yZC5kYXRhW2dyb3VwLmZpZWxkXVxuICAgICAgICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3JvdXBWYWx1ZSA9IHJlY29yZC5kYXRhW2dyb3VwLmZpZWxkXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBncm91cEluZGV4Kys7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggISByZWNvcmRzR3JvdXBzLmhhc093blByb3BlcnR5KGdyb3VwSW5kZXgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVjb3Jkc0dyb3Vwc1tncm91cEluZGV4XSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNHcm91cDogZ3JvdXBJbmRleCA+IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlY29yZHM6IFtdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJlY29yZHNHcm91cHNbZ3JvdXBJbmRleF0ucmVjb3Jkcy5wdXNoKHJlY29yZCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICQuZWFjaChyZWNvcmRzR3JvdXBzLCBmdW5jdGlvbiAoa2V5LCByZWNvcmRzR3JvdXApIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJlbmRlclJlY29yZHNHcm91cCA9IFtdO1xuXG4gICAgICAgICAgICAgICAgICAgIHJlY29yZHNHcm91cC5yZWNvcmRzLm1hcChmdW5jdGlvbiAocmVjb3JkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZW5kZXJSZWNvcmRzR3JvdXAucHVzaCh0aGF0LnJlbmRlclJlY29yZCh0YWJsZSwgcmVjb3JkKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0YWJsZS5fcmVjb3Jkc051bWJlcisrO1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAocmVjb3Jkc0dyb3VwLmlzR3JvdXApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlclJlY29yZHMucHVzaCh0aGF0LnJlbmRlckdyb3VwKHRhYmxlLCBncm91cCwgcmVjb3Jkc0dyb3VwLnJlY29yZHNbMF0sIHJlbmRlclJlY29yZHNHcm91cCkpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgcmVuZGVyUmVjb3Jkc0dyb3VwLm1hcChmdW5jdGlvbiAocmVjb3JkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZW5kZXJSZWNvcmRzLnB1c2gocmVjb3JkKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVjb3Jkcy5tYXAoZnVuY3Rpb24gKHJlY29yZCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVjb3JkLnNob3cpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlclJlY29yZHMucHVzaCh0aGF0LnJlbmRlclJlY29yZCh0YWJsZSwgcmVjb3JkKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0YWJsZS5fcmVjb3Jkc051bWJlcisrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocmVuZGVyUmVjb3Jkcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJlbmRlclJlY29yZHMgPSBbXG4gICAgICAgICAgICAgICAgJChUYWJsZVV0aWxzLnJlbmRlcihUYWJsZVRwbFsndGFibGUvcmVjb3JkL2VtcHR5Lmh0bWwnXSwge1xuICAgICAgICAgICAgICAgICAgICBjb2x1bW5zQ291bnQ6IHRhYmxlLl9jb3VudENvbHVtbnNTaG93LFxuICAgICAgICAgICAgICAgICAgICBsYW5nOiB0YWJsZS5nZXRMYW5nKCksXG4gICAgICAgICAgICAgICAgfSkpXG4gICAgICAgICAgICBdO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlbmRlclJlY29yZHM7XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICog0KHQsdC+0YDQutCwINC30LDQv9C40YHQuCDRgtCw0LHQu9C40YbRi1xuICAgICAqIEBwYXJhbSB7VGFibGVJbnN0YW5jZX0gdGFibGVcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gICAgICAgIHJlY29yZFxuICAgICAqIEByZXR1cm5zIHt7IGF0dHI6IChzdHJpbmcpLCBmaWVsZHM6IChvYmplY3QpIH19fVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgcmVuZGVyUmVjb3JkOiBmdW5jdGlvbiAodGFibGUsIHJlY29yZCkge1xuXG4gICAgICAgIGxldCB0aGF0ICAgICAgID0gdGhpcztcbiAgICAgICAgbGV0IG9wdGlvbnMgICAgPSB0YWJsZS5nZXRPcHRpb25zKCk7XG4gICAgICAgIGxldCBmaWVsZHMgICAgID0gW107XG4gICAgICAgIGxldCByZWNvcmRBdHRyID0ge1xuICAgICAgICAgICAgY2xhc3M6ICdjb3JldWktdGFibGVfX3JlY29yZCdcbiAgICAgICAgfTtcblxuICAgICAgICB0YWJsZS5fY29sdW1ucy5tYXAoZnVuY3Rpb24gKGNvbHVtbikge1xuICAgICAgICAgICAgaWYgKCAhIGNvbHVtbi5pc1Nob3coKSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbGV0IGZpZWxkQ29udGVudCA9IHRoYXQucmVuZGVyRmllbGQodGFibGUsIGNvbHVtbiwgcmVjb3JkKTtcblxuICAgICAgICAgICAgaWYgKGZpZWxkQ29udGVudCkge1xuICAgICAgICAgICAgICAgIGZpZWxkcy5wdXNoKGZpZWxkQ29udGVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmICgodHlwZW9mIG9wdGlvbnMub25DbGlja1VybCA9PT0gJ3N0cmluZycgJiYgb3B0aW9ucy5vbkNsaWNrVXJsKSB8fFxuICAgICAgICAgICAgb3B0aW9ucy5vbkNsaWNrXG4gICAgICAgICkge1xuICAgICAgICAgICAgcmVjb3JkQXR0ci5jbGFzcyArPSAnIGNvcmV1aS10YWJsZV9wb2ludGVyJztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChyZWNvcmQubWV0YSkge1xuICAgICAgICAgICAgcmVjb3JkQXR0ciA9IFRhYmxlVXRpbHMubWVyZ2VBdHRyKHJlY29yZEF0dHIsIHJlY29yZC5tZXRhLmF0dHIpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGF0dHJpYnV0ZXMgPSBbXTtcblxuICAgICAgICAkLmVhY2gocmVjb3JkQXR0ciwgZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVzLnB1c2gobmFtZSArICc9XCInICsgdmFsdWUgKyAnXCInKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgbGV0IHJlY29yZEVsZW1lbnQgPSAkKFRhYmxlVXRpbHMucmVuZGVyKFRhYmxlVHBsWyd0YWJsZS9yZWNvcmQuaHRtbCddLCB7XG4gICAgICAgICAgICBhdHRyICA6IGF0dHJpYnV0ZXMubGVuZ3RoID4gMCA/ICgnICcgKyBhdHRyaWJ1dGVzLmpvaW4oJyAnKSkgOiAnJyxcbiAgICAgICAgICAgIGluZGV4IDogcmVjb3JkLmluZGV4LFxuICAgICAgICAgICAgZmllbGRzOiBmaWVsZHNcbiAgICAgICAgfSkpO1xuXG4gICAgICAgIGZpZWxkcy5tYXAoZnVuY3Rpb24gKGZpZWxkLCBrZXkpIHtcbiAgICAgICAgICAgICQocmVjb3JkRWxlbWVudFswXS5xdWVyeVNlbGVjdG9yKCc6c2NvcGUgPiB0ZDpudGgtY2hpbGQoJyArIChrZXkgKyAxKSArICcpJykpLmFwcGVuZChmaWVsZC5jb250ZW50KVxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gcmVjb3JkRWxlbWVudDtcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiDQodCx0L7RgNC60LAg0Y/Rh9C10LnQutC4INGC0LDQsdC70LjRhtGLXG4gICAgICogQHBhcmFtIHtUYWJsZUluc3RhbmNlfSB0YWJsZVxuICAgICAqIEBwYXJhbSB7Q29sdW1ufSAgICAgICAgICAgICAgY29sdW1uXG4gICAgICogQHBhcmFtIHtvYmplY3R9ICAgICAgICAgICAgICByZWNvcmRcbiAgICAgKiBAcmV0dXJucyB7eyBhdHRyOiAoc3RyaW5nKSwgY29udGVudDogKHN0cmluZykgfX1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHJlbmRlckZpZWxkOiBmdW5jdGlvbiAodGFibGUsIGNvbHVtbiwgcmVjb3JkKSB7XG5cbiAgICAgICAgbGV0IGNvbHVtbk9wdGlvbnMgPSBjb2x1bW4uZ2V0T3B0aW9ucygpO1xuICAgICAgICBsZXQgY29sdW1uRmllbGQgICA9IGNvbHVtbi5nZXRGaWVsZCgpO1xuICAgICAgICBsZXQgY29udGVudCAgICAgICA9IG51bGw7XG4gICAgICAgIGxldCBmaWVsZFByb3BzICAgID0gcmVjb3JkLm1ldGEgJiYgcmVjb3JkLm1ldGEuaGFzT3duUHJvcGVydHkoJ2ZpZWxkcycpICYmIHJlY29yZC5tZXRhLmZpZWxkcy5oYXNPd25Qcm9wZXJ0eShjb2x1bW5GaWVsZClcbiAgICAgICAgICAgID8gcmVjb3JkLm1ldGEuZmllbGRzW2NvbHVtbkZpZWxkXVxuICAgICAgICAgICAgOiBudWxsO1xuICAgICAgICBsZXQgZmllbGRBdHRyID0gY29sdW1uT3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnYXR0cicpICYmIFRhYmxlVXRpbHMuaXNPYmplY3QoY29sdW1uT3B0aW9ucy5hdHRyKVxuICAgICAgICAgICAgPyBjb2x1bW5PcHRpb25zLmF0dHJcbiAgICAgICAgICAgIDoge307XG5cbiAgICAgICAgaWYgKGZpZWxkUHJvcHMgJiYgVGFibGVVdGlscy5pc09iamVjdChmaWVsZFByb3BzKSkge1xuICAgICAgICAgICAgaWYgKGZpZWxkUHJvcHMgJiYgZmllbGRQcm9wcy5oYXNPd25Qcm9wZXJ0eSgnc2hvdycpICYmICEgZmllbGRQcm9wcy5zaG93KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChUYWJsZVV0aWxzLmlzT2JqZWN0KGZpZWxkUHJvcHMuYXR0cikpIHtcbiAgICAgICAgICAgICAgICBmaWVsZEF0dHIgPSBUYWJsZVV0aWxzLm1lcmdlQXR0cihmaWVsZEF0dHIsIGZpZWxkUHJvcHMuYXR0cik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29sdW1uT3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnZml4ZWQnKSAmJiB0eXBlb2YgY29sdW1uT3B0aW9ucy5maXhlZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGZpZWxkQXR0ciA9IFRhYmxlVXRpbHMubWVyZ2VBdHRyKGZpZWxkQXR0ciwge1xuICAgICAgICAgICAgICAgIGNsYXNzOiAnY29yZXVpLXRhYmxlX19maXhlZF8nICsgY29sdW1uT3B0aW9ucy5maXhlZFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIGNvbHVtbk9wdGlvbnMucmVuZGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjb250ZW50ID0gY29sdW1uT3B0aW9ucy5yZW5kZXIoe1xuICAgICAgICAgICAgICAgIHRhYmxlOiB0YWJsZSxcbiAgICAgICAgICAgICAgICByZWNvcmQ6IHJlY29yZCxcbiAgICAgICAgICAgICAgICBmaWVsZDogY29sdW1uRmllbGQsXG4gICAgICAgICAgICB9LCB0YWJsZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb250ZW50ID0gY29sdW1uRmllbGQgJiYgcmVjb3JkLmRhdGEuaGFzT3duUHJvcGVydHkoY29sdW1uRmllbGQpXG4gICAgICAgICAgICAgICAgPyByZWNvcmQuZGF0YVtjb2x1bW5GaWVsZF1cbiAgICAgICAgICAgICAgICA6IG51bGw7XG4gICAgICAgIH1cblxuXG4gICAgICAgIGNvbnRlbnQgPSBjb2x1bW4ucmVuZGVyKGNvbnRlbnQsIHJlY29yZCk7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBjb2x1bW4uZ2V0QWN0aW9ucyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgbGV0IGFjdGlvbnMgPSBjb2x1bW4uZ2V0QWN0aW9ucyhjb250ZW50LCBjb2x1bW5GaWVsZCwgcmVjb3JkKTtcblxuICAgICAgICAgICAgaWYgKFRhYmxlVXRpbHMuaXNPYmplY3QoYWN0aW9ucykpIHtcbiAgICAgICAgICAgICAgICByZWNvcmQuZmllbGRzW2NvbHVtbkZpZWxkXSA9IGFjdGlvbnM7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgZmllbGRBdHRyUmVzdWx0ID0gW107XG5cbiAgICAgICAgJC5lYWNoKGZpZWxkQXR0ciwgZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XG4gICAgICAgICAgICBmaWVsZEF0dHJSZXN1bHQucHVzaChuYW1lICsgJz1cIicgKyB2YWx1ZSArICdcIicpO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYXR0cjogICAgZmllbGRBdHRyUmVzdWx0Lmxlbmd0aCA+IDAgPyAoJyAnICsgZmllbGRBdHRyUmVzdWx0LmpvaW4oJyAnKSkgOiAnJyxcbiAgICAgICAgICAgIGNvbnRlbnQ6IGNvbnRlbnQsXG4gICAgICAgIH07XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICog0KHQsdC+0YDQutCwINC30LDQv9C40YHQuC3Qs9GA0YPQv9C/0YtcbiAgICAgKiBAcGFyYW0ge1RhYmxlSW5zdGFuY2V9IHRhYmxlXG4gICAgICogQHBhcmFtIHtvYmplY3R9ICAgICAgICAgICAgICBncm91cFxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSAgICAgICAgICAgICAgcmVjb3JkXG4gICAgICogQHBhcmFtIHtBcnJheX0gICAgICAgICAgICAgICByZW5kZXJSZWNvcmRzXG4gICAgICogQHJldHVybnMge3sgYXR0cjogKHN0cmluZyksIGZpZWxkczogKG9iamVjdCkgfX19XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICByZW5kZXJHcm91cDogZnVuY3Rpb24gKHRhYmxlLCBncm91cCwgcmVjb3JkLCByZW5kZXJSZWNvcmRzKSB7XG5cbiAgICAgICAgbGV0IGF0dHIgPSBncm91cC5oYXNPd25Qcm9wZXJ0eSgnYXR0cicpICYmIFRhYmxlVXRpbHMuaXNPYmplY3QoZ3JvdXAuYXR0cilcbiAgICAgICAgICAgID8gZ3JvdXAuYXR0clxuICAgICAgICAgICAgOiB7fTtcblxuICAgICAgICBpZiAoYXR0ci5oYXNPd25Qcm9wZXJ0eSgnY2xhc3MnKSAmJiB0eXBlb2YgYXR0ci5jbGFzcyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGF0dHIuY2xhc3MgKz0gJyBjb3JldWktdGFibGVfX3JlY29yZC1ncm91cCc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhdHRyLmNsYXNzID0gJ2NvcmV1aS10YWJsZV9fcmVjb3JkLWdyb3VwJztcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBhdHRyaWJ1dGVzID0gW107XG5cbiAgICAgICAgJC5lYWNoKGF0dHIsIGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIHZhbHVlKSA+PSAwKSB7XG4gICAgICAgICAgICAgICAgYXR0cmlidXRlcy5wdXNoKG5hbWUgKyAnPVwiJyArIHZhbHVlICsgJ1wiJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGxldCBpc0NvbGxhcHNpbmcgPSBncm91cC5oYXNPd25Qcm9wZXJ0eSgnaXNDb2xsYXBzaW5nJykgPyAhISBncm91cC5pc0NvbGxhcHNpbmcgOiBmYWxzZTtcblxuICAgICAgICBsZXQgZ3JvdXBFbGVtZW50ID0gJChUYWJsZVV0aWxzLnJlbmRlcihUYWJsZVRwbFsndGFibGUvcmVjb3JkL2dyb3VwLmh0bWwnXSwge1xuICAgICAgICAgICAgYXR0cjogYXR0cmlidXRlcy5sZW5ndGggPiAwID8gKCcgJyArIGF0dHJpYnV0ZXMuam9pbignICcpKSA6ICcnLFxuICAgICAgICAgICAgY29sc3BhbjogdGFibGUuX2NvdW50Q29sdW1uc1Nob3csXG4gICAgICAgICAgICBpc0NvbGxhcHNpbmc6IGlzQ29sbGFwc2luZ1xuICAgICAgICB9KSk7XG5cbiAgICAgICAgbGV0IHRkICAgICAgPSBncm91cEVsZW1lbnQuZmluZCgnID4gdGQnKTtcbiAgICAgICAgbGV0IGNvbnRlbnQgPSByZWNvcmQuZGF0YVtncm91cC5maWVsZF07XG5cblxuICAgICAgICBpZiAoZ3JvdXAuaGFzT3duUHJvcGVydHkoJ3JlbmRlcicpKSB7XG4gICAgICAgICAgICBsZXQgcmVuZGVyQ29udGVudCA9IG51bGw7XG5cbiAgICAgICAgICAgIGxldCBwcm9wID0ge1xuICAgICAgICAgICAgICAgIHRhYmxlOiB0YWJsZSxcbiAgICAgICAgICAgICAgICByZWNvcmQ6IHJlY29yZCxcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgZ3JvdXAucmVuZGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgcmVuZGVyQ29udGVudCA9IGdyb3VwLnJlbmRlcihwcm9wKTtcblxuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgZ3JvdXAucmVuZGVyID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIHJlbmRlckNvbnRlbnQgPSAobmV3IEZ1bmN0aW9uKCdwcm9wJywgZ3JvdXAucmVuZGVyKSkocHJvcCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChyZW5kZXJDb250ZW50KSB7XG4gICAgICAgICAgICAgICAgY29udGVudCA9IHJlbmRlckNvbnRlbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuXG4gICAgICAgIGlmIChpc0NvbGxhcHNpbmcpIHtcbiAgICAgICAgICAgIGxldCBjb2xsYXBzZWQgPSAkKCc8aSBjbGFzcz1cImJpIGJpLWNoZXZyb24tZG93biBjb3JldWktdGFibGVfcG9pbnRlciBtZS0xXCI+PC9pPicpO1xuXG4gICAgICAgICAgICBjb2xsYXBzZWQuY2xpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGlmICgkKHRoaXMpLmhhc0NsYXNzKCdiaS1jaGV2cm9uLWRvd24nKSkge1xuICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLnJlbW92ZUNsYXNzKCdiaS1jaGV2cm9uLWRvd24nKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCdiaS1jaGV2cm9uLXJpZ2h0Jyk7XG5cbiAgICAgICAgICAgICAgICAgICAgcmVuZGVyUmVjb3Jkcy5tYXAoZnVuY3Rpb24gKHJlbmRlclJlY29yZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJChyZW5kZXJSZWNvcmQpLmZhZGVPdXQoMTAwKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLnJlbW92ZUNsYXNzKCdiaS1jaGV2cm9uLXJpZ2h0JylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnYmktY2hldnJvbi1kb3duJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgcmVuZGVyUmVjb3Jkcy5tYXAoZnVuY3Rpb24gKHJlbmRlclJlY29yZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJChyZW5kZXJSZWNvcmQpLmZhZGVJbigxMDApO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdGQuYXBwZW5kKGNvbGxhcHNlZCk7XG4gICAgICAgIH1cblxuICAgICAgICB0ZC5hcHBlbmQoY29udGVudCk7XG5cbiAgICAgICAgcmV0dXJuIGdyb3VwRWxlbWVudDtcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiDQodCx0L7RgNC60LAg0YDQsNGB0LrRgNGL0LLQsNGO0YnQtdC50YHRjyDRgdGC0YDQvtC60LhcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gICAgICAgdGFibGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gY29udGVudFxuICAgICAqL1xuICAgIHJlbmRlckV4cGFuZDogZnVuY3Rpb24gKHRhYmxlLCBjb250ZW50KSB7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBjb250ZW50ID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgY29udGVudCA9IFRhYmxlUmVuZGVyLnJlbmRlckNvbXBvbmVudHModGFibGUsIGNvbnRlbnQsICdyZWNvcmRfZXhwYW5kX3Nob3cnKTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgbGV0IGV4cGFuZFJlY29yZCA9ICQoVGFibGVVdGlscy5yZW5kZXIoVGFibGVUcGxbJ3RhYmxlL3JlY29yZC9leHBhbmQuaHRtbCddLCB7XG4gICAgICAgICAgICBjb2xzcGFuOiB0YWJsZS5fY291bnRDb2x1bW5zU2hvdyxcbiAgICAgICAgfSkpO1xuXG4gICAgICAgIGlmIChbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiBjb250ZW50KSA+PSAwKSB7XG4gICAgICAgICAgICBleHBhbmRSZWNvcmQuZmluZCgndGQnKS5odG1sKGNvbnRlbnQpXG5cbiAgICAgICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGNvbnRlbnQpKSB7XG4gICAgICAgICAgICAkLmVhY2goY29udGVudCwgZnVuY3Rpb24gKGtleSwgaXRlbSkge1xuICAgICAgICAgICAgICAgIGlmIChbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiBpdGVtKSA+PSAwIHx8XG4gICAgICAgICAgICAgICAgICAgIGl0ZW0gaW5zdGFuY2VvZiBIVE1MRWxlbWVudCB8fFxuICAgICAgICAgICAgICAgICAgICAod2luZG93Lmhhc093blByb3BlcnR5KCdqUXVlcnknKSAmJiBpdGVtIGluc3RhbmNlb2YgalF1ZXJ5KVxuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICBleHBhbmRSZWNvcmQuZmluZCgndGQnKS5hcHBlbmQoaXRlbSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBleHBhbmRSZWNvcmQ7XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICog0KHQsdC+0YDQutCwINGN0LvQtdC80LXQvdGC0LAg0YPQv9GA0LDQstC70LXQvdC40Y9cbiAgICAgKiBAcGFyYW0ge29iamVjdH0gdGFibGVcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gY29udHJvbFxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHJldHVybnMge0hUTUxFbGVtZW50fGpRdWVyeX1cbiAgICAgKi9cbiAgICByZW5kZXJDb250cm9sOiBmdW5jdGlvbiAodGFibGUsIGNvbnRyb2wpIHtcblxuICAgICAgICBpZiAoVGFibGVVdGlscy5pc09iamVjdChjb250cm9sKSkge1xuICAgICAgICAgICAgbGV0IGNvbnRyb2xFbGVtZW50ID0gJChUYWJsZVV0aWxzLnJlbmRlcihUYWJsZVRwbFsndGFibGUvY29udHJvbC5odG1sJ10sIHtcbiAgICAgICAgICAgICAgICBpZDogY29udHJvbC5nZXRJZCgpXG4gICAgICAgICAgICB9KSk7XG5cbiAgICAgICAgICAgIGNvbnRyb2xFbGVtZW50LmFwcGVuZChjb250cm9sLnJlbmRlcigpKTtcblxuICAgICAgICAgICAgcmV0dXJuIGNvbnRyb2xFbGVtZW50O1xuICAgICAgICB9XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICog0KTQvtGA0LzQuNGA0L7QstCw0L3QuNC1INC60L7QvdGC0LXQvdGC0LAg0LrQvtC80L/QvtC90LXQvdGC0LBcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gdGFibGVcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gY29tcG9uZW50c1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudE5hbWVcbiAgICAgKiBAcmV0dXJuIHtBcnJheX1cbiAgICAgKi9cbiAgICByZW5kZXJDb21wb25lbnRzOiBmdW5jdGlvbiAodGFibGUsIGNvbXBvbmVudHMsIGV2ZW50TmFtZSkge1xuXG4gICAgICAgIGxldCByZXN1bHQgPSBbXTtcblxuICAgICAgICBpZiAoY29tcG9uZW50cyBpbnN0YW5jZW9mIE9iamVjdCkge1xuICAgICAgICAgICAgaWYgKCAhIEFycmF5LmlzQXJyYXkoY29tcG9uZW50cykpIHtcbiAgICAgICAgICAgICAgICBjb21wb25lbnRzID0gWyBjb21wb25lbnRzIF07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY29tcG9uZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgY29tcG9uZW50c1tpXSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goY29tcG9uZW50c1tpXSk7XG5cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGNvbXBvbmVudHNbaV0gaW5zdGFuY2VvZiBPYmplY3QgJiZcbiAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGNvbXBvbmVudHNbaV0ucmVuZGVyID09PSAnZnVuY3Rpb24nICYmXG4gICAgICAgICAgICAgICAgICAgIHR5cGVvZiBjb21wb25lbnRzW2ldLmluaXRFdmVudHMgPT09ICdmdW5jdGlvbidcbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goY29tcG9uZW50c1tpXS5yZW5kZXIoKSk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50TmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGFibGUub24oZXZlbnROYW1lLCBjb21wb25lbnRzW2ldLmluaXRFdmVudHMsIGNvbXBvbmVudHNbaV0sIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKFRhYmxlVXRpbHMuaXNPYmplY3QoY29tcG9uZW50c1tpXSkgJiZcbiAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50c1tpXS5oYXNPd25Qcm9wZXJ0eSgnY29tcG9uZW50JykgJiZcbiAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50c1tpXS5jb21wb25lbnQuc3Vic3RyaW5nKDAsIDYpID09PSAnY29yZXVpJ1xuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgbmFtZSA9IGNvbXBvbmVudHNbaV0uY29tcG9uZW50LnNwbGl0KCcuJylbMV07XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKENvcmVVSS5oYXNPd25Qcm9wZXJ0eShuYW1lKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgVGFibGVVdGlscy5pc09iamVjdChDb3JlVUlbbmFtZV0pXG4gICAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGluc3RhbmNlID0gQ29yZVVJW25hbWVdLmNyZWF0ZShjb21wb25lbnRzW2ldKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKGluc3RhbmNlLnJlbmRlcigpKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50TmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhYmxlLm9uKGV2ZW50TmFtZSwgaW5zdGFuY2UuaW5pdEV2ZW50cywgaW5zdGFuY2UsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgVGFibGVSZW5kZXI7IiwiXG5pbXBvcnQgVGFibGVSZW5kZXIgZnJvbSBcIi4vdGFibGUucmVuZGVyXCI7XG5cblxubGV0IFRhYmxlRWxlbWVudHMgPSB7XG5cbiAgICAvKipcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0LrQvtC90YLQtdC50L3QtdGA0LAg0YLQsNCx0LvQuNGG0YtcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGFibGVJZFxuICAgICAqIEByZXR1cm4ge2pRdWVyeX1cbiAgICAgKi9cbiAgICBnZXRDb250YWluZXI6IGZ1bmN0aW9uICh0YWJsZUlkKSB7XG5cbiAgICAgICAgcmV0dXJuICQoJyNjb3JldWktdGFibGUtJyArIHRhYmxlSWQgKyAnID4gLmNvcmV1aS10YWJsZV9fY29udGFpbmVyJyk7XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC+0LHQtdGA0YLQutC4INGC0LDQsdC70LjRhtGLXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRhYmxlSWRcbiAgICAgKiBAcmV0dXJuIHtqUXVlcnl9XG4gICAgICovXG4gICAgZ2V0TG9jazogZnVuY3Rpb24gKHRhYmxlSWQpIHtcblxuICAgICAgICByZXR1cm4gJCgnI2NvcmV1aS10YWJsZS0nICsgdGFibGVJZCArICcgPiAuY29yZXVpLXRhYmxlX19jb250YWluZXIgPiAuY29yZXVpLXRhYmxlLWxvY2snKTtcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0L7QsdC10YDRgtC60Lgg0YLQsNCx0LvQuNGG0YtcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGFibGVJZFxuICAgICAqIEByZXR1cm4ge2pRdWVyeX1cbiAgICAgKi9cbiAgICBnZXRXcmFwcGVyOiBmdW5jdGlvbiAodGFibGVJZCkge1xuXG4gICAgICAgIHJldHVybiAkKCcjY29yZXVpLXRhYmxlLScgKyB0YWJsZUlkICsgJyA+IC5jb3JldWktdGFibGVfX2NvbnRhaW5lciA+IC5jb3JldWktdGFibGVfX3dyYXBwZXInKTtcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0L/QvtC40YHQutC+0LLQvtCz0L4g0LrQvtC90YLQtdC50L3QtdGA0LBcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGFibGVJZFxuICAgICAqIEByZXR1cm4ge2pRdWVyeX1cbiAgICAgKi9cbiAgICBnZXRTZWFyY2hDb250YWluZXI6IGZ1bmN0aW9uICh0YWJsZUlkKSB7XG5cbiAgICAgICAgcmV0dXJuICQoJyNjb3JldWktdGFibGUtJyArIHRhYmxlSWQgKyAnID4gLmNvcmV1aS10YWJsZV9fY29udGFpbmVyID4gLmNvcmV1aS10YWJsZV9fc2VhcmNoJyk7XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC/0L7QuNGB0LrQvtCy0L7Qs9C+INC60L7QvdGC0LXQudC90LXRgNCwXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRhYmxlSWRcbiAgICAgKiBAcmV0dXJuIHtqUXVlcnl9XG4gICAgICovXG4gICAgZ2V0Q29sdW1uc0NvbnRhaW5lcjogZnVuY3Rpb24gKHRhYmxlSWQpIHtcblxuICAgICAgICByZXR1cm4gJCgnI2NvcmV1aS10YWJsZS0nICsgdGFibGVJZCArICcgPiAuY29yZXVpLXRhYmxlX19jb250YWluZXIgPiAuY29yZXVpLXRhYmxlX19jb2x1bW5zJyk7XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC60L7QvdGC0LXQudC90LXRgNCwINC/0L7QuNGB0LrQvtCy0L7Qs9C+INC60L7QvdGC0YDQvtC70LBcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGFibGVJZFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjb250cm9sSWRcbiAgICAgKiBAcmV0dXJuIHtqUXVlcnl9XG4gICAgICovXG4gICAgZ2V0U2VhcmNoQ29udHJvbDogZnVuY3Rpb24gKHRhYmxlSWQsIGNvbnRyb2xJZCkge1xuXG4gICAgICAgIHJldHVybiAkKCcjY29yZXVpLXRhYmxlLScgKyB0YWJsZUlkICsgJyA+IC5jb3JldWktdGFibGVfX2NvbnRhaW5lciA+IC5jb3JldWktdGFibGVfX3NlYXJjaCAuc2VhcmNoLWNvbnRyb2wtJyArIGNvbnRyb2xJZCk7XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC60L7QvdGC0LXQudC90LXRgNCwINC60L7QvdGC0YDQvtC70LBcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGFibGVJZFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjb250cm9sSWRcbiAgICAgKiBAcmV0dXJuIHtqUXVlcnl9XG4gICAgICovXG4gICAgZ2V0Q29udHJvbDogZnVuY3Rpb24gKHRhYmxlSWQsIGNvbnRyb2xJZCkge1xuXG4gICAgICAgIHJldHVybiAkKCcjY29yZXVpLXRhYmxlLScgKyB0YWJsZUlkICsgJyAgI2NvcmV1aS10YWJsZS1jb250cm9sLScgKyBjb250cm9sSWQpO1xuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSDRgtCw0LHQu9C40YbRi1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0YWJsZUlkXG4gICAgICogQHJldHVybiB7alF1ZXJ5fVxuICAgICAqL1xuICAgIGdldFRhYmxlOiBmdW5jdGlvbiAodGFibGVJZCkge1xuXG4gICAgICAgIHJldHVybiAkKCcjY29yZXVpLXRhYmxlLScgKyB0YWJsZUlkICsgJyA+IC5jb3JldWktdGFibGVfX2NvbnRhaW5lciA+IC5jb3JldWktdGFibGVfX3dyYXBwZXIgPiB0YWJsZScpO1xuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSDRgtC10LvQsCDRgtCw0LHQu9C40YbRi1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0YWJsZUlkXG4gICAgICogQHJldHVybiB7alF1ZXJ5fVxuICAgICAqL1xuICAgIGdldFRhYmxlVGJvZHk6IGZ1bmN0aW9uICh0YWJsZUlkKSB7XG5cbiAgICAgICAgcmV0dXJuICQoJyNjb3JldWktdGFibGUtJyArIHRhYmxlSWQgKyAnID4gLmNvcmV1aS10YWJsZV9fY29udGFpbmVyID4gLmNvcmV1aS10YWJsZV9fd3JhcHBlciA+IHRhYmxlID4gdGJvZHknKTtcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0LfQsNCz0L7Qu9C+0LLQutC+0LIg0YLQsNCx0LvQuNGG0YtcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGFibGVJZFxuICAgICAqIEByZXR1cm4ge2pRdWVyeX1cbiAgICAgKi9cbiAgICBnZXRUYWJsZVRoZWFkOiBmdW5jdGlvbiAodGFibGVJZCkge1xuXG4gICAgICAgIHJldHVybiAkKCcjY29yZXVpLXRhYmxlLScgKyB0YWJsZUlkICsgJyA+IC5jb3JldWktdGFibGVfX2NvbnRhaW5lciA+IC5jb3JldWktdGFibGVfX3dyYXBwZXIgPiB0YWJsZSA+IHRoZWFkJyk7XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INGP0YfQtdC10Log0YEg0YHQvtGA0YLQuNGA0L7QstC60L7QuSDQv9C+INGC0LDQsdC70LjRhtC1XG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRhYmxlSWRcbiAgICAgKiBAcmV0dXJuIHtqUXVlcnl9XG4gICAgICovXG4gICAgZ2V0VGFibGVTb3J0YWJsZTogZnVuY3Rpb24gKHRhYmxlSWQpIHtcblxuICAgICAgICByZXR1cm4gJCgnI2NvcmV1aS10YWJsZS0nICsgdGFibGVJZCArICcgPiAuY29yZXVpLXRhYmxlX19jb250YWluZXIgPiAuY29yZXVpLXRhYmxlX193cmFwcGVyID4gdGFibGUgPiB0aGVhZCA+IHRyID4gdGQuY29yZXVpLXRhYmxlX19zb3J0YWJsZScpO1xuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSDRgdGC0YDQvtC6INC30LDQv9C40YHQtdC5XG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRhYmxlSWRcbiAgICAgKiBAcmV0dXJuIHtqUXVlcnl9XG4gICAgICovXG4gICAgZ2V0VHJSZWNvcmRzOiBmdW5jdGlvbiAodGFibGVJZCkge1xuXG4gICAgICAgIHJldHVybiAkKCcjY29yZXVpLXRhYmxlLScgKyB0YWJsZUlkICsgJyA+IC5jb3JldWktdGFibGVfX2NvbnRhaW5lciA+IC5jb3JldWktdGFibGVfX3dyYXBwZXIgPiB0YWJsZSA+IHRib2R5ID4gdHIuY29yZXVpLXRhYmxlX19yZWNvcmQnKTtcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0Y3Qu9C10LzQtdC90YLQsCDRgdGC0YDQvtC60Lgg0L/QviDQutC70Y7Rh9GDXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRhYmxlSWRcbiAgICAgKiBAcGFyYW0ge2ludH0gICAgaW5kZXhcbiAgICAgKiBAcmV0dXJuIHtqUXVlcnl9XG4gICAgICovXG4gICAgZ2V0VHJCeUluZGV4OiBmdW5jdGlvbiAodGFibGVJZCwgaW5kZXgpIHtcblxuICAgICAgICByZXR1cm4gJCgnI2NvcmV1aS10YWJsZS0nICsgdGFibGVJZCArICcgPiAuY29yZXVpLXRhYmxlX19jb250YWluZXIgPiAuY29yZXVpLXRhYmxlX193cmFwcGVyID4gdGFibGUgPiB0Ym9keSA+IHRyW2RhdGEtcmVjb3JkLWluZGV4PVwiJyArIGluZGV4ICsgJ1wiXScpO1xuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSDRjdC70LXQvNC10L3RgtCwINGB0YLRgNC+0LrQuCDQv9C+INC60LvRjtGH0YNcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGFibGVJZFxuICAgICAqIEByZXR1cm4ge2pRdWVyeX1cbiAgICAgKi9cbiAgICBnZXRUckVtcHR5OiBmdW5jdGlvbiAodGFibGVJZCkge1xuXG4gICAgICAgIHJldHVybiAkKCcjY29yZXVpLXRhYmxlLScgKyB0YWJsZUlkICsgJyA+IC5jb3JldWktdGFibGVfX2NvbnRhaW5lciA+IC5jb3JldWktdGFibGVfX3dyYXBwZXIgPiB0YWJsZSA+IHRib2R5ID4gdHIuY29yZXVpLXRhYmxlX19yZWNvcmQtZW1wdHknKTtcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0LrQvtC90YLQtdC90YLQsCDQv9C+0LQg0YHRgtGA0L7QutC+0LlcbiAgICAgKiBAcGFyYW0ge2pRdWVyeX0gcmVjb3JkRWxlbWVudFxuICAgICAqIEByZXR1cm4ge2pRdWVyeX1cbiAgICAgKi9cbiAgICBnZXRFeHBhbmRSb3c6IGZ1bmN0aW9uIChyZWNvcmRFbGVtZW50KSB7XG5cbiAgICAgICAgcmV0dXJuIHJlY29yZEVsZW1lbnQubmV4dCgpLmhhc0NsYXNzKCdjb3JldWktdGFibGVfX3JlY29yZC1leHBhbmRlZCcpXG4gICAgICAgICAgICA/IHJlY29yZEVsZW1lbnQubmV4dCgpXG4gICAgICAgICAgICA6IG51bGw7XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICog0JTQvtCx0LDQstC70LXQvdC40LUg0LrQvtC90YLQtdC90YLQsCDQv9C+0LQg0YHRgtGA0L7QutC+0LlcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gICAgICAgdGFibGVcbiAgICAgKiBAcGFyYW0ge2pRdWVyeX0gICAgICAgcmVjb3JkRWxlbWVudFxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBjb250ZW50XG4gICAgICogQHJldHVybiB7alF1ZXJ5fVxuICAgICAqL1xuICAgIGFkZEV4cGFuZFJvdzogZnVuY3Rpb24gKHRhYmxlLCByZWNvcmRFbGVtZW50LCBjb250ZW50KSB7XG5cbiAgICAgICAgbGV0IGV4cGFuZFJlY29yZCA9IFRhYmxlUmVuZGVyLnJlbmRlckV4cGFuZCh0YWJsZSwgY29udGVudCwgJ3JlY29yZF9leHBhbmRfc2hvdycpO1xuXG4gICAgICAgIHJlY29yZEVsZW1lbnQuYWZ0ZXIoZXhwYW5kUmVjb3JkKTtcbiAgICAgICAgcmVjb3JkRWxlbWVudC5uZXh0KCkuc2hvdygnZmFzdCcpO1xuICAgICAgICByZWNvcmRFbGVtZW50LmFkZENsYXNzKCdyZWNvcmQtZXhwYW5kZWQnKTtcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiDQodC60YDRi9GC0LjQtSDQutC+0L3RgtC10L3RgtCwINC/0L7QtCDRgdGC0YDQvtC60L7QuVxuICAgICAqIEBwYXJhbSB7alF1ZXJ5fSByZWNvcmRFeHBhbmRlZFxuICAgICAqIEByZXR1cm4ge2pRdWVyeX1cbiAgICAgKi9cbiAgICBoaWRlRXhwYW5kUm93OiBmdW5jdGlvbiAocmVjb3JkRXhwYW5kZWQpIHtcblxuICAgICAgICByZWNvcmRFeHBhbmRlZC5oaWRlKCdmYXN0JylcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiDQn9C+0LrQsNC3INC60L7QvdGC0LXQvdGC0LAg0L/QvtC0INGB0YLRgNC+0LrQvtC5XG4gICAgICogQHBhcmFtIHtqUXVlcnl9IHJlY29yZEV4cGFuZGVkXG4gICAgICogQHJldHVybiB7alF1ZXJ5fVxuICAgICAqL1xuICAgIHNob3dFeHBhbmRSb3c6IGZ1bmN0aW9uIChyZWNvcmRFeHBhbmRlZCkge1xuXG4gICAgICAgIHJlY29yZEV4cGFuZGVkLnNob3coJ2Zhc3QnKVxuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqINCj0LTQsNC70LXQvdC40LUg0LrQvtC90YLQtdC90YLQsCDQv9C+0LQg0YHRgtGA0L7QutC+0LlcbiAgICAgKiBAcGFyYW0ge2pRdWVyeX0gcmVjb3JkRXhwYW5kZWRcbiAgICAgKiBAcmV0dXJuIHtqUXVlcnl9XG4gICAgICovXG4gICAgcmVtb3ZlRXhwYW5kUm93OiBmdW5jdGlvbiAocmVjb3JkRXhwYW5kZWQpIHtcblxuICAgICAgICByZWNvcmRFeHBhbmRlZC5oaWRlKCdmYXN0JywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgJCh0aGlzKS5yZW1vdmUoKTtcbiAgICAgICAgfSlcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0LLRi9Cx0YDQsNC90L3Ri9GFINC90LAg0YLQsNCx0LvQuNGG0LUg0Y3Qu9C10LzQtdC90YLQvtCyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRhYmxlSWRcbiAgICAgKiBAcmV0dXJuIHtBcnJheX1cbiAgICAgKi9cbiAgICBnZXRTZWxlY3RlZEluZGV4ZXM6IGZ1bmN0aW9uICh0YWJsZUlkKSB7XG5cbiAgICAgICAgbGV0IGluZGV4ZXMgPSBbXTtcblxuICAgICAgICAkKCcjY29yZXVpLXRhYmxlLScgKyB0YWJsZUlkICsgJyA+IC5jb3JldWktdGFibGVfX2NvbnRhaW5lciA+IC5jb3JldWktdGFibGVfX3dyYXBwZXIgPiB0YWJsZSA+IHRib2R5ID4gdHIuY29yZXVpLXRhYmxlX19yZWNvcmQgPiB0ZC5jb3JldWktdGFibGVfX3NlbGVjdF9jb250YWluZXIgPiAuY29yZXVpLXRhYmxlX19zZWxlY3Q6Y2hlY2tlZCcpXG4gICAgICAgICAgICAuZWFjaChmdW5jdGlvbiAoa2V5LCBlbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgaW5kZXhlcy5wdXNoKCQoZWxlbWVudCkudmFsKCkpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIGluZGV4ZXM7XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INCy0YvQsdGA0LDQvdC90YvRhSDQvdCwINGC0LDQsdC70LjRhtC1INGN0LvQtdC80LXQvdGC0L7QslxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0YWJsZUlkXG4gICAgICogQHJldHVybiB7QXJyYXl9XG4gICAgICovXG4gICAgZ2V0Um93c1N3aXRjaGVzOiBmdW5jdGlvbiAodGFibGVJZCkge1xuXG4gICAgICAgIHJldHVybiAkKCcjY29yZXVpLXRhYmxlLScgKyB0YWJsZUlkICsgJyA+IC5jb3JldWktdGFibGVfX2NvbnRhaW5lciA+IC5jb3JldWktdGFibGVfX3dyYXBwZXIgPiB0YWJsZSA+IHRib2R5ID4gdHIuY29yZXVpLXRhYmxlX19yZWNvcmQgPiB0ZC5jb3JldWktdGFibGVfX3N3aXRjaF9jb250YWluZXInKTtcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0Y3Qu9C10LzQtdC90YLQvtCyINCy0YvQsdC+0YDQsCDRgdGC0YDQvtC6XG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRhYmxlSWRcbiAgICAgKiBAcmV0dXJuIHtBcnJheX1cbiAgICAgKi9cbiAgICBnZXRSb3dzU2VsZWN0czogZnVuY3Rpb24gKHRhYmxlSWQpIHtcblxuICAgICAgICByZXR1cm4gJCgnI2NvcmV1aS10YWJsZS0nICsgdGFibGVJZCArICcgPiAuY29yZXVpLXRhYmxlX19jb250YWluZXIgPiAuY29yZXVpLXRhYmxlX193cmFwcGVyICA+IHRhYmxlID4gdGJvZHkgPiB0ci5jb3JldWktdGFibGVfX3JlY29yZCA+IHRkLmNvcmV1aS10YWJsZV9fc2VsZWN0X2NvbnRhaW5lcicpO1xuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSDRjdC70LXQvNC10L3RgtCwINC00LvRjyDQstGL0LHQvtGA0LAg0LLRgdC10YUg0YHRgtGA0L7QulxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0YWJsZUlkXG4gICAgICogQHJldHVybiB7QXJyYXl9XG4gICAgICovXG4gICAgZ2V0Um93c1NlbGVjdEFsbDogZnVuY3Rpb24gKHRhYmxlSWQpIHtcblxuICAgICAgICByZXR1cm4gJCgnI2NvcmV1aS10YWJsZS0nICsgdGFibGVJZCArICcgPiAuY29yZXVpLXRhYmxlX19jb250YWluZXIgPiAuY29yZXVpLXRhYmxlX193cmFwcGVyICA+IHRhYmxlID4gdGhlYWQgPiB0ciA+IHRkIC5jb3JldWktdGFibGVfX3NlbGVjdC1hbGwnKTtcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0Y3Qu9C10LzQtdC90YLQvtCyINC00LvRjyDRgNCw0YHQutGA0YvRgtC40Y8g0Y/Rh9C10LXQulxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0YWJsZUlkXG4gICAgICogQHJldHVybiB7QXJyYXl9XG4gICAgICovXG4gICAgZ2V0Tm9XcmFwVG9nZ2xlczogZnVuY3Rpb24gKHRhYmxlSWQpIHtcblxuICAgICAgICByZXR1cm4gJCgnI2NvcmV1aS10YWJsZS0nICsgdGFibGVJZCArICcgPiAuY29yZXVpLXRhYmxlX19jb250YWluZXIgPiAuY29yZXVpLXRhYmxlX193cmFwcGVyICA+IHRhYmxlID4gdGJvZHkgPiB0ciA+IHRkLmNvcmV1aV90YWJsZV9fbm8td3JhcCA+IGkudG9nZ2xlJyk7XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICog0JLRi9C00LXQu9C10L3QuNC1INGB0YLRgNC+0LrQuCDQsiDRgtCw0LHQu9C40YbQtVxuICAgICAqIEBwYXJhbSB7alF1ZXJ5fSB0clxuICAgICAqL1xuICAgIHNlbGVjdFRyKHRyKSB7XG5cbiAgICAgICAgdHIuYWRkQ2xhc3MoJ3RhYmxlLXByaW1hcnknKTtcbiAgICAgICAgJCgnLmNvcmV1aS10YWJsZV9fc2VsZWN0JywgdHIpLnByb3AoJ2NoZWNrZWQnLCB0cnVlKTtcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiDQktGL0LTQtdC70LXQvdC40LUg0LLRgdC10YUg0YHRgtGA0L7QuiDQsiDRgtCw0LHQu9C40YbQtVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0YWJsZUlkXG4gICAgICovXG4gICAgc2VsZWN0VHJBbGwodGFibGVJZCkge1xuXG4gICAgICAgIGxldCB0YWJsZUNvbnRhaW5lciA9ICcjY29yZXVpLXRhYmxlLScgKyB0YWJsZUlkICsgJyA+IC5jb3JldWktdGFibGVfX2NvbnRhaW5lciA+IC5jb3JldWktdGFibGVfX3dyYXBwZXIgPiB0YWJsZSc7XG5cbiAgICAgICAgJCh0YWJsZUNvbnRhaW5lciArICcgPiB0aGVhZCA+IHRyID4gdGQgPiAuY29yZXVpLXRhYmxlX19zZWxlY3QtYWxsJykucHJvcCgnY2hlY2tlZCcsIHRydWUpO1xuICAgICAgICAkKHRhYmxlQ29udGFpbmVyICsgJyA+IHRib2R5ID4gdHIuY29yZXVpLXRhYmxlX19yZWNvcmQnKS5hZGRDbGFzcygndGFibGUtcHJpbWFyeScpO1xuICAgICAgICAkKHRhYmxlQ29udGFpbmVyICsgJyA+IHRib2R5ID4gdHIuY29yZXVpLXRhYmxlX19yZWNvcmQgPiB0ZCA+IC5jb3JldWktdGFibGVfX3NlbGVjdCcpLnByb3AoJ2NoZWNrZWQnLCB0cnVlKTtcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiDQodC90Y/RgtC40LUg0LLRi9C00LXQu9C10L3QuNC1INGB0YLRgNC+0LrQuCDQsiDRgtCw0LHQu9C40YbQtVxuICAgICAqIEBwYXJhbSB7alF1ZXJ5fSB0clxuICAgICAqL1xuICAgIHVuc2VsZWN0VHIodHIpIHtcblxuICAgICAgICAkKHRyKS5yZW1vdmVDbGFzcygndGFibGUtcHJpbWFyeScpO1xuICAgICAgICAkKCcuY29yZXVpLXRhYmxlX19zZWxlY3QnLCB0cikucHJvcCgnY2hlY2tlZCcsIGZhbHNlKTtcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiDQodC90Y/RgtC40LUg0LLRi9C00LXQu9C10L3QuNC1INGB0L4g0LLRgdC10YUg0YHRgtGA0L7QuiDQsiDRgtCw0LHQu9C40YbQtVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0YWJsZUlkXG4gICAgICovXG4gICAgdW5zZWxlY3RUckFsbCh0YWJsZUlkKSB7XG5cbiAgICAgICAgbGV0IHRhYmxlQ29udGFpbmVyID0gJyNjb3JldWktdGFibGUtJyArIHRhYmxlSWQgKyAnID4gLmNvcmV1aS10YWJsZV9fY29udGFpbmVyID4gLmNvcmV1aS10YWJsZV9fd3JhcHBlciA+IHRhYmxlJztcblxuICAgICAgICAkKHRhYmxlQ29udGFpbmVyICsgJyA+IHRoZWFkID4gdHIgPiB0ZCA+IC5jb3JldWktdGFibGVfX3NlbGVjdC1hbGwnKS5wcm9wKCdjaGVja2VkJywgZmFsc2UpO1xuICAgICAgICAkKHRhYmxlQ29udGFpbmVyICsgJyA+IHRib2R5ID4gdHIuY29yZXVpLXRhYmxlX19yZWNvcmQnKS5yZW1vdmVDbGFzcygndGFibGUtcHJpbWFyeScpO1xuICAgICAgICAkKHRhYmxlQ29udGFpbmVyICsgJyA+IHRib2R5ID4gdHIuY29yZXVpLXRhYmxlX19yZWNvcmQgPiB0ZC5jb3JldWktdGFibGVfX3NlbGVjdF9jb250YWluZXIgPiAuY29yZXVpLXRhYmxlX19zZWxlY3QnKS5wcm9wKCdjaGVja2VkJywgZmFsc2UpO1xuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqINCk0LjQutGB0LDRhtC40Y8g0LrQvtC70L7QvdC+0Log0YHQu9C10LLQsFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0YWJsZUlkXG4gICAgICovXG4gICAgZml4ZWRDb2xzTGVmdDogZnVuY3Rpb24gKHRhYmxlSWQpIHtcblxuICAgICAgICBsZXQgdGFibGVDb250YWluZXIgPSAnI2NvcmV1aS10YWJsZS0nICsgdGFibGVJZCArICcgPiAuY29yZXVpLXRhYmxlX19jb250YWluZXInO1xuICAgICAgICBsZXQgdGFibGVXcmFwcGVyICAgPSB0YWJsZUNvbnRhaW5lciArICcgPiAuY29yZXVpLXRhYmxlX193cmFwcGVyJztcbiAgICAgICAgbGV0IGNvbE9mZnNldCAgICAgID0gMDtcblxuICAgICAgICAkKHRhYmxlV3JhcHBlciArICcgPiB0YWJsZSA+IHRoZWFkID4gdHI6bGFzdC1jaGlsZCA+IHRkLmNvcmV1aS10YWJsZV9fZml4ZWRfbGVmdCcpLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgbGV0IGluZGV4ID0gJCh0aGlzKS5pbmRleCgpICsgMTtcblxuICAgICAgICAgICAgaWYgKGluZGV4ICE9PSAxKSB7XG4gICAgICAgICAgICAgICAgJCh0YWJsZVdyYXBwZXIgKyAnID4gdGFibGUgPiB0aGVhZCA+IHRyOmxhc3QtY2hpbGQgPiB0ZDpudGgtY2hpbGQoJyArIGluZGV4ICsgJyknKS5jc3MoJ2xlZnQnLCBjb2xPZmZzZXQgKyAncHgnKTtcbiAgICAgICAgICAgICAgICAkKHRhYmxlV3JhcHBlciArICcgPiB0YWJsZSA+IHRib2R5ID4gdHIgPiB0ZDpudGgtY2hpbGQoJyArIGluZGV4ICsgJyknKVxuICAgICAgICAgICAgICAgICAgICAvLy5hZGRDbGFzcygnY29yZXVpLXRhYmxlX19maXhlZF9sZWZ0JylcbiAgICAgICAgICAgICAgICAgICAgLmNzcygnbGVmdCcsIGNvbE9mZnNldCArICdweCcpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb2xPZmZzZXQgKz0gJCh0aGlzKS5vdXRlcldpZHRoKCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChjb2xPZmZzZXQgPiAwKSB7XG4gICAgICAgICAgICAkKHRhYmxlQ29udGFpbmVyKS5hZGRDbGFzcygnZml4ZWQtY29sdW1ucycpO1xuICAgICAgICB9XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICog0KTQuNC60YHQsNGG0LjRjyDQutC+0LvQvtC90L7QuiDRgdC/0YDQsNCy0LBcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGFibGVJZFxuICAgICAqL1xuICAgIGZpeGVkQ29sc1JpZ2h0OiBmdW5jdGlvbiAodGFibGVJZCkge1xuXG4gICAgICAgIGxldCB0YWJsZUNvbnRhaW5lciA9ICcjY29yZXVpLXRhYmxlLScgKyB0YWJsZUlkICsgJyA+IC5jb3JldWktdGFibGVfX2NvbnRhaW5lcic7XG4gICAgICAgIGxldCB0YWJsZVdyYXBwZXIgICA9IHRhYmxlQ29udGFpbmVyICsgJyA+IC5jb3JldWktdGFibGVfX3dyYXBwZXInO1xuICAgICAgICBsZXQgY29sT2Zmc2V0ICAgICAgPSAwO1xuXG4gICAgICAgICQoJCh0YWJsZVdyYXBwZXIgKyAnID4gdGFibGUgPiB0aGVhZCA+IHRyOmxhc3QtY2hpbGQgPiB0ZC5jb3JldWktdGFibGVfX2ZpeGVkX3JpZ2h0JykuZ2V0KCkucmV2ZXJzZSgpKS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGxldCBpbmRleCAgPSAkKHRoaXMpLmluZGV4KCkgKyAxO1xuXG4gICAgICAgICAgICBpZiAoaW5kZXggIT09IDEpIHtcbiAgICAgICAgICAgICAgICAkKHRhYmxlV3JhcHBlciArICcgPiB0YWJsZSA+IHRoZWFkID4gdHI6bGFzdC1jaGlsZCA+IHRkOm50aC1jaGlsZCgnICsgaW5kZXggKyAnKScpLmNzcygncmlnaHQnLCBjb2xPZmZzZXQgKyAncHgnKTtcbiAgICAgICAgICAgICAgICAkKHRhYmxlV3JhcHBlciArICcgPiB0YWJsZSA+IHRib2R5ID4gdHIgPiB0ZDpudGgtY2hpbGQoJyArIGluZGV4ICsgJyknKVxuICAgICAgICAgICAgICAgICAgICAvLy5hZGRDbGFzcygnY29yZXVpLXRhYmxlX19maXhlZF9sZWZ0JylcbiAgICAgICAgICAgICAgICAgICAgLmNzcygncmlnaHQnLCBjb2xPZmZzZXQgKyAncHgnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29sT2Zmc2V0ICs9ICQodGhpcykub3V0ZXJXaWR0aCgpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoY29sT2Zmc2V0ID4gMCkge1xuICAgICAgICAgICAgJCh0YWJsZUNvbnRhaW5lcikuYWRkQ2xhc3MoJ2ZpeGVkLWNvbHVtbnMnKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgVGFibGVFbGVtZW50czsiLCJcbmltcG9ydCBUYWJsZVV0aWxzICAgIGZyb20gXCIuL3RhYmxlLnV0aWxzXCI7XG5pbXBvcnQgVGFibGVFbGVtZW50cyBmcm9tIFwiLi90YWJsZS5lbGVtZW50c1wiO1xuaW1wb3J0IFRhYmxlICAgICAgICAgZnJvbSBcIi4vdGFibGVcIjtcblxuXG5sZXQgVGFibGVQcml2YXRlID0ge1xuXG4gICAgLyoqXG4gICAgICog0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y8g0LrQvtC70L7QvdC+0LpcbiAgICAgKiBAcGFyYW0ge1RhYmxlfSAgICAgICAgIHRhYmxlV3JhcHBlclxuICAgICAqIEBwYXJhbSB7VGFibGVJbnN0YW5jZX0gdGFibGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSAgICAgICAgIGNvbHVtbnNcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIGluaXRDb2x1bW5zKHRhYmxlV3JhcHBlciwgdGFibGUsIGNvbHVtbnMpIHtcblxuICAgICAgICBsZXQgb3B0aW9ucyAgICAgICAgPSB0YWJsZS5nZXRPcHRpb25zKCk7XG4gICAgICAgIGxldCBjb2x1bW5zU3RvcmFnZSA9IG9wdGlvbnMuc2F2ZVN0YXRlICYmIG9wdGlvbnMuaWRcbiAgICAgICAgICAgID8gVGFibGVQcml2YXRlLmdldFN0b3JhZ2VGaWVsZCh0YWJsZS5nZXRJZCgpLCAnY29sdW1ucycpXG4gICAgICAgICAgICA6IG51bGw7XG5cbiAgICAgICAgY29sdW1ucy5tYXAoZnVuY3Rpb24gKGNvbHVtbikge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBjb2x1bW4udHlwZSA9PT0gJ3VuZGVmaW5lZCcgfHxcbiAgICAgICAgICAgICAgICAhIHRhYmxlV3JhcHBlci5jb2x1bW5zLmhhc093blByb3BlcnR5KGNvbHVtbi50eXBlKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgY29sdW1uLnR5cGUgPSAndGV4dCc7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICggISBjb2x1bW4uaGFzT3duUHJvcGVydHkoJ3Nob3cnKSB8fCB0eXBlb2YgY29sdW1uLnNob3cgIT09ICdib29sZWFuJykge1xuICAgICAgICAgICAgICAgIGNvbHVtbi5zaG93ID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGNvbHVtbnNTdG9yYWdlKSB7XG4gICAgICAgICAgICAgICAgJC5lYWNoKGNvbHVtbnNTdG9yYWdlLCBmdW5jdGlvbiAoa2V5MiwgY29sdW1uU3RvcmFnZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoY29sdW1uU3RvcmFnZSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgY29sdW1uU3RvcmFnZS5oYXNPd25Qcm9wZXJ0eSgnZmllbGQnKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgY29sdW1uU3RvcmFnZS5oYXNPd25Qcm9wZXJ0eSgnaXNTaG93JykgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbHVtblN0b3JhZ2UuZmllbGQgPT09IGNvbHVtbi5maWVsZFxuICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbHVtbi5zaG93ID0gISEgY29sdW1uU3RvcmFnZS5pc1Nob3c7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuXG4gICAgICAgICAgICBpZiAoY29sdW1uLmhhc093blByb3BlcnR5KCdmaXhlZCcpICYmIHR5cGVvZiBjb2x1bW4uZml4ZWQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgdGFibGUuX29wdGlvbnMub3ZlcmZsb3cgPSB0cnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsZXQgY29sdW1uSW5zdGFuY2UgPSBuZXcgVGFibGUuY29sdW1uc1tjb2x1bW4udHlwZV0odGFibGUsIGNvbHVtbik7XG4gICAgICAgICAgICB0YWJsZS5fY29sdW1ucy5wdXNoKGNvbHVtbkluc3RhbmNlKTtcblxuICAgICAgICAgICAgaWYgKGNvbHVtbkluc3RhbmNlLmlzU2hvdygpKSB7XG4gICAgICAgICAgICAgICAgdGFibGUuX2NvdW50Q29sdW1uc1Nob3crKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICog0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y8g0L/QvtC40YHQutC+0LLRi9GFINC/0L7Qu9C10LlcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gdGFibGVXcmFwcGVyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHRhYmxlXG4gICAgICogQHBhcmFtIHtBcnJheX0gIHNlYXJjaENvbnRyb2xzXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBpbml0U2VhcmNoOiBmdW5jdGlvbiAodGFibGVXcmFwcGVyLCB0YWJsZSwgc2VhcmNoQ29udHJvbHMpIHtcblxuICAgICAgICBsZXQgb3B0aW9ucyAgICAgID0gdGFibGUuZ2V0T3B0aW9ucygpO1xuICAgICAgICBsZXQgc2VhcmNoVmFsdWVzID0gb3B0aW9ucy5zYXZlU3RhdGUgJiYgb3B0aW9ucy5pZFxuICAgICAgICAgICAgPyBUYWJsZVByaXZhdGUuZ2V0U3RvcmFnZUZpZWxkKHRhYmxlLmdldElkKCksICdzZWFyY2gnKVxuICAgICAgICAgICAgOiBudWxsO1xuXG4gICAgICAgICQuZWFjaChzZWFyY2hDb250cm9scywgZnVuY3Rpb24gKGtleSwgY29udHJvbCkge1xuICAgICAgICAgICAgaWYgKCAhIFRhYmxlVXRpbHMuaXNPYmplY3QoY29udHJvbCkpIHtcbiAgICAgICAgICAgICAgICBjb250cm9sID0ge307XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICggISBjb250cm9sLmhhc093blByb3BlcnR5KCd0eXBlJykgfHxcbiAgICAgICAgICAgICAgICB0eXBlb2YgY29udHJvbC50eXBlICE9PSAnc3RyaW5nJyB8fFxuICAgICAgICAgICAgICAgICEgdGFibGVXcmFwcGVyLnNlYXJjaC5oYXNPd25Qcm9wZXJ0eShjb250cm9sLnR5cGUpXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBjb250cm9sLnR5cGUgPSAndGV4dCc7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChvcHRpb25zLnNhdmVTdGF0ZSAmJiBvcHRpb25zLmlkKSB7XG4gICAgICAgICAgICAgICAgY29udHJvbC52YWx1ZSA9IG51bGw7XG5cbiAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShzZWFyY2hWYWx1ZXMpICYmIGNvbnRyb2wuaGFzT3duUHJvcGVydHkoJ2ZpZWxkJykpIHtcbiAgICAgICAgICAgICAgICAgICAgJC5lYWNoKHNlYXJjaFZhbHVlcywgZnVuY3Rpb24gKGtleSwgc2VhcmNoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoVGFibGVVdGlscy5pc09iamVjdChzZWFyY2gpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VhcmNoLmhhc093blByb3BlcnR5KCdmaWVsZCcpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VhcmNoLmhhc093blByb3BlcnR5KCd2YWx1ZScpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VhcmNoLmZpZWxkICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VhcmNoLmZpZWxkID09PSBjb250cm9sLmZpZWxkXG4gICAgICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sLnZhbHVlID0gc2VhcmNoLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxldCBjb250cm9sSW5zdGFuY2UgPSBuZXcgVGFibGUuc2VhcmNoW2NvbnRyb2wudHlwZV0odGFibGUsIGNvbnRyb2wpO1xuICAgICAgICAgICAgdGFibGUuX3NlYXJjaC5wdXNoKGNvbnRyb2xJbnN0YW5jZSk7XG4gICAgICAgIH0pO1xuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPINC60L7QvdGC0YDQvtC70L7QsiDQuCDRhNC40LvRjNGC0YDQvtCyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHRhYmxlV3JhcHBlclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSB0YWJsZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9ICByb3dzXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHBvc2l0aW9uXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBpbml0Q29udHJvbHM6IGZ1bmN0aW9uICh0YWJsZVdyYXBwZXIsIHRhYmxlLCByb3dzLCBwb3NpdGlvbikge1xuXG4gICAgICAgIGxldCB0aGF0ID0gdGhpcztcblxuICAgICAgICByb3dzLm1hcChmdW5jdGlvbiAocm93KSB7XG5cbiAgICAgICAgICAgIGxldCB0eXBlICAgICAgICAgICA9ICdpbic7XG4gICAgICAgICAgICBsZXQgY29udHJvbHNMZWZ0ICAgPSBbXTtcbiAgICAgICAgICAgIGxldCBjb250cm9sc0NlbnRlciA9IFtdO1xuICAgICAgICAgICAgbGV0IGNvbnRyb2xzUmlnaHQgID0gW107XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2Ygcm93LnR5cGUgPT09ICdzdHJpbmcnICYmXG4gICAgICAgICAgICAgICAgWydpbicsICdvdXQnXS5pbmRleE9mKHJvdy50eXBlLnRvTG93ZXJDYXNlKCkpID49IDBcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIHR5cGUgPSByb3cudHlwZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAocm93Lmhhc093blByb3BlcnR5KCdsZWZ0JykgJiYgQXJyYXkuaXNBcnJheShyb3cubGVmdCkpIHtcbiAgICAgICAgICAgICAgICByb3cubGVmdC5tYXAoZnVuY3Rpb24gKGNvbnRyb2wpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGluc3RhbmNlID0gdGhhdC5pbml0Q29udHJvbCh0YWJsZVdyYXBwZXIsIHRhYmxlLCBjb250cm9sKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoVGFibGVVdGlscy5pc09iamVjdChpbnN0YW5jZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xzTGVmdC5wdXNoKGluc3RhbmNlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAocm93Lmhhc093blByb3BlcnR5KCdjZW50ZXInKSAmJiBBcnJheS5pc0FycmF5KHJvdy5jZW50ZXIpKSB7XG4gICAgICAgICAgICAgICAgcm93LmNlbnRlci5tYXAoZnVuY3Rpb24gKGNvbnRyb2wpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGluc3RhbmNlID0gdGhhdC5pbml0Q29udHJvbCh0YWJsZVdyYXBwZXIsIHRhYmxlLCBjb250cm9sKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoVGFibGVVdGlscy5pc09iamVjdChpbnN0YW5jZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xzQ2VudGVyLnB1c2goaW5zdGFuY2UpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChyb3cuaGFzT3duUHJvcGVydHkoJ3JpZ2h0JykgJiYgQXJyYXkuaXNBcnJheShyb3cucmlnaHQpKSB7XG4gICAgICAgICAgICAgICAgcm93LnJpZ2h0Lm1hcChmdW5jdGlvbiAoY29udHJvbCkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgaW5zdGFuY2UgPSB0aGF0LmluaXRDb250cm9sKHRhYmxlV3JhcHBlciwgdGFibGUsIGNvbnRyb2wpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChUYWJsZVV0aWxzLmlzT2JqZWN0KGluc3RhbmNlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbHNSaWdodC5wdXNoKGluc3RhbmNlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoY29udHJvbHNMZWZ0Lmxlbmd0aCA+IDAgfHwgY29udHJvbHNDZW50ZXIubGVuZ3RoID4gMCB8fCBjb250cm9sc1JpZ2h0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICB0YWJsZS5fY29udHJvbHNQb3NpdGlvbnNbcG9zaXRpb25dLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiB0eXBlLFxuICAgICAgICAgICAgICAgICAgICBsZWZ0OiBjb250cm9sc0xlZnQsXG4gICAgICAgICAgICAgICAgICAgIGNlbnRlcjogY29udHJvbHNDZW50ZXIsXG4gICAgICAgICAgICAgICAgICAgIHJpZ2h0OiBjb250cm9sc1JpZ2h0LFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiDQmNC90LjRhtC40LDQu9C40LfQsNGG0LjRjyDQutC+0L3RgtGA0L7Qu9CwINC40LvQuCDRhNC40LvRjNGC0YDQsFxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSB0YWJsZVdyYXBwZXJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gdGFibGVcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gY29udHJvbFxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgaW5pdENvbnRyb2w6IGZ1bmN0aW9uICh0YWJsZVdyYXBwZXIsIHRhYmxlLCBjb250cm9sKSB7XG5cbiAgICAgICAgbGV0IGluc3RhbmNlID0gbnVsbDtcblxuICAgICAgICBpZiAoVGFibGVVdGlscy5pc09iamVjdChjb250cm9sKSAmJiB0eXBlb2YgY29udHJvbC50eXBlID09PSAnc3RyaW5nJykge1xuXG4gICAgICAgICAgICBpZiAodGFibGVXcmFwcGVyLmNvbnRyb2xzLmhhc093blByb3BlcnR5KGNvbnRyb2wudHlwZSkpIHtcbiAgICAgICAgICAgICAgICBpbnN0YW5jZSA9IG5ldyBUYWJsZS5jb250cm9sc1tjb250cm9sLnR5cGVdKHRhYmxlLCBjb250cm9sKTtcbiAgICAgICAgICAgICAgICB0YWJsZS5fY29udHJvbHMucHVzaChpbnN0YW5jZSk7XG5cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY29udHJvbC50eXBlLmluZGV4T2YoJ2ZpbHRlcjonKSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGxldCBmaWx0ZXJOYW1lID0gY29udHJvbC50eXBlLnN1YnN0cmluZyg3KTtcblxuICAgICAgICAgICAgICAgIGlmICh0YWJsZVdyYXBwZXIuZmlsdGVycy5oYXNPd25Qcm9wZXJ0eShmaWx0ZXJOYW1lKSkge1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChjb250cm9sLmhhc093blByb3BlcnR5KCdmaWVsZCcpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgb3B0aW9ucyA9IHRhYmxlLmdldE9wdGlvbnMoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuc2F2ZVN0YXRlICYmIG9wdGlvbnMuaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgZmlsdGVyVmFsdWVzID0gb3B0aW9ucy5zYXZlU3RhdGUgJiYgb3B0aW9ucy5pZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IFRhYmxlUHJpdmF0ZS5nZXRTdG9yYWdlRmllbGQodGFibGUuZ2V0SWQoKSwgJ2ZpbHRlcnMnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IG51bGw7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sLnZhbHVlID0gbnVsbDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGZpbHRlclZhbHVlcykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJC5lYWNoKGZpbHRlclZhbHVlcywgZnVuY3Rpb24gKGtleSwgZmlsdGVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoVGFibGVVdGlscy5pc09iamVjdChmaWx0ZXIpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsdGVyLmhhc093blByb3BlcnR5KCdmaWVsZCcpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsdGVyLmhhc093blByb3BlcnR5KCd2YWx1ZScpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsdGVyLmZpZWxkICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsdGVyLmZpZWxkID09PSBjb250cm9sLmZpZWxkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sLnZhbHVlID0gZmlsdGVyLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpbnN0YW5jZSA9IG5ldyBUYWJsZS5maWx0ZXJzW2ZpbHRlck5hbWVdKHRhYmxlLCBjb250cm9sKTtcbiAgICAgICAgICAgICAgICAgICAgdGFibGUuX2ZpbHRlcnMucHVzaChpbnN0YW5jZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGluc3RhbmNlO1xuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPINGB0L7RgNGC0LjRgNC+0LLQutC4XG4gICAgICogQHBhcmFtIHtPYmplY3R9IHRhYmxlXG4gICAgICogQHBhcmFtIHtBcnJheX0gc29ydFxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgaW5pdFNvcnQ6IGZ1bmN0aW9uICh0YWJsZSwgc29ydCkge1xuXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHNvcnQpICYmIHNvcnQubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgJC5lYWNoKHNvcnQsIGZ1bmN0aW9uIChrZXksIHNvcnRGaWVsZCkge1xuXG4gICAgICAgICAgICAgICAgaWYgKFRhYmxlVXRpbHMuaXNPYmplY3Qoc29ydEZpZWxkKSAmJlxuICAgICAgICAgICAgICAgICAgICBzb3J0RmllbGQuaGFzT3duUHJvcGVydHkoJ2ZpZWxkJykgJiZcbiAgICAgICAgICAgICAgICAgICAgc29ydEZpZWxkLmhhc093blByb3BlcnR5KCdvcmRlcicpICYmXG4gICAgICAgICAgICAgICAgICAgIHR5cGVvZiBzb3J0RmllbGQuZmllbGQgPT09ICdzdHJpbmcnICYmXG4gICAgICAgICAgICAgICAgICAgIHR5cGVvZiBzb3J0RmllbGQub3JkZXIgPT09ICdzdHJpbmcnICYmXG4gICAgICAgICAgICAgICAgICAgIHNvcnRGaWVsZC5maWVsZCAmJlxuICAgICAgICAgICAgICAgICAgICBzb3J0RmllbGQub3JkZXIgJiZcbiAgICAgICAgICAgICAgICAgICAgWydhc2MnLCAnZGVzYyddLmluZGV4T2Yoc29ydEZpZWxkLm9yZGVyKSA+PSAwXG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgIHRhYmxlLl9zb3J0LnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgZmllbGQ6IHNvcnRGaWVsZC5maWVsZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9yZGVyOiBzb3J0RmllbGQub3JkZXJcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiDQn9C+0LjRgdC6INC/0L4g0LTQsNC90L3Ri9C8INGC0LDQsdC70LjRhtGLXG4gICAgICogQHBhcmFtIHtvYmplY3R9IHRhYmxlXG4gICAgICovXG4gICAgc2VhcmNoTG9jYWxSZWNvcmRzOiBmdW5jdGlvbiAodGFibGUpIHtcblxuICAgICAgICBsZXQgc2VhcmNoRGF0YSAgICAgPSB0YWJsZS5nZXRTZWFyY2hEYXRhKHRydWUpO1xuICAgICAgICBsZXQgZmlsdGVyRGF0YSAgICAgPSB0YWJsZS5nZXRGaWx0ZXJEYXRhKHRydWUpO1xuICAgICAgICBsZXQgY29sdW1uc09wdGlvbnMgPSB7fTtcblxuICAgICAgICB0YWJsZS5fY29sdW1ucy5tYXAoZnVuY3Rpb24gKGNvbHVtbikge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBjb2x1bW4uY29udmVydFRvU3RyaW5nID09PSAnZnVuY3Rpb24nICYmXG4gICAgICAgICAgICAgICAgdHlwZW9mIGNvbHVtbi5nZXRGaWVsZCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgbGV0IGZpZWxkID0gY29sdW1uLmdldEZpZWxkKClcbiAgICAgICAgICAgICAgICBpZiAoZmllbGQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29sdW1uc09wdGlvbnNbZmllbGRdID0ge307XG4gICAgICAgICAgICAgICAgICAgIGNvbHVtbnNPcHRpb25zW2ZpZWxkXS5jb252ZXJ0VG9TdHJpbmcgPSBjb2x1bW4uY29udmVydFRvU3RyaW5nO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cblxuICAgICAgICB0YWJsZS5fcmVjb3Jkcy5tYXAoZnVuY3Rpb24gKHJlY29yZCkge1xuICAgICAgICAgICAgbGV0IGlzU2hvdyA9IHRydWU7XG5cbiAgICAgICAgICAgIGlmIChzZWFyY2hEYXRhLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBpc1Nob3cgPSBUYWJsZVByaXZhdGUuaXNGaWx0ZXJlZFJlY29yZChzZWFyY2hEYXRhLCByZWNvcmQuZGF0YSwgY29sdW1uc09wdGlvbnMpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoaXNTaG93ICYmIGZpbHRlckRhdGEubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGlzU2hvdyA9IFRhYmxlUHJpdmF0ZS5pc0ZpbHRlcmVkUmVjb3JkKGZpbHRlckRhdGEsIHJlY29yZC5kYXRhLCBjb2x1bW5zT3B0aW9ucyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJlY29yZC5zaG93ID0gaXNTaG93O1xuICAgICAgICB9KTtcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiDQo9GB0YLQsNC90L7QstC60LAg0LfQsNC/0LjRgdC10LlcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gdGFibGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSAgcmVjb3Jkc1xuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgc2V0UmVjb3JkczogZnVuY3Rpb24gKHRhYmxlLCByZWNvcmRzKSB7XG5cbiAgICAgICAgdGFibGUuX3JlY29yZHNJbmRleCA9IDE7XG4gICAgICAgIHRhYmxlLl9yZWNvcmRzICAgICAgPSBbXTtcblxuICAgICAgICBsZXQgdGhhdCA9IHRoaXM7XG5cbiAgICAgICAgJC5lYWNoKHJlY29yZHMsIGZ1bmN0aW9uIChrZXksIHJlY29yZCkge1xuXG4gICAgICAgICAgICB0aGF0LmFkZFJlY29yZCh0YWJsZSwgcmVjb3JkKTtcbiAgICAgICAgfSk7XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICog0JTQvtCx0LDQstC70LXQvdC40LUg0L3QvtCy0L7QuSDQt9Cw0L/QuNGB0LhcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gdGFibGVcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gZGF0YVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBhZnRlckluZGV4XG4gICAgICogQHJldHVybiB7b2JqZWN0fG51bGx9XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBhZGRSZWNvcmQ6IGZ1bmN0aW9uICh0YWJsZSwgZGF0YSwgYWZ0ZXJJbmRleCkge1xuXG4gICAgICAgIGlmIChUYWJsZVV0aWxzLmlzT2JqZWN0KGRhdGEpKSB7XG4gICAgICAgICAgICBkYXRhID0gJC5leHRlbmQodHJ1ZSwge30sIGRhdGEpO1xuXG4gICAgICAgICAgICBsZXQgbWV0YSA9IGRhdGEuaGFzT3duUHJvcGVydHkoJ19tZXRhJykgJiYgVGFibGVVdGlscy5pc09iamVjdChkYXRhLl9tZXRhKVxuICAgICAgICAgICAgICAgID8gZGF0YS5fbWV0YVxuICAgICAgICAgICAgICAgIDogbnVsbDtcblxuICAgICAgICAgICAgaWYgKG1ldGEpIHtcbiAgICAgICAgICAgICAgICBkZWxldGUgZGF0YS5fbWV0YTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbGV0IHJlY29yZCA9IHtcbiAgICAgICAgICAgICAgICBpbmRleDogdGFibGUuX3JlY29yZHNJbmRleCsrLFxuICAgICAgICAgICAgICAgIGRhdGE6IGRhdGEsXG4gICAgICAgICAgICAgICAgZmllbGRzOiB7fSxcbiAgICAgICAgICAgICAgICBzaG93OiB0cnVlLFxuICAgICAgICAgICAgICAgIG1ldGE6IG1ldGEsXG4gICAgICAgICAgICAgICAgc2VxOiB0YWJsZS5fc2VxKyssXG4gICAgICAgICAgICB9O1xuXG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgYWZ0ZXJJbmRleCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgICAgICBpZiAoYWZ0ZXJJbmRleCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICB0YWJsZS5fcmVjb3Jkcy5zcGxpY2UoMCwgMCwgcmVjb3JkKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlY29yZDtcblxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBpbmRleCA9IG51bGw7XG5cbiAgICAgICAgICAgICAgICAgICAgJC5lYWNoKHRhYmxlLl9yZWNvcmRzLCBmdW5jdGlvbiAoa2V5LCByZWNvcmQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhZnRlckluZGV4ID09PSByZWNvcmQuaW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRleCA9IGtleTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChpbmRleCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGFibGUuX3JlY29yZHMuc3BsaWNlKGluZGV4LCAwLCByZWNvcmQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlY29yZDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0YWJsZS5fcmVjb3Jkcy5wdXNoKHJlY29yZCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlY29yZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG5cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICog0JTQvtCx0LDQstC70LXQvdC40LUg0L3QvtCy0L7QuSDQt9Cw0L/QuNGB0Lgg0L/QtdGA0LXQtCDRg9C60LDQt9Cw0L3QvdC+0LlcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gdGFibGVcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gZGF0YVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleFxuICAgICAqIEByZXR1cm4ge29iamVjdHxudWxsfVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgYWRkUmVjb3JkQmVmb3JlOiBmdW5jdGlvbiAodGFibGUsIGRhdGEsIGluZGV4KSB7XG5cbiAgICAgICAgaWYgKFRhYmxlVXRpbHMuaXNPYmplY3QoZGF0YSkgJiYgdHlwZW9mIGluZGV4ID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgZGF0YSA9ICQuZXh0ZW5kKHRydWUsIHt9LCBkYXRhKTtcblxuICAgICAgICAgICAgbGV0IG1ldGEgPSBkYXRhLmhhc093blByb3BlcnR5KCdfbWV0YScpICYmIFRhYmxlVXRpbHMuaXNPYmplY3QoZGF0YS5fbWV0YSlcbiAgICAgICAgICAgICAgICA/IGRhdGEuX21ldGFcbiAgICAgICAgICAgICAgICA6IG51bGw7XG5cbiAgICAgICAgICAgIGlmIChtZXRhKSB7XG4gICAgICAgICAgICAgICAgZGVsZXRlIGRhdGEuX21ldGE7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxldCByZWNvcmQgPSB7XG4gICAgICAgICAgICAgICAgaW5kZXg6IHRhYmxlLl9yZWNvcmRzSW5kZXgrKyxcbiAgICAgICAgICAgICAgICBkYXRhOiBkYXRhLFxuICAgICAgICAgICAgICAgIHNob3c6IHRydWUsXG4gICAgICAgICAgICAgICAgbWV0YTogbWV0YSxcbiAgICAgICAgICAgICAgICBzZXE6IHRhYmxlLl9zZXErKyxcbiAgICAgICAgICAgIH07XG5cblxuICAgICAgICAgICAgbGV0IGlzc2V0S2V5ICA9IGZhbHNlO1xuICAgICAgICAgICAgbGV0IGtleUJlZm9yZSA9IG51bGw7XG5cbiAgICAgICAgICAgICQuZWFjaCh0YWJsZS5fcmVjb3JkcywgZnVuY3Rpb24gKGtleSwgcmVjb3JkKSB7XG4gICAgICAgICAgICAgICAgaWYgKGluZGV4ID09PSByZWNvcmQuaW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgaXNzZXRLZXkgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAga2V5QmVmb3JlID0ga2V5O1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGlmIChpc3NldEtleSAmJiBrZXlCZWZvcmUpIHtcbiAgICAgICAgICAgICAgICB0YWJsZS5fcmVjb3Jkcy5zcGxpY2Uoa2V5QmVmb3JlLCAwLCByZWNvcmQpO1xuICAgICAgICAgICAgICAgIHJldHVybiByZWNvcmQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqINCf0YDQvtCy0LXRgNC60LAg0L/QvtC00YXQvtC00LjRgiDQu9C4INC30LDQv9C40YHRjCDQv9C+0LQg0L/QvtC40YHQutC+0LLRi9C1INC00LDQvdC90YvQtVxuICAgICAqIEBwYXJhbSB7QXJyYXl9ICBmaWx0ZXJzXG4gICAgICogQHBhcmFtIHtvYmplY3R9IHJlY29yZERhdGFcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gY29sdW1uc09wdGlvbnNcbiAgICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgaXNGaWx0ZXJlZFJlY29yZDogZnVuY3Rpb24gKGZpbHRlcnMsIHJlY29yZERhdGEsIGNvbHVtbnNPcHRpb25zKSB7XG5cbiAgICAgICAgbGV0IGlzU2hvdyA9IHRydWU7XG4gICAgICAgICQuZWFjaChmaWx0ZXJzLCBmdW5jdGlvbiAoa2V5LCBmaWx0ZXIpIHtcblxuICAgICAgICAgICAgbGV0IGZpZWxkVmFsdWUgPSBudWxsO1xuXG4gICAgICAgICAgICBpZiAocmVjb3JkRGF0YS5oYXNPd25Qcm9wZXJ0eShmaWx0ZXIuZmllbGQpICYmIHJlY29yZERhdGFbZmlsdGVyLmZpZWxkXSkge1xuICAgICAgICAgICAgICAgIGlmIChjb2x1bW5zT3B0aW9ucyAmJlxuICAgICAgICAgICAgICAgICAgICBjb2x1bW5zT3B0aW9ucy5oYXNPd25Qcm9wZXJ0eShmaWx0ZXIuZmllbGQpICYmXG4gICAgICAgICAgICAgICAgICAgIHR5cGVvZiBjb2x1bW5zT3B0aW9uc1tmaWx0ZXIuZmllbGRdLmNvbnZlcnRUb1N0cmluZyA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICBmaWVsZFZhbHVlID0gY29sdW1uc09wdGlvbnNbZmlsdGVyLmZpZWxkXS5jb252ZXJ0VG9TdHJpbmcocmVjb3JkRGF0YVtmaWx0ZXIuZmllbGRdKTtcblxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHJlY29yZERhdGFbZmlsdGVyLmZpZWxkXSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICAgICAgZmllbGRWYWx1ZSA9IHJlY29yZERhdGFbZmlsdGVyLmZpZWxkXTtcblxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHJlY29yZERhdGFbZmlsdGVyLmZpZWxkXSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgICAgICAgICAgZmllbGRWYWx1ZSA9IFN0cmluZyhyZWNvcmREYXRhW2ZpbHRlci5maWVsZF0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuXG4gICAgICAgICAgICBpZiAoZmllbGRWYWx1ZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGlmICggISBmaWx0ZXIuZmlsdGVyKGZpZWxkVmFsdWUsIGZpbHRlci52YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgaXNTaG93ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaXNTaG93ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gaXNTaG93O1xuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqINCS0YvQv9C+0LvQvdC10L3QuNGPINC30LDRgNC10LPQuNGB0YLRgNC40YDQvtCy0LDQvdC90YvRhSDRhNGD0L3QutGG0LjQuSDQsiDRg9C60LDQt9Cw0L3QvdC+0Lwg0YHQvtCx0YvRgtC40LhcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gdGFibGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9ICBwYXJhbXNcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF90cmlnZ2VyOiBmdW5jdGlvbih0YWJsZSwgbmFtZSwgcGFyYW1zKSB7XG5cbiAgICAgICAgcGFyYW1zID0gcGFyYW1zIHx8IFtdO1xuXG4gICAgICAgIGlmICh0YWJsZS5fZXZlbnRzLmhhc093blByb3BlcnR5KG5hbWUpICYmIHRhYmxlLl9ldmVudHNbbmFtZV0ubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0YWJsZS5fZXZlbnRzW25hbWVdLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgbGV0IGNhbGxiYWNrID0gdGFibGUuX2V2ZW50c1tuYW1lXVtpXS5jYWxsYmFjaztcbiAgICAgICAgICAgICAgICBsZXQgY29udGV4dCAgPSB0YWJsZS5fZXZlbnRzW25hbWVdW2ldLmNvbnRleHQgPyB0YWJsZS5fZXZlbnRzW25hbWVdW2ldLmNvbnRleHQgOiB0YWJsZTtcblxuICAgICAgICAgICAgICAgIGNhbGxiYWNrLmFwcGx5KGNvbnRleHQsIHBhcmFtcylcblxuICAgICAgICAgICAgICAgIGlmICh0YWJsZS5fZXZlbnRzW25hbWVdW2ldLnNpbmdsZUV4ZWMpIHtcbiAgICAgICAgICAgICAgICAgICAgdGFibGUuX2V2ZW50c1tuYW1lXS5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICAgICAgICAgIGktLTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiDQodC+0YDRgtC40YDQvtCy0LrQsCDQt9Cw0L/QuNGB0LXQuSDQv9C+IHNlcVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHJlY29yZHNcbiAgICAgKiBAcmV0dXJuIHsqfVxuICAgICAqL1xuICAgIHNvcnRSZWNvcmRzQnlTZXE6IGZ1bmN0aW9uIChyZWNvcmRzKSB7XG5cbiAgICAgICAgcmV0dXJuIHJlY29yZHMuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICAgICAgcmV0dXJuIGEuc2VxIC0gYi5zZXE7XG4gICAgICAgIH0pO1xuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqINCh0L7RgNGC0LjRgNC+0LLQutCwINC30LDQv9C40YHQtdC5INC/0L4g0YPQutCw0LfQsNC90L3Ri9C8INC/0L7Qu9GP0LxcbiAgICAgKiBAcGFyYW0ge0FycmF5fSAgcmVjb3Jkc1xuICAgICAqIEBwYXJhbSB7QXJyYXl9ICBmaWVsZHNcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gY29sdW1uc0NvbnZlcnRlcnNcbiAgICAgKi9cbiAgICBzb3J0UmVjb3Jkc0J5RmllbGRzOiBmdW5jdGlvbiAocmVjb3JkcywgZmllbGRzLCBjb2x1bW5zQ29udmVydGVycykge1xuXG4gICAgICAgIHJldHVybiByZWNvcmRzLnNvcnQoZnVuY3Rpb24oYSwgYikge1xuXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZpZWxkcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGxldCBpc3NldEFGaWVsZCA9IGEuZGF0YS5oYXNPd25Qcm9wZXJ0eShmaWVsZHNbaV0uZmllbGQpO1xuICAgICAgICAgICAgICAgIGxldCBpc3NldEJGaWVsZCA9IGIuZGF0YS5oYXNPd25Qcm9wZXJ0eShmaWVsZHNbaV0uZmllbGQpO1xuXG4gICAgICAgICAgICAgICAgaWYgKCAhIGlzc2V0QUZpZWxkICYmICEgaXNzZXRCRmllbGQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDA7XG5cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCAhIGlzc2V0QUZpZWxkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAxO1xuXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICggISBpc3NldEJGaWVsZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgbGV0IGFWYWwgPSAnJztcbiAgICAgICAgICAgICAgICBsZXQgYlZhbCA9ICcnO1xuXG4gICAgICAgICAgICAgICAgaWYgKGEuZGF0YS5oYXNPd25Qcm9wZXJ0eShmaWVsZHNbaV0uZmllbGQpICYmIGEuZGF0YVtmaWVsZHNbaV0uZmllbGRdKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjb2x1bW5zQ29udmVydGVycyAmJiBjb2x1bW5zQ29udmVydGVycy5oYXNPd25Qcm9wZXJ0eShmaWVsZHNbaV0uZmllbGQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhVmFsID0gY29sdW1uc0NvbnZlcnRlcnNbZmllbGRzW2ldLmZpZWxkXShhLmRhdGFbZmllbGRzW2ldLmZpZWxkXSk7XG5cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiBhLmRhdGFbZmllbGRzW2ldLmZpZWxkXSkgPj0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYVZhbCA9IFN0cmluZyhhLmRhdGFbZmllbGRzW2ldLmZpZWxkXSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoYi5kYXRhLmhhc093blByb3BlcnR5KGZpZWxkc1tpXS5maWVsZCkgJiYgYi5kYXRhW2ZpZWxkc1tpXS5maWVsZF0pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbHVtbnNDb252ZXJ0ZXJzICYmIGNvbHVtbnNDb252ZXJ0ZXJzLmhhc093blByb3BlcnR5KGZpZWxkc1tpXS5maWVsZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJWYWwgPSBjb2x1bW5zQ29udmVydGVyc1tmaWVsZHNbaV0uZmllbGRdKGIuZGF0YVtmaWVsZHNbaV0uZmllbGRdKTtcblxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIGIuZGF0YVtmaWVsZHNbaV0uZmllbGRdKSA+PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBiVmFsID0gU3RyaW5nKGIuZGF0YVtmaWVsZHNbaV0uZmllbGRdKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChhVmFsID09PSBudWxsIHx8IGFWYWwgPT09IHVuZGVmaW5lZCB8fCB0eXBlb2YgYVZhbCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGFWYWwgPSAnJztcblxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGFWYWwgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgICAgIGFWYWwgPSBKU09OLnN0cmluZ2lmeShhVmFsKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoYlZhbCA9PT0gbnVsbCB8fCBiVmFsID09PSB1bmRlZmluZWQgfHwgdHlwZW9mIGJWYWwgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgICAgICAgICBiVmFsID0gJyc7XG5cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBiVmFsID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgICAgICBiVmFsID0gSlNPTi5zdHJpbmdpZnkoYlZhbCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgbGV0IHZhbCA9IGFWYWwgPCBiVmFsXG4gICAgICAgICAgICAgICAgICAgID8gLTFcbiAgICAgICAgICAgICAgICAgICAgOiAoYVZhbCA+IGJWYWwgPyAxIDogMCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoZmllbGRzW2ldLm9yZGVyID09PSBcImRlc2NcIikge1xuICAgICAgICAgICAgICAgICAgICB2YWwgPSB2YWwgKiAtMTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAodmFsICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqINCj0YHRgtCw0L3QvtCy0LrQsCDRgdC+0YDRgtC40YDQvtCy0LrQuCDQtNC70Y8g0YPQutCw0LfQsNC90L3Ri9GFINC60L7Qu9C+0L3QvtC6XG4gICAgICogQHBhcmFtIHtvYmplY3R9IHRhYmxlXG4gICAgICogQHBhcmFtIHtBcnJheX0gIHNvcnRcbiAgICAgKi9cbiAgICBzZXRDb2x1bW5zU29ydDogZnVuY3Rpb24gKHRhYmxlLCBzb3J0KSB7XG5cbiAgICAgICAgbGV0IHRoZWFkID0gVGFibGVFbGVtZW50cy5nZXRUYWJsZVRoZWFkKHRhYmxlLmdldElkKCkpO1xuXG4gICAgICAgICQuZWFjaCh0YWJsZS5fY29sdW1ucywgZnVuY3Rpb24gKGtleSwgY29sdW1uKSB7XG4gICAgICAgICAgICBsZXQgb3B0aW9ucyA9IGNvbHVtbi5nZXRPcHRpb25zKCk7XG5cbiAgICAgICAgICAgIGlmIChvcHRpb25zLmhhc093blByb3BlcnR5KCdmaWVsZCcpICYmXG4gICAgICAgICAgICAgICAgb3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnc29ydGFibGUnKSAmJlxuICAgICAgICAgICAgICAgIHR5cGVvZiBvcHRpb25zLmZpZWxkID09PSAnc3RyaW5nJyAmJlxuICAgICAgICAgICAgICAgIG9wdGlvbnMuc29ydGFibGVcbiAgICAgICAgICAgICkge1xuXG4gICAgICAgICAgICAgICAgbGV0IHNvcnRDb2x1bW4gPSBudWxsO1xuXG4gICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoc29ydCkpIHtcbiAgICAgICAgICAgICAgICAgICAgJC5lYWNoKHNvcnQsIGZ1bmN0aW9uIChrZXksIHNvcnRJdGVtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoVGFibGVVdGlscy5pc09iamVjdChzb3J0SXRlbSkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3J0SXRlbS5oYXNPd25Qcm9wZXJ0eSgnZmllbGQnKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvcnRJdGVtLmhhc093blByb3BlcnR5KCdvcmRlcicpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIHNvcnRJdGVtLmZpZWxkID09PSAnc3RyaW5nJyAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVvZiBzb3J0SXRlbS5vcmRlciA9PT0gJ3N0cmluZycgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zLmZpZWxkID09PSBzb3J0SXRlbS5maWVsZFxuICAgICAgICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc29ydENvbHVtbiA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmllbGQ6IHNvcnRJdGVtLmZpZWxkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcmRlcjogc29ydEl0ZW0ub3JkZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBsZXQgY29sdW1uRWxlbWVudCA9IHRoZWFkLmZpbmQoJ1tkYXRhLWZpZWxkPVwiJyArIG9wdGlvbnMuZmllbGQgKyAnXCJdJyk7XG4gICAgICAgICAgICAgICAgY29sdW1uRWxlbWVudC5maW5kKCcuY29yZXVpLXRhYmxlX19jb2x1bW4tc29ydCcpLnJlbW92ZSgpO1xuXG4gICAgICAgICAgICAgICAgaWYgKHNvcnRDb2x1bW4gIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNvcnRDb2x1bW4ub3JkZXIgPT09ICdhc2MnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2x1bW5FbGVtZW50LmFwcGVuZCgnPGkgY2xhc3M9XCJjb3JldWktdGFibGVfX2NvbHVtbi1zb3J0IGJpIGJpLXNvcnQtZG93bi1hbHRcIj48L2k+Jyk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2x1bW5FbGVtZW50LmFwcGVuZCgnPGkgY2xhc3M9XCJjb3JldWktdGFibGVfX2NvbHVtbi1zb3J0IGJpIGJpLXNvcnQtZG93blwiPjwvaT4nKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC00LDQvdC90YvRhSDQuNC3INGF0YDQsNC90LjQu9C40YnQsFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0YWJsZUlkXG4gICAgICogQHJldHVybiB7b2JqZWN0fG51bGx9XG4gICAgICovXG4gICAgZ2V0U3RvcmFnZTogZnVuY3Rpb24gKHRhYmxlSWQpIHtcblxuICAgICAgICBsZXQgc3RvcmFnZSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdjb3JldWlfdGFibGUnKTtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBzdG9yYWdlID09PSAnc3RyaW5nJyAmJiBzdG9yYWdlKSB7XG4gICAgICAgICAgICAgICAgc3RvcmFnZSA9IEpTT04ucGFyc2Uoc3RvcmFnZSk7XG5cbiAgICAgICAgICAgICAgICBpZiAoVGFibGVVdGlscy5pc09iamVjdChzdG9yYWdlKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGFibGVJZCAmJiB0eXBlb2YgdGFibGVJZCA9PT0gJ3N0cmluZydcbiAgICAgICAgICAgICAgICAgICAgICAgID8gKHN0b3JhZ2UuaGFzT3duUHJvcGVydHkodGFibGVJZCkgPyBzdG9yYWdlW3RhYmxlSWRdIDogbnVsbClcbiAgICAgICAgICAgICAgICAgICAgICAgIDogc3RvcmFnZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICog0KHQvtGF0YDQsNC90LXQvdC40LUg0LTQsNC90L3Ri9GFINCyINGF0YDQsNC90LjQu9C40YnQtVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSAgICAgIHRhYmxlSWRcbiAgICAgKiBAcGFyYW0ge29iamVjdHxudWxsfSBzdG9yYWdlXG4gICAgICovXG4gICAgc2V0U3RvcmFnZTogZnVuY3Rpb24gKHRhYmxlSWQsIHN0b3JhZ2UpIHtcblxuICAgICAgICBpZiAodHlwZW9mIHRhYmxlSWQgIT09ICdzdHJpbmcnIHx8ICEgdGFibGVJZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHN0b3JhZ2VBbGwgPSB0aGlzLmdldFN0b3JhZ2UoKTtcblxuICAgICAgICBpZiAoVGFibGVVdGlscy5pc09iamVjdChzdG9yYWdlQWxsKSkge1xuICAgICAgICAgICAgaWYgKHN0b3JhZ2VBbGwuaGFzT3duUHJvcGVydHkodGFibGVJZCkpIHtcbiAgICAgICAgICAgICAgICBpZiAoc3RvcmFnZSkge1xuICAgICAgICAgICAgICAgICAgICBzdG9yYWdlQWxsW3RhYmxlSWRdID0gc3RvcmFnZTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgc3RvcmFnZUFsbFt0YWJsZUlkXTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc3RvcmFnZSkge1xuICAgICAgICAgICAgICAgIHN0b3JhZ2VBbGxbdGFibGVJZF0gPSBzdG9yYWdlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2NvcmV1aV90YWJsZScsIEpTT04uc3RyaW5naWZ5KHN0b3JhZ2VBbGwgfHwge30pKTtcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0L/QvtC70Y8g0LjQtyDRhdGA0LDQvdC40LvQuNGJ0LBcbiAgICAgKiBAcGFyYW0gdGFibGVJZFxuICAgICAqIEBwYXJhbSBmaWVsZFxuICAgICAqIEByZXR1cm4geyp8bnVsbH1cbiAgICAgKi9cbiAgICBnZXRTdG9yYWdlRmllbGQ6IGZ1bmN0aW9uICh0YWJsZUlkLCBmaWVsZCkge1xuXG4gICAgICAgIGxldCBzdG9yYWdlID0gdGhpcy5nZXRTdG9yYWdlKHRhYmxlSWQpIHx8IHt9O1xuXG4gICAgICAgIHJldHVybiBzdG9yYWdlLmhhc093blByb3BlcnR5KGZpZWxkKVxuICAgICAgICAgICAgPyBzdG9yYWdlW2ZpZWxkXVxuICAgICAgICAgICAgOiBudWxsO1xuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqINCh0L7RhdGA0LDQvdC10L3QuNC1INC/0L7Qu9GPINCyINGF0YDQsNC90LjQu9C40YnQtVxuICAgICAqIEBwYXJhbSB0YWJsZUlkXG4gICAgICogQHBhcmFtIGZpZWxkXG4gICAgICogQHBhcmFtIGRhdGFcbiAgICAgKi9cbiAgICBzZXRTdG9yYWdlRmllbGQ6IGZ1bmN0aW9uICh0YWJsZUlkLCBmaWVsZCwgZGF0YSkge1xuXG4gICAgICAgIGxldCBzdG9yYWdlID0gdGhpcy5nZXRTdG9yYWdlKHRhYmxlSWQpIHx8IHt9O1xuXG4gICAgICAgIGlmIChkYXRhID09PSBudWxsKSB7XG4gICAgICAgICAgICBpZiAoc3RvcmFnZS5oYXNPd25Qcm9wZXJ0eShmaWVsZCkpIHtcbiAgICAgICAgICAgICAgICBkZWxldGUgc3RvcmFnZVtmaWVsZF07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN0b3JhZ2VbZmllbGRdID0gZGF0YTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc2V0U3RvcmFnZSh0YWJsZUlkLCBzdG9yYWdlKTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFRhYmxlUHJpdmF0ZTsiLCJcbmltcG9ydCBUYWJsZVRwbCAgICAgIGZyb20gJy4vdGFibGUudHBsJztcbmltcG9ydCBUYWJsZVV0aWxzICAgIGZyb20gXCIuL3RhYmxlLnV0aWxzXCI7XG5pbXBvcnQgVGFibGVSZW5kZXIgICBmcm9tIFwiLi90YWJsZS5yZW5kZXJcIjtcbmltcG9ydCBUYWJsZUVsZW1lbnRzIGZyb20gXCIuL3RhYmxlLmVsZW1lbnRzXCI7XG5pbXBvcnQgVGFibGVQcml2YXRlICBmcm9tIFwiLi90YWJsZS5wcml2YXRlXCI7XG5cblxuY2xhc3MgVGFibGVJbnN0YW5jZSB7XG5cbiAgICBfb3B0aW9ucyA9IHtcbiAgICAgICAgaWQ6IG51bGwsXG4gICAgICAgIGNsYXNzOiAnJyxcbiAgICAgICAgcHJpbWFyeUtleTogJ2lkJyxcbiAgICAgICAgbGFuZzogJ2VuJyxcbiAgICAgICAgbGFuZ0l0ZW1zOiB7fSxcbiAgICAgICAgd2lkdGg6IG51bGwsXG4gICAgICAgIG1pbldpZHRoOiBudWxsLFxuICAgICAgICBtYXhXaWR0aDogbnVsbCxcbiAgICAgICAgaGVpZ2h0OiBudWxsLFxuICAgICAgICBtaW5IZWlnaHQ6IG51bGwsXG4gICAgICAgIG5heEhlaWdodDogbnVsbCxcbiAgICAgICAgb3ZlcmZsb3c6IGZhbHNlLFxuICAgICAgICBwYWdlOiAxLFxuICAgICAgICByZWNvcmRzUGVyUGFnZTogMjUsXG4gICAgICAgIHRoZWFkVG9wOiAwLFxuICAgICAgICBzYXZlU3RhdGU6IGZhbHNlLFxuICAgICAgICBub1dyYXA6IGZhbHNlLFxuICAgICAgICBub1dyYXBUb2dnbGU6IGZhbHNlLFxuICAgICAgICBzaG93SGVhZGVyczogdHJ1ZSxcbiAgICAgICAgc2hvd1Njcm9sbFNoYWRvdzogZmFsc2UsXG5cbiAgICAgICAgcmVjb3Jkc1JlcXVlc3Q6IHtcbiAgICAgICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgICAgICB1cmw6IG51bGwsICAvLyAnL21vZC9pbmRleC9vcmRlcnMvP3BhZ2U9W3BhZ2VdJ1xuICAgICAgICB9LFxuXG4gICAgICAgIHJlcXVlc3RQYXJhbXM6IHtcbiAgICAgICAgICAgIHBhZ2U6ICdwYWdlJyxcbiAgICAgICAgICAgIGNvdW50OiAnY291bnQnLFxuICAgICAgICAgICAgc3RhcnQ6ICdzdGFydCcsXG4gICAgICAgICAgICBlbmQ6ICdlbmQnLFxuICAgICAgICAgICAgc29ydDogJ3NvcnQnLFxuICAgICAgICAgICAgc2VhcmNoOiAnc2VhcmNoJ1xuICAgICAgICB9LFxuXG4gICAgICAgIGdyb3VwOiB7XG4gICAgICAgICAgICBmaWVsZDogbnVsbCxcbiAgICAgICAgICAgIGF0dHI6IHt9LFxuICAgICAgICAgICAgcmVuZGVyOiBudWxsXG4gICAgICAgIH0sXG5cbiAgICAgICAgb25DbGljazogbnVsbCxcbiAgICAgICAgb25DbGlja1VybDogbnVsbCxcbiAgICAgICAgc29ydDogW10sXG4gICAgICAgIGhlYWRlcjogW10sXG4gICAgICAgIGZvb3RlcjogW10sXG4gICAgICAgIGNvbHVtbnNIZWFkZXI6IFtdLFxuICAgICAgICBzZWFyY2g6IHtcbiAgICAgICAgICAgIGxhYmVsV2lkdGg6IDIwMCxcbiAgICAgICAgICAgIGNvbnRyb2xzOiBbXSxcbiAgICAgICAgfSxcbiAgICAgICAgY29sdW1uczogW10sXG4gICAgICAgIGNvbHVtbnNGb290ZXI6IFtdLFxuICAgICAgICByZWNvcmRzOiBbXVxuICAgIH07XG5cbiAgICBfaWQgPSAnJztcbiAgICBfcGFnZSA9IDE7XG4gICAgX3JlY29yZHNJbmRleCA9IDE7XG4gICAgX3JlY29yZHNQZXJQYWdlID0gMjU7XG4gICAgX3JlY29yZHNUb3RhbCA9IDA7XG4gICAgX3JlY29yZHNOdW1iZXIgPSAxO1xuICAgIF9zZXEgPSAxO1xuICAgIF9pc1JlY29yZHNSZXF1ZXN0ID0gZmFsc2U7XG4gICAgX2NvdW50Q29sdW1uc1Nob3cgPSAwO1xuXG4gICAgX3JlY29yZHMgPSBbXTtcbiAgICBfc29ydCA9IFtdO1xuICAgIF9jb2x1bW5zID0gW107XG4gICAgX3NlYXJjaCA9IFtdO1xuICAgIF9maWx0ZXJzID0gW107XG4gICAgX2NvbnRyb2xzID0gW107XG4gICAgX2NvbnRyb2xzUG9zaXRpb25zID0ge1xuICAgICAgICBoZWFkZXI6IFtdLFxuICAgICAgICBmb290ZXI6IFtdLFxuICAgIH1cbiAgICBfZXZlbnRzID0ge31cblxuXG4gICAgLyoqXG4gICAgICog0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y9cbiAgICAgKiBAcGFyYW0ge29iamVjdH0gdGFibGVXcmFwcGVyXG4gICAgICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnNcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHRhYmxlV3JhcHBlciwgb3B0aW9ucykge1xuXG4gICAgICAgIHRoaXMuX29wdGlvbnMgPSAkLmV4dGVuZCh0cnVlLCB7fSwgdGhpcy5fb3B0aW9ucywgb3B0aW9ucyk7XG4gICAgICAgIHRoaXMuX2V2ZW50cyAgPSB7fTtcbiAgICAgICAgdGhpcy5faWQgICAgICA9IHRoaXMuX29wdGlvbnMuaGFzT3duUHJvcGVydHkoJ2lkJykgJiYgdHlwZW9mIHRoaXMuX29wdGlvbnMuaWQgPT09ICdzdHJpbmcnICYmIHRoaXMuX29wdGlvbnMuaWRcbiAgICAgICAgICAgID8gdGhpcy5fb3B0aW9ucy5pZFxuICAgICAgICAgICAgOiBUYWJsZVV0aWxzLmhhc2hDb2RlKCk7XG5cbiAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMucGFnZSA+IDApIHtcbiAgICAgICAgICAgIHRoaXMuX3BhZ2UgPSB0aGlzLl9vcHRpb25zLnBhZ2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy5zYXZlU3RhdGUgJiYgdGhpcy5fb3B0aW9ucy5pZCkge1xuICAgICAgICAgICAgbGV0IHBhZ2VTaXplID0gVGFibGVQcml2YXRlLmdldFN0b3JhZ2VGaWVsZCh0aGlzLl9pZCwgJ3BhZ2Vfc2l6ZScpO1xuXG4gICAgICAgICAgICBpZiAoVGFibGVVdGlscy5pc051bWVyaWMocGFnZVNpemUpICYmIHBhZ2VTaXplID4gMCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3JlY29yZHNQZXJQYWdlID0gcGFnZVNpemU7XG5cbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5fb3B0aW9ucy5yZWNvcmRzUGVyUGFnZSA+IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9yZWNvcmRzUGVyUGFnZSA9IHRoaXMuX29wdGlvbnMucmVjb3Jkc1BlclBhZ2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9vcHRpb25zLnJlY29yZHNQZXJQYWdlID4gMCkge1xuICAgICAgICAgICAgdGhpcy5fcmVjb3Jkc1BlclBhZ2UgPSB0aGlzLl9vcHRpb25zLnJlY29yZHNQZXJQYWdlO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5faXNSZWNvcmRzUmVxdWVzdCA9IChcbiAgICAgICAgICAgIHRoaXMuX29wdGlvbnMuaGFzT3duUHJvcGVydHkoJ3JlY29yZHNSZXF1ZXN0JykgJiZcbiAgICAgICAgICAgIChcbiAgICAgICAgICAgICAgICB0eXBlb2YgdGhpcy5fb3B0aW9ucy5yZWNvcmRzUmVxdWVzdCA9PT0gJ2Z1bmN0aW9uJyB8fFxuICAgICAgICAgICAgICAgIChUYWJsZVV0aWxzLmlzT2JqZWN0KHRoaXMuX29wdGlvbnMucmVjb3Jkc1JlcXVlc3QpICYmXG4gICAgICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy5yZWNvcmRzUmVxdWVzdC5oYXNPd25Qcm9wZXJ0eSgndXJsJykgJiZcbiAgICAgICAgICAgICAgICB0eXBlb2YgdGhpcy5fb3B0aW9ucy5yZWNvcmRzUmVxdWVzdC51cmwgPT09ICdzdHJpbmcnICYmXG4gICAgICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy5yZWNvcmRzUmVxdWVzdC51cmwgIT09ICcnICYmXG4gICAgICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy5yZWNvcmRzUmVxdWVzdC51cmwgIT09ICcjJylcbiAgICAgICAgICAgIClcbiAgICAgICAgKTtcblxuICAgICAgICBpZiAodGhpcy5faXNSZWNvcmRzUmVxdWVzdCkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGlzLl9vcHRpb25zLnJlY29yZHNSZXF1ZXN0ID09PSAnb2JqZWN0JyAmJlxuICAgICAgICAgICAgICAgICggISB0aGlzLl9vcHRpb25zLnJlY29yZHNSZXF1ZXN0Lmhhc093blByb3BlcnR5KCdtZXRob2QnKSB8fFxuICAgICAgICAgICAgICAgICB0eXBlb2YgdGhpcy5fb3B0aW9ucy5yZWNvcmRzUmVxdWVzdC5tZXRob2QgIT09ICdzdHJpbmcnKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy5yZWNvcmRzUmVxdWVzdC5tZXRob2QgPSAnR0VUJztcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkodGhpcy5fb3B0aW9ucy5yZWNvcmRzKSkge1xuICAgICAgICAgICAgVGFibGVQcml2YXRlLnNldFJlY29yZHModGhpcywgdGhpcy5fb3B0aW9ucy5yZWNvcmRzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vINCe0YfQuNGB0YLQutCwINC30LDQv9C40YHQtdC5INC/0L7RgdC70LUg0LjQvdC40YbQuNCw0LvQuNC30LDRhtC40LhcbiAgICAgICAgdGhpcy5fb3B0aW9ucy5yZWNvcmRzID0gW107XG5cbiAgICAgICAgLy8g0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y8g0LrQvtC70L7QvdC+0LpcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLl9vcHRpb25zLmNvbHVtbnMgPT09ICdvYmplY3QnICYmXG4gICAgICAgICAgICBBcnJheS5pc0FycmF5KHRoaXMuX29wdGlvbnMuY29sdW1ucykgJiZcbiAgICAgICAgICAgIHRoaXMuX29wdGlvbnMuY29sdW1ucy5sZW5ndGggPiAwXG4gICAgICAgICkge1xuICAgICAgICAgICAgVGFibGVQcml2YXRlLmluaXRDb2x1bW5zKHRhYmxlV3JhcHBlciwgdGhpcywgdGhpcy5fb3B0aW9ucy5jb2x1bW5zKTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgLy8g0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y8g0L/QvtC40YHQutC+0LLRi9GFINC/0L7Qu9C10LlcbiAgICAgICAgaWYgKFRhYmxlVXRpbHMuaXNPYmplY3QodGhpcy5fb3B0aW9ucy5zZWFyY2gpICYmXG4gICAgICAgICAgICB0eXBlb2YgdGhpcy5fb3B0aW9ucy5zZWFyY2guY29udHJvbHMgPT09ICdvYmplY3QnICYmXG4gICAgICAgICAgICBBcnJheS5pc0FycmF5KHRoaXMuX29wdGlvbnMuc2VhcmNoLmNvbnRyb2xzKSAmJlxuICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy5zZWFyY2guY29udHJvbHMubGVuZ3RoID4gMFxuICAgICAgICApIHtcbiAgICAgICAgICAgIFRhYmxlUHJpdmF0ZS5pbml0U2VhcmNoKHRhYmxlV3JhcHBlciwgdGhpcywgdGhpcy5fb3B0aW9ucy5zZWFyY2guY29udHJvbHMpO1xuICAgICAgICB9XG5cblxuICAgICAgICAvLyDQmNC90LjRhtC40LDQu9C40LfQsNGG0LjRjyDQutC+0L3RgtGA0L7Qu9C+0LIg0Lgg0YTQuNC70YzRgtGA0L7QslxuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnaGVhZGVyJykgJiZcbiAgICAgICAgICAgIEFycmF5LmlzQXJyYXkodGhpcy5fb3B0aW9ucy5oZWFkZXIpICYmXG4gICAgICAgICAgICB0aGlzLl9vcHRpb25zLmhlYWRlci5sZW5ndGggPiAwXG4gICAgICAgICkge1xuICAgICAgICAgICAgVGFibGVQcml2YXRlLmluaXRDb250cm9scyh0YWJsZVdyYXBwZXIsIHRoaXMsIHRoaXMuX29wdGlvbnMuaGVhZGVyLCAnaGVhZGVyJyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnZm9vdGVyJykgJiZcbiAgICAgICAgICAgIEFycmF5LmlzQXJyYXkodGhpcy5fb3B0aW9ucy5mb290ZXIpICYmXG4gICAgICAgICAgICB0aGlzLl9vcHRpb25zLmZvb3Rlci5sZW5ndGggPiAwXG4gICAgICAgICkge1xuICAgICAgICAgICAgVGFibGVQcml2YXRlLmluaXRDb250cm9scyh0YWJsZVdyYXBwZXIsIHRoaXMsIHRoaXMuX29wdGlvbnMuZm9vdGVyLCAnZm9vdGVyJyk7XG4gICAgICAgIH1cblxuXG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLnNhdmVTdGF0ZSAmJiB0aGlzLl9vcHRpb25zLmlkKSB7XG5cbiAgICAgICAgICAgIC8vINCf0L7QuNGB0Log0L/QviDRgdC+0YXRgNCw0L3QtdC90L3Ri9C8INC/0L7QuNGB0LrQvtCy0YvQvCDQtNCw0L3QvdGL0LxcbiAgICAgICAgICAgIGlmICggISB0aGlzLl9pc1JlY29yZHNSZXF1ZXN0KSB7XG4gICAgICAgICAgICAgICAgVGFibGVQcml2YXRlLnNlYXJjaExvY2FsUmVjb3Jkcyh0aGlzKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8g0KHQvtGA0YLQuNGA0L7QstC60LBcbiAgICAgICAgICAgIGxldCBzb3J0ID0gVGFibGVQcml2YXRlLmdldFN0b3JhZ2VGaWVsZCh0aGlzLmdldElkKCksICdzb3J0Jyk7XG5cbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHNvcnQpICYmIHNvcnQubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIFRhYmxlUHJpdmF0ZS5pbml0U29ydCh0aGlzLCBzb3J0KTtcblxuICAgICAgICAgICAgICAgIGlmICggISB0aGlzLl9pc1JlY29yZHNSZXF1ZXN0ICYmIHRoaXMuX3JlY29yZHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZWNvcmRzID0gVGFibGVQcml2YXRlLnNvcnRSZWNvcmRzQnlGaWVsZHModGhpcy5fcmVjb3JkcywgdGhpcy5fc29ydCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnc29ydCcpICYmXG4gICAgICAgICAgICAgICAgQXJyYXkuaXNBcnJheSh0aGlzLl9vcHRpb25zLnNvcnQpICYmXG4gICAgICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy5zb3J0Lmxlbmd0aCA+IDBcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIFRhYmxlUHJpdmF0ZS5pbml0U29ydCh0aGlzLCB0aGlzLl9vcHRpb25zLnNvcnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiDQmNC90LjRhtC40LDQu9C40LfQsNGG0LjRjyDRgdC+0LHRi9GC0LjQuSDRgtCw0LHQu9C40YbRi1xuICAgICAqL1xuICAgIGluaXRFdmVudHMoKSB7XG5cbiAgICAgICAgbGV0IHRhYmxlID0gdGhpcztcblxuICAgICAgICAvLyDQn9C+0LrQsNC3INGB0YLRgNC+0LpcbiAgICAgICAgdGhpcy5vbigncmVjb3Jkc19zaG93JywgZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAvLyDQn9C10YDQtdGF0L7QtCDQv9C+INGB0YHRi9C70LrQtVxuICAgICAgICAgICAgaWYgKHR5cGVvZiB0YWJsZS5fb3B0aW9ucy5vbkNsaWNrVXJsID09PSAnc3RyaW5nJyAmJiB0YWJsZS5fb3B0aW9ucy5vbkNsaWNrVXJsKSB7XG4gICAgICAgICAgICAgICAgVGFibGVFbGVtZW50cy5nZXRUclJlY29yZHModGFibGUuZ2V0SWQoKSkuY2xpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgcmVjb3JkS2V5ID0gJCh0aGlzKS5kYXRhKCdyZWNvcmQtaW5kZXgnKTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJlY29yZCAgICA9IHRhYmxlLmdldFJlY29yZEJ5SW5kZXgocmVjb3JkS2V5KTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoICEgcmVjb3JkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBsZXQgdXJsID0gdGFibGUuX29wdGlvbnMub25DbGlja1VybDtcblxuICAgICAgICAgICAgICAgICAgICAkLmVhY2gocmVjb3JkLmRhdGEsIGZ1bmN0aW9uIChmaWVsZCwgdmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBmaWVsZFF1b3RlID0gZmllbGQucmVwbGFjZSgvKFteXFx3XFxkXSkvZywgJ1xcXFwkMScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdXJsID0gdXJsLnJlcGxhY2UoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IFJlZ0V4cCgnXFxcXFsnICsgZmllbGRRdW90ZSArICdcXFxcXScsICdnJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICh1cmwgJiYgdXJsICE9PSAnIycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uLmhyZWYgPSB1cmw7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8g0KHQvtCx0YvRgtC40LUg0L3QsNC20LDRgtC40Y8g0L3QsCDRgdGC0YDQvtC60YNcbiAgICAgICAgICAgIGlmIChbJ2Z1bmN0aW9uJywgJ3N0cmluZyddLmluZGV4T2YodHlwZW9mIHRhYmxlLl9vcHRpb25zLm9uQ2xpY2spKSB7XG5cbiAgICAgICAgICAgICAgICBUYWJsZUVsZW1lbnRzLmdldFRyUmVjb3Jkcyh0YWJsZS5nZXRJZCgpKS5jbGljayhmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJlY29yZEtleSA9ICQodGhpcykuZGF0YSgncmVjb3JkLWluZGV4Jyk7XG4gICAgICAgICAgICAgICAgICAgIGxldCByZWNvcmQgICAgPSB0YWJsZS5nZXRSZWNvcmRCeUluZGV4KHJlY29yZEtleSk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCAhIHJlY29yZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgbGV0IHByb3AgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0YWJsZTogdGFibGUsXG4gICAgICAgICAgICAgICAgICAgICAgICByZWNvcmQ6IHJlY29yZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50OiBldmVudCxcbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHRhYmxlLl9vcHRpb25zLm9uQ2xpY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhYmxlLl9vcHRpb25zLm9uQ2xpY2socHJvcCk7XG5cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdGFibGUuX29wdGlvbnMub25DbGljayA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBmdW5jID0gbmV3IEZ1bmN0aW9uKCdwcm9wJywgdGFibGUuX29wdGlvbnMub25DbGljayk7XG4gICAgICAgICAgICAgICAgICAgICAgICBmdW5jKHByb3ApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vINCg0LDRgdC60YDRi9GC0LjQtSDRgdGC0YDQvtC60LhcbiAgICAgICAgICAgIFRhYmxlRWxlbWVudHMuZ2V0Tm9XcmFwVG9nZ2xlcyh0YWJsZS5nZXRJZCgpKS5jbGljayhmdW5jdGlvbiAoZXZlbnQpIHtcblxuICAgICAgICAgICAgICAgIGV2ZW50LmNhbmNlbEJ1YmJsZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICAgICAgICAgIGxldCBwYXJlbnQgPSAkKHRoaXMpLnBhcmVudCgpO1xuXG4gICAgICAgICAgICAgICAgaWYgKHBhcmVudC5oYXNDbGFzcygnc2hvd24nKSkge1xuICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLnJlbW92ZUNsYXNzKCdiaS1jYXJldC11cC1maWxsJyk7XG4gICAgICAgICAgICAgICAgICAgICQodGhpcykuYWRkQ2xhc3MoJ2JpLWNhcmV0LWRvd24tZmlsbCcpO1xuICAgICAgICAgICAgICAgICAgICBwYXJlbnQucmVtb3ZlQ2xhc3MoJ3Nob3duJyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5yZW1vdmVDbGFzcygnYmktY2FyZXQtZG93bi1maWxsJyk7XG4gICAgICAgICAgICAgICAgICAgICQodGhpcykuYWRkQ2xhc3MoJ2JpLWNhcmV0LXVwLWZpbGwnKTtcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50LmFkZENsYXNzKCdzaG93bicpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyDQpNC40LrRgdCw0YbQuNGPINC60L7Qu9C+0L3QvtC6XG4gICAgICAgICAgICBUYWJsZUVsZW1lbnRzLmZpeGVkQ29sc0xlZnQodGFibGUuZ2V0SWQoKSlcbiAgICAgICAgICAgIFRhYmxlRWxlbWVudHMuZml4ZWRDb2xzUmlnaHQodGFibGUuZ2V0SWQoKSlcbiAgICAgICAgfSk7XG5cblxuICAgICAgICAvLyDQn9C+0LrQsNC3INGC0LDQsdC70LjRhtGLXG4gICAgICAgIHRoaXMub24oJ3RhYmxlX3Nob3cnLCBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgIGxldCBzb3J0YWJsZUNvbHVtbnMgPSBUYWJsZUVsZW1lbnRzLmdldFRhYmxlU29ydGFibGUodGFibGUuZ2V0SWQoKSk7XG4gICAgICAgICAgICBpZiAoc29ydGFibGVDb2x1bW5zWzBdKSB7XG4gICAgICAgICAgICAgICAgc29ydGFibGVDb2x1bW5zLmNsaWNrKGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgZmllbGQgPSAkKHRoaXMpLmRhdGEoJ2ZpZWxkJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGZpZWxkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgc29ydGluZyAgICAgID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgY3VycmVudE9yZGVyID0gbnVsbDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgJC5lYWNoKHRhYmxlLl9zb3J0LCBmdW5jdGlvbiAoa2V5LCBzb3J0RmllbGQpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmaWVsZCA9PT0gc29ydEZpZWxkLmZpZWxkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRPcmRlciA9IHNvcnRGaWVsZC5vcmRlcjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50T3JkZXIgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3J0aW5nLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWVsZDogZmllbGQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9yZGVyOiAnYXNjJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjdXJyZW50T3JkZXIgPT09ICdhc2MnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc29ydGluZy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmllbGQ6IGZpZWxkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcmRlcjogJ2Rlc2MnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzb3J0aW5nLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhYmxlLnNvcnREZWZhdWx0KCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFibGUuc29ydEZpZWxkcyhzb3J0aW5nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgIGlmICh3aW5kb3cuaGFzT3duUHJvcGVydHkoJ2Jvb3RzdHJhcCcpICYmIGJvb3RzdHJhcC5oYXNPd25Qcm9wZXJ0eSgnVG9vbHRpcCcpKSB7XG4gICAgICAgICAgICAgICAgJCgnLmNvcmV1aS10YWJsZV9fY29sdW1uLWRlc2NyaXB0aW9uJywgVGFibGVFbGVtZW50cy5nZXRUYWJsZVRoZWFkKHRhYmxlLmdldElkKCkpKS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgbmV3IGJvb3RzdHJhcC5Ub29sdGlwKHRoaXMpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuXG4gICAgICAgIC8vINCh0L7QsdGL0YLQuNGPINGB0LzQtdC90Ysg0YHQvtGB0YLQvtGP0L3QuNGPXG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLnNhdmVTdGF0ZSAmJiB0aGlzLl9vcHRpb25zLmlkKSB7XG4gICAgICAgICAgICB0aGlzLm9uKCdyZWNvcmRzX3NvcnQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgVGFibGVQcml2YXRlLnNldFN0b3JhZ2VGaWVsZCh0YWJsZS5nZXRJZCgpLCAnc29ydCcsIHRhYmxlLl9zb3J0KTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB0aGlzLm9uKCdzZWFyY2hfY2hhbmdlJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIFRhYmxlUHJpdmF0ZS5zZXRTdG9yYWdlRmllbGQodGFibGUuZ2V0SWQoKSwgJ3NlYXJjaCcsIHRhYmxlLmdldFNlYXJjaERhdGEoKSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdGhpcy5vbignZmlsdGVyc19jaGFuZ2UnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgVGFibGVQcml2YXRlLnNldFN0b3JhZ2VGaWVsZCh0YWJsZS5nZXRJZCgpLCAnZmlsdGVycycsIHRhYmxlLmdldEZpbHRlckRhdGEoKSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdGhpcy5vbigncGFnZV9zaXplX3VwZGF0ZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBUYWJsZVByaXZhdGUuc2V0U3RvcmFnZUZpZWxkKHRhYmxlLmdldElkKCksICdwYWdlX3NpemUnLCB0YWJsZS5fcmVjb3Jkc1BlclBhZ2UpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHRoaXMub24oJ2NvbHVtbnNfY2hhbmdlJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGxldCBjb2x1bW5zID0gW107XG5cbiAgICAgICAgICAgICAgICB0YWJsZS5fY29sdW1ucy5tYXAoZnVuY3Rpb24gKGNvbHVtbikge1xuICAgICAgICAgICAgICAgICAgICBsZXQgY29sdW1uT3B0aW9ucyA9IGNvbHVtbi5nZXRPcHRpb25zKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgY29sdW1ucy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkOiBjb2x1bW5PcHRpb25zLmZpZWxkLFxuICAgICAgICAgICAgICAgICAgICAgICAgaXNTaG93OiBjb2x1bW4uaXNTaG93KCksXG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBUYWJsZVByaXZhdGUuc2V0U3RvcmFnZUZpZWxkKHRhYmxlLmdldElkKCksICdjb2x1bW5zJywgY29sdW1ucyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgVGFibGVQcml2YXRlLl90cmlnZ2VyKHRoaXMsICd0YWJsZV9zaG93JywgWyB0aGlzIF0pO1xuICAgICAgICBUYWJsZVByaXZhdGUuX3RyaWdnZXIodGhpcywgJ2NvbnRhaW5lcl9zaG93Jyk7XG5cbiAgICAgICAgLy8g0JLRi9C30L7QsiDRgdC+0LHRi9GC0LjRjyDQv9C+0LrQsNC30LAg0YHRgtGA0L7QulxuICAgICAgICBpZiAoICEgdGhpcy5faXNSZWNvcmRzUmVxdWVzdCkge1xuICAgICAgICAgICAgVGFibGVQcml2YXRlLl90cmlnZ2VyKHRoaXMsICdyZWNvcmRzX3Nob3cnLCBbIHRoaXMgXSk7XG4gICAgICAgIH1cbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSDQuNC00LXQvdGC0LjRhNC40LrQsNGC0L7RgNCwINGC0LDQsdC70LjRhtGLXG4gICAgICogQHJldHVybnMge3N0cmluZ31cbiAgICAgKi9cbiAgICBnZXRJZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lkO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC+0L/RhtC40Lkg0YLQsNCx0LvQuNGG0YtcbiAgICAgKiBAcmV0dXJucyB7Kn1cbiAgICAgKi9cbiAgICBnZXRPcHRpb25zKCkge1xuXG4gICAgICAgIHJldHVybiAkLmV4dGVuZCh0cnVlLCB7fSwgdGhpcy5fb3B0aW9ucyk7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSBlbGVtZW50XG4gICAgICogQHJldHVybnMgeyp9XG4gICAgICovXG4gICAgcmVuZGVyKGVsZW1lbnQpIHtcblxuICAgICAgICBsZXQgdGhhdCAgICAgICAgPSB0aGlzO1xuICAgICAgICBsZXQgd2lkdGhTaXplcyAgPSBbXTtcbiAgICAgICAgbGV0IGhlaWdodFNpemVzID0gW107XG4gICAgICAgIGxldCBvcHRpb25zICAgICA9IHRoaXMuZ2V0T3B0aW9ucygpO1xuICAgICAgICBsZXQgcmVuZGVyICAgICAgPSB7XG4gICAgICAgICAgICBoZWFkZXJzT3V0OiBbXSxcbiAgICAgICAgICAgIGhlYWRlcnNJbjogW10sXG4gICAgICAgICAgICBmb290ZXJzSW46IFtdLFxuICAgICAgICAgICAgZm9vdGVyc091dDogW11cbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLl9yZWNvcmRzVG90YWwgPSB0aGlzLl9yZWNvcmRzLmxlbmd0aDtcblxuXG4gICAgICAgIGlmIChvcHRpb25zLndpZHRoID4gMCkge1xuICAgICAgICAgICAgbGV0IHVuaXQgPSB0eXBlb2Ygb3B0aW9ucy53aWR0aCA9PT0gJ251bWJlcicgPyAncHgnIDogJyc7XG4gICAgICAgICAgICB3aWR0aFNpemVzLnB1c2goJ3dpZHRoOicgKyBvcHRpb25zLndpZHRoICsgdW5pdCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob3B0aW9ucy5taW5XaWR0aCA+IDApIHtcbiAgICAgICAgICAgIGxldCB1bml0ID0gdHlwZW9mIG9wdGlvbnMubWluV2lkdGggPT09ICdudW1iZXInID8gJ3B4JyA6ICcnO1xuICAgICAgICAgICAgd2lkdGhTaXplcy5wdXNoKCdtaW4td2lkdGg6JyArIG9wdGlvbnMubWluV2lkdGggKyB1bml0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvcHRpb25zLm1heFdpZHRoID4gMCkge1xuICAgICAgICAgICAgbGV0IHVuaXQgPSB0eXBlb2Ygb3B0aW9ucy5tYXhXaWR0aCA9PT0gJ251bWJlcicgPyAncHgnIDogJyc7XG4gICAgICAgICAgICB3aWR0aFNpemVzLnB1c2goJ21heC13aWR0aDonICsgb3B0aW9ucy5tYXhXaWR0aCArIHVuaXQpO1xuXG4gICAgICAgICAgICBvcHRpb25zLm92ZXJmbG93ID0gdHJ1ZTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgaWYgKG9wdGlvbnMuaGVpZ2h0ID4gMCkge1xuICAgICAgICAgICAgbGV0IHVuaXQgPSB0eXBlb2Ygb3B0aW9ucy5oZWlnaHQgPT09ICdudW1iZXInID8gJ3B4JyA6ICcnO1xuICAgICAgICAgICAgaGVpZ2h0U2l6ZXMucHVzaCgnaGVpZ2h0OicgKyBvcHRpb25zLmhlaWdodCArIHVuaXQpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG9wdGlvbnMubWluSGVpZ2h0ID4gMCkge1xuICAgICAgICAgICAgbGV0IHVuaXQgPSB0eXBlb2Ygb3B0aW9ucy5taW5IZWlnaHQgPT09ICdudW1iZXInID8gJ3B4JyA6ICcnO1xuICAgICAgICAgICAgaGVpZ2h0U2l6ZXMucHVzaCgnbWluLWhlaWdodDonICsgb3B0aW9ucy5taW5IZWlnaHQgKyB1bml0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvcHRpb25zLm1heEhlaWdodCA+IDApIHtcbiAgICAgICAgICAgIGxldCB1bml0ID0gdHlwZW9mIG9wdGlvbnMubWF4SGVpZ2h0ID09PSAnbnVtYmVyJyA/ICdweCcgOiAnJztcbiAgICAgICAgICAgIGhlaWdodFNpemVzLnB1c2goJ21heC1oZWlnaHQ6JyArIG9wdGlvbnMubWF4SGVpZ2h0ICsgdW5pdCk7XG5cbiAgICAgICAgICAgIG9wdGlvbnMub3ZlcmZsb3cgPSB0cnVlO1xuICAgICAgICB9XG5cblxuXG4gICAgICAgIC8vINCS0LXRgNGF0L3QuNC1INGN0LvQtdC80LXQvdGC0Ysg0YPQv9GA0LDQstC70LXQvdC40Y9cbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodGhpcy5fY29udHJvbHNQb3NpdGlvbnMuaGVhZGVyKSAmJlxuICAgICAgICAgICAgdGhpcy5fY29udHJvbHNQb3NpdGlvbnMuaGVhZGVyLmxlbmd0aCA+IDBcbiAgICAgICAgKSB7XG4gICAgICAgICAgICB0aGlzLl9jb250cm9sc1Bvc2l0aW9ucy5oZWFkZXIubWFwKGZ1bmN0aW9uIChoZWFkZXIpIHtcbiAgICAgICAgICAgICAgICBsZXQgY29udHJvbHNMZWZ0ICAgPSBbXTtcbiAgICAgICAgICAgICAgICBsZXQgY29udHJvbHNDZW50ZXIgPSBbXTtcbiAgICAgICAgICAgICAgICBsZXQgY29udHJvbHNSaWdodCAgPSBbXTtcblxuICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGhlYWRlci5sZWZ0KSAmJiBoZWFkZXIubGVmdC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGhlYWRlci5sZWZ0Lm1hcChmdW5jdGlvbiAoY29udHJvbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGNvbnRyb2xSZW5kZXIgPSBUYWJsZVJlbmRlci5yZW5kZXJDb250cm9sKHRoYXQsIGNvbnRyb2wpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29udHJvbFJlbmRlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xzTGVmdC5wdXNoKGNvbnRyb2xSZW5kZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShoZWFkZXIuY2VudGVyKSAmJiBoZWFkZXIuY2VudGVyLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgaGVhZGVyLmNlbnRlci5tYXAoZnVuY3Rpb24gKGNvbnRyb2wpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjb250cm9sUmVuZGVyID0gVGFibGVSZW5kZXIucmVuZGVyQ29udHJvbCh0aGF0LCBjb250cm9sKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbnRyb2xSZW5kZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sc0NlbnRlci5wdXNoKGNvbnRyb2xSZW5kZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShoZWFkZXIucmlnaHQpICYmIGhlYWRlci5yaWdodC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGhlYWRlci5yaWdodC5tYXAoZnVuY3Rpb24gKGNvbnRyb2wpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjb250cm9sUmVuZGVyID0gVGFibGVSZW5kZXIucmVuZGVyQ29udHJvbCh0aGF0LCBjb250cm9sKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbnRyb2xSZW5kZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sc1JpZ2h0LnB1c2goY29udHJvbFJlbmRlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChjb250cm9sc0xlZnQubGVuZ3RoID4gMCB8fCBjb250cm9sc0NlbnRlci5sZW5ndGggPiAwIHx8IGNvbnRyb2xzUmlnaHQubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaGVhZGVyLnR5cGUgPT09ICdpbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBoZWFkZXJDb250cm9scyA9ICQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgVGFibGVVdGlscy5yZW5kZXIoVGFibGVUcGxbJ3RhYmxlL2NvbnRyb2xzL2hlYWRlci5odG1sJ10sIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbHNMZWZ0OiBjb250cm9sc0xlZnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xzQ2VudGVyOiBjb250cm9sc0NlbnRlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbHNSaWdodDogY29udHJvbHNSaWdodCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbnRyb2xzTGVmdC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJC5lYWNoKGNvbnRyb2xzTGVmdCwgZnVuY3Rpb24gKGtleSwgY29udHJvbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJDb250cm9scy5maW5kKCcuY29yZXVpLXRhYmxlX19jb250cm9sc19sZWZ0JykuYXBwZW5kKGNvbnRyb2wpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb250cm9sc0NlbnRlci5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJC5lYWNoKGNvbnRyb2xzQ2VudGVyLCBmdW5jdGlvbiAoa2V5LCBjb250cm9sKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlckNvbnRyb2xzLmZpbmQoJy5jb3JldWktdGFibGVfX2NvbnRyb2xzX2NlbnRlcicpLmFwcGVuZChjb250cm9sKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29udHJvbHNSaWdodC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJC5lYWNoKGNvbnRyb2xzUmlnaHQsIGZ1bmN0aW9uIChrZXksIGNvbnRyb2wpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyQ29udHJvbHMuZmluZCgnLmNvcmV1aS10YWJsZV9fY29udHJvbHNfcmlnaHQnKS5hcHBlbmQoY29udHJvbClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVyLmhlYWRlcnNJbi5wdXNoKGhlYWRlckNvbnRyb2xzKTtcblxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGhlYWRlckNvbnRyb2xzID0gJChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBUYWJsZVV0aWxzLnJlbmRlcihUYWJsZVRwbFsndGFibGUvY29udHJvbHMvaGVhZGVyLW91dC5odG1sJ10sIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbHNMZWZ0OiBjb250cm9sc0xlZnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xzQ2VudGVyOiBjb250cm9sc0NlbnRlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbHNSaWdodDogY29udHJvbHNSaWdodCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbnRyb2xzTGVmdC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJC5lYWNoKGNvbnRyb2xzTGVmdCwgZnVuY3Rpb24gKGtleSwgY29udHJvbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJDb250cm9scy5maW5kKCcuY29yZXVpLXRhYmxlX19jb250cm9sc19sZWZ0JykuYXBwZW5kKGNvbnRyb2wpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb250cm9sc0NlbnRlci5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJC5lYWNoKGNvbnRyb2xzQ2VudGVyLCBmdW5jdGlvbiAoa2V5LCBjb250cm9sKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlckNvbnRyb2xzLmZpbmQoJy5jb3JldWktdGFibGVfX2NvbnRyb2xzX2NlbnRlcicpLmFwcGVuZChjb250cm9sKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29udHJvbHNSaWdodC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJC5lYWNoKGNvbnRyb2xzUmlnaHQsIGZ1bmN0aW9uIChrZXksIGNvbnRyb2wpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyQ29udHJvbHMuZmluZCgnLmNvcmV1aS10YWJsZV9fY29udHJvbHNfcmlnaHQnKS5hcHBlbmQoY29udHJvbClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVyLmhlYWRlcnNPdXQucHVzaChoZWFkZXJDb250cm9scyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vINCd0LjQttC90LjQtSDRjdC70LXQvNC10L3RgtGLINGD0L/RgNCw0LLQu9C10L3QuNGPXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHRoaXMuX2NvbnRyb2xzUG9zaXRpb25zLmZvb3RlcikgJiZcbiAgICAgICAgICAgIHRoaXMuX2NvbnRyb2xzUG9zaXRpb25zLmZvb3Rlci5sZW5ndGggPiAwXG4gICAgICAgICkge1xuICAgICAgICAgICAgdGhpcy5fY29udHJvbHNQb3NpdGlvbnMuZm9vdGVyLm1hcChmdW5jdGlvbiAoZm9vdGVyKSB7XG4gICAgICAgICAgICAgICAgbGV0IGNvbnRyb2xzTGVmdCAgID0gW107XG4gICAgICAgICAgICAgICAgbGV0IGNvbnRyb2xzQ2VudGVyID0gW107XG4gICAgICAgICAgICAgICAgbGV0IGNvbnRyb2xzUmlnaHQgID0gW107XG5cbiAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShmb290ZXIubGVmdCkgJiYgZm9vdGVyLmxlZnQubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAkLmVhY2goZm9vdGVyLmxlZnQsIGZ1bmN0aW9uIChrZXksIGNvbnRyb2wpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjb250cm9sUmVuZGVyID0gVGFibGVSZW5kZXIucmVuZGVyQ29udHJvbCh0aGF0LCBjb250cm9sKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbnRyb2xSZW5kZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sc0xlZnQucHVzaChjb250cm9sUmVuZGVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZm9vdGVyLmNlbnRlcikgJiYgZm9vdGVyLmNlbnRlci5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICQuZWFjaChmb290ZXIuY2VudGVyLCBmdW5jdGlvbiAoa2V5LCBjb250cm9sKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgY29udHJvbFJlbmRlciA9IFRhYmxlUmVuZGVyLnJlbmRlckNvbnRyb2wodGhhdCwgY29udHJvbCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb250cm9sUmVuZGVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbHNDZW50ZXIucHVzaChjb250cm9sUmVuZGVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZm9vdGVyLnJpZ2h0KSAmJiBmb290ZXIucmlnaHQubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAkLmVhY2goZm9vdGVyLnJpZ2h0LCBmdW5jdGlvbiAoa2V5LCBjb250cm9sKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgY29udHJvbFJlbmRlciA9IFRhYmxlUmVuZGVyLnJlbmRlckNvbnRyb2wodGhhdCwgY29udHJvbCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb250cm9sUmVuZGVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbHNSaWdodC5wdXNoKGNvbnRyb2xSZW5kZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoY29udHJvbHNMZWZ0Lmxlbmd0aCA+IDAgfHwgY29udHJvbHNDZW50ZXIubGVuZ3RoID4gMCB8fCBjb250cm9sc1JpZ2h0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZvb3Rlci50eXBlID09PSAnaW4nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgZm9vdGVyQ29udHJvbHMgPSAkKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRhYmxlVXRpbHMucmVuZGVyKFRhYmxlVHBsWyd0YWJsZS9jb250cm9scy9mb290ZXIuaHRtbCddLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xzTGVmdDogY29udHJvbHNMZWZ0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sc0NlbnRlcjogY29udHJvbHNDZW50ZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xzUmlnaHQ6IGNvbnRyb2xzUmlnaHQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG5cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbnRyb2xzTGVmdC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJC5lYWNoKGNvbnRyb2xzTGVmdCwgZnVuY3Rpb24gKGtleSwgY29udHJvbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb290ZXJDb250cm9scy5maW5kKCcuY29yZXVpLXRhYmxlX19jb250cm9sc19sZWZ0JykuYXBwZW5kKGNvbnRyb2wpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb250cm9sc0NlbnRlci5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJC5lYWNoKGNvbnRyb2xzQ2VudGVyLCBmdW5jdGlvbiAoa2V5LCBjb250cm9sKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvb3RlckNvbnRyb2xzLmZpbmQoJy5jb3JldWktdGFibGVfX2NvbnRyb2xzX2NlbnRlcicpLmFwcGVuZChjb250cm9sKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29udHJvbHNSaWdodC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJC5lYWNoKGNvbnRyb2xzUmlnaHQsIGZ1bmN0aW9uIChrZXksIGNvbnRyb2wpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9vdGVyQ29udHJvbHMuZmluZCgnLmNvcmV1aS10YWJsZV9fY29udHJvbHNfcmlnaHQnKS5hcHBlbmQoY29udHJvbClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVyLmZvb3RlcnNJbi5wdXNoKGZvb3RlckNvbnRyb2xzKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBmb290ZXJDb250cm9scyA9ICQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgVGFibGVVdGlscy5yZW5kZXIoVGFibGVUcGxbJ3RhYmxlL2NvbnRyb2xzL2Zvb3Rlci1vdXQuaHRtbCddLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xzTGVmdDogY29udHJvbHNMZWZ0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sc0NlbnRlcjogY29udHJvbHNDZW50ZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xzUmlnaHQ6IGNvbnRyb2xzUmlnaHQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG5cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbnRyb2xzTGVmdC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJC5lYWNoKGNvbnRyb2xzTGVmdCwgZnVuY3Rpb24gKGtleSwgY29udHJvbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb290ZXJDb250cm9scy5maW5kKCcuY29yZXVpLXRhYmxlX19jb250cm9sc19sZWZ0JykuYXBwZW5kKGNvbnRyb2wpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb250cm9sc0NlbnRlci5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJC5lYWNoKGNvbnRyb2xzQ2VudGVyLCBmdW5jdGlvbiAoa2V5LCBjb250cm9sKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvb3RlckNvbnRyb2xzLmZpbmQoJy5jb3JldWktdGFibGVfX2NvbnRyb2xzX2NlbnRlcicpLmFwcGVuZChjb250cm9sKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29udHJvbHNSaWdodC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJC5lYWNoKGNvbnRyb2xzUmlnaHQsIGZ1bmN0aW9uIChrZXksIGNvbnRyb2wpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9vdGVyQ29udHJvbHMuZmluZCgnLmNvcmV1aS10YWJsZV9fY29udHJvbHNfcmlnaHQnKS5hcHBlbmQoY29udHJvbClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVyLmZvb3RlcnNPdXQucHVzaChmb290ZXJDb250cm9scyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgLy8g0JfQsNCz0YDRg9C30LrQsCDQt9Cw0L/QuNGB0LXQuVxuICAgICAgICBpZiAodGhpcy5faXNSZWNvcmRzUmVxdWVzdCkge1xuICAgICAgICAgICAgdGhpcy5vbignY29udGFpbmVyX3Nob3cnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zLnJlY29yZHNSZXF1ZXN0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoYXQubG9hZEJ5RnVuY3Rpb24ob3B0aW9ucy5yZWNvcmRzUmVxdWVzdCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhhdC5sb2FkKG9wdGlvbnMucmVjb3Jkc1JlcXVlc3QudXJsLCBvcHRpb25zLnJlY29yZHNSZXF1ZXN0Lm1ldGhvZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuXG4gICAgICAgIGxldCBjbGFzc2VzICAgICAgICA9IFtdO1xuICAgICAgICBsZXQgY2xhc3Nlc1dyYXBwZXIgPSBbXTtcblxuICAgICAgICBpZiAob3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgndGhlbWUnKSAmJlxuICAgICAgICAgICAgdHlwZW9mIG9wdGlvbnMudGhlbWUgPT09ICdzdHJpbmcnICYmXG4gICAgICAgICAgICBvcHRpb25zLnRoZW1lXG4gICAgICAgICkge1xuICAgICAgICAgICAgY2xhc3Nlcy5wdXNoKCdjb3JldWktdGhlbWUtJyArIG9wdGlvbnMudGhlbWUpO1xuICAgICAgICB9XG5cblxuICAgICAgICBpZiAob3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnc2hvd1Njcm9sbFNoYWRvdycpICYmXG4gICAgICAgICAgICB0eXBlb2Ygb3B0aW9ucy5zaG93U2Nyb2xsU2hhZG93ID09PSAnYm9vbGVhbicgJiZcbiAgICAgICAgICAgIG9wdGlvbnMuc2hvd1Njcm9sbFNoYWRvd1xuICAgICAgICApIHtcbiAgICAgICAgICAgIGNsYXNzZXNXcmFwcGVyLnB1c2goJ3RhYmxlLXNjcm9sbC1zaGFkb3cnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvcHRpb25zLmhhc093blByb3BlcnR5KCdvdmVyZmxvdycpICYmXG4gICAgICAgICAgICB0eXBlb2Ygb3B0aW9ucy5vdmVyZmxvdyA9PT0gJ2Jvb2xlYW4nICYmXG4gICAgICAgICAgICBvcHRpb25zLm92ZXJmbG93XG4gICAgICAgICkge1xuICAgICAgICAgICAgY2xhc3Nlc1dyYXBwZXIucHVzaCgnb3ZlcmZsb3cteC1hdXRvJyk7XG4gICAgICAgIH1cblxuXG4gICAgICAgIGxldCB0YWJsZUVsZW1lbnQgICAgID0gVGFibGVSZW5kZXIucmVuZGVyVGFibGUodGhpcyk7XG4gICAgICAgIGxldCBjb250YWluZXJFbGVtZW50ID0gJChUYWJsZVV0aWxzLnJlbmRlcihUYWJsZVRwbFsnY29udGFpbmVyLmh0bWwnXSwge1xuICAgICAgICAgICAgaWQ6IHRoaXMuX2lkLFxuICAgICAgICAgICAgY2xhc3NlczogY2xhc3Nlcy5sZW5ndGggPiAwID8gJyAnICsgY2xhc3Nlcy5qb2luKCcgJykgOiAnJyxcbiAgICAgICAgICAgIGNsYXNzZXNXcmFwcGVyOiBjbGFzc2VzV3JhcHBlci5sZW5ndGggPiAwID8gJyAnICsgY2xhc3Nlc1dyYXBwZXIuam9pbignICcpIDogJycsXG4gICAgICAgICAgICBjbGFzc2VzUm9vdDogY2xhc3Nlc1dyYXBwZXIubGVuZ3RoID4gMCA/ICcgJyArIGNsYXNzZXNXcmFwcGVyLmpvaW4oJyAnKSA6ICcnLFxuICAgICAgICAgICAgd2lkdGhTaXplczogd2lkdGhTaXplcyxcbiAgICAgICAgICAgIGhlaWdodFNpemVzOiBoZWlnaHRTaXplcyxcbiAgICAgICAgfSkpO1xuXG5cbiAgICAgICAgaWYgKHJlbmRlci5oZWFkZXJzT3V0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGNvbnRhaW5lckVsZW1lbnQucHJlcGVuZChyZW5kZXIuaGVhZGVyc091dCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlbmRlci5oZWFkZXJzSW4ubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgY29udGFpbmVyRWxlbWVudC5maW5kKCcuY29yZXVpLXRhYmxlX19jb250YWluZXInKS5wcmVwZW5kKHJlbmRlci5oZWFkZXJzSW4pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZW5kZXIuZm9vdGVyc0luLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGNvbnRhaW5lckVsZW1lbnQuZmluZCgnLmNvcmV1aS10YWJsZV9fY29udGFpbmVyJykuYXBwZW5kKHJlbmRlci5mb290ZXJzSW4pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZW5kZXIuZm9vdGVyc091dC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBjb250YWluZXJFbGVtZW50LmFwcGVuZChyZW5kZXIuZm9vdGVyc091dCk7XG4gICAgICAgIH1cblxuICAgICAgICBjb250YWluZXJFbGVtZW50LmZpbmQoJy5jb3JldWktdGFibGVfX3dyYXBwZXInKS5odG1sKHRhYmxlRWxlbWVudCk7XG5cbiAgICAgICAgaWYgKGVsZW1lbnQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIGNvbnRhaW5lckVsZW1lbnQ7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBEb20gZWxlbWVudFxuICAgICAgICBsZXQgZG9tRWxlbWVudCA9IG51bGw7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBlbGVtZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgZG9tRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGVsZW1lbnQpO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoZWxlbWVudCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSB7XG4gICAgICAgICAgICBkb21FbGVtZW50ID0gZWxlbWVudDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkb21FbGVtZW50KSB7XG4gICAgICAgICAgICAkKGRvbUVsZW1lbnQpLmh0bWwoY29udGFpbmVyRWxlbWVudCk7XG4gICAgICAgICAgICB0aGlzLmluaXRFdmVudHMoKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICog0JHQu9C+0LrQuNGA0L7QstC60LAg0YLQsNCx0LvQuNGG0YtcbiAgICAgKi9cbiAgICBsb2NrKCkge1xuXG4gICAgICAgIGxldCBjb250YWluZXIgPSBUYWJsZUVsZW1lbnRzLmdldENvbnRhaW5lcih0aGlzLmdldElkKCkpO1xuXG4gICAgICAgIGlmIChjb250YWluZXJbMF0gJiYgISBjb250YWluZXIuZmluZCgnLmNvcmV1aS10YWJsZS1sb2NrJylbMF0pIHtcbiAgICAgICAgICAgIGxldCBodG1sID0gIFRhYmxlVXRpbHMucmVuZGVyKFRhYmxlVHBsWyd0YWJsZS9sb2FkZXIuaHRtbCddLCB7XG4gICAgICAgICAgICAgICAgbGFuZzogdGhpcy5nZXRMYW5nKClcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBjb250YWluZXIucHJlcGVuZChodG1sKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICog0KDQsNC30LHQu9C+0LrQuNGA0L7QstC60LAg0YLQsNCx0LvQuNGG0YtcbiAgICAgKi9cbiAgICB1bmxvY2sgKCkge1xuXG4gICAgICAgIFRhYmxlRWxlbWVudHMuZ2V0TG9jayh0aGlzLmdldElkKCkpLmhpZGUoNTAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICQodGhpcykucmVtb3ZlKClcbiAgICAgICAgfSk7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiDQl9Cw0LPRgNGD0LfQutCwINGB0YLRgNC+0LpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG1ldGhvZFxuICAgICAqL1xuICAgIGxvYWQgKHVybCwgbWV0aG9kKSB7XG5cbiAgICAgICAgdGhpcy5sb2NrKCk7XG5cbiAgICAgICAgbGV0IHRoYXQgICA9IHRoaXM7XG4gICAgICAgIGxldCBwYXJhbXMgPSB7fTtcblxuICAgICAgICBpZiAodXJsLm1hdGNoKC9cXFtwYWdlXFxdLykpIHtcbiAgICAgICAgICAgIHVybCA9IHVybC5yZXBsYWNlKC9cXFtwYWdlXFxdL2csIHRoaXMuX3BhZ2UpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGV0IHBhcmFtUGFnZSA9IFRhYmxlVXRpbHMuaXNPYmplY3QodGhpcy5fb3B0aW9ucy5yZXF1ZXN0UGFyYW1zKSAmJiB0aGlzLl9vcHRpb25zLnJlcXVlc3RQYXJhbXMuaGFzT3duUHJvcGVydHkoJ3BhZ2UnKVxuICAgICAgICAgICAgICAgID8gdGhpcy5fb3B0aW9ucy5yZXF1ZXN0UGFyYW1zLnBhZ2VcbiAgICAgICAgICAgICAgICA6ICdwYWdlJztcbiAgICAgICAgICAgIHBhcmFtc1twYXJhbVBhZ2VdID0gdGhpcy5fcGFnZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh1cmwubWF0Y2goL1xcW2NvdW50XFxdLykpIHtcbiAgICAgICAgICAgIHVybCA9IHVybC5yZXBsYWNlKC9cXFtjb3VudFxcXS9nLCB0aGlzLl9yZWNvcmRzUGVyUGFnZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsZXQgcGFyYW1Db3VudCA9IFRhYmxlVXRpbHMuaXNPYmplY3QodGhpcy5fb3B0aW9ucy5yZXF1ZXN0UGFyYW1zKSAmJiB0aGlzLl9vcHRpb25zLnJlcXVlc3RQYXJhbXMuaGFzT3duUHJvcGVydHkoJ2NvdW50JylcbiAgICAgICAgICAgICAgICA/IHRoaXMuX29wdGlvbnMucmVxdWVzdFBhcmFtcy5jb3VudFxuICAgICAgICAgICAgICAgIDogJ2NvdW50JztcbiAgICAgICAgICAgIHBhcmFtc1twYXJhbUNvdW50XSA9IHRoaXMuX3JlY29yZHNQZXJQYWdlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHVybC5tYXRjaCgvXFxbc3RhcnRcXF0vKSkge1xuICAgICAgICAgICAgdXJsID0gdXJsLnJlcGxhY2UoL1xcW3N0YXJ0XFxdL2csICgodGhpcy5fcGFnZSAtIDEpICogdGhpcy5fcmVjb3Jkc1BlclBhZ2UpICsgMSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsZXQgcGFyYW1TdGFydCA9IFRhYmxlVXRpbHMuaXNPYmplY3QodGhpcy5fb3B0aW9ucy5yZXF1ZXN0UGFyYW1zKSAmJiB0aGlzLl9vcHRpb25zLnJlcXVlc3RQYXJhbXMuaGFzT3duUHJvcGVydHkoJ3N0YXJ0JylcbiAgICAgICAgICAgICAgICA/IHRoaXMuX29wdGlvbnMucmVxdWVzdFBhcmFtcy5zdGFydFxuICAgICAgICAgICAgICAgIDogJ3N0YXJ0JztcbiAgICAgICAgICAgIHBhcmFtc1twYXJhbVN0YXJ0XSA9ICgodGhpcy5fcGFnZSAtIDEpICogdGhpcy5fcmVjb3Jkc1BlclBhZ2UpICsgMTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh1cmwubWF0Y2goL1xcW2VuZFxcXS8pKSB7XG4gICAgICAgICAgICB1cmwgPSB1cmwucmVwbGFjZSgvXFxbZW5kXFxdL2csICgodGhpcy5fcGFnZSAtIDEpICogdGhpcy5fcmVjb3Jkc1BlclBhZ2UpICsgTnVtYmVyKHRoaXMuX3JlY29yZHNQZXJQYWdlKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsZXQgcGFyYW1FbmQgPSBUYWJsZVV0aWxzLmlzT2JqZWN0KHRoaXMuX29wdGlvbnMucmVxdWVzdFBhcmFtcykgJiYgdGhpcy5fb3B0aW9ucy5yZXF1ZXN0UGFyYW1zLmhhc093blByb3BlcnR5KCdlbmQnKVxuICAgICAgICAgICAgICAgID8gdGhpcy5fb3B0aW9ucy5yZXF1ZXN0UGFyYW1zLmVuZFxuICAgICAgICAgICAgICAgIDogJ2VuZCc7XG4gICAgICAgICAgICBwYXJhbXNbcGFyYW1FbmRdID0gKCh0aGlzLl9wYWdlIC0gMSkgKiB0aGlzLl9yZWNvcmRzUGVyUGFnZSkgKyBOdW1iZXIodGhpcy5fcmVjb3Jkc1BlclBhZ2UpO1xuICAgICAgICB9XG5cblxuICAgICAgICBsZXQgc2VhcmNoRGF0YSA9IHRoaXMuZ2V0U2VhcmNoRGF0YSgpO1xuICAgICAgICBsZXQgZmlsdGVyRGF0YSA9IHRoaXMuZ2V0RmlsdGVyRGF0YSgpO1xuXG4gICAgICAgIGlmIChmaWx0ZXJEYXRhLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGZpbHRlckRhdGEubWFwKGZ1bmN0aW9uIChmaWx0ZXIpIHtcbiAgICAgICAgICAgICAgICBzZWFyY2hEYXRhLnB1c2goZmlsdGVyKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNlYXJjaERhdGEubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgbGV0IHBhcmFtU2VhcmNoID0gVGFibGVVdGlscy5pc09iamVjdCh0aGlzLl9vcHRpb25zLnJlcXVlc3RQYXJhbXMpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9vcHRpb25zLnJlcXVlc3RQYXJhbXMuaGFzT3duUHJvcGVydHkoJ3NlYXJjaCcpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlb2YgdGhpcy5fb3B0aW9ucy5yZXF1ZXN0UGFyYW1zLnNlYXJjaCA9PT0gJ3N0cmluZydcbiAgICAgICAgICAgICAgICA/IHRoaXMuX29wdGlvbnMucmVxdWVzdFBhcmFtcy5zZWFyY2hcbiAgICAgICAgICAgICAgICA6ICdzZWFyY2gnO1xuXG4gICAgICAgICAgICBwYXJhbXNbcGFyYW1TZWFyY2hdID0ge307XG5cbiAgICAgICAgICAgIHNlYXJjaERhdGEubWFwKGZ1bmN0aW9uIChzZWFyY2hJdGVtKSB7XG4gICAgICAgICAgICAgICAgcGFyYW1zW3BhcmFtU2VhcmNoXVtzZWFyY2hJdGVtLmZpZWxkXSA9IHNlYXJjaEl0ZW0udmFsdWVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuX3NvcnQubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgbGV0IHBhcmFtU29ydCA9IFRhYmxlVXRpbHMuaXNPYmplY3QodGhpcy5fb3B0aW9ucy5yZXF1ZXN0UGFyYW1zKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX29wdGlvbnMucmVxdWVzdFBhcmFtcy5oYXNPd25Qcm9wZXJ0eSgnc29ydCcpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIHRoaXMuX29wdGlvbnMucmVxdWVzdFBhcmFtcy5zb3J0ID09PSAnc3RyaW5nJ1xuICAgICAgICAgICAgICAgID8gdGhpcy5fb3B0aW9ucy5yZXF1ZXN0UGFyYW1zLnNvcnRcbiAgICAgICAgICAgICAgICA6ICdzb3J0JztcblxuICAgICAgICAgICAgcGFyYW1zW3BhcmFtU29ydF0gPSB0aGlzLl9zb3J0O1xuICAgICAgICB9XG5cblxuICAgICAgICAkLmFqYXgoe1xuICAgICAgICAgICAgdXJsOiB1cmwsXG4gICAgICAgICAgICBtZXRob2Q6IG1ldGhvZCB8fCAnR0VUJyxcbiAgICAgICAgICAgIGRhdGFUeXBlOiBcImpzb25cIixcbiAgICAgICAgICAgIGRhdGE6IHBhcmFtcyxcbiAgICAgICAgICAgIGJlZm9yZVNlbmQ6IGZ1bmN0aW9uKHhocikge1xuICAgICAgICAgICAgICAgIFRhYmxlUHJpdmF0ZS5fdHJpZ2dlcih0aGF0LCAncmVjb3Jkc19sb2FkX3N0YXJ0JywgWyB0aGF0LCB4aHIgXSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24gKHJlc3VsdCkge1xuXG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdC5oYXNPd25Qcm9wZXJ0eSgncmVjb3JkcycpICYmXG4gICAgICAgICAgICAgICAgICAgIHR5cGVvZiByZXN1bHQucmVjb3JkcyA9PT0gJ29iamVjdCcgJiZcbiAgICAgICAgICAgICAgICAgICAgQXJyYXkuaXNBcnJheShyZXN1bHQucmVjb3JkcylcbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHRvdGFsID0gcmVzdWx0Lmhhc093blByb3BlcnR5KCd0b3RhbCcpICYmIFRhYmxlVXRpbHMuaXNOdW1lcmljKHJlc3VsdC50b3RhbClcbiAgICAgICAgICAgICAgICAgICAgICAgID8gcmVzdWx0LnRvdGFsXG4gICAgICAgICAgICAgICAgICAgICAgICA6IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIHRoYXQuc2V0UmVjb3JkcyhyZXN1bHQucmVjb3JkcywgdG90YWwpO1xuXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhhdC5zZXRSZWNvcmRzKFtdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uKHhociwgdGV4dFN0YXR1cywgZXJyb3JUaHJvd24pIHtcbiAgICAgICAgICAgICAgICB0aGF0LnNldFJlY29yZHMoW10pO1xuICAgICAgICAgICAgICAgIFRhYmxlUHJpdmF0ZS5fdHJpZ2dlcih0aGF0LCAncmVjb3Jkc19sb2FkX2Vycm9yJywgWyB0aGF0LCB4aHIsIHRleHRTdGF0dXMsIGVycm9yVGhyb3duIF0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNvbXBsZXRlOiBmdW5jdGlvbih4aHIsIHRleHRTdGF0dXMpIHtcbiAgICAgICAgICAgICAgICB0aGF0LnVubG9jaygpO1xuICAgICAgICAgICAgICAgIFRhYmxlUHJpdmF0ZS5fdHJpZ2dlcih0aGF0LCAncmVjb3Jkc19sb2FkX2VuZCcsIFsgdGhhdCwgeGhyLCB0ZXh0U3RhdHVzIF0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiDQl9Cw0LPRgNGD0LfQutCwINGB0YLRgNC+0LpcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFja1xuICAgICAqL1xuICAgIGxvYWRCeUZ1bmN0aW9uKGNhbGxiYWNrKSB7XG5cbiAgICAgICAgbGV0IHRoYXQgICA9IHRoaXM7XG4gICAgICAgIGxldCBwYXJhbXMgPSB7fTtcblxuICAgICAgICBsZXQgcGFyYW1QYWdlID0gVGFibGVVdGlscy5pc09iamVjdCh0aGlzLl9vcHRpb25zLnJlcXVlc3RQYXJhbXMpICYmIHRoaXMuX29wdGlvbnMucmVxdWVzdFBhcmFtcy5oYXNPd25Qcm9wZXJ0eSgncGFnZScpXG4gICAgICAgICAgICA/IHRoaXMuX29wdGlvbnMucmVxdWVzdFBhcmFtcy5wYWdlXG4gICAgICAgICAgICA6ICdwYWdlJztcblxuICAgICAgICBsZXQgcGFyYW1Db3VudCA9IFRhYmxlVXRpbHMuaXNPYmplY3QodGhpcy5fb3B0aW9ucy5yZXF1ZXN0UGFyYW1zKSAmJiB0aGlzLl9vcHRpb25zLnJlcXVlc3RQYXJhbXMuaGFzT3duUHJvcGVydHkoJ2NvdW50JylcbiAgICAgICAgICAgID8gdGhpcy5fb3B0aW9ucy5yZXF1ZXN0UGFyYW1zLmNvdW50XG4gICAgICAgICAgICA6ICdjb3VudCc7XG5cbiAgICAgICAgbGV0IHBhcmFtU3RhcnQgPSBUYWJsZVV0aWxzLmlzT2JqZWN0KHRoaXMuX29wdGlvbnMucmVxdWVzdFBhcmFtcykgJiYgdGhpcy5fb3B0aW9ucy5yZXF1ZXN0UGFyYW1zLmhhc093blByb3BlcnR5KCdzdGFydCcpXG4gICAgICAgICAgICA/IHRoaXMuX29wdGlvbnMucmVxdWVzdFBhcmFtcy5zdGFydFxuICAgICAgICAgICAgOiAnc3RhcnQnO1xuXG4gICAgICAgIGxldCBwYXJhbUVuZCA9IFRhYmxlVXRpbHMuaXNPYmplY3QodGhpcy5fb3B0aW9ucy5yZXF1ZXN0UGFyYW1zKSAmJiB0aGlzLl9vcHRpb25zLnJlcXVlc3RQYXJhbXMuaGFzT3duUHJvcGVydHkoJ2VuZCcpXG4gICAgICAgICAgICA/IHRoaXMuX29wdGlvbnMucmVxdWVzdFBhcmFtcy5lbmRcbiAgICAgICAgICAgIDogJ2VuZCc7XG5cbiAgICAgICAgcGFyYW1zW3BhcmFtQ291bnRdID0gdGhpcy5fcmVjb3Jkc1BlclBhZ2U7XG4gICAgICAgIHBhcmFtc1twYXJhbVBhZ2VdICA9IHRoaXMuX3BhZ2U7XG4gICAgICAgIHBhcmFtc1twYXJhbVN0YXJ0XSA9ICgodGhpcy5fcGFnZSAtIDEpICogdGhpcy5fcmVjb3Jkc1BlclBhZ2UpICsgMTtcbiAgICAgICAgcGFyYW1zW3BhcmFtRW5kXSAgID0gKCh0aGlzLl9wYWdlIC0gMSkgKiB0aGlzLl9yZWNvcmRzUGVyUGFnZSkgKyBOdW1iZXIodGhpcy5fcmVjb3Jkc1BlclBhZ2UpO1xuXG5cblxuICAgICAgICBsZXQgc2VhcmNoRGF0YSA9IHRoaXMuZ2V0U2VhcmNoRGF0YSgpO1xuICAgICAgICBsZXQgZmlsdGVyRGF0YSA9IHRoaXMuZ2V0RmlsdGVyRGF0YSgpO1xuXG4gICAgICAgIGlmIChmaWx0ZXJEYXRhLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICQuZWFjaChmaWx0ZXJEYXRhLCBmdW5jdGlvbiAoa2V5LCBmaWx0ZXIpIHtcbiAgICAgICAgICAgICAgICBzZWFyY2hEYXRhLnB1c2goZmlsdGVyKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNlYXJjaERhdGEubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgbGV0IHBhcmFtU2VhcmNoID0gVGFibGVVdGlscy5pc09iamVjdCh0aGlzLl9vcHRpb25zLnJlcXVlc3RQYXJhbXMpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9vcHRpb25zLnJlcXVlc3RQYXJhbXMuaGFzT3duUHJvcGVydHkoJ3NlYXJjaCcpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlb2YgdGhpcy5fb3B0aW9ucy5yZXF1ZXN0UGFyYW1zLnNlYXJjaCA9PT0gJ3N0cmluZydcbiAgICAgICAgICAgICAgICA/IHRoaXMuX29wdGlvbnMucmVxdWVzdFBhcmFtcy5zZWFyY2hcbiAgICAgICAgICAgICAgICA6ICdzZWFyY2gnO1xuXG4gICAgICAgICAgICBwYXJhbXNbcGFyYW1TZWFyY2hdID0ge307XG5cbiAgICAgICAgICAgIHNlYXJjaERhdGEubWFwKGZ1bmN0aW9uIChzZWFyY2hJdGVtKSB7XG4gICAgICAgICAgICAgICAgcGFyYW1zW3BhcmFtU2VhcmNoXVtzZWFyY2hJdGVtLmZpZWxkXSA9IHNlYXJjaEl0ZW0udmFsdWVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuX3NvcnQubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgbGV0IHBhcmFtU29ydCA9IFRhYmxlVXRpbHMuaXNPYmplY3QodGhpcy5fb3B0aW9ucy5yZXF1ZXN0UGFyYW1zKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX29wdGlvbnMucmVxdWVzdFBhcmFtcy5oYXNPd25Qcm9wZXJ0eSgnc29ydCcpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIHRoaXMuX29wdGlvbnMucmVxdWVzdFBhcmFtcy5zb3J0ID09PSAnc3RyaW5nJ1xuICAgICAgICAgICAgICAgID8gdGhpcy5fb3B0aW9ucy5yZXF1ZXN0UGFyYW1zLnNvcnRcbiAgICAgICAgICAgICAgICA6ICdzb3J0JztcblxuICAgICAgICAgICAgcGFyYW1zW3BhcmFtU29ydF0gPSB0aGlzLl9zb3J0O1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHJlc3VsdCA9IGNhbGxiYWNrKHBhcmFtcywgdGhpcyk7XG5cblxuICAgICAgICAvKipcbiAgICAgICAgICog0KPRgdGC0LDQvdC+0LLQutCwINC30LDQv9C40YHQtdC5XG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhXG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBzZXRSZWNvcmRzIChkYXRhKSB7XG5cbiAgICAgICAgICAgIGlmIChkYXRhLmhhc093blByb3BlcnR5KCdyZWNvcmRzJykgJiZcbiAgICAgICAgICAgICAgICB0eXBlb2YgZGF0YS5yZWNvcmRzID09PSAnb2JqZWN0JyAmJlxuICAgICAgICAgICAgICAgIEFycmF5LmlzQXJyYXkoZGF0YS5yZWNvcmRzKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgbGV0IHRvdGFsID0gZGF0YS5oYXNPd25Qcm9wZXJ0eSgndG90YWwnKSAmJiBUYWJsZVV0aWxzLmlzTnVtZXJpYyhkYXRhLnRvdGFsKVxuICAgICAgICAgICAgICAgICAgICA/IGRhdGEudG90YWxcbiAgICAgICAgICAgICAgICAgICAgOiBudWxsO1xuICAgICAgICAgICAgICAgIHRoYXQuc2V0UmVjb3JkcyhkYXRhLnJlY29yZHMsIHRvdGFsKTtcblxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGF0LnNldFJlY29yZHMoW10pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cblxuXG4gICAgICAgIGlmIChyZXN1bHQgaW5zdGFuY2VvZiBQcm9taXNlKSB7XG4gICAgICAgICAgICB0aGlzLmxvY2soKTtcblxuICAgICAgICAgICAgcmVzdWx0XG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhhdC51bmxvY2soKTtcblxuICAgICAgICAgICAgICAgICAgICBzZXRSZWNvcmRzKGRhdGEpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmNhdGNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhhdC51bmxvY2soKTtcbiAgICAgICAgICAgICAgICB9KVxuXG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHJlc3VsdCA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIHNldFJlY29yZHMocmVzdWx0KTtcbiAgICAgICAgfVxuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICog0J/QtdGA0LXQt9Cw0LPRgNGD0LfQutCwINC30LDQv9C40YHQtdC5INCyINGC0LDQsdC70LjRhtC1XG4gICAgICovXG4gICAgcmVsb2FkKCkge1xuXG4gICAgICAgIGlmICh0aGlzLl9pc1JlY29yZHNSZXF1ZXN0KSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHRoaXMuX29wdGlvbnMucmVjb3Jkc1JlcXVlc3QgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmxvYWRCeUZ1bmN0aW9uKHRoaXMuX29wdGlvbnMucmVjb3Jkc1JlcXVlc3QpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmxvYWQodGhpcy5fb3B0aW9ucy5yZWNvcmRzUmVxdWVzdC51cmwsIHRoaXMuX29wdGlvbnMucmVjb3Jkc1JlcXVlc3QubWV0aG9kKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICog0J/QtdGA0LXRgdC+0LfQtNCw0L3QuNC1INGC0LXQu9CwINGC0LDQsdC70LjRhtGLXG4gICAgICovXG4gICAgcmVmcmVzaCgpIHtcblxuICAgICAgICBsZXQgdGFibGUgPSBUYWJsZVJlbmRlci5yZW5kZXJUYWJsZSh0aGlzKTtcblxuICAgICAgICBUYWJsZUVsZW1lbnRzLmdldFRhYmxlKHRoaXMuZ2V0SWQoKSkucmVwbGFjZVdpdGgodGFibGUpO1xuXG4gICAgICAgIFRhYmxlUHJpdmF0ZS5fdHJpZ2dlcih0aGlzLCAndGFibGVfc2hvdycsIFsgdGhpcyBdKTtcbiAgICAgICAgVGFibGVQcml2YXRlLl90cmlnZ2VyKHRoaXMsICdyZWNvcmRzX3Nob3cnLCBbIHRoaXMgXSk7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiDQo9GB0YLQsNC90L7QstC60LAg0L7QsdGJ0LXQs9C+INC60L7Qu9C40YfQtdGB0YLQstCwINC30LDQv9C40YHQtdC5INC90LAg0YHRgtGA0LDQvdC40YbQtVxuICAgICAqIEBwYXJhbSByZWNvcmRzUGVyUGFnZVxuICAgICAqL1xuICAgIHNldFBhZ2VTaXplKHJlY29yZHNQZXJQYWdlKSB7XG5cbiAgICAgICAgdGhpcy5fcmVjb3Jkc1BlclBhZ2UgPSByZWNvcmRzUGVyUGFnZTtcblxuICAgICAgICBUYWJsZVByaXZhdGUuX3RyaWdnZXIodGhpcywgJ3BhZ2Vfc2l6ZV91cGRhdGUnKTtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqINCS0YvQsdC+0YAg0LLRgdC10YUg0LfQsNC/0LjRgdC10Lkg0LIg0YLQsNCx0LvQuNGG0LVcbiAgICAgKi9cbiAgICBzZWxlY3RBbGwoKSB7XG5cbiAgICAgICAgVGFibGVFbGVtZW50cy5zZWxlY3RUckFsbCh0aGlzLmdldElkKCkpXG5cbiAgICAgICAgVGFibGVQcml2YXRlLl90cmlnZ2VyKHRoaXMsICdyZWNvcmRfc2VsZWN0X2FsbCcpO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICog0J7RgtC80LXQvdCwINCy0YvQsdC+0YAg0LLRgdC10YUg0LfQsNC/0LjRgdC10Lkg0LIg0YLQsNCx0LvQuNGG0LVcbiAgICAgKi9cbiAgICB1bnNlbGVjdEFsbCgpIHtcblxuICAgICAgICBUYWJsZUVsZW1lbnRzLnVuc2VsZWN0VHJBbGwodGhpcy5nZXRJZCgpKVxuXG4gICAgICAgIFRhYmxlUHJpdmF0ZS5fdHJpZ2dlcih0aGlzLCAncmVjb3JkX3Vuc2VsZWN0X2FsbCcpO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICog0JLRi9Cx0L7RgCDQt9Cw0L/QuNGB0Lgg0LIg0YLQsNCx0LvQuNGG0LVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWRcbiAgICAgKi9cbiAgICBzZWxlY3RSZWNvcmQoaWQpIHtcblxuICAgICAgICBsZXQgcmVjb3JkID0gdGhpcy5nZXRSZWNvcmRCeUlkKGlkKTtcblxuICAgICAgICBpZiAoICEgcmVjb3JkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgdHIgPSBUYWJsZUVsZW1lbnRzLmdldFRyQnlJbmRleCh0aGlzLmdldElkKCksIHJlY29yZC5pbmRleCk7XG5cbiAgICAgICAgaWYgKHRyLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgVGFibGVFbGVtZW50cy5zZWxlY3RUcih0cilcblxuICAgICAgICBUYWJsZVByaXZhdGUuX3RyaWdnZXIodGhpcywgJ3JlY29yZF9zZWxlY3QnLCBbIHJlY29yZCBdKTtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqINCS0YvQsdC+0YAg0LfQsNC/0LjRgdC4INCyINGC0LDQsdC70LjRhtC1INC/0L4g0LjQvdC00LXQutGB0YNcbiAgICAgKiBAcGFyYW0ge2ludH0gaW5kZXhcbiAgICAgKi9cbiAgICBzZWxlY3RSZWNvcmRCeUluZGV4KGluZGV4KSB7XG5cbiAgICAgICAgbGV0IHJlY29yZCA9IHRoaXMuZ2V0UmVjb3JkQnlJbmRleChpbmRleCk7XG5cbiAgICAgICAgaWYgKCAhIHJlY29yZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHRyID0gVGFibGVFbGVtZW50cy5nZXRUckJ5SW5kZXgodGhpcy5nZXRJZCgpLCByZWNvcmQuaW5kZXgpO1xuXG4gICAgICAgIGlmICh0ci5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIFRhYmxlRWxlbWVudHMuc2VsZWN0VHIodHIpXG5cbiAgICAgICAgVGFibGVQcml2YXRlLl90cmlnZ2VyKHRoaXMsICdyZWNvcmRfc2VsZWN0JywgWyByZWNvcmQgXSk7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiDQntGC0LzQtdC90LAg0LLRi9Cx0L7RgNCwINC30LDQv9C40YHQuCDQsiDRgtCw0LHQu9C40YbQtVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZFxuICAgICAqL1xuICAgIHVuc2VsZWN0UmVjb3JkKGlkKSB7XG5cbiAgICAgICAgbGV0IHJlY29yZCA9IHRoaXMuZ2V0UmVjb3JkQnlJZChpZCk7XG5cbiAgICAgICAgaWYgKCAhIHJlY29yZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHRyID0gVGFibGVFbGVtZW50cy5nZXRUckJ5SW5kZXgodGhpcy5nZXRJZCgpLCByZWNvcmQuaW5kZXgpO1xuXG4gICAgICAgIGlmICggISB0cikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgVGFibGVFbGVtZW50cy51bnNlbGVjdFRyKHRyKVxuXG4gICAgICAgIFRhYmxlUHJpdmF0ZS5fdHJpZ2dlcih0aGlzLCAncmVjb3JkX3Vuc2VsZWN0JywgWyByZWNvcmQuZGF0YSBdKTtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSDQstGL0LHRgNCw0L3QvdGL0YUgaWRcbiAgICAgKiBAcmV0dXJuIHthcnJheX1cbiAgICAgKi9cbiAgICBnZXRTZWxlY3RlZFJlY29yZHNJZCgpIHtcblxuICAgICAgICBsZXQgcmVjb3JkcyA9IFtdO1xuICAgICAgICBsZXQgdGhhdCAgICA9IHRoaXM7XG4gICAgICAgIGxldCBmaWVsZCAgID0gdGhpcy5fb3B0aW9ucy5wcmltYXJ5S2V5O1xuXG4gICAgICAgICQuZWFjaChUYWJsZUVsZW1lbnRzLmdldFNlbGVjdGVkSW5kZXhlcyh0aGlzLmdldElkKCkpLCBmdW5jdGlvbiAoa2V5LCBpbmRleCkge1xuICAgICAgICAgICAgbGV0IHJlY29yZCA9IHRoYXQuZ2V0UmVjb3JkQnlJbmRleChpbmRleCk7XG5cbiAgICAgICAgICAgIGlmICggISByZWNvcmQgfHwgISByZWNvcmQuZGF0YS5oYXNPd25Qcm9wZXJ0eShmaWVsZCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJlY29yZHMucHVzaChyZWNvcmQuZGF0YVtmaWVsZF0pO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gcmVjb3JkcztcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSDQstGL0LHRgNCw0L3QvdGL0YUg0LfQsNC/0LjRgdC10LlcbiAgICAgKiBAcmV0dXJuIHthcnJheX1cbiAgICAgKi9cbiAgICBnZXRTZWxlY3RlZFJlY29yZHMoKSB7XG5cbiAgICAgICAgbGV0IHJlY29yZHMgPSBbXTtcbiAgICAgICAgbGV0IHRoYXQgICAgPSB0aGlzO1xuXG4gICAgICAgICQuZWFjaChUYWJsZUVsZW1lbnRzLmdldFNlbGVjdGVkSW5kZXhlcyh0aGlzLmdldElkKCkpLCBmdW5jdGlvbiAoa2V5LCBpbmRleCkge1xuICAgICAgICAgICAgbGV0IHJlY29yZCA9IHRoYXQuZ2V0UmVjb3JkQnlJbmRleChpbmRleCk7XG5cbiAgICAgICAgICAgIGlmICggISByZWNvcmQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJlY29yZHMucHVzaChyZWNvcmQpO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gcmVjb3JkcztcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSDQt9Cw0L/QuNGB0Lgg0L/QviBpZFxuICAgICAqIEBwYXJhbSBpZFxuICAgICAqIEByZXR1cm4ge29iamVjdHxudWxsfVxuICAgICAqIEBkZXByZWNhdGVkXG4gICAgICovXG4gICAgZ2V0UmVjb3JkKGlkKSB7XG5cbiAgICAgICAgbGV0IHJlY29yZCA9IHRoaXMuZ2V0UmVjb3JkQnlJZChpZCk7XG5cbiAgICAgICAgaWYgKCAhIHJlY29yZCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVjb3JkLmRhdGE7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0LfQsNC/0LjRgdC10LlcbiAgICAgKi9cbiAgICBnZXRSZWNvcmRzKCkge1xuXG4gICAgICAgIGxldCByZWNvcmRzID0gW11cblxuICAgICAgICAkLmVhY2godGhpcy5fcmVjb3JkcywgZnVuY3Rpb24gKGtleSwgcmVjb3JkKSB7XG4gICAgICAgICAgICByZWNvcmRzLnB1c2goJC5leHRlbmQodHJ1ZSwge30sIHJlY29yZCkpO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gcmVjb3JkcztcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSDQtNCw0L3QvdGL0YUg0LjQtyDRgdGD0YnQtdGB0YLQstGD0Y7RidC40YUg0LfQsNC/0LjRgdC10LlcbiAgICAgKiBAcmV0dXJuIHtBcnJheX1cbiAgICAgKiBAZGVwcmVjYXRlZCBnZXRSZWNvcmRzRGF0YVxuICAgICAqL1xuICAgIGdldERhdGEoKSB7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UmVjb3Jkc0RhdGEoKTtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSDQtNCw0L3QvdGL0YUg0LjQtyDRgdGD0YnQtdGB0YLQstGD0Y7RidC40YUg0LfQsNC/0LjRgdC10LlcbiAgICAgKiBAcmV0dXJuIHtBcnJheX1cbiAgICAgKi9cbiAgICBnZXRSZWNvcmRzRGF0YSgpIHtcblxuICAgICAgICBsZXQgZGF0YSA9IFtdXG5cbiAgICAgICAgJC5lYWNoKHRoaXMuX3JlY29yZHMsIGZ1bmN0aW9uIChrZXksIHJlY29yZCkge1xuICAgICAgICAgICAgZGF0YS5wdXNoKCQuZXh0ZW5kKHRydWUsIHt9LCByZWNvcmQuZGF0YSkpO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqINCf0LXRgNC10YXQvtC0INC6INC/0YDQtdC00YvQtNGD0YnQtdC5INGB0YLRgNCw0L3QuNGG0LVcbiAgICAgKi9cbiAgICBwcmV2UGFnZSgpIHtcblxuICAgICAgICBpZiAodGhpcy5fcGFnZSA+IDEpIHtcbiAgICAgICAgICAgIHRoaXMuX3BhZ2UtLTtcbiAgICAgICAgICAgIHRoaXMucmVsb2FkKCk7XG4gICAgICAgIH1cbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqINCf0LXRgNC10YXQvtC0INC6INGB0LvQtdC00YPRjtGJ0LXQuSDRgdGC0YDQsNC90LjRhtC1XG4gICAgICogQHJldHVybiB7YXJyYXl9XG4gICAgICovXG4gICAgbmV4dFBhZ2UoKSB7XG5cbiAgICAgICAgbGV0IHRvdGFsUGFnZXMgPSB0aGlzLl9yZWNvcmRzVG90YWwgPiAwICYmIHRoaXMuX3JlY29yZHNQZXJQYWdlID4gMFxuICAgICAgICAgICAgPyBNYXRoLmNlaWwodGhpcy5fcmVjb3Jkc1RvdGFsIC8gdGhpcy5fcmVjb3Jkc1BlclBhZ2UpXG4gICAgICAgICAgICA6IDE7XG5cbiAgICAgICAgaWYgKHRoaXMuX3BhZ2UgPCB0b3RhbFBhZ2VzKSB7XG4gICAgICAgICAgICB0aGlzLl9wYWdlKys7XG4gICAgICAgICAgICB0aGlzLnJlbG9hZCgpO1xuICAgICAgICB9XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiDQn9C10YDQtdGF0L7QtCDQuiDRg9C60LDQt9Cw0L3QvdC+0Lkg0YHRgtGA0LDQvdC40YbQtVxuICAgICAqL1xuICAgIGdvUGFnZShwYWdlKSB7XG5cbiAgICAgICAgaWYgKHBhZ2UgPj0gMSkge1xuICAgICAgICAgICAgdGhpcy5fcGFnZSA9IHBhZ2U7XG4gICAgICAgICAgICB0aGlzLnJlbG9hZCgpO1xuICAgICAgICB9XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiDQoNC10LPQuNGB0YLRgNCw0YbQuNGPINGE0YPQvdC60YbQuNC4INC90LAg0YHQvtCx0YvRgtC40LVcbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gZXZlbnROYW1lXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbn0gICAgIGNhbGxiYWNrXG4gICAgICogQHBhcmFtIHsqfSAgICAgICAgICAgIGNvbnRleHRcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59ICAgICAgc2luZ2xlRXhlY1xuICAgICAqL1xuICAgIG9uKGV2ZW50TmFtZSwgY2FsbGJhY2ssIGNvbnRleHQsIHNpbmdsZUV4ZWMpIHtcblxuICAgICAgICBsZXQgZXZlbnROYW1lcyA9IFtdO1xuXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KGV2ZW50TmFtZSkpIHtcbiAgICAgICAgICAgICQuZWFjaChldmVudE5hbWUsIGZ1bmN0aW9uIChrZXksIG5hbWUpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG5hbWUgPT09ICdzdHJpbmcnICYmIG5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgZXZlbnROYW1lcy5wdXNoKG5hbWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGV2ZW50TmFtZSA9PT0gJ3N0cmluZycgJiYgZXZlbnROYW1lKSB7XG4gICAgICAgICAgICBldmVudE5hbWVzLnB1c2goZXZlbnROYW1lKTtcblxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHRoYXQgPSB0aGlzO1xuXG4gICAgICAgICQuZWFjaChldmVudE5hbWVzLCBmdW5jdGlvbiAoa2V5LCBuYW1lKSB7XG5cbiAgICAgICAgICAgIGlmICggISBBcnJheS5pc0FycmF5KHRoYXQuX2V2ZW50c1tuYW1lXSkpIHtcbiAgICAgICAgICAgICAgICB0aGF0Ll9ldmVudHNbbmFtZV0gPSBbXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhhdC5fZXZlbnRzW25hbWVdLnB1c2goe1xuICAgICAgICAgICAgICAgIGNvbnRleHQgOiBjb250ZXh0ID8gY29udGV4dCA6IHRoYXQsXG4gICAgICAgICAgICAgICAgY2FsbGJhY2s6IGNhbGxiYWNrLFxuICAgICAgICAgICAgICAgIHNpbmdsZUV4ZWM6ICEhIHNpbmdsZUV4ZWMsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0L/QtdGA0LXQstC+0LTQvtCyINGC0LXQutGD0YnQtdCz0L4g0Y/Qt9GL0LrQsFxuICAgICAqIEByZXR1cm4ge29iamVjdH1cbiAgICAgKi9cbiAgICBnZXRMYW5nKCkge1xuXG4gICAgICAgIHJldHVybiAkLmV4dGVuZCh0cnVlLCB7fSwgdGhpcy5fb3B0aW9ucy5sYW5nSXRlbXMpO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICog0KPRgdGC0LDQvdC+0LLQutCwINCy0LjQtNC40LzRi9GFINC60L7Qu9C+0L3QvtC6LCDQvdC1INGD0LrQsNC30LDQvdC90YvQtSDQutC+0LvQvtC90LrQuCDQsdGD0LTRg9GCINGB0LrRgNGL0YLRi1xuICAgICAqIEBwYXJhbSB7QXJyYXl9IGNvbHVtbnNcbiAgICAgKi9cbiAgICBzZXRDb2x1bW5zU2hvdyhjb2x1bW5zKSB7XG5cbiAgICAgICAgaWYgKCAhIEFycmF5LmlzQXJyYXkoY29sdW1ucykpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBpc0NoYW5nZSA9IGZhbHNlO1xuICAgICAgICBsZXQgdGFibGUgICAgPSB0aGlzO1xuXG4gICAgICAgIHRoaXMuX2NvdW50Q29sdW1uc1Nob3cgPSAwO1xuXG5cbiAgICAgICAgdGhpcy5fY29sdW1ucy5tYXAoZnVuY3Rpb24gKGNvbHVtbikge1xuICAgICAgICAgICAgbGV0IG9wdGlvbnMgPSBjb2x1bW4uZ2V0T3B0aW9ucygpO1xuXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnZmllbGQnKSAmJiB0eXBlb2Ygb3B0aW9ucy5maWVsZCA9PT0gJ3N0cmluZycpIHtcblxuICAgICAgICAgICAgICAgIGxldCBpc1Nob3cgPSBjb2x1bW5zLmluZGV4T2Yob3B0aW9ucy5maWVsZCkgPj0gMDtcblxuICAgICAgICAgICAgICAgIGlmIChjb2x1bW4uaXNTaG93KCkgIT09IGlzU2hvdykge1xuICAgICAgICAgICAgICAgICAgICBjb2x1bW4uc2V0U2hvdyhpc1Nob3cpO1xuICAgICAgICAgICAgICAgICAgICBpc0NoYW5nZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoY29sdW1uLmlzU2hvdygpKSB7XG4gICAgICAgICAgICAgICAgdGFibGUuX2NvdW50Q29sdW1uc1Nob3crKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cblxuICAgICAgICBpZiAoaXNDaGFuZ2UpIHtcbiAgICAgICAgICAgIFRhYmxlUHJpdmF0ZS5fdHJpZ2dlcih0aGlzLCAnY29sdW1uc19jaGFuZ2UnKTtcbiAgICAgICAgICAgIHRoaXMucmVmcmVzaCgpO1xuICAgICAgICB9XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiDQn9C+0LrQsNC3INC60L7Qu9C+0L3QvtC6XG4gICAgICogQHBhcmFtIHtBcnJheX0gY29sdW1uc1xuICAgICAqL1xuICAgIHNob3dDb2x1bW5zKGNvbHVtbnMpIHtcblxuICAgICAgICBpZiAoICEgQXJyYXkuaXNBcnJheShjb2x1bW5zKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGlzQ2hhbmdlID0gZmFsc2U7XG4gICAgICAgIGxldCB0YWJsZSAgICA9IHRoaXM7XG5cbiAgICAgICAgdGhpcy5fY291bnRDb2x1bW5zU2hvdyA9IDA7XG5cblxuICAgICAgICB0aGlzLl9jb2x1bW5zLm1hcChmdW5jdGlvbiAoY29sdW1uKSB7XG4gICAgICAgICAgICBsZXQgb3B0aW9ucyA9IGNvbHVtbi5nZXRPcHRpb25zKCk7XG5cbiAgICAgICAgICAgIGlmIChvcHRpb25zLmhhc093blByb3BlcnR5KCdmaWVsZCcpICYmXG4gICAgICAgICAgICAgICAgdHlwZW9mIG9wdGlvbnMuZmllbGQgPT09ICdzdHJpbmcnICYmXG4gICAgICAgICAgICAgICAgY29sdW1ucy5pbmRleE9mKG9wdGlvbnMuZmllbGQpID49IDAgJiZcbiAgICAgICAgICAgICAgICAhIGNvbHVtbi5pc1Nob3coKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgY29sdW1uLnNldFNob3codHJ1ZSk7XG4gICAgICAgICAgICAgICAgaXNDaGFuZ2UgPSB0cnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoY29sdW1uLmlzU2hvdygpKSB7XG4gICAgICAgICAgICAgICAgdGFibGUuX2NvdW50Q29sdW1uc1Nob3crKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cblxuICAgICAgICBpZiAoaXNDaGFuZ2UpIHtcbiAgICAgICAgICAgIFRhYmxlUHJpdmF0ZS5fdHJpZ2dlcih0aGlzLCAnY29sdW1uc19jaGFuZ2UnKTtcbiAgICAgICAgICAgIHRoaXMucmVmcmVzaCgpO1xuICAgICAgICB9XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiDQodC60YDRi9GC0LjQtSDQutC+0LvQvtC90L7QulxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGNvbHVtbnNcbiAgICAgKi9cbiAgICBoaWRlQ29sdW1ucyhjb2x1bW5zKSB7XG5cbiAgICAgICAgaWYgKCAhIEFycmF5LmlzQXJyYXkoY29sdW1ucykpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBpc0NoYW5nZSA9IGZhbHNlO1xuICAgICAgICBsZXQgdGFibGUgICAgPSB0aGlzO1xuXG4gICAgICAgIHRoaXMuX2NvdW50Q29sdW1uc1Nob3cgPSAwO1xuXG5cbiAgICAgICAgdGhpcy5fY29sdW1ucy5tYXAoZnVuY3Rpb24gKGNvbHVtbikge1xuICAgICAgICAgICAgbGV0IG9wdGlvbnMgPSBjb2x1bW4uZ2V0T3B0aW9ucygpO1xuXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnZmllbGQnKSAmJlxuICAgICAgICAgICAgICAgIHR5cGVvZiBvcHRpb25zLmZpZWxkID09PSAnc3RyaW5nJyAmJlxuICAgICAgICAgICAgICAgIGNvbHVtbnMuaW5kZXhPZihvcHRpb25zLmZpZWxkKSA+PSAwICYmXG4gICAgICAgICAgICAgICAgY29sdW1uLmlzU2hvdygpXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBjb2x1bW4uc2V0U2hvdyhmYWxzZSk7XG4gICAgICAgICAgICAgICAgaXNDaGFuZ2UgPSB0cnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoY29sdW1uLmlzU2hvdygpKSB7XG4gICAgICAgICAgICAgICAgdGFibGUuX2NvdW50Q29sdW1uc1Nob3crKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKGlzQ2hhbmdlKSB7XG4gICAgICAgICAgICBUYWJsZVByaXZhdGUuX3RyaWdnZXIodGhpcywgJ2NvbHVtbnNfY2hhbmdlJyk7XG4gICAgICAgICAgICB0aGlzLnJlZnJlc2goKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC/0L7QuNGB0LrQvtCy0YvRhSDQtNCw0L3QvdGL0YVcbiAgICAgKiBAcHJvcGVydHkge2Jvb2xlYW59IGV4dE9wdGlvbnNcbiAgICAgKiBAcmV0dXJuIHsqW119XG4gICAgICovXG4gICAgZ2V0U2VhcmNoRGF0YShleHRPcHRpb25zKSB7XG5cbiAgICAgICAgbGV0IHNlYXJjaERhdGEgPSBbXTtcblxuICAgICAgICB0aGlzLl9zZWFyY2gubWFwKGZ1bmN0aW9uIChjb250cm9sKSB7XG4gICAgICAgICAgICBsZXQgZmllbGQgPSBjb250cm9sLmdldEZpZWxkKCk7XG5cbiAgICAgICAgICAgIGlmIChmaWVsZCkge1xuICAgICAgICAgICAgICAgIGxldCB2YWx1ZSA9IGNvbnRyb2wuZ2V0VmFsdWUoKTtcblxuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgc2VhcmNoID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgZmllbGQ6IGZpZWxkLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGV4dE9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlYXJjaC5maWx0ZXIgPSB0eXBlb2YgY29udHJvbC5maWx0ZXIgPT09ICdmdW5jdGlvbicgPyBjb250cm9sLmZpbHRlciA6IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWFyY2gudHlwZSAgID0gY29udHJvbC5fb3B0aW9ucy50eXBlO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgc2VhcmNoRGF0YS5wdXNoKHNlYXJjaCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gc2VhcmNoRGF0YTtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSDQtNCw0L3QvdGL0YUg0LjQtyDRhNC40LvRjNGC0YDQvtCyXG4gICAgICogQHByb3BlcnR5IHtib29sZWFufSBleHRPcHRpb25zXG4gICAgICogQHJldHVybiB7KltdfVxuICAgICAqL1xuICAgIGdldEZpbHRlckRhdGEoZXh0T3B0aW9ucykge1xuXG4gICAgICAgIGxldCBmaWx0ZXJEYXRhID0gW107XG5cbiAgICAgICAgdGhpcy5fZmlsdGVycy5tYXAoZnVuY3Rpb24gKGNvbnRyb2wpIHtcbiAgICAgICAgICAgIGxldCBmaWVsZCA9IGNvbnRyb2wuZ2V0RmllbGQoKTtcblxuICAgICAgICAgICAgaWYgKGZpZWxkKSB7XG4gICAgICAgICAgICAgICAgbGV0IHZhbHVlID0gY29udHJvbC5nZXRWYWx1ZSgpO1xuXG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBmaWx0ZXIgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmaWVsZDogZmllbGQsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAoZXh0T3B0aW9ucykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZmlsdGVyLmZpbHRlciA9IHR5cGVvZiBjb250cm9sLmZpbHRlciA9PT0gJ2Z1bmN0aW9uJyA/IGNvbnRyb2wuZmlsdGVyIDogbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGZpbHRlckRhdGEucHVzaChmaWx0ZXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIGZpbHRlckRhdGE7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiDQn9C+0LjRgdC6INC/0L4g0YLQsNCx0LvQuNGG0LUg0YEg0LjRgdC/0L7Qu9GM0LfQvtCy0LDQvdC40LXQvCDQtNCw0L3QvdGL0YUg0LjQtyDQv9C+0LjRgdC60LAg0Lgg0YTQuNC70YzRgtGA0L7QslxuICAgICAqL1xuICAgIHNlYXJjaFJlY29yZHMoKSB7XG5cbiAgICAgICAgbGV0IHNlYXJjaERhdGEgPSB0aGlzLmdldFNlYXJjaERhdGEoKTtcbiAgICAgICAgbGV0IGZpbHRlckRhdGEgPSB0aGlzLmdldEZpbHRlckRhdGEoKTtcblxuICAgICAgICB0aGlzLl9wYWdlID0gMTtcblxuICAgICAgICBpZiAodGhpcy5faXNSZWNvcmRzUmVxdWVzdCkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGlzLl9vcHRpb25zLnJlY29yZHNSZXF1ZXN0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5sb2FkQnlGdW5jdGlvbih0aGlzLl9vcHRpb25zLnJlY29yZHNSZXF1ZXN0KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5sb2FkKHRoaXMuX29wdGlvbnMucmVjb3Jkc1JlcXVlc3QudXJsLCB0aGlzLl9vcHRpb25zLnJlY29yZHNSZXF1ZXN0Lm1ldGhvZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBUYWJsZVByaXZhdGUuc2VhcmNoTG9jYWxSZWNvcmRzKHRoaXMpO1xuICAgICAgICAgICAgdGhpcy5yZWZyZXNoKCk7XG4gICAgICAgIH1cblxuXG4gICAgICAgIFRhYmxlUHJpdmF0ZS5fdHJpZ2dlcih0aGlzLCAnZmlsdGVyc19jaGFuZ2UnLCBbIGZpbHRlckRhdGEgXSk7XG4gICAgICAgIFRhYmxlUHJpdmF0ZS5fdHJpZ2dlcih0aGlzLCAnc2VhcmNoX2NoYW5nZScsIFsgc2VhcmNoRGF0YSBdKTtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqINCe0YfQuNGB0YLQutCwINC/0L7QuNGB0LrQvtCy0YvRhSDQtNCw0L3QvdGL0YVcbiAgICAgKi9cbiAgICBjbGVhclNlYXJjaCgpIHtcblxuICAgICAgICAkLmVhY2godGhpcy5fc2VhcmNoLCBmdW5jdGlvbiAoa2V5LCBzZWFyY2gpIHtcbiAgICAgICAgICAgIHNlYXJjaC5zZXRWYWx1ZShudWxsKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5zZWFyY2hSZWNvcmRzKCk7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiDQntGH0LjRgdGC0LrQsCDQv9C+0LjRgdC60L7QstGL0YUg0LTQsNC90L3Ri9GFINCyINGE0LjQu9GM0YLRgNCw0YVcbiAgICAgKi9cbiAgICBjbGVhckZpbHRlcnMoKSB7XG5cbiAgICAgICAgJC5lYWNoKHRoaXMuX2ZpbHRlcnMsIGZ1bmN0aW9uIChrZXksIGZpbHRlcikge1xuICAgICAgICAgICAgZmlsdGVyLnNldFZhbHVlKG51bGwpO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLnNlYXJjaFJlY29yZHMoKTtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSDQt9Cw0L/QuNGB0Lgg0L/QviDQuNC90LTQtdC60YHRg1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfG51bWJlcn0gaW5kZXhcbiAgICAgKiBAcmV0dXJuIHtvYmplY3R8bnVsbH1cbiAgICAgKi9cbiAgICBnZXRSZWNvcmRCeUluZGV4KGluZGV4KSB7XG5cbiAgICAgICAgaWYgKFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIGluZGV4KSA8IDAgfHwgaW5kZXggPT09ICcnKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGluZGV4ID0gTnVtYmVyKGluZGV4KTtcblxuICAgICAgICBpZiAoaW5kZXggPD0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgcmVjb3JkID0gbnVsbDtcblxuICAgICAgICAkLmVhY2godGhpcy5fcmVjb3JkcywgZnVuY3Rpb24gKGtleSwgcmVjb3JkSXRlbSkge1xuICAgICAgICAgICAgaWYgKHJlY29yZEl0ZW0uaW5kZXggPT09IGluZGV4KSB7XG4gICAgICAgICAgICAgICAgcmVjb3JkID0ge1xuICAgICAgICAgICAgICAgICAgICBpbmRleDogcmVjb3JkSXRlbS5pbmRleCxcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogJC5leHRlbmQodHJ1ZSwge30sIHJlY29yZEl0ZW0uZGF0YSksXG4gICAgICAgICAgICAgICAgICAgIG1ldGE6IHJlY29yZEl0ZW0ubWV0YSA/ICQuZXh0ZW5kKHRydWUsIHt9LCByZWNvcmRJdGVtLm1ldGEpIDogbnVsbCxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHJlY29yZDtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSDQt9Cw0L/QuNGB0Lgg0L/QviBpZFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZFxuICAgICAqIEByZXR1cm4ge29iamVjdHxudWxsfVxuICAgICAqL1xuICAgIGdldFJlY29yZEJ5SWQoaWQpIHtcblxuICAgICAgICByZXR1cm4gdGhpcy5nZXRSZWNvcmRCeUZpZWxkKHRoaXMuX29wdGlvbnMucHJpbWFyeUtleSwgaWQpO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC30LDQv9C40YHQuCDQv9C+INC/0L7Qu9GOINC4INC10LPQviDQt9C90LDRh9C10L3QuNGOXG4gICAgICogQHBhcmFtIHtzdHJpbmd9ICAgICAgICBmaWVsZFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfG51bWJlcn0gdmFsdWVcbiAgICAgKiBAcmV0dXJuIHtvYmplY3R8bnVsbH1cbiAgICAgKi9cbiAgICBnZXRSZWNvcmRCeUZpZWxkKGZpZWxkLCB2YWx1ZSkge1xuXG4gICAgICAgIGxldCByZWNvcmQgPSBudWxsO1xuXG4gICAgICAgICQuZWFjaCh0aGlzLl9yZWNvcmRzLCBmdW5jdGlvbiAoa2V5LCByZWNvcmRJdGVtKSB7XG4gICAgICAgICAgICBpZiAocmVjb3JkSXRlbS5kYXRhLmhhc093blByb3BlcnR5KGZpZWxkKSAmJiByZWNvcmRJdGVtLmRhdGFbZmllbGRdID09PSB2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHJlY29yZCA9ICQuZXh0ZW5kKHRydWUsIHt9LCByZWNvcmRJdGVtKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHJlY29yZDtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSDQutC+0L3RgtGA0L7Qu9CwINC/0L4g0LXQs9C+IGlkXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGlkXG4gICAgICogQHJldHVybiB7b2JqZWN0fVxuICAgICAqL1xuICAgIGdldENvbnRyb2xCeUlkKGlkKSB7XG5cbiAgICAgICAgbGV0IHJlc3VsdCA9IG51bGw7XG5cbiAgICAgICAgJC5lYWNoKHRoaXMuX2NvbnRyb2xzLCBmdW5jdGlvbiAoa2V5LCBjb250cm9sKSB7XG4gICAgICAgICAgICBpZiAoY29udHJvbC5oYXNPd25Qcm9wZXJ0eSgnZ2V0SWQnKSAmJlxuICAgICAgICAgICAgICAgIHR5cGVvZiBjb250cm9sLmdldElkID09PSAnZnVuY3Rpb24nICYmXG4gICAgICAgICAgICAgICAgY29udHJvbC5nZXRJZCgpID09PSBpZFxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gY29udHJvbDtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0LrQvtC90YLRgNC+0LvQsCDQv9C+0LjRgdC60LAg0L/QviDQtdCz0L4gaWRcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWRcbiAgICAgKiBAcmV0dXJuIHtvYmplY3R9XG4gICAgICovXG4gICAgZ2V0U2VhcmNoQ29udHJvbEJ5SWQoaWQpIHtcblxuICAgICAgICBsZXQgcmVzdWx0ID0gbnVsbDtcblxuICAgICAgICAkLmVhY2godGhpcy5fc2VhcmNoLCBmdW5jdGlvbiAoa2V5LCBzZWFyY2gpIHtcbiAgICAgICAgICAgIGlmIChzZWFyY2guaGFzT3duUHJvcGVydHkoJ2dldElkJykgJiZcbiAgICAgICAgICAgICAgICB0eXBlb2Ygc2VhcmNoLmdldElkID09PSAnZnVuY3Rpb24nICYmXG4gICAgICAgICAgICAgICAgc2VhcmNoLmdldElkKCkgPT09IGlkXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBzZWFyY2g7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICog0KHQvtGA0YLQuNGA0L7QstC60LAg0L/QviDQv9C+0LvRj9C8XG4gICAgICogQHBhcmFtIHtBcnJheX0gc29ydGluZ1xuICAgICAqL1xuICAgIHNvcnRGaWVsZHMoc29ydGluZykge1xuXG4gICAgICAgIGlmICggISBBcnJheS5pc0FycmF5KHNvcnRpbmcpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgdGhhdCAgICAgICAgICAgICAgPSB0aGlzO1xuICAgICAgICBsZXQgY29sdW1uc0NvbnZlcnRlcnMgPSB7fTtcblxuICAgICAgICB0aGlzLl9zb3J0ID0gW107XG5cbiAgICAgICAgJC5lYWNoKHNvcnRpbmcsIGZ1bmN0aW9uIChrZXksIHNvcnQpIHtcbiAgICAgICAgICAgIGlmICggISBUYWJsZVV0aWxzLmlzT2JqZWN0KHNvcnQpIHx8XG4gICAgICAgICAgICAgICAgICEgc29ydC5oYXNPd25Qcm9wZXJ0eSgnZmllbGQnKSB8fFxuICAgICAgICAgICAgICAgICAhIHNvcnQuaGFzT3duUHJvcGVydHkoJ29yZGVyJykgfHxcbiAgICAgICAgICAgICAgICB0eXBlb2Ygc29ydC5maWVsZCAhPT0gJ3N0cmluZycgfHxcbiAgICAgICAgICAgICAgICB0eXBlb2Ygc29ydC5vcmRlciAhPT0gJ3N0cmluZycgfHxcbiAgICAgICAgICAgICAgICAgISBzb3J0LmZpZWxkIHx8XG4gICAgICAgICAgICAgICAgICEgc29ydC5vcmRlclxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgIGxldCBjb2x1bW5Tb3J0YWJsZSA9IGZhbHNlO1xuXG4gICAgICAgICAgICAkLmVhY2godGhhdC5fY29sdW1ucywgZnVuY3Rpb24gKGtleSwgY29sdW1uKSB7XG4gICAgICAgICAgICAgICAgbGV0IG9wdGlvbnMgPSBjb2x1bW4uZ2V0T3B0aW9ucygpO1xuXG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuaGFzT3duUHJvcGVydHkoJ2ZpZWxkJykgJiZcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnc29ydGFibGUnKSAmJlxuICAgICAgICAgICAgICAgICAgICB0eXBlb2Ygb3B0aW9ucy5maWVsZCA9PT0gJ3N0cmluZycgJiZcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5maWVsZCA9PT0gc29ydC5maWVsZCAmJlxuICAgICAgICAgICAgICAgICAgICBvcHRpb25zLnNvcnRhYmxlXG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbHVtblNvcnRhYmxlID0gdHJ1ZTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGNvbHVtbi5jb252ZXJ0VG9TdHJpbmcgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbHVtbnNDb252ZXJ0ZXJzW29wdGlvbnMuZmllbGRdID0gY29sdW1uLmNvbnZlcnRUb1N0cmluZztcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuXG4gICAgICAgICAgICBpZiAoY29sdW1uU29ydGFibGUpIHtcbiAgICAgICAgICAgICAgICB0aGF0Ll9zb3J0LnB1c2goe1xuICAgICAgICAgICAgICAgICAgICBmaWVsZDogc29ydC5maWVsZCxcbiAgICAgICAgICAgICAgICAgICAgb3JkZXI6IHNvcnQub3JkZXIsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG5cbiAgICAgICAgdGhpcy5fcGFnZSA9IDE7XG5cbiAgICAgICAgaWYgKHRoaXMuX3NvcnQubGVuZ3RoID49IDApIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9pc1JlY29yZHNSZXF1ZXN0KSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGlzLl9vcHRpb25zLnJlY29yZHNSZXF1ZXN0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubG9hZEJ5RnVuY3Rpb24odGhpcy5fb3B0aW9ucy5yZWNvcmRzUmVxdWVzdCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2FkKHRoaXMuX29wdGlvbnMucmVjb3Jkc1JlcXVlc3QudXJsLCB0aGlzLl9vcHRpb25zLnJlY29yZHNSZXF1ZXN0Lm1ldGhvZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFRhYmxlUHJpdmF0ZS5zZXRDb2x1bW5zU29ydCh0aGlzLCB0aGlzLl9zb3J0KTtcblxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9yZWNvcmRzID0gVGFibGVQcml2YXRlLnNvcnRSZWNvcmRzQnlGaWVsZHModGhpcy5fcmVjb3JkcywgdGhpcy5fc29ydCwgY29sdW1uc0NvbnZlcnRlcnMpO1xuICAgICAgICAgICAgICAgIHRoaXMucmVmcmVzaCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgVGFibGVQcml2YXRlLl90cmlnZ2VyKHRoaXMsICdyZWNvcmRzX3NvcnQnLCBbIHRoaXMgXSk7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiDQodC+0YDRgtC40YDQvtCy0LrQsCDQv9C+INGD0LzQvtC70YfQsNC90LjRjlxuICAgICAqL1xuICAgIHNvcnREZWZhdWx0KCkge1xuXG4gICAgICAgIHRoaXMuX3NvcnQgPSBbXTtcblxuICAgICAgICBpZiAodGhpcy5faXNSZWNvcmRzUmVxdWVzdCkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGlzLl9vcHRpb25zLnJlY29yZHNSZXF1ZXN0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5sb2FkQnlGdW5jdGlvbih0aGlzLl9vcHRpb25zLnJlY29yZHNSZXF1ZXN0KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5sb2FkKHRoaXMuX29wdGlvbnMucmVjb3Jkc1JlcXVlc3QudXJsLCB0aGlzLl9vcHRpb25zLnJlY29yZHNSZXF1ZXN0Lm1ldGhvZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBUYWJsZVByaXZhdGUuc2V0Q29sdW1uc1NvcnQodGhpcyk7XG5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX3JlY29yZHMgPSBUYWJsZVByaXZhdGUuc29ydFJlY29yZHNCeVNlcSh0aGlzLl9yZWNvcmRzKTtcbiAgICAgICAgICAgIHRoaXMucmVmcmVzaCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgVGFibGVQcml2YXRlLl90cmlnZ2VyKHRoaXMsICdyZWNvcmRzX3NvcnQnLCBbIHRoaXMgXSk7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiDQo9C00LDQu9C10L3QuNC1INGB0YLRgNC+0LrQuCDQuNC3INGC0LDQsdC70LjRhtGLINC/0L4g0LjQvdC00LXQutGB0YNcbiAgICAgKiBAcGFyYW0gaW5kZXhcbiAgICAgKi9cbiAgICByZW1vdmVSZWNvcmRCeUluZGV4KGluZGV4KSB7XG5cbiAgICAgICAgbGV0IHJlY29yZEtleSA9IG51bGw7XG5cbiAgICAgICAgJC5lYWNoKHRoaXMuX3JlY29yZHMsIGZ1bmN0aW9uIChrZXksIHJlY29yZEl0ZW0pIHtcbiAgICAgICAgICAgIGlmIChyZWNvcmRJdGVtLmluZGV4ID09PSBpbmRleCkge1xuICAgICAgICAgICAgICAgIHJlY29yZEtleSA9IGtleTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChyZWNvcmRLZXkgIT09IG51bGwgJiYgcmVjb3JkS2V5ID49IDApIHtcbiAgICAgICAgICAgIHRoaXMuX3JlY29yZHMuc3BsaWNlKHJlY29yZEtleSwgMSk7XG5cbiAgICAgICAgICAgIGxldCB0aGF0ID0gdGhpcztcbiAgICAgICAgICAgIGxldCB0ciAgID0gVGFibGVFbGVtZW50cy5nZXRUckJ5SW5kZXgodGhpcy5nZXRJZCgpLCBpbmRleCk7XG5cbiAgICAgICAgICAgIGlmICh0ci5sZW5ndGggPj0gMCkge1xuICAgICAgICAgICAgICAgIGxldCBlbXB0eVJlY29yZHMgPSB0aGF0Ll9yZWNvcmRzLmxlbmd0aCA9PT0gMDtcblxuICAgICAgICAgICAgICAgIHRyLmZhZGVPdXQoJ2Zhc3QnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHRyLnJlbW92ZSgpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChlbXB0eVJlY29yZHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0Ym9keSA9IFRhYmxlRWxlbWVudHMuZ2V0VGFibGVUYm9keSh0aGF0LmdldElkKCkpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB0Ym9keS5hcHBlbmQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgVGFibGVVdGlscy5yZW5kZXIoVGFibGVUcGxbJ3RhYmxlL3JlY29yZC9lbXB0eS5odG1sJ10sIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sdW1uc0NvdW50OiB0aGF0Ll9jb3VudENvbHVtbnNTaG93LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYW5nOiB0aGF0LmdldExhbmcoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLl9yZWNvcmRzTnVtYmVyLS07XG4gICAgICAgIH1cbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqINCU0L7QsdCw0LLQu9C10L3QuNC1INGB0YLRgNC+0LrQuCDQsiDRgtCw0LHQu9C40YbRgyDQv9C+0YHQu9C1INGB0YLRgNC+0LrQuCDRgSDQuNC90LTQtdC60YHQvtC8XG4gICAgICogQHBhcmFtIHtvYmplY3R9IHJlY29yZERhdGFcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gaW5kZXhcbiAgICAgKi9cbiAgICBhZGRSZWNvcmRBZnRlckluZGV4KHJlY29yZERhdGEsIGluZGV4KSB7XG5cbiAgICAgICAgbGV0IHRyID0gVGFibGVFbGVtZW50cy5nZXRUckJ5SW5kZXgodGhpcy5nZXRJZCgpLCBpbmRleCk7XG5cbiAgICAgICAgaWYgKHRyLmxlbmd0aCA+PSAwKSB7XG4gICAgICAgICAgICBsZXQgcmVjb3JkID0gVGFibGVQcml2YXRlLmFkZFJlY29yZCh0aGlzLCByZWNvcmREYXRhLCBpbmRleCk7XG5cbiAgICAgICAgICAgIGlmIChyZWNvcmQpIHtcbiAgICAgICAgICAgICAgICBUYWJsZUVsZW1lbnRzLmdldFRyRW1wdHkodGhpcy5nZXRJZCgpKS5yZW1vdmUoKTtcblxuICAgICAgICAgICAgICAgIHRyLmFmdGVyKFxuICAgICAgICAgICAgICAgICAgICBUYWJsZVJlbmRlci5yZW5kZXJSZWNvcmQodGhpcywgcmVjb3JkKVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgdGhpcy5fcmVjb3Jkc051bWJlcisrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiDQlNC+0LHQsNCy0LvQtdC90LjQtSDRgdGC0YDQvtC60Lgg0LIg0YLQsNCx0LvQuNGG0YMg0L/QtdGA0LXQtCDRgdGC0YDQvtC60L7QuSDRgSDQuNC90LTQtdC60YHQvtC8XG4gICAgICogQHBhcmFtIHtvYmplY3R9IHJlY29yZERhdGFcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gaW5kZXhcbiAgICAgKi9cbiAgICBhZGRSZWNvcmRCZWZvcmVJbmRleChyZWNvcmREYXRhLCBpbmRleCkge1xuXG4gICAgICAgIGxldCB0ciA9IFRhYmxlRWxlbWVudHMuZ2V0VHJCeUluZGV4KHRoaXMuZ2V0SWQoKSwgaW5kZXgpO1xuXG4gICAgICAgIGlmICh0ci5sZW5ndGggPj0gMCkge1xuICAgICAgICAgICAgbGV0IHJlY29yZCA9IFRhYmxlUHJpdmF0ZS5hZGRSZWNvcmRCZWZvcmUodGhpcywgcmVjb3JkRGF0YSwgaW5kZXgpO1xuXG4gICAgICAgICAgICBpZiAocmVjb3JkKSB7XG4gICAgICAgICAgICAgICAgVGFibGVFbGVtZW50cy5nZXRUckVtcHR5KHRoaXMuZ2V0SWQoKSkucmVtb3ZlKCk7XG5cbiAgICAgICAgICAgICAgICB0ci5iZWZvcmUoXG4gICAgICAgICAgICAgICAgICAgIFRhYmxlUmVuZGVyLnJlbmRlclJlY29yZCh0aGlzLCByZWNvcmQpXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9yZWNvcmRzTnVtYmVyKys7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqINCU0L7QsdCw0LLQu9C10L3QuNC1INGB0YLRgNC+0LrQuCDQsiDQvdCw0YfQsNC70L4g0YLQsNCx0LvQuNGG0YtcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gcmVjb3JkRGF0YVxuICAgICAqL1xuICAgIGFkZFJlY29yZEZpcnN0KHJlY29yZERhdGEpIHtcblxuICAgICAgICBsZXQgdGJvZHkgPSBUYWJsZUVsZW1lbnRzLmdldFRhYmxlVGJvZHkodGhpcy5nZXRJZCgpKTtcblxuICAgICAgICBpZiAodGJvZHkubGVuZ3RoID49IDApIHtcbiAgICAgICAgICAgIGxldCByZWNvcmQgPSBUYWJsZVByaXZhdGUuYWRkUmVjb3JkKHRoaXMsIHJlY29yZERhdGEsIDApO1xuXG4gICAgICAgICAgICBpZiAocmVjb3JkKSB7XG4gICAgICAgICAgICAgICAgVGFibGVFbGVtZW50cy5nZXRUckVtcHR5KHRoaXMuZ2V0SWQoKSkucmVtb3ZlKCk7XG5cbiAgICAgICAgICAgICAgICB0Ym9keS5wcmVwZW5kKFxuICAgICAgICAgICAgICAgICAgICBUYWJsZVJlbmRlci5yZW5kZXJSZWNvcmQodGhpcywgcmVjb3JkKVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgdGhpcy5fcmVjb3Jkc051bWJlcisrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiDQlNC+0LHQsNCy0LvQtdC90LjQtSDRgdGC0YDQvtC60Lgg0LIg0LrQvtC90LXRhiDRgtCw0LHQu9C40YbRi1xuICAgICAqIEBwYXJhbSB7b2JqZWN0fSByZWNvcmREYXRhXG4gICAgICovXG4gICAgYWRkUmVjb3JkTGFzdChyZWNvcmREYXRhKSB7XG5cbiAgICAgICAgbGV0IHRib2R5ID0gVGFibGVFbGVtZW50cy5nZXRUYWJsZVRib2R5KHRoaXMuZ2V0SWQoKSk7XG5cbiAgICAgICAgaWYgKHRib2R5Lmxlbmd0aCA+PSAwKSB7XG4gICAgICAgICAgICBsZXQgcmVjb3JkID0gVGFibGVQcml2YXRlLmFkZFJlY29yZCh0aGlzLCByZWNvcmREYXRhKTtcblxuICAgICAgICAgICAgaWYgKHJlY29yZCkge1xuICAgICAgICAgICAgICAgIFRhYmxlRWxlbWVudHMuZ2V0VHJFbXB0eSh0aGlzLmdldElkKCkpLnJlbW92ZSgpO1xuXG4gICAgICAgICAgICAgICAgdGJvZHkuYXBwZW5kKFxuICAgICAgICAgICAgICAgICAgICBUYWJsZVJlbmRlci5yZW5kZXJSZWNvcmQodGhpcywgcmVjb3JkKVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgdGhpcy5fcmVjb3Jkc051bWJlcisrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiDQo9GB0YLQsNC90L7QstC60LAg0LfQsNC/0LjRgdC10Lkg0LTQu9GPINGC0LDQsdC70LjRhtGLXG4gICAgICogQHBhcmFtIHtBcnJheX0gIHJlY29yZHNcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdG90YWxcbiAgICAgKi9cbiAgICBzZXRSZWNvcmRzKHJlY29yZHMsIHRvdGFsKSB7XG5cbiAgICAgICAgaWYgKCAhIEFycmF5LmlzQXJyYXkocmVjb3JkcykpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX3JlY29yZHNUb3RhbCA9IFRhYmxlVXRpbHMuaXNOdW1lcmljKHRvdGFsKSA/IHBhcnNlSW50KHRvdGFsKSA6IHJlY29yZHMubGVuZ3RoO1xuXG4gICAgICAgIFRhYmxlUHJpdmF0ZS5zZXRSZWNvcmRzKHRoaXMsIHJlY29yZHMpO1xuXG4gICAgICAgIGlmIChyZWNvcmRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHRoaXMuX3JlY29yZHNOdW1iZXIgPSB0aGlzLl9wYWdlID09PSAxXG4gICAgICAgICAgICAgICAgPyAxXG4gICAgICAgICAgICAgICAgOiAoKHRoaXMuX3BhZ2UgLSAxKSAqIHRoaXMuX3JlY29yZHNQZXJQYWdlKSArIDE7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgcmVjb3Jkc0VsZW1lbnRzID0gVGFibGVSZW5kZXIucmVuZGVyUmVjb3Jkcyh0aGlzLCB0aGlzLl9yZWNvcmRzKTtcbiAgICAgICAgbGV0IHRhYmxlQm9keSAgICAgICA9IFRhYmxlRWxlbWVudHMuZ2V0VGFibGVUYm9keSh0aGlzLmdldElkKCkpO1xuXG4gICAgICAgIHRhYmxlQm9keS5odG1sKCcnKTtcblxuICAgICAgICAkLmVhY2gocmVjb3Jkc0VsZW1lbnRzLCBmdW5jdGlvbiAoa2V5LCByZWNvcmRFbGVtZW50KSB7XG4gICAgICAgICAgICB0YWJsZUJvZHkuYXBwZW5kKHJlY29yZEVsZW1lbnQpO1xuICAgICAgICB9KTtcblxuXG4gICAgICAgIFRhYmxlUHJpdmF0ZS5fdHJpZ2dlcih0aGlzLCAncmVjb3Jkc19zaG93JywgWyB0aGlzIF0pO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC60L7Qu9C40YfQtdGB0YLQstCwINGB0YLRgNC+0LpcbiAgICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAgICovXG4gICAgZ2V0UmVjb3Jkc0NvdW50KCkge1xuXG4gICAgICAgIGxldCBjb3VudCA9IDA7XG5cbiAgICAgICAgaWYgKHRoaXMuX2lzUmVjb3Jkc1JlcXVlc3QpIHtcbiAgICAgICAgICAgIGNvdW50ID0gdGhpcy5fcmVjb3Jkc1RvdGFsO1xuXG4gICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgIHRoaXMuX3JlY29yZHMubWFwKGZ1bmN0aW9uIChyZWNvcmQpIHtcbiAgICAgICAgICAgICAgICBpZiAocmVjb3JkLnNob3cpIHtcbiAgICAgICAgICAgICAgICAgICAgY291bnQrKztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjb3VudDtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqINCg0LDRgdC60YDRi9GC0LjQtSAvINGB0LrRgNGL0YLQuNC1INC00L7Qv9C+0LvQvdC40YLQtdC70YzQvdGL0YUg0LTQsNC90L3Ri9GFINGB0YLRgNC+0LrQuFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVjb3JkSW5kZXhcbiAgICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fGpRdWVyeXxzdHJpbmd8QXJyYXl8ZnVuY3Rpb259IGNvbnRlbnRcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzUmVidWlsZCAtIHRydWUgZGVmYXVsdFxuICAgICAqL1xuICAgIGV4cGFuZFJlY29yZENvbnRlbnQocmVjb3JkSW5kZXgsIGNvbnRlbnQsIGlzUmVidWlsZCkge1xuXG4gICAgICAgIGxldCByZWNvcmRFbGVtZW50ICA9IFRhYmxlRWxlbWVudHMuZ2V0VHJCeUluZGV4KHRoaXMuZ2V0SWQoKSwgcmVjb3JkSW5kZXgpO1xuICAgICAgICBsZXQgcmVjb3JkRXhwYW5kZWQgPSBUYWJsZUVsZW1lbnRzLmdldEV4cGFuZFJvdyhyZWNvcmRFbGVtZW50KTtcblxuICAgICAgICBpZiAocmVjb3JkRWxlbWVudC5oYXNDbGFzcygncmVjb3JkLWV4cGFuZGVkJykpIHtcblxuICAgICAgICAgICAgaWYgKHJlY29yZEV4cGFuZGVkKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlzUmVidWlsZCA9PT0gdW5kZWZpbmVkIHx8IGlzUmVidWlsZCkge1xuICAgICAgICAgICAgICAgICAgICBUYWJsZUVsZW1lbnRzLnJlbW92ZUV4cGFuZFJvdyhyZWNvcmRFeHBhbmRlZCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgVGFibGVFbGVtZW50cy5oaWRlRXhwYW5kUm93KHJlY29yZEV4cGFuZGVkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJlY29yZEVsZW1lbnQucmVtb3ZlQ2xhc3MoJ3JlY29yZC1leHBhbmRlZCcpO1xuICAgICAgICAgICAgVGFibGVQcml2YXRlLl90cmlnZ2VyKHRoaXMsICdyZWNvcmRfZXhwYW5kX2hpZGUnLCBbcmVjb3JkSW5kZXhdKTtcblxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHJlY29yZEV4cGFuZGVkKSB7XG4gICAgICAgICAgICAgICAgVGFibGVFbGVtZW50cy5zaG93RXhwYW5kUm93KHJlY29yZEV4cGFuZGVkKTtcbiAgICAgICAgICAgICAgICByZWNvcmRFbGVtZW50LmFkZENsYXNzKCdyZWNvcmQtZXhwYW5kZWQnKTtcbiAgICAgICAgICAgICAgICBUYWJsZVByaXZhdGUuX3RyaWdnZXIodGhpcywgJ3JlY29yZF9leHBhbmRfc2hvdycsIFtyZWNvcmRJbmRleF0pO1xuXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGxldCByZWNvcmRJbmRleCA9IHJlY29yZEVsZW1lbnQuZGF0YSgncmVjb3JkLWluZGV4Jyk7XG5cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNhbGxiYWNrUmVzdWx0ID0gY29udGVudCgpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChjYWxsYmFja1Jlc3VsdCBpbnN0YW5jZW9mIFByb21pc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0aGF0ID0gdGhpcztcblxuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2tSZXN1bHRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRhYmxlRWxlbWVudHMuYWRkRXhwYW5kUm93KHRoYXQsIHJlY29yZEVsZW1lbnQsIHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRhYmxlUHJpdmF0ZS5fdHJpZ2dlcih0aGF0LCAncmVjb3JkX2V4cGFuZF9zaG93JywgW3JlY29yZEluZGV4XSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRhYmxlRWxlbWVudHMuYWRkRXhwYW5kUm93KHRoYXQsIHJlY29yZEVsZW1lbnQsICcnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVGFibGVQcml2YXRlLl90cmlnZ2VyKHRoYXQsICdyZWNvcmRfZXhwYW5kX3Nob3cnLCBbcmVjb3JkSW5kZXhdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICB9IGVsc2V7XG4gICAgICAgICAgICAgICAgICAgICAgICBUYWJsZUVsZW1lbnRzLmFkZEV4cGFuZFJvdyh0aGlzLCByZWNvcmRFbGVtZW50LCBjYWxsYmFja1Jlc3VsdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBUYWJsZVByaXZhdGUuX3RyaWdnZXIodGhpcywgJ3JlY29yZF9leHBhbmRfc2hvdycsIFtyZWNvcmRJbmRleF0pO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBUYWJsZUVsZW1lbnRzLmFkZEV4cGFuZFJvdyh0aGlzLCByZWNvcmRFbGVtZW50LCBjb250ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgVGFibGVQcml2YXRlLl90cmlnZ2VyKHRoaXMsICdyZWNvcmRfZXhwYW5kX3Nob3cnLCBbcmVjb3JkSW5kZXhdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqINCg0LDRgdC60YDRi9GC0LjQtSAvINGB0LrRgNGL0YLQuNC1INC00L7Qv9C+0LvQvdC40YLQtdC70YzQvdGL0YUg0LTQsNC90L3Ri9GFINGB0YLRgNC+0LrQuFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSAgcmVjb3JkSW5kZXhcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gIHVybFxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gaXNSZWJ1aWxkXG4gICAgICovXG4gICAgZXhwYW5kUmVjb3JkVXJsKHJlY29yZEluZGV4LCB1cmwsIGlzUmVidWlsZCkge1xuXG4gICAgICAgIGxldCB0aGF0ID0gdGhpcztcblxuICAgICAgICB0aGlzLmV4cGFuZFJlY29yZENvbnRlbnQocmVjb3JkSW5kZXgsIGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgdGhhdC5sb2NrKCk7XG5cbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG5cbiAgICAgICAgICAgICAgICAkLmFqYXgoe1xuICAgICAgICAgICAgICAgICAgICBtZXRob2QgOiAnZ2V0JyxcbiAgICAgICAgICAgICAgICAgICAgdXJsICAgIDogdXJsLFxuICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAocmVzcG9uc2UsIHRleHRTdGF0dXMsIHhocikge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHJlc3VsdCA9IHJlc3BvbnNlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHJlc3BvbnNlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChTdHJpbmcoeGhyLmdldFJlc3BvbnNlSGVhZGVyKCdDb250ZW50LVR5cGUnKSkuaW5kZXhPZignYXBwbGljYXRpb24vanNvbicpID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBKU09OLnBhcnNlKHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbih4aHIsIHRleHRTdGF0dXMsIGVycm9yVGhyb3duKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoeGhyLCB0ZXh0U3RhdHVzLCBlcnJvclRocm93bik7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlOiBmdW5jdGlvbih4aHIsIHRleHRTdGF0dXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQudW5sb2NrKCk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICB9LCBpc1JlYnVpbGQpO1xuICAgIH1cbn1cblxuXG5leHBvcnQgZGVmYXVsdCBUYWJsZUluc3RhbmNlOyIsIlxuaW1wb3J0IFRhYmxlSW5zdGFuY2UgZnJvbSAnLi90YWJsZS5pbnN0YW5jZSc7XG5pbXBvcnQgVGFibGVVdGlscyAgICBmcm9tIFwiLi90YWJsZS51dGlsc1wiO1xuXG5sZXQgVGFibGUgPSB7XG5cbiAgICBjb2x1bW5zOiB7fSxcbiAgICBjb250cm9sczoge30sXG4gICAgZmlsdGVyczoge30sXG4gICAgc2VhcmNoOiB7fSxcbiAgICBsYW5nOiB7fSxcblxuICAgIF9pbnN0YW5jZXM6IHt9LFxuICAgIF9zZXR0aW5nczoge1xuICAgICAgICBsYW5nOiAnZW4nLFxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gb3B0aW9uc1xuICAgICAqIEByZXR1cm5zIHtvYmplY3R9XG4gICAgICovXG4gICAgY3JlYXRlOiBmdW5jdGlvbiAob3B0aW9ucykge1xuXG4gICAgICAgIGlmICggISBvcHRpb25zLmhhc093blByb3BlcnR5KCdsYW5nJykgfHwgdHlwZW9mIG9wdGlvbnMubGFuZyAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIG9wdGlvbnMubGFuZyA9IHRoaXMuZ2V0U2V0dGluZygnbGFuZycpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGxhbmdJdGVtcyAgICAgPSB0aGlzLmxhbmcuaGFzT3duUHJvcGVydHkob3B0aW9ucy5sYW5nKSA/IHRoaXMubGFuZ1tvcHRpb25zLmxhbmddIDoge307XG4gICAgICAgIG9wdGlvbnMubGFuZ0l0ZW1zID0gb3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnbGFuZ0l0ZW1zJykgJiYgVGFibGVVdGlscy5pc09iamVjdChvcHRpb25zLmxhbmdJdGVtcylcbiAgICAgICAgICAgID8gJC5leHRlbmQodHJ1ZSwge30sIGxhbmdJdGVtcywgb3B0aW9ucy5sYW5nSXRlbXMpXG4gICAgICAgICAgICA6IGxhbmdJdGVtcztcblxuXG4gICAgICAgIGxldCBpbnN0YW5jZSA9IG5ldyBUYWJsZUluc3RhbmNlKHRoaXMsIG9wdGlvbnMgaW5zdGFuY2VvZiBPYmplY3QgPyBvcHRpb25zIDoge30pO1xuXG4gICAgICAgIGxldCB0YWJsZUlkID0gaW5zdGFuY2UuZ2V0SWQoKTtcbiAgICAgICAgdGhpcy5faW5zdGFuY2VzW3RhYmxlSWRdID0gaW5zdGFuY2U7XG5cbiAgICAgICAgcmV0dXJuIGluc3RhbmNlO1xuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZFxuICAgICAqIEByZXR1cm5zIHtvYmplY3R8bnVsbH1cbiAgICAgKi9cbiAgICBnZXQ6IGZ1bmN0aW9uIChpZCkge1xuXG4gICAgICAgIGlmICggISB0aGlzLl9pbnN0YW5jZXMuaGFzT3duUHJvcGVydHkoaWQpKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICggISAkKCcjY29yZXVpLXRhYmxlLScgKyBpZClbMF0pIHtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9pbnN0YW5jZXNbaWRdO1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5faW5zdGFuY2VzW2lkXTtcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiDQo9GB0YLQsNC90L7QstC60LAg0L3QsNGB0YLRgNC+0LXQulxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBzZXR0aW5nc1xuICAgICAqL1xuICAgIHNldFNldHRpbmdzOiBmdW5jdGlvbihzZXR0aW5ncykge1xuXG4gICAgICAgIHRoaXMuX3NldHRpbmdzID0gJC5leHRlbmQodHJ1ZSwge30sIHRoaXMuX3NldHRpbmdzLCBzZXR0aW5ncyk7XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC30L3QsNGH0LXQvdC40Y8g0L3QsNGB0YLRgNC+0LnQutC4XG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAgICAgKi9cbiAgICBnZXRTZXR0aW5nOiBmdW5jdGlvbihuYW1lKSB7XG5cbiAgICAgICAgbGV0IHZhbHVlID0gbnVsbDtcblxuICAgICAgICBpZiAodGhpcy5fc2V0dGluZ3MuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgICAgIHZhbHVlID0gdGhpcy5fc2V0dGluZ3NbbmFtZV07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBUYWJsZTsiLCJcbmxldCBsYW5nRW4gPSB7XG4gICAgXCJlbXB0eVJlY29yZHNcIjogXCJObyByZWNvcmRzXCIsXG4gICAgXCJsb2FkaW5nXCI6IFwiTG9hZGluZy4uLlwiLFxuICAgIFwidG90YWxcIjogXCJUb3RhbFwiLFxuICAgIFwiYWxsXCI6IFwiQWxsXCIsXG4gICAgXCJjb21wbGV0ZVwiOiBcIkNvbXBsZXRlXCIsXG4gICAgXCJzZWFyY2hcIjogXCJTZWFyY2hcIixcbiAgICBcInNlYXJjaEFjdGlvblwiOiBcIlNlYXJjaFwiLFxuICAgIFwiY2xlYXJcIjogXCJDbGVhclwiLFxuICAgIFwibW9udGhOYW1lc1wiOiBbJ0phbnVhcnknLCdGZWJydWFyeScsJ01hcmNoJywnQXByaWwnLCdNYXknLCdKdW5lJywnSnVseScsJ0F1Z3VzdCcsJ1NlcHRlbWJlcicsJ09jdG9iZXInLCdOb3ZlbWJlcicsJ0RlY2VtYmVyJ10sXG4gICAgXCJtb250aE5hbWVzU2hvcnRcIjogWydKYW4nLCdGZWInLCdNYXInLCdBcHInLCdNYXknLCdKdW4nLCdKdWwnLCdBdWcnLCdTZXAnLCdPY3QnLCdOb3YnLCdEZWMnXSxcbiAgICBcImRheU5hbWVzXCI6IFsnU3VuZGF5JywnTW9uZGF5JywnVHVlc2RheScsJ1dlZG5lc2RheScsJ1RodXJzZGF5JywnRnJpZGF5JywnU2F0dXJkYXknXSxcbiAgICBcImRheU5hbWVzTWluXCI6IFsnU3VuJywnTW9uJywnVHVlJywnV2VkJywnVGh1JywnRnJpJywnU2F0J10sXG59XG5cbmV4cG9ydCBkZWZhdWx0IGxhbmdFbjsiLCJcbmxldCBsYW5nUnUgPSB7XG4gICAgXCJlbXB0eVJlY29yZHNcIjogXCLQndC10YIg0LfQsNC/0LjRgdC10LlcIixcbiAgICBcImxvYWRpbmdcIjogXCLQl9Cw0LPRgNGD0LfQutCwLi4uXCIsXG4gICAgXCJ0b3RhbFwiOiBcItCS0YHQtdCz0L5cIixcbiAgICBcImFsbFwiOiBcItCS0YHQtVwiLFxuICAgIFwiY29tcGxldGVcIjogXCLQn9GA0LjQvNC10L3QuNGC0YxcIixcbiAgICBcInNlYXJjaFwiOiBcItCf0L7QuNGB0LpcIixcbiAgICBcInNlYXJjaEFjdGlvblwiOiBcItCY0YHQutCw0YLRjFwiLFxuICAgIFwiY2xlYXJcIjogXCLQntGH0LjRgdGC0LjRgtGMXCIsXG4gICAgXCJtb250aE5hbWVzXCI6IFsn0K/QvdCy0LDRgNGMJywn0KTQtdCy0YDQsNC70YwnLCfQnNCw0YDRgicsJ9CQ0L/RgNC10LvRjCcsJ9Cc0LDQuScsJ9CY0Y7QvdGMJywn0JjRjtC70YwnLCfQkNCy0LPRg9GB0YInLCfQodC10L3RgtGP0LHRgNGMJywn0J7QutGC0Y/QsdGA0YwnLCfQndC+0Y/QsdGA0YwnLCfQlNC10LrQsNCx0YDRjCddLFxuICAgIFwibW9udGhOYW1lc1Nob3J0XCI6IFsn0K/QvdCyJywn0KTQtdCyJywn0JzQsNGAJywn0JDQv9GAJywn0JzQsNC5Jywn0JjRjtC9Jywn0JjRjtC7Jywn0JDQstCzJywn0KHQtdC9Jywn0J7QutGCJywn0J3QvtGPJywn0JTQtdC6J10sXG4gICAgXCJkYXlOYW1lc1wiOiBbJ9Cy0L7RgdC60YDQtdGB0LXQvdGM0LUnLCfQv9C+0L3QtdC00LXQu9GM0L3QuNC6Jywn0LLRgtC+0YDQvdC40LonLCfRgdGA0LXQtNCwJywn0YfQtdGC0LLQtdGA0LMnLCfQv9GP0YLQvdC40YbQsCcsJ9GB0YPQsdCx0L7RgtCwJ10sXG4gICAgXCJkYXlOYW1lc01pblwiOiBbJ9CS0YEnLCfQn9C9Jywn0JLRgicsJ9Ch0YAnLCfQp9GCJywn0J/RgicsJ9Ch0LEnXVxufVxuXG5leHBvcnQgZGVmYXVsdCBsYW5nUnU7IiwiaW1wb3J0IFRhYmxlVXRpbHMgZnJvbSBcIi4uL3RhYmxlLnV0aWxzXCI7XG5pbXBvcnQgVGFibGVFbGVtZW50cyBmcm9tIFwiLi4vdGFibGUuZWxlbWVudHNcIjtcblxuXG5jbGFzcyBDb250cm9sIHtcblxuICAgIF9pZCAgICAgID0gbnVsbDtcbiAgICBfdGFibGUgICA9IG51bGw7XG4gICAgX29wdGlvbnMgPSB7XG4gICAgICAgIHR5cGU6ICcnLFxuICAgICAgICBpZDogJydcbiAgICB9O1xuXG5cbiAgICAvKipcbiAgICAgKiDQmNC90LjRhtC40LDQu9C40LfQsNGG0LjRj1xuICAgICAqIEBwYXJhbSB7b2JqZWN0fSB0YWJsZVxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zXG4gICAgICovXG4gICAgY29uc3RydWN0b3IodGFibGUsIG9wdGlvbnMpIHtcblxuICAgICAgICB0aGlzLl90YWJsZSAgID0gdGFibGU7XG4gICAgICAgIHRoaXMuX29wdGlvbnMgPSAkLmV4dGVuZCh0cnVlLCB0aGlzLl9vcHRpb25zLCBvcHRpb25zKTtcbiAgICAgICAgdGhpcy5faWQgICAgICA9IHRoaXMuX29wdGlvbnMuaGFzT3duUHJvcGVydHkoJ2lkJykgJiYgdHlwZW9mIHRoaXMuX29wdGlvbnMuaWQgPT09ICdzdHJpbmcnICYmIHRoaXMuX29wdGlvbnMuaWRcbiAgICAgICAgICAgID8gdGhpcy5fb3B0aW9ucy5pZFxuICAgICAgICAgICAgOiBUYWJsZVV0aWxzLmhhc2hDb2RlKCk7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUgSUQg0Y3Qu9C10LzQtdC90YLQsCDRg9C/0YDQsNCy0LvQtdC90LjRj1xuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAgICovXG4gICAgZ2V0SWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pZDtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSDQv9Cw0YDQsNC80LXRgtGA0L7QslxuICAgICAqIEByZXR1cm5zIHtvYmplY3R9XG4gICAgICovXG4gICAgZ2V0T3B0aW9ucygpIHtcbiAgICAgICAgcmV0dXJuICQuZXh0ZW5kKHRydWUsIHt9LCB0aGlzLl9vcHRpb25zKTtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqINCk0L7RgNC80LjRgNC+0LLQsNC90LjQtSDQutC+0L3RgtC10L3RgtCwINC00LvRjyDRgNCw0LfQvNC10YnQtdC90LjRjyDQvdCwINGB0YLRgNCw0L3QuNGG0LVcbiAgICAgKiBAcmV0dXJucyB7Kn1cbiAgICAgKi9cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IENvbnRyb2w7IiwiXG5pbXBvcnQgVGFibGVUcGwgICBmcm9tICcuLi90YWJsZS50cGwnO1xuaW1wb3J0IFRhYmxlVXRpbHMgZnJvbSAnLi4vdGFibGUudXRpbHMnO1xuaW1wb3J0IENvbnRyb2wgICAgICAgICAgZnJvbSBcIi4uL2Fic3RyYWN0L0NvbnRyb2xcIjtcblxuY2xhc3MgQ29udHJvbExpbmsgZXh0ZW5kcyBDb250cm9sIHtcblxuICAgIC8qKlxuICAgICAqINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPXG4gICAgICogQHBhcmFtIHtUYWJsZUluc3RhbmNlfSB0YWJsZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSAgICAgICAgICAgICAgb3B0aW9uc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHRhYmxlLCBvcHRpb25zKSB7XG5cbiAgICAgICAgb3B0aW9ucyA9ICQuZXh0ZW5kKHRydWUsIHtcbiAgICAgICAgICAgIGlkOiBudWxsLFxuICAgICAgICAgICAgdHlwZTogJ2xpbmsnLFxuICAgICAgICAgICAgdXJsOiBudWxsLFxuICAgICAgICAgICAgY29udGVudDogbnVsbCxcbiAgICAgICAgICAgIG9uQ2xpY2s6IG51bGwsXG4gICAgICAgICAgICBhdHRyOiBudWxsXG4gICAgICAgIH0sIG9wdGlvbnMpO1xuXG4gICAgICAgIHN1cGVyKHRhYmxlLCBvcHRpb25zKTtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqINCk0L7RgNC80LjRgNC+0LLQsNC90LjQtSDQutC+0L3RgtC10L3RgtCwINC00LvRjyDRgNCw0LfQvNC10YnQtdC90LjRjyDQvdCwINGB0YLRgNCw0L3QuNGG0LVcbiAgICAgKiBAcmV0dXJucyB7alF1ZXJ5fVxuICAgICAqL1xuICAgIHJlbmRlcigpIHtcblxuICAgICAgICBsZXQgdGhhdCAgICAgICA9IHRoaXM7XG4gICAgICAgIGxldCBhdHRyaWJ1dGVzID0gW107XG5cbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLl9vcHRpb25zLmF0dHIgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAkLmVhY2godGhpcy5fb3B0aW9ucy5hdHRyLCBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcbiAgICAgICAgICAgICAgICBpZiAoWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2YgdmFsdWUpID49IDApIHtcbiAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlcy5wdXNoKG5hbWUgKyAnPVwiJyArIHZhbHVlICsgJ1wiJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgbGluayA9ICQoVGFibGVVdGlscy5yZW5kZXIoVGFibGVUcGxbJ2NvbnRyb2xzL2xpbmsuaHRtbCddLCB7XG4gICAgICAgICAgICB1cmw6IHRoaXMuX29wdGlvbnMudXJsLFxuICAgICAgICAgICAgY29udGVudDogdGhpcy5fb3B0aW9ucy5jb250ZW50LFxuICAgICAgICAgICAgYXR0cjogYXR0cmlidXRlcy5sZW5ndGggPiAwID8gKCcgJyArIGF0dHJpYnV0ZXMuam9pbignICcpKSA6ICcnLFxuICAgICAgICB9KSk7XG5cblxuICAgICAgICBpZiAodHlwZW9mIHRoaXMuX29wdGlvbnMub25DbGljayA9PT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2YgdGhpcy5fb3B0aW9ucy5vbkNsaWNrID09PSAnc3RyaW5nJykge1xuXG4gICAgICAgICAgICBsaW5rLmNsaWNrKGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgICAgIGxldCBwcm9wID0ge1xuICAgICAgICAgICAgICAgICAgICB0YWJsZTogdGhhdC5fdGFibGUsXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2w6IHRoYXQsXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50OiBldmVudCxcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGF0Ll9vcHRpb25zLm9uQ2xpY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoYXQuX29wdGlvbnMub25DbGljayhwcm9wKTtcblxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHRoYXQuX29wdGlvbnMub25DbGljayA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGZ1bmMgPSBuZXcgRnVuY3Rpb24oJ3Byb3AnLCB0aGF0Ll9vcHRpb25zLm9uQ2xpY2spO1xuICAgICAgICAgICAgICAgICAgICBmdW5jKHByb3ApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGxpbms7XG4gICAgfVxufVxuXG5cbmV4cG9ydCBkZWZhdWx0IENvbnRyb2xMaW5rOyIsIlxuaW1wb3J0IFRhYmxlVHBsICAgZnJvbSAnLi4vdGFibGUudHBsJztcbmltcG9ydCBUYWJsZVV0aWxzIGZyb20gJy4uL3RhYmxlLnV0aWxzJztcbmltcG9ydCBDb250cm9sICAgICAgICAgIGZyb20gXCIuLi9hYnN0cmFjdC9Db250cm9sXCI7XG5cbmNsYXNzIENvbnRyb2xCdXR0b24gZXh0ZW5kcyBDb250cm9sIHtcblxuICAgIC8qKlxuICAgICAqINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPXG4gICAgICogQHBhcmFtIHtUYWJsZUluc3RhbmNlfSB0YWJsZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSAgICAgICAgICAgICAgb3B0aW9uc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHRhYmxlLCBvcHRpb25zKSB7XG5cbiAgICAgICAgb3B0aW9ucyA9ICQuZXh0ZW5kKHRydWUsIHtcbiAgICAgICAgICAgIGlkOiBudWxsLFxuICAgICAgICAgICAgdHlwZTogJ2J1dHRvbicsXG4gICAgICAgICAgICBjb250ZW50OiBudWxsLFxuICAgICAgICAgICAgb25DbGljazogbnVsbCxcbiAgICAgICAgICAgIGF0dHI6IHtcbiAgICAgICAgICAgICAgICBjbGFzczogJ2J0biBidG4tc2Vjb25kYXJ5J1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCBvcHRpb25zKTtcblxuICAgICAgICBzdXBlcih0YWJsZSwgb3B0aW9ucyk7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiDQpNC+0YDQvNC40YDQvtCy0LDQvdC40LUg0LrQvtC90YLQtdC90YLQsCDQtNC70Y8g0YDQsNC30LzQtdGJ0LXQvdC40Y8g0L3QsCDRgdGC0YDQsNC90LjRhtC1XG4gICAgICogQHJldHVybnMge2pRdWVyeX1cbiAgICAgKi9cbiAgICByZW5kZXIoKSB7XG5cbiAgICAgICAgbGV0IGF0dHJpYnV0ZXMgPSBbXTtcblxuICAgICAgICBpZiAoVGFibGVVdGlscy5pc09iamVjdCh0aGlzLl9vcHRpb25zLmF0dHIpKSB7XG4gICAgICAgICAgICAkLmVhY2godGhpcy5fb3B0aW9ucy5hdHRyLCBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcbiAgICAgICAgICAgICAgICBpZiAoWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2YgdmFsdWUpID49IDApIHtcbiAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlcy5wdXNoKG5hbWUgKyAnPVwiJyArIHZhbHVlICsgJ1wiJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgYnRuID0gJChUYWJsZVV0aWxzLnJlbmRlcihUYWJsZVRwbFsnY29udHJvbHMvYnV0dG9uLmh0bWwnXSwge1xuICAgICAgICAgICAgY29udGVudDogdGhpcy5fb3B0aW9ucy5jb250ZW50LFxuICAgICAgICAgICAgYXR0cjogYXR0cmlidXRlcy5sZW5ndGggPiAwID8gKCcgJyArIGF0dHJpYnV0ZXMuam9pbignICcpKSA6ICcnLFxuICAgICAgICB9KSk7XG5cblxuICAgICAgICBpZiAodHlwZW9mIHRoaXMuX29wdGlvbnMub25DbGljayA9PT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2YgdGhpcy5fb3B0aW9ucy5vbkNsaWNrID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgbGV0IHRoYXQgPSB0aGlzO1xuXG4gICAgICAgICAgICBidG4uY2xpY2soZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgbGV0IHByb3AgPSB7XG4gICAgICAgICAgICAgICAgICAgIHRhYmxlOiB0aGF0Ll90YWJsZSxcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbDogdGhhdCxcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQ6IGV2ZW50LFxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHRoYXQuX29wdGlvbnMub25DbGljayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICB0aGF0Ll9vcHRpb25zLm9uQ2xpY2socHJvcCk7XG5cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiB0aGF0Ll9vcHRpb25zLm9uQ2xpY2sgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBmdW5jID0gbmV3IEZ1bmN0aW9uKCdwcm9wJywgdGhhdC5fb3B0aW9ucy5vbkNsaWNrKTtcbiAgICAgICAgICAgICAgICAgICAgZnVuYyhwcm9wKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBidG47XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBDb250cm9sQnV0dG9uOyIsIlxuaW1wb3J0IFRhYmxlVHBsICAgZnJvbSAnLi4vdGFibGUudHBsJztcbmltcG9ydCBUYWJsZVV0aWxzIGZyb20gJy4uL3RhYmxlLnV0aWxzJztcbmltcG9ydCBDb250cm9sICAgIGZyb20gXCIuLi9hYnN0cmFjdC9Db250cm9sXCI7XG5cbmNsYXNzIENvbnRyb2xEcm9wZG93biBleHRlbmRzIENvbnRyb2wge1xuXG4gICAgLyoqXG4gICAgICog0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y9cbiAgICAgKiBAcGFyYW0ge1RhYmxlSW5zdGFuY2V9IHRhYmxlXG4gICAgICogQHBhcmFtIHtPYmplY3R9ICAgICAgICAgICAgICBvcHRpb25zXG4gICAgICovXG4gICAgY29uc3RydWN0b3IodGFibGUsIG9wdGlvbnMpIHtcblxuICAgICAgICBvcHRpb25zID0gJC5leHRlbmQodHJ1ZSwge1xuICAgICAgICAgICAgaWQ6IG51bGwsXG4gICAgICAgICAgICB0eXBlOiAnZHJvcGRvd24nLFxuICAgICAgICAgICAgY29udGVudDogbnVsbCxcbiAgICAgICAgICAgIGl0ZW1zOiBudWxsLFxuICAgICAgICAgICAgYXR0cjoge1xuICAgICAgICAgICAgICAgIGNsYXNzOiAnYnRuIGJ0bi1zZWNvbmRhcnkgZHJvcGRvd24tdG9nZ2xlJyxcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgb3B0aW9ucyk7XG5cbiAgICAgICAgc3VwZXIodGFibGUsIG9wdGlvbnMpO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICog0KTQvtGA0LzQuNGA0L7QstCw0L3QuNC1INC60L7QvdGC0LXQvdGC0LAg0LTQu9GPINGA0LDQt9C80LXRidC10L3QuNGPINC90LAg0YHRgtGA0LDQvdC40YbQtVxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAgICovXG4gICAgcmVuZGVyKCkge1xuXG4gICAgICAgIGxldCBvcHRpb25zICAgID0gdGhpcy5nZXRPcHRpb25zKCk7XG4gICAgICAgIGxldCB0YWJsZSAgICAgID0gdGhpcy5fdGFibGU7XG4gICAgICAgIGxldCB0aGF0ICAgICAgID0gdGhpcztcbiAgICAgICAgbGV0IGl0ZW1zICAgICAgPSBbXTtcbiAgICAgICAgbGV0IGF0dHJpYnV0ZXMgPSBbXTtcblxuXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KG9wdGlvbnMuaXRlbXMpKSB7XG4gICAgICAgICAgICBvcHRpb25zLml0ZW1zLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICAgICAgICAgIGlmIChUYWJsZVV0aWxzLmlzT2JqZWN0KGl0ZW0pICYmIHR5cGVvZiBpdGVtLnR5cGUgPT09ICdzdHJpbmcnKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0udHlwZSA9PT0gJ2xpbmsnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbS5oYXNPd25Qcm9wZXJ0eSgndXJsJykgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtLmhhc093blByb3BlcnR5KCdjb250ZW50JykgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlb2YgaXRlbS51cmwgPT09ICdzdHJpbmcnICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGl0ZW0uY29udGVudCA9PT0gJ3N0cmluZydcbiAgICAgICAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBsaW5rID0gVGFibGVVdGlscy5yZW5kZXIoVGFibGVUcGxbJ2NvbnRyb2xzL2Ryb3Bkb3duL2xpbmsuaHRtbCddLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybDogaXRlbS51cmwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IGl0ZW0uY29udGVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zLnB1c2gobGluayk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpdGVtLnR5cGUgPT09ICdidXR0b24nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbS5oYXNPd25Qcm9wZXJ0eSgnY29udGVudCcpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGl0ZW0uY29udGVudCA9PT0gJ3N0cmluZydcbiAgICAgICAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBidXR0b24gPSAkKFRhYmxlVXRpbHMucmVuZGVyKFRhYmxlVHBsWydjb250cm9scy9kcm9wZG93bi9idXR0b24uaHRtbCddLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybDogaXRlbS51cmwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IGl0ZW0uY29udGVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbS5oYXNPd25Qcm9wZXJ0eSgnb25DbGljaycpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFsnc3RyaW5nJywgJ2Z1bmN0aW9uJ10uaW5kZXhPZih0eXBlb2YgaXRlbS5vbkNsaWNrKSA+PSAwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbi5jbGljayhmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBwcm9wID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhYmxlOiB0YWJsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sOiB0aGF0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50OiBldmVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgaXRlbS5vbkNsaWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5vbkNsaWNrKHByb3ApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBpdGVtLm9uQ2xpY2sgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGZ1bmMgPSBuZXcgRnVuY3Rpb24oJ3Byb3AnLCBpdGVtLm9uQ2xpY2spO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmMocHJvcCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zLnB1c2goYnV0dG9uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaXRlbS50eXBlID09PSAnZGl2aWRlcicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zLnB1c2goVGFibGVUcGxbJ2NvbnRyb2xzL2Ryb3Bkb3duL2RpdmlkZXIuaHRtbCddKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKFRhYmxlVXRpbHMuaXNPYmplY3Qob3B0aW9ucy5hdHRyKSkge1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMuYXR0ci5oYXNPd25Qcm9wZXJ0eSgndHlwZScpKSB7XG4gICAgICAgICAgICAgICAgZGVsZXRlIG9wdGlvbnMuYXR0ci50eXBlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuYXR0ci5oYXNPd25Qcm9wZXJ0eSgnaWQnKSkge1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBvcHRpb25zLmF0dHIuaWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5hdHRyLmhhc093blByb3BlcnR5KCdkYXRhLWJzLXRvZ2dsZScpKSB7XG4gICAgICAgICAgICAgICAgZGVsZXRlIG9wdGlvbnMuYXR0clsnZGF0YS1icy10b2dnbGUnXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgJC5lYWNoKG9wdGlvbnMuYXR0ciwgZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgYXR0cmlidXRlcy5wdXNoKG5hbWUgKyAnPVwiJyArIHZhbHVlICsgJ1wiJyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBkcm9wZG93biA9ICQoVGFibGVVdGlscy5yZW5kZXIoVGFibGVUcGxbJ2NvbnRyb2xzL2Ryb3Bkb3duLmh0bWwnXSwge1xuICAgICAgICAgICAgY29udGVudDogb3B0aW9ucy5jb250ZW50LFxuICAgICAgICAgICAgcG9zaXRpb246IG9wdGlvbnMuaGFzT3duUHJvcGVydHkoJ3Bvc2l0aW9uJykgJiYgdHlwZW9mIG9wdGlvbnMucG9zaXRpb24gPT09ICdzdHJpbmcnID8gb3B0aW9ucy5wb3NpdGlvbiA6ICdlbmQnLFxuICAgICAgICAgICAgYXR0cjogYXR0cmlidXRlcy5sZW5ndGggPiAwID8gKCcgJyArIGF0dHJpYnV0ZXMuam9pbignICcpKSA6ICcnLFxuICAgICAgICB9KSk7XG5cblxuICAgICAgICBpZiAoaXRlbXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgbGV0IG1lbnUgPSBkcm9wZG93bi5maW5kKCcuZHJvcGRvd24tbWVudScpO1xuXG4gICAgICAgICAgICBpdGVtcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgICAgICAgICBtZW51LmFwcGVuZChpdGVtKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuXG4gICAgICAgIHJldHVybiBkcm9wZG93bjtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IENvbnRyb2xEcm9wZG93bjsiLCJcbmltcG9ydCBUYWJsZVRwbCAgIGZyb20gJy4uL3RhYmxlLnRwbCc7XG5pbXBvcnQgVGFibGVVdGlscyBmcm9tICcuLi90YWJsZS51dGlscyc7XG5pbXBvcnQgQ29udHJvbCAgICAgICAgICBmcm9tIFwiLi4vYWJzdHJhY3QvQ29udHJvbFwiO1xuXG5jbGFzcyBDb250cm9sQnV0dG9uR3JvdXAgZXh0ZW5kcyBDb250cm9sIHtcblxuICAgIF9saW5rID0ge1xuICAgICAgICBhdHRyOiB7IGNsYXNzOiAnYnRuIGJ0bi1zZWNvbmRhcnknIH1cbiAgICB9XG5cbiAgICBfYnV0dG9uID0gIHtcbiAgICAgICAgYXR0cjogeyBjbGFzczogJ2J0biBidG4tc2Vjb25kYXJ5JyB9XG4gICAgfVxuXG4gICAgX2Ryb3Bkb3duID0ge1xuICAgICAgICBhdHRyOiB7IGNsYXNzOiAnYnRuIGJ0bi1zZWNvbmRhcnkgZHJvcGRvd24tdG9nZ2xlJyB9XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiDQmNC90LjRhtC40LDQu9C40LfQsNGG0LjRj1xuICAgICAqIEBwYXJhbSB7VGFibGVJbnN0YW5jZX0gdGFibGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gICAgICAgICAgICAgIG9wdGlvbnNcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcih0YWJsZSwgb3B0aW9ucykge1xuXG4gICAgICAgIG9wdGlvbnMgPSAkLmV4dGVuZCh0cnVlLCB7XG4gICAgICAgICAgICBpZDogbnVsbCxcbiAgICAgICAgICAgIHR5cGU6ICdidXR0b25fZ3JvdXAnLFxuICAgICAgICAgICAgYnV0dG9uczogbnVsbFxuICAgICAgICB9LCBvcHRpb25zKTtcblxuICAgICAgICBzdXBlcih0YWJsZSwgb3B0aW9ucyk7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiDQpNC+0YDQvNC40YDQvtCy0LDQvdC40LUg0LrQvtC90YLQtdC90YLQsCDQtNC70Y8g0YDQsNC30LzQtdGJ0LXQvdC40Y8g0L3QsCDRgdGC0YDQsNC90LjRhtC1XG4gICAgICogQHJldHVybnMge3N0cmluZ31cbiAgICAgKi9cbiAgICByZW5kZXIoKSB7XG5cbiAgICAgICAgbGV0IG9wdGlvbnMgPSB0aGlzLmdldE9wdGlvbnMoKTtcbiAgICAgICAgbGV0IGJ1dHRvbnMgPSBbXTtcbiAgICAgICAgbGV0IHRoYXQgICAgPSB0aGlzO1xuXG5cbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkob3B0aW9ucy5idXR0b25zKSkge1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqINCh0L7Qt9C00LDQvdC40LUg0YHRgdGL0LvQutC4XG4gICAgICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gbGlua1xuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBmdW5jdGlvbiBtYWtlTGluayhsaW5rKSB7XG5cbiAgICAgICAgICAgICAgICBsZXQgcmVzdWx0ID0gbnVsbDtcblxuICAgICAgICAgICAgICAgIGlmIChsaW5rLmhhc093blByb3BlcnR5KCd1cmwnKSAmJlxuICAgICAgICAgICAgICAgICAgICBsaW5rLmhhc093blByb3BlcnR5KCdjb250ZW50JykgJiZcbiAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGxpbmsudXJsID09PSAnc3RyaW5nJyAmJlxuICAgICAgICAgICAgICAgICAgICB0eXBlb2YgbGluay5jb250ZW50ID09PSAnc3RyaW5nJ1xuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgYXR0cmlidXRlcyA9IFtdO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICggISBUYWJsZVV0aWxzLmlzT2JqZWN0KGxpbmsuYXR0cikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmsuYXR0ciA9IHt9O1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGxpbmsuYXR0ci5oYXNPd25Qcm9wZXJ0eSgnaHJlZicpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgbGluay5hdHRyLmhyZWY7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAoICEgbGluay5hdHRyLmhhc093blByb3BlcnR5KCdjbGFzcycpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsaW5rLmF0dHIuY2xhc3MgPSB0aGF0Ll9saW5rLmF0dHIuY2xhc3M7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAkLmVhY2gobGluay5hdHRyLCBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiB2YWx1ZSkgPj0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXMucHVzaChuYW1lICsgJz1cIicgKyB2YWx1ZSArICdcIicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBUYWJsZVV0aWxzLnJlbmRlcihUYWJsZVRwbFsnY29udHJvbHMvYnV0dG9uX2dyb3VwL2xpbmsuaHRtbCddLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICB1cmw6IGxpbmsudXJsLFxuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cjogYXR0cmlidXRlcy5sZW5ndGggPiAwID8gKCcgJyArIGF0dHJpYnV0ZXMuam9pbignICcpKSA6ICcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudDogbGluay5jb250ZW50XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiDQodC+0LfQtNCw0L3QuNC1INC60L3QvtC/0LrQuFxuICAgICAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGJ1dHRvblxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBmdW5jdGlvbiBtYWtlQnV0dG9uKGJ1dHRvbikge1xuXG4gICAgICAgICAgICAgICAgbGV0IHJlc3VsdCA9IG51bGw7XG5cbiAgICAgICAgICAgICAgICBpZiAoYnV0dG9uLmhhc093blByb3BlcnR5KCdjb250ZW50JykgJiZcbiAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGJ1dHRvbi5jb250ZW50ID09PSAnc3RyaW5nJ1xuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgYXR0cmlidXRlcyA9IFtdO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICggISBUYWJsZVV0aWxzLmlzT2JqZWN0KGJ1dHRvbi5hdHRyKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnV0dG9uLmF0dHIgPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmIChidXR0b24uYXR0ci5oYXNPd25Qcm9wZXJ0eSgndHlwZScpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgYnV0dG9uLmF0dHIudHlwZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmICggISBidXR0b24uYXR0ci5oYXNPd25Qcm9wZXJ0eSgnY2xhc3MnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnV0dG9uLmF0dHIuY2xhc3MgPSB0aGF0Ll9idXR0b24uYXR0ci5jbGFzcztcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICQuZWFjaChidXR0b24uYXR0ciwgZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2YgdmFsdWUpID49IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzLnB1c2gobmFtZSArICc9XCInICsgdmFsdWUgKyAnXCInKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cblxuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSAkKFRhYmxlVXRpbHMucmVuZGVyKFRhYmxlVHBsWydjb250cm9scy9idXR0b25fZ3JvdXAvYnV0dG9uLmh0bWwnXSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudDogYnV0dG9uLmNvbnRlbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyOiBhdHRyaWJ1dGVzLmxlbmd0aCA+IDAgPyAoJyAnICsgYXR0cmlidXRlcy5qb2luKCcgJykpIDogJycsXG4gICAgICAgICAgICAgICAgICAgIH0pKTtcblxuXG4gICAgICAgICAgICAgICAgICAgIGlmIChidXR0b24uaGFzT3duUHJvcGVydHkoJ29uQ2xpY2snKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgWydzdHJpbmcnLCAnZnVuY3Rpb24nXS5pbmRleE9mKHR5cGVvZiBidXR0b24ub25DbGljaykgPj0gMFxuICAgICAgICAgICAgICAgICAgICApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LmNsaWNrKGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBwcm9wID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YWJsZTogdGhhdC5fdGFibGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2w6IHRoYXQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50OiBldmVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBidXR0b24ub25DbGljayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBidXR0b24ub25DbGljayhwcm9wKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGJ1dHRvbi5vbkNsaWNrID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgZnVuYyA9IG5ldyBGdW5jdGlvbigncHJvcCcsIGJ1dHRvbi5vbkNsaWNrKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuYyhwcm9wKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiDQodC+0LfQtNCw0L3QuNC1INCy0YvQv9Cw0LTQsNGO0YnQtdCz0L4g0LzQtdC90Y5cbiAgICAgICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBidXR0b25cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZnVuY3Rpb24gbWFrZURyb3Bkb3duKGJ1dHRvbikge1xuXG4gICAgICAgICAgICAgICAgbGV0IHJlc3VsdCA9IG51bGw7XG5cbiAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShidXR0b24uaXRlbXMpKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBhdHRyaWJ1dGVzID0gW107XG4gICAgICAgICAgICAgICAgICAgIGxldCBpdGVtcyAgICAgID0gW107XG5cbiAgICAgICAgICAgICAgICAgICAgYnV0dG9uLml0ZW1zLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFRhYmxlVXRpbHMuaXNPYmplY3QoaXRlbSkgJiYgdHlwZW9mIGl0ZW0udHlwZSA9PT0gJ3N0cmluZycpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpdGVtLnR5cGUgPT09ICdsaW5rJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbS5oYXNPd25Qcm9wZXJ0eSgndXJsJykgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0uaGFzT3duUHJvcGVydHkoJ2NvbnRlbnQnKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGl0ZW0udXJsID09PSAnc3RyaW5nJyAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGl0ZW0uY29udGVudCA9PT0gJ3N0cmluZycgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0udXJsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXMucHVzaChUYWJsZVV0aWxzLnJlbmRlcihUYWJsZVRwbFsnY29udHJvbHMvYnV0dG9uX2dyb3VwL2Ryb3Bkb3duL2xpbmsuaHRtbCddLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiBpdGVtLnVybCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBpdGVtLmNvbnRlbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaXRlbS50eXBlID09PSAnYnV0dG9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbS5oYXNPd25Qcm9wZXJ0eSgnY29udGVudCcpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlb2YgaXRlbS5jb250ZW50ID09PSAnc3RyaW5nJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBidG4gPSAkKFRhYmxlVXRpbHMucmVuZGVyKFRhYmxlVHBsWydjb250cm9scy9idXR0b25fZ3JvdXAvZHJvcGRvd24vYnV0dG9uLmh0bWwnXSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IGl0ZW0uY29udGVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0uaGFzT3duUHJvcGVydHkoJ29uQ2xpY2snKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFsnc3RyaW5nJywgJ2Z1bmN0aW9uJ10uaW5kZXhPZih0eXBlb2YgaXRlbS5vbkNsaWNrKSA+PSAwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBidG4uY2xpY2soZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBwcm9wID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFibGU6IHRoYXQuX3RhYmxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbDogdGhhdCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50OiBldmVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGl0ZW0ub25DbGljayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5vbkNsaWNrKHByb3ApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGl0ZW0ub25DbGljayA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBmdW5jID0gbmV3IEZ1bmN0aW9uKCdwcm9wJywgaXRlbS5vbkNsaWNrKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmMocHJvcCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXMucHVzaChidG4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaXRlbS50eXBlID09PSAnZGl2aWRlcicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXMucHVzaChUYWJsZVRwbFsnY29udHJvbHMvYnV0dG9uX2dyb3VwL2Ryb3Bkb3duL2RpdmlkZXIuaHRtbCddKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCAhIFRhYmxlVXRpbHMuaXNPYmplY3QoYnV0dG9uLmF0dHIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBidXR0b24uYXR0ciA9IHt9O1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGJ1dHRvbi5hdHRyLmhhc093blByb3BlcnR5KCd0eXBlJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBidXR0b24uYXR0ci50eXBlO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCAhIGJ1dHRvbi5hdHRyLmhhc093blByb3BlcnR5KCdjbGFzcycpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBidXR0b24uYXR0ci5jbGFzcyA9IHRoYXQuX2Ryb3Bkb3duLmF0dHIuY2xhc3M7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuXG4gICAgICAgICAgICAgICAgICAgICQuZWFjaChidXR0b24uYXR0ciwgZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2YgdmFsdWUpID49IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzLnB1c2gobmFtZSArICc9XCInICsgdmFsdWUgKyAnXCInKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gJChUYWJsZVV0aWxzLnJlbmRlcihUYWJsZVRwbFsnY29udHJvbHMvYnV0dG9uX2dyb3VwL2Ryb3Bkb3duLmh0bWwnXSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cjogYXR0cmlidXRlcy5sZW5ndGggPiAwID8gKCcgJyArIGF0dHJpYnV0ZXMuam9pbignICcpKSA6ICcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IGJ1dHRvbi5oYXNPd25Qcm9wZXJ0eSgncG9zaXRpb24nKSAmJiB0eXBlb2YgYnV0dG9uLnBvc2l0aW9uID09PSAnc3RyaW5nJyA/IGJ1dHRvbi5wb3NpdGlvbiA6ICdlbmQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudDogYnV0dG9uLmNvbnRlbnQsXG4gICAgICAgICAgICAgICAgICAgIH0pKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG1lbnUgPSByZXN1bHQuZmluZCgnLmRyb3Bkb3duLW1lbnUnKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVudS5hcHBlbmQoaXRlbSlcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIH1cblxuXG4gICAgICAgICAgICBvcHRpb25zLmJ1dHRvbnMubWFwKGZ1bmN0aW9uIChidXR0b24pIHtcbiAgICAgICAgICAgICAgICBpZiAoVGFibGVVdGlscy5pc09iamVjdChidXR0b24pICYmIHR5cGVvZiBidXR0b24udHlwZSA9PT0gJ3N0cmluZycpIHtcblxuXG4gICAgICAgICAgICAgICAgICAgIGlmIChidXR0b24udHlwZSA9PT0gJ2xpbmsnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgbGlua0VsZW1lbnQgPSBtYWtlTGluayhidXR0b24pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobGlua0VsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBidXR0b25zLnB1c2gobGlua0VsZW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYnV0dG9uLnR5cGUgPT09ICdidXR0b24nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgYnV0dG9uRWxlbWVudCA9IG1ha2VCdXR0b24oYnV0dG9uKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGJ1dHRvbkVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBidXR0b25zLnB1c2goYnV0dG9uRWxlbWVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChidXR0b24udHlwZSA9PT0gJ2Ryb3Bkb3duJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGRyb3Bkb3duRWxlbWVudCA9IG1ha2VEcm9wZG93bihidXR0b24pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZHJvcGRvd25FbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnV0dG9ucy5wdXNoKGRyb3Bkb3duRWxlbWVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgbGV0IGJ0bkdyb3VwID0gJChUYWJsZVRwbFsnY29udHJvbHMvYnV0dG9uX2dyb3VwLmh0bWwnXSk7XG5cbiAgICAgICAgYnV0dG9ucy5tYXAoZnVuY3Rpb24gKGJ1dHRvbikge1xuICAgICAgICAgICAgYnRuR3JvdXAuYXBwZW5kKGJ1dHRvbik7XG4gICAgICAgIH0pXG5cbiAgICAgICAgcmV0dXJuIGJ0bkdyb3VwO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ29udHJvbEJ1dHRvbkdyb3VwOyIsImltcG9ydCBDb250cm9sIGZyb20gXCIuLi9hYnN0cmFjdC9Db250cm9sXCI7XG5cbmNsYXNzIENvbnRyb2xDdXN0b20gZXh0ZW5kcyBDb250cm9sIHtcblxuICAgIC8qKlxuICAgICAqINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPXG4gICAgICogQHBhcmFtIHtUYWJsZUluc3RhbmNlfSB0YWJsZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSAgICAgICAgICAgICAgb3B0aW9uc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHRhYmxlLCBvcHRpb25zKSB7XG5cbiAgICAgICAgb3B0aW9ucyA9ICQuZXh0ZW5kKHRydWUsIHtcbiAgICAgICAgICAgIGlkOiBudWxsLFxuICAgICAgICAgICAgdHlwZTogJ2N1c3RvbScsXG4gICAgICAgICAgICBjb250ZW50OiBudWxsXG4gICAgICAgIH0sIG9wdGlvbnMpO1xuXG4gICAgICAgIHN1cGVyKHRhYmxlLCBvcHRpb25zKTtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqINCk0L7RgNC80LjRgNC+0LLQsNC90LjQtSDQutC+0L3RgtC10L3RgtCwINC00LvRjyDRgNCw0LfQvNC10YnQtdC90LjRjyDQvdCwINGB0YLRgNCw0L3QuNGG0LVcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfEhUTUxFbGVtZW50fGpRdWVyeX1cbiAgICAgKi9cbiAgICByZW5kZXIoKSB7XG5cbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLl9vcHRpb25zLmNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fb3B0aW9ucy5jb250ZW50O1xuXG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHRoaXMuX29wdGlvbnMuY29udGVudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgbGV0IHByb3AgPSB7XG4gICAgICAgICAgICAgICAgdGFibGU6IHRoaXMuX29wdGlvbnMudGFibGUsXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fb3B0aW9ucy5jb250ZW50KHByb3ApO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5cbmV4cG9ydCBkZWZhdWx0IENvbnRyb2xDdXN0b207IiwiXG5pbXBvcnQgVGFibGVUcGwgICBmcm9tIFwiLi4vdGFibGUudHBsXCI7XG5pbXBvcnQgVGFibGVVdGlscyBmcm9tICcuLi90YWJsZS51dGlscyc7XG5pbXBvcnQgQ29udHJvbCAgICAgICAgICBmcm9tIFwiLi4vYWJzdHJhY3QvQ29udHJvbFwiO1xuXG5cbmNsYXNzIENvbnRyb2xQYWdlU2l6ZSBleHRlbmRzIENvbnRyb2wge1xuXG4gICAgLyoqXG4gICAgICog0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y9cbiAgICAgKiBAcGFyYW0ge1RhYmxlSW5zdGFuY2V9IHRhYmxlXG4gICAgICogQHBhcmFtIHtPYmplY3R9ICAgICAgICAgICAgICBvcHRpb25zXG4gICAgICovXG4gICAgY29uc3RydWN0b3IodGFibGUsIG9wdGlvbnMpIHtcblxuICAgICAgICBsZXQgb3B0aW9uc09yaWdpbmFsID0ge1xuICAgICAgICAgICAgaWQ6IG51bGwsXG4gICAgICAgICAgICB0eXBlOiAncGFnZV9zaXplJyxcbiAgICAgICAgICAgIGF0dHI6IHtcbiAgICAgICAgICAgICAgICBjbGFzczogJ2Zvcm0tc2VsZWN0J1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxpc3Q6IFsgMjUsIDUwLCAxMDAsIDEwMDAgXVxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChvcHRpb25zLmhhc093blByb3BlcnR5KCdhdHRyJykgJiYgVGFibGVVdGlscy5pc09iamVjdChvcHRpb25zLmF0dHIpKSB7XG4gICAgICAgICAgICBvcHRpb25zLmF0dHIgPSBUYWJsZVV0aWxzLm1lcmdlQXR0cihvcHRpb25zT3JpZ2luYWwuYXR0ciwgb3B0aW9ucy5hdHRyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIG9wdGlvbnMgPSAkLmV4dGVuZCh0cnVlLCBvcHRpb25zT3JpZ2luYWwsIG9wdGlvbnMpO1xuXG4gICAgICAgIHN1cGVyKHRhYmxlLCBvcHRpb25zKTtcblxuXG4gICAgICAgIGlmICggISBBcnJheS5pc0FycmF5KHRoaXMuX29wdGlvbnMubGlzdCkpIHtcbiAgICAgICAgICAgIHRoaXMuX29wdGlvbnMubGlzdCA9IFtdO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMubGlzdC5pbmRleE9mKHRoaXMuX3RhYmxlLl9yZWNvcmRzUGVyUGFnZSkgPCAwKSB7XG4gICAgICAgICAgICB0aGlzLl9vcHRpb25zLmxpc3QudW5zaGlmdCh0aGlzLl90YWJsZS5fcmVjb3Jkc1BlclBhZ2UpO1xuICAgICAgICB9XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiDQpNC+0YDQvNC40YDQvtCy0LDQvdC40LUg0LrQvtC90YLQtdC90YLQsCDQtNC70Y8g0YDQsNC30LzQtdGJ0LXQvdC40Y8g0L3QsCDRgdGC0YDQsNC90LjRhtC1XG4gICAgICogQHJldHVybnMge2pRdWVyeX1cbiAgICAgKi9cbiAgICByZW5kZXIoKSB7XG5cbiAgICAgICAgbGV0IGF0dHJpYnV0ZXMgPSBbXTtcbiAgICAgICAgbGV0IHRhYmxlICAgICAgPSB0aGlzLl90YWJsZTtcblxuICAgICAgICBpZiAoVGFibGVVdGlscy5pc09iamVjdCh0aGlzLl9vcHRpb25zLmF0dHIpKSB7XG4gICAgICAgICAgICAkLmVhY2godGhpcy5fb3B0aW9ucy5hdHRyLCBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcbiAgICAgICAgICAgICAgICBpZiAoWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2YgdmFsdWUpID49IDApIHtcbiAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlcy5wdXNoKG5hbWUgKyAnPVwiJyArIHZhbHVlICsgJ1wiJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgY29udHJvbCA9ICQoVGFibGVVdGlscy5yZW5kZXIoVGFibGVUcGxbJ2NvbnRyb2xzL3BhZ2Utc2l6ZS5odG1sJ10sIHtcbiAgICAgICAgICAgIHJlY29yZHNQZXJQYWdlTGlzdDogdGhpcy5fb3B0aW9ucy5saXN0LFxuICAgICAgICAgICAgcmVjb3Jkc1BlclBhZ2U6IHRhYmxlLl9yZWNvcmRzUGVyUGFnZSxcbiAgICAgICAgICAgIGF0dHI6IGF0dHJpYnV0ZXMubGVuZ3RoID4gMCA/ICgnICcgKyBhdHRyaWJ1dGVzLmpvaW4oJyAnKSkgOiAnJyxcbiAgICAgICAgICAgIGxhbmc6IHRhYmxlLmdldExhbmcoKSxcbiAgICAgICAgfSkpO1xuXG4gICAgICAgIGNvbnRyb2wuY2hhbmdlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRhYmxlLl9wYWdlID0gMTtcbiAgICAgICAgICAgIHRhYmxlLnNldFBhZ2VTaXplKE51bWJlcihjb250cm9sLnZhbCgpKSk7XG4gICAgICAgICAgICB0YWJsZS5yZWxvYWQoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGFibGUub24oJ3BhZ2Vfc2l6ZV91cGRhdGUnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBjb250cm9sLnZhbCh0YWJsZS5fcmVjb3Jkc1BlclBhZ2UpO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gY29udHJvbDtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IENvbnRyb2xQYWdlU2l6ZTsiLCJcbmltcG9ydCBUYWJsZVV0aWxzIGZyb20gJy4uL3RhYmxlLnV0aWxzJztcbmltcG9ydCBUYWJsZVRwbCAgIGZyb20gXCIuLi90YWJsZS50cGxcIjtcbmltcG9ydCBDb250cm9sICAgICAgICAgIGZyb20gXCIuLi9hYnN0cmFjdC9Db250cm9sXCI7XG5cblxuY2xhc3MgQ29udHJvbFBhZ2VKdW1wIGV4dGVuZHMgQ29udHJvbCB7XG5cbiAgICAvKipcbiAgICAgKiDQmNC90LjRhtC40LDQu9C40LfQsNGG0LjRj1xuICAgICAqIEBwYXJhbSB7VGFibGVJbnN0YW5jZX0gdGFibGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gICAgICAgICAgICAgIG9wdGlvbnNcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcih0YWJsZSwgb3B0aW9ucykge1xuXG4gICAgICAgIGxldCBvcHRpb25zT3JpZ2luYWwgPSB7XG4gICAgICAgICAgICBpZDogbnVsbCxcbiAgICAgICAgICAgIHR5cGU6ICdwYWdlX2p1bXAnLFxuICAgICAgICAgICAgYXR0cjoge1xuICAgICAgICAgICAgICAgIGNsYXNzOiAnaW5wdXQtZ3JvdXAnXG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChvcHRpb25zLmhhc093blByb3BlcnR5KCdhdHRyJykgJiYgVGFibGVVdGlscy5pc09iamVjdChvcHRpb25zLmF0dHIpKSB7XG4gICAgICAgICAgICBvcHRpb25zLmF0dHIgPSBUYWJsZVV0aWxzLm1lcmdlQXR0cihvcHRpb25zT3JpZ2luYWwuYXR0ciwgb3B0aW9ucy5hdHRyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIG9wdGlvbnMgPSAkLmV4dGVuZCh0cnVlLCBvcHRpb25zT3JpZ2luYWwsIG9wdGlvbnMpO1xuXG4gICAgICAgIHN1cGVyKHRhYmxlLCBvcHRpb25zKTtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqINCk0L7RgNC80LjRgNC+0LLQsNC90LjQtSDQutC+0L3RgtC10L3RgtCwINC00LvRjyDRgNCw0LfQvNC10YnQtdC90LjRjyDQvdCwINGB0YLRgNCw0L3QuNGG0LVcbiAgICAgKiBAcmV0dXJucyB7alF1ZXJ5fVxuICAgICAqL1xuICAgIHJlbmRlcigpIHtcblxuICAgICAgICBsZXQgYXR0cmlidXRlcyA9IFtdO1xuICAgICAgICBsZXQgdGFibGUgICAgICA9IHRoaXMuX3RhYmxlO1xuXG4gICAgICAgIGlmIChUYWJsZVV0aWxzLmlzT2JqZWN0KHRoaXMuX29wdGlvbnMuYXR0cikpIHtcbiAgICAgICAgICAgICQuZWFjaCh0aGlzLl9vcHRpb25zLmF0dHIsIGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xuICAgICAgICAgICAgICAgIGlmIChbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiB2YWx1ZSkgPj0gMCkge1xuICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzLnB1c2gobmFtZSArICc9XCInICsgdmFsdWUgKyAnXCInKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBjb250cm9sID0gJChUYWJsZVV0aWxzLnJlbmRlcihUYWJsZVRwbFsnY29udHJvbHMvcGFnZS1qdW1wLmh0bWwnXSwge1xuICAgICAgICAgICAgYXR0cjogYXR0cmlidXRlcy5sZW5ndGggPiAwID8gKCcgJyArIGF0dHJpYnV0ZXMuam9pbignICcpKSA6ICcnXG4gICAgICAgIH0pKTtcblxuICAgICAgICBsZXQgaW5wdXQgICA9ICQoJ2lucHV0JywgY29udHJvbCk7XG4gICAgICAgIGxldCBidXR0b24gID0gJCgnYnV0dG9uJywgY29udHJvbCk7XG5cbiAgICAgICAgYnV0dG9uLmNsaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRhYmxlLmdvUGFnZShpbnB1dC52YWwoKSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlucHV0LmtleXVwKGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgaWYgKGV2ZW50LmtleSA9PT0gJ0VudGVyJyB8fCBldmVudC5rZXlDb2RlID09PSAxMykge1xuICAgICAgICAgICAgICAgIHRhYmxlLmdvUGFnZShpbnB1dC52YWwoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBjb250cm9sO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ29udHJvbFBhZ2VKdW1wOyIsImltcG9ydCBUYWJsZVV0aWxzIGZyb20gXCIuLi8uLi90YWJsZS51dGlsc1wiO1xuaW1wb3J0IFRhYmxlVHBsICAgZnJvbSBcIi4uLy4uL3RhYmxlLnRwbFwiO1xuXG5cbmxldCBjb250cm9sUGFnZXMgPSB7XG5cblxuICAgIC8qKlxuICAgICAqINCk0L7RgNC80LjRgNC+0LLQsNC90LjQtSDQutC+0L3RgtGA0L7Qu9CwXG4gICAgICogQHBhcmFtIHtUYWJsZUluc3RhbmNlfSB0YWJsZVxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSAgICAgICAgICAgICAgb3B0aW9uc1xuICAgICAqIEByZXR1cm4ge2pRdWVyeX1cbiAgICAgKi9cbiAgICByZW5kZXI6IGZ1bmN0aW9uICh0YWJsZSwgb3B0aW9ucykge1xuXG4gICAgICAgIGxldCBhdHRyaWJ1dGVzICAgICAgID0gW107XG4gICAgICAgIGxldCBzaG93UHJldiAgICAgICAgID0gISEgb3B0aW9ucy5zaG93LnByZXY7XG4gICAgICAgIGxldCBzaG93TmV4dCAgICAgICAgID0gISEgb3B0aW9ucy5zaG93Lm5leHQ7XG4gICAgICAgIGxldCBzaG93RGl2aWRlclN0YXJ0ID0gZmFsc2U7XG4gICAgICAgIGxldCBzaG93RGl2aWRlckVuZCAgID0gZmFsc2U7XG4gICAgICAgIGxldCBzaG93UGFnZUZpcnN0ICAgID0gZmFsc2U7XG4gICAgICAgIGxldCBzaG93UGFnZUxhc3QgICAgID0gZmFsc2U7XG4gICAgICAgIGxldCBwYWdlcyAgICAgICAgICAgID0gW107XG4gICAgICAgIGxldCBwYWdlc1RvdGFsICAgICAgID0gdGFibGUuX3JlY29yZHNUb3RhbCA+IDAgJiYgdGFibGUuX3JlY29yZHNQZXJQYWdlID4gMFxuICAgICAgICAgICAgPyBNYXRoLmNlaWwodGFibGUuX3JlY29yZHNUb3RhbCAvIHRhYmxlLl9yZWNvcmRzUGVyUGFnZSlcbiAgICAgICAgICAgIDogMTtcblxuXG4gICAgICAgIGlmIChUYWJsZVV0aWxzLmlzT2JqZWN0KG9wdGlvbnMuYXR0cikpIHtcbiAgICAgICAgICAgICQuZWFjaChvcHRpb25zLmF0dHIsIGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xuICAgICAgICAgICAgICAgIGlmIChbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiB2YWx1ZSkgPj0gMCkge1xuICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzLnB1c2gobmFtZSArICc9XCInICsgdmFsdWUgKyAnXCInKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0YWJsZS5fcmVjb3Jkc1RvdGFsID4gMCAmJlxuICAgICAgICAgICAgb3B0aW9ucy5jb3VudCA+IDAgJiZcbiAgICAgICAgICAgIFRhYmxlVXRpbHMuaXNOdW1lcmljKG9wdGlvbnMuY291bnQpXG4gICAgICAgICkge1xuICAgICAgICAgICAgbGV0IGNvdW50ICAgICA9IE1hdGgubWluKG9wdGlvbnMuY291bnQsIHBhZ2VzVG90YWwpO1xuICAgICAgICAgICAgbGV0IGNvdW50SGFsZiA9IE1hdGgubWF4KDAsIE1hdGguZmxvb3IoY291bnQgLyAyKSk7XG5cbiAgICAgICAgICAgIGlmIChjb3VudCAlIDIgPT09IDApIHtcbiAgICAgICAgICAgICAgICBjb3VudEhhbGYgLT0gMTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbGV0IHN0YXJ0ID0gdGFibGUuX3BhZ2UgPiAxXG4gICAgICAgICAgICAgICAgPyBNYXRoLm1heCgxLCB0YWJsZS5fcGFnZSAtIGNvdW50SGFsZilcbiAgICAgICAgICAgICAgICA6IHRhYmxlLl9wYWdlO1xuXG4gICAgICAgICAgICBpZiAoc3RhcnQgKyBjb3VudCA+IHBhZ2VzVG90YWwpIHtcbiAgICAgICAgICAgICAgICBzdGFydCA9IHBhZ2VzVG90YWwgLSAoY291bnQgLSAxKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgcGFnZXMucHVzaChzdGFydCArIGkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMuY291bnQgPiAwICYmXG4gICAgICAgICAgICAgICAgdGFibGUuX3BhZ2UgPiAxXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBwYWdlcy5wdXNoKHRhYmxlLl9wYWdlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwYWdlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBpZiAocGFnZXNbMF0gPj0gMikge1xuICAgICAgICAgICAgICAgIHNob3dQYWdlRmlyc3QgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHBhZ2VzWzBdID49IDMpIHtcbiAgICAgICAgICAgICAgICBzaG93RGl2aWRlclN0YXJ0ID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHBhZ2VzW3BhZ2VzLmxlbmd0aCAtIDFdICsgMSA8IHBhZ2VzVG90YWwpIHtcbiAgICAgICAgICAgICAgICBzaG93RGl2aWRlckVuZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocGFnZXNbcGFnZXMubGVuZ3RoIC0gMV0gPCBwYWdlc1RvdGFsKSB7XG4gICAgICAgICAgICAgICAgc2hvd1BhZ2VMYXN0ID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBjb250cm9sID0gJChUYWJsZVV0aWxzLnJlbmRlcihUYWJsZVRwbFsnY29udHJvbHMvcGFnZXMuaHRtbCddLCB7XG4gICAgICAgICAgICBjdXJyZW50UGFnZTogdGFibGUuX3BhZ2UsXG4gICAgICAgICAgICBpc0FjdGl2ZVByZXY6IHRhYmxlLl9wYWdlID4gMSxcbiAgICAgICAgICAgIGlzQWN0aXZlTmV4dDogdGFibGUuX3BhZ2UgPCBwYWdlc1RvdGFsLFxuICAgICAgICAgICAgcGFnZXNUb3RhbDogcGFnZXNUb3RhbCxcblxuICAgICAgICAgICAgc2hvd1ByZXY6IHNob3dQcmV2LFxuICAgICAgICAgICAgc2hvd1BhZ2VGaXJzdDogc2hvd1BhZ2VGaXJzdCxcbiAgICAgICAgICAgIHNob3dEaXZpZGVyU3RhcnQ6IHNob3dEaXZpZGVyU3RhcnQsXG5cbiAgICAgICAgICAgIHBhZ2VzOiBwYWdlcyxcblxuICAgICAgICAgICAgc2hvd0RpdmlkZXJFbmQ6IHNob3dEaXZpZGVyRW5kLFxuICAgICAgICAgICAgc2hvd1BhZ2VMYXN0OiBzaG93UGFnZUxhc3QsXG4gICAgICAgICAgICBzaG93TmV4dDogc2hvd05leHQsXG5cbiAgICAgICAgICAgIGF0dHI6IGF0dHJpYnV0ZXMubGVuZ3RoID4gMCA/ICgnICcgKyBhdHRyaWJ1dGVzLmpvaW4oJyAnKSkgOiAnJyxcbiAgICAgICAgICAgIGxhbmc6IHRhYmxlLmdldExhbmcoKSxcbiAgICAgICAgfSkpO1xuXG5cbiAgICAgICAgbGV0IGJ0blByZXYgPSBjb250cm9sLmZpbmQoJy5jb3JldWktdGFibGVfX3BhZ2VfcHJldicpXG4gICAgICAgIGlmIChidG5QcmV2WzBdKSB7XG4gICAgICAgICAgICBpZiAodGFibGUuX3BhZ2UgPD0gMSkge1xuICAgICAgICAgICAgICAgIGJ0blByZXYuYWRkQ2xhc3MoJ2Rpc2FibGVkJyk7XG5cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYnRuUHJldi5jbGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWJsZS5fcGFnZSA+IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhYmxlLnByZXZQYWdlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cblxuICAgICAgICBsZXQgYnRuTmV4dCA9IGNvbnRyb2wuZmluZCgnLmNvcmV1aS10YWJsZV9fcGFnZV9uZXh0JylcbiAgICAgICAgaWYgKGJ0bk5leHRbMF0pIHtcbiAgICAgICAgICAgIGJ0bk5leHQuY2xpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHRhYmxlLm5leHRQYWdlKCk7XG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG5cblxuICAgICAgICBsZXQgYnRuUGFnZXMgPSBjb250cm9sLmZpbmQoJy5jb3JldWktdGFibGVfX3BhZ2UnKVxuICAgICAgICBpZiAoYnRuUGFnZXNbMF0pIHtcbiAgICAgICAgICAgIGJ0blBhZ2VzLmNsaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBsZXQgcGFnZSA9IE51bWJlcigkLnRyaW0oJCh0aGlzKS50ZXh0KCkpKTtcblxuICAgICAgICAgICAgICAgIGlmIChwYWdlID4gMCkge1xuICAgICAgICAgICAgICAgICAgICB0YWJsZS5nb1BhZ2UocGFnZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjb250cm9sO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgY29udHJvbFBhZ2VzOyIsIlxuaW1wb3J0IFRhYmxlVXRpbHMgZnJvbSAnLi4vdGFibGUudXRpbHMnO1xuaW1wb3J0IENvbnRyb2wgICAgICAgICAgZnJvbSBcIi4uL2Fic3RyYWN0L0NvbnRyb2xcIjtcbmltcG9ydCBjb250cm9sUGFnZXMgICAgIGZyb20gXCIuL3BhZ2VzL2NvbnRyb2xcIjtcblxuY2xhc3MgQ29udHJvbFBhZ2VzIGV4dGVuZHMgQ29udHJvbCB7XG5cbiAgICBfY29udHJvbCA9IG51bGw7XG5cblxuICAgIC8qKlxuICAgICAqINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPXG4gICAgICogQHBhcmFtIHtUYWJsZUluc3RhbmNlfSB0YWJsZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSAgICAgICAgICAgICAgb3B0aW9uc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHRhYmxlLCBvcHRpb25zKSB7XG5cbiAgICAgICAgbGV0IG9wdGlvbnNPcmlnaW5hbCA9IHtcbiAgICAgICAgICAgIHNob3c6IHtcbiAgICAgICAgICAgICAgICBwcmV2OiB0cnVlLFxuICAgICAgICAgICAgICAgIG5leHQ6IHRydWUsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY291bnQ6IDMsXG4gICAgICAgICAgICBhdHRyOiB7XG4gICAgICAgICAgICAgICAgY2xhc3M6ICdwYWdpbmF0aW9uIG1iLTAnXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKG9wdGlvbnMuaGFzT3duUHJvcGVydHkoJ2F0dHInKSAmJiBUYWJsZVV0aWxzLmlzT2JqZWN0KG9wdGlvbnMuYXR0cikpIHtcbiAgICAgICAgICAgIG9wdGlvbnMuYXR0ciA9IFRhYmxlVXRpbHMubWVyZ2VBdHRyKG9wdGlvbnNPcmlnaW5hbC5hdHRyLCBvcHRpb25zLmF0dHIpO1xuICAgICAgICB9XG5cbiAgICAgICAgb3B0aW9ucyA9ICQuZXh0ZW5kKHRydWUsIG9wdGlvbnNPcmlnaW5hbCwgb3B0aW9ucyk7XG5cbiAgICAgICAgc3VwZXIodGFibGUsIG9wdGlvbnMpO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICog0KTQvtGA0LzQuNGA0L7QstCw0L3QuNC1INC60L7QvdGC0LXQvdGC0LAg0LTQu9GPINGA0LDQt9C80LXRidC10L3QuNGPINC90LAg0YHRgtGA0LDQvdC40YbQtVxuICAgICAqIEByZXR1cm5zIHtqUXVlcnl9XG4gICAgICovXG4gICAgcmVuZGVyKCkge1xuXG4gICAgICAgIGxldCB0YWJsZSAgID0gdGhpcy5fdGFibGU7XG4gICAgICAgIGxldCBvcHRpb25zID0gdGhpcy5fb3B0aW9ucztcbiAgICAgICAgbGV0IGNvbnRyb2wgPSBjb250cm9sUGFnZXMucmVuZGVyKHRhYmxlLCBvcHRpb25zKTtcblxuICAgICAgICB0YWJsZS5vbigncmVjb3Jkc19zaG93JywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgbGV0IGNvbnRyb2xVcGRhdGUgPSBjb250cm9sUGFnZXMucmVuZGVyKHRhYmxlLCBvcHRpb25zKTtcblxuICAgICAgICAgICAgY29udHJvbC5yZXBsYWNlV2l0aChjb250cm9sVXBkYXRlKTtcblxuICAgICAgICAgICAgY29udHJvbCA9IGNvbnRyb2xVcGRhdGU7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuX2NvbnRyb2wgPSBjb250cm9sO1xuXG4gICAgICAgIHJldHVybiBjb250cm9sO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ29udHJvbFBhZ2VzOyIsIlxuaW1wb3J0IFRhYmxlVHBsICAgICAgZnJvbSBcIi4uL3RhYmxlLnRwbFwiO1xuaW1wb3J0IFRhYmxlVXRpbHMgICAgZnJvbSAnLi4vdGFibGUudXRpbHMnO1xuaW1wb3J0IFRhYmxlRWxlbWVudHMgZnJvbSBcIi4uL3RhYmxlLmVsZW1lbnRzXCI7XG5pbXBvcnQgQ29udHJvbCAgICAgICAgICAgICBmcm9tIFwiLi4vYWJzdHJhY3QvQ29udHJvbFwiO1xuXG5jbGFzcyBDb250cm9sVG90YWwgZXh0ZW5kcyBDb250cm9sIHtcblxuICAgIC8qKlxuICAgICAqINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPXG4gICAgICogQHBhcmFtIHtUYWJsZUluc3RhbmNlfSB0YWJsZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSAgICAgICAgICAgICAgb3B0aW9uc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHRhYmxlLCBvcHRpb25zKSB7XG5cbiAgICAgICAgbGV0IG9wdGlvbnNPcmlnaW5hbCA9IHtcbiAgICAgICAgICAgIHR5cGU6ICd0b3RhbCcsXG4gICAgICAgICAgICBhdHRyOiB7XG4gICAgICAgICAgICAgICAgY2xhc3M6ICdweC0xJ1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChvcHRpb25zLmhhc093blByb3BlcnR5KCdhdHRyJykgJiYgVGFibGVVdGlscy5pc09iamVjdChvcHRpb25zLmF0dHIpKSB7XG4gICAgICAgICAgICBvcHRpb25zLmF0dHIgPSBUYWJsZVV0aWxzLm1lcmdlQXR0cihvcHRpb25zT3JpZ2luYWwuYXR0ciwgb3B0aW9ucy5hdHRyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIG9wdGlvbnMgPSAkLmV4dGVuZCh0cnVlLCBvcHRpb25zT3JpZ2luYWwsIG9wdGlvbnMpO1xuXG4gICAgICAgIHN1cGVyKHRhYmxlLCBvcHRpb25zKTtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqINCk0L7RgNC80LjRgNC+0LLQsNC90LjQtSDQutC+0L3RgtC10L3RgtCwINC00LvRjyDRgNCw0LfQvNC10YnQtdC90LjRjyDQvdCwINGB0YLRgNCw0L3QuNGG0LVcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgICAqL1xuICAgIHJlbmRlcigpIHtcblxuICAgICAgICBsZXQgYXR0cmlidXRlcyA9IFtdO1xuICAgICAgICBsZXQgdGFibGUgICAgICA9IHRoaXMuX3RhYmxlO1xuXG4gICAgICAgIGlmIChUYWJsZVV0aWxzLmlzT2JqZWN0KHRoaXMuX29wdGlvbnMuYXR0cikpIHtcbiAgICAgICAgICAgICQuZWFjaCh0aGlzLl9vcHRpb25zLmF0dHIsIGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xuICAgICAgICAgICAgICAgIGlmIChbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiB2YWx1ZSkgPj0gMCkge1xuICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzLnB1c2gobmFtZSArICc9XCInICsgdmFsdWUgKyAnXCInKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBjb250cm9sID0gJChUYWJsZVV0aWxzLnJlbmRlcihUYWJsZVRwbFsnY29udHJvbHMvdG90YWwuaHRtbCddLCB7XG4gICAgICAgICAgICByZWNvcmRzVG90YWw6IHRhYmxlLl9yZWNvcmRzVG90YWwsXG4gICAgICAgICAgICBhdHRyOiBhdHRyaWJ1dGVzLmxlbmd0aCA+IDAgPyAoJyAnICsgYXR0cmlidXRlcy5qb2luKCcgJykpIDogJycsXG4gICAgICAgICAgICBsYW5nOiB0YWJsZS5nZXRMYW5nKCksXG4gICAgICAgIH0pKTtcblxuICAgICAgICB0YWJsZS5vbigncmVjb3Jkc19zaG93JywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgY29udHJvbC5maW5kKCcuY29yZXVpLXRhYmxlX19jb3VudC10b3RhbCcpLnRleHQodGFibGUuX3JlY29yZHNUb3RhbCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBjb250cm9sO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ29udHJvbFRvdGFsOyIsIlxuaW1wb3J0IFRhYmxlVXRpbHMgICAgZnJvbSAnLi4vdGFibGUudXRpbHMnO1xuaW1wb3J0IFRhYmxlVHBsICAgICAgZnJvbSBcIi4uL3RhYmxlLnRwbFwiO1xuaW1wb3J0IFRhYmxlRWxlbWVudHMgZnJvbSBcIi4uL3RhYmxlLmVsZW1lbnRzXCI7XG5pbXBvcnQgQ29udHJvbCAgICAgICBmcm9tIFwiLi4vYWJzdHJhY3QvQ29udHJvbFwiO1xuXG5cbmNsYXNzIENvbnRyb2xTZWFyY2ggZXh0ZW5kcyBDb250cm9sIHtcblxuICAgIC8qKlxuICAgICAqINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPXG4gICAgICogQHBhcmFtIHtUYWJsZUluc3RhbmNlfSB0YWJsZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSAgICAgICAgICAgICAgb3B0aW9uc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHRhYmxlLCBvcHRpb25zKSB7XG5cbiAgICAgICAgb3B0aW9ucyA9ICQuZXh0ZW5kKHRydWUsIHtcbiAgICAgICAgICAgIGJ0bjoge1xuICAgICAgICAgICAgICAgIGF0dHI6IHsgY2xhc3M6ICdidG4gYnRuLW91dGxpbmUtc2Vjb25kYXJ5JyB9LFxuICAgICAgICAgICAgICAgIGNvbnRlbnQ6IG51bGwsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYnRuQ2xlYXI6IHtcbiAgICAgICAgICAgICAgICBjb250ZW50OiBcIjxpIGNsYXNzPVxcXCJiaSBiaS14IHRleHQtZGFuZ2VyXFxcIj48L2k+XCIsXG4gICAgICAgICAgICAgICAgYXR0cjogeyBjbGFzczogJ2J0biBidG4tb3V0bGluZS1zZWNvbmRhcnknIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBidG5Db21wbGV0ZToge1xuICAgICAgICAgICAgICAgIGF0dHI6IHsgY2xhc3M6ICdidG4gYnRuLXByaW1hcnknIH0sXG4gICAgICAgICAgICAgICAgY29udGVudDogbnVsbFxuICAgICAgICAgICAgfVxuICAgICAgICB9LCBvcHRpb25zKTtcblxuICAgICAgICBzdXBlcih0YWJsZSwgb3B0aW9ucyk7XG5cblxuICAgICAgICBpZiAoICEgVGFibGVVdGlscy5pc09iamVjdCh0aGlzLl9vcHRpb25zLmJ0bikpIHtcbiAgICAgICAgICAgIHRoaXMuX29wdGlvbnMuYnRuID0ge307XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoICEgdGhpcy5fb3B0aW9ucy5idG4uaGFzT3duUHJvcGVydHkoJ2NvbnRlbnQnKSB8fFxuICAgICAgICAgICAgdHlwZW9mIHRoaXMuX29wdGlvbnMuYnRuLmNvbnRlbnQgIT09ICdzdHJpbmcnXG4gICAgICAgICkge1xuICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy5idG4uY29udGVudCA9ICc8aSBjbGFzcz1cImJpIGJpLXNlYXJjaFwiPjwvaT4gJyArIHRhYmxlLmdldExhbmcoKS5zZWFyY2hcbiAgICAgICAgfVxuXG5cbiAgICAgICAgaWYgKCAhIFRhYmxlVXRpbHMuaXNPYmplY3QodGhpcy5fb3B0aW9ucy5idG5DbGVhcikpIHtcbiAgICAgICAgICAgIHRoaXMuX29wdGlvbnMuYnRuQ2xlYXIgPSB7fTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICggISB0aGlzLl9vcHRpb25zLmJ0bkNsZWFyLmhhc093blByb3BlcnR5KCdjb250ZW50JykgfHxcbiAgICAgICAgICAgIHR5cGVvZiB0aGlzLl9vcHRpb25zLmJ0bkNsZWFyLmNvbnRlbnQgIT09ICdzdHJpbmcnXG4gICAgICAgICkge1xuICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy5idG5DbGVhci5jb250ZW50ID0gdGFibGUuZ2V0TGFuZygpLmNsZWFyXG4gICAgICAgIH1cblxuXG4gICAgICAgIGlmICggISBUYWJsZVV0aWxzLmlzT2JqZWN0KHRoaXMuX29wdGlvbnMuYnRuQ29tcGxldGUpKSB7XG4gICAgICAgICAgICB0aGlzLl9vcHRpb25zLmJ0bkNvbXBsZXRlID0ge307XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoICEgdGhpcy5fb3B0aW9ucy5idG5Db21wbGV0ZS5oYXNPd25Qcm9wZXJ0eSgnY29udGVudCcpIHx8XG4gICAgICAgICAgICB0eXBlb2YgdGhpcy5fb3B0aW9ucy5idG5Db21wbGV0ZS5jb250ZW50ICE9PSAnc3RyaW5nJ1xuICAgICAgICApIHtcbiAgICAgICAgICAgIHRoaXMuX29wdGlvbnMuYnRuQ29tcGxldGUuY29udGVudCA9IHRhYmxlLmdldExhbmcoKS5zZWFyY2hBY3Rpb25cbiAgICAgICAgfVxuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICog0KTQvtGA0LzQuNGA0L7QstCw0L3QuNC1INC60L7QvdGC0LXQvdGC0LAg0LTQu9GPINGA0LDQt9C80LXRidC10L3QuNGPINC90LAg0YHRgtGA0LDQvdC40YbQtVxuICAgICAqIEByZXR1cm5zIHtqUXVlcnl9XG4gICAgICovXG4gICAgcmVuZGVyKCkge1xuXG4gICAgICAgIGxldCBidG5BdHRyICAgID0gW107XG4gICAgICAgIGxldCBidG5Db250ZW50ID0gJyc7XG4gICAgICAgIGxldCBidG5DbGVhciAgID0gJyc7XG4gICAgICAgIGxldCB0aGF0ICAgICAgID0gdGhpcztcbiAgICAgICAgbGV0IHRhYmxlICAgICAgPSB0aGlzLl90YWJsZTtcblxuXG4gICAgICAgIGlmICggISBUYWJsZVV0aWxzLmlzT2JqZWN0KHRoaXMuX29wdGlvbnMuYnRuKSkge1xuICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy5idG4gPSB7fTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoICEgVGFibGVVdGlscy5pc09iamVjdCh0aGlzLl9vcHRpb25zLmJ0bi5hdHRyKSkge1xuICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy5idG4uYXR0ciA9IHt9O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCAhIHRoaXMuX29wdGlvbnMuYnRuLmF0dHIuaGFzT3duUHJvcGVydHkoJ2NsYXNzJykgfHxcbiAgICAgICAgICAgIHR5cGVvZiB0aGlzLl9vcHRpb25zLmJ0bi5hdHRyLmNsYXNzICE9PSAnc3RyaW5nJ1xuICAgICAgICApIHtcbiAgICAgICAgICAgIHRoaXMuX29wdGlvbnMuYnRuLmF0dHIuY2xhc3MgPSAnYnRuLXNlYXJjaC10b2dnbGUnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy5idG4uYXR0ci5jbGFzcyArPSAnIGJ0bi1zZWFyY2gtdG9nZ2xlJztcbiAgICAgICAgfVxuXG4gICAgICAgICQuZWFjaCh0aGlzLl9vcHRpb25zLmJ0bi5hdHRyLCBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcbiAgICAgICAgICAgIGJ0bkF0dHIucHVzaChuYW1lICsgJz1cIicgKyB2YWx1ZSArICdcIicpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAodHlwZW9mIHRoaXMuX29wdGlvbnMuYnRuLmNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBidG5Db250ZW50ID0gdGhpcy5fb3B0aW9ucy5idG4uY29udGVudDtcbiAgICAgICAgfVxuXG5cblxuICAgICAgICBpZiAodGhpcy5fdGFibGUuZ2V0U2VhcmNoRGF0YSgpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGJ0bkNsZWFyID0gdGhpcy5fcmVuZGVyQnRuQ2xlYXIoKTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgbGV0IGNvbnRyb2wgPSAkKFRhYmxlVXRpbHMucmVuZGVyKFRhYmxlVHBsWydjb250cm9scy9zZWFyY2guaHRtbCddLCB7XG4gICAgICAgICAgICBidG5Db250ZW50OiBidG5Db250ZW50LFxuICAgICAgICAgICAgYnRuQXR0cjogYnRuQXR0ci5sZW5ndGggPiAwID8gKCcgJyArIGJ0bkF0dHIuam9pbignICcpKSA6ICcnLFxuICAgICAgICAgICAgYnRuQ2xlYXI6IGJ0bkNsZWFyXG4gICAgICAgIH0pKTtcblxuICAgICAgICBsZXQgYnV0dG9uVG9nZ2xlID0gY29udHJvbC5maW5kKCcuYnRuLXNlYXJjaC10b2dnbGUnKTtcbiAgICAgICAgbGV0IGJ1dHRvbkNsZWFyICA9IGNvbnRyb2wuZmluZCgnLmJ0bi1jbGVhcicpO1xuXG4gICAgICAgIGJ1dHRvblRvZ2dsZS5jbGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBsZXQgY29udGFpbmVyICAgICAgICA9IFRhYmxlRWxlbWVudHMuZ2V0U2VhcmNoQ29udGFpbmVyKHRhYmxlLmdldElkKCkpO1xuICAgICAgICAgICAgbGV0IGNvbHVtbnNDb250YWluZXIgPSBUYWJsZUVsZW1lbnRzLmdldENvbHVtbnNDb250YWluZXIodGFibGUuZ2V0SWQoKSk7XG5cbiAgICAgICAgICAgIGlmIChjb2x1bW5zQ29udGFpbmVyWzBdKSB7XG4gICAgICAgICAgICAgICAgY29sdW1uc0NvbnRhaW5lci5oaWRlKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChjb250YWluZXJbMF0pIHtcbiAgICAgICAgICAgICAgICBjb250YWluZXIuZmFkZVRvZ2dsZSgnZmFzdCcpO1xuXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGxldCBjb250cm9scyAgICAgICAgICAgPSBbXTtcbiAgICAgICAgICAgICAgICBsZXQgYnRuQ29tcGxldGVBdHRyICAgID0gW107XG4gICAgICAgICAgICAgICAgbGV0IGJ0bkNvbXBsZXRlQ29udGVudCA9ICcnO1xuICAgICAgICAgICAgICAgIGxldCB0YWJsZU9wdGlvbnMgICAgICAgPSB0YWJsZS5nZXRPcHRpb25zKCk7XG4gICAgICAgICAgICAgICAgbGV0IGxhYmVsV2lkdGggICAgICAgICA9IHRhYmxlT3B0aW9ucy5zZWFyY2guaGFzT3duUHJvcGVydHkoJ2xhYmVsV2lkdGgnKSAmJiB0YWJsZU9wdGlvbnMuc2VhcmNoLmxhYmVsV2lkdGhcbiAgICAgICAgICAgICAgICAgICAgPyB0YWJsZU9wdGlvbnMuc2VhcmNoLmxhYmVsV2lkdGhcbiAgICAgICAgICAgICAgICAgICAgOiAxNjA7XG5cbiAgICAgICAgICAgICAgICB0YWJsZS5fc2VhcmNoLm1hcChmdW5jdGlvbiAoc2VhcmNoQ29udHJvbCkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgb3B0aW9ucyA9IHNlYXJjaENvbnRyb2wuZ2V0T3B0aW9ucygpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLmhhc093blByb3BlcnR5KCdmaWVsZCcpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlb2Ygb3B0aW9ucy5maWVsZCA9PT0gJ3N0cmluZycgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnMuZmllbGRcbiAgICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgZGVzY3JpcHRpb25MYWJlbCA9IG9wdGlvbnMuaGFzT3duUHJvcGVydHkoJ2Rlc2NyaXB0aW9uTGFiZWwnKSAmJiBvcHRpb25zLmRlc2NyaXB0aW9uTGFiZWxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IG9wdGlvbnMuZGVzY3JpcHRpb25MYWJlbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogbnVsbDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGNvbnRyb2xDb250YWluZXIgPSAkKFRhYmxlVXRpbHMucmVuZGVyKFRhYmxlVHBsWydjb250cm9scy9zZWFyY2gvY29udHJvbC5odG1sJ10sIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbFdpZHRoOiAgICAgICBsYWJlbFdpZHRoICsgKHR5cGVvZiBsYWJlbFdpZHRoID09PSAnbnVtYmVyJyA/ICdweCcgOiAnJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb25MYWJlbDogZGVzY3JpcHRpb25MYWJlbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogICAgICAgICAgICBvcHRpb25zLmhhc093blByb3BlcnR5KCdsYWJlbCcpICYmIHR5cGVvZiBvcHRpb25zLmxhYmVsID09PSAnc3RyaW5nJyA/IG9wdGlvbnMubGFiZWwgOiAnJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogICAgICBvcHRpb25zLmhhc093blByb3BlcnR5KCdkZXNjcmlwdGlvbicpICYmIHR5cGVvZiBvcHRpb25zLmRlc2NyaXB0aW9uID09PSAnc3RyaW5nJyA/IG9wdGlvbnMuZGVzY3JpcHRpb24gOiAnJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWZmaXg6ICAgICAgICAgICBvcHRpb25zLmhhc093blByb3BlcnR5KCdzdWZmaXgnKSAmJiB0eXBlb2Ygb3B0aW9ucy5zdWZmaXggPT09ICdzdHJpbmcnID8gb3B0aW9ucy5zdWZmaXggOiAnJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbENvbnRhaW5lci5maW5kKCcuY29yZXVpLXRhYmxlX19zZWFyY2gtY29udHJvbF9jb250ZW50JykucHJlcGVuZChzZWFyY2hDb250cm9sLnJlbmRlcigpKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbHMucHVzaChjb250cm9sQ29udGFpbmVyKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuXG5cblxuICAgICAgICAgICAgICAgIGlmICggISBUYWJsZVV0aWxzLmlzT2JqZWN0KHRoYXQuX29wdGlvbnMuYnRuQ29tcGxldGUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoYXQuX29wdGlvbnMuYnRuQ29tcGxldGUgPSB7fTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoICEgVGFibGVVdGlscy5pc09iamVjdCh0aGF0Ll9vcHRpb25zLmJ0bkNvbXBsZXRlLmF0dHIpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoYXQuX29wdGlvbnMuYnRuQ29tcGxldGUuYXR0ciA9IHt9O1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICh0aGF0Ll9vcHRpb25zLmJ0bkNvbXBsZXRlLmF0dHIuaGFzT3duUHJvcGVydHkoJ3R5cGUnKSkge1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgdGhhdC5fb3B0aW9ucy5idG5Db21wbGV0ZS5hdHRyLnR5cGU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKCAhIHRoYXQuX29wdGlvbnMuYnRuQ29tcGxldGUuYXR0ci5oYXNPd25Qcm9wZXJ0eSgnY2xhc3MnKSB8fFxuICAgICAgICAgICAgICAgICAgICB0eXBlb2YgdGhhdC5fb3B0aW9ucy5idG5Db21wbGV0ZS5hdHRyLmNsYXNzICE9PSAnc3RyaW5nJ1xuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICB0aGF0Ll9vcHRpb25zLmJ0bkNvbXBsZXRlLmF0dHIuY2xhc3MgPSAnYnRuLWNvbXBsZXRlJztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGF0Ll9vcHRpb25zLmJ0bkNvbXBsZXRlLmF0dHIuY2xhc3MgKz0gJyBidG4tY29tcGxldGUnO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChUYWJsZVV0aWxzLmlzT2JqZWN0KHRoYXQuX29wdGlvbnMuYnRuQ29tcGxldGUuYXR0cikpIHtcbiAgICAgICAgICAgICAgICAgICAgJC5lYWNoKHRoYXQuX29wdGlvbnMuYnRuQ29tcGxldGUuYXR0ciwgZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2YgdmFsdWUpID49IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBidG5Db21wbGV0ZUF0dHIucHVzaChuYW1lICsgJz1cIicgKyB2YWx1ZSArICdcIicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGF0Ll9vcHRpb25zLmJ0bkNvbXBsZXRlLmNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgIGJ0bkNvbXBsZXRlQ29udGVudCA9IHRoYXQuX29wdGlvbnMuYnRuQ29tcGxldGUuY29udGVudDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBsZXQgc2VhcmNoQ29udGFpbmVyID0gJChUYWJsZVV0aWxzLnJlbmRlcihUYWJsZVRwbFsnY29udHJvbHMvc2VhcmNoL2NvbnRhaW5lci5odG1sJ10sIHtcbiAgICAgICAgICAgICAgICAgICAgbGFiZWxXaWR0aDogbGFiZWxXaWR0aCArICh0eXBlb2YgbGFiZWxXaWR0aCA9PT0gJ251bWJlcicgPyAncHgnIDogJycpLFxuICAgICAgICAgICAgICAgICAgICBidG5Db21wbGV0ZUF0dHI6ICAgIGJ0bkNvbXBsZXRlQXR0ci5sZW5ndGggPiAwID8gKCcgJyArIGJ0bkNvbXBsZXRlQXR0ci5qb2luKCcgJykpIDogJycsXG4gICAgICAgICAgICAgICAgICAgIGJ0bkNvbXBsZXRlQ29udGVudDogYnRuQ29tcGxldGVDb250ZW50LFxuICAgICAgICAgICAgICAgIH0pKTtcblxuICAgICAgICAgICAgICAgICQoJy5idG4tY29tcGxldGUnLCBzZWFyY2hDb250YWluZXIpLmNsaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdGFibGUuc2VhcmNoUmVjb3JkcygpO1xuXG4gICAgICAgICAgICAgICAgICAgIGxldCBjb250YWluZXIgPSBUYWJsZUVsZW1lbnRzLmdldFNlYXJjaENvbnRhaW5lcih0YWJsZS5nZXRJZCgpKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoY29udGFpbmVyWzBdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250YWluZXIuZmFkZU91dCgyMDApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBpZiAoY29udHJvbHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgc2VhcmNoQ29udHJvbHMgPSBzZWFyY2hDb250YWluZXIuZmluZCgnLmNvcmV1aS10YWJsZV9fc2VhcmNoX2NvbnRyb2xzJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgY29udHJvbHMubWFwKGZ1bmN0aW9uIChjb250cm9sKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWFyY2hDb250cm9scy5hcHBlbmQoY29udHJvbCk7XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgbGV0IHdyYXBwZXIgPSBUYWJsZUVsZW1lbnRzLmdldFdyYXBwZXIodGFibGUuZ2V0SWQoKSk7XG4gICAgICAgICAgICAgICAgd3JhcHBlci5iZWZvcmUoc2VhcmNoQ29udGFpbmVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cblxuICAgICAgICBidXR0b25DbGVhci5jbGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0YWJsZS5jbGVhclNlYXJjaCgpO1xuXG4gICAgICAgICAgICBsZXQgY29udGFpbmVyID0gVGFibGVFbGVtZW50cy5nZXRTZWFyY2hDb250YWluZXIodGFibGUuZ2V0SWQoKSk7XG5cbiAgICAgICAgICAgIGlmIChjb250YWluZXJbMF0pIHtcbiAgICAgICAgICAgICAgICBjb250YWluZXIuZmFkZU91dCgnZmFzdCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnV0dG9uQ2xlYXIucmVtb3ZlKCk7XG4gICAgICAgIH0pO1xuXG5cbiAgICAgICAgdGFibGUub24oJ3NlYXJjaF9jaGFuZ2UnLCBmdW5jdGlvbiAoc2VhcmNoRGF0YSkge1xuICAgICAgICAgICAgbGV0IGJ1dHRvbkNsZWFyID0gJCgnYnV0dG9uLmJ0bi1jbGVhcicsIGNvbnRyb2wpO1xuXG4gICAgICAgICAgICBpZiAoc2VhcmNoRGF0YS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgaWYgKCAhIGJ1dHRvbkNsZWFyWzBdKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBidG5DbGVhciA9ICQodGhhdC5fcmVuZGVyQnRuQ2xlYXIoKSk7XG5cbiAgICAgICAgICAgICAgICAgICAgYnRuQ2xlYXIuY2xpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGFibGUuY2xlYXJTZWFyY2goKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGNvbnRhaW5lciA9IFRhYmxlRWxlbWVudHMuZ2V0U2VhcmNoQ29udGFpbmVyKHRhYmxlLmdldElkKCkpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29udGFpbmVyWzBdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyLmZhZGVPdXQoJ2Zhc3QnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGJ0bkNsZWFyLnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICBidG5DbGVhci5pbnNlcnRBZnRlcihidXR0b25Ub2dnbGUpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBidXR0b25DbGVhci5yZW1vdmUoKTtcblxuICAgICAgICAgICAgICAgIGxldCBjb250YWluZXIgPSBUYWJsZUVsZW1lbnRzLmdldFNlYXJjaENvbnRhaW5lcih0YWJsZS5nZXRJZCgpKTtcblxuICAgICAgICAgICAgICAgIGlmIChjb250YWluZXJbMF0pIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyLmZhZGVPdXQoJ2Zhc3QnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG5cbiAgICAgICAgcmV0dXJuIGNvbnRyb2w7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiDQoNC10L3QtNC10YAg0LrQvdC+0L/QutC4INC+0YLQvNC10L3Ri1xuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX3JlbmRlckJ0bkNsZWFyICgpIHtcblxuICAgICAgICBsZXQgYXR0cmlidXRlcyA9IFtdO1xuICAgICAgICBsZXQgY29udGVudCAgICA9ICcnO1xuXG4gICAgICAgIGlmICggISBUYWJsZVV0aWxzLmlzT2JqZWN0KHRoaXMuX29wdGlvbnMuYnRuQ2xlYXIpKSB7XG4gICAgICAgICAgICB0aGlzLl9vcHRpb25zLmJ0bkNsZWFyID0ge307XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCAhIFRhYmxlVXRpbHMuaXNPYmplY3QodGhpcy5fb3B0aW9ucy5idG5DbGVhci5hdHRyKSkge1xuICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy5idG5DbGVhci5hdHRyID0ge307XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoICEgdGhpcy5fb3B0aW9ucy5idG5DbGVhci5hdHRyLmhhc093blByb3BlcnR5KCdjbGFzcycpIHx8XG4gICAgICAgICAgICB0eXBlb2YgdGhpcy5fb3B0aW9ucy5idG5DbGVhci5hdHRyLmNsYXNzICE9PSAnc3RyaW5nJ1xuICAgICAgICApIHtcbiAgICAgICAgICAgIHRoaXMuX29wdGlvbnMuYnRuQ2xlYXIuYXR0ci5jbGFzcyA9ICdidG4tY2xlYXInO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy5idG5DbGVhci5hdHRyLmNsYXNzICs9ICcgYnRuLWNsZWFyJztcbiAgICAgICAgfVxuXG4gICAgICAgICQuZWFjaCh0aGlzLl9vcHRpb25zLmJ0bkNsZWFyLmF0dHIsIGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xuICAgICAgICAgICAgYXR0cmlidXRlcy5wdXNoKG5hbWUgKyAnPVwiJyArIHZhbHVlICsgJ1wiJyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5fb3B0aW9ucy5idG5DbGVhci5jb250ZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgY29udGVudCA9IHRoaXMuX29wdGlvbnMuYnRuQ2xlYXIuY29udGVudDtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgcmV0dXJuIFRhYmxlVXRpbHMucmVuZGVyKFRhYmxlVHBsWydjb250cm9scy9zZWFyY2gvY2xlYXIuaHRtbCddLCB7XG4gICAgICAgICAgICBjb250ZW50OiBjb250ZW50LFxuICAgICAgICAgICAgYXR0cjogYXR0cmlidXRlcy5sZW5ndGggPiAwID8gKCcgJyArIGF0dHJpYnV0ZXMuam9pbignICcpKSA6ICcnLFxuICAgICAgICB9KTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IENvbnRyb2xTZWFyY2g7IiwiXG5pbXBvcnQgVGFibGVVdGlscyAgICBmcm9tICcuLi90YWJsZS51dGlscyc7XG5pbXBvcnQgVGFibGVUcGwgICAgICBmcm9tIFwiLi4vdGFibGUudHBsXCI7XG5pbXBvcnQgVGFibGVFbGVtZW50cyBmcm9tIFwiLi4vdGFibGUuZWxlbWVudHNcIjtcbmltcG9ydCBDb250cm9sICAgICAgIGZyb20gXCIuLi9hYnN0cmFjdC9Db250cm9sXCI7XG5cblxuY2xhc3MgQ29udHJvbENvbHVtbnMgZXh0ZW5kcyBDb250cm9sIHtcblxuICAgIC8qKlxuICAgICAqINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPXG4gICAgICogQHBhcmFtIHtUYWJsZUluc3RhbmNlfSB0YWJsZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSAgICAgICAgICAgICAgb3B0aW9uc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHRhYmxlLCBvcHRpb25zKSB7XG5cbiAgICAgICAgb3B0aW9ucyA9ICQuZXh0ZW5kKHRydWUsIHtcbiAgICAgICAgICAgIGlkOiBudWxsLFxuICAgICAgICAgICAgdHlwZTogJ2NvbHVtbnMnLFxuICAgICAgICAgICAgYnRuOiB7XG4gICAgICAgICAgICAgICAgY29udGVudDogJzxpIGNsYXNzPVwiYmkgYmktbGF5b3V0LXRocmVlLWNvbHVtbnNcIj48L2k+JyxcbiAgICAgICAgICAgICAgICBhdHRyOiB7XG4gICAgICAgICAgICAgICAgICAgIGNsYXNzOiAnYnRuIGJ0bi1vdXRsaW5lLXNlY29uZGFyeSdcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYnRuQ29tcGxldGU6IHtcbiAgICAgICAgICAgICAgICBjb250ZW50OiBudWxsLFxuICAgICAgICAgICAgICAgIGF0dHI6IHsgY2xhc3M6ICdidG4gYnRuLXByaW1hcnknIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgb3B0aW9ucyk7XG5cbiAgICAgICAgc3VwZXIodGFibGUsIG9wdGlvbnMpO1xuXG5cbiAgICAgICAgaWYgKCAhIFRhYmxlVXRpbHMuaXNPYmplY3QodGhpcy5fb3B0aW9ucy5idG4pKSB7XG4gICAgICAgICAgICB0aGlzLl9vcHRpb25zLmJ0biA9IHt9O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCAhIFRhYmxlVXRpbHMuaXNPYmplY3QodGhpcy5fb3B0aW9ucy5idG5Db21wbGV0ZSkpIHtcbiAgICAgICAgICAgIHRoaXMuX29wdGlvbnMuYnRuQ29tcGxldGUgPSB7fTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChUYWJsZVV0aWxzLmlzT2JqZWN0KHRoaXMuX29wdGlvbnMuYnRuQ29tcGxldGUpICYmXG4gICAgICAgICAgICB0eXBlb2YgdGhpcy5fb3B0aW9ucy5idG5Db21wbGV0ZS5jb250ZW50ICE9PSAnc3RyaW5nJ1xuICAgICAgICApIHtcbiAgICAgICAgICAgIHRoaXMuX29wdGlvbnMuYnRuQ29tcGxldGUuY29udGVudCA9IHRhYmxlLmdldExhbmcoKS5jb21wbGV0ZVxuICAgICAgICB9XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiDQpNC+0YDQvNC40YDQvtCy0LDQvdC40LUg0LrQvtC90YLQtdC90YLQsCDQtNC70Y8g0YDQsNC30LzQtdGJ0LXQvdC40Y8g0L3QsCDRgdGC0YDQsNC90LjRhtC1XG4gICAgICogQHJldHVybnMge2pRdWVyeX1cbiAgICAgKi9cbiAgICByZW5kZXIoKSB7XG5cbiAgICAgICAgbGV0IHRoYXQgICAgICAgPSB0aGlzO1xuICAgICAgICBsZXQgdGFibGUgICAgICA9IHRoaXMuX3RhYmxlO1xuICAgICAgICBsZXQgYXR0cmlidXRlcyA9IFtdO1xuXG4gICAgICAgIGlmIChUYWJsZVV0aWxzLmlzT2JqZWN0KHRoaXMuX29wdGlvbnMuYnRuLmF0dHIpKSB7XG4gICAgICAgICAgICAkLmVhY2godGhpcy5fb3B0aW9ucy5idG4uYXR0ciwgZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIHZhbHVlKSA+PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXMucHVzaChuYW1lICsgJz1cIicgKyB2YWx1ZSArICdcIicpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGJ0biA9ICQoVGFibGVVdGlscy5yZW5kZXIoVGFibGVUcGxbJ2NvbnRyb2xzL2NvbHVtbnMuaHRtbCddLCB7XG4gICAgICAgICAgICBidG5Db250ZW50OiB0aGlzLl9vcHRpb25zLmJ0bi5jb250ZW50LFxuICAgICAgICAgICAgYnRuQXR0cjogYXR0cmlidXRlcy5sZW5ndGggPiAwID8gKCcgJyArIGF0dHJpYnV0ZXMuam9pbignICcpKSA6ICcnLFxuICAgICAgICB9KSk7XG5cblxuICAgICAgICBidG4uY2xpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgbGV0IGNvbnRhaW5lciAgICAgICA9IFRhYmxlRWxlbWVudHMuZ2V0Q29sdW1uc0NvbnRhaW5lcih0YWJsZS5nZXRJZCgpKTtcbiAgICAgICAgICAgIGxldCBjb250YWluZXJTZWFyY2ggPSBUYWJsZUVsZW1lbnRzLmdldFNlYXJjaENvbnRhaW5lcih0YWJsZS5nZXRJZCgpKTtcblxuICAgICAgICAgICAgaWYgKGNvbnRhaW5lclNlYXJjaFswXSkge1xuICAgICAgICAgICAgICAgIGNvbnRhaW5lclNlYXJjaC5oaWRlKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChjb250YWluZXJbMF0pIHtcbiAgICAgICAgICAgICAgICBjb250YWluZXIuZmFkZVRvZ2dsZSgnZmFzdCcpO1xuXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGxldCBjb2x1bW5zICAgICAgICAgICAgPSBbXTtcbiAgICAgICAgICAgICAgICBsZXQgc2hvd0FsbCAgICAgICAgICAgID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBsZXQgYnRuQ29tcGxldGVBdHRyICAgID0gW107XG4gICAgICAgICAgICAgICAgbGV0IGJ0bkNvbXBsZXRlQ29udGVudCA9ICcnO1xuICAgICAgICAgICAgICAgIGxldCB3cmFwcGVyICAgICAgICAgICAgPSBUYWJsZUVsZW1lbnRzLmdldFdyYXBwZXIodGFibGUuZ2V0SWQoKSk7XG5cbiAgICAgICAgICAgICAgICB0YWJsZS5fY29sdW1ucy5tYXAoZnVuY3Rpb24gKGNvbHVtbikge1xuICAgICAgICAgICAgICAgICAgICBsZXQgb3B0aW9ucyA9IGNvbHVtbi5nZXRPcHRpb25zKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuaGFzT3duUHJvcGVydHkoJ2ZpZWxkJykgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVvZiBvcHRpb25zLmZpZWxkID09PSAnc3RyaW5nJyAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5maWVsZFxuICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBpc1Nob3cgPSBjb2x1bW4uaXNTaG93KCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbHVtbnMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmllbGQ6IG9wdGlvbnMuZmllbGQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6IG9wdGlvbnMuaGFzT3duUHJvcGVydHkoJ2xhYmVsJykgJiYgdHlwZW9mIG9wdGlvbnMubGFiZWwgPT09ICdzdHJpbmcnID8gb3B0aW9ucy5sYWJlbCA6ICcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3c6IGlzU2hvdyxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoICEgaXNTaG93KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvd0FsbCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG5cblxuICAgICAgICAgICAgICAgIGxldCBvcHRpb25zID0gdGhhdC5nZXRPcHRpb25zKCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoICEgVGFibGVVdGlscy5pc09iamVjdChvcHRpb25zLmJ0bkNvbXBsZXRlKSkge1xuICAgICAgICAgICAgICAgICAgICBvcHRpb25zLmJ0bkNvbXBsZXRlID0ge307XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKCAhIFRhYmxlVXRpbHMuaXNPYmplY3Qob3B0aW9ucy5idG5Db21wbGV0ZS5hdHRyKSkge1xuICAgICAgICAgICAgICAgICAgICBvcHRpb25zLmJ0bkNvbXBsZXRlLmF0dHIgPSB7fTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5idG5Db21wbGV0ZS5hdHRyLmhhc093blByb3BlcnR5KCd0eXBlJykpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIG9wdGlvbnMuYnRuQ29tcGxldGUuYXR0ci50eXBlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICggISBvcHRpb25zLmJ0bkNvbXBsZXRlLmF0dHIuaGFzT3duUHJvcGVydHkoJ2NsYXNzJykgfHxcbiAgICAgICAgICAgICAgICAgICAgdHlwZW9mIG9wdGlvbnMuYnRuQ29tcGxldGUuYXR0ci5jbGFzcyAhPT0gJ3N0cmluZydcbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5idG5Db21wbGV0ZS5hdHRyLmNsYXNzID0gJ2J0bi1jb21wbGV0ZSc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5idG5Db21wbGV0ZS5hdHRyLmNsYXNzICs9ICcgYnRuLWNvbXBsZXRlJztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoVGFibGVVdGlscy5pc09iamVjdChvcHRpb25zLmJ0bkNvbXBsZXRlLmF0dHIpKSB7XG4gICAgICAgICAgICAgICAgICAgICQuZWFjaChvcHRpb25zLmJ0bkNvbXBsZXRlLmF0dHIsIGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIHZhbHVlKSA+PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnRuQ29tcGxldGVBdHRyLnB1c2gobmFtZSArICc9XCInICsgdmFsdWUgKyAnXCInKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zLmJ0bkNvbXBsZXRlLmNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgIGJ0bkNvbXBsZXRlQ29udGVudCA9IG9wdGlvbnMuYnRuQ29tcGxldGUuY29udGVudDtcbiAgICAgICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgICAgIGxldCBjb250YWluZXJMaXN0ID0gJChUYWJsZVV0aWxzLnJlbmRlcihUYWJsZVRwbFsnY29udHJvbHMvY29sdW1ucy9saXN0Lmh0bWwnXSwge1xuICAgICAgICAgICAgICAgICAgICBzaG93QWxsOiAgICAgICAgICAgIHNob3dBbGwsXG4gICAgICAgICAgICAgICAgICAgIGNvbHVtbnM6ICAgICAgICAgICAgY29sdW1ucyxcbiAgICAgICAgICAgICAgICAgICAgYnRuQ29tcGxldGVBdHRyOiAgICBidG5Db21wbGV0ZUF0dHIubGVuZ3RoID4gMCA/ICgnICcgKyBidG5Db21wbGV0ZUF0dHIuam9pbignICcpKSA6ICcnLFxuICAgICAgICAgICAgICAgICAgICBidG5Db21wbGV0ZUNvbnRlbnQ6IGJ0bkNvbXBsZXRlQ29udGVudCxcbiAgICAgICAgICAgICAgICAgICAgbGFuZzogICAgICAgICAgICAgICB0YWJsZS5nZXRMYW5nKCksXG4gICAgICAgICAgICAgICAgfSkpO1xuXG5cbiAgICAgICAgICAgICAgICAkKCcuY29yZXVpLXRhYmxlX19jaGVja19hbGwgaW5wdXQnLCBjb250YWluZXJMaXN0KS5jaGFuZ2UoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAkKCcuY29yZXVpLXRhYmxlX2NoZWNrLWNvbHVtbiBpbnB1dCcsIGNvbnRhaW5lckxpc3QpLnByb3AoJ2NoZWNrZWQnLCAkKHRoaXMpLmlzKFwiOmNoZWNrZWRcIikpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG5cbiAgICAgICAgICAgICAgICAkKCcuYnRuLWNvbXBsZXRlJywgY29udGFpbmVyTGlzdCkuY2xpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgY29sdW1ucyA9IFtdO1xuXG4gICAgICAgICAgICAgICAgICAgICQoJy5jb3JldWktdGFibGVfY2hlY2stY29sdW1uIGlucHV0OmNoZWNrZWQnLCBjb250YWluZXJMaXN0KS5lYWNoKGZ1bmN0aW9uIChrZXksIGlucHV0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2x1bW5zLnB1c2goJChpbnB1dCkudmFsKCkpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICB0YWJsZS5zZXRDb2x1bW5zU2hvdyhjb2x1bW5zKTtcblxuICAgICAgICAgICAgICAgICAgICBjb250YWluZXJMaXN0LmZhZGVPdXQoJ2Zhc3QnKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuXG4gICAgICAgICAgICAgICAgd3JhcHBlci5iZWZvcmUoY29udGFpbmVyTGlzdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBidG47XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBDb250cm9sQ29sdW1uczsiLCJcbmltcG9ydCBUYWJsZVRwbCAgIGZyb20gJy4uL3RhYmxlLnRwbCc7XG5pbXBvcnQgVGFibGVVdGlscyBmcm9tICcuLi90YWJsZS51dGlscyc7XG5pbXBvcnQgQ29udHJvbCAgICAgICAgICBmcm9tIFwiLi4vYWJzdHJhY3QvQ29udHJvbFwiO1xuXG5jbGFzcyBDb250cm9sQ2FwdGlvbiBleHRlbmRzIENvbnRyb2wge1xuXG4gICAgLyoqXG4gICAgICog0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y9cbiAgICAgKiBAcGFyYW0ge1RhYmxlSW5zdGFuY2V9IHRhYmxlXG4gICAgICogQHBhcmFtIHtPYmplY3R9ICAgICAgICAgICAgICBvcHRpb25zXG4gICAgICovXG4gICAgY29uc3RydWN0b3IodGFibGUsIG9wdGlvbnMpIHtcblxuICAgICAgICBvcHRpb25zID0gJC5leHRlbmQodHJ1ZSwge1xuICAgICAgICAgICAgaWQ6IG51bGwsXG4gICAgICAgICAgICB0eXBlOiAnY2FwdGlvbicsXG4gICAgICAgICAgICB0aXRsZTogbnVsbCxcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBudWxsLFxuICAgICAgICAgICAgdmFsdWU6IG51bGwsXG4gICAgICAgIH0sIG9wdGlvbnMpO1xuXG4gICAgICAgIHN1cGVyKHRhYmxlLCBvcHRpb25zKTtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqINCk0L7RgNC80LjRgNC+0LLQsNC90LjQtSDQutC+0L3RgtC10L3RgtCwINC00LvRjyDRgNCw0LfQvNC10YnQtdC90LjRjyDQvdCwINGB0YLRgNCw0L3QuNGG0LVcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgICAqL1xuICAgIHJlbmRlcigpIHtcblxuICAgICAgICByZXR1cm4gVGFibGVVdGlscy5yZW5kZXIoVGFibGVUcGxbJ2NvbnRyb2xzL2NhcHRpb24uaHRtbCddLCB7XG4gICAgICAgICAgICB0aXRsZTogdGhpcy5fb3B0aW9ucy50aXRsZSxcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiB0aGlzLl9vcHRpb25zLmRlc2NyaXB0aW9uLFxuICAgICAgICAgICAgdmFsdWU6IHRoaXMuX29wdGlvbnMudmFsdWUsXG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ29udHJvbENhcHRpb247IiwiXG5pbXBvcnQgVGFibGVUcGwgICBmcm9tIFwiLi4vdGFibGUudHBsXCI7XG5pbXBvcnQgVGFibGVVdGlscyBmcm9tIFwiLi4vdGFibGUudXRpbHNcIjtcbmltcG9ydCBDb250cm9sICAgICAgICAgIGZyb20gXCIuLi9hYnN0cmFjdC9Db250cm9sXCI7XG5cblxuY2xhc3MgQ29udHJvbEZpbHRlckNsZWFyIGV4dGVuZHMgQ29udHJvbCB7XG5cbiAgICAvKipcbiAgICAgKiDQmNC90LjRhtC40LDQu9C40LfQsNGG0LjRj1xuICAgICAqIEBwYXJhbSB7VGFibGVJbnN0YW5jZX0gdGFibGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gICAgICAgICAgICAgIG9wdGlvbnNcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcih0YWJsZSwgb3B0aW9ucykge1xuXG4gICAgICAgIG9wdGlvbnMgPSAkLmV4dGVuZCh0cnVlLCB7XG4gICAgICAgICAgICBpZDogbnVsbCxcbiAgICAgICAgICAgIHR5cGU6ICdmaWx0ZXJfY2xlYXInLFxuICAgICAgICAgICAgY29udGVudDogbnVsbCxcbiAgICAgICAgICAgIGF0dHI6IHtcbiAgICAgICAgICAgICAgICBjbGFzczogJ2J0biBidG4tc2Vjb25kYXJ5J1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfSwgb3B0aW9ucyk7XG5cbiAgICAgICAgc3VwZXIodGFibGUsIG9wdGlvbnMpO1xuXG4gICAgICAgIGlmICggISB0aGlzLl9vcHRpb25zLmhhc093blByb3BlcnR5KCdjb250ZW50JykgfHxcbiAgICAgICAgICAgIHR5cGVvZiB0aGlzLl9vcHRpb25zLmNvbnRlbnQgIT09ICdzdHJpbmcnXG4gICAgICAgICkge1xuICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy5jb250ZW50ID0gJzxpIGNsYXNzPVwiYmkgYmkteFwiPjwvaT4gJyArIHRhYmxlLmdldExhbmcoKS5jbGVhclxuICAgICAgICB9XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiDQpNC+0YDQvNC40YDQvtCy0LDQvdC40LUg0LrQvtC90YLQtdC90YLQsFxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAgICovXG4gICAgcmVuZGVyKCkge1xuXG4gICAgICAgIGxldCBvcHRpb25zID0gdGhpcy5nZXRPcHRpb25zKCk7XG4gICAgICAgIGxldCB0YWJsZSAgID0gdGhpcy5fdGFibGU7XG5cbiAgICAgICAgaWYgKCAhIFRhYmxlVXRpbHMuaXNPYmplY3Qob3B0aW9ucy5hdHRyKSkge1xuICAgICAgICAgICAgb3B0aW9ucy5hdHRyID0ge307XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob3B0aW9ucy5hdHRyLmhhc093blByb3BlcnR5KCd0eXBlJykpIHtcbiAgICAgICAgICAgIGRlbGV0ZSBvcHRpb25zLmF0dHIudHlwZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBmaWx0ZXJEYXRhID0gdGFibGUuZ2V0RmlsdGVyRGF0YSgpO1xuXG4gICAgICAgIGlmIChmaWx0ZXJEYXRhLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMuYXR0ci5oYXNPd25Qcm9wZXJ0eSgnc3R5bGUnKSAmJiB0eXBlb2Ygb3B0aW9ucy5hdHRyLnN0eWxlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIG9wdGlvbnMuYXR0ci5zdHlsZSArPSAnO2Rpc3BsYXk6bm9uZTsnXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG9wdGlvbnMuYXR0ci5zdHlsZSA9IFwiZGlzcGxheTpub25lXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBhdHRyID0gW107XG5cbiAgICAgICAgJC5lYWNoKG9wdGlvbnMuYXR0ciwgZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAoWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2YgdmFsdWUpID49IDApIHtcbiAgICAgICAgICAgICAgICBhdHRyLnB1c2gobmFtZSArICc9XCInICsgdmFsdWUgKyAnXCInKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cblxuICAgICAgICBsZXQgYnV0dG9uID0gJChUYWJsZVV0aWxzLnJlbmRlcihUYWJsZVRwbFsnY29udHJvbHMvZmlsdGVyX2NsZWFyLmh0bWwnXSwge1xuICAgICAgICAgICAgYXR0cjogYXR0ci5sZW5ndGggPiAwID8gKCcgJyArIGF0dHIuam9pbignICcpKSA6ICcnLFxuICAgICAgICAgICAgY29udGVudDogb3B0aW9ucy5jb250ZW50ID8gb3B0aW9ucy5jb250ZW50IDogJycsXG4gICAgICAgIH0pKTtcblxuXG4gICAgICAgIGJ1dHRvbi5jbGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0YWJsZS5jbGVhckZpbHRlcnMoKTtcbiAgICAgICAgfSk7XG5cblxuICAgICAgICB0YWJsZS5vbignZmlsdGVyc19jaGFuZ2UnLCBmdW5jdGlvbiAoZmlsdGVyRGF0YSkge1xuICAgICAgICAgICAgaWYgKGZpbHRlckRhdGEubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGJ1dHRvbi5zaG93KCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGJ1dHRvbi5oaWRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBidXR0b247XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBDb250cm9sRmlsdGVyQ2xlYXI7IiwiXG5pbXBvcnQgVGFibGVUcGwgICBmcm9tIFwiLi4vdGFibGUudHBsXCI7XG5pbXBvcnQgVGFibGVVdGlscyBmcm9tICcuLi90YWJsZS51dGlscyc7XG5pbXBvcnQgQ29udHJvbCAgICAgICAgICBmcm9tIFwiLi4vYWJzdHJhY3QvQ29udHJvbFwiO1xuXG5jbGFzcyBDb250cm9sRGl2aWRlciBleHRlbmRzIENvbnRyb2wge1xuXG4gICAgLyoqXG4gICAgICog0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y9cbiAgICAgKiBAcGFyYW0ge1RhYmxlSW5zdGFuY2V9IHRhYmxlXG4gICAgICogQHBhcmFtIHtPYmplY3R9ICAgICAgICAgICAgICBvcHRpb25zXG4gICAgICovXG4gICAgY29uc3RydWN0b3IodGFibGUsIG9wdGlvbnMpIHtcblxuICAgICAgICBvcHRpb25zID0gJC5leHRlbmQodHJ1ZSwge1xuICAgICAgICAgICAgdHlwZTogJ2RpdmlkZXInLFxuICAgICAgICAgICAgd2lkdGg6IDQwLFxuICAgICAgICAgICAgdGV4dDogJycsXG4gICAgICAgICAgICBhdHRyOiB7XG4gICAgICAgICAgICAgICAgY2xhc3M6ICdkLWlubGluZS1ibG9jayB0ZXh0LWJvZHktdGVydGlhcnkgdGV4dC1jZW50ZXInLFxuICAgICAgICAgICAgICAgIHN0eWxlOiAnaGVpZ2h0OjIwcHgnXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIG9wdGlvbnMpO1xuXG4gICAgICAgIHN1cGVyKHRhYmxlLCBvcHRpb25zKTtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqINCk0L7RgNC80LjRgNC+0LLQsNC90LjQtSDQutC+0L3RgtC10L3RgtCwINC00LvRjyDRgNCw0LfQvNC10YnQtdC90LjRjyDQvdCwINGB0YLRgNCw0L3QuNGG0LVcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgICAqL1xuICAgIHJlbmRlcigpIHtcblxuICAgICAgICBsZXQgYXR0cmlidXRlcyA9IFtdO1xuXG4gICAgICAgIHRoaXMuX29wdGlvbnMuYXR0ciA9IFRhYmxlVXRpbHMubWVyZ2VBdHRyKHRoaXMuX29wdGlvbnMuYXR0ciwgeyBzdHlsZTogJ3dpZHRoOicgKyB0aGlzLl9vcHRpb25zLndpZHRoICsgJ3B4JyB9KTtcblxuICAgICAgICAkLmVhY2godGhpcy5fb3B0aW9ucy5hdHRyLCBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcbiAgICAgICAgICAgIGlmIChbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiB2YWx1ZSkgPj0gMCkge1xuICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXMucHVzaChuYW1lICsgJz1cIicgKyB2YWx1ZSArICdcIicpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gVGFibGVVdGlscy5yZW5kZXIoVGFibGVUcGxbJ2NvbnRyb2xzL2RpdmlkZXIuaHRtbCddLCB7XG4gICAgICAgICAgICBhdHRyOiBhdHRyaWJ1dGVzLmxlbmd0aCA+IDAgPyAoJyAnICsgYXR0cmlidXRlcy5qb2luKCcgJykpIDogJycsXG4gICAgICAgICAgICB0ZXh0OiB0eXBlb2YgdGhpcy5fb3B0aW9ucy50ZXh0ID09PSAnc3RyaW5nJyAmJiB0aGlzLl9vcHRpb25zLnRleHQgIT09ICcnID8gdGhpcy5fb3B0aW9ucy50ZXh0IDogJycsXG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ29udHJvbERpdmlkZXI7IiwiaW1wb3J0IFRhYmxlVXRpbHMgZnJvbSBcIi4uL3RhYmxlLnV0aWxzXCI7XG5cblxuY2xhc3MgRmlsdGVyIHtcblxuICAgIF9pZCAgICAgID0gbnVsbDtcbiAgICBfdGFibGUgICA9IG51bGw7XG4gICAgX3ZhbHVlICAgPSBudWxsO1xuICAgIF9jb250cm9sID0gbnVsbDtcbiAgICBfb3B0aW9ucyA9IHtcbiAgICAgICAgaWQ6ICcnLFxuICAgICAgICB0eXBlOiAnJyxcbiAgICAgICAgZmllbGQ6IG51bGxcbiAgICB9O1xuXG5cbiAgICAvKipcbiAgICAgKiDQmNC90LjRhtC40LDQu9C40LfQsNGG0LjRj1xuICAgICAqIEBwYXJhbSB7b2JqZWN0fSB0YWJsZVxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zXG4gICAgICovXG4gICAgY29uc3RydWN0b3IodGFibGUsIG9wdGlvbnMpIHtcblxuICAgICAgICB0aGlzLl90YWJsZSAgID0gdGFibGU7XG4gICAgICAgIHRoaXMuX29wdGlvbnMgPSAkLmV4dGVuZCh0cnVlLCB0aGlzLl9vcHRpb25zLCBvcHRpb25zKTtcbiAgICAgICAgdGhpcy5faWQgICAgICA9IHRoaXMuX29wdGlvbnMuaGFzT3duUHJvcGVydHkoJ2lkJykgJiYgdHlwZW9mIHRoaXMuX29wdGlvbnMuaWQgPT09ICdzdHJpbmcnICYmIHRoaXMuX29wdGlvbnMuaWRcbiAgICAgICAgICAgID8gdGhpcy5fb3B0aW9ucy5pZFxuICAgICAgICAgICAgOiBUYWJsZVV0aWxzLmhhc2hDb2RlKCk7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0L/QsNGA0LDQvNC10YLRgNC+0LJcbiAgICAgKiBAcmV0dXJucyB7b2JqZWN0fVxuICAgICAqL1xuICAgIGdldE9wdGlvbnMoKSB7XG4gICAgICAgIHJldHVybiAkLmV4dGVuZCh0cnVlLCB7fSwgdGhpcy5fb3B0aW9ucyk7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUgaWRcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgICAqL1xuICAgIGdldElkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faWQ7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiDQpNC40LvRjNGC0YDQsNGG0LjRjyDQtNCw0L3QvdGL0YVcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBmaWVsZFZhbHVlXG4gICAgICogQHJldHVybnMge3N0cmluZ30gc2VhcmNoVmFsdWVcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICBmaWx0ZXIoZmllbGRWYWx1ZSwgc2VhcmNoVmFsdWUpIHtcblxuICAgICAgICBpZiAoWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2YgZmllbGRWYWx1ZSkgPCAwIHx8XG4gICAgICAgICAgICBbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiBzZWFyY2hWYWx1ZSkgPCAwXG4gICAgICAgICkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZpZWxkVmFsdWUudG9TdHJpbmcoKS50b0xvd2VyQ2FzZSgpLmluZGV4T2YoXG4gICAgICAgICAgICBzZWFyY2hWYWx1ZS50b1N0cmluZygpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgKSA+PSAwO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICog0KPRgdGC0LDQvdC+0LLQutCwINC30L3QsNGH0LXQvdC40Y9cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAgICAgKi9cbiAgICBzZXRWYWx1ZSh2YWx1ZSkge31cblxuXG4gICAgLyoqXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC30L3QsNGH0LXQvdC40Y9cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfG51bGx9XG4gICAgICovXG4gICAgZ2V0VmFsdWUgKCkge31cblxuXG4gICAgLyoqXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC90LDQt9Cy0LDQvdC40LUg0L/QvtC70Y9cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfG51bGx9XG4gICAgICovXG4gICAgZ2V0RmllbGQgKCkge1xuXG4gICAgICAgIHJldHVybiB0aGlzLl9vcHRpb25zLmZpZWxkO1xuICAgIH1cblxuXG5cbiAgICAvKipcbiAgICAgKiDQpNC+0YDQvNC40YDQvtCy0LDQvdC40LUg0LrQvtC90YLQtdC90YLQsFxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAgICovXG4gICAgcmVuZGVyICgpIHt9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEZpbHRlcjsiLCJcbmltcG9ydCBUYWJsZVRwbCAgICAgIGZyb20gXCIuLi90YWJsZS50cGxcIjtcbmltcG9ydCBUYWJsZVV0aWxzICAgIGZyb20gXCIuLi90YWJsZS51dGlsc1wiO1xuaW1wb3J0IFRhYmxlRWxlbWVudHMgZnJvbSBcIi4uL3RhYmxlLmVsZW1lbnRzXCI7XG5pbXBvcnQgRmlsdGVyICAgICAgICAgICAgICBmcm9tIFwiLi4vYWJzdHJhY3QvRmlsdGVyXCI7XG5cbmNsYXNzIEZpbHRlclRleHQgZXh0ZW5kcyBGaWx0ZXIge1xuXG4gICAgLyoqXG4gICAgICog0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y9cbiAgICAgKiBAcGFyYW0ge1RhYmxlSW5zdGFuY2V9IHRhYmxlXG4gICAgICogQHBhcmFtIHtPYmplY3R9ICAgICAgICAgICAgICBvcHRpb25zXG4gICAgICovXG4gICAgY29uc3RydWN0b3IodGFibGUsIG9wdGlvbnMpIHtcblxuICAgICAgICBvcHRpb25zID0gJC5leHRlbmQodHJ1ZSwge1xuICAgICAgICAgICAgaWQ6IG51bGwsXG4gICAgICAgICAgICB0eXBlOiAndGV4dCcsXG4gICAgICAgICAgICBmaWVsZDogbnVsbCxcbiAgICAgICAgICAgIGxhYmVsOiBudWxsLFxuICAgICAgICAgICAgdmFsdWU6IG51bGwsXG4gICAgICAgICAgICB3aWR0aDogMjAwLFxuICAgICAgICAgICAgYXV0b1NlYXJjaDogbnVsbCxcbiAgICAgICAgICAgIGF0dHI6IHtcbiAgICAgICAgICAgICAgICBjbGFzczogXCJmb3JtLWNvbnRyb2xcIixcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBidG46IHtcbiAgICAgICAgICAgICAgICBhdHRyOiB7IGNsYXNzOiBcImJ0biBidG4tb3V0bGluZS1zZWNvbmRhcnkgYm9yZGVyLXNlY29uZGFyeS1zdWJ0bGVcIiB9LFxuICAgICAgICAgICAgICAgIGNvbnRlbnQ6ICc8aSBjbGFzcz1cImJpIGJpLXNlYXJjaFwiPjwvaT4nXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIG9wdGlvbnMpO1xuXG4gICAgICAgIHN1cGVyKHRhYmxlLCBvcHRpb25zKTtcblxuXG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLnZhbHVlICE9PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLnNldFZhbHVlKHRoaXMuX29wdGlvbnMudmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiDQo9GB0YLQsNC90L7QstC60LAg0LfQvdCw0YfQtdC90LjRj1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfG51bWJlcnxudWxsfSB2YWx1ZVxuICAgICAqL1xuICAgIHNldFZhbHVlKHZhbHVlKSB7XG5cbiAgICAgICAgaWYgKHZhbHVlICE9PSBudWxsICYmXG4gICAgICAgICAgICB0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnICYmXG4gICAgICAgICAgICB0eXBlb2YgdmFsdWUgIT09ICdudW1iZXInXG4gICAgICAgICkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fdmFsdWUgPSB2YWx1ZVxuXG5cbiAgICAgICAgaWYgKHRoaXMuX2NvbnRyb2wpIHtcbiAgICAgICAgICAgICQoJ2lucHV0JywgdGhpcy5fY29udHJvbCkudmFsKFxuICAgICAgICAgICAgICAgIHRoaXMuX3ZhbHVlID09PSBudWxsID8gJycgOiB0aGlzLl92YWx1ZVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC30L3QsNGH0LXQvdC40Y9cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfG51bGx9XG4gICAgICovXG4gICAgZ2V0VmFsdWUoKSB7XG5cbiAgICAgICAgaWYgKHRoaXMuX2NvbnRyb2wpIHtcbiAgICAgICAgICAgIGxldCB2YWx1ZSA9ICQoJ2lucHV0JywgdGhpcy5fY29udHJvbCkudmFsKCk7XG5cbiAgICAgICAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnIHx8IHZhbHVlID09PSAnJ1xuICAgICAgICAgICAgICAgID8gbnVsbFxuICAgICAgICAgICAgICAgIDogdmFsdWU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5fdmFsdWU7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiDQpNC+0YDQvNC40YDQvtCy0LDQvdC40LUg0LrQvtC90YLQtdC90YLQsFxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAgICovXG4gICAgcmVuZGVyKCkge1xuXG4gICAgICAgIGxldCBvcHRpb25zID0gdGhpcy5nZXRPcHRpb25zKCk7XG4gICAgICAgIGxldCBsYWJlbCAgID0gdHlwZW9mIG9wdGlvbnMubGFiZWwgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBvcHRpb25zLmxhYmVsID09PSAnbnVtYmVyJ1xuICAgICAgICAgICAgPyBvcHRpb25zLmxhYmVsXG4gICAgICAgICAgICA6ICcnO1xuXG4gICAgICAgIGlmICggISBUYWJsZVV0aWxzLmlzT2JqZWN0KG9wdGlvbnMuYXR0cikpIHtcbiAgICAgICAgICAgIG9wdGlvbnMuYXR0ciA9IHt9O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG9wdGlvbnMuaGFzT3duUHJvcGVydHkoJ3dpZHRoJykgJiZcbiAgICAgICAgICAgIFRhYmxlVXRpbHMuaXNOdW1lcmljKG9wdGlvbnMud2lkdGgpXG4gICAgICAgICkge1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMuYXR0ci5oYXNPd25Qcm9wZXJ0eSgnc3R5bGUnKSkge1xuICAgICAgICAgICAgICAgIG9wdGlvbnMuYXR0clsnc3R5bGUnXSArPSAnO3dpZHRoOicgKyBvcHRpb25zLndpZHRoICsgJ3B4JztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgb3B0aW9ucy5hdHRyWydzdHlsZSddID0gJ3dpZHRoOicgKyBvcHRpb25zLndpZHRoICsgJ3B4JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIG9wdGlvbnMuYXR0clsndmFsdWUnXSA9IHR5cGVvZiB0aGlzLl92YWx1ZSA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIHRoaXMuX3ZhbHVlID09PSAnbnVtYmVyJ1xuICAgICAgICAgICAgPyB0aGlzLl92YWx1ZVxuICAgICAgICAgICAgOiAnJztcblxuICAgICAgICBpZiAob3B0aW9ucy5hdHRyLmhhc093blByb3BlcnR5KCd0eXBlJykpIHtcbiAgICAgICAgICAgIGRlbGV0ZSBvcHRpb25zLmF0dHIudHlwZTtcbiAgICAgICAgfVxuXG5cblxuICAgICAgICBpZiAoICEgVGFibGVVdGlscy5pc09iamVjdChvcHRpb25zLmJ0bikpIHtcbiAgICAgICAgICAgIG9wdGlvbnMuYnRuID0ge307XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCAhIFRhYmxlVXRpbHMuaXNPYmplY3Qob3B0aW9ucy5idG4uYXR0cikpIHtcbiAgICAgICAgICAgIG9wdGlvbnMuYnRuLmF0dHIgPSB7fTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvcHRpb25zLmJ0bi5hdHRyLmhhc093blByb3BlcnR5KCd0eXBlJykpIHtcbiAgICAgICAgICAgIGRlbGV0ZSBvcHRpb25zLmJ0bi5hdHRyLnR5cGU7XG4gICAgICAgIH1cblxuXG4gICAgICAgIGxldCBhdHRyICAgID0gW107XG4gICAgICAgIGxldCBhdHRyQnRuID0gW107XG4gICAgICAgIGxldCB0YWJsZSAgID0gdGhpcy5fdGFibGU7XG5cbiAgICAgICAgJC5lYWNoKG9wdGlvbnMuYXR0ciwgZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XG4gICAgICAgICAgICBhdHRyLnB1c2gobmFtZSArICc9XCInICsgdmFsdWUgKyAnXCInKTtcbiAgICAgICAgfSk7XG4gICAgICAgICQuZWFjaChvcHRpb25zLmJ0bi5hdHRyLCBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcbiAgICAgICAgICAgIGF0dHJCdG4ucHVzaChuYW1lICsgJz1cIicgKyB2YWx1ZSArICdcIicpO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLl9jb250cm9sID0gJChUYWJsZVV0aWxzLnJlbmRlcihUYWJsZVRwbFsnZmlsdGVycy90ZXh0Lmh0bWwnXSwge1xuICAgICAgICAgICAgYXR0cjogYXR0ci5sZW5ndGggPiAwID8gKCcgJyArIGF0dHIuam9pbignICcpKSA6ICcnLFxuICAgICAgICAgICAgbGFiZWw6IGxhYmVsLFxuICAgICAgICAgICAgYnRuQXR0cjogYXR0ckJ0bi5sZW5ndGggPiAwID8gKCcgJyArIGF0dHJCdG4uam9pbignICcpKSA6ICcnLFxuICAgICAgICAgICAgYnRuQ29udGVudDogb3B0aW9ucy5idG4uY29udGVudCA/IG9wdGlvbnMuYnRuLmNvbnRlbnQgOiAnJyxcbiAgICAgICAgfSkpO1xuXG4gICAgICAgICQoJ2lucHV0JywgdGhpcy5fY29udHJvbCkua2V5dXAoZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgaWYgKGUua2V5ID09PSAnRW50ZXInIHx8IGUua2V5Q29kZSA9PT0gMTMpIHtcbiAgICAgICAgICAgICAgICB0YWJsZS5zZWFyY2hSZWNvcmRzKCk7XG5cbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIG9wdGlvbnMuYXV0b1NlYXJjaCA9PT0gJ2Jvb2xlYW4nICYmIG9wdGlvbnMuYXV0b1NlYXJjaCkge1xuICAgICAgICAgICAgICAgIHRhYmxlLnNlYXJjaFJlY29yZHMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgJCgnYnV0dG9uJywgdGhpcy5fY29udHJvbCkuY2xpY2soZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgdGFibGUuc2VhcmNoUmVjb3JkcygpO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gdGhpcy5fY29udHJvbDtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEZpbHRlclRleHQ7IiwiXG5pbXBvcnQgVGFibGVUcGwgICBmcm9tIFwiLi4vdGFibGUudHBsXCI7XG5pbXBvcnQgVGFibGVVdGlscyBmcm9tIFwiLi4vdGFibGUudXRpbHNcIjtcbmltcG9ydCBGaWx0ZXIgICAgICAgICAgIGZyb20gXCIuLi9hYnN0cmFjdC9GaWx0ZXJcIjtcblxuY2xhc3MgRmlsdGVyTnVtYmVyIGV4dGVuZHMgRmlsdGVyIHtcblxuICAgIC8qKlxuICAgICAqINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPXG4gICAgICogQHBhcmFtIHtUYWJsZUluc3RhbmNlfSB0YWJsZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSAgICAgICAgICAgICAgb3B0aW9uc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHRhYmxlLCBvcHRpb25zKSB7XG5cbiAgICAgICAgb3B0aW9ucyA9ICQuZXh0ZW5kKHRydWUsIHtcbiAgICAgICAgICAgIGlkOiBudWxsLFxuICAgICAgICAgICAgdHlwZTogJ251bWJlcicsXG4gICAgICAgICAgICBmaWVsZDogbnVsbCxcbiAgICAgICAgICAgIGxhYmVsOiBudWxsLFxuICAgICAgICAgICAgdmFsdWU6IG51bGwsXG4gICAgICAgICAgICB3aWR0aDogOTAsXG4gICAgICAgICAgICBhdHRyOiB7XG4gICAgICAgICAgICAgICAgY2xhc3M6IFwiZm9ybS1jb250cm9sXCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYnRuOiB7XG4gICAgICAgICAgICAgICAgYXR0cjogeyBjbGFzczogXCJidG4gYnRuLW91dGxpbmUtc2Vjb25kYXJ5IGJvcmRlci1zZWNvbmRhcnktc3VidGxlXCIgfSxcbiAgICAgICAgICAgICAgICBjb250ZW50OiAnPGkgY2xhc3M9XCJiaSBiaS1zZWFyY2hcIj48L2k+J1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCBvcHRpb25zKTtcblxuICAgICAgICBzdXBlcih0YWJsZSwgb3B0aW9ucyk7XG5cblxuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy52YWx1ZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5zZXRWYWx1ZSh0aGlzLl9vcHRpb25zLnZhbHVlKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICog0KPRgdGC0LDQvdC+0LLQutCwINC30L3QsNGH0LXQvdC40Y9cbiAgICAgKiBAcGFyYW0ge29iamVjdHxudWxsfSB2YWx1ZVxuICAgICAqL1xuICAgIHNldFZhbHVlKHZhbHVlKSB7XG5cbiAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAoICEgVGFibGVVdGlscy5pc09iamVjdCh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxldCBudW1iZXJTdGFydCA9IG51bGw7XG4gICAgICAgICAgICBsZXQgbnVtYmVyRW5kICAgPSBudWxsO1xuXG4gICAgICAgICAgICBpZiAodmFsdWUuaGFzT3duUHJvcGVydHkoJ3N0YXJ0JykgJiZcbiAgICAgICAgICAgICAgICAodHlwZW9mIHZhbHVlLnN0YXJ0ID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgdmFsdWUuc3RhcnQgIT09ICdudW1iZXInKSAmJlxuICAgICAgICAgICAgICAgIHZhbHVlLnN0YXJ0ICE9PSAnJyAmJlxuICAgICAgICAgICAgICAgICEgaXNOYU4oTnVtYmVyKHZhbHVlLnN0YXJ0KSlcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIG51bWJlclN0YXJ0ID0gdmFsdWUuc3RhcnQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh2YWx1ZS5oYXNPd25Qcm9wZXJ0eSgnZW5kJykgJiZcbiAgICAgICAgICAgICAgICAodHlwZW9mIHZhbHVlLmVuZCA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIHZhbHVlLmVuZCAhPT0gJ251bWJlcicpICYmXG4gICAgICAgICAgICAgICAgdmFsdWUuZW5kICE9PSAnJyAmJlxuICAgICAgICAgICAgICAgICEgaXNOYU4oTnVtYmVyKHZhbHVlLmVuZCkpXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBudW1iZXJFbmQgPSB2YWx1ZS5lbmQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChudW1iZXJTdGFydCA9PT0gbnVsbCAmJiBudW1iZXJFbmQgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl92YWx1ZSA9IG51bGw7XG5cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdmFsdWUgPSB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0OiBudW1iZXJTdGFydCxcbiAgICAgICAgICAgICAgICAgICAgZW5kOiAgIG51bWJlckVuZFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX3ZhbHVlID0gbnVsbDtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgaWYgKHRoaXMuX2NvbnRyb2wpIHtcbiAgICAgICAgICAgIGxldCBpbnB1dFN0YXJ0ID0gdGhpcy5fY29udHJvbC5wYXJlbnQoKS5maW5kKCdpbnB1dC5udW1iZXItc3RhcnQnKTtcbiAgICAgICAgICAgIGxldCBpbnB1dEVuZCAgID0gdGhpcy5fY29udHJvbC5wYXJlbnQoKS5maW5kKCdpbnB1dC5udW1iZXItZW5kJyk7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLl92YWx1ZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGlucHV0U3RhcnQudmFsKCcnKTtcbiAgICAgICAgICAgICAgICBpbnB1dEVuZC52YWwoJycpO1xuXG4gICAgICAgICAgICB9IGVsc2UgaWYgKFRhYmxlVXRpbHMuaXNPYmplY3QodGhpcy5fdmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgaW5wdXRTdGFydC52YWwodHlwZW9mIHRoaXMuX3ZhbHVlLnN0YXJ0ICE9PSBudWxsID8gdGhpcy5fdmFsdWUuc3RhcnQgOiAnJyk7XG4gICAgICAgICAgICAgICAgaW5wdXRFbmQudmFsKHR5cGVvZiB0aGlzLl92YWx1ZS5lbmQgIT09IG51bGwgPyB0aGlzLl92YWx1ZS5lbmQgOiAnJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSDQt9C90LDRh9C10L3QuNGPXG4gICAgICogQHJldHVybnMge3N0cmluZ31cbiAgICAgKi9cbiAgICBnZXRWYWx1ZSgpIHtcblxuICAgICAgICBpZiAodGhpcy5fY29udHJvbCkge1xuICAgICAgICAgICAgbGV0IGlucHV0U3RhcnQgPSB0aGlzLl9jb250cm9sLnBhcmVudCgpLmZpbmQoJ2lucHV0Lm51bWJlci1zdGFydCcpO1xuICAgICAgICAgICAgbGV0IGlucHV0RW5kICAgPSB0aGlzLl9jb250cm9sLnBhcmVudCgpLmZpbmQoJ2lucHV0Lm51bWJlci1lbmQnKTtcblxuICAgICAgICAgICAgaWYgKGlucHV0U3RhcnRbMF0gJiYgaW5wdXRFbmRbMF0pIHtcbiAgICAgICAgICAgICAgICBsZXQgdmFsdWVTdGFydCA9IGlucHV0U3RhcnQudmFsKCk7XG4gICAgICAgICAgICAgICAgbGV0IHZhbHVlRW5kICAgPSBpbnB1dEVuZC52YWwoKTtcblxuICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgKHR5cGVvZiB2YWx1ZVN0YXJ0ID09PSAnc3RyaW5nJyAmJiB2YWx1ZVN0YXJ0ICE9PSAnJykgfHxcbiAgICAgICAgICAgICAgICAgICAgKHR5cGVvZiB2YWx1ZUVuZCA9PT0gJ3N0cmluZycgJiYgdmFsdWVFbmQgIT09ICcnKVxuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IHZhbHVlU3RhcnQgIT09ICcnICYmICEgaXNOYU4oTnVtYmVyKHZhbHVlU3RhcnQpKSA/IE51bWJlcih2YWx1ZVN0YXJ0KSA6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICBlbmQ6IHZhbHVlRW5kICE9PSAnJyAmJiAhIGlzTmFOKE51bWJlcih2YWx1ZUVuZCkpID8gTnVtYmVyKHZhbHVlRW5kKSA6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cblxuICAgICAgICByZXR1cm4gdGhpcy5fdmFsdWU7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiDQpNC40LvRjNGC0YDQsNGG0LjRjyDQtNCw0L3QvdGL0YVcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSAgICAgICAgICAgICAgZmllbGRWYWx1ZVxuICAgICAqIEByZXR1cm5zIHtBcnJheXxzdHJpbmd8bnVtYmVyfSBzZWFyY2hWYWx1ZVxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgICAqL1xuICAgIGZpbHRlcihmaWVsZFZhbHVlLCBzZWFyY2hWYWx1ZSkge1xuXG4gICAgICAgIGlmIChbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiBmaWVsZFZhbHVlKSA8IDAgfHxcbiAgICAgICAgICAgICEgVGFibGVVdGlscy5pc09iamVjdChzZWFyY2hWYWx1ZSkgfHxcbiAgICAgICAgICAgIChcbiAgICAgICAgICAgICAgICBbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiBzZWFyY2hWYWx1ZS5zdGFydCkgPCAwICYmXG4gICAgICAgICAgICAgICAgWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2Ygc2VhcmNoVmFsdWUuZW5kKSA8IDBcbiAgICAgICAgICAgIClcbiAgICAgICAgKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuXG4gICAgICAgIGxldCBpc3NldFN0YXJ0ID0gWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2Ygc2VhcmNoVmFsdWUuc3RhcnQpID49IDA7XG4gICAgICAgIGxldCBpc3NldEVuZCAgID0gWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2Ygc2VhcmNoVmFsdWUuZW5kKSA+PSAwO1xuXG4gICAgICAgIGlmIChpc3NldFN0YXJ0ICYmIGlzc2V0RW5kKSB7XG4gICAgICAgICAgICByZXR1cm4gZmllbGRWYWx1ZSA+PSBzZWFyY2hWYWx1ZS5zdGFydCAmJiBmaWVsZFZhbHVlIDw9IHNlYXJjaFZhbHVlLmVuZDtcblxuICAgICAgICB9IGVsc2UgaWYgKGlzc2V0U3RhcnQpIHtcbiAgICAgICAgICAgIHJldHVybiBmaWVsZFZhbHVlID49IHNlYXJjaFZhbHVlLnN0YXJ0O1xuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZmllbGRWYWx1ZSA8PSBzZWFyY2hWYWx1ZS5lbmQ7XG4gICAgICAgIH1cbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqINCk0L7RgNC80LjRgNC+0LLQsNC90LjQtSDQutC+0L3RgtC10L3RgtCwXG4gICAgICogQHJldHVybnMge3N0cmluZ31cbiAgICAgKi9cbiAgICByZW5kZXIoKSB7XG5cbiAgICAgICAgbGV0IG9wdGlvbnMgPSB0aGlzLmdldE9wdGlvbnMoKTtcbiAgICAgICAgbGV0IGxhYmVsICAgPSB0eXBlb2Ygb3B0aW9ucy5sYWJlbCA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIG9wdGlvbnMubGFiZWwgPT09ICdudW1iZXInXG4gICAgICAgICAgICA/IG9wdGlvbnMubGFiZWxcbiAgICAgICAgICAgIDogJyc7XG5cbiAgICAgICAgaWYgKCAhIFRhYmxlVXRpbHMuaXNPYmplY3Qob3B0aW9ucy5hdHRyKSkge1xuICAgICAgICAgICAgb3B0aW9ucy5hdHRyID0ge307XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnd2lkdGgnKSAmJlxuICAgICAgICAgICAgVGFibGVVdGlscy5pc051bWVyaWMob3B0aW9ucy53aWR0aClcbiAgICAgICAgKSB7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5hdHRyLmhhc093blByb3BlcnR5KCdzdHlsZScpKSB7XG4gICAgICAgICAgICAgICAgb3B0aW9ucy5hdHRyWydzdHlsZSddICs9ICc7d2lkdGg6JyArIG9wdGlvbnMud2lkdGggKyAncHgnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBvcHRpb25zLmF0dHJbJ3N0eWxlJ10gPSAnd2lkdGg6JyArIG9wdGlvbnMud2lkdGggKyAncHgnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG9wdGlvbnMuYXR0ci5oYXNPd25Qcm9wZXJ0eSgndHlwZScpKSB7XG4gICAgICAgICAgICBkZWxldGUgb3B0aW9ucy5hdHRyLnR5cGU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob3B0aW9ucy5hdHRyLmhhc093blByb3BlcnR5KCd2YWx1ZScpKSB7XG4gICAgICAgICAgICBkZWxldGUgb3B0aW9ucy5hdHRyLnZhbHVlO1xuICAgICAgICB9XG5cblxuICAgICAgICBsZXQgZmllbGQgICAgID0gdHlwZW9mIG9wdGlvbnMuZmllbGQgPT09ICdzdHJpbmcnID8gb3B0aW9ucy5maWVsZCA6ICcnO1xuICAgICAgICBsZXQgc3RhcnRBdHRyID0gW107XG4gICAgICAgIGxldCBlbmRBdHRyICAgPSBbXTtcbiAgICAgICAgbGV0IGF0dHJCdG4gICA9IFtdO1xuICAgICAgICBsZXQgdGFibGUgICAgID0gdGhpcy5fdGFibGU7XG5cblxuICAgICAgICAkLmVhY2gob3B0aW9ucy5hdHRyLCBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcbiAgICAgICAgICAgIGlmIChbJ25hbWUnLCAndmFsdWUnLCAnY2xhc3MnXS5pbmRleE9mKG5hbWUpID49IDAgfHxcbiAgICAgICAgICAgICAgICBbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiB2YWx1ZSkgPCAwXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHN0YXJ0QXR0ci5wdXNoKG5hbWUgKyAnPVwiJyArIHZhbHVlICsgJ1wiJyk7XG4gICAgICAgICAgICBlbmRBdHRyLnB1c2gobmFtZSArICc9XCInICsgdmFsdWUgKyAnXCInKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKG9wdGlvbnMuYXR0ci5oYXNPd25Qcm9wZXJ0eSgnY2xhc3MnKSAmJlxuICAgICAgICAgICAgWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2Ygb3B0aW9ucy5hdHRyLmNsYXNzKSA+PSAwXG4gICAgICAgICkge1xuICAgICAgICAgICAgc3RhcnRBdHRyLnB1c2goJ2NsYXNzPVwiJyArIG9wdGlvbnMuYXR0ci5jbGFzcyArICcgbnVtYmVyLXN0YXJ0XCInKTtcbiAgICAgICAgICAgIGVuZEF0dHIucHVzaCgnY2xhc3M9XCInICsgb3B0aW9ucy5hdHRyLmNsYXNzICsgJyBudW1iZXItZW5kXCInKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN0YXJ0QXR0ci5wdXNoKCdjbGFzcz1cIm51bWJlci1zdGFydFwiJyk7XG4gICAgICAgICAgICBlbmRBdHRyLnB1c2goJ2NsYXNzPVwibnVtYmVyLWVuZFwiJyk7XG4gICAgICAgIH1cblxuXG4gICAgICAgIGlmIChmaWVsZCkge1xuICAgICAgICAgICAgc3RhcnRBdHRyLnB1c2goJ25hbWU9XCInICsgZmllbGQgKyAnW3N0YXJ0XVwiJyk7XG4gICAgICAgICAgICBlbmRBdHRyLnB1c2goJ25hbWU9XCInICsgZmllbGQgKyAnW2VuZF1cIicpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhcnRBdHRyLnB1c2goJ3ZhbHVlPVwiJyArICh0aGlzLl92YWx1ZSA/IHRoaXMuX3ZhbHVlLnN0YXJ0IDogJycpICsgJ1wiJyk7XG4gICAgICAgIGVuZEF0dHIucHVzaCgndmFsdWU9XCInICsgKHRoaXMuX3ZhbHVlID8gdGhpcy5fdmFsdWUuZW5kIDogJycpICsgJ1wiJyk7XG5cblxuXG4gICAgICAgIGlmICggISBUYWJsZVV0aWxzLmlzT2JqZWN0KG9wdGlvbnMuYnRuKSkge1xuICAgICAgICAgICAgb3B0aW9ucy5idG4gPSB7fTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoICEgVGFibGVVdGlscy5pc09iamVjdChvcHRpb25zLmJ0bi5hdHRyKSkge1xuICAgICAgICAgICAgb3B0aW9ucy5idG4uYXR0ciA9IHt9O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG9wdGlvbnMuYnRuLmF0dHIuaGFzT3duUHJvcGVydHkoJ3R5cGUnKSkge1xuICAgICAgICAgICAgZGVsZXRlIG9wdGlvbnMuYnRuLmF0dHIudHlwZTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgJC5lYWNoKG9wdGlvbnMuYnRuLmF0dHIsIGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xuICAgICAgICAgICAgYXR0ckJ0bi5wdXNoKG5hbWUgKyAnPVwiJyArIHZhbHVlICsgJ1wiJyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuX2NvbnRyb2wgPSAkKFRhYmxlVXRpbHMucmVuZGVyKFRhYmxlVHBsWydmaWx0ZXJzL251bWJlci5odG1sJ10sIHtcbiAgICAgICAgICAgIGF0dHJTdGFydDogc3RhcnRBdHRyLmxlbmd0aCA+IDAgPyAoJyAnICsgc3RhcnRBdHRyLmpvaW4oJyAnKSkgOiAnJyxcbiAgICAgICAgICAgIGF0dHJFbmQ6IGVuZEF0dHIubGVuZ3RoID4gMCA/ICgnICcgKyBlbmRBdHRyLmpvaW4oJyAnKSkgOiAnJyxcbiAgICAgICAgICAgIGxhYmVsOiBsYWJlbCxcbiAgICAgICAgICAgIGJ0bkF0dHI6IGF0dHJCdG4ubGVuZ3RoID4gMCA/ICgnICcgKyBhdHRyQnRuLmpvaW4oJyAnKSkgOiAnJyxcbiAgICAgICAgICAgIGJ0bkNvbnRlbnQ6IG9wdGlvbnMuYnRuLmNvbnRlbnQgPyBvcHRpb25zLmJ0bi5jb250ZW50IDogJycsXG4gICAgICAgIH0pKTtcblxuXG4gICAgICAgICQoJ2lucHV0Lm51bWJlci1zdGFydCwgaW5wdXQubnVtYmVyLWVuZCcsIHRoaXMuX2NvbnRyb2wpLmtleXVwKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIGlmIChlLmtleSA9PT0gJ0VudGVyJyB8fCBlLmtleUNvZGUgPT09IDEzKSB7XG4gICAgICAgICAgICAgICAgdGFibGUuc2VhcmNoUmVjb3JkcygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICAkKCdidXR0b24nLCB0aGlzLl9jb250cm9sKS5jbGljayhmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICB0YWJsZS5zZWFyY2hSZWNvcmRzKCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiB0aGlzLl9jb250cm9sO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgRmlsdGVyTnVtYmVyOyIsIlxuaW1wb3J0IFRhYmxlVHBsICAgZnJvbSBcIi4uL3RhYmxlLnRwbFwiO1xuaW1wb3J0IFRhYmxlVXRpbHMgZnJvbSBcIi4uL3RhYmxlLnV0aWxzXCI7XG5pbXBvcnQgRmlsdGVyICAgICAgICAgICBmcm9tIFwiLi4vYWJzdHJhY3QvRmlsdGVyXCI7XG5cbmNsYXNzIEZpbHRlckRhdGUgZXh0ZW5kcyBGaWx0ZXIge1xuXG4gICAgLyoqXG4gICAgICog0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y9cbiAgICAgKiBAcGFyYW0ge1RhYmxlSW5zdGFuY2V9IHRhYmxlXG4gICAgICogQHBhcmFtIHtPYmplY3R9ICAgICAgICAgICAgICBvcHRpb25zXG4gICAgICovXG4gICAgY29uc3RydWN0b3IodGFibGUsIG9wdGlvbnMpIHtcblxuICAgICAgICBvcHRpb25zID0gJC5leHRlbmQodHJ1ZSwge1xuICAgICAgICAgICAgaWQ6IG51bGwsXG4gICAgICAgICAgICB0eXBlOiAnZGF0ZScsXG4gICAgICAgICAgICBmaWVsZDogbnVsbCxcbiAgICAgICAgICAgIGxhYmVsOiBudWxsLFxuICAgICAgICAgICAgdmFsdWU6IG51bGwsXG4gICAgICAgICAgICB3aWR0aDogMjAwLFxuICAgICAgICAgICAgYXR0cjoge1xuICAgICAgICAgICAgICAgIGNsYXNzOiBcImZvcm0tY29udHJvbFwiLFxuICAgICAgICAgICAgfVxuICAgICAgICB9LCBvcHRpb25zKTtcblxuICAgICAgICBzdXBlcih0YWJsZSwgb3B0aW9ucyk7XG5cblxuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy52YWx1ZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5zZXRWYWx1ZSh0aGlzLl9vcHRpb25zLnZhbHVlKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICog0KPRgdGC0LDQvdC+0LLQutCwINC30L3QsNGH0LXQvdC40Y9cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAgICAgKi9cbiAgICBzZXRWYWx1ZSh2YWx1ZSkge1xuXG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnICYmIHZhbHVlICE9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodmFsdWUgJiZcbiAgICAgICAgICAgIChcbiAgICAgICAgICAgICAgICB2YWx1ZS5tYXRjaCgvXlxcZHs0fVxcLVxcZHsyfVxcLVxcZHsyfSQvKSA9PT0gbnVsbCB8fFxuICAgICAgICAgICAgICAgIGlzTmFOKG5ldyBEYXRlKHZhbHVlKSlcbiAgICAgICAgICAgIClcbiAgICAgICAgKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuXG4gICAgICAgIHRoaXMuX3ZhbHVlID0gdmFsdWU7XG5cblxuICAgICAgICBpZiAodGhpcy5fY29udHJvbCkge1xuICAgICAgICAgICAgJCgnaW5wdXQnLCB0aGlzLl9jb250cm9sKS52YWwoXG4gICAgICAgICAgICAgICAgdGhpcy5fdmFsdWUgPT09IG51bGwgPyAnJyA6IHRoaXMuX3ZhbHVlXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0LfQvdCw0YfQtdC90LjRj1xuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAgICovXG4gICAgZ2V0VmFsdWUoKSB7XG5cbiAgICAgICAgaWYgKHRoaXMuX2NvbnRyb2wpIHtcbiAgICAgICAgICAgIGxldCB2YWx1ZSA9ICQoJ2lucHV0JywgdGhpcy5fY29udHJvbCkudmFsKCk7XG5cbiAgICAgICAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnIHx8IHZhbHVlID09PSAnJ1xuICAgICAgICAgICAgICAgID8gbnVsbFxuICAgICAgICAgICAgICAgIDogdmFsdWU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5fdmFsdWU7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiDQpNC40LvRjNGC0YDQsNGG0LjRjyDQtNCw0L3QvdGL0YVcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSAgICAgICAgICAgICAgZmllbGRWYWx1ZVxuICAgICAqIEByZXR1cm5zIHtBcnJheXxzdHJpbmd8bnVtYmVyfSBzZWFyY2hWYWx1ZVxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgICAqL1xuICAgIGZpbHRlcihmaWVsZFZhbHVlLCBzZWFyY2hWYWx1ZSkge1xuXG4gICAgICAgIGlmIChbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiBmaWVsZFZhbHVlKSA8IDAgfHxcbiAgICAgICAgICAgIFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIHNlYXJjaFZhbHVlKSA8IDBcbiAgICAgICAgKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZmllbGRWYWx1ZS50b1N0cmluZygpLmluZGV4T2Yoc2VhcmNoVmFsdWUudG9TdHJpbmcoKSkgPT09IDA7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiDQpNC+0YDQvNC40YDQvtCy0LDQvdC40LUg0LrQvtC90YLQtdC90YLQsFxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAgICovXG4gICAgcmVuZGVyKCkge1xuXG4gICAgICAgIGxldCBvcHRpb25zID0gdGhpcy5nZXRPcHRpb25zKCk7XG4gICAgICAgIGxldCBsYWJlbCAgID0gdHlwZW9mIG9wdGlvbnMubGFiZWwgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBvcHRpb25zLmxhYmVsID09PSAnbnVtYmVyJ1xuICAgICAgICAgICAgPyBvcHRpb25zLmxhYmVsXG4gICAgICAgICAgICA6ICcnO1xuXG4gICAgICAgIGlmICggISBUYWJsZVV0aWxzLmlzT2JqZWN0KG9wdGlvbnMuYXR0cikpIHtcbiAgICAgICAgICAgIG9wdGlvbnMuYXR0ciA9IHt9O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG9wdGlvbnMuaGFzT3duUHJvcGVydHkoJ3dpZHRoJykgJiZcbiAgICAgICAgICAgIFRhYmxlVXRpbHMuaXNOdW1lcmljKG9wdGlvbnMud2lkdGgpXG4gICAgICAgICkge1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMuYXR0ci5oYXNPd25Qcm9wZXJ0eSgnc3R5bGUnKSkge1xuICAgICAgICAgICAgICAgIG9wdGlvbnMuYXR0clsnc3R5bGUnXSArPSAnO3dpZHRoOicgKyBvcHRpb25zLndpZHRoICsgJ3B4JztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgb3B0aW9ucy5hdHRyWydzdHlsZSddID0gJ3dpZHRoOicgKyBvcHRpb25zLndpZHRoICsgJ3B4JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIG9wdGlvbnMuYXR0clsndmFsdWUnXSA9IHR5cGVvZiB0aGlzLl92YWx1ZSA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIHRoaXMuX3ZhbHVlID09PSAnbnVtYmVyJ1xuICAgICAgICAgICAgPyB0aGlzLl92YWx1ZVxuICAgICAgICAgICAgOiAnJztcblxuICAgICAgICBpZiAob3B0aW9ucy5hdHRyLmhhc093blByb3BlcnR5KCd0eXBlJykpIHtcbiAgICAgICAgICAgIGRlbGV0ZSBvcHRpb25zLmF0dHIudHlwZTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgbGV0IGF0dHIgID0gW107XG4gICAgICAgIGxldCB0YWJsZSA9IHRoaXMuX3RhYmxlO1xuXG4gICAgICAgICQuZWFjaChvcHRpb25zLmF0dHIsIGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xuICAgICAgICAgICAgYXR0ci5wdXNoKG5hbWUgKyAnPVwiJyArIHZhbHVlICsgJ1wiJyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuX2NvbnRyb2wgPSAkKFRhYmxlVXRpbHMucmVuZGVyKFRhYmxlVHBsWydmaWx0ZXJzL2RhdGUuaHRtbCddLCB7XG4gICAgICAgICAgICBhdHRyOiBhdHRyLmxlbmd0aCA+IDAgPyAoJyAnICsgYXR0ci5qb2luKCcgJykpIDogJycsXG4gICAgICAgICAgICBsYWJlbDogbGFiZWxcbiAgICAgICAgfSkpO1xuXG4gICAgICAgICQoJ2lucHV0JywgdGhpcy5fY29udHJvbCkuY2hhbmdlKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIHRhYmxlLnNlYXJjaFJlY29yZHMoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbnRyb2w7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBGaWx0ZXJEYXRlOyIsIlxuaW1wb3J0IFRhYmxlVHBsICAgICAgZnJvbSBcIi4uL3RhYmxlLnRwbFwiO1xuaW1wb3J0IFRhYmxlVXRpbHMgICAgZnJvbSBcIi4uL3RhYmxlLnV0aWxzXCI7XG5pbXBvcnQgVGFibGVFbGVtZW50cyBmcm9tIFwiLi4vdGFibGUuZWxlbWVudHNcIjtcbmltcG9ydCBGaWx0ZXIgICAgICAgICAgICAgIGZyb20gXCIuLi9hYnN0cmFjdC9GaWx0ZXJcIjtcblxuY2xhc3MgRmlsdGVyRGF0ZXRpbWUgZXh0ZW5kcyBGaWx0ZXIge1xuXG4gICAgLyoqXG4gICAgICog0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y9cbiAgICAgKiBAcGFyYW0ge1RhYmxlSW5zdGFuY2V9IHRhYmxlXG4gICAgICogQHBhcmFtIHtPYmplY3R9ICAgICAgICAgICAgICBvcHRpb25zXG4gICAgICovXG4gICAgY29uc3RydWN0b3IodGFibGUsIG9wdGlvbnMpIHtcblxuICAgICAgICBvcHRpb25zID0gJC5leHRlbmQodHJ1ZSwge1xuICAgICAgICAgICAgaWQ6IG51bGwsXG4gICAgICAgICAgICB0eXBlOiAnZGF0ZXRpbWUnLFxuICAgICAgICAgICAgZmllbGQ6IG51bGwsXG4gICAgICAgICAgICBsYWJlbDogbnVsbCxcbiAgICAgICAgICAgIHZhbHVlOiBudWxsLFxuICAgICAgICAgICAgd2lkdGg6IDIwMCxcbiAgICAgICAgICAgIGF0dHI6IHtcbiAgICAgICAgICAgICAgICBjbGFzczogXCJmb3JtLWNvbnRyb2xcIixcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgb3B0aW9ucyk7XG5cbiAgICAgICAgc3VwZXIodGFibGUsIG9wdGlvbnMpO1xuXG5cbiAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMudmFsdWUgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0VmFsdWUodGhpcy5fb3B0aW9ucy52YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqINCj0YHRgtCw0L3QvtCy0LrQsCDQt9C90LDRh9C10L3QuNGPXG4gICAgICogQHBhcmFtIHtzdHJpbmd8bnVsbH0gdmFsdWVcbiAgICAgKi9cbiAgICBzZXRWYWx1ZSh2YWx1ZSkge1xuXG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnICYmIHZhbHVlICE9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodmFsdWUgJiZcbiAgICAgICAgICAgIChcbiAgICAgICAgICAgICAgICB2YWx1ZS5tYXRjaCgvXlxcZHs0fVxcLVxcZHsyfVxcLVxcZHsyfShUfCApXFxkezJ9OlxcZHsyfSg6XFxkezJ9fCkkLykgPT09IG51bGwgfHxcbiAgICAgICAgICAgICAgICBpc05hTihuZXcgRGF0ZSh2YWx1ZSkpXG4gICAgICAgICAgICApXG4gICAgICAgICkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fdmFsdWUgPSB2YWx1ZTtcblxuXG4gICAgICAgIGlmICh0aGlzLl9jb250cm9sKSB7XG4gICAgICAgICAgICAkKCdpbnB1dCcsIHRoaXMuX2NvbnRyb2wpLnZhbChcbiAgICAgICAgICAgICAgICB0aGlzLl92YWx1ZSA9PT0gbnVsbCA/ICcnIDogdGhpcy5fdmFsdWVcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSDQt9C90LDRh9C10L3QuNGPXG4gICAgICogQHJldHVybnMge3N0cmluZ3xudWxsfVxuICAgICAqL1xuICAgIGdldFZhbHVlKCkge1xuXG4gICAgICAgIGlmICh0aGlzLl9jb250cm9sKSB7XG4gICAgICAgICAgICBsZXQgdmFsdWUgPSAkKCdpbnB1dCcsIHRoaXMuX2NvbnRyb2wpLnZhbCgpO1xuXG4gICAgICAgICAgICByZXR1cm4gdHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJyB8fCB2YWx1ZSA9PT0gJydcbiAgICAgICAgICAgICAgICA/IG51bGxcbiAgICAgICAgICAgICAgICA6IHZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICog0KTQuNC70YzRgtGA0LDRhtC40Y8g0LTQsNC90L3Ri9GFXG4gICAgICogQHJldHVybnMge3N0cmluZ30gICAgICAgICAgICAgIGZpZWxkVmFsdWVcbiAgICAgKiBAcmV0dXJucyB7QXJyYXl8c3RyaW5nfG51bWJlcn0gc2VhcmNoVmFsdWVcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICBmaWx0ZXIoZmllbGRWYWx1ZSwgc2VhcmNoVmFsdWUpIHtcblxuICAgICAgICBpZiAoWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2YgZmllbGRWYWx1ZSkgPCAwIHx8XG4gICAgICAgICAgICBbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiBzZWFyY2hWYWx1ZSkgPCAwXG4gICAgICAgICkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZpZWxkVmFsdWUudG9TdHJpbmcoKSA9PT0gc2VhcmNoVmFsdWUudG9TdHJpbmcoKTtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqINCk0L7RgNC80LjRgNC+0LLQsNC90LjQtSDQutC+0L3RgtC10L3RgtCwXG4gICAgICogQHJldHVybnMge3N0cmluZ31cbiAgICAgKi9cbiAgICByZW5kZXIoKSB7XG5cbiAgICAgICAgbGV0IG9wdGlvbnMgPSB0aGlzLmdldE9wdGlvbnMoKTtcbiAgICAgICAgbGV0IGxhYmVsICAgPSB0eXBlb2Ygb3B0aW9ucy5sYWJlbCA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIG9wdGlvbnMubGFiZWwgPT09ICdudW1iZXInXG4gICAgICAgICAgICA/IG9wdGlvbnMubGFiZWxcbiAgICAgICAgICAgIDogJyc7XG5cbiAgICAgICAgaWYgKCAhIFRhYmxlVXRpbHMuaXNPYmplY3Qob3B0aW9ucy5hdHRyKSkge1xuICAgICAgICAgICAgb3B0aW9ucy5hdHRyID0ge307XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnd2lkdGgnKSAmJlxuICAgICAgICAgICAgVGFibGVVdGlscy5pc051bWVyaWMob3B0aW9ucy53aWR0aClcbiAgICAgICAgKSB7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5hdHRyLmhhc093blByb3BlcnR5KCdzdHlsZScpKSB7XG4gICAgICAgICAgICAgICAgb3B0aW9ucy5hdHRyWydzdHlsZSddICs9ICc7d2lkdGg6JyArIG9wdGlvbnMud2lkdGggKyAncHgnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBvcHRpb25zLmF0dHJbJ3N0eWxlJ10gPSAnd2lkdGg6JyArIG9wdGlvbnMud2lkdGggKyAncHgnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgb3B0aW9ucy5hdHRyWyd2YWx1ZSddID0gdHlwZW9mIHRoaXMuX3ZhbHVlID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgdGhpcy5fdmFsdWUgPT09ICdudW1iZXInXG4gICAgICAgICAgICA/IHRoaXMuX3ZhbHVlXG4gICAgICAgICAgICA6ICcnO1xuXG4gICAgICAgIGlmIChvcHRpb25zLmF0dHIuaGFzT3duUHJvcGVydHkoJ3R5cGUnKSkge1xuICAgICAgICAgICAgZGVsZXRlIG9wdGlvbnMuYXR0ci50eXBlO1xuICAgICAgICB9XG5cblxuICAgICAgICBsZXQgYXR0ciAgPSBbXTtcbiAgICAgICAgbGV0IHRhYmxlID0gdGhpcy5fdGFibGU7XG5cbiAgICAgICAgJC5lYWNoKG9wdGlvbnMuYXR0ciwgZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XG4gICAgICAgICAgICBhdHRyLnB1c2gobmFtZSArICc9XCInICsgdmFsdWUgKyAnXCInKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5fY29udHJvbCA9ICQoVGFibGVVdGlscy5yZW5kZXIoVGFibGVUcGxbJ2ZpbHRlcnMvZGF0ZXRpbWUuaHRtbCddLCB7XG4gICAgICAgICAgICBhdHRyOiBhdHRyLmxlbmd0aCA+IDAgPyAoJyAnICsgYXR0ci5qb2luKCcgJykpIDogJycsXG4gICAgICAgICAgICBsYWJlbDogbGFiZWxcbiAgICAgICAgfSkpO1xuXG4gICAgICAgICQoJ2lucHV0JywgdGhpcy5fY29udHJvbCkuY2hhbmdlKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIHRhYmxlLnNlYXJjaFJlY29yZHMoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbnRyb2w7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBGaWx0ZXJEYXRldGltZTsiLCJcbmltcG9ydCBUYWJsZVRwbCAgICAgIGZyb20gXCIuLi90YWJsZS50cGxcIjtcbmltcG9ydCBUYWJsZVV0aWxzICAgIGZyb20gXCIuLi90YWJsZS51dGlsc1wiO1xuaW1wb3J0IFRhYmxlRWxlbWVudHMgZnJvbSBcIi4uL3RhYmxlLmVsZW1lbnRzXCI7XG5pbXBvcnQgRmlsdGVyICAgICAgICAgICAgICBmcm9tIFwiLi4vYWJzdHJhY3QvRmlsdGVyXCI7XG5cbmNsYXNzIEZpbHRlckRhdGVNb250aCBleHRlbmRzIEZpbHRlciB7XG5cbiAgICAvKipcbiAgICAgKiDQmNC90LjRhtC40LDQu9C40LfQsNGG0LjRj1xuICAgICAqIEBwYXJhbSB7VGFibGVJbnN0YW5jZX0gdGFibGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gICAgICAgICAgICAgIG9wdGlvbnNcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcih0YWJsZSwgb3B0aW9ucykge1xuXG4gICAgICAgIG9wdGlvbnMgPSAkLmV4dGVuZCh0cnVlLCB7XG4gICAgICAgICAgICBpZDogbnVsbCxcbiAgICAgICAgICAgIHR5cGU6ICdkYXRlX21vbnRoJyxcbiAgICAgICAgICAgIGZpZWxkOiBudWxsLFxuICAgICAgICAgICAgbGFiZWw6IG51bGwsXG4gICAgICAgICAgICB2YWx1ZTogbnVsbCxcbiAgICAgICAgICAgIHdpZHRoOiAyMDAsXG4gICAgICAgICAgICBhdHRyOiB7XG4gICAgICAgICAgICAgICAgY2xhc3M6IFwiZm9ybS1jb250cm9sXCIsXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIG9wdGlvbnMpO1xuXG4gICAgICAgIHN1cGVyKHRhYmxlLCBvcHRpb25zKTtcblxuXG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLnZhbHVlICE9PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLnNldFZhbHVlKHRoaXMuX29wdGlvbnMudmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiDQo9GB0YLQsNC90L7QstC60LAg0LfQvdCw0YfQtdC90LjRj1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfG51bGx9IHZhbHVlXG4gICAgICovXG4gICAgc2V0VmFsdWUodmFsdWUpIHtcblxuICAgICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJyAmJiB2YWx1ZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHZhbHVlICYmXG4gICAgICAgICAgICAoXG4gICAgICAgICAgICAgICAgdmFsdWUubWF0Y2goL15cXGR7NH1cXC1cXGR7Mn0kLykgPT09IG51bGwgfHxcbiAgICAgICAgICAgICAgICBpc05hTihuZXcgRGF0ZSh2YWx1ZSkpXG4gICAgICAgICAgICApXG4gICAgICAgICkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fdmFsdWUgPSB2YWx1ZTtcblxuXG4gICAgICAgIGlmICh0aGlzLl9jb250cm9sKSB7XG4gICAgICAgICAgICAkKCdpbnB1dCcsIHRoaXMuX2NvbnRyb2wpLnZhbChcbiAgICAgICAgICAgICAgICB0aGlzLl92YWx1ZSA9PT0gbnVsbCA/ICcnIDogdGhpcy5fdmFsdWVcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSDQt9C90LDRh9C10L3QuNGPXG4gICAgICogQHJldHVybnMge3N0cmluZ3xudWxsfVxuICAgICAqL1xuICAgIGdldFZhbHVlKCkge1xuXG4gICAgICAgIGlmICh0aGlzLl9jb250cm9sKSB7XG4gICAgICAgICAgICBsZXQgdmFsdWUgPSAkKCdpbnB1dCcsIHRoaXMuX2NvbnRyb2wpLnZhbCgpO1xuXG4gICAgICAgICAgICByZXR1cm4gdHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJyB8fCB2YWx1ZSA9PT0gJydcbiAgICAgICAgICAgICAgICA/IG51bGxcbiAgICAgICAgICAgICAgICA6IHZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICog0KTQuNC70YzRgtGA0LDRhtC40Y8g0LTQsNC90L3Ri9GFXG4gICAgICogQHJldHVybnMge3N0cmluZ30gZmllbGRWYWx1ZVxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IHNlYXJjaFZhbHVlXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAgICovXG4gICAgZmlsdGVyKGZpZWxkVmFsdWUsIHNlYXJjaFZhbHVlKSB7XG5cbiAgICAgICAgaWYgKFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIGZpZWxkVmFsdWUpIDwgMCB8fFxuICAgICAgICAgICAgWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2Ygc2VhcmNoVmFsdWUpIDwgMFxuICAgICAgICApIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmaWVsZFZhbHVlLnRvU3RyaW5nKCkudG9Mb3dlckNhc2UoKS5pbmRleE9mKFxuICAgICAgICAgICAgc2VhcmNoVmFsdWUudG9TdHJpbmcoKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgICkgPT09IDBcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqINCk0L7RgNC80LjRgNC+0LLQsNC90LjQtSDQutC+0L3RgtC10L3RgtCwXG4gICAgICogQHJldHVybnMge2pRdWVyeX1cbiAgICAgKi9cbiAgICByZW5kZXIoKSB7XG5cbiAgICAgICAgbGV0IG9wdGlvbnMgPSB0aGlzLmdldE9wdGlvbnMoKTtcbiAgICAgICAgbGV0IGxhYmVsICAgPSB0eXBlb2Ygb3B0aW9ucy5sYWJlbCA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIG9wdGlvbnMubGFiZWwgPT09ICdudW1iZXInXG4gICAgICAgICAgICA/IG9wdGlvbnMubGFiZWxcbiAgICAgICAgICAgIDogJyc7XG5cbiAgICAgICAgaWYgKCAhIFRhYmxlVXRpbHMuaXNPYmplY3Qob3B0aW9ucy5hdHRyKSkge1xuICAgICAgICAgICAgb3B0aW9ucy5hdHRyID0ge307XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnd2lkdGgnKSAmJlxuICAgICAgICAgICAgVGFibGVVdGlscy5pc051bWVyaWMob3B0aW9ucy53aWR0aClcbiAgICAgICAgKSB7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5hdHRyLmhhc093blByb3BlcnR5KCdzdHlsZScpKSB7XG4gICAgICAgICAgICAgICAgb3B0aW9ucy5hdHRyWydzdHlsZSddICs9ICc7d2lkdGg6JyArIG9wdGlvbnMud2lkdGggKyAncHgnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBvcHRpb25zLmF0dHJbJ3N0eWxlJ10gPSAnd2lkdGg6JyArIG9wdGlvbnMud2lkdGggKyAncHgnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgb3B0aW9ucy5hdHRyWyd2YWx1ZSddID0gdHlwZW9mIHRoaXMuX3ZhbHVlID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgdGhpcy5fdmFsdWUgPT09ICdudW1iZXInXG4gICAgICAgICAgICA/IHRoaXMuX3ZhbHVlXG4gICAgICAgICAgICA6ICcnO1xuXG4gICAgICAgIGlmIChvcHRpb25zLmF0dHIuaGFzT3duUHJvcGVydHkoJ3R5cGUnKSkge1xuICAgICAgICAgICAgZGVsZXRlIG9wdGlvbnMuYXR0ci50eXBlO1xuICAgICAgICB9XG5cblxuICAgICAgICBsZXQgYXR0ciAgPSBbXTtcbiAgICAgICAgbGV0IHRhYmxlID0gdGhpcy5fdGFibGU7XG5cbiAgICAgICAgJC5lYWNoKG9wdGlvbnMuYXR0ciwgZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XG4gICAgICAgICAgICBhdHRyLnB1c2gobmFtZSArICc9XCInICsgdmFsdWUgKyAnXCInKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5fY29udHJvbCA9ICQoVGFibGVVdGlscy5yZW5kZXIoVGFibGVUcGxbJ2ZpbHRlcnMvZGF0ZV9tb250aC5odG1sJ10sIHtcbiAgICAgICAgICAgIGF0dHI6IGF0dHIubGVuZ3RoID4gMCA/ICgnICcgKyBhdHRyLmpvaW4oJyAnKSkgOiAnJyxcbiAgICAgICAgICAgIGxhYmVsOiBsYWJlbFxuICAgICAgICB9KSk7XG5cbiAgICAgICAgJCgnaW5wdXQnLCB0aGlzLl9jb250cm9sKS5jaGFuZ2UoZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgdGFibGUuc2VhcmNoUmVjb3JkcygpO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gdGhpcy5fY29udHJvbDtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEZpbHRlckRhdGVNb250aDsiLCJcbmltcG9ydCBUYWJsZVRwbCAgICAgIGZyb20gXCIuLi90YWJsZS50cGxcIjtcbmltcG9ydCBUYWJsZVV0aWxzICAgIGZyb20gXCIuLi90YWJsZS51dGlsc1wiO1xuaW1wb3J0IFRhYmxlRWxlbWVudHMgZnJvbSBcIi4uL3RhYmxlLmVsZW1lbnRzXCI7XG5pbXBvcnQgRmlsdGVyICAgICAgICAgICAgICBmcm9tIFwiLi4vYWJzdHJhY3QvRmlsdGVyXCI7XG5cbmNsYXNzIEZpbHRlckRhdGVSYW5nZSBleHRlbmRzIEZpbHRlciB7XG5cbiAgICAvKipcbiAgICAgKiDQmNC90LjRhtC40LDQu9C40LfQsNGG0LjRj1xuICAgICAqIEBwYXJhbSB7VGFibGVJbnN0YW5jZX0gdGFibGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gICAgICAgICAgICAgIG9wdGlvbnNcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcih0YWJsZSwgb3B0aW9ucykge1xuXG4gICAgICAgIG9wdGlvbnMgPSAkLmV4dGVuZCh0cnVlLCB7XG4gICAgICAgICAgICBpZDogbnVsbCxcbiAgICAgICAgICAgIHR5cGU6ICdkYXRlX3JhbmdlJyxcbiAgICAgICAgICAgIGZpZWxkOiBudWxsLFxuICAgICAgICAgICAgbGFiZWw6IG51bGwsXG4gICAgICAgICAgICB2YWx1ZTogbnVsbCxcbiAgICAgICAgICAgIHdpZHRoOiAyMDAsXG4gICAgICAgICAgICBhdHRyOiB7XG4gICAgICAgICAgICAgICAgY2xhc3M6IFwiZm9ybS1jb250cm9sIGQtaW5saW5lLWJsb2NrXCIsXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIG9wdGlvbnMpO1xuXG4gICAgICAgIHN1cGVyKHRhYmxlLCBvcHRpb25zKTtcblxuXG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLnZhbHVlICE9PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLnNldFZhbHVlKHRoaXMuX29wdGlvbnMudmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiDQo9GB0YLQsNC90L7QstC60LAg0LfQvdCw0YfQtdC90LjRj1xuICAgICAqIEBwYXJhbSB7b2JqZWN0fG51bGx9IHZhbHVlXG4gICAgICovXG4gICAgc2V0VmFsdWUodmFsdWUpIHtcblxuICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgIGlmICggISBUYWJsZVV0aWxzLmlzT2JqZWN0KHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbGV0IGRhdGVTdGFydCA9IG51bGw7XG4gICAgICAgICAgICBsZXQgZGF0ZUVuZCAgID0gbnVsbDtcblxuICAgICAgICAgICAgaWYgKHZhbHVlLmhhc093blByb3BlcnR5KCdzdGFydCcpICYmXG4gICAgICAgICAgICAgICAgdHlwZW9mIHZhbHVlLnN0YXJ0ID09PSAnc3RyaW5nJyAmJlxuICAgICAgICAgICAgICAgIHZhbHVlLnN0YXJ0Lm1hdGNoKC9eXFxkezR9XFwtXFxkezJ9XFwtXFxkezJ9JC8pICE9PSBudWxsICYmXG4gICAgICAgICAgICAgICAgISBpc05hTihuZXcgRGF0ZSh2YWx1ZS5zdGFydCkpXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBkYXRlU3RhcnQgPSB2YWx1ZS5zdGFydDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHZhbHVlLmhhc093blByb3BlcnR5KCdlbmQnKSAmJlxuICAgICAgICAgICAgICAgIHR5cGVvZiB2YWx1ZS5lbmQgPT09ICdzdHJpbmcnICYmXG4gICAgICAgICAgICAgICAgdmFsdWUuZW5kLm1hdGNoKC9eXFxkezR9XFwtXFxkezJ9XFwtXFxkezJ9JC8pICE9PSBudWxsICYmXG4gICAgICAgICAgICAgICAgISBpc05hTihuZXcgRGF0ZSh2YWx1ZS5lbmQpKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgZGF0ZUVuZCA9IHZhbHVlLmVuZDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGRhdGVTdGFydCA9PT0gbnVsbCAmJiBkYXRlRW5kID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdmFsdWUgPSBudWxsO1xuXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuX3ZhbHVlID0ge1xuICAgICAgICAgICAgICAgICAgICBzdGFydDogZGF0ZVN0YXJ0LFxuICAgICAgICAgICAgICAgICAgICBlbmQ6IGRhdGVFbmRcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl92YWx1ZSA9IG51bGw7XG4gICAgICAgIH1cblxuXG4gICAgICAgIGlmICh0aGlzLl9jb250cm9sKSB7XG4gICAgICAgICAgICBsZXQgaW5wdXRTdGFydCA9IHRoaXMuX2NvbnRyb2wucGFyZW50KCkuZmluZCgnaW5wdXQuZGF0ZS1zdGFydCcpO1xuICAgICAgICAgICAgbGV0IGlucHV0RW5kICAgPSB0aGlzLl9jb250cm9sLnBhcmVudCgpLmZpbmQoJ2lucHV0LmRhdGUtZW5kJyk7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLl92YWx1ZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGlucHV0U3RhcnQudmFsKCcnKTtcbiAgICAgICAgICAgICAgICBpbnB1dEVuZC52YWwoJycpO1xuXG4gICAgICAgICAgICB9IGVsc2UgaWYgKFRhYmxlVXRpbHMuaXNPYmplY3QodGhpcy5fdmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgaW5wdXRTdGFydC52YWwodHlwZW9mIHRoaXMuX3ZhbHVlLnN0YXJ0ICE9PSBudWxsID8gdGhpcy5fdmFsdWUuc3RhcnQgOiAnJyk7XG4gICAgICAgICAgICAgICAgaW5wdXRFbmQudmFsKHR5cGVvZiB0aGlzLl92YWx1ZS5lbmQgIT09IG51bGwgPyB0aGlzLl92YWx1ZS5lbmQgOiAnJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSDQt9C90LDRh9C10L3QuNGPXG4gICAgICogQHJldHVybnMge09iamVjdHxudWxsfVxuICAgICAqL1xuICAgIGdldFZhbHVlKCkge1xuXG4gICAgICAgIGlmICh0aGlzLl9jb250cm9sKSB7XG4gICAgICAgICAgICBsZXQgaW5wdXRTdGFydCA9IHRoaXMuX2NvbnRyb2wucGFyZW50KCkuZmluZCgnaW5wdXQuZGF0ZS1zdGFydCcpO1xuICAgICAgICAgICAgbGV0IGlucHV0RW5kICAgPSB0aGlzLl9jb250cm9sLnBhcmVudCgpLmZpbmQoJ2lucHV0LmRhdGUtZW5kJyk7XG5cbiAgICAgICAgICAgIGlmIChpbnB1dFN0YXJ0WzBdICYmIGlucHV0RW5kWzBdKSB7XG5cbiAgICAgICAgICAgICAgICBsZXQgdmFsdWVTdGFydCA9IGlucHV0U3RhcnQudmFsKCk7XG4gICAgICAgICAgICAgICAgbGV0IHZhbHVlRW5kICAgPSBpbnB1dEVuZC52YWwoKTtcblxuICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgKHR5cGVvZiB2YWx1ZVN0YXJ0ID09PSAnc3RyaW5nJyAmJiB2YWx1ZVN0YXJ0ICE9PSAnJykgfHxcbiAgICAgICAgICAgICAgICAgICAgKHR5cGVvZiB2YWx1ZUVuZCA9PT0gJ3N0cmluZycgJiYgdmFsdWVFbmQgIT09ICcnKVxuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IHZhbHVlU3RhcnQgIT09ICcnID8gdmFsdWVTdGFydCA6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICBlbmQ6IHZhbHVlRW5kICE9PSAnJyA/IHZhbHVlRW5kIDogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5fdmFsdWU7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiDQpNC40LvRjNGC0YDQsNGG0LjRjyDQtNCw0L3QvdGL0YVcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSAgICAgICAgICAgICAgZmllbGRWYWx1ZVxuICAgICAqIEByZXR1cm5zIHtBcnJheXxzdHJpbmd8bnVtYmVyfSBzZWFyY2hWYWx1ZVxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgICAqL1xuICAgIGZpbHRlcihmaWVsZFZhbHVlLCBzZWFyY2hWYWx1ZSkge1xuXG4gICAgICAgIGlmIChbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiBmaWVsZFZhbHVlKSA8IDAgfHxcbiAgICAgICAgICAgICEgVGFibGVVdGlscy5pc09iamVjdChzZWFyY2hWYWx1ZSkgfHxcbiAgICAgICAgICAgICh0eXBlb2Ygc2VhcmNoVmFsdWUuc3RhcnQgIT09ICdzdHJpbmcnICYmIHR5cGVvZiBzZWFyY2hWYWx1ZS5lbmQgIT09ICdzdHJpbmcnKVxuICAgICAgICApIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgbGV0IGlzc2V0U3RhcnQgPSBbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiBzZWFyY2hWYWx1ZS5zdGFydCkgPj0gMDtcbiAgICAgICAgbGV0IGlzc2V0RW5kICAgPSBbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiBzZWFyY2hWYWx1ZS5lbmQpID49IDA7XG5cbiAgICAgICAgaWYgKGlzc2V0U3RhcnQgJiYgaXNzZXRFbmQpIHtcbiAgICAgICAgICAgIHJldHVybiBmaWVsZFZhbHVlID49IHNlYXJjaFZhbHVlLnN0YXJ0ICYmIGZpZWxkVmFsdWUgPD0gc2VhcmNoVmFsdWUuZW5kO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoaXNzZXRTdGFydCkge1xuICAgICAgICAgICAgcmV0dXJuIGZpZWxkVmFsdWUgPj0gc2VhcmNoVmFsdWUuc3RhcnQ7XG5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBmaWVsZFZhbHVlIDw9IHNlYXJjaFZhbHVlLmVuZDtcbiAgICAgICAgfVxuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICog0KTQvtGA0LzQuNGA0L7QstCw0L3QuNC1INC60L7QvdGC0LXQvdGC0LBcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgICAqL1xuICAgIHJlbmRlcigpIHtcblxuICAgICAgICBsZXQgb3B0aW9ucyA9IHRoaXMuZ2V0T3B0aW9ucygpO1xuICAgICAgICBsZXQgbGFiZWwgICA9IHR5cGVvZiBvcHRpb25zLmxhYmVsID09PSAnc3RyaW5nJyB8fCB0eXBlb2Ygb3B0aW9ucy5sYWJlbCA9PT0gJ251bWJlcidcbiAgICAgICAgICAgID8gb3B0aW9ucy5sYWJlbFxuICAgICAgICAgICAgOiAnJztcblxuICAgICAgICBpZiAoICEgVGFibGVVdGlscy5pc09iamVjdChvcHRpb25zLmF0dHIpKSB7XG4gICAgICAgICAgICBvcHRpb25zLmF0dHIgPSB7fTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvcHRpb25zLmhhc093blByb3BlcnR5KCd3aWR0aCcpICYmXG4gICAgICAgICAgICBUYWJsZVV0aWxzLmlzTnVtZXJpYyhvcHRpb25zLndpZHRoKVxuICAgICAgICApIHtcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmF0dHIuaGFzT3duUHJvcGVydHkoJ3N0eWxlJykpIHtcbiAgICAgICAgICAgICAgICBvcHRpb25zLmF0dHJbJ3N0eWxlJ10gKz0gJzt3aWR0aDonICsgb3B0aW9ucy53aWR0aCArICdweCc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG9wdGlvbnMuYXR0clsnc3R5bGUnXSA9ICd3aWR0aDonICsgb3B0aW9ucy53aWR0aCArICdweCc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob3B0aW9ucy5hdHRyLmhhc093blByb3BlcnR5KCd0eXBlJykpIHtcbiAgICAgICAgICAgIGRlbGV0ZSBvcHRpb25zLmF0dHIudHlwZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvcHRpb25zLmF0dHIuaGFzT3duUHJvcGVydHkoJ3ZhbHVlJykpIHtcbiAgICAgICAgICAgIGRlbGV0ZSBvcHRpb25zLmF0dHIudmFsdWU7XG4gICAgICAgIH1cblxuXG4gICAgICAgIGxldCBmaWVsZCAgICAgPSB0eXBlb2Ygb3B0aW9ucy5maWVsZCA9PT0gJ3N0cmluZycgPyBvcHRpb25zLmZpZWxkIDogJyc7XG4gICAgICAgIGxldCBzdGFydEF0dHIgPSBbXTtcbiAgICAgICAgbGV0IHN0YXJ0RW5kICA9IFtdO1xuICAgICAgICBsZXQgdGFibGUgICAgID0gdGhpcy5fdGFibGU7XG5cblxuICAgICAgICAkLmVhY2gob3B0aW9ucy5hdHRyLCBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcbiAgICAgICAgICAgIGlmIChbJ25hbWUnLCAndmFsdWUnLCAnY2xhc3MnXS5pbmRleE9mKG5hbWUpID49IDAgfHxcbiAgICAgICAgICAgICAgICBbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiB2YWx1ZSkgPCAwXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHN0YXJ0QXR0ci5wdXNoKG5hbWUgKyAnPVwiJyArIHZhbHVlICsgJ1wiJyk7XG4gICAgICAgICAgICBzdGFydEVuZC5wdXNoKG5hbWUgKyAnPVwiJyArIHZhbHVlICsgJ1wiJyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChvcHRpb25zLmF0dHIuaGFzT3duUHJvcGVydHkoJ2NsYXNzJykgJiZcbiAgICAgICAgICAgIFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIG9wdGlvbnMuYXR0ci5jbGFzcykgPj0gMFxuICAgICAgICApIHtcbiAgICAgICAgICAgIHN0YXJ0QXR0ci5wdXNoKCdjbGFzcz1cIicgKyBvcHRpb25zLmF0dHIuY2xhc3MgKyAnIGRhdGUtc3RhcnRcIicpO1xuICAgICAgICAgICAgc3RhcnRFbmQucHVzaCgnY2xhc3M9XCInICsgb3B0aW9ucy5hdHRyLmNsYXNzICsgJyBkYXRlLWVuZFwiJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzdGFydEF0dHIucHVzaCgnY2xhc3M9XCJkYXRlLXN0YXJ0XCInKTtcbiAgICAgICAgICAgIHN0YXJ0RW5kLnB1c2goJ2NsYXNzPVwiZGF0ZS1lbmRcIicpO1xuICAgICAgICB9XG5cblxuICAgICAgICBpZiAoZmllbGQpIHtcbiAgICAgICAgICAgIHN0YXJ0QXR0ci5wdXNoKCduYW1lPVwiJyArIGZpZWxkICsgJ1tzdGFydF1cIicpO1xuICAgICAgICAgICAgc3RhcnRFbmQucHVzaCgnbmFtZT1cIicgKyBmaWVsZCArICdbZW5kXVwiJyk7XG4gICAgICAgIH1cblxuICAgICAgICBzdGFydEF0dHIucHVzaCgndmFsdWU9XCInICsgKHRoaXMuX3ZhbHVlID8gdGhpcy5fdmFsdWUuc3RhcnQgOiAnJykgKyAnXCInKTtcbiAgICAgICAgc3RhcnRFbmQucHVzaCgndmFsdWU9XCInICsgKHRoaXMuX3ZhbHVlID8gdGhpcy5fdmFsdWUuZW5kIDogJycpICsgJ1wiJyk7XG5cblxuICAgICAgICBsZXQgY29udHJvbCA9ICQoVGFibGVVdGlscy5yZW5kZXIoVGFibGVUcGxbJ2ZpbHRlcnMvZGF0ZV9yYW5nZS5odG1sJ10sIHtcbiAgICAgICAgICAgIGxhYmVsOiBsYWJlbCxcbiAgICAgICAgICAgIHN0YXJ0QXR0cjogc3RhcnRBdHRyLmxlbmd0aCA+IDAgPyAoJyAnICsgc3RhcnRBdHRyLmpvaW4oJyAnKSkgOiAnJyxcbiAgICAgICAgICAgIGVuZEF0dHI6IHN0YXJ0RW5kLmxlbmd0aCA+IDAgPyAoJyAnICsgc3RhcnRFbmQuam9pbignICcpKSA6ICcnLFxuICAgICAgICB9KSk7XG5cbiAgICAgICAgJCgnaW5wdXQnLCBjb250cm9sKS5jaGFuZ2UoZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgdGFibGUuc2VhcmNoUmVjb3JkcygpO1xuICAgICAgICB9KTtcblxuXG4gICAgICAgICQoJ2lucHV0LmRhdGUtc3RhcnQnLCBjb250cm9sKS5jaGFuZ2UoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBsZXQgZGF0ZUVuZCA9ICQoJ2lucHV0LmRhdGUtZW5kJywgY29udHJvbCkuYXR0cignbWluJywgJCh0aGlzKS52YWwoKSk7XG5cbiAgICAgICAgICAgIGlmIChcInNob3dQaWNrZXJcIiBpbiBIVE1MSW5wdXRFbGVtZW50LnByb3RvdHlwZSkge1xuICAgICAgICAgICAgICAgICQoZGF0ZUVuZClbMF0uc2hvd1BpY2tlcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgJCgnaW5wdXQuZGF0ZS1lbmQnLCBjb250cm9sKS5jaGFuZ2UoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAkKCdpbnB1dC5kYXRlLXN0YXJ0JywgY29udHJvbCkuYXR0cignbWF4JywgJCh0aGlzKS52YWwoKSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuX2NvbnRyb2wgPSBjb250cm9sO1xuXG4gICAgICAgIHJldHVybiB0aGlzLl9jb250cm9sO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgRmlsdGVyRGF0ZVJhbmdlOyIsIlxuaW1wb3J0IFRhYmxlVHBsICAgZnJvbSBcIi4uL3RhYmxlLnRwbFwiO1xuaW1wb3J0IFRhYmxlVXRpbHMgZnJvbSBcIi4uL3RhYmxlLnV0aWxzXCI7XG5pbXBvcnQgRmlsdGVyICAgICAgICAgICBmcm9tIFwiLi4vYWJzdHJhY3QvRmlsdGVyXCI7XG5cbmNsYXNzIEZpbHRlckRhdGV0aW1lUmFuZ2UgZXh0ZW5kcyBGaWx0ZXIge1xuXG4gICAgLyoqXG4gICAgICog0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y9cbiAgICAgKiBAcGFyYW0ge1RhYmxlSW5zdGFuY2V9IHRhYmxlXG4gICAgICogQHBhcmFtIHtPYmplY3R9ICAgICAgICAgICAgICBvcHRpb25zXG4gICAgICovXG4gICAgY29uc3RydWN0b3IodGFibGUsIG9wdGlvbnMpIHtcblxuICAgICAgICBvcHRpb25zID0gJC5leHRlbmQodHJ1ZSwge1xuICAgICAgICAgICAgaWQ6IG51bGwsXG4gICAgICAgICAgICB0eXBlOiAnZGF0ZXRpbWVfcmFuZ2UnLFxuICAgICAgICAgICAgZmllbGQ6IG51bGwsXG4gICAgICAgICAgICBsYWJlbDogbnVsbCxcbiAgICAgICAgICAgIHZhbHVlOiBudWxsLFxuICAgICAgICAgICAgd2lkdGg6IDIwMCxcbiAgICAgICAgICAgIGF0dHI6IHtcbiAgICAgICAgICAgICAgICBjbGFzczogXCJmb3JtLWNvbnRyb2wgZC1pbmxpbmUtYmxvY2tcIixcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgb3B0aW9ucyk7XG5cbiAgICAgICAgc3VwZXIodGFibGUsIG9wdGlvbnMpO1xuXG5cbiAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMudmFsdWUgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0VmFsdWUodGhpcy5fb3B0aW9ucy52YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqINCj0YHRgtCw0L3QvtCy0LrQsCDQt9C90LDRh9C10L3QuNGPXG4gICAgICogQHBhcmFtIHtvYmplY3R8bnVsbH0gdmFsdWVcbiAgICAgKi9cbiAgICBzZXRWYWx1ZSh2YWx1ZSkge1xuXG4gICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKCAhIFRhYmxlVXRpbHMuaXNPYmplY3QodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsZXQgZGF0ZVN0YXJ0ID0gbnVsbDtcbiAgICAgICAgICAgIGxldCBkYXRlRW5kICAgPSBudWxsO1xuXG4gICAgICAgICAgICBpZiAodmFsdWUuaGFzT3duUHJvcGVydHkoJ3N0YXJ0JykgJiZcbiAgICAgICAgICAgICAgICB0eXBlb2YgdmFsdWUuc3RhcnQgPT09ICdzdHJpbmcnICYmXG4gICAgICAgICAgICAgICAgdmFsdWUuc3RhcnQubWF0Y2goL15cXGR7NH1cXC1cXGR7Mn1cXC1cXGR7Mn0oVHwgKVxcZHsyfTpcXGR7Mn0oOlxcZHsyfXwpJC8pICE9PSBudWxsICYmXG4gICAgICAgICAgICAgICAgISBpc05hTihuZXcgRGF0ZSh2YWx1ZS5zdGFydCkpXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBkYXRlU3RhcnQgPSB2YWx1ZS5zdGFydDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHZhbHVlLmhhc093blByb3BlcnR5KCdlbmQnKSAmJlxuICAgICAgICAgICAgICAgIHR5cGVvZiB2YWx1ZS5lbmQgPT09ICdzdHJpbmcnICYmXG4gICAgICAgICAgICAgICAgdmFsdWUuZW5kLm1hdGNoKC9eXFxkezR9XFwtXFxkezJ9XFwtXFxkezJ9KFR8IClcXGR7Mn06XFxkezJ9KDpcXGR7Mn18KSQvKSAhPT0gbnVsbCAmJlxuICAgICAgICAgICAgICAgICEgaXNOYU4obmV3IERhdGUodmFsdWUuZW5kKSlcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIGRhdGVFbmQgPSB2YWx1ZS5lbmQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChkYXRlU3RhcnQgPT09IG51bGwgJiYgZGF0ZUVuZCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3ZhbHVlID0gbnVsbDtcblxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLl92YWx1ZSA9IHtcbiAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IGRhdGVTdGFydCxcbiAgICAgICAgICAgICAgICAgICAgZW5kOiAgIGRhdGVFbmRcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl92YWx1ZSA9IG51bGw7XG4gICAgICAgIH1cblxuXG4gICAgICAgIGlmICh0aGlzLl9jb250cm9sKSB7XG4gICAgICAgICAgICBsZXQgaW5wdXRTdGFydCA9IHRoaXMuX2NvbnRyb2wucGFyZW50KCkuZmluZCgnaW5wdXQuZGF0ZS1zdGFydCcpO1xuICAgICAgICAgICAgbGV0IGlucHV0RW5kICAgPSB0aGlzLl9jb250cm9sLnBhcmVudCgpLmZpbmQoJ2lucHV0LmRhdGUtZW5kJyk7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLl92YWx1ZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGlucHV0U3RhcnQudmFsKCcnKTtcbiAgICAgICAgICAgICAgICBpbnB1dEVuZC52YWwoJycpO1xuXG4gICAgICAgICAgICB9IGVsc2UgaWYgKFRhYmxlVXRpbHMuaXNPYmplY3QodGhpcy5fdmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgaW5wdXRTdGFydC52YWwodHlwZW9mIHRoaXMuX3ZhbHVlLnN0YXJ0ICE9PSBudWxsID8gdGhpcy5fdmFsdWUuc3RhcnQgOiAnJyk7XG4gICAgICAgICAgICAgICAgaW5wdXRFbmQudmFsKHR5cGVvZiB0aGlzLl92YWx1ZS5lbmQgIT09IG51bGwgPyB0aGlzLl92YWx1ZS5lbmQgOiAnJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSDQt9C90LDRh9C10L3QuNGPXG4gICAgICogQHJldHVybnMge09iamVjdHxudWxsfVxuICAgICAqL1xuICAgIGdldFZhbHVlKCkge1xuXG4gICAgICAgIGlmICh0aGlzLl9jb250cm9sKSB7XG4gICAgICAgICAgICBsZXQgaW5wdXRTdGFydCA9IHRoaXMuX2NvbnRyb2wucGFyZW50KCkuZmluZCgnaW5wdXQuZGF0ZS1zdGFydCcpO1xuICAgICAgICAgICAgbGV0IGlucHV0RW5kICAgPSB0aGlzLl9jb250cm9sLnBhcmVudCgpLmZpbmQoJ2lucHV0LmRhdGUtZW5kJyk7XG5cbiAgICAgICAgICAgIGlmIChpbnB1dFN0YXJ0WzBdICYmIGlucHV0RW5kWzBdKSB7XG4gICAgICAgICAgICAgICAgbGV0IHZhbHVlU3RhcnQgPSBpbnB1dFN0YXJ0LnZhbCgpO1xuICAgICAgICAgICAgICAgIGxldCB2YWx1ZUVuZCAgID0gaW5wdXRFbmQudmFsKCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoKHR5cGVvZiB2YWx1ZVN0YXJ0ID09PSAnc3RyaW5nJyAmJiB2YWx1ZVN0YXJ0ICE9PSAnJykgfHxcbiAgICAgICAgICAgICAgICAgICAgKHR5cGVvZiB2YWx1ZUVuZCA9PT0gJ3N0cmluZycgJiYgdmFsdWVFbmQgIT09ICcnKVxuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IHZhbHVlU3RhcnQgIT09ICcnID8gdmFsdWVTdGFydCA6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICBlbmQ6IHZhbHVlRW5kICE9PSAnJyA/IHZhbHVlRW5kIDogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuXG4gICAgICAgIHJldHVybiB0aGlzLl92YWx1ZTtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqINCk0LjQu9GM0YLRgNCw0YbQuNGPINC00LDQvdC90YvRhVxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9ICAgICAgICAgICAgICBmaWVsZFZhbHVlXG4gICAgICogQHJldHVybnMge0FycmF5fHN0cmluZ3xudW1iZXJ9IHNlYXJjaFZhbHVlXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAgICovXG4gICAgZmlsdGVyKGZpZWxkVmFsdWUsIHNlYXJjaFZhbHVlKSB7XG5cbiAgICAgICAgaWYgKFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIGZpZWxkVmFsdWUpIDwgMCB8fFxuICAgICAgICAgICAgISBUYWJsZVV0aWxzLmlzT2JqZWN0KHNlYXJjaFZhbHVlKSB8fFxuICAgICAgICAgICAgKHR5cGVvZiBzZWFyY2hWYWx1ZS5zdGFydCAhPT0gJ3N0cmluZycgJiYgdHlwZW9mIHNlYXJjaFZhbHVlLmVuZCAhPT0gJ3N0cmluZycpXG4gICAgICAgICkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cblxuICAgICAgICBsZXQgaXNzZXRTdGFydCA9IFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIHNlYXJjaFZhbHVlLnN0YXJ0KSA+PSAwO1xuICAgICAgICBsZXQgaXNzZXRFbmQgICA9IFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIHNlYXJjaFZhbHVlLmVuZCkgPj0gMDtcblxuICAgICAgICBpZiAoaXNzZXRTdGFydCAmJiBpc3NldEVuZCkge1xuICAgICAgICAgICAgcmV0dXJuIGZpZWxkVmFsdWUgPj0gc2VhcmNoVmFsdWUuc3RhcnQgJiYgZmllbGRWYWx1ZSA8PSBzZWFyY2hWYWx1ZS5lbmQ7XG5cbiAgICAgICAgfSBlbHNlIGlmIChpc3NldFN0YXJ0KSB7XG4gICAgICAgICAgICByZXR1cm4gZmllbGRWYWx1ZSA+PSBzZWFyY2hWYWx1ZS5zdGFydDtcblxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGZpZWxkVmFsdWUgPD0gc2VhcmNoVmFsdWUuZW5kO1xuICAgICAgICB9XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiDQpNC+0YDQvNC40YDQvtCy0LDQvdC40LUg0LrQvtC90YLQtdC90YLQsFxuICAgICAqIEByZXR1cm5zIHtqUXVlcnl9XG4gICAgICovXG4gICAgcmVuZGVyKCkge1xuXG4gICAgICAgIGxldCBvcHRpb25zID0gdGhpcy5nZXRPcHRpb25zKCk7XG4gICAgICAgIGxldCBsYWJlbCAgID0gdHlwZW9mIG9wdGlvbnMubGFiZWwgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBvcHRpb25zLmxhYmVsID09PSAnbnVtYmVyJ1xuICAgICAgICAgICAgPyBvcHRpb25zLmxhYmVsXG4gICAgICAgICAgICA6ICcnO1xuXG4gICAgICAgIGlmICggISBUYWJsZVV0aWxzLmlzT2JqZWN0KG9wdGlvbnMuYXR0cikpIHtcbiAgICAgICAgICAgIG9wdGlvbnMuYXR0ciA9IHt9O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG9wdGlvbnMuaGFzT3duUHJvcGVydHkoJ3dpZHRoJykgJiZcbiAgICAgICAgICAgIFRhYmxlVXRpbHMuaXNOdW1lcmljKG9wdGlvbnMud2lkdGgpXG4gICAgICAgICkge1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMuYXR0ci5oYXNPd25Qcm9wZXJ0eSgnc3R5bGUnKSkge1xuICAgICAgICAgICAgICAgIG9wdGlvbnMuYXR0clsnc3R5bGUnXSArPSAnO3dpZHRoOicgKyBvcHRpb25zLndpZHRoICsgJ3B4JztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgb3B0aW9ucy5hdHRyWydzdHlsZSddID0gJ3dpZHRoOicgKyBvcHRpb25zLndpZHRoICsgJ3B4JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvcHRpb25zLmF0dHIuaGFzT3duUHJvcGVydHkoJ3R5cGUnKSkge1xuICAgICAgICAgICAgZGVsZXRlIG9wdGlvbnMuYXR0ci50eXBlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG9wdGlvbnMuYXR0ci5oYXNPd25Qcm9wZXJ0eSgndmFsdWUnKSkge1xuICAgICAgICAgICAgZGVsZXRlIG9wdGlvbnMuYXR0ci52YWx1ZTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgbGV0IGZpZWxkICAgICA9IHR5cGVvZiBvcHRpb25zLmZpZWxkID09PSAnc3RyaW5nJyA/IG9wdGlvbnMuZmllbGQgOiAnJztcbiAgICAgICAgbGV0IHN0YXJ0QXR0ciA9IFtdO1xuICAgICAgICBsZXQgc3RhcnRFbmQgID0gW107XG4gICAgICAgIGxldCB0YWJsZSAgICAgPSB0aGlzLl90YWJsZTtcblxuXG4gICAgICAgICQuZWFjaChvcHRpb25zLmF0dHIsIGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKFsnbmFtZScsICd2YWx1ZScsICdjbGFzcyddLmluZGV4T2YobmFtZSkgPj0gMCB8fFxuICAgICAgICAgICAgICAgIFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIHZhbHVlKSA8IDBcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc3RhcnRBdHRyLnB1c2gobmFtZSArICc9XCInICsgdmFsdWUgKyAnXCInKTtcbiAgICAgICAgICAgIHN0YXJ0RW5kLnB1c2gobmFtZSArICc9XCInICsgdmFsdWUgKyAnXCInKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKG9wdGlvbnMuYXR0ci5oYXNPd25Qcm9wZXJ0eSgnY2xhc3MnKSAmJlxuICAgICAgICAgICAgWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2Ygb3B0aW9ucy5hdHRyLmNsYXNzKSA+PSAwXG4gICAgICAgICkge1xuICAgICAgICAgICAgc3RhcnRBdHRyLnB1c2goJ2NsYXNzPVwiJyArIG9wdGlvbnMuYXR0ci5jbGFzcyArICcgZGF0ZS1zdGFydFwiJyk7XG4gICAgICAgICAgICBzdGFydEVuZC5wdXNoKCdjbGFzcz1cIicgKyBvcHRpb25zLmF0dHIuY2xhc3MgKyAnIGRhdGUtZW5kXCInKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN0YXJ0QXR0ci5wdXNoKCdjbGFzcz1cImRhdGUtc3RhcnRcIicpO1xuICAgICAgICAgICAgc3RhcnRFbmQucHVzaCgnY2xhc3M9XCJkYXRlLWVuZFwiJyk7XG4gICAgICAgIH1cblxuXG4gICAgICAgIGlmIChmaWVsZCkge1xuICAgICAgICAgICAgc3RhcnRBdHRyLnB1c2goJ25hbWU9XCInICsgZmllbGQgKyAnW3N0YXJ0XVwiJyk7XG4gICAgICAgICAgICBzdGFydEVuZC5wdXNoKCduYW1lPVwiJyArIGZpZWxkICsgJ1tlbmRdXCInKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXJ0QXR0ci5wdXNoKCd2YWx1ZT1cIicgKyAodGhpcy5fdmFsdWUgPyB0aGlzLl92YWx1ZS5zdGFydCA6ICcnKSArICdcIicpO1xuICAgICAgICBzdGFydEVuZC5wdXNoKCd2YWx1ZT1cIicgKyAodGhpcy5fdmFsdWUgPyB0aGlzLl92YWx1ZS5lbmQgOiAnJykgKyAnXCInKTtcblxuXG4gICAgICAgIGxldCBjb250cm9sID0gJChUYWJsZVV0aWxzLnJlbmRlcihUYWJsZVRwbFsnZmlsdGVycy9kYXRldGltZV9yYW5nZS5odG1sJ10sIHtcbiAgICAgICAgICAgIGxhYmVsOiBsYWJlbCxcbiAgICAgICAgICAgIHN0YXJ0QXR0cjogc3RhcnRBdHRyLmxlbmd0aCA+IDAgPyAoJyAnICsgc3RhcnRBdHRyLmpvaW4oJyAnKSkgOiAnJyxcbiAgICAgICAgICAgIGVuZEF0dHI6IHN0YXJ0RW5kLmxlbmd0aCA+IDAgPyAoJyAnICsgc3RhcnRFbmQuam9pbignICcpKSA6ICcnLFxuICAgICAgICB9KSk7XG5cbiAgICAgICAgJCgnaW5wdXQnLCBjb250cm9sKS5jaGFuZ2UoZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgdGFibGUuc2VhcmNoUmVjb3JkcygpO1xuICAgICAgICB9KTtcblxuXG4gICAgICAgICQoJ2lucHV0LmRhdGUtc3RhcnQnLCBjb250cm9sKS5jaGFuZ2UoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBsZXQgZGF0ZUVuZCA9ICQoJ2lucHV0LmRhdGUtZW5kJywgY29udHJvbCkuYXR0cignbWluJywgJCh0aGlzKS52YWwoKSk7XG5cbiAgICAgICAgICAgIGlmIChcInNob3dQaWNrZXJcIiBpbiBIVE1MSW5wdXRFbGVtZW50LnByb3RvdHlwZSkge1xuICAgICAgICAgICAgICAgICQoZGF0ZUVuZClbMF0uc2hvd1BpY2tlcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgJCgnaW5wdXQuZGF0ZS1lbmQnLCBjb250cm9sKS5jaGFuZ2UoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAkKCdpbnB1dC5kYXRlLXN0YXJ0JywgY29udHJvbCkuYXR0cignbWF4JywgJCh0aGlzKS52YWwoKSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuX2NvbnRyb2wgPSBjb250cm9sO1xuXG4gICAgICAgIHJldHVybiB0aGlzLl9jb250cm9sO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgRmlsdGVyRGF0ZXRpbWVSYW5nZTsiLCJcbmltcG9ydCBUYWJsZVRwbCAgICAgIGZyb20gXCIuLi90YWJsZS50cGxcIjtcbmltcG9ydCBUYWJsZVV0aWxzICAgIGZyb20gXCIuLi90YWJsZS51dGlsc1wiO1xuaW1wb3J0IFRhYmxlRWxlbWVudHMgZnJvbSBcIi4uL3RhYmxlLmVsZW1lbnRzXCI7XG5pbXBvcnQgRmlsdGVyICAgICAgICAgICAgICBmcm9tIFwiLi4vYWJzdHJhY3QvRmlsdGVyXCI7XG5cbmNsYXNzIEZpbHRlckNoZWNrYm94IGV4dGVuZHMgRmlsdGVyIHtcblxuICAgIF9jbGFzcyA9ICdidG4gYnRuLW91dGxpbmUtc2Vjb25kYXJ5JztcblxuICAgIC8qKlxuICAgICAqINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPXG4gICAgICogQHBhcmFtIHtUYWJsZUluc3RhbmNlfSB0YWJsZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSAgICAgICAgICAgICAgb3B0aW9uc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHRhYmxlLCBvcHRpb25zKSB7XG5cbiAgICAgICAgb3B0aW9ucyA9ICQuZXh0ZW5kKHRydWUsIHtcbiAgICAgICAgICAgIGlkOiBudWxsLFxuICAgICAgICAgICAgdHlwZTogJ2NoZWNrYm94JyxcbiAgICAgICAgICAgIGZpZWxkOiBudWxsLFxuICAgICAgICAgICAgbGFiZWw6IG51bGwsXG4gICAgICAgICAgICB2YWx1ZTogbnVsbCxcbiAgICAgICAgICAgIG9wdGlvbnM6IFtdLFxuICAgICAgICB9LCBvcHRpb25zKTtcblxuICAgICAgICBzdXBlcih0YWJsZSwgb3B0aW9ucyk7XG5cblxuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy52YWx1ZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5zZXRWYWx1ZSh0aGlzLl9vcHRpb25zLnZhbHVlKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICog0KPRgdGC0LDQvdC+0LLQutCwINC30L3QsNGH0LXQvdC40Y9cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ3xudW1iZXJ8bnVsbH0gdmFsdWVcbiAgICAgKi9cbiAgICBzZXRWYWx1ZSAodmFsdWUpIHtcblxuICAgICAgICBpZiAoWydzdHJpbmcnLCAnbnVtYmVyJywgJ29iamVjdCddLmluZGV4T2YodHlwZW9mIHZhbHVlKSA8IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICBsZXQgaXRlbXMgPSBbXTtcblxuICAgICAgICAgICAgICAgIHZhbHVlLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2YgaXRlbSkgPj0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXMucHVzaChpdGVtKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLl92YWx1ZSA9IGl0ZW1zO1xuXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuX3ZhbHVlID0gbnVsbDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fdmFsdWUgPSBbIHZhbHVlIF07XG4gICAgICAgIH1cblxuXG4gICAgICAgIGlmICh0aGlzLl9jb250cm9sKSB7XG4gICAgICAgICAgICAkKCdpbnB1dDpjaGVja2VkJywgdGhpcy5fY29udHJvbCkucHJvcCgnY2hlY2tlZCcsIGZhbHNlKTtcblxuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodGhpcy5fdmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgbGV0IGNvbnRyb2wgPSB0aGlzLl9jb250cm9sO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5fdmFsdWUubWFwKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAkKCdpbnB1dFt2YWx1ZT1cIicgKyB2YWx1ZSArICdcIl0nLCBjb250cm9sKS5wcm9wKCdjaGVja2VkJywgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC30L3QsNGH0LXQvdC40Y9cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl8bnVsbH1cbiAgICAgKi9cbiAgICBnZXRWYWx1ZSgpIHtcblxuICAgICAgICBpZiAodGhpcy5fY29udHJvbCkge1xuICAgICAgICAgICAgbGV0IGlucHV0cyA9ICQoJ2lucHV0OmNoZWNrZWQnLCB0aGlzLl9jb250cm9sKTtcbiAgICAgICAgICAgIGxldCBpdGVtcyAgPSBbXTtcblxuICAgICAgICAgICAgJC5lYWNoKGlucHV0cywgZnVuY3Rpb24gKGtleSwgaW5wdXQpIHtcbiAgICAgICAgICAgICAgICBsZXQgdmFsdWUgPSAkKGlucHV0KS5hdHRyKCd2YWx1ZScpO1xuXG4gICAgICAgICAgICAgICAgaWYgKFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIHZhbHVlKSA+PSAwICYmXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlICE9PSAnJ1xuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICBpdGVtcy5wdXNoKHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcmV0dXJuIGl0ZW1zLmxlbmd0aCA+IDAgPyBpdGVtcyA6IG51bGw7XG5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl92YWx1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICog0KTQuNC70YzRgtGA0LDRhtC40Y8g0LTQsNC90L3Ri9GFXG4gICAgICogQHJldHVybnMge3N0cmluZ30gZmllbGRWYWx1ZVxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gIHNlYXJjaFZhbHVlXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAgICovXG4gICAgZmlsdGVyKGZpZWxkVmFsdWUsIHNlYXJjaFZhbHVlKSB7XG5cbiAgICAgICAgaWYgKFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIGZpZWxkVmFsdWUpIDwgMCB8fFxuICAgICAgICAgICAgISBBcnJheS5pc0FycmF5KHNlYXJjaFZhbHVlKVxuICAgICAgICApIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzZWFyY2hWYWx1ZS5pbmRleE9mKGZpZWxkVmFsdWUpID49IDA7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiDQpNC+0YDQvNC40YDQvtCy0LDQvdC40LUg0LrQvtC90YLQtdC90YLQsFxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAgICovXG4gICAgcmVuZGVyKCkge1xuXG4gICAgICAgIGxldCB0aGF0ICAgID0gdGhpcztcbiAgICAgICAgbGV0IG9wdGlvbnMgPSB0aGlzLmdldE9wdGlvbnMoKTtcbiAgICAgICAgbGV0IGZpZWxkICAgPSB0eXBlb2Ygb3B0aW9ucy5maWVsZCA9PT0gJ3N0cmluZycgPyBvcHRpb25zLmZpZWxkIDogJyc7XG4gICAgICAgIGxldCBpdGVtcyAgID0gW107XG4gICAgICAgIGxldCBsYWJlbCAgID0gdHlwZW9mIG9wdGlvbnMubGFiZWwgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBvcHRpb25zLmxhYmVsID09PSAnbnVtYmVyJ1xuICAgICAgICAgICAgPyBvcHRpb25zLmxhYmVsXG4gICAgICAgICAgICA6ICcnO1xuXG4gICAgICAgICQuZWFjaChvcHRpb25zLm9wdGlvbnMsIGZ1bmN0aW9uIChrZXksIG9wdGlvbikge1xuICAgICAgICAgICAgaWYgKCAhIFRhYmxlVXRpbHMuaXNPYmplY3Qob3B0aW9uKSB8fFxuICAgICAgICAgICAgICAgICEgb3B0aW9uLmhhc093blByb3BlcnR5KCd2YWx1ZScpIHx8XG4gICAgICAgICAgICAgICAgWydzdHJpbmcnLCAnbnVtZXJpYyddLmluZGV4T2YodHlwZW9mIG9wdGlvbi52YWx1ZSkgPT09IC0xXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxldCBjaGVja2VkID0gQXJyYXkuaXNBcnJheSh0aGF0Ll92YWx1ZSkgPyB0aGF0Ll92YWx1ZS5pbmRleE9mKG9wdGlvbi52YWx1ZSkgPj0gMCA6IGZhbHNlO1xuICAgICAgICAgICAgbGV0IHRleHQgICAgPSBvcHRpb24uaGFzT3duUHJvcGVydHkoJ3RleHQnKVxuICAgICAgICAgICAgICAgID8gb3B0aW9uLnRleHRcbiAgICAgICAgICAgICAgICA6IG9wdGlvbi52YWx1ZTtcblxuICAgICAgICAgICAgaXRlbXMucHVzaCh7XG4gICAgICAgICAgICAgICAgdGV4dDogICAgdGV4dCxcbiAgICAgICAgICAgICAgICB2YWx1ZTogICBvcHRpb24udmFsdWUsXG4gICAgICAgICAgICAgICAgY2xhc3M6ICAgb3B0aW9uLmhhc093blByb3BlcnR5KCdjbGFzcycpICYmIHR5cGVvZiBvcHRpb24uY2xhc3MgPT09ICdzdHJpbmcnID8gb3B0aW9uLmNsYXNzIDogdGhhdC5fY2xhc3MsXG4gICAgICAgICAgICAgICAgY2hlY2tlZDogY2hlY2tlZCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLl9jb250cm9sID0gJChUYWJsZVV0aWxzLnJlbmRlcihUYWJsZVRwbFsnZmlsdGVycy9jaGVja2JveC5odG1sJ10sIHtcbiAgICAgICAgICAgIGxhYmVsOiBsYWJlbCxcbiAgICAgICAgICAgIGl0ZW1zOiBpdGVtcyxcbiAgICAgICAgICAgIGZpZWxkOiBmaWVsZCArIHRoaXMuZ2V0SWQoKSxcbiAgICAgICAgICAgIGxhbmc6IHRoaXMuX3RhYmxlLmdldExhbmcoKVxuICAgICAgICB9KSk7XG5cbiAgICAgICAgJCgnaW5wdXQnLCB0aGlzLl9jb250cm9sKS5jaGFuZ2UoZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgdGhhdC5fdGFibGUuc2VhcmNoUmVjb3JkcygpO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gdGhpcy5fY29udHJvbDtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEZpbHRlckNoZWNrYm94OyIsIlxuaW1wb3J0IFRhYmxlVHBsICAgICAgZnJvbSBcIi4uL3RhYmxlLnRwbFwiO1xuaW1wb3J0IFRhYmxlVXRpbHMgICAgZnJvbSBcIi4uL3RhYmxlLnV0aWxzXCI7XG5pbXBvcnQgVGFibGVFbGVtZW50cyBmcm9tIFwiLi4vdGFibGUuZWxlbWVudHNcIjtcbmltcG9ydCBGaWx0ZXIgICAgICAgICAgICAgIGZyb20gXCIuLi9hYnN0cmFjdC9GaWx0ZXJcIjtcblxuY2xhc3MgRmlsdGVyUmFkaW8gZXh0ZW5kcyBGaWx0ZXIge1xuXG4gICAgX2NsYXNzID0gJ2J0biBidG4tb3V0bGluZS1zZWNvbmRhcnknO1xuXG4gICAgLyoqXG4gICAgICog0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y9cbiAgICAgKiBAcGFyYW0ge1RhYmxlSW5zdGFuY2V9IHRhYmxlXG4gICAgICogQHBhcmFtIHtPYmplY3R9ICAgICAgICAgICAgICBvcHRpb25zXG4gICAgICovXG4gICAgY29uc3RydWN0b3IodGFibGUsIG9wdGlvbnMpIHtcblxuICAgICAgICBvcHRpb25zID0gJC5leHRlbmQodHJ1ZSwge1xuICAgICAgICAgICAgaWQ6IG51bGwsXG4gICAgICAgICAgICB0eXBlOiAncmFkaW8nLFxuICAgICAgICAgICAgZmllbGQ6IG51bGwsXG4gICAgICAgICAgICBsYWJlbDogbnVsbCxcbiAgICAgICAgICAgIHZhbHVlOiBudWxsLFxuICAgICAgICAgICAgb3B0aW9uczogW10sXG4gICAgICAgIH0sIG9wdGlvbnMpO1xuXG4gICAgICAgIHN1cGVyKHRhYmxlLCBvcHRpb25zKTtcblxuXG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLnZhbHVlICE9PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLnNldFZhbHVlKHRoaXMuX29wdGlvbnMudmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiDQo9GB0YLQsNC90L7QstC60LAg0LfQvdCw0YfQtdC90LjRj1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfG51bWJlcnxudWxsfSB2YWx1ZVxuICAgICAqL1xuICAgIHNldFZhbHVlKHZhbHVlKSB7XG5cbiAgICAgICAgaWYgKHZhbHVlICE9PSBudWxsICYmXG4gICAgICAgICAgICB0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnICYmXG4gICAgICAgICAgICB0eXBlb2YgdmFsdWUgIT09ICdudW1iZXInXG4gICAgICAgICkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fdmFsdWUgPSB2YWx1ZTtcblxuXG4gICAgICAgIGlmICh0aGlzLl9jb250cm9sKSB7XG4gICAgICAgICAgICAkKCdpbnB1dCcsIHRoaXMuX2NvbnRyb2wpLnByb3AoJ2NoZWNrZWQnLCBmYWxzZSk7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLl92YWx1ZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICQoJ2lucHV0W3ZhbHVlPVwiJyArIHRoaXMuX3ZhbHVlICsgJ1wiXScsIHRoaXMuX2NvbnRyb2wpLnByb3AoJ2NoZWNrZWQnLCB0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC30L3QsNGH0LXQvdC40Y9cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfG51bGx9XG4gICAgICovXG4gICAgZ2V0VmFsdWUoKSB7XG5cbiAgICAgICAgaWYgKHRoaXMuX2NvbnRyb2wpIHtcbiAgICAgICAgICAgIGxldCBpbnB1dCA9ICQoJ2lucHV0OmNoZWNrZWQnLCB0aGlzLl9jb250cm9sKTtcblxuICAgICAgICAgICAgaWYgKGlucHV0ICYmIGlucHV0WzBdKSB7XG4gICAgICAgICAgICAgICAgbGV0IHZhbHVlID0gaW5wdXQudmFsKCk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWUgPT09ICcnXG4gICAgICAgICAgICAgICAgICAgID8gbnVsbFxuICAgICAgICAgICAgICAgICAgICA6IHZhbHVlXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fdmFsdWU7XG4gICAgICAgIH1cbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqINCk0LjQu9GM0YLRgNCw0YbQuNGPINC00LDQvdC90YvRhVxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9ICAgICAgICAgICAgICBmaWVsZFZhbHVlXG4gICAgICogQHJldHVybnMge0FycmF5fHN0cmluZ3xudW1iZXJ9IHNlYXJjaFZhbHVlXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAgICovXG4gICAgZmlsdGVyKGZpZWxkVmFsdWUsIHNlYXJjaFZhbHVlKSB7XG5cbiAgICAgICAgaWYgKFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIGZpZWxkVmFsdWUpIDwgMCB8fFxuICAgICAgICAgICAgWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2Ygc2VhcmNoVmFsdWUpIDwgMFxuICAgICAgICApIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmaWVsZFZhbHVlLnRvU3RyaW5nKCkudG9Mb3dlckNhc2UoKSA9PT0gc2VhcmNoVmFsdWUudG9TdHJpbmcoKS50b0xvd2VyQ2FzZSgpO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICog0KTQvtGA0LzQuNGA0L7QstCw0L3QuNC1INC60L7QvdGC0LXQvdGC0LBcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgICAqL1xuICAgIHJlbmRlcigpIHtcblxuICAgICAgICBsZXQgdGhhdCAgICA9IHRoaXM7XG4gICAgICAgIGxldCB0YWJsZSAgID0gdGhpcy5fdGFibGU7XG4gICAgICAgIGxldCBvcHRpb25zID0gdGhpcy5nZXRPcHRpb25zKCk7XG4gICAgICAgIGxldCBmaWVsZCAgID0gdHlwZW9mIG9wdGlvbnMuZmllbGQgPT09ICdzdHJpbmcnID8gb3B0aW9ucy5maWVsZCA6ICcnO1xuICAgICAgICBsZXQgaXRlbXMgICA9IFtdO1xuICAgICAgICBsZXQgbGFiZWwgICA9IHR5cGVvZiBvcHRpb25zLmxhYmVsID09PSAnc3RyaW5nJyB8fCB0eXBlb2Ygb3B0aW9ucy5sYWJlbCA9PT0gJ251bWJlcidcbiAgICAgICAgICAgID8gb3B0aW9ucy5sYWJlbFxuICAgICAgICAgICAgOiAnJztcblxuICAgICAgICAkLmVhY2gob3B0aW9ucy5vcHRpb25zLCBmdW5jdGlvbiAoa2V5LCBvcHRpb24pIHtcbiAgICAgICAgICAgIGlmICggISBUYWJsZVV0aWxzLmlzT2JqZWN0KG9wdGlvbikgfHxcbiAgICAgICAgICAgICAgICAhIG9wdGlvbi5oYXNPd25Qcm9wZXJ0eSgndmFsdWUnKSB8fFxuICAgICAgICAgICAgICAgIFsnc3RyaW5nJywgJ251bWVyaWMnXS5pbmRleE9mKHR5cGVvZiBvcHRpb24udmFsdWUpID09PSAtMVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsZXQgdGV4dCA9IG9wdGlvbi5oYXNPd25Qcm9wZXJ0eSgndGV4dCcpXG4gICAgICAgICAgICAgICAgPyBvcHRpb24udGV4dFxuICAgICAgICAgICAgICAgIDogb3B0aW9uLnZhbHVlO1xuXG4gICAgICAgICAgICBpdGVtcy5wdXNoKHtcbiAgICAgICAgICAgICAgICB0ZXh0OiAgICB0ZXh0LFxuICAgICAgICAgICAgICAgIHZhbHVlOiAgIG9wdGlvbi52YWx1ZSxcbiAgICAgICAgICAgICAgICBjbGFzczogICBvcHRpb24uaGFzT3duUHJvcGVydHkoJ2NsYXNzJykgJiYgdHlwZW9mIG9wdGlvbi5jbGFzcyA9PT0gJ3N0cmluZycgPyBvcHRpb24uY2xhc3MgOiB0aGF0Ll9jbGFzcyxcbiAgICAgICAgICAgICAgICBjaGVja2VkOiBvcHRpb24udmFsdWUgPT0gdGhhdC5fdmFsdWUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5fY29udHJvbCA9ICQoVGFibGVVdGlscy5yZW5kZXIoVGFibGVUcGxbJ2ZpbHRlcnMvcmFkaW8uaHRtbCddLCB7XG4gICAgICAgICAgICBsYWJlbDogbGFiZWwsXG4gICAgICAgICAgICBpdGVtczogaXRlbXMsXG4gICAgICAgICAgICBmaWVsZDogZmllbGQgKyB0aGlzLmdldElkKCksXG4gICAgICAgICAgICBsYW5nOiB0aGlzLl90YWJsZS5nZXRMYW5nKClcbiAgICAgICAgfSkpO1xuXG5cbiAgICAgICAgJCgnaW5wdXQnLCB0aGlzLl9jb250cm9sKS5jaGFuZ2UoZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgdGFibGUuc2VhcmNoUmVjb3JkcygpO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gdGhpcy5fY29udHJvbDtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEZpbHRlclJhZGlvOyIsIlxuaW1wb3J0IFRhYmxlVHBsICAgZnJvbSBcIi4uL3RhYmxlLnRwbFwiO1xuaW1wb3J0IFRhYmxlVXRpbHMgZnJvbSBcIi4uL3RhYmxlLnV0aWxzXCI7XG5pbXBvcnQgRmlsdGVyICAgICAgICAgICBmcm9tIFwiLi4vYWJzdHJhY3QvRmlsdGVyXCI7XG5cbmNsYXNzIEZpbHRlclNlbGVjdCBleHRlbmRzIEZpbHRlciB7XG5cbiAgICAvKipcbiAgICAgKiDQmNC90LjRhtC40LDQu9C40LfQsNGG0LjRj1xuICAgICAqIEBwYXJhbSB7VGFibGVJbnN0YW5jZX0gdGFibGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gICAgICAgICAgICAgIG9wdGlvbnNcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcih0YWJsZSwgb3B0aW9ucykge1xuXG4gICAgICAgIG9wdGlvbnMgPSAkLmV4dGVuZCh0cnVlLCB7XG4gICAgICAgICAgICBpZDogbnVsbCxcbiAgICAgICAgICAgIHR5cGU6ICdzZWxlY3QnLFxuICAgICAgICAgICAgZmllbGQ6IG51bGwsXG4gICAgICAgICAgICBsYWJlbDogbnVsbCxcbiAgICAgICAgICAgIHdpZHRoOiBudWxsLFxuICAgICAgICAgICAgdmFsdWU6IG51bGwsXG4gICAgICAgICAgICBhdHRyOiB7XG4gICAgICAgICAgICAgICAgY2xhc3M6ICdmb3JtLXNlbGVjdCBkLWlubGluZS1ibG9jaydcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvcHRpb25zOiBbXVxuICAgICAgICB9LCBvcHRpb25zKTtcblxuICAgICAgICBzdXBlcih0YWJsZSwgb3B0aW9ucyk7XG5cblxuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy52YWx1ZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5zZXRWYWx1ZSh0aGlzLl9vcHRpb25zLnZhbHVlKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICog0KPRgdGC0LDQvdC+0LLQutCwINC30L3QsNGH0LXQvdC40Y9cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ3xudW1iZXJ8bnVsbH0gdmFsdWVcbiAgICAgKi9cbiAgICBzZXRWYWx1ZSh2YWx1ZSkge1xuXG4gICAgICAgIGlmIChbJ3N0cmluZycsICdudW1iZXInLCAnb2JqZWN0J10uaW5kZXhPZih0eXBlb2YgdmFsdWUpIDwgMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIGxldCBpdGVtcyA9IFtdO1xuXG4gICAgICAgICAgICAgICAgdmFsdWUubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiBpdGVtKSA+PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtcy5wdXNoKGl0ZW0pXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHRoaXMuX3ZhbHVlID0gaXRlbXM7XG5cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdmFsdWUgPSBudWxsO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl92YWx1ZSA9IFsgdmFsdWUgXTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgaWYgKHRoaXMuX2NvbnRyb2wpIHtcbiAgICAgICAgICAgICQoJ3NlbGVjdCBvcHRpb246c2VsZWN0ZWQnLCB0aGlzLl9jb250cm9sKS5wcm9wKCdzZWxlY3RlZCcsIGZhbHNlKTtcblxuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodGhpcy5fdmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgbGV0IGNvbnRyb2wgPSB0aGlzLl9jb250cm9sO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5fdmFsdWUubWFwKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAkKCdzZWxlY3Qgb3B0aW9uW3ZhbHVlPVwiJyArIHZhbHVlICsgJ1wiXScsIGNvbnRyb2wpLnByb3AoJ3NlbGVjdGVkJywgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC30L3QsNGH0LXQvdC40Y9cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl8c3RyaW5nfG51bGx9XG4gICAgICovXG4gICAgZ2V0VmFsdWUoKSB7XG5cbiAgICAgICAgaWYgKHRoaXMuX2NvbnRyb2wpIHtcbiAgICAgICAgICAgIGxldCBpc011bHRpcGxlID0gISEgJCgnc2VsZWN0JywgdGhpcy5fY29udHJvbCkuYXR0cignbXVsdGlwbGUnKTtcbiAgICAgICAgICAgIGxldCBvcHRpb25zICAgID0gJCgnc2VsZWN0IG9wdGlvbjpjaGVja2VkJywgdGhpcy5fY29udHJvbCk7XG4gICAgICAgICAgICBsZXQgaXRlbXMgICAgICA9IFtdO1xuXG4gICAgICAgICAgICAkLmVhY2gob3B0aW9ucywgZnVuY3Rpb24gKGtleSwgb3B0aW9uKSB7XG4gICAgICAgICAgICAgICAgbGV0IHZhbHVlID0gJChvcHRpb24pLmF0dHIoJ3ZhbHVlJyk7XG5cbiAgICAgICAgICAgICAgICBpZiAoWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2YgdmFsdWUpID49IDAgJiZcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgIT09ICcnXG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgIGl0ZW1zLnB1c2godmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICByZXR1cm4gaXRlbXMubGVuZ3RoID4gMFxuICAgICAgICAgICAgICAgID8gKGlzTXVsdGlwbGUgPyBpdGVtcyA6IGl0ZW1zWzBdKVxuICAgICAgICAgICAgICAgIDogbnVsbDtcblxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xuICAgICAgICB9XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiDQpNC40LvRjNGC0YDQsNGG0LjRjyDQtNCw0L3QvdGL0YVcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSAgICAgICAgICAgICAgZmllbGRWYWx1ZVxuICAgICAqIEByZXR1cm5zIHtBcnJheXxzdHJpbmd8bnVtYmVyfSBzZWFyY2hWYWx1ZVxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgICAqL1xuICAgIGZpbHRlcihmaWVsZFZhbHVlLCBzZWFyY2hWYWx1ZSkge1xuXG4gICAgICAgIGlmIChbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiBmaWVsZFZhbHVlKSA8IDAgfHxcbiAgICAgICAgICAgIChbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiBzZWFyY2hWYWx1ZSkgPCAwICYmICEgQXJyYXkuaXNBcnJheShzZWFyY2hWYWx1ZSkpXG4gICAgICAgICkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cblxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShzZWFyY2hWYWx1ZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBzZWFyY2hWYWx1ZS5pbmRleE9mKGZpZWxkVmFsdWUpID49IDA7XG5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBmaWVsZFZhbHVlLnRvU3RyaW5nKCkudG9Mb3dlckNhc2UoKSA9PT0gc2VhcmNoVmFsdWUudG9TdHJpbmcoKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiDQpNC+0YDQvNC40YDQvtCy0LDQvdC40LUg0LrQvtC90YLQtdC90YLQsFxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAgICovXG4gICAgcmVuZGVyKCkge1xuXG4gICAgICAgIGxldCB0aGF0ICAgICAgICAgID0gdGhpcztcbiAgICAgICAgbGV0IG9wdGlvbnMgICAgICAgPSB0aGlzLmdldE9wdGlvbnMoKTtcbiAgICAgICAgbGV0IHNlbGVjdE9wdGlvbnMgPSBbXTtcbiAgICAgICAgbGV0IGF0dHJpYnV0ZXMgICAgPSBbXTtcbiAgICAgICAgbGV0IHRhYmxlICAgICAgICAgPSB0aGlzLl90YWJsZTtcbiAgICAgICAgbGV0IGxhYmVsICAgICAgICAgPSB0eXBlb2Ygb3B0aW9ucy5sYWJlbCA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIG9wdGlvbnMubGFiZWwgPT09ICdudW1iZXInXG4gICAgICAgICAgICA/IG9wdGlvbnMubGFiZWxcbiAgICAgICAgICAgIDogJyc7XG5cbiAgICAgICAgaWYgKCAhIG9wdGlvbnMuaGFzT3duUHJvcGVydHkoJ2F0dHInKSB8fFxuICAgICAgICAgICAgISBUYWJsZVV0aWxzLmlzT2JqZWN0KG9wdGlvbnMuYXR0cilcbiAgICAgICAgKSB7XG4gICAgICAgICAgICBvcHRpb25zLmF0dHIgPSB7fTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvcHRpb25zLmZpZWxkKSB7XG4gICAgICAgICAgICBvcHRpb25zLmF0dHIubmFtZSA9IHRoaXMuX29wdGlvbnMuZmllbGQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob3B0aW9ucy53aWR0aCkge1xuICAgICAgICAgICAgb3B0aW9ucy5hdHRyID0gVGFibGVVdGlscy5tZXJnZUF0dHIoXG4gICAgICAgICAgICAgICAgeyBzdHlsZTogJ3dpZHRoOicgKyBvcHRpb25zLndpZHRoICsgJ3B4JyB9LFxuICAgICAgICAgICAgICAgIG9wdGlvbnMuYXR0clxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvcHRpb25zLmhhc093blByb3BlcnR5KCdvcHRpb25zJykgJiZcbiAgICAgICAgICAgIHR5cGVvZiBvcHRpb25zLm9wdGlvbnMgPT09ICdvYmplY3QnICYmXG4gICAgICAgICAgICBvcHRpb25zLm9wdGlvbnMgIT09IG51bGxcbiAgICAgICAgKSB7XG4gICAgICAgICAgICAkLmVhY2gob3B0aW9ucy5vcHRpb25zLCBmdW5jdGlvbiAoa2V5LCBvcHRpb24pIHtcblxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygb3B0aW9uID09PSAnc3RyaW5nJyB8fCB0eXBlb2Ygb3B0aW9uID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgICAgICAgICBzZWxlY3RPcHRpb25zLnB1c2godGhhdC5fYnVpbGRPcHRpb24oe1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ29wdGlvbicsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZToga2V5LFxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogb3B0aW9uXG4gICAgICAgICAgICAgICAgICAgIH0pKTtcblxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoVGFibGVVdGlscy5pc09iamVjdChvcHRpb24pKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCB0eXBlID0gb3B0aW9uLmhhc093blByb3BlcnR5KCd0eXBlJykgJiYgdHlwZW9mIG9wdGlvbi50eXBlID09PSAnc3RyaW5nJ1xuICAgICAgICAgICAgICAgICAgICAgICAgPyBvcHRpb24udHlwZVxuICAgICAgICAgICAgICAgICAgICAgICAgOiAnb3B0aW9uJztcblxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZSA9PT0gJ2dyb3VwJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHJlbmRlckF0dHIgICA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGdyb3VwQXR0ciAgICA9IHt9O1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGdyb3VwT3B0aW9ucyA9IFtdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob3B0aW9uLmhhc093blByb3BlcnR5KCdhdHRyJykgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBUYWJsZVV0aWxzLmlzT2JqZWN0KG9wdGlvbi5hdHRyKVxuICAgICAgICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3JvdXBBdHRyID0gb3B0aW9uLmF0dHI7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcHRpb24uaGFzT3duUHJvcGVydHkoJ2xhYmVsJykgJiYgWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2Yob3B0aW9uLmxhYmVsKSkgPj0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdyb3VwQXR0ci5sYWJlbCA9IG9wdGlvbi5sYWJlbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgJC5lYWNoKGdyb3VwQXR0ciwgZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVyQXR0ci5wdXNoKG5hbWUgKyAnPVwiJyArIHZhbHVlICsgJ1wiJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkob3B0aW9uLm9wdGlvbnMpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJC5lYWNoKG9wdGlvbi5vcHRpb25zLCBmdW5jdGlvbiAoa2V5LCBncm91cE9wdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBncm91cE9wdGlvbnMucHVzaCh0aGF0Ll9idWlsZE9wdGlvbihncm91cE9wdGlvbikpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RPcHRpb25zLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdncm91cCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cjogcmVuZGVyQXR0ci5sZW5ndGggPiAwID8gKCcgJyArIHJlbmRlckF0dHIuam9pbignICcpKSA6ICcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnM6IGdyb3VwT3B0aW9ucyxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RPcHRpb25zLnB1c2godGhhdC5fYnVpbGRPcHRpb24ob3B0aW9uKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgICQuZWFjaChvcHRpb25zLmF0dHIsIGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xuICAgICAgICAgICAgYXR0cmlidXRlcy5wdXNoKG5hbWUgKyAnPVwiJyArIHZhbHVlICsgJ1wiJyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuX2NvbnRyb2wgPSAkKFRhYmxlVXRpbHMucmVuZGVyKFRhYmxlVHBsWydmaWx0ZXJzL3NlbGVjdC5odG1sJ10sIHtcbiAgICAgICAgICAgIGxhYmVsOiBsYWJlbCxcbiAgICAgICAgICAgIGF0dHI6IGF0dHJpYnV0ZXMubGVuZ3RoID4gMCA/ICgnICcgKyBhdHRyaWJ1dGVzLmpvaW4oJyAnKSkgOiAnJyxcbiAgICAgICAgICAgIG9wdGlvbnM6IHNlbGVjdE9wdGlvbnNcbiAgICAgICAgfSkpO1xuXG4gICAgICAgICQoJ3NlbGVjdCcsIHRoaXMuX2NvbnRyb2wpLmNoYW5nZShmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICB0YWJsZS5zZWFyY2hSZWNvcmRzKCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiB0aGlzLl9jb250cm9sO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICog0KHQsdC+0YDQutCwINC+0L/RhtC40LhcbiAgICAgKiBAcGFyYW0gb3B0aW9uXG4gICAgICogQHJldHVybiB7b2JqZWN0fVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX2J1aWxkT3B0aW9uKG9wdGlvbikge1xuXG4gICAgICAgIGxldCBvcHRpb25BdHRyID0gW107XG4gICAgICAgIGxldCBvcHRpb25UZXh0ID0gb3B0aW9uLmhhc093blByb3BlcnR5KCd0ZXh0JykgJiYgWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2Yob3B0aW9uLnRleHQpKSA+PSAwXG4gICAgICAgICAgICA/IG9wdGlvbi50ZXh0XG4gICAgICAgICAgICA6ICcnO1xuXG4gICAgICAgICQuZWFjaChvcHRpb24sIGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKG5hbWUgIT09ICd0ZXh0Jykge1xuICAgICAgICAgICAgICAgIG9wdGlvbkF0dHIucHVzaChuYW1lICsgJz1cIicgKyB2YWx1ZSArICdcIicpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHRoaXMuX3ZhbHVlKSkge1xuICAgICAgICAgICAgJC5lYWNoKHRoaXMuX3ZhbHVlLCBmdW5jdGlvbiAoa2V5LCBpdGVtVmFsdWUpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXRlbVZhbHVlID09IG9wdGlvbi52YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICBvcHRpb25BdHRyLnB1c2goJ3NlbGVjdGVkPVwic2VsZWN0ZWRcIicpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLl92YWx1ZSA9PSBvcHRpb24udmFsdWUpIHtcbiAgICAgICAgICAgIG9wdGlvbkF0dHIucHVzaCgnc2VsZWN0ZWQ9XCJzZWxlY3RlZFwiJyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHlwZTogJ29wdGlvbicsXG4gICAgICAgICAgICB0ZXh0OiBvcHRpb25UZXh0LFxuICAgICAgICAgICAgYXR0cjogb3B0aW9uQXR0ci5sZW5ndGggPiAwID8gKCcgJyArIG9wdGlvbkF0dHIuam9pbignICcpKSA6ICcnXG4gICAgICAgIH07XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBGaWx0ZXJTZWxlY3Q7IiwiXG5pbXBvcnQgVGFibGVUcGwgICBmcm9tIFwiLi4vdGFibGUudHBsXCI7XG5pbXBvcnQgVGFibGVVdGlscyBmcm9tIFwiLi4vdGFibGUudXRpbHNcIjtcbmltcG9ydCBGaWx0ZXIgICAgICAgICAgIGZyb20gXCIuLi9hYnN0cmFjdC9GaWx0ZXJcIjtcblxuY2xhc3MgRmlsdGVyU3dpdGNoIGV4dGVuZHMgRmlsdGVyIHtcblxuICAgIC8qKlxuICAgICAqINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPXG4gICAgICogQHBhcmFtIHtUYWJsZUluc3RhbmNlfSB0YWJsZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSAgICAgICAgICAgICAgb3B0aW9uc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHRhYmxlLCBvcHRpb25zKSB7XG5cbiAgICAgICAgb3B0aW9ucyA9ICQuZXh0ZW5kKHRydWUsIHtcbiAgICAgICAgICAgIGlkOiBudWxsLFxuICAgICAgICAgICAgdHlwZTogJ3N3aXRjaCcsXG4gICAgICAgICAgICBmaWVsZDogbnVsbCxcbiAgICAgICAgICAgIGxhYmVsOiBudWxsLFxuICAgICAgICAgICAgdmFsdWU6IG51bGwsXG4gICAgICAgICAgICB2YWx1ZVk6IDFcbiAgICAgICAgfSwgb3B0aW9ucyk7XG5cbiAgICAgICAgc3VwZXIodGFibGUsIG9wdGlvbnMpO1xuXG5cbiAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMudmFsdWUgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0VmFsdWUodGhpcy5fb3B0aW9ucy52YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqINCk0LjQu9GM0YLRgNCw0YbQuNGPINC00LDQvdC90YvRhVxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9ICAgICAgICAgICAgICBmaWVsZFZhbHVlXG4gICAgICogQHJldHVybnMge0FycmF5fHN0cmluZ3xudW1iZXJ9IHNlYXJjaFZhbHVlXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAgICovXG4gICAgZmlsdGVyKGZpZWxkVmFsdWUsIHNlYXJjaFZhbHVlKSB7XG5cbiAgICAgICAgaWYgKFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIGZpZWxkVmFsdWUpIDwgMCB8fFxuICAgICAgICAgICAgWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2Ygc2VhcmNoVmFsdWUpIDwgMFxuICAgICAgICApIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmaWVsZFZhbHVlLnRvU3RyaW5nKCkgPT09IHNlYXJjaFZhbHVlLnRvU3RyaW5nKCk7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiDQo9GB0YLQsNC90L7QstC60LAg0LfQvdCw0YfQtdC90LjRj1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfG51bWJlcnxudWxsfSB2YWx1ZVxuICAgICAqL1xuICAgIHNldFZhbHVlKHZhbHVlKSB7XG5cbiAgICAgICAgaWYgKHZhbHVlICE9PSBudWxsICYmXG4gICAgICAgICAgICB0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnICYmXG4gICAgICAgICAgICB0eXBlb2YgdmFsdWUgIT09ICdudW1iZXInXG4gICAgICAgICkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fdmFsdWUgPSB2YWx1ZVxuXG5cbiAgICAgICAgaWYgKHRoaXMuX2NvbnRyb2wpIHtcbiAgICAgICAgICAgIGxldCB2YWx1ZVkgPSB0eXBlb2YgdGhpcy5fb3B0aW9ucy52YWx1ZVkgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiB0aGlzLl9vcHRpb25zLnZhbHVlWSA9PT0gJ251bWJlcidcbiAgICAgICAgICAgICAgICA/IHRoaXMuX29wdGlvbnMudmFsdWVZXG4gICAgICAgICAgICAgICAgOiAnJ1xuXG4gICAgICAgICAgICBpZiAodGhpcy5fdmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAkKCdpbnB1dCcsIHRoaXMuX2NvbnRyb2wpLnByb3AoJ2NoZWNrZWQnLCBmYWxzZSk7XG5cbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5fdmFsdWUgPT09IHZhbHVlWSkge1xuICAgICAgICAgICAgICAgICQoJ2lucHV0JywgdGhpcy5fY29udHJvbCkucHJvcCgnY2hlY2tlZCcsIHRydWUpO1xuXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICQoJ2lucHV0JywgdGhpcy5fY29udHJvbCkucHJvcCgnY2hlY2tlZCcsIGZhbHNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC30L3QsNGH0LXQvdC40Y9cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgICAqL1xuICAgIGdldFZhbHVlKCkge1xuXG4gICAgICAgIGlmICh0aGlzLl9jb250cm9sKSB7XG4gICAgICAgICAgICBsZXQgdmFsdWUgPSAkKCdpbnB1dDpjaGVja2VkJywgdGhpcy5fY29udHJvbCkudmFsKCk7XG5cbiAgICAgICAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnIHx8IHZhbHVlID09PSAnJ1xuICAgICAgICAgICAgICAgID8gbnVsbFxuICAgICAgICAgICAgICAgIDogdmFsdWU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5fdmFsdWU7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiDQpNC+0YDQvNC40YDQvtCy0LDQvdC40LUg0LrQvtC90YLQtdC90YLQsFxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAgICovXG4gICAgcmVuZGVyKCkge1xuXG4gICAgICAgIGxldCB0YWJsZSAgID0gdGhpcy5fdGFibGU7XG4gICAgICAgIGxldCBvcHRpb25zID0gdGhpcy5nZXRPcHRpb25zKCk7XG4gICAgICAgIGxldCB2YWx1ZVkgID0gdHlwZW9mIG9wdGlvbnMudmFsdWVZID09PSAnc3RyaW5nJyB8fCB0eXBlb2Ygb3B0aW9ucy52YWx1ZVkgPT09ICdudW1iZXInXG4gICAgICAgICAgICA/IG9wdGlvbnMudmFsdWVZXG4gICAgICAgICAgICA6ICcnXG4gICAgICAgIGxldCBsYWJlbCA9IHR5cGVvZiBvcHRpb25zLmxhYmVsID09PSAnc3RyaW5nJyB8fCB0eXBlb2Ygb3B0aW9ucy5sYWJlbCA9PT0gJ251bWJlcidcbiAgICAgICAgICAgID8gb3B0aW9ucy5sYWJlbFxuICAgICAgICAgICAgOiAnJztcblxuXG4gICAgICAgIHRoaXMuX2NvbnRyb2wgPSAkKFRhYmxlVXRpbHMucmVuZGVyKFRhYmxlVHBsWydmaWx0ZXJzL3N3aXRjaC5odG1sJ10sIHtcbiAgICAgICAgICAgIGlkOiB0aGlzLl9pZCxcbiAgICAgICAgICAgIHZhbHVlWTogdmFsdWVZLFxuICAgICAgICAgICAgZmllbGQ6IHR5cGVvZiBvcHRpb25zLmZpZWxkID09PSAnc3RyaW5nJyA/IG9wdGlvbnMuZmllbGQgOiAnJyxcbiAgICAgICAgICAgIGNoZWNrZWQ6IHRoaXMuX3ZhbHVlID09IHZhbHVlWSxcbiAgICAgICAgICAgIGxhYmVsOiBsYWJlbCxcbiAgICAgICAgfSkpO1xuXG5cbiAgICAgICAgJCgnaW5wdXQnLCB0aGlzLl9jb250cm9sKS5jaGFuZ2UoZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgdGFibGUuc2VhcmNoUmVjb3JkcygpO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gdGhpcy5fY29udHJvbDtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEZpbHRlclN3aXRjaDsiLCJpbXBvcnQgVGFibGVVdGlscyBmcm9tIFwiLi4vdGFibGUudXRpbHNcIjtcblxuY2xhc3MgU2VhcmNoIHtcblxuICAgIF9pZCAgICAgID0gbnVsbDtcbiAgICBfdGFibGUgICA9IG51bGw7XG4gICAgX3ZhbHVlICAgPSBudWxsO1xuICAgIF9jb250cm9sID0gbnVsbDtcbiAgICBfb3B0aW9ucyA9IHtcbiAgICAgICAgaWQ6ICcnLFxuICAgICAgICB0eXBlOiAnJyxcbiAgICAgICAgZmllbGQ6IG51bGwsXG4gICAgICAgIGxhYmVsOiBudWxsXG4gICAgfTtcblxuXG4gICAgLyoqXG4gICAgICog0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y9cbiAgICAgKiBAcGFyYW0ge29iamVjdH0gdGFibGVcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gb3B0aW9uc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHRhYmxlLCBvcHRpb25zKSB7XG5cbiAgICAgICAgdGhpcy5fdGFibGUgICA9IHRhYmxlO1xuICAgICAgICB0aGlzLl9vcHRpb25zID0gJC5leHRlbmQodHJ1ZSwgdGhpcy5fb3B0aW9ucywgb3B0aW9ucyk7XG4gICAgICAgIHRoaXMuX2lkICAgICAgPSB0aGlzLl9vcHRpb25zLmhhc093blByb3BlcnR5KCdpZCcpICYmIHR5cGVvZiB0aGlzLl9vcHRpb25zLmlkID09PSAnc3RyaW5nJyAmJiB0aGlzLl9vcHRpb25zLmlkXG4gICAgICAgICAgICA/IHRoaXMuX29wdGlvbnMuaWRcbiAgICAgICAgICAgIDogVGFibGVVdGlscy5oYXNoQ29kZSgpO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC/0LDRgNCw0LzQtdGC0YDQvtCyXG4gICAgICogQHJldHVybnMge29iamVjdH1cbiAgICAgKi9cbiAgICBnZXRPcHRpb25zKCkge1xuICAgICAgICByZXR1cm4gJC5leHRlbmQodHJ1ZSwge30sIHRoaXMuX29wdGlvbnMpO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1IGlkXG4gICAgICogQHJldHVybnMge3N0cmluZ31cbiAgICAgKi9cbiAgICBnZXRJZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lkO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICog0KPRgdGC0LDQvdC+0LLQutCwINC30L3QsNGH0LXQvdC40Y9cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAgICAgKi9cbiAgICBzZXRWYWx1ZSh2YWx1ZSkge31cblxuXG4gICAgLyoqXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC30L3QsNGH0LXQvdC40Y9cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfG51bGx9XG4gICAgICovXG4gICAgZ2V0VmFsdWUgKCkge31cblxuXG4gICAgLyoqXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC90LDQt9Cy0LDQvdC40LUg0L/QvtC70Y9cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfG51bGx9XG4gICAgICovXG4gICAgZ2V0RmllbGQgKCkge1xuXG4gICAgICAgIHJldHVybiB0aGlzLl9vcHRpb25zLmZpZWxkO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICog0KTQuNC70YzRgtGA0LDRhtC40Y8g0LTQsNC90L3Ri9GFXG4gICAgICogQHJldHVybnMge3N0cmluZ30gZmllbGRWYWx1ZVxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IHNlYXJjaFZhbHVlXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAgICovXG4gICAgZmlsdGVyKGZpZWxkVmFsdWUsIHNlYXJjaFZhbHVlKSB7XG5cbiAgICAgICAgaWYgKFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIGZpZWxkVmFsdWUpIDwgMCB8fFxuICAgICAgICAgICAgWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2Ygc2VhcmNoVmFsdWUpIDwgMFxuICAgICAgICApIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmaWVsZFZhbHVlLnRvU3RyaW5nKCkudG9Mb3dlckNhc2UoKS5pbmRleE9mKFxuICAgICAgICAgICAgc2VhcmNoVmFsdWUudG9TdHJpbmcoKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgICkgPj0gMDtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqINCk0L7RgNC80LjRgNC+0LLQsNC90LjQtSDQutC+0L3RgtC10L3RgtCwXG4gICAgICogQHJldHVybnMge2pRdWVyeXxzdHJpbmd9XG4gICAgICovXG4gICAgcmVuZGVyICgpIHt9XG59XG5cblxuZXhwb3J0IGRlZmF1bHQgU2VhcmNoOyIsIlxuaW1wb3J0IFRhYmxlVHBsICAgICAgZnJvbSBcIi4uL3RhYmxlLnRwbFwiO1xuaW1wb3J0IFRhYmxlVXRpbHMgICAgZnJvbSBcIi4uL3RhYmxlLnV0aWxzXCI7XG5pbXBvcnQgVGFibGVFbGVtZW50cyBmcm9tIFwiLi4vdGFibGUuZWxlbWVudHNcIjtcbmltcG9ydCBTZWFyY2ggICAgICAgICAgICAgIGZyb20gXCIuLi9hYnN0cmFjdC9TZWFyY2hcIjtcblxuXG5jbGFzcyBTZWFyY2hUZXh0IGV4dGVuZHMgU2VhcmNoIHtcblxuICAgIC8qKlxuICAgICAqINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPXG4gICAgICogQHBhcmFtIHtUYWJsZUluc3RhbmNlfSB0YWJsZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSAgICAgICAgICAgICAgb3B0aW9uc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHRhYmxlLCBvcHRpb25zKSB7XG5cbiAgICAgICAgb3B0aW9ucyA9ICQuZXh0ZW5kKHRydWUsIHtcbiAgICAgICAgICAgIGlkOiBudWxsLFxuICAgICAgICAgICAgdHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZmllbGQ6IG51bGwsXG4gICAgICAgICAgICBsYWJlbDogbnVsbCxcbiAgICAgICAgICAgIHZhbHVlOiBudWxsLFxuICAgICAgICAgICAgd2lkdGg6IDIwMCxcbiAgICAgICAgICAgIGF0dHI6IHtcbiAgICAgICAgICAgICAgICBjbGFzczogXCJmb3JtLWNvbnRyb2wgZC1pbmxpbmUtYmxvY2tcIixcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgb3B0aW9ucyk7XG5cbiAgICAgICAgc3VwZXIodGFibGUsIG9wdGlvbnMpO1xuXG5cbiAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMudmFsdWUgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0VmFsdWUodGhpcy5fb3B0aW9ucy52YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqINCj0YHRgtCw0L3QvtCy0LrQsCDQt9C90LDRh9C10L3QuNGPXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gICAgICovXG4gICAgc2V0VmFsdWUodmFsdWUpIHtcblxuICAgICAgICBpZiAodmFsdWUgIT09IG51bGwgJiZcbiAgICAgICAgICAgIHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycgJiZcbiAgICAgICAgICAgIHR5cGVvZiB2YWx1ZSAhPT0gJ251bWJlcidcbiAgICAgICAgKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl92YWx1ZSA9IHZhbHVlXG5cblxuICAgICAgICBpZiAodGhpcy5fY29udHJvbCkge1xuICAgICAgICAgICAgdGhpcy5fY29udHJvbC52YWwoXG4gICAgICAgICAgICAgICAgdGhpcy5fdmFsdWUgPT09IG51bGwgPyAnJyA6IHRoaXMuX3ZhbHVlXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0LfQvdCw0YfQtdC90LjRj1xuICAgICAqIEByZXR1cm5zIHtzdHJpbmd8bnVsbH1cbiAgICAgKi9cbiAgICBnZXRWYWx1ZSgpIHtcblxuICAgICAgICBpZiAodGhpcy5fY29udHJvbCkge1xuICAgICAgICAgICAgbGV0IHZhbHVlID0gdGhpcy5fY29udHJvbC52YWwoKTtcblxuICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycgfHwgdmFsdWUgPT09ICcnXG4gICAgICAgICAgICAgICAgPyBudWxsXG4gICAgICAgICAgICAgICAgOiB2YWx1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLl92YWx1ZTtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqINCk0L7RgNC80LjRgNC+0LLQsNC90LjQtSDQutC+0L3RgtC10L3RgtCwXG4gICAgICogQHJldHVybnMge2pRdWVyeX1cbiAgICAgKi9cbiAgICByZW5kZXIoKSB7XG5cbiAgICAgICAgaWYgKCAhIFRhYmxlVXRpbHMuaXNPYmplY3QodGhpcy5fb3B0aW9ucy5hdHRyKSkge1xuICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy5hdHRyID0ge307XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnd2lkdGgnKSAmJlxuICAgICAgICAgICAgVGFibGVVdGlscy5pc051bWVyaWModGhpcy5fb3B0aW9ucy53aWR0aClcbiAgICAgICAgKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy5hdHRyLmhhc093blByb3BlcnR5KCdzdHlsZScpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy5hdHRyWydzdHlsZSddICs9ICc7d2lkdGg6JyArIHRoaXMuX29wdGlvbnMud2lkdGggKyAncHgnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9vcHRpb25zLmF0dHJbJ3N0eWxlJ10gPSAnd2lkdGg6JyArIHRoaXMuX29wdGlvbnMud2lkdGggKyAncHgnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fb3B0aW9ucy5hdHRyWyd2YWx1ZSddID0gdHlwZW9mIHRoaXMuX3ZhbHVlID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgdGhpcy5fdmFsdWUgPT09ICdudW1iZXInXG4gICAgICAgICAgICA/IHRoaXMuX3ZhbHVlXG4gICAgICAgICAgICA6ICcnO1xuXG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLmF0dHIuaGFzT3duUHJvcGVydHkoJ3R5cGUnKSkge1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMuX29wdGlvbnMuYXR0ci50eXBlO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGF0dHJpYnV0ZXMgPSBbXTtcbiAgICAgICAgbGV0IHRhYmxlICAgICAgPSB0aGlzLl90YWJsZTtcblxuICAgICAgICAkLmVhY2godGhpcy5fb3B0aW9ucy5hdHRyLCBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcbiAgICAgICAgICAgIGlmIChbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiB2YWx1ZSkgPj0gMCkge1xuICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXMucHVzaChuYW1lICsgJz1cIicgKyB2YWx1ZSArICdcIicpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLl9jb250cm9sID0gJChUYWJsZVV0aWxzLnJlbmRlcihUYWJsZVRwbFsnc2VhcmNoL3RleHQuaHRtbCddLCB7XG4gICAgICAgICAgICBhdHRyOiBhdHRyaWJ1dGVzLmxlbmd0aCA+IDAgPyAoJyAnICsgYXR0cmlidXRlcy5qb2luKCcgJykpIDogJycsXG4gICAgICAgIH0pKTtcblxuXG4gICAgICAgICQoJ2lucHV0JywgdGhpcy5fY29udHJvbCkua2V5dXAoZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgaWYgKGUua2V5ID09PSAnRW50ZXInIHx8IGUua2V5Q29kZSA9PT0gMTMpIHtcbiAgICAgICAgICAgICAgICB0YWJsZS5zZWFyY2hSZWNvcmRzKCk7XG5cbiAgICAgICAgICAgICAgICBsZXQgY29udGFpbmVyID0gVGFibGVFbGVtZW50cy5nZXRTZWFyY2hDb250YWluZXIodGFibGUuZ2V0SWQoKSk7XG4gICAgICAgICAgICAgICAgY29udGFpbmVyLmZhZGVPdXQoJ2Zhc3QnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbnRyb2w7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBTZWFyY2hUZXh0OyIsIlxuaW1wb3J0IFRhYmxlVHBsICAgICAgZnJvbSBcIi4uL3RhYmxlLnRwbFwiO1xuaW1wb3J0IFRhYmxlVXRpbHMgICAgZnJvbSBcIi4uL3RhYmxlLnV0aWxzXCI7XG5pbXBvcnQgVGFibGVFbGVtZW50cyBmcm9tIFwiLi4vdGFibGUuZWxlbWVudHNcIjtcbmltcG9ydCBTZWFyY2ggICAgICAgICAgICAgIGZyb20gXCIuLi9hYnN0cmFjdC9TZWFyY2hcIjtcblxuY2xhc3MgU2VhcmNoTnVtYmVyIGV4dGVuZHMgU2VhcmNoIHtcblxuICAgIC8qKlxuICAgICAqINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPXG4gICAgICogQHBhcmFtIHtUYWJsZUluc3RhbmNlfSB0YWJsZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSAgICAgICAgICAgICAgb3B0aW9uc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHRhYmxlLCBvcHRpb25zKSB7XG5cbiAgICAgICAgb3B0aW9ucyA9ICQuZXh0ZW5kKHRydWUsIHtcbiAgICAgICAgICAgIGlkOiBudWxsLFxuICAgICAgICAgICAgdHlwZTogJ251bWJlcicsXG4gICAgICAgICAgICBmaWVsZDogbnVsbCxcbiAgICAgICAgICAgIGxhYmVsOiBudWxsLFxuICAgICAgICAgICAgdmFsdWU6IG51bGwsXG4gICAgICAgICAgICB3aWR0aDogMjAwLFxuICAgICAgICAgICAgYXR0cjoge1xuICAgICAgICAgICAgICAgIGNsYXNzOiBcImZvcm0tY29udHJvbCBkLWlubGluZS1ibG9ja1wiLFxuICAgICAgICAgICAgfVxuICAgICAgICB9LCBvcHRpb25zKTtcblxuICAgICAgICBzdXBlcih0YWJsZSwgb3B0aW9ucyk7XG5cblxuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy52YWx1ZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5zZXRWYWx1ZSh0aGlzLl9vcHRpb25zLnZhbHVlKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICog0KPRgdGC0LDQvdC+0LLQutCwINC30L3QsNGH0LXQvdC40Y9cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gdmFsdWVcbiAgICAgKi9cbiAgICBzZXRWYWx1ZSAodmFsdWUpIHtcblxuICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgIGlmICggISBUYWJsZVV0aWxzLmlzT2JqZWN0KHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbGV0IG51bWJlclN0YXJ0ID0gbnVsbDtcbiAgICAgICAgICAgIGxldCBudW1iZXJFbmQgICA9IG51bGw7XG5cbiAgICAgICAgICAgIGlmICh2YWx1ZS5oYXNPd25Qcm9wZXJ0eSgnc3RhcnQnKSAmJlxuICAgICAgICAgICAgICAgIFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIHZhbHVlLnN0YXJ0KSA+PSAwICYmXG4gICAgICAgICAgICAgICAgISBpc05hTihOdW1iZXIodmFsdWUuc3RhcnQpKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgbnVtYmVyU3RhcnQgPSBOdW1iZXIodmFsdWUuc3RhcnQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodmFsdWUuaGFzT3duUHJvcGVydHkoJ2VuZCcpICYmXG4gICAgICAgICAgICAgICAgWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2YgdmFsdWUuZW5kKSA+PSAwICYmXG4gICAgICAgICAgICAgICAgISBpc05hTihOdW1iZXIodmFsdWUuZW5kKSlcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIG51bWJlckVuZCA9IE51bWJlcih2YWx1ZS5lbmQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAobnVtYmVyU3RhcnQgPT09IG51bGwgJiYgbnVtYmVyRW5kID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdmFsdWUgPSBudWxsO1xuXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuX3ZhbHVlID0ge1xuICAgICAgICAgICAgICAgICAgICBzdGFydDogbnVtYmVyU3RhcnQsXG4gICAgICAgICAgICAgICAgICAgIGVuZDogbnVtYmVyRW5kXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fdmFsdWUgPSBudWxsO1xuICAgICAgICB9XG5cblxuICAgICAgICBpZiAodGhpcy5fY29udHJvbCkge1xuICAgICAgICAgICAgbGV0IGlucHV0U3RhcnQgPSB0aGlzLl9jb250cm9sLnBhcmVudCgpLmZpbmQoJ2lucHV0Lm51bWJlci1zdGFydCcpO1xuICAgICAgICAgICAgbGV0IGlucHV0RW5kICAgPSB0aGlzLl9jb250cm9sLnBhcmVudCgpLmZpbmQoJ2lucHV0Lm51bWJlci1lbmQnKTtcblxuICAgICAgICAgICAgaWYgKHRoaXMuX3ZhbHVlID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaW5wdXRTdGFydC52YWwoJycpO1xuICAgICAgICAgICAgICAgIGlucHV0RW5kLnZhbCgnJyk7XG5cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoVGFibGVVdGlscy5pc09iamVjdCh0aGlzLl92YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICBpbnB1dFN0YXJ0LnZhbCh0eXBlb2YgdGhpcy5fdmFsdWUuc3RhcnQgIT09IG51bGwgPyB0aGlzLl92YWx1ZS5zdGFydCA6ICcnKTtcbiAgICAgICAgICAgICAgICBpbnB1dEVuZC52YWwodHlwZW9mIHRoaXMuX3ZhbHVlLmVuZCAhPT0gbnVsbCA/IHRoaXMuX3ZhbHVlLmVuZCA6ICcnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC30L3QsNGH0LXQvdC40Y9cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfG51bGx9XG4gICAgICovXG4gICAgZ2V0VmFsdWUoKSB7XG5cbiAgICAgICAgaWYgKHRoaXMuX2NvbnRyb2wpIHtcbiAgICAgICAgICAgIGxldCBpbnB1dFN0YXJ0ID0gdGhpcy5fY29udHJvbC5wYXJlbnQoKS5maW5kKCdpbnB1dC5udW1iZXItc3RhcnQnKTtcbiAgICAgICAgICAgIGxldCBpbnB1dEVuZCAgID0gdGhpcy5fY29udHJvbC5wYXJlbnQoKS5maW5kKCdpbnB1dC5udW1iZXItZW5kJyk7XG5cbiAgICAgICAgICAgIGlmIChpbnB1dFN0YXJ0WzBdICYmIGlucHV0RW5kWzBdKSB7XG5cbiAgICAgICAgICAgICAgICBsZXQgdmFsdWVTdGFydCA9IGlucHV0U3RhcnQudmFsKCk7XG4gICAgICAgICAgICAgICAgbGV0IHZhbHVlRW5kICAgPSBpbnB1dEVuZC52YWwoKTtcblxuICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgKHR5cGVvZiB2YWx1ZVN0YXJ0ID09PSAnc3RyaW5nJyAmJiB2YWx1ZVN0YXJ0ICE9PSAnJykgfHxcbiAgICAgICAgICAgICAgICAgICAgKHR5cGVvZiB2YWx1ZUVuZCA9PT0gJ3N0cmluZycgJiYgdmFsdWVFbmQgIT09ICcnKVxuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IHZhbHVlU3RhcnQgIT09ICcnICYmICEgaXNOYU4oTnVtYmVyKHZhbHVlU3RhcnQpKSA/IE51bWJlcih2YWx1ZVN0YXJ0KSA6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICBlbmQ6IHZhbHVlRW5kICE9PSAnJyAmJiAhIGlzTmFOKE51bWJlcih2YWx1ZUVuZCkpID8gTnVtYmVyKHZhbHVlRW5kKSA6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICog0KTQuNC70YzRgtGA0LDRhtC40Y8g0LTQsNC90L3Ri9GFXG4gICAgICogQHJldHVybnMge3N0cmluZ30gICAgICAgICAgICAgIGZpZWxkVmFsdWVcbiAgICAgKiBAcmV0dXJucyB7QXJyYXl8c3RyaW5nfG51bWJlcn0gc2VhcmNoVmFsdWVcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICBmaWx0ZXIoZmllbGRWYWx1ZSwgc2VhcmNoVmFsdWUpIHtcblxuICAgICAgICBpZiAoWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2YgZmllbGRWYWx1ZSkgPCAwIHx8XG4gICAgICAgICAgICAhIFRhYmxlVXRpbHMuaXNPYmplY3Qoc2VhcmNoVmFsdWUpIHx8XG4gICAgICAgICAgICAoXG4gICAgICAgICAgICAgICAgWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2Ygc2VhcmNoVmFsdWUuc3RhcnQpIDwgMCAmJlxuICAgICAgICAgICAgICAgIFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIHNlYXJjaFZhbHVlLmVuZCkgPCAwXG4gICAgICAgICAgICApXG4gICAgICAgICkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cblxuICAgICAgICBsZXQgaXNzZXRTdGFydCA9IFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIHNlYXJjaFZhbHVlLnN0YXJ0KSA+PSAwO1xuICAgICAgICBsZXQgaXNzZXRFbmQgICA9IFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIHNlYXJjaFZhbHVlLmVuZCkgPj0gMDtcblxuICAgICAgICBpZiAoaXNzZXRTdGFydCAmJiBpc3NldEVuZCkge1xuICAgICAgICAgICAgcmV0dXJuIGZpZWxkVmFsdWUgPj0gc2VhcmNoVmFsdWUuc3RhcnQgJiYgZmllbGRWYWx1ZSA8PSBzZWFyY2hWYWx1ZS5lbmQ7XG5cbiAgICAgICAgfSBlbHNlIGlmIChpc3NldFN0YXJ0KSB7XG4gICAgICAgICAgICByZXR1cm4gZmllbGRWYWx1ZSA+PSBzZWFyY2hWYWx1ZS5zdGFydDtcblxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGZpZWxkVmFsdWUgPD0gc2VhcmNoVmFsdWUuZW5kO1xuICAgICAgICB9XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiDQpNC+0YDQvNC40YDQvtCy0LDQvdC40LUg0LrQvtC90YLQtdC90YLQsFxuICAgICAqIEByZXR1cm5zIHtqUXVlcnl9XG4gICAgICovXG4gICAgcmVuZGVyKCkge1xuXG4gICAgICAgIGlmICggISBUYWJsZVV0aWxzLmlzT2JqZWN0KHRoaXMuX29wdGlvbnMuYXR0cikpIHtcbiAgICAgICAgICAgIHRoaXMuX29wdGlvbnMuYXR0ciA9IHt9O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMuaGFzT3duUHJvcGVydHkoJ3dpZHRoJykgJiZcbiAgICAgICAgICAgIFRhYmxlVXRpbHMuaXNOdW1lcmljKHRoaXMuX29wdGlvbnMud2lkdGgpXG4gICAgICAgICkge1xuICAgICAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMuYXR0ci5oYXNPd25Qcm9wZXJ0eSgnc3R5bGUnKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX29wdGlvbnMuYXR0clsnc3R5bGUnXSArPSAnO3dpZHRoOicgKyB0aGlzLl9vcHRpb25zLndpZHRoICsgJ3B4JztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy5hdHRyWydzdHlsZSddID0gJ3dpZHRoOicgKyB0aGlzLl9vcHRpb25zLndpZHRoICsgJ3B4JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLmF0dHIuaGFzT3duUHJvcGVydHkoJ3R5cGUnKSkge1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMuX29wdGlvbnMuYXR0ci50eXBlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMuYXR0ci5oYXNPd25Qcm9wZXJ0eSgndmFsdWUnKSkge1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMuX29wdGlvbnMuYXR0ci52YWx1ZTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgbGV0IGZpZWxkICAgICA9IHR5cGVvZiB0aGlzLl9vcHRpb25zLmZpZWxkID09PSAnc3RyaW5nJyA/IHRoaXMuX29wdGlvbnMuZmllbGQgOiAnJztcbiAgICAgICAgbGV0IHN0YXJ0QXR0ciA9IFtdO1xuICAgICAgICBsZXQgc3RhcnRFbmQgID0gW107XG4gICAgICAgIGxldCB0YWJsZSAgICAgPSB0aGlzLl90YWJsZTtcblxuXG4gICAgICAgICQuZWFjaCh0aGlzLl9vcHRpb25zLmF0dHIsIGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKFsnbmFtZScsICd2YWx1ZScsICdjbGFzcyddLmluZGV4T2YobmFtZSkgPj0gMCB8fFxuICAgICAgICAgICAgICAgIFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIHZhbHVlKSA8IDBcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc3RhcnRBdHRyLnB1c2gobmFtZSArICc9XCInICsgdmFsdWUgKyAnXCInKTtcbiAgICAgICAgICAgIHN0YXJ0RW5kLnB1c2gobmFtZSArICc9XCInICsgdmFsdWUgKyAnXCInKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMuYXR0ci5oYXNPd25Qcm9wZXJ0eSgnY2xhc3MnKSAmJlxuICAgICAgICAgICAgWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2YgdGhpcy5fb3B0aW9ucy5hdHRyLmNsYXNzKSA+PSAwXG4gICAgICAgICkge1xuICAgICAgICAgICAgc3RhcnRBdHRyLnB1c2goJ2NsYXNzPVwiJyArIHRoaXMuX29wdGlvbnMuYXR0ci5jbGFzcyArICcgbnVtYmVyLXN0YXJ0XCInKTtcbiAgICAgICAgICAgIHN0YXJ0RW5kLnB1c2goJ2NsYXNzPVwiJyArIHRoaXMuX29wdGlvbnMuYXR0ci5jbGFzcyArICcgbnVtYmVyLWVuZFwiJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzdGFydEF0dHIucHVzaCgnY2xhc3M9XCJudW1iZXItc3RhcnRcIicpO1xuICAgICAgICAgICAgc3RhcnRFbmQucHVzaCgnY2xhc3M9XCJudW1iZXItZW5kXCInKTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgaWYgKGZpZWxkKSB7XG4gICAgICAgICAgICBzdGFydEF0dHIucHVzaCgnbmFtZT1cIicgKyBmaWVsZCArICdbc3RhcnRdXCInKTtcbiAgICAgICAgICAgIHN0YXJ0RW5kLnB1c2goJ25hbWU9XCInICsgZmllbGQgKyAnW2VuZF1cIicpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhcnRBdHRyLnB1c2goJ3ZhbHVlPVwiJyArICh0aGlzLl92YWx1ZSA/IHRoaXMuX3ZhbHVlLnN0YXJ0IDogJycpICsgJ1wiJyk7XG4gICAgICAgIHN0YXJ0RW5kLnB1c2goJ3ZhbHVlPVwiJyArICh0aGlzLl92YWx1ZSA/IHRoaXMuX3ZhbHVlLmVuZCA6ICcnKSArICdcIicpO1xuXG5cbiAgICAgICAgdGhpcy5fY29udHJvbCA9ICQoVGFibGVVdGlscy5yZW5kZXIoVGFibGVUcGxbJ3NlYXJjaC9udW1iZXIuaHRtbCddLCB7XG4gICAgICAgICAgICBzdGFydEF0dHI6IHN0YXJ0QXR0ci5sZW5ndGggPiAwID8gKCcgJyArIHN0YXJ0QXR0ci5qb2luKCcgJykpIDogJycsXG4gICAgICAgICAgICBlbmRBdHRyOiBzdGFydEVuZC5sZW5ndGggPiAwID8gKCcgJyArIHN0YXJ0RW5kLmpvaW4oJyAnKSkgOiAnJyxcbiAgICAgICAgfSkpO1xuXG4gICAgICAgICQoJ2lucHV0Lm51bWJlci1zdGFydCwgaW5wdXQubnVtYmVyLWVuZCcsIHRoaXMuX2NvbnRyb2wpLmtleXVwKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIGlmIChlLmtleSA9PT0gJ0VudGVyJyB8fCBlLmtleUNvZGUgPT09IDEzKSB7XG4gICAgICAgICAgICAgICAgdGFibGUuc2VhcmNoUmVjb3JkcygpO1xuXG4gICAgICAgICAgICAgICAgbGV0IGNvbnRhaW5lciA9IFRhYmxlRWxlbWVudHMuZ2V0U2VhcmNoQ29udGFpbmVyKHRhYmxlLmdldElkKCkpO1xuICAgICAgICAgICAgICAgIGNvbnRhaW5lci5mYWRlT3V0KCdmYXN0Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiB0aGlzLl9jb250cm9sO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgU2VhcmNoTnVtYmVyOyIsIlxuaW1wb3J0IFRhYmxlVHBsICAgICAgZnJvbSBcIi4uL3RhYmxlLnRwbFwiO1xuaW1wb3J0IFRhYmxlVXRpbHMgICAgZnJvbSBcIi4uL3RhYmxlLnV0aWxzXCI7XG5pbXBvcnQgVGFibGVFbGVtZW50cyBmcm9tIFwiLi4vdGFibGUuZWxlbWVudHNcIjtcbmltcG9ydCBTZWFyY2ggICAgICAgIGZyb20gXCIuLi9hYnN0cmFjdC9TZWFyY2hcIjtcblxuY2xhc3MgU2VhcmNoRGF0ZSBleHRlbmRzIFNlYXJjaCB7XG5cbiAgICAvKipcbiAgICAgKiDQmNC90LjRhtC40LDQu9C40LfQsNGG0LjRj1xuICAgICAqIEBwYXJhbSB7VGFibGVJbnN0YW5jZX0gdGFibGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gICAgICAgIG9wdGlvbnNcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcih0YWJsZSwgb3B0aW9ucykge1xuXG4gICAgICAgIG9wdGlvbnMgPSAkLmV4dGVuZCh0cnVlLCB7XG4gICAgICAgICAgICBpZDogbnVsbCxcbiAgICAgICAgICAgIHR5cGU6ICdkYXRlJyxcbiAgICAgICAgICAgIGZpZWxkOiBudWxsLFxuICAgICAgICAgICAgbGFiZWw6IG51bGwsXG4gICAgICAgICAgICB2YWx1ZTogbnVsbCxcbiAgICAgICAgICAgIHdpZHRoOiAyMDAsXG4gICAgICAgICAgICBhdHRyOiB7XG4gICAgICAgICAgICAgICAgY2xhc3M6IFwiZm9ybS1jb250cm9sIGQtaW5saW5lLWJsb2NrXCIsXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIG9wdGlvbnMpO1xuXG4gICAgICAgIHN1cGVyKHRhYmxlLCBvcHRpb25zKTtcblxuXG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLnZhbHVlICE9PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLnNldFZhbHVlKHRoaXMuX29wdGlvbnMudmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiDQo9GB0YLQsNC90L7QstC60LAg0LfQvdCw0YfQtdC90LjRj1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICAgICAqL1xuICAgIHNldFZhbHVlKHZhbHVlKSB7XG5cbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycgJiYgdmFsdWUgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh2YWx1ZSAmJlxuICAgICAgICAgICAgKFxuICAgICAgICAgICAgICAgIHZhbHVlLm1hdGNoKC9eXFxkezR9XFwtXFxkezJ9XFwtXFxkezJ9JC8pID09PSBudWxsIHx8XG4gICAgICAgICAgICAgICAgaXNOYU4obmV3IERhdGUodmFsdWUpKVxuICAgICAgICAgICAgKVxuICAgICAgICApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX3ZhbHVlID0gdmFsdWU7XG5cblxuICAgICAgICBpZiAodGhpcy5fY29udHJvbCkge1xuICAgICAgICAgICAgdGhpcy5fY29udHJvbC52YWwoXG4gICAgICAgICAgICAgICAgdGhpcy5fdmFsdWUgPT09IG51bGwgPyAnJyA6IHRoaXMuX3ZhbHVlXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0LfQvdCw0YfQtdC90LjRj1xuICAgICAqIEByZXR1cm5zIHtzdHJpbmd8bnVsbH1cbiAgICAgKi9cbiAgICBnZXRWYWx1ZSgpIHtcblxuICAgICAgICBpZiAodGhpcy5fY29udHJvbCkge1xuICAgICAgICAgICAgbGV0IHZhbHVlID0gdGhpcy5fY29udHJvbC52YWwoKTtcblxuICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycgfHwgdmFsdWUgPT09ICcnXG4gICAgICAgICAgICAgICAgPyBudWxsXG4gICAgICAgICAgICAgICAgOiB2YWx1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLl92YWx1ZTtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqINCk0LjQu9GM0YLRgNCw0YbQuNGPINC00LDQvdC90YvRhVxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9ICAgICAgICAgICAgICBmaWVsZFZhbHVlXG4gICAgICogQHJldHVybnMge0FycmF5fHN0cmluZ3xudW1iZXJ9IHNlYXJjaFZhbHVlXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAgICovXG4gICAgZmlsdGVyKGZpZWxkVmFsdWUsIHNlYXJjaFZhbHVlKSB7XG5cbiAgICAgICAgaWYgKFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIGZpZWxkVmFsdWUpIDwgMCB8fFxuICAgICAgICAgICAgWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2Ygc2VhcmNoVmFsdWUpIDwgMFxuICAgICAgICApIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmaWVsZFZhbHVlLnRvU3RyaW5nKCkuaW5kZXhPZihzZWFyY2hWYWx1ZS50b1N0cmluZygpKSA9PT0gMDtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqINCk0L7RgNC80LjRgNC+0LLQsNC90LjQtSDQutC+0L3RgtC10L3RgtCwXG4gICAgICogQHJldHVybnMge2pRdWVyeX1cbiAgICAgKi9cbiAgICByZW5kZXIoKSB7XG5cbiAgICAgICAgaWYgKCAhIFRhYmxlVXRpbHMuaXNPYmplY3QodGhpcy5fb3B0aW9ucy5hdHRyKSkge1xuICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy5hdHRyID0ge307XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnd2lkdGgnKSAmJlxuICAgICAgICAgICAgVGFibGVVdGlscy5pc051bWVyaWModGhpcy5fb3B0aW9ucy53aWR0aClcbiAgICAgICAgKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy5hdHRyLmhhc093blByb3BlcnR5KCdzdHlsZScpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy5hdHRyWydzdHlsZSddICs9ICc7d2lkdGg6JyArIHRoaXMuX29wdGlvbnMud2lkdGggKyAncHgnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9vcHRpb25zLmF0dHJbJ3N0eWxlJ10gPSAnd2lkdGg6JyArIHRoaXMuX29wdGlvbnMud2lkdGggKyAncHgnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fb3B0aW9ucy5hdHRyWyd2YWx1ZSddID0gdHlwZW9mIHRoaXMuX3ZhbHVlID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgdGhpcy5fdmFsdWUgPT09ICdudW1iZXInXG4gICAgICAgICAgICA/IHRoaXMuX3ZhbHVlXG4gICAgICAgICAgICA6ICcnO1xuXG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLmF0dHIuaGFzT3duUHJvcGVydHkoJ3R5cGUnKSkge1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMuX29wdGlvbnMuYXR0ci50eXBlO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGF0dHJpYnV0ZXMgPSBbXTtcbiAgICAgICAgbGV0IHRhYmxlICAgICAgPSB0aGlzLl90YWJsZTtcblxuICAgICAgICAkLmVhY2godGhpcy5fb3B0aW9ucy5hdHRyLCBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZXMucHVzaChuYW1lICsgJz1cIicgKyB2YWx1ZSArICdcIicpO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLl9jb250cm9sID0gJChUYWJsZVV0aWxzLnJlbmRlcihUYWJsZVRwbFsnc2VhcmNoL2RhdGUuaHRtbCddLCB7XG4gICAgICAgICAgICBhdHRyOiBhdHRyaWJ1dGVzLmxlbmd0aCA+IDAgPyAoJyAnICsgYXR0cmlidXRlcy5qb2luKCcgJykpIDogJycsXG4gICAgICAgIH0pKTtcblxuXG4gICAgICAgIHRoaXMuX2NvbnRyb2wua2V5dXAoZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgaWYgKGUua2V5ID09PSAnRW50ZXInIHx8IGUua2V5Q29kZSA9PT0gMTMpIHtcbiAgICAgICAgICAgICAgICB0YWJsZS5zZWFyY2hSZWNvcmRzKCk7XG5cbiAgICAgICAgICAgICAgICBsZXQgY29udGFpbmVyID0gVGFibGVFbGVtZW50cy5nZXRTZWFyY2hDb250YWluZXIodGFibGUuZ2V0SWQoKSk7XG4gICAgICAgICAgICAgICAgY29udGFpbmVyLmZhZGVPdXQoJ2Zhc3QnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbnRyb2w7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBTZWFyY2hEYXRlOyIsIlxuaW1wb3J0IFRhYmxlVHBsICAgICAgZnJvbSBcIi4uL3RhYmxlLnRwbFwiO1xuaW1wb3J0IFRhYmxlVXRpbHMgICAgZnJvbSBcIi4uL3RhYmxlLnV0aWxzXCI7XG5pbXBvcnQgVGFibGVFbGVtZW50cyBmcm9tIFwiLi4vdGFibGUuZWxlbWVudHNcIjtcbmltcG9ydCBTZWFyY2ggICAgICAgICAgICAgIGZyb20gXCIuLi9hYnN0cmFjdC9TZWFyY2hcIjtcblxuY2xhc3MgU2VhcmNoRGF0ZU1vbnRoIGV4dGVuZHMgU2VhcmNoIHtcblxuICAgIC8qKlxuICAgICAqINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPXG4gICAgICogQHBhcmFtIHtUYWJsZUluc3RhbmNlfSB0YWJsZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSAgICAgICAgICAgICAgb3B0aW9uc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHRhYmxlLCBvcHRpb25zKSB7XG5cbiAgICAgICAgb3B0aW9ucyA9ICQuZXh0ZW5kKHRydWUsIHtcbiAgICAgICAgICAgIGlkOiBudWxsLFxuICAgICAgICAgICAgdHlwZTogJ2RhdGVfbW9udGgnLFxuICAgICAgICAgICAgZmllbGQ6IG51bGwsXG4gICAgICAgICAgICBsYWJlbDogbnVsbCxcbiAgICAgICAgICAgIHZhbHVlOiBudWxsLFxuICAgICAgICAgICAgd2lkdGg6IDIwMCxcbiAgICAgICAgICAgIGF0dHI6IHtcbiAgICAgICAgICAgICAgICBjbGFzczogXCJmb3JtLWNvbnRyb2wgZC1pbmxpbmUtYmxvY2tcIixcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgb3B0aW9ucyk7XG5cbiAgICAgICAgc3VwZXIodGFibGUsIG9wdGlvbnMpO1xuXG5cbiAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMudmFsdWUgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0VmFsdWUodGhpcy5fb3B0aW9ucy52YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqINCj0YHRgtCw0L3QvtCy0LrQsCDQt9C90LDRh9C10L3QuNGPXG4gICAgICogQHBhcmFtIHtzdHJpbmd8bnVsbH0gdmFsdWVcbiAgICAgKi9cbiAgICBzZXRWYWx1ZSh2YWx1ZSkge1xuXG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnICYmIHZhbHVlICE9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodmFsdWUgJiZcbiAgICAgICAgICAgIChcbiAgICAgICAgICAgICAgICB2YWx1ZS5tYXRjaCgvXlxcZHs0fVxcLVxcZHsyfSQvKSA9PT0gbnVsbCB8fFxuICAgICAgICAgICAgICAgIGlzTmFOKG5ldyBEYXRlKHZhbHVlKSlcbiAgICAgICAgICAgIClcbiAgICAgICAgKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl92YWx1ZSA9IHZhbHVlO1xuXG5cblxuICAgICAgICBpZiAodGhpcy5fY29udHJvbCkge1xuICAgICAgICAgICAgdGhpcy5fY29udHJvbC52YWwoXG4gICAgICAgICAgICAgICAgdGhpcy5fdmFsdWUgPT09IG51bGwgPyAnJyA6IHRoaXMuX3ZhbHVlXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0LfQvdCw0YfQtdC90LjRj1xuICAgICAqIEByZXR1cm5zIHtzdHJpbmd8bnVsbH1cbiAgICAgKi9cbiAgICBnZXRWYWx1ZSgpIHtcblxuICAgICAgICBpZiAodGhpcy5fY29udHJvbCkge1xuICAgICAgICAgICAgbGV0IHZhbHVlID0gdGhpcy5fY29udHJvbC52YWwoKTtcblxuICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycgfHwgdmFsdWUgPT09ICcnXG4gICAgICAgICAgICAgICAgPyBudWxsXG4gICAgICAgICAgICAgICAgOiB2YWx1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLl92YWx1ZTtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqINCk0LjQu9GM0YLRgNCw0YbQuNGPINC00LDQvdC90YvRhVxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IGZpZWxkVmFsdWVcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBzZWFyY2hWYWx1ZVxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgICAqL1xuICAgIGZpbHRlcihmaWVsZFZhbHVlLCBzZWFyY2hWYWx1ZSkge1xuXG4gICAgICAgIGlmIChbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiBmaWVsZFZhbHVlKSA8IDAgfHxcbiAgICAgICAgICAgIFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIHNlYXJjaFZhbHVlKSA8IDBcbiAgICAgICAgKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZmllbGRWYWx1ZS50b1N0cmluZygpLnRvTG93ZXJDYXNlKCkuaW5kZXhPZihcbiAgICAgICAgICAgIHNlYXJjaFZhbHVlLnRvU3RyaW5nKCkudG9Mb3dlckNhc2UoKVxuICAgICAgICApID09PSAwXG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiDQpNC+0YDQvNC40YDQvtCy0LDQvdC40LUg0LrQvtC90YLQtdC90YLQsFxuICAgICAqIEByZXR1cm5zIHtqUXVlcnl9XG4gICAgICovXG4gICAgcmVuZGVyKCkge1xuXG4gICAgICAgIGlmICggISBUYWJsZVV0aWxzLmlzT2JqZWN0KHRoaXMuX29wdGlvbnMuYXR0cikpIHtcbiAgICAgICAgICAgIHRoaXMuX29wdGlvbnMuYXR0ciA9IHt9O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMuaGFzT3duUHJvcGVydHkoJ3dpZHRoJykgJiZcbiAgICAgICAgICAgIFRhYmxlVXRpbHMuaXNOdW1lcmljKHRoaXMuX29wdGlvbnMud2lkdGgpXG4gICAgICAgICkge1xuICAgICAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMuYXR0ci5oYXNPd25Qcm9wZXJ0eSgnc3R5bGUnKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX29wdGlvbnMuYXR0clsnc3R5bGUnXSArPSAnO3dpZHRoOicgKyB0aGlzLl9vcHRpb25zLndpZHRoICsgJ3B4JztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy5hdHRyWydzdHlsZSddID0gJ3dpZHRoOicgKyB0aGlzLl9vcHRpb25zLndpZHRoICsgJ3B4JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX29wdGlvbnMuYXR0clsndmFsdWUnXSA9IHR5cGVvZiB0aGlzLl92YWx1ZSA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIHRoaXMuX3ZhbHVlID09PSAnbnVtYmVyJ1xuICAgICAgICAgICAgPyB0aGlzLl92YWx1ZVxuICAgICAgICAgICAgOiAnJztcblxuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy5hdHRyLmhhc093blByb3BlcnR5KCd0eXBlJykpIHtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9vcHRpb25zLmF0dHIudHlwZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBhdHRyaWJ1dGVzID0gW107XG4gICAgICAgIGxldCB0YWJsZSAgICAgID0gdGhpcy5fdGFibGU7XG5cbiAgICAgICAgJC5lYWNoKHRoaXMuX29wdGlvbnMuYXR0ciwgZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVzLnB1c2gobmFtZSArICc9XCInICsgdmFsdWUgKyAnXCInKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5fY29udHJvbCA9ICQoVGFibGVVdGlscy5yZW5kZXIoVGFibGVUcGxbJ3NlYXJjaC9kYXRlX21vbnRoLmh0bWwnXSwge1xuICAgICAgICAgICAgYXR0cjogYXR0cmlidXRlcy5sZW5ndGggPiAwID8gKCcgJyArIGF0dHJpYnV0ZXMuam9pbignICcpKSA6ICcnLFxuICAgICAgICB9KSk7XG5cbiAgICAgICAgdGhpcy5fY29udHJvbC5rZXl1cChmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICBpZiAoZS5rZXkgPT09ICdFbnRlcicgfHwgZS5rZXlDb2RlID09PSAxMykge1xuICAgICAgICAgICAgICAgIHRhYmxlLnNlYXJjaFJlY29yZHMoKTtcblxuICAgICAgICAgICAgICAgIGxldCBjb250YWluZXIgPSBUYWJsZUVsZW1lbnRzLmdldFNlYXJjaENvbnRhaW5lcih0YWJsZS5nZXRJZCgpKTtcbiAgICAgICAgICAgICAgICBjb250YWluZXIuZmFkZU91dCgnZmFzdCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gdGhpcy5fY29udHJvbDtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFNlYXJjaERhdGVNb250aDsiLCJcbmltcG9ydCBUYWJsZVRwbCAgICAgIGZyb20gXCIuLi90YWJsZS50cGxcIjtcbmltcG9ydCBUYWJsZVV0aWxzICAgIGZyb20gXCIuLi90YWJsZS51dGlsc1wiO1xuaW1wb3J0IFRhYmxlRWxlbWVudHMgZnJvbSBcIi4uL3RhYmxlLmVsZW1lbnRzXCI7XG5pbXBvcnQgU2VhcmNoICAgICAgICAgICAgICBmcm9tIFwiLi4vYWJzdHJhY3QvU2VhcmNoXCI7XG5cbmNsYXNzIFNlYXJjaERhdGV0aW1lIGV4dGVuZHMgU2VhcmNoIHtcblxuICAgIC8qKlxuICAgICAqINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPXG4gICAgICogQHBhcmFtIHtUYWJsZUluc3RhbmNlfSB0YWJsZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSAgICAgICAgICAgICAgb3B0aW9uc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHRhYmxlLCBvcHRpb25zKSB7XG5cbiAgICAgICAgb3B0aW9ucyA9ICQuZXh0ZW5kKHRydWUsIHtcbiAgICAgICAgICAgIGlkOiBudWxsLFxuICAgICAgICAgICAgdHlwZTogJ2RhdGV0aW1lJyxcbiAgICAgICAgICAgIGZpZWxkOiBudWxsLFxuICAgICAgICAgICAgbGFiZWw6IG51bGwsXG4gICAgICAgICAgICB2YWx1ZTogbnVsbCxcbiAgICAgICAgICAgIHdpZHRoOiAyMDAsXG4gICAgICAgICAgICBhdHRyOiB7XG4gICAgICAgICAgICAgICAgY2xhc3M6IFwiZm9ybS1jb250cm9sIGQtaW5saW5lLWJsb2NrXCIsXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIG9wdGlvbnMpO1xuXG4gICAgICAgIHN1cGVyKHRhYmxlLCBvcHRpb25zKTtcblxuXG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLnZhbHVlICE9PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLnNldFZhbHVlKHRoaXMuX29wdGlvbnMudmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiDQo9GB0YLQsNC90L7QstC60LAg0LfQvdCw0YfQtdC90LjRj1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICAgICAqL1xuICAgIHNldFZhbHVlKHZhbHVlKSB7XG5cbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycgJiYgdmFsdWUgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh2YWx1ZSAmJlxuICAgICAgICAgICAgKFxuICAgICAgICAgICAgICAgIHZhbHVlLm1hdGNoKC9eXFxkezR9XFwtXFxkezJ9XFwtXFxkezJ9KFR8IClcXGR7Mn06XFxkezJ9KDpcXGR7Mn18KSQvKSA9PT0gbnVsbCB8fFxuICAgICAgICAgICAgICAgIGlzTmFOKG5ldyBEYXRlKHZhbHVlKSlcbiAgICAgICAgICAgIClcbiAgICAgICAgKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl92YWx1ZSA9IHZhbHVlO1xuXG4gICAgICAgIGlmICh0aGlzLl9jb250cm9sKSB7XG4gICAgICAgICAgICB0aGlzLl9jb250cm9sLnZhbChcbiAgICAgICAgICAgICAgICB0aGlzLl92YWx1ZSA9PT0gbnVsbCA/ICcnIDogdGhpcy5fdmFsdWVcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSDQt9C90LDRh9C10L3QuNGPXG4gICAgICogQHJldHVybnMge3N0cmluZ31cbiAgICAgKi9cbiAgICBnZXRWYWx1ZSgpIHtcblxuICAgICAgICBpZiAodGhpcy5fY29udHJvbCkge1xuICAgICAgICAgICAgbGV0IHZhbHVlID0gdGhpcy5fY29udHJvbC52YWwoKTtcblxuICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycgfHwgdmFsdWUgPT09ICcnXG4gICAgICAgICAgICAgICAgPyBudWxsXG4gICAgICAgICAgICAgICAgOiB2YWx1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLl92YWx1ZTtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqINCk0LjQu9GM0YLRgNCw0YbQuNGPINC00LDQvdC90YvRhVxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9ICAgICAgICAgICAgICBmaWVsZFZhbHVlXG4gICAgICogQHJldHVybnMge0FycmF5fHN0cmluZ3xudW1iZXJ9IHNlYXJjaFZhbHVlXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAgICovXG4gICAgZmlsdGVyKGZpZWxkVmFsdWUsIHNlYXJjaFZhbHVlKSB7XG5cbiAgICAgICAgaWYgKFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIGZpZWxkVmFsdWUpIDwgMCB8fFxuICAgICAgICAgICAgWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2Ygc2VhcmNoVmFsdWUpIDwgMFxuICAgICAgICApIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmaWVsZFZhbHVlLnRvU3RyaW5nKCkgPT09IHNlYXJjaFZhbHVlLnRvU3RyaW5nKCk7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiDQpNC+0YDQvNC40YDQvtCy0LDQvdC40LUg0LrQvtC90YLQtdC90YLQsFxuICAgICAqIEByZXR1cm5zIHtqUXVlcnl9XG4gICAgICovXG4gICAgcmVuZGVyKCkge1xuXG4gICAgICAgIGlmICggISBUYWJsZVV0aWxzLmlzT2JqZWN0KHRoaXMuX29wdGlvbnMuYXR0cikpIHtcbiAgICAgICAgICAgIHRoaXMuX29wdGlvbnMuYXR0ciA9IHt9O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMuaGFzT3duUHJvcGVydHkoJ3dpZHRoJykgJiZcbiAgICAgICAgICAgIFRhYmxlVXRpbHMuaXNOdW1lcmljKHRoaXMuX29wdGlvbnMud2lkdGgpXG4gICAgICAgICkge1xuICAgICAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMuYXR0ci5oYXNPd25Qcm9wZXJ0eSgnc3R5bGUnKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX29wdGlvbnMuYXR0clsnc3R5bGUnXSArPSAnO3dpZHRoOicgKyB0aGlzLl9vcHRpb25zLndpZHRoICsgJ3B4JztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy5hdHRyWydzdHlsZSddID0gJ3dpZHRoOicgKyB0aGlzLl9vcHRpb25zLndpZHRoICsgJ3B4JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX29wdGlvbnMuYXR0clsndmFsdWUnXSA9IHR5cGVvZiB0aGlzLl92YWx1ZSA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIHRoaXMuX3ZhbHVlID09PSAnbnVtYmVyJ1xuICAgICAgICAgICAgPyB0aGlzLl92YWx1ZVxuICAgICAgICAgICAgOiAnJztcblxuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy5hdHRyLmhhc093blByb3BlcnR5KCd0eXBlJykpIHtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9vcHRpb25zLmF0dHIudHlwZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBhdHRyaWJ1dGVzID0gW107XG4gICAgICAgIGxldCB0YWJsZSAgICAgID0gdGhpcy5fdGFibGU7XG5cbiAgICAgICAgJC5lYWNoKHRoaXMuX29wdGlvbnMuYXR0ciwgZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAoWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2YgdmFsdWUpID49IDApIHtcbiAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzLnB1c2gobmFtZSArICc9XCInICsgdmFsdWUgKyAnXCInKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5fY29udHJvbCA9ICQoVGFibGVVdGlscy5yZW5kZXIoVGFibGVUcGxbJ3NlYXJjaC9kYXRldGltZS5odG1sJ10sIHtcbiAgICAgICAgICAgIGF0dHI6IGF0dHJpYnV0ZXMubGVuZ3RoID4gMCA/ICgnICcgKyBhdHRyaWJ1dGVzLmpvaW4oJyAnKSkgOiAnJyxcbiAgICAgICAgfSkpO1xuXG4gICAgICAgIHRoaXMuX2NvbnRyb2wua2V5dXAoZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgaWYgKGUua2V5ID09PSAnRW50ZXInIHx8IGUua2V5Q29kZSA9PT0gMTMpIHtcbiAgICAgICAgICAgICAgICB0YWJsZS5zZWFyY2hSZWNvcmRzKCk7XG5cbiAgICAgICAgICAgICAgICBsZXQgY29udGFpbmVyID0gVGFibGVFbGVtZW50cy5nZXRTZWFyY2hDb250YWluZXIodGFibGUuZ2V0SWQoKSk7XG4gICAgICAgICAgICAgICAgY29udGFpbmVyLmZhZGVPdXQoJ2Zhc3QnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbnRyb2w7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBTZWFyY2hEYXRldGltZTsiLCJcbmltcG9ydCBUYWJsZVRwbCAgICAgIGZyb20gXCIuLi90YWJsZS50cGxcIjtcbmltcG9ydCBUYWJsZVV0aWxzICAgIGZyb20gXCIuLi90YWJsZS51dGlsc1wiO1xuaW1wb3J0IFRhYmxlRWxlbWVudHMgZnJvbSBcIi4uL3RhYmxlLmVsZW1lbnRzXCI7XG5pbXBvcnQgU2VhcmNoICAgICAgICAgICAgICBmcm9tIFwiLi4vYWJzdHJhY3QvU2VhcmNoXCI7XG5cbmNsYXNzIFNlYXJjaERhdGVSYW5nZSBleHRlbmRzIFNlYXJjaCB7XG5cbiAgICAvKipcbiAgICAgKiDQmNC90LjRhtC40LDQu9C40LfQsNGG0LjRj1xuICAgICAqIEBwYXJhbSB7VGFibGVJbnN0YW5jZX0gdGFibGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gICAgICAgICAgICAgIG9wdGlvbnNcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcih0YWJsZSwgb3B0aW9ucykge1xuXG4gICAgICAgIG9wdGlvbnMgPSAkLmV4dGVuZCh0cnVlLCB7XG4gICAgICAgICAgICBpZDogbnVsbCxcbiAgICAgICAgICAgIHR5cGU6ICdkYXRlX3JhbmdlJyxcbiAgICAgICAgICAgIGZpZWxkOiBudWxsLFxuICAgICAgICAgICAgbGFiZWw6IG51bGwsXG4gICAgICAgICAgICB2YWx1ZTogbnVsbCxcbiAgICAgICAgICAgIHdpZHRoOiAyMDAsXG4gICAgICAgICAgICBhdHRyOiB7XG4gICAgICAgICAgICAgICAgY2xhc3M6IFwiZm9ybS1jb250cm9sIGQtaW5saW5lLWJsb2NrXCIsXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIG9wdGlvbnMpO1xuXG4gICAgICAgIHN1cGVyKHRhYmxlLCBvcHRpb25zKTtcblxuXG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLnZhbHVlICE9PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLnNldFZhbHVlKHRoaXMuX29wdGlvbnMudmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiDQo9GB0YLQsNC90L7QstC60LAg0LfQvdCw0YfQtdC90LjRj1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSB2YWx1ZVxuICAgICAqL1xuICAgIHNldFZhbHVlKHZhbHVlKSB7XG5cbiAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAoICEgVGFibGVVdGlscy5pc09iamVjdCh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxldCBkYXRlU3RhcnQgPSBudWxsO1xuICAgICAgICAgICAgbGV0IGRhdGVFbmQgICA9IG51bGw7XG5cbiAgICAgICAgICAgIGlmICh2YWx1ZS5oYXNPd25Qcm9wZXJ0eSgnc3RhcnQnKSAmJlxuICAgICAgICAgICAgICAgIHR5cGVvZiB2YWx1ZS5zdGFydCA9PT0gJ3N0cmluZycgJiZcbiAgICAgICAgICAgICAgICB2YWx1ZS5zdGFydC5tYXRjaCgvXlxcZHs0fVxcLVxcZHsyfVxcLVxcZHsyfSQvKSA9PT0gbnVsbCAmJlxuICAgICAgICAgICAgICAgIGlzTmFOKG5ldyBEYXRlKHZhbHVlLnN0YXJ0KSlcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIGRhdGVTdGFydCA9IHZhbHVlLnN0YXJ0O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodmFsdWUuaGFzT3duUHJvcGVydHkoJ2VuZCcpICYmXG4gICAgICAgICAgICAgICAgdHlwZW9mIHZhbHVlLmVuZCA9PT0gJ3N0cmluZycgJiZcbiAgICAgICAgICAgICAgICB2YWx1ZS5lbmQubWF0Y2goL15cXGR7NH1cXC1cXGR7Mn1cXC1cXGR7Mn0kLykgPT09IG51bGwgJiZcbiAgICAgICAgICAgICAgICBpc05hTihuZXcgRGF0ZSh2YWx1ZS5lbmQpKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgZGF0ZUVuZCA9IHZhbHVlLmVuZDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGRhdGVTdGFydCA9PT0gbnVsbCAmJiBkYXRlRW5kID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdmFsdWUgPSBudWxsO1xuXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuX3ZhbHVlID0ge1xuICAgICAgICAgICAgICAgICAgICBzdGFydDogZGF0ZVN0YXJ0LFxuICAgICAgICAgICAgICAgICAgICBlbmQ6IGRhdGVFbmRcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl92YWx1ZSA9IG51bGw7XG4gICAgICAgIH1cblxuXG4gICAgICAgIGlmICh0aGlzLl9jb250cm9sKSB7XG4gICAgICAgICAgICBsZXQgaW5wdXRTdGFydCA9IHRoaXMuX2NvbnRyb2wucGFyZW50KCkuZmluZCgnaW5wdXQuZGF0ZS1zdGFydCcpO1xuICAgICAgICAgICAgbGV0IGlucHV0RW5kICAgPSB0aGlzLl9jb250cm9sLnBhcmVudCgpLmZpbmQoJ2lucHV0LmRhdGUtZW5kJyk7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLl92YWx1ZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGlucHV0U3RhcnQudmFsKCcnKTtcbiAgICAgICAgICAgICAgICBpbnB1dEVuZC52YWwoJycpO1xuXG4gICAgICAgICAgICB9IGVsc2UgaWYgKFRhYmxlVXRpbHMuaXNPYmplY3QodGhpcy5fdmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgaW5wdXRTdGFydC52YWwodHlwZW9mIHRoaXMuX3ZhbHVlLnN0YXJ0ICE9PSBudWxsID8gdGhpcy5fdmFsdWUuc3RhcnQgOiAnJyk7XG4gICAgICAgICAgICAgICAgaW5wdXRFbmQudmFsKHR5cGVvZiB0aGlzLl92YWx1ZS5lbmQgIT09IG51bGwgPyB0aGlzLl92YWx1ZS5lbmQgOiAnJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSDQt9C90LDRh9C10L3QuNGPXG4gICAgICogQHJldHVybnMge09iamVjdHxudWxsfVxuICAgICAqL1xuICAgIGdldFZhbHVlKCkge1xuXG4gICAgICAgIGlmICh0aGlzLl9jb250cm9sKSB7XG4gICAgICAgICAgICBsZXQgaW5wdXRTdGFydCA9IHRoaXMuX2NvbnRyb2wucGFyZW50KCkuZmluZCgnaW5wdXQuZGF0ZS1zdGFydCcpO1xuICAgICAgICAgICAgbGV0IGlucHV0RW5kICAgPSB0aGlzLl9jb250cm9sLnBhcmVudCgpLmZpbmQoJ2lucHV0LmRhdGUtZW5kJyk7XG5cbiAgICAgICAgICAgIGlmIChpbnB1dFN0YXJ0WzBdICYmIGlucHV0RW5kWzBdKSB7XG5cbiAgICAgICAgICAgICAgICBsZXQgdmFsdWVTdGFydCA9IGlucHV0U3RhcnQudmFsKCk7XG4gICAgICAgICAgICAgICAgbGV0IHZhbHVlRW5kICAgPSBpbnB1dEVuZC52YWwoKTtcblxuICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgKHR5cGVvZiB2YWx1ZVN0YXJ0ID09PSAnc3RyaW5nJyAmJiB2YWx1ZVN0YXJ0ICE9PSAnJykgfHxcbiAgICAgICAgICAgICAgICAgICAgKHR5cGVvZiB2YWx1ZUVuZCA9PT0gJ3N0cmluZycgJiYgdmFsdWVFbmQgIT09ICcnKVxuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IHZhbHVlU3RhcnQgIT09ICcnID8gdmFsdWVTdGFydCA6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICBlbmQ6IHZhbHVlRW5kICE9PSAnJyA/IHZhbHVlRW5kIDogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5fdmFsdWU7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiDQpNC40LvRjNGC0YDQsNGG0LjRjyDQtNCw0L3QvdGL0YVcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBmaWVsZFZhbHVlXG4gICAgICogQHJldHVybnMge09iamVjdH0gc2VhcmNoVmFsdWVcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICBmaWx0ZXIoZmllbGRWYWx1ZSwgc2VhcmNoVmFsdWUpIHtcblxuICAgICAgICBpZiAoWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2YgZmllbGRWYWx1ZSkgPCAwIHx8XG4gICAgICAgICAgICAhIFRhYmxlVXRpbHMuaXNPYmplY3Qoc2VhcmNoVmFsdWUpIHx8XG4gICAgICAgICAgICAodHlwZW9mIHNlYXJjaFZhbHVlLnN0YXJ0ICE9PSAnc3RyaW5nJyAmJiB0eXBlb2Ygc2VhcmNoVmFsdWUuZW5kICE9PSAnc3RyaW5nJylcbiAgICAgICAgKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuXG4gICAgICAgIGxldCBpc3NldFN0YXJ0ID0gWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2Ygc2VhcmNoVmFsdWUuc3RhcnQpID49IDA7XG4gICAgICAgIGxldCBpc3NldEVuZCAgID0gWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2Ygc2VhcmNoVmFsdWUuZW5kKSA+PSAwO1xuXG4gICAgICAgIGlmIChpc3NldFN0YXJ0ICYmIGlzc2V0RW5kKSB7XG4gICAgICAgICAgICByZXR1cm4gZmllbGRWYWx1ZSA+PSBzZWFyY2hWYWx1ZS5zdGFydCAmJiBmaWVsZFZhbHVlIDw9IHNlYXJjaFZhbHVlLmVuZDtcblxuICAgICAgICB9IGVsc2UgaWYgKGlzc2V0U3RhcnQpIHtcbiAgICAgICAgICAgIHJldHVybiBmaWVsZFZhbHVlID49IHNlYXJjaFZhbHVlLnN0YXJ0O1xuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZmllbGRWYWx1ZSA8PSBzZWFyY2hWYWx1ZS5lbmQ7XG4gICAgICAgIH1cbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqINCk0L7RgNC80LjRgNC+0LLQsNC90LjQtSDQutC+0L3RgtC10L3RgtCwXG4gICAgICogQHJldHVybnMge3N0cmluZ31cbiAgICAgKi9cbiAgICByZW5kZXIoKSB7XG5cbiAgICAgICAgbGV0IG9wdGlvbnMgPSB0aGlzLmdldE9wdGlvbnMoKTtcblxuICAgICAgICBpZiAoICEgVGFibGVVdGlscy5pc09iamVjdChvcHRpb25zLmF0dHIpKSB7XG4gICAgICAgICAgICBvcHRpb25zLmF0dHIgPSB7fTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvcHRpb25zLmhhc093blByb3BlcnR5KCd3aWR0aCcpICYmXG4gICAgICAgICAgICBUYWJsZVV0aWxzLmlzTnVtZXJpYyhvcHRpb25zLndpZHRoKVxuICAgICAgICApIHtcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmF0dHIuaGFzT3duUHJvcGVydHkoJ3N0eWxlJykpIHtcbiAgICAgICAgICAgICAgICBvcHRpb25zLmF0dHJbJ3N0eWxlJ10gKz0gJzt3aWR0aDonICsgb3B0aW9ucy53aWR0aCArICdweCc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG9wdGlvbnMuYXR0clsnc3R5bGUnXSA9ICd3aWR0aDonICsgb3B0aW9ucy53aWR0aCArICdweCc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob3B0aW9ucy5hdHRyLmhhc093blByb3BlcnR5KCd0eXBlJykpIHtcbiAgICAgICAgICAgIGRlbGV0ZSBvcHRpb25zLmF0dHIudHlwZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvcHRpb25zLmF0dHIuaGFzT3duUHJvcGVydHkoJ3ZhbHVlJykpIHtcbiAgICAgICAgICAgIGRlbGV0ZSBvcHRpb25zLmF0dHIudmFsdWU7XG4gICAgICAgIH1cblxuXG4gICAgICAgIGxldCBzdGFydEF0dHIgPSBbXTtcbiAgICAgICAgbGV0IHN0YXJ0RW5kICA9IFtdO1xuXG5cbiAgICAgICAgJC5lYWNoKG9wdGlvbnMuYXR0ciwgZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAoWyduYW1lJywgJ3ZhbHVlJywgJ2NsYXNzJ10uaW5kZXhPZihuYW1lKSA+PSAwIHx8XG4gICAgICAgICAgICAgICAgWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2YgdmFsdWUpIDwgMFxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBzdGFydEF0dHIucHVzaChuYW1lICsgJz1cIicgKyB2YWx1ZSArICdcIicpO1xuICAgICAgICAgICAgc3RhcnRFbmQucHVzaChuYW1lICsgJz1cIicgKyB2YWx1ZSArICdcIicpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAob3B0aW9ucy5hdHRyLmhhc093blByb3BlcnR5KCdjbGFzcycpICYmXG4gICAgICAgICAgICBbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiBvcHRpb25zLmF0dHIuY2xhc3MpID49IDBcbiAgICAgICAgKSB7XG4gICAgICAgICAgICBzdGFydEF0dHIucHVzaCgnY2xhc3M9XCInICsgb3B0aW9ucy5hdHRyLmNsYXNzICsgJyBkYXRlLXN0YXJ0XCInKTtcbiAgICAgICAgICAgIHN0YXJ0RW5kLnB1c2goJ2NsYXNzPVwiJyArIG9wdGlvbnMuYXR0ci5jbGFzcyArICcgZGF0ZS1lbmRcIicpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3RhcnRBdHRyLnB1c2goJ2NsYXNzPVwiZGF0ZS1zdGFydFwiJyk7XG4gICAgICAgICAgICBzdGFydEVuZC5wdXNoKCdjbGFzcz1cImRhdGUtZW5kXCInKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXJ0QXR0ci5wdXNoKCd2YWx1ZT1cIicgKyAodGhpcy5fdmFsdWUgPyB0aGlzLl92YWx1ZS5zdGFydCA6ICcnKSArICdcIicpO1xuICAgICAgICBzdGFydEVuZC5wdXNoKCd2YWx1ZT1cIicgKyAodGhpcy5fdmFsdWUgPyB0aGlzLl92YWx1ZS5lbmQgOiAnJykgKyAnXCInKTtcblxuXG4gICAgICAgIGxldCBjb250cm9sID0gJChUYWJsZVV0aWxzLnJlbmRlcihUYWJsZVRwbFsnc2VhcmNoL2RhdGVfcmFuZ2UuaHRtbCddLCB7XG4gICAgICAgICAgICBzdGFydEF0dHI6IHN0YXJ0QXR0ci5sZW5ndGggPiAwID8gKCcgJyArIHN0YXJ0QXR0ci5qb2luKCcgJykpIDogJycsXG4gICAgICAgICAgICBlbmRBdHRyOiBzdGFydEVuZC5sZW5ndGggPiAwID8gKCcgJyArIHN0YXJ0RW5kLmpvaW4oJyAnKSkgOiAnJyxcbiAgICAgICAgfSkpO1xuXG4gICAgICAgICQoJ2lucHV0LmRhdGUtc3RhcnQnLCBjb250cm9sKS5jaGFuZ2UoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBsZXQgZGF0ZUVuZCA9ICQoJ2lucHV0LmRhdGUtZW5kJywgY29udHJvbCkuYXR0cignbWluJywgJCh0aGlzKS52YWwoKSk7XG5cbiAgICAgICAgICAgIGlmIChcInNob3dQaWNrZXJcIiBpbiBIVE1MSW5wdXRFbGVtZW50LnByb3RvdHlwZSkge1xuICAgICAgICAgICAgICAgICQoZGF0ZUVuZClbMF0uc2hvd1BpY2tlcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgJCgnaW5wdXQuZGF0ZS1lbmQnLCBjb250cm9sKS5jaGFuZ2UoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAkKCdpbnB1dC5kYXRlLXN0YXJ0JywgY29udHJvbCkuYXR0cignbWF4JywgJCh0aGlzKS52YWwoKSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuX2NvbnRyb2wgPSBjb250cm9sO1xuXG4gICAgICAgIHJldHVybiB0aGlzLl9jb250cm9sO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgU2VhcmNoRGF0ZVJhbmdlOyIsIlxuaW1wb3J0IFRhYmxlVHBsICAgICAgZnJvbSBcIi4uL3RhYmxlLnRwbFwiO1xuaW1wb3J0IFRhYmxlVXRpbHMgICAgZnJvbSBcIi4uL3RhYmxlLnV0aWxzXCI7XG5pbXBvcnQgVGFibGVFbGVtZW50cyBmcm9tIFwiLi4vdGFibGUuZWxlbWVudHNcIjtcbmltcG9ydCBTZWFyY2ggICAgICAgICAgICAgIGZyb20gXCIuLi9hYnN0cmFjdC9TZWFyY2hcIjtcblxuY2xhc3MgU2VhcmNoRGF0ZXRpbWVSYW5nZSBleHRlbmRzIFNlYXJjaCB7XG5cbiAgICAvKipcbiAgICAgKiDQmNC90LjRhtC40LDQu9C40LfQsNGG0LjRj1xuICAgICAqIEBwYXJhbSB7VGFibGVJbnN0YW5jZX0gdGFibGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gICAgICAgICAgICAgIG9wdGlvbnNcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcih0YWJsZSwgb3B0aW9ucykge1xuXG4gICAgICAgIG9wdGlvbnMgPSAkLmV4dGVuZCh0cnVlLCB7XG4gICAgICAgICAgICBpZDogbnVsbCxcbiAgICAgICAgICAgIHR5cGU6ICdkYXRldGltZV9yYW5nZScsXG4gICAgICAgICAgICBmaWVsZDogbnVsbCxcbiAgICAgICAgICAgIGxhYmVsOiBudWxsLFxuICAgICAgICAgICAgdmFsdWU6IG51bGwsXG4gICAgICAgICAgICB3aWR0aDogMjAwLFxuICAgICAgICAgICAgYXR0cjoge1xuICAgICAgICAgICAgICAgIGNsYXNzOiBcImZvcm0tY29udHJvbCBkLWlubGluZS1ibG9ja1wiLFxuICAgICAgICAgICAgfVxuICAgICAgICB9LCBvcHRpb25zKTtcblxuICAgICAgICBzdXBlcih0YWJsZSwgb3B0aW9ucyk7XG5cblxuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy52YWx1ZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5zZXRWYWx1ZSh0aGlzLl9vcHRpb25zLnZhbHVlKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICog0KPRgdGC0LDQvdC+0LLQutCwINC30L3QsNGH0LXQvdC40Y9cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gdmFsdWVcbiAgICAgKi9cbiAgICBzZXRWYWx1ZSh2YWx1ZSkge1xuXG4gICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKCAhIFRhYmxlVXRpbHMuaXNPYmplY3QodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsZXQgZGF0ZVN0YXJ0ID0gbnVsbDtcbiAgICAgICAgICAgIGxldCBkYXRlRW5kICAgPSBudWxsO1xuXG4gICAgICAgICAgICBpZiAodmFsdWUuaGFzT3duUHJvcGVydHkoJ3N0YXJ0JykgJiZcbiAgICAgICAgICAgICAgICB0eXBlb2YgdmFsdWUuc3RhcnQgPT09ICdzdHJpbmcnICYmXG4gICAgICAgICAgICAgICAgdmFsdWUuc3RhcnQubWF0Y2goL15cXGR7NH1cXC1cXGR7Mn1cXC1cXGR7Mn0gXFxkezJ9OlxcZHsyfTpcXGR7Mn0kLykgPT09IG51bGwgJiZcbiAgICAgICAgICAgICAgICBpc05hTihuZXcgRGF0ZSh2YWx1ZS5zdGFydCkpXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBkYXRlU3RhcnQgPSB2YWx1ZS5zdGFydDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHZhbHVlLmhhc093blByb3BlcnR5KCdlbmQnKSAmJlxuICAgICAgICAgICAgICAgIHR5cGVvZiB2YWx1ZS5lbmQgPT09ICdzdHJpbmcnICYmXG4gICAgICAgICAgICAgICAgdmFsdWUuZW5kLm1hdGNoKC9eXFxkezR9XFwtXFxkezJ9XFwtXFxkezJ9IFxcZHsyfTpcXGR7Mn06XFxkezJ9JC8pID09PSBudWxsICYmXG4gICAgICAgICAgICAgICAgaXNOYU4obmV3IERhdGUodmFsdWUuZW5kKSlcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIGRhdGVFbmQgPSB2YWx1ZS5lbmQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChkYXRlU3RhcnQgPT09IG51bGwgJiYgZGF0ZUVuZCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3ZhbHVlID0gbnVsbDtcblxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLl92YWx1ZSA9IHtcbiAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IGRhdGVTdGFydCxcbiAgICAgICAgICAgICAgICAgICAgZW5kOiBkYXRlRW5kXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fdmFsdWUgPSBudWxsO1xuICAgICAgICB9XG5cblxuICAgICAgICBpZiAodGhpcy5fY29udHJvbCkge1xuICAgICAgICAgICAgbGV0IGlucHV0U3RhcnQgPSB0aGlzLl9jb250cm9sLnBhcmVudCgpLmZpbmQoJ2lucHV0LmRhdGUtc3RhcnQnKTtcbiAgICAgICAgICAgIGxldCBpbnB1dEVuZCAgID0gdGhpcy5fY29udHJvbC5wYXJlbnQoKS5maW5kKCdpbnB1dC5kYXRlLWVuZCcpO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5fdmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpbnB1dFN0YXJ0LnZhbCgnJyk7XG4gICAgICAgICAgICAgICAgaW5wdXRFbmQudmFsKCcnKTtcblxuICAgICAgICAgICAgfSBlbHNlIGlmIChUYWJsZVV0aWxzLmlzT2JqZWN0KHRoaXMuX3ZhbHVlKSkge1xuICAgICAgICAgICAgICAgIGlucHV0U3RhcnQudmFsKHR5cGVvZiB0aGlzLl92YWx1ZS5zdGFydCAhPT0gbnVsbCA/IHRoaXMuX3ZhbHVlLnN0YXJ0IDogJycpO1xuICAgICAgICAgICAgICAgIGlucHV0RW5kLnZhbCh0eXBlb2YgdGhpcy5fdmFsdWUuZW5kICE9PSBudWxsID8gdGhpcy5fdmFsdWUuZW5kIDogJycpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0LfQvdCw0YfQtdC90LjRj1xuICAgICAqIEByZXR1cm5zIHtPYmplY3R8bnVsbH1cbiAgICAgKi9cbiAgICBnZXRWYWx1ZSgpIHtcblxuICAgICAgICBpZiAodGhpcy5fY29udHJvbCkge1xuICAgICAgICAgICAgbGV0IGlucHV0U3RhcnQgPSB0aGlzLl9jb250cm9sLnBhcmVudCgpLmZpbmQoJ2lucHV0LmRhdGUtc3RhcnQnKTtcbiAgICAgICAgICAgIGxldCBpbnB1dEVuZCAgID0gdGhpcy5fY29udHJvbC5wYXJlbnQoKS5maW5kKCdpbnB1dC5kYXRlLWVuZCcpO1xuXG4gICAgICAgICAgICBpZiAoaW5wdXRTdGFydFswXSAmJiBpbnB1dEVuZFswXSkge1xuXG4gICAgICAgICAgICAgICAgbGV0IHZhbHVlU3RhcnQgPSBpbnB1dFN0YXJ0LnZhbCgpO1xuICAgICAgICAgICAgICAgIGxldCB2YWx1ZUVuZCAgID0gaW5wdXRFbmQudmFsKCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgICh0eXBlb2YgdmFsdWVTdGFydCA9PT0gJ3N0cmluZycgJiYgdmFsdWVTdGFydCAhPT0gJycpIHx8XG4gICAgICAgICAgICAgICAgICAgICh0eXBlb2YgdmFsdWVFbmQgPT09ICdzdHJpbmcnICYmIHZhbHVlRW5kICE9PSAnJylcbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0OiB2YWx1ZVN0YXJ0ICE9PSAnJyA/IHZhbHVlU3RhcnQgOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgZW5kOiB2YWx1ZUVuZCAhPT0gJycgPyB2YWx1ZUVuZCA6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICog0KTQuNC70YzRgtGA0LDRhtC40Y8g0LTQsNC90L3Ri9GFXG4gICAgICogQHJldHVybnMge3N0cmluZ30gICAgICAgICAgICAgIGZpZWxkVmFsdWVcbiAgICAgKiBAcmV0dXJucyB7QXJyYXl8c3RyaW5nfG51bWJlcn0gc2VhcmNoVmFsdWVcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICBmaWx0ZXIoZmllbGRWYWx1ZSwgc2VhcmNoVmFsdWUpIHtcblxuICAgICAgICBpZiAoWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2YgZmllbGRWYWx1ZSkgPCAwIHx8XG4gICAgICAgICAgICAhIFRhYmxlVXRpbHMuaXNPYmplY3Qoc2VhcmNoVmFsdWUpIHx8XG4gICAgICAgICAgICAodHlwZW9mIHNlYXJjaFZhbHVlLnN0YXJ0ICE9PSAnc3RyaW5nJyAmJiB0eXBlb2Ygc2VhcmNoVmFsdWUuZW5kICE9PSAnc3RyaW5nJylcbiAgICAgICAgKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuXG4gICAgICAgIGxldCBpc3NldFN0YXJ0ID0gWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2Ygc2VhcmNoVmFsdWUuc3RhcnQpID49IDA7XG4gICAgICAgIGxldCBpc3NldEVuZCAgID0gWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2Ygc2VhcmNoVmFsdWUuZW5kKSA+PSAwO1xuXG4gICAgICAgIGlmIChpc3NldFN0YXJ0ICYmIGlzc2V0RW5kKSB7XG4gICAgICAgICAgICByZXR1cm4gZmllbGRWYWx1ZSA+PSBzZWFyY2hWYWx1ZS5zdGFydCAmJiBmaWVsZFZhbHVlIDw9IHNlYXJjaFZhbHVlLmVuZDtcblxuICAgICAgICB9IGVsc2UgaWYgKGlzc2V0U3RhcnQpIHtcbiAgICAgICAgICAgIHJldHVybiBmaWVsZFZhbHVlID49IHNlYXJjaFZhbHVlLnN0YXJ0O1xuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZmllbGRWYWx1ZSA8PSBzZWFyY2hWYWx1ZS5lbmQ7XG4gICAgICAgIH1cbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqINCk0L7RgNC80LjRgNC+0LLQsNC90LjQtSDQutC+0L3RgtC10L3RgtCwXG4gICAgICogQHJldHVybnMge3N0cmluZ31cbiAgICAgKi9cbiAgICByZW5kZXIoKSB7XG5cbiAgICAgICAgaWYgKCAhIFRhYmxlVXRpbHMuaXNPYmplY3QodGhpcy5fb3B0aW9ucy5hdHRyKSkge1xuICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy5hdHRyID0ge307XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnd2lkdGgnKSAmJlxuICAgICAgICAgICAgVGFibGVVdGlscy5pc051bWVyaWModGhpcy5fb3B0aW9ucy53aWR0aClcbiAgICAgICAgKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy5hdHRyLmhhc093blByb3BlcnR5KCdzdHlsZScpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy5hdHRyWydzdHlsZSddICs9ICc7d2lkdGg6JyArIHRoaXMuX29wdGlvbnMud2lkdGggKyAncHgnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9vcHRpb25zLmF0dHJbJ3N0eWxlJ10gPSAnd2lkdGg6JyArIHRoaXMuX29wdGlvbnMud2lkdGggKyAncHgnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMuYXR0ci5oYXNPd25Qcm9wZXJ0eSgndHlwZScpKSB7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5fb3B0aW9ucy5hdHRyLnR5cGU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy5hdHRyLmhhc093blByb3BlcnR5KCd2YWx1ZScpKSB7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5fb3B0aW9ucy5hdHRyLnZhbHVlO1xuICAgICAgICB9XG5cblxuICAgICAgICBsZXQgc3RhcnRBdHRyID0gW107XG4gICAgICAgIGxldCBzdGFydEVuZCAgPSBbXTtcbiAgICAgICAgbGV0IHRhYmxlICAgICA9IHRoaXMuX3RhYmxlO1xuXG5cbiAgICAgICAgJC5lYWNoKHRoaXMuX29wdGlvbnMuYXR0ciwgZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAoWyduYW1lJywgJ3ZhbHVlJywgJ2NsYXNzJ10uaW5kZXhPZihuYW1lKSA+PSAwIHx8XG4gICAgICAgICAgICAgICAgWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2YgdmFsdWUpIDwgMFxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBzdGFydEF0dHIucHVzaChuYW1lICsgJz1cIicgKyB2YWx1ZSArICdcIicpO1xuICAgICAgICAgICAgc3RhcnRFbmQucHVzaChuYW1lICsgJz1cIicgKyB2YWx1ZSArICdcIicpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy5hdHRyLmhhc093blByb3BlcnR5KCdjbGFzcycpICYmXG4gICAgICAgICAgICBbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiB0aGlzLl9vcHRpb25zLmF0dHIuY2xhc3MpID49IDBcbiAgICAgICAgKSB7XG4gICAgICAgICAgICBzdGFydEF0dHIucHVzaCgnY2xhc3M9XCInICsgdGhpcy5fb3B0aW9ucy5hdHRyLmNsYXNzICsgJyBkYXRlLXN0YXJ0XCInKTtcbiAgICAgICAgICAgIHN0YXJ0RW5kLnB1c2goJ2NsYXNzPVwiJyArIHRoaXMuX29wdGlvbnMuYXR0ci5jbGFzcyArICcgZGF0ZS1lbmRcIicpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3RhcnRBdHRyLnB1c2goJ2NsYXNzPVwiZGF0ZS1zdGFydFwiJyk7XG4gICAgICAgICAgICBzdGFydEVuZC5wdXNoKCdjbGFzcz1cImRhdGUtZW5kXCInKTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgc3RhcnRBdHRyLnB1c2goJ3ZhbHVlPVwiJyArICh0aGlzLl92YWx1ZSA/IHRoaXMuX3ZhbHVlLnN0YXJ0IDogJycpICsgJ1wiJyk7XG4gICAgICAgIHN0YXJ0RW5kLnB1c2goJ3ZhbHVlPVwiJyArICh0aGlzLl92YWx1ZSA/IHRoaXMuX3ZhbHVlLmVuZCA6ICcnKSArICdcIicpO1xuXG5cbiAgICAgICAgbGV0IGNvbnRyb2wgPSAkKFRhYmxlVXRpbHMucmVuZGVyKFRhYmxlVHBsWydzZWFyY2gvZGF0ZXRpbWVfcmFuZ2UuaHRtbCddLCB7XG4gICAgICAgICAgICBzdGFydEF0dHI6IHN0YXJ0QXR0ci5sZW5ndGggPiAwID8gKCcgJyArIHN0YXJ0QXR0ci5qb2luKCcgJykpIDogJycsXG4gICAgICAgICAgICBlbmRBdHRyOiBzdGFydEVuZC5sZW5ndGggPiAwID8gKCcgJyArIHN0YXJ0RW5kLmpvaW4oJyAnKSkgOiAnJyxcbiAgICAgICAgfSkpO1xuXG4gICAgICAgICQoJ2lucHV0LmRhdGUtc3RhcnQnLCBjb250cm9sKS5jaGFuZ2UoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBsZXQgZGF0ZUVuZCA9ICQoJ2lucHV0LmRhdGUtZW5kJywgY29udHJvbCkuYXR0cignbWluJywgJCh0aGlzKS52YWwoKSk7XG5cbiAgICAgICAgICAgIGlmIChcInNob3dQaWNrZXJcIiBpbiBIVE1MSW5wdXRFbGVtZW50LnByb3RvdHlwZSkge1xuICAgICAgICAgICAgICAgICQoZGF0ZUVuZClbMF0uc2hvd1BpY2tlcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgJCgnaW5wdXQuZGF0ZS1lbmQnLCBjb250cm9sKS5jaGFuZ2UoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAkKCdpbnB1dC5kYXRlLXN0YXJ0JywgY29udHJvbCkuYXR0cignbWF4JywgJCh0aGlzKS52YWwoKSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuX2NvbnRyb2wgPSBjb250cm9sO1xuXG4gICAgICAgIHJldHVybiB0aGlzLl9jb250cm9sO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgU2VhcmNoRGF0ZXRpbWVSYW5nZTsiLCJcbmltcG9ydCBUYWJsZVRwbCAgIGZyb20gXCIuLi90YWJsZS50cGxcIjtcbmltcG9ydCBUYWJsZVV0aWxzIGZyb20gXCIuLi90YWJsZS51dGlsc1wiO1xuaW1wb3J0IFNlYXJjaCAgICAgZnJvbSBcIi4uL2Fic3RyYWN0L1NlYXJjaFwiO1xuXG5jbGFzcyBTZWFyY2hDaGVja2JveCBleHRlbmRzIFNlYXJjaCB7XG5cbiAgICAvKipcbiAgICAgKiDQmNC90LjRhtC40LDQu9C40LfQsNGG0LjRj1xuICAgICAqIEBwYXJhbSB7VGFibGVJbnN0YW5jZX0gdGFibGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gICAgICAgICAgICAgIG9wdGlvbnNcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcih0YWJsZSwgb3B0aW9ucykge1xuXG4gICAgICAgIG9wdGlvbnMgPSAkLmV4dGVuZCh0cnVlLCB7XG4gICAgICAgICAgICBpZDogbnVsbCxcbiAgICAgICAgICAgIHR5cGU6ICdjaGVja2JveCcsXG4gICAgICAgICAgICBmaWVsZDogbnVsbCxcbiAgICAgICAgICAgIGxhYmVsOiBudWxsLFxuICAgICAgICAgICAgdmFsdWU6IG51bGwsXG4gICAgICAgICAgICBvcHRpb25zOiBbXVxuICAgICAgICB9LCBvcHRpb25zKTtcblxuICAgICAgICBzdXBlcih0YWJsZSwgb3B0aW9ucyk7XG5cblxuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy52YWx1ZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5zZXRWYWx1ZSh0aGlzLl9vcHRpb25zLnZhbHVlKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICog0KPRgdGC0LDQvdC+0LLQutCwINC30L3QsNGH0LXQvdC40Y9cbiAgICAgKiBAcGFyYW0ge0FycmF5fG51bGx9IHZhbHVlXG4gICAgICovXG4gICAgc2V0VmFsdWUodmFsdWUpIHtcblxuICAgICAgICBpZiAoWydzdHJpbmcnLCAnbnVtYmVyJywgJ29iamVjdCddLmluZGV4T2YodHlwZW9mIHZhbHVlKSA8IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICBsZXQgaXRlbXMgPSBbXTtcblxuICAgICAgICAgICAgICAgIHZhbHVlLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2YgaXRlbSkgPj0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXMucHVzaChpdGVtKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLl92YWx1ZSA9IGl0ZW1zO1xuXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuX3ZhbHVlID0gbnVsbDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fdmFsdWUgPSBbIHZhbHVlIF07XG4gICAgICAgIH1cblxuXG4gICAgICAgIGlmICh0aGlzLl9jb250cm9sKSB7XG4gICAgICAgICAgICAkKCdpbnB1dDpjaGVja2VkJywgdGhpcy5fY29udHJvbCkucHJvcCgnY2hlY2tlZCcsIGZhbHNlKTtcblxuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodGhpcy5fdmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgJC5lYWNoKHRoaXMuX3ZhbHVlLCBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAkKCdpbnB1dFt2YWx1ZT1cIicgKyB2YWx1ZSArICdcIl0nLCB0aGlzLl9jb250cm9sKS5wcm9wKCdjaGVja2VkJywgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC30L3QsNGH0LXQvdC40Y9cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl8bnVsbH1cbiAgICAgKi9cbiAgICBnZXRWYWx1ZSgpIHtcblxuICAgICAgICBpZiAodGhpcy5fY29udHJvbCkge1xuICAgICAgICAgICAgbGV0IGlucHV0cyA9ICQoJ2lucHV0OmNoZWNrZWQnLCB0aGlzLl9jb250cm9sKTtcbiAgICAgICAgICAgIGxldCBpdGVtcyAgPSBbXTtcblxuICAgICAgICAgICAgJC5lYWNoKGlucHV0cywgZnVuY3Rpb24gKGtleSwgaW5wdXQpIHtcbiAgICAgICAgICAgICAgICBsZXQgdmFsdWUgPSAkKGlucHV0KS5hdHRyKCd2YWx1ZScpO1xuXG4gICAgICAgICAgICAgICAgaWYgKFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIHZhbHVlKSA+PSAwICYmXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlICE9PSAnJ1xuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICBpdGVtcy5wdXNoKHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcmV0dXJuIGl0ZW1zLmxlbmd0aCA+IDAgPyBpdGVtcyA6IG51bGw7XG5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl92YWx1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICog0KTQuNC70YzRgtGA0LDRhtC40Y8g0LTQsNC90L3Ri9GFXG4gICAgICogQHJldHVybnMge3N0cmluZ30gZmllbGRWYWx1ZVxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gIHNlYXJjaFZhbHVlXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAgICovXG4gICAgZmlsdGVyKGZpZWxkVmFsdWUsIHNlYXJjaFZhbHVlKSB7XG5cbiAgICAgICAgaWYgKFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIGZpZWxkVmFsdWUpIDwgMCB8fFxuICAgICAgICAgICAgISBBcnJheS5pc0FycmF5KHNlYXJjaFZhbHVlKVxuICAgICAgICApIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzZWFyY2hWYWx1ZS5pbmRleE9mKGZpZWxkVmFsdWUpID49IDA7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiDQpNC+0YDQvNC40YDQvtCy0LDQvdC40LUg0LrQvtC90YLQtdC90YLQsFxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAgICovXG4gICAgcmVuZGVyKCkge1xuXG4gICAgICAgIGxldCB0aGF0ICAgID0gdGhpcztcbiAgICAgICAgbGV0IG9wdGlvbnMgPSBbXTtcblxuICAgICAgICAkLmVhY2godGhpcy5fb3B0aW9ucy5vcHRpb25zLCBmdW5jdGlvbiAoa2V5LCBvcHRpb24pIHtcblxuICAgICAgICAgICAgaWYgKFsnc3RyaW5nJywgJ251bWVyaWMnXS5pbmRleE9mKHR5cGVvZiBvcHRpb24pID49IDApIHtcbiAgICAgICAgICAgICAgICBsZXQgY2hlY2tlZCA9IEFycmF5LmlzQXJyYXkodGhhdC5fdmFsdWUpID8gdGhhdC5fdmFsdWUuaW5kZXhPZihrZXkpID49IDAgOiBmYWxzZTtcblxuICAgICAgICAgICAgICAgIG9wdGlvbnMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIHRleHQ6ICAgIG9wdGlvbixcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICAga2V5LFxuICAgICAgICAgICAgICAgICAgICBjaGVja2VkOiBjaGVja2VkLFxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmICggISBUYWJsZVV0aWxzLmlzT2JqZWN0KG9wdGlvbikgfHxcbiAgICAgICAgICAgICAgICAgICAgISBvcHRpb24uaGFzT3duUHJvcGVydHkoJ3ZhbHVlJykgfHxcbiAgICAgICAgICAgICAgICAgICAgWydzdHJpbmcnLCAnbnVtZXJpYyddLmluZGV4T2YodHlwZW9mIG9wdGlvbi52YWx1ZSkgPT09IC0xXG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBsZXQgY2hlY2tlZCA9IEFycmF5LmlzQXJyYXkodGhhdC5fdmFsdWUpID8gdGhhdC5fdmFsdWUuaW5kZXhPZihvcHRpb24udmFsdWUpID49IDAgOiBmYWxzZTtcbiAgICAgICAgICAgICAgICBsZXQgdGV4dCAgICA9IG9wdGlvbi5oYXNPd25Qcm9wZXJ0eSgndGV4dCcpXG4gICAgICAgICAgICAgICAgICAgID8gb3B0aW9uLnRleHRcbiAgICAgICAgICAgICAgICAgICAgOiBvcHRpb24udmFsdWU7XG5cbiAgICAgICAgICAgICAgICBvcHRpb25zLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICB0ZXh0OiAgICB0ZXh0LFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogICBvcHRpb24udmFsdWUsXG4gICAgICAgICAgICAgICAgICAgIGNoZWNrZWQ6IGNoZWNrZWQsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuX2NvbnRyb2wgPSAkKFRhYmxlVXRpbHMucmVuZGVyKFRhYmxlVHBsWydzZWFyY2gvY2hlY2tib3guaHRtbCddLCB7XG4gICAgICAgICAgICBvcHRpb25zOiBvcHRpb25zLFxuICAgICAgICB9KSk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbnRyb2w7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBTZWFyY2hDaGVja2JveDsiLCJcbmltcG9ydCBUYWJsZVRwbCAgIGZyb20gXCIuLi90YWJsZS50cGxcIjtcbmltcG9ydCBUYWJsZVV0aWxzIGZyb20gXCIuLi90YWJsZS51dGlsc1wiO1xuaW1wb3J0IFNlYXJjaCAgICAgICAgICAgZnJvbSBcIi4uL2Fic3RyYWN0L1NlYXJjaFwiO1xuXG5jbGFzcyBTZWFyY2hDaGVja2JveEJ0biBleHRlbmRzIFNlYXJjaCB7XG5cbiAgICAvKipcbiAgICAgKiDQmNC90LjRhtC40LDQu9C40LfQsNGG0LjRj1xuICAgICAqIEBwYXJhbSB7VGFibGVJbnN0YW5jZX0gdGFibGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gICAgICAgICAgICAgIG9wdGlvbnNcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcih0YWJsZSwgb3B0aW9ucykge1xuXG4gICAgICAgIG9wdGlvbnMgPSAkLmV4dGVuZCh0cnVlLCB7XG4gICAgICAgICAgICBpZDogbnVsbCxcbiAgICAgICAgICAgIHR5cGU6ICdjaGVja2JveEJ0bicsXG4gICAgICAgICAgICBmaWVsZDogbnVsbCxcbiAgICAgICAgICAgIGxhYmVsOiBudWxsLFxuICAgICAgICAgICAgb3B0aW9uc0NsYXNzOiAnYnRuIGJ0bi1vdXRsaW5lLXNlY29uZGFyeScsXG4gICAgICAgICAgICB2YWx1ZTogbnVsbCxcbiAgICAgICAgICAgIG9wdGlvbnM6IFtdXG4gICAgICAgIH0sIG9wdGlvbnMpO1xuXG4gICAgICAgIHN1cGVyKHRhYmxlLCBvcHRpb25zKTtcblxuXG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLnZhbHVlICE9PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLnNldFZhbHVlKHRoaXMuX29wdGlvbnMudmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiDQo9GB0YLQsNC90L7QstC60LAg0LfQvdCw0YfQtdC90LjRj1xuICAgICAqIEBwYXJhbSB7QXJyYXl8bnVsbH0gdmFsdWVcbiAgICAgKi9cbiAgICBzZXRWYWx1ZSh2YWx1ZSkge1xuXG4gICAgICAgIGlmIChbJ3N0cmluZycsICdudW1iZXInLCAnb2JqZWN0J10uaW5kZXhPZih0eXBlb2YgdmFsdWUpIDwgMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIGxldCBpdGVtcyA9IFtdO1xuXG4gICAgICAgICAgICAgICAgdmFsdWUubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiBpdGVtKSA+PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtcy5wdXNoKGl0ZW0pXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHRoaXMuX3ZhbHVlID0gaXRlbXM7XG5cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdmFsdWUgPSBudWxsO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl92YWx1ZSA9IFsgdmFsdWUgXTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgaWYgKHRoaXMuX2NvbnRyb2wpIHtcbiAgICAgICAgICAgICQoJ2lucHV0OmNoZWNrZWQnLCB0aGlzLl9jb250cm9sKS5wcm9wKCdjaGVja2VkJywgZmFsc2UpO1xuXG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh0aGlzLl92YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl92YWx1ZS5tYXAoZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICQoJ2lucHV0W3ZhbHVlPVwiJyArIHZhbHVlICsgJ1wiXScsIHRoaXMuX2NvbnRyb2wpLnByb3AoJ2NoZWNrZWQnLCB0cnVlKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0LfQvdCw0YfQtdC90LjRj1xuICAgICAqIEByZXR1cm5zIHtBcnJheXxudWxsfVxuICAgICAqL1xuICAgIGdldFZhbHVlKCkge1xuXG4gICAgICAgIGlmICh0aGlzLl9jb250cm9sKSB7XG4gICAgICAgICAgICBsZXQgaW5wdXRzID0gJCgnaW5wdXQ6Y2hlY2tlZCcsIHRoaXMuX2NvbnRyb2wpO1xuICAgICAgICAgICAgbGV0IGl0ZW1zICA9IFtdO1xuXG4gICAgICAgICAgICAkLmVhY2goaW5wdXRzLCBmdW5jdGlvbiAoa2V5LCBpbnB1dCkge1xuICAgICAgICAgICAgICAgIGxldCB2YWx1ZSA9ICQoaW5wdXQpLmF0dHIoJ3ZhbHVlJyk7XG5cbiAgICAgICAgICAgICAgICBpZiAoKFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIHZhbHVlKSA+PSAwKSAmJlxuICAgICAgICAgICAgICAgICAgICB2YWx1ZSAhPT0gJydcbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgaXRlbXMucHVzaCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHJldHVybiBpdGVtcy5sZW5ndGggPiAwID8gaXRlbXMgOiBudWxsO1xuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fdmFsdWU7XG4gICAgICAgIH1cbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqINCk0LjQu9GM0YLRgNCw0YbQuNGPINC00LDQvdC90YvRhVxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IGZpZWxkVmFsdWVcbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9ICBzZWFyY2hWYWx1ZVxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgICAqL1xuICAgIGZpbHRlcihmaWVsZFZhbHVlLCBzZWFyY2hWYWx1ZSkge1xuXG4gICAgICAgIGlmIChbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiBmaWVsZFZhbHVlKSA8IDAgfHxcbiAgICAgICAgICAgICEgQXJyYXkuaXNBcnJheShzZWFyY2hWYWx1ZSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gc2VhcmNoVmFsdWUuaW5kZXhPZihmaWVsZFZhbHVlKSA+PSAwO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICog0KTQvtGA0LzQuNGA0L7QstCw0L3QuNC1INC60L7QvdGC0LXQvdGC0LBcbiAgICAgKiBAcmV0dXJucyB7alF1ZXJ5fVxuICAgICAqL1xuICAgIHJlbmRlcigpIHtcblxuICAgICAgICBsZXQgdGhhdCAgICA9IHRoaXM7XG4gICAgICAgIGxldCBvcHRpb25zID0gW107XG5cbiAgICAgICAgJC5lYWNoKHRoaXMuX29wdGlvbnMub3B0aW9ucywgZnVuY3Rpb24gKGtleSwgb3B0aW9uKSB7XG5cbiAgICAgICAgICAgIGlmIChbJ3N0cmluZycsICdudW1lcmljJ10uaW5kZXhPZih0eXBlb2Ygb3B0aW9uKSA+PSAwKSB7XG4gICAgICAgICAgICAgICAgbGV0IGNoZWNrZWQgPSBBcnJheS5pc0FycmF5KHRoYXQuX3ZhbHVlKSA/IHRoYXQuX3ZhbHVlLmluZGV4T2Yoa2V5KSA+PSAwIDogZmFsc2U7XG5cbiAgICAgICAgICAgICAgICBvcHRpb25zLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICB0ZXh0OiAgICBvcHRpb24sXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiAgIGtleSxcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tlZDogY2hlY2tlZCxcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9uc0NsYXNzOiB0aGF0Ll9vcHRpb25zLm9wdGlvbnNDbGFzcyxcbiAgICAgICAgICAgICAgICAgICAgaGFzaDogVGFibGVVdGlscy5oYXNoQ29kZSgpXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKCAhIFRhYmxlVXRpbHMuaXNPYmplY3Qob3B0aW9uKSB8fFxuICAgICAgICAgICAgICAgICAgICAhIG9wdGlvbi5oYXNPd25Qcm9wZXJ0eSgndmFsdWUnKSB8fFxuICAgICAgICAgICAgICAgICAgICBbJ3N0cmluZycsICdudW1lcmljJ10uaW5kZXhPZih0eXBlb2Ygb3B0aW9uLnZhbHVlKSA9PT0gLTFcbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGxldCBjaGVja2VkID0gQXJyYXkuaXNBcnJheSh0aGF0Ll92YWx1ZSkgPyB0aGF0Ll92YWx1ZS5pbmRleE9mKG9wdGlvbi52YWx1ZSkgPj0gMCA6IGZhbHNlO1xuICAgICAgICAgICAgICAgIGxldCB0ZXh0ICAgID0gb3B0aW9uLmhhc093blByb3BlcnR5KCd0ZXh0JylcbiAgICAgICAgICAgICAgICAgICAgPyBvcHRpb24udGV4dFxuICAgICAgICAgICAgICAgICAgICA6IG9wdGlvbi52YWx1ZTtcblxuICAgICAgICAgICAgICAgIG9wdGlvbnMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIHRleHQ6ICAgIHRleHQsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiAgIG9wdGlvbi52YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tlZDogY2hlY2tlZCxcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9uc0NsYXNzOiB0aGF0Ll9vcHRpb25zLm9wdGlvbnNDbGFzcyxcbiAgICAgICAgICAgICAgICAgICAgaGFzaDogVGFibGVVdGlscy5oYXNoQ29kZSgpLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLl9jb250cm9sID0gJChUYWJsZVV0aWxzLnJlbmRlcihUYWJsZVRwbFsnc2VhcmNoL2NoZWNrYm94LWJ0bi5odG1sJ10sIHtcbiAgICAgICAgICAgIG9wdGlvbnM6IG9wdGlvbnNcbiAgICAgICAgfSkpO1xuXG4gICAgICAgIHJldHVybiB0aGlzLl9jb250cm9sO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgU2VhcmNoQ2hlY2tib3hCdG47IiwiXG5pbXBvcnQgVGFibGVUcGwgICBmcm9tIFwiLi4vdGFibGUudHBsXCI7XG5pbXBvcnQgVGFibGVVdGlscyBmcm9tIFwiLi4vdGFibGUudXRpbHNcIjtcbmltcG9ydCBTZWFyY2ggICAgICAgICAgIGZyb20gXCIuLi9hYnN0cmFjdC9TZWFyY2hcIjtcblxuY2xhc3MgU2VhcmNoUmFkaW8gZXh0ZW5kcyBTZWFyY2gge1xuXG4gICAgLyoqXG4gICAgICog0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y9cbiAgICAgKiBAcGFyYW0ge1RhYmxlSW5zdGFuY2V9IHRhYmxlXG4gICAgICogQHBhcmFtIHtPYmplY3R9ICAgICAgICAgICAgICBvcHRpb25zXG4gICAgICovXG4gICAgY29uc3RydWN0b3IodGFibGUsIG9wdGlvbnMpIHtcblxuICAgICAgICBvcHRpb25zID0gJC5leHRlbmQodHJ1ZSwge1xuICAgICAgICAgICAgaWQ6IG51bGwsXG4gICAgICAgICAgICB0eXBlOiAncmFkaW8nLFxuICAgICAgICAgICAgZmllbGQ6IG51bGwsXG4gICAgICAgICAgICBsYWJlbDogbnVsbCxcbiAgICAgICAgICAgIHZhbHVlOiBudWxsLFxuICAgICAgICAgICAgb3B0aW9uczogW10sXG4gICAgICAgIH0sIG9wdGlvbnMpO1xuXG4gICAgICAgIHN1cGVyKHRhYmxlLCBvcHRpb25zKTtcblxuXG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLnZhbHVlICE9PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLnNldFZhbHVlKHRoaXMuX29wdGlvbnMudmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiDQo9GB0YLQsNC90L7QstC60LAg0LfQvdCw0YfQtdC90LjRj1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICAgICAqL1xuICAgIHNldFZhbHVlKHZhbHVlKSB7XG5cbiAgICAgICAgaWYgKHZhbHVlICE9PSBudWxsICYmXG4gICAgICAgICAgICB0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnICYmXG4gICAgICAgICAgICB0eXBlb2YgdmFsdWUgIT09ICdudW1iZXInXG4gICAgICAgICkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fdmFsdWUgPSB2YWx1ZTtcblxuXG4gICAgICAgIGlmICh0aGlzLl9jb250cm9sKSB7XG4gICAgICAgICAgICAkKCdpbnB1dCcsICB0aGlzLl9jb250cm9sKS5wcm9wKCdjaGVja2VkJywgZmFsc2UpO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5fdmFsdWUgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAkKCdpbnB1dFt2YWx1ZT1cIicgKyB0aGlzLl92YWx1ZSArICdcIl0nLCAgdGhpcy5fY29udHJvbCkucHJvcCgnY2hlY2tlZCcsIHRydWUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAkKCdpbnB1dC5jb3JldWktdGFibGVfX2FsbCcsICB0aGlzLl9jb250cm9sKS5wcm9wKCdjaGVja2VkJywgdHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSDQt9C90LDRh9C10L3QuNGPXG4gICAgICogQHJldHVybnMge3N0cmluZ3xudWxsfVxuICAgICAqL1xuICAgIGdldFZhbHVlKCkge1xuXG4gICAgICAgIGlmICh0aGlzLl9jb250cm9sKSB7XG4gICAgICAgICAgICBsZXQgaW5wdXQgPSAkKCdpbnB1dDpjaGVja2VkJywgdGhpcy5fY29udHJvbCk7XG5cbiAgICAgICAgICAgIGlmIChpbnB1dCAmJiBpbnB1dFswXSkge1xuICAgICAgICAgICAgICAgIGxldCB2YWx1ZSA9IGlucHV0LnZhbCgpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlID09PSAnJ1xuICAgICAgICAgICAgICAgICAgICA/IG51bGxcbiAgICAgICAgICAgICAgICAgICAgOiB2YWx1ZVxuXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fdmFsdWU7XG4gICAgICAgIH1cbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqINCk0LjQu9GM0YLRgNCw0YbQuNGPINC00LDQvdC90YvRhVxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9ICAgICAgICAgICAgICBmaWVsZFZhbHVlXG4gICAgICogQHJldHVybnMge0FycmF5fHN0cmluZ3xudW1iZXJ9IHNlYXJjaFZhbHVlXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAgICovXG4gICAgZmlsdGVyKGZpZWxkVmFsdWUsIHNlYXJjaFZhbHVlKSB7XG5cbiAgICAgICAgaWYgKFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIGZpZWxkVmFsdWUpIDwgMCB8fFxuICAgICAgICAgICAgWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2Ygc2VhcmNoVmFsdWUpIDwgMFxuICAgICAgICApIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmaWVsZFZhbHVlLnRvU3RyaW5nKCkudG9Mb3dlckNhc2UoKSA9PT0gc2VhcmNoVmFsdWUudG9TdHJpbmcoKS50b0xvd2VyQ2FzZSgpO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICog0KTQvtGA0LzQuNGA0L7QstCw0L3QuNC1INC60L7QvdGC0LXQvdGC0LBcbiAgICAgKiBAcmV0dXJucyB7alF1ZXJ5fVxuICAgICAqL1xuICAgIHJlbmRlcigpIHtcblxuICAgICAgICBsZXQgdGhhdCAgICAgICA9IHRoaXM7XG4gICAgICAgIGxldCBjaGVja2VkQWxsID0gdHJ1ZTtcbiAgICAgICAgbGV0IG9wdGlvbnMgICAgPSBbXTtcblxuICAgICAgICAkLmVhY2godGhpcy5fb3B0aW9ucy5vcHRpb25zLCBmdW5jdGlvbiAoa2V5LCBvcHRpb24pIHtcblxuICAgICAgICAgICAgaWYgKFsnc3RyaW5nJywgJ251bWVyaWMnXS5pbmRleE9mKHR5cGVvZiBvcHRpb24pID49IDApIHtcbiAgICAgICAgICAgICAgICBsZXQgY2hlY2tlZCA9IGtleSA9PSB0aGF0Ll92YWx1ZTtcblxuICAgICAgICAgICAgICAgIGlmIChjaGVja2VkKSB7XG4gICAgICAgICAgICAgICAgICAgIGNoZWNrZWRBbGwgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBvcHRpb25zLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICB0ZXh0OiAgICBvcHRpb24sXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiAgIGtleSxcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tlZDogY2hlY2tlZCxcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoICEgVGFibGVVdGlscy5pc09iamVjdChvcHRpb24pIHx8XG4gICAgICAgICAgICAgICAgICAgICEgb3B0aW9uLmhhc093blByb3BlcnR5KCd2YWx1ZScpIHx8XG4gICAgICAgICAgICAgICAgICAgIFsnc3RyaW5nJywgJ251bWVyaWMnXS5pbmRleE9mKHR5cGVvZiBvcHRpb24udmFsdWUpID09PSAtMVxuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgbGV0IGNoZWNrZWQgPSBvcHRpb24udmFsdWUgPT0gdGhhdC5fdmFsdWU7XG4gICAgICAgICAgICAgICAgbGV0IHRleHQgICAgPSBvcHRpb24uaGFzT3duUHJvcGVydHkoJ3RleHQnKVxuICAgICAgICAgICAgICAgICAgICA/IG9wdGlvbi50ZXh0XG4gICAgICAgICAgICAgICAgICAgIDogb3B0aW9uLnZhbHVlO1xuXG4gICAgICAgICAgICAgICAgaWYgKGNoZWNrZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tlZEFsbCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIG9wdGlvbnMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIHRleHQ6ICAgIHRleHQsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiAgIG9wdGlvbi52YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tlZDogY2hlY2tlZCxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5fY29udHJvbCA9ICQoVGFibGVVdGlscy5yZW5kZXIoVGFibGVUcGxbJ3NlYXJjaC9yYWRpby5odG1sJ10sIHtcbiAgICAgICAgICAgIG9wdGlvbnM6IG9wdGlvbnMsXG4gICAgICAgICAgICBjaGVja2VkQWxsOiBjaGVja2VkQWxsLFxuICAgICAgICAgICAgZmllbGQ6IFRhYmxlVXRpbHMuaGFzaENvZGUoKSxcbiAgICAgICAgICAgIGxhbmc6IHRoaXMuX3RhYmxlLmdldExhbmcoKVxuICAgICAgICB9KSk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbnRyb2w7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBTZWFyY2hSYWRpbzsiLCJcbmltcG9ydCBUYWJsZVRwbCAgIGZyb20gXCIuLi90YWJsZS50cGxcIjtcbmltcG9ydCBUYWJsZVV0aWxzIGZyb20gXCIuLi90YWJsZS51dGlsc1wiO1xuaW1wb3J0IFNlYXJjaCAgICAgICAgICAgZnJvbSBcIi4uL2Fic3RyYWN0L1NlYXJjaFwiO1xuXG5jbGFzcyBTZWFyY2hSYWRpb0J0biBleHRlbmRzIFNlYXJjaCB7XG5cbiAgICAvKipcbiAgICAgKiDQmNC90LjRhtC40LDQu9C40LfQsNGG0LjRj1xuICAgICAqIEBwYXJhbSB7VGFibGVJbnN0YW5jZX0gdGFibGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gICAgICAgICAgICAgIG9wdGlvbnNcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcih0YWJsZSwgb3B0aW9ucykge1xuXG4gICAgICAgIG9wdGlvbnMgPSAkLmV4dGVuZCh0cnVlLCB7XG4gICAgICAgICAgICBpZDogbnVsbCxcbiAgICAgICAgICAgIHR5cGU6ICdyYWRpb0J0bicsXG4gICAgICAgICAgICBmaWVsZDogbnVsbCxcbiAgICAgICAgICAgIG9wdGlvbnNDbGFzczogJ2J0biBidG4tb3V0bGluZS1zZWNvbmRhcnknLFxuICAgICAgICAgICAgbGFiZWw6IG51bGwsXG4gICAgICAgICAgICB2YWx1ZTogbnVsbCxcbiAgICAgICAgICAgIG9wdGlvbnM6IFtdLFxuICAgICAgICB9LCBvcHRpb25zKTtcblxuICAgICAgICBzdXBlcih0YWJsZSwgb3B0aW9ucyk7XG5cblxuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy52YWx1ZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5zZXRWYWx1ZSh0aGlzLl9vcHRpb25zLnZhbHVlKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICog0KPRgdGC0LDQvdC+0LLQutCwINC30L3QsNGH0LXQvdC40Y9cbiAgICAgKiBAcGFyYW0ge3N0cmluZ3xudW1iZXJ9IHZhbHVlXG4gICAgICovXG4gICAgc2V0VmFsdWUodmFsdWUpIHtcblxuICAgICAgICBpZiAodmFsdWUgIT09IG51bGwgJiZcbiAgICAgICAgICAgIHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycgJiZcbiAgICAgICAgICAgIHR5cGVvZiB2YWx1ZSAhPT0gJ251bWJlcidcbiAgICAgICAgKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl92YWx1ZSA9IHZhbHVlO1xuXG5cbiAgICAgICAgaWYgKHRoaXMuX2NvbnRyb2wpIHtcbiAgICAgICAgICAgICQoJ2lucHV0JywgdGhpcy5fY29udHJvbCkucHJvcCgnY2hlY2tlZCcsIGZhbHNlKTtcblxuICAgICAgICAgICAgaWYgKHRoaXMuX3ZhbHVlICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgJCgnaW5wdXRbdmFsdWU9XCInICsgdGhpcy5fdmFsdWUgKyAnXCJdJywgdGhpcy5fY29udHJvbCkucHJvcCgnY2hlY2tlZCcsIHRydWUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAkKCdpbnB1dC5jb3JldWktdGFibGVfX2FsbCcsIHRoaXMuX2NvbnRyb2wpLnByb3AoJ2NoZWNrZWQnLCB0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC30L3QsNGH0LXQvdC40Y9cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfG51bGx9XG4gICAgICovXG4gICAgZ2V0VmFsdWUoKSB7XG5cbiAgICAgICAgaWYgKHRoaXMuX2NvbnRyb2wpIHtcbiAgICAgICAgICAgIGxldCBpbnB1dCA9ICQoJ2lucHV0OmNoZWNrZWQnLCB0aGlzLl9jb250cm9sKTtcblxuICAgICAgICAgICAgaWYgKGlucHV0ICYmIGlucHV0WzBdKSB7XG4gICAgICAgICAgICAgICAgbGV0IHZhbHVlID0gaW5wdXQudmFsKCk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWUgPT09ICcnXG4gICAgICAgICAgICAgICAgICAgID8gbnVsbFxuICAgICAgICAgICAgICAgICAgICA6IHZhbHVlXG5cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl92YWx1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICog0KTQuNC70YzRgtGA0LDRhtC40Y8g0LTQsNC90L3Ri9GFXG4gICAgICogQHJldHVybnMge3N0cmluZ30gICAgICAgICAgICAgIGZpZWxkVmFsdWVcbiAgICAgKiBAcmV0dXJucyB7QXJyYXl8c3RyaW5nfG51bWJlcn0gc2VhcmNoVmFsdWVcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICBmaWx0ZXIoZmllbGRWYWx1ZSwgc2VhcmNoVmFsdWUpIHtcblxuICAgICAgICBpZiAoWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2YgZmllbGRWYWx1ZSkgPCAwIHx8XG4gICAgICAgICAgICBbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiBzZWFyY2hWYWx1ZSkgPCAwXG4gICAgICAgICkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZpZWxkVmFsdWUudG9TdHJpbmcoKS50b0xvd2VyQ2FzZSgpID09PSBzZWFyY2hWYWx1ZS50b1N0cmluZygpLnRvTG93ZXJDYXNlKCk7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiDQpNC+0YDQvNC40YDQvtCy0LDQvdC40LUg0LrQvtC90YLQtdC90YLQsFxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAgICovXG4gICAgcmVuZGVyKCkge1xuXG4gICAgICAgIGxldCB0aGF0ICAgICAgID0gdGhpcztcbiAgICAgICAgbGV0IGNoZWNrZWRBbGwgPSB0cnVlO1xuICAgICAgICBsZXQgb3B0aW9ucyAgICA9IFtdO1xuXG4gICAgICAgICQuZWFjaCh0aGlzLl9vcHRpb25zLm9wdGlvbnMsIGZ1bmN0aW9uIChrZXksIG9wdGlvbikge1xuXG4gICAgICAgICAgICBpZiAoWydzdHJpbmcnLCAnbnVtZXJpYyddLmluZGV4T2YodHlwZW9mIG9wdGlvbikgPj0gMCkge1xuICAgICAgICAgICAgICAgIGxldCBjaGVja2VkID0ga2V5ID09IHRoYXQuX3ZhbHVlO1xuXG4gICAgICAgICAgICAgICAgaWYgKGNoZWNrZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tlZEFsbCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIG9wdGlvbnMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIHRleHQ6ICAgIG9wdGlvbixcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICAga2V5LFxuICAgICAgICAgICAgICAgICAgICBjaGVja2VkOiBjaGVja2VkLFxuICAgICAgICAgICAgICAgICAgICBvcHRpb25zQ2xhc3M6IHRoYXQuX29wdGlvbnMub3B0aW9uc0NsYXNzLFxuICAgICAgICAgICAgICAgICAgICBoYXNoOiBUYWJsZVV0aWxzLmhhc2hDb2RlKCksXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKCAhIFRhYmxlVXRpbHMuaXNPYmplY3Qob3B0aW9uKSB8fFxuICAgICAgICAgICAgICAgICAgICAhIG9wdGlvbi5oYXNPd25Qcm9wZXJ0eSgndmFsdWUnKSB8fFxuICAgICAgICAgICAgICAgICAgICBbJ3N0cmluZycsICdudW1lcmljJ10uaW5kZXhPZih0eXBlb2Ygb3B0aW9uLnZhbHVlKSA9PT0gLTFcbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGxldCBjaGVja2VkID0gb3B0aW9uLnZhbHVlID09IHRoYXQuX3ZhbHVlO1xuICAgICAgICAgICAgICAgIGxldCB0ZXh0ICAgID0gb3B0aW9uLmhhc093blByb3BlcnR5KCd0ZXh0JylcbiAgICAgICAgICAgICAgICAgICAgPyBvcHRpb24udGV4dFxuICAgICAgICAgICAgICAgICAgICA6IG9wdGlvbi52YWx1ZTtcblxuICAgICAgICAgICAgICAgIGlmIChjaGVja2VkKSB7XG4gICAgICAgICAgICAgICAgICAgIGNoZWNrZWRBbGwgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBvcHRpb25zLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICB0ZXh0OiAgICB0ZXh0LFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogICBvcHRpb24udmFsdWUsXG4gICAgICAgICAgICAgICAgICAgIGNoZWNrZWQ6IGNoZWNrZWQsXG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnNDbGFzczogdGhhdC5fb3B0aW9ucy5vcHRpb25zQ2xhc3MsXG4gICAgICAgICAgICAgICAgICAgIGhhc2g6IFRhYmxlVXRpbHMuaGFzaENvZGUoKSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5fY29udHJvbCA9ICQoVGFibGVVdGlscy5yZW5kZXIoVGFibGVUcGxbJ3NlYXJjaC9yYWRpby1idG4uaHRtbCddLCB7XG4gICAgICAgICAgICBvcHRpb25zOiBvcHRpb25zLFxuICAgICAgICAgICAgY2hlY2tlZEFsbDogY2hlY2tlZEFsbCxcbiAgICAgICAgICAgIG9wdGlvbkFsbEhhc2g6IFRhYmxlVXRpbHMuaGFzaENvZGUoKSxcbiAgICAgICAgICAgIG9wdGlvbk9wdGlvbnNDbGFzczogdGhhdC5fb3B0aW9ucy5vcHRpb25zQ2xhc3MsXG4gICAgICAgICAgICBmaWVsZDogVGFibGVVdGlscy5oYXNoQ29kZSgpLFxuICAgICAgICAgICAgbGFuZzogdGhpcy5fdGFibGUuZ2V0TGFuZygpXG4gICAgICAgIH0pKTtcblxuICAgICAgICByZXR1cm4gdGhpcy5fY29udHJvbDtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFNlYXJjaFJhZGlvQnRuOyIsIlxuaW1wb3J0IFRhYmxlVHBsICAgZnJvbSBcIi4uL3RhYmxlLnRwbFwiO1xuaW1wb3J0IFRhYmxlVXRpbHMgZnJvbSBcIi4uL3RhYmxlLnV0aWxzXCI7XG5pbXBvcnQgU2VhcmNoICAgICAgICAgICBmcm9tIFwiLi4vYWJzdHJhY3QvU2VhcmNoXCI7XG5cbmNsYXNzIFNlYXJjaFNlbGVjdCBleHRlbmRzIFNlYXJjaCB7XG5cbiAgICAvKipcbiAgICAgKiDQmNC90LjRhtC40LDQu9C40LfQsNGG0LjRj1xuICAgICAqIEBwYXJhbSB7VGFibGVJbnN0YW5jZX0gdGFibGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gICAgICAgICAgICAgIG9wdGlvbnNcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcih0YWJsZSwgb3B0aW9ucykge1xuXG4gICAgICAgIG9wdGlvbnMgPSAkLmV4dGVuZCh0cnVlLCB7XG4gICAgICAgICAgICBpZDogbnVsbCxcbiAgICAgICAgICAgIHR5cGU6ICdzZWxlY3QnLFxuICAgICAgICAgICAgZmllbGQ6IG51bGwsXG4gICAgICAgICAgICBsYWJlbDogbnVsbCxcbiAgICAgICAgICAgIHdpZHRoOiBudWxsLFxuICAgICAgICAgICAgdmFsdWU6IG51bGwsXG4gICAgICAgICAgICBhdHRyOiB7XG4gICAgICAgICAgICAgICAgY2xhc3M6ICdmb3JtLXNlbGVjdCBkLWlubGluZS1ibG9jaydcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvcHRpb25zOiBbXVxuICAgICAgICB9LCBvcHRpb25zKTtcblxuICAgICAgICBzdXBlcih0YWJsZSwgb3B0aW9ucyk7XG5cblxuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy52YWx1ZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5zZXRWYWx1ZSh0aGlzLl9vcHRpb25zLnZhbHVlKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICog0KPRgdGC0LDQvdC+0LLQutCwINC30L3QsNGH0LXQvdC40Y9cbiAgICAgKiBAcGFyYW0ge3N0cmluZ3xudW1iZXJ8QXJyYXl9IHZhbHVlXG4gICAgICovXG4gICAgc2V0VmFsdWUodmFsdWUpIHtcblxuICAgICAgICBpZiAoWydzdHJpbmcnLCAnbnVtYmVyJywgJ29iamVjdCddLmluZGV4T2YodHlwZW9mIHZhbHVlKSA8IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICBsZXQgaXRlbXMgPSBbXTtcblxuICAgICAgICAgICAgICAgIHZhbHVlLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2YgaXRlbSkgPj0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXMucHVzaChpdGVtKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLl92YWx1ZSA9IGl0ZW1zO1xuXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuX3ZhbHVlID0gbnVsbDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fdmFsdWUgPSBbIHZhbHVlIF07XG4gICAgICAgIH1cblxuXG4gICAgICAgIGlmICh0aGlzLl9jb250cm9sKSB7XG4gICAgICAgICAgICAkKCdvcHRpb246c2VsZWN0ZWQnLCB0aGlzLl9jb250cm9sKS5wcm9wKCdzZWxlY3RlZCcsIGZhbHNlKTtcblxuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodGhpcy5fdmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdmFsdWUubWFwKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAkKCdvcHRpb25bdmFsdWU9XCInICsgdmFsdWUgKyAnXCJdJywgdGhpcy5fY29udHJvbCkucHJvcCgnc2VsZWN0ZWQnLCB0cnVlKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC30L3QsNGH0LXQvdC40Y9cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl8c3RyaW5nfG51bGx9XG4gICAgICovXG4gICAgZ2V0VmFsdWUoKSB7XG5cbiAgICAgICAgaWYgKHRoaXMuX2NvbnRyb2wpIHtcbiAgICAgICAgICAgIGxldCBpc011bHRpcGxlID0gISEgdGhpcy5fY29udHJvbC5hdHRyKCdtdWx0aXBsZScpO1xuICAgICAgICAgICAgbGV0IG9wdGlvbnMgICAgPSAkKCdvcHRpb246c2VsZWN0ZWQnLCB0aGlzLl9jb250cm9sKTtcbiAgICAgICAgICAgIGxldCBpdGVtcyAgICAgID0gW107XG5cbiAgICAgICAgICAgICQuZWFjaChvcHRpb25zLCBmdW5jdGlvbiAoa2V5LCBvcHRpb24pIHtcbiAgICAgICAgICAgICAgICBsZXQgdmFsdWUgPSAkKG9wdGlvbikuYXR0cigndmFsdWUnKTtcblxuICAgICAgICAgICAgICAgIGlmIChbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiB2YWx1ZSkgPj0gMCAmJlxuICAgICAgICAgICAgICAgICAgICB2YWx1ZSAhPT0gJydcbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgaXRlbXMucHVzaCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHJldHVybiBpdGVtcy5sZW5ndGggPiAwXG4gICAgICAgICAgICAgICAgPyAoaXNNdWx0aXBsZSA/IGl0ZW1zIDogaXRlbXNbMF0pXG4gICAgICAgICAgICAgICAgOiBudWxsO1xuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fdmFsdWU7XG4gICAgICAgIH1cbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqINCk0LjQu9GM0YLRgNCw0YbQuNGPINC00LDQvdC90YvRhVxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9ICAgICAgICAgICAgICBmaWVsZFZhbHVlXG4gICAgICogQHJldHVybnMge0FycmF5fHN0cmluZ3xudW1iZXJ9IHNlYXJjaFZhbHVlXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAgICovXG4gICAgZmlsdGVyKGZpZWxkVmFsdWUsIHNlYXJjaFZhbHVlKSB7XG5cbiAgICAgICAgaWYgKFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIGZpZWxkVmFsdWUpIDwgMCB8fFxuICAgICAgICAgICAgKFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIHNlYXJjaFZhbHVlKSA8IDAgJiYgISBBcnJheS5pc0FycmF5KHNlYXJjaFZhbHVlKSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHNlYXJjaFZhbHVlKSkge1xuICAgICAgICAgICAgcmV0dXJuIHNlYXJjaFZhbHVlLmluZGV4T2YoZmllbGRWYWx1ZSkgPj0gMDtcblxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGZpZWxkVmFsdWUudG9TdHJpbmcoKS50b0xvd2VyQ2FzZSgpID09PSBzZWFyY2hWYWx1ZS50b1N0cmluZygpLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqINCk0L7RgNC80LjRgNC+0LLQsNC90LjQtSDQutC+0L3RgtC10L3RgtCwXG4gICAgICogQHJldHVybnMge3N0cmluZ31cbiAgICAgKi9cbiAgICByZW5kZXIoKSB7XG5cbiAgICAgICAgbGV0IHRoYXQgICAgICAgICAgPSB0aGlzO1xuICAgICAgICBsZXQgb3B0aW9ucyAgICAgICA9IHRoaXMuZ2V0T3B0aW9ucygpO1xuICAgICAgICBsZXQgc2VsZWN0T3B0aW9ucyA9IFtdO1xuICAgICAgICBsZXQgYXR0cmlidXRlcyAgICA9IFtdO1xuXG4gICAgICAgIGlmICggISBvcHRpb25zLmhhc093blByb3BlcnR5KCdhdHRyJykgfHxcbiAgICAgICAgICAgICAhIFRhYmxlVXRpbHMuaXNPYmplY3Qob3B0aW9ucy5hdHRyKVxuICAgICAgICApIHtcbiAgICAgICAgICAgIG9wdGlvbnMuYXR0ciA9IHt9O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG9wdGlvbnMuZmllbGQpIHtcbiAgICAgICAgICAgIG9wdGlvbnMuYXR0ci5uYW1lID0gdGhpcy5fb3B0aW9ucy5maWVsZDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvcHRpb25zLndpZHRoKSB7XG4gICAgICAgICAgICBvcHRpb25zLmF0dHIgPSBUYWJsZVV0aWxzLm1lcmdlQXR0cihcbiAgICAgICAgICAgICAgICB7IHN0eWxlOiAnd2lkdGg6JyArIG9wdGlvbnMud2lkdGggKyAncHgnIH0sXG4gICAgICAgICAgICAgICAgb3B0aW9ucy5hdHRyXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG9wdGlvbnMuaGFzT3duUHJvcGVydHkoJ29wdGlvbnMnKSAmJlxuICAgICAgICAgICAgdHlwZW9mIG9wdGlvbnMub3B0aW9ucyA9PT0gJ29iamVjdCcgJiZcbiAgICAgICAgICAgIG9wdGlvbnMub3B0aW9ucyAhPT0gbnVsbFxuICAgICAgICApIHtcbiAgICAgICAgICAgICQuZWFjaChvcHRpb25zLm9wdGlvbnMsIGZ1bmN0aW9uIChrZXksIG9wdGlvbikge1xuXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBvcHRpb24gPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBvcHRpb24gPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdE9wdGlvbnMucHVzaCh0aGF0Ll9idWlsZE9wdGlvbih7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnb3B0aW9uJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBrZXksXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBvcHRpb25cbiAgICAgICAgICAgICAgICAgICAgfSkpO1xuXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChUYWJsZVV0aWxzLmlzT2JqZWN0KG9wdGlvbikpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHR5cGUgPSBvcHRpb24uaGFzT3duUHJvcGVydHkoJ3R5cGUnKSAmJiB0eXBlb2Ygb3B0aW9uLnR5cGUgPT09ICdzdHJpbmcnXG4gICAgICAgICAgICAgICAgICAgICAgICA/IG9wdGlvbi50eXBlXG4gICAgICAgICAgICAgICAgICAgICAgICA6ICdvcHRpb24nO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlID09PSAnZ3JvdXAnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgcmVuZGVyQXR0ciAgID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgZ3JvdXBBdHRyICAgID0ge307XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgZ3JvdXBPcHRpb25zID0gW107XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcHRpb24uaGFzT3duUHJvcGVydHkoJ2F0dHInKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRhYmxlVXRpbHMuaXNPYmplY3Qob3B0aW9uLmF0dHIpXG4gICAgICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBncm91cEF0dHIgPSBvcHRpb24uYXR0cjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbi5oYXNPd25Qcm9wZXJ0eSgnbGFiZWwnKSAmJiBbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZihvcHRpb24ubGFiZWwpKSA+PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3JvdXBBdHRyLmxhYmVsID0gb3B0aW9uLmxhYmVsO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAkLmVhY2goZ3JvdXBBdHRyLCBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW5kZXJBdHRyLnB1c2gobmFtZSArICc9XCInICsgdmFsdWUgKyAnXCInKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShvcHRpb24ub3B0aW9ucykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLmVhY2gob3B0aW9uLm9wdGlvbnMsIGZ1bmN0aW9uIChrZXksIGdyb3VwT3B0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdyb3VwT3B0aW9ucy5wdXNoKHRoYXQuX2J1aWxkT3B0aW9uKGdyb3VwT3B0aW9uKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdE9wdGlvbnMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2dyb3VwJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyOiByZW5kZXJBdHRyLmxlbmd0aCA+IDAgPyAoJyAnICsgcmVuZGVyQXR0ci5qb2luKCcgJykpIDogJycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uczogZ3JvdXBPcHRpb25zLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdE9wdGlvbnMucHVzaCh0aGF0Ll9idWlsZE9wdGlvbihvcHRpb24pKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgJC5lYWNoKG9wdGlvbnMuYXR0ciwgZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVzLnB1c2gobmFtZSArICc9XCInICsgdmFsdWUgKyAnXCInKTtcbiAgICAgICAgfSk7XG5cblxuICAgICAgICB0aGlzLl9jb250cm9sID0gJChUYWJsZVV0aWxzLnJlbmRlcihUYWJsZVRwbFsnc2VhcmNoL3NlbGVjdC5odG1sJ10sIHtcbiAgICAgICAgICAgIGZpZWxkOiBvcHRpb25zLFxuICAgICAgICAgICAgdmFsdWU6IHRoaXMuX3ZhbHVlLFxuICAgICAgICAgICAgYXR0cjogYXR0cmlidXRlcy5sZW5ndGggPiAwID8gKCcgJyArIGF0dHJpYnV0ZXMuam9pbignICcpKSA6ICcnLFxuICAgICAgICAgICAgb3B0aW9uczogc2VsZWN0T3B0aW9uc1xuICAgICAgICB9KSk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbnRyb2w7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiDQodCx0L7RgNC60LAg0L7Qv9GG0LjQuFxuICAgICAqIEBwYXJhbSBvcHRpb25cbiAgICAgKiBAcmV0dXJuIHtvYmplY3R9XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfYnVpbGRPcHRpb24ob3B0aW9uKSB7XG5cbiAgICAgICAgbGV0IG9wdGlvbkF0dHIgPSBbXTtcbiAgICAgICAgbGV0IG9wdGlvblRleHQgPSBvcHRpb24uaGFzT3duUHJvcGVydHkoJ3RleHQnKSAmJiBbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZihvcHRpb24udGV4dCkpID49IDBcbiAgICAgICAgICAgID8gb3B0aW9uLnRleHRcbiAgICAgICAgICAgIDogJyc7XG5cbiAgICAgICAgJC5lYWNoKG9wdGlvbiwgZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAobmFtZSAhPT0gJ3RleHQnKSB7XG4gICAgICAgICAgICAgICAgb3B0aW9uQXR0ci5wdXNoKG5hbWUgKyAnPVwiJyArIHZhbHVlICsgJ1wiJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG5cbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodGhpcy5fdmFsdWUpKSB7XG4gICAgICAgICAgICAkLmVhY2godGhpcy5fdmFsdWUsIGZ1bmN0aW9uIChrZXksIGl0ZW1WYWx1ZSkge1xuICAgICAgICAgICAgICAgIGlmIChpdGVtVmFsdWUgPT0gb3B0aW9uLnZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbkF0dHIucHVzaCgnc2VsZWN0ZWQ9XCJzZWxlY3RlZFwiJyk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX3ZhbHVlID09IG9wdGlvbi52YWx1ZSkge1xuICAgICAgICAgICAgb3B0aW9uQXR0ci5wdXNoKCdzZWxlY3RlZD1cInNlbGVjdGVkXCInKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0eXBlOiAnb3B0aW9uJyxcbiAgICAgICAgICAgIHRleHQ6IG9wdGlvblRleHQsXG4gICAgICAgICAgICBhdHRyOiBvcHRpb25BdHRyLmxlbmd0aCA+IDAgPyAoJyAnICsgb3B0aW9uQXR0ci5qb2luKCcgJykpIDogJydcbiAgICAgICAgfTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFNlYXJjaFNlbGVjdDsiLCJcbmltcG9ydCBUYWJsZVRwbCAgIGZyb20gXCIuLi90YWJsZS50cGxcIjtcbmltcG9ydCBUYWJsZVV0aWxzIGZyb20gXCIuLi90YWJsZS51dGlsc1wiO1xuaW1wb3J0IFNlYXJjaCAgICAgICAgICAgZnJvbSBcIi4uL2Fic3RyYWN0L1NlYXJjaFwiO1xuXG5jbGFzcyBTZWFyY2hTd2l0Y2ggZXh0ZW5kcyBTZWFyY2gge1xuXG4gICAgLyoqXG4gICAgICog0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y9cbiAgICAgKiBAcGFyYW0ge1RhYmxlSW5zdGFuY2V9IHRhYmxlXG4gICAgICogQHBhcmFtIHtPYmplY3R9ICAgICAgICAgICAgICBvcHRpb25zXG4gICAgICovXG4gICAgY29uc3RydWN0b3IodGFibGUsIG9wdGlvbnMpIHtcblxuICAgICAgICBvcHRpb25zID0gJC5leHRlbmQodHJ1ZSwge1xuICAgICAgICAgICAgaWQ6IG51bGwsXG4gICAgICAgICAgICB0eXBlOiAnc3dpdGNoJyxcbiAgICAgICAgICAgIGZpZWxkOiBudWxsLFxuICAgICAgICAgICAgdmFsdWU6IG51bGwsXG4gICAgICAgICAgICB2YWx1ZVk6IDFcbiAgICAgICAgfSwgb3B0aW9ucyk7XG5cbiAgICAgICAgc3VwZXIodGFibGUsIG9wdGlvbnMpO1xuXG5cbiAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMudmFsdWUgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0VmFsdWUodGhpcy5fb3B0aW9ucy52YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqINCj0YHRgtCw0L3QvtCy0LrQsCDQt9C90LDRh9C10L3QuNGPXG4gICAgICogQHBhcmFtIHtzdHJpbmd8bnVtYmVyfG51bGx9IHZhbHVlXG4gICAgICovXG4gICAgc2V0VmFsdWUodmFsdWUpIHtcblxuICAgICAgICBpZiAodmFsdWUgIT09IG51bGwgJiZcbiAgICAgICAgICAgIHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycgJiZcbiAgICAgICAgICAgIHR5cGVvZiB2YWx1ZSAhPT0gJ251bWJlcidcbiAgICAgICAgKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl92YWx1ZSA9IHZhbHVlXG5cblxuICAgICAgICBpZiAodGhpcy5fY29udHJvbCkge1xuICAgICAgICAgICAgbGV0IHZhbHVlWSA9IHR5cGVvZiB0aGlzLl9vcHRpb25zLnZhbHVlWSA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIHRoaXMuX29wdGlvbnMudmFsdWVZID09PSAnbnVtYmVyJ1xuICAgICAgICAgICAgICAgID8gdGhpcy5fb3B0aW9ucy52YWx1ZVlcbiAgICAgICAgICAgICAgICA6ICcnXG5cbiAgICAgICAgICAgIGlmICh0aGlzLl92YWx1ZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICQoJ2lucHV0JywgdGhpcy5fY29udHJvbCkucHJvcCgnY2hlY2tlZCcsIGZhbHNlKTtcblxuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLl92YWx1ZSA9PT0gdmFsdWVZKSB7XG4gICAgICAgICAgICAgICAgJCgnaW5wdXQnLCB0aGlzLl9jb250cm9sKS5wcm9wKCdjaGVja2VkJywgdHJ1ZSk7XG5cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgJCgnaW5wdXQnLCB0aGlzLl9jb250cm9sKS5wcm9wKCdjaGVja2VkJywgZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0LfQvdCw0YfQtdC90LjRj1xuICAgICAqIEByZXR1cm5zIHtzdHJpbmd8bnVsbH1cbiAgICAgKi9cbiAgICBnZXRWYWx1ZSgpIHtcblxuICAgICAgICBpZiAodGhpcy5fY29udHJvbCkge1xuICAgICAgICAgICAgbGV0IHZhbHVlID0gJCgnaW5wdXQ6Y2hlY2tlZCcsIHRoaXMuX2NvbnRyb2wpLnZhbCgpO1xuXG4gICAgICAgICAgICByZXR1cm4gdHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJyB8fCB2YWx1ZSA9PT0gJydcbiAgICAgICAgICAgICAgICA/IG51bGxcbiAgICAgICAgICAgICAgICA6IHZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICog0KTQuNC70YzRgtGA0LDRhtC40Y8g0LTQsNC90L3Ri9GFXG4gICAgICogQHJldHVybnMge3N0cmluZ30gICAgICAgICAgICAgIGZpZWxkVmFsdWVcbiAgICAgKiBAcmV0dXJucyB7QXJyYXl8c3RyaW5nfG51bWJlcn0gc2VhcmNoVmFsdWVcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICBmaWx0ZXIoZmllbGRWYWx1ZSwgc2VhcmNoVmFsdWUpIHtcblxuICAgICAgICBpZiAoWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2YgZmllbGRWYWx1ZSkgPCAwIHx8XG4gICAgICAgICAgICBbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiBzZWFyY2hWYWx1ZSkgPCAwXG4gICAgICAgICkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZpZWxkVmFsdWUudG9TdHJpbmcoKS50b0xvd2VyQ2FzZSgpID09PSBzZWFyY2hWYWx1ZS50b1N0cmluZygpLnRvTG93ZXJDYXNlKCk7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiDQpNC+0YDQvNC40YDQvtCy0LDQvdC40LUg0LrQvtC90YLQtdC90YLQsFxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAgICovXG4gICAgcmVuZGVyKCkge1xuXG4gICAgICAgIGxldCBvcHRpb25zID0gdGhpcy5nZXRPcHRpb25zKCk7XG4gICAgICAgIGxldCB2YWx1ZVkgID0gdHlwZW9mIG9wdGlvbnMudmFsdWVZID09PSAnc3RyaW5nJyB8fCB0eXBlb2Ygb3B0aW9ucy52YWx1ZVkgPT09ICdudW1iZXInXG4gICAgICAgICAgICA/IG9wdGlvbnMudmFsdWVZXG4gICAgICAgICAgICA6ICcnXG5cbiAgICAgICAgdGhpcy5fY29udHJvbCA9ICQoVGFibGVVdGlscy5yZW5kZXIoVGFibGVUcGxbJ3NlYXJjaC9zd2l0Y2guaHRtbCddLCB7XG4gICAgICAgICAgICBpZDogdGhpcy5faWQsXG4gICAgICAgICAgICB2YWx1ZVk6IHZhbHVlWSxcbiAgICAgICAgICAgIGZpZWxkOiB0eXBlb2Ygb3B0aW9ucy5maWVsZCA9PT0gJ3N0cmluZycgPyBvcHRpb25zLmZpZWxkIDogJycsXG4gICAgICAgICAgICBjaGVja2VkOiB0aGlzLl92YWx1ZSA9PSB2YWx1ZVksXG4gICAgICAgIH0pKTtcblxuICAgICAgICByZXR1cm4gdGhpcy5fY29udHJvbDtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFNlYXJjaFN3aXRjaDsiLCJcblxuY2xhc3MgQ29sdW1uIHtcblxuICAgIF90YWJsZSAgID0gbnVsbDtcbiAgICBfb3B0aW9ucyA9IHtcbiAgICAgICAgdHlwZTogJycsXG4gICAgICAgIGZpZWxkOiBudWxsLFxuICAgICAgICBsYWJlbDogbnVsbCxcbiAgICAgICAgc2hvdzogdHJ1ZSxcbiAgICAgICAgc2hvd0xhYmVsOiB0cnVlLFxuICAgICAgICB3aWR0aDogbnVsbCxcbiAgICAgICAgbWluV2lkdGg6IG51bGwsXG4gICAgICAgIG1heFdpZHRoOiBudWxsLFxuICAgICAgICBhdHRyOiBudWxsLFxuICAgICAgICBhdHRySGVhZGVyOiBudWxsLFxuICAgICAgICByZW5kZXI6IG51bGxcbiAgICB9O1xuXG5cbiAgICAvKipcbiAgICAgKiDQmNC90LjRhtC40LDQu9C40LfQsNGG0LjRj1xuICAgICAqIEBwYXJhbSB7VGFibGVJbnN0YW5jZX0gdGFibGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gICAgICAgICAgICAgIG9wdGlvbnNcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcih0YWJsZSwgb3B0aW9ucykge1xuXG4gICAgICAgIHRoaXMuX3RhYmxlICAgPSB0YWJsZTtcbiAgICAgICAgdGhpcy5fb3B0aW9ucyA9ICQuZXh0ZW5kKHRydWUsIHRoaXMuX29wdGlvbnMsIG9wdGlvbnMpO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICog0KPRgdGC0LDQvdC+0LLQutCwINCy0LjQtNC40LzQvtGB0YLQuCDQutC+0LvQvtC90LrQuFxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gaXNTaG93XG4gICAgICovXG4gICAgc2V0U2hvdyhpc1Nob3cpIHtcbiAgICAgICAgdGhpcy5fb3B0aW9ucy5zaG93ID0gISEgaXNTaG93O1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICog0JLQuNC00LjQvNC+0YHRgtC4INC60L7Qu9C+0L3QutC4XG4gICAgICovXG4gICAgaXNTaG93KCkge1xuICAgICAgICByZXR1cm4gISEgdGhpcy5fb3B0aW9ucy5zaG93O1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC/0LDRgNCw0LzQtdGC0YDQvtCyXG4gICAgICogQHJldHVybnMge29iamVjdH1cbiAgICAgKi9cbiAgICBnZXRPcHRpb25zKCkge1xuICAgICAgICByZXR1cm4gJC5leHRlbmQoe30sIHRoaXMuX29wdGlvbnMpO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC40LzQtdC90Lgg0L/QvtC70Y9cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfG51bGx9XG4gICAgICovXG4gICAgZ2V0RmllbGQoKSB7XG4gICAgICAgIHJldHVybiB0eXBlb2YgdGhpcy5fb3B0aW9ucy5maWVsZCA9PT0gJ3N0cmluZycgPyB0aGlzLl9vcHRpb25zLmZpZWxkIDogbnVsbDtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqINCk0L7RgNC80LjRgNC+0LLQsNC90LjQtSDQutC+0L3RgtC10L3RgtCwXG4gICAgICogQHBhcmFtIHsqfSAgICAgIGNvbnRlbnRcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gcmVjb3JkXG4gICAgICogQHJldHVybnMge3N0cmluZ31cbiAgICAgKi9cbiAgICByZW5kZXIoY29udGVudCwgcmVjb3JkKSB7fVxufVxuXG5leHBvcnQgZGVmYXVsdCBDb2x1bW47IiwiXG5pbXBvcnQgQ29sdW1uICAgICAgICAgICBmcm9tIFwiLi4vYWJzdHJhY3QvQ29sdW1uXCI7XG5pbXBvcnQgVGFibGVVdGlscyBmcm9tIFwiLi4vdGFibGUudXRpbHNcIjtcblxuXG5jbGFzcyBDb2x1bW5zRGF0ZSBleHRlbmRzIENvbHVtbiB7XG5cbiAgICAvKipcbiAgICAgKiDQmNC90LjRhtC40LDQu9C40LfQsNGG0LjRj1xuICAgICAqIEBwYXJhbSB7VGFibGVJbnN0YW5jZX0gdGFibGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gICAgICAgICAgICAgIG9wdGlvbnNcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcih0YWJsZSwgb3B0aW9ucykge1xuXG4gICAgICAgIG9wdGlvbnMgPSAkLmV4dGVuZCh0cnVlLCB7XG4gICAgICAgICAgICB0eXBlOiAnZGF0ZScsXG4gICAgICAgICAgICBmaWVsZDogbnVsbCxcbiAgICAgICAgICAgIGxhYmVsOiBudWxsLFxuICAgICAgICAgICAgc2hvdzogdHJ1ZSxcbiAgICAgICAgICAgIHdpZHRoOiBudWxsLFxuICAgICAgICAgICAgZm9ybWF0OiAnREQuTU0uWVlZWScsXG4gICAgICAgICAgICBhdHRyOiB7fSxcbiAgICAgICAgICAgIGF0dHJIZWFkZXI6IHt9LFxuICAgICAgICAgICAgcmVuZGVyOiBudWxsXG4gICAgICAgIH0sIG9wdGlvbnMpO1xuXG4gICAgICAgIHN1cGVyKHRhYmxlLCBvcHRpb25zKTtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqINCk0L7RgNC80LjRgNC+0LLQsNC90LjQtSDQutC+0L3RgtC10L3RgtCwXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGNvbnRlbnRcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gcmVjb3JkXG4gICAgICogQHJldHVybnMge3N0cmluZ31cbiAgICAgKi9cbiAgICByZW5kZXIoY29udGVudCwgcmVjb3JkKSB7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBjb250ZW50ICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICB9XG5cblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKGNvbnRlbnQgIT09ICcnKSB7XG4gICAgICAgICAgICAgICAgbGV0IGxhbmcgPSB0aGlzLl90YWJsZS5nZXRMYW5nKClcbiAgICAgICAgICAgICAgICBsZXQgZGF0ZSA9IG5ldyBEYXRlKGNvbnRlbnQpO1xuXG4gICAgICAgICAgICAgICAgY29udGVudCA9IHRoaXMuX29wdGlvbnMuZm9ybWF0XG4gICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9ZWVlZL2csIFRhYmxlVXRpbHMuc3RyUGFkTGVmdChkYXRlLmdldEZ1bGxZZWFyKCksIDQpKVxuICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvTU1NTS9nLCBsYW5nLm1vbnRoTmFtZXNbZGF0ZS5nZXRNb250aCgpICsgMV0pXG4gICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9NTU0vZywgbGFuZy5tb250aE5hbWVzU2hvcnRbZGF0ZS5nZXRNb250aCgpICsgMV0pXG4gICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9NTS9nLCBUYWJsZVV0aWxzLnN0clBhZExlZnQoZGF0ZS5nZXRNb250aCgpICsgMSwgMikpXG4gICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9NL2csIGRhdGUuZ2V0TW9udGgoKSArIDEpXG4gICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9ERC9nLCBUYWJsZVV0aWxzLnN0clBhZExlZnQoZGF0ZS5nZXREYXRlKCksIDIpKVxuICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvRC9nLCBkYXRlLmdldERhdGUoKSlcbiAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL2RkZGQvZywgbGFuZy5kYXlOYW1lc1tkYXRlLmdldE1vbnRoKCkgKyAxXSlcbiAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL2RkZC9nLCBsYW5nLmRheU5hbWVzTWluW2RhdGUuZ2V0TW9udGgoKSArIDFdKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBjb250ZW50ID0gJyc7XG4gICAgICAgIH1cblxuXG4gICAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH1cbn1cblxuXG5leHBvcnQgZGVmYXVsdCBDb2x1bW5zRGF0ZTsiLCJcbmltcG9ydCBDb2x1bW4gICAgICAgICAgIGZyb20gXCIuLi9hYnN0cmFjdC9Db2x1bW5cIjtcbmltcG9ydCBUYWJsZVV0aWxzIGZyb20gXCIuLi90YWJsZS51dGlsc1wiO1xuXG5cbmNsYXNzIENvbHVtbnNEYXRldGltZSBleHRlbmRzIENvbHVtbiB7XG5cblxuICAgIC8qKlxuICAgICAqINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPXG4gICAgICogQHBhcmFtIHtUYWJsZUluc3RhbmNlfSB0YWJsZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSAgICAgICAgICAgICAgb3B0aW9uc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHRhYmxlLCBvcHRpb25zKSB7XG5cbiAgICAgICAgb3B0aW9ucyA9ICQuZXh0ZW5kKHRydWUsIHsgdHlwZTogJ2RhdGV0aW1lJyxcbiAgICAgICAgICAgIGZpZWxkOiBudWxsLFxuICAgICAgICAgICAgbGFiZWw6IG51bGwsXG4gICAgICAgICAgICBzaG93OiB0cnVlLFxuICAgICAgICAgICAgd2lkdGg6IG51bGwsXG4gICAgICAgICAgICBmb3JtYXQ6ICdERC5NTS5ZWVlZIGhoOm1tOnNzJyxcbiAgICAgICAgICAgIGF0dHI6IHt9LFxuICAgICAgICAgICAgYXR0ckhlYWRlcjoge30sXG4gICAgICAgICAgICByZW5kZXI6IG51bGxcbiAgICAgICAgfSwgb3B0aW9ucyk7XG5cbiAgICAgICAgc3VwZXIodGFibGUsIG9wdGlvbnMpO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICog0KTQvtGA0LzQuNGA0L7QstCw0L3QuNC1INC60L7QvdGC0LXQvdGC0LBcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gY29udGVudFxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSByZWNvcmRcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgICAqL1xuICAgIHJlbmRlcihjb250ZW50LCByZWNvcmQpIHtcblxuICAgICAgICBpZiAodHlwZW9mIGNvbnRlbnQgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgIH1cblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKGNvbnRlbnQgIT09ICcnKSB7XG4gICAgICAgICAgICAgICAgbGV0IGxhbmcgPSB0aGlzLl90YWJsZS5nZXRMYW5nKClcbiAgICAgICAgICAgICAgICBsZXQgZGF0ZSA9IG5ldyBEYXRlKGNvbnRlbnQpO1xuXG4gICAgICAgICAgICAgICAgY29udGVudCA9IHRoaXMuX29wdGlvbnMuZm9ybWF0XG4gICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9ZWVlZL2csIFRhYmxlVXRpbHMuc3RyUGFkTGVmdChkYXRlLmdldEZ1bGxZZWFyKCksIDQpKVxuICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvTU1NTS9nLCBsYW5nLm1vbnRoTmFtZXNbZGF0ZS5nZXRNb250aCgpICsgMV0pXG4gICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9NTU0vZywgbGFuZy5tb250aE5hbWVzU2hvcnRbZGF0ZS5nZXRNb250aCgpICsgMV0pXG4gICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9NTS9nLCBUYWJsZVV0aWxzLnN0clBhZExlZnQoZGF0ZS5nZXRNb250aCgpICsgMSwgMikpXG4gICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9NL2csIGRhdGUuZ2V0TW9udGgoKSArIDEpXG4gICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9ERC9nLCBUYWJsZVV0aWxzLnN0clBhZExlZnQoZGF0ZS5nZXREYXRlKCksIDIpKVxuICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvRC9nLCBkYXRlLmdldERhdGUoKSlcbiAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL2RkZGQvZywgbGFuZy5kYXlOYW1lc1tkYXRlLmdldE1vbnRoKCkgKyAxXSlcbiAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL2RkZC9nLCBsYW5nLmRheU5hbWVzTWluW2RhdGUuZ2V0TW9udGgoKSArIDFdKVxuICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvaGgvZywgVGFibGVVdGlscy5zdHJQYWRMZWZ0KGRhdGUuZ2V0SG91cnMoKSwgMikpXG4gICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9tbS9nLCBUYWJsZVV0aWxzLnN0clBhZExlZnQoZGF0ZS5nZXRNaW51dGVzKCksIDIpKVxuICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvbS9nLCBkYXRlLmdldE1pbnV0ZXMoKSlcbiAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL3NzL2csIFRhYmxlVXRpbHMuc3RyUGFkTGVmdChkYXRlLmdldFNlY29uZHMoKSwgMikpXG4gICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9zL2csIGRhdGUuZ2V0U2Vjb25kcygpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBjb250ZW50ID0gJyc7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY29udGVudDtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IENvbHVtbnNEYXRldGltZTsiLCJleHBvcnQgeyBob29rcywgc2V0SG9va0NhbGxiYWNrIH07XG5cbnZhciBob29rQ2FsbGJhY2s7XG5cbmZ1bmN0aW9uIGhvb2tzKCkge1xuICAgIHJldHVybiBob29rQ2FsbGJhY2suYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbn1cblxuLy8gVGhpcyBpcyBkb25lIHRvIHJlZ2lzdGVyIHRoZSBtZXRob2QgY2FsbGVkIHdpdGggbW9tZW50KClcbi8vIHdpdGhvdXQgY3JlYXRpbmcgY2lyY3VsYXIgZGVwZW5kZW5jaWVzLlxuZnVuY3Rpb24gc2V0SG9va0NhbGxiYWNrKGNhbGxiYWNrKSB7XG4gICAgaG9va0NhbGxiYWNrID0gY2FsbGJhY2s7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc0FycmF5KGlucHV0KSB7XG4gICAgcmV0dXJuIChcbiAgICAgICAgaW5wdXQgaW5zdGFuY2VvZiBBcnJheSB8fFxuICAgICAgICBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaW5wdXQpID09PSAnW29iamVjdCBBcnJheV0nXG4gICAgKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzT2JqZWN0KGlucHV0KSB7XG4gICAgLy8gSUU4IHdpbGwgdHJlYXQgdW5kZWZpbmVkIGFuZCBudWxsIGFzIG9iamVjdCBpZiBpdCB3YXNuJ3QgZm9yXG4gICAgLy8gaW5wdXQgIT0gbnVsbFxuICAgIHJldHVybiAoXG4gICAgICAgIGlucHV0ICE9IG51bGwgJiZcbiAgICAgICAgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGlucHV0KSA9PT0gJ1tvYmplY3QgT2JqZWN0XSdcbiAgICApO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaGFzT3duUHJvcChhLCBiKSB7XG4gICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChhLCBiKTtcbn1cbiIsImltcG9ydCBoYXNPd25Qcm9wIGZyb20gJy4vaGFzLW93bi1wcm9wJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNPYmplY3RFbXB0eShvYmopIHtcbiAgICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMpIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKG9iaikubGVuZ3RoID09PSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBrO1xuICAgICAgICBmb3IgKGsgaW4gb2JqKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duUHJvcChvYmosIGspKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzVW5kZWZpbmVkKGlucHV0KSB7XG4gICAgcmV0dXJuIGlucHV0ID09PSB2b2lkIDA7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc051bWJlcihpbnB1dCkge1xuICAgIHJldHVybiAoXG4gICAgICAgIHR5cGVvZiBpbnB1dCA9PT0gJ251bWJlcicgfHxcbiAgICAgICAgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGlucHV0KSA9PT0gJ1tvYmplY3QgTnVtYmVyXSdcbiAgICApO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNEYXRlKGlucHV0KSB7XG4gICAgcmV0dXJuIChcbiAgICAgICAgaW5wdXQgaW5zdGFuY2VvZiBEYXRlIHx8XG4gICAgICAgIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpbnB1dCkgPT09ICdbb2JqZWN0IERhdGVdJ1xuICAgICk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtYXAoYXJyLCBmbikge1xuICAgIHZhciByZXMgPSBbXSxcbiAgICAgICAgaSxcbiAgICAgICAgYXJyTGVuID0gYXJyLmxlbmd0aDtcbiAgICBmb3IgKGkgPSAwOyBpIDwgYXJyTGVuOyArK2kpIHtcbiAgICAgICAgcmVzLnB1c2goZm4oYXJyW2ldLCBpKSk7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG59XG4iLCJpbXBvcnQgaGFzT3duUHJvcCBmcm9tICcuL2hhcy1vd24tcHJvcCc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGV4dGVuZChhLCBiKSB7XG4gICAgZm9yICh2YXIgaSBpbiBiKSB7XG4gICAgICAgIGlmIChoYXNPd25Qcm9wKGIsIGkpKSB7XG4gICAgICAgICAgICBhW2ldID0gYltpXTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmIChoYXNPd25Qcm9wKGIsICd0b1N0cmluZycpKSB7XG4gICAgICAgIGEudG9TdHJpbmcgPSBiLnRvU3RyaW5nO1xuICAgIH1cblxuICAgIGlmIChoYXNPd25Qcm9wKGIsICd2YWx1ZU9mJykpIHtcbiAgICAgICAgYS52YWx1ZU9mID0gYi52YWx1ZU9mO1xuICAgIH1cblxuICAgIHJldHVybiBhO1xufVxuIiwiaW1wb3J0IHsgY3JlYXRlTG9jYWxPclVUQyB9IGZyb20gJy4vZnJvbS1hbnl0aGluZyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVVVEMoaW5wdXQsIGZvcm1hdCwgbG9jYWxlLCBzdHJpY3QpIHtcbiAgICByZXR1cm4gY3JlYXRlTG9jYWxPclVUQyhpbnB1dCwgZm9ybWF0LCBsb2NhbGUsIHN0cmljdCwgdHJ1ZSkudXRjKCk7XG59XG4iLCJmdW5jdGlvbiBkZWZhdWx0UGFyc2luZ0ZsYWdzKCkge1xuICAgIC8vIFdlIG5lZWQgdG8gZGVlcCBjbG9uZSB0aGlzIG9iamVjdC5cbiAgICByZXR1cm4ge1xuICAgICAgICBlbXB0eTogZmFsc2UsXG4gICAgICAgIHVudXNlZFRva2VuczogW10sXG4gICAgICAgIHVudXNlZElucHV0OiBbXSxcbiAgICAgICAgb3ZlcmZsb3c6IC0yLFxuICAgICAgICBjaGFyc0xlZnRPdmVyOiAwLFxuICAgICAgICBudWxsSW5wdXQ6IGZhbHNlLFxuICAgICAgICBpbnZhbGlkRXJhOiBudWxsLFxuICAgICAgICBpbnZhbGlkTW9udGg6IG51bGwsXG4gICAgICAgIGludmFsaWRGb3JtYXQ6IGZhbHNlLFxuICAgICAgICB1c2VySW52YWxpZGF0ZWQ6IGZhbHNlLFxuICAgICAgICBpc286IGZhbHNlLFxuICAgICAgICBwYXJzZWREYXRlUGFydHM6IFtdLFxuICAgICAgICBlcmE6IG51bGwsXG4gICAgICAgIG1lcmlkaWVtOiBudWxsLFxuICAgICAgICByZmMyODIyOiBmYWxzZSxcbiAgICAgICAgd2Vla2RheU1pc21hdGNoOiBmYWxzZSxcbiAgICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRQYXJzaW5nRmxhZ3MobSkge1xuICAgIGlmIChtLl9wZiA9PSBudWxsKSB7XG4gICAgICAgIG0uX3BmID0gZGVmYXVsdFBhcnNpbmdGbGFncygpO1xuICAgIH1cbiAgICByZXR1cm4gbS5fcGY7XG59XG4iLCJ2YXIgc29tZTtcbmlmIChBcnJheS5wcm90b3R5cGUuc29tZSkge1xuICAgIHNvbWUgPSBBcnJheS5wcm90b3R5cGUuc29tZTtcbn0gZWxzZSB7XG4gICAgc29tZSA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICAgICAgdmFyIHQgPSBPYmplY3QodGhpcyksXG4gICAgICAgICAgICBsZW4gPSB0Lmxlbmd0aCA+Pj4gMCxcbiAgICAgICAgICAgIGk7XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoaSBpbiB0ICYmIGZ1bi5jYWxsKHRoaXMsIHRbaV0sIGksIHQpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcbn1cblxuZXhwb3J0IHsgc29tZSBhcyBkZWZhdWx0IH07XG4iLCJpbXBvcnQgZXh0ZW5kIGZyb20gJy4uL3V0aWxzL2V4dGVuZCc7XG5pbXBvcnQgeyBjcmVhdGVVVEMgfSBmcm9tICcuL3V0Yyc7XG5pbXBvcnQgZ2V0UGFyc2luZ0ZsYWdzIGZyb20gJy4uL2NyZWF0ZS9wYXJzaW5nLWZsYWdzJztcbmltcG9ydCBzb21lIGZyb20gJy4uL3V0aWxzL3NvbWUnO1xuXG5leHBvcnQgZnVuY3Rpb24gaXNWYWxpZChtKSB7XG4gICAgdmFyIGZsYWdzID0gbnVsbCxcbiAgICAgICAgcGFyc2VkUGFydHMgPSBmYWxzZSxcbiAgICAgICAgaXNOb3dWYWxpZCA9IG0uX2QgJiYgIWlzTmFOKG0uX2QuZ2V0VGltZSgpKTtcbiAgICBpZiAoaXNOb3dWYWxpZCkge1xuICAgICAgICBmbGFncyA9IGdldFBhcnNpbmdGbGFncyhtKTtcbiAgICAgICAgcGFyc2VkUGFydHMgPSBzb21lLmNhbGwoZmxhZ3MucGFyc2VkRGF0ZVBhcnRzLCBmdW5jdGlvbiAoaSkge1xuICAgICAgICAgICAgcmV0dXJuIGkgIT0gbnVsbDtcbiAgICAgICAgfSk7XG4gICAgICAgIGlzTm93VmFsaWQgPVxuICAgICAgICAgICAgZmxhZ3Mub3ZlcmZsb3cgPCAwICYmXG4gICAgICAgICAgICAhZmxhZ3MuZW1wdHkgJiZcbiAgICAgICAgICAgICFmbGFncy5pbnZhbGlkRXJhICYmXG4gICAgICAgICAgICAhZmxhZ3MuaW52YWxpZE1vbnRoICYmXG4gICAgICAgICAgICAhZmxhZ3MuaW52YWxpZFdlZWtkYXkgJiZcbiAgICAgICAgICAgICFmbGFncy53ZWVrZGF5TWlzbWF0Y2ggJiZcbiAgICAgICAgICAgICFmbGFncy5udWxsSW5wdXQgJiZcbiAgICAgICAgICAgICFmbGFncy5pbnZhbGlkRm9ybWF0ICYmXG4gICAgICAgICAgICAhZmxhZ3MudXNlckludmFsaWRhdGVkICYmXG4gICAgICAgICAgICAoIWZsYWdzLm1lcmlkaWVtIHx8IChmbGFncy5tZXJpZGllbSAmJiBwYXJzZWRQYXJ0cykpO1xuICAgICAgICBpZiAobS5fc3RyaWN0KSB7XG4gICAgICAgICAgICBpc05vd1ZhbGlkID1cbiAgICAgICAgICAgICAgICBpc05vd1ZhbGlkICYmXG4gICAgICAgICAgICAgICAgZmxhZ3MuY2hhcnNMZWZ0T3ZlciA9PT0gMCAmJlxuICAgICAgICAgICAgICAgIGZsYWdzLnVudXNlZFRva2Vucy5sZW5ndGggPT09IDAgJiZcbiAgICAgICAgICAgICAgICBmbGFncy5iaWdIb3VyID09PSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKE9iamVjdC5pc0Zyb3plbiA9PSBudWxsIHx8ICFPYmplY3QuaXNGcm96ZW4obSkpIHtcbiAgICAgICAgbS5faXNWYWxpZCA9IGlzTm93VmFsaWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGlzTm93VmFsaWQ7XG4gICAgfVxuICAgIHJldHVybiBtLl9pc1ZhbGlkO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlSW52YWxpZChmbGFncykge1xuICAgIHZhciBtID0gY3JlYXRlVVRDKE5hTik7XG4gICAgaWYgKGZsYWdzICE9IG51bGwpIHtcbiAgICAgICAgZXh0ZW5kKGdldFBhcnNpbmdGbGFncyhtKSwgZmxhZ3MpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGdldFBhcnNpbmdGbGFncyhtKS51c2VySW52YWxpZGF0ZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBtO1xufVxuIiwiaW1wb3J0IHsgaG9va3MgfSBmcm9tICcuLi91dGlscy9ob29rcyc7XG5pbXBvcnQgaXNVbmRlZmluZWQgZnJvbSAnLi4vdXRpbHMvaXMtdW5kZWZpbmVkJztcbmltcG9ydCBnZXRQYXJzaW5nRmxhZ3MgZnJvbSAnLi4vY3JlYXRlL3BhcnNpbmctZmxhZ3MnO1xuXG4vLyBQbHVnaW5zIHRoYXQgYWRkIHByb3BlcnRpZXMgc2hvdWxkIGFsc28gYWRkIHRoZSBrZXkgaGVyZSAobnVsbCB2YWx1ZSksXG4vLyBzbyB3ZSBjYW4gcHJvcGVybHkgY2xvbmUgb3Vyc2VsdmVzLlxudmFyIG1vbWVudFByb3BlcnRpZXMgPSAoaG9va3MubW9tZW50UHJvcGVydGllcyA9IFtdKSxcbiAgICB1cGRhdGVJblByb2dyZXNzID0gZmFsc2U7XG5cbmV4cG9ydCBmdW5jdGlvbiBjb3B5Q29uZmlnKHRvLCBmcm9tKSB7XG4gICAgdmFyIGksXG4gICAgICAgIHByb3AsXG4gICAgICAgIHZhbCxcbiAgICAgICAgbW9tZW50UHJvcGVydGllc0xlbiA9IG1vbWVudFByb3BlcnRpZXMubGVuZ3RoO1xuXG4gICAgaWYgKCFpc1VuZGVmaW5lZChmcm9tLl9pc0FNb21lbnRPYmplY3QpKSB7XG4gICAgICAgIHRvLl9pc0FNb21lbnRPYmplY3QgPSBmcm9tLl9pc0FNb21lbnRPYmplY3Q7XG4gICAgfVxuICAgIGlmICghaXNVbmRlZmluZWQoZnJvbS5faSkpIHtcbiAgICAgICAgdG8uX2kgPSBmcm9tLl9pO1xuICAgIH1cbiAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20uX2YpKSB7XG4gICAgICAgIHRvLl9mID0gZnJvbS5fZjtcbiAgICB9XG4gICAgaWYgKCFpc1VuZGVmaW5lZChmcm9tLl9sKSkge1xuICAgICAgICB0by5fbCA9IGZyb20uX2w7XG4gICAgfVxuICAgIGlmICghaXNVbmRlZmluZWQoZnJvbS5fc3RyaWN0KSkge1xuICAgICAgICB0by5fc3RyaWN0ID0gZnJvbS5fc3RyaWN0O1xuICAgIH1cbiAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20uX3R6bSkpIHtcbiAgICAgICAgdG8uX3R6bSA9IGZyb20uX3R6bTtcbiAgICB9XG4gICAgaWYgKCFpc1VuZGVmaW5lZChmcm9tLl9pc1VUQykpIHtcbiAgICAgICAgdG8uX2lzVVRDID0gZnJvbS5faXNVVEM7XG4gICAgfVxuICAgIGlmICghaXNVbmRlZmluZWQoZnJvbS5fb2Zmc2V0KSkge1xuICAgICAgICB0by5fb2Zmc2V0ID0gZnJvbS5fb2Zmc2V0O1xuICAgIH1cbiAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20uX3BmKSkge1xuICAgICAgICB0by5fcGYgPSBnZXRQYXJzaW5nRmxhZ3MoZnJvbSk7XG4gICAgfVxuICAgIGlmICghaXNVbmRlZmluZWQoZnJvbS5fbG9jYWxlKSkge1xuICAgICAgICB0by5fbG9jYWxlID0gZnJvbS5fbG9jYWxlO1xuICAgIH1cblxuICAgIGlmIChtb21lbnRQcm9wZXJ0aWVzTGVuID4gMCkge1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbW9tZW50UHJvcGVydGllc0xlbjsgaSsrKSB7XG4gICAgICAgICAgICBwcm9wID0gbW9tZW50UHJvcGVydGllc1tpXTtcbiAgICAgICAgICAgIHZhbCA9IGZyb21bcHJvcF07XG4gICAgICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKHZhbCkpIHtcbiAgICAgICAgICAgICAgICB0b1twcm9wXSA9IHZhbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0bztcbn1cblxuLy8gTW9tZW50IHByb3RvdHlwZSBvYmplY3RcbmV4cG9ydCBmdW5jdGlvbiBNb21lbnQoY29uZmlnKSB7XG4gICAgY29weUNvbmZpZyh0aGlzLCBjb25maWcpO1xuICAgIHRoaXMuX2QgPSBuZXcgRGF0ZShjb25maWcuX2QgIT0gbnVsbCA/IGNvbmZpZy5fZC5nZXRUaW1lKCkgOiBOYU4pO1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgdGhpcy5fZCA9IG5ldyBEYXRlKE5hTik7XG4gICAgfVxuICAgIC8vIFByZXZlbnQgaW5maW5pdGUgbG9vcCBpbiBjYXNlIHVwZGF0ZU9mZnNldCBjcmVhdGVzIG5ldyBtb21lbnRcbiAgICAvLyBvYmplY3RzLlxuICAgIGlmICh1cGRhdGVJblByb2dyZXNzID09PSBmYWxzZSkge1xuICAgICAgICB1cGRhdGVJblByb2dyZXNzID0gdHJ1ZTtcbiAgICAgICAgaG9va3MudXBkYXRlT2Zmc2V0KHRoaXMpO1xuICAgICAgICB1cGRhdGVJblByb2dyZXNzID0gZmFsc2U7XG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNNb21lbnQob2JqKSB7XG4gICAgcmV0dXJuIChcbiAgICAgICAgb2JqIGluc3RhbmNlb2YgTW9tZW50IHx8IChvYmogIT0gbnVsbCAmJiBvYmouX2lzQU1vbWVudE9iamVjdCAhPSBudWxsKVxuICAgICk7XG59XG4iLCJpbXBvcnQgZXh0ZW5kIGZyb20gJy4vZXh0ZW5kJztcbmltcG9ydCB7IGhvb2tzIH0gZnJvbSAnLi9ob29rcyc7XG5pbXBvcnQgaGFzT3duUHJvcCBmcm9tICcuL2hhcy1vd24tcHJvcCc7XG5cbmZ1bmN0aW9uIHdhcm4obXNnKSB7XG4gICAgaWYgKFxuICAgICAgICBob29rcy5zdXBwcmVzc0RlcHJlY2F0aW9uV2FybmluZ3MgPT09IGZhbHNlICYmXG4gICAgICAgIHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICBjb25zb2xlLndhcm5cbiAgICApIHtcbiAgICAgICAgY29uc29sZS53YXJuKCdEZXByZWNhdGlvbiB3YXJuaW5nOiAnICsgbXNnKTtcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZXByZWNhdGUobXNnLCBmbikge1xuICAgIHZhciBmaXJzdFRpbWUgPSB0cnVlO1xuXG4gICAgcmV0dXJuIGV4dGVuZChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChob29rcy5kZXByZWNhdGlvbkhhbmRsZXIgIT0gbnVsbCkge1xuICAgICAgICAgICAgaG9va3MuZGVwcmVjYXRpb25IYW5kbGVyKG51bGwsIG1zZyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZpcnN0VGltZSkge1xuICAgICAgICAgICAgdmFyIGFyZ3MgPSBbXSxcbiAgICAgICAgICAgICAgICBhcmcsXG4gICAgICAgICAgICAgICAgaSxcbiAgICAgICAgICAgICAgICBrZXksXG4gICAgICAgICAgICAgICAgYXJnTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBhcmdMZW47IGkrKykge1xuICAgICAgICAgICAgICAgIGFyZyA9ICcnO1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgYXJndW1lbnRzW2ldID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgICAgICBhcmcgKz0gJ1xcblsnICsgaSArICddICc7XG4gICAgICAgICAgICAgICAgICAgIGZvciAoa2V5IGluIGFyZ3VtZW50c1swXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhhc093blByb3AoYXJndW1lbnRzWzBdLCBrZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJnICs9IGtleSArICc6ICcgKyBhcmd1bWVudHNbMF1ba2V5XSArICcsICc7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYXJnID0gYXJnLnNsaWNlKDAsIC0yKTsgLy8gUmVtb3ZlIHRyYWlsaW5nIGNvbW1hIGFuZCBzcGFjZVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGFyZyA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYXJncy5wdXNoKGFyZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgICAgIG1zZyArXG4gICAgICAgICAgICAgICAgICAgICdcXG5Bcmd1bWVudHM6ICcgK1xuICAgICAgICAgICAgICAgICAgICBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmdzKS5qb2luKCcnKSArXG4gICAgICAgICAgICAgICAgICAgICdcXG4nICtcbiAgICAgICAgICAgICAgICAgICAgbmV3IEVycm9yKCkuc3RhY2tcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBmaXJzdFRpbWUgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9LCBmbik7XG59XG5cbnZhciBkZXByZWNhdGlvbnMgPSB7fTtcblxuZXhwb3J0IGZ1bmN0aW9uIGRlcHJlY2F0ZVNpbXBsZShuYW1lLCBtc2cpIHtcbiAgICBpZiAoaG9va3MuZGVwcmVjYXRpb25IYW5kbGVyICE9IG51bGwpIHtcbiAgICAgICAgaG9va3MuZGVwcmVjYXRpb25IYW5kbGVyKG5hbWUsIG1zZyk7XG4gICAgfVxuICAgIGlmICghZGVwcmVjYXRpb25zW25hbWVdKSB7XG4gICAgICAgIHdhcm4obXNnKTtcbiAgICAgICAgZGVwcmVjYXRpb25zW25hbWVdID0gdHJ1ZTtcbiAgICB9XG59XG5cbmhvb2tzLnN1cHByZXNzRGVwcmVjYXRpb25XYXJuaW5ncyA9IGZhbHNlO1xuaG9va3MuZGVwcmVjYXRpb25IYW5kbGVyID0gbnVsbDtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzRnVuY3Rpb24oaW5wdXQpIHtcbiAgICByZXR1cm4gKFxuICAgICAgICAodHlwZW9mIEZ1bmN0aW9uICE9PSAndW5kZWZpbmVkJyAmJiBpbnB1dCBpbnN0YW5jZW9mIEZ1bmN0aW9uKSB8fFxuICAgICAgICBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaW5wdXQpID09PSAnW29iamVjdCBGdW5jdGlvbl0nXG4gICAgKTtcbn1cbiIsImltcG9ydCBpc0Z1bmN0aW9uIGZyb20gJy4uL3V0aWxzL2lzLWZ1bmN0aW9uJztcbmltcG9ydCBleHRlbmQgZnJvbSAnLi4vdXRpbHMvZXh0ZW5kJztcbmltcG9ydCBpc09iamVjdCBmcm9tICcuLi91dGlscy9pcy1vYmplY3QnO1xuaW1wb3J0IGhhc093blByb3AgZnJvbSAnLi4vdXRpbHMvaGFzLW93bi1wcm9wJztcblxuZXhwb3J0IGZ1bmN0aW9uIHNldChjb25maWcpIHtcbiAgICB2YXIgcHJvcCwgaTtcbiAgICBmb3IgKGkgaW4gY29uZmlnKSB7XG4gICAgICAgIGlmIChoYXNPd25Qcm9wKGNvbmZpZywgaSkpIHtcbiAgICAgICAgICAgIHByb3AgPSBjb25maWdbaV07XG4gICAgICAgICAgICBpZiAoaXNGdW5jdGlvbihwcm9wKSkge1xuICAgICAgICAgICAgICAgIHRoaXNbaV0gPSBwcm9wO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzWydfJyArIGldID0gcHJvcDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICB0aGlzLl9jb25maWcgPSBjb25maWc7XG4gICAgLy8gTGVuaWVudCBvcmRpbmFsIHBhcnNpbmcgYWNjZXB0cyBqdXN0IGEgbnVtYmVyIGluIGFkZGl0aW9uIHRvXG4gICAgLy8gbnVtYmVyICsgKHBvc3NpYmx5KSBzdHVmZiBjb21pbmcgZnJvbSBfZGF5T2ZNb250aE9yZGluYWxQYXJzZS5cbiAgICAvLyBUT0RPOiBSZW1vdmUgXCJvcmRpbmFsUGFyc2VcIiBmYWxsYmFjayBpbiBuZXh0IG1ham9yIHJlbGVhc2UuXG4gICAgdGhpcy5fZGF5T2ZNb250aE9yZGluYWxQYXJzZUxlbmllbnQgPSBuZXcgUmVnRXhwKFxuICAgICAgICAodGhpcy5fZGF5T2ZNb250aE9yZGluYWxQYXJzZS5zb3VyY2UgfHwgdGhpcy5fb3JkaW5hbFBhcnNlLnNvdXJjZSkgK1xuICAgICAgICAgICAgJ3wnICtcbiAgICAgICAgICAgIC9cXGR7MSwyfS8uc291cmNlXG4gICAgKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1lcmdlQ29uZmlncyhwYXJlbnRDb25maWcsIGNoaWxkQ29uZmlnKSB7XG4gICAgdmFyIHJlcyA9IGV4dGVuZCh7fSwgcGFyZW50Q29uZmlnKSxcbiAgICAgICAgcHJvcDtcbiAgICBmb3IgKHByb3AgaW4gY2hpbGRDb25maWcpIHtcbiAgICAgICAgaWYgKGhhc093blByb3AoY2hpbGRDb25maWcsIHByb3ApKSB7XG4gICAgICAgICAgICBpZiAoaXNPYmplY3QocGFyZW50Q29uZmlnW3Byb3BdKSAmJiBpc09iamVjdChjaGlsZENvbmZpZ1twcm9wXSkpIHtcbiAgICAgICAgICAgICAgICByZXNbcHJvcF0gPSB7fTtcbiAgICAgICAgICAgICAgICBleHRlbmQocmVzW3Byb3BdLCBwYXJlbnRDb25maWdbcHJvcF0pO1xuICAgICAgICAgICAgICAgIGV4dGVuZChyZXNbcHJvcF0sIGNoaWxkQ29uZmlnW3Byb3BdKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY2hpbGRDb25maWdbcHJvcF0gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJlc1twcm9wXSA9IGNoaWxkQ29uZmlnW3Byb3BdO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBkZWxldGUgcmVzW3Byb3BdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGZvciAocHJvcCBpbiBwYXJlbnRDb25maWcpIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgaGFzT3duUHJvcChwYXJlbnRDb25maWcsIHByb3ApICYmXG4gICAgICAgICAgICAhaGFzT3duUHJvcChjaGlsZENvbmZpZywgcHJvcCkgJiZcbiAgICAgICAgICAgIGlzT2JqZWN0KHBhcmVudENvbmZpZ1twcm9wXSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgICAvLyBtYWtlIHN1cmUgY2hhbmdlcyB0byBwcm9wZXJ0aWVzIGRvbid0IG1vZGlmeSBwYXJlbnQgY29uZmlnXG4gICAgICAgICAgICByZXNbcHJvcF0gPSBleHRlbmQoe30sIHJlc1twcm9wXSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbn1cbiIsImV4cG9ydCBmdW5jdGlvbiBMb2NhbGUoY29uZmlnKSB7XG4gICAgaWYgKGNvbmZpZyAhPSBudWxsKSB7XG4gICAgICAgIHRoaXMuc2V0KGNvbmZpZyk7XG4gICAgfVxufVxuIiwiaW1wb3J0IGhhc093blByb3AgZnJvbSAnLi9oYXMtb3duLXByb3AnO1xuXG52YXIga2V5cztcblxuaWYgKE9iamVjdC5rZXlzKSB7XG4gICAga2V5cyA9IE9iamVjdC5rZXlzO1xufSBlbHNlIHtcbiAgICBrZXlzID0gZnVuY3Rpb24gKG9iaikge1xuICAgICAgICB2YXIgaSxcbiAgICAgICAgICAgIHJlcyA9IFtdO1xuICAgICAgICBmb3IgKGkgaW4gb2JqKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duUHJvcChvYmosIGkpKSB7XG4gICAgICAgICAgICAgICAgcmVzLnB1c2goaSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9O1xufVxuXG5leHBvcnQgeyBrZXlzIGFzIGRlZmF1bHQgfTtcbiIsImV4cG9ydCB2YXIgZGVmYXVsdENhbGVuZGFyID0ge1xuICAgIHNhbWVEYXk6ICdbVG9kYXkgYXRdIExUJyxcbiAgICBuZXh0RGF5OiAnW1RvbW9ycm93IGF0XSBMVCcsXG4gICAgbmV4dFdlZWs6ICdkZGRkIFthdF0gTFQnLFxuICAgIGxhc3REYXk6ICdbWWVzdGVyZGF5IGF0XSBMVCcsXG4gICAgbGFzdFdlZWs6ICdbTGFzdF0gZGRkZCBbYXRdIExUJyxcbiAgICBzYW1lRWxzZTogJ0wnLFxufTtcblxuaW1wb3J0IGlzRnVuY3Rpb24gZnJvbSAnLi4vdXRpbHMvaXMtZnVuY3Rpb24nO1xuXG5leHBvcnQgZnVuY3Rpb24gY2FsZW5kYXIoa2V5LCBtb20sIG5vdykge1xuICAgIHZhciBvdXRwdXQgPSB0aGlzLl9jYWxlbmRhcltrZXldIHx8IHRoaXMuX2NhbGVuZGFyWydzYW1lRWxzZSddO1xuICAgIHJldHVybiBpc0Z1bmN0aW9uKG91dHB1dCkgPyBvdXRwdXQuY2FsbChtb20sIG5vdykgOiBvdXRwdXQ7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB6ZXJvRmlsbChudW1iZXIsIHRhcmdldExlbmd0aCwgZm9yY2VTaWduKSB7XG4gICAgdmFyIGFic051bWJlciA9ICcnICsgTWF0aC5hYnMobnVtYmVyKSxcbiAgICAgICAgemVyb3NUb0ZpbGwgPSB0YXJnZXRMZW5ndGggLSBhYnNOdW1iZXIubGVuZ3RoLFxuICAgICAgICBzaWduID0gbnVtYmVyID49IDA7XG4gICAgcmV0dXJuIChcbiAgICAgICAgKHNpZ24gPyAoZm9yY2VTaWduID8gJysnIDogJycpIDogJy0nKSArXG4gICAgICAgIE1hdGgucG93KDEwLCBNYXRoLm1heCgwLCB6ZXJvc1RvRmlsbCkpLnRvU3RyaW5nKCkuc3Vic3RyKDEpICtcbiAgICAgICAgYWJzTnVtYmVyXG4gICAgKTtcbn1cbiIsImltcG9ydCB6ZXJvRmlsbCBmcm9tICcuLi91dGlscy96ZXJvLWZpbGwnO1xuaW1wb3J0IGlzRnVuY3Rpb24gZnJvbSAnLi4vdXRpbHMvaXMtZnVuY3Rpb24nO1xuXG52YXIgZm9ybWF0dGluZ1Rva2VucyA9XG4gICAgICAgIC8oXFxbW15cXFtdKlxcXSl8KFxcXFwpPyhbSGhdbW0oc3MpP3xNb3xNTT9NP00/fERvfERERG98REQ/RD9EP3xkZGQ/ZD98ZG8/fHdbb3x3XT98V1tvfFddP3xRbz98TnsxLDV9fFlZWVlZWXxZWVlZWXxZWVlZfFlZfHl7Miw0fXx5bz98Z2coZ2dnPyk/fEdHKEdHRz8pP3xlfEV8YXxBfGhoP3xISD98a2s/fG1tP3xzcz98U3sxLDl9fHh8WHx6ej98Wlo/fC4pL2csXG4gICAgbG9jYWxGb3JtYXR0aW5nVG9rZW5zID0gLyhcXFtbXlxcW10qXFxdKXwoXFxcXCk/KExUU3xMVHxMTD9MP0w/fGx7MSw0fSkvZyxcbiAgICBmb3JtYXRGdW5jdGlvbnMgPSB7fSxcbiAgICBmb3JtYXRUb2tlbkZ1bmN0aW9ucyA9IHt9O1xuXG5leHBvcnQgeyBmb3JtYXR0aW5nVG9rZW5zLCBmb3JtYXRUb2tlbkZ1bmN0aW9ucyB9O1xuXG4vLyB0b2tlbjogICAgJ00nXG4vLyBwYWRkZWQ6ICAgWydNTScsIDJdXG4vLyBvcmRpbmFsOiAgJ01vJ1xuLy8gY2FsbGJhY2s6IGZ1bmN0aW9uICgpIHsgdGhpcy5tb250aCgpICsgMSB9XG5leHBvcnQgZnVuY3Rpb24gYWRkRm9ybWF0VG9rZW4odG9rZW4sIHBhZGRlZCwgb3JkaW5hbCwgY2FsbGJhY2spIHtcbiAgICB2YXIgZnVuYyA9IGNhbGxiYWNrO1xuICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGZ1bmMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpc1tjYWxsYmFja10oKTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgaWYgKHRva2VuKSB7XG4gICAgICAgIGZvcm1hdFRva2VuRnVuY3Rpb25zW3Rva2VuXSA9IGZ1bmM7XG4gICAgfVxuICAgIGlmIChwYWRkZWQpIHtcbiAgICAgICAgZm9ybWF0VG9rZW5GdW5jdGlvbnNbcGFkZGVkWzBdXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB6ZXJvRmlsbChmdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksIHBhZGRlZFsxXSwgcGFkZGVkWzJdKTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgaWYgKG9yZGluYWwpIHtcbiAgICAgICAgZm9ybWF0VG9rZW5GdW5jdGlvbnNbb3JkaW5hbF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkub3JkaW5hbChcbiAgICAgICAgICAgICAgICBmdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksXG4gICAgICAgICAgICAgICAgdG9rZW5cbiAgICAgICAgICAgICk7XG4gICAgICAgIH07XG4gICAgfVxufVxuXG5mdW5jdGlvbiByZW1vdmVGb3JtYXR0aW5nVG9rZW5zKGlucHV0KSB7XG4gICAgaWYgKGlucHV0Lm1hdGNoKC9cXFtbXFxzXFxTXS8pKSB7XG4gICAgICAgIHJldHVybiBpbnB1dC5yZXBsYWNlKC9eXFxbfFxcXSQvZywgJycpO1xuICAgIH1cbiAgICByZXR1cm4gaW5wdXQucmVwbGFjZSgvXFxcXC9nLCAnJyk7XG59XG5cbmZ1bmN0aW9uIG1ha2VGb3JtYXRGdW5jdGlvbihmb3JtYXQpIHtcbiAgICB2YXIgYXJyYXkgPSBmb3JtYXQubWF0Y2goZm9ybWF0dGluZ1Rva2VucyksXG4gICAgICAgIGksXG4gICAgICAgIGxlbmd0aDtcblxuICAgIGZvciAoaSA9IDAsIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChmb3JtYXRUb2tlbkZ1bmN0aW9uc1thcnJheVtpXV0pIHtcbiAgICAgICAgICAgIGFycmF5W2ldID0gZm9ybWF0VG9rZW5GdW5jdGlvbnNbYXJyYXlbaV1dO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYXJyYXlbaV0gPSByZW1vdmVGb3JtYXR0aW5nVG9rZW5zKGFycmF5W2ldKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAobW9tKSB7XG4gICAgICAgIHZhciBvdXRwdXQgPSAnJyxcbiAgICAgICAgICAgIGk7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgb3V0cHV0ICs9IGlzRnVuY3Rpb24oYXJyYXlbaV0pXG4gICAgICAgICAgICAgICAgPyBhcnJheVtpXS5jYWxsKG1vbSwgZm9ybWF0KVxuICAgICAgICAgICAgICAgIDogYXJyYXlbaV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG91dHB1dDtcbiAgICB9O1xufVxuXG4vLyBmb3JtYXQgZGF0ZSB1c2luZyBuYXRpdmUgZGF0ZSBvYmplY3RcbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXRNb21lbnQobSwgZm9ybWF0KSB7XG4gICAgaWYgKCFtLmlzVmFsaWQoKSkge1xuICAgICAgICByZXR1cm4gbS5sb2NhbGVEYXRhKCkuaW52YWxpZERhdGUoKTtcbiAgICB9XG5cbiAgICBmb3JtYXQgPSBleHBhbmRGb3JtYXQoZm9ybWF0LCBtLmxvY2FsZURhdGEoKSk7XG4gICAgZm9ybWF0RnVuY3Rpb25zW2Zvcm1hdF0gPVxuICAgICAgICBmb3JtYXRGdW5jdGlvbnNbZm9ybWF0XSB8fCBtYWtlRm9ybWF0RnVuY3Rpb24oZm9ybWF0KTtcblxuICAgIHJldHVybiBmb3JtYXRGdW5jdGlvbnNbZm9ybWF0XShtKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGV4cGFuZEZvcm1hdChmb3JtYXQsIGxvY2FsZSkge1xuICAgIHZhciBpID0gNTtcblxuICAgIGZ1bmN0aW9uIHJlcGxhY2VMb25nRGF0ZUZvcm1hdFRva2VucyhpbnB1dCkge1xuICAgICAgICByZXR1cm4gbG9jYWxlLmxvbmdEYXRlRm9ybWF0KGlucHV0KSB8fCBpbnB1dDtcbiAgICB9XG5cbiAgICBsb2NhbEZvcm1hdHRpbmdUb2tlbnMubGFzdEluZGV4ID0gMDtcbiAgICB3aGlsZSAoaSA+PSAwICYmIGxvY2FsRm9ybWF0dGluZ1Rva2Vucy50ZXN0KGZvcm1hdCkpIHtcbiAgICAgICAgZm9ybWF0ID0gZm9ybWF0LnJlcGxhY2UoXG4gICAgICAgICAgICBsb2NhbEZvcm1hdHRpbmdUb2tlbnMsXG4gICAgICAgICAgICByZXBsYWNlTG9uZ0RhdGVGb3JtYXRUb2tlbnNcbiAgICAgICAgKTtcbiAgICAgICAgbG9jYWxGb3JtYXR0aW5nVG9rZW5zLmxhc3RJbmRleCA9IDA7XG4gICAgICAgIGkgLT0gMTtcbiAgICB9XG5cbiAgICByZXR1cm4gZm9ybWF0O1xufVxuIiwiaW1wb3J0IHsgZm9ybWF0dGluZ1Rva2VucyB9IGZyb20gJy4uL2Zvcm1hdC9mb3JtYXQnO1xuXG5leHBvcnQgdmFyIGRlZmF1bHRMb25nRGF0ZUZvcm1hdCA9IHtcbiAgICBMVFM6ICdoOm1tOnNzIEEnLFxuICAgIExUOiAnaDptbSBBJyxcbiAgICBMOiAnTU0vREQvWVlZWScsXG4gICAgTEw6ICdNTU1NIEQsIFlZWVknLFxuICAgIExMTDogJ01NTU0gRCwgWVlZWSBoOm1tIEEnLFxuICAgIExMTEw6ICdkZGRkLCBNTU1NIEQsIFlZWVkgaDptbSBBJyxcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBsb25nRGF0ZUZvcm1hdChrZXkpIHtcbiAgICB2YXIgZm9ybWF0ID0gdGhpcy5fbG9uZ0RhdGVGb3JtYXRba2V5XSxcbiAgICAgICAgZm9ybWF0VXBwZXIgPSB0aGlzLl9sb25nRGF0ZUZvcm1hdFtrZXkudG9VcHBlckNhc2UoKV07XG5cbiAgICBpZiAoZm9ybWF0IHx8ICFmb3JtYXRVcHBlcikge1xuICAgICAgICByZXR1cm4gZm9ybWF0O1xuICAgIH1cblxuICAgIHRoaXMuX2xvbmdEYXRlRm9ybWF0W2tleV0gPSBmb3JtYXRVcHBlclxuICAgICAgICAubWF0Y2goZm9ybWF0dGluZ1Rva2VucylcbiAgICAgICAgLm1hcChmdW5jdGlvbiAodG9rKSB7XG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgdG9rID09PSAnTU1NTScgfHxcbiAgICAgICAgICAgICAgICB0b2sgPT09ICdNTScgfHxcbiAgICAgICAgICAgICAgICB0b2sgPT09ICdERCcgfHxcbiAgICAgICAgICAgICAgICB0b2sgPT09ICdkZGRkJ1xuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRvay5zbGljZSgxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0b2s7XG4gICAgICAgIH0pXG4gICAgICAgIC5qb2luKCcnKTtcblxuICAgIHJldHVybiB0aGlzLl9sb25nRGF0ZUZvcm1hdFtrZXldO1xufVxuIiwiZXhwb3J0IHZhciBkZWZhdWx0SW52YWxpZERhdGUgPSAnSW52YWxpZCBkYXRlJztcblxuZXhwb3J0IGZ1bmN0aW9uIGludmFsaWREYXRlKCkge1xuICAgIHJldHVybiB0aGlzLl9pbnZhbGlkRGF0ZTtcbn1cbiIsInZhciBkZWZhdWx0T3JkaW5hbCA9ICclZCcsXG4gICAgZGVmYXVsdERheU9mTW9udGhPcmRpbmFsUGFyc2UgPSAvXFxkezEsMn0vO1xuXG5leHBvcnQgeyBkZWZhdWx0T3JkaW5hbCwgZGVmYXVsdERheU9mTW9udGhPcmRpbmFsUGFyc2UgfTtcblxuZXhwb3J0IGZ1bmN0aW9uIG9yZGluYWwobnVtYmVyKSB7XG4gICAgcmV0dXJuIHRoaXMuX29yZGluYWwucmVwbGFjZSgnJWQnLCBudW1iZXIpO1xufVxuIiwiZXhwb3J0IHZhciBkZWZhdWx0UmVsYXRpdmVUaW1lID0ge1xuICAgIGZ1dHVyZTogJ2luICVzJyxcbiAgICBwYXN0OiAnJXMgYWdvJyxcbiAgICBzOiAnYSBmZXcgc2Vjb25kcycsXG4gICAgc3M6ICclZCBzZWNvbmRzJyxcbiAgICBtOiAnYSBtaW51dGUnLFxuICAgIG1tOiAnJWQgbWludXRlcycsXG4gICAgaDogJ2FuIGhvdXInLFxuICAgIGhoOiAnJWQgaG91cnMnLFxuICAgIGQ6ICdhIGRheScsXG4gICAgZGQ6ICclZCBkYXlzJyxcbiAgICB3OiAnYSB3ZWVrJyxcbiAgICB3dzogJyVkIHdlZWtzJyxcbiAgICBNOiAnYSBtb250aCcsXG4gICAgTU06ICclZCBtb250aHMnLFxuICAgIHk6ICdhIHllYXInLFxuICAgIHl5OiAnJWQgeWVhcnMnLFxufTtcblxuaW1wb3J0IGlzRnVuY3Rpb24gZnJvbSAnLi4vdXRpbHMvaXMtZnVuY3Rpb24nO1xuXG5leHBvcnQgZnVuY3Rpb24gcmVsYXRpdmVUaW1lKG51bWJlciwgd2l0aG91dFN1ZmZpeCwgc3RyaW5nLCBpc0Z1dHVyZSkge1xuICAgIHZhciBvdXRwdXQgPSB0aGlzLl9yZWxhdGl2ZVRpbWVbc3RyaW5nXTtcbiAgICByZXR1cm4gaXNGdW5jdGlvbihvdXRwdXQpXG4gICAgICAgID8gb3V0cHV0KG51bWJlciwgd2l0aG91dFN1ZmZpeCwgc3RyaW5nLCBpc0Z1dHVyZSlcbiAgICAgICAgOiBvdXRwdXQucmVwbGFjZSgvJWQvaSwgbnVtYmVyKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhc3RGdXR1cmUoZGlmZiwgb3V0cHV0KSB7XG4gICAgdmFyIGZvcm1hdCA9IHRoaXMuX3JlbGF0aXZlVGltZVtkaWZmID4gMCA/ICdmdXR1cmUnIDogJ3Bhc3QnXTtcbiAgICByZXR1cm4gaXNGdW5jdGlvbihmb3JtYXQpID8gZm9ybWF0KG91dHB1dCkgOiBmb3JtYXQucmVwbGFjZSgvJXMvaSwgb3V0cHV0KTtcbn1cbiIsImltcG9ydCBoYXNPd25Qcm9wIGZyb20gJy4uL3V0aWxzL2hhcy1vd24tcHJvcCc7XG5cbnZhciBhbGlhc2VzID0ge1xuICAgIEQ6ICdkYXRlJyxcbiAgICBkYXRlczogJ2RhdGUnLFxuICAgIGRhdGU6ICdkYXRlJyxcbiAgICBkOiAnZGF5JyxcbiAgICBkYXlzOiAnZGF5JyxcbiAgICBkYXk6ICdkYXknLFxuICAgIGU6ICd3ZWVrZGF5JyxcbiAgICB3ZWVrZGF5czogJ3dlZWtkYXknLFxuICAgIHdlZWtkYXk6ICd3ZWVrZGF5JyxcbiAgICBFOiAnaXNvV2Vla2RheScsXG4gICAgaXNvd2Vla2RheXM6ICdpc29XZWVrZGF5JyxcbiAgICBpc293ZWVrZGF5OiAnaXNvV2Vla2RheScsXG4gICAgREREOiAnZGF5T2ZZZWFyJyxcbiAgICBkYXlvZnllYXJzOiAnZGF5T2ZZZWFyJyxcbiAgICBkYXlvZnllYXI6ICdkYXlPZlllYXInLFxuICAgIGg6ICdob3VyJyxcbiAgICBob3VyczogJ2hvdXInLFxuICAgIGhvdXI6ICdob3VyJyxcbiAgICBtczogJ21pbGxpc2Vjb25kJyxcbiAgICBtaWxsaXNlY29uZHM6ICdtaWxsaXNlY29uZCcsXG4gICAgbWlsbGlzZWNvbmQ6ICdtaWxsaXNlY29uZCcsXG4gICAgbTogJ21pbnV0ZScsXG4gICAgbWludXRlczogJ21pbnV0ZScsXG4gICAgbWludXRlOiAnbWludXRlJyxcbiAgICBNOiAnbW9udGgnLFxuICAgIG1vbnRoczogJ21vbnRoJyxcbiAgICBtb250aDogJ21vbnRoJyxcbiAgICBROiAncXVhcnRlcicsXG4gICAgcXVhcnRlcnM6ICdxdWFydGVyJyxcbiAgICBxdWFydGVyOiAncXVhcnRlcicsXG4gICAgczogJ3NlY29uZCcsXG4gICAgc2Vjb25kczogJ3NlY29uZCcsXG4gICAgc2Vjb25kOiAnc2Vjb25kJyxcbiAgICBnZzogJ3dlZWtZZWFyJyxcbiAgICB3ZWVreWVhcnM6ICd3ZWVrWWVhcicsXG4gICAgd2Vla3llYXI6ICd3ZWVrWWVhcicsXG4gICAgR0c6ICdpc29XZWVrWWVhcicsXG4gICAgaXNvd2Vla3llYXJzOiAnaXNvV2Vla1llYXInLFxuICAgIGlzb3dlZWt5ZWFyOiAnaXNvV2Vla1llYXInLFxuICAgIHc6ICd3ZWVrJyxcbiAgICB3ZWVrczogJ3dlZWsnLFxuICAgIHdlZWs6ICd3ZWVrJyxcbiAgICBXOiAnaXNvV2VlaycsXG4gICAgaXNvd2Vla3M6ICdpc29XZWVrJyxcbiAgICBpc293ZWVrOiAnaXNvV2VlaycsXG4gICAgeTogJ3llYXInLFxuICAgIHllYXJzOiAneWVhcicsXG4gICAgeWVhcjogJ3llYXInLFxufTtcblxuZXhwb3J0IGZ1bmN0aW9uIG5vcm1hbGl6ZVVuaXRzKHVuaXRzKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB1bml0cyA9PT0gJ3N0cmluZydcbiAgICAgICAgPyBhbGlhc2VzW3VuaXRzXSB8fCBhbGlhc2VzW3VuaXRzLnRvTG93ZXJDYXNlKCldXG4gICAgICAgIDogdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbm9ybWFsaXplT2JqZWN0VW5pdHMoaW5wdXRPYmplY3QpIHtcbiAgICB2YXIgbm9ybWFsaXplZElucHV0ID0ge30sXG4gICAgICAgIG5vcm1hbGl6ZWRQcm9wLFxuICAgICAgICBwcm9wO1xuXG4gICAgZm9yIChwcm9wIGluIGlucHV0T2JqZWN0KSB7XG4gICAgICAgIGlmIChoYXNPd25Qcm9wKGlucHV0T2JqZWN0LCBwcm9wKSkge1xuICAgICAgICAgICAgbm9ybWFsaXplZFByb3AgPSBub3JtYWxpemVVbml0cyhwcm9wKTtcbiAgICAgICAgICAgIGlmIChub3JtYWxpemVkUHJvcCkge1xuICAgICAgICAgICAgICAgIG5vcm1hbGl6ZWRJbnB1dFtub3JtYWxpemVkUHJvcF0gPSBpbnB1dE9iamVjdFtwcm9wXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBub3JtYWxpemVkSW5wdXQ7XG59XG4iLCJpbXBvcnQgaGFzT3duUHJvcCBmcm9tICcuLi91dGlscy9oYXMtb3duLXByb3AnO1xuXG52YXIgcHJpb3JpdGllcyA9IHtcbiAgICBkYXRlOiA5LFxuICAgIGRheTogMTEsXG4gICAgd2Vla2RheTogMTEsXG4gICAgaXNvV2Vla2RheTogMTEsXG4gICAgZGF5T2ZZZWFyOiA0LFxuICAgIGhvdXI6IDEzLFxuICAgIG1pbGxpc2Vjb25kOiAxNixcbiAgICBtaW51dGU6IDE0LFxuICAgIG1vbnRoOiA4LFxuICAgIHF1YXJ0ZXI6IDcsXG4gICAgc2Vjb25kOiAxNSxcbiAgICB3ZWVrWWVhcjogMSxcbiAgICBpc29XZWVrWWVhcjogMSxcbiAgICB3ZWVrOiA1LFxuICAgIGlzb1dlZWs6IDUsXG4gICAgeWVhcjogMSxcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRQcmlvcml0aXplZFVuaXRzKHVuaXRzT2JqKSB7XG4gICAgdmFyIHVuaXRzID0gW10sXG4gICAgICAgIHU7XG4gICAgZm9yICh1IGluIHVuaXRzT2JqKSB7XG4gICAgICAgIGlmIChoYXNPd25Qcm9wKHVuaXRzT2JqLCB1KSkge1xuICAgICAgICAgICAgdW5pdHMucHVzaCh7IHVuaXQ6IHUsIHByaW9yaXR5OiBwcmlvcml0aWVzW3VdIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHVuaXRzLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgcmV0dXJuIGEucHJpb3JpdHkgLSBiLnByaW9yaXR5O1xuICAgIH0pO1xuICAgIHJldHVybiB1bml0cztcbn1cbiIsInZhciBtYXRjaDEgPSAvXFxkLywgLy8gICAgICAgMCAtIDlcbiAgICBtYXRjaDIgPSAvXFxkXFxkLywgLy8gICAgICAwMCAtIDk5XG4gICAgbWF0Y2gzID0gL1xcZHszfS8sIC8vICAgICAwMDAgLSA5OTlcbiAgICBtYXRjaDQgPSAvXFxkezR9LywgLy8gICAgMDAwMCAtIDk5OTlcbiAgICBtYXRjaDYgPSAvWystXT9cXGR7Nn0vLCAvLyAtOTk5OTk5IC0gOTk5OTk5XG4gICAgbWF0Y2gxdG8yID0gL1xcZFxcZD8vLCAvLyAgICAgICAwIC0gOTlcbiAgICBtYXRjaDN0bzQgPSAvXFxkXFxkXFxkXFxkPy8sIC8vICAgICA5OTkgLSA5OTk5XG4gICAgbWF0Y2g1dG82ID0gL1xcZFxcZFxcZFxcZFxcZFxcZD8vLCAvLyAgIDk5OTk5IC0gOTk5OTk5XG4gICAgbWF0Y2gxdG8zID0gL1xcZHsxLDN9LywgLy8gICAgICAgMCAtIDk5OVxuICAgIG1hdGNoMXRvNCA9IC9cXGR7MSw0fS8sIC8vICAgICAgIDAgLSA5OTk5XG4gICAgbWF0Y2gxdG82ID0gL1srLV0/XFxkezEsNn0vLCAvLyAtOTk5OTk5IC0gOTk5OTk5XG4gICAgbWF0Y2hVbnNpZ25lZCA9IC9cXGQrLywgLy8gICAgICAgMCAtIGluZlxuICAgIG1hdGNoU2lnbmVkID0gL1srLV0/XFxkKy8sIC8vICAgIC1pbmYgLSBpbmZcbiAgICBtYXRjaE9mZnNldCA9IC9afFsrLV1cXGRcXGQ6P1xcZFxcZC9naSwgLy8gKzAwOjAwIC0wMDowMCArMDAwMCAtMDAwMCBvciBaXG4gICAgbWF0Y2hTaG9ydE9mZnNldCA9IC9afFsrLV1cXGRcXGQoPzo6P1xcZFxcZCk/L2dpLCAvLyArMDAgLTAwICswMDowMCAtMDA6MDAgKzAwMDAgLTAwMDAgb3IgWlxuICAgIG1hdGNoVGltZXN0YW1wID0gL1srLV0/XFxkKyhcXC5cXGR7MSwzfSk/LywgLy8gMTIzNDU2Nzg5IDEyMzQ1Njc4OS4xMjNcbiAgICAvLyBhbnkgd29yZCAob3IgdHdvKSBjaGFyYWN0ZXJzIG9yIG51bWJlcnMgaW5jbHVkaW5nIHR3by90aHJlZSB3b3JkIG1vbnRoIGluIGFyYWJpYy5cbiAgICAvLyBpbmNsdWRlcyBzY290dGlzaCBnYWVsaWMgdHdvIHdvcmQgYW5kIGh5cGhlbmF0ZWQgbW9udGhzXG4gICAgbWF0Y2hXb3JkID1cbiAgICAgICAgL1swLTldezAsMjU2fVsnYS16XFx1MDBBMC1cXHUwNUZGXFx1MDcwMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRjA3XFx1RkYxMC1cXHVGRkVGXXsxLDI1Nn18W1xcdTA2MDAtXFx1MDZGRlxcL117MSwyNTZ9KFxccyo/W1xcdTA2MDAtXFx1MDZGRl17MSwyNTZ9KXsxLDJ9L2ksXG4gICAgbWF0Y2gxdG8yTm9MZWFkaW5nWmVybyA9IC9eWzEtOV1cXGQ/LywgLy8gICAgICAgICAxLTk5XG4gICAgbWF0Y2gxdG8ySGFzWmVybyA9IC9eKFsxLTldXFxkfFxcZCkvLCAvLyAgICAgICAgICAgMC05OVxuICAgIHJlZ2V4ZXM7XG5cbmV4cG9ydCB7XG4gICAgbWF0Y2gxLFxuICAgIG1hdGNoMixcbiAgICBtYXRjaDMsXG4gICAgbWF0Y2g0LFxuICAgIG1hdGNoNixcbiAgICBtYXRjaDF0bzIsXG4gICAgbWF0Y2gzdG80LFxuICAgIG1hdGNoNXRvNixcbiAgICBtYXRjaDF0bzMsXG4gICAgbWF0Y2gxdG80LFxuICAgIG1hdGNoMXRvNixcbiAgICBtYXRjaFVuc2lnbmVkLFxuICAgIG1hdGNoU2lnbmVkLFxuICAgIG1hdGNoT2Zmc2V0LFxuICAgIG1hdGNoU2hvcnRPZmZzZXQsXG4gICAgbWF0Y2hUaW1lc3RhbXAsXG4gICAgbWF0Y2hXb3JkLFxuICAgIG1hdGNoMXRvMk5vTGVhZGluZ1plcm8sXG4gICAgbWF0Y2gxdG8ySGFzWmVybyxcbn07XG5cbmltcG9ydCBoYXNPd25Qcm9wIGZyb20gJy4uL3V0aWxzL2hhcy1vd24tcHJvcCc7XG5pbXBvcnQgaXNGdW5jdGlvbiBmcm9tICcuLi91dGlscy9pcy1mdW5jdGlvbic7XG5cbnJlZ2V4ZXMgPSB7fTtcblxuZXhwb3J0IGZ1bmN0aW9uIGFkZFJlZ2V4VG9rZW4odG9rZW4sIHJlZ2V4LCBzdHJpY3RSZWdleCkge1xuICAgIHJlZ2V4ZXNbdG9rZW5dID0gaXNGdW5jdGlvbihyZWdleClcbiAgICAgICAgPyByZWdleFxuICAgICAgICA6IGZ1bmN0aW9uIChpc1N0cmljdCwgbG9jYWxlRGF0YSkge1xuICAgICAgICAgICAgICByZXR1cm4gaXNTdHJpY3QgJiYgc3RyaWN0UmVnZXggPyBzdHJpY3RSZWdleCA6IHJlZ2V4O1xuICAgICAgICAgIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRQYXJzZVJlZ2V4Rm9yVG9rZW4odG9rZW4sIGNvbmZpZykge1xuICAgIGlmICghaGFzT3duUHJvcChyZWdleGVzLCB0b2tlbikpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBSZWdFeHAodW5lc2NhcGVGb3JtYXQodG9rZW4pKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVnZXhlc1t0b2tlbl0oY29uZmlnLl9zdHJpY3QsIGNvbmZpZy5fbG9jYWxlKTtcbn1cblxuLy8gQ29kZSBmcm9tIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMzU2MTQ5My9pcy10aGVyZS1hLXJlZ2V4cC1lc2NhcGUtZnVuY3Rpb24taW4tamF2YXNjcmlwdFxuZnVuY3Rpb24gdW5lc2NhcGVGb3JtYXQocykge1xuICAgIHJldHVybiByZWdleEVzY2FwZShcbiAgICAgICAgc1xuICAgICAgICAgICAgLnJlcGxhY2UoJ1xcXFwnLCAnJylcbiAgICAgICAgICAgIC5yZXBsYWNlKFxuICAgICAgICAgICAgICAgIC9cXFxcKFxcWyl8XFxcXChcXF0pfFxcWyhbXlxcXVxcW10qKVxcXXxcXFxcKC4pL2csXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gKG1hdGNoZWQsIHAxLCBwMiwgcDMsIHA0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwMSB8fCBwMiB8fCBwMyB8fCBwNDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApXG4gICAgKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlZ2V4RXNjYXBlKHMpIHtcbiAgICByZXR1cm4gcy5yZXBsYWNlKC9bLVxcL1xcXFxeJCorPy4oKXxbXFxde31dL2csICdcXFxcJCYnKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFic0Zsb29yKG51bWJlcikge1xuICAgIGlmIChudW1iZXIgPCAwKSB7XG4gICAgICAgIC8vIC0wIC0+IDBcbiAgICAgICAgcmV0dXJuIE1hdGguY2VpbChudW1iZXIpIHx8IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IobnVtYmVyKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgYWJzRmxvb3IgZnJvbSAnLi9hYnMtZmxvb3InO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0b0ludChhcmd1bWVudEZvckNvZXJjaW9uKSB7XG4gICAgdmFyIGNvZXJjZWROdW1iZXIgPSArYXJndW1lbnRGb3JDb2VyY2lvbixcbiAgICAgICAgdmFsdWUgPSAwO1xuXG4gICAgaWYgKGNvZXJjZWROdW1iZXIgIT09IDAgJiYgaXNGaW5pdGUoY29lcmNlZE51bWJlcikpIHtcbiAgICAgICAgdmFsdWUgPSBhYnNGbG9vcihjb2VyY2VkTnVtYmVyKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsdWU7XG59XG4iLCJpbXBvcnQgaGFzT3duUHJvcCBmcm9tICcuLi91dGlscy9oYXMtb3duLXByb3AnO1xuaW1wb3J0IGlzTnVtYmVyIGZyb20gJy4uL3V0aWxzL2lzLW51bWJlcic7XG5pbXBvcnQgdG9JbnQgZnJvbSAnLi4vdXRpbHMvdG8taW50JztcblxudmFyIHRva2VucyA9IHt9O1xuXG5leHBvcnQgZnVuY3Rpb24gYWRkUGFyc2VUb2tlbih0b2tlbiwgY2FsbGJhY2spIHtcbiAgICB2YXIgaSxcbiAgICAgICAgZnVuYyA9IGNhbGxiYWNrLFxuICAgICAgICB0b2tlbkxlbjtcbiAgICBpZiAodHlwZW9mIHRva2VuID09PSAnc3RyaW5nJykge1xuICAgICAgICB0b2tlbiA9IFt0b2tlbl07XG4gICAgfVxuICAgIGlmIChpc051bWJlcihjYWxsYmFjaykpIHtcbiAgICAgICAgZnVuYyA9IGZ1bmN0aW9uIChpbnB1dCwgYXJyYXkpIHtcbiAgICAgICAgICAgIGFycmF5W2NhbGxiYWNrXSA9IHRvSW50KGlucHV0KTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgdG9rZW5MZW4gPSB0b2tlbi5sZW5ndGg7XG4gICAgZm9yIChpID0gMDsgaSA8IHRva2VuTGVuOyBpKyspIHtcbiAgICAgICAgdG9rZW5zW3Rva2VuW2ldXSA9IGZ1bmM7XG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gYWRkV2Vla1BhcnNlVG9rZW4odG9rZW4sIGNhbGxiYWNrKSB7XG4gICAgYWRkUGFyc2VUb2tlbih0b2tlbiwgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnLCB0b2tlbikge1xuICAgICAgICBjb25maWcuX3cgPSBjb25maWcuX3cgfHwge307XG4gICAgICAgIGNhbGxiYWNrKGlucHV0LCBjb25maWcuX3csIGNvbmZpZywgdG9rZW4pO1xuICAgIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYWRkVGltZVRvQXJyYXlGcm9tVG9rZW4odG9rZW4sIGlucHV0LCBjb25maWcpIHtcbiAgICBpZiAoaW5wdXQgIT0gbnVsbCAmJiBoYXNPd25Qcm9wKHRva2VucywgdG9rZW4pKSB7XG4gICAgICAgIHRva2Vuc1t0b2tlbl0oaW5wdXQsIGNvbmZpZy5fYSwgY29uZmlnLCB0b2tlbik7XG4gICAgfVxufVxuIiwiZXhwb3J0IGZ1bmN0aW9uIGlzTGVhcFllYXIoeWVhcikge1xuICAgIHJldHVybiAoeWVhciAlIDQgPT09IDAgJiYgeWVhciAlIDEwMCAhPT0gMCkgfHwgeWVhciAlIDQwMCA9PT0gMDtcbn1cbiIsImV4cG9ydCB2YXIgWUVBUiA9IDAsXG4gICAgTU9OVEggPSAxLFxuICAgIERBVEUgPSAyLFxuICAgIEhPVVIgPSAzLFxuICAgIE1JTlVURSA9IDQsXG4gICAgU0VDT05EID0gNSxcbiAgICBNSUxMSVNFQ09ORCA9IDYsXG4gICAgV0VFSyA9IDcsXG4gICAgV0VFS0RBWSA9IDg7XG4iLCJpbXBvcnQgeyBtYWtlR2V0U2V0IH0gZnJvbSAnLi4vbW9tZW50L2dldC1zZXQnO1xuaW1wb3J0IHsgYWRkRm9ybWF0VG9rZW4gfSBmcm9tICcuLi9mb3JtYXQvZm9ybWF0JztcbmltcG9ydCB7XG4gICAgYWRkUmVnZXhUb2tlbixcbiAgICBtYXRjaDF0bzIsXG4gICAgbWF0Y2gxdG80LFxuICAgIG1hdGNoMXRvNixcbiAgICBtYXRjaDIsXG4gICAgbWF0Y2g0LFxuICAgIG1hdGNoNixcbiAgICBtYXRjaFNpZ25lZCxcbn0gZnJvbSAnLi4vcGFyc2UvcmVnZXgnO1xuaW1wb3J0IHsgYWRkUGFyc2VUb2tlbiB9IGZyb20gJy4uL3BhcnNlL3Rva2VuJztcbmltcG9ydCB7IGlzTGVhcFllYXIgfSBmcm9tICcuLi91dGlscy9pcy1sZWFwLXllYXInO1xuaW1wb3J0IHsgaG9va3MgfSBmcm9tICcuLi91dGlscy9ob29rcyc7XG5pbXBvcnQgeyBZRUFSIH0gZnJvbSAnLi9jb25zdGFudHMnO1xuaW1wb3J0IHRvSW50IGZyb20gJy4uL3V0aWxzL3RvLWludCc7XG5pbXBvcnQgemVyb0ZpbGwgZnJvbSAnLi4vdXRpbHMvemVyby1maWxsJztcblxuLy8gRk9STUFUVElOR1xuXG5hZGRGb3JtYXRUb2tlbignWScsIDAsIDAsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgeSA9IHRoaXMueWVhcigpO1xuICAgIHJldHVybiB5IDw9IDk5OTkgPyB6ZXJvRmlsbCh5LCA0KSA6ICcrJyArIHk7XG59KTtcblxuYWRkRm9ybWF0VG9rZW4oMCwgWydZWScsIDJdLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMueWVhcigpICUgMTAwO1xufSk7XG5cbmFkZEZvcm1hdFRva2VuKDAsIFsnWVlZWScsIDRdLCAwLCAneWVhcicpO1xuYWRkRm9ybWF0VG9rZW4oMCwgWydZWVlZWScsIDVdLCAwLCAneWVhcicpO1xuYWRkRm9ybWF0VG9rZW4oMCwgWydZWVlZWVknLCA2LCB0cnVlXSwgMCwgJ3llYXInKTtcblxuLy8gUEFSU0lOR1xuXG5hZGRSZWdleFRva2VuKCdZJywgbWF0Y2hTaWduZWQpO1xuYWRkUmVnZXhUb2tlbignWVknLCBtYXRjaDF0bzIsIG1hdGNoMik7XG5hZGRSZWdleFRva2VuKCdZWVlZJywgbWF0Y2gxdG80LCBtYXRjaDQpO1xuYWRkUmVnZXhUb2tlbignWVlZWVknLCBtYXRjaDF0bzYsIG1hdGNoNik7XG5hZGRSZWdleFRva2VuKCdZWVlZWVknLCBtYXRjaDF0bzYsIG1hdGNoNik7XG5cbmFkZFBhcnNlVG9rZW4oWydZWVlZWScsICdZWVlZWVknXSwgWUVBUik7XG5hZGRQYXJzZVRva2VuKCdZWVlZJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSkge1xuICAgIGFycmF5W1lFQVJdID1cbiAgICAgICAgaW5wdXQubGVuZ3RoID09PSAyID8gaG9va3MucGFyc2VUd29EaWdpdFllYXIoaW5wdXQpIDogdG9JbnQoaW5wdXQpO1xufSk7XG5hZGRQYXJzZVRva2VuKCdZWScsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXkpIHtcbiAgICBhcnJheVtZRUFSXSA9IGhvb2tzLnBhcnNlVHdvRGlnaXRZZWFyKGlucHV0KTtcbn0pO1xuYWRkUGFyc2VUb2tlbignWScsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXkpIHtcbiAgICBhcnJheVtZRUFSXSA9IHBhcnNlSW50KGlucHV0LCAxMCk7XG59KTtcblxuLy8gSEVMUEVSU1xuXG5leHBvcnQgZnVuY3Rpb24gZGF5c0luWWVhcih5ZWFyKSB7XG4gICAgcmV0dXJuIGlzTGVhcFllYXIoeWVhcikgPyAzNjYgOiAzNjU7XG59XG5cbmV4cG9ydCB7IGlzTGVhcFllYXIgfTtcblxuLy8gSE9PS1NcblxuaG9va3MucGFyc2VUd29EaWdpdFllYXIgPSBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICByZXR1cm4gdG9JbnQoaW5wdXQpICsgKHRvSW50KGlucHV0KSA+IDY4ID8gMTkwMCA6IDIwMDApO1xufTtcblxuLy8gTU9NRU5UU1xuXG5leHBvcnQgdmFyIGdldFNldFllYXIgPSBtYWtlR2V0U2V0KCdGdWxsWWVhcicsIHRydWUpO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0SXNMZWFwWWVhcigpIHtcbiAgICByZXR1cm4gaXNMZWFwWWVhcih0aGlzLnllYXIoKSk7XG59XG4iLCJpbXBvcnQgeyBub3JtYWxpemVVbml0cywgbm9ybWFsaXplT2JqZWN0VW5pdHMgfSBmcm9tICcuLi91bml0cy9hbGlhc2VzJztcbmltcG9ydCB7IGdldFByaW9yaXRpemVkVW5pdHMgfSBmcm9tICcuLi91bml0cy9wcmlvcml0aWVzJztcbmltcG9ydCB7IGhvb2tzIH0gZnJvbSAnLi4vdXRpbHMvaG9va3MnO1xuaW1wb3J0IGlzRnVuY3Rpb24gZnJvbSAnLi4vdXRpbHMvaXMtZnVuY3Rpb24nO1xuaW1wb3J0IHsgaXNMZWFwWWVhciB9IGZyb20gJy4uL3VuaXRzL3llYXInO1xuXG5leHBvcnQgZnVuY3Rpb24gbWFrZUdldFNldCh1bml0LCBrZWVwVGltZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgaWYgKHZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgICAgIHNldCh0aGlzLCB1bml0LCB2YWx1ZSk7XG4gICAgICAgICAgICBob29rcy51cGRhdGVPZmZzZXQodGhpcywga2VlcFRpbWUpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0KHRoaXMsIHVuaXQpO1xuICAgICAgICB9XG4gICAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldChtb20sIHVuaXQpIHtcbiAgICBpZiAoIW1vbS5pc1ZhbGlkKCkpIHtcbiAgICAgICAgcmV0dXJuIE5hTjtcbiAgICB9XG5cbiAgICB2YXIgZCA9IG1vbS5fZCxcbiAgICAgICAgaXNVVEMgPSBtb20uX2lzVVRDO1xuXG4gICAgc3dpdGNoICh1bml0KSB7XG4gICAgICAgIGNhc2UgJ01pbGxpc2Vjb25kcyc6XG4gICAgICAgICAgICByZXR1cm4gaXNVVEMgPyBkLmdldFVUQ01pbGxpc2Vjb25kcygpIDogZC5nZXRNaWxsaXNlY29uZHMoKTtcbiAgICAgICAgY2FzZSAnU2Vjb25kcyc6XG4gICAgICAgICAgICByZXR1cm4gaXNVVEMgPyBkLmdldFVUQ1NlY29uZHMoKSA6IGQuZ2V0U2Vjb25kcygpO1xuICAgICAgICBjYXNlICdNaW51dGVzJzpcbiAgICAgICAgICAgIHJldHVybiBpc1VUQyA/IGQuZ2V0VVRDTWludXRlcygpIDogZC5nZXRNaW51dGVzKCk7XG4gICAgICAgIGNhc2UgJ0hvdXJzJzpcbiAgICAgICAgICAgIHJldHVybiBpc1VUQyA/IGQuZ2V0VVRDSG91cnMoKSA6IGQuZ2V0SG91cnMoKTtcbiAgICAgICAgY2FzZSAnRGF0ZSc6XG4gICAgICAgICAgICByZXR1cm4gaXNVVEMgPyBkLmdldFVUQ0RhdGUoKSA6IGQuZ2V0RGF0ZSgpO1xuICAgICAgICBjYXNlICdEYXknOlxuICAgICAgICAgICAgcmV0dXJuIGlzVVRDID8gZC5nZXRVVENEYXkoKSA6IGQuZ2V0RGF5KCk7XG4gICAgICAgIGNhc2UgJ01vbnRoJzpcbiAgICAgICAgICAgIHJldHVybiBpc1VUQyA/IGQuZ2V0VVRDTW9udGgoKSA6IGQuZ2V0TW9udGgoKTtcbiAgICAgICAgY2FzZSAnRnVsbFllYXInOlxuICAgICAgICAgICAgcmV0dXJuIGlzVVRDID8gZC5nZXRVVENGdWxsWWVhcigpIDogZC5nZXRGdWxsWWVhcigpO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIE5hTjsgLy8gSnVzdCBpbiBjYXNlXG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gc2V0KG1vbSwgdW5pdCwgdmFsdWUpIHtcbiAgICB2YXIgZCwgaXNVVEMsIHllYXIsIG1vbnRoLCBkYXRlO1xuXG4gICAgaWYgKCFtb20uaXNWYWxpZCgpIHx8IGlzTmFOKHZhbHVlKSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZCA9IG1vbS5fZDtcbiAgICBpc1VUQyA9IG1vbS5faXNVVEM7XG5cbiAgICBzd2l0Y2ggKHVuaXQpIHtcbiAgICAgICAgY2FzZSAnTWlsbGlzZWNvbmRzJzpcbiAgICAgICAgICAgIHJldHVybiB2b2lkIChpc1VUQ1xuICAgICAgICAgICAgICAgID8gZC5zZXRVVENNaWxsaXNlY29uZHModmFsdWUpXG4gICAgICAgICAgICAgICAgOiBkLnNldE1pbGxpc2Vjb25kcyh2YWx1ZSkpO1xuICAgICAgICBjYXNlICdTZWNvbmRzJzpcbiAgICAgICAgICAgIHJldHVybiB2b2lkIChpc1VUQyA/IGQuc2V0VVRDU2Vjb25kcyh2YWx1ZSkgOiBkLnNldFNlY29uZHModmFsdWUpKTtcbiAgICAgICAgY2FzZSAnTWludXRlcyc6XG4gICAgICAgICAgICByZXR1cm4gdm9pZCAoaXNVVEMgPyBkLnNldFVUQ01pbnV0ZXModmFsdWUpIDogZC5zZXRNaW51dGVzKHZhbHVlKSk7XG4gICAgICAgIGNhc2UgJ0hvdXJzJzpcbiAgICAgICAgICAgIHJldHVybiB2b2lkIChpc1VUQyA/IGQuc2V0VVRDSG91cnModmFsdWUpIDogZC5zZXRIb3Vycyh2YWx1ZSkpO1xuICAgICAgICBjYXNlICdEYXRlJzpcbiAgICAgICAgICAgIHJldHVybiB2b2lkIChpc1VUQyA/IGQuc2V0VVRDRGF0ZSh2YWx1ZSkgOiBkLnNldERhdGUodmFsdWUpKTtcbiAgICAgICAgLy8gY2FzZSAnRGF5JzogLy8gTm90IHJlYWxcbiAgICAgICAgLy8gICAgcmV0dXJuIHZvaWQgKGlzVVRDID8gZC5zZXRVVENEYXkodmFsdWUpIDogZC5zZXREYXkodmFsdWUpKTtcbiAgICAgICAgLy8gY2FzZSAnTW9udGgnOiAvLyBOb3QgdXNlZCBiZWNhdXNlIHdlIG5lZWQgdG8gcGFzcyB0d28gdmFyaWFibGVzXG4gICAgICAgIC8vICAgICByZXR1cm4gdm9pZCAoaXNVVEMgPyBkLnNldFVUQ01vbnRoKHZhbHVlKSA6IGQuc2V0TW9udGgodmFsdWUpKTtcbiAgICAgICAgY2FzZSAnRnVsbFllYXInOlxuICAgICAgICAgICAgYnJlYWs7IC8vIFNlZSBiZWxvdyAuLi5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybjsgLy8gSnVzdCBpbiBjYXNlXG4gICAgfVxuXG4gICAgeWVhciA9IHZhbHVlO1xuICAgIG1vbnRoID0gbW9tLm1vbnRoKCk7XG4gICAgZGF0ZSA9IG1vbS5kYXRlKCk7XG4gICAgZGF0ZSA9IGRhdGUgPT09IDI5ICYmIG1vbnRoID09PSAxICYmICFpc0xlYXBZZWFyKHllYXIpID8gMjggOiBkYXRlO1xuICAgIHZvaWQgKGlzVVRDXG4gICAgICAgID8gZC5zZXRVVENGdWxsWWVhcih5ZWFyLCBtb250aCwgZGF0ZSlcbiAgICAgICAgOiBkLnNldEZ1bGxZZWFyKHllYXIsIG1vbnRoLCBkYXRlKSk7XG59XG5cbi8vIE1PTUVOVFNcblxuZXhwb3J0IGZ1bmN0aW9uIHN0cmluZ0dldCh1bml0cykge1xuICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpO1xuICAgIGlmIChpc0Z1bmN0aW9uKHRoaXNbdW5pdHNdKSkge1xuICAgICAgICByZXR1cm4gdGhpc1t1bml0c10oKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzdHJpbmdTZXQodW5pdHMsIHZhbHVlKSB7XG4gICAgaWYgKHR5cGVvZiB1bml0cyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgdW5pdHMgPSBub3JtYWxpemVPYmplY3RVbml0cyh1bml0cyk7XG4gICAgICAgIHZhciBwcmlvcml0aXplZCA9IGdldFByaW9yaXRpemVkVW5pdHModW5pdHMpLFxuICAgICAgICAgICAgaSxcbiAgICAgICAgICAgIHByaW9yaXRpemVkTGVuID0gcHJpb3JpdGl6ZWQubGVuZ3RoO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgcHJpb3JpdGl6ZWRMZW47IGkrKykge1xuICAgICAgICAgICAgdGhpc1twcmlvcml0aXplZFtpXS51bml0XSh1bml0c1twcmlvcml0aXplZFtpXS51bml0XSk7XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKTtcbiAgICAgICAgaWYgKGlzRnVuY3Rpb24odGhpc1t1bml0c10pKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpc1t1bml0c10odmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbW9kKG4sIHgpIHtcbiAgICByZXR1cm4gKChuICUgeCkgKyB4KSAlIHg7XG59XG4iLCJ2YXIgaW5kZXhPZjtcblxuaWYgKEFycmF5LnByb3RvdHlwZS5pbmRleE9mKSB7XG4gICAgaW5kZXhPZiA9IEFycmF5LnByb3RvdHlwZS5pbmRleE9mO1xufSBlbHNlIHtcbiAgICBpbmRleE9mID0gZnVuY3Rpb24gKG8pIHtcbiAgICAgICAgLy8gSSBrbm93XG4gICAgICAgIHZhciBpO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgaWYgKHRoaXNbaV0gPT09IG8pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gLTE7XG4gICAgfTtcbn1cblxuZXhwb3J0IHsgaW5kZXhPZiBhcyBkZWZhdWx0IH07XG4iLCJpbXBvcnQgeyBnZXQgfSBmcm9tICcuLi9tb21lbnQvZ2V0LXNldCc7XG5pbXBvcnQgaGFzT3duUHJvcCBmcm9tICcuLi91dGlscy9oYXMtb3duLXByb3AnO1xuaW1wb3J0IHsgYWRkRm9ybWF0VG9rZW4gfSBmcm9tICcuLi9mb3JtYXQvZm9ybWF0JztcbmltcG9ydCB7XG4gICAgYWRkUmVnZXhUb2tlbixcbiAgICBtYXRjaDF0bzIsXG4gICAgbWF0Y2gyLFxuICAgIG1hdGNoV29yZCxcbiAgICByZWdleEVzY2FwZSxcbiAgICBtYXRjaDF0bzJOb0xlYWRpbmdaZXJvLFxufSBmcm9tICcuLi9wYXJzZS9yZWdleCc7XG5pbXBvcnQgeyBhZGRQYXJzZVRva2VuIH0gZnJvbSAnLi4vcGFyc2UvdG9rZW4nO1xuaW1wb3J0IHsgaG9va3MgfSBmcm9tICcuLi91dGlscy9ob29rcyc7XG5pbXBvcnQgeyBNT05USCB9IGZyb20gJy4vY29uc3RhbnRzJztcbmltcG9ydCB0b0ludCBmcm9tICcuLi91dGlscy90by1pbnQnO1xuaW1wb3J0IGlzQXJyYXkgZnJvbSAnLi4vdXRpbHMvaXMtYXJyYXknO1xuaW1wb3J0IGlzTnVtYmVyIGZyb20gJy4uL3V0aWxzL2lzLW51bWJlcic7XG5pbXBvcnQgbW9kIGZyb20gJy4uL3V0aWxzL21vZCc7XG5pbXBvcnQgaW5kZXhPZiBmcm9tICcuLi91dGlscy9pbmRleC1vZic7XG5pbXBvcnQgeyBjcmVhdGVVVEMgfSBmcm9tICcuLi9jcmVhdGUvdXRjJztcbmltcG9ydCBnZXRQYXJzaW5nRmxhZ3MgZnJvbSAnLi4vY3JlYXRlL3BhcnNpbmctZmxhZ3MnO1xuaW1wb3J0IHsgaXNMZWFwWWVhciB9IGZyb20gJy4uL3V0aWxzL2lzLWxlYXAteWVhcic7XG5cbmV4cG9ydCBmdW5jdGlvbiBkYXlzSW5Nb250aCh5ZWFyLCBtb250aCkge1xuICAgIGlmIChpc05hTih5ZWFyKSB8fCBpc05hTihtb250aCkpIHtcbiAgICAgICAgcmV0dXJuIE5hTjtcbiAgICB9XG4gICAgdmFyIG1vZE1vbnRoID0gbW9kKG1vbnRoLCAxMik7XG4gICAgeWVhciArPSAobW9udGggLSBtb2RNb250aCkgLyAxMjtcbiAgICByZXR1cm4gbW9kTW9udGggPT09IDFcbiAgICAgICAgPyBpc0xlYXBZZWFyKHllYXIpXG4gICAgICAgICAgICA/IDI5XG4gICAgICAgICAgICA6IDI4XG4gICAgICAgIDogMzEgLSAoKG1vZE1vbnRoICUgNykgJSAyKTtcbn1cblxuLy8gRk9STUFUVElOR1xuXG5hZGRGb3JtYXRUb2tlbignTScsIFsnTU0nLCAyXSwgJ01vJywgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLm1vbnRoKCkgKyAxO1xufSk7XG5cbmFkZEZvcm1hdFRva2VuKCdNTU0nLCAwLCAwLCBmdW5jdGlvbiAoZm9ybWF0KSB7XG4gICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLm1vbnRoc1Nob3J0KHRoaXMsIGZvcm1hdCk7XG59KTtcblxuYWRkRm9ybWF0VG9rZW4oJ01NTU0nLCAwLCAwLCBmdW5jdGlvbiAoZm9ybWF0KSB7XG4gICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLm1vbnRocyh0aGlzLCBmb3JtYXQpO1xufSk7XG5cbi8vIFBBUlNJTkdcblxuYWRkUmVnZXhUb2tlbignTScsIG1hdGNoMXRvMiwgbWF0Y2gxdG8yTm9MZWFkaW5nWmVybyk7XG5hZGRSZWdleFRva2VuKCdNTScsIG1hdGNoMXRvMiwgbWF0Y2gyKTtcbmFkZFJlZ2V4VG9rZW4oJ01NTScsIGZ1bmN0aW9uIChpc1N0cmljdCwgbG9jYWxlKSB7XG4gICAgcmV0dXJuIGxvY2FsZS5tb250aHNTaG9ydFJlZ2V4KGlzU3RyaWN0KTtcbn0pO1xuYWRkUmVnZXhUb2tlbignTU1NTScsIGZ1bmN0aW9uIChpc1N0cmljdCwgbG9jYWxlKSB7XG4gICAgcmV0dXJuIGxvY2FsZS5tb250aHNSZWdleChpc1N0cmljdCk7XG59KTtcblxuYWRkUGFyc2VUb2tlbihbJ00nLCAnTU0nXSwgZnVuY3Rpb24gKGlucHV0LCBhcnJheSkge1xuICAgIGFycmF5W01PTlRIXSA9IHRvSW50KGlucHV0KSAtIDE7XG59KTtcblxuYWRkUGFyc2VUb2tlbihbJ01NTScsICdNTU1NJ10sIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZywgdG9rZW4pIHtcbiAgICB2YXIgbW9udGggPSBjb25maWcuX2xvY2FsZS5tb250aHNQYXJzZShpbnB1dCwgdG9rZW4sIGNvbmZpZy5fc3RyaWN0KTtcbiAgICAvLyBpZiB3ZSBkaWRuJ3QgZmluZCBhIG1vbnRoIG5hbWUsIG1hcmsgdGhlIGRhdGUgYXMgaW52YWxpZC5cbiAgICBpZiAobW9udGggIT0gbnVsbCkge1xuICAgICAgICBhcnJheVtNT05USF0gPSBtb250aDtcbiAgICB9IGVsc2Uge1xuICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5pbnZhbGlkTW9udGggPSBpbnB1dDtcbiAgICB9XG59KTtcblxuLy8gTE9DQUxFU1xuXG52YXIgZGVmYXVsdExvY2FsZU1vbnRocyA9XG4gICAgICAgICdKYW51YXJ5X0ZlYnJ1YXJ5X01hcmNoX0FwcmlsX01heV9KdW5lX0p1bHlfQXVndXN0X1NlcHRlbWJlcl9PY3RvYmVyX05vdmVtYmVyX0RlY2VtYmVyJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgIGRlZmF1bHRMb2NhbGVNb250aHNTaG9ydCA9XG4gICAgICAgICdKYW5fRmViX01hcl9BcHJfTWF5X0p1bl9KdWxfQXVnX1NlcF9PY3RfTm92X0RlYycuc3BsaXQoJ18nKSxcbiAgICBNT05USFNfSU5fRk9STUFUID0gL0Rbb0RdPyhcXFtbXlxcW1xcXV0qXFxdfFxccykrTU1NTT8vLFxuICAgIGRlZmF1bHRNb250aHNTaG9ydFJlZ2V4ID0gbWF0Y2hXb3JkLFxuICAgIGRlZmF1bHRNb250aHNSZWdleCA9IG1hdGNoV29yZDtcblxuZXhwb3J0IHsgZGVmYXVsdExvY2FsZU1vbnRocywgZGVmYXVsdExvY2FsZU1vbnRoc1Nob3J0IH07XG5cbmV4cG9ydCBmdW5jdGlvbiBsb2NhbGVNb250aHMobSwgZm9ybWF0KSB7XG4gICAgaWYgKCFtKSB7XG4gICAgICAgIHJldHVybiBpc0FycmF5KHRoaXMuX21vbnRocylcbiAgICAgICAgICAgID8gdGhpcy5fbW9udGhzXG4gICAgICAgICAgICA6IHRoaXMuX21vbnRoc1snc3RhbmRhbG9uZSddO1xuICAgIH1cbiAgICByZXR1cm4gaXNBcnJheSh0aGlzLl9tb250aHMpXG4gICAgICAgID8gdGhpcy5fbW9udGhzW20ubW9udGgoKV1cbiAgICAgICAgOiB0aGlzLl9tb250aHNbXG4gICAgICAgICAgICAgICh0aGlzLl9tb250aHMuaXNGb3JtYXQgfHwgTU9OVEhTX0lOX0ZPUk1BVCkudGVzdChmb3JtYXQpXG4gICAgICAgICAgICAgICAgICA/ICdmb3JtYXQnXG4gICAgICAgICAgICAgICAgICA6ICdzdGFuZGFsb25lJ1xuICAgICAgICAgIF1bbS5tb250aCgpXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGxvY2FsZU1vbnRoc1Nob3J0KG0sIGZvcm1hdCkge1xuICAgIGlmICghbSkge1xuICAgICAgICByZXR1cm4gaXNBcnJheSh0aGlzLl9tb250aHNTaG9ydClcbiAgICAgICAgICAgID8gdGhpcy5fbW9udGhzU2hvcnRcbiAgICAgICAgICAgIDogdGhpcy5fbW9udGhzU2hvcnRbJ3N0YW5kYWxvbmUnXTtcbiAgICB9XG4gICAgcmV0dXJuIGlzQXJyYXkodGhpcy5fbW9udGhzU2hvcnQpXG4gICAgICAgID8gdGhpcy5fbW9udGhzU2hvcnRbbS5tb250aCgpXVxuICAgICAgICA6IHRoaXMuX21vbnRoc1Nob3J0W1xuICAgICAgICAgICAgICBNT05USFNfSU5fRk9STUFULnRlc3QoZm9ybWF0KSA/ICdmb3JtYXQnIDogJ3N0YW5kYWxvbmUnXG4gICAgICAgICAgXVttLm1vbnRoKCldO1xufVxuXG5mdW5jdGlvbiBoYW5kbGVTdHJpY3RQYXJzZShtb250aE5hbWUsIGZvcm1hdCwgc3RyaWN0KSB7XG4gICAgdmFyIGksXG4gICAgICAgIGlpLFxuICAgICAgICBtb20sXG4gICAgICAgIGxsYyA9IG1vbnRoTmFtZS50b0xvY2FsZUxvd2VyQ2FzZSgpO1xuICAgIGlmICghdGhpcy5fbW9udGhzUGFyc2UpIHtcbiAgICAgICAgLy8gdGhpcyBpcyBub3QgdXNlZFxuICAgICAgICB0aGlzLl9tb250aHNQYXJzZSA9IFtdO1xuICAgICAgICB0aGlzLl9sb25nTW9udGhzUGFyc2UgPSBbXTtcbiAgICAgICAgdGhpcy5fc2hvcnRNb250aHNQYXJzZSA9IFtdO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgMTI7ICsraSkge1xuICAgICAgICAgICAgbW9tID0gY3JlYXRlVVRDKFsyMDAwLCBpXSk7XG4gICAgICAgICAgICB0aGlzLl9zaG9ydE1vbnRoc1BhcnNlW2ldID0gdGhpcy5tb250aHNTaG9ydChcbiAgICAgICAgICAgICAgICBtb20sXG4gICAgICAgICAgICAgICAgJydcbiAgICAgICAgICAgICkudG9Mb2NhbGVMb3dlckNhc2UoKTtcbiAgICAgICAgICAgIHRoaXMuX2xvbmdNb250aHNQYXJzZVtpXSA9IHRoaXMubW9udGhzKG1vbSwgJycpLnRvTG9jYWxlTG93ZXJDYXNlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoc3RyaWN0KSB7XG4gICAgICAgIGlmIChmb3JtYXQgPT09ICdNTU0nKSB7XG4gICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9zaG9ydE1vbnRoc1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgcmV0dXJuIGlpICE9PSAtMSA/IGlpIDogbnVsbDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX2xvbmdNb250aHNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgIHJldHVybiBpaSAhPT0gLTEgPyBpaSA6IG51bGw7XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoZm9ybWF0ID09PSAnTU1NJykge1xuICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fc2hvcnRNb250aHNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgIGlmIChpaSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaWk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9sb25nTW9udGhzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICByZXR1cm4gaWkgIT09IC0xID8gaWkgOiBudWxsO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fbG9uZ01vbnRoc1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgaWYgKGlpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX3Nob3J0TW9udGhzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICByZXR1cm4gaWkgIT09IC0xID8gaWkgOiBudWxsO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gbG9jYWxlTW9udGhzUGFyc2UobW9udGhOYW1lLCBmb3JtYXQsIHN0cmljdCkge1xuICAgIHZhciBpLCBtb20sIHJlZ2V4O1xuXG4gICAgaWYgKHRoaXMuX21vbnRoc1BhcnNlRXhhY3QpIHtcbiAgICAgICAgcmV0dXJuIGhhbmRsZVN0cmljdFBhcnNlLmNhbGwodGhpcywgbW9udGhOYW1lLCBmb3JtYXQsIHN0cmljdCk7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLl9tb250aHNQYXJzZSkge1xuICAgICAgICB0aGlzLl9tb250aHNQYXJzZSA9IFtdO1xuICAgICAgICB0aGlzLl9sb25nTW9udGhzUGFyc2UgPSBbXTtcbiAgICAgICAgdGhpcy5fc2hvcnRNb250aHNQYXJzZSA9IFtdO1xuICAgIH1cblxuICAgIC8vIFRPRE86IGFkZCBzb3J0aW5nXG4gICAgLy8gU29ydGluZyBtYWtlcyBzdXJlIGlmIG9uZSBtb250aCAob3IgYWJicikgaXMgYSBwcmVmaXggb2YgYW5vdGhlclxuICAgIC8vIHNlZSBzb3J0aW5nIGluIGNvbXB1dGVNb250aHNQYXJzZVxuICAgIGZvciAoaSA9IDA7IGkgPCAxMjsgaSsrKSB7XG4gICAgICAgIC8vIG1ha2UgdGhlIHJlZ2V4IGlmIHdlIGRvbid0IGhhdmUgaXQgYWxyZWFkeVxuICAgICAgICBtb20gPSBjcmVhdGVVVEMoWzIwMDAsIGldKTtcbiAgICAgICAgaWYgKHN0cmljdCAmJiAhdGhpcy5fbG9uZ01vbnRoc1BhcnNlW2ldKSB7XG4gICAgICAgICAgICB0aGlzLl9sb25nTW9udGhzUGFyc2VbaV0gPSBuZXcgUmVnRXhwKFxuICAgICAgICAgICAgICAgICdeJyArIHRoaXMubW9udGhzKG1vbSwgJycpLnJlcGxhY2UoJy4nLCAnJykgKyAnJCcsXG4gICAgICAgICAgICAgICAgJ2knXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgdGhpcy5fc2hvcnRNb250aHNQYXJzZVtpXSA9IG5ldyBSZWdFeHAoXG4gICAgICAgICAgICAgICAgJ14nICsgdGhpcy5tb250aHNTaG9ydChtb20sICcnKS5yZXBsYWNlKCcuJywgJycpICsgJyQnLFxuICAgICAgICAgICAgICAgICdpJ1xuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXN0cmljdCAmJiAhdGhpcy5fbW9udGhzUGFyc2VbaV0pIHtcbiAgICAgICAgICAgIHJlZ2V4ID1cbiAgICAgICAgICAgICAgICAnXicgKyB0aGlzLm1vbnRocyhtb20sICcnKSArICd8XicgKyB0aGlzLm1vbnRoc1Nob3J0KG1vbSwgJycpO1xuICAgICAgICAgICAgdGhpcy5fbW9udGhzUGFyc2VbaV0gPSBuZXcgUmVnRXhwKHJlZ2V4LnJlcGxhY2UoJy4nLCAnJyksICdpJyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gdGVzdCB0aGUgcmVnZXhcbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgc3RyaWN0ICYmXG4gICAgICAgICAgICBmb3JtYXQgPT09ICdNTU1NJyAmJlxuICAgICAgICAgICAgdGhpcy5fbG9uZ01vbnRoc1BhcnNlW2ldLnRlc3QobW9udGhOYW1lKVxuICAgICAgICApIHtcbiAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgICAgc3RyaWN0ICYmXG4gICAgICAgICAgICBmb3JtYXQgPT09ICdNTU0nICYmXG4gICAgICAgICAgICB0aGlzLl9zaG9ydE1vbnRoc1BhcnNlW2ldLnRlc3QobW9udGhOYW1lKVxuICAgICAgICApIHtcbiAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICB9IGVsc2UgaWYgKCFzdHJpY3QgJiYgdGhpcy5fbW9udGhzUGFyc2VbaV0udGVzdChtb250aE5hbWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuLy8gTU9NRU5UU1xuXG5leHBvcnQgZnVuY3Rpb24gc2V0TW9udGgobW9tLCB2YWx1ZSkge1xuICAgIGlmICghbW9tLmlzVmFsaWQoKSkge1xuICAgICAgICAvLyBObyBvcFxuICAgICAgICByZXR1cm4gbW9tO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGlmICgvXlxcZCskLy50ZXN0KHZhbHVlKSkge1xuICAgICAgICAgICAgdmFsdWUgPSB0b0ludCh2YWx1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YWx1ZSA9IG1vbS5sb2NhbGVEYXRhKCkubW9udGhzUGFyc2UodmFsdWUpO1xuICAgICAgICAgICAgLy8gVE9ETzogQW5vdGhlciBzaWxlbnQgZmFpbHVyZT9cbiAgICAgICAgICAgIGlmICghaXNOdW1iZXIodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1vbTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBtb250aCA9IHZhbHVlLFxuICAgICAgICBkYXRlID0gbW9tLmRhdGUoKTtcblxuICAgIGRhdGUgPSBkYXRlIDwgMjkgPyBkYXRlIDogTWF0aC5taW4oZGF0ZSwgZGF5c0luTW9udGgobW9tLnllYXIoKSwgbW9udGgpKTtcbiAgICB2b2lkIChtb20uX2lzVVRDXG4gICAgICAgID8gbW9tLl9kLnNldFVUQ01vbnRoKG1vbnRoLCBkYXRlKVxuICAgICAgICA6IG1vbS5fZC5zZXRNb250aChtb250aCwgZGF0ZSkpO1xuICAgIHJldHVybiBtb207XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRTZXRNb250aCh2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSAhPSBudWxsKSB7XG4gICAgICAgIHNldE1vbnRoKHRoaXMsIHZhbHVlKTtcbiAgICAgICAgaG9va3MudXBkYXRlT2Zmc2V0KHRoaXMsIHRydWUpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZ2V0KHRoaXMsICdNb250aCcpO1xuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldERheXNJbk1vbnRoKCkge1xuICAgIHJldHVybiBkYXlzSW5Nb250aCh0aGlzLnllYXIoKSwgdGhpcy5tb250aCgpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1vbnRoc1Nob3J0UmVnZXgoaXNTdHJpY3QpIHtcbiAgICBpZiAodGhpcy5fbW9udGhzUGFyc2VFeGFjdCkge1xuICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ19tb250aHNSZWdleCcpKSB7XG4gICAgICAgICAgICBjb21wdXRlTW9udGhzUGFyc2UuY2FsbCh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNTdHJpY3QpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9tb250aHNTaG9ydFN0cmljdFJlZ2V4O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21vbnRoc1Nob3J0UmVnZXg7XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ19tb250aHNTaG9ydFJlZ2V4JykpIHtcbiAgICAgICAgICAgIHRoaXMuX21vbnRoc1Nob3J0UmVnZXggPSBkZWZhdWx0TW9udGhzU2hvcnRSZWdleDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fbW9udGhzU2hvcnRTdHJpY3RSZWdleCAmJiBpc1N0cmljdFxuICAgICAgICAgICAgPyB0aGlzLl9tb250aHNTaG9ydFN0cmljdFJlZ2V4XG4gICAgICAgICAgICA6IHRoaXMuX21vbnRoc1Nob3J0UmVnZXg7XG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gbW9udGhzUmVnZXgoaXNTdHJpY3QpIHtcbiAgICBpZiAodGhpcy5fbW9udGhzUGFyc2VFeGFjdCkge1xuICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ19tb250aHNSZWdleCcpKSB7XG4gICAgICAgICAgICBjb21wdXRlTW9udGhzUGFyc2UuY2FsbCh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNTdHJpY3QpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9tb250aHNTdHJpY3RSZWdleDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9tb250aHNSZWdleDtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX21vbnRoc1JlZ2V4JykpIHtcbiAgICAgICAgICAgIHRoaXMuX21vbnRoc1JlZ2V4ID0gZGVmYXVsdE1vbnRoc1JlZ2V4O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9tb250aHNTdHJpY3RSZWdleCAmJiBpc1N0cmljdFxuICAgICAgICAgICAgPyB0aGlzLl9tb250aHNTdHJpY3RSZWdleFxuICAgICAgICAgICAgOiB0aGlzLl9tb250aHNSZWdleDtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGNvbXB1dGVNb250aHNQYXJzZSgpIHtcbiAgICBmdW5jdGlvbiBjbXBMZW5SZXYoYSwgYikge1xuICAgICAgICByZXR1cm4gYi5sZW5ndGggLSBhLmxlbmd0aDtcbiAgICB9XG5cbiAgICB2YXIgc2hvcnRQaWVjZXMgPSBbXSxcbiAgICAgICAgbG9uZ1BpZWNlcyA9IFtdLFxuICAgICAgICBtaXhlZFBpZWNlcyA9IFtdLFxuICAgICAgICBpLFxuICAgICAgICBtb20sXG4gICAgICAgIHNob3J0UCxcbiAgICAgICAgbG9uZ1A7XG4gICAgZm9yIChpID0gMDsgaSA8IDEyOyBpKyspIHtcbiAgICAgICAgLy8gbWFrZSB0aGUgcmVnZXggaWYgd2UgZG9uJ3QgaGF2ZSBpdCBhbHJlYWR5XG4gICAgICAgIG1vbSA9IGNyZWF0ZVVUQyhbMjAwMCwgaV0pO1xuICAgICAgICBzaG9ydFAgPSByZWdleEVzY2FwZSh0aGlzLm1vbnRoc1Nob3J0KG1vbSwgJycpKTtcbiAgICAgICAgbG9uZ1AgPSByZWdleEVzY2FwZSh0aGlzLm1vbnRocyhtb20sICcnKSk7XG4gICAgICAgIHNob3J0UGllY2VzLnB1c2goc2hvcnRQKTtcbiAgICAgICAgbG9uZ1BpZWNlcy5wdXNoKGxvbmdQKTtcbiAgICAgICAgbWl4ZWRQaWVjZXMucHVzaChsb25nUCk7XG4gICAgICAgIG1peGVkUGllY2VzLnB1c2goc2hvcnRQKTtcbiAgICB9XG4gICAgLy8gU29ydGluZyBtYWtlcyBzdXJlIGlmIG9uZSBtb250aCAob3IgYWJicikgaXMgYSBwcmVmaXggb2YgYW5vdGhlciBpdFxuICAgIC8vIHdpbGwgbWF0Y2ggdGhlIGxvbmdlciBwaWVjZS5cbiAgICBzaG9ydFBpZWNlcy5zb3J0KGNtcExlblJldik7XG4gICAgbG9uZ1BpZWNlcy5zb3J0KGNtcExlblJldik7XG4gICAgbWl4ZWRQaWVjZXMuc29ydChjbXBMZW5SZXYpO1xuXG4gICAgdGhpcy5fbW9udGhzUmVnZXggPSBuZXcgUmVnRXhwKCdeKCcgKyBtaXhlZFBpZWNlcy5qb2luKCd8JykgKyAnKScsICdpJyk7XG4gICAgdGhpcy5fbW9udGhzU2hvcnRSZWdleCA9IHRoaXMuX21vbnRoc1JlZ2V4O1xuICAgIHRoaXMuX21vbnRoc1N0cmljdFJlZ2V4ID0gbmV3IFJlZ0V4cChcbiAgICAgICAgJ14oJyArIGxvbmdQaWVjZXMuam9pbignfCcpICsgJyknLFxuICAgICAgICAnaSdcbiAgICApO1xuICAgIHRoaXMuX21vbnRoc1Nob3J0U3RyaWN0UmVnZXggPSBuZXcgUmVnRXhwKFxuICAgICAgICAnXignICsgc2hvcnRQaWVjZXMuam9pbignfCcpICsgJyknLFxuICAgICAgICAnaSdcbiAgICApO1xufVxuIiwiZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZURhdGUoeSwgbSwgZCwgaCwgTSwgcywgbXMpIHtcbiAgICAvLyBjYW4ndCBqdXN0IGFwcGx5KCkgdG8gY3JlYXRlIGEgZGF0ZTpcbiAgICAvLyBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3EvMTgxMzQ4XG4gICAgdmFyIGRhdGU7XG4gICAgLy8gdGhlIGRhdGUgY29uc3RydWN0b3IgcmVtYXBzIHllYXJzIDAtOTkgdG8gMTkwMC0xOTk5XG4gICAgaWYgKHkgPCAxMDAgJiYgeSA+PSAwKSB7XG4gICAgICAgIC8vIHByZXNlcnZlIGxlYXAgeWVhcnMgdXNpbmcgYSBmdWxsIDQwMCB5ZWFyIGN5Y2xlLCB0aGVuIHJlc2V0XG4gICAgICAgIGRhdGUgPSBuZXcgRGF0ZSh5ICsgNDAwLCBtLCBkLCBoLCBNLCBzLCBtcyk7XG4gICAgICAgIGlmIChpc0Zpbml0ZShkYXRlLmdldEZ1bGxZZWFyKCkpKSB7XG4gICAgICAgICAgICBkYXRlLnNldEZ1bGxZZWFyKHkpO1xuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZGF0ZSA9IG5ldyBEYXRlKHksIG0sIGQsIGgsIE0sIHMsIG1zKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZGF0ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVVUQ0RhdGUoeSkge1xuICAgIHZhciBkYXRlLCBhcmdzO1xuICAgIC8vIHRoZSBEYXRlLlVUQyBmdW5jdGlvbiByZW1hcHMgeWVhcnMgMC05OSB0byAxOTAwLTE5OTlcbiAgICBpZiAoeSA8IDEwMCAmJiB5ID49IDApIHtcbiAgICAgICAgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG4gICAgICAgIC8vIHByZXNlcnZlIGxlYXAgeWVhcnMgdXNpbmcgYSBmdWxsIDQwMCB5ZWFyIGN5Y2xlLCB0aGVuIHJlc2V0XG4gICAgICAgIGFyZ3NbMF0gPSB5ICsgNDAwO1xuICAgICAgICBkYXRlID0gbmV3IERhdGUoRGF0ZS5VVEMuYXBwbHkobnVsbCwgYXJncykpO1xuICAgICAgICBpZiAoaXNGaW5pdGUoZGF0ZS5nZXRVVENGdWxsWWVhcigpKSkge1xuICAgICAgICAgICAgZGF0ZS5zZXRVVENGdWxsWWVhcih5KTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGRhdGUgPSBuZXcgRGF0ZShEYXRlLlVUQy5hcHBseShudWxsLCBhcmd1bWVudHMpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZGF0ZTtcbn1cbiIsImltcG9ydCB7IGRheXNJblllYXIgfSBmcm9tICcuL3llYXInO1xuaW1wb3J0IHsgY3JlYXRlVVRDRGF0ZSB9IGZyb20gJy4uL2NyZWF0ZS9kYXRlLWZyb20tYXJyYXknO1xuXG4vLyBzdGFydC1vZi1maXJzdC13ZWVrIC0gc3RhcnQtb2YteWVhclxuZnVuY3Rpb24gZmlyc3RXZWVrT2Zmc2V0KHllYXIsIGRvdywgZG95KSB7XG4gICAgdmFyIC8vIGZpcnN0LXdlZWsgZGF5IC0tIHdoaWNoIGphbnVhcnkgaXMgYWx3YXlzIGluIHRoZSBmaXJzdCB3ZWVrICg0IGZvciBpc28sIDEgZm9yIG90aGVyKVxuICAgICAgICBmd2QgPSA3ICsgZG93IC0gZG95LFxuICAgICAgICAvLyBmaXJzdC13ZWVrIGRheSBsb2NhbCB3ZWVrZGF5IC0tIHdoaWNoIGxvY2FsIHdlZWtkYXkgaXMgZndkXG4gICAgICAgIGZ3ZGx3ID0gKDcgKyBjcmVhdGVVVENEYXRlKHllYXIsIDAsIGZ3ZCkuZ2V0VVRDRGF5KCkgLSBkb3cpICUgNztcblxuICAgIHJldHVybiAtZndkbHcgKyBmd2QgLSAxO1xufVxuXG4vLyBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9JU09fd2Vla19kYXRlI0NhbGN1bGF0aW5nX2FfZGF0ZV9naXZlbl90aGVfeWVhci4yQ193ZWVrX251bWJlcl9hbmRfd2Vla2RheVxuZXhwb3J0IGZ1bmN0aW9uIGRheU9mWWVhckZyb21XZWVrcyh5ZWFyLCB3ZWVrLCB3ZWVrZGF5LCBkb3csIGRveSkge1xuICAgIHZhciBsb2NhbFdlZWtkYXkgPSAoNyArIHdlZWtkYXkgLSBkb3cpICUgNyxcbiAgICAgICAgd2Vla09mZnNldCA9IGZpcnN0V2Vla09mZnNldCh5ZWFyLCBkb3csIGRveSksXG4gICAgICAgIGRheU9mWWVhciA9IDEgKyA3ICogKHdlZWsgLSAxKSArIGxvY2FsV2Vla2RheSArIHdlZWtPZmZzZXQsXG4gICAgICAgIHJlc1llYXIsXG4gICAgICAgIHJlc0RheU9mWWVhcjtcblxuICAgIGlmIChkYXlPZlllYXIgPD0gMCkge1xuICAgICAgICByZXNZZWFyID0geWVhciAtIDE7XG4gICAgICAgIHJlc0RheU9mWWVhciA9IGRheXNJblllYXIocmVzWWVhcikgKyBkYXlPZlllYXI7XG4gICAgfSBlbHNlIGlmIChkYXlPZlllYXIgPiBkYXlzSW5ZZWFyKHllYXIpKSB7XG4gICAgICAgIHJlc1llYXIgPSB5ZWFyICsgMTtcbiAgICAgICAgcmVzRGF5T2ZZZWFyID0gZGF5T2ZZZWFyIC0gZGF5c0luWWVhcih5ZWFyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXNZZWFyID0geWVhcjtcbiAgICAgICAgcmVzRGF5T2ZZZWFyID0gZGF5T2ZZZWFyO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAgIHllYXI6IHJlc1llYXIsXG4gICAgICAgIGRheU9mWWVhcjogcmVzRGF5T2ZZZWFyLFxuICAgIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB3ZWVrT2ZZZWFyKG1vbSwgZG93LCBkb3kpIHtcbiAgICB2YXIgd2Vla09mZnNldCA9IGZpcnN0V2Vla09mZnNldChtb20ueWVhcigpLCBkb3csIGRveSksXG4gICAgICAgIHdlZWsgPSBNYXRoLmZsb29yKChtb20uZGF5T2ZZZWFyKCkgLSB3ZWVrT2Zmc2V0IC0gMSkgLyA3KSArIDEsXG4gICAgICAgIHJlc1dlZWssXG4gICAgICAgIHJlc1llYXI7XG5cbiAgICBpZiAod2VlayA8IDEpIHtcbiAgICAgICAgcmVzWWVhciA9IG1vbS55ZWFyKCkgLSAxO1xuICAgICAgICByZXNXZWVrID0gd2VlayArIHdlZWtzSW5ZZWFyKHJlc1llYXIsIGRvdywgZG95KTtcbiAgICB9IGVsc2UgaWYgKHdlZWsgPiB3ZWVrc0luWWVhcihtb20ueWVhcigpLCBkb3csIGRveSkpIHtcbiAgICAgICAgcmVzV2VlayA9IHdlZWsgLSB3ZWVrc0luWWVhcihtb20ueWVhcigpLCBkb3csIGRveSk7XG4gICAgICAgIHJlc1llYXIgPSBtb20ueWVhcigpICsgMTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXNZZWFyID0gbW9tLnllYXIoKTtcbiAgICAgICAgcmVzV2VlayA9IHdlZWs7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgd2VlazogcmVzV2VlayxcbiAgICAgICAgeWVhcjogcmVzWWVhcixcbiAgICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gd2Vla3NJblllYXIoeWVhciwgZG93LCBkb3kpIHtcbiAgICB2YXIgd2Vla09mZnNldCA9IGZpcnN0V2Vla09mZnNldCh5ZWFyLCBkb3csIGRveSksXG4gICAgICAgIHdlZWtPZmZzZXROZXh0ID0gZmlyc3RXZWVrT2Zmc2V0KHllYXIgKyAxLCBkb3csIGRveSk7XG4gICAgcmV0dXJuIChkYXlzSW5ZZWFyKHllYXIpIC0gd2Vla09mZnNldCArIHdlZWtPZmZzZXROZXh0KSAvIDc7XG59XG4iLCJpbXBvcnQgeyBhZGRGb3JtYXRUb2tlbiB9IGZyb20gJy4uL2Zvcm1hdC9mb3JtYXQnO1xuaW1wb3J0IHtcbiAgICBhZGRSZWdleFRva2VuLFxuICAgIG1hdGNoMXRvMixcbiAgICBtYXRjaDIsXG4gICAgbWF0Y2gxdG8yTm9MZWFkaW5nWmVybyxcbn0gZnJvbSAnLi4vcGFyc2UvcmVnZXgnO1xuaW1wb3J0IHsgYWRkV2Vla1BhcnNlVG9rZW4gfSBmcm9tICcuLi9wYXJzZS90b2tlbic7XG5pbXBvcnQgdG9JbnQgZnJvbSAnLi4vdXRpbHMvdG8taW50JztcbmltcG9ydCB7IHdlZWtPZlllYXIgfSBmcm9tICcuL3dlZWstY2FsZW5kYXItdXRpbHMnO1xuXG4vLyBGT1JNQVRUSU5HXG5cbmFkZEZvcm1hdFRva2VuKCd3JywgWyd3dycsIDJdLCAnd28nLCAnd2VlaycpO1xuYWRkRm9ybWF0VG9rZW4oJ1cnLCBbJ1dXJywgMl0sICdXbycsICdpc29XZWVrJyk7XG5cbi8vIFBBUlNJTkdcblxuYWRkUmVnZXhUb2tlbigndycsIG1hdGNoMXRvMiwgbWF0Y2gxdG8yTm9MZWFkaW5nWmVybyk7XG5hZGRSZWdleFRva2VuKCd3dycsIG1hdGNoMXRvMiwgbWF0Y2gyKTtcbmFkZFJlZ2V4VG9rZW4oJ1cnLCBtYXRjaDF0bzIsIG1hdGNoMXRvMk5vTGVhZGluZ1plcm8pO1xuYWRkUmVnZXhUb2tlbignV1cnLCBtYXRjaDF0bzIsIG1hdGNoMik7XG5cbmFkZFdlZWtQYXJzZVRva2VuKFxuICAgIFsndycsICd3dycsICdXJywgJ1dXJ10sXG4gICAgZnVuY3Rpb24gKGlucHV0LCB3ZWVrLCBjb25maWcsIHRva2VuKSB7XG4gICAgICAgIHdlZWtbdG9rZW4uc3Vic3RyKDAsIDEpXSA9IHRvSW50KGlucHV0KTtcbiAgICB9XG4pO1xuXG4vLyBIRUxQRVJTXG5cbi8vIExPQ0FMRVNcblxuZXhwb3J0IGZ1bmN0aW9uIGxvY2FsZVdlZWsobW9tKSB7XG4gICAgcmV0dXJuIHdlZWtPZlllYXIobW9tLCB0aGlzLl93ZWVrLmRvdywgdGhpcy5fd2Vlay5kb3kpLndlZWs7XG59XG5cbmV4cG9ydCB2YXIgZGVmYXVsdExvY2FsZVdlZWsgPSB7XG4gICAgZG93OiAwLCAvLyBTdW5kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICBkb3k6IDYsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDZ0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBsb2NhbGVGaXJzdERheU9mV2VlaygpIHtcbiAgICByZXR1cm4gdGhpcy5fd2Vlay5kb3c7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBsb2NhbGVGaXJzdERheU9mWWVhcigpIHtcbiAgICByZXR1cm4gdGhpcy5fd2Vlay5kb3k7XG59XG5cbi8vIE1PTUVOVFNcblxuZXhwb3J0IGZ1bmN0aW9uIGdldFNldFdlZWsoaW5wdXQpIHtcbiAgICB2YXIgd2VlayA9IHRoaXMubG9jYWxlRGF0YSgpLndlZWsodGhpcyk7XG4gICAgcmV0dXJuIGlucHV0ID09IG51bGwgPyB3ZWVrIDogdGhpcy5hZGQoKGlucHV0IC0gd2VlaykgKiA3LCAnZCcpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0U2V0SVNPV2VlayhpbnB1dCkge1xuICAgIHZhciB3ZWVrID0gd2Vla09mWWVhcih0aGlzLCAxLCA0KS53ZWVrO1xuICAgIHJldHVybiBpbnB1dCA9PSBudWxsID8gd2VlayA6IHRoaXMuYWRkKChpbnB1dCAtIHdlZWspICogNywgJ2QnKTtcbn1cbiIsImltcG9ydCB7IGdldCB9IGZyb20gJy4uL21vbWVudC9nZXQtc2V0JztcbmltcG9ydCB7IGFkZEZvcm1hdFRva2VuIH0gZnJvbSAnLi4vZm9ybWF0L2Zvcm1hdCc7XG5pbXBvcnQge1xuICAgIGFkZFJlZ2V4VG9rZW4sXG4gICAgbWF0Y2gxdG8yLFxuICAgIG1hdGNoV29yZCxcbiAgICByZWdleEVzY2FwZSxcbn0gZnJvbSAnLi4vcGFyc2UvcmVnZXgnO1xuaW1wb3J0IHsgYWRkV2Vla1BhcnNlVG9rZW4gfSBmcm9tICcuLi9wYXJzZS90b2tlbic7XG5pbXBvcnQgdG9JbnQgZnJvbSAnLi4vdXRpbHMvdG8taW50JztcbmltcG9ydCBpc0FycmF5IGZyb20gJy4uL3V0aWxzL2lzLWFycmF5JztcbmltcG9ydCBpbmRleE9mIGZyb20gJy4uL3V0aWxzL2luZGV4LW9mJztcbmltcG9ydCBoYXNPd25Qcm9wIGZyb20gJy4uL3V0aWxzL2hhcy1vd24tcHJvcCc7XG5pbXBvcnQgeyBjcmVhdGVVVEMgfSBmcm9tICcuLi9jcmVhdGUvdXRjJztcbmltcG9ydCBnZXRQYXJzaW5nRmxhZ3MgZnJvbSAnLi4vY3JlYXRlL3BhcnNpbmctZmxhZ3MnO1xuXG4vLyBGT1JNQVRUSU5HXG5cbmFkZEZvcm1hdFRva2VuKCdkJywgMCwgJ2RvJywgJ2RheScpO1xuXG5hZGRGb3JtYXRUb2tlbignZGQnLCAwLCAwLCBmdW5jdGlvbiAoZm9ybWF0KSB7XG4gICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLndlZWtkYXlzTWluKHRoaXMsIGZvcm1hdCk7XG59KTtcblxuYWRkRm9ybWF0VG9rZW4oJ2RkZCcsIDAsIDAsIGZ1bmN0aW9uIChmb3JtYXQpIHtcbiAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkud2Vla2RheXNTaG9ydCh0aGlzLCBmb3JtYXQpO1xufSk7XG5cbmFkZEZvcm1hdFRva2VuKCdkZGRkJywgMCwgMCwgZnVuY3Rpb24gKGZvcm1hdCkge1xuICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS53ZWVrZGF5cyh0aGlzLCBmb3JtYXQpO1xufSk7XG5cbmFkZEZvcm1hdFRva2VuKCdlJywgMCwgMCwgJ3dlZWtkYXknKTtcbmFkZEZvcm1hdFRva2VuKCdFJywgMCwgMCwgJ2lzb1dlZWtkYXknKTtcblxuLy8gUEFSU0lOR1xuXG5hZGRSZWdleFRva2VuKCdkJywgbWF0Y2gxdG8yKTtcbmFkZFJlZ2V4VG9rZW4oJ2UnLCBtYXRjaDF0bzIpO1xuYWRkUmVnZXhUb2tlbignRScsIG1hdGNoMXRvMik7XG5hZGRSZWdleFRva2VuKCdkZCcsIGZ1bmN0aW9uIChpc1N0cmljdCwgbG9jYWxlKSB7XG4gICAgcmV0dXJuIGxvY2FsZS53ZWVrZGF5c01pblJlZ2V4KGlzU3RyaWN0KTtcbn0pO1xuYWRkUmVnZXhUb2tlbignZGRkJywgZnVuY3Rpb24gKGlzU3RyaWN0LCBsb2NhbGUpIHtcbiAgICByZXR1cm4gbG9jYWxlLndlZWtkYXlzU2hvcnRSZWdleChpc1N0cmljdCk7XG59KTtcbmFkZFJlZ2V4VG9rZW4oJ2RkZGQnLCBmdW5jdGlvbiAoaXNTdHJpY3QsIGxvY2FsZSkge1xuICAgIHJldHVybiBsb2NhbGUud2Vla2RheXNSZWdleChpc1N0cmljdCk7XG59KTtcblxuYWRkV2Vla1BhcnNlVG9rZW4oWydkZCcsICdkZGQnLCAnZGRkZCddLCBmdW5jdGlvbiAoaW5wdXQsIHdlZWssIGNvbmZpZywgdG9rZW4pIHtcbiAgICB2YXIgd2Vla2RheSA9IGNvbmZpZy5fbG9jYWxlLndlZWtkYXlzUGFyc2UoaW5wdXQsIHRva2VuLCBjb25maWcuX3N0cmljdCk7XG4gICAgLy8gaWYgd2UgZGlkbid0IGdldCBhIHdlZWtkYXkgbmFtZSwgbWFyayB0aGUgZGF0ZSBhcyBpbnZhbGlkXG4gICAgaWYgKHdlZWtkYXkgIT0gbnVsbCkge1xuICAgICAgICB3ZWVrLmQgPSB3ZWVrZGF5O1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmludmFsaWRXZWVrZGF5ID0gaW5wdXQ7XG4gICAgfVxufSk7XG5cbmFkZFdlZWtQYXJzZVRva2VuKFsnZCcsICdlJywgJ0UnXSwgZnVuY3Rpb24gKGlucHV0LCB3ZWVrLCBjb25maWcsIHRva2VuKSB7XG4gICAgd2Vla1t0b2tlbl0gPSB0b0ludChpbnB1dCk7XG59KTtcblxuLy8gSEVMUEVSU1xuXG5mdW5jdGlvbiBwYXJzZVdlZWtkYXkoaW5wdXQsIGxvY2FsZSkge1xuICAgIGlmICh0eXBlb2YgaW5wdXQgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiBpbnB1dDtcbiAgICB9XG5cbiAgICBpZiAoIWlzTmFOKGlucHV0KSkge1xuICAgICAgICByZXR1cm4gcGFyc2VJbnQoaW5wdXQsIDEwKTtcbiAgICB9XG5cbiAgICBpbnB1dCA9IGxvY2FsZS53ZWVrZGF5c1BhcnNlKGlucHV0KTtcbiAgICBpZiAodHlwZW9mIGlucHV0ID09PSAnbnVtYmVyJykge1xuICAgICAgICByZXR1cm4gaW5wdXQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG59XG5cbmZ1bmN0aW9uIHBhcnNlSXNvV2Vla2RheShpbnB1dCwgbG9jYWxlKSB7XG4gICAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsZS53ZWVrZGF5c1BhcnNlKGlucHV0KSAlIDcgfHwgNztcbiAgICB9XG4gICAgcmV0dXJuIGlzTmFOKGlucHV0KSA/IG51bGwgOiBpbnB1dDtcbn1cblxuLy8gTE9DQUxFU1xuZnVuY3Rpb24gc2hpZnRXZWVrZGF5cyh3cywgbikge1xuICAgIHJldHVybiB3cy5zbGljZShuLCA3KS5jb25jYXQod3Muc2xpY2UoMCwgbikpO1xufVxuXG52YXIgZGVmYXVsdExvY2FsZVdlZWtkYXlzID1cbiAgICAgICAgJ1N1bmRheV9Nb25kYXlfVHVlc2RheV9XZWRuZXNkYXlfVGh1cnNkYXlfRnJpZGF5X1NhdHVyZGF5Jy5zcGxpdCgnXycpLFxuICAgIGRlZmF1bHRMb2NhbGVXZWVrZGF5c1Nob3J0ID0gJ1N1bl9Nb25fVHVlX1dlZF9UaHVfRnJpX1NhdCcuc3BsaXQoJ18nKSxcbiAgICBkZWZhdWx0TG9jYWxlV2Vla2RheXNNaW4gPSAnU3VfTW9fVHVfV2VfVGhfRnJfU2EnLnNwbGl0KCdfJyksXG4gICAgZGVmYXVsdFdlZWtkYXlzUmVnZXggPSBtYXRjaFdvcmQsXG4gICAgZGVmYXVsdFdlZWtkYXlzU2hvcnRSZWdleCA9IG1hdGNoV29yZCxcbiAgICBkZWZhdWx0V2Vla2RheXNNaW5SZWdleCA9IG1hdGNoV29yZDtcblxuZXhwb3J0IHtcbiAgICBkZWZhdWx0TG9jYWxlV2Vla2RheXMsXG4gICAgZGVmYXVsdExvY2FsZVdlZWtkYXlzU2hvcnQsXG4gICAgZGVmYXVsdExvY2FsZVdlZWtkYXlzTWluLFxufTtcblxuZXhwb3J0IGZ1bmN0aW9uIGxvY2FsZVdlZWtkYXlzKG0sIGZvcm1hdCkge1xuICAgIHZhciB3ZWVrZGF5cyA9IGlzQXJyYXkodGhpcy5fd2Vla2RheXMpXG4gICAgICAgID8gdGhpcy5fd2Vla2RheXNcbiAgICAgICAgOiB0aGlzLl93ZWVrZGF5c1tcbiAgICAgICAgICAgICAgbSAmJiBtICE9PSB0cnVlICYmIHRoaXMuX3dlZWtkYXlzLmlzRm9ybWF0LnRlc3QoZm9ybWF0KVxuICAgICAgICAgICAgICAgICAgPyAnZm9ybWF0J1xuICAgICAgICAgICAgICAgICAgOiAnc3RhbmRhbG9uZSdcbiAgICAgICAgICBdO1xuICAgIHJldHVybiBtID09PSB0cnVlXG4gICAgICAgID8gc2hpZnRXZWVrZGF5cyh3ZWVrZGF5cywgdGhpcy5fd2Vlay5kb3cpXG4gICAgICAgIDogbVxuICAgICAgICAgID8gd2Vla2RheXNbbS5kYXkoKV1cbiAgICAgICAgICA6IHdlZWtkYXlzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbG9jYWxlV2Vla2RheXNTaG9ydChtKSB7XG4gICAgcmV0dXJuIG0gPT09IHRydWVcbiAgICAgICAgPyBzaGlmdFdlZWtkYXlzKHRoaXMuX3dlZWtkYXlzU2hvcnQsIHRoaXMuX3dlZWsuZG93KVxuICAgICAgICA6IG1cbiAgICAgICAgICA/IHRoaXMuX3dlZWtkYXlzU2hvcnRbbS5kYXkoKV1cbiAgICAgICAgICA6IHRoaXMuX3dlZWtkYXlzU2hvcnQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBsb2NhbGVXZWVrZGF5c01pbihtKSB7XG4gICAgcmV0dXJuIG0gPT09IHRydWVcbiAgICAgICAgPyBzaGlmdFdlZWtkYXlzKHRoaXMuX3dlZWtkYXlzTWluLCB0aGlzLl93ZWVrLmRvdylcbiAgICAgICAgOiBtXG4gICAgICAgICAgPyB0aGlzLl93ZWVrZGF5c01pblttLmRheSgpXVxuICAgICAgICAgIDogdGhpcy5fd2Vla2RheXNNaW47XG59XG5cbmZ1bmN0aW9uIGhhbmRsZVN0cmljdFBhcnNlKHdlZWtkYXlOYW1lLCBmb3JtYXQsIHN0cmljdCkge1xuICAgIHZhciBpLFxuICAgICAgICBpaSxcbiAgICAgICAgbW9tLFxuICAgICAgICBsbGMgPSB3ZWVrZGF5TmFtZS50b0xvY2FsZUxvd2VyQ2FzZSgpO1xuICAgIGlmICghdGhpcy5fd2Vla2RheXNQYXJzZSkge1xuICAgICAgICB0aGlzLl93ZWVrZGF5c1BhcnNlID0gW107XG4gICAgICAgIHRoaXMuX3Nob3J0V2Vla2RheXNQYXJzZSA9IFtdO1xuICAgICAgICB0aGlzLl9taW5XZWVrZGF5c1BhcnNlID0gW107XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IDc7ICsraSkge1xuICAgICAgICAgICAgbW9tID0gY3JlYXRlVVRDKFsyMDAwLCAxXSkuZGF5KGkpO1xuICAgICAgICAgICAgdGhpcy5fbWluV2Vla2RheXNQYXJzZVtpXSA9IHRoaXMud2Vla2RheXNNaW4oXG4gICAgICAgICAgICAgICAgbW9tLFxuICAgICAgICAgICAgICAgICcnXG4gICAgICAgICAgICApLnRvTG9jYWxlTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICB0aGlzLl9zaG9ydFdlZWtkYXlzUGFyc2VbaV0gPSB0aGlzLndlZWtkYXlzU2hvcnQoXG4gICAgICAgICAgICAgICAgbW9tLFxuICAgICAgICAgICAgICAgICcnXG4gICAgICAgICAgICApLnRvTG9jYWxlTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICB0aGlzLl93ZWVrZGF5c1BhcnNlW2ldID0gdGhpcy53ZWVrZGF5cyhtb20sICcnKS50b0xvY2FsZUxvd2VyQ2FzZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHN0cmljdCkge1xuICAgICAgICBpZiAoZm9ybWF0ID09PSAnZGRkZCcpIHtcbiAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX3dlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICByZXR1cm4gaWkgIT09IC0xID8gaWkgOiBudWxsO1xuICAgICAgICB9IGVsc2UgaWYgKGZvcm1hdCA9PT0gJ2RkZCcpIHtcbiAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX3Nob3J0V2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgIHJldHVybiBpaSAhPT0gLTEgPyBpaSA6IG51bGw7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9taW5XZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgcmV0dXJuIGlpICE9PSAtMSA/IGlpIDogbnVsbDtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChmb3JtYXQgPT09ICdkZGRkJykge1xuICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fd2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgIGlmIChpaSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaWk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9zaG9ydFdlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICBpZiAoaWkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fbWluV2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgIHJldHVybiBpaSAhPT0gLTEgPyBpaSA6IG51bGw7XG4gICAgICAgIH0gZWxzZSBpZiAoZm9ybWF0ID09PSAnZGRkJykge1xuICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fc2hvcnRXZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgaWYgKGlpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX3dlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICBpZiAoaWkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fbWluV2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgIHJldHVybiBpaSAhPT0gLTEgPyBpaSA6IG51bGw7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9taW5XZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgaWYgKGlpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX3dlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICBpZiAoaWkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fc2hvcnRXZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgcmV0dXJuIGlpICE9PSAtMSA/IGlpIDogbnVsbDtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGxvY2FsZVdlZWtkYXlzUGFyc2Uod2Vla2RheU5hbWUsIGZvcm1hdCwgc3RyaWN0KSB7XG4gICAgdmFyIGksIG1vbSwgcmVnZXg7XG5cbiAgICBpZiAodGhpcy5fd2Vla2RheXNQYXJzZUV4YWN0KSB7XG4gICAgICAgIHJldHVybiBoYW5kbGVTdHJpY3RQYXJzZS5jYWxsKHRoaXMsIHdlZWtkYXlOYW1lLCBmb3JtYXQsIHN0cmljdCk7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLl93ZWVrZGF5c1BhcnNlKSB7XG4gICAgICAgIHRoaXMuX3dlZWtkYXlzUGFyc2UgPSBbXTtcbiAgICAgICAgdGhpcy5fbWluV2Vla2RheXNQYXJzZSA9IFtdO1xuICAgICAgICB0aGlzLl9zaG9ydFdlZWtkYXlzUGFyc2UgPSBbXTtcbiAgICAgICAgdGhpcy5fZnVsbFdlZWtkYXlzUGFyc2UgPSBbXTtcbiAgICB9XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgNzsgaSsrKSB7XG4gICAgICAgIC8vIG1ha2UgdGhlIHJlZ2V4IGlmIHdlIGRvbid0IGhhdmUgaXQgYWxyZWFkeVxuXG4gICAgICAgIG1vbSA9IGNyZWF0ZVVUQyhbMjAwMCwgMV0pLmRheShpKTtcbiAgICAgICAgaWYgKHN0cmljdCAmJiAhdGhpcy5fZnVsbFdlZWtkYXlzUGFyc2VbaV0pIHtcbiAgICAgICAgICAgIHRoaXMuX2Z1bGxXZWVrZGF5c1BhcnNlW2ldID0gbmV3IFJlZ0V4cChcbiAgICAgICAgICAgICAgICAnXicgKyB0aGlzLndlZWtkYXlzKG1vbSwgJycpLnJlcGxhY2UoJy4nLCAnXFxcXC4/JykgKyAnJCcsXG4gICAgICAgICAgICAgICAgJ2knXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgdGhpcy5fc2hvcnRXZWVrZGF5c1BhcnNlW2ldID0gbmV3IFJlZ0V4cChcbiAgICAgICAgICAgICAgICAnXicgKyB0aGlzLndlZWtkYXlzU2hvcnQobW9tLCAnJykucmVwbGFjZSgnLicsICdcXFxcLj8nKSArICckJyxcbiAgICAgICAgICAgICAgICAnaSdcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICB0aGlzLl9taW5XZWVrZGF5c1BhcnNlW2ldID0gbmV3IFJlZ0V4cChcbiAgICAgICAgICAgICAgICAnXicgKyB0aGlzLndlZWtkYXlzTWluKG1vbSwgJycpLnJlcGxhY2UoJy4nLCAnXFxcXC4/JykgKyAnJCcsXG4gICAgICAgICAgICAgICAgJ2knXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5fd2Vla2RheXNQYXJzZVtpXSkge1xuICAgICAgICAgICAgcmVnZXggPVxuICAgICAgICAgICAgICAgICdeJyArXG4gICAgICAgICAgICAgICAgdGhpcy53ZWVrZGF5cyhtb20sICcnKSArXG4gICAgICAgICAgICAgICAgJ3xeJyArXG4gICAgICAgICAgICAgICAgdGhpcy53ZWVrZGF5c1Nob3J0KG1vbSwgJycpICtcbiAgICAgICAgICAgICAgICAnfF4nICtcbiAgICAgICAgICAgICAgICB0aGlzLndlZWtkYXlzTWluKG1vbSwgJycpO1xuICAgICAgICAgICAgdGhpcy5fd2Vla2RheXNQYXJzZVtpXSA9IG5ldyBSZWdFeHAocmVnZXgucmVwbGFjZSgnLicsICcnKSwgJ2knKTtcbiAgICAgICAgfVxuICAgICAgICAvLyB0ZXN0IHRoZSByZWdleFxuICAgICAgICBpZiAoXG4gICAgICAgICAgICBzdHJpY3QgJiZcbiAgICAgICAgICAgIGZvcm1hdCA9PT0gJ2RkZGQnICYmXG4gICAgICAgICAgICB0aGlzLl9mdWxsV2Vla2RheXNQYXJzZVtpXS50ZXN0KHdlZWtkYXlOYW1lKVxuICAgICAgICApIHtcbiAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgICAgc3RyaWN0ICYmXG4gICAgICAgICAgICBmb3JtYXQgPT09ICdkZGQnICYmXG4gICAgICAgICAgICB0aGlzLl9zaG9ydFdlZWtkYXlzUGFyc2VbaV0udGVzdCh3ZWVrZGF5TmFtZSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICAgIHN0cmljdCAmJlxuICAgICAgICAgICAgZm9ybWF0ID09PSAnZGQnICYmXG4gICAgICAgICAgICB0aGlzLl9taW5XZWVrZGF5c1BhcnNlW2ldLnRlc3Qod2Vla2RheU5hbWUpXG4gICAgICAgICkge1xuICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgIH0gZWxzZSBpZiAoIXN0cmljdCAmJiB0aGlzLl93ZWVrZGF5c1BhcnNlW2ldLnRlc3Qod2Vla2RheU5hbWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuLy8gTU9NRU5UU1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0U2V0RGF5T2ZXZWVrKGlucHV0KSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICByZXR1cm4gaW5wdXQgIT0gbnVsbCA/IHRoaXMgOiBOYU47XG4gICAgfVxuXG4gICAgdmFyIGRheSA9IGdldCh0aGlzLCAnRGF5Jyk7XG4gICAgaWYgKGlucHV0ICE9IG51bGwpIHtcbiAgICAgICAgaW5wdXQgPSBwYXJzZVdlZWtkYXkoaW5wdXQsIHRoaXMubG9jYWxlRGF0YSgpKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuYWRkKGlucHV0IC0gZGF5LCAnZCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBkYXk7XG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0U2V0TG9jYWxlRGF5T2ZXZWVrKGlucHV0KSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICByZXR1cm4gaW5wdXQgIT0gbnVsbCA/IHRoaXMgOiBOYU47XG4gICAgfVxuICAgIHZhciB3ZWVrZGF5ID0gKHRoaXMuZGF5KCkgKyA3IC0gdGhpcy5sb2NhbGVEYXRhKCkuX3dlZWsuZG93KSAlIDc7XG4gICAgcmV0dXJuIGlucHV0ID09IG51bGwgPyB3ZWVrZGF5IDogdGhpcy5hZGQoaW5wdXQgLSB3ZWVrZGF5LCAnZCcpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0U2V0SVNPRGF5T2ZXZWVrKGlucHV0KSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICByZXR1cm4gaW5wdXQgIT0gbnVsbCA/IHRoaXMgOiBOYU47XG4gICAgfVxuXG4gICAgLy8gYmVoYXZlcyB0aGUgc2FtZSBhcyBtb21lbnQjZGF5IGV4Y2VwdFxuICAgIC8vIGFzIGEgZ2V0dGVyLCByZXR1cm5zIDcgaW5zdGVhZCBvZiAwICgxLTcgcmFuZ2UgaW5zdGVhZCBvZiAwLTYpXG4gICAgLy8gYXMgYSBzZXR0ZXIsIHN1bmRheSBzaG91bGQgYmVsb25nIHRvIHRoZSBwcmV2aW91cyB3ZWVrLlxuXG4gICAgaWYgKGlucHV0ICE9IG51bGwpIHtcbiAgICAgICAgdmFyIHdlZWtkYXkgPSBwYXJzZUlzb1dlZWtkYXkoaW5wdXQsIHRoaXMubG9jYWxlRGF0YSgpKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF5KHRoaXMuZGF5KCkgJSA3ID8gd2Vla2RheSA6IHdlZWtkYXkgLSA3KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdGhpcy5kYXkoKSB8fCA3O1xuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHdlZWtkYXlzUmVnZXgoaXNTdHJpY3QpIHtcbiAgICBpZiAodGhpcy5fd2Vla2RheXNQYXJzZUV4YWN0KSB7XG4gICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX3dlZWtkYXlzUmVnZXgnKSkge1xuICAgICAgICAgICAgY29tcHV0ZVdlZWtkYXlzUGFyc2UuY2FsbCh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNTdHJpY3QpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl93ZWVrZGF5c1N0cmljdFJlZ2V4O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWtkYXlzUmVnZXg7XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ193ZWVrZGF5c1JlZ2V4JykpIHtcbiAgICAgICAgICAgIHRoaXMuX3dlZWtkYXlzUmVnZXggPSBkZWZhdWx0V2Vla2RheXNSZWdleDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fd2Vla2RheXNTdHJpY3RSZWdleCAmJiBpc1N0cmljdFxuICAgICAgICAgICAgPyB0aGlzLl93ZWVrZGF5c1N0cmljdFJlZ2V4XG4gICAgICAgICAgICA6IHRoaXMuX3dlZWtkYXlzUmVnZXg7XG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gd2Vla2RheXNTaG9ydFJlZ2V4KGlzU3RyaWN0KSB7XG4gICAgaWYgKHRoaXMuX3dlZWtkYXlzUGFyc2VFeGFjdCkge1xuICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ193ZWVrZGF5c1JlZ2V4JykpIHtcbiAgICAgICAgICAgIGNvbXB1dGVXZWVrZGF5c1BhcnNlLmNhbGwodGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzU3RyaWN0KSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fd2Vla2RheXNTaG9ydFN0cmljdFJlZ2V4O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWtkYXlzU2hvcnRSZWdleDtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX3dlZWtkYXlzU2hvcnRSZWdleCcpKSB7XG4gICAgICAgICAgICB0aGlzLl93ZWVrZGF5c1Nob3J0UmVnZXggPSBkZWZhdWx0V2Vla2RheXNTaG9ydFJlZ2V4O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl93ZWVrZGF5c1Nob3J0U3RyaWN0UmVnZXggJiYgaXNTdHJpY3RcbiAgICAgICAgICAgID8gdGhpcy5fd2Vla2RheXNTaG9ydFN0cmljdFJlZ2V4XG4gICAgICAgICAgICA6IHRoaXMuX3dlZWtkYXlzU2hvcnRSZWdleDtcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB3ZWVrZGF5c01pblJlZ2V4KGlzU3RyaWN0KSB7XG4gICAgaWYgKHRoaXMuX3dlZWtkYXlzUGFyc2VFeGFjdCkge1xuICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ193ZWVrZGF5c1JlZ2V4JykpIHtcbiAgICAgICAgICAgIGNvbXB1dGVXZWVrZGF5c1BhcnNlLmNhbGwodGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzU3RyaWN0KSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fd2Vla2RheXNNaW5TdHJpY3RSZWdleDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl93ZWVrZGF5c01pblJlZ2V4O1xuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfd2Vla2RheXNNaW5SZWdleCcpKSB7XG4gICAgICAgICAgICB0aGlzLl93ZWVrZGF5c01pblJlZ2V4ID0gZGVmYXVsdFdlZWtkYXlzTWluUmVnZXg7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWtkYXlzTWluU3RyaWN0UmVnZXggJiYgaXNTdHJpY3RcbiAgICAgICAgICAgID8gdGhpcy5fd2Vla2RheXNNaW5TdHJpY3RSZWdleFxuICAgICAgICAgICAgOiB0aGlzLl93ZWVrZGF5c01pblJlZ2V4O1xuICAgIH1cbn1cblxuZnVuY3Rpb24gY29tcHV0ZVdlZWtkYXlzUGFyc2UoKSB7XG4gICAgZnVuY3Rpb24gY21wTGVuUmV2KGEsIGIpIHtcbiAgICAgICAgcmV0dXJuIGIubGVuZ3RoIC0gYS5sZW5ndGg7XG4gICAgfVxuXG4gICAgdmFyIG1pblBpZWNlcyA9IFtdLFxuICAgICAgICBzaG9ydFBpZWNlcyA9IFtdLFxuICAgICAgICBsb25nUGllY2VzID0gW10sXG4gICAgICAgIG1peGVkUGllY2VzID0gW10sXG4gICAgICAgIGksXG4gICAgICAgIG1vbSxcbiAgICAgICAgbWlucCxcbiAgICAgICAgc2hvcnRwLFxuICAgICAgICBsb25ncDtcbiAgICBmb3IgKGkgPSAwOyBpIDwgNzsgaSsrKSB7XG4gICAgICAgIC8vIG1ha2UgdGhlIHJlZ2V4IGlmIHdlIGRvbid0IGhhdmUgaXQgYWxyZWFkeVxuICAgICAgICBtb20gPSBjcmVhdGVVVEMoWzIwMDAsIDFdKS5kYXkoaSk7XG4gICAgICAgIG1pbnAgPSByZWdleEVzY2FwZSh0aGlzLndlZWtkYXlzTWluKG1vbSwgJycpKTtcbiAgICAgICAgc2hvcnRwID0gcmVnZXhFc2NhcGUodGhpcy53ZWVrZGF5c1Nob3J0KG1vbSwgJycpKTtcbiAgICAgICAgbG9uZ3AgPSByZWdleEVzY2FwZSh0aGlzLndlZWtkYXlzKG1vbSwgJycpKTtcbiAgICAgICAgbWluUGllY2VzLnB1c2gobWlucCk7XG4gICAgICAgIHNob3J0UGllY2VzLnB1c2goc2hvcnRwKTtcbiAgICAgICAgbG9uZ1BpZWNlcy5wdXNoKGxvbmdwKTtcbiAgICAgICAgbWl4ZWRQaWVjZXMucHVzaChtaW5wKTtcbiAgICAgICAgbWl4ZWRQaWVjZXMucHVzaChzaG9ydHApO1xuICAgICAgICBtaXhlZFBpZWNlcy5wdXNoKGxvbmdwKTtcbiAgICB9XG4gICAgLy8gU29ydGluZyBtYWtlcyBzdXJlIGlmIG9uZSB3ZWVrZGF5IChvciBhYmJyKSBpcyBhIHByZWZpeCBvZiBhbm90aGVyIGl0XG4gICAgLy8gd2lsbCBtYXRjaCB0aGUgbG9uZ2VyIHBpZWNlLlxuICAgIG1pblBpZWNlcy5zb3J0KGNtcExlblJldik7XG4gICAgc2hvcnRQaWVjZXMuc29ydChjbXBMZW5SZXYpO1xuICAgIGxvbmdQaWVjZXMuc29ydChjbXBMZW5SZXYpO1xuICAgIG1peGVkUGllY2VzLnNvcnQoY21wTGVuUmV2KTtcblxuICAgIHRoaXMuX3dlZWtkYXlzUmVnZXggPSBuZXcgUmVnRXhwKCdeKCcgKyBtaXhlZFBpZWNlcy5qb2luKCd8JykgKyAnKScsICdpJyk7XG4gICAgdGhpcy5fd2Vla2RheXNTaG9ydFJlZ2V4ID0gdGhpcy5fd2Vla2RheXNSZWdleDtcbiAgICB0aGlzLl93ZWVrZGF5c01pblJlZ2V4ID0gdGhpcy5fd2Vla2RheXNSZWdleDtcblxuICAgIHRoaXMuX3dlZWtkYXlzU3RyaWN0UmVnZXggPSBuZXcgUmVnRXhwKFxuICAgICAgICAnXignICsgbG9uZ1BpZWNlcy5qb2luKCd8JykgKyAnKScsXG4gICAgICAgICdpJ1xuICAgICk7XG4gICAgdGhpcy5fd2Vla2RheXNTaG9ydFN0cmljdFJlZ2V4ID0gbmV3IFJlZ0V4cChcbiAgICAgICAgJ14oJyArIHNob3J0UGllY2VzLmpvaW4oJ3wnKSArICcpJyxcbiAgICAgICAgJ2knXG4gICAgKTtcbiAgICB0aGlzLl93ZWVrZGF5c01pblN0cmljdFJlZ2V4ID0gbmV3IFJlZ0V4cChcbiAgICAgICAgJ14oJyArIG1pblBpZWNlcy5qb2luKCd8JykgKyAnKScsXG4gICAgICAgICdpJ1xuICAgICk7XG59XG4iLCJpbXBvcnQgeyBtYWtlR2V0U2V0IH0gZnJvbSAnLi4vbW9tZW50L2dldC1zZXQnO1xuaW1wb3J0IHsgYWRkRm9ybWF0VG9rZW4gfSBmcm9tICcuLi9mb3JtYXQvZm9ybWF0JztcbmltcG9ydCB7XG4gICAgYWRkUmVnZXhUb2tlbixcbiAgICBtYXRjaDF0bzIsXG4gICAgbWF0Y2gyLFxuICAgIG1hdGNoM3RvNCxcbiAgICBtYXRjaDV0bzYsXG4gICAgbWF0Y2gxdG8yTm9MZWFkaW5nWmVybyxcbiAgICBtYXRjaDF0bzJIYXNaZXJvLFxufSBmcm9tICcuLi9wYXJzZS9yZWdleCc7XG5pbXBvcnQgeyBhZGRQYXJzZVRva2VuIH0gZnJvbSAnLi4vcGFyc2UvdG9rZW4nO1xuaW1wb3J0IHsgSE9VUiwgTUlOVVRFLCBTRUNPTkQgfSBmcm9tICcuL2NvbnN0YW50cyc7XG5pbXBvcnQgdG9JbnQgZnJvbSAnLi4vdXRpbHMvdG8taW50JztcbmltcG9ydCB6ZXJvRmlsbCBmcm9tICcuLi91dGlscy96ZXJvLWZpbGwnO1xuaW1wb3J0IGdldFBhcnNpbmdGbGFncyBmcm9tICcuLi9jcmVhdGUvcGFyc2luZy1mbGFncyc7XG5cbi8vIEZPUk1BVFRJTkdcblxuZnVuY3Rpb24gaEZvcm1hdCgpIHtcbiAgICByZXR1cm4gdGhpcy5ob3VycygpICUgMTIgfHwgMTI7XG59XG5cbmZ1bmN0aW9uIGtGb3JtYXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuaG91cnMoKSB8fCAyNDtcbn1cblxuYWRkRm9ybWF0VG9rZW4oJ0gnLCBbJ0hIJywgMl0sIDAsICdob3VyJyk7XG5hZGRGb3JtYXRUb2tlbignaCcsIFsnaGgnLCAyXSwgMCwgaEZvcm1hdCk7XG5hZGRGb3JtYXRUb2tlbignaycsIFsna2snLCAyXSwgMCwga0Zvcm1hdCk7XG5cbmFkZEZvcm1hdFRva2VuKCdobW0nLCAwLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICcnICsgaEZvcm1hdC5hcHBseSh0aGlzKSArIHplcm9GaWxsKHRoaXMubWludXRlcygpLCAyKTtcbn0pO1xuXG5hZGRGb3JtYXRUb2tlbignaG1tc3MnLCAwLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgICAgJycgK1xuICAgICAgICBoRm9ybWF0LmFwcGx5KHRoaXMpICtcbiAgICAgICAgemVyb0ZpbGwodGhpcy5taW51dGVzKCksIDIpICtcbiAgICAgICAgemVyb0ZpbGwodGhpcy5zZWNvbmRzKCksIDIpXG4gICAgKTtcbn0pO1xuXG5hZGRGb3JtYXRUb2tlbignSG1tJywgMCwgMCwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAnJyArIHRoaXMuaG91cnMoKSArIHplcm9GaWxsKHRoaXMubWludXRlcygpLCAyKTtcbn0pO1xuXG5hZGRGb3JtYXRUb2tlbignSG1tc3MnLCAwLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgICAgJycgK1xuICAgICAgICB0aGlzLmhvdXJzKCkgK1xuICAgICAgICB6ZXJvRmlsbCh0aGlzLm1pbnV0ZXMoKSwgMikgK1xuICAgICAgICB6ZXJvRmlsbCh0aGlzLnNlY29uZHMoKSwgMilcbiAgICApO1xufSk7XG5cbmZ1bmN0aW9uIG1lcmlkaWVtKHRva2VuLCBsb3dlcmNhc2UpIHtcbiAgICBhZGRGb3JtYXRUb2tlbih0b2tlbiwgMCwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkubWVyaWRpZW0oXG4gICAgICAgICAgICB0aGlzLmhvdXJzKCksXG4gICAgICAgICAgICB0aGlzLm1pbnV0ZXMoKSxcbiAgICAgICAgICAgIGxvd2VyY2FzZVxuICAgICAgICApO1xuICAgIH0pO1xufVxuXG5tZXJpZGllbSgnYScsIHRydWUpO1xubWVyaWRpZW0oJ0EnLCBmYWxzZSk7XG5cbi8vIFBBUlNJTkdcblxuZnVuY3Rpb24gbWF0Y2hNZXJpZGllbShpc1N0cmljdCwgbG9jYWxlKSB7XG4gICAgcmV0dXJuIGxvY2FsZS5fbWVyaWRpZW1QYXJzZTtcbn1cblxuYWRkUmVnZXhUb2tlbignYScsIG1hdGNoTWVyaWRpZW0pO1xuYWRkUmVnZXhUb2tlbignQScsIG1hdGNoTWVyaWRpZW0pO1xuYWRkUmVnZXhUb2tlbignSCcsIG1hdGNoMXRvMiwgbWF0Y2gxdG8ySGFzWmVybyk7XG5hZGRSZWdleFRva2VuKCdoJywgbWF0Y2gxdG8yLCBtYXRjaDF0bzJOb0xlYWRpbmdaZXJvKTtcbmFkZFJlZ2V4VG9rZW4oJ2snLCBtYXRjaDF0bzIsIG1hdGNoMXRvMk5vTGVhZGluZ1plcm8pO1xuYWRkUmVnZXhUb2tlbignSEgnLCBtYXRjaDF0bzIsIG1hdGNoMik7XG5hZGRSZWdleFRva2VuKCdoaCcsIG1hdGNoMXRvMiwgbWF0Y2gyKTtcbmFkZFJlZ2V4VG9rZW4oJ2trJywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuXG5hZGRSZWdleFRva2VuKCdobW0nLCBtYXRjaDN0bzQpO1xuYWRkUmVnZXhUb2tlbignaG1tc3MnLCBtYXRjaDV0bzYpO1xuYWRkUmVnZXhUb2tlbignSG1tJywgbWF0Y2gzdG80KTtcbmFkZFJlZ2V4VG9rZW4oJ0htbXNzJywgbWF0Y2g1dG82KTtcblxuYWRkUGFyc2VUb2tlbihbJ0gnLCAnSEgnXSwgSE9VUik7XG5hZGRQYXJzZVRva2VuKFsnaycsICdrayddLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICB2YXIga0lucHV0ID0gdG9JbnQoaW5wdXQpO1xuICAgIGFycmF5W0hPVVJdID0ga0lucHV0ID09PSAyNCA/IDAgOiBrSW5wdXQ7XG59KTtcbmFkZFBhcnNlVG9rZW4oWydhJywgJ0EnXSwgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgY29uZmlnLl9pc1BtID0gY29uZmlnLl9sb2NhbGUuaXNQTShpbnB1dCk7XG4gICAgY29uZmlnLl9tZXJpZGllbSA9IGlucHV0O1xufSk7XG5hZGRQYXJzZVRva2VuKFsnaCcsICdoaCddLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICBhcnJheVtIT1VSXSA9IHRvSW50KGlucHV0KTtcbiAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5iaWdIb3VyID0gdHJ1ZTtcbn0pO1xuYWRkUGFyc2VUb2tlbignaG1tJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgdmFyIHBvcyA9IGlucHV0Lmxlbmd0aCAtIDI7XG4gICAgYXJyYXlbSE9VUl0gPSB0b0ludChpbnB1dC5zdWJzdHIoMCwgcG9zKSk7XG4gICAgYXJyYXlbTUlOVVRFXSA9IHRvSW50KGlucHV0LnN1YnN0cihwb3MpKTtcbiAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5iaWdIb3VyID0gdHJ1ZTtcbn0pO1xuYWRkUGFyc2VUb2tlbignaG1tc3MnLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICB2YXIgcG9zMSA9IGlucHV0Lmxlbmd0aCAtIDQsXG4gICAgICAgIHBvczIgPSBpbnB1dC5sZW5ndGggLSAyO1xuICAgIGFycmF5W0hPVVJdID0gdG9JbnQoaW5wdXQuc3Vic3RyKDAsIHBvczEpKTtcbiAgICBhcnJheVtNSU5VVEVdID0gdG9JbnQoaW5wdXQuc3Vic3RyKHBvczEsIDIpKTtcbiAgICBhcnJheVtTRUNPTkRdID0gdG9JbnQoaW5wdXQuc3Vic3RyKHBvczIpKTtcbiAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5iaWdIb3VyID0gdHJ1ZTtcbn0pO1xuYWRkUGFyc2VUb2tlbignSG1tJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgdmFyIHBvcyA9IGlucHV0Lmxlbmd0aCAtIDI7XG4gICAgYXJyYXlbSE9VUl0gPSB0b0ludChpbnB1dC5zdWJzdHIoMCwgcG9zKSk7XG4gICAgYXJyYXlbTUlOVVRFXSA9IHRvSW50KGlucHV0LnN1YnN0cihwb3MpKTtcbn0pO1xuYWRkUGFyc2VUb2tlbignSG1tc3MnLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICB2YXIgcG9zMSA9IGlucHV0Lmxlbmd0aCAtIDQsXG4gICAgICAgIHBvczIgPSBpbnB1dC5sZW5ndGggLSAyO1xuICAgIGFycmF5W0hPVVJdID0gdG9JbnQoaW5wdXQuc3Vic3RyKDAsIHBvczEpKTtcbiAgICBhcnJheVtNSU5VVEVdID0gdG9JbnQoaW5wdXQuc3Vic3RyKHBvczEsIDIpKTtcbiAgICBhcnJheVtTRUNPTkRdID0gdG9JbnQoaW5wdXQuc3Vic3RyKHBvczIpKTtcbn0pO1xuXG4vLyBMT0NBTEVTXG5cbmV4cG9ydCBmdW5jdGlvbiBsb2NhbGVJc1BNKGlucHV0KSB7XG4gICAgLy8gSUU4IFF1aXJrcyBNb2RlICYgSUU3IFN0YW5kYXJkcyBNb2RlIGRvIG5vdCBhbGxvdyBhY2Nlc3Npbmcgc3RyaW5ncyBsaWtlIGFycmF5c1xuICAgIC8vIFVzaW5nIGNoYXJBdCBzaG91bGQgYmUgbW9yZSBjb21wYXRpYmxlLlxuICAgIHJldHVybiAoaW5wdXQgKyAnJykudG9Mb3dlckNhc2UoKS5jaGFyQXQoMCkgPT09ICdwJztcbn1cblxuZXhwb3J0IHZhciBkZWZhdWx0TG9jYWxlTWVyaWRpZW1QYXJzZSA9IC9bYXBdXFwuP20/XFwuPy9pLFxuICAgIC8vIFNldHRpbmcgdGhlIGhvdXIgc2hvdWxkIGtlZXAgdGhlIHRpbWUsIGJlY2F1c2UgdGhlIHVzZXIgZXhwbGljaXRseVxuICAgIC8vIHNwZWNpZmllZCB3aGljaCBob3VyIHRoZXkgd2FudC4gU28gdHJ5aW5nIHRvIG1haW50YWluIHRoZSBzYW1lIGhvdXIgKGluXG4gICAgLy8gYSBuZXcgdGltZXpvbmUpIG1ha2VzIHNlbnNlLiBBZGRpbmcvc3VidHJhY3RpbmcgaG91cnMgZG9lcyBub3QgZm9sbG93XG4gICAgLy8gdGhpcyBydWxlLlxuICAgIGdldFNldEhvdXIgPSBtYWtlR2V0U2V0KCdIb3VycycsIHRydWUpO1xuXG5leHBvcnQgZnVuY3Rpb24gbG9jYWxlTWVyaWRpZW0oaG91cnMsIG1pbnV0ZXMsIGlzTG93ZXIpIHtcbiAgICBpZiAoaG91cnMgPiAxMSkge1xuICAgICAgICByZXR1cm4gaXNMb3dlciA/ICdwbScgOiAnUE0nO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBpc0xvd2VyID8gJ2FtJyA6ICdBTSc7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgZGVmYXVsdENhbGVuZGFyIH0gZnJvbSAnLi9jYWxlbmRhcic7XG5pbXBvcnQgeyBkZWZhdWx0TG9uZ0RhdGVGb3JtYXQgfSBmcm9tICcuL2Zvcm1hdHMnO1xuaW1wb3J0IHsgZGVmYXVsdEludmFsaWREYXRlIH0gZnJvbSAnLi9pbnZhbGlkJztcbmltcG9ydCB7IGRlZmF1bHRPcmRpbmFsLCBkZWZhdWx0RGF5T2ZNb250aE9yZGluYWxQYXJzZSB9IGZyb20gJy4vb3JkaW5hbCc7XG5pbXBvcnQgeyBkZWZhdWx0UmVsYXRpdmVUaW1lIH0gZnJvbSAnLi9yZWxhdGl2ZSc7XG5cbi8vIG1vbnRoc1xuaW1wb3J0IHsgZGVmYXVsdExvY2FsZU1vbnRocywgZGVmYXVsdExvY2FsZU1vbnRoc1Nob3J0IH0gZnJvbSAnLi4vdW5pdHMvbW9udGgnO1xuXG4vLyB3ZWVrXG5pbXBvcnQgeyBkZWZhdWx0TG9jYWxlV2VlayB9IGZyb20gJy4uL3VuaXRzL3dlZWsnO1xuXG4vLyB3ZWVrZGF5c1xuaW1wb3J0IHtcbiAgICBkZWZhdWx0TG9jYWxlV2Vla2RheXMsXG4gICAgZGVmYXVsdExvY2FsZVdlZWtkYXlzTWluLFxuICAgIGRlZmF1bHRMb2NhbGVXZWVrZGF5c1Nob3J0LFxufSBmcm9tICcuLi91bml0cy9kYXktb2Ytd2Vlayc7XG5cbi8vIG1lcmlkaWVtXG5pbXBvcnQgeyBkZWZhdWx0TG9jYWxlTWVyaWRpZW1QYXJzZSB9IGZyb20gJy4uL3VuaXRzL2hvdXInO1xuXG5leHBvcnQgdmFyIGJhc2VDb25maWcgPSB7XG4gICAgY2FsZW5kYXI6IGRlZmF1bHRDYWxlbmRhcixcbiAgICBsb25nRGF0ZUZvcm1hdDogZGVmYXVsdExvbmdEYXRlRm9ybWF0LFxuICAgIGludmFsaWREYXRlOiBkZWZhdWx0SW52YWxpZERhdGUsXG4gICAgb3JkaW5hbDogZGVmYXVsdE9yZGluYWwsXG4gICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogZGVmYXVsdERheU9mTW9udGhPcmRpbmFsUGFyc2UsXG4gICAgcmVsYXRpdmVUaW1lOiBkZWZhdWx0UmVsYXRpdmVUaW1lLFxuXG4gICAgbW9udGhzOiBkZWZhdWx0TG9jYWxlTW9udGhzLFxuICAgIG1vbnRoc1Nob3J0OiBkZWZhdWx0TG9jYWxlTW9udGhzU2hvcnQsXG5cbiAgICB3ZWVrOiBkZWZhdWx0TG9jYWxlV2VlayxcblxuICAgIHdlZWtkYXlzOiBkZWZhdWx0TG9jYWxlV2Vla2RheXMsXG4gICAgd2Vla2RheXNNaW46IGRlZmF1bHRMb2NhbGVXZWVrZGF5c01pbixcbiAgICB3ZWVrZGF5c1Nob3J0OiBkZWZhdWx0TG9jYWxlV2Vla2RheXNTaG9ydCxcblxuICAgIG1lcmlkaWVtUGFyc2U6IGRlZmF1bHRMb2NhbGVNZXJpZGllbVBhcnNlLFxufTtcbiIsImltcG9ydCBpc0FycmF5IGZyb20gJy4uL3V0aWxzL2lzLWFycmF5JztcbmltcG9ydCBpc1VuZGVmaW5lZCBmcm9tICcuLi91dGlscy9pcy11bmRlZmluZWQnO1xuaW1wb3J0IHsgZGVwcmVjYXRlU2ltcGxlIH0gZnJvbSAnLi4vdXRpbHMvZGVwcmVjYXRlJztcbmltcG9ydCB7IG1lcmdlQ29uZmlncyB9IGZyb20gJy4vc2V0JztcbmltcG9ydCB7IExvY2FsZSB9IGZyb20gJy4vY29uc3RydWN0b3InO1xuaW1wb3J0IGtleXMgZnJvbSAnLi4vdXRpbHMva2V5cyc7XG5cbmltcG9ydCB7IGJhc2VDb25maWcgfSBmcm9tICcuL2Jhc2UtY29uZmlnJztcblxuLy8gaW50ZXJuYWwgc3RvcmFnZSBmb3IgbG9jYWxlIGNvbmZpZyBmaWxlc1xudmFyIGxvY2FsZXMgPSB7fSxcbiAgICBsb2NhbGVGYW1pbGllcyA9IHt9LFxuICAgIGdsb2JhbExvY2FsZTtcblxuZnVuY3Rpb24gY29tbW9uUHJlZml4KGFycjEsIGFycjIpIHtcbiAgICB2YXIgaSxcbiAgICAgICAgbWlubCA9IE1hdGgubWluKGFycjEubGVuZ3RoLCBhcnIyLmxlbmd0aCk7XG4gICAgZm9yIChpID0gMDsgaSA8IG1pbmw7IGkgKz0gMSkge1xuICAgICAgICBpZiAoYXJyMVtpXSAhPT0gYXJyMltpXSkge1xuICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG1pbmw7XG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZUxvY2FsZShrZXkpIHtcbiAgICByZXR1cm4ga2V5ID8ga2V5LnRvTG93ZXJDYXNlKCkucmVwbGFjZSgnXycsICctJykgOiBrZXk7XG59XG5cbi8vIHBpY2sgdGhlIGxvY2FsZSBmcm9tIHRoZSBhcnJheVxuLy8gdHJ5IFsnZW4tYXUnLCAnZW4tZ2InXSBhcyAnZW4tYXUnLCAnZW4tZ2InLCAnZW4nLCBhcyBpbiBtb3ZlIHRocm91Z2ggdGhlIGxpc3QgdHJ5aW5nIGVhY2hcbi8vIHN1YnN0cmluZyBmcm9tIG1vc3Qgc3BlY2lmaWMgdG8gbGVhc3QsIGJ1dCBtb3ZlIHRvIHRoZSBuZXh0IGFycmF5IGl0ZW0gaWYgaXQncyBhIG1vcmUgc3BlY2lmaWMgdmFyaWFudCB0aGFuIHRoZSBjdXJyZW50IHJvb3RcbmZ1bmN0aW9uIGNob29zZUxvY2FsZShuYW1lcykge1xuICAgIHZhciBpID0gMCxcbiAgICAgICAgaixcbiAgICAgICAgbmV4dCxcbiAgICAgICAgbG9jYWxlLFxuICAgICAgICBzcGxpdDtcblxuICAgIHdoaWxlIChpIDwgbmFtZXMubGVuZ3RoKSB7XG4gICAgICAgIHNwbGl0ID0gbm9ybWFsaXplTG9jYWxlKG5hbWVzW2ldKS5zcGxpdCgnLScpO1xuICAgICAgICBqID0gc3BsaXQubGVuZ3RoO1xuICAgICAgICBuZXh0ID0gbm9ybWFsaXplTG9jYWxlKG5hbWVzW2kgKyAxXSk7XG4gICAgICAgIG5leHQgPSBuZXh0ID8gbmV4dC5zcGxpdCgnLScpIDogbnVsbDtcbiAgICAgICAgd2hpbGUgKGogPiAwKSB7XG4gICAgICAgICAgICBsb2NhbGUgPSBsb2FkTG9jYWxlKHNwbGl0LnNsaWNlKDAsIGopLmpvaW4oJy0nKSk7XG4gICAgICAgICAgICBpZiAobG9jYWxlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxvY2FsZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICBuZXh0ICYmXG4gICAgICAgICAgICAgICAgbmV4dC5sZW5ndGggPj0gaiAmJlxuICAgICAgICAgICAgICAgIGNvbW1vblByZWZpeChzcGxpdCwgbmV4dCkgPj0gaiAtIDFcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIC8vdGhlIG5leHQgYXJyYXkgaXRlbSBpcyBiZXR0ZXIgdGhhbiBhIHNoYWxsb3dlciBzdWJzdHJpbmcgb2YgdGhpcyBvbmVcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGotLTtcbiAgICAgICAgfVxuICAgICAgICBpKys7XG4gICAgfVxuICAgIHJldHVybiBnbG9iYWxMb2NhbGU7XG59XG5cbmZ1bmN0aW9uIGlzTG9jYWxlTmFtZVNhbmUobmFtZSkge1xuICAgIC8vIFByZXZlbnQgbmFtZXMgdGhhdCBsb29rIGxpa2UgZmlsZXN5c3RlbSBwYXRocywgaS5lIGNvbnRhaW4gJy8nIG9yICdcXCdcbiAgICAvLyBFbnN1cmUgbmFtZSBpcyBhdmFpbGFibGUgYW5kIGZ1bmN0aW9uIHJldHVybnMgYm9vbGVhblxuICAgIHJldHVybiAhIShuYW1lICYmIG5hbWUubWF0Y2goJ15bXi9cXFxcXFxcXF0qJCcpKTtcbn1cblxuZnVuY3Rpb24gbG9hZExvY2FsZShuYW1lKSB7XG4gICAgdmFyIG9sZExvY2FsZSA9IG51bGwsXG4gICAgICAgIGFsaWFzZWRSZXF1aXJlO1xuICAgIC8vIFRPRE86IEZpbmQgYSBiZXR0ZXIgd2F5IHRvIHJlZ2lzdGVyIGFuZCBsb2FkIGFsbCB0aGUgbG9jYWxlcyBpbiBOb2RlXG4gICAgaWYgKFxuICAgICAgICBsb2NhbGVzW25hbWVdID09PSB1bmRlZmluZWQgJiZcbiAgICAgICAgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgbW9kdWxlICYmXG4gICAgICAgIG1vZHVsZS5leHBvcnRzICYmXG4gICAgICAgIGlzTG9jYWxlTmFtZVNhbmUobmFtZSlcbiAgICApIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIG9sZExvY2FsZSA9IGdsb2JhbExvY2FsZS5fYWJicjtcbiAgICAgICAgICAgIGFsaWFzZWRSZXF1aXJlID0gcmVxdWlyZTtcbiAgICAgICAgICAgIGFsaWFzZWRSZXF1aXJlKCcuL2xvY2FsZS8nICsgbmFtZSk7XG4gICAgICAgICAgICBnZXRTZXRHbG9iYWxMb2NhbGUob2xkTG9jYWxlKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgLy8gbWFyayBhcyBub3QgZm91bmQgdG8gYXZvaWQgcmVwZWF0aW5nIGV4cGVuc2l2ZSBmaWxlIHJlcXVpcmUgY2FsbCBjYXVzaW5nIGhpZ2ggQ1BVXG4gICAgICAgICAgICAvLyB3aGVuIHRyeWluZyB0byBmaW5kIGVuLVVTLCBlbl9VUywgZW4tdXMgZm9yIGV2ZXJ5IGZvcm1hdCBjYWxsXG4gICAgICAgICAgICBsb2NhbGVzW25hbWVdID0gbnVsbDsgLy8gbnVsbCBtZWFucyBub3QgZm91bmRcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbG9jYWxlc1tuYW1lXTtcbn1cblxuLy8gVGhpcyBmdW5jdGlvbiB3aWxsIGxvYWQgbG9jYWxlIGFuZCB0aGVuIHNldCB0aGUgZ2xvYmFsIGxvY2FsZS4gIElmXG4vLyBubyBhcmd1bWVudHMgYXJlIHBhc3NlZCBpbiwgaXQgd2lsbCBzaW1wbHkgcmV0dXJuIHRoZSBjdXJyZW50IGdsb2JhbFxuLy8gbG9jYWxlIGtleS5cbmV4cG9ydCBmdW5jdGlvbiBnZXRTZXRHbG9iYWxMb2NhbGUoa2V5LCB2YWx1ZXMpIHtcbiAgICB2YXIgZGF0YTtcbiAgICBpZiAoa2V5KSB7XG4gICAgICAgIGlmIChpc1VuZGVmaW5lZCh2YWx1ZXMpKSB7XG4gICAgICAgICAgICBkYXRhID0gZ2V0TG9jYWxlKGtleSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkYXRhID0gZGVmaW5lTG9jYWxlKGtleSwgdmFsdWVzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgICAgICAvLyBtb21lbnQuZHVyYXRpb24uX2xvY2FsZSA9IG1vbWVudC5fbG9jYWxlID0gZGF0YTtcbiAgICAgICAgICAgIGdsb2JhbExvY2FsZSA9IGRhdGE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmIGNvbnNvbGUud2Fybikge1xuICAgICAgICAgICAgICAgIC8vd2FybiB1c2VyIGlmIGFyZ3VtZW50cyBhcmUgcGFzc2VkIGJ1dCB0aGUgbG9jYWxlIGNvdWxkIG5vdCBiZSBzZXRcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgICAgICAgICAgICdMb2NhbGUgJyArIGtleSArICcgbm90IGZvdW5kLiBEaWQgeW91IGZvcmdldCB0byBsb2FkIGl0PydcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGdsb2JhbExvY2FsZS5fYWJicjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRlZmluZUxvY2FsZShuYW1lLCBjb25maWcpIHtcbiAgICBpZiAoY29uZmlnICE9PSBudWxsKSB7XG4gICAgICAgIHZhciBsb2NhbGUsXG4gICAgICAgICAgICBwYXJlbnRDb25maWcgPSBiYXNlQ29uZmlnO1xuICAgICAgICBjb25maWcuYWJiciA9IG5hbWU7XG4gICAgICAgIGlmIChsb2NhbGVzW25hbWVdICE9IG51bGwpIHtcbiAgICAgICAgICAgIGRlcHJlY2F0ZVNpbXBsZShcbiAgICAgICAgICAgICAgICAnZGVmaW5lTG9jYWxlT3ZlcnJpZGUnLFxuICAgICAgICAgICAgICAgICd1c2UgbW9tZW50LnVwZGF0ZUxvY2FsZShsb2NhbGVOYW1lLCBjb25maWcpIHRvIGNoYW5nZSAnICtcbiAgICAgICAgICAgICAgICAgICAgJ2FuIGV4aXN0aW5nIGxvY2FsZS4gbW9tZW50LmRlZmluZUxvY2FsZShsb2NhbGVOYW1lLCAnICtcbiAgICAgICAgICAgICAgICAgICAgJ2NvbmZpZykgc2hvdWxkIG9ubHkgYmUgdXNlZCBmb3IgY3JlYXRpbmcgYSBuZXcgbG9jYWxlICcgK1xuICAgICAgICAgICAgICAgICAgICAnU2VlIGh0dHA6Ly9tb21lbnRqcy5jb20vZ3VpZGVzLyMvd2FybmluZ3MvZGVmaW5lLWxvY2FsZS8gZm9yIG1vcmUgaW5mby4nXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgcGFyZW50Q29uZmlnID0gbG9jYWxlc1tuYW1lXS5fY29uZmlnO1xuICAgICAgICB9IGVsc2UgaWYgKGNvbmZpZy5wYXJlbnRMb2NhbGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKGxvY2FsZXNbY29uZmlnLnBhcmVudExvY2FsZV0gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHBhcmVudENvbmZpZyA9IGxvY2FsZXNbY29uZmlnLnBhcmVudExvY2FsZV0uX2NvbmZpZztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbG9jYWxlID0gbG9hZExvY2FsZShjb25maWcucGFyZW50TG9jYWxlKTtcbiAgICAgICAgICAgICAgICBpZiAobG9jYWxlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50Q29uZmlnID0gbG9jYWxlLl9jb25maWc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFsb2NhbGVGYW1pbGllc1tjb25maWcucGFyZW50TG9jYWxlXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWxlRmFtaWxpZXNbY29uZmlnLnBhcmVudExvY2FsZV0gPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBsb2NhbGVGYW1pbGllc1tjb25maWcucGFyZW50TG9jYWxlXS5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25maWc6IGNvbmZpZyxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBsb2NhbGVzW25hbWVdID0gbmV3IExvY2FsZShtZXJnZUNvbmZpZ3MocGFyZW50Q29uZmlnLCBjb25maWcpKTtcblxuICAgICAgICBpZiAobG9jYWxlRmFtaWxpZXNbbmFtZV0pIHtcbiAgICAgICAgICAgIGxvY2FsZUZhbWlsaWVzW25hbWVdLmZvckVhY2goZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgICAgICAgICBkZWZpbmVMb2NhbGUoeC5uYW1lLCB4LmNvbmZpZyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGJhY2t3YXJkcyBjb21wYXQgZm9yIG5vdzogYWxzbyBzZXQgdGhlIGxvY2FsZVxuICAgICAgICAvLyBtYWtlIHN1cmUgd2Ugc2V0IHRoZSBsb2NhbGUgQUZURVIgYWxsIGNoaWxkIGxvY2FsZXMgaGF2ZSBiZWVuXG4gICAgICAgIC8vIGNyZWF0ZWQsIHNvIHdlIHdvbid0IGVuZCB1cCB3aXRoIHRoZSBjaGlsZCBsb2NhbGUgc2V0LlxuICAgICAgICBnZXRTZXRHbG9iYWxMb2NhbGUobmFtZSk7XG5cbiAgICAgICAgcmV0dXJuIGxvY2FsZXNbbmFtZV07XG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gdXNlZnVsIGZvciB0ZXN0aW5nXG4gICAgICAgIGRlbGV0ZSBsb2NhbGVzW25hbWVdO1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVMb2NhbGUobmFtZSwgY29uZmlnKSB7XG4gICAgaWYgKGNvbmZpZyAhPSBudWxsKSB7XG4gICAgICAgIHZhciBsb2NhbGUsXG4gICAgICAgICAgICB0bXBMb2NhbGUsXG4gICAgICAgICAgICBwYXJlbnRDb25maWcgPSBiYXNlQ29uZmlnO1xuXG4gICAgICAgIGlmIChsb2NhbGVzW25hbWVdICE9IG51bGwgJiYgbG9jYWxlc1tuYW1lXS5wYXJlbnRMb2NhbGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgLy8gVXBkYXRlIGV4aXN0aW5nIGNoaWxkIGxvY2FsZSBpbi1wbGFjZSB0byBhdm9pZCBtZW1vcnktbGVha3NcbiAgICAgICAgICAgIGxvY2FsZXNbbmFtZV0uc2V0KG1lcmdlQ29uZmlncyhsb2NhbGVzW25hbWVdLl9jb25maWcsIGNvbmZpZykpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gTUVSR0VcbiAgICAgICAgICAgIHRtcExvY2FsZSA9IGxvYWRMb2NhbGUobmFtZSk7XG4gICAgICAgICAgICBpZiAodG1wTG9jYWxlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBwYXJlbnRDb25maWcgPSB0bXBMb2NhbGUuX2NvbmZpZztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbmZpZyA9IG1lcmdlQ29uZmlncyhwYXJlbnRDb25maWcsIGNvbmZpZyk7XG4gICAgICAgICAgICBpZiAodG1wTG9jYWxlID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAvLyB1cGRhdGVMb2NhbGUgaXMgY2FsbGVkIGZvciBjcmVhdGluZyBhIG5ldyBsb2NhbGVcbiAgICAgICAgICAgICAgICAvLyBTZXQgYWJiciBzbyBpdCB3aWxsIGhhdmUgYSBuYW1lIChnZXR0ZXJzIHJldHVyblxuICAgICAgICAgICAgICAgIC8vIHVuZGVmaW5lZCBvdGhlcndpc2UpLlxuICAgICAgICAgICAgICAgIGNvbmZpZy5hYmJyID0gbmFtZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxvY2FsZSA9IG5ldyBMb2NhbGUoY29uZmlnKTtcbiAgICAgICAgICAgIGxvY2FsZS5wYXJlbnRMb2NhbGUgPSBsb2NhbGVzW25hbWVdO1xuICAgICAgICAgICAgbG9jYWxlc1tuYW1lXSA9IGxvY2FsZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGJhY2t3YXJkcyBjb21wYXQgZm9yIG5vdzogYWxzbyBzZXQgdGhlIGxvY2FsZVxuICAgICAgICBnZXRTZXRHbG9iYWxMb2NhbGUobmFtZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gcGFzcyBudWxsIGZvciBjb25maWcgdG8gdW51cGRhdGUsIHVzZWZ1bCBmb3IgdGVzdHNcbiAgICAgICAgaWYgKGxvY2FsZXNbbmFtZV0gIT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKGxvY2FsZXNbbmFtZV0ucGFyZW50TG9jYWxlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBsb2NhbGVzW25hbWVdID0gbG9jYWxlc1tuYW1lXS5wYXJlbnRMb2NhbGU7XG4gICAgICAgICAgICAgICAgaWYgKG5hbWUgPT09IGdldFNldEdsb2JhbExvY2FsZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGdldFNldEdsb2JhbExvY2FsZShuYW1lKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGxvY2FsZXNbbmFtZV0gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBsb2NhbGVzW25hbWVdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBsb2NhbGVzW25hbWVdO1xufVxuXG4vLyByZXR1cm5zIGxvY2FsZSBkYXRhXG5leHBvcnQgZnVuY3Rpb24gZ2V0TG9jYWxlKGtleSkge1xuICAgIHZhciBsb2NhbGU7XG5cbiAgICBpZiAoa2V5ICYmIGtleS5fbG9jYWxlICYmIGtleS5fbG9jYWxlLl9hYmJyKSB7XG4gICAgICAgIGtleSA9IGtleS5fbG9jYWxlLl9hYmJyO1xuICAgIH1cblxuICAgIGlmICgha2V5KSB7XG4gICAgICAgIHJldHVybiBnbG9iYWxMb2NhbGU7XG4gICAgfVxuXG4gICAgaWYgKCFpc0FycmF5KGtleSkpIHtcbiAgICAgICAgLy9zaG9ydC1jaXJjdWl0IGV2ZXJ5dGhpbmcgZWxzZVxuICAgICAgICBsb2NhbGUgPSBsb2FkTG9jYWxlKGtleSk7XG4gICAgICAgIGlmIChsb2NhbGUpIHtcbiAgICAgICAgICAgIHJldHVybiBsb2NhbGU7XG4gICAgICAgIH1cbiAgICAgICAga2V5ID0gW2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIGNob29zZUxvY2FsZShrZXkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbGlzdExvY2FsZXMoKSB7XG4gICAgcmV0dXJuIGtleXMobG9jYWxlcyk7XG59XG4iLCJpbXBvcnQgeyBkYXlzSW5Nb250aCB9IGZyb20gJy4uL3VuaXRzL21vbnRoJztcbmltcG9ydCB7XG4gICAgWUVBUixcbiAgICBNT05USCxcbiAgICBEQVRFLFxuICAgIEhPVVIsXG4gICAgTUlOVVRFLFxuICAgIFNFQ09ORCxcbiAgICBNSUxMSVNFQ09ORCxcbiAgICBXRUVLLFxuICAgIFdFRUtEQVksXG59IGZyb20gJy4uL3VuaXRzL2NvbnN0YW50cyc7XG5pbXBvcnQgZ2V0UGFyc2luZ0ZsYWdzIGZyb20gJy4uL2NyZWF0ZS9wYXJzaW5nLWZsYWdzJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY2hlY2tPdmVyZmxvdyhtKSB7XG4gICAgdmFyIG92ZXJmbG93LFxuICAgICAgICBhID0gbS5fYTtcblxuICAgIGlmIChhICYmIGdldFBhcnNpbmdGbGFncyhtKS5vdmVyZmxvdyA9PT0gLTIpIHtcbiAgICAgICAgb3ZlcmZsb3cgPVxuICAgICAgICAgICAgYVtNT05USF0gPCAwIHx8IGFbTU9OVEhdID4gMTFcbiAgICAgICAgICAgICAgICA/IE1PTlRIXG4gICAgICAgICAgICAgICAgOiBhW0RBVEVdIDwgMSB8fCBhW0RBVEVdID4gZGF5c0luTW9udGgoYVtZRUFSXSwgYVtNT05USF0pXG4gICAgICAgICAgICAgICAgICA/IERBVEVcbiAgICAgICAgICAgICAgICAgIDogYVtIT1VSXSA8IDAgfHxcbiAgICAgICAgICAgICAgICAgICAgICBhW0hPVVJdID4gMjQgfHxcbiAgICAgICAgICAgICAgICAgICAgICAoYVtIT1VSXSA9PT0gMjQgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKGFbTUlOVVRFXSAhPT0gMCB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYVtTRUNPTkRdICE9PSAwIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhW01JTExJU0VDT05EXSAhPT0gMCkpXG4gICAgICAgICAgICAgICAgICAgID8gSE9VUlxuICAgICAgICAgICAgICAgICAgICA6IGFbTUlOVVRFXSA8IDAgfHwgYVtNSU5VVEVdID4gNTlcbiAgICAgICAgICAgICAgICAgICAgICA/IE1JTlVURVxuICAgICAgICAgICAgICAgICAgICAgIDogYVtTRUNPTkRdIDwgMCB8fCBhW1NFQ09ORF0gPiA1OVxuICAgICAgICAgICAgICAgICAgICAgICAgPyBTRUNPTkRcbiAgICAgICAgICAgICAgICAgICAgICAgIDogYVtNSUxMSVNFQ09ORF0gPCAwIHx8IGFbTUlMTElTRUNPTkRdID4gOTk5XG4gICAgICAgICAgICAgICAgICAgICAgICAgID8gTUlMTElTRUNPTkRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgOiAtMTtcblxuICAgICAgICBpZiAoXG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MobSkuX292ZXJmbG93RGF5T2ZZZWFyICYmXG4gICAgICAgICAgICAob3ZlcmZsb3cgPCBZRUFSIHx8IG92ZXJmbG93ID4gREFURSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgICBvdmVyZmxvdyA9IERBVEU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGdldFBhcnNpbmdGbGFncyhtKS5fb3ZlcmZsb3dXZWVrcyAmJiBvdmVyZmxvdyA9PT0gLTEpIHtcbiAgICAgICAgICAgIG92ZXJmbG93ID0gV0VFSztcbiAgICAgICAgfVxuICAgICAgICBpZiAoZ2V0UGFyc2luZ0ZsYWdzKG0pLl9vdmVyZmxvd1dlZWtkYXkgJiYgb3ZlcmZsb3cgPT09IC0xKSB7XG4gICAgICAgICAgICBvdmVyZmxvdyA9IFdFRUtEQVk7XG4gICAgICAgIH1cblxuICAgICAgICBnZXRQYXJzaW5nRmxhZ3MobSkub3ZlcmZsb3cgPSBvdmVyZmxvdztcbiAgICB9XG5cbiAgICByZXR1cm4gbTtcbn1cbiIsImltcG9ydCB7IGNvbmZpZ0Zyb21TdHJpbmdBbmRGb3JtYXQgfSBmcm9tICcuL2Zyb20tc3RyaW5nLWFuZC1mb3JtYXQnO1xuaW1wb3J0IHsgY3JlYXRlVVRDRGF0ZSB9IGZyb20gJy4vZGF0ZS1mcm9tLWFycmF5JztcbmltcG9ydCB7IGhvb2tzIH0gZnJvbSAnLi4vdXRpbHMvaG9va3MnO1xuaW1wb3J0IHsgZGVwcmVjYXRlIH0gZnJvbSAnLi4vdXRpbHMvZGVwcmVjYXRlJztcbmltcG9ydCBnZXRQYXJzaW5nRmxhZ3MgZnJvbSAnLi9wYXJzaW5nLWZsYWdzJztcbmltcG9ydCB7IGRlZmF1bHRMb2NhbGVNb250aHNTaG9ydCB9IGZyb20gJy4uL3VuaXRzL21vbnRoJztcbmltcG9ydCB7IGRlZmF1bHRMb2NhbGVXZWVrZGF5c1Nob3J0IH0gZnJvbSAnLi4vdW5pdHMvZGF5LW9mLXdlZWsnO1xuXG4vLyBpc28gODYwMSByZWdleFxuLy8gMDAwMC0wMC0wMCAwMDAwLVcwMCBvciAwMDAwLVcwMC0wICsgVCArIDAwIG9yIDAwOjAwIG9yIDAwOjAwOjAwIG9yIDAwOjAwOjAwLjAwMCArICswMDowMCBvciArMDAwMCBvciArMDApXG52YXIgZXh0ZW5kZWRJc29SZWdleCA9XG4gICAgICAgIC9eXFxzKigoPzpbKy1dXFxkezZ9fFxcZHs0fSktKD86XFxkXFxkLVxcZFxcZHxXXFxkXFxkLVxcZHxXXFxkXFxkfFxcZFxcZFxcZHxcXGRcXGQpKSg/OihUfCApKFxcZFxcZCg/OjpcXGRcXGQoPzo6XFxkXFxkKD86Wy4sXVxcZCspPyk/KT8pKFsrLV1cXGRcXGQoPzo6P1xcZFxcZCk/fFxccypaKT8pPyQvLFxuICAgIGJhc2ljSXNvUmVnZXggPVxuICAgICAgICAvXlxccyooKD86WystXVxcZHs2fXxcXGR7NH0pKD86XFxkXFxkXFxkXFxkfFdcXGRcXGRcXGR8V1xcZFxcZHxcXGRcXGRcXGR8XFxkXFxkfCkpKD86KFR8ICkoXFxkXFxkKD86XFxkXFxkKD86XFxkXFxkKD86Wy4sXVxcZCspPyk/KT8pKFsrLV1cXGRcXGQoPzo6P1xcZFxcZCk/fFxccypaKT8pPyQvLFxuICAgIHR6UmVnZXggPSAvWnxbKy1dXFxkXFxkKD86Oj9cXGRcXGQpPy8sXG4gICAgaXNvRGF0ZXMgPSBbXG4gICAgICAgIFsnWVlZWVlZLU1NLUREJywgL1srLV1cXGR7Nn0tXFxkXFxkLVxcZFxcZC9dLFxuICAgICAgICBbJ1lZWVktTU0tREQnLCAvXFxkezR9LVxcZFxcZC1cXGRcXGQvXSxcbiAgICAgICAgWydHR0dHLVtXXVdXLUUnLCAvXFxkezR9LVdcXGRcXGQtXFxkL10sXG4gICAgICAgIFsnR0dHRy1bV11XVycsIC9cXGR7NH0tV1xcZFxcZC8sIGZhbHNlXSxcbiAgICAgICAgWydZWVlZLURERCcsIC9cXGR7NH0tXFxkezN9L10sXG4gICAgICAgIFsnWVlZWS1NTScsIC9cXGR7NH0tXFxkXFxkLywgZmFsc2VdLFxuICAgICAgICBbJ1lZWVlZWU1NREQnLCAvWystXVxcZHsxMH0vXSxcbiAgICAgICAgWydZWVlZTU1ERCcsIC9cXGR7OH0vXSxcbiAgICAgICAgWydHR0dHW1ddV1dFJywgL1xcZHs0fVdcXGR7M30vXSxcbiAgICAgICAgWydHR0dHW1ddV1cnLCAvXFxkezR9V1xcZHsyfS8sIGZhbHNlXSxcbiAgICAgICAgWydZWVlZREREJywgL1xcZHs3fS9dLFxuICAgICAgICBbJ1lZWVlNTScsIC9cXGR7Nn0vLCBmYWxzZV0sXG4gICAgICAgIFsnWVlZWScsIC9cXGR7NH0vLCBmYWxzZV0sXG4gICAgXSxcbiAgICAvLyBpc28gdGltZSBmb3JtYXRzIGFuZCByZWdleGVzXG4gICAgaXNvVGltZXMgPSBbXG4gICAgICAgIFsnSEg6bW06c3MuU1NTUycsIC9cXGRcXGQ6XFxkXFxkOlxcZFxcZFxcLlxcZCsvXSxcbiAgICAgICAgWydISDptbTpzcyxTU1NTJywgL1xcZFxcZDpcXGRcXGQ6XFxkXFxkLFxcZCsvXSxcbiAgICAgICAgWydISDptbTpzcycsIC9cXGRcXGQ6XFxkXFxkOlxcZFxcZC9dLFxuICAgICAgICBbJ0hIOm1tJywgL1xcZFxcZDpcXGRcXGQvXSxcbiAgICAgICAgWydISG1tc3MuU1NTUycsIC9cXGRcXGRcXGRcXGRcXGRcXGRcXC5cXGQrL10sXG4gICAgICAgIFsnSEhtbXNzLFNTU1MnLCAvXFxkXFxkXFxkXFxkXFxkXFxkLFxcZCsvXSxcbiAgICAgICAgWydISG1tc3MnLCAvXFxkXFxkXFxkXFxkXFxkXFxkL10sXG4gICAgICAgIFsnSEhtbScsIC9cXGRcXGRcXGRcXGQvXSxcbiAgICAgICAgWydISCcsIC9cXGRcXGQvXSxcbiAgICBdLFxuICAgIGFzcE5ldEpzb25SZWdleCA9IC9eXFwvP0RhdGVcXCgoLT9cXGQrKS9pLFxuICAgIC8vIFJGQyAyODIyIHJlZ2V4OiBGb3IgZGV0YWlscyBzZWUgaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzI4MjIjc2VjdGlvbi0zLjNcbiAgICByZmMyODIyID1cbiAgICAgICAgL14oPzooTW9ufFR1ZXxXZWR8VGh1fEZyaXxTYXR8U3VuKSw/XFxzKT8oXFxkezEsMn0pXFxzKEphbnxGZWJ8TWFyfEFwcnxNYXl8SnVufEp1bHxBdWd8U2VwfE9jdHxOb3Z8RGVjKVxccyhcXGR7Miw0fSlcXHMoXFxkXFxkKTooXFxkXFxkKSg/OjooXFxkXFxkKSk/XFxzKD86KFVUfEdNVHxbRUNNUF1bU0RdVCl8KFtael0pfChbKy1dXFxkezR9KSkkLyxcbiAgICBvYnNPZmZzZXRzID0ge1xuICAgICAgICBVVDogMCxcbiAgICAgICAgR01UOiAwLFxuICAgICAgICBFRFQ6IC00ICogNjAsXG4gICAgICAgIEVTVDogLTUgKiA2MCxcbiAgICAgICAgQ0RUOiAtNSAqIDYwLFxuICAgICAgICBDU1Q6IC02ICogNjAsXG4gICAgICAgIE1EVDogLTYgKiA2MCxcbiAgICAgICAgTVNUOiAtNyAqIDYwLFxuICAgICAgICBQRFQ6IC03ICogNjAsXG4gICAgICAgIFBTVDogLTggKiA2MCxcbiAgICB9O1xuXG4vLyBkYXRlIGZyb20gaXNvIGZvcm1hdFxuZXhwb3J0IGZ1bmN0aW9uIGNvbmZpZ0Zyb21JU08oY29uZmlnKSB7XG4gICAgdmFyIGksXG4gICAgICAgIGwsXG4gICAgICAgIHN0cmluZyA9IGNvbmZpZy5faSxcbiAgICAgICAgbWF0Y2ggPSBleHRlbmRlZElzb1JlZ2V4LmV4ZWMoc3RyaW5nKSB8fCBiYXNpY0lzb1JlZ2V4LmV4ZWMoc3RyaW5nKSxcbiAgICAgICAgYWxsb3dUaW1lLFxuICAgICAgICBkYXRlRm9ybWF0LFxuICAgICAgICB0aW1lRm9ybWF0LFxuICAgICAgICB0ekZvcm1hdCxcbiAgICAgICAgaXNvRGF0ZXNMZW4gPSBpc29EYXRlcy5sZW5ndGgsXG4gICAgICAgIGlzb1RpbWVzTGVuID0gaXNvVGltZXMubGVuZ3RoO1xuXG4gICAgaWYgKG1hdGNoKSB7XG4gICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmlzbyA9IHRydWU7XG4gICAgICAgIGZvciAoaSA9IDAsIGwgPSBpc29EYXRlc0xlbjsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgaWYgKGlzb0RhdGVzW2ldWzFdLmV4ZWMobWF0Y2hbMV0pKSB7XG4gICAgICAgICAgICAgICAgZGF0ZUZvcm1hdCA9IGlzb0RhdGVzW2ldWzBdO1xuICAgICAgICAgICAgICAgIGFsbG93VGltZSA9IGlzb0RhdGVzW2ldWzJdICE9PSBmYWxzZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0ZUZvcm1hdCA9PSBudWxsKSB7XG4gICAgICAgICAgICBjb25maWcuX2lzVmFsaWQgPSBmYWxzZTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWF0Y2hbM10pIHtcbiAgICAgICAgICAgIGZvciAoaSA9IDAsIGwgPSBpc29UaW1lc0xlbjsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmIChpc29UaW1lc1tpXVsxXS5leGVjKG1hdGNoWzNdKSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBtYXRjaFsyXSBzaG91bGQgYmUgJ1QnIG9yIHNwYWNlXG4gICAgICAgICAgICAgICAgICAgIHRpbWVGb3JtYXQgPSAobWF0Y2hbMl0gfHwgJyAnKSArIGlzb1RpbWVzW2ldWzBdO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGltZUZvcm1hdCA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgY29uZmlnLl9pc1ZhbGlkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICghYWxsb3dUaW1lICYmIHRpbWVGb3JtYXQgIT0gbnVsbCkge1xuICAgICAgICAgICAgY29uZmlnLl9pc1ZhbGlkID0gZmFsc2U7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1hdGNoWzRdKSB7XG4gICAgICAgICAgICBpZiAodHpSZWdleC5leGVjKG1hdGNoWzRdKSkge1xuICAgICAgICAgICAgICAgIHR6Rm9ybWF0ID0gJ1onO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25maWcuX2lzVmFsaWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uZmlnLl9mID0gZGF0ZUZvcm1hdCArICh0aW1lRm9ybWF0IHx8ICcnKSArICh0ekZvcm1hdCB8fCAnJyk7XG4gICAgICAgIGNvbmZpZ0Zyb21TdHJpbmdBbmRGb3JtYXQoY29uZmlnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBjb25maWcuX2lzVmFsaWQgPSBmYWxzZTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGV4dHJhY3RGcm9tUkZDMjgyMlN0cmluZ3MoXG4gICAgeWVhclN0cixcbiAgICBtb250aFN0cixcbiAgICBkYXlTdHIsXG4gICAgaG91clN0cixcbiAgICBtaW51dGVTdHIsXG4gICAgc2Vjb25kU3RyXG4pIHtcbiAgICB2YXIgcmVzdWx0ID0gW1xuICAgICAgICB1bnRydW5jYXRlWWVhcih5ZWFyU3RyKSxcbiAgICAgICAgZGVmYXVsdExvY2FsZU1vbnRoc1Nob3J0LmluZGV4T2YobW9udGhTdHIpLFxuICAgICAgICBwYXJzZUludChkYXlTdHIsIDEwKSxcbiAgICAgICAgcGFyc2VJbnQoaG91clN0ciwgMTApLFxuICAgICAgICBwYXJzZUludChtaW51dGVTdHIsIDEwKSxcbiAgICBdO1xuXG4gICAgaWYgKHNlY29uZFN0cikge1xuICAgICAgICByZXN1bHQucHVzaChwYXJzZUludChzZWNvbmRTdHIsIDEwKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gdW50cnVuY2F0ZVllYXIoeWVhclN0cikge1xuICAgIHZhciB5ZWFyID0gcGFyc2VJbnQoeWVhclN0ciwgMTApO1xuICAgIGlmICh5ZWFyIDw9IDQ5KSB7XG4gICAgICAgIHJldHVybiAyMDAwICsgeWVhcjtcbiAgICB9IGVsc2UgaWYgKHllYXIgPD0gOTk5KSB7XG4gICAgICAgIHJldHVybiAxOTAwICsgeWVhcjtcbiAgICB9XG4gICAgcmV0dXJuIHllYXI7XG59XG5cbmZ1bmN0aW9uIHByZXByb2Nlc3NSRkMyODIyKHMpIHtcbiAgICAvLyBSZW1vdmUgY29tbWVudHMgYW5kIGZvbGRpbmcgd2hpdGVzcGFjZSBhbmQgcmVwbGFjZSBtdWx0aXBsZS1zcGFjZXMgd2l0aCBhIHNpbmdsZSBzcGFjZVxuICAgIHJldHVybiBzXG4gICAgICAgIC5yZXBsYWNlKC9cXChbXigpXSpcXCl8W1xcblxcdF0vZywgJyAnKVxuICAgICAgICAucmVwbGFjZSgvKFxcc1xccyspL2csICcgJylcbiAgICAgICAgLnJlcGxhY2UoL15cXHNcXHMqLywgJycpXG4gICAgICAgIC5yZXBsYWNlKC9cXHNcXHMqJC8sICcnKTtcbn1cblxuZnVuY3Rpb24gY2hlY2tXZWVrZGF5KHdlZWtkYXlTdHIsIHBhcnNlZElucHV0LCBjb25maWcpIHtcbiAgICBpZiAod2Vla2RheVN0cikge1xuICAgICAgICAvLyBUT0RPOiBSZXBsYWNlIHRoZSB2YW5pbGxhIEpTIERhdGUgb2JqZWN0IHdpdGggYW4gaW5kZXBlbmRlbnQgZGF5LW9mLXdlZWsgY2hlY2suXG4gICAgICAgIHZhciB3ZWVrZGF5UHJvdmlkZWQgPSBkZWZhdWx0TG9jYWxlV2Vla2RheXNTaG9ydC5pbmRleE9mKHdlZWtkYXlTdHIpLFxuICAgICAgICAgICAgd2Vla2RheUFjdHVhbCA9IG5ldyBEYXRlKFxuICAgICAgICAgICAgICAgIHBhcnNlZElucHV0WzBdLFxuICAgICAgICAgICAgICAgIHBhcnNlZElucHV0WzFdLFxuICAgICAgICAgICAgICAgIHBhcnNlZElucHV0WzJdXG4gICAgICAgICAgICApLmdldERheSgpO1xuICAgICAgICBpZiAod2Vla2RheVByb3ZpZGVkICE9PSB3ZWVrZGF5QWN0dWFsKSB7XG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS53ZWVrZGF5TWlzbWF0Y2ggPSB0cnVlO1xuICAgICAgICAgICAgY29uZmlnLl9pc1ZhbGlkID0gZmFsc2U7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIGNhbGN1bGF0ZU9mZnNldChvYnNPZmZzZXQsIG1pbGl0YXJ5T2Zmc2V0LCBudW1PZmZzZXQpIHtcbiAgICBpZiAob2JzT2Zmc2V0KSB7XG4gICAgICAgIHJldHVybiBvYnNPZmZzZXRzW29ic09mZnNldF07XG4gICAgfSBlbHNlIGlmIChtaWxpdGFyeU9mZnNldCkge1xuICAgICAgICAvLyB0aGUgb25seSBhbGxvd2VkIG1pbGl0YXJ5IHR6IGlzIFpcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGhtID0gcGFyc2VJbnQobnVtT2Zmc2V0LCAxMCksXG4gICAgICAgICAgICBtID0gaG0gJSAxMDAsXG4gICAgICAgICAgICBoID0gKGhtIC0gbSkgLyAxMDA7XG4gICAgICAgIHJldHVybiBoICogNjAgKyBtO1xuICAgIH1cbn1cblxuLy8gZGF0ZSBhbmQgdGltZSBmcm9tIHJlZiAyODIyIGZvcm1hdFxuZXhwb3J0IGZ1bmN0aW9uIGNvbmZpZ0Zyb21SRkMyODIyKGNvbmZpZykge1xuICAgIHZhciBtYXRjaCA9IHJmYzI4MjIuZXhlYyhwcmVwcm9jZXNzUkZDMjgyMihjb25maWcuX2kpKSxcbiAgICAgICAgcGFyc2VkQXJyYXk7XG4gICAgaWYgKG1hdGNoKSB7XG4gICAgICAgIHBhcnNlZEFycmF5ID0gZXh0cmFjdEZyb21SRkMyODIyU3RyaW5ncyhcbiAgICAgICAgICAgIG1hdGNoWzRdLFxuICAgICAgICAgICAgbWF0Y2hbM10sXG4gICAgICAgICAgICBtYXRjaFsyXSxcbiAgICAgICAgICAgIG1hdGNoWzVdLFxuICAgICAgICAgICAgbWF0Y2hbNl0sXG4gICAgICAgICAgICBtYXRjaFs3XVxuICAgICAgICApO1xuICAgICAgICBpZiAoIWNoZWNrV2Vla2RheShtYXRjaFsxXSwgcGFyc2VkQXJyYXksIGNvbmZpZykpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbmZpZy5fYSA9IHBhcnNlZEFycmF5O1xuICAgICAgICBjb25maWcuX3R6bSA9IGNhbGN1bGF0ZU9mZnNldChtYXRjaFs4XSwgbWF0Y2hbOV0sIG1hdGNoWzEwXSk7XG5cbiAgICAgICAgY29uZmlnLl9kID0gY3JlYXRlVVRDRGF0ZS5hcHBseShudWxsLCBjb25maWcuX2EpO1xuICAgICAgICBjb25maWcuX2Quc2V0VVRDTWludXRlcyhjb25maWcuX2QuZ2V0VVRDTWludXRlcygpIC0gY29uZmlnLl90em0pO1xuXG4gICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLnJmYzI4MjIgPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbmZpZy5faXNWYWxpZCA9IGZhbHNlO1xuICAgIH1cbn1cblxuLy8gZGF0ZSBmcm9tIDEpIEFTUC5ORVQsIDIpIElTTywgMykgUkZDIDI4MjIgZm9ybWF0cywgb3IgNCkgb3B0aW9uYWwgZmFsbGJhY2sgaWYgcGFyc2luZyBpc24ndCBzdHJpY3RcbmV4cG9ydCBmdW5jdGlvbiBjb25maWdGcm9tU3RyaW5nKGNvbmZpZykge1xuICAgIHZhciBtYXRjaGVkID0gYXNwTmV0SnNvblJlZ2V4LmV4ZWMoY29uZmlnLl9pKTtcbiAgICBpZiAobWF0Y2hlZCAhPT0gbnVsbCkge1xuICAgICAgICBjb25maWcuX2QgPSBuZXcgRGF0ZSgrbWF0Y2hlZFsxXSk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25maWdGcm9tSVNPKGNvbmZpZyk7XG4gICAgaWYgKGNvbmZpZy5faXNWYWxpZCA9PT0gZmFsc2UpIHtcbiAgICAgICAgZGVsZXRlIGNvbmZpZy5faXNWYWxpZDtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uZmlnRnJvbVJGQzI4MjIoY29uZmlnKTtcbiAgICBpZiAoY29uZmlnLl9pc1ZhbGlkID09PSBmYWxzZSkge1xuICAgICAgICBkZWxldGUgY29uZmlnLl9pc1ZhbGlkO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoY29uZmlnLl9zdHJpY3QpIHtcbiAgICAgICAgY29uZmlnLl9pc1ZhbGlkID0gZmFsc2U7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gRmluYWwgYXR0ZW1wdCwgdXNlIElucHV0IEZhbGxiYWNrXG4gICAgICAgIGhvb2tzLmNyZWF0ZUZyb21JbnB1dEZhbGxiYWNrKGNvbmZpZyk7XG4gICAgfVxufVxuXG5ob29rcy5jcmVhdGVGcm9tSW5wdXRGYWxsYmFjayA9IGRlcHJlY2F0ZShcbiAgICAndmFsdWUgcHJvdmlkZWQgaXMgbm90IGluIGEgcmVjb2duaXplZCBSRkMyODIyIG9yIElTTyBmb3JtYXQuIG1vbWVudCBjb25zdHJ1Y3Rpb24gZmFsbHMgYmFjayB0byBqcyBEYXRlKCksICcgK1xuICAgICAgICAnd2hpY2ggaXMgbm90IHJlbGlhYmxlIGFjcm9zcyBhbGwgYnJvd3NlcnMgYW5kIHZlcnNpb25zLiBOb24gUkZDMjgyMi9JU08gZGF0ZSBmb3JtYXRzIGFyZSAnICtcbiAgICAgICAgJ2Rpc2NvdXJhZ2VkLiBQbGVhc2UgcmVmZXIgdG8gaHR0cDovL21vbWVudGpzLmNvbS9ndWlkZXMvIy93YXJuaW5ncy9qcy1kYXRlLyBmb3IgbW9yZSBpbmZvLicsXG4gICAgZnVuY3Rpb24gKGNvbmZpZykge1xuICAgICAgICBjb25maWcuX2QgPSBuZXcgRGF0ZShjb25maWcuX2kgKyAoY29uZmlnLl91c2VVVEMgPyAnIFVUQycgOiAnJykpO1xuICAgIH1cbik7XG4iLCIvLyBQaWNrIHRoZSBmaXJzdCBkZWZpbmVkIG9mIHR3byBvciB0aHJlZSBhcmd1bWVudHMuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkZWZhdWx0cyhhLCBiLCBjKSB7XG4gICAgaWYgKGEgIT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gYTtcbiAgICB9XG4gICAgaWYgKGIgIT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gYjtcbiAgICB9XG4gICAgcmV0dXJuIGM7XG59XG4iLCJpbXBvcnQgeyBob29rcyB9IGZyb20gJy4uL3V0aWxzL2hvb2tzJztcbmltcG9ydCB7IGNyZWF0ZURhdGUsIGNyZWF0ZVVUQ0RhdGUgfSBmcm9tICcuL2RhdGUtZnJvbS1hcnJheSc7XG5pbXBvcnQgeyBkYXlzSW5ZZWFyIH0gZnJvbSAnLi4vdW5pdHMveWVhcic7XG5pbXBvcnQge1xuICAgIHdlZWtPZlllYXIsXG4gICAgd2Vla3NJblllYXIsXG4gICAgZGF5T2ZZZWFyRnJvbVdlZWtzLFxufSBmcm9tICcuLi91bml0cy93ZWVrLWNhbGVuZGFyLXV0aWxzJztcbmltcG9ydCB7XG4gICAgWUVBUixcbiAgICBNT05USCxcbiAgICBEQVRFLFxuICAgIEhPVVIsXG4gICAgTUlOVVRFLFxuICAgIFNFQ09ORCxcbiAgICBNSUxMSVNFQ09ORCxcbn0gZnJvbSAnLi4vdW5pdHMvY29uc3RhbnRzJztcbmltcG9ydCB7IGNyZWF0ZUxvY2FsIH0gZnJvbSAnLi9sb2NhbCc7XG5pbXBvcnQgZGVmYXVsdHMgZnJvbSAnLi4vdXRpbHMvZGVmYXVsdHMnO1xuaW1wb3J0IGdldFBhcnNpbmdGbGFncyBmcm9tICcuL3BhcnNpbmctZmxhZ3MnO1xuXG5mdW5jdGlvbiBjdXJyZW50RGF0ZUFycmF5KGNvbmZpZykge1xuICAgIC8vIGhvb2tzIGlzIGFjdHVhbGx5IHRoZSBleHBvcnRlZCBtb21lbnQgb2JqZWN0XG4gICAgdmFyIG5vd1ZhbHVlID0gbmV3IERhdGUoaG9va3Mubm93KCkpO1xuICAgIGlmIChjb25maWcuX3VzZVVUQykge1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgbm93VmFsdWUuZ2V0VVRDRnVsbFllYXIoKSxcbiAgICAgICAgICAgIG5vd1ZhbHVlLmdldFVUQ01vbnRoKCksXG4gICAgICAgICAgICBub3dWYWx1ZS5nZXRVVENEYXRlKCksXG4gICAgICAgIF07XG4gICAgfVxuICAgIHJldHVybiBbbm93VmFsdWUuZ2V0RnVsbFllYXIoKSwgbm93VmFsdWUuZ2V0TW9udGgoKSwgbm93VmFsdWUuZ2V0RGF0ZSgpXTtcbn1cblxuLy8gY29udmVydCBhbiBhcnJheSB0byBhIGRhdGUuXG4vLyB0aGUgYXJyYXkgc2hvdWxkIG1pcnJvciB0aGUgcGFyYW1ldGVycyBiZWxvd1xuLy8gbm90ZTogYWxsIHZhbHVlcyBwYXN0IHRoZSB5ZWFyIGFyZSBvcHRpb25hbCBhbmQgd2lsbCBkZWZhdWx0IHRvIHRoZSBsb3dlc3QgcG9zc2libGUgdmFsdWUuXG4vLyBbeWVhciwgbW9udGgsIGRheSAsIGhvdXIsIG1pbnV0ZSwgc2Vjb25kLCBtaWxsaXNlY29uZF1cbmV4cG9ydCBmdW5jdGlvbiBjb25maWdGcm9tQXJyYXkoY29uZmlnKSB7XG4gICAgdmFyIGksXG4gICAgICAgIGRhdGUsXG4gICAgICAgIGlucHV0ID0gW10sXG4gICAgICAgIGN1cnJlbnREYXRlLFxuICAgICAgICBleHBlY3RlZFdlZWtkYXksXG4gICAgICAgIHllYXJUb1VzZTtcblxuICAgIGlmIChjb25maWcuX2QpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGN1cnJlbnREYXRlID0gY3VycmVudERhdGVBcnJheShjb25maWcpO1xuXG4gICAgLy9jb21wdXRlIGRheSBvZiB0aGUgeWVhciBmcm9tIHdlZWtzIGFuZCB3ZWVrZGF5c1xuICAgIGlmIChjb25maWcuX3cgJiYgY29uZmlnLl9hW0RBVEVdID09IG51bGwgJiYgY29uZmlnLl9hW01PTlRIXSA9PSBudWxsKSB7XG4gICAgICAgIGRheU9mWWVhckZyb21XZWVrSW5mbyhjb25maWcpO1xuICAgIH1cblxuICAgIC8vaWYgdGhlIGRheSBvZiB0aGUgeWVhciBpcyBzZXQsIGZpZ3VyZSBvdXQgd2hhdCBpdCBpc1xuICAgIGlmIChjb25maWcuX2RheU9mWWVhciAhPSBudWxsKSB7XG4gICAgICAgIHllYXJUb1VzZSA9IGRlZmF1bHRzKGNvbmZpZy5fYVtZRUFSXSwgY3VycmVudERhdGVbWUVBUl0pO1xuXG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIGNvbmZpZy5fZGF5T2ZZZWFyID4gZGF5c0luWWVhcih5ZWFyVG9Vc2UpIHx8XG4gICAgICAgICAgICBjb25maWcuX2RheU9mWWVhciA9PT0gMFxuICAgICAgICApIHtcbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLl9vdmVyZmxvd0RheU9mWWVhciA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBkYXRlID0gY3JlYXRlVVRDRGF0ZSh5ZWFyVG9Vc2UsIDAsIGNvbmZpZy5fZGF5T2ZZZWFyKTtcbiAgICAgICAgY29uZmlnLl9hW01PTlRIXSA9IGRhdGUuZ2V0VVRDTW9udGgoKTtcbiAgICAgICAgY29uZmlnLl9hW0RBVEVdID0gZGF0ZS5nZXRVVENEYXRlKCk7XG4gICAgfVxuXG4gICAgLy8gRGVmYXVsdCB0byBjdXJyZW50IGRhdGUuXG4gICAgLy8gKiBpZiBubyB5ZWFyLCBtb250aCwgZGF5IG9mIG1vbnRoIGFyZSBnaXZlbiwgZGVmYXVsdCB0byB0b2RheVxuICAgIC8vICogaWYgZGF5IG9mIG1vbnRoIGlzIGdpdmVuLCBkZWZhdWx0IG1vbnRoIGFuZCB5ZWFyXG4gICAgLy8gKiBpZiBtb250aCBpcyBnaXZlbiwgZGVmYXVsdCBvbmx5IHllYXJcbiAgICAvLyAqIGlmIHllYXIgaXMgZ2l2ZW4sIGRvbid0IGRlZmF1bHQgYW55dGhpbmdcbiAgICBmb3IgKGkgPSAwOyBpIDwgMyAmJiBjb25maWcuX2FbaV0gPT0gbnVsbDsgKytpKSB7XG4gICAgICAgIGNvbmZpZy5fYVtpXSA9IGlucHV0W2ldID0gY3VycmVudERhdGVbaV07XG4gICAgfVxuXG4gICAgLy8gWmVybyBvdXQgd2hhdGV2ZXIgd2FzIG5vdCBkZWZhdWx0ZWQsIGluY2x1ZGluZyB0aW1lXG4gICAgZm9yICg7IGkgPCA3OyBpKyspIHtcbiAgICAgICAgY29uZmlnLl9hW2ldID0gaW5wdXRbaV0gPVxuICAgICAgICAgICAgY29uZmlnLl9hW2ldID09IG51bGwgPyAoaSA9PT0gMiA/IDEgOiAwKSA6IGNvbmZpZy5fYVtpXTtcbiAgICB9XG5cbiAgICAvLyBDaGVjayBmb3IgMjQ6MDA6MDAuMDAwXG4gICAgaWYgKFxuICAgICAgICBjb25maWcuX2FbSE9VUl0gPT09IDI0ICYmXG4gICAgICAgIGNvbmZpZy5fYVtNSU5VVEVdID09PSAwICYmXG4gICAgICAgIGNvbmZpZy5fYVtTRUNPTkRdID09PSAwICYmXG4gICAgICAgIGNvbmZpZy5fYVtNSUxMSVNFQ09ORF0gPT09IDBcbiAgICApIHtcbiAgICAgICAgY29uZmlnLl9uZXh0RGF5ID0gdHJ1ZTtcbiAgICAgICAgY29uZmlnLl9hW0hPVVJdID0gMDtcbiAgICB9XG5cbiAgICBjb25maWcuX2QgPSAoY29uZmlnLl91c2VVVEMgPyBjcmVhdGVVVENEYXRlIDogY3JlYXRlRGF0ZSkuYXBwbHkoXG4gICAgICAgIG51bGwsXG4gICAgICAgIGlucHV0XG4gICAgKTtcbiAgICBleHBlY3RlZFdlZWtkYXkgPSBjb25maWcuX3VzZVVUQ1xuICAgICAgICA/IGNvbmZpZy5fZC5nZXRVVENEYXkoKVxuICAgICAgICA6IGNvbmZpZy5fZC5nZXREYXkoKTtcblxuICAgIC8vIEFwcGx5IHRpbWV6b25lIG9mZnNldCBmcm9tIGlucHV0LiBUaGUgYWN0dWFsIHV0Y09mZnNldCBjYW4gYmUgY2hhbmdlZFxuICAgIC8vIHdpdGggcGFyc2Vab25lLlxuICAgIGlmIChjb25maWcuX3R6bSAhPSBudWxsKSB7XG4gICAgICAgIGNvbmZpZy5fZC5zZXRVVENNaW51dGVzKGNvbmZpZy5fZC5nZXRVVENNaW51dGVzKCkgLSBjb25maWcuX3R6bSk7XG4gICAgfVxuXG4gICAgaWYgKGNvbmZpZy5fbmV4dERheSkge1xuICAgICAgICBjb25maWcuX2FbSE9VUl0gPSAyNDtcbiAgICB9XG5cbiAgICAvLyBjaGVjayBmb3IgbWlzbWF0Y2hpbmcgZGF5IG9mIHdlZWtcbiAgICBpZiAoXG4gICAgICAgIGNvbmZpZy5fdyAmJlxuICAgICAgICB0eXBlb2YgY29uZmlnLl93LmQgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgIGNvbmZpZy5fdy5kICE9PSBleHBlY3RlZFdlZWtkYXlcbiAgICApIHtcbiAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykud2Vla2RheU1pc21hdGNoID0gdHJ1ZTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRheU9mWWVhckZyb21XZWVrSW5mbyhjb25maWcpIHtcbiAgICB2YXIgdywgd2Vla1llYXIsIHdlZWssIHdlZWtkYXksIGRvdywgZG95LCB0ZW1wLCB3ZWVrZGF5T3ZlcmZsb3csIGN1cldlZWs7XG5cbiAgICB3ID0gY29uZmlnLl93O1xuICAgIGlmICh3LkdHICE9IG51bGwgfHwgdy5XICE9IG51bGwgfHwgdy5FICE9IG51bGwpIHtcbiAgICAgICAgZG93ID0gMTtcbiAgICAgICAgZG95ID0gNDtcblxuICAgICAgICAvLyBUT0RPOiBXZSBuZWVkIHRvIHRha2UgdGhlIGN1cnJlbnQgaXNvV2Vla1llYXIsIGJ1dCB0aGF0IGRlcGVuZHMgb25cbiAgICAgICAgLy8gaG93IHdlIGludGVycHJldCBub3cgKGxvY2FsLCB1dGMsIGZpeGVkIG9mZnNldCkuIFNvIGNyZWF0ZVxuICAgICAgICAvLyBhIG5vdyB2ZXJzaW9uIG9mIGN1cnJlbnQgY29uZmlnICh0YWtlIGxvY2FsL3V0Yy9vZmZzZXQgZmxhZ3MsIGFuZFxuICAgICAgICAvLyBjcmVhdGUgbm93KS5cbiAgICAgICAgd2Vla1llYXIgPSBkZWZhdWx0cyhcbiAgICAgICAgICAgIHcuR0csXG4gICAgICAgICAgICBjb25maWcuX2FbWUVBUl0sXG4gICAgICAgICAgICB3ZWVrT2ZZZWFyKGNyZWF0ZUxvY2FsKCksIDEsIDQpLnllYXJcbiAgICAgICAgKTtcbiAgICAgICAgd2VlayA9IGRlZmF1bHRzKHcuVywgMSk7XG4gICAgICAgIHdlZWtkYXkgPSBkZWZhdWx0cyh3LkUsIDEpO1xuICAgICAgICBpZiAod2Vla2RheSA8IDEgfHwgd2Vla2RheSA+IDcpIHtcbiAgICAgICAgICAgIHdlZWtkYXlPdmVyZmxvdyA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICBkb3cgPSBjb25maWcuX2xvY2FsZS5fd2Vlay5kb3c7XG4gICAgICAgIGRveSA9IGNvbmZpZy5fbG9jYWxlLl93ZWVrLmRveTtcblxuICAgICAgICBjdXJXZWVrID0gd2Vla09mWWVhcihjcmVhdGVMb2NhbCgpLCBkb3csIGRveSk7XG5cbiAgICAgICAgd2Vla1llYXIgPSBkZWZhdWx0cyh3LmdnLCBjb25maWcuX2FbWUVBUl0sIGN1cldlZWsueWVhcik7XG5cbiAgICAgICAgLy8gRGVmYXVsdCB0byBjdXJyZW50IHdlZWsuXG4gICAgICAgIHdlZWsgPSBkZWZhdWx0cyh3LncsIGN1cldlZWsud2Vlayk7XG5cbiAgICAgICAgaWYgKHcuZCAhPSBudWxsKSB7XG4gICAgICAgICAgICAvLyB3ZWVrZGF5IC0tIGxvdyBkYXkgbnVtYmVycyBhcmUgY29uc2lkZXJlZCBuZXh0IHdlZWtcbiAgICAgICAgICAgIHdlZWtkYXkgPSB3LmQ7XG4gICAgICAgICAgICBpZiAod2Vla2RheSA8IDAgfHwgd2Vla2RheSA+IDYpIHtcbiAgICAgICAgICAgICAgICB3ZWVrZGF5T3ZlcmZsb3cgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHcuZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAvLyBsb2NhbCB3ZWVrZGF5IC0tIGNvdW50aW5nIHN0YXJ0cyBmcm9tIGJlZ2lubmluZyBvZiB3ZWVrXG4gICAgICAgICAgICB3ZWVrZGF5ID0gdy5lICsgZG93O1xuICAgICAgICAgICAgaWYgKHcuZSA8IDAgfHwgdy5lID4gNikge1xuICAgICAgICAgICAgICAgIHdlZWtkYXlPdmVyZmxvdyA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBkZWZhdWx0IHRvIGJlZ2lubmluZyBvZiB3ZWVrXG4gICAgICAgICAgICB3ZWVrZGF5ID0gZG93O1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmICh3ZWVrIDwgMSB8fCB3ZWVrID4gd2Vla3NJblllYXIod2Vla1llYXIsIGRvdywgZG95KSkge1xuICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5fb3ZlcmZsb3dXZWVrcyA9IHRydWU7XG4gICAgfSBlbHNlIGlmICh3ZWVrZGF5T3ZlcmZsb3cgIT0gbnVsbCkge1xuICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5fb3ZlcmZsb3dXZWVrZGF5ID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0ZW1wID0gZGF5T2ZZZWFyRnJvbVdlZWtzKHdlZWtZZWFyLCB3ZWVrLCB3ZWVrZGF5LCBkb3csIGRveSk7XG4gICAgICAgIGNvbmZpZy5fYVtZRUFSXSA9IHRlbXAueWVhcjtcbiAgICAgICAgY29uZmlnLl9kYXlPZlllYXIgPSB0ZW1wLmRheU9mWWVhcjtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBjb25maWdGcm9tSVNPLCBjb25maWdGcm9tUkZDMjgyMiB9IGZyb20gJy4vZnJvbS1zdHJpbmcnO1xuaW1wb3J0IHsgY29uZmlnRnJvbUFycmF5IH0gZnJvbSAnLi9mcm9tLWFycmF5JztcbmltcG9ydCB7IGdldFBhcnNlUmVnZXhGb3JUb2tlbiB9IGZyb20gJy4uL3BhcnNlL3JlZ2V4JztcbmltcG9ydCB7IGFkZFRpbWVUb0FycmF5RnJvbVRva2VuIH0gZnJvbSAnLi4vcGFyc2UvdG9rZW4nO1xuaW1wb3J0IHtcbiAgICBleHBhbmRGb3JtYXQsXG4gICAgZm9ybWF0VG9rZW5GdW5jdGlvbnMsXG4gICAgZm9ybWF0dGluZ1Rva2Vucyxcbn0gZnJvbSAnLi4vZm9ybWF0L2Zvcm1hdCc7XG5pbXBvcnQgY2hlY2tPdmVyZmxvdyBmcm9tICcuL2NoZWNrLW92ZXJmbG93JztcbmltcG9ydCB7IFlFQVIsIEhPVVIgfSBmcm9tICcuLi91bml0cy9jb25zdGFudHMnO1xuaW1wb3J0IHsgaG9va3MgfSBmcm9tICcuLi91dGlscy9ob29rcyc7XG5pbXBvcnQgZ2V0UGFyc2luZ0ZsYWdzIGZyb20gJy4vcGFyc2luZy1mbGFncyc7XG5cbi8vIGNvbnN0YW50IHRoYXQgcmVmZXJzIHRvIHRoZSBJU08gc3RhbmRhcmRcbmhvb2tzLklTT184NjAxID0gZnVuY3Rpb24gKCkge307XG5cbi8vIGNvbnN0YW50IHRoYXQgcmVmZXJzIHRvIHRoZSBSRkMgMjgyMiBmb3JtXG5ob29rcy5SRkNfMjgyMiA9IGZ1bmN0aW9uICgpIHt9O1xuXG4vLyBkYXRlIGZyb20gc3RyaW5nIGFuZCBmb3JtYXQgc3RyaW5nXG5leHBvcnQgZnVuY3Rpb24gY29uZmlnRnJvbVN0cmluZ0FuZEZvcm1hdChjb25maWcpIHtcbiAgICAvLyBUT0RPOiBNb3ZlIHRoaXMgdG8gYW5vdGhlciBwYXJ0IG9mIHRoZSBjcmVhdGlvbiBmbG93IHRvIHByZXZlbnQgY2lyY3VsYXIgZGVwc1xuICAgIGlmIChjb25maWcuX2YgPT09IGhvb2tzLklTT184NjAxKSB7XG4gICAgICAgIGNvbmZpZ0Zyb21JU08oY29uZmlnKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoY29uZmlnLl9mID09PSBob29rcy5SRkNfMjgyMikge1xuICAgICAgICBjb25maWdGcm9tUkZDMjgyMihjb25maWcpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbmZpZy5fYSA9IFtdO1xuICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmVtcHR5ID0gdHJ1ZTtcblxuICAgIC8vIFRoaXMgYXJyYXkgaXMgdXNlZCB0byBtYWtlIGEgRGF0ZSwgZWl0aGVyIHdpdGggYG5ldyBEYXRlYCBvciBgRGF0ZS5VVENgXG4gICAgdmFyIHN0cmluZyA9ICcnICsgY29uZmlnLl9pLFxuICAgICAgICBpLFxuICAgICAgICBwYXJzZWRJbnB1dCxcbiAgICAgICAgdG9rZW5zLFxuICAgICAgICB0b2tlbixcbiAgICAgICAgc2tpcHBlZCxcbiAgICAgICAgc3RyaW5nTGVuZ3RoID0gc3RyaW5nLmxlbmd0aCxcbiAgICAgICAgdG90YWxQYXJzZWRJbnB1dExlbmd0aCA9IDAsXG4gICAgICAgIGVyYSxcbiAgICAgICAgdG9rZW5MZW47XG5cbiAgICB0b2tlbnMgPVxuICAgICAgICBleHBhbmRGb3JtYXQoY29uZmlnLl9mLCBjb25maWcuX2xvY2FsZSkubWF0Y2goZm9ybWF0dGluZ1Rva2VucykgfHwgW107XG4gICAgdG9rZW5MZW4gPSB0b2tlbnMubGVuZ3RoO1xuICAgIGZvciAoaSA9IDA7IGkgPCB0b2tlbkxlbjsgaSsrKSB7XG4gICAgICAgIHRva2VuID0gdG9rZW5zW2ldO1xuICAgICAgICBwYXJzZWRJbnB1dCA9IChzdHJpbmcubWF0Y2goZ2V0UGFyc2VSZWdleEZvclRva2VuKHRva2VuLCBjb25maWcpKSB8fFxuICAgICAgICAgICAgW10pWzBdO1xuICAgICAgICBpZiAocGFyc2VkSW5wdXQpIHtcbiAgICAgICAgICAgIHNraXBwZWQgPSBzdHJpbmcuc3Vic3RyKDAsIHN0cmluZy5pbmRleE9mKHBhcnNlZElucHV0KSk7XG4gICAgICAgICAgICBpZiAoc2tpcHBlZC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykudW51c2VkSW5wdXQucHVzaChza2lwcGVkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN0cmluZyA9IHN0cmluZy5zbGljZShcbiAgICAgICAgICAgICAgICBzdHJpbmcuaW5kZXhPZihwYXJzZWRJbnB1dCkgKyBwYXJzZWRJbnB1dC5sZW5ndGhcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICB0b3RhbFBhcnNlZElucHV0TGVuZ3RoICs9IHBhcnNlZElucHV0Lmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgICAvLyBkb24ndCBwYXJzZSBpZiBpdCdzIG5vdCBhIGtub3duIHRva2VuXG4gICAgICAgIGlmIChmb3JtYXRUb2tlbkZ1bmN0aW9uc1t0b2tlbl0pIHtcbiAgICAgICAgICAgIGlmIChwYXJzZWRJbnB1dCkge1xuICAgICAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmVtcHR5ID0gZmFsc2U7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLnVudXNlZFRva2Vucy5wdXNoKHRva2VuKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFkZFRpbWVUb0FycmF5RnJvbVRva2VuKHRva2VuLCBwYXJzZWRJbnB1dCwgY29uZmlnKTtcbiAgICAgICAgfSBlbHNlIGlmIChjb25maWcuX3N0cmljdCAmJiAhcGFyc2VkSW5wdXQpIHtcbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLnVudXNlZFRva2Vucy5wdXNoKHRva2VuKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIGFkZCByZW1haW5pbmcgdW5wYXJzZWQgaW5wdXQgbGVuZ3RoIHRvIHRoZSBzdHJpbmdcbiAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5jaGFyc0xlZnRPdmVyID1cbiAgICAgICAgc3RyaW5nTGVuZ3RoIC0gdG90YWxQYXJzZWRJbnB1dExlbmd0aDtcbiAgICBpZiAoc3RyaW5nLmxlbmd0aCA+IDApIHtcbiAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykudW51c2VkSW5wdXQucHVzaChzdHJpbmcpO1xuICAgIH1cblxuICAgIC8vIGNsZWFyIF8xMmggZmxhZyBpZiBob3VyIGlzIDw9IDEyXG4gICAgaWYgKFxuICAgICAgICBjb25maWcuX2FbSE9VUl0gPD0gMTIgJiZcbiAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuYmlnSG91ciA9PT0gdHJ1ZSAmJlxuICAgICAgICBjb25maWcuX2FbSE9VUl0gPiAwXG4gICAgKSB7XG4gICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmJpZ0hvdXIgPSB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykucGFyc2VkRGF0ZVBhcnRzID0gY29uZmlnLl9hLnNsaWNlKDApO1xuICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLm1lcmlkaWVtID0gY29uZmlnLl9tZXJpZGllbTtcbiAgICAvLyBoYW5kbGUgbWVyaWRpZW1cbiAgICBjb25maWcuX2FbSE9VUl0gPSBtZXJpZGllbUZpeFdyYXAoXG4gICAgICAgIGNvbmZpZy5fbG9jYWxlLFxuICAgICAgICBjb25maWcuX2FbSE9VUl0sXG4gICAgICAgIGNvbmZpZy5fbWVyaWRpZW1cbiAgICApO1xuXG4gICAgLy8gaGFuZGxlIGVyYVxuICAgIGVyYSA9IGdldFBhcnNpbmdGbGFncyhjb25maWcpLmVyYTtcbiAgICBpZiAoZXJhICE9PSBudWxsKSB7XG4gICAgICAgIGNvbmZpZy5fYVtZRUFSXSA9IGNvbmZpZy5fbG9jYWxlLmVyYXNDb252ZXJ0WWVhcihlcmEsIGNvbmZpZy5fYVtZRUFSXSk7XG4gICAgfVxuXG4gICAgY29uZmlnRnJvbUFycmF5KGNvbmZpZyk7XG4gICAgY2hlY2tPdmVyZmxvdyhjb25maWcpO1xufVxuXG5mdW5jdGlvbiBtZXJpZGllbUZpeFdyYXAobG9jYWxlLCBob3VyLCBtZXJpZGllbSkge1xuICAgIHZhciBpc1BtO1xuXG4gICAgaWYgKG1lcmlkaWVtID09IG51bGwpIHtcbiAgICAgICAgLy8gbm90aGluZyB0byBkb1xuICAgICAgICByZXR1cm4gaG91cjtcbiAgICB9XG4gICAgaWYgKGxvY2FsZS5tZXJpZGllbUhvdXIgIT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gbG9jYWxlLm1lcmlkaWVtSG91cihob3VyLCBtZXJpZGllbSk7XG4gICAgfSBlbHNlIGlmIChsb2NhbGUuaXNQTSAhPSBudWxsKSB7XG4gICAgICAgIC8vIEZhbGxiYWNrXG4gICAgICAgIGlzUG0gPSBsb2NhbGUuaXNQTShtZXJpZGllbSk7XG4gICAgICAgIGlmIChpc1BtICYmIGhvdXIgPCAxMikge1xuICAgICAgICAgICAgaG91ciArPSAxMjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzUG0gJiYgaG91ciA9PT0gMTIpIHtcbiAgICAgICAgICAgIGhvdXIgPSAwO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBob3VyO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIHRoaXMgaXMgbm90IHN1cHBvc2VkIHRvIGhhcHBlblxuICAgICAgICByZXR1cm4gaG91cjtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBjb3B5Q29uZmlnIH0gZnJvbSAnLi4vbW9tZW50L2NvbnN0cnVjdG9yJztcbmltcG9ydCB7IGNvbmZpZ0Zyb21TdHJpbmdBbmRGb3JtYXQgfSBmcm9tICcuL2Zyb20tc3RyaW5nLWFuZC1mb3JtYXQnO1xuaW1wb3J0IGdldFBhcnNpbmdGbGFncyBmcm9tICcuL3BhcnNpbmctZmxhZ3MnO1xuaW1wb3J0IHsgaXNWYWxpZCB9IGZyb20gJy4vdmFsaWQnO1xuaW1wb3J0IGV4dGVuZCBmcm9tICcuLi91dGlscy9leHRlbmQnO1xuXG4vLyBkYXRlIGZyb20gc3RyaW5nIGFuZCBhcnJheSBvZiBmb3JtYXQgc3RyaW5nc1xuZXhwb3J0IGZ1bmN0aW9uIGNvbmZpZ0Zyb21TdHJpbmdBbmRBcnJheShjb25maWcpIHtcbiAgICB2YXIgdGVtcENvbmZpZyxcbiAgICAgICAgYmVzdE1vbWVudCxcbiAgICAgICAgc2NvcmVUb0JlYXQsXG4gICAgICAgIGksXG4gICAgICAgIGN1cnJlbnRTY29yZSxcbiAgICAgICAgdmFsaWRGb3JtYXRGb3VuZCxcbiAgICAgICAgYmVzdEZvcm1hdElzVmFsaWQgPSBmYWxzZSxcbiAgICAgICAgY29uZmlnZkxlbiA9IGNvbmZpZy5fZi5sZW5ndGg7XG5cbiAgICBpZiAoY29uZmlnZkxlbiA9PT0gMCkge1xuICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5pbnZhbGlkRm9ybWF0ID0gdHJ1ZTtcbiAgICAgICAgY29uZmlnLl9kID0gbmV3IERhdGUoTmFOKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGZvciAoaSA9IDA7IGkgPCBjb25maWdmTGVuOyBpKyspIHtcbiAgICAgICAgY3VycmVudFNjb3JlID0gMDtcbiAgICAgICAgdmFsaWRGb3JtYXRGb3VuZCA9IGZhbHNlO1xuICAgICAgICB0ZW1wQ29uZmlnID0gY29weUNvbmZpZyh7fSwgY29uZmlnKTtcbiAgICAgICAgaWYgKGNvbmZpZy5fdXNlVVRDICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRlbXBDb25maWcuX3VzZVVUQyA9IGNvbmZpZy5fdXNlVVRDO1xuICAgICAgICB9XG4gICAgICAgIHRlbXBDb25maWcuX2YgPSBjb25maWcuX2ZbaV07XG4gICAgICAgIGNvbmZpZ0Zyb21TdHJpbmdBbmRGb3JtYXQodGVtcENvbmZpZyk7XG5cbiAgICAgICAgaWYgKGlzVmFsaWQodGVtcENvbmZpZykpIHtcbiAgICAgICAgICAgIHZhbGlkRm9ybWF0Rm91bmQgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gaWYgdGhlcmUgaXMgYW55IGlucHV0IHRoYXQgd2FzIG5vdCBwYXJzZWQgYWRkIGEgcGVuYWx0eSBmb3IgdGhhdCBmb3JtYXRcbiAgICAgICAgY3VycmVudFNjb3JlICs9IGdldFBhcnNpbmdGbGFncyh0ZW1wQ29uZmlnKS5jaGFyc0xlZnRPdmVyO1xuXG4gICAgICAgIC8vb3IgdG9rZW5zXG4gICAgICAgIGN1cnJlbnRTY29yZSArPSBnZXRQYXJzaW5nRmxhZ3ModGVtcENvbmZpZykudW51c2VkVG9rZW5zLmxlbmd0aCAqIDEwO1xuXG4gICAgICAgIGdldFBhcnNpbmdGbGFncyh0ZW1wQ29uZmlnKS5zY29yZSA9IGN1cnJlbnRTY29yZTtcblxuICAgICAgICBpZiAoIWJlc3RGb3JtYXRJc1ZhbGlkKSB7XG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgc2NvcmVUb0JlYXQgPT0gbnVsbCB8fFxuICAgICAgICAgICAgICAgIGN1cnJlbnRTY29yZSA8IHNjb3JlVG9CZWF0IHx8XG4gICAgICAgICAgICAgICAgdmFsaWRGb3JtYXRGb3VuZFxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgc2NvcmVUb0JlYXQgPSBjdXJyZW50U2NvcmU7XG4gICAgICAgICAgICAgICAgYmVzdE1vbWVudCA9IHRlbXBDb25maWc7XG4gICAgICAgICAgICAgICAgaWYgKHZhbGlkRm9ybWF0Rm91bmQpIHtcbiAgICAgICAgICAgICAgICAgICAgYmVzdEZvcm1hdElzVmFsaWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChjdXJyZW50U2NvcmUgPCBzY29yZVRvQmVhdCkge1xuICAgICAgICAgICAgICAgIHNjb3JlVG9CZWF0ID0gY3VycmVudFNjb3JlO1xuICAgICAgICAgICAgICAgIGJlc3RNb21lbnQgPSB0ZW1wQ29uZmlnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZXh0ZW5kKGNvbmZpZywgYmVzdE1vbWVudCB8fCB0ZW1wQ29uZmlnKTtcbn1cbiIsImltcG9ydCB7IG5vcm1hbGl6ZU9iamVjdFVuaXRzIH0gZnJvbSAnLi4vdW5pdHMvYWxpYXNlcyc7XG5pbXBvcnQgeyBjb25maWdGcm9tQXJyYXkgfSBmcm9tICcuL2Zyb20tYXJyYXknO1xuaW1wb3J0IG1hcCBmcm9tICcuLi91dGlscy9tYXAnO1xuXG5leHBvcnQgZnVuY3Rpb24gY29uZmlnRnJvbU9iamVjdChjb25maWcpIHtcbiAgICBpZiAoY29uZmlnLl9kKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgaSA9IG5vcm1hbGl6ZU9iamVjdFVuaXRzKGNvbmZpZy5faSksXG4gICAgICAgIGRheU9yRGF0ZSA9IGkuZGF5ID09PSB1bmRlZmluZWQgPyBpLmRhdGUgOiBpLmRheTtcbiAgICBjb25maWcuX2EgPSBtYXAoXG4gICAgICAgIFtpLnllYXIsIGkubW9udGgsIGRheU9yRGF0ZSwgaS5ob3VyLCBpLm1pbnV0ZSwgaS5zZWNvbmQsIGkubWlsbGlzZWNvbmRdLFxuICAgICAgICBmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgICAgICByZXR1cm4gb2JqICYmIHBhcnNlSW50KG9iaiwgMTApO1xuICAgICAgICB9XG4gICAgKTtcblxuICAgIGNvbmZpZ0Zyb21BcnJheShjb25maWcpO1xufVxuIiwiaW1wb3J0IGlzQXJyYXkgZnJvbSAnLi4vdXRpbHMvaXMtYXJyYXknO1xuaW1wb3J0IGlzT2JqZWN0IGZyb20gJy4uL3V0aWxzL2lzLW9iamVjdCc7XG5pbXBvcnQgaXNPYmplY3RFbXB0eSBmcm9tICcuLi91dGlscy9pcy1vYmplY3QtZW1wdHknO1xuaW1wb3J0IGlzVW5kZWZpbmVkIGZyb20gJy4uL3V0aWxzL2lzLXVuZGVmaW5lZCc7XG5pbXBvcnQgaXNOdW1iZXIgZnJvbSAnLi4vdXRpbHMvaXMtbnVtYmVyJztcbmltcG9ydCBpc0RhdGUgZnJvbSAnLi4vdXRpbHMvaXMtZGF0ZSc7XG5pbXBvcnQgbWFwIGZyb20gJy4uL3V0aWxzL21hcCc7XG5pbXBvcnQgeyBjcmVhdGVJbnZhbGlkIH0gZnJvbSAnLi92YWxpZCc7XG5pbXBvcnQgeyBNb21lbnQsIGlzTW9tZW50IH0gZnJvbSAnLi4vbW9tZW50L2NvbnN0cnVjdG9yJztcbmltcG9ydCB7IGdldExvY2FsZSB9IGZyb20gJy4uL2xvY2FsZS9sb2NhbGVzJztcbmltcG9ydCB7IGhvb2tzIH0gZnJvbSAnLi4vdXRpbHMvaG9va3MnO1xuaW1wb3J0IGNoZWNrT3ZlcmZsb3cgZnJvbSAnLi9jaGVjay1vdmVyZmxvdyc7XG5pbXBvcnQgeyBpc1ZhbGlkIH0gZnJvbSAnLi92YWxpZCc7XG5cbmltcG9ydCB7IGNvbmZpZ0Zyb21TdHJpbmdBbmRBcnJheSB9IGZyb20gJy4vZnJvbS1zdHJpbmctYW5kLWFycmF5JztcbmltcG9ydCB7IGNvbmZpZ0Zyb21TdHJpbmdBbmRGb3JtYXQgfSBmcm9tICcuL2Zyb20tc3RyaW5nLWFuZC1mb3JtYXQnO1xuaW1wb3J0IHsgY29uZmlnRnJvbVN0cmluZyB9IGZyb20gJy4vZnJvbS1zdHJpbmcnO1xuaW1wb3J0IHsgY29uZmlnRnJvbUFycmF5IH0gZnJvbSAnLi9mcm9tLWFycmF5JztcbmltcG9ydCB7IGNvbmZpZ0Zyb21PYmplY3QgfSBmcm9tICcuL2Zyb20tb2JqZWN0JztcblxuZnVuY3Rpb24gY3JlYXRlRnJvbUNvbmZpZyhjb25maWcpIHtcbiAgICB2YXIgcmVzID0gbmV3IE1vbWVudChjaGVja092ZXJmbG93KHByZXBhcmVDb25maWcoY29uZmlnKSkpO1xuICAgIGlmIChyZXMuX25leHREYXkpIHtcbiAgICAgICAgLy8gQWRkaW5nIGlzIHNtYXJ0IGVub3VnaCBhcm91bmQgRFNUXG4gICAgICAgIHJlcy5hZGQoMSwgJ2QnKTtcbiAgICAgICAgcmVzLl9uZXh0RGF5ID0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIHJldHVybiByZXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwcmVwYXJlQ29uZmlnKGNvbmZpZykge1xuICAgIHZhciBpbnB1dCA9IGNvbmZpZy5faSxcbiAgICAgICAgZm9ybWF0ID0gY29uZmlnLl9mO1xuXG4gICAgY29uZmlnLl9sb2NhbGUgPSBjb25maWcuX2xvY2FsZSB8fCBnZXRMb2NhbGUoY29uZmlnLl9sKTtcblxuICAgIGlmIChpbnB1dCA9PT0gbnVsbCB8fCAoZm9ybWF0ID09PSB1bmRlZmluZWQgJiYgaW5wdXQgPT09ICcnKSkge1xuICAgICAgICByZXR1cm4gY3JlYXRlSW52YWxpZCh7IG51bGxJbnB1dDogdHJ1ZSB9KTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJykge1xuICAgICAgICBjb25maWcuX2kgPSBpbnB1dCA9IGNvbmZpZy5fbG9jYWxlLnByZXBhcnNlKGlucHV0KTtcbiAgICB9XG5cbiAgICBpZiAoaXNNb21lbnQoaW5wdXQpKSB7XG4gICAgICAgIHJldHVybiBuZXcgTW9tZW50KGNoZWNrT3ZlcmZsb3coaW5wdXQpKTtcbiAgICB9IGVsc2UgaWYgKGlzRGF0ZShpbnB1dCkpIHtcbiAgICAgICAgY29uZmlnLl9kID0gaW5wdXQ7XG4gICAgfSBlbHNlIGlmIChpc0FycmF5KGZvcm1hdCkpIHtcbiAgICAgICAgY29uZmlnRnJvbVN0cmluZ0FuZEFycmF5KGNvbmZpZyk7XG4gICAgfSBlbHNlIGlmIChmb3JtYXQpIHtcbiAgICAgICAgY29uZmlnRnJvbVN0cmluZ0FuZEZvcm1hdChjb25maWcpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbmZpZ0Zyb21JbnB1dChjb25maWcpO1xuICAgIH1cblxuICAgIGlmICghaXNWYWxpZChjb25maWcpKSB7XG4gICAgICAgIGNvbmZpZy5fZCA9IG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbmZpZztcbn1cblxuZnVuY3Rpb24gY29uZmlnRnJvbUlucHV0KGNvbmZpZykge1xuICAgIHZhciBpbnB1dCA9IGNvbmZpZy5faTtcbiAgICBpZiAoaXNVbmRlZmluZWQoaW5wdXQpKSB7XG4gICAgICAgIGNvbmZpZy5fZCA9IG5ldyBEYXRlKGhvb2tzLm5vdygpKTtcbiAgICB9IGVsc2UgaWYgKGlzRGF0ZShpbnB1dCkpIHtcbiAgICAgICAgY29uZmlnLl9kID0gbmV3IERhdGUoaW5wdXQudmFsdWVPZigpKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgY29uZmlnRnJvbVN0cmluZyhjb25maWcpO1xuICAgIH0gZWxzZSBpZiAoaXNBcnJheShpbnB1dCkpIHtcbiAgICAgICAgY29uZmlnLl9hID0gbWFwKGlucHV0LnNsaWNlKDApLCBmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgICAgICByZXR1cm4gcGFyc2VJbnQob2JqLCAxMCk7XG4gICAgICAgIH0pO1xuICAgICAgICBjb25maWdGcm9tQXJyYXkoY29uZmlnKTtcbiAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KGlucHV0KSkge1xuICAgICAgICBjb25maWdGcm9tT2JqZWN0KGNvbmZpZyk7XG4gICAgfSBlbHNlIGlmIChpc051bWJlcihpbnB1dCkpIHtcbiAgICAgICAgLy8gZnJvbSBtaWxsaXNlY29uZHNcbiAgICAgICAgY29uZmlnLl9kID0gbmV3IERhdGUoaW5wdXQpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGhvb2tzLmNyZWF0ZUZyb21JbnB1dEZhbGxiYWNrKGNvbmZpZyk7XG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlTG9jYWxPclVUQyhpbnB1dCwgZm9ybWF0LCBsb2NhbGUsIHN0cmljdCwgaXNVVEMpIHtcbiAgICB2YXIgYyA9IHt9O1xuXG4gICAgaWYgKGZvcm1hdCA9PT0gdHJ1ZSB8fCBmb3JtYXQgPT09IGZhbHNlKSB7XG4gICAgICAgIHN0cmljdCA9IGZvcm1hdDtcbiAgICAgICAgZm9ybWF0ID0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIGlmIChsb2NhbGUgPT09IHRydWUgfHwgbG9jYWxlID09PSBmYWxzZSkge1xuICAgICAgICBzdHJpY3QgPSBsb2NhbGU7XG4gICAgICAgIGxvY2FsZSA9IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBpZiAoXG4gICAgICAgIChpc09iamVjdChpbnB1dCkgJiYgaXNPYmplY3RFbXB0eShpbnB1dCkpIHx8XG4gICAgICAgIChpc0FycmF5KGlucHV0KSAmJiBpbnB1dC5sZW5ndGggPT09IDApXG4gICAgKSB7XG4gICAgICAgIGlucHV0ID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICAvLyBvYmplY3QgY29uc3RydWN0aW9uIG11c3QgYmUgZG9uZSB0aGlzIHdheS5cbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vbW9tZW50L21vbWVudC9pc3N1ZXMvMTQyM1xuICAgIGMuX2lzQU1vbWVudE9iamVjdCA9IHRydWU7XG4gICAgYy5fdXNlVVRDID0gYy5faXNVVEMgPSBpc1VUQztcbiAgICBjLl9sID0gbG9jYWxlO1xuICAgIGMuX2kgPSBpbnB1dDtcbiAgICBjLl9mID0gZm9ybWF0O1xuICAgIGMuX3N0cmljdCA9IHN0cmljdDtcblxuICAgIHJldHVybiBjcmVhdGVGcm9tQ29uZmlnKGMpO1xufVxuIiwiaW1wb3J0IHsgY3JlYXRlTG9jYWxPclVUQyB9IGZyb20gJy4vZnJvbS1hbnl0aGluZyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVMb2NhbChpbnB1dCwgZm9ybWF0LCBsb2NhbGUsIHN0cmljdCkge1xuICAgIHJldHVybiBjcmVhdGVMb2NhbE9yVVRDKGlucHV0LCBmb3JtYXQsIGxvY2FsZSwgc3RyaWN0LCBmYWxzZSk7XG59XG4iLCJpbXBvcnQgeyBkZXByZWNhdGUgfSBmcm9tICcuLi91dGlscy9kZXByZWNhdGUnO1xuaW1wb3J0IGlzQXJyYXkgZnJvbSAnLi4vdXRpbHMvaXMtYXJyYXknO1xuaW1wb3J0IHsgY3JlYXRlTG9jYWwgfSBmcm9tICcuLi9jcmVhdGUvbG9jYWwnO1xuaW1wb3J0IHsgY3JlYXRlSW52YWxpZCB9IGZyb20gJy4uL2NyZWF0ZS92YWxpZCc7XG5cbmV4cG9ydCB2YXIgcHJvdG90eXBlTWluID0gZGVwcmVjYXRlKFxuICAgICAgICAnbW9tZW50KCkubWluIGlzIGRlcHJlY2F0ZWQsIHVzZSBtb21lbnQubWF4IGluc3RlYWQuIGh0dHA6Ly9tb21lbnRqcy5jb20vZ3VpZGVzLyMvd2FybmluZ3MvbWluLW1heC8nLFxuICAgICAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgb3RoZXIgPSBjcmVhdGVMb2NhbC5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgaWYgKHRoaXMuaXNWYWxpZCgpICYmIG90aGVyLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBvdGhlciA8IHRoaXMgPyB0aGlzIDogb3RoZXI7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBjcmVhdGVJbnZhbGlkKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICApLFxuICAgIHByb3RvdHlwZU1heCA9IGRlcHJlY2F0ZShcbiAgICAgICAgJ21vbWVudCgpLm1heCBpcyBkZXByZWNhdGVkLCB1c2UgbW9tZW50Lm1pbiBpbnN0ZWFkLiBodHRwOi8vbW9tZW50anMuY29tL2d1aWRlcy8jL3dhcm5pbmdzL21pbi1tYXgvJyxcbiAgICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIG90aGVyID0gY3JlYXRlTG9jYWwuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmlzVmFsaWQoKSAmJiBvdGhlci5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gb3RoZXIgPiB0aGlzID8gdGhpcyA6IG90aGVyO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY3JlYXRlSW52YWxpZCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgKTtcblxuLy8gUGljayBhIG1vbWVudCBtIGZyb20gbW9tZW50cyBzbyB0aGF0IG1bZm5dKG90aGVyKSBpcyB0cnVlIGZvciBhbGxcbi8vIG90aGVyLiBUaGlzIHJlbGllcyBvbiB0aGUgZnVuY3Rpb24gZm4gdG8gYmUgdHJhbnNpdGl2ZS5cbi8vXG4vLyBtb21lbnRzIHNob3VsZCBlaXRoZXIgYmUgYW4gYXJyYXkgb2YgbW9tZW50IG9iamVjdHMgb3IgYW4gYXJyYXksIHdob3NlXG4vLyBmaXJzdCBlbGVtZW50IGlzIGFuIGFycmF5IG9mIG1vbWVudCBvYmplY3RzLlxuZnVuY3Rpb24gcGlja0J5KGZuLCBtb21lbnRzKSB7XG4gICAgdmFyIHJlcywgaTtcbiAgICBpZiAobW9tZW50cy5sZW5ndGggPT09IDEgJiYgaXNBcnJheShtb21lbnRzWzBdKSkge1xuICAgICAgICBtb21lbnRzID0gbW9tZW50c1swXTtcbiAgICB9XG4gICAgaWYgKCFtb21lbnRzLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gY3JlYXRlTG9jYWwoKTtcbiAgICB9XG4gICAgcmVzID0gbW9tZW50c1swXTtcbiAgICBmb3IgKGkgPSAxOyBpIDwgbW9tZW50cy5sZW5ndGg7ICsraSkge1xuICAgICAgICBpZiAoIW1vbWVudHNbaV0uaXNWYWxpZCgpIHx8IG1vbWVudHNbaV1bZm5dKHJlcykpIHtcbiAgICAgICAgICAgIHJlcyA9IG1vbWVudHNbaV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbn1cblxuLy8gVE9ETzogVXNlIFtdLnNvcnQgaW5zdGVhZD9cbmV4cG9ydCBmdW5jdGlvbiBtaW4oKSB7XG4gICAgdmFyIGFyZ3MgPSBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMCk7XG5cbiAgICByZXR1cm4gcGlja0J5KCdpc0JlZm9yZScsIGFyZ3MpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbWF4KCkge1xuICAgIHZhciBhcmdzID0gW10uc2xpY2UuY2FsbChhcmd1bWVudHMsIDApO1xuXG4gICAgcmV0dXJuIHBpY2tCeSgnaXNBZnRlcicsIGFyZ3MpO1xufVxuIiwiZXhwb3J0IHZhciBub3cgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIERhdGUubm93ID8gRGF0ZS5ub3coKSA6ICtuZXcgRGF0ZSgpO1xufTtcbiIsImltcG9ydCBoYXNPd25Qcm9wIGZyb20gJy4uL3V0aWxzL2hhcy1vd24tcHJvcCc7XG5pbXBvcnQgdG9JbnQgZnJvbSAnLi4vdXRpbHMvdG8taW50JztcbmltcG9ydCBpbmRleE9mIGZyb20gJy4uL3V0aWxzL2luZGV4LW9mJztcbmltcG9ydCB7IGNyZWF0ZUR1cmF0aW9uIH0gZnJvbSAnLi9jcmVhdGUnO1xuXG52YXIgb3JkZXJpbmcgPSBbXG4gICAgJ3llYXInLFxuICAgICdxdWFydGVyJyxcbiAgICAnbW9udGgnLFxuICAgICd3ZWVrJyxcbiAgICAnZGF5JyxcbiAgICAnaG91cicsXG4gICAgJ21pbnV0ZScsXG4gICAgJ3NlY29uZCcsXG4gICAgJ21pbGxpc2Vjb25kJyxcbl07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzRHVyYXRpb25WYWxpZChtKSB7XG4gICAgdmFyIGtleSxcbiAgICAgICAgdW5pdEhhc0RlY2ltYWwgPSBmYWxzZSxcbiAgICAgICAgaSxcbiAgICAgICAgb3JkZXJMZW4gPSBvcmRlcmluZy5sZW5ndGg7XG4gICAgZm9yIChrZXkgaW4gbSkge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgICBoYXNPd25Qcm9wKG0sIGtleSkgJiZcbiAgICAgICAgICAgICEoXG4gICAgICAgICAgICAgICAgaW5kZXhPZi5jYWxsKG9yZGVyaW5nLCBrZXkpICE9PSAtMSAmJlxuICAgICAgICAgICAgICAgIChtW2tleV0gPT0gbnVsbCB8fCAhaXNOYU4obVtrZXldKSlcbiAgICAgICAgICAgIClcbiAgICAgICAgKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgb3JkZXJMZW47ICsraSkge1xuICAgICAgICBpZiAobVtvcmRlcmluZ1tpXV0pIHtcbiAgICAgICAgICAgIGlmICh1bml0SGFzRGVjaW1hbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsgLy8gb25seSBhbGxvdyBub24taW50ZWdlcnMgZm9yIHNtYWxsZXN0IHVuaXRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChwYXJzZUZsb2F0KG1bb3JkZXJpbmdbaV1dKSAhPT0gdG9JbnQobVtvcmRlcmluZ1tpXV0pKSB7XG4gICAgICAgICAgICAgICAgdW5pdEhhc0RlY2ltYWwgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1ZhbGlkKCkge1xuICAgIHJldHVybiB0aGlzLl9pc1ZhbGlkO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlSW52YWxpZCgpIHtcbiAgICByZXR1cm4gY3JlYXRlRHVyYXRpb24oTmFOKTtcbn1cbiIsImltcG9ydCB7IG5vcm1hbGl6ZU9iamVjdFVuaXRzIH0gZnJvbSAnLi4vdW5pdHMvYWxpYXNlcyc7XG5pbXBvcnQgeyBnZXRMb2NhbGUgfSBmcm9tICcuLi9sb2NhbGUvbG9jYWxlcyc7XG5pbXBvcnQgaXNEdXJhdGlvblZhbGlkIGZyb20gJy4vdmFsaWQuanMnO1xuXG5leHBvcnQgZnVuY3Rpb24gRHVyYXRpb24oZHVyYXRpb24pIHtcbiAgICB2YXIgbm9ybWFsaXplZElucHV0ID0gbm9ybWFsaXplT2JqZWN0VW5pdHMoZHVyYXRpb24pLFxuICAgICAgICB5ZWFycyA9IG5vcm1hbGl6ZWRJbnB1dC55ZWFyIHx8IDAsXG4gICAgICAgIHF1YXJ0ZXJzID0gbm9ybWFsaXplZElucHV0LnF1YXJ0ZXIgfHwgMCxcbiAgICAgICAgbW9udGhzID0gbm9ybWFsaXplZElucHV0Lm1vbnRoIHx8IDAsXG4gICAgICAgIHdlZWtzID0gbm9ybWFsaXplZElucHV0LndlZWsgfHwgbm9ybWFsaXplZElucHV0Lmlzb1dlZWsgfHwgMCxcbiAgICAgICAgZGF5cyA9IG5vcm1hbGl6ZWRJbnB1dC5kYXkgfHwgMCxcbiAgICAgICAgaG91cnMgPSBub3JtYWxpemVkSW5wdXQuaG91ciB8fCAwLFxuICAgICAgICBtaW51dGVzID0gbm9ybWFsaXplZElucHV0Lm1pbnV0ZSB8fCAwLFxuICAgICAgICBzZWNvbmRzID0gbm9ybWFsaXplZElucHV0LnNlY29uZCB8fCAwLFxuICAgICAgICBtaWxsaXNlY29uZHMgPSBub3JtYWxpemVkSW5wdXQubWlsbGlzZWNvbmQgfHwgMDtcblxuICAgIHRoaXMuX2lzVmFsaWQgPSBpc0R1cmF0aW9uVmFsaWQobm9ybWFsaXplZElucHV0KTtcblxuICAgIC8vIHJlcHJlc2VudGF0aW9uIGZvciBkYXRlQWRkUmVtb3ZlXG4gICAgdGhpcy5fbWlsbGlzZWNvbmRzID1cbiAgICAgICAgK21pbGxpc2Vjb25kcyArXG4gICAgICAgIHNlY29uZHMgKiAxZTMgKyAvLyAxMDAwXG4gICAgICAgIG1pbnV0ZXMgKiA2ZTQgKyAvLyAxMDAwICogNjBcbiAgICAgICAgaG91cnMgKiAxMDAwICogNjAgKiA2MDsgLy91c2luZyAxMDAwICogNjAgKiA2MCBpbnN0ZWFkIG9mIDM2ZTUgdG8gYXZvaWQgZmxvYXRpbmcgcG9pbnQgcm91bmRpbmcgZXJyb3JzIGh0dHBzOi8vZ2l0aHViLmNvbS9tb21lbnQvbW9tZW50L2lzc3Vlcy8yOTc4XG4gICAgLy8gQmVjYXVzZSBvZiBkYXRlQWRkUmVtb3ZlIHRyZWF0cyAyNCBob3VycyBhcyBkaWZmZXJlbnQgZnJvbSBhXG4gICAgLy8gZGF5IHdoZW4gd29ya2luZyBhcm91bmQgRFNULCB3ZSBuZWVkIHRvIHN0b3JlIHRoZW0gc2VwYXJhdGVseVxuICAgIHRoaXMuX2RheXMgPSArZGF5cyArIHdlZWtzICogNztcbiAgICAvLyBJdCBpcyBpbXBvc3NpYmxlIHRvIHRyYW5zbGF0ZSBtb250aHMgaW50byBkYXlzIHdpdGhvdXQga25vd2luZ1xuICAgIC8vIHdoaWNoIG1vbnRocyB5b3UgYXJlIGFyZSB0YWxraW5nIGFib3V0LCBzbyB3ZSBoYXZlIHRvIHN0b3JlXG4gICAgLy8gaXQgc2VwYXJhdGVseS5cbiAgICB0aGlzLl9tb250aHMgPSArbW9udGhzICsgcXVhcnRlcnMgKiAzICsgeWVhcnMgKiAxMjtcblxuICAgIHRoaXMuX2RhdGEgPSB7fTtcblxuICAgIHRoaXMuX2xvY2FsZSA9IGdldExvY2FsZSgpO1xuXG4gICAgdGhpcy5fYnViYmxlKCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0R1cmF0aW9uKG9iaikge1xuICAgIHJldHVybiBvYmogaW5zdGFuY2VvZiBEdXJhdGlvbjtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFic1JvdW5kKG51bWJlcikge1xuICAgIGlmIChudW1iZXIgPCAwKSB7XG4gICAgICAgIHJldHVybiBNYXRoLnJvdW5kKC0xICogbnVtYmVyKSAqIC0xO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBNYXRoLnJvdW5kKG51bWJlcik7XG4gICAgfVxufVxuIiwiaW1wb3J0IHRvSW50IGZyb20gJy4vdG8taW50JztcblxuLy8gY29tcGFyZSB0d28gYXJyYXlzLCByZXR1cm4gdGhlIG51bWJlciBvZiBkaWZmZXJlbmNlc1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29tcGFyZUFycmF5cyhhcnJheTEsIGFycmF5MiwgZG9udENvbnZlcnQpIHtcbiAgICB2YXIgbGVuID0gTWF0aC5taW4oYXJyYXkxLmxlbmd0aCwgYXJyYXkyLmxlbmd0aCksXG4gICAgICAgIGxlbmd0aERpZmYgPSBNYXRoLmFicyhhcnJheTEubGVuZ3RoIC0gYXJyYXkyLmxlbmd0aCksXG4gICAgICAgIGRpZmZzID0gMCxcbiAgICAgICAgaTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgKGRvbnRDb252ZXJ0ICYmIGFycmF5MVtpXSAhPT0gYXJyYXkyW2ldKSB8fFxuICAgICAgICAgICAgKCFkb250Q29udmVydCAmJiB0b0ludChhcnJheTFbaV0pICE9PSB0b0ludChhcnJheTJbaV0pKVxuICAgICAgICApIHtcbiAgICAgICAgICAgIGRpZmZzKys7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGRpZmZzICsgbGVuZ3RoRGlmZjtcbn1cbiIsImltcG9ydCB6ZXJvRmlsbCBmcm9tICcuLi91dGlscy96ZXJvLWZpbGwnO1xuaW1wb3J0IHsgY3JlYXRlRHVyYXRpb24gfSBmcm9tICcuLi9kdXJhdGlvbi9jcmVhdGUnO1xuaW1wb3J0IHsgYWRkU3VidHJhY3QgfSBmcm9tICcuLi9tb21lbnQvYWRkLXN1YnRyYWN0JztcbmltcG9ydCB7IGlzTW9tZW50LCBjb3B5Q29uZmlnIH0gZnJvbSAnLi4vbW9tZW50L2NvbnN0cnVjdG9yJztcbmltcG9ydCB7IGFkZEZvcm1hdFRva2VuIH0gZnJvbSAnLi4vZm9ybWF0L2Zvcm1hdCc7XG5pbXBvcnQgeyBhZGRSZWdleFRva2VuLCBtYXRjaE9mZnNldCwgbWF0Y2hTaG9ydE9mZnNldCB9IGZyb20gJy4uL3BhcnNlL3JlZ2V4JztcbmltcG9ydCB7IGFkZFBhcnNlVG9rZW4gfSBmcm9tICcuLi9wYXJzZS90b2tlbic7XG5pbXBvcnQgeyBjcmVhdGVMb2NhbCB9IGZyb20gJy4uL2NyZWF0ZS9sb2NhbCc7XG5pbXBvcnQgeyBwcmVwYXJlQ29uZmlnIH0gZnJvbSAnLi4vY3JlYXRlL2Zyb20tYW55dGhpbmcnO1xuaW1wb3J0IHsgY3JlYXRlVVRDIH0gZnJvbSAnLi4vY3JlYXRlL3V0Yyc7XG5pbXBvcnQgaXNEYXRlIGZyb20gJy4uL3V0aWxzL2lzLWRhdGUnO1xuaW1wb3J0IHRvSW50IGZyb20gJy4uL3V0aWxzL3RvLWludCc7XG5pbXBvcnQgaXNVbmRlZmluZWQgZnJvbSAnLi4vdXRpbHMvaXMtdW5kZWZpbmVkJztcbmltcG9ydCBjb21wYXJlQXJyYXlzIGZyb20gJy4uL3V0aWxzL2NvbXBhcmUtYXJyYXlzJztcbmltcG9ydCB7IGhvb2tzIH0gZnJvbSAnLi4vdXRpbHMvaG9va3MnO1xuXG4vLyBGT1JNQVRUSU5HXG5cbmZ1bmN0aW9uIG9mZnNldCh0b2tlbiwgc2VwYXJhdG9yKSB7XG4gICAgYWRkRm9ybWF0VG9rZW4odG9rZW4sIDAsIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG9mZnNldCA9IHRoaXMudXRjT2Zmc2V0KCksXG4gICAgICAgICAgICBzaWduID0gJysnO1xuICAgICAgICBpZiAob2Zmc2V0IDwgMCkge1xuICAgICAgICAgICAgb2Zmc2V0ID0gLW9mZnNldDtcbiAgICAgICAgICAgIHNpZ24gPSAnLSc7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIHNpZ24gK1xuICAgICAgICAgICAgemVyb0ZpbGwofn4ob2Zmc2V0IC8gNjApLCAyKSArXG4gICAgICAgICAgICBzZXBhcmF0b3IgK1xuICAgICAgICAgICAgemVyb0ZpbGwofn5vZmZzZXQgJSA2MCwgMilcbiAgICAgICAgKTtcbiAgICB9KTtcbn1cblxub2Zmc2V0KCdaJywgJzonKTtcbm9mZnNldCgnWlonLCAnJyk7XG5cbi8vIFBBUlNJTkdcblxuYWRkUmVnZXhUb2tlbignWicsIG1hdGNoU2hvcnRPZmZzZXQpO1xuYWRkUmVnZXhUb2tlbignWlonLCBtYXRjaFNob3J0T2Zmc2V0KTtcbmFkZFBhcnNlVG9rZW4oWydaJywgJ1paJ10sIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgIGNvbmZpZy5fdXNlVVRDID0gdHJ1ZTtcbiAgICBjb25maWcuX3R6bSA9IG9mZnNldEZyb21TdHJpbmcobWF0Y2hTaG9ydE9mZnNldCwgaW5wdXQpO1xufSk7XG5cbi8vIEhFTFBFUlNcblxuLy8gdGltZXpvbmUgY2h1bmtlclxuLy8gJysxMDowMCcgPiBbJzEwJywgICcwMCddXG4vLyAnLTE1MzAnICA+IFsnLTE1JywgJzMwJ11cbnZhciBjaHVua09mZnNldCA9IC8oW1xcK1xcLV18XFxkXFxkKS9naTtcblxuZnVuY3Rpb24gb2Zmc2V0RnJvbVN0cmluZyhtYXRjaGVyLCBzdHJpbmcpIHtcbiAgICB2YXIgbWF0Y2hlcyA9IChzdHJpbmcgfHwgJycpLm1hdGNoKG1hdGNoZXIpLFxuICAgICAgICBjaHVuayxcbiAgICAgICAgcGFydHMsXG4gICAgICAgIG1pbnV0ZXM7XG5cbiAgICBpZiAobWF0Y2hlcyA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBjaHVuayA9IG1hdGNoZXNbbWF0Y2hlcy5sZW5ndGggLSAxXSB8fCBbXTtcbiAgICBwYXJ0cyA9IChjaHVuayArICcnKS5tYXRjaChjaHVua09mZnNldCkgfHwgWyctJywgMCwgMF07XG4gICAgbWludXRlcyA9ICsocGFydHNbMV0gKiA2MCkgKyB0b0ludChwYXJ0c1syXSk7XG5cbiAgICByZXR1cm4gbWludXRlcyA9PT0gMCA/IDAgOiBwYXJ0c1swXSA9PT0gJysnID8gbWludXRlcyA6IC1taW51dGVzO1xufVxuXG4vLyBSZXR1cm4gYSBtb21lbnQgZnJvbSBpbnB1dCwgdGhhdCBpcyBsb2NhbC91dGMvem9uZSBlcXVpdmFsZW50IHRvIG1vZGVsLlxuZXhwb3J0IGZ1bmN0aW9uIGNsb25lV2l0aE9mZnNldChpbnB1dCwgbW9kZWwpIHtcbiAgICB2YXIgcmVzLCBkaWZmO1xuICAgIGlmIChtb2RlbC5faXNVVEMpIHtcbiAgICAgICAgcmVzID0gbW9kZWwuY2xvbmUoKTtcbiAgICAgICAgZGlmZiA9XG4gICAgICAgICAgICAoaXNNb21lbnQoaW5wdXQpIHx8IGlzRGF0ZShpbnB1dClcbiAgICAgICAgICAgICAgICA/IGlucHV0LnZhbHVlT2YoKVxuICAgICAgICAgICAgICAgIDogY3JlYXRlTG9jYWwoaW5wdXQpLnZhbHVlT2YoKSkgLSByZXMudmFsdWVPZigpO1xuICAgICAgICAvLyBVc2UgbG93LWxldmVsIGFwaSwgYmVjYXVzZSB0aGlzIGZuIGlzIGxvdy1sZXZlbCBhcGkuXG4gICAgICAgIHJlcy5fZC5zZXRUaW1lKHJlcy5fZC52YWx1ZU9mKCkgKyBkaWZmKTtcbiAgICAgICAgaG9va3MudXBkYXRlT2Zmc2V0KHJlcywgZmFsc2UpO1xuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVMb2NhbChpbnB1dCkubG9jYWwoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGdldERhdGVPZmZzZXQobSkge1xuICAgIC8vIE9uIEZpcmVmb3guMjQgRGF0ZSNnZXRUaW1lem9uZU9mZnNldCByZXR1cm5zIGEgZmxvYXRpbmcgcG9pbnQuXG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL21vbWVudC9tb21lbnQvcHVsbC8xODcxXG4gICAgcmV0dXJuIC1NYXRoLnJvdW5kKG0uX2QuZ2V0VGltZXpvbmVPZmZzZXQoKSk7XG59XG5cbi8vIEhPT0tTXG5cbi8vIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSBjYWxsZWQgd2hlbmV2ZXIgYSBtb21lbnQgaXMgbXV0YXRlZC5cbi8vIEl0IGlzIGludGVuZGVkIHRvIGtlZXAgdGhlIG9mZnNldCBpbiBzeW5jIHdpdGggdGhlIHRpbWV6b25lLlxuaG9va3MudXBkYXRlT2Zmc2V0ID0gZnVuY3Rpb24gKCkge307XG5cbi8vIE1PTUVOVFNcblxuLy8ga2VlcExvY2FsVGltZSA9IHRydWUgbWVhbnMgb25seSBjaGFuZ2UgdGhlIHRpbWV6b25lLCB3aXRob3V0XG4vLyBhZmZlY3RpbmcgdGhlIGxvY2FsIGhvdXIuIFNvIDU6MzE6MjYgKzAzMDAgLS1bdXRjT2Zmc2V0KDIsIHRydWUpXS0tPlxuLy8gNTozMToyNiArMDIwMCBJdCBpcyBwb3NzaWJsZSB0aGF0IDU6MzE6MjYgZG9lc24ndCBleGlzdCB3aXRoIG9mZnNldFxuLy8gKzAyMDAsIHNvIHdlIGFkanVzdCB0aGUgdGltZSBhcyBuZWVkZWQsIHRvIGJlIHZhbGlkLlxuLy9cbi8vIEtlZXBpbmcgdGhlIHRpbWUgYWN0dWFsbHkgYWRkcy9zdWJ0cmFjdHMgKG9uZSBob3VyKVxuLy8gZnJvbSB0aGUgYWN0dWFsIHJlcHJlc2VudGVkIHRpbWUuIFRoYXQgaXMgd2h5IHdlIGNhbGwgdXBkYXRlT2Zmc2V0XG4vLyBhIHNlY29uZCB0aW1lLiBJbiBjYXNlIGl0IHdhbnRzIHVzIHRvIGNoYW5nZSB0aGUgb2Zmc2V0IGFnYWluXG4vLyBfY2hhbmdlSW5Qcm9ncmVzcyA9PSB0cnVlIGNhc2UsIHRoZW4gd2UgaGF2ZSB0byBhZGp1c3QsIGJlY2F1c2Vcbi8vIHRoZXJlIGlzIG5vIHN1Y2ggdGltZSBpbiB0aGUgZ2l2ZW4gdGltZXpvbmUuXG5leHBvcnQgZnVuY3Rpb24gZ2V0U2V0T2Zmc2V0KGlucHV0LCBrZWVwTG9jYWxUaW1lLCBrZWVwTWludXRlcykge1xuICAgIHZhciBvZmZzZXQgPSB0aGlzLl9vZmZzZXQgfHwgMCxcbiAgICAgICAgbG9jYWxBZGp1c3Q7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICByZXR1cm4gaW5wdXQgIT0gbnVsbCA/IHRoaXMgOiBOYU47XG4gICAgfVxuICAgIGlmIChpbnB1dCAhPSBudWxsKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBpbnB1dCA9IG9mZnNldEZyb21TdHJpbmcobWF0Y2hTaG9ydE9mZnNldCwgaW5wdXQpO1xuICAgICAgICAgICAgaWYgKGlucHV0ID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoTWF0aC5hYnMoaW5wdXQpIDwgMTYgJiYgIWtlZXBNaW51dGVzKSB7XG4gICAgICAgICAgICBpbnB1dCA9IGlucHV0ICogNjA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLl9pc1VUQyAmJiBrZWVwTG9jYWxUaW1lKSB7XG4gICAgICAgICAgICBsb2NhbEFkanVzdCA9IGdldERhdGVPZmZzZXQodGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fb2Zmc2V0ID0gaW5wdXQ7XG4gICAgICAgIHRoaXMuX2lzVVRDID0gdHJ1ZTtcbiAgICAgICAgaWYgKGxvY2FsQWRqdXN0ICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuYWRkKGxvY2FsQWRqdXN0LCAnbScpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvZmZzZXQgIT09IGlucHV0KSB7XG4gICAgICAgICAgICBpZiAoIWtlZXBMb2NhbFRpbWUgfHwgdGhpcy5fY2hhbmdlSW5Qcm9ncmVzcykge1xuICAgICAgICAgICAgICAgIGFkZFN1YnRyYWN0KFxuICAgICAgICAgICAgICAgICAgICB0aGlzLFxuICAgICAgICAgICAgICAgICAgICBjcmVhdGVEdXJhdGlvbihpbnB1dCAtIG9mZnNldCwgJ20nKSxcbiAgICAgICAgICAgICAgICAgICAgMSxcbiAgICAgICAgICAgICAgICAgICAgZmFsc2VcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSBlbHNlIGlmICghdGhpcy5fY2hhbmdlSW5Qcm9ncmVzcykge1xuICAgICAgICAgICAgICAgIHRoaXMuX2NoYW5nZUluUHJvZ3Jlc3MgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGhvb2tzLnVwZGF0ZU9mZnNldCh0aGlzLCB0cnVlKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9jaGFuZ2VJblByb2dyZXNzID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdGhpcy5faXNVVEMgPyBvZmZzZXQgOiBnZXREYXRlT2Zmc2V0KHRoaXMpO1xuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFNldFpvbmUoaW5wdXQsIGtlZXBMb2NhbFRpbWUpIHtcbiAgICBpZiAoaW5wdXQgIT0gbnVsbCkge1xuICAgICAgICBpZiAodHlwZW9mIGlucHV0ICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgaW5wdXQgPSAtaW5wdXQ7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnV0Y09mZnNldChpbnB1dCwga2VlcExvY2FsVGltZSk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIC10aGlzLnV0Y09mZnNldCgpO1xuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNldE9mZnNldFRvVVRDKGtlZXBMb2NhbFRpbWUpIHtcbiAgICByZXR1cm4gdGhpcy51dGNPZmZzZXQoMCwga2VlcExvY2FsVGltZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXRPZmZzZXRUb0xvY2FsKGtlZXBMb2NhbFRpbWUpIHtcbiAgICBpZiAodGhpcy5faXNVVEMpIHtcbiAgICAgICAgdGhpcy51dGNPZmZzZXQoMCwga2VlcExvY2FsVGltZSk7XG4gICAgICAgIHRoaXMuX2lzVVRDID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKGtlZXBMb2NhbFRpbWUpIHtcbiAgICAgICAgICAgIHRoaXMuc3VidHJhY3QoZ2V0RGF0ZU9mZnNldCh0aGlzKSwgJ20nKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNldE9mZnNldFRvUGFyc2VkT2Zmc2V0KCkge1xuICAgIGlmICh0aGlzLl90em0gIT0gbnVsbCkge1xuICAgICAgICB0aGlzLnV0Y09mZnNldCh0aGlzLl90em0sIGZhbHNlLCB0cnVlKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiB0aGlzLl9pID09PSAnc3RyaW5nJykge1xuICAgICAgICB2YXIgdFpvbmUgPSBvZmZzZXRGcm9tU3RyaW5nKG1hdGNoT2Zmc2V0LCB0aGlzLl9pKTtcbiAgICAgICAgaWYgKHRab25lICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMudXRjT2Zmc2V0KHRab25lKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMudXRjT2Zmc2V0KDAsIHRydWUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaGFzQWxpZ25lZEhvdXJPZmZzZXQoaW5wdXQpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaW5wdXQgPSBpbnB1dCA/IGNyZWF0ZUxvY2FsKGlucHV0KS51dGNPZmZzZXQoKSA6IDA7XG5cbiAgICByZXR1cm4gKHRoaXMudXRjT2Zmc2V0KCkgLSBpbnB1dCkgJSA2MCA9PT0gMDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzRGF5bGlnaHRTYXZpbmdUaW1lKCkge1xuICAgIHJldHVybiAoXG4gICAgICAgIHRoaXMudXRjT2Zmc2V0KCkgPiB0aGlzLmNsb25lKCkubW9udGgoMCkudXRjT2Zmc2V0KCkgfHxcbiAgICAgICAgdGhpcy51dGNPZmZzZXQoKSA+IHRoaXMuY2xvbmUoKS5tb250aCg1KS51dGNPZmZzZXQoKVxuICAgICk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0RheWxpZ2h0U2F2aW5nVGltZVNoaWZ0ZWQoKSB7XG4gICAgaWYgKCFpc1VuZGVmaW5lZCh0aGlzLl9pc0RTVFNoaWZ0ZWQpKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pc0RTVFNoaWZ0ZWQ7XG4gICAgfVxuXG4gICAgdmFyIGMgPSB7fSxcbiAgICAgICAgb3RoZXI7XG5cbiAgICBjb3B5Q29uZmlnKGMsIHRoaXMpO1xuICAgIGMgPSBwcmVwYXJlQ29uZmlnKGMpO1xuXG4gICAgaWYgKGMuX2EpIHtcbiAgICAgICAgb3RoZXIgPSBjLl9pc1VUQyA/IGNyZWF0ZVVUQyhjLl9hKSA6IGNyZWF0ZUxvY2FsKGMuX2EpO1xuICAgICAgICB0aGlzLl9pc0RTVFNoaWZ0ZWQgPVxuICAgICAgICAgICAgdGhpcy5pc1ZhbGlkKCkgJiYgY29tcGFyZUFycmF5cyhjLl9hLCBvdGhlci50b0FycmF5KCkpID4gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9pc0RTVFNoaWZ0ZWQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5faXNEU1RTaGlmdGVkO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNMb2NhbCgpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkKCkgPyAhdGhpcy5faXNVVEMgOiBmYWxzZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzVXRjT2Zmc2V0KCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQoKSA/IHRoaXMuX2lzVVRDIDogZmFsc2U7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1V0YygpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkKCkgPyB0aGlzLl9pc1VUQyAmJiB0aGlzLl9vZmZzZXQgPT09IDAgOiBmYWxzZTtcbn1cbiIsImltcG9ydCB7IER1cmF0aW9uLCBpc0R1cmF0aW9uIH0gZnJvbSAnLi9jb25zdHJ1Y3Rvcic7XG5pbXBvcnQgaXNOdW1iZXIgZnJvbSAnLi4vdXRpbHMvaXMtbnVtYmVyJztcbmltcG9ydCB0b0ludCBmcm9tICcuLi91dGlscy90by1pbnQnO1xuaW1wb3J0IGFic1JvdW5kIGZyb20gJy4uL3V0aWxzL2Ficy1yb3VuZCc7XG5pbXBvcnQgaGFzT3duUHJvcCBmcm9tICcuLi91dGlscy9oYXMtb3duLXByb3AnO1xuaW1wb3J0IHsgREFURSwgSE9VUiwgTUlOVVRFLCBTRUNPTkQsIE1JTExJU0VDT05EIH0gZnJvbSAnLi4vdW5pdHMvY29uc3RhbnRzJztcbmltcG9ydCB7IGNsb25lV2l0aE9mZnNldCB9IGZyb20gJy4uL3VuaXRzL29mZnNldCc7XG5pbXBvcnQgeyBjcmVhdGVMb2NhbCB9IGZyb20gJy4uL2NyZWF0ZS9sb2NhbCc7XG5pbXBvcnQgeyBjcmVhdGVJbnZhbGlkIGFzIGludmFsaWQgfSBmcm9tICcuL3ZhbGlkJztcblxuLy8gQVNQLk5FVCBqc29uIGRhdGUgZm9ybWF0IHJlZ2V4XG52YXIgYXNwTmV0UmVnZXggPSAvXigtfFxcKyk/KD86KFxcZCopWy4gXSk/KFxcZCspOihcXGQrKSg/OjooXFxkKykoXFwuXFxkKik/KT8kLyxcbiAgICAvLyBmcm9tIGh0dHA6Ly9kb2NzLmNsb3N1cmUtbGlicmFyeS5nb29nbGVjb2RlLmNvbS9naXQvY2xvc3VyZV9nb29nX2RhdGVfZGF0ZS5qcy5zb3VyY2UuaHRtbFxuICAgIC8vIHNvbWV3aGF0IG1vcmUgaW4gbGluZSB3aXRoIDQuNC4zLjIgMjAwNCBzcGVjLCBidXQgYWxsb3dzIGRlY2ltYWwgYW55d2hlcmVcbiAgICAvLyBhbmQgZnVydGhlciBtb2RpZmllZCB0byBhbGxvdyBmb3Igc3RyaW5ncyBjb250YWluaW5nIGJvdGggd2VlayBhbmQgZGF5XG4gICAgaXNvUmVnZXggPVxuICAgICAgICAvXigtfFxcKyk/UCg/OihbLStdP1swLTksLl0qKVkpPyg/OihbLStdP1swLTksLl0qKU0pPyg/OihbLStdP1swLTksLl0qKVcpPyg/OihbLStdP1swLTksLl0qKUQpPyg/OlQoPzooWy0rXT9bMC05LC5dKilIKT8oPzooWy0rXT9bMC05LC5dKilNKT8oPzooWy0rXT9bMC05LC5dKilTKT8pPyQvO1xuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRHVyYXRpb24oaW5wdXQsIGtleSkge1xuICAgIHZhciBkdXJhdGlvbiA9IGlucHV0LFxuICAgICAgICAvLyBtYXRjaGluZyBhZ2FpbnN0IHJlZ2V4cCBpcyBleHBlbnNpdmUsIGRvIGl0IG9uIGRlbWFuZFxuICAgICAgICBtYXRjaCA9IG51bGwsXG4gICAgICAgIHNpZ24sXG4gICAgICAgIHJldCxcbiAgICAgICAgZGlmZlJlcztcblxuICAgIGlmIChpc0R1cmF0aW9uKGlucHV0KSkge1xuICAgICAgICBkdXJhdGlvbiA9IHtcbiAgICAgICAgICAgIG1zOiBpbnB1dC5fbWlsbGlzZWNvbmRzLFxuICAgICAgICAgICAgZDogaW5wdXQuX2RheXMsXG4gICAgICAgICAgICBNOiBpbnB1dC5fbW9udGhzLFxuICAgICAgICB9O1xuICAgIH0gZWxzZSBpZiAoaXNOdW1iZXIoaW5wdXQpIHx8ICFpc05hTigraW5wdXQpKSB7XG4gICAgICAgIGR1cmF0aW9uID0ge307XG4gICAgICAgIGlmIChrZXkpIHtcbiAgICAgICAgICAgIGR1cmF0aW9uW2tleV0gPSAraW5wdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkdXJhdGlvbi5taWxsaXNlY29uZHMgPSAraW5wdXQ7XG4gICAgICAgIH1cbiAgICB9IGVsc2UgaWYgKChtYXRjaCA9IGFzcE5ldFJlZ2V4LmV4ZWMoaW5wdXQpKSkge1xuICAgICAgICBzaWduID0gbWF0Y2hbMV0gPT09ICctJyA/IC0xIDogMTtcbiAgICAgICAgZHVyYXRpb24gPSB7XG4gICAgICAgICAgICB5OiAwLFxuICAgICAgICAgICAgZDogdG9JbnQobWF0Y2hbREFURV0pICogc2lnbixcbiAgICAgICAgICAgIGg6IHRvSW50KG1hdGNoW0hPVVJdKSAqIHNpZ24sXG4gICAgICAgICAgICBtOiB0b0ludChtYXRjaFtNSU5VVEVdKSAqIHNpZ24sXG4gICAgICAgICAgICBzOiB0b0ludChtYXRjaFtTRUNPTkRdKSAqIHNpZ24sXG4gICAgICAgICAgICBtczogdG9JbnQoYWJzUm91bmQobWF0Y2hbTUlMTElTRUNPTkRdICogMTAwMCkpICogc2lnbiwgLy8gdGhlIG1pbGxpc2Vjb25kIGRlY2ltYWwgcG9pbnQgaXMgaW5jbHVkZWQgaW4gdGhlIG1hdGNoXG4gICAgICAgIH07XG4gICAgfSBlbHNlIGlmICgobWF0Y2ggPSBpc29SZWdleC5leGVjKGlucHV0KSkpIHtcbiAgICAgICAgc2lnbiA9IG1hdGNoWzFdID09PSAnLScgPyAtMSA6IDE7XG4gICAgICAgIGR1cmF0aW9uID0ge1xuICAgICAgICAgICAgeTogcGFyc2VJc28obWF0Y2hbMl0sIHNpZ24pLFxuICAgICAgICAgICAgTTogcGFyc2VJc28obWF0Y2hbM10sIHNpZ24pLFxuICAgICAgICAgICAgdzogcGFyc2VJc28obWF0Y2hbNF0sIHNpZ24pLFxuICAgICAgICAgICAgZDogcGFyc2VJc28obWF0Y2hbNV0sIHNpZ24pLFxuICAgICAgICAgICAgaDogcGFyc2VJc28obWF0Y2hbNl0sIHNpZ24pLFxuICAgICAgICAgICAgbTogcGFyc2VJc28obWF0Y2hbN10sIHNpZ24pLFxuICAgICAgICAgICAgczogcGFyc2VJc28obWF0Y2hbOF0sIHNpZ24pLFxuICAgICAgICB9O1xuICAgIH0gZWxzZSBpZiAoZHVyYXRpb24gPT0gbnVsbCkge1xuICAgICAgICAvLyBjaGVja3MgZm9yIG51bGwgb3IgdW5kZWZpbmVkXG4gICAgICAgIGR1cmF0aW9uID0ge307XG4gICAgfSBlbHNlIGlmIChcbiAgICAgICAgdHlwZW9mIGR1cmF0aW9uID09PSAnb2JqZWN0JyAmJlxuICAgICAgICAoJ2Zyb20nIGluIGR1cmF0aW9uIHx8ICd0bycgaW4gZHVyYXRpb24pXG4gICAgKSB7XG4gICAgICAgIGRpZmZSZXMgPSBtb21lbnRzRGlmZmVyZW5jZShcbiAgICAgICAgICAgIGNyZWF0ZUxvY2FsKGR1cmF0aW9uLmZyb20pLFxuICAgICAgICAgICAgY3JlYXRlTG9jYWwoZHVyYXRpb24udG8pXG4gICAgICAgICk7XG5cbiAgICAgICAgZHVyYXRpb24gPSB7fTtcbiAgICAgICAgZHVyYXRpb24ubXMgPSBkaWZmUmVzLm1pbGxpc2Vjb25kcztcbiAgICAgICAgZHVyYXRpb24uTSA9IGRpZmZSZXMubW9udGhzO1xuICAgIH1cblxuICAgIHJldCA9IG5ldyBEdXJhdGlvbihkdXJhdGlvbik7XG5cbiAgICBpZiAoaXNEdXJhdGlvbihpbnB1dCkgJiYgaGFzT3duUHJvcChpbnB1dCwgJ19sb2NhbGUnKSkge1xuICAgICAgICByZXQuX2xvY2FsZSA9IGlucHV0Ll9sb2NhbGU7XG4gICAgfVxuXG4gICAgaWYgKGlzRHVyYXRpb24oaW5wdXQpICYmIGhhc093blByb3AoaW5wdXQsICdfaXNWYWxpZCcpKSB7XG4gICAgICAgIHJldC5faXNWYWxpZCA9IGlucHV0Ll9pc1ZhbGlkO1xuICAgIH1cblxuICAgIHJldHVybiByZXQ7XG59XG5cbmNyZWF0ZUR1cmF0aW9uLmZuID0gRHVyYXRpb24ucHJvdG90eXBlO1xuY3JlYXRlRHVyYXRpb24uaW52YWxpZCA9IGludmFsaWQ7XG5cbmZ1bmN0aW9uIHBhcnNlSXNvKGlucCwgc2lnbikge1xuICAgIC8vIFdlJ2Qgbm9ybWFsbHkgdXNlIH5+aW5wIGZvciB0aGlzLCBidXQgdW5mb3J0dW5hdGVseSBpdCBhbHNvXG4gICAgLy8gY29udmVydHMgZmxvYXRzIHRvIGludHMuXG4gICAgLy8gaW5wIG1heSBiZSB1bmRlZmluZWQsIHNvIGNhcmVmdWwgY2FsbGluZyByZXBsYWNlIG9uIGl0LlxuICAgIHZhciByZXMgPSBpbnAgJiYgcGFyc2VGbG9hdChpbnAucmVwbGFjZSgnLCcsICcuJykpO1xuICAgIC8vIGFwcGx5IHNpZ24gd2hpbGUgd2UncmUgYXQgaXRcbiAgICByZXR1cm4gKGlzTmFOKHJlcykgPyAwIDogcmVzKSAqIHNpZ247XG59XG5cbmZ1bmN0aW9uIHBvc2l0aXZlTW9tZW50c0RpZmZlcmVuY2UoYmFzZSwgb3RoZXIpIHtcbiAgICB2YXIgcmVzID0ge307XG5cbiAgICByZXMubW9udGhzID1cbiAgICAgICAgb3RoZXIubW9udGgoKSAtIGJhc2UubW9udGgoKSArIChvdGhlci55ZWFyKCkgLSBiYXNlLnllYXIoKSkgKiAxMjtcbiAgICBpZiAoYmFzZS5jbG9uZSgpLmFkZChyZXMubW9udGhzLCAnTScpLmlzQWZ0ZXIob3RoZXIpKSB7XG4gICAgICAgIC0tcmVzLm1vbnRocztcbiAgICB9XG5cbiAgICByZXMubWlsbGlzZWNvbmRzID0gK290aGVyIC0gK2Jhc2UuY2xvbmUoKS5hZGQocmVzLm1vbnRocywgJ00nKTtcblxuICAgIHJldHVybiByZXM7XG59XG5cbmZ1bmN0aW9uIG1vbWVudHNEaWZmZXJlbmNlKGJhc2UsIG90aGVyKSB7XG4gICAgdmFyIHJlcztcbiAgICBpZiAoIShiYXNlLmlzVmFsaWQoKSAmJiBvdGhlci5pc1ZhbGlkKCkpKSB7XG4gICAgICAgIHJldHVybiB7IG1pbGxpc2Vjb25kczogMCwgbW9udGhzOiAwIH07XG4gICAgfVxuXG4gICAgb3RoZXIgPSBjbG9uZVdpdGhPZmZzZXQob3RoZXIsIGJhc2UpO1xuICAgIGlmIChiYXNlLmlzQmVmb3JlKG90aGVyKSkge1xuICAgICAgICByZXMgPSBwb3NpdGl2ZU1vbWVudHNEaWZmZXJlbmNlKGJhc2UsIG90aGVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXMgPSBwb3NpdGl2ZU1vbWVudHNEaWZmZXJlbmNlKG90aGVyLCBiYXNlKTtcbiAgICAgICAgcmVzLm1pbGxpc2Vjb25kcyA9IC1yZXMubWlsbGlzZWNvbmRzO1xuICAgICAgICByZXMubW9udGhzID0gLXJlcy5tb250aHM7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcztcbn1cbiIsImltcG9ydCB7IGdldCwgc2V0IH0gZnJvbSAnLi9nZXQtc2V0JztcbmltcG9ydCB7IHNldE1vbnRoIH0gZnJvbSAnLi4vdW5pdHMvbW9udGgnO1xuaW1wb3J0IHsgY3JlYXRlRHVyYXRpb24gfSBmcm9tICcuLi9kdXJhdGlvbi9jcmVhdGUnO1xuaW1wb3J0IHsgZGVwcmVjYXRlU2ltcGxlIH0gZnJvbSAnLi4vdXRpbHMvZGVwcmVjYXRlJztcbmltcG9ydCB7IGhvb2tzIH0gZnJvbSAnLi4vdXRpbHMvaG9va3MnO1xuaW1wb3J0IGFic1JvdW5kIGZyb20gJy4uL3V0aWxzL2Ficy1yb3VuZCc7XG5cbi8vIFRPRE86IHJlbW92ZSAnbmFtZScgYXJnIGFmdGVyIGRlcHJlY2F0aW9uIGlzIHJlbW92ZWRcbmZ1bmN0aW9uIGNyZWF0ZUFkZGVyKGRpcmVjdGlvbiwgbmFtZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAodmFsLCBwZXJpb2QpIHtcbiAgICAgICAgdmFyIGR1ciwgdG1wO1xuICAgICAgICAvL2ludmVydCB0aGUgYXJndW1lbnRzLCBidXQgY29tcGxhaW4gYWJvdXQgaXRcbiAgICAgICAgaWYgKHBlcmlvZCAhPT0gbnVsbCAmJiAhaXNOYU4oK3BlcmlvZCkpIHtcbiAgICAgICAgICAgIGRlcHJlY2F0ZVNpbXBsZShcbiAgICAgICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAgICAgICdtb21lbnQoKS4nICtcbiAgICAgICAgICAgICAgICAgICAgbmFtZSArXG4gICAgICAgICAgICAgICAgICAgICcocGVyaW9kLCBudW1iZXIpIGlzIGRlcHJlY2F0ZWQuIFBsZWFzZSB1c2UgbW9tZW50KCkuJyArXG4gICAgICAgICAgICAgICAgICAgIG5hbWUgK1xuICAgICAgICAgICAgICAgICAgICAnKG51bWJlciwgcGVyaW9kKS4gJyArXG4gICAgICAgICAgICAgICAgICAgICdTZWUgaHR0cDovL21vbWVudGpzLmNvbS9ndWlkZXMvIy93YXJuaW5ncy9hZGQtaW52ZXJ0ZWQtcGFyYW0vIGZvciBtb3JlIGluZm8uJ1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHRtcCA9IHZhbDtcbiAgICAgICAgICAgIHZhbCA9IHBlcmlvZDtcbiAgICAgICAgICAgIHBlcmlvZCA9IHRtcDtcbiAgICAgICAgfVxuXG4gICAgICAgIGR1ciA9IGNyZWF0ZUR1cmF0aW9uKHZhbCwgcGVyaW9kKTtcbiAgICAgICAgYWRkU3VidHJhY3QodGhpcywgZHVyLCBkaXJlY3Rpb24pO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYWRkU3VidHJhY3QobW9tLCBkdXJhdGlvbiwgaXNBZGRpbmcsIHVwZGF0ZU9mZnNldCkge1xuICAgIHZhciBtaWxsaXNlY29uZHMgPSBkdXJhdGlvbi5fbWlsbGlzZWNvbmRzLFxuICAgICAgICBkYXlzID0gYWJzUm91bmQoZHVyYXRpb24uX2RheXMpLFxuICAgICAgICBtb250aHMgPSBhYnNSb3VuZChkdXJhdGlvbi5fbW9udGhzKTtcblxuICAgIGlmICghbW9tLmlzVmFsaWQoKSkge1xuICAgICAgICAvLyBObyBvcFxuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdXBkYXRlT2Zmc2V0ID0gdXBkYXRlT2Zmc2V0ID09IG51bGwgPyB0cnVlIDogdXBkYXRlT2Zmc2V0O1xuXG4gICAgaWYgKG1vbnRocykge1xuICAgICAgICBzZXRNb250aChtb20sIGdldChtb20sICdNb250aCcpICsgbW9udGhzICogaXNBZGRpbmcpO1xuICAgIH1cbiAgICBpZiAoZGF5cykge1xuICAgICAgICBzZXQobW9tLCAnRGF0ZScsIGdldChtb20sICdEYXRlJykgKyBkYXlzICogaXNBZGRpbmcpO1xuICAgIH1cbiAgICBpZiAobWlsbGlzZWNvbmRzKSB7XG4gICAgICAgIG1vbS5fZC5zZXRUaW1lKG1vbS5fZC52YWx1ZU9mKCkgKyBtaWxsaXNlY29uZHMgKiBpc0FkZGluZyk7XG4gICAgfVxuICAgIGlmICh1cGRhdGVPZmZzZXQpIHtcbiAgICAgICAgaG9va3MudXBkYXRlT2Zmc2V0KG1vbSwgZGF5cyB8fCBtb250aHMpO1xuICAgIH1cbn1cblxuZXhwb3J0IHZhciBhZGQgPSBjcmVhdGVBZGRlcigxLCAnYWRkJyksXG4gICAgc3VidHJhY3QgPSBjcmVhdGVBZGRlcigtMSwgJ3N1YnRyYWN0Jyk7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc1N0cmluZyhpbnB1dCkge1xuICAgIHJldHVybiB0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnIHx8IGlucHV0IGluc3RhbmNlb2YgU3RyaW5nO1xufVxuIiwiaW1wb3J0IGlzT2JqZWN0RW1wdHkgZnJvbSAnLi9pcy1vYmplY3QtZW1wdHknO1xuaW1wb3J0IGhhc093blByb3AgZnJvbSAnLi9oYXMtb3duLXByb3AnO1xuaW1wb3J0IGlzT2JqZWN0IGZyb20gJy4vaXMtb2JqZWN0JztcbmltcG9ydCBpc0RhdGUgZnJvbSAnLi9pcy1kYXRlJztcbmltcG9ydCBpc051bWJlciBmcm9tICcuL2lzLW51bWJlcic7XG5pbXBvcnQgaXNTdHJpbmcgZnJvbSAnLi9pcy1zdHJpbmcnO1xuaW1wb3J0IHsgaXNNb21lbnQgfSBmcm9tICcuLi9tb21lbnQvY29uc3RydWN0b3InO1xuaW1wb3J0IGlzQXJyYXkgZnJvbSAnLi9pcy1hcnJheSc7XG5cbi8vIHR5cGUgTW9tZW50SW5wdXQgPSBNb21lbnQgfCBEYXRlIHwgc3RyaW5nIHwgbnVtYmVyIHwgKG51bWJlciB8IHN0cmluZylbXSB8IE1vbWVudElucHV0T2JqZWN0IHwgdm9pZDsgLy8gbnVsbCB8IHVuZGVmaW5lZFxuZXhwb3J0IGZ1bmN0aW9uIGlzTW9tZW50SW5wdXQoaW5wdXQpIHtcbiAgICByZXR1cm4gKFxuICAgICAgICBpc01vbWVudChpbnB1dCkgfHxcbiAgICAgICAgaXNEYXRlKGlucHV0KSB8fFxuICAgICAgICBpc1N0cmluZyhpbnB1dCkgfHxcbiAgICAgICAgaXNOdW1iZXIoaW5wdXQpIHx8XG4gICAgICAgIGlzTnVtYmVyT3JTdHJpbmdBcnJheShpbnB1dCkgfHxcbiAgICAgICAgaXNNb21lbnRJbnB1dE9iamVjdChpbnB1dCkgfHxcbiAgICAgICAgaW5wdXQgPT09IG51bGwgfHxcbiAgICAgICAgaW5wdXQgPT09IHVuZGVmaW5lZFxuICAgICk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc01vbWVudElucHV0T2JqZWN0KGlucHV0KSB7XG4gICAgdmFyIG9iamVjdFRlc3QgPSBpc09iamVjdChpbnB1dCkgJiYgIWlzT2JqZWN0RW1wdHkoaW5wdXQpLFxuICAgICAgICBwcm9wZXJ0eVRlc3QgPSBmYWxzZSxcbiAgICAgICAgcHJvcGVydGllcyA9IFtcbiAgICAgICAgICAgICd5ZWFycycsXG4gICAgICAgICAgICAneWVhcicsXG4gICAgICAgICAgICAneScsXG4gICAgICAgICAgICAnbW9udGhzJyxcbiAgICAgICAgICAgICdtb250aCcsXG4gICAgICAgICAgICAnTScsXG4gICAgICAgICAgICAnZGF5cycsXG4gICAgICAgICAgICAnZGF5JyxcbiAgICAgICAgICAgICdkJyxcbiAgICAgICAgICAgICdkYXRlcycsXG4gICAgICAgICAgICAnZGF0ZScsXG4gICAgICAgICAgICAnRCcsXG4gICAgICAgICAgICAnaG91cnMnLFxuICAgICAgICAgICAgJ2hvdXInLFxuICAgICAgICAgICAgJ2gnLFxuICAgICAgICAgICAgJ21pbnV0ZXMnLFxuICAgICAgICAgICAgJ21pbnV0ZScsXG4gICAgICAgICAgICAnbScsXG4gICAgICAgICAgICAnc2Vjb25kcycsXG4gICAgICAgICAgICAnc2Vjb25kJyxcbiAgICAgICAgICAgICdzJyxcbiAgICAgICAgICAgICdtaWxsaXNlY29uZHMnLFxuICAgICAgICAgICAgJ21pbGxpc2Vjb25kJyxcbiAgICAgICAgICAgICdtcycsXG4gICAgICAgIF0sXG4gICAgICAgIGksXG4gICAgICAgIHByb3BlcnR5LFxuICAgICAgICBwcm9wZXJ0eUxlbiA9IHByb3BlcnRpZXMubGVuZ3RoO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IHByb3BlcnR5TGVuOyBpICs9IDEpIHtcbiAgICAgICAgcHJvcGVydHkgPSBwcm9wZXJ0aWVzW2ldO1xuICAgICAgICBwcm9wZXJ0eVRlc3QgPSBwcm9wZXJ0eVRlc3QgfHwgaGFzT3duUHJvcChpbnB1dCwgcHJvcGVydHkpO1xuICAgIH1cblxuICAgIHJldHVybiBvYmplY3RUZXN0ICYmIHByb3BlcnR5VGVzdDtcbn1cblxuZnVuY3Rpb24gaXNOdW1iZXJPclN0cmluZ0FycmF5KGlucHV0KSB7XG4gICAgdmFyIGFycmF5VGVzdCA9IGlzQXJyYXkoaW5wdXQpLFxuICAgICAgICBkYXRhVHlwZVRlc3QgPSBmYWxzZTtcbiAgICBpZiAoYXJyYXlUZXN0KSB7XG4gICAgICAgIGRhdGFUeXBlVGVzdCA9XG4gICAgICAgICAgICBpbnB1dC5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gIWlzTnVtYmVyKGl0ZW0pICYmIGlzU3RyaW5nKGlucHV0KTtcbiAgICAgICAgICAgIH0pLmxlbmd0aCA9PT0gMDtcbiAgICB9XG4gICAgcmV0dXJuIGFycmF5VGVzdCAmJiBkYXRhVHlwZVRlc3Q7XG59XG4iLCJpbXBvcnQgaXNPYmplY3RFbXB0eSBmcm9tICcuL2lzLW9iamVjdC1lbXB0eSc7XG5pbXBvcnQgaGFzT3duUHJvcCBmcm9tICcuL2hhcy1vd24tcHJvcCc7XG5pbXBvcnQgaXNPYmplY3QgZnJvbSAnLi9pcy1vYmplY3QnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc0NhbGVuZGFyU3BlYyhpbnB1dCkge1xuICAgIHZhciBvYmplY3RUZXN0ID0gaXNPYmplY3QoaW5wdXQpICYmICFpc09iamVjdEVtcHR5KGlucHV0KSxcbiAgICAgICAgcHJvcGVydHlUZXN0ID0gZmFsc2UsXG4gICAgICAgIHByb3BlcnRpZXMgPSBbXG4gICAgICAgICAgICAnc2FtZURheScsXG4gICAgICAgICAgICAnbmV4dERheScsXG4gICAgICAgICAgICAnbGFzdERheScsXG4gICAgICAgICAgICAnbmV4dFdlZWsnLFxuICAgICAgICAgICAgJ2xhc3RXZWVrJyxcbiAgICAgICAgICAgICdzYW1lRWxzZScsXG4gICAgICAgIF0sXG4gICAgICAgIGksXG4gICAgICAgIHByb3BlcnR5O1xuXG4gICAgZm9yIChpID0gMDsgaSA8IHByb3BlcnRpZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgcHJvcGVydHkgPSBwcm9wZXJ0aWVzW2ldO1xuICAgICAgICBwcm9wZXJ0eVRlc3QgPSBwcm9wZXJ0eVRlc3QgfHwgaGFzT3duUHJvcChpbnB1dCwgcHJvcGVydHkpO1xuICAgIH1cblxuICAgIHJldHVybiBvYmplY3RUZXN0ICYmIHByb3BlcnR5VGVzdDtcbn1cbiIsImltcG9ydCB7IGNyZWF0ZUxvY2FsIH0gZnJvbSAnLi4vY3JlYXRlL2xvY2FsJztcbmltcG9ydCB7IGNsb25lV2l0aE9mZnNldCB9IGZyb20gJy4uL3VuaXRzL29mZnNldCc7XG5pbXBvcnQgaXNGdW5jdGlvbiBmcm9tICcuLi91dGlscy9pcy1mdW5jdGlvbic7XG5pbXBvcnQgeyBob29rcyB9IGZyb20gJy4uL3V0aWxzL2hvb2tzJztcbmltcG9ydCB7IGlzTW9tZW50SW5wdXQgfSBmcm9tICcuLi91dGlscy9pcy1tb21lbnQtaW5wdXQnO1xuaW1wb3J0IGlzQ2FsZW5kYXJTcGVjIGZyb20gJy4uL3V0aWxzL2lzLWNhbGVuZGFyLXNwZWMnO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q2FsZW5kYXJGb3JtYXQobXlNb21lbnQsIG5vdykge1xuICAgIHZhciBkaWZmID0gbXlNb21lbnQuZGlmZihub3csICdkYXlzJywgdHJ1ZSk7XG4gICAgcmV0dXJuIGRpZmYgPCAtNlxuICAgICAgICA/ICdzYW1lRWxzZSdcbiAgICAgICAgOiBkaWZmIDwgLTFcbiAgICAgICAgICA/ICdsYXN0V2VlaydcbiAgICAgICAgICA6IGRpZmYgPCAwXG4gICAgICAgICAgICA/ICdsYXN0RGF5J1xuICAgICAgICAgICAgOiBkaWZmIDwgMVxuICAgICAgICAgICAgICA/ICdzYW1lRGF5J1xuICAgICAgICAgICAgICA6IGRpZmYgPCAyXG4gICAgICAgICAgICAgICAgPyAnbmV4dERheSdcbiAgICAgICAgICAgICAgICA6IGRpZmYgPCA3XG4gICAgICAgICAgICAgICAgICA/ICduZXh0V2VlaydcbiAgICAgICAgICAgICAgICAgIDogJ3NhbWVFbHNlJztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNhbGVuZGFyKHRpbWUsIGZvcm1hdHMpIHtcbiAgICAvLyBTdXBwb3J0IGZvciBzaW5nbGUgcGFyYW1ldGVyLCBmb3JtYXRzIG9ubHkgb3ZlcmxvYWQgdG8gdGhlIGNhbGVuZGFyIGZ1bmN0aW9uXG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgaWYgKCFhcmd1bWVudHNbMF0pIHtcbiAgICAgICAgICAgIHRpbWUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICBmb3JtYXRzID0gdW5kZWZpbmVkO1xuICAgICAgICB9IGVsc2UgaWYgKGlzTW9tZW50SW5wdXQoYXJndW1lbnRzWzBdKSkge1xuICAgICAgICAgICAgdGltZSA9IGFyZ3VtZW50c1swXTtcbiAgICAgICAgICAgIGZvcm1hdHMgPSB1bmRlZmluZWQ7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNDYWxlbmRhclNwZWMoYXJndW1lbnRzWzBdKSkge1xuICAgICAgICAgICAgZm9ybWF0cyA9IGFyZ3VtZW50c1swXTtcbiAgICAgICAgICAgIHRpbWUgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gV2Ugd2FudCB0byBjb21wYXJlIHRoZSBzdGFydCBvZiB0b2RheSwgdnMgdGhpcy5cbiAgICAvLyBHZXR0aW5nIHN0YXJ0LW9mLXRvZGF5IGRlcGVuZHMgb24gd2hldGhlciB3ZSdyZSBsb2NhbC91dGMvb2Zmc2V0IG9yIG5vdC5cbiAgICB2YXIgbm93ID0gdGltZSB8fCBjcmVhdGVMb2NhbCgpLFxuICAgICAgICBzb2QgPSBjbG9uZVdpdGhPZmZzZXQobm93LCB0aGlzKS5zdGFydE9mKCdkYXknKSxcbiAgICAgICAgZm9ybWF0ID0gaG9va3MuY2FsZW5kYXJGb3JtYXQodGhpcywgc29kKSB8fCAnc2FtZUVsc2UnLFxuICAgICAgICBvdXRwdXQgPVxuICAgICAgICAgICAgZm9ybWF0cyAmJlxuICAgICAgICAgICAgKGlzRnVuY3Rpb24oZm9ybWF0c1tmb3JtYXRdKVxuICAgICAgICAgICAgICAgID8gZm9ybWF0c1tmb3JtYXRdLmNhbGwodGhpcywgbm93KVxuICAgICAgICAgICAgICAgIDogZm9ybWF0c1tmb3JtYXRdKTtcblxuICAgIHJldHVybiB0aGlzLmZvcm1hdChcbiAgICAgICAgb3V0cHV0IHx8IHRoaXMubG9jYWxlRGF0YSgpLmNhbGVuZGFyKGZvcm1hdCwgdGhpcywgY3JlYXRlTG9jYWwobm93KSlcbiAgICApO1xufVxuIiwiaW1wb3J0IHsgTW9tZW50IH0gZnJvbSAnLi9jb25zdHJ1Y3Rvcic7XG5cbmV4cG9ydCBmdW5jdGlvbiBjbG9uZSgpIHtcbiAgICByZXR1cm4gbmV3IE1vbWVudCh0aGlzKTtcbn1cbiIsImltcG9ydCB7IGlzTW9tZW50IH0gZnJvbSAnLi9jb25zdHJ1Y3Rvcic7XG5pbXBvcnQgeyBub3JtYWxpemVVbml0cyB9IGZyb20gJy4uL3VuaXRzL2FsaWFzZXMnO1xuaW1wb3J0IHsgY3JlYXRlTG9jYWwgfSBmcm9tICcuLi9jcmVhdGUvbG9jYWwnO1xuXG5leHBvcnQgZnVuY3Rpb24gaXNBZnRlcihpbnB1dCwgdW5pdHMpIHtcbiAgICB2YXIgbG9jYWxJbnB1dCA9IGlzTW9tZW50KGlucHV0KSA/IGlucHV0IDogY3JlYXRlTG9jYWwoaW5wdXQpO1xuICAgIGlmICghKHRoaXMuaXNWYWxpZCgpICYmIGxvY2FsSW5wdXQuaXNWYWxpZCgpKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpIHx8ICdtaWxsaXNlY29uZCc7XG4gICAgaWYgKHVuaXRzID09PSAnbWlsbGlzZWNvbmQnKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlT2YoKSA+IGxvY2FsSW5wdXQudmFsdWVPZigpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBsb2NhbElucHV0LnZhbHVlT2YoKSA8IHRoaXMuY2xvbmUoKS5zdGFydE9mKHVuaXRzKS52YWx1ZU9mKCk7XG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNCZWZvcmUoaW5wdXQsIHVuaXRzKSB7XG4gICAgdmFyIGxvY2FsSW5wdXQgPSBpc01vbWVudChpbnB1dCkgPyBpbnB1dCA6IGNyZWF0ZUxvY2FsKGlucHV0KTtcbiAgICBpZiAoISh0aGlzLmlzVmFsaWQoKSAmJiBsb2NhbElucHV0LmlzVmFsaWQoKSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKSB8fCAnbWlsbGlzZWNvbmQnO1xuICAgIGlmICh1bml0cyA9PT0gJ21pbGxpc2Vjb25kJykge1xuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZU9mKCkgPCBsb2NhbElucHV0LnZhbHVlT2YoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmVuZE9mKHVuaXRzKS52YWx1ZU9mKCkgPCBsb2NhbElucHV0LnZhbHVlT2YoKTtcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0JldHdlZW4oZnJvbSwgdG8sIHVuaXRzLCBpbmNsdXNpdml0eSkge1xuICAgIHZhciBsb2NhbEZyb20gPSBpc01vbWVudChmcm9tKSA/IGZyb20gOiBjcmVhdGVMb2NhbChmcm9tKSxcbiAgICAgICAgbG9jYWxUbyA9IGlzTW9tZW50KHRvKSA/IHRvIDogY3JlYXRlTG9jYWwodG8pO1xuICAgIGlmICghKHRoaXMuaXNWYWxpZCgpICYmIGxvY2FsRnJvbS5pc1ZhbGlkKCkgJiYgbG9jYWxUby5pc1ZhbGlkKCkpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaW5jbHVzaXZpdHkgPSBpbmNsdXNpdml0eSB8fCAnKCknO1xuICAgIHJldHVybiAoXG4gICAgICAgIChpbmNsdXNpdml0eVswXSA9PT0gJygnXG4gICAgICAgICAgICA/IHRoaXMuaXNBZnRlcihsb2NhbEZyb20sIHVuaXRzKVxuICAgICAgICAgICAgOiAhdGhpcy5pc0JlZm9yZShsb2NhbEZyb20sIHVuaXRzKSkgJiZcbiAgICAgICAgKGluY2x1c2l2aXR5WzFdID09PSAnKSdcbiAgICAgICAgICAgID8gdGhpcy5pc0JlZm9yZShsb2NhbFRvLCB1bml0cylcbiAgICAgICAgICAgIDogIXRoaXMuaXNBZnRlcihsb2NhbFRvLCB1bml0cykpXG4gICAgKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzU2FtZShpbnB1dCwgdW5pdHMpIHtcbiAgICB2YXIgbG9jYWxJbnB1dCA9IGlzTW9tZW50KGlucHV0KSA/IGlucHV0IDogY3JlYXRlTG9jYWwoaW5wdXQpLFxuICAgICAgICBpbnB1dE1zO1xuICAgIGlmICghKHRoaXMuaXNWYWxpZCgpICYmIGxvY2FsSW5wdXQuaXNWYWxpZCgpKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpIHx8ICdtaWxsaXNlY29uZCc7XG4gICAgaWYgKHVuaXRzID09PSAnbWlsbGlzZWNvbmQnKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlT2YoKSA9PT0gbG9jYWxJbnB1dC52YWx1ZU9mKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgaW5wdXRNcyA9IGxvY2FsSW5wdXQudmFsdWVPZigpO1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgdGhpcy5jbG9uZSgpLnN0YXJ0T2YodW5pdHMpLnZhbHVlT2YoKSA8PSBpbnB1dE1zICYmXG4gICAgICAgICAgICBpbnB1dE1zIDw9IHRoaXMuY2xvbmUoKS5lbmRPZih1bml0cykudmFsdWVPZigpXG4gICAgICAgICk7XG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNTYW1lT3JBZnRlcihpbnB1dCwgdW5pdHMpIHtcbiAgICByZXR1cm4gdGhpcy5pc1NhbWUoaW5wdXQsIHVuaXRzKSB8fCB0aGlzLmlzQWZ0ZXIoaW5wdXQsIHVuaXRzKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzU2FtZU9yQmVmb3JlKGlucHV0LCB1bml0cykge1xuICAgIHJldHVybiB0aGlzLmlzU2FtZShpbnB1dCwgdW5pdHMpIHx8IHRoaXMuaXNCZWZvcmUoaW5wdXQsIHVuaXRzKTtcbn1cbiIsImltcG9ydCBhYnNGbG9vciBmcm9tICcuLi91dGlscy9hYnMtZmxvb3InO1xuaW1wb3J0IHsgY2xvbmVXaXRoT2Zmc2V0IH0gZnJvbSAnLi4vdW5pdHMvb2Zmc2V0JztcbmltcG9ydCB7IG5vcm1hbGl6ZVVuaXRzIH0gZnJvbSAnLi4vdW5pdHMvYWxpYXNlcyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBkaWZmKGlucHV0LCB1bml0cywgYXNGbG9hdCkge1xuICAgIHZhciB0aGF0LCB6b25lRGVsdGEsIG91dHB1dDtcblxuICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgcmV0dXJuIE5hTjtcbiAgICB9XG5cbiAgICB0aGF0ID0gY2xvbmVXaXRoT2Zmc2V0KGlucHV0LCB0aGlzKTtcblxuICAgIGlmICghdGhhdC5pc1ZhbGlkKCkpIHtcbiAgICAgICAgcmV0dXJuIE5hTjtcbiAgICB9XG5cbiAgICB6b25lRGVsdGEgPSAodGhhdC51dGNPZmZzZXQoKSAtIHRoaXMudXRjT2Zmc2V0KCkpICogNmU0O1xuXG4gICAgdW5pdHMgPSBub3JtYWxpemVVbml0cyh1bml0cyk7XG5cbiAgICBzd2l0Y2ggKHVuaXRzKSB7XG4gICAgICAgIGNhc2UgJ3llYXInOlxuICAgICAgICAgICAgb3V0cHV0ID0gbW9udGhEaWZmKHRoaXMsIHRoYXQpIC8gMTI7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnbW9udGgnOlxuICAgICAgICAgICAgb3V0cHV0ID0gbW9udGhEaWZmKHRoaXMsIHRoYXQpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3F1YXJ0ZXInOlxuICAgICAgICAgICAgb3V0cHV0ID0gbW9udGhEaWZmKHRoaXMsIHRoYXQpIC8gMztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdzZWNvbmQnOlxuICAgICAgICAgICAgb3V0cHV0ID0gKHRoaXMgLSB0aGF0KSAvIDFlMztcbiAgICAgICAgICAgIGJyZWFrOyAvLyAxMDAwXG4gICAgICAgIGNhc2UgJ21pbnV0ZSc6XG4gICAgICAgICAgICBvdXRwdXQgPSAodGhpcyAtIHRoYXQpIC8gNmU0O1xuICAgICAgICAgICAgYnJlYWs7IC8vIDEwMDAgKiA2MFxuICAgICAgICBjYXNlICdob3VyJzpcbiAgICAgICAgICAgIG91dHB1dCA9ICh0aGlzIC0gdGhhdCkgLyAzNmU1O1xuICAgICAgICAgICAgYnJlYWs7IC8vIDEwMDAgKiA2MCAqIDYwXG4gICAgICAgIGNhc2UgJ2RheSc6XG4gICAgICAgICAgICBvdXRwdXQgPSAodGhpcyAtIHRoYXQgLSB6b25lRGVsdGEpIC8gODY0ZTU7XG4gICAgICAgICAgICBicmVhazsgLy8gMTAwMCAqIDYwICogNjAgKiAyNCwgbmVnYXRlIGRzdFxuICAgICAgICBjYXNlICd3ZWVrJzpcbiAgICAgICAgICAgIG91dHB1dCA9ICh0aGlzIC0gdGhhdCAtIHpvbmVEZWx0YSkgLyA2MDQ4ZTU7XG4gICAgICAgICAgICBicmVhazsgLy8gMTAwMCAqIDYwICogNjAgKiAyNCAqIDcsIG5lZ2F0ZSBkc3RcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIG91dHB1dCA9IHRoaXMgLSB0aGF0O1xuICAgIH1cblxuICAgIHJldHVybiBhc0Zsb2F0ID8gb3V0cHV0IDogYWJzRmxvb3Iob3V0cHV0KTtcbn1cblxuZnVuY3Rpb24gbW9udGhEaWZmKGEsIGIpIHtcbiAgICBpZiAoYS5kYXRlKCkgPCBiLmRhdGUoKSkge1xuICAgICAgICAvLyBlbmQtb2YtbW9udGggY2FsY3VsYXRpb25zIHdvcmsgY29ycmVjdCB3aGVuIHRoZSBzdGFydCBtb250aCBoYXMgbW9yZVxuICAgICAgICAvLyBkYXlzIHRoYW4gdGhlIGVuZCBtb250aC5cbiAgICAgICAgcmV0dXJuIC1tb250aERpZmYoYiwgYSk7XG4gICAgfVxuICAgIC8vIGRpZmZlcmVuY2UgaW4gbW9udGhzXG4gICAgdmFyIHdob2xlTW9udGhEaWZmID0gKGIueWVhcigpIC0gYS55ZWFyKCkpICogMTIgKyAoYi5tb250aCgpIC0gYS5tb250aCgpKSxcbiAgICAgICAgLy8gYiBpcyBpbiAoYW5jaG9yIC0gMSBtb250aCwgYW5jaG9yICsgMSBtb250aClcbiAgICAgICAgYW5jaG9yID0gYS5jbG9uZSgpLmFkZCh3aG9sZU1vbnRoRGlmZiwgJ21vbnRocycpLFxuICAgICAgICBhbmNob3IyLFxuICAgICAgICBhZGp1c3Q7XG5cbiAgICBpZiAoYiAtIGFuY2hvciA8IDApIHtcbiAgICAgICAgYW5jaG9yMiA9IGEuY2xvbmUoKS5hZGQod2hvbGVNb250aERpZmYgLSAxLCAnbW9udGhzJyk7XG4gICAgICAgIC8vIGxpbmVhciBhY3Jvc3MgdGhlIG1vbnRoXG4gICAgICAgIGFkanVzdCA9IChiIC0gYW5jaG9yKSAvIChhbmNob3IgLSBhbmNob3IyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBhbmNob3IyID0gYS5jbG9uZSgpLmFkZCh3aG9sZU1vbnRoRGlmZiArIDEsICdtb250aHMnKTtcbiAgICAgICAgLy8gbGluZWFyIGFjcm9zcyB0aGUgbW9udGhcbiAgICAgICAgYWRqdXN0ID0gKGIgLSBhbmNob3IpIC8gKGFuY2hvcjIgLSBhbmNob3IpO1xuICAgIH1cblxuICAgIC8vY2hlY2sgZm9yIG5lZ2F0aXZlIHplcm8sIHJldHVybiB6ZXJvIGlmIG5lZ2F0aXZlIHplcm9cbiAgICByZXR1cm4gLSh3aG9sZU1vbnRoRGlmZiArIGFkanVzdCkgfHwgMDtcbn1cbiIsImltcG9ydCB7IGZvcm1hdE1vbWVudCB9IGZyb20gJy4uL2Zvcm1hdC9mb3JtYXQnO1xuaW1wb3J0IHsgaG9va3MgfSBmcm9tICcuLi91dGlscy9ob29rcyc7XG5pbXBvcnQgaXNGdW5jdGlvbiBmcm9tICcuLi91dGlscy9pcy1mdW5jdGlvbic7XG5cbmhvb2tzLmRlZmF1bHRGb3JtYXQgPSAnWVlZWS1NTS1ERFRISDptbTpzc1onO1xuaG9va3MuZGVmYXVsdEZvcm1hdFV0YyA9ICdZWVlZLU1NLUREVEhIOm1tOnNzW1pdJztcblxuZXhwb3J0IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkubG9jYWxlKCdlbicpLmZvcm1hdCgnZGRkIE1NTSBERCBZWVlZIEhIOm1tOnNzIFtHTVRdWlonKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRvSVNPU3RyaW5nKGtlZXBPZmZzZXQpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICB2YXIgdXRjID0ga2VlcE9mZnNldCAhPT0gdHJ1ZSxcbiAgICAgICAgbSA9IHV0YyA/IHRoaXMuY2xvbmUoKS51dGMoKSA6IHRoaXM7XG4gICAgaWYgKG0ueWVhcigpIDwgMCB8fCBtLnllYXIoKSA+IDk5OTkpIHtcbiAgICAgICAgcmV0dXJuIGZvcm1hdE1vbWVudChcbiAgICAgICAgICAgIG0sXG4gICAgICAgICAgICB1dGNcbiAgICAgICAgICAgICAgICA/ICdZWVlZWVktTU0tRERbVF1ISDptbTpzcy5TU1NbWl0nXG4gICAgICAgICAgICAgICAgOiAnWVlZWVlZLU1NLUREW1RdSEg6bW06c3MuU1NTWidcbiAgICAgICAgKTtcbiAgICB9XG4gICAgaWYgKGlzRnVuY3Rpb24oRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmcpKSB7XG4gICAgICAgIC8vIG5hdGl2ZSBpbXBsZW1lbnRhdGlvbiBpcyB+NTB4IGZhc3RlciwgdXNlIGl0IHdoZW4gd2UgY2FuXG4gICAgICAgIGlmICh1dGMpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnRvRGF0ZSgpLnRvSVNPU3RyaW5nKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IERhdGUodGhpcy52YWx1ZU9mKCkgKyB0aGlzLnV0Y09mZnNldCgpICogNjAgKiAxMDAwKVxuICAgICAgICAgICAgICAgIC50b0lTT1N0cmluZygpXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoJ1onLCBmb3JtYXRNb21lbnQobSwgJ1onKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZvcm1hdE1vbWVudChcbiAgICAgICAgbSxcbiAgICAgICAgdXRjID8gJ1lZWVktTU0tRERbVF1ISDptbTpzcy5TU1NbWl0nIDogJ1lZWVktTU0tRERbVF1ISDptbTpzcy5TU1NaJ1xuICAgICk7XG59XG5cbi8qKlxuICogUmV0dXJuIGEgaHVtYW4gcmVhZGFibGUgcmVwcmVzZW50YXRpb24gb2YgYSBtb21lbnQgdGhhdCBjYW5cbiAqIGFsc28gYmUgZXZhbHVhdGVkIHRvIGdldCBhIG5ldyBtb21lbnQgd2hpY2ggaXMgdGhlIHNhbWVcbiAqXG4gKiBAbGluayBodHRwczovL25vZGVqcy5vcmcvZGlzdC9sYXRlc3QvZG9jcy9hcGkvdXRpbC5odG1sI3V0aWxfY3VzdG9tX2luc3BlY3RfZnVuY3Rpb25fb25fb2JqZWN0c1xuICovXG5leHBvcnQgZnVuY3Rpb24gaW5zcGVjdCgpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgIHJldHVybiAnbW9tZW50LmludmFsaWQoLyogJyArIHRoaXMuX2kgKyAnICovKSc7XG4gICAgfVxuICAgIHZhciBmdW5jID0gJ21vbWVudCcsXG4gICAgICAgIHpvbmUgPSAnJyxcbiAgICAgICAgcHJlZml4LFxuICAgICAgICB5ZWFyLFxuICAgICAgICBkYXRldGltZSxcbiAgICAgICAgc3VmZml4O1xuICAgIGlmICghdGhpcy5pc0xvY2FsKCkpIHtcbiAgICAgICAgZnVuYyA9IHRoaXMudXRjT2Zmc2V0KCkgPT09IDAgPyAnbW9tZW50LnV0YycgOiAnbW9tZW50LnBhcnNlWm9uZSc7XG4gICAgICAgIHpvbmUgPSAnWic7XG4gICAgfVxuICAgIHByZWZpeCA9ICdbJyArIGZ1bmMgKyAnKFwiXSc7XG4gICAgeWVhciA9IDAgPD0gdGhpcy55ZWFyKCkgJiYgdGhpcy55ZWFyKCkgPD0gOTk5OSA/ICdZWVlZJyA6ICdZWVlZWVknO1xuICAgIGRhdGV0aW1lID0gJy1NTS1ERFtUXUhIOm1tOnNzLlNTUyc7XG4gICAgc3VmZml4ID0gem9uZSArICdbXCIpXSc7XG5cbiAgICByZXR1cm4gdGhpcy5mb3JtYXQocHJlZml4ICsgeWVhciArIGRhdGV0aW1lICsgc3VmZml4KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdChpbnB1dFN0cmluZykge1xuICAgIGlmICghaW5wdXRTdHJpbmcpIHtcbiAgICAgICAgaW5wdXRTdHJpbmcgPSB0aGlzLmlzVXRjKClcbiAgICAgICAgICAgID8gaG9va3MuZGVmYXVsdEZvcm1hdFV0Y1xuICAgICAgICAgICAgOiBob29rcy5kZWZhdWx0Rm9ybWF0O1xuICAgIH1cbiAgICB2YXIgb3V0cHV0ID0gZm9ybWF0TW9tZW50KHRoaXMsIGlucHV0U3RyaW5nKTtcbiAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkucG9zdGZvcm1hdChvdXRwdXQpO1xufVxuIiwiaW1wb3J0IHsgY3JlYXRlRHVyYXRpb24gfSBmcm9tICcuLi9kdXJhdGlvbi9jcmVhdGUnO1xuaW1wb3J0IHsgY3JlYXRlTG9jYWwgfSBmcm9tICcuLi9jcmVhdGUvbG9jYWwnO1xuaW1wb3J0IHsgaXNNb21lbnQgfSBmcm9tICcuLi9tb21lbnQvY29uc3RydWN0b3InO1xuXG5leHBvcnQgZnVuY3Rpb24gZnJvbSh0aW1lLCB3aXRob3V0U3VmZml4KSB7XG4gICAgaWYgKFxuICAgICAgICB0aGlzLmlzVmFsaWQoKSAmJlxuICAgICAgICAoKGlzTW9tZW50KHRpbWUpICYmIHRpbWUuaXNWYWxpZCgpKSB8fCBjcmVhdGVMb2NhbCh0aW1lKS5pc1ZhbGlkKCkpXG4gICAgKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVEdXJhdGlvbih7IHRvOiB0aGlzLCBmcm9tOiB0aW1lIH0pXG4gICAgICAgICAgICAubG9jYWxlKHRoaXMubG9jYWxlKCkpXG4gICAgICAgICAgICAuaHVtYW5pemUoIXdpdGhvdXRTdWZmaXgpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS5pbnZhbGlkRGF0ZSgpO1xuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZyb21Ob3cod2l0aG91dFN1ZmZpeCkge1xuICAgIHJldHVybiB0aGlzLmZyb20oY3JlYXRlTG9jYWwoKSwgd2l0aG91dFN1ZmZpeCk7XG59XG4iLCJpbXBvcnQgeyBjcmVhdGVEdXJhdGlvbiB9IGZyb20gJy4uL2R1cmF0aW9uL2NyZWF0ZSc7XG5pbXBvcnQgeyBjcmVhdGVMb2NhbCB9IGZyb20gJy4uL2NyZWF0ZS9sb2NhbCc7XG5pbXBvcnQgeyBpc01vbWVudCB9IGZyb20gJy4uL21vbWVudC9jb25zdHJ1Y3Rvcic7XG5cbmV4cG9ydCBmdW5jdGlvbiB0byh0aW1lLCB3aXRob3V0U3VmZml4KSB7XG4gICAgaWYgKFxuICAgICAgICB0aGlzLmlzVmFsaWQoKSAmJlxuICAgICAgICAoKGlzTW9tZW50KHRpbWUpICYmIHRpbWUuaXNWYWxpZCgpKSB8fCBjcmVhdGVMb2NhbCh0aW1lKS5pc1ZhbGlkKCkpXG4gICAgKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVEdXJhdGlvbih7IGZyb206IHRoaXMsIHRvOiB0aW1lIH0pXG4gICAgICAgICAgICAubG9jYWxlKHRoaXMubG9jYWxlKCkpXG4gICAgICAgICAgICAuaHVtYW5pemUoIXdpdGhvdXRTdWZmaXgpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS5pbnZhbGlkRGF0ZSgpO1xuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRvTm93KHdpdGhvdXRTdWZmaXgpIHtcbiAgICByZXR1cm4gdGhpcy50byhjcmVhdGVMb2NhbCgpLCB3aXRob3V0U3VmZml4KTtcbn1cbiIsImltcG9ydCB7IGdldExvY2FsZSB9IGZyb20gJy4uL2xvY2FsZS9sb2NhbGVzJztcbmltcG9ydCB7IGRlcHJlY2F0ZSB9IGZyb20gJy4uL3V0aWxzL2RlcHJlY2F0ZSc7XG5cbi8vIElmIHBhc3NlZCBhIGxvY2FsZSBrZXksIGl0IHdpbGwgc2V0IHRoZSBsb2NhbGUgZm9yIHRoaXNcbi8vIGluc3RhbmNlLiAgT3RoZXJ3aXNlLCBpdCB3aWxsIHJldHVybiB0aGUgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vIHZhcmlhYmxlcyBmb3IgdGhpcyBpbnN0YW5jZS5cbmV4cG9ydCBmdW5jdGlvbiBsb2NhbGUoa2V5KSB7XG4gICAgdmFyIG5ld0xvY2FsZURhdGE7XG5cbiAgICBpZiAoa2V5ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xvY2FsZS5fYWJicjtcbiAgICB9IGVsc2Uge1xuICAgICAgICBuZXdMb2NhbGVEYXRhID0gZ2V0TG9jYWxlKGtleSk7XG4gICAgICAgIGlmIChuZXdMb2NhbGVEYXRhICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuX2xvY2FsZSA9IG5ld0xvY2FsZURhdGE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxufVxuXG5leHBvcnQgdmFyIGxhbmcgPSBkZXByZWNhdGUoXG4gICAgJ21vbWVudCgpLmxhbmcoKSBpcyBkZXByZWNhdGVkLiBJbnN0ZWFkLCB1c2UgbW9tZW50KCkubG9jYWxlRGF0YSgpIHRvIGdldCB0aGUgbGFuZ3VhZ2UgY29uZmlndXJhdGlvbi4gVXNlIG1vbWVudCgpLmxvY2FsZSgpIHRvIGNoYW5nZSBsYW5ndWFnZXMuJyxcbiAgICBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGlmIChrZXkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlKGtleSk7XG4gICAgICAgIH1cbiAgICB9XG4pO1xuXG5leHBvcnQgZnVuY3Rpb24gbG9jYWxlRGF0YSgpIHtcbiAgICByZXR1cm4gdGhpcy5fbG9jYWxlO1xufVxuIiwiaW1wb3J0IHsgbm9ybWFsaXplVW5pdHMgfSBmcm9tICcuLi91bml0cy9hbGlhc2VzJztcbmltcG9ydCB7IGhvb2tzIH0gZnJvbSAnLi4vdXRpbHMvaG9va3MnO1xuXG52YXIgTVNfUEVSX1NFQ09ORCA9IDEwMDAsXG4gICAgTVNfUEVSX01JTlVURSA9IDYwICogTVNfUEVSX1NFQ09ORCxcbiAgICBNU19QRVJfSE9VUiA9IDYwICogTVNfUEVSX01JTlVURSxcbiAgICBNU19QRVJfNDAwX1lFQVJTID0gKDM2NSAqIDQwMCArIDk3KSAqIDI0ICogTVNfUEVSX0hPVVI7XG5cbi8vIGFjdHVhbCBtb2R1bG8gLSBoYW5kbGVzIG5lZ2F0aXZlIG51bWJlcnMgKGZvciBkYXRlcyBiZWZvcmUgMTk3MCk6XG5mdW5jdGlvbiBtb2QoZGl2aWRlbmQsIGRpdmlzb3IpIHtcbiAgICByZXR1cm4gKChkaXZpZGVuZCAlIGRpdmlzb3IpICsgZGl2aXNvcikgJSBkaXZpc29yO1xufVxuXG5mdW5jdGlvbiBsb2NhbFN0YXJ0T2ZEYXRlKHksIG0sIGQpIHtcbiAgICAvLyB0aGUgZGF0ZSBjb25zdHJ1Y3RvciByZW1hcHMgeWVhcnMgMC05OSB0byAxOTAwLTE5OTlcbiAgICBpZiAoeSA8IDEwMCAmJiB5ID49IDApIHtcbiAgICAgICAgLy8gcHJlc2VydmUgbGVhcCB5ZWFycyB1c2luZyBhIGZ1bGwgNDAwIHllYXIgY3ljbGUsIHRoZW4gcmVzZXRcbiAgICAgICAgcmV0dXJuIG5ldyBEYXRlKHkgKyA0MDAsIG0sIGQpIC0gTVNfUEVSXzQwMF9ZRUFSUztcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbmV3IERhdGUoeSwgbSwgZCkudmFsdWVPZigpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gdXRjU3RhcnRPZkRhdGUoeSwgbSwgZCkge1xuICAgIC8vIERhdGUuVVRDIHJlbWFwcyB5ZWFycyAwLTk5IHRvIDE5MDAtMTk5OVxuICAgIGlmICh5IDwgMTAwICYmIHkgPj0gMCkge1xuICAgICAgICAvLyBwcmVzZXJ2ZSBsZWFwIHllYXJzIHVzaW5nIGEgZnVsbCA0MDAgeWVhciBjeWNsZSwgdGhlbiByZXNldFxuICAgICAgICByZXR1cm4gRGF0ZS5VVEMoeSArIDQwMCwgbSwgZCkgLSBNU19QRVJfNDAwX1lFQVJTO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBEYXRlLlVUQyh5LCBtLCBkKTtcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzdGFydE9mKHVuaXRzKSB7XG4gICAgdmFyIHRpbWUsIHN0YXJ0T2ZEYXRlO1xuICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpO1xuICAgIGlmICh1bml0cyA9PT0gdW5kZWZpbmVkIHx8IHVuaXRzID09PSAnbWlsbGlzZWNvbmQnIHx8ICF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBzdGFydE9mRGF0ZSA9IHRoaXMuX2lzVVRDID8gdXRjU3RhcnRPZkRhdGUgOiBsb2NhbFN0YXJ0T2ZEYXRlO1xuXG4gICAgc3dpdGNoICh1bml0cykge1xuICAgICAgICBjYXNlICd5ZWFyJzpcbiAgICAgICAgICAgIHRpbWUgPSBzdGFydE9mRGF0ZSh0aGlzLnllYXIoKSwgMCwgMSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAncXVhcnRlcic6XG4gICAgICAgICAgICB0aW1lID0gc3RhcnRPZkRhdGUoXG4gICAgICAgICAgICAgICAgdGhpcy55ZWFyKCksXG4gICAgICAgICAgICAgICAgdGhpcy5tb250aCgpIC0gKHRoaXMubW9udGgoKSAlIDMpLFxuICAgICAgICAgICAgICAgIDFcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnbW9udGgnOlxuICAgICAgICAgICAgdGltZSA9IHN0YXJ0T2ZEYXRlKHRoaXMueWVhcigpLCB0aGlzLm1vbnRoKCksIDEpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3dlZWsnOlxuICAgICAgICAgICAgdGltZSA9IHN0YXJ0T2ZEYXRlKFxuICAgICAgICAgICAgICAgIHRoaXMueWVhcigpLFxuICAgICAgICAgICAgICAgIHRoaXMubW9udGgoKSxcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGUoKSAtIHRoaXMud2Vla2RheSgpXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2lzb1dlZWsnOlxuICAgICAgICAgICAgdGltZSA9IHN0YXJ0T2ZEYXRlKFxuICAgICAgICAgICAgICAgIHRoaXMueWVhcigpLFxuICAgICAgICAgICAgICAgIHRoaXMubW9udGgoKSxcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGUoKSAtICh0aGlzLmlzb1dlZWtkYXkoKSAtIDEpXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2RheSc6XG4gICAgICAgIGNhc2UgJ2RhdGUnOlxuICAgICAgICAgICAgdGltZSA9IHN0YXJ0T2ZEYXRlKHRoaXMueWVhcigpLCB0aGlzLm1vbnRoKCksIHRoaXMuZGF0ZSgpKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdob3VyJzpcbiAgICAgICAgICAgIHRpbWUgPSB0aGlzLl9kLnZhbHVlT2YoKTtcbiAgICAgICAgICAgIHRpbWUgLT0gbW9kKFxuICAgICAgICAgICAgICAgIHRpbWUgKyAodGhpcy5faXNVVEMgPyAwIDogdGhpcy51dGNPZmZzZXQoKSAqIE1TX1BFUl9NSU5VVEUpLFxuICAgICAgICAgICAgICAgIE1TX1BFUl9IT1VSXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ21pbnV0ZSc6XG4gICAgICAgICAgICB0aW1lID0gdGhpcy5fZC52YWx1ZU9mKCk7XG4gICAgICAgICAgICB0aW1lIC09IG1vZCh0aW1lLCBNU19QRVJfTUlOVVRFKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdzZWNvbmQnOlxuICAgICAgICAgICAgdGltZSA9IHRoaXMuX2QudmFsdWVPZigpO1xuICAgICAgICAgICAgdGltZSAtPSBtb2QodGltZSwgTVNfUEVSX1NFQ09ORCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICB9XG5cbiAgICB0aGlzLl9kLnNldFRpbWUodGltZSk7XG4gICAgaG9va3MudXBkYXRlT2Zmc2V0KHRoaXMsIHRydWUpO1xuICAgIHJldHVybiB0aGlzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZW5kT2YodW5pdHMpIHtcbiAgICB2YXIgdGltZSwgc3RhcnRPZkRhdGU7XG4gICAgdW5pdHMgPSBub3JtYWxpemVVbml0cyh1bml0cyk7XG4gICAgaWYgKHVuaXRzID09PSB1bmRlZmluZWQgfHwgdW5pdHMgPT09ICdtaWxsaXNlY29uZCcgfHwgIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHN0YXJ0T2ZEYXRlID0gdGhpcy5faXNVVEMgPyB1dGNTdGFydE9mRGF0ZSA6IGxvY2FsU3RhcnRPZkRhdGU7XG5cbiAgICBzd2l0Y2ggKHVuaXRzKSB7XG4gICAgICAgIGNhc2UgJ3llYXInOlxuICAgICAgICAgICAgdGltZSA9IHN0YXJ0T2ZEYXRlKHRoaXMueWVhcigpICsgMSwgMCwgMSkgLSAxO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3F1YXJ0ZXInOlxuICAgICAgICAgICAgdGltZSA9XG4gICAgICAgICAgICAgICAgc3RhcnRPZkRhdGUoXG4gICAgICAgICAgICAgICAgICAgIHRoaXMueWVhcigpLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLm1vbnRoKCkgLSAodGhpcy5tb250aCgpICUgMykgKyAzLFxuICAgICAgICAgICAgICAgICAgICAxXG4gICAgICAgICAgICAgICAgKSAtIDE7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnbW9udGgnOlxuICAgICAgICAgICAgdGltZSA9IHN0YXJ0T2ZEYXRlKHRoaXMueWVhcigpLCB0aGlzLm1vbnRoKCkgKyAxLCAxKSAtIDE7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnd2Vlayc6XG4gICAgICAgICAgICB0aW1lID1cbiAgICAgICAgICAgICAgICBzdGFydE9mRGF0ZShcbiAgICAgICAgICAgICAgICAgICAgdGhpcy55ZWFyKCksXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubW9udGgoKSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRlKCkgLSB0aGlzLndlZWtkYXkoKSArIDdcbiAgICAgICAgICAgICAgICApIC0gMTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdpc29XZWVrJzpcbiAgICAgICAgICAgIHRpbWUgPVxuICAgICAgICAgICAgICAgIHN0YXJ0T2ZEYXRlKFxuICAgICAgICAgICAgICAgICAgICB0aGlzLnllYXIoKSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tb250aCgpLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGUoKSAtICh0aGlzLmlzb1dlZWtkYXkoKSAtIDEpICsgN1xuICAgICAgICAgICAgICAgICkgLSAxO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2RheSc6XG4gICAgICAgIGNhc2UgJ2RhdGUnOlxuICAgICAgICAgICAgdGltZSA9IHN0YXJ0T2ZEYXRlKHRoaXMueWVhcigpLCB0aGlzLm1vbnRoKCksIHRoaXMuZGF0ZSgpICsgMSkgLSAxO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2hvdXInOlxuICAgICAgICAgICAgdGltZSA9IHRoaXMuX2QudmFsdWVPZigpO1xuICAgICAgICAgICAgdGltZSArPVxuICAgICAgICAgICAgICAgIE1TX1BFUl9IT1VSIC1cbiAgICAgICAgICAgICAgICBtb2QoXG4gICAgICAgICAgICAgICAgICAgIHRpbWUgKyAodGhpcy5faXNVVEMgPyAwIDogdGhpcy51dGNPZmZzZXQoKSAqIE1TX1BFUl9NSU5VVEUpLFxuICAgICAgICAgICAgICAgICAgICBNU19QRVJfSE9VUlxuICAgICAgICAgICAgICAgICkgLVxuICAgICAgICAgICAgICAgIDE7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnbWludXRlJzpcbiAgICAgICAgICAgIHRpbWUgPSB0aGlzLl9kLnZhbHVlT2YoKTtcbiAgICAgICAgICAgIHRpbWUgKz0gTVNfUEVSX01JTlVURSAtIG1vZCh0aW1lLCBNU19QRVJfTUlOVVRFKSAtIDE7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnc2Vjb25kJzpcbiAgICAgICAgICAgIHRpbWUgPSB0aGlzLl9kLnZhbHVlT2YoKTtcbiAgICAgICAgICAgIHRpbWUgKz0gTVNfUEVSX1NFQ09ORCAtIG1vZCh0aW1lLCBNU19QRVJfU0VDT05EKSAtIDE7XG4gICAgICAgICAgICBicmVhaztcbiAgICB9XG5cbiAgICB0aGlzLl9kLnNldFRpbWUodGltZSk7XG4gICAgaG9va3MudXBkYXRlT2Zmc2V0KHRoaXMsIHRydWUpO1xuICAgIHJldHVybiB0aGlzO1xufVxuIiwiZXhwb3J0IGZ1bmN0aW9uIHZhbHVlT2YoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2QudmFsdWVPZigpIC0gKHRoaXMuX29mZnNldCB8fCAwKSAqIDYwMDAwO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdW5peCgpIHtcbiAgICByZXR1cm4gTWF0aC5mbG9vcih0aGlzLnZhbHVlT2YoKSAvIDEwMDApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdG9EYXRlKCkge1xuICAgIHJldHVybiBuZXcgRGF0ZSh0aGlzLnZhbHVlT2YoKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0b0FycmF5KCkge1xuICAgIHZhciBtID0gdGhpcztcbiAgICByZXR1cm4gW1xuICAgICAgICBtLnllYXIoKSxcbiAgICAgICAgbS5tb250aCgpLFxuICAgICAgICBtLmRhdGUoKSxcbiAgICAgICAgbS5ob3VyKCksXG4gICAgICAgIG0ubWludXRlKCksXG4gICAgICAgIG0uc2Vjb25kKCksXG4gICAgICAgIG0ubWlsbGlzZWNvbmQoKSxcbiAgICBdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdG9PYmplY3QoKSB7XG4gICAgdmFyIG0gPSB0aGlzO1xuICAgIHJldHVybiB7XG4gICAgICAgIHllYXJzOiBtLnllYXIoKSxcbiAgICAgICAgbW9udGhzOiBtLm1vbnRoKCksXG4gICAgICAgIGRhdGU6IG0uZGF0ZSgpLFxuICAgICAgICBob3VyczogbS5ob3VycygpLFxuICAgICAgICBtaW51dGVzOiBtLm1pbnV0ZXMoKSxcbiAgICAgICAgc2Vjb25kczogbS5zZWNvbmRzKCksXG4gICAgICAgIG1pbGxpc2Vjb25kczogbS5taWxsaXNlY29uZHMoKSxcbiAgICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdG9KU09OKCkge1xuICAgIC8vIG5ldyBEYXRlKE5hTikudG9KU09OKCkgPT09IG51bGxcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkKCkgPyB0aGlzLnRvSVNPU3RyaW5nKCkgOiBudWxsO1xufVxuIiwiaW1wb3J0IHsgaXNWYWxpZCBhcyBfaXNWYWxpZCB9IGZyb20gJy4uL2NyZWF0ZS92YWxpZCc7XG5pbXBvcnQgZXh0ZW5kIGZyb20gJy4uL3V0aWxzL2V4dGVuZCc7XG5pbXBvcnQgZ2V0UGFyc2luZ0ZsYWdzIGZyb20gJy4uL2NyZWF0ZS9wYXJzaW5nLWZsYWdzJztcblxuZXhwb3J0IGZ1bmN0aW9uIGlzVmFsaWQoKSB7XG4gICAgcmV0dXJuIF9pc1ZhbGlkKHRoaXMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2luZ0ZsYWdzKCkge1xuICAgIHJldHVybiBleHRlbmQoe30sIGdldFBhcnNpbmdGbGFncyh0aGlzKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpbnZhbGlkQXQoKSB7XG4gICAgcmV0dXJuIGdldFBhcnNpbmdGbGFncyh0aGlzKS5vdmVyZmxvdztcbn1cbiIsImV4cG9ydCBmdW5jdGlvbiBjcmVhdGlvbkRhdGEoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgaW5wdXQ6IHRoaXMuX2ksXG4gICAgICAgIGZvcm1hdDogdGhpcy5fZixcbiAgICAgICAgbG9jYWxlOiB0aGlzLl9sb2NhbGUsXG4gICAgICAgIGlzVVRDOiB0aGlzLl9pc1VUQyxcbiAgICAgICAgc3RyaWN0OiB0aGlzLl9zdHJpY3QsXG4gICAgfTtcbn1cbiIsImltcG9ydCB7IGFkZEZvcm1hdFRva2VuIH0gZnJvbSAnLi4vZm9ybWF0L2Zvcm1hdCc7XG5pbXBvcnQgeyBhZGRSZWdleFRva2VuLCBtYXRjaFVuc2lnbmVkLCByZWdleEVzY2FwZSB9IGZyb20gJy4uL3BhcnNlL3JlZ2V4JztcbmltcG9ydCB7IGFkZFBhcnNlVG9rZW4gfSBmcm9tICcuLi9wYXJzZS90b2tlbic7XG5pbXBvcnQgeyBZRUFSIH0gZnJvbSAnLi9jb25zdGFudHMnO1xuaW1wb3J0IHsgaG9va3MgYXMgbW9tZW50IH0gZnJvbSAnLi4vdXRpbHMvaG9va3MnO1xuaW1wb3J0IHsgZ2V0TG9jYWxlIH0gZnJvbSAnLi4vbG9jYWxlL2xvY2FsZXMnO1xuaW1wb3J0IGdldFBhcnNpbmdGbGFncyBmcm9tICcuLi9jcmVhdGUvcGFyc2luZy1mbGFncyc7XG5pbXBvcnQgaGFzT3duUHJvcCBmcm9tICcuLi91dGlscy9oYXMtb3duLXByb3AnO1xuXG5hZGRGb3JtYXRUb2tlbignTicsIDAsIDAsICdlcmFBYmJyJyk7XG5hZGRGb3JtYXRUb2tlbignTk4nLCAwLCAwLCAnZXJhQWJicicpO1xuYWRkRm9ybWF0VG9rZW4oJ05OTicsIDAsIDAsICdlcmFBYmJyJyk7XG5hZGRGb3JtYXRUb2tlbignTk5OTicsIDAsIDAsICdlcmFOYW1lJyk7XG5hZGRGb3JtYXRUb2tlbignTk5OTk4nLCAwLCAwLCAnZXJhTmFycm93Jyk7XG5cbmFkZEZvcm1hdFRva2VuKCd5JywgWyd5JywgMV0sICd5bycsICdlcmFZZWFyJyk7XG5hZGRGb3JtYXRUb2tlbigneScsIFsneXknLCAyXSwgMCwgJ2VyYVllYXInKTtcbmFkZEZvcm1hdFRva2VuKCd5JywgWyd5eXknLCAzXSwgMCwgJ2VyYVllYXInKTtcbmFkZEZvcm1hdFRva2VuKCd5JywgWyd5eXl5JywgNF0sIDAsICdlcmFZZWFyJyk7XG5cbmFkZFJlZ2V4VG9rZW4oJ04nLCBtYXRjaEVyYUFiYnIpO1xuYWRkUmVnZXhUb2tlbignTk4nLCBtYXRjaEVyYUFiYnIpO1xuYWRkUmVnZXhUb2tlbignTk5OJywgbWF0Y2hFcmFBYmJyKTtcbmFkZFJlZ2V4VG9rZW4oJ05OTk4nLCBtYXRjaEVyYU5hbWUpO1xuYWRkUmVnZXhUb2tlbignTk5OTk4nLCBtYXRjaEVyYU5hcnJvdyk7XG5cbmFkZFBhcnNlVG9rZW4oXG4gICAgWydOJywgJ05OJywgJ05OTicsICdOTk5OJywgJ05OTk5OJ10sXG4gICAgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnLCB0b2tlbikge1xuICAgICAgICB2YXIgZXJhID0gY29uZmlnLl9sb2NhbGUuZXJhc1BhcnNlKGlucHV0LCB0b2tlbiwgY29uZmlnLl9zdHJpY3QpO1xuICAgICAgICBpZiAoZXJhKSB7XG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5lcmEgPSBlcmE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5pbnZhbGlkRXJhID0gaW5wdXQ7XG4gICAgICAgIH1cbiAgICB9XG4pO1xuXG5hZGRSZWdleFRva2VuKCd5JywgbWF0Y2hVbnNpZ25lZCk7XG5hZGRSZWdleFRva2VuKCd5eScsIG1hdGNoVW5zaWduZWQpO1xuYWRkUmVnZXhUb2tlbigneXl5JywgbWF0Y2hVbnNpZ25lZCk7XG5hZGRSZWdleFRva2VuKCd5eXl5JywgbWF0Y2hVbnNpZ25lZCk7XG5hZGRSZWdleFRva2VuKCd5bycsIG1hdGNoRXJhWWVhck9yZGluYWwpO1xuXG5hZGRQYXJzZVRva2VuKFsneScsICd5eScsICd5eXknLCAneXl5eSddLCBZRUFSKTtcbmFkZFBhcnNlVG9rZW4oWyd5byddLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcsIHRva2VuKSB7XG4gICAgdmFyIG1hdGNoO1xuICAgIGlmIChjb25maWcuX2xvY2FsZS5fZXJhWWVhck9yZGluYWxSZWdleCkge1xuICAgICAgICBtYXRjaCA9IGlucHV0Lm1hdGNoKGNvbmZpZy5fbG9jYWxlLl9lcmFZZWFyT3JkaW5hbFJlZ2V4KTtcbiAgICB9XG5cbiAgICBpZiAoY29uZmlnLl9sb2NhbGUuZXJhWWVhck9yZGluYWxQYXJzZSkge1xuICAgICAgICBhcnJheVtZRUFSXSA9IGNvbmZpZy5fbG9jYWxlLmVyYVllYXJPcmRpbmFsUGFyc2UoaW5wdXQsIG1hdGNoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBhcnJheVtZRUFSXSA9IHBhcnNlSW50KGlucHV0LCAxMCk7XG4gICAgfVxufSk7XG5cbmV4cG9ydCBmdW5jdGlvbiBsb2NhbGVFcmFzKG0sIGZvcm1hdCkge1xuICAgIHZhciBpLFxuICAgICAgICBsLFxuICAgICAgICBkYXRlLFxuICAgICAgICBlcmFzID0gdGhpcy5fZXJhcyB8fCBnZXRMb2NhbGUoJ2VuJykuX2VyYXM7XG4gICAgZm9yIChpID0gMCwgbCA9IGVyYXMubGVuZ3RoOyBpIDwgbDsgKytpKSB7XG4gICAgICAgIHN3aXRjaCAodHlwZW9mIGVyYXNbaV0uc2luY2UpIHtcbiAgICAgICAgICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICAgICAgICAgICAgLy8gdHJ1bmNhdGUgdGltZVxuICAgICAgICAgICAgICAgIGRhdGUgPSBtb21lbnQoZXJhc1tpXS5zaW5jZSkuc3RhcnRPZignZGF5Jyk7XG4gICAgICAgICAgICAgICAgZXJhc1tpXS5zaW5jZSA9IGRhdGUudmFsdWVPZigpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgc3dpdGNoICh0eXBlb2YgZXJhc1tpXS51bnRpbCkge1xuICAgICAgICAgICAgY2FzZSAndW5kZWZpbmVkJzpcbiAgICAgICAgICAgICAgICBlcmFzW2ldLnVudGlsID0gK0luZmluaXR5O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgICAgICAgICAgICAvLyB0cnVuY2F0ZSB0aW1lXG4gICAgICAgICAgICAgICAgZGF0ZSA9IG1vbWVudChlcmFzW2ldLnVudGlsKS5zdGFydE9mKCdkYXknKS52YWx1ZU9mKCk7XG4gICAgICAgICAgICAgICAgZXJhc1tpXS51bnRpbCA9IGRhdGUudmFsdWVPZigpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBlcmFzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbG9jYWxlRXJhc1BhcnNlKGVyYU5hbWUsIGZvcm1hdCwgc3RyaWN0KSB7XG4gICAgdmFyIGksXG4gICAgICAgIGwsXG4gICAgICAgIGVyYXMgPSB0aGlzLmVyYXMoKSxcbiAgICAgICAgbmFtZSxcbiAgICAgICAgYWJicixcbiAgICAgICAgbmFycm93O1xuICAgIGVyYU5hbWUgPSBlcmFOYW1lLnRvVXBwZXJDYXNlKCk7XG5cbiAgICBmb3IgKGkgPSAwLCBsID0gZXJhcy5sZW5ndGg7IGkgPCBsOyArK2kpIHtcbiAgICAgICAgbmFtZSA9IGVyYXNbaV0ubmFtZS50b1VwcGVyQ2FzZSgpO1xuICAgICAgICBhYmJyID0gZXJhc1tpXS5hYmJyLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgIG5hcnJvdyA9IGVyYXNbaV0ubmFycm93LnRvVXBwZXJDYXNlKCk7XG5cbiAgICAgICAgaWYgKHN0cmljdCkge1xuICAgICAgICAgICAgc3dpdGNoIChmb3JtYXQpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdOJzpcbiAgICAgICAgICAgICAgICBjYXNlICdOTic6XG4gICAgICAgICAgICAgICAgY2FzZSAnTk5OJzpcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFiYnIgPT09IGVyYU5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlcmFzW2ldO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSAnTk5OTic6XG4gICAgICAgICAgICAgICAgICAgIGlmIChuYW1lID09PSBlcmFOYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXJhc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgJ05OTk5OJzpcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5hcnJvdyA9PT0gZXJhTmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVyYXNbaV07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoW25hbWUsIGFiYnIsIG5hcnJvd10uaW5kZXhPZihlcmFOYW1lKSA+PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gZXJhc1tpXTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGxvY2FsZUVyYXNDb252ZXJ0WWVhcihlcmEsIHllYXIpIHtcbiAgICB2YXIgZGlyID0gZXJhLnNpbmNlIDw9IGVyYS51bnRpbCA/ICsxIDogLTE7XG4gICAgaWYgKHllYXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gbW9tZW50KGVyYS5zaW5jZSkueWVhcigpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBtb21lbnQoZXJhLnNpbmNlKS55ZWFyKCkgKyAoeWVhciAtIGVyYS5vZmZzZXQpICogZGlyO1xuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEVyYU5hbWUoKSB7XG4gICAgdmFyIGksXG4gICAgICAgIGwsXG4gICAgICAgIHZhbCxcbiAgICAgICAgZXJhcyA9IHRoaXMubG9jYWxlRGF0YSgpLmVyYXMoKTtcbiAgICBmb3IgKGkgPSAwLCBsID0gZXJhcy5sZW5ndGg7IGkgPCBsOyArK2kpIHtcbiAgICAgICAgLy8gdHJ1bmNhdGUgdGltZVxuICAgICAgICB2YWwgPSB0aGlzLmNsb25lKCkuc3RhcnRPZignZGF5JykudmFsdWVPZigpO1xuXG4gICAgICAgIGlmIChlcmFzW2ldLnNpbmNlIDw9IHZhbCAmJiB2YWwgPD0gZXJhc1tpXS51bnRpbCkge1xuICAgICAgICAgICAgcmV0dXJuIGVyYXNbaV0ubmFtZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXJhc1tpXS51bnRpbCA8PSB2YWwgJiYgdmFsIDw9IGVyYXNbaV0uc2luY2UpIHtcbiAgICAgICAgICAgIHJldHVybiBlcmFzW2ldLm5hbWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gJyc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRFcmFOYXJyb3coKSB7XG4gICAgdmFyIGksXG4gICAgICAgIGwsXG4gICAgICAgIHZhbCxcbiAgICAgICAgZXJhcyA9IHRoaXMubG9jYWxlRGF0YSgpLmVyYXMoKTtcbiAgICBmb3IgKGkgPSAwLCBsID0gZXJhcy5sZW5ndGg7IGkgPCBsOyArK2kpIHtcbiAgICAgICAgLy8gdHJ1bmNhdGUgdGltZVxuICAgICAgICB2YWwgPSB0aGlzLmNsb25lKCkuc3RhcnRPZignZGF5JykudmFsdWVPZigpO1xuXG4gICAgICAgIGlmIChlcmFzW2ldLnNpbmNlIDw9IHZhbCAmJiB2YWwgPD0gZXJhc1tpXS51bnRpbCkge1xuICAgICAgICAgICAgcmV0dXJuIGVyYXNbaV0ubmFycm93O1xuICAgICAgICB9XG4gICAgICAgIGlmIChlcmFzW2ldLnVudGlsIDw9IHZhbCAmJiB2YWwgPD0gZXJhc1tpXS5zaW5jZSkge1xuICAgICAgICAgICAgcmV0dXJuIGVyYXNbaV0ubmFycm93O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuICcnO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0RXJhQWJicigpIHtcbiAgICB2YXIgaSxcbiAgICAgICAgbCxcbiAgICAgICAgdmFsLFxuICAgICAgICBlcmFzID0gdGhpcy5sb2NhbGVEYXRhKCkuZXJhcygpO1xuICAgIGZvciAoaSA9IDAsIGwgPSBlcmFzLmxlbmd0aDsgaSA8IGw7ICsraSkge1xuICAgICAgICAvLyB0cnVuY2F0ZSB0aW1lXG4gICAgICAgIHZhbCA9IHRoaXMuY2xvbmUoKS5zdGFydE9mKCdkYXknKS52YWx1ZU9mKCk7XG5cbiAgICAgICAgaWYgKGVyYXNbaV0uc2luY2UgPD0gdmFsICYmIHZhbCA8PSBlcmFzW2ldLnVudGlsKSB7XG4gICAgICAgICAgICByZXR1cm4gZXJhc1tpXS5hYmJyO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlcmFzW2ldLnVudGlsIDw9IHZhbCAmJiB2YWwgPD0gZXJhc1tpXS5zaW5jZSkge1xuICAgICAgICAgICAgcmV0dXJuIGVyYXNbaV0uYWJicjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiAnJztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEVyYVllYXIoKSB7XG4gICAgdmFyIGksXG4gICAgICAgIGwsXG4gICAgICAgIGRpcixcbiAgICAgICAgdmFsLFxuICAgICAgICBlcmFzID0gdGhpcy5sb2NhbGVEYXRhKCkuZXJhcygpO1xuICAgIGZvciAoaSA9IDAsIGwgPSBlcmFzLmxlbmd0aDsgaSA8IGw7ICsraSkge1xuICAgICAgICBkaXIgPSBlcmFzW2ldLnNpbmNlIDw9IGVyYXNbaV0udW50aWwgPyArMSA6IC0xO1xuXG4gICAgICAgIC8vIHRydW5jYXRlIHRpbWVcbiAgICAgICAgdmFsID0gdGhpcy5jbG9uZSgpLnN0YXJ0T2YoJ2RheScpLnZhbHVlT2YoKTtcblxuICAgICAgICBpZiAoXG4gICAgICAgICAgICAoZXJhc1tpXS5zaW5jZSA8PSB2YWwgJiYgdmFsIDw9IGVyYXNbaV0udW50aWwpIHx8XG4gICAgICAgICAgICAoZXJhc1tpXS51bnRpbCA8PSB2YWwgJiYgdmFsIDw9IGVyYXNbaV0uc2luY2UpXG4gICAgICAgICkge1xuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAodGhpcy55ZWFyKCkgLSBtb21lbnQoZXJhc1tpXS5zaW5jZSkueWVhcigpKSAqIGRpciArXG4gICAgICAgICAgICAgICAgZXJhc1tpXS5vZmZzZXRcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy55ZWFyKCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBlcmFzTmFtZVJlZ2V4KGlzU3RyaWN0KSB7XG4gICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfZXJhc05hbWVSZWdleCcpKSB7XG4gICAgICAgIGNvbXB1dGVFcmFzUGFyc2UuY2FsbCh0aGlzKTtcbiAgICB9XG4gICAgcmV0dXJuIGlzU3RyaWN0ID8gdGhpcy5fZXJhc05hbWVSZWdleCA6IHRoaXMuX2VyYXNSZWdleDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGVyYXNBYmJyUmVnZXgoaXNTdHJpY3QpIHtcbiAgICBpZiAoIWhhc093blByb3AodGhpcywgJ19lcmFzQWJiclJlZ2V4JykpIHtcbiAgICAgICAgY29tcHV0ZUVyYXNQYXJzZS5jYWxsKHRoaXMpO1xuICAgIH1cbiAgICByZXR1cm4gaXNTdHJpY3QgPyB0aGlzLl9lcmFzQWJiclJlZ2V4IDogdGhpcy5fZXJhc1JlZ2V4O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZXJhc05hcnJvd1JlZ2V4KGlzU3RyaWN0KSB7XG4gICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfZXJhc05hcnJvd1JlZ2V4JykpIHtcbiAgICAgICAgY29tcHV0ZUVyYXNQYXJzZS5jYWxsKHRoaXMpO1xuICAgIH1cbiAgICByZXR1cm4gaXNTdHJpY3QgPyB0aGlzLl9lcmFzTmFycm93UmVnZXggOiB0aGlzLl9lcmFzUmVnZXg7XG59XG5cbmZ1bmN0aW9uIG1hdGNoRXJhQWJicihpc1N0cmljdCwgbG9jYWxlKSB7XG4gICAgcmV0dXJuIGxvY2FsZS5lcmFzQWJiclJlZ2V4KGlzU3RyaWN0KTtcbn1cblxuZnVuY3Rpb24gbWF0Y2hFcmFOYW1lKGlzU3RyaWN0LCBsb2NhbGUpIHtcbiAgICByZXR1cm4gbG9jYWxlLmVyYXNOYW1lUmVnZXgoaXNTdHJpY3QpO1xufVxuXG5mdW5jdGlvbiBtYXRjaEVyYU5hcnJvdyhpc1N0cmljdCwgbG9jYWxlKSB7XG4gICAgcmV0dXJuIGxvY2FsZS5lcmFzTmFycm93UmVnZXgoaXNTdHJpY3QpO1xufVxuXG5mdW5jdGlvbiBtYXRjaEVyYVllYXJPcmRpbmFsKGlzU3RyaWN0LCBsb2NhbGUpIHtcbiAgICByZXR1cm4gbG9jYWxlLl9lcmFZZWFyT3JkaW5hbFJlZ2V4IHx8IG1hdGNoVW5zaWduZWQ7XG59XG5cbmZ1bmN0aW9uIGNvbXB1dGVFcmFzUGFyc2UoKSB7XG4gICAgdmFyIGFiYnJQaWVjZXMgPSBbXSxcbiAgICAgICAgbmFtZVBpZWNlcyA9IFtdLFxuICAgICAgICBuYXJyb3dQaWVjZXMgPSBbXSxcbiAgICAgICAgbWl4ZWRQaWVjZXMgPSBbXSxcbiAgICAgICAgaSxcbiAgICAgICAgbCxcbiAgICAgICAgZXJhc05hbWUsXG4gICAgICAgIGVyYXNBYmJyLFxuICAgICAgICBlcmFzTmFycm93LFxuICAgICAgICBlcmFzID0gdGhpcy5lcmFzKCk7XG5cbiAgICBmb3IgKGkgPSAwLCBsID0gZXJhcy5sZW5ndGg7IGkgPCBsOyArK2kpIHtcbiAgICAgICAgZXJhc05hbWUgPSByZWdleEVzY2FwZShlcmFzW2ldLm5hbWUpO1xuICAgICAgICBlcmFzQWJiciA9IHJlZ2V4RXNjYXBlKGVyYXNbaV0uYWJicik7XG4gICAgICAgIGVyYXNOYXJyb3cgPSByZWdleEVzY2FwZShlcmFzW2ldLm5hcnJvdyk7XG5cbiAgICAgICAgbmFtZVBpZWNlcy5wdXNoKGVyYXNOYW1lKTtcbiAgICAgICAgYWJiclBpZWNlcy5wdXNoKGVyYXNBYmJyKTtcbiAgICAgICAgbmFycm93UGllY2VzLnB1c2goZXJhc05hcnJvdyk7XG4gICAgICAgIG1peGVkUGllY2VzLnB1c2goZXJhc05hbWUpO1xuICAgICAgICBtaXhlZFBpZWNlcy5wdXNoKGVyYXNBYmJyKTtcbiAgICAgICAgbWl4ZWRQaWVjZXMucHVzaChlcmFzTmFycm93KTtcbiAgICB9XG5cbiAgICB0aGlzLl9lcmFzUmVnZXggPSBuZXcgUmVnRXhwKCdeKCcgKyBtaXhlZFBpZWNlcy5qb2luKCd8JykgKyAnKScsICdpJyk7XG4gICAgdGhpcy5fZXJhc05hbWVSZWdleCA9IG5ldyBSZWdFeHAoJ14oJyArIG5hbWVQaWVjZXMuam9pbignfCcpICsgJyknLCAnaScpO1xuICAgIHRoaXMuX2VyYXNBYmJyUmVnZXggPSBuZXcgUmVnRXhwKCdeKCcgKyBhYmJyUGllY2VzLmpvaW4oJ3wnKSArICcpJywgJ2knKTtcbiAgICB0aGlzLl9lcmFzTmFycm93UmVnZXggPSBuZXcgUmVnRXhwKFxuICAgICAgICAnXignICsgbmFycm93UGllY2VzLmpvaW4oJ3wnKSArICcpJyxcbiAgICAgICAgJ2knXG4gICAgKTtcbn1cbiIsImltcG9ydCB7IGFkZEZvcm1hdFRva2VuIH0gZnJvbSAnLi4vZm9ybWF0L2Zvcm1hdCc7XG5pbXBvcnQge1xuICAgIGFkZFJlZ2V4VG9rZW4sXG4gICAgbWF0Y2gxdG8yLFxuICAgIG1hdGNoMXRvNCxcbiAgICBtYXRjaDF0bzYsXG4gICAgbWF0Y2gyLFxuICAgIG1hdGNoNCxcbiAgICBtYXRjaDYsXG4gICAgbWF0Y2hTaWduZWQsXG59IGZyb20gJy4uL3BhcnNlL3JlZ2V4JztcbmltcG9ydCB7IGFkZFdlZWtQYXJzZVRva2VuIH0gZnJvbSAnLi4vcGFyc2UvdG9rZW4nO1xuaW1wb3J0IHtcbiAgICB3ZWVrT2ZZZWFyLFxuICAgIHdlZWtzSW5ZZWFyLFxuICAgIGRheU9mWWVhckZyb21XZWVrcyxcbn0gZnJvbSAnLi93ZWVrLWNhbGVuZGFyLXV0aWxzJztcbmltcG9ydCB0b0ludCBmcm9tICcuLi91dGlscy90by1pbnQnO1xuaW1wb3J0IHsgaG9va3MgfSBmcm9tICcuLi91dGlscy9ob29rcyc7XG5pbXBvcnQgeyBjcmVhdGVVVENEYXRlIH0gZnJvbSAnLi4vY3JlYXRlL2RhdGUtZnJvbS1hcnJheSc7XG5cbi8vIEZPUk1BVFRJTkdcblxuYWRkRm9ybWF0VG9rZW4oMCwgWydnZycsIDJdLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMud2Vla1llYXIoKSAlIDEwMDtcbn0pO1xuXG5hZGRGb3JtYXRUb2tlbigwLCBbJ0dHJywgMl0sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5pc29XZWVrWWVhcigpICUgMTAwO1xufSk7XG5cbmZ1bmN0aW9uIGFkZFdlZWtZZWFyRm9ybWF0VG9rZW4odG9rZW4sIGdldHRlcikge1xuICAgIGFkZEZvcm1hdFRva2VuKDAsIFt0b2tlbiwgdG9rZW4ubGVuZ3RoXSwgMCwgZ2V0dGVyKTtcbn1cblxuYWRkV2Vla1llYXJGb3JtYXRUb2tlbignZ2dnZycsICd3ZWVrWWVhcicpO1xuYWRkV2Vla1llYXJGb3JtYXRUb2tlbignZ2dnZ2cnLCAnd2Vla1llYXInKTtcbmFkZFdlZWtZZWFyRm9ybWF0VG9rZW4oJ0dHR0cnLCAnaXNvV2Vla1llYXInKTtcbmFkZFdlZWtZZWFyRm9ybWF0VG9rZW4oJ0dHR0dHJywgJ2lzb1dlZWtZZWFyJyk7XG5cbi8vIEFMSUFTRVNcblxuLy8gUEFSU0lOR1xuXG5hZGRSZWdleFRva2VuKCdHJywgbWF0Y2hTaWduZWQpO1xuYWRkUmVnZXhUb2tlbignZycsIG1hdGNoU2lnbmVkKTtcbmFkZFJlZ2V4VG9rZW4oJ0dHJywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuYWRkUmVnZXhUb2tlbignZ2cnLCBtYXRjaDF0bzIsIG1hdGNoMik7XG5hZGRSZWdleFRva2VuKCdHR0dHJywgbWF0Y2gxdG80LCBtYXRjaDQpO1xuYWRkUmVnZXhUb2tlbignZ2dnZycsIG1hdGNoMXRvNCwgbWF0Y2g0KTtcbmFkZFJlZ2V4VG9rZW4oJ0dHR0dHJywgbWF0Y2gxdG82LCBtYXRjaDYpO1xuYWRkUmVnZXhUb2tlbignZ2dnZ2cnLCBtYXRjaDF0bzYsIG1hdGNoNik7XG5cbmFkZFdlZWtQYXJzZVRva2VuKFxuICAgIFsnZ2dnZycsICdnZ2dnZycsICdHR0dHJywgJ0dHR0dHJ10sXG4gICAgZnVuY3Rpb24gKGlucHV0LCB3ZWVrLCBjb25maWcsIHRva2VuKSB7XG4gICAgICAgIHdlZWtbdG9rZW4uc3Vic3RyKDAsIDIpXSA9IHRvSW50KGlucHV0KTtcbiAgICB9XG4pO1xuXG5hZGRXZWVrUGFyc2VUb2tlbihbJ2dnJywgJ0dHJ10sIGZ1bmN0aW9uIChpbnB1dCwgd2VlaywgY29uZmlnLCB0b2tlbikge1xuICAgIHdlZWtbdG9rZW5dID0gaG9va3MucGFyc2VUd29EaWdpdFllYXIoaW5wdXQpO1xufSk7XG5cbi8vIE1PTUVOVFNcblxuZXhwb3J0IGZ1bmN0aW9uIGdldFNldFdlZWtZZWFyKGlucHV0KSB7XG4gICAgcmV0dXJuIGdldFNldFdlZWtZZWFySGVscGVyLmNhbGwoXG4gICAgICAgIHRoaXMsXG4gICAgICAgIGlucHV0LFxuICAgICAgICB0aGlzLndlZWsoKSxcbiAgICAgICAgdGhpcy53ZWVrZGF5KCkgKyB0aGlzLmxvY2FsZURhdGEoKS5fd2Vlay5kb3csXG4gICAgICAgIHRoaXMubG9jYWxlRGF0YSgpLl93ZWVrLmRvdyxcbiAgICAgICAgdGhpcy5sb2NhbGVEYXRhKCkuX3dlZWsuZG95XG4gICAgKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFNldElTT1dlZWtZZWFyKGlucHV0KSB7XG4gICAgcmV0dXJuIGdldFNldFdlZWtZZWFySGVscGVyLmNhbGwoXG4gICAgICAgIHRoaXMsXG4gICAgICAgIGlucHV0LFxuICAgICAgICB0aGlzLmlzb1dlZWsoKSxcbiAgICAgICAgdGhpcy5pc29XZWVrZGF5KCksXG4gICAgICAgIDEsXG4gICAgICAgIDRcbiAgICApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0SVNPV2Vla3NJblllYXIoKSB7XG4gICAgcmV0dXJuIHdlZWtzSW5ZZWFyKHRoaXMueWVhcigpLCAxLCA0KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldElTT1dlZWtzSW5JU09XZWVrWWVhcigpIHtcbiAgICByZXR1cm4gd2Vla3NJblllYXIodGhpcy5pc29XZWVrWWVhcigpLCAxLCA0KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFdlZWtzSW5ZZWFyKCkge1xuICAgIHZhciB3ZWVrSW5mbyA9IHRoaXMubG9jYWxlRGF0YSgpLl93ZWVrO1xuICAgIHJldHVybiB3ZWVrc0luWWVhcih0aGlzLnllYXIoKSwgd2Vla0luZm8uZG93LCB3ZWVrSW5mby5kb3kpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0V2Vla3NJbldlZWtZZWFyKCkge1xuICAgIHZhciB3ZWVrSW5mbyA9IHRoaXMubG9jYWxlRGF0YSgpLl93ZWVrO1xuICAgIHJldHVybiB3ZWVrc0luWWVhcih0aGlzLndlZWtZZWFyKCksIHdlZWtJbmZvLmRvdywgd2Vla0luZm8uZG95KTtcbn1cblxuZnVuY3Rpb24gZ2V0U2V0V2Vla1llYXJIZWxwZXIoaW5wdXQsIHdlZWssIHdlZWtkYXksIGRvdywgZG95KSB7XG4gICAgdmFyIHdlZWtzVGFyZ2V0O1xuICAgIGlmIChpbnB1dCA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiB3ZWVrT2ZZZWFyKHRoaXMsIGRvdywgZG95KS55ZWFyO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHdlZWtzVGFyZ2V0ID0gd2Vla3NJblllYXIoaW5wdXQsIGRvdywgZG95KTtcbiAgICAgICAgaWYgKHdlZWsgPiB3ZWVrc1RhcmdldCkge1xuICAgICAgICAgICAgd2VlayA9IHdlZWtzVGFyZ2V0O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzZXRXZWVrQWxsLmNhbGwodGhpcywgaW5wdXQsIHdlZWssIHdlZWtkYXksIGRvdywgZG95KTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHNldFdlZWtBbGwod2Vla1llYXIsIHdlZWssIHdlZWtkYXksIGRvdywgZG95KSB7XG4gICAgdmFyIGRheU9mWWVhckRhdGEgPSBkYXlPZlllYXJGcm9tV2Vla3Mod2Vla1llYXIsIHdlZWssIHdlZWtkYXksIGRvdywgZG95KSxcbiAgICAgICAgZGF0ZSA9IGNyZWF0ZVVUQ0RhdGUoZGF5T2ZZZWFyRGF0YS55ZWFyLCAwLCBkYXlPZlllYXJEYXRhLmRheU9mWWVhcik7XG5cbiAgICB0aGlzLnllYXIoZGF0ZS5nZXRVVENGdWxsWWVhcigpKTtcbiAgICB0aGlzLm1vbnRoKGRhdGUuZ2V0VVRDTW9udGgoKSk7XG4gICAgdGhpcy5kYXRlKGRhdGUuZ2V0VVRDRGF0ZSgpKTtcbiAgICByZXR1cm4gdGhpcztcbn1cbiIsImltcG9ydCB7IGFkZEZvcm1hdFRva2VuIH0gZnJvbSAnLi4vZm9ybWF0L2Zvcm1hdCc7XG5pbXBvcnQgeyBhZGRSZWdleFRva2VuLCBtYXRjaDEgfSBmcm9tICcuLi9wYXJzZS9yZWdleCc7XG5pbXBvcnQgeyBhZGRQYXJzZVRva2VuIH0gZnJvbSAnLi4vcGFyc2UvdG9rZW4nO1xuaW1wb3J0IHsgTU9OVEggfSBmcm9tICcuL2NvbnN0YW50cyc7XG5pbXBvcnQgdG9JbnQgZnJvbSAnLi4vdXRpbHMvdG8taW50JztcblxuLy8gRk9STUFUVElOR1xuXG5hZGRGb3JtYXRUb2tlbignUScsIDAsICdRbycsICdxdWFydGVyJyk7XG5cbi8vIFBBUlNJTkdcblxuYWRkUmVnZXhUb2tlbignUScsIG1hdGNoMSk7XG5hZGRQYXJzZVRva2VuKCdRJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSkge1xuICAgIGFycmF5W01PTlRIXSA9ICh0b0ludChpbnB1dCkgLSAxKSAqIDM7XG59KTtcblxuLy8gTU9NRU5UU1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0U2V0UXVhcnRlcihpbnB1dCkge1xuICAgIHJldHVybiBpbnB1dCA9PSBudWxsXG4gICAgICAgID8gTWF0aC5jZWlsKCh0aGlzLm1vbnRoKCkgKyAxKSAvIDMpXG4gICAgICAgIDogdGhpcy5tb250aCgoaW5wdXQgLSAxKSAqIDMgKyAodGhpcy5tb250aCgpICUgMykpO1xufVxuIiwiaW1wb3J0IHsgbWFrZUdldFNldCB9IGZyb20gJy4uL21vbWVudC9nZXQtc2V0JztcbmltcG9ydCB7IGFkZEZvcm1hdFRva2VuIH0gZnJvbSAnLi4vZm9ybWF0L2Zvcm1hdCc7XG5pbXBvcnQge1xuICAgIGFkZFJlZ2V4VG9rZW4sXG4gICAgbWF0Y2gxdG8yLFxuICAgIG1hdGNoMixcbiAgICBtYXRjaDF0bzJOb0xlYWRpbmdaZXJvLFxufSBmcm9tICcuLi9wYXJzZS9yZWdleCc7XG5pbXBvcnQgeyBhZGRQYXJzZVRva2VuIH0gZnJvbSAnLi4vcGFyc2UvdG9rZW4nO1xuaW1wb3J0IHsgREFURSB9IGZyb20gJy4vY29uc3RhbnRzJztcbmltcG9ydCB0b0ludCBmcm9tICcuLi91dGlscy90by1pbnQnO1xuXG4vLyBGT1JNQVRUSU5HXG5cbmFkZEZvcm1hdFRva2VuKCdEJywgWydERCcsIDJdLCAnRG8nLCAnZGF0ZScpO1xuXG4vLyBQQVJTSU5HXG5cbmFkZFJlZ2V4VG9rZW4oJ0QnLCBtYXRjaDF0bzIsIG1hdGNoMXRvMk5vTGVhZGluZ1plcm8pO1xuYWRkUmVnZXhUb2tlbignREQnLCBtYXRjaDF0bzIsIG1hdGNoMik7XG5hZGRSZWdleFRva2VuKCdEbycsIGZ1bmN0aW9uIChpc1N0cmljdCwgbG9jYWxlKSB7XG4gICAgLy8gVE9ETzogUmVtb3ZlIFwib3JkaW5hbFBhcnNlXCIgZmFsbGJhY2sgaW4gbmV4dCBtYWpvciByZWxlYXNlLlxuICAgIHJldHVybiBpc1N0cmljdFxuICAgICAgICA/IGxvY2FsZS5fZGF5T2ZNb250aE9yZGluYWxQYXJzZSB8fCBsb2NhbGUuX29yZGluYWxQYXJzZVxuICAgICAgICA6IGxvY2FsZS5fZGF5T2ZNb250aE9yZGluYWxQYXJzZUxlbmllbnQ7XG59KTtcblxuYWRkUGFyc2VUb2tlbihbJ0QnLCAnREQnXSwgREFURSk7XG5hZGRQYXJzZVRva2VuKCdEbycsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXkpIHtcbiAgICBhcnJheVtEQVRFXSA9IHRvSW50KGlucHV0Lm1hdGNoKG1hdGNoMXRvMilbMF0pO1xufSk7XG5cbi8vIE1PTUVOVFNcblxuZXhwb3J0IHZhciBnZXRTZXREYXlPZk1vbnRoID0gbWFrZUdldFNldCgnRGF0ZScsIHRydWUpO1xuIiwiaW1wb3J0IHsgYWRkRm9ybWF0VG9rZW4gfSBmcm9tICcuLi9mb3JtYXQvZm9ybWF0JztcbmltcG9ydCB7IGFkZFJlZ2V4VG9rZW4sIG1hdGNoMywgbWF0Y2gxdG8zIH0gZnJvbSAnLi4vcGFyc2UvcmVnZXgnO1xuaW1wb3J0IHsgYWRkUGFyc2VUb2tlbiB9IGZyb20gJy4uL3BhcnNlL3Rva2VuJztcbmltcG9ydCB0b0ludCBmcm9tICcuLi91dGlscy90by1pbnQnO1xuXG4vLyBGT1JNQVRUSU5HXG5cbmFkZEZvcm1hdFRva2VuKCdEREQnLCBbJ0REREQnLCAzXSwgJ0RERG8nLCAnZGF5T2ZZZWFyJyk7XG5cbi8vIFBBUlNJTkdcblxuYWRkUmVnZXhUb2tlbignREREJywgbWF0Y2gxdG8zKTtcbmFkZFJlZ2V4VG9rZW4oJ0REREQnLCBtYXRjaDMpO1xuYWRkUGFyc2VUb2tlbihbJ0RERCcsICdEREREJ10sIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgIGNvbmZpZy5fZGF5T2ZZZWFyID0gdG9JbnQoaW5wdXQpO1xufSk7XG5cbi8vIEhFTFBFUlNcblxuLy8gTU9NRU5UU1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0U2V0RGF5T2ZZZWFyKGlucHV0KSB7XG4gICAgdmFyIGRheU9mWWVhciA9XG4gICAgICAgIE1hdGgucm91bmQoXG4gICAgICAgICAgICAodGhpcy5jbG9uZSgpLnN0YXJ0T2YoJ2RheScpIC0gdGhpcy5jbG9uZSgpLnN0YXJ0T2YoJ3llYXInKSkgLyA4NjRlNVxuICAgICAgICApICsgMTtcbiAgICByZXR1cm4gaW5wdXQgPT0gbnVsbCA/IGRheU9mWWVhciA6IHRoaXMuYWRkKGlucHV0IC0gZGF5T2ZZZWFyLCAnZCcpO1xufVxuIiwiaW1wb3J0IHsgbWFrZUdldFNldCB9IGZyb20gJy4uL21vbWVudC9nZXQtc2V0JztcbmltcG9ydCB7IGFkZEZvcm1hdFRva2VuIH0gZnJvbSAnLi4vZm9ybWF0L2Zvcm1hdCc7XG5pbXBvcnQge1xuICAgIGFkZFJlZ2V4VG9rZW4sXG4gICAgbWF0Y2gxdG8yLFxuICAgIG1hdGNoMixcbiAgICBtYXRjaDF0bzJIYXNaZXJvLFxufSBmcm9tICcuLi9wYXJzZS9yZWdleCc7XG5pbXBvcnQgeyBhZGRQYXJzZVRva2VuIH0gZnJvbSAnLi4vcGFyc2UvdG9rZW4nO1xuaW1wb3J0IHsgTUlOVVRFIH0gZnJvbSAnLi9jb25zdGFudHMnO1xuXG4vLyBGT1JNQVRUSU5HXG5cbmFkZEZvcm1hdFRva2VuKCdtJywgWydtbScsIDJdLCAwLCAnbWludXRlJyk7XG5cbi8vIFBBUlNJTkdcblxuYWRkUmVnZXhUb2tlbignbScsIG1hdGNoMXRvMiwgbWF0Y2gxdG8ySGFzWmVybyk7XG5hZGRSZWdleFRva2VuKCdtbScsIG1hdGNoMXRvMiwgbWF0Y2gyKTtcbmFkZFBhcnNlVG9rZW4oWydtJywgJ21tJ10sIE1JTlVURSk7XG5cbi8vIE1PTUVOVFNcblxuZXhwb3J0IHZhciBnZXRTZXRNaW51dGUgPSBtYWtlR2V0U2V0KCdNaW51dGVzJywgZmFsc2UpO1xuIiwiaW1wb3J0IHsgbWFrZUdldFNldCB9IGZyb20gJy4uL21vbWVudC9nZXQtc2V0JztcbmltcG9ydCB7IGFkZEZvcm1hdFRva2VuIH0gZnJvbSAnLi4vZm9ybWF0L2Zvcm1hdCc7XG5pbXBvcnQge1xuICAgIGFkZFJlZ2V4VG9rZW4sXG4gICAgbWF0Y2gxdG8yLFxuICAgIG1hdGNoMixcbiAgICBtYXRjaDF0bzJIYXNaZXJvLFxufSBmcm9tICcuLi9wYXJzZS9yZWdleCc7XG5pbXBvcnQgeyBhZGRQYXJzZVRva2VuIH0gZnJvbSAnLi4vcGFyc2UvdG9rZW4nO1xuaW1wb3J0IHsgU0VDT05EIH0gZnJvbSAnLi9jb25zdGFudHMnO1xuXG4vLyBGT1JNQVRUSU5HXG5cbmFkZEZvcm1hdFRva2VuKCdzJywgWydzcycsIDJdLCAwLCAnc2Vjb25kJyk7XG5cbi8vIFBBUlNJTkdcblxuYWRkUmVnZXhUb2tlbigncycsIG1hdGNoMXRvMiwgbWF0Y2gxdG8ySGFzWmVybyk7XG5hZGRSZWdleFRva2VuKCdzcycsIG1hdGNoMXRvMiwgbWF0Y2gyKTtcbmFkZFBhcnNlVG9rZW4oWydzJywgJ3NzJ10sIFNFQ09ORCk7XG5cbi8vIE1PTUVOVFNcblxuZXhwb3J0IHZhciBnZXRTZXRTZWNvbmQgPSBtYWtlR2V0U2V0KCdTZWNvbmRzJywgZmFsc2UpO1xuIiwiaW1wb3J0IHsgbWFrZUdldFNldCB9IGZyb20gJy4uL21vbWVudC9nZXQtc2V0JztcbmltcG9ydCB7IGFkZEZvcm1hdFRva2VuIH0gZnJvbSAnLi4vZm9ybWF0L2Zvcm1hdCc7XG5pbXBvcnQge1xuICAgIGFkZFJlZ2V4VG9rZW4sXG4gICAgbWF0Y2gxLFxuICAgIG1hdGNoMixcbiAgICBtYXRjaDMsXG4gICAgbWF0Y2gxdG8zLFxuICAgIG1hdGNoVW5zaWduZWQsXG59IGZyb20gJy4uL3BhcnNlL3JlZ2V4JztcbmltcG9ydCB7IGFkZFBhcnNlVG9rZW4gfSBmcm9tICcuLi9wYXJzZS90b2tlbic7XG5pbXBvcnQgeyBNSUxMSVNFQ09ORCB9IGZyb20gJy4vY29uc3RhbnRzJztcbmltcG9ydCB0b0ludCBmcm9tICcuLi91dGlscy90by1pbnQnO1xuXG4vLyBGT1JNQVRUSU5HXG5cbmFkZEZvcm1hdFRva2VuKCdTJywgMCwgMCwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB+fih0aGlzLm1pbGxpc2Vjb25kKCkgLyAxMDApO1xufSk7XG5cbmFkZEZvcm1hdFRva2VuKDAsIFsnU1MnLCAyXSwgMCwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB+fih0aGlzLm1pbGxpc2Vjb25kKCkgLyAxMCk7XG59KTtcblxuYWRkRm9ybWF0VG9rZW4oMCwgWydTU1MnLCAzXSwgMCwgJ21pbGxpc2Vjb25kJyk7XG5hZGRGb3JtYXRUb2tlbigwLCBbJ1NTU1MnLCA0XSwgMCwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLm1pbGxpc2Vjb25kKCkgKiAxMDtcbn0pO1xuYWRkRm9ybWF0VG9rZW4oMCwgWydTU1NTUycsIDVdLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMubWlsbGlzZWNvbmQoKSAqIDEwMDtcbn0pO1xuYWRkRm9ybWF0VG9rZW4oMCwgWydTU1NTU1MnLCA2XSwgMCwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLm1pbGxpc2Vjb25kKCkgKiAxMDAwO1xufSk7XG5hZGRGb3JtYXRUb2tlbigwLCBbJ1NTU1NTU1MnLCA3XSwgMCwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLm1pbGxpc2Vjb25kKCkgKiAxMDAwMDtcbn0pO1xuYWRkRm9ybWF0VG9rZW4oMCwgWydTU1NTU1NTUycsIDhdLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMubWlsbGlzZWNvbmQoKSAqIDEwMDAwMDtcbn0pO1xuYWRkRm9ybWF0VG9rZW4oMCwgWydTU1NTU1NTU1MnLCA5XSwgMCwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLm1pbGxpc2Vjb25kKCkgKiAxMDAwMDAwO1xufSk7XG5cbi8vIFBBUlNJTkdcblxuYWRkUmVnZXhUb2tlbignUycsIG1hdGNoMXRvMywgbWF0Y2gxKTtcbmFkZFJlZ2V4VG9rZW4oJ1NTJywgbWF0Y2gxdG8zLCBtYXRjaDIpO1xuYWRkUmVnZXhUb2tlbignU1NTJywgbWF0Y2gxdG8zLCBtYXRjaDMpO1xuXG52YXIgdG9rZW4sIGdldFNldE1pbGxpc2Vjb25kO1xuZm9yICh0b2tlbiA9ICdTU1NTJzsgdG9rZW4ubGVuZ3RoIDw9IDk7IHRva2VuICs9ICdTJykge1xuICAgIGFkZFJlZ2V4VG9rZW4odG9rZW4sIG1hdGNoVW5zaWduZWQpO1xufVxuXG5mdW5jdGlvbiBwYXJzZU1zKGlucHV0LCBhcnJheSkge1xuICAgIGFycmF5W01JTExJU0VDT05EXSA9IHRvSW50KCgnMC4nICsgaW5wdXQpICogMTAwMCk7XG59XG5cbmZvciAodG9rZW4gPSAnUyc7IHRva2VuLmxlbmd0aCA8PSA5OyB0b2tlbiArPSAnUycpIHtcbiAgICBhZGRQYXJzZVRva2VuKHRva2VuLCBwYXJzZU1zKTtcbn1cblxuZ2V0U2V0TWlsbGlzZWNvbmQgPSBtYWtlR2V0U2V0KCdNaWxsaXNlY29uZHMnLCBmYWxzZSk7XG5cbmV4cG9ydCB7IGdldFNldE1pbGxpc2Vjb25kIH07XG4iLCJpbXBvcnQgeyBhZGRGb3JtYXRUb2tlbiB9IGZyb20gJy4uL2Zvcm1hdC9mb3JtYXQnO1xuXG4vLyBGT1JNQVRUSU5HXG5cbmFkZEZvcm1hdFRva2VuKCd6JywgMCwgMCwgJ3pvbmVBYmJyJyk7XG5hZGRGb3JtYXRUb2tlbignenonLCAwLCAwLCAnem9uZU5hbWUnKTtcblxuLy8gTU9NRU5UU1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Wm9uZUFiYnIoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2lzVVRDID8gJ1VUQycgOiAnJztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFpvbmVOYW1lKCkge1xuICAgIHJldHVybiB0aGlzLl9pc1VUQyA/ICdDb29yZGluYXRlZCBVbml2ZXJzYWwgVGltZScgOiAnJztcbn1cbiIsImltcG9ydCB7IE1vbWVudCB9IGZyb20gJy4vY29uc3RydWN0b3InO1xuXG52YXIgcHJvdG8gPSBNb21lbnQucHJvdG90eXBlO1xuXG5pbXBvcnQgeyBhZGQsIHN1YnRyYWN0IH0gZnJvbSAnLi9hZGQtc3VidHJhY3QnO1xuaW1wb3J0IHsgY2FsZW5kYXIgfSBmcm9tICcuL2NhbGVuZGFyJztcbmltcG9ydCB7IGNsb25lIH0gZnJvbSAnLi9jbG9uZSc7XG5pbXBvcnQge1xuICAgIGlzQmVmb3JlLFxuICAgIGlzQmV0d2VlbixcbiAgICBpc1NhbWUsXG4gICAgaXNBZnRlcixcbiAgICBpc1NhbWVPckFmdGVyLFxuICAgIGlzU2FtZU9yQmVmb3JlLFxufSBmcm9tICcuL2NvbXBhcmUnO1xuaW1wb3J0IHsgZGlmZiB9IGZyb20gJy4vZGlmZic7XG5pbXBvcnQgeyBmb3JtYXQsIHRvU3RyaW5nLCB0b0lTT1N0cmluZywgaW5zcGVjdCB9IGZyb20gJy4vZm9ybWF0JztcbmltcG9ydCB7IGZyb20sIGZyb21Ob3cgfSBmcm9tICcuL2Zyb20nO1xuaW1wb3J0IHsgdG8sIHRvTm93IH0gZnJvbSAnLi90byc7XG5pbXBvcnQgeyBzdHJpbmdHZXQsIHN0cmluZ1NldCB9IGZyb20gJy4vZ2V0LXNldCc7XG5pbXBvcnQgeyBsb2NhbGUsIGxvY2FsZURhdGEsIGxhbmcgfSBmcm9tICcuL2xvY2FsZSc7XG5pbXBvcnQgeyBwcm90b3R5cGVNaW4sIHByb3RvdHlwZU1heCB9IGZyb20gJy4vbWluLW1heCc7XG5pbXBvcnQgeyBzdGFydE9mLCBlbmRPZiB9IGZyb20gJy4vc3RhcnQtZW5kLW9mJztcbmltcG9ydCB7IHZhbHVlT2YsIHRvRGF0ZSwgdG9BcnJheSwgdG9PYmplY3QsIHRvSlNPTiwgdW5peCB9IGZyb20gJy4vdG8tdHlwZSc7XG5pbXBvcnQgeyBpc1ZhbGlkLCBwYXJzaW5nRmxhZ3MsIGludmFsaWRBdCB9IGZyb20gJy4vdmFsaWQnO1xuaW1wb3J0IHsgY3JlYXRpb25EYXRhIH0gZnJvbSAnLi9jcmVhdGlvbi1kYXRhJztcblxucHJvdG8uYWRkID0gYWRkO1xucHJvdG8uY2FsZW5kYXIgPSBjYWxlbmRhcjtcbnByb3RvLmNsb25lID0gY2xvbmU7XG5wcm90by5kaWZmID0gZGlmZjtcbnByb3RvLmVuZE9mID0gZW5kT2Y7XG5wcm90by5mb3JtYXQgPSBmb3JtYXQ7XG5wcm90by5mcm9tID0gZnJvbTtcbnByb3RvLmZyb21Ob3cgPSBmcm9tTm93O1xucHJvdG8udG8gPSB0bztcbnByb3RvLnRvTm93ID0gdG9Ob3c7XG5wcm90by5nZXQgPSBzdHJpbmdHZXQ7XG5wcm90by5pbnZhbGlkQXQgPSBpbnZhbGlkQXQ7XG5wcm90by5pc0FmdGVyID0gaXNBZnRlcjtcbnByb3RvLmlzQmVmb3JlID0gaXNCZWZvcmU7XG5wcm90by5pc0JldHdlZW4gPSBpc0JldHdlZW47XG5wcm90by5pc1NhbWUgPSBpc1NhbWU7XG5wcm90by5pc1NhbWVPckFmdGVyID0gaXNTYW1lT3JBZnRlcjtcbnByb3RvLmlzU2FtZU9yQmVmb3JlID0gaXNTYW1lT3JCZWZvcmU7XG5wcm90by5pc1ZhbGlkID0gaXNWYWxpZDtcbnByb3RvLmxhbmcgPSBsYW5nO1xucHJvdG8ubG9jYWxlID0gbG9jYWxlO1xucHJvdG8ubG9jYWxlRGF0YSA9IGxvY2FsZURhdGE7XG5wcm90by5tYXggPSBwcm90b3R5cGVNYXg7XG5wcm90by5taW4gPSBwcm90b3R5cGVNaW47XG5wcm90by5wYXJzaW5nRmxhZ3MgPSBwYXJzaW5nRmxhZ3M7XG5wcm90by5zZXQgPSBzdHJpbmdTZXQ7XG5wcm90by5zdGFydE9mID0gc3RhcnRPZjtcbnByb3RvLnN1YnRyYWN0ID0gc3VidHJhY3Q7XG5wcm90by50b0FycmF5ID0gdG9BcnJheTtcbnByb3RvLnRvT2JqZWN0ID0gdG9PYmplY3Q7XG5wcm90by50b0RhdGUgPSB0b0RhdGU7XG5wcm90by50b0lTT1N0cmluZyA9IHRvSVNPU3RyaW5nO1xucHJvdG8uaW5zcGVjdCA9IGluc3BlY3Q7XG5pZiAodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLmZvciAhPSBudWxsKSB7XG4gICAgcHJvdG9bU3ltYm9sLmZvcignbm9kZWpzLnV0aWwuaW5zcGVjdC5jdXN0b20nKV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAnTW9tZW50PCcgKyB0aGlzLmZvcm1hdCgpICsgJz4nO1xuICAgIH07XG59XG5wcm90by50b0pTT04gPSB0b0pTT047XG5wcm90by50b1N0cmluZyA9IHRvU3RyaW5nO1xucHJvdG8udW5peCA9IHVuaXg7XG5wcm90by52YWx1ZU9mID0gdmFsdWVPZjtcbnByb3RvLmNyZWF0aW9uRGF0YSA9IGNyZWF0aW9uRGF0YTtcblxuLy8gRXJhXG5pbXBvcnQgeyBnZXRFcmFOYW1lLCBnZXRFcmFOYXJyb3csIGdldEVyYUFiYnIsIGdldEVyYVllYXIgfSBmcm9tICcuLi91bml0cy9lcmEnO1xucHJvdG8uZXJhTmFtZSA9IGdldEVyYU5hbWU7XG5wcm90by5lcmFOYXJyb3cgPSBnZXRFcmFOYXJyb3c7XG5wcm90by5lcmFBYmJyID0gZ2V0RXJhQWJicjtcbnByb3RvLmVyYVllYXIgPSBnZXRFcmFZZWFyO1xuXG4vLyBZZWFyXG5pbXBvcnQgeyBnZXRTZXRZZWFyLCBnZXRJc0xlYXBZZWFyIH0gZnJvbSAnLi4vdW5pdHMveWVhcic7XG5wcm90by55ZWFyID0gZ2V0U2V0WWVhcjtcbnByb3RvLmlzTGVhcFllYXIgPSBnZXRJc0xlYXBZZWFyO1xuXG4vLyBXZWVrIFllYXJcbmltcG9ydCB7XG4gICAgZ2V0U2V0V2Vla1llYXIsXG4gICAgZ2V0U2V0SVNPV2Vla1llYXIsXG4gICAgZ2V0V2Vla3NJblllYXIsXG4gICAgZ2V0V2Vla3NJbldlZWtZZWFyLFxuICAgIGdldElTT1dlZWtzSW5ZZWFyLFxuICAgIGdldElTT1dlZWtzSW5JU09XZWVrWWVhcixcbn0gZnJvbSAnLi4vdW5pdHMvd2Vlay15ZWFyJztcbnByb3RvLndlZWtZZWFyID0gZ2V0U2V0V2Vla1llYXI7XG5wcm90by5pc29XZWVrWWVhciA9IGdldFNldElTT1dlZWtZZWFyO1xuXG4vLyBRdWFydGVyXG5pbXBvcnQgeyBnZXRTZXRRdWFydGVyIH0gZnJvbSAnLi4vdW5pdHMvcXVhcnRlcic7XG5wcm90by5xdWFydGVyID0gcHJvdG8ucXVhcnRlcnMgPSBnZXRTZXRRdWFydGVyO1xuXG4vLyBNb250aFxuaW1wb3J0IHsgZ2V0U2V0TW9udGgsIGdldERheXNJbk1vbnRoIH0gZnJvbSAnLi4vdW5pdHMvbW9udGgnO1xucHJvdG8ubW9udGggPSBnZXRTZXRNb250aDtcbnByb3RvLmRheXNJbk1vbnRoID0gZ2V0RGF5c0luTW9udGg7XG5cbi8vIFdlZWtcbmltcG9ydCB7IGdldFNldFdlZWssIGdldFNldElTT1dlZWsgfSBmcm9tICcuLi91bml0cy93ZWVrJztcbnByb3RvLndlZWsgPSBwcm90by53ZWVrcyA9IGdldFNldFdlZWs7XG5wcm90by5pc29XZWVrID0gcHJvdG8uaXNvV2Vla3MgPSBnZXRTZXRJU09XZWVrO1xucHJvdG8ud2Vla3NJblllYXIgPSBnZXRXZWVrc0luWWVhcjtcbnByb3RvLndlZWtzSW5XZWVrWWVhciA9IGdldFdlZWtzSW5XZWVrWWVhcjtcbnByb3RvLmlzb1dlZWtzSW5ZZWFyID0gZ2V0SVNPV2Vla3NJblllYXI7XG5wcm90by5pc29XZWVrc0luSVNPV2Vla1llYXIgPSBnZXRJU09XZWVrc0luSVNPV2Vla1llYXI7XG5cbi8vIERheVxuaW1wb3J0IHsgZ2V0U2V0RGF5T2ZNb250aCB9IGZyb20gJy4uL3VuaXRzL2RheS1vZi1tb250aCc7XG5pbXBvcnQge1xuICAgIGdldFNldERheU9mV2VlayxcbiAgICBnZXRTZXRJU09EYXlPZldlZWssXG4gICAgZ2V0U2V0TG9jYWxlRGF5T2ZXZWVrLFxufSBmcm9tICcuLi91bml0cy9kYXktb2Ytd2Vlayc7XG5pbXBvcnQgeyBnZXRTZXREYXlPZlllYXIgfSBmcm9tICcuLi91bml0cy9kYXktb2YteWVhcic7XG5wcm90by5kYXRlID0gZ2V0U2V0RGF5T2ZNb250aDtcbnByb3RvLmRheSA9IHByb3RvLmRheXMgPSBnZXRTZXREYXlPZldlZWs7XG5wcm90by53ZWVrZGF5ID0gZ2V0U2V0TG9jYWxlRGF5T2ZXZWVrO1xucHJvdG8uaXNvV2Vla2RheSA9IGdldFNldElTT0RheU9mV2VlaztcbnByb3RvLmRheU9mWWVhciA9IGdldFNldERheU9mWWVhcjtcblxuLy8gSG91clxuaW1wb3J0IHsgZ2V0U2V0SG91ciB9IGZyb20gJy4uL3VuaXRzL2hvdXInO1xucHJvdG8uaG91ciA9IHByb3RvLmhvdXJzID0gZ2V0U2V0SG91cjtcblxuLy8gTWludXRlXG5pbXBvcnQgeyBnZXRTZXRNaW51dGUgfSBmcm9tICcuLi91bml0cy9taW51dGUnO1xucHJvdG8ubWludXRlID0gcHJvdG8ubWludXRlcyA9IGdldFNldE1pbnV0ZTtcblxuLy8gU2Vjb25kXG5pbXBvcnQgeyBnZXRTZXRTZWNvbmQgfSBmcm9tICcuLi91bml0cy9zZWNvbmQnO1xucHJvdG8uc2Vjb25kID0gcHJvdG8uc2Vjb25kcyA9IGdldFNldFNlY29uZDtcblxuLy8gTWlsbGlzZWNvbmRcbmltcG9ydCB7IGdldFNldE1pbGxpc2Vjb25kIH0gZnJvbSAnLi4vdW5pdHMvbWlsbGlzZWNvbmQnO1xucHJvdG8ubWlsbGlzZWNvbmQgPSBwcm90by5taWxsaXNlY29uZHMgPSBnZXRTZXRNaWxsaXNlY29uZDtcblxuLy8gT2Zmc2V0XG5pbXBvcnQge1xuICAgIGdldFNldE9mZnNldCxcbiAgICBzZXRPZmZzZXRUb1VUQyxcbiAgICBzZXRPZmZzZXRUb0xvY2FsLFxuICAgIHNldE9mZnNldFRvUGFyc2VkT2Zmc2V0LFxuICAgIGhhc0FsaWduZWRIb3VyT2Zmc2V0LFxuICAgIGlzRGF5bGlnaHRTYXZpbmdUaW1lLFxuICAgIGlzRGF5bGlnaHRTYXZpbmdUaW1lU2hpZnRlZCxcbiAgICBnZXRTZXRab25lLFxuICAgIGlzTG9jYWwsXG4gICAgaXNVdGNPZmZzZXQsXG4gICAgaXNVdGMsXG59IGZyb20gJy4uL3VuaXRzL29mZnNldCc7XG5wcm90by51dGNPZmZzZXQgPSBnZXRTZXRPZmZzZXQ7XG5wcm90by51dGMgPSBzZXRPZmZzZXRUb1VUQztcbnByb3RvLmxvY2FsID0gc2V0T2Zmc2V0VG9Mb2NhbDtcbnByb3RvLnBhcnNlWm9uZSA9IHNldE9mZnNldFRvUGFyc2VkT2Zmc2V0O1xucHJvdG8uaGFzQWxpZ25lZEhvdXJPZmZzZXQgPSBoYXNBbGlnbmVkSG91ck9mZnNldDtcbnByb3RvLmlzRFNUID0gaXNEYXlsaWdodFNhdmluZ1RpbWU7XG5wcm90by5pc0xvY2FsID0gaXNMb2NhbDtcbnByb3RvLmlzVXRjT2Zmc2V0ID0gaXNVdGNPZmZzZXQ7XG5wcm90by5pc1V0YyA9IGlzVXRjO1xucHJvdG8uaXNVVEMgPSBpc1V0YztcblxuLy8gVGltZXpvbmVcbmltcG9ydCB7IGdldFpvbmVBYmJyLCBnZXRab25lTmFtZSB9IGZyb20gJy4uL3VuaXRzL3RpbWV6b25lJztcbnByb3RvLnpvbmVBYmJyID0gZ2V0Wm9uZUFiYnI7XG5wcm90by56b25lTmFtZSA9IGdldFpvbmVOYW1lO1xuXG4vLyBEZXByZWNhdGlvbnNcbmltcG9ydCB7IGRlcHJlY2F0ZSB9IGZyb20gJy4uL3V0aWxzL2RlcHJlY2F0ZSc7XG5wcm90by5kYXRlcyA9IGRlcHJlY2F0ZShcbiAgICAnZGF0ZXMgYWNjZXNzb3IgaXMgZGVwcmVjYXRlZC4gVXNlIGRhdGUgaW5zdGVhZC4nLFxuICAgIGdldFNldERheU9mTW9udGhcbik7XG5wcm90by5tb250aHMgPSBkZXByZWNhdGUoXG4gICAgJ21vbnRocyBhY2Nlc3NvciBpcyBkZXByZWNhdGVkLiBVc2UgbW9udGggaW5zdGVhZCcsXG4gICAgZ2V0U2V0TW9udGhcbik7XG5wcm90by55ZWFycyA9IGRlcHJlY2F0ZShcbiAgICAneWVhcnMgYWNjZXNzb3IgaXMgZGVwcmVjYXRlZC4gVXNlIHllYXIgaW5zdGVhZCcsXG4gICAgZ2V0U2V0WWVhclxuKTtcbnByb3RvLnpvbmUgPSBkZXByZWNhdGUoXG4gICAgJ21vbWVudCgpLnpvbmUgaXMgZGVwcmVjYXRlZCwgdXNlIG1vbWVudCgpLnV0Y09mZnNldCBpbnN0ZWFkLiBodHRwOi8vbW9tZW50anMuY29tL2d1aWRlcy8jL3dhcm5pbmdzL3pvbmUvJyxcbiAgICBnZXRTZXRab25lXG4pO1xucHJvdG8uaXNEU1RTaGlmdGVkID0gZGVwcmVjYXRlKFxuICAgICdpc0RTVFNoaWZ0ZWQgaXMgZGVwcmVjYXRlZC4gU2VlIGh0dHA6Ly9tb21lbnRqcy5jb20vZ3VpZGVzLyMvd2FybmluZ3MvZHN0LXNoaWZ0ZWQvIGZvciBtb3JlIGluZm9ybWF0aW9uJyxcbiAgICBpc0RheWxpZ2h0U2F2aW5nVGltZVNoaWZ0ZWRcbik7XG5cbmV4cG9ydCBkZWZhdWx0IHByb3RvO1xuIiwiaW1wb3J0IHsgY3JlYXRlTG9jYWwgfSBmcm9tICcuLi9jcmVhdGUvbG9jYWwnO1xuaW1wb3J0IHsgY3JlYXRlVVRDIH0gZnJvbSAnLi4vY3JlYXRlL3V0Yyc7XG5pbXBvcnQgeyBjcmVhdGVJbnZhbGlkIH0gZnJvbSAnLi4vY3JlYXRlL3ZhbGlkJztcbmltcG9ydCB7IGlzTW9tZW50IH0gZnJvbSAnLi9jb25zdHJ1Y3Rvcic7XG5pbXBvcnQgeyBtaW4sIG1heCB9IGZyb20gJy4vbWluLW1heCc7XG5pbXBvcnQgeyBub3cgfSBmcm9tICcuL25vdyc7XG5pbXBvcnQgbW9tZW50UHJvdG90eXBlIGZyb20gJy4vcHJvdG90eXBlJztcblxuZnVuY3Rpb24gY3JlYXRlVW5peChpbnB1dCkge1xuICAgIHJldHVybiBjcmVhdGVMb2NhbChpbnB1dCAqIDEwMDApO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVJblpvbmUoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUxvY2FsLmFwcGx5KG51bGwsIGFyZ3VtZW50cykucGFyc2Vab25lKCk7XG59XG5cbmV4cG9ydCB7XG4gICAgbm93LFxuICAgIG1pbixcbiAgICBtYXgsXG4gICAgaXNNb21lbnQsXG4gICAgY3JlYXRlVVRDLFxuICAgIGNyZWF0ZVVuaXgsXG4gICAgY3JlYXRlTG9jYWwsXG4gICAgY3JlYXRlSW5ab25lLFxuICAgIGNyZWF0ZUludmFsaWQsXG4gICAgbW9tZW50UHJvdG90eXBlLFxufTtcbiIsImV4cG9ydCBmdW5jdGlvbiBwcmVQYXJzZVBvc3RGb3JtYXQoc3RyaW5nKSB7XG4gICAgcmV0dXJuIHN0cmluZztcbn1cbiIsImltcG9ydCB7IExvY2FsZSB9IGZyb20gJy4vY29uc3RydWN0b3InO1xuXG52YXIgcHJvdG8gPSBMb2NhbGUucHJvdG90eXBlO1xuXG5pbXBvcnQgeyBjYWxlbmRhciB9IGZyb20gJy4vY2FsZW5kYXInO1xuaW1wb3J0IHsgbG9uZ0RhdGVGb3JtYXQgfSBmcm9tICcuL2Zvcm1hdHMnO1xuaW1wb3J0IHsgaW52YWxpZERhdGUgfSBmcm9tICcuL2ludmFsaWQnO1xuaW1wb3J0IHsgb3JkaW5hbCB9IGZyb20gJy4vb3JkaW5hbCc7XG5pbXBvcnQgeyBwcmVQYXJzZVBvc3RGb3JtYXQgfSBmcm9tICcuL3ByZS1wb3N0LWZvcm1hdCc7XG5pbXBvcnQgeyByZWxhdGl2ZVRpbWUsIHBhc3RGdXR1cmUgfSBmcm9tICcuL3JlbGF0aXZlJztcbmltcG9ydCB7IHNldCB9IGZyb20gJy4vc2V0JztcblxucHJvdG8uY2FsZW5kYXIgPSBjYWxlbmRhcjtcbnByb3RvLmxvbmdEYXRlRm9ybWF0ID0gbG9uZ0RhdGVGb3JtYXQ7XG5wcm90by5pbnZhbGlkRGF0ZSA9IGludmFsaWREYXRlO1xucHJvdG8ub3JkaW5hbCA9IG9yZGluYWw7XG5wcm90by5wcmVwYXJzZSA9IHByZVBhcnNlUG9zdEZvcm1hdDtcbnByb3RvLnBvc3Rmb3JtYXQgPSBwcmVQYXJzZVBvc3RGb3JtYXQ7XG5wcm90by5yZWxhdGl2ZVRpbWUgPSByZWxhdGl2ZVRpbWU7XG5wcm90by5wYXN0RnV0dXJlID0gcGFzdEZ1dHVyZTtcbnByb3RvLnNldCA9IHNldDtcblxuLy8gRXJhc1xuaW1wb3J0IHtcbiAgICBsb2NhbGVFcmFzLFxuICAgIGxvY2FsZUVyYXNQYXJzZSxcbiAgICBsb2NhbGVFcmFzQ29udmVydFllYXIsXG4gICAgZXJhc0FiYnJSZWdleCxcbiAgICBlcmFzTmFtZVJlZ2V4LFxuICAgIGVyYXNOYXJyb3dSZWdleCxcbn0gZnJvbSAnLi4vdW5pdHMvZXJhJztcbnByb3RvLmVyYXMgPSBsb2NhbGVFcmFzO1xucHJvdG8uZXJhc1BhcnNlID0gbG9jYWxlRXJhc1BhcnNlO1xucHJvdG8uZXJhc0NvbnZlcnRZZWFyID0gbG9jYWxlRXJhc0NvbnZlcnRZZWFyO1xucHJvdG8uZXJhc0FiYnJSZWdleCA9IGVyYXNBYmJyUmVnZXg7XG5wcm90by5lcmFzTmFtZVJlZ2V4ID0gZXJhc05hbWVSZWdleDtcbnByb3RvLmVyYXNOYXJyb3dSZWdleCA9IGVyYXNOYXJyb3dSZWdleDtcblxuLy8gTW9udGhcbmltcG9ydCB7XG4gICAgbG9jYWxlTW9udGhzUGFyc2UsXG4gICAgbG9jYWxlTW9udGhzLFxuICAgIGxvY2FsZU1vbnRoc1Nob3J0LFxuICAgIG1vbnRoc1JlZ2V4LFxuICAgIG1vbnRoc1Nob3J0UmVnZXgsXG59IGZyb20gJy4uL3VuaXRzL21vbnRoJztcblxucHJvdG8ubW9udGhzID0gbG9jYWxlTW9udGhzO1xucHJvdG8ubW9udGhzU2hvcnQgPSBsb2NhbGVNb250aHNTaG9ydDtcbnByb3RvLm1vbnRoc1BhcnNlID0gbG9jYWxlTW9udGhzUGFyc2U7XG5wcm90by5tb250aHNSZWdleCA9IG1vbnRoc1JlZ2V4O1xucHJvdG8ubW9udGhzU2hvcnRSZWdleCA9IG1vbnRoc1Nob3J0UmVnZXg7XG5cbi8vIFdlZWtcbmltcG9ydCB7XG4gICAgbG9jYWxlV2VlayxcbiAgICBsb2NhbGVGaXJzdERheU9mWWVhcixcbiAgICBsb2NhbGVGaXJzdERheU9mV2Vlayxcbn0gZnJvbSAnLi4vdW5pdHMvd2Vlayc7XG5wcm90by53ZWVrID0gbG9jYWxlV2VlaztcbnByb3RvLmZpcnN0RGF5T2ZZZWFyID0gbG9jYWxlRmlyc3REYXlPZlllYXI7XG5wcm90by5maXJzdERheU9mV2VlayA9IGxvY2FsZUZpcnN0RGF5T2ZXZWVrO1xuXG4vLyBEYXkgb2YgV2Vla1xuaW1wb3J0IHtcbiAgICBsb2NhbGVXZWVrZGF5c1BhcnNlLFxuICAgIGxvY2FsZVdlZWtkYXlzLFxuICAgIGxvY2FsZVdlZWtkYXlzTWluLFxuICAgIGxvY2FsZVdlZWtkYXlzU2hvcnQsXG4gICAgd2Vla2RheXNSZWdleCxcbiAgICB3ZWVrZGF5c1Nob3J0UmVnZXgsXG4gICAgd2Vla2RheXNNaW5SZWdleCxcbn0gZnJvbSAnLi4vdW5pdHMvZGF5LW9mLXdlZWsnO1xuXG5wcm90by53ZWVrZGF5cyA9IGxvY2FsZVdlZWtkYXlzO1xucHJvdG8ud2Vla2RheXNNaW4gPSBsb2NhbGVXZWVrZGF5c01pbjtcbnByb3RvLndlZWtkYXlzU2hvcnQgPSBsb2NhbGVXZWVrZGF5c1Nob3J0O1xucHJvdG8ud2Vla2RheXNQYXJzZSA9IGxvY2FsZVdlZWtkYXlzUGFyc2U7XG5cbnByb3RvLndlZWtkYXlzUmVnZXggPSB3ZWVrZGF5c1JlZ2V4O1xucHJvdG8ud2Vla2RheXNTaG9ydFJlZ2V4ID0gd2Vla2RheXNTaG9ydFJlZ2V4O1xucHJvdG8ud2Vla2RheXNNaW5SZWdleCA9IHdlZWtkYXlzTWluUmVnZXg7XG5cbi8vIEhvdXJzXG5pbXBvcnQgeyBsb2NhbGVJc1BNLCBsb2NhbGVNZXJpZGllbSB9IGZyb20gJy4uL3VuaXRzL2hvdXInO1xuXG5wcm90by5pc1BNID0gbG9jYWxlSXNQTTtcbnByb3RvLm1lcmlkaWVtID0gbG9jYWxlTWVyaWRpZW07XG4iLCJpbXBvcnQgaXNOdW1iZXIgZnJvbSAnLi4vdXRpbHMvaXMtbnVtYmVyJztcbmltcG9ydCB7IGdldExvY2FsZSB9IGZyb20gJy4vbG9jYWxlcyc7XG5pbXBvcnQgeyBjcmVhdGVVVEMgfSBmcm9tICcuLi9jcmVhdGUvdXRjJztcblxuZnVuY3Rpb24gZ2V0KGZvcm1hdCwgaW5kZXgsIGZpZWxkLCBzZXR0ZXIpIHtcbiAgICB2YXIgbG9jYWxlID0gZ2V0TG9jYWxlKCksXG4gICAgICAgIHV0YyA9IGNyZWF0ZVVUQygpLnNldChzZXR0ZXIsIGluZGV4KTtcbiAgICByZXR1cm4gbG9jYWxlW2ZpZWxkXSh1dGMsIGZvcm1hdCk7XG59XG5cbmZ1bmN0aW9uIGxpc3RNb250aHNJbXBsKGZvcm1hdCwgaW5kZXgsIGZpZWxkKSB7XG4gICAgaWYgKGlzTnVtYmVyKGZvcm1hdCkpIHtcbiAgICAgICAgaW5kZXggPSBmb3JtYXQ7XG4gICAgICAgIGZvcm1hdCA9IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBmb3JtYXQgPSBmb3JtYXQgfHwgJyc7XG5cbiAgICBpZiAoaW5kZXggIT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gZ2V0KGZvcm1hdCwgaW5kZXgsIGZpZWxkLCAnbW9udGgnKTtcbiAgICB9XG5cbiAgICB2YXIgaSxcbiAgICAgICAgb3V0ID0gW107XG4gICAgZm9yIChpID0gMDsgaSA8IDEyOyBpKyspIHtcbiAgICAgICAgb3V0W2ldID0gZ2V0KGZvcm1hdCwgaSwgZmllbGQsICdtb250aCcpO1xuICAgIH1cbiAgICByZXR1cm4gb3V0O1xufVxuXG4vLyAoKVxuLy8gKDUpXG4vLyAoZm10LCA1KVxuLy8gKGZtdClcbi8vICh0cnVlKVxuLy8gKHRydWUsIDUpXG4vLyAodHJ1ZSwgZm10LCA1KVxuLy8gKHRydWUsIGZtdClcbmZ1bmN0aW9uIGxpc3RXZWVrZGF5c0ltcGwobG9jYWxlU29ydGVkLCBmb3JtYXQsIGluZGV4LCBmaWVsZCkge1xuICAgIGlmICh0eXBlb2YgbG9jYWxlU29ydGVkID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgaWYgKGlzTnVtYmVyKGZvcm1hdCkpIHtcbiAgICAgICAgICAgIGluZGV4ID0gZm9ybWF0O1xuICAgICAgICAgICAgZm9ybWF0ID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9ybWF0ID0gZm9ybWF0IHx8ICcnO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGZvcm1hdCA9IGxvY2FsZVNvcnRlZDtcbiAgICAgICAgaW5kZXggPSBmb3JtYXQ7XG4gICAgICAgIGxvY2FsZVNvcnRlZCA9IGZhbHNlO1xuXG4gICAgICAgIGlmIChpc051bWJlcihmb3JtYXQpKSB7XG4gICAgICAgICAgICBpbmRleCA9IGZvcm1hdDtcbiAgICAgICAgICAgIGZvcm1hdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvcm1hdCA9IGZvcm1hdCB8fCAnJztcbiAgICB9XG5cbiAgICB2YXIgbG9jYWxlID0gZ2V0TG9jYWxlKCksXG4gICAgICAgIHNoaWZ0ID0gbG9jYWxlU29ydGVkID8gbG9jYWxlLl93ZWVrLmRvdyA6IDAsXG4gICAgICAgIGksXG4gICAgICAgIG91dCA9IFtdO1xuXG4gICAgaWYgKGluZGV4ICE9IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGdldChmb3JtYXQsIChpbmRleCArIHNoaWZ0KSAlIDcsIGZpZWxkLCAnZGF5Jyk7XG4gICAgfVxuXG4gICAgZm9yIChpID0gMDsgaSA8IDc7IGkrKykge1xuICAgICAgICBvdXRbaV0gPSBnZXQoZm9ybWF0LCAoaSArIHNoaWZ0KSAlIDcsIGZpZWxkLCAnZGF5Jyk7XG4gICAgfVxuICAgIHJldHVybiBvdXQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBsaXN0TW9udGhzKGZvcm1hdCwgaW5kZXgpIHtcbiAgICByZXR1cm4gbGlzdE1vbnRoc0ltcGwoZm9ybWF0LCBpbmRleCwgJ21vbnRocycpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbGlzdE1vbnRoc1Nob3J0KGZvcm1hdCwgaW5kZXgpIHtcbiAgICByZXR1cm4gbGlzdE1vbnRoc0ltcGwoZm9ybWF0LCBpbmRleCwgJ21vbnRoc1Nob3J0Jyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBsaXN0V2Vla2RheXMobG9jYWxlU29ydGVkLCBmb3JtYXQsIGluZGV4KSB7XG4gICAgcmV0dXJuIGxpc3RXZWVrZGF5c0ltcGwobG9jYWxlU29ydGVkLCBmb3JtYXQsIGluZGV4LCAnd2Vla2RheXMnKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGxpc3RXZWVrZGF5c1Nob3J0KGxvY2FsZVNvcnRlZCwgZm9ybWF0LCBpbmRleCkge1xuICAgIHJldHVybiBsaXN0V2Vla2RheXNJbXBsKGxvY2FsZVNvcnRlZCwgZm9ybWF0LCBpbmRleCwgJ3dlZWtkYXlzU2hvcnQnKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGxpc3RXZWVrZGF5c01pbihsb2NhbGVTb3J0ZWQsIGZvcm1hdCwgaW5kZXgpIHtcbiAgICByZXR1cm4gbGlzdFdlZWtkYXlzSW1wbChsb2NhbGVTb3J0ZWQsIGZvcm1hdCwgaW5kZXgsICd3ZWVrZGF5c01pbicpO1xufVxuIiwiaW1wb3J0ICcuL3Byb3RvdHlwZSc7XG5pbXBvcnQgeyBnZXRTZXRHbG9iYWxMb2NhbGUgfSBmcm9tICcuL2xvY2FsZXMnO1xuaW1wb3J0IHRvSW50IGZyb20gJy4uL3V0aWxzL3RvLWludCc7XG5cbmdldFNldEdsb2JhbExvY2FsZSgnZW4nLCB7XG4gICAgZXJhczogW1xuICAgICAgICB7XG4gICAgICAgICAgICBzaW5jZTogJzAwMDEtMDEtMDEnLFxuICAgICAgICAgICAgdW50aWw6ICtJbmZpbml0eSxcbiAgICAgICAgICAgIG9mZnNldDogMSxcbiAgICAgICAgICAgIG5hbWU6ICdBbm5vIERvbWluaScsXG4gICAgICAgICAgICBuYXJyb3c6ICdBRCcsXG4gICAgICAgICAgICBhYmJyOiAnQUQnLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBzaW5jZTogJzAwMDAtMTItMzEnLFxuICAgICAgICAgICAgdW50aWw6IC1JbmZpbml0eSxcbiAgICAgICAgICAgIG9mZnNldDogMSxcbiAgICAgICAgICAgIG5hbWU6ICdCZWZvcmUgQ2hyaXN0JyxcbiAgICAgICAgICAgIG5hcnJvdzogJ0JDJyxcbiAgICAgICAgICAgIGFiYnI6ICdCQycsXG4gICAgICAgIH0sXG4gICAgXSxcbiAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0odGh8c3R8bmR8cmQpLyxcbiAgICBvcmRpbmFsOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgIHZhciBiID0gbnVtYmVyICUgMTAsXG4gICAgICAgICAgICBvdXRwdXQgPVxuICAgICAgICAgICAgICAgIHRvSW50KChudW1iZXIgJSAxMDApIC8gMTApID09PSAxXG4gICAgICAgICAgICAgICAgICAgID8gJ3RoJ1xuICAgICAgICAgICAgICAgICAgICA6IGIgPT09IDFcbiAgICAgICAgICAgICAgICAgICAgICA/ICdzdCdcbiAgICAgICAgICAgICAgICAgICAgICA6IGIgPT09IDJcbiAgICAgICAgICAgICAgICAgICAgICAgID8gJ25kJ1xuICAgICAgICAgICAgICAgICAgICAgICAgOiBiID09PSAzXG4gICAgICAgICAgICAgICAgICAgICAgICAgID8gJ3JkJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICA6ICd0aCc7XG4gICAgICAgIHJldHVybiBudW1iZXIgKyBvdXRwdXQ7XG4gICAgfSxcbn0pO1xuIiwiLy8gU2lkZSBlZmZlY3QgaW1wb3J0c1xuaW1wb3J0ICcuL3Byb3RvdHlwZSc7XG5cbmltcG9ydCB7XG4gICAgZ2V0U2V0R2xvYmFsTG9jYWxlLFxuICAgIGRlZmluZUxvY2FsZSxcbiAgICB1cGRhdGVMb2NhbGUsXG4gICAgZ2V0TG9jYWxlLFxuICAgIGxpc3RMb2NhbGVzLFxufSBmcm9tICcuL2xvY2FsZXMnO1xuXG5pbXBvcnQge1xuICAgIGxpc3RNb250aHMsXG4gICAgbGlzdE1vbnRoc1Nob3J0LFxuICAgIGxpc3RXZWVrZGF5cyxcbiAgICBsaXN0V2Vla2RheXNTaG9ydCxcbiAgICBsaXN0V2Vla2RheXNNaW4sXG59IGZyb20gJy4vbGlzdHMnO1xuXG5leHBvcnQge1xuICAgIGdldFNldEdsb2JhbExvY2FsZSxcbiAgICBkZWZpbmVMb2NhbGUsXG4gICAgdXBkYXRlTG9jYWxlLFxuICAgIGdldExvY2FsZSxcbiAgICBsaXN0TG9jYWxlcyxcbiAgICBsaXN0TW9udGhzLFxuICAgIGxpc3RNb250aHNTaG9ydCxcbiAgICBsaXN0V2Vla2RheXMsXG4gICAgbGlzdFdlZWtkYXlzU2hvcnQsXG4gICAgbGlzdFdlZWtkYXlzTWluLFxufTtcblxuaW1wb3J0IHsgZGVwcmVjYXRlIH0gZnJvbSAnLi4vdXRpbHMvZGVwcmVjYXRlJztcbmltcG9ydCB7IGhvb2tzIH0gZnJvbSAnLi4vdXRpbHMvaG9va3MnO1xuXG5ob29rcy5sYW5nID0gZGVwcmVjYXRlKFxuICAgICdtb21lbnQubGFuZyBpcyBkZXByZWNhdGVkLiBVc2UgbW9tZW50LmxvY2FsZSBpbnN0ZWFkLicsXG4gICAgZ2V0U2V0R2xvYmFsTG9jYWxlXG4pO1xuaG9va3MubGFuZ0RhdGEgPSBkZXByZWNhdGUoXG4gICAgJ21vbWVudC5sYW5nRGF0YSBpcyBkZXByZWNhdGVkLiBVc2UgbW9tZW50LmxvY2FsZURhdGEgaW5zdGVhZC4nLFxuICAgIGdldExvY2FsZVxuKTtcblxuaW1wb3J0ICcuL2VuJztcbiIsInZhciBtYXRoQWJzID0gTWF0aC5hYnM7XG5cbmV4cG9ydCBmdW5jdGlvbiBhYnMoKSB7XG4gICAgdmFyIGRhdGEgPSB0aGlzLl9kYXRhO1xuXG4gICAgdGhpcy5fbWlsbGlzZWNvbmRzID0gbWF0aEFicyh0aGlzLl9taWxsaXNlY29uZHMpO1xuICAgIHRoaXMuX2RheXMgPSBtYXRoQWJzKHRoaXMuX2RheXMpO1xuICAgIHRoaXMuX21vbnRocyA9IG1hdGhBYnModGhpcy5fbW9udGhzKTtcblxuICAgIGRhdGEubWlsbGlzZWNvbmRzID0gbWF0aEFicyhkYXRhLm1pbGxpc2Vjb25kcyk7XG4gICAgZGF0YS5zZWNvbmRzID0gbWF0aEFicyhkYXRhLnNlY29uZHMpO1xuICAgIGRhdGEubWludXRlcyA9IG1hdGhBYnMoZGF0YS5taW51dGVzKTtcbiAgICBkYXRhLmhvdXJzID0gbWF0aEFicyhkYXRhLmhvdXJzKTtcbiAgICBkYXRhLm1vbnRocyA9IG1hdGhBYnMoZGF0YS5tb250aHMpO1xuICAgIGRhdGEueWVhcnMgPSBtYXRoQWJzKGRhdGEueWVhcnMpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59XG4iLCJpbXBvcnQgeyBjcmVhdGVEdXJhdGlvbiB9IGZyb20gJy4vY3JlYXRlJztcblxuZnVuY3Rpb24gYWRkU3VidHJhY3QoZHVyYXRpb24sIGlucHV0LCB2YWx1ZSwgZGlyZWN0aW9uKSB7XG4gICAgdmFyIG90aGVyID0gY3JlYXRlRHVyYXRpb24oaW5wdXQsIHZhbHVlKTtcblxuICAgIGR1cmF0aW9uLl9taWxsaXNlY29uZHMgKz0gZGlyZWN0aW9uICogb3RoZXIuX21pbGxpc2Vjb25kcztcbiAgICBkdXJhdGlvbi5fZGF5cyArPSBkaXJlY3Rpb24gKiBvdGhlci5fZGF5cztcbiAgICBkdXJhdGlvbi5fbW9udGhzICs9IGRpcmVjdGlvbiAqIG90aGVyLl9tb250aHM7XG5cbiAgICByZXR1cm4gZHVyYXRpb24uX2J1YmJsZSgpO1xufVxuXG4vLyBzdXBwb3J0cyBvbmx5IDIuMC1zdHlsZSBhZGQoMSwgJ3MnKSBvciBhZGQoZHVyYXRpb24pXG5leHBvcnQgZnVuY3Rpb24gYWRkKGlucHV0LCB2YWx1ZSkge1xuICAgIHJldHVybiBhZGRTdWJ0cmFjdCh0aGlzLCBpbnB1dCwgdmFsdWUsIDEpO1xufVxuXG4vLyBzdXBwb3J0cyBvbmx5IDIuMC1zdHlsZSBzdWJ0cmFjdCgxLCAncycpIG9yIHN1YnRyYWN0KGR1cmF0aW9uKVxuZXhwb3J0IGZ1bmN0aW9uIHN1YnRyYWN0KGlucHV0LCB2YWx1ZSkge1xuICAgIHJldHVybiBhZGRTdWJ0cmFjdCh0aGlzLCBpbnB1dCwgdmFsdWUsIC0xKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFic0NlaWwobnVtYmVyKSB7XG4gICAgaWYgKG51bWJlciA8IDApIHtcbiAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IobnVtYmVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gTWF0aC5jZWlsKG51bWJlcik7XG4gICAgfVxufVxuIiwiaW1wb3J0IGFic0Zsb29yIGZyb20gJy4uL3V0aWxzL2Ficy1mbG9vcic7XG5pbXBvcnQgYWJzQ2VpbCBmcm9tICcuLi91dGlscy9hYnMtY2VpbCc7XG5cbmV4cG9ydCBmdW5jdGlvbiBidWJibGUoKSB7XG4gICAgdmFyIG1pbGxpc2Vjb25kcyA9IHRoaXMuX21pbGxpc2Vjb25kcyxcbiAgICAgICAgZGF5cyA9IHRoaXMuX2RheXMsXG4gICAgICAgIG1vbnRocyA9IHRoaXMuX21vbnRocyxcbiAgICAgICAgZGF0YSA9IHRoaXMuX2RhdGEsXG4gICAgICAgIHNlY29uZHMsXG4gICAgICAgIG1pbnV0ZXMsXG4gICAgICAgIGhvdXJzLFxuICAgICAgICB5ZWFycyxcbiAgICAgICAgbW9udGhzRnJvbURheXM7XG5cbiAgICAvLyBpZiB3ZSBoYXZlIGEgbWl4IG9mIHBvc2l0aXZlIGFuZCBuZWdhdGl2ZSB2YWx1ZXMsIGJ1YmJsZSBkb3duIGZpcnN0XG4gICAgLy8gY2hlY2s6IGh0dHBzOi8vZ2l0aHViLmNvbS9tb21lbnQvbW9tZW50L2lzc3Vlcy8yMTY2XG4gICAgaWYgKFxuICAgICAgICAhKFxuICAgICAgICAgICAgKG1pbGxpc2Vjb25kcyA+PSAwICYmIGRheXMgPj0gMCAmJiBtb250aHMgPj0gMCkgfHxcbiAgICAgICAgICAgIChtaWxsaXNlY29uZHMgPD0gMCAmJiBkYXlzIDw9IDAgJiYgbW9udGhzIDw9IDApXG4gICAgICAgIClcbiAgICApIHtcbiAgICAgICAgbWlsbGlzZWNvbmRzICs9IGFic0NlaWwobW9udGhzVG9EYXlzKG1vbnRocykgKyBkYXlzKSAqIDg2NGU1O1xuICAgICAgICBkYXlzID0gMDtcbiAgICAgICAgbW9udGhzID0gMDtcbiAgICB9XG5cbiAgICAvLyBUaGUgZm9sbG93aW5nIGNvZGUgYnViYmxlcyB1cCB2YWx1ZXMsIHNlZSB0aGUgdGVzdHMgZm9yXG4gICAgLy8gZXhhbXBsZXMgb2Ygd2hhdCB0aGF0IG1lYW5zLlxuICAgIGRhdGEubWlsbGlzZWNvbmRzID0gbWlsbGlzZWNvbmRzICUgMTAwMDtcblxuICAgIHNlY29uZHMgPSBhYnNGbG9vcihtaWxsaXNlY29uZHMgLyAxMDAwKTtcbiAgICBkYXRhLnNlY29uZHMgPSBzZWNvbmRzICUgNjA7XG5cbiAgICBtaW51dGVzID0gYWJzRmxvb3Ioc2Vjb25kcyAvIDYwKTtcbiAgICBkYXRhLm1pbnV0ZXMgPSBtaW51dGVzICUgNjA7XG5cbiAgICBob3VycyA9IGFic0Zsb29yKG1pbnV0ZXMgLyA2MCk7XG4gICAgZGF0YS5ob3VycyA9IGhvdXJzICUgMjQ7XG5cbiAgICBkYXlzICs9IGFic0Zsb29yKGhvdXJzIC8gMjQpO1xuXG4gICAgLy8gY29udmVydCBkYXlzIHRvIG1vbnRoc1xuICAgIG1vbnRoc0Zyb21EYXlzID0gYWJzRmxvb3IoZGF5c1RvTW9udGhzKGRheXMpKTtcbiAgICBtb250aHMgKz0gbW9udGhzRnJvbURheXM7XG4gICAgZGF5cyAtPSBhYnNDZWlsKG1vbnRoc1RvRGF5cyhtb250aHNGcm9tRGF5cykpO1xuXG4gICAgLy8gMTIgbW9udGhzIC0+IDEgeWVhclxuICAgIHllYXJzID0gYWJzRmxvb3IobW9udGhzIC8gMTIpO1xuICAgIG1vbnRocyAlPSAxMjtcblxuICAgIGRhdGEuZGF5cyA9IGRheXM7XG4gICAgZGF0YS5tb250aHMgPSBtb250aHM7XG4gICAgZGF0YS55ZWFycyA9IHllYXJzO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkYXlzVG9Nb250aHMoZGF5cykge1xuICAgIC8vIDQwMCB5ZWFycyBoYXZlIDE0NjA5NyBkYXlzICh0YWtpbmcgaW50byBhY2NvdW50IGxlYXAgeWVhciBydWxlcylcbiAgICAvLyA0MDAgeWVhcnMgaGF2ZSAxMiBtb250aHMgPT09IDQ4MDBcbiAgICByZXR1cm4gKGRheXMgKiA0ODAwKSAvIDE0NjA5Nztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1vbnRoc1RvRGF5cyhtb250aHMpIHtcbiAgICAvLyB0aGUgcmV2ZXJzZSBvZiBkYXlzVG9Nb250aHNcbiAgICByZXR1cm4gKG1vbnRocyAqIDE0NjA5NykgLyA0ODAwO1xufVxuIiwiaW1wb3J0IHsgZGF5c1RvTW9udGhzLCBtb250aHNUb0RheXMgfSBmcm9tICcuL2J1YmJsZSc7XG5pbXBvcnQgeyBub3JtYWxpemVVbml0cyB9IGZyb20gJy4uL3VuaXRzL2FsaWFzZXMnO1xuXG5leHBvcnQgZnVuY3Rpb24gYXModW5pdHMpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgIHJldHVybiBOYU47XG4gICAgfVxuICAgIHZhciBkYXlzLFxuICAgICAgICBtb250aHMsXG4gICAgICAgIG1pbGxpc2Vjb25kcyA9IHRoaXMuX21pbGxpc2Vjb25kcztcblxuICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpO1xuXG4gICAgaWYgKHVuaXRzID09PSAnbW9udGgnIHx8IHVuaXRzID09PSAncXVhcnRlcicgfHwgdW5pdHMgPT09ICd5ZWFyJykge1xuICAgICAgICBkYXlzID0gdGhpcy5fZGF5cyArIG1pbGxpc2Vjb25kcyAvIDg2NGU1O1xuICAgICAgICBtb250aHMgPSB0aGlzLl9tb250aHMgKyBkYXlzVG9Nb250aHMoZGF5cyk7XG4gICAgICAgIHN3aXRjaCAodW5pdHMpIHtcbiAgICAgICAgICAgIGNhc2UgJ21vbnRoJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gbW9udGhzO1xuICAgICAgICAgICAgY2FzZSAncXVhcnRlcic6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1vbnRocyAvIDM7XG4gICAgICAgICAgICBjYXNlICd5ZWFyJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gbW9udGhzIC8gMTI7XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyBoYW5kbGUgbWlsbGlzZWNvbmRzIHNlcGFyYXRlbHkgYmVjYXVzZSBvZiBmbG9hdGluZyBwb2ludCBtYXRoIGVycm9ycyAoaXNzdWUgIzE4NjcpXG4gICAgICAgIGRheXMgPSB0aGlzLl9kYXlzICsgTWF0aC5yb3VuZChtb250aHNUb0RheXModGhpcy5fbW9udGhzKSk7XG4gICAgICAgIHN3aXRjaCAodW5pdHMpIHtcbiAgICAgICAgICAgIGNhc2UgJ3dlZWsnOlxuICAgICAgICAgICAgICAgIHJldHVybiBkYXlzIC8gNyArIG1pbGxpc2Vjb25kcyAvIDYwNDhlNTtcbiAgICAgICAgICAgIGNhc2UgJ2RheSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRheXMgKyBtaWxsaXNlY29uZHMgLyA4NjRlNTtcbiAgICAgICAgICAgIGNhc2UgJ2hvdXInOlxuICAgICAgICAgICAgICAgIHJldHVybiBkYXlzICogMjQgKyBtaWxsaXNlY29uZHMgLyAzNmU1O1xuICAgICAgICAgICAgY2FzZSAnbWludXRlJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gZGF5cyAqIDE0NDAgKyBtaWxsaXNlY29uZHMgLyA2ZTQ7XG4gICAgICAgICAgICBjYXNlICdzZWNvbmQnOlxuICAgICAgICAgICAgICAgIHJldHVybiBkYXlzICogODY0MDAgKyBtaWxsaXNlY29uZHMgLyAxMDAwO1xuICAgICAgICAgICAgLy8gTWF0aC5mbG9vciBwcmV2ZW50cyBmbG9hdGluZyBwb2ludCBtYXRoIGVycm9ycyBoZXJlXG4gICAgICAgICAgICBjYXNlICdtaWxsaXNlY29uZCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IoZGF5cyAqIDg2NGU1KSArIG1pbGxpc2Vjb25kcztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIHVuaXQgJyArIHVuaXRzKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZnVuY3Rpb24gbWFrZUFzKGFsaWFzKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYXMoYWxpYXMpO1xuICAgIH07XG59XG5cbnZhciBhc01pbGxpc2Vjb25kcyA9IG1ha2VBcygnbXMnKSxcbiAgICBhc1NlY29uZHMgPSBtYWtlQXMoJ3MnKSxcbiAgICBhc01pbnV0ZXMgPSBtYWtlQXMoJ20nKSxcbiAgICBhc0hvdXJzID0gbWFrZUFzKCdoJyksXG4gICAgYXNEYXlzID0gbWFrZUFzKCdkJyksXG4gICAgYXNXZWVrcyA9IG1ha2VBcygndycpLFxuICAgIGFzTW9udGhzID0gbWFrZUFzKCdNJyksXG4gICAgYXNRdWFydGVycyA9IG1ha2VBcygnUScpLFxuICAgIGFzWWVhcnMgPSBtYWtlQXMoJ3knKSxcbiAgICB2YWx1ZU9mID0gYXNNaWxsaXNlY29uZHM7XG5cbmV4cG9ydCB7XG4gICAgYXNNaWxsaXNlY29uZHMsXG4gICAgYXNTZWNvbmRzLFxuICAgIGFzTWludXRlcyxcbiAgICBhc0hvdXJzLFxuICAgIGFzRGF5cyxcbiAgICBhc1dlZWtzLFxuICAgIGFzTW9udGhzLFxuICAgIGFzUXVhcnRlcnMsXG4gICAgYXNZZWFycyxcbiAgICB2YWx1ZU9mLFxufTtcbiIsImltcG9ydCB7IGNyZWF0ZUR1cmF0aW9uIH0gZnJvbSAnLi9jcmVhdGUnO1xuXG5leHBvcnQgZnVuY3Rpb24gY2xvbmUoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUR1cmF0aW9uKHRoaXMpO1xufVxuIiwiaW1wb3J0IHsgbm9ybWFsaXplVW5pdHMgfSBmcm9tICcuLi91bml0cy9hbGlhc2VzJztcbmltcG9ydCBhYnNGbG9vciBmcm9tICcuLi91dGlscy9hYnMtZmxvb3InO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0KHVuaXRzKSB7XG4gICAgdW5pdHMgPSBub3JtYWxpemVVbml0cyh1bml0cyk7XG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZCgpID8gdGhpc1t1bml0cyArICdzJ10oKSA6IE5hTjtcbn1cblxuZnVuY3Rpb24gbWFrZUdldHRlcihuYW1lKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNWYWxpZCgpID8gdGhpcy5fZGF0YVtuYW1lXSA6IE5hTjtcbiAgICB9O1xufVxuXG52YXIgbWlsbGlzZWNvbmRzID0gbWFrZUdldHRlcignbWlsbGlzZWNvbmRzJyksXG4gICAgc2Vjb25kcyA9IG1ha2VHZXR0ZXIoJ3NlY29uZHMnKSxcbiAgICBtaW51dGVzID0gbWFrZUdldHRlcignbWludXRlcycpLFxuICAgIGhvdXJzID0gbWFrZUdldHRlcignaG91cnMnKSxcbiAgICBkYXlzID0gbWFrZUdldHRlcignZGF5cycpLFxuICAgIG1vbnRocyA9IG1ha2VHZXR0ZXIoJ21vbnRocycpLFxuICAgIHllYXJzID0gbWFrZUdldHRlcigneWVhcnMnKTtcblxuZXhwb3J0IHsgbWlsbGlzZWNvbmRzLCBzZWNvbmRzLCBtaW51dGVzLCBob3VycywgZGF5cywgbW9udGhzLCB5ZWFycyB9O1xuXG5leHBvcnQgZnVuY3Rpb24gd2Vla3MoKSB7XG4gICAgcmV0dXJuIGFic0Zsb29yKHRoaXMuZGF5cygpIC8gNyk7XG59XG4iLCJpbXBvcnQgeyBjcmVhdGVEdXJhdGlvbiB9IGZyb20gJy4vY3JlYXRlJztcblxudmFyIHJvdW5kID0gTWF0aC5yb3VuZCxcbiAgICB0aHJlc2hvbGRzID0ge1xuICAgICAgICBzczogNDQsIC8vIGEgZmV3IHNlY29uZHMgdG8gc2Vjb25kc1xuICAgICAgICBzOiA0NSwgLy8gc2Vjb25kcyB0byBtaW51dGVcbiAgICAgICAgbTogNDUsIC8vIG1pbnV0ZXMgdG8gaG91clxuICAgICAgICBoOiAyMiwgLy8gaG91cnMgdG8gZGF5XG4gICAgICAgIGQ6IDI2LCAvLyBkYXlzIHRvIG1vbnRoL3dlZWtcbiAgICAgICAgdzogbnVsbCwgLy8gd2Vla3MgdG8gbW9udGhcbiAgICAgICAgTTogMTEsIC8vIG1vbnRocyB0byB5ZWFyXG4gICAgfTtcblxuLy8gaGVscGVyIGZ1bmN0aW9uIGZvciBtb21lbnQuZm4uZnJvbSwgbW9tZW50LmZuLmZyb21Ob3csIGFuZCBtb21lbnQuZHVyYXRpb24uZm4uaHVtYW5pemVcbmZ1bmN0aW9uIHN1YnN0aXR1dGVUaW1lQWdvKHN0cmluZywgbnVtYmVyLCB3aXRob3V0U3VmZml4LCBpc0Z1dHVyZSwgbG9jYWxlKSB7XG4gICAgcmV0dXJuIGxvY2FsZS5yZWxhdGl2ZVRpbWUobnVtYmVyIHx8IDEsICEhd2l0aG91dFN1ZmZpeCwgc3RyaW5nLCBpc0Z1dHVyZSk7XG59XG5cbmZ1bmN0aW9uIHJlbGF0aXZlVGltZShwb3NOZWdEdXJhdGlvbiwgd2l0aG91dFN1ZmZpeCwgdGhyZXNob2xkcywgbG9jYWxlKSB7XG4gICAgdmFyIGR1cmF0aW9uID0gY3JlYXRlRHVyYXRpb24ocG9zTmVnRHVyYXRpb24pLmFicygpLFxuICAgICAgICBzZWNvbmRzID0gcm91bmQoZHVyYXRpb24uYXMoJ3MnKSksXG4gICAgICAgIG1pbnV0ZXMgPSByb3VuZChkdXJhdGlvbi5hcygnbScpKSxcbiAgICAgICAgaG91cnMgPSByb3VuZChkdXJhdGlvbi5hcygnaCcpKSxcbiAgICAgICAgZGF5cyA9IHJvdW5kKGR1cmF0aW9uLmFzKCdkJykpLFxuICAgICAgICBtb250aHMgPSByb3VuZChkdXJhdGlvbi5hcygnTScpKSxcbiAgICAgICAgd2Vla3MgPSByb3VuZChkdXJhdGlvbi5hcygndycpKSxcbiAgICAgICAgeWVhcnMgPSByb3VuZChkdXJhdGlvbi5hcygneScpKSxcbiAgICAgICAgYSA9XG4gICAgICAgICAgICAoc2Vjb25kcyA8PSB0aHJlc2hvbGRzLnNzICYmIFsncycsIHNlY29uZHNdKSB8fFxuICAgICAgICAgICAgKHNlY29uZHMgPCB0aHJlc2hvbGRzLnMgJiYgWydzcycsIHNlY29uZHNdKSB8fFxuICAgICAgICAgICAgKG1pbnV0ZXMgPD0gMSAmJiBbJ20nXSkgfHxcbiAgICAgICAgICAgIChtaW51dGVzIDwgdGhyZXNob2xkcy5tICYmIFsnbW0nLCBtaW51dGVzXSkgfHxcbiAgICAgICAgICAgIChob3VycyA8PSAxICYmIFsnaCddKSB8fFxuICAgICAgICAgICAgKGhvdXJzIDwgdGhyZXNob2xkcy5oICYmIFsnaGgnLCBob3Vyc10pIHx8XG4gICAgICAgICAgICAoZGF5cyA8PSAxICYmIFsnZCddKSB8fFxuICAgICAgICAgICAgKGRheXMgPCB0aHJlc2hvbGRzLmQgJiYgWydkZCcsIGRheXNdKTtcblxuICAgIGlmICh0aHJlc2hvbGRzLncgIT0gbnVsbCkge1xuICAgICAgICBhID1cbiAgICAgICAgICAgIGEgfHxcbiAgICAgICAgICAgICh3ZWVrcyA8PSAxICYmIFsndyddKSB8fFxuICAgICAgICAgICAgKHdlZWtzIDwgdGhyZXNob2xkcy53ICYmIFsnd3cnLCB3ZWVrc10pO1xuICAgIH1cbiAgICBhID0gYSB8fFxuICAgICAgICAobW9udGhzIDw9IDEgJiYgWydNJ10pIHx8XG4gICAgICAgIChtb250aHMgPCB0aHJlc2hvbGRzLk0gJiYgWydNTScsIG1vbnRoc10pIHx8XG4gICAgICAgICh5ZWFycyA8PSAxICYmIFsneSddKSB8fCBbJ3l5JywgeWVhcnNdO1xuXG4gICAgYVsyXSA9IHdpdGhvdXRTdWZmaXg7XG4gICAgYVszXSA9ICtwb3NOZWdEdXJhdGlvbiA+IDA7XG4gICAgYVs0XSA9IGxvY2FsZTtcbiAgICByZXR1cm4gc3Vic3RpdHV0ZVRpbWVBZ28uYXBwbHkobnVsbCwgYSk7XG59XG5cbi8vIFRoaXMgZnVuY3Rpb24gYWxsb3dzIHlvdSB0byBzZXQgdGhlIHJvdW5kaW5nIGZ1bmN0aW9uIGZvciByZWxhdGl2ZSB0aW1lIHN0cmluZ3NcbmV4cG9ydCBmdW5jdGlvbiBnZXRTZXRSZWxhdGl2ZVRpbWVSb3VuZGluZyhyb3VuZGluZ0Z1bmN0aW9uKSB7XG4gICAgaWYgKHJvdW5kaW5nRnVuY3Rpb24gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gcm91bmQ7XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygcm91bmRpbmdGdW5jdGlvbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByb3VuZCA9IHJvdW5kaW5nRnVuY3Rpb247XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5cbi8vIFRoaXMgZnVuY3Rpb24gYWxsb3dzIHlvdSB0byBzZXQgYSB0aHJlc2hvbGQgZm9yIHJlbGF0aXZlIHRpbWUgc3RyaW5nc1xuZXhwb3J0IGZ1bmN0aW9uIGdldFNldFJlbGF0aXZlVGltZVRocmVzaG9sZCh0aHJlc2hvbGQsIGxpbWl0KSB7XG4gICAgaWYgKHRocmVzaG9sZHNbdGhyZXNob2xkXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKGxpbWl0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHRocmVzaG9sZHNbdGhyZXNob2xkXTtcbiAgICB9XG4gICAgdGhyZXNob2xkc1t0aHJlc2hvbGRdID0gbGltaXQ7XG4gICAgaWYgKHRocmVzaG9sZCA9PT0gJ3MnKSB7XG4gICAgICAgIHRocmVzaG9sZHMuc3MgPSBsaW1pdCAtIDE7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaHVtYW5pemUoYXJnV2l0aFN1ZmZpeCwgYXJnVGhyZXNob2xkcykge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLmludmFsaWREYXRlKCk7XG4gICAgfVxuXG4gICAgdmFyIHdpdGhTdWZmaXggPSBmYWxzZSxcbiAgICAgICAgdGggPSB0aHJlc2hvbGRzLFxuICAgICAgICBsb2NhbGUsXG4gICAgICAgIG91dHB1dDtcblxuICAgIGlmICh0eXBlb2YgYXJnV2l0aFN1ZmZpeCA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgYXJnVGhyZXNob2xkcyA9IGFyZ1dpdGhTdWZmaXg7XG4gICAgICAgIGFyZ1dpdGhTdWZmaXggPSBmYWxzZTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBhcmdXaXRoU3VmZml4ID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgd2l0aFN1ZmZpeCA9IGFyZ1dpdGhTdWZmaXg7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgYXJnVGhyZXNob2xkcyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgdGggPSBPYmplY3QuYXNzaWduKHt9LCB0aHJlc2hvbGRzLCBhcmdUaHJlc2hvbGRzKTtcbiAgICAgICAgaWYgKGFyZ1RocmVzaG9sZHMucyAhPSBudWxsICYmIGFyZ1RocmVzaG9sZHMuc3MgPT0gbnVsbCkge1xuICAgICAgICAgICAgdGguc3MgPSBhcmdUaHJlc2hvbGRzLnMgLSAxO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgbG9jYWxlID0gdGhpcy5sb2NhbGVEYXRhKCk7XG4gICAgb3V0cHV0ID0gcmVsYXRpdmVUaW1lKHRoaXMsICF3aXRoU3VmZml4LCB0aCwgbG9jYWxlKTtcblxuICAgIGlmICh3aXRoU3VmZml4KSB7XG4gICAgICAgIG91dHB1dCA9IGxvY2FsZS5wYXN0RnV0dXJlKCt0aGlzLCBvdXRwdXQpO1xuICAgIH1cblxuICAgIHJldHVybiBsb2NhbGUucG9zdGZvcm1hdChvdXRwdXQpO1xufVxuIiwiaW1wb3J0IGFic0Zsb29yIGZyb20gJy4uL3V0aWxzL2Ficy1mbG9vcic7XG52YXIgYWJzID0gTWF0aC5hYnM7XG5cbmZ1bmN0aW9uIHNpZ24oeCkge1xuICAgIHJldHVybiAoeCA+IDApIC0gKHggPCAwKSB8fCAreDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRvSVNPU3RyaW5nKCkge1xuICAgIC8vIGZvciBJU08gc3RyaW5ncyB3ZSBkbyBub3QgdXNlIHRoZSBub3JtYWwgYnViYmxpbmcgcnVsZXM6XG4gICAgLy8gICogbWlsbGlzZWNvbmRzIGJ1YmJsZSB1cCB1bnRpbCB0aGV5IGJlY29tZSBob3Vyc1xuICAgIC8vICAqIGRheXMgZG8gbm90IGJ1YmJsZSBhdCBhbGxcbiAgICAvLyAgKiBtb250aHMgYnViYmxlIHVwIHVudGlsIHRoZXkgYmVjb21lIHllYXJzXG4gICAgLy8gVGhpcyBpcyBiZWNhdXNlIHRoZXJlIGlzIG5vIGNvbnRleHQtZnJlZSBjb252ZXJzaW9uIGJldHdlZW4gaG91cnMgYW5kIGRheXNcbiAgICAvLyAodGhpbmsgb2YgY2xvY2sgY2hhbmdlcylcbiAgICAvLyBhbmQgYWxzbyBub3QgYmV0d2VlbiBkYXlzIGFuZCBtb250aHMgKDI4LTMxIGRheXMgcGVyIG1vbnRoKVxuICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLmludmFsaWREYXRlKCk7XG4gICAgfVxuXG4gICAgdmFyIHNlY29uZHMgPSBhYnModGhpcy5fbWlsbGlzZWNvbmRzKSAvIDEwMDAsXG4gICAgICAgIGRheXMgPSBhYnModGhpcy5fZGF5cyksXG4gICAgICAgIG1vbnRocyA9IGFicyh0aGlzLl9tb250aHMpLFxuICAgICAgICBtaW51dGVzLFxuICAgICAgICBob3VycyxcbiAgICAgICAgeWVhcnMsXG4gICAgICAgIHMsXG4gICAgICAgIHRvdGFsID0gdGhpcy5hc1NlY29uZHMoKSxcbiAgICAgICAgdG90YWxTaWduLFxuICAgICAgICB5bVNpZ24sXG4gICAgICAgIGRheXNTaWduLFxuICAgICAgICBobXNTaWduO1xuXG4gICAgaWYgKCF0b3RhbCkge1xuICAgICAgICAvLyB0aGlzIGlzIHRoZSBzYW1lIGFzIEMjJ3MgKE5vZGEpIGFuZCBweXRob24gKGlzb2RhdGUpLi4uXG4gICAgICAgIC8vIGJ1dCBub3Qgb3RoZXIgSlMgKGdvb2cuZGF0ZSlcbiAgICAgICAgcmV0dXJuICdQMEQnO1xuICAgIH1cblxuICAgIC8vIDM2MDAgc2Vjb25kcyAtPiA2MCBtaW51dGVzIC0+IDEgaG91clxuICAgIG1pbnV0ZXMgPSBhYnNGbG9vcihzZWNvbmRzIC8gNjApO1xuICAgIGhvdXJzID0gYWJzRmxvb3IobWludXRlcyAvIDYwKTtcbiAgICBzZWNvbmRzICU9IDYwO1xuICAgIG1pbnV0ZXMgJT0gNjA7XG5cbiAgICAvLyAxMiBtb250aHMgLT4gMSB5ZWFyXG4gICAgeWVhcnMgPSBhYnNGbG9vcihtb250aHMgLyAxMik7XG4gICAgbW9udGhzICU9IDEyO1xuXG4gICAgLy8gaW5zcGlyZWQgYnkgaHR0cHM6Ly9naXRodWIuY29tL2RvcmRpbGxlL21vbWVudC1pc29kdXJhdGlvbi9ibG9iL21hc3Rlci9tb21lbnQuaXNvZHVyYXRpb24uanNcbiAgICBzID0gc2Vjb25kcyA/IHNlY29uZHMudG9GaXhlZCgzKS5yZXBsYWNlKC9cXC4/MCskLywgJycpIDogJyc7XG5cbiAgICB0b3RhbFNpZ24gPSB0b3RhbCA8IDAgPyAnLScgOiAnJztcbiAgICB5bVNpZ24gPSBzaWduKHRoaXMuX21vbnRocykgIT09IHNpZ24odG90YWwpID8gJy0nIDogJyc7XG4gICAgZGF5c1NpZ24gPSBzaWduKHRoaXMuX2RheXMpICE9PSBzaWduKHRvdGFsKSA/ICctJyA6ICcnO1xuICAgIGhtc1NpZ24gPSBzaWduKHRoaXMuX21pbGxpc2Vjb25kcykgIT09IHNpZ24odG90YWwpID8gJy0nIDogJyc7XG5cbiAgICByZXR1cm4gKFxuICAgICAgICB0b3RhbFNpZ24gK1xuICAgICAgICAnUCcgK1xuICAgICAgICAoeWVhcnMgPyB5bVNpZ24gKyB5ZWFycyArICdZJyA6ICcnKSArXG4gICAgICAgIChtb250aHMgPyB5bVNpZ24gKyBtb250aHMgKyAnTScgOiAnJykgK1xuICAgICAgICAoZGF5cyA/IGRheXNTaWduICsgZGF5cyArICdEJyA6ICcnKSArXG4gICAgICAgIChob3VycyB8fCBtaW51dGVzIHx8IHNlY29uZHMgPyAnVCcgOiAnJykgK1xuICAgICAgICAoaG91cnMgPyBobXNTaWduICsgaG91cnMgKyAnSCcgOiAnJykgK1xuICAgICAgICAobWludXRlcyA/IGhtc1NpZ24gKyBtaW51dGVzICsgJ00nIDogJycpICtcbiAgICAgICAgKHNlY29uZHMgPyBobXNTaWduICsgcyArICdTJyA6ICcnKVxuICAgICk7XG59XG4iLCJpbXBvcnQgeyBEdXJhdGlvbiB9IGZyb20gJy4vY29uc3RydWN0b3InO1xuXG52YXIgcHJvdG8gPSBEdXJhdGlvbi5wcm90b3R5cGU7XG5cbmltcG9ydCB7IGFicyB9IGZyb20gJy4vYWJzJztcbmltcG9ydCB7IGFkZCwgc3VidHJhY3QgfSBmcm9tICcuL2FkZC1zdWJ0cmFjdCc7XG5pbXBvcnQge1xuICAgIGFzLFxuICAgIGFzTWlsbGlzZWNvbmRzLFxuICAgIGFzU2Vjb25kcyxcbiAgICBhc01pbnV0ZXMsXG4gICAgYXNIb3VycyxcbiAgICBhc0RheXMsXG4gICAgYXNXZWVrcyxcbiAgICBhc01vbnRocyxcbiAgICBhc1F1YXJ0ZXJzLFxuICAgIGFzWWVhcnMsXG4gICAgdmFsdWVPZixcbn0gZnJvbSAnLi9hcyc7XG5pbXBvcnQgeyBidWJibGUgfSBmcm9tICcuL2J1YmJsZSc7XG5pbXBvcnQgeyBjbG9uZSB9IGZyb20gJy4vY2xvbmUnO1xuaW1wb3J0IHtcbiAgICBnZXQsXG4gICAgbWlsbGlzZWNvbmRzLFxuICAgIHNlY29uZHMsXG4gICAgbWludXRlcyxcbiAgICBob3VycyxcbiAgICBkYXlzLFxuICAgIG1vbnRocyxcbiAgICB5ZWFycyxcbiAgICB3ZWVrcyxcbn0gZnJvbSAnLi9nZXQnO1xuaW1wb3J0IHsgaHVtYW5pemUgfSBmcm9tICcuL2h1bWFuaXplJztcbmltcG9ydCB7IHRvSVNPU3RyaW5nIH0gZnJvbSAnLi9pc28tc3RyaW5nJztcbmltcG9ydCB7IGxhbmcsIGxvY2FsZSwgbG9jYWxlRGF0YSB9IGZyb20gJy4uL21vbWVudC9sb2NhbGUnO1xuaW1wb3J0IHsgaXNWYWxpZCB9IGZyb20gJy4vdmFsaWQnO1xuXG5wcm90by5pc1ZhbGlkID0gaXNWYWxpZDtcbnByb3RvLmFicyA9IGFicztcbnByb3RvLmFkZCA9IGFkZDtcbnByb3RvLnN1YnRyYWN0ID0gc3VidHJhY3Q7XG5wcm90by5hcyA9IGFzO1xucHJvdG8uYXNNaWxsaXNlY29uZHMgPSBhc01pbGxpc2Vjb25kcztcbnByb3RvLmFzU2Vjb25kcyA9IGFzU2Vjb25kcztcbnByb3RvLmFzTWludXRlcyA9IGFzTWludXRlcztcbnByb3RvLmFzSG91cnMgPSBhc0hvdXJzO1xucHJvdG8uYXNEYXlzID0gYXNEYXlzO1xucHJvdG8uYXNXZWVrcyA9IGFzV2Vla3M7XG5wcm90by5hc01vbnRocyA9IGFzTW9udGhzO1xucHJvdG8uYXNRdWFydGVycyA9IGFzUXVhcnRlcnM7XG5wcm90by5hc1llYXJzID0gYXNZZWFycztcbnByb3RvLnZhbHVlT2YgPSB2YWx1ZU9mO1xucHJvdG8uX2J1YmJsZSA9IGJ1YmJsZTtcbnByb3RvLmNsb25lID0gY2xvbmU7XG5wcm90by5nZXQgPSBnZXQ7XG5wcm90by5taWxsaXNlY29uZHMgPSBtaWxsaXNlY29uZHM7XG5wcm90by5zZWNvbmRzID0gc2Vjb25kcztcbnByb3RvLm1pbnV0ZXMgPSBtaW51dGVzO1xucHJvdG8uaG91cnMgPSBob3VycztcbnByb3RvLmRheXMgPSBkYXlzO1xucHJvdG8ud2Vla3MgPSB3ZWVrcztcbnByb3RvLm1vbnRocyA9IG1vbnRocztcbnByb3RvLnllYXJzID0geWVhcnM7XG5wcm90by5odW1hbml6ZSA9IGh1bWFuaXplO1xucHJvdG8udG9JU09TdHJpbmcgPSB0b0lTT1N0cmluZztcbnByb3RvLnRvU3RyaW5nID0gdG9JU09TdHJpbmc7XG5wcm90by50b0pTT04gPSB0b0lTT1N0cmluZztcbnByb3RvLmxvY2FsZSA9IGxvY2FsZTtcbnByb3RvLmxvY2FsZURhdGEgPSBsb2NhbGVEYXRhO1xuXG4vLyBEZXByZWNhdGlvbnNcbmltcG9ydCB7IGRlcHJlY2F0ZSB9IGZyb20gJy4uL3V0aWxzL2RlcHJlY2F0ZSc7XG5cbnByb3RvLnRvSXNvU3RyaW5nID0gZGVwcmVjYXRlKFxuICAgICd0b0lzb1N0cmluZygpIGlzIGRlcHJlY2F0ZWQuIFBsZWFzZSB1c2UgdG9JU09TdHJpbmcoKSBpbnN0ZWFkIChub3RpY2UgdGhlIGNhcGl0YWxzKScsXG4gICAgdG9JU09TdHJpbmdcbik7XG5wcm90by5sYW5nID0gbGFuZztcbiIsImltcG9ydCB7IGFkZEZvcm1hdFRva2VuIH0gZnJvbSAnLi4vZm9ybWF0L2Zvcm1hdCc7XG5pbXBvcnQgeyBhZGRSZWdleFRva2VuLCBtYXRjaFRpbWVzdGFtcCwgbWF0Y2hTaWduZWQgfSBmcm9tICcuLi9wYXJzZS9yZWdleCc7XG5pbXBvcnQgeyBhZGRQYXJzZVRva2VuIH0gZnJvbSAnLi4vcGFyc2UvdG9rZW4nO1xuaW1wb3J0IHRvSW50IGZyb20gJy4uL3V0aWxzL3RvLWludCc7XG5cbi8vIEZPUk1BVFRJTkdcblxuYWRkRm9ybWF0VG9rZW4oJ1gnLCAwLCAwLCAndW5peCcpO1xuYWRkRm9ybWF0VG9rZW4oJ3gnLCAwLCAwLCAndmFsdWVPZicpO1xuXG4vLyBQQVJTSU5HXG5cbmFkZFJlZ2V4VG9rZW4oJ3gnLCBtYXRjaFNpZ25lZCk7XG5hZGRSZWdleFRva2VuKCdYJywgbWF0Y2hUaW1lc3RhbXApO1xuYWRkUGFyc2VUb2tlbignWCcsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgIGNvbmZpZy5fZCA9IG5ldyBEYXRlKHBhcnNlRmxvYXQoaW5wdXQpICogMTAwMCk7XG59KTtcbmFkZFBhcnNlVG9rZW4oJ3gnLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICBjb25maWcuX2QgPSBuZXcgRGF0ZSh0b0ludChpbnB1dCkpO1xufSk7XG4iLCIvLyEgbW9tZW50LmpzXG4vLyEgdmVyc2lvbiA6IDIuMzAuMVxuLy8hIGF1dGhvcnMgOiBUaW0gV29vZCwgSXNrcmVuIENoZXJuZXYsIE1vbWVudC5qcyBjb250cmlidXRvcnNcbi8vISBsaWNlbnNlIDogTUlUXG4vLyEgbW9tZW50anMuY29tXG5cbmltcG9ydCB7IGhvb2tzIGFzIG1vbWVudCwgc2V0SG9va0NhbGxiYWNrIH0gZnJvbSAnLi9saWIvdXRpbHMvaG9va3MnO1xuXG5tb21lbnQudmVyc2lvbiA9ICcyLjMwLjEnO1xuXG5pbXBvcnQge1xuICAgIG1pbixcbiAgICBtYXgsXG4gICAgbm93LFxuICAgIGlzTW9tZW50LFxuICAgIG1vbWVudFByb3RvdHlwZSBhcyBmbixcbiAgICBjcmVhdGVVVEMgYXMgdXRjLFxuICAgIGNyZWF0ZVVuaXggYXMgdW5peCxcbiAgICBjcmVhdGVMb2NhbCBhcyBsb2NhbCxcbiAgICBjcmVhdGVJbnZhbGlkIGFzIGludmFsaWQsXG4gICAgY3JlYXRlSW5ab25lIGFzIHBhcnNlWm9uZSxcbn0gZnJvbSAnLi9saWIvbW9tZW50L21vbWVudCc7XG5cbmltcG9ydCB7IGdldENhbGVuZGFyRm9ybWF0IH0gZnJvbSAnLi9saWIvbW9tZW50L2NhbGVuZGFyJztcblxuaW1wb3J0IHtcbiAgICBkZWZpbmVMb2NhbGUsXG4gICAgdXBkYXRlTG9jYWxlLFxuICAgIGdldFNldEdsb2JhbExvY2FsZSBhcyBsb2NhbGUsXG4gICAgZ2V0TG9jYWxlIGFzIGxvY2FsZURhdGEsXG4gICAgbGlzdExvY2FsZXMgYXMgbG9jYWxlcyxcbiAgICBsaXN0TW9udGhzIGFzIG1vbnRocyxcbiAgICBsaXN0TW9udGhzU2hvcnQgYXMgbW9udGhzU2hvcnQsXG4gICAgbGlzdFdlZWtkYXlzIGFzIHdlZWtkYXlzLFxuICAgIGxpc3RXZWVrZGF5c01pbiBhcyB3ZWVrZGF5c01pbixcbiAgICBsaXN0V2Vla2RheXNTaG9ydCBhcyB3ZWVrZGF5c1Nob3J0LFxufSBmcm9tICcuL2xpYi9sb2NhbGUvbG9jYWxlJztcblxuaW1wb3J0IHtcbiAgICBpc0R1cmF0aW9uLFxuICAgIGNyZWF0ZUR1cmF0aW9uIGFzIGR1cmF0aW9uLFxuICAgIGdldFNldFJlbGF0aXZlVGltZVJvdW5kaW5nIGFzIHJlbGF0aXZlVGltZVJvdW5kaW5nLFxuICAgIGdldFNldFJlbGF0aXZlVGltZVRocmVzaG9sZCBhcyByZWxhdGl2ZVRpbWVUaHJlc2hvbGQsXG59IGZyb20gJy4vbGliL2R1cmF0aW9uL2R1cmF0aW9uJztcblxuaW1wb3J0IHsgbm9ybWFsaXplVW5pdHMgfSBmcm9tICcuL2xpYi91bml0cy91bml0cyc7XG5cbmltcG9ydCBpc0RhdGUgZnJvbSAnLi9saWIvdXRpbHMvaXMtZGF0ZSc7XG5cbnNldEhvb2tDYWxsYmFjayhsb2NhbCk7XG5cbm1vbWVudC5mbiA9IGZuO1xubW9tZW50Lm1pbiA9IG1pbjtcbm1vbWVudC5tYXggPSBtYXg7XG5tb21lbnQubm93ID0gbm93O1xubW9tZW50LnV0YyA9IHV0Yztcbm1vbWVudC51bml4ID0gdW5peDtcbm1vbWVudC5tb250aHMgPSBtb250aHM7XG5tb21lbnQuaXNEYXRlID0gaXNEYXRlO1xubW9tZW50LmxvY2FsZSA9IGxvY2FsZTtcbm1vbWVudC5pbnZhbGlkID0gaW52YWxpZDtcbm1vbWVudC5kdXJhdGlvbiA9IGR1cmF0aW9uO1xubW9tZW50LmlzTW9tZW50ID0gaXNNb21lbnQ7XG5tb21lbnQud2Vla2RheXMgPSB3ZWVrZGF5cztcbm1vbWVudC5wYXJzZVpvbmUgPSBwYXJzZVpvbmU7XG5tb21lbnQubG9jYWxlRGF0YSA9IGxvY2FsZURhdGE7XG5tb21lbnQuaXNEdXJhdGlvbiA9IGlzRHVyYXRpb247XG5tb21lbnQubW9udGhzU2hvcnQgPSBtb250aHNTaG9ydDtcbm1vbWVudC53ZWVrZGF5c01pbiA9IHdlZWtkYXlzTWluO1xubW9tZW50LmRlZmluZUxvY2FsZSA9IGRlZmluZUxvY2FsZTtcbm1vbWVudC51cGRhdGVMb2NhbGUgPSB1cGRhdGVMb2NhbGU7XG5tb21lbnQubG9jYWxlcyA9IGxvY2FsZXM7XG5tb21lbnQud2Vla2RheXNTaG9ydCA9IHdlZWtkYXlzU2hvcnQ7XG5tb21lbnQubm9ybWFsaXplVW5pdHMgPSBub3JtYWxpemVVbml0cztcbm1vbWVudC5yZWxhdGl2ZVRpbWVSb3VuZGluZyA9IHJlbGF0aXZlVGltZVJvdW5kaW5nO1xubW9tZW50LnJlbGF0aXZlVGltZVRocmVzaG9sZCA9IHJlbGF0aXZlVGltZVRocmVzaG9sZDtcbm1vbWVudC5jYWxlbmRhckZvcm1hdCA9IGdldENhbGVuZGFyRm9ybWF0O1xubW9tZW50LnByb3RvdHlwZSA9IGZuO1xuXG4vLyBjdXJyZW50bHkgSFRNTDUgaW5wdXQgdHlwZSBvbmx5IHN1cHBvcnRzIDI0LWhvdXIgZm9ybWF0c1xubW9tZW50LkhUTUw1X0ZNVCA9IHtcbiAgICBEQVRFVElNRV9MT0NBTDogJ1lZWVktTU0tRERUSEg6bW0nLCAvLyA8aW5wdXQgdHlwZT1cImRhdGV0aW1lLWxvY2FsXCIgLz5cbiAgICBEQVRFVElNRV9MT0NBTF9TRUNPTkRTOiAnWVlZWS1NTS1ERFRISDptbTpzcycsIC8vIDxpbnB1dCB0eXBlPVwiZGF0ZXRpbWUtbG9jYWxcIiBzdGVwPVwiMVwiIC8+XG4gICAgREFURVRJTUVfTE9DQUxfTVM6ICdZWVlZLU1NLUREVEhIOm1tOnNzLlNTUycsIC8vIDxpbnB1dCB0eXBlPVwiZGF0ZXRpbWUtbG9jYWxcIiBzdGVwPVwiMC4wMDFcIiAvPlxuICAgIERBVEU6ICdZWVlZLU1NLUREJywgLy8gPGlucHV0IHR5cGU9XCJkYXRlXCIgLz5cbiAgICBUSU1FOiAnSEg6bW0nLCAvLyA8aW5wdXQgdHlwZT1cInRpbWVcIiAvPlxuICAgIFRJTUVfU0VDT05EUzogJ0hIOm1tOnNzJywgLy8gPGlucHV0IHR5cGU9XCJ0aW1lXCIgc3RlcD1cIjFcIiAvPlxuICAgIFRJTUVfTVM6ICdISDptbTpzcy5TU1MnLCAvLyA8aW5wdXQgdHlwZT1cInRpbWVcIiBzdGVwPVwiMC4wMDFcIiAvPlxuICAgIFdFRUs6ICdHR0dHLVtXXVdXJywgLy8gPGlucHV0IHR5cGU9XCJ3ZWVrXCIgLz5cbiAgICBNT05USDogJ1lZWVktTU0nLCAvLyA8aW5wdXQgdHlwZT1cIm1vbnRoXCIgLz5cbn07XG5cbmV4cG9ydCBkZWZhdWx0IG1vbWVudDtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBSdXNzaWFuIFtydV1cbi8vISBhdXRob3IgOiBWaWt0b3JtaW5hdG9yIDogaHR0cHM6Ly9naXRodWIuY29tL1Zpa3Rvcm1pbmF0b3Jcbi8vISBhdXRob3IgOiBNZW5lbGlvbiBFbGVuc8O6bGUgOiBodHRwczovL2dpdGh1Yi5jb20vT2lyZVxuLy8hIGF1dGhvciA6INCa0L7RgNC10L3QsdC10YDQsyDQnNCw0YDQuiA6IGh0dHBzOi8vZ2l0aHViLmNvbS9zb2NrZXRwYWlyXG5cbmltcG9ydCBtb21lbnQgZnJvbSAnLi4vbW9tZW50JztcblxuZnVuY3Rpb24gcGx1cmFsKHdvcmQsIG51bSkge1xuICAgIHZhciBmb3JtcyA9IHdvcmQuc3BsaXQoJ18nKTtcbiAgICByZXR1cm4gbnVtICUgMTAgPT09IDEgJiYgbnVtICUgMTAwICE9PSAxMVxuICAgICAgICA/IGZvcm1zWzBdXG4gICAgICAgIDogbnVtICUgMTAgPj0gMiAmJiBudW0gJSAxMCA8PSA0ICYmIChudW0gJSAxMDAgPCAxMCB8fCBudW0gJSAxMDAgPj0gMjApXG4gICAgICAgICAgPyBmb3Jtc1sxXVxuICAgICAgICAgIDogZm9ybXNbMl07XG59XG5mdW5jdGlvbiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsKG51bWJlciwgd2l0aG91dFN1ZmZpeCwga2V5KSB7XG4gICAgdmFyIGZvcm1hdCA9IHtcbiAgICAgICAgc3M6IHdpdGhvdXRTdWZmaXggPyAn0YHQtdC60YPQvdC00LBf0YHQtdC60YPQvdC00Ytf0YHQtdC60YPQvdC0JyA6ICfRgdC10LrRg9C90LTRg1/RgdC10LrRg9C90LTRi1/RgdC10LrRg9C90LQnLFxuICAgICAgICBtbTogd2l0aG91dFN1ZmZpeCA/ICfQvNC40L3Rg9GC0LBf0LzQuNC90YPRgtGLX9C80LjQvdGD0YInIDogJ9C80LjQvdGD0YLRg1/QvNC40L3Rg9GC0Ytf0LzQuNC90YPRgicsXG4gICAgICAgIGhoOiAn0YfQsNGBX9GH0LDRgdCwX9GH0LDRgdC+0LInLFxuICAgICAgICBkZDogJ9C00LXQvdGMX9C00L3Rj1/QtNC90LXQuScsXG4gICAgICAgIHd3OiAn0L3QtdC00LXQu9GPX9C90LXQtNC10LvQuF/QvdC10LTQtdC70YwnLFxuICAgICAgICBNTTogJ9C80LXRgdGP0YZf0LzQtdGB0Y/RhtCwX9C80LXRgdGP0YbQtdCyJyxcbiAgICAgICAgeXk6ICfQs9C+0LRf0LPQvtC00LBf0LvQtdGCJyxcbiAgICB9O1xuICAgIGlmIChrZXkgPT09ICdtJykge1xuICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCA/ICfQvNC40L3Rg9GC0LAnIDogJ9C80LjQvdGD0YLRgyc7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG51bWJlciArICcgJyArIHBsdXJhbChmb3JtYXRba2V5XSwgK251bWJlcik7XG4gICAgfVxufVxudmFyIG1vbnRoc1BhcnNlID0gW1xuICAgIC9e0Y/QvdCyL2ksXG4gICAgL17RhNC10LIvaSxcbiAgICAvXtC80LDRgC9pLFxuICAgIC9e0LDQv9GAL2ksXG4gICAgL17QvNCwW9C50Y9dL2ksXG4gICAgL17QuNGO0L0vaSxcbiAgICAvXtC40Y7Quy9pLFxuICAgIC9e0LDQstCzL2ksXG4gICAgL17RgdC10L0vaSxcbiAgICAvXtC+0LrRgi9pLFxuICAgIC9e0L3QvtGPL2ksXG4gICAgL17QtNC10LovaSxcbl07XG5cbi8vIGh0dHA6Ly9uZXcuZ3JhbW90YS5ydS9zcHJhdmthL3J1bGVzLzEzOS1wcm9wIDogwqcgMTAzXG4vLyDQodC+0LrRgNCw0YnQtdC90LjRjyDQvNC10YHRj9GG0LXQsjogaHR0cDovL25ldy5ncmFtb3RhLnJ1L3NwcmF2a2EvYnVyby9zZWFyY2gtYW5zd2VyP3M9MjQyNjM3XG4vLyBDTERSIGRhdGE6ICAgICAgICAgIGh0dHA6Ly93d3cudW5pY29kZS5vcmcvY2xkci9jaGFydHMvMjgvc3VtbWFyeS9ydS5odG1sIzE3NTNcbmV4cG9ydCBkZWZhdWx0IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3J1Jywge1xuICAgIG1vbnRoczoge1xuICAgICAgICBmb3JtYXQ6ICfRj9C90LLQsNGA0Y9f0YTQtdCy0YDQsNC70Y9f0LzQsNGA0YLQsF/QsNC/0YDQtdC70Y9f0LzQsNGPX9C40Y7QvdGPX9C40Y7Qu9GPX9Cw0LLQs9GD0YHRgtCwX9GB0LXQvdGC0Y/QsdGA0Y9f0L7QutGC0Y/QsdGA0Y9f0L3QvtGP0LHRgNGPX9C00LXQutCw0LHRgNGPJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBzdGFuZGFsb25lOlxuICAgICAgICAgICAgJ9GP0L3QstCw0YDRjF/RhNC10LLRgNCw0LvRjF/QvNCw0YDRgl/QsNC/0YDQtdC70Yxf0LzQsNC5X9C40Y7QvdGMX9C40Y7Qu9GMX9Cw0LLQs9GD0YHRgl/RgdC10L3RgtGP0LHRgNGMX9C+0LrRgtGP0LHRgNGMX9C90L7Rj9Cx0YDRjF/QtNC10LrQsNCx0YDRjCcuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgIH0sXG4gICAgbW9udGhzU2hvcnQ6IHtcbiAgICAgICAgLy8g0L/QviBDTERSINC40LzQtdC90L3QviBcItC40Y7Quy5cIiDQuCBcItC40Y7QvS5cIiwg0L3QviDQutCw0LrQvtC5INGB0LzRi9GB0Lsg0LzQtdC90Y/RgtGMINCx0YPQutCy0YMg0L3QsCDRgtC+0YfQutGDP1xuICAgICAgICBmb3JtYXQ6ICfRj9C90LIuX9GE0LXQstGALl/QvNCw0YAuX9Cw0L/RgC5f0LzQsNGPX9C40Y7QvdGPX9C40Y7Qu9GPX9Cw0LLQsy5f0YHQtdC90YIuX9C+0LrRgi5f0L3QvtGP0LEuX9C00LXQui4nLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIHN0YW5kYWxvbmU6XG4gICAgICAgICAgICAn0Y/QvdCyLl/RhNC10LLRgC5f0LzQsNGA0YJf0LDQv9GALl/QvNCw0Llf0LjRjtC90Yxf0LjRjtC70Yxf0LDQstCzLl/RgdC10L3Rgi5f0L7QutGCLl/QvdC+0Y/QsS5f0LTQtdC6Licuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgIH0sXG4gICAgd2Vla2RheXM6IHtcbiAgICAgICAgc3RhbmRhbG9uZTpcbiAgICAgICAgICAgICfQstC+0YHQutGA0LXRgdC10L3RjNC1X9C/0L7QvdC10LTQtdC70YzQvdC40Lpf0LLRgtC+0YDQvdC40Lpf0YHRgNC10LTQsF/Rh9C10YLQstC10YDQs1/Qv9GP0YLQvdC40YbQsF/RgdGD0LHQsdC+0YLQsCcuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICBmb3JtYXQ6ICfQstC+0YHQutGA0LXRgdC10L3RjNC1X9C/0L7QvdC10LTQtdC70YzQvdC40Lpf0LLRgtC+0YDQvdC40Lpf0YHRgNC10LTRg1/Rh9C10YLQstC10YDQs1/Qv9GP0YLQvdC40YbRg1/RgdGD0LHQsdC+0YLRgycuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgaXNGb3JtYXQ6IC9cXFsgP1vQktCyXSA/KD860L/RgNC+0YjQu9GD0Y580YHQu9C10LTRg9GO0YnRg9GOfNGN0YLRgyk/ID9dID9kZGRkLyxcbiAgICB9LFxuICAgIHdlZWtkYXlzU2hvcnQ6ICfQstGBX9C/0L1f0LLRgl/RgdGAX9GH0YJf0L/Rgl/RgdCxJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzTWluOiAn0LLRgV/Qv9C9X9Cy0YJf0YHRgF/Rh9GCX9C/0YJf0YHQsScuc3BsaXQoJ18nKSxcbiAgICBtb250aHNQYXJzZTogbW9udGhzUGFyc2UsXG4gICAgbG9uZ01vbnRoc1BhcnNlOiBtb250aHNQYXJzZSxcbiAgICBzaG9ydE1vbnRoc1BhcnNlOiBtb250aHNQYXJzZSxcblxuICAgIC8vINC/0L7Qu9C90YvQtSDQvdCw0LfQstCw0L3QuNGPINGBINC/0LDQtNC10LbQsNC80LgsINC/0L4g0YLRgNC4INCx0YPQutCy0YssINC00LvRjyDQvdC10LrQvtGC0L7RgNGL0YUsINC/0L4gNCDQsdGD0LrQstGLLCDRgdC+0LrRgNCw0YnQtdC90LjRjyDRgSDRgtC+0YfQutC+0Lkg0Lgg0LHQtdC3INGC0L7Rh9C60LhcbiAgICBtb250aHNSZWdleDpcbiAgICAgICAgL14o0Y/QvdCy0LDRgFvRjNGPXXzRj9C90LJcXC4/fNGE0LXQstGA0LDQu1vRjNGPXXzRhNC10LLRgD9cXC4/fNC80LDRgNGC0LA/fNC80LDRgFxcLj980LDQv9GA0LXQu1vRjNGPXXzQsNC/0YBcXC4/fNC80LBb0LnRj1180LjRjtC9W9GM0Y9dfNC40Y7QvVxcLj980LjRjtC7W9GM0Y9dfNC40Y7Qu1xcLj980LDQstCz0YPRgdGC0LA/fNCw0LLQs1xcLj980YHQtdC90YLRj9Cx0YBb0YzRj1180YHQtdC90YI/XFwuP3zQvtC60YLRj9Cx0YBb0YzRj1180L7QutGCXFwuP3zQvdC+0Y/QsdGAW9GM0Y9dfNC90L7Rj9CxP1xcLj980LTQtdC60LDQsdGAW9GM0Y9dfNC00LXQulxcLj8pL2ksXG5cbiAgICAvLyDQutC+0L/QuNGPINC/0YDQtdC00YvQtNGD0YnQtdCz0L5cbiAgICBtb250aHNTaG9ydFJlZ2V4OlxuICAgICAgICAvXijRj9C90LLQsNGAW9GM0Y9dfNGP0L3QslxcLj980YTQtdCy0YDQsNC7W9GM0Y9dfNGE0LXQstGAP1xcLj980LzQsNGA0YLQsD980LzQsNGAXFwuP3zQsNC/0YDQtdC7W9GM0Y9dfNCw0L/RgFxcLj980LzQsFvQudGPXXzQuNGO0L1b0YzRj1180LjRjtC9XFwuP3zQuNGO0Ltb0YzRj1180LjRjtC7XFwuP3zQsNCy0LPRg9GB0YLQsD980LDQstCzXFwuP3zRgdC10L3RgtGP0LHRgFvRjNGPXXzRgdC10L3Rgj9cXC4/fNC+0LrRgtGP0LHRgFvRjNGPXXzQvtC60YJcXC4/fNC90L7Rj9Cx0YBb0YzRj1180L3QvtGP0LE/XFwuP3zQtNC10LrQsNCx0YBb0YzRj1180LTQtdC6XFwuPykvaSxcblxuICAgIC8vINC/0L7Qu9C90YvQtSDQvdCw0LfQstCw0L3QuNGPINGBINC/0LDQtNC10LbQsNC80LhcbiAgICBtb250aHNTdHJpY3RSZWdleDpcbiAgICAgICAgL14o0Y/QvdCy0LDRgFvRj9GMXXzRhNC10LLRgNCw0Ltb0Y/RjF180LzQsNGA0YLQsD980LDQv9GA0LXQu1vRj9GMXXzQvNCwW9GP0LldfNC40Y7QvVvRj9GMXXzQuNGO0Ltb0Y/RjF180LDQstCz0YPRgdGC0LA/fNGB0LXQvdGC0Y/QsdGAW9GP0YxdfNC+0LrRgtGP0LHRgFvRj9GMXXzQvdC+0Y/QsdGAW9GP0YxdfNC00LXQutCw0LHRgFvRj9GMXSkvaSxcblxuICAgIC8vINCS0YvRgNCw0LbQtdC90LjQtSwg0LrQvtGC0L7RgNC+0LUg0YHQvtC+0YLQstC10YLRgdGC0LLRg9C10YIg0YLQvtC70YzQutC+INGB0L7QutGA0LDRidGR0L3QvdGL0Lwg0YTQvtGA0LzQsNC8XG4gICAgbW9udGhzU2hvcnRTdHJpY3RSZWdleDpcbiAgICAgICAgL14o0Y/QvdCyXFwufNGE0LXQstGAP1xcLnzQvNCw0YBb0YIuXXzQsNC/0YBcXC580LzQsFvRj9C5XXzQuNGO0L1b0YzRjy5dfNC40Y7Qu1vRjNGPLl180LDQstCzXFwufNGB0LXQvdGCP1xcLnzQvtC60YJcXC580L3QvtGP0LE/XFwufNC00LXQulxcLikvaSxcbiAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICBMVDogJ0g6bW0nLFxuICAgICAgICBMVFM6ICdIOm1tOnNzJyxcbiAgICAgICAgTDogJ0RELk1NLllZWVknLFxuICAgICAgICBMTDogJ0QgTU1NTSBZWVlZINCzLicsXG4gICAgICAgIExMTDogJ0QgTU1NTSBZWVlZINCzLiwgSDptbScsXG4gICAgICAgIExMTEw6ICdkZGRkLCBEIE1NTU0gWVlZWSDQsy4sIEg6bW0nLFxuICAgIH0sXG4gICAgY2FsZW5kYXI6IHtcbiAgICAgICAgc2FtZURheTogJ1vQodC10LPQvtC00L3Rjywg0LJdIExUJyxcbiAgICAgICAgbmV4dERheTogJ1vQl9Cw0LLRgtGA0LAsINCyXSBMVCcsXG4gICAgICAgIGxhc3REYXk6ICdb0JLRh9C10YDQsCwg0LJdIExUJyxcbiAgICAgICAgbmV4dFdlZWs6IGZ1bmN0aW9uIChub3cpIHtcbiAgICAgICAgICAgIGlmIChub3cud2VlaygpICE9PSB0aGlzLndlZWsoKSkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodGhpcy5kYXkoKSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1vQkiDRgdC70LXQtNGD0Y7RidC10LVdIGRkZGQsIFvQsl0gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdb0JIg0YHQu9C10LTRg9GO0YnQuNC5XSBkZGRkLCBb0LJdIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW9CSINGB0LvQtdC00YPRjtGJ0YPRjl0gZGRkZCwgW9CyXSBMVCc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5kYXkoKSA9PT0gMikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1vQktC+XSBkZGRkLCBb0LJdIExUJztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1vQkl0gZGRkZCwgW9CyXSBMVCc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBsYXN0V2VlazogZnVuY3Rpb24gKG5vdykge1xuICAgICAgICAgICAgaWYgKG5vdy53ZWVrKCkgIT09IHRoaXMud2VlaygpKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLmRheSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW9CSINC/0YDQvtGI0LvQvtC1XSBkZGRkLCBb0LJdIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW9CSINC/0YDQvtGI0LvRi9C5XSBkZGRkLCBb0LJdIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW9CSINC/0YDQvtGI0LvRg9GOXSBkZGRkLCBb0LJdIExUJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmRheSgpID09PSAyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnW9CS0L5dIGRkZGQsIFvQsl0gTFQnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnW9CSXSBkZGRkLCBb0LJdIExUJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgfSxcbiAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgZnV0dXJlOiAn0YfQtdGA0LXQtyAlcycsXG4gICAgICAgIHBhc3Q6ICclcyDQvdCw0LfQsNC0JyxcbiAgICAgICAgczogJ9C90LXRgdC60L7Qu9GM0LrQviDRgdC10LrRg9C90LQnLFxuICAgICAgICBzczogcmVsYXRpdmVUaW1lV2l0aFBsdXJhbCxcbiAgICAgICAgbTogcmVsYXRpdmVUaW1lV2l0aFBsdXJhbCxcbiAgICAgICAgbW06IHJlbGF0aXZlVGltZVdpdGhQbHVyYWwsXG4gICAgICAgIGg6ICfRh9Cw0YEnLFxuICAgICAgICBoaDogcmVsYXRpdmVUaW1lV2l0aFBsdXJhbCxcbiAgICAgICAgZDogJ9C00LXQvdGMJyxcbiAgICAgICAgZGQ6IHJlbGF0aXZlVGltZVdpdGhQbHVyYWwsXG4gICAgICAgIHc6ICfQvdC10LTQtdC70Y8nLFxuICAgICAgICB3dzogcmVsYXRpdmVUaW1lV2l0aFBsdXJhbCxcbiAgICAgICAgTTogJ9C80LXRgdGP0YYnLFxuICAgICAgICBNTTogcmVsYXRpdmVUaW1lV2l0aFBsdXJhbCxcbiAgICAgICAgeTogJ9Cz0L7QtCcsXG4gICAgICAgIHl5OiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsLFxuICAgIH0sXG4gICAgbWVyaWRpZW1QYXJzZTogL9C90L7Rh9C4fNGD0YLRgNCwfNC00L3Rj3zQstC10YfQtdGA0LAvaSxcbiAgICBpc1BNOiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIC9eKNC00L3Rj3zQstC10YfQtdGA0LApJC8udGVzdChpbnB1dCk7XG4gICAgfSxcbiAgICBtZXJpZGllbTogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICBpZiAoaG91ciA8IDQpIHtcbiAgICAgICAgICAgIHJldHVybiAn0L3QvtGH0LgnO1xuICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxMikge1xuICAgICAgICAgICAgcmV0dXJuICfRg9GC0YDQsCc7XG4gICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDE3KSB7XG4gICAgICAgICAgICByZXR1cm4gJ9C00L3Rjyc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gJ9Cy0LXRh9C10YDQsCc7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfS0o0Ll80LPQvnzRjykvLFxuICAgIG9yZGluYWw6IGZ1bmN0aW9uIChudW1iZXIsIHBlcmlvZCkge1xuICAgICAgICBzd2l0Y2ggKHBlcmlvZCkge1xuICAgICAgICAgICAgY2FzZSAnTSc6XG4gICAgICAgICAgICBjYXNlICdkJzpcbiAgICAgICAgICAgIGNhc2UgJ0RERCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICct0LknO1xuICAgICAgICAgICAgY2FzZSAnRCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICct0LPQvic7XG4gICAgICAgICAgICBjYXNlICd3JzpcbiAgICAgICAgICAgIGNhc2UgJ1cnOlxuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnLdGPJztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlcjtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgd2Vlazoge1xuICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICBkb3k6IDQsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICB9LFxufSk7XG4iLCJcbmltcG9ydCBDb2x1bW4gZnJvbSBcIi4uL2Fic3RyYWN0L0NvbHVtblwiO1xuaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQvc3JjL21vbWVudCc7XG5pbXBvcnQgJ21vbWVudC9zcmMvbG9jYWxlL3J1J1xuXG5cblxuY2xhc3MgQ29sdW1uc0RhdGVIdW1hbiBleHRlbmRzIENvbHVtbiB7XG5cbiAgICBfbGFuZyA9IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiDQmNC90LjRhtC40LDQu9C40LfQsNGG0LjRj1xuICAgICAqIEBwYXJhbSB7VGFibGVJbnN0YW5jZX0gdGFibGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gICAgICAgICAgICAgIG9wdGlvbnNcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcih0YWJsZSwgb3B0aW9ucykge1xuXG4gICAgICAgIG9wdGlvbnMgPSAkLmV4dGVuZCh0cnVlLCB7XG4gICAgICAgICAgICB0eXBlOiAnZGF0ZUh1bWFuJyxcbiAgICAgICAgICAgIGZpZWxkOiBudWxsLFxuICAgICAgICAgICAgbGFiZWw6IG51bGwsXG4gICAgICAgICAgICBzaG93OiB0cnVlLFxuICAgICAgICAgICAgd2lkdGg6IG51bGwsXG4gICAgICAgICAgICBhdHRyOiB7fSxcbiAgICAgICAgICAgIGF0dHJIZWFkZXI6IHt9LFxuICAgICAgICAgICAgcmVuZGVyOiBudWxsXG4gICAgICAgIH0sIG9wdGlvbnMpO1xuXG4gICAgICAgIHN1cGVyKHRhYmxlLCBvcHRpb25zKTtcblxuICAgICAgICB0aGlzLl9sYW5nID0gdGFibGUuZ2V0T3B0aW9ucygpLmxhbmc7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiDQpNC+0YDQvNC40YDQvtCy0LDQvdC40LUg0LrQvtC90YLQtdC90YLQsFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfG51bWJlcnxEYXRlfSBjb250ZW50XG4gICAgICogQHBhcmFtIHtvYmplY3R9IHJlY29yZFxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAgICovXG4gICAgcmVuZGVyKGNvbnRlbnQsIHJlY29yZCkge1xuXG4gICAgICAgIGlmIChbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiBjb250ZW50KSA8IDAgfHwgISAoY29udGVudCBpbnN0YW5jZW9mIERhdGUpKSB7XG4gICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgIH1cblxuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAoY29udGVudCAhPT0gJycpIHtcbiAgICAgICAgICAgICAgICBsZXQgZGF0ZUNvbnRlbnQgPSBjb250ZW50IGluc3RhbmNlb2YgRGF0ZSA/IGNvbnRlbnQgOiBuZXcgRGF0ZShjb250ZW50KTtcbiAgICAgICAgICAgICAgICBsZXQgZGF0ZUZvcm1hdCAgPSBtb21lbnQoZGF0ZUNvbnRlbnQpLmZvcm1hdCgnTU0uREQueXl5eSBISDptbTpzcycpO1xuXG4gICAgICAgICAgICAgICAgY29udGVudCA9IG1vbWVudChkYXRlQ29udGVudCkubG9jYWxlKHRoaXMuX2xhbmcpLmZyb21Ob3coKTtcbiAgICAgICAgICAgICAgICBjb250ZW50ID0gJzxzcGFuIHRpdGxlPVwiJyArIGRhdGVGb3JtYXQgKyAnXCI+JyArIGNvbnRlbnQgKyAnPC9zcGFuPic7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKGUpXG4gICAgICAgIH1cblxuXG4gICAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH1cbn1cblxuXG5leHBvcnQgZGVmYXVsdCBDb2x1bW5zRGF0ZUh1bWFuOyIsIlxuaW1wb3J0IFRhYmxlVXRpbHMgZnJvbSBcIi4uL3RhYmxlLnV0aWxzXCI7XG5pbXBvcnQgQ29sdW1uICAgICAgICAgICBmcm9tIFwiLi4vYWJzdHJhY3QvQ29sdW1uXCI7XG5cblxuY2xhc3MgQ29sdW1uc0h0bWwgZXh0ZW5kcyBDb2x1bW4ge1xuXG4gICAgLyoqXG4gICAgICog0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y9cbiAgICAgKiBAcGFyYW0ge1RhYmxlSW5zdGFuY2V9IHRhYmxlXG4gICAgICogQHBhcmFtIHtPYmplY3R9ICAgICAgICAgICAgICBvcHRpb25zXG4gICAgICovXG4gICAgY29uc3RydWN0b3IodGFibGUsIG9wdGlvbnMpIHtcblxuICAgICAgICBvcHRpb25zID0gJC5leHRlbmQodHJ1ZSwge1xuICAgICAgICAgICAgdHlwZTogJ2h0bWwnLFxuICAgICAgICAgICAgZmllbGQ6IG51bGwsXG4gICAgICAgICAgICBsYWJlbDogbnVsbCxcbiAgICAgICAgICAgIHNob3c6IHRydWUsXG4gICAgICAgICAgICB3aWR0aDogbnVsbCxcbiAgICAgICAgICAgIG1pbldpZHRoOiBudWxsLFxuICAgICAgICAgICAgbWF4V2lkdGg6IG51bGwsXG4gICAgICAgICAgICBub1dyYXA6IG51bGwsXG4gICAgICAgICAgICBub1dyYXBUb2dnbGU6IG51bGwsXG4gICAgICAgICAgICBhdHRyOiB7fSxcbiAgICAgICAgICAgIGF0dHJIZWFkZXI6IHt9LFxuICAgICAgICAgICAgcmVuZGVyOiBudWxsXG4gICAgICAgIH0sIG9wdGlvbnMpO1xuXG4gICAgICAgIHN1cGVyKHRhYmxlLCBvcHRpb25zKTtcblxuICAgICAgICBsZXQgdGFibGVPcHRpb25zID0gdGhpcy5fdGFibGUuZ2V0T3B0aW9ucygpO1xuXG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLm5vV3JhcCB8fFxuICAgICAgICAgICAgKHRoaXMuX29wdGlvbnMubm9XcmFwID09PSBudWxsICYmIHRhYmxlT3B0aW9ucy5ub1dyYXApXG4gICAgICAgICkge1xuICAgICAgICAgICAgaWYgKCAhIHRoaXMuX29wdGlvbnMuYXR0cikge1xuICAgICAgICAgICAgICAgIHRoaXMuX29wdGlvbnMuYXR0ciA9IHsgY2xhc3MgOiAnY29yZXVpX3RhYmxlX19uby13cmFwJyB9O1xuXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuX29wdGlvbnMuYXR0ciA9IFRhYmxlVXRpbHMubWVyZ2VBdHRyKHRoaXMuX29wdGlvbnMuYXR0ciwge1xuICAgICAgICAgICAgICAgICAgICBjbGFzczogJ2NvcmV1aV90YWJsZV9fbm8td3JhcCdcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy5ub1dyYXAgPSB0cnVlO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy5ub1dyYXBUb2dnbGUgfHxcbiAgICAgICAgICAgICAgICAodGhpcy5fb3B0aW9ucy5ub1dyYXBUb2dnbGUgPT09IG51bGwgJiYgdGFibGVPcHRpb25zLm5vV3JhcFRvZ2dsZSlcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIHRoaXMuX29wdGlvbnMubm9XcmFwVG9nZ2xlID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICog0JrQvtC90LLQtdGA0YLQuNGA0L7QstCw0L3QuNC1INC30L3QsNGH0LXQvdC40Y8g0LrQvtC70L7QvdC60Lgg0LIg0YLQtdC60YHRglxuICAgICAqIEBwYXJhbSB7Kn0gY29sdW1uVmFsdWVcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgICAqL1xuICAgIGNvbnZlcnRUb1N0cmluZyhjb2x1bW5WYWx1ZSkge1xuXG4gICAgICAgIGlmIChbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiBjb2x1bW5WYWx1ZSkgPj0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIFN0cmluZyhjb2x1bW5WYWx1ZSkucmVwbGFjZSgvPFtePl0qPj8vZ20sICcnKTtcblxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICB9XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiDQpNC+0YDQvNC40YDQvtCy0LDQvdC40LUg0LrQvtC90YLQtdC90YLQsFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfEhUTUxFbGVtZW50fGpRdWVyeX0gY29udGVudFxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSAgICAgICAgICAgICAgICAgICAgcmVjb3JkXG4gICAgICogQHJldHVybnMge3N0cmluZ31cbiAgICAgKi9cbiAgICByZW5kZXIoY29udGVudCwgcmVjb3JkKSB7XG5cbiAgICAgICAgaWYgKFsnc3RyaW5nJywgJ2JpZ2ludCcsICdzeW1ib2wnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2YgY29udGVudCkgPCAwICYmXG4gICAgICAgICAgICAhIChjb250ZW50IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpICYmXG4gICAgICAgICAgICAhICh3aW5kb3cuaGFzT3duUHJvcGVydHkoJ2pRdWVyeScpICYmIGNvbnRlbnQgaW5zdGFuY2VvZiBqUXVlcnkpXG4gICAgICAgICkge1xuICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMubm9XcmFwKSB7XG4gICAgICAgICAgICBjb250ZW50ID0gJCgnPGRpdj48L2Rpdj4nKS5hcHBlbmQoY29udGVudCk7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLl9vcHRpb25zLm5vV3JhcFRvZ2dsZSkge1xuICAgICAgICAgICAgICAgIGNvbnRlbnQgPSAkKGNvbnRlbnQpLmFmdGVyKCc8aSBjbGFzcz1cImJpIGJpLWNhcmV0LWRvd24tZmlsbCB0b2dnbGVcIj48L2k+JylcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH1cbn1cblxuXG5leHBvcnQgZGVmYXVsdCBDb2x1bW5zSHRtbDsiLCJcbmltcG9ydCBUYWJsZVV0aWxzIGZyb20gXCIuLi90YWJsZS51dGlsc1wiO1xuaW1wb3J0IENvbHVtbiAgICAgICAgICAgZnJvbSBcIi4uL2Fic3RyYWN0L0NvbHVtblwiO1xuXG5jbGFzcyBDb2x1bW5zTnVtYmVyIGV4dGVuZHMgQ29sdW1uIHtcblxuICAgIC8qKlxuICAgICAqINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPXG4gICAgICogQHBhcmFtIHtUYWJsZUluc3RhbmNlfSB0YWJsZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSAgICAgICAgICAgICAgb3B0aW9uc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHRhYmxlLCBvcHRpb25zKSB7XG5cbiAgICAgICAgb3B0aW9ucyA9ICQuZXh0ZW5kKHRydWUsIHtcbiAgICAgICAgICAgIHR5cGU6ICdudW1iZXInLFxuICAgICAgICAgICAgZmllbGQ6IG51bGwsXG4gICAgICAgICAgICBsYWJlbDogbnVsbCxcbiAgICAgICAgICAgIHNob3c6IHRydWUsXG4gICAgICAgICAgICB3aWR0aDogbnVsbCxcbiAgICAgICAgICAgIG1pbldpZHRoOiBudWxsLFxuICAgICAgICAgICAgbWF4V2lkdGg6IG51bGwsXG4gICAgICAgICAgICBub1dyYXA6IG51bGwsXG4gICAgICAgICAgICBub1dyYXBUb2dnbGU6IG51bGwsXG4gICAgICAgICAgICBhdHRyOiB7fSxcbiAgICAgICAgICAgIGF0dHJIZWFkZXI6IHt9LFxuICAgICAgICAgICAgcmVuZGVyOiBudWxsXG4gICAgICAgIH0sIG9wdGlvbnMpO1xuXG4gICAgICAgIHN1cGVyKHRhYmxlLCBvcHRpb25zKTtcblxuXG4gICAgICAgIGxldCB0YWJsZU9wdGlvbnMgPSB0aGlzLl90YWJsZS5nZXRPcHRpb25zKCk7XG5cbiAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMubm9XcmFwIHx8XG4gICAgICAgICAgICAodGhpcy5fb3B0aW9ucy5ub1dyYXAgPT09IG51bGwgJiYgdGFibGVPcHRpb25zLm5vV3JhcClcbiAgICAgICAgKSB7XG4gICAgICAgICAgICBpZiAoICEgdGhpcy5fb3B0aW9ucy5hdHRyKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy5hdHRyID0geyBjbGFzcyA6ICdjb3JldWlfdGFibGVfX25vLXdyYXAnIH07XG5cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy5hdHRyID0gVGFibGVVdGlscy5tZXJnZUF0dHIodGhpcy5fb3B0aW9ucy5hdHRyLCB7XG4gICAgICAgICAgICAgICAgICAgIGNsYXNzOiAnY29yZXVpX3RhYmxlX19uby13cmFwJ1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLl9vcHRpb25zLm5vV3JhcCA9IHRydWU7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLl9vcHRpb25zLm5vV3JhcFRvZ2dsZSB8fFxuICAgICAgICAgICAgICAgICh0aGlzLl9vcHRpb25zLm5vV3JhcFRvZ2dsZSA9PT0gbnVsbCAmJiB0YWJsZU9wdGlvbnMubm9XcmFwVG9nZ2xlKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy5ub1dyYXBUb2dnbGUgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiDQpNC+0YDQvNC40YDQvtCy0LDQvdC40LUg0LrQvtC90YLQtdC90YLQsFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjb250ZW50XG4gICAgICogQHBhcmFtIHtvYmplY3R9IHJlY29yZFxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAgICovXG4gICAgcmVuZGVyKGNvbnRlbnQsIHJlY29yZCkge1xuXG4gICAgICAgIGlmIChbJ3N0cmluZycsICdiaWdpbnQnLCAnc3ltYm9sJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIGNvbnRlbnQpIDwgMCkge1xuICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICB9XG5cbiAgICAgICAgY29udGVudCA9IFN0cmluZyhjb250ZW50KVxuICAgICAgICAgICAgLnJlcGxhY2UoLywvZywgJy4nKVxuICAgICAgICAgICAgLnJlcGxhY2UoL1teMC05XFwtXFwuXS9nLCAnJylcbiAgICAgICAgICAgIC5yZXBsYWNlKC9bXFxzXXsyLH0vZywgJyAnKVxuICAgICAgICAgICAgLnJlcGxhY2UoLyg/PCEoXFwuXFxkKnxeLnswfSkpKD89KFxcZHszfSkrKD8hXFxkKSkvZywgJyQxICcpXG4gICAgICAgICAgICAucmVwbGFjZSgvXFwtIC9nLCAnLScpO1xuXG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLm5vV3JhcCkge1xuICAgICAgICAgICAgY29udGVudCA9ICc8ZGl2PicgKyBjb250ZW50ICsgJzwvZGl2PidcblxuICAgICAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMubm9XcmFwVG9nZ2xlKSB7XG4gICAgICAgICAgICAgICAgY29udGVudCArPSAnPGkgY2xhc3M9XCJiaSBiaS1jYXJldC1kb3duLWZpbGwgdG9nZ2xlXCI+PC9pPidcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ29sdW1uc051bWJlcjsiLCJcbmltcG9ydCBUYWJsZVV0aWxzIGZyb20gXCIuLi90YWJsZS51dGlsc1wiO1xuaW1wb3J0IENvbHVtbiAgICAgICAgICAgZnJvbSBcIi4uL2Fic3RyYWN0L0NvbHVtblwiO1xuXG5jbGFzcyBDb2x1bW5zTW9uZXkgZXh0ZW5kcyBDb2x1bW4ge1xuXG4gICAgLyoqXG4gICAgICog0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y9cbiAgICAgKiBAcGFyYW0ge1RhYmxlSW5zdGFuY2V9IHRhYmxlXG4gICAgICogQHBhcmFtIHtPYmplY3R9ICAgICAgICAgICAgICBvcHRpb25zXG4gICAgICovXG4gICAgY29uc3RydWN0b3IodGFibGUsIG9wdGlvbnMpIHtcblxuICAgICAgICBvcHRpb25zID0gJC5leHRlbmQodHJ1ZSwge1xuICAgICAgICAgICAgdHlwZTogJ21vbmV5JyxcbiAgICAgICAgICAgIGZpZWxkOiBudWxsLFxuICAgICAgICAgICAgbGFiZWw6IG51bGwsXG4gICAgICAgICAgICBzaG93OiB0cnVlLFxuICAgICAgICAgICAgd2lkdGg6IG51bGwsXG4gICAgICAgICAgICBtaW5XaWR0aDogbnVsbCxcbiAgICAgICAgICAgIG1heFdpZHRoOiBudWxsLFxuICAgICAgICAgICAgbm9XcmFwOiBudWxsLFxuICAgICAgICAgICAgbm9XcmFwVG9nZ2xlOiBudWxsLFxuICAgICAgICAgICAgY3VycmVuY3k6IG51bGwsXG4gICAgICAgICAgICBhdHRyOiB7XG4gICAgICAgICAgICAgICAgY2xhc3M6ICd0ZXh0LWVuZCdcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBhdHRySGVhZGVyOiB7XG4gICAgICAgICAgICAgICAgY2xhc3M6ICd0ZXh0LWVuZCdcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZW5kZXI6IG51bGxcbiAgICAgICAgfSwgb3B0aW9ucyk7XG5cbiAgICAgICAgc3VwZXIodGFibGUsIG9wdGlvbnMpO1xuXG4gICAgICAgIGxldCB0YWJsZU9wdGlvbnMgPSB0aGlzLl90YWJsZS5nZXRPcHRpb25zKCk7XG5cbiAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMubm9XcmFwIHx8XG4gICAgICAgICAgICAodGhpcy5fb3B0aW9ucy5ub1dyYXAgPT09IG51bGwgJiYgdGFibGVPcHRpb25zLm5vV3JhcClcbiAgICAgICAgKSB7XG4gICAgICAgICAgICBpZiAoICEgdGhpcy5fb3B0aW9ucy5hdHRyKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy5hdHRyID0geyBjbGFzcyA6ICdjb3JldWlfdGFibGVfX25vLXdyYXAnIH07XG5cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy5hdHRyID0gVGFibGVVdGlscy5tZXJnZUF0dHIodGhpcy5fb3B0aW9ucy5hdHRyLCB7XG4gICAgICAgICAgICAgICAgICAgIGNsYXNzOiAnY29yZXVpX3RhYmxlX19uby13cmFwJ1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLl9vcHRpb25zLm5vV3JhcCA9IHRydWU7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLl9vcHRpb25zLm5vV3JhcFRvZ2dsZSB8fFxuICAgICAgICAgICAgICAgICh0aGlzLl9vcHRpb25zLm5vV3JhcFRvZ2dsZSA9PT0gbnVsbCAmJiB0YWJsZU9wdGlvbnMubm9XcmFwVG9nZ2xlKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy5ub1dyYXBUb2dnbGUgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiDQmtC+0L3QstC10YDRgtC40YDQvtCy0LDQvdC40LUg0LfQvdCw0YfQtdC90LjRjyDQutC+0LvQvtC90LrQuCDQsiDRgtC10LrRgdGCXG4gICAgICogQHBhcmFtIHsqfSBjb2x1bW5WYWx1ZVxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAgICovXG4gICAgY29udmVydFRvU3RyaW5nKGNvbHVtblZhbHVlKSB7XG5cbiAgICAgICAgbGV0IGNvbnRlbnQgPSAnJztcblxuICAgICAgICBpZiAoWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2YgY29sdW1uVmFsdWUpID49IDApIHtcbiAgICAgICAgICAgIGlmIChpc05hTihjb250ZW50KSkge1xuICAgICAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50LnRvU3RyaW5nKClcbiAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoLyhcXGQpKD89KFxcZFxcZFxcZCkrKFteXFxkXXwkKSkvZywgJyQxICcpO1xuXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnRlbnQgPSBOdW1iZXIoY29udGVudCkudG9GaXhlZCgyKS50b1N0cmluZygpO1xuICAgICAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50LnJlcGxhY2UoLyhcXGQpKD89KFxcZFxcZFxcZCkrKFteXFxkXXwkKSkvZywgJyQxICcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiDQpNC+0YDQvNC40YDQvtCy0LDQvdC40LUg0LrQvtC90YLQtdC90YLQsFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjb250ZW50XG4gICAgICogQHBhcmFtIHtvYmplY3R9IHJlY29yZFxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAgICovXG4gICAgcmVuZGVyKGNvbnRlbnQsIHJlY29yZCkge1xuXG4gICAgICAgIGlmIChbJ3N0cmluZycsICdiaWdpbnQnLCAnc3ltYm9sJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIGNvbnRlbnQpIDwgMCkge1xuICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICB9XG5cblxuICAgICAgICBpZiAoaXNOYU4oY29udGVudCkpIHtcbiAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50LnRvU3RyaW5nKClcbiAgICAgICAgICAgICAgICAucmVwbGFjZSgvKFxcZCkoPz0oXFxkXFxkXFxkKSsoW15cXGRdfCQpKS9nLCAnJDEgJyk7XG5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnRlbnQgPSBOdW1iZXIoY29udGVudCkudG9GaXhlZCgyKS50b1N0cmluZygpO1xuICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQucmVwbGFjZSgvKFxcZCkoPz0oXFxkXFxkXFxkKSsoW15cXGRdfCQpKS9nLCAnJDEgJyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy5jdXJyZW5jeSAmJlxuICAgICAgICAgICAgWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2YgdGhpcy5fb3B0aW9ucy5jdXJyZW5jeSkgPj0gMFxuICAgICAgICApIHtcbiAgICAgICAgICAgIGNvbnRlbnQgKz0gJyA8c21hbGwgY2xhc3M9XCJ0ZXh0LW11dGVkXCI+JyArIHRoaXMuX29wdGlvbnMuY3VycmVuY3kgKyAnPC9zbWFsbD4nO1xuICAgICAgICB9XG5cblxuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy5ub1dyYXApIHtcbiAgICAgICAgICAgIGNvbnRlbnQgPSAnPGRpdj4nICsgY29udGVudCArICc8L2Rpdj4nXG5cbiAgICAgICAgICAgIGlmICh0aGlzLl9vcHRpb25zLm5vV3JhcFRvZ2dsZSkge1xuICAgICAgICAgICAgICAgIGNvbnRlbnQgKz0gJzxpIGNsYXNzPVwiYmkgYmktY2FyZXQtZG93bi1maWxsIHRvZ2dsZVwiPjwvaT4nXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY29udGVudDtcbiAgICB9XG59XG5cblxuZXhwb3J0IGRlZmF1bHQgQ29sdW1uc01vbmV5OyIsIlxuaW1wb3J0IENvbHVtbiBmcm9tIFwiLi4vYWJzdHJhY3QvQ29sdW1uXCI7XG5cblxuY2xhc3MgQ29sdW1uc051bWJlcnMgZXh0ZW5kcyBDb2x1bW4ge1xuXG4gICAgLyoqXG4gICAgICog0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y9cbiAgICAgKiBAcGFyYW0ge1RhYmxlSW5zdGFuY2V9IHRhYmxlXG4gICAgICogQHBhcmFtIHtPYmplY3R9ICAgICAgICAgICAgICBvcHRpb25zXG4gICAgICovXG4gICAgY29uc3RydWN0b3IodGFibGUsIG9wdGlvbnMpIHtcblxuICAgICAgICBvcHRpb25zID0gJC5leHRlbmQodHJ1ZSwge1xuICAgICAgICAgICAgdHlwZTogJ251bWJlcnMnLFxuICAgICAgICAgICAgbGFiZWw6ICfihJYnLFxuICAgICAgICAgICAgd2lkdGg6IDIwLFxuICAgICAgICAgICAgYXR0cjogeyBjbGFzczogJ3RleHQtZW5kJyB9LFxuICAgICAgICAgICAgYXR0ckhlYWRlcjogbnVsbFxuICAgICAgICB9LCBvcHRpb25zKTtcblxuICAgICAgICBzdXBlcih0YWJsZSwgb3B0aW9ucyk7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiDQpNC+0YDQvNC40YDQvtCy0LDQvdC40LUg0LrQvtC90YLQtdC90YLQsFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjb250ZW50XG4gICAgICogQHBhcmFtIHtvYmplY3R9IHJlY29yZFxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAgICovXG4gICAgcmVuZGVyKGNvbnRlbnQsIHJlY29yZCkge1xuXG4gICAgICAgIHJldHVybiB0aGlzLl90YWJsZS5fcmVjb3Jkc051bWJlcjtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IENvbHVtbnNOdW1iZXJzOyIsIlxuaW1wb3J0IFRhYmxlRWxlbWVudHMgZnJvbSBcIi4uL3RhYmxlLmVsZW1lbnRzXCI7XG5pbXBvcnQgVGFibGVQcml2YXRlICBmcm9tIFwiLi4vdGFibGUucHJpdmF0ZVwiO1xuaW1wb3J0IFRhYmxlVHBsICAgICAgZnJvbSBcIi4uL3RhYmxlLnRwbFwiO1xuaW1wb3J0IFRhYmxlVXRpbHMgICAgZnJvbSBcIi4uL3RhYmxlLnV0aWxzXCI7XG5pbXBvcnQgQ29sdW1uICAgICAgICAgICAgICBmcm9tIFwiLi4vYWJzdHJhY3QvQ29sdW1uXCI7XG5cbmNsYXNzIENvbHVtbnNTZWxlY3QgZXh0ZW5kcyBDb2x1bW4ge1xuXG4gICAgLyoqXG4gICAgICog0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y9cbiAgICAgKiBAcGFyYW0ge1RhYmxlSW5zdGFuY2V9IHRhYmxlXG4gICAgICogQHBhcmFtIHtPYmplY3R9ICAgICAgICAgICAgICBvcHRpb25zXG4gICAgICovXG4gICAgY29uc3RydWN0b3IodGFibGUsIG9wdGlvbnMpIHtcblxuICAgICAgICBsZXQgb3JpZ2luYWxPcHRpb25zID0ge1xuICAgICAgICAgICAgdHlwZTogJ3NlbGVjdCcsXG4gICAgICAgICAgICBmaWVsZDogbnVsbCxcbiAgICAgICAgICAgIGxhYmVsOiAnJyxcbiAgICAgICAgICAgIHNob3c6IHRydWUsXG4gICAgICAgICAgICB3aWR0aDogMzUsXG4gICAgICAgICAgICBhdHRyOiB7IGNsYXNzOiAnY29yZXVpLXRhYmxlX19zZWxlY3RfY29udGFpbmVyIHRleHQtY2VudGVyJyB9LFxuICAgICAgICAgICAgYXR0ckhlYWRlcjogeyBjbGFzczogJ3RleHQtY2VudGVyJyB9XG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKG9wdGlvbnMuaGFzT3duUHJvcGVydHkoJ2F0dHInKSkge1xuICAgICAgICAgICAgb3B0aW9ucy5hdHRyID0gVGFibGVVdGlscy5tZXJnZUF0dHIob3JpZ2luYWxPcHRpb25zLmF0dHIsIG9wdGlvbnMuYXR0cik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMuaGFzT3duUHJvcGVydHkoJ2F0dHJIZWFkZXInKSkge1xuICAgICAgICAgICAgb3B0aW9ucy5hdHRySGVhZGVyID0gVGFibGVVdGlscy5tZXJnZUF0dHIob3JpZ2luYWxPcHRpb25zLmF0dHJIZWFkZXIsIG9wdGlvbnMuYXR0ckhlYWRlcik7XG4gICAgICAgIH1cblxuICAgICAgICBvcHRpb25zID0gJC5leHRlbmQodHJ1ZSwgb3JpZ2luYWxPcHRpb25zLCBvcHRpb25zKTtcblxuICAgICAgICBzdXBlcih0YWJsZSwgb3B0aW9ucyk7XG5cblxuICAgICAgICB0aGlzLl9vcHRpb25zLmxhYmVsID0gVGFibGVUcGxbJ2NvbHVtbnMvc2VsZWN0X2xhYmVsLmh0bWwnXTtcblxuICAgICAgICAvLyDQn9C+0LrQsNC3INGB0YLRgNC+0LpcbiAgICAgICAgdGFibGUub24oJ3JlY29yZHNfc2hvdycsIGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgbGV0IHNlbGVjdHMgICA9IFRhYmxlRWxlbWVudHMuZ2V0Um93c1NlbGVjdHModGFibGUuZ2V0SWQoKSk7XG4gICAgICAgICAgICBsZXQgc2VsZWN0QWxsID0gVGFibGVFbGVtZW50cy5nZXRSb3dzU2VsZWN0QWxsKHRhYmxlLmdldElkKCkpO1xuXG4gICAgICAgICAgICAvLyDQntGC0LzQtdC90LAg0L7QsdGA0LDQsdC+0YLQutC4INC90LDQttCw0YLQuNGPINCyIHNlbGVjdCDQutC+0LvQvtC90LrQsNGFXG4gICAgICAgICAgICAkKHNlbGVjdHMpLmNsaWNrKGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vINCS0YvQsdC+0YAg0LLRgdC10YUg0YHRgtGA0L7QulxuICAgICAgICAgICAgc2VsZWN0QWxsLmNsaWNrKGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgICAgIGlmICgkKHRoaXMpLmlzKCc6Y2hlY2tlZCcpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRhYmxlLnNlbGVjdEFsbCgpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRhYmxlLnVuc2VsZWN0QWxsKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INGB0L/QuNGB0LrQsCDQvNC10YLQvtC00L7QsiDQutC+0YLQvtGA0YvQtSDQvNC+0LbQvdC+INGB0L7QstC10YDRiNCw0YLRjCDRgSDRj9GH0LXQudC60L7QuSDRgdGC0YDQvtC60LhcbiAgICAgKiBAcGFyYW0ge2pRdWVyeX0gY29udGVudFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBmaWVsZFxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSByZWNvcmRcbiAgICAgKi9cbiAgICBnZXRBY3Rpb25zKGNvbnRlbnQsIGZpZWxkLCByZWNvcmQpIHtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc2V0QWN0aXZlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNvbnRlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgJChjb250ZW50KS5wcm9wKCdjaGVja2VkJywgdHJ1ZSkudHJpZ2dlcignY2xpY2snKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBzZXRJbmFjdGl2ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGlmIChjb250ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICQoY29udGVudCkucHJvcCgnY2hlY2tlZCcsIGZhbHNlKS50cmlnZ2VyKCdjbGljaycpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICog0KTQvtGA0LzQuNGA0L7QstCw0L3QuNC1INC60L7QvdGC0LXQvdGC0LBcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gY29udGVudFxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSByZWNvcmRcbiAgICAgKiBAcmV0dXJucyB7alF1ZXJ5fVxuICAgICAqL1xuICAgIHJlbmRlcihjb250ZW50LCByZWNvcmQpIHtcblxuICAgICAgICBsZXQgc2VsZWN0ID0gJChUYWJsZVV0aWxzLnJlbmRlcihUYWJsZVRwbFsnY29sdW1ucy9zZWxlY3QuaHRtbCddLCB7XG4gICAgICAgICAgICBpbmRleDogcmVjb3JkLmluZGV4XG4gICAgICAgIH0pKTtcblxuICAgICAgICBsZXQgdGhhdCA9IHRoaXM7XG5cbiAgICAgICAgLy8g0JLRi9Cx0L7RgCDRgdGC0YDQvtC60LhcbiAgICAgICAgc2VsZWN0LmNsaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGxldCB0ciA9IFRhYmxlRWxlbWVudHMuZ2V0VHJCeUluZGV4KHRoYXQuX3RhYmxlLmdldElkKCksIHJlY29yZC5pbmRleCk7XG5cbiAgICAgICAgICAgIGlmICggISB0cikge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCQodGhpcykuaXMoJzpjaGVja2VkJykpIHtcbiAgICAgICAgICAgICAgICAkKHRyKS5hZGRDbGFzcygndGFibGUtcHJpbWFyeScpO1xuXG4gICAgICAgICAgICAgICAgVGFibGVQcml2YXRlLl90cmlnZ2VyKHRoYXQuX3RhYmxlLCAncmVjb3JkX3NlbGVjdCcsIFsgcmVjb3JkIF0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAkKHRyKS5yZW1vdmVDbGFzcygndGFibGUtcHJpbWFyeScpO1xuXG4gICAgICAgICAgICAgICAgVGFibGVQcml2YXRlLl90cmlnZ2VyKHRoYXQuX3RhYmxlLCAncmVjb3JkX3Vuc2VsZWN0JywgWyByZWNvcmQgXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBzZWxlY3Q7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBDb2x1bW5zU2VsZWN0OyIsIlxuaW1wb3J0IFRhYmxlRWxlbWVudHMgZnJvbSBcIi4uL3RhYmxlLmVsZW1lbnRzXCI7XG5pbXBvcnQgVGFibGVUcGwgICAgICBmcm9tIFwiLi4vdGFibGUudHBsXCI7XG5pbXBvcnQgVGFibGVVdGlscyAgICBmcm9tIFwiLi4vdGFibGUudXRpbHNcIjtcbmltcG9ydCBDb2x1bW4gICAgICAgICAgICAgIGZyb20gXCIuLi9hYnN0cmFjdC9Db2x1bW5cIjtcblxuY2xhc3MgQ29sdW1uc1N3aXRjaCBleHRlbmRzIENvbHVtbiB7XG5cbiAgICAvKipcbiAgICAgKiDQmNC90LjRhtC40LDQu9C40LfQsNGG0LjRj1xuICAgICAqIEBwYXJhbSB7VGFibGVJbnN0YW5jZX0gdGFibGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gICAgICAgICAgICAgIG9wdGlvbnNcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcih0YWJsZSwgb3B0aW9ucykge1xuXG4gICAgICAgIG9wdGlvbnMgPSAkLmV4dGVuZCh0cnVlLCB7XG4gICAgICAgICAgICB0eXBlOiAnc3dpdGNoJyxcbiAgICAgICAgICAgIGxhYmVsOiAnJyxcbiAgICAgICAgICAgIGZpZWxkOiAnJyxcbiAgICAgICAgICAgIHNob3c6IHRydWUsXG4gICAgICAgICAgICBkaXNhYmxlZDogZmFsc2UsXG4gICAgICAgICAgICB3aWR0aDogNSxcbiAgICAgICAgICAgIHZhbHVlWTogMSxcbiAgICAgICAgICAgIHZhbHVlTjogMCxcbiAgICAgICAgICAgIGF0dHI6IHsgY2xhc3M6ICdjb3JldWktdGFibGVfX3N3aXRjaF9jb250YWluZXInIH0sXG4gICAgICAgICAgICBhdHRySGVhZGVyOiB7IH0sXG4gICAgICAgICAgICBvbkNoYW5nZTogbnVsbFxuICAgICAgICB9LCBvcHRpb25zKTtcblxuICAgICAgICBzdXBlcih0YWJsZSwgb3B0aW9ucyk7XG5cblxuICAgICAgICAvLyDQn9C+0LrQsNC3INGB0YLRgNC+0LpcbiAgICAgICAgdGFibGUub24oJ3JlY29yZHNfc2hvdycsIGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgbGV0IGNvbnRhaW5lcnMgPSBUYWJsZUVsZW1lbnRzLmdldFJvd3NTd2l0Y2hlcyh0YWJsZS5nZXRJZCgpKTtcblxuICAgICAgICAgICAgLy8g0J7RgtC80LXQvdCwINC+0LHRgNCw0LHQvtGC0LrQuCDQvdCw0LbQsNGC0LjRjyDQsiBzd2l0Y2gg0LrQvtC70L7QvdC60LDRhVxuICAgICAgICAgICAgY29udGFpbmVycy5jbGljayhmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSDRgdC/0LjRgdC60LAg0LzQtdGC0L7QtNC+0LIg0LrQvtGC0L7RgNGL0LUg0LzQvtC20L3QviDRgdC+0LLQtdGA0YjQsNGC0Ywg0YEg0Y/Rh9C10LnQutC+0Lkg0YHRgtGA0L7QutC4XG4gICAgICogQHBhcmFtIHtqUXVlcnl9IGNvbnRlbnRcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZmllbGRcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gcmVjb3JkXG4gICAgICovXG4gICAgZ2V0QWN0aW9ucyhjb250ZW50LCBmaWVsZCwgcmVjb3JkKSB7XG5cbiAgICAgICAgcmV0dXJuIHtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiDQkNC60YLQuNCy0LDRhtC40Y8g0L/QtdGA0LXQutC70Y7Rh9Cw0YLQtdC70Y9cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgc2V0QWN0aXZlOiBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICBpZiAoY29udGVudCkge1xuICAgICAgICAgICAgICAgICAgICAkKCcuY29yZXVpLXRhYmxlX19zd2l0Y2gnLCBjb250ZW50KS5wcm9wKCdjaGVja2VkJywgdHJ1ZSkudHJpZ2dlcignY2hhbmdlJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiDQlNC10LDQutGC0LjQstCw0YbQuNGPINC/0LXRgNC10LrQu9GO0YfQsNGC0LXQu9GPXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHNldEluYWN0aXZlOiBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICBpZiAoY29udGVudCkge1xuICAgICAgICAgICAgICAgICAgICAkKCcuY29yZXVpLXRhYmxlX19zd2l0Y2gnLCBjb250ZW50KS5wcm9wKCdjaGVja2VkJywgZmFsc2UpLnRyaWdnZXIoJ2NoYW5nZScpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICog0KTQvtGA0LzQuNGA0L7QstCw0L3QuNC1INC60L7QvdGC0LXQvdGC0LBcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gY29udGVudFxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSByZWNvcmRcbiAgICAgKiBAcmV0dXJucyB7alF1ZXJ5fVxuICAgICAqL1xuICAgIHJlbmRlcihjb250ZW50LCByZWNvcmQpIHtcblxuICAgICAgICBsZXQgaXNDaGVja2VkID0gY29udGVudCA9PT0gdGhpcy5fb3B0aW9ucy52YWx1ZVk7XG5cbiAgICAgICAgbGV0IGZvcm1Td2l0Y2ggPSAkKFRhYmxlVXRpbHMucmVuZGVyKFRhYmxlVHBsWydjb2x1bW5zL3N3aXRjaC5odG1sJ10sIHtcbiAgICAgICAgICAgIGluZGV4OiByZWNvcmQuaW5kZXgsXG4gICAgICAgICAgICBmaWVsZDogdGhpcy5fb3B0aW9ucy5maWVsZCxcbiAgICAgICAgICAgIGRpc2FibGVkOiB0aGlzLl9vcHRpb25zLmRpc2FibGVkLFxuICAgICAgICAgICAgY2hlY2tlZDogaXNDaGVja2VkXG4gICAgICAgIH0pKTtcblxuICAgICAgICAvLyDQodC+0LHRi9GC0LjRjyDQvdCw0LbQsNGC0LjRjyDQvdCwINC/0LXRgNC10LrQu9GO0YfQsNGC0LXQu9GMXG4gICAgICAgIGxldCB0aGF0ICA9IHRoaXM7XG4gICAgICAgIGxldCB0YWJsZSA9IHRoaXMuX3RhYmxlO1xuXG4gICAgICAgICQoJy5jb3JldWktdGFibGVfX3N3aXRjaCcsIGZvcm1Td2l0Y2gpLmNoYW5nZShmdW5jdGlvbiAoZXZlbnQpIHtcblxuICAgICAgICAgICAgbGV0IGlucHV0ID0gdGhpcztcblxuICAgICAgICAgICAgdGFibGUuX3JlY29yZHMubWFwKGZ1bmN0aW9uIChyZWNvcmRUYWJsZSkge1xuICAgICAgICAgICAgICAgIGlmIChyZWNvcmQuaW5kZXggPT09IHJlY29yZFRhYmxlLmluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgIHJlY29yZFRhYmxlLmRhdGFbdGhhdC5fb3B0aW9ucy5maWVsZF0gPSBpbnB1dC5jaGVja2VkID8gdGhhdC5fb3B0aW9ucy52YWx1ZVkgOiB0aGF0Ll9vcHRpb25zLnZhbHVlTjtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG5cbiAgICAgICAgICAgIGlmICh0aGF0Ll9vcHRpb25zLmhhc093blByb3BlcnR5KCdvbkNoYW5nZScpICYmXG4gICAgICAgICAgICAgICAgKHR5cGVvZiB0aGF0Ll9vcHRpb25zLm9uQ2hhbmdlID09PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiB0aGF0Ll9vcHRpb25zLm9uQ2hhbmdlID09PSAnc3RyaW5nJylcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIGxldCBwcm9wID0ge1xuICAgICAgICAgICAgICAgICAgICB0YWJsZTogdGFibGUsXG4gICAgICAgICAgICAgICAgICAgIHJlY29yZDogcmVjb3JkLFxuICAgICAgICAgICAgICAgICAgICBpbnB1dDogaW5wdXQsXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50OiBldmVudCxcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGF0Ll9vcHRpb25zLm9uQ2hhbmdlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoYXQuX29wdGlvbnMub25DaGFuZ2UocHJvcCk7XG5cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBsZXQgZnVuYyA9IG5ldyBGdW5jdGlvbigncHJvcCcsIHRoYXQuX29wdGlvbnMub25DaGFuZ2UpO1xuICAgICAgICAgICAgICAgICAgICBmdW5jKHByb3ApO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIGZvcm1Td2l0Y2g7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBDb2x1bW5zU3dpdGNoOyIsIlxuaW1wb3J0IFRhYmxlVXRpbHMgZnJvbSBcIi4uL3RhYmxlLnV0aWxzXCI7XG5pbXBvcnQgQ29sdW1uICAgICAgICAgICBmcm9tIFwiLi4vYWJzdHJhY3QvQ29sdW1uXCI7XG5cblxuY2xhc3MgQ29sdW1uc1RleHQgZXh0ZW5kcyBDb2x1bW4ge1xuXG4gICAgLyoqXG4gICAgICog0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y9cbiAgICAgKiBAcGFyYW0ge1RhYmxlSW5zdGFuY2V9IHRhYmxlXG4gICAgICogQHBhcmFtIHtPYmplY3R9ICAgICAgICAgICAgICBvcHRpb25zXG4gICAgICovXG4gICAgY29uc3RydWN0b3IodGFibGUsIG9wdGlvbnMpIHtcblxuICAgICAgICBvcHRpb25zID0gJC5leHRlbmQodHJ1ZSwge1xuICAgICAgICAgICAgdHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgZmllbGQ6IG51bGwsXG4gICAgICAgICAgICBsYWJlbDogbnVsbCxcbiAgICAgICAgICAgIHNob3c6IHRydWUsXG4gICAgICAgICAgICBzaG93TGFiZWw6IHRydWUsXG4gICAgICAgICAgICB3aWR0aDogbnVsbCxcbiAgICAgICAgICAgIG1pbldpZHRoOiBudWxsLFxuICAgICAgICAgICAgbWF4V2lkdGg6IG51bGwsXG4gICAgICAgICAgICBhdHRyOiBudWxsLFxuICAgICAgICAgICAgbm9XcmFwOiBudWxsLFxuICAgICAgICAgICAgbm9XcmFwVG9nZ2xlOiBudWxsLFxuICAgICAgICAgICAgYXR0ckhlYWRlcjogbnVsbCxcbiAgICAgICAgICAgIHJlbmRlcjogbnVsbFxuICAgICAgICB9LCBvcHRpb25zKTtcblxuICAgICAgICBzdXBlcih0YWJsZSwgb3B0aW9ucyk7XG5cbiAgICAgICAgbGV0IHRhYmxlT3B0aW9ucyA9IHRoaXMuX3RhYmxlLmdldE9wdGlvbnMoKTtcblxuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy5ub1dyYXAgfHxcbiAgICAgICAgICAgICh0aGlzLl9vcHRpb25zLm5vV3JhcCA9PT0gbnVsbCAmJiB0YWJsZU9wdGlvbnMubm9XcmFwKVxuICAgICAgICApIHtcbiAgICAgICAgICAgIGlmICggISB0aGlzLl9vcHRpb25zLmF0dHIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9vcHRpb25zLmF0dHIgPSB7IGNsYXNzIDogJ2NvcmV1aV90YWJsZV9fbm8td3JhcCcgfTtcblxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9vcHRpb25zLmF0dHIgPSBUYWJsZVV0aWxzLm1lcmdlQXR0cih0aGlzLl9vcHRpb25zLmF0dHIsIHtcbiAgICAgICAgICAgICAgICAgICAgY2xhc3M6ICdjb3JldWlfdGFibGVfX25vLXdyYXAnXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuX29wdGlvbnMubm9XcmFwID0gdHJ1ZTtcblxuICAgICAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMubm9XcmFwVG9nZ2xlIHx8XG4gICAgICAgICAgICAgICAgKHRoaXMuX29wdGlvbnMubm9XcmFwVG9nZ2xlID09PSBudWxsICYmIHRhYmxlT3B0aW9ucy5ub1dyYXBUb2dnbGUpXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9vcHRpb25zLm5vV3JhcFRvZ2dsZSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqINCk0L7RgNC80LjRgNC+0LLQsNC90LjQtSDQutC+0L3RgtC10L3RgtCwXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGNvbnRlbnRcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gcmVjb3JkXG4gICAgICogQHJldHVybnMge3N0cmluZ31cbiAgICAgKi9cbiAgICByZW5kZXIoY29udGVudCwgcmVjb3JkKSB7XG5cbiAgICAgICAgaWYgKFsnc3RyaW5nJywgJ2JpZ2ludCcsICdzeW1ib2wnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2YgY29udGVudCkgPCAwKSB7XG4gICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgIH1cblxuICAgICAgICBjb250ZW50ID0gU3RyaW5nKGNvbnRlbnQpXG4gICAgICAgICAgICAucmVwbGFjZSgvPC9nLCAnJmx0OycpXG4gICAgICAgICAgICAucmVwbGFjZSgvPi9nLCAnJmd0OycpO1xuXG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLm5vV3JhcCkge1xuICAgICAgICAgICAgY29udGVudCA9ICc8ZGl2PicgKyBjb250ZW50ICsgJzwvZGl2PidcblxuICAgICAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMubm9XcmFwVG9nZ2xlKSB7XG4gICAgICAgICAgICAgICAgY29udGVudCArPSAnPGkgY2xhc3M9XCJiaSBiaS1jYXJldC1kb3duLWZpbGwgdG9nZ2xlXCI+PC9pPidcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH1cbn1cblxuXG5leHBvcnQgZGVmYXVsdCBDb2x1bW5zVGV4dDsiLCJcbmltcG9ydCBUYWJsZVV0aWxzIGZyb20gXCIuLi90YWJsZS51dGlsc1wiO1xuaW1wb3J0IFRhYmxlVHBsICAgZnJvbSBcIi4uL3RhYmxlLnRwbFwiO1xuaW1wb3J0IENvbHVtbiAgICAgICAgICAgZnJvbSBcIi4uL2Fic3RyYWN0L0NvbHVtblwiO1xuXG5cbmNsYXNzIENvbHVtbnNCdXR0b24gZXh0ZW5kcyBDb2x1bW4ge1xuXG4gICAgLyoqXG4gICAgICog0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y9cbiAgICAgKiBAcGFyYW0ge1RhYmxlSW5zdGFuY2V9IHRhYmxlXG4gICAgICogQHBhcmFtIHtPYmplY3R9ICAgICAgICAgICAgICBvcHRpb25zXG4gICAgICovXG4gICAgY29uc3RydWN0b3IodGFibGUsIG9wdGlvbnMpIHtcblxuICAgICAgICBvcHRpb25zID0gJC5leHRlbmQodHJ1ZSwge1xuICAgICAgICAgICAgdHlwZTogJ2J1dHRvbicsXG4gICAgICAgICAgICBmaWVsZDogbnVsbCxcbiAgICAgICAgICAgIGxhYmVsOiBudWxsLFxuICAgICAgICAgICAgc2hvdzogdHJ1ZSxcbiAgICAgICAgICAgIHdpZHRoOiBudWxsLFxuICAgICAgICAgICAgbWluV2lkdGg6IG51bGwsXG4gICAgICAgICAgICBtYXhXaWR0aDogbnVsbCxcbiAgICAgICAgfSwgb3B0aW9ucyk7XG5cbiAgICAgICAgc3VwZXIodGFibGUsIG9wdGlvbnMpO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICog0KTQvtGA0LzQuNGA0L7QstCw0L3QuNC1INC60L7QvdGC0LXQvdGC0LBcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gY29udGVudFxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSByZWNvcmRcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgICAqL1xuICAgIHJlbmRlcihjb250ZW50LCByZWNvcmQpIHtcblxuICAgICAgICBpZiAoICEgVGFibGVVdGlscy5pc09iamVjdChjb250ZW50KSkge1xuICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICB9XG5cblxuICAgICAgICBpZiAoICEgVGFibGVVdGlscy5pc09iamVjdChjb250ZW50LmF0dHIpKSB7XG4gICAgICAgICAgICBjb250ZW50LmF0dHIgPSB7fVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCAhIGNvbnRlbnQuYXR0ci5oYXNPd25Qcm9wZXJ0eSgnY2xhc3MnKSkge1xuICAgICAgICAgICAgY29udGVudC5hdHRyLmNsYXNzID0gJ2J0biBidG4tb3V0bGluZS1zZWNvbmRhcnknXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29udGVudC5hdHRyLmhhc093blByb3BlcnR5KCd0eXBlJykpIHtcbiAgICAgICAgICAgIGRlbGV0ZSBjb250ZW50LmF0dHIudHlwZTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgbGV0IGF0dHJpYnV0ZXMgPSBbXTtcblxuICAgICAgICAkLmVhY2goY29udGVudC5hdHRyLCBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcbiAgICAgICAgICAgIGlmIChbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiB2YWx1ZSkgPj0gMCkge1xuICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXMucHVzaChuYW1lICsgJz1cIicgKyB2YWx1ZSArICdcIicpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBsZXQgYnRuID0gJChcbiAgICAgICAgICAgIFRhYmxlVXRpbHMucmVuZGVyKFRhYmxlVHBsWydjb2x1bW5zL2J1dHRvbi5odG1sJ10sIHtcbiAgICAgICAgICAgICAgICBjb250ZW50OiBjb250ZW50LmNvbnRlbnQsXG4gICAgICAgICAgICAgICAgYXR0cjogYXR0cmlidXRlcy5sZW5ndGggPiAwID8gKCcgJyArIGF0dHJpYnV0ZXMuam9pbignICcpKSA6ICcnLFxuICAgICAgICAgICAgfSlcbiAgICAgICAgKTtcblxuXG4gICAgICAgIGlmIChjb250ZW50Lmhhc093blByb3BlcnR5KCdvbkNsaWNrJykpIHtcbiAgICAgICAgICAgIGxldCB0aGF0ID0gdGhpcztcblxuICAgICAgICAgICAgbGV0IHByb3AgPSB7XG4gICAgICAgICAgICAgICAgdGFibGU6IHRoYXQuX3RhYmxlLFxuICAgICAgICAgICAgICAgIHJlY29yZDogcmVjb3JkLFxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjb250ZW50Lm9uQ2xpY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICBidG4uY2xpY2soZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGV2ZW50LmNhbmNlbEJ1YmJsZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgICAgICAgICAgICAgcHJvcC5ldmVudCA9IGV2ZW50O1xuXG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnQub25DbGljayhwcm9wKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgY29udGVudC5vbkNsaWNrID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIGxldCBmdW5jID0gbmV3IEZ1bmN0aW9uKCdwcm9wJywgY29udGVudC5vbkNsaWNrKTtcblxuICAgICAgICAgICAgICAgIGJ0bi5jbGljayhmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQuY2FuY2VsQnViYmxlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICAgICAgICAgICAgICBwcm9wLmV2ZW50ID0gZXZlbnQ7XG5cbiAgICAgICAgICAgICAgICAgICAgZnVuYyhwcm9wKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBidG4uY2xpY2soZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGV2ZW50LmNhbmNlbEJ1YmJsZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGJ0bi5jbGljayhmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICBldmVudC5jYW5jZWxCdWJibGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBidG47XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBDb2x1bW5zQnV0dG9uOyIsIlxuaW1wb3J0IFRhYmxlVXRpbHMgZnJvbSBcIi4uL3RhYmxlLnV0aWxzXCI7XG5pbXBvcnQgVGFibGVUcGwgICBmcm9tIFwiLi4vdGFibGUudHBsXCI7XG5pbXBvcnQgQ29sdW1uICAgICAgICAgICBmcm9tIFwiLi4vYWJzdHJhY3QvQ29sdW1uXCI7XG5cbmNsYXNzIENvbHVtbnNMaW5rIGV4dGVuZHMgQ29sdW1uIHtcblxuICAgIC8qKlxuICAgICAqINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPXG4gICAgICogQHBhcmFtIHtUYWJsZUluc3RhbmNlfSB0YWJsZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSAgICAgICAgICAgICAgb3B0aW9uc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHRhYmxlLCBvcHRpb25zKSB7XG5cbiAgICAgICAgb3B0aW9ucyA9ICQuZXh0ZW5kKHRydWUsIHtcbiAgICAgICAgICAgIHR5cGU6ICdsaW5rJyxcbiAgICAgICAgICAgIGZpZWxkOiBudWxsLFxuICAgICAgICAgICAgbGFiZWw6IG51bGwsXG4gICAgICAgICAgICBzaG93OiB0cnVlLFxuICAgICAgICAgICAgd2lkdGg6IG51bGwsXG4gICAgICAgICAgICBtaW5XaWR0aDogbnVsbCxcbiAgICAgICAgICAgIG1heFdpZHRoOiBudWxsLFxuICAgICAgICB9LCBvcHRpb25zKTtcblxuICAgICAgICBzdXBlcih0YWJsZSwgb3B0aW9ucyk7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiDQmtC+0L3QstC10YDRgtC40YDQvtCy0LDQvdC40LUg0LfQvdCw0YfQtdC90LjRjyDQutC+0LvQvtC90LrQuCDQsiDRgtC10LrRgdGCXG4gICAgICogQHBhcmFtIHsqfSBjb2x1bW5WYWx1ZVxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAgICovXG4gICAgY29udmVydFRvU3RyaW5nKGNvbHVtblZhbHVlKSB7XG5cbiAgICAgICAgaWYgKFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIGNvbHVtblZhbHVlKSA+PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gU3RyaW5nKGNvbHVtblZhbHVlKTtcblxuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBjb2x1bW5WYWx1ZSA9PT0gJ29iamVjdCcgJiZcbiAgICAgICAgICAgIGNvbHVtblZhbHVlLmhhc093blByb3BlcnR5KCdjb250ZW50JykgJiZcbiAgICAgICAgICAgIHR5cGVvZiBjb2x1bW5WYWx1ZS5jb250ZW50ID09PSAnc3RyaW5nJ1xuICAgICAgICApIHtcbiAgICAgICAgICAgIHJldHVybiBjb2x1bW5WYWx1ZS5jb250ZW50O1xuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgIH1cbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqINCk0L7RgNC80LjRgNC+0LLQsNC90LjQtSDQutC+0L3RgtC10L3RgtCwXG4gICAgICogQHBhcmFtIHtvYmplY3R8c3RyaW5nfSBjb250ZW50XG4gICAgICogQHBhcmFtIHtvYmplY3R9ICAgICAgICByZWNvcmRcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgICAqL1xuICAgIHJlbmRlcihjb250ZW50LCByZWNvcmQpIHtcblxuICAgICAgICBpZiAoXG4gICAgICAgICAgICAodHlwZW9mIGNvbnRlbnQgIT09ICdzdHJpbmcnIHx8ICEgY29udGVudClcbiAgICAgICAgICAgICYmXG4gICAgICAgICAgICAoICEgVGFibGVVdGlscy5pc09iamVjdChjb250ZW50KSB8fFxuICAgICAgICAgICAgICAhIGNvbnRlbnQuaGFzT3duUHJvcGVydHkoJ3VybCcpIHx8XG4gICAgICAgICAgICAgIHR5cGVvZiBjb250ZW50LnVybCAhPT0gJ3N0cmluZycgfHxcbiAgICAgICAgICAgICAgISBjb250ZW50LnVybFxuICAgICAgICAgICAgKVxuICAgICAgICApIHtcbiAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBsaW5rQ29udGVudCA9ICcnO1xuICAgICAgICBsZXQgYXR0ciAgICAgICAgPSB7fTtcblxuICAgICAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBhdHRyLmhyZWYgICA9IGNvbnRlbnQ7XG4gICAgICAgICAgICBsaW5rQ29udGVudCA9IGNvbnRlbnQ7XG5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChjb250ZW50Lmhhc093blByb3BlcnR5KCdhdHRyJykgJiZcbiAgICAgICAgICAgICAgICBUYWJsZVV0aWxzLmlzT2JqZWN0KGNvbnRlbnQuYXR0cilcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIGF0dHIgPSBjb250ZW50LmF0dHI7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChhdHRyLmhhc093blByb3BlcnR5KCdocmVmJykpIHtcbiAgICAgICAgICAgICAgICBkZWxldGUgYXR0ci5ocmVmO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBhdHRyLmhyZWYgPSBjb250ZW50LnVybDtcblxuXG4gICAgICAgICAgICBpZiAoY29udGVudC5oYXNPd25Qcm9wZXJ0eSgnY29udGVudCcpICYmXG4gICAgICAgICAgICAgICAgdHlwZW9mIGNvbnRlbnQuY29udGVudCA9PT0gJ3N0cmluZycgJiZcbiAgICAgICAgICAgICAgICBjb250ZW50LmNvbnRlbnRcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIGxpbmtDb250ZW50ID0gY29udGVudC5jb250ZW50O1xuXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGxpbmtDb250ZW50ID0gY29udGVudC51cmw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuXG4gICAgICAgIGxldCBhdHRyaWJ1dGVzID0gW107XG5cbiAgICAgICAgJC5lYWNoKGF0dHIsIGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIHZhbHVlKSA+PSAwKSB7XG4gICAgICAgICAgICAgICAgYXR0cmlidXRlcy5wdXNoKG5hbWUgKyAnPVwiJyArIHZhbHVlICsgJ1wiJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGxldCBsaW5rID0gJChcbiAgICAgICAgICAgIFRhYmxlVXRpbHMucmVuZGVyKFRhYmxlVHBsWydjb2x1bW5zL2xpbmsuaHRtbCddLCB7XG4gICAgICAgICAgICAgICAgY29udGVudDogbGlua0NvbnRlbnQsXG4gICAgICAgICAgICAgICAgYXR0cjogYXR0cmlidXRlcy5sZW5ndGggPiAwID8gKCcgJyArIGF0dHJpYnV0ZXMuam9pbignICcpKSA6ICcnLFxuICAgICAgICAgICAgfSlcbiAgICAgICAgKTtcblxuXG4gICAgICAgIGxpbmsuY2xpY2soZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICBldmVudC5jYW5jZWxCdWJibGUgPSB0cnVlO1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIGxpbms7XG4gICAgfVxufVxuXG5cbmV4cG9ydCBkZWZhdWx0IENvbHVtbnNMaW5rOyIsIlxuaW1wb3J0IFRhYmxlVXRpbHMgZnJvbSBcIi4uL3RhYmxlLnV0aWxzXCI7XG5pbXBvcnQgVGFibGVUcGwgICBmcm9tIFwiLi4vdGFibGUudHBsXCI7XG5pbXBvcnQgQ29sdW1uICAgICBmcm9tIFwiLi4vYWJzdHJhY3QvQ29sdW1uXCI7XG5cblxuY2xhc3MgQ29sdW1uc01lbnUgZXh0ZW5kcyBDb2x1bW4ge1xuXG4gICAgLyoqXG4gICAgICog0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y9cbiAgICAgKiBAcGFyYW0ge1RhYmxlSW5zdGFuY2V9IHRhYmxlXG4gICAgICogQHBhcmFtIHtPYmplY3R9ICAgICAgICAgICAgICBvcHRpb25zXG4gICAgICovXG4gICAgY29uc3RydWN0b3IodGFibGUsIG9wdGlvbnMpIHtcblxuICAgICAgICBvcHRpb25zID0gJC5leHRlbmQodHJ1ZSwge1xuICAgICAgICAgICAgdHlwZTogJ21lbnUnLFxuICAgICAgICAgICAgZmllbGQ6IG51bGwsXG4gICAgICAgICAgICBsYWJlbDogbnVsbCxcbiAgICAgICAgICAgIHNob3c6IHRydWUsXG4gICAgICAgICAgICB3aWR0aDogbnVsbCxcbiAgICAgICAgICAgIG1pbldpZHRoOiBudWxsLFxuICAgICAgICAgICAgbWF4V2lkdGg6IG51bGwsXG4gICAgICAgIH0sIG9wdGlvbnMpO1xuXG4gICAgICAgIHN1cGVyKHRhYmxlLCBvcHRpb25zKTtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqINCk0L7RgNC80LjRgNC+0LLQsNC90LjQtSDQutC+0L3RgtC10L3RgtCwXG4gICAgICogQHBhcmFtIHtvYmplY3R8c3RyaW5nfSBjb250ZW50XG4gICAgICogQHBhcmFtIHtvYmplY3R9ICAgICAgICByZWNvcmRcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgICAqL1xuICAgIHJlbmRlcihjb250ZW50LCByZWNvcmQpIHtcblxuICAgICAgICBpZiAoICEgVGFibGVVdGlscy5pc09iamVjdChjb250ZW50KSB8fFxuICAgICAgICAgICAgICEgY29udGVudC5oYXNPd25Qcm9wZXJ0eSgnaXRlbXMnKSB8fFxuICAgICAgICAgICAgICEgQXJyYXkuaXNBcnJheShjb250ZW50Lml0ZW1zKSB8fFxuICAgICAgICAgICAgY29udGVudC5pdGVtcy5sZW5ndGggPT09IDBcbiAgICAgICAgKSB7XG4gICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgaXRlbXMgPSBbXTtcbiAgICAgICAgbGV0IGF0dHIgID0ge307XG5cbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoY29udGVudC5pdGVtcykpIHtcbiAgICAgICAgICAgICQuZWFjaChjb250ZW50Lml0ZW1zLCBmdW5jdGlvbiAoa2V5LCBpdGVtKSB7XG4gICAgICAgICAgICAgICAgaWYgKFRhYmxlVXRpbHMuaXNPYmplY3QoaXRlbSkgJiYgdHlwZW9mIGl0ZW0udHlwZSA9PT0gJ3N0cmluZycpIHtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbS50eXBlID09PSAnbGluaycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpdGVtLmhhc093blByb3BlcnR5KCd1cmwnKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0uaGFzT3duUHJvcGVydHkoJ2NvbnRlbnQnKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVvZiBpdGVtLnVybCA9PT0gJ3N0cmluZycgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlb2YgaXRlbS5jb250ZW50ID09PSAnc3RyaW5nJ1xuICAgICAgICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGxpbmtBdHRyID0ge307XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbS5oYXNPd25Qcm9wZXJ0eSgnYXR0cicpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRhYmxlVXRpbHMuaXNPYmplY3QoaXRlbS5hdHRyKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5rQXR0ciA9IGl0ZW0uYXR0cjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxpbmtBdHRyLmhhc093blByb3BlcnR5KCdocmVmJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGxpbmtBdHRyLmhyZWY7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCAhIGxpbmtBdHRyLmhhc093blByb3BlcnR5KCdjbGFzcycpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVvZiBsaW5rQXR0ci5jbGFzcyAhPT0gJ3N0cmluZydcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGlua0F0dHIuY2xhc3MgPSAnZHJvcGRvd24taXRlbSc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGlua0F0dHIuY2xhc3MgKz0gJyBkcm9wZG93bi1pdGVtJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgbGlua0F0dHJpYnV0ZXMgPSBbXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQuZWFjaChsaW5rQXR0ciwgZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiB2YWx1ZSkgPj0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGlua0F0dHJpYnV0ZXMucHVzaChuYW1lICsgJz1cIicgKyB2YWx1ZSArICdcIicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2xpbmsnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6IGl0ZW0udXJsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBpdGVtLmNvbnRlbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHI6IGxpbmtBdHRyaWJ1dGVzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaXRlbS50eXBlID09PSAnYnV0dG9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0uaGFzT3duUHJvcGVydHkoJ2NvbnRlbnQnKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0uaGFzT3duUHJvcGVydHkoJ29uQ2xpY2snKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVvZiBpdGVtLmNvbnRlbnQgPT09ICdzdHJpbmcnICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgWydzdHJpbmcnLCAnZnVuY3Rpb24nXS5pbmRleE9mKHR5cGVvZiBpdGVtLm9uQ2xpY2spID49IDBcbiAgICAgICAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBidG5BdHRyID0ge307XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbS5oYXNPd25Qcm9wZXJ0eSgnYXR0cicpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRhYmxlVXRpbHMuaXNPYmplY3QoaXRlbS5hdHRyKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBidG5BdHRyID0gaXRlbS5hdHRyO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChidG5BdHRyLmhhc093blByb3BlcnR5KCd0eXBlJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGJ0bkF0dHIudHlwZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGJ0bkF0dHIuaGFzT3duUHJvcGVydHkoJ2lkJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGJ0bkF0dHJbJ2lkJ107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCAhIGJ0bkF0dHIuaGFzT3duUHJvcGVydHkoJ2NsYXNzJykgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGJ0bkF0dHIuY2xhc3MgIT09ICdzdHJpbmcnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ0bkF0dHIuY2xhc3MgPSAnZHJvcGRvd24taXRlbSc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnRuQXR0ci5jbGFzcyArPSAnIGRyb3Bkb3duLWl0ZW0nO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBidG5BdHRyaWJ1dGVzID0gW107XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLmVhY2goYnRuQXR0ciwgZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiB2YWx1ZSkgPj0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnRuQXR0cmlidXRlcy5wdXNoKG5hbWUgKyAnPVwiJyArIHZhbHVlICsgJ1wiJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnYnV0dG9uJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IFRhYmxlVXRpbHMuaGFzaENvZGUoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudDogaXRlbS5jb250ZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrOiBpdGVtLm9uQ2xpY2ssXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHI6IGJ0bkF0dHJpYnV0ZXMubGVuZ3RoID4gMCA/ICgnICcgKyBidG5BdHRyaWJ1dGVzLmpvaW4oJyAnKSkgOiAnJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaXRlbS50eXBlID09PSAnZGl2aWRlcicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdkaXZpZGVyJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaXRlbS50eXBlID09PSAnaGVhZGVyJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0uaGFzT3duUHJvcGVydHkoJ2NvbnRlbnQnKSAmJiB0eXBlb2YgaXRlbS5jb250ZW50ID09PSAnc3RyaW5nJ1xuICAgICAgICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdoZWFkZXInLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBpdGVtLmNvbnRlbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb250ZW50Lmhhc093blByb3BlcnR5KCdhdHRyJykgJiZcbiAgICAgICAgICAgIFRhYmxlVXRpbHMuaXNPYmplY3QoY29udGVudC5hdHRyKVxuICAgICAgICApIHtcbiAgICAgICAgICAgIGF0dHIgPSBjb250ZW50LmF0dHI7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoICEgYXR0ci5oYXNPd25Qcm9wZXJ0eSgnY2xhc3MnKSB8fFxuICAgICAgICAgICAgWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2YgYXR0ci5jbGFzcykgPCAwXG4gICAgICAgICkge1xuICAgICAgICAgICAgYXR0ci5jbGFzcyA9ICdidG4gcm91bmRlZC0xJztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChhdHRyLmhhc093blByb3BlcnR5KCd0eXBlJykpIHtcbiAgICAgICAgICAgIGRlbGV0ZSBhdHRyLnR5cGU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYXR0ci5oYXNPd25Qcm9wZXJ0eSgnZGF0YS1icy10b2dnbGUnKSkge1xuICAgICAgICAgICAgZGVsZXRlIGF0dHJbJ2RhdGEtYnMtdG9nZ2xlJ107XG4gICAgICAgIH1cblxuXG4gICAgICAgIGxldCBhdHRyaWJ1dGVzID0gW107XG5cbiAgICAgICAgJC5lYWNoKGF0dHIsIGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIHZhbHVlKSA+PSAwKSB7XG4gICAgICAgICAgICAgICAgYXR0cmlidXRlcy5wdXNoKG5hbWUgKyAnPVwiJyArIHZhbHVlICsgJ1wiJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG5cbiAgICAgICAgbGV0IG1lbnVDb250ZW50ID0gY29udGVudC5oYXNPd25Qcm9wZXJ0eSgnY29udGVudCcpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVvZiBjb250ZW50LmNvbnRlbnQgPT09ICdzdHJpbmcnICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQuY29udGVudFxuICAgICAgICAgICAgPyBjb250ZW50LmNvbnRlbnRcbiAgICAgICAgICAgIDogJzxpIGNsYXNzPVwiYmkgYmktdGhyZWUtZG90cy12ZXJ0aWNhbFwiPjwvaT4nO1xuXG4gICAgICAgIGxldCBwb3NpdGlvbiA9IGNvbnRlbnQuaGFzT3duUHJvcGVydHkoJ3Bvc2l0aW9uJykgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGNvbnRlbnQucG9zaXRpb24gPT09ICdzdHJpbmcnICYmXG4gICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQucG9zaXRpb25cbiAgICAgICAgICAgID8gY29udGVudC5wb3NpdGlvblxuICAgICAgICAgICAgOiAnZW5kJztcblxuXG4gICAgICAgIGxldCBtZW51ID0gJChUYWJsZVV0aWxzLnJlbmRlcihUYWJsZVRwbFsnY29sdW1ucy9tZW51Lmh0bWwnXSwge1xuICAgICAgICAgICAgY29udGVudDogbWVudUNvbnRlbnQsXG4gICAgICAgICAgICBwb3NpdGlvbjogcG9zaXRpb24sXG4gICAgICAgICAgICBhdHRyOiBhdHRyaWJ1dGVzLmxlbmd0aCA+IDAgPyAoJyAnICsgYXR0cmlidXRlcy5qb2luKCcgJykpIDogJycsXG4gICAgICAgICAgICBpdGVtczogaXRlbXMsXG4gICAgICAgIH0pKTtcblxuICAgICAgICBtZW51LmNsaWNrKGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgZXZlbnQuY2FuY2VsQnViYmxlID0gdHJ1ZTtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH0pO1xuXG5cbiAgICAgICAgbGV0IGRyb3Bkb3duTWVudSA9IG51bGw7XG5cbiAgICAgICAgJChtZW51KS5vbignc2hvdy5icy5kcm9wZG93bicsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICBkcm9wZG93bk1lbnUgPSAkKG1lbnUpLmZpbmQoJy5kcm9wZG93bi1tZW51Jyk7XG5cbiAgICAgICAgICAgICQoJ2JvZHknKS5hcHBlbmQoZHJvcGRvd25NZW51LmRldGFjaCgpKTtcblxuICAgICAgICAgICAgdmFyIGVPZmZzZXQgPSAkKGUudGFyZ2V0KS5vZmZzZXQoKTtcblxuICAgICAgICAgICAgZHJvcGRvd25NZW51LmNzcyh7XG4gICAgICAgICAgICAgICAgJ2Rpc3BsYXknOiAnYmxvY2snLFxuICAgICAgICAgICAgICAgICd0b3AnICAgIDogZU9mZnNldC50b3AgKyAkKGUudGFyZ2V0KS5vdXRlckhlaWdodCgpLFxuICAgICAgICAgICAgICAgICdsZWZ0JyAgIDogZU9mZnNldC5sZWZ0XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgJChtZW51KS5vbignaGlkZS5icy5kcm9wZG93bicsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAkKG1lbnUpLmFwcGVuZChkcm9wZG93bk1lbnUuZGV0YWNoKCkpO1xuICAgICAgICAgICAgZHJvcGRvd25NZW51LmhpZGUoKTtcbiAgICAgICAgfSk7XG5cblxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShpdGVtcykpIHtcbiAgICAgICAgICAgIGxldCB0aGF0ID0gdGhpcztcblxuICAgICAgICAgICAgJC5lYWNoKGl0ZW1zLCBmdW5jdGlvbiAoa2V5LCBpdGVtKSB7XG4gICAgICAgICAgICAgICAgaWYgKFRhYmxlVXRpbHMuaXNPYmplY3QoaXRlbSkgJiYgdHlwZW9mIGl0ZW0udHlwZSA9PT0gJ3N0cmluZycpIHtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbS50eXBlID09PSAnYnV0dG9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0uaGFzT3duUHJvcGVydHkoJ2NvbnRlbnQnKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0uaGFzT3duUHJvcGVydHkoJ29uQ2xpY2snKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFsnc3RyaW5nJywgJ2Z1bmN0aW9uJ10uaW5kZXhPZih0eXBlb2YgaXRlbS5vbkNsaWNrKSA+PSAwICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGl0ZW0uY29udGVudCA9PT0gJ3N0cmluZydcbiAgICAgICAgICAgICAgICAgICAgICAgICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgnYnV0dG9uI2J0bi1kcm9wZG93bi0nICsgaXRlbS5pZCwgbWVudSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmNsaWNrKGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHByb3AgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFibGU6IHRoYXQuX3RhYmxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlY29yZDogcmVjb3JkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50OiBldmVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgaXRlbS5vbkNsaWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5vbkNsaWNrKHByb3ApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBpdGVtLm9uQ2xpY2sgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKG5ldyBGdW5jdGlvbigncHJvcCcsIGl0ZW0ub25DbGljaykpKHByb3ApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG1lbnU7XG4gICAgfVxufVxuXG5cbmV4cG9ydCBkZWZhdWx0IENvbHVtbnNNZW51OyIsImltcG9ydCBUYWJsZVV0aWxzIGZyb20gXCIuLi90YWJsZS51dGlsc1wiO1xuaW1wb3J0IFRhYmxlVHBsICAgZnJvbSBcIi4uL3RhYmxlLnRwbFwiO1xuaW1wb3J0IENvbHVtbiAgICAgICAgICAgZnJvbSBcIi4uL2Fic3RyYWN0L0NvbHVtblwiO1xuXG5jbGFzcyBDb2x1bW5zQmFkZ2UgZXh0ZW5kcyBDb2x1bW4ge1xuXG4gICAgLyoqXG4gICAgICog0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y9cbiAgICAgKiBAcGFyYW0ge1RhYmxlSW5zdGFuY2V9IHRhYmxlXG4gICAgICogQHBhcmFtIHtPYmplY3R9ICAgICAgICAgICAgICBvcHRpb25zXG4gICAgICovXG4gICAgY29uc3RydWN0b3IodGFibGUsIG9wdGlvbnMpIHtcblxuICAgICAgICBvcHRpb25zID0gJC5leHRlbmQodHJ1ZSwge1xuICAgICAgICAgICAgdHlwZTogJ2JhZGdlJyxcbiAgICAgICAgICAgIGZpZWxkOiBudWxsLFxuICAgICAgICAgICAgbGFiZWw6IG51bGwsXG4gICAgICAgICAgICBzaG93OiB0cnVlLFxuICAgICAgICAgICAgd2lkdGg6IG51bGwsXG4gICAgICAgICAgICBtaW5XaWR0aDogbnVsbCxcbiAgICAgICAgICAgIG1heFdpZHRoOiBudWxsLFxuICAgICAgICB9LCBvcHRpb25zKTtcblxuICAgICAgICBzdXBlcih0YWJsZSwgb3B0aW9ucyk7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiDQmtC+0L3QstC10YDRgtC40YDQvtCy0LDQvdC40LUg0LfQvdCw0YfQtdC90LjRjyDQutC+0LvQvtC90LrQuCDQsiDRgtC10LrRgdGCXG4gICAgICogQHBhcmFtIHsqfSBjb2x1bW5WYWx1ZVxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAgICovXG4gICAgY29udmVydFRvU3RyaW5nKGNvbHVtblZhbHVlKSB7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBjb2x1bW5WYWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHJldHVybiBjb2x1bW5WYWx1ZTtcblxuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBjb2x1bW5WYWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIHJldHVybiBTdHJpbmcoY29sdW1uVmFsdWUpO1xuXG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGNvbHVtblZhbHVlID09PSAnb2JqZWN0JyAmJlxuICAgICAgICAgICAgY29sdW1uVmFsdWUuaGFzT3duUHJvcGVydHkoJ3RleHQnKSAmJlxuICAgICAgICAgICAgWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2YgY29sdW1uVmFsdWUudGV4dCkgPj0gMFxuICAgICAgICApIHtcbiAgICAgICAgICAgIHJldHVybiBTdHJpbmcoY29sdW1uVmFsdWUudGV4dCk7XG5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgfVxuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICog0KTQvtGA0LzQuNGA0L7QstCw0L3QuNC1INC60L7QvdGC0LXQvdGC0LBcbiAgICAgKiBAcGFyYW0ge29iamVjdHxzdHJpbmd8bnVtYmVyfSBjb250ZW50XG4gICAgICogQHBhcmFtIHtvYmplY3R9ICAgICAgICAgICAgICAgcmVjb3JkXG4gICAgICogQHJldHVybnMge3N0cmluZ31cbiAgICAgKi9cbiAgICByZW5kZXIoY29udGVudCwgcmVjb3JkKSB7XG5cbiAgICAgICAgaWYgKFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIGNvbnRlbnQpID49IDApIHtcbiAgICAgICAgICAgIGNvbnRlbnQgPSB7IHR5cGU6ICdzZWNvbmRhcnknLCB0ZXh0OiBjb250ZW50IH07XG5cbiAgICAgICAgfSBlbHNlIGlmICggISBUYWJsZVV0aWxzLmlzT2JqZWN0KGNvbnRlbnQpIHx8XG4gICAgICAgICAgICAgISBjb250ZW50Lmhhc093blByb3BlcnR5KCd0eXBlJykgfHxcbiAgICAgICAgICAgICAhIGNvbnRlbnQuaGFzT3duUHJvcGVydHkoJ3RleHQnKSB8fFxuICAgICAgICAgICAgIHR5cGVvZiBjb250ZW50LnR5cGUgIT09ICdzdHJpbmcnIHx8XG4gICAgICAgICAgICAgdHlwZW9mIGNvbnRlbnQudGV4dCAhPT0gJ3N0cmluZycgfHxcbiAgICAgICAgICAgICAhIGNvbnRlbnQudGV4dFxuICAgICAgICApIHtcbiAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb250ZW50LnR5cGUgPT09ICcnIHx8IGNvbnRlbnQudHlwZSA9PT0gJ25vbmUnKSB7XG4gICAgICAgICAgICByZXR1cm4gY29udGVudC50ZXh0O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFRhYmxlVXRpbHMucmVuZGVyKFRhYmxlVHBsWydjb2x1bW5zL2JhZGdlLmh0bWwnXSwge1xuICAgICAgICAgICAgdHlwZTogY29udGVudC50eXBlLFxuICAgICAgICAgICAgdGV4dDogY29udGVudC50ZXh0XG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ29sdW1uc0JhZGdlOyIsImltcG9ydCBUYWJsZVV0aWxzICBmcm9tIFwiLi4vdGFibGUudXRpbHNcIjtcbmltcG9ydCBUYWJsZVJlbmRlciBmcm9tIFwiLi4vdGFibGUucmVuZGVyXCI7XG5pbXBvcnQgQ29sdW1uICAgICAgICAgICAgZnJvbSBcIi4uL2Fic3RyYWN0L0NvbHVtblwiO1xuXG5jbGFzcyBDb2x1bW5zQ29tcG9uZW50IGV4dGVuZHMgQ29sdW1uIHtcblxuICAgIC8qKlxuICAgICAqINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPXG4gICAgICogQHBhcmFtIHtUYWJsZUluc3RhbmNlfSB0YWJsZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSAgICAgICAgICAgICAgb3B0aW9uc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHRhYmxlLCBvcHRpb25zKSB7XG5cbiAgICAgICAgb3B0aW9ucyA9ICQuZXh0ZW5kKHRydWUsIHtcbiAgICAgICAgICAgIHR5cGU6ICdjb21wb25lbnQnLFxuICAgICAgICAgICAgZmllbGQ6IG51bGwsXG4gICAgICAgICAgICBsYWJlbDogbnVsbCxcbiAgICAgICAgICAgIHNob3c6IHRydWUsXG4gICAgICAgICAgICB3aWR0aDogbnVsbCxcbiAgICAgICAgICAgIG1pbldpZHRoOiBudWxsLFxuICAgICAgICAgICAgbWF4V2lkdGg6IG51bGwsXG4gICAgICAgIH0sIG9wdGlvbnMpO1xuXG4gICAgICAgIHN1cGVyKHRhYmxlLCBvcHRpb25zKTtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqINCk0L7RgNC80LjRgNC+0LLQsNC90LjQtSDQutC+0L3RgtC10L3RgtCwXG4gICAgICogQHBhcmFtIHtvYmplY3R8c3RyaW5nfSBjb250ZW50XG4gICAgICogQHBhcmFtIHtvYmplY3R9ICAgICAgICByZWNvcmRcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgICAqL1xuICAgIHJlbmRlcihjb250ZW50LCByZWNvcmQpIHtcblxuICAgICAgICBpZiAoICEgVGFibGVVdGlscy5pc09iamVjdChjb250ZW50KSB8fFxuICAgICAgICAgICAgICEgY29udGVudC5oYXNPd25Qcm9wZXJ0eSgnY29tcG9uZW50JykgfHxcbiAgICAgICAgICAgICB0eXBlb2YgY29udGVudC5jb21wb25lbnQgIT09ICdzdHJpbmcnIHx8XG4gICAgICAgICAgICAgISBjb250ZW50LmNvbXBvbmVudFxuICAgICAgICApIHtcbiAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBUYWJsZVJlbmRlci5yZW5kZXJDb21wb25lbnRzKHRoaXMuX3RhYmxlLCBjb250ZW50LCAncmVjb3Jkc19zaG93Jyk7XG4gICAgfVxufVxuXG5cbmV4cG9ydCBkZWZhdWx0IENvbHVtbnNDb21wb25lbnQ7IiwiaW1wb3J0IFRhYmxlVXRpbHMgZnJvbSBcIi4uL3RhYmxlLnV0aWxzXCI7XG5pbXBvcnQgVGFibGVUcGwgICBmcm9tIFwiLi4vdGFibGUudHBsXCI7XG5pbXBvcnQgQ29sdW1uICAgICAgICAgICBmcm9tIFwiLi4vYWJzdHJhY3QvQ29sdW1uXCI7XG5cblxuY2xhc3MgQ29sdW1uc1Byb2dyZXNzIGV4dGVuZHMgQ29sdW1uIHtcblxuICAgIC8qKlxuICAgICAqINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPXG4gICAgICogQHBhcmFtIHtUYWJsZUluc3RhbmNlfSB0YWJsZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSAgICAgICAgICAgICAgb3B0aW9uc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHRhYmxlLCBvcHRpb25zKSB7XG5cbiAgICAgICAgb3B0aW9ucyA9ICQuZXh0ZW5kKHRydWUsIHtcbiAgICAgICAgICAgIHR5cGU6ICdwcm9ncmVzcycsXG4gICAgICAgICAgICBmaWVsZDogbnVsbCxcbiAgICAgICAgICAgIGxhYmVsOiBudWxsLFxuICAgICAgICAgICAgc2hvdzogdHJ1ZSxcbiAgICAgICAgICAgIHdpZHRoOiBudWxsLFxuICAgICAgICAgICAgbWluV2lkdGg6IG51bGwsXG4gICAgICAgICAgICBtYXhXaWR0aDogbnVsbCxcbiAgICAgICAgICAgIGF0dHI6IHt9LFxuXG4gICAgICAgICAgICBzaG93UGVyY2VudDogbnVsbCxcbiAgICAgICAgICAgIGJhckNvbG9yOiAncHJpbWFyeScsXG4gICAgICAgICAgICBiYXJXaWR0aDogbnVsbCxcbiAgICAgICAgICAgIGJhckhlaWdodDogbnVsbCxcbiAgICAgICAgfSwgb3B0aW9ucyk7XG5cbiAgICAgICAgc3VwZXIodGFibGUsIG9wdGlvbnMpO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICog0JrQvtC90LLQtdGA0YLQuNGA0L7QstCw0L3QuNC1INC30L3QsNGH0LXQvdC40Y8g0LrQvtC70L7QvdC60Lgg0LIg0YLQtdC60YHRglxuICAgICAqIEBwYXJhbSB7Kn0gY29sdW1uVmFsdWVcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgICAqL1xuICAgIGNvbnZlcnRUb1N0cmluZyhjb2x1bW5WYWx1ZSkge1xuXG4gICAgICAgIGlmIChbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiBjb2x1bW5WYWx1ZSkgPj0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIFN0cmluZyhjb2x1bW5WYWx1ZSk7XG5cbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgY29sdW1uVmFsdWUgPT09ICdvYmplY3QnICYmXG4gICAgICAgICAgICBjb2x1bW5WYWx1ZS5oYXNPd25Qcm9wZXJ0eSgncGVyY2VudCcpICYmXG4gICAgICAgICAgICBbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiBjb2x1bW5WYWx1ZS5wZXJjZW50KSA+PSAwXG4gICAgICAgICkge1xuICAgICAgICAgICAgcmV0dXJuIFN0cmluZyhjb2x1bW5WYWx1ZS5wZXJjZW50KTtcblxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICB9XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiDQpNC+0YDQvNC40YDQvtCy0LDQvdC40LUg0LrQvtC90YLQtdC90YLQsFxuICAgICAqIEBwYXJhbSB7b2JqZWN0fHN0cmluZ3xudW1iZXJ9IGNvbnRlbnRcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gICAgICAgICAgICAgIHJlY29yZFxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAgICovXG4gICAgcmVuZGVyKGNvbnRlbnQsIHJlY29yZCkge1xuXG4gICAgICAgIGlmIChcbiAgICAgICAgICAgICggISBUYWJsZVV0aWxzLmlzTnVtZXJpYyhjb250ZW50KSkgJiZcbiAgICAgICAgICAgIChcbiAgICAgICAgICAgICAgICAhIFRhYmxlVXRpbHMuaXNPYmplY3QoY29udGVudCkgfHxcbiAgICAgICAgICAgICAgICAhIGNvbnRlbnQuaGFzT3duUHJvcGVydHkoJ3BlcmNlbnQnKSB8fFxuICAgICAgICAgICAgICAgICEgVGFibGVVdGlscy5pc051bWVyaWMoY29udGVudC5wZXJjZW50KVxuICAgICAgICAgICAgKVxuICAgICAgICApIHtcbiAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBkZXNjcmlwdGlvbiA9IG51bGw7XG4gICAgICAgIGxldCBwZXJjZW50ICAgICA9IDA7XG4gICAgICAgIGxldCBwZXJjZW50VGV4dCA9ICcnO1xuICAgICAgICBsZXQgY29sb3IgICAgICAgPSB0eXBlb2YgdGhpcy5fb3B0aW9ucy5iYXJDb2xvciA9PT0gJ3N0cmluZycgPyB0aGlzLl9vcHRpb25zLmJhckNvbG9yIDogJ3ByaW1hcnknO1xuICAgICAgICBsZXQgYXR0ciAgICAgICAgPSB0aGlzLl9vcHRpb25zLmF0dHI7XG5cbiAgICAgICAgYXR0ciA9IFRhYmxlVXRpbHMubWVyZ2VBdHRyKGF0dHIsIHsgY2xhc3M6ICdwcm9ncmVzcyBtZS0xJyB9KTtcblxuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy5iYXJXaWR0aCkge1xuICAgICAgICAgICAgbGV0IGJhcldpZHRoID0gVGFibGVVdGlscy5pc051bWVyaWModGhpcy5fb3B0aW9ucy5iYXJXaWR0aClcbiAgICAgICAgICAgICAgICA/ICh0aGlzLl9vcHRpb25zLmJhcldpZHRoICsgJ3B4JylcbiAgICAgICAgICAgICAgICA6IHRoaXMuX29wdGlvbnMuYmFyV2lkdGg7XG4gICAgICAgICAgICBhdHRyID0gVGFibGVVdGlscy5tZXJnZUF0dHIoYXR0ciwgeyBzdHlsZTogJ3dpZHRoOicgKyBiYXJXaWR0aCB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLmJhckhlaWdodCkge1xuICAgICAgICAgICAgbGV0IGJhckhlaWdodCA9IFRhYmxlVXRpbHMuaXNOdW1lcmljKHRoaXMuX29wdGlvbnMuYmFySGVpZ2h0KVxuICAgICAgICAgICAgICAgID8gKHRoaXMuX29wdGlvbnMuYmFySGVpZ2h0ICsgJ3B4JylcbiAgICAgICAgICAgICAgICA6IHRoaXMuX29wdGlvbnMuYmFySGVpZ2h0O1xuICAgICAgICAgICAgYXR0ciA9IFRhYmxlVXRpbHMubWVyZ2VBdHRyKGF0dHIsIHsgc3R5bGU6ICdoZWlnaHQ6JyArIGJhckhlaWdodCB9KTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgaWYgKFRhYmxlVXRpbHMuaXNOdW1lcmljKGNvbnRlbnQpKSB7XG4gICAgICAgICAgICBpZiAoY29udGVudCA8IDAgKSB7XG4gICAgICAgICAgICAgICAgcGVyY2VudCA9IDA7XG5cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY29udGVudCA+IDEwMCApIHtcbiAgICAgICAgICAgICAgICBwZXJjZW50ID0gMTAwO1xuXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHBlcmNlbnQgPSBjb250ZW50O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoY29udGVudC5wZXJjZW50IDwgMCApIHtcbiAgICAgICAgICAgICAgICBwZXJjZW50ID0gMDtcblxuICAgICAgICAgICAgfSBlbHNlIGlmIChjb250ZW50LnBlcmNlbnQgPiAxMDAgKSB7XG4gICAgICAgICAgICAgICAgcGVyY2VudCA9IDEwMDtcblxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwZXJjZW50ID0gY29udGVudC5wZXJjZW50O1xuICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgIGlmIChjb250ZW50Lmhhc093blByb3BlcnR5KCdjb2xvcicpICYmIHR5cGVvZiBjb250ZW50LmNvbG9yID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIGNvbG9yID0gY29udGVudC5jb2xvcjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGNvbnRlbnQuaGFzT3duUHJvcGVydHkoJ2Rlc2NyaXB0aW9uJykgJiZcbiAgICAgICAgICAgICAgICB0eXBlb2YgY29udGVudC5kZXNjcmlwdGlvbiA9PT0gJ3N0cmluZycgJiZcbiAgICAgICAgICAgICAgICBjb250ZW50LmRlc2NyaXB0aW9uICE9PSAnJ1xuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb24gPSBjb250ZW50LmRlc2NyaXB0aW9uO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMuc2hvd1BlcmNlbnQpIHtcbiAgICAgICAgICAgIHBlcmNlbnRUZXh0ID0gcGVyY2VudCArICclJztcbiAgICAgICAgfVxuXG5cbiAgICAgICAgbGV0IGF0dHJpYnV0ZXMgPSBbXTtcblxuICAgICAgICAkLmVhY2goYXR0ciwgZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAoWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2YgdmFsdWUpID49IDApIHtcbiAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzLnB1c2gobmFtZSArICc9XCInICsgdmFsdWUgKyAnXCInKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cblxuICAgICAgICByZXR1cm4gVGFibGVVdGlscy5yZW5kZXIoVGFibGVUcGxbJ2NvbHVtbnMvcHJvZ3Jlc3MuaHRtbCddLCB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogZGVzY3JpcHRpb24sXG4gICAgICAgICAgICBwZXJjZW50OiBwZXJjZW50LFxuICAgICAgICAgICAgcGVyY2VudFRleHQ6IHBlcmNlbnRUZXh0LFxuICAgICAgICAgICAgY29sb3I6IGNvbG9yLFxuICAgICAgICAgICAgYXR0cjogYXR0cmlidXRlcy5sZW5ndGggPiAwID8gKCcgJyArIGF0dHJpYnV0ZXMuam9pbignICcpKSA6ICcnLFxuICAgICAgICB9KTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IENvbHVtbnNQcm9ncmVzczsiLCJpbXBvcnQgVGFibGVVdGlscyBmcm9tIFwiLi4vdGFibGUudXRpbHNcIjtcbmltcG9ydCBUYWJsZVRwbCAgIGZyb20gXCIuLi90YWJsZS50cGxcIjtcbmltcG9ydCBDb2x1bW4gICAgICAgICAgIGZyb20gXCIuLi9hYnN0cmFjdC9Db2x1bW5cIjtcblxuY2xhc3MgQ29sdW1uc0ltYWdlIGV4dGVuZHMgQ29sdW1uIHtcblxuICAgIC8qKlxuICAgICAqINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPXG4gICAgICogQHBhcmFtIHtUYWJsZUluc3RhbmNlfSB0YWJsZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSAgICAgICAgICAgICAgb3B0aW9uc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHRhYmxlLCBvcHRpb25zKSB7XG5cbiAgICAgICAgb3B0aW9ucyA9ICQuZXh0ZW5kKHRydWUsIHtcbiAgICAgICAgICAgIHR5cGU6ICdpbWFnZScsXG4gICAgICAgICAgICBmaWVsZDogbnVsbCxcbiAgICAgICAgICAgIGxhYmVsOiBudWxsLFxuICAgICAgICAgICAgc2hvdzogdHJ1ZSxcbiAgICAgICAgICAgIHdpZHRoOiBudWxsLFxuICAgICAgICAgICAgbWluV2lkdGg6IG51bGwsXG4gICAgICAgICAgICBtYXhXaWR0aDogbnVsbCxcbiAgICAgICAgICAgIGF0dHI6IHt9LFxuICAgICAgICAgICAgaW1nV2lkdGg6IG51bGwsXG4gICAgICAgICAgICBpbWdIZWlnaHQ6IG51bGwsXG4gICAgICAgICAgICBpbWdCb3JkZXI6IG51bGwsXG4gICAgICAgICAgICBpbWdTdHlsZTogbnVsbCxcbiAgICAgICAgfSwgb3B0aW9ucyk7XG5cbiAgICAgICAgc3VwZXIodGFibGUsIG9wdGlvbnMpO1xuXG4gICAgICAgIHRoaXMuX3RhYmxlICAgPSB0YWJsZTtcbiAgICAgICAgdGhpcy5fb3B0aW9ucyA9ICQuZXh0ZW5kKHRydWUsIHt9LCB0aGlzLl9vcHRpb25zLCBvcHRpb25zKTtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqINCk0L7RgNC80LjRgNC+0LLQsNC90LjQtSDQutC+0L3RgtC10L3RgtCwXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGNvbnRlbnRcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gcmVjb3JkXG4gICAgICogQHJldHVybnMge3N0cmluZ31cbiAgICAgKi9cbiAgICByZW5kZXIoY29udGVudCwgcmVjb3JkKSB7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBjb250ZW50ICE9PSAnc3RyaW5nJyB8fCBjb250ZW50ID09PSAnJykge1xuICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGF0dHIgPSB0aGlzLl9vcHRpb25zLmF0dHI7XG5cbiAgICAgICAgYXR0ci5zcmMgPSBjb250ZW50O1xuXG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLmltZ1dpZHRoKSB7XG4gICAgICAgICAgICBsZXQgaW1nV2lkdGggPSBUYWJsZVV0aWxzLmlzTnVtZXJpYyh0aGlzLl9vcHRpb25zLmltZ1dpZHRoKVxuICAgICAgICAgICAgICAgID8gKHRoaXMuX29wdGlvbnMuaW1nV2lkdGggKyAncHgnKVxuICAgICAgICAgICAgICAgIDogdGhpcy5fb3B0aW9ucy5pbWdXaWR0aDtcbiAgICAgICAgICAgIGF0dHIgPSBUYWJsZVV0aWxzLm1lcmdlQXR0cihhdHRyLCB7IHN0eWxlOiAnd2lkdGg6JyArIGltZ1dpZHRoIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMuaW1nSGVpZ2h0KSB7XG4gICAgICAgICAgICBsZXQgaW1nSGVpZ2h0ID0gVGFibGVVdGlscy5pc051bWVyaWModGhpcy5fb3B0aW9ucy5pbWdIZWlnaHQpXG4gICAgICAgICAgICAgICAgPyAodGhpcy5fb3B0aW9ucy5pbWdIZWlnaHQgKyAncHgnKVxuICAgICAgICAgICAgICAgIDogdGhpcy5fb3B0aW9ucy5pbWdIZWlnaHQ7XG4gICAgICAgICAgICBhdHRyID0gVGFibGVVdGlscy5tZXJnZUF0dHIoYXR0ciwgeyBzdHlsZTogJ2hlaWdodDonICsgaW1nSGVpZ2h0IH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMuaW1nQm9yZGVyKSB7XG4gICAgICAgICAgICBhdHRyID0gVGFibGVVdGlscy5tZXJnZUF0dHIoYXR0ciwgeyBjbGFzczogJ2JvcmRlciBib3JkZXItc2Vjb25kYXJ5LXN1YnRsZScgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy5pbWdTdHlsZSAmJiB0eXBlb2YgdGhpcy5fb3B0aW9ucy5pbWdTdHlsZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHN3aXRjaCAodGhpcy5fb3B0aW9ucy5pbWdTdHlsZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ2NpcmNsZSc6ICBhdHRyID0gVGFibGVVdGlscy5tZXJnZUF0dHIoYXR0ciwgeyBjbGFzczogJ3JvdW5kZWQtY2lyY2xlJyB9KTsgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAndGh1bWInOiAgIGF0dHIgPSBUYWJsZVV0aWxzLm1lcmdlQXR0cihhdHRyLCB7IGNsYXNzOiAnaW1nLXRodW1ibmFpbCcgfSk7IGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3JvdW5kZWQnOiBhdHRyID0gVGFibGVVdGlscy5tZXJnZUF0dHIoYXR0ciwgeyBjbGFzczogJ3JvdW5kZWQnIH0pOyBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG5cbiAgICAgICAgbGV0IGF0dHJpYnV0ZXMgPSBbXTtcblxuICAgICAgICAkLmVhY2goYXR0ciwgZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAoWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2YgdmFsdWUpID49IDApIHtcbiAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzLnB1c2gobmFtZSArICc9XCInICsgdmFsdWUgKyAnXCInKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIFRhYmxlVXRpbHMucmVuZGVyKFRhYmxlVHBsWydjb2x1bW5zL2ltYWdlLmh0bWwnXSwge1xuICAgICAgICAgICAgYXR0cjogYXR0cmlidXRlcy5sZW5ndGggPiAwID8gKCcgJyArIGF0dHJpYnV0ZXMuam9pbignICcpKSA6ICcnLFxuICAgICAgICB9KTtcbiAgICB9XG59XG5cblxuZXhwb3J0IGRlZmF1bHQgQ29sdW1uc0ltYWdlOyIsIlxuaW1wb3J0IFRhYmxlIGZyb20gXCIuL2pzL3RhYmxlXCI7XG5cbmltcG9ydCBsYW5nRW4gZnJvbSBcIi4vanMvbGFuZy9lblwiO1xuaW1wb3J0IGxhbmdSdSBmcm9tIFwiLi9qcy9sYW5nL3J1XCI7XG5cbmltcG9ydCBDb250cm9sTGluayAgICAgICAgZnJvbSBcIi4vanMvY29udHJvbHMvbGlua1wiO1xuaW1wb3J0IENvbnRyb2xCdXR0b24gICAgICBmcm9tIFwiLi9qcy9jb250cm9scy9idXR0b25cIjtcbmltcG9ydCBDb250cm9sRHJvcGRvd24gICAgZnJvbSBcIi4vanMvY29udHJvbHMvZHJvcGRvd25cIjtcbmltcG9ydCBDb250cm9sQnV0dG9uR3JvdXAgZnJvbSBcIi4vanMvY29udHJvbHMvYnV0dG9uX2dyb3VwXCI7XG5pbXBvcnQgQ29udHJvbEN1c3RvbSAgICAgIGZyb20gXCIuL2pzL2NvbnRyb2xzL2N1c3RvbVwiO1xuaW1wb3J0IENvbnRyb2xQYWdlU2l6ZSAgICBmcm9tIFwiLi9qcy9jb250cm9scy9wYWdlX3NpemVcIjtcbmltcG9ydCBDb250cm9sUGFnZUp1bXAgICAgZnJvbSBcIi4vanMvY29udHJvbHMvcGFnZV9qdW1wXCI7XG5pbXBvcnQgQ29udHJvbFBhZ2VzICAgICAgIGZyb20gXCIuL2pzL2NvbnRyb2xzL3BhZ2VzXCI7XG5pbXBvcnQgQ29udHJvbFRvdGFsICAgICAgIGZyb20gXCIuL2pzL2NvbnRyb2xzL3RvdGFsXCI7XG5pbXBvcnQgQ29udHJvbFNlYXJjaCAgICAgIGZyb20gXCIuL2pzL2NvbnRyb2xzL3NlYXJjaFwiO1xuaW1wb3J0IENvbnRyb2xDb2x1bW5zICAgICBmcm9tIFwiLi9qcy9jb250cm9scy9jb2x1bW5zXCI7XG5pbXBvcnQgQ29udHJvbENhcHRpb24gICAgIGZyb20gXCIuL2pzL2NvbnRyb2xzL2NhcHRpb25cIjtcbmltcG9ydCBDb250cm9sRmlsdGVyQ2xlYXIgZnJvbSBcIi4vanMvY29udHJvbHMvZmlsdGVyX2NsZWFyXCI7XG5pbXBvcnQgQ29udHJvbERpdmlkZXIgICAgIGZyb20gXCIuL2pzL2NvbnRyb2xzL2RpdmlkZXJcIjtcblxuaW1wb3J0IEZpbHRlclRleHQgICAgICAgICAgIGZyb20gXCIuL2pzL2ZpbHRlcnMvdGV4dFwiO1xuaW1wb3J0IEZpbHRlck51bWJlciAgICAgICAgIGZyb20gXCIuL2pzL2ZpbHRlcnMvbnVtYmVyXCI7XG5pbXBvcnQgRmlsdGVyRGF0ZSAgICAgICAgICAgZnJvbSBcIi4vanMvZmlsdGVycy9kYXRlXCI7XG5pbXBvcnQgRmlsdGVyRGF0ZXRpbWUgICAgICAgZnJvbSBcIi4vanMvZmlsdGVycy9kYXRldGltZVwiO1xuaW1wb3J0IEZpbHRlckRhdGVNb250aCAgICAgIGZyb20gXCIuL2pzL2ZpbHRlcnMvZGF0ZV9tb250aFwiO1xuaW1wb3J0IEZpbHRlckRhdGVSYW5nZSAgICAgIGZyb20gXCIuL2pzL2ZpbHRlcnMvZGF0ZV9yYW5nZVwiO1xuaW1wb3J0IEZpbHRlckRhdGV0aW1lUmFuZ2UgIGZyb20gXCIuL2pzL2ZpbHRlcnMvZGF0ZXRpbWVfcmFuZ2VcIjtcbmltcG9ydCBGaWx0ZXJDaGVja2JveCAgICAgICBmcm9tIFwiLi9qcy9maWx0ZXJzL2NoZWNrYm94XCI7XG5pbXBvcnQgRmlsdGVyUmFkaW8gICAgICAgICAgZnJvbSBcIi4vanMvZmlsdGVycy9yYWRpb1wiO1xuaW1wb3J0IEZpbHRlclNlbGVjdCAgICAgICAgIGZyb20gXCIuL2pzL2ZpbHRlcnMvc2VsZWN0XCI7XG5pbXBvcnQgRmlsdGVyU3dpdGNoICAgICAgICAgZnJvbSBcIi4vanMvZmlsdGVycy9zd2l0Y2hcIjtcblxuaW1wb3J0IFNlYXJjaFRleHQgICAgICAgICAgZnJvbSBcIi4vanMvc2VhcmNoL3RleHRcIjtcbmltcG9ydCBTZWFyY2hOdW1iZXIgICAgICAgIGZyb20gXCIuL2pzL3NlYXJjaC9udW1iZXJcIjtcbmltcG9ydCBTZWFyY2hEYXRlICAgICAgICAgIGZyb20gXCIuL2pzL3NlYXJjaC9kYXRlXCI7XG5pbXBvcnQgU2VhcmNoRGF0ZU1vbnRoICAgICBmcm9tIFwiLi9qcy9zZWFyY2gvZGF0ZV9tb250aFwiO1xuaW1wb3J0IFNlYXJjaERhdGV0aW1lICAgICAgZnJvbSBcIi4vanMvc2VhcmNoL2RhdGV0aW1lXCI7XG5pbXBvcnQgU2VhcmNoRGF0ZVJhbmdlICAgICBmcm9tIFwiLi9qcy9zZWFyY2gvZGF0ZV9yYW5nZVwiO1xuaW1wb3J0IFNlYXJjaERhdGV0aW1lUmFuZ2UgZnJvbSBcIi4vanMvc2VhcmNoL2RhdGV0aW1lX3JhbmdlXCI7XG5pbXBvcnQgU2VhcmNoQ2hlY2tib3ggICAgICBmcm9tIFwiLi9qcy9zZWFyY2gvY2hlY2tib3hcIjtcbmltcG9ydCBTZWFyY2hDaGVja2JveEJ0biAgIGZyb20gXCIuL2pzL3NlYXJjaC9jaGVja2JveEJ0blwiO1xuaW1wb3J0IFNlYXJjaFJhZGlvICAgICAgICAgZnJvbSBcIi4vanMvc2VhcmNoL3JhZGlvXCI7XG5pbXBvcnQgU2VhcmNoUmFkaW9CdG4gICAgICBmcm9tIFwiLi9qcy9zZWFyY2gvcmFkaW9CdG5cIjtcbmltcG9ydCBTZWFyY2hTZWxlY3QgICAgICAgIGZyb20gXCIuL2pzL3NlYXJjaC9zZWxlY3RcIjtcbmltcG9ydCBTZWFyY2hTd2l0Y2ggICAgICAgIGZyb20gXCIuL2pzL3NlYXJjaC9zd2l0Y2hcIjtcblxuaW1wb3J0IENvbHVtbnNEYXRlICAgICAgIGZyb20gXCIuL2pzL2NvbHVtbnMvZGF0ZVwiO1xuaW1wb3J0IENvbHVtbnNEYXRldGltZSAgIGZyb20gXCIuL2pzL2NvbHVtbnMvZGF0ZXRpbWVcIjtcbmltcG9ydCBDb2x1bW5zRGF0ZUh1bWFuICBmcm9tIFwiLi9qcy9jb2x1bW5zL2RhdGVfaHVtYW5cIjtcbmltcG9ydCBDb2x1bW5zSHRtbCAgICAgICBmcm9tIFwiLi9qcy9jb2x1bW5zL2h0bWxcIjtcbmltcG9ydCBDb2x1bW5zTnVtYmVyICAgICBmcm9tIFwiLi9qcy9jb2x1bW5zL251bWJlclwiO1xuaW1wb3J0IENvbHVtbnNNb25leSAgICAgIGZyb20gXCIuL2pzL2NvbHVtbnMvbW9uZXlcIjtcbmltcG9ydCBDb2x1bW5zTnVtYmVycyAgICBmcm9tIFwiLi9qcy9jb2x1bW5zL251bWJlcnNcIjtcbmltcG9ydCBDb2x1bW5zU2VsZWN0ICAgICBmcm9tIFwiLi9qcy9jb2x1bW5zL3NlbGVjdFwiO1xuaW1wb3J0IENvbHVtbnNTd2l0Y2ggICAgIGZyb20gXCIuL2pzL2NvbHVtbnMvc3dpdGNoXCI7XG5pbXBvcnQgQ29sdW1uc1RleHQgICAgICAgZnJvbSBcIi4vanMvY29sdW1ucy90ZXh0XCI7XG5pbXBvcnQgQ29sdW1uc0J1dHRvbiAgICAgZnJvbSBcIi4vanMvY29sdW1ucy9idXR0b25cIjtcbmltcG9ydCBDb2x1bW5zTGluayAgICAgICBmcm9tIFwiLi9qcy9jb2x1bW5zL2xpbmtcIjtcbmltcG9ydCBDb2x1bW5zTWVudSAgICAgICBmcm9tIFwiLi9qcy9jb2x1bW5zL21lbnVcIjtcbmltcG9ydCBDb2x1bW5zQmFkZ2UgICAgICBmcm9tIFwiLi9qcy9jb2x1bW5zL2JhZGdlXCI7XG5pbXBvcnQgQ29sdW1uc0NvbXBvbmVudCAgZnJvbSBcIi4vanMvY29sdW1ucy9jb21wb25lbnRcIjtcbmltcG9ydCBDb2x1bW5zUHJvZ3Jlc3MgICBmcm9tIFwiLi9qcy9jb2x1bW5zL3Byb2dyZXNzXCI7XG5pbXBvcnQgQ29sdW1uc0ltYWdlICAgICAgZnJvbSBcIi4vanMvY29sdW1ucy9pbWFnZVwiO1xuXG5cblRhYmxlLmxhbmcucnUgPSBsYW5nUnU7XG5UYWJsZS5sYW5nLmVuID0gbGFuZ0VuO1xuXG5UYWJsZS5jb250cm9scy5saW5rICAgICAgICA9IENvbnRyb2xMaW5rO1xuVGFibGUuY29udHJvbHMuYnV0dG9uICAgICAgPSBDb250cm9sQnV0dG9uO1xuVGFibGUuY29udHJvbHMuZHJvcGRvd24gICAgPSBDb250cm9sRHJvcGRvd247XG5UYWJsZS5jb250cm9scy5idXR0b25Hcm91cCA9IENvbnRyb2xCdXR0b25Hcm91cDtcblRhYmxlLmNvbnRyb2xzLmN1c3RvbSAgICAgID0gQ29udHJvbEN1c3RvbTtcblRhYmxlLmNvbnRyb2xzLnBhZ2VTaXplICAgID0gQ29udHJvbFBhZ2VTaXplO1xuVGFibGUuY29udHJvbHMucGFnZUp1bXAgICAgPSBDb250cm9sUGFnZUp1bXA7XG5UYWJsZS5jb250cm9scy5wYWdlcyAgICAgICA9IENvbnRyb2xQYWdlcztcblRhYmxlLmNvbnRyb2xzLnRvdGFsICAgICAgID0gQ29udHJvbFRvdGFsO1xuVGFibGUuY29udHJvbHMuc2VhcmNoICAgICAgPSBDb250cm9sU2VhcmNoO1xuVGFibGUuY29udHJvbHMuY29sdW1ucyAgICAgPSBDb250cm9sQ29sdW1ucztcblRhYmxlLmNvbnRyb2xzLmNhcHRpb24gICAgID0gQ29udHJvbENhcHRpb247XG5UYWJsZS5jb250cm9scy5maWx0ZXJDbGVhciA9IENvbnRyb2xGaWx0ZXJDbGVhcjtcblRhYmxlLmNvbnRyb2xzLmRpdmlkZXIgICAgID0gQ29udHJvbERpdmlkZXI7XG5cblRhYmxlLmZpbHRlcnMudGV4dCAgICAgICAgICA9IEZpbHRlclRleHQ7XG5UYWJsZS5maWx0ZXJzLm51bWJlciAgICAgICAgPSBGaWx0ZXJOdW1iZXI7XG5UYWJsZS5maWx0ZXJzLmRhdGUgICAgICAgICAgPSBGaWx0ZXJEYXRlO1xuVGFibGUuZmlsdGVycy5kYXRldGltZSAgICAgID0gRmlsdGVyRGF0ZXRpbWU7XG5UYWJsZS5maWx0ZXJzLmRhdGVNb250aCAgICAgPSBGaWx0ZXJEYXRlTW9udGg7XG5UYWJsZS5maWx0ZXJzLmRhdGVSYW5nZSAgICAgPSBGaWx0ZXJEYXRlUmFuZ2U7XG5UYWJsZS5maWx0ZXJzLmRhdGV0aW1lUmFuZ2UgPSBGaWx0ZXJEYXRldGltZVJhbmdlO1xuVGFibGUuZmlsdGVycy5jaGVja2JveCAgICAgID0gRmlsdGVyQ2hlY2tib3g7XG5UYWJsZS5maWx0ZXJzLnJhZGlvICAgICAgICAgPSBGaWx0ZXJSYWRpbztcblRhYmxlLmZpbHRlcnMuc2VsZWN0ICAgICAgICA9IEZpbHRlclNlbGVjdDtcblRhYmxlLmZpbHRlcnMuc3dpdGNoICAgICAgICA9IEZpbHRlclN3aXRjaDtcblxuVGFibGUuc2VhcmNoLnRleHQgICAgICAgICAgPSBTZWFyY2hUZXh0O1xuVGFibGUuc2VhcmNoLm51bWJlciAgICAgICAgPSBTZWFyY2hOdW1iZXI7XG5UYWJsZS5zZWFyY2guZGF0ZSAgICAgICAgICA9IFNlYXJjaERhdGU7XG5UYWJsZS5zZWFyY2guZGF0ZU1vbnRoICAgICA9IFNlYXJjaERhdGVNb250aDtcblRhYmxlLnNlYXJjaC5kYXRldGltZSAgICAgID0gU2VhcmNoRGF0ZXRpbWU7XG5UYWJsZS5zZWFyY2guZGF0ZVJhbmdlICAgICA9IFNlYXJjaERhdGVSYW5nZTtcblRhYmxlLnNlYXJjaC5kYXRldGltZVJhbmdlID0gU2VhcmNoRGF0ZXRpbWVSYW5nZTtcblRhYmxlLnNlYXJjaC5jaGVja2JveCAgICAgID0gU2VhcmNoQ2hlY2tib3g7XG5UYWJsZS5zZWFyY2guY2hlY2tib3hCdG4gICA9IFNlYXJjaENoZWNrYm94QnRuO1xuVGFibGUuc2VhcmNoLnJhZGlvICAgICAgICAgPSBTZWFyY2hSYWRpbztcblRhYmxlLnNlYXJjaC5yYWRpb0J0biAgICAgID0gU2VhcmNoUmFkaW9CdG47XG5UYWJsZS5zZWFyY2guc2VsZWN0ICAgICAgICA9IFNlYXJjaFNlbGVjdDtcblRhYmxlLnNlYXJjaC5zd2l0Y2ggICAgICAgID0gU2VhcmNoU3dpdGNoO1xuXG5UYWJsZS5jb2x1bW5zLmRhdGUgICAgICA9IENvbHVtbnNEYXRlO1xuVGFibGUuY29sdW1ucy5kYXRldGltZSAgPSBDb2x1bW5zRGF0ZXRpbWU7XG5UYWJsZS5jb2x1bW5zLmRhdGVIdW1hbiA9IENvbHVtbnNEYXRlSHVtYW47XG5UYWJsZS5jb2x1bW5zLmh0bWwgICAgICA9IENvbHVtbnNIdG1sO1xuVGFibGUuY29sdW1ucy5udW1iZXIgICAgPSBDb2x1bW5zTnVtYmVyO1xuVGFibGUuY29sdW1ucy5tb25leSAgICAgPSBDb2x1bW5zTW9uZXk7XG5UYWJsZS5jb2x1bW5zLm51bWJlcnMgICA9IENvbHVtbnNOdW1iZXJzO1xuVGFibGUuY29sdW1ucy5zZWxlY3QgICAgPSBDb2x1bW5zU2VsZWN0O1xuVGFibGUuY29sdW1ucy5zd2l0Y2ggICAgPSBDb2x1bW5zU3dpdGNoO1xuVGFibGUuY29sdW1ucy50ZXh0ICAgICAgPSBDb2x1bW5zVGV4dDtcblRhYmxlLmNvbHVtbnMuYnV0dG9uICAgID0gQ29sdW1uc0J1dHRvbjtcblRhYmxlLmNvbHVtbnMubGluayAgICAgID0gQ29sdW1uc0xpbms7XG5UYWJsZS5jb2x1bW5zLm1lbnUgICAgICA9IENvbHVtbnNNZW51O1xuVGFibGUuY29sdW1ucy5iYWRnZSAgICAgPSBDb2x1bW5zQmFkZ2U7XG5UYWJsZS5jb2x1bW5zLmNvbXBvbmVudCA9IENvbHVtbnNDb21wb25lbnQ7XG5UYWJsZS5jb2x1bW5zLnByb2dyZXNzICA9IENvbHVtbnNQcm9ncmVzcztcblRhYmxlLmNvbHVtbnMuaW1hZ2UgICAgID0gQ29sdW1uc0ltYWdlO1xuXG5cbmV4cG9ydCBkZWZhdWx0IFRhYmxlOyJdLCJuYW1lcyI6WyJ0cGwiLCJPYmplY3QiLCJjcmVhdGUiLCJmIiwiZXhwb3J0cyIsIm1vZHVsZSIsImRlZmluZSIsImFtZCIsImciLCJ3aW5kb3ciLCJnbG9iYWwiLCJzZWxmIiwiZWpzIiwiciIsImUiLCJuIiwidCIsIm8iLCJpIiwiYyIsInJlcXVpcmUiLCJ1IiwiYSIsIkVycm9yIiwiY29kZSIsInAiLCJjYWxsIiwibGVuZ3RoIiwiZnMiLCJwYXRoIiwidXRpbHMiLCJzY29wZU9wdGlvbldhcm5lZCIsIl9WRVJTSU9OX1NUUklORyIsInZlcnNpb24iLCJfREVGQVVMVF9PUEVOX0RFTElNSVRFUiIsIl9ERUZBVUxUX0NMT1NFX0RFTElNSVRFUiIsIl9ERUZBVUxUX0RFTElNSVRFUiIsIl9ERUZBVUxUX0xPQ0FMU19OQU1FIiwiX05BTUUiLCJfUkVHRVhfU1RSSU5HIiwiX09QVFNfUEFTU0FCTEVfV0lUSF9EQVRBIiwiX09QVFNfUEFTU0FCTEVfV0lUSF9EQVRBX0VYUFJFU1MiLCJjb25jYXQiLCJfQk9NIiwiX0pTX0lERU5USUZJRVIiLCJjYWNoZSIsImZpbGVMb2FkZXIiLCJyZWFkRmlsZVN5bmMiLCJsb2NhbHNOYW1lIiwicHJvbWlzZUltcGwiLCJGdW5jdGlvbiIsIlByb21pc2UiLCJyZXNvbHZlSW5jbHVkZSIsIm5hbWUiLCJmaWxlbmFtZSIsImlzRGlyIiwiZGlybmFtZSIsImV4dG5hbWUiLCJyZXNvbHZlIiwiaW5jbHVkZVBhdGgiLCJleHQiLCJyZXNvbHZlUGF0aHMiLCJwYXRocyIsImZpbGVQYXRoIiwic29tZSIsInYiLCJleGlzdHNTeW5jIiwiZ2V0SW5jbHVkZVBhdGgiLCJvcHRpb25zIiwidmlld3MiLCJtYXRjaCIsImV4ZWMiLCJyZXBsYWNlIiwiQXJyYXkiLCJpc0FycmF5Iiwicm9vdCIsImluY2x1ZGVyIiwiZXNjYXBlRnVuY3Rpb24iLCJoYW5kbGVDYWNoZSIsInRlbXBsYXRlIiwiZnVuYyIsImhhc1RlbXBsYXRlIiwiYXJndW1lbnRzIiwiZ2V0IiwidG9TdHJpbmciLCJjb21waWxlIiwic2V0IiwidHJ5SGFuZGxlQ2FjaGUiLCJkYXRhIiwiY2IiLCJyZXN1bHQiLCJyZWplY3QiLCJlcnIiLCJpbmNsdWRlRmlsZSIsIm9wdHMiLCJzaGFsbG93Q29weSIsImNyZWF0ZU51bGxQcm90b09ialdoZXJlUG9zc2libGUiLCJpbmNsdWRlclJlc3VsdCIsInJldGhyb3ciLCJzdHIiLCJmbG5tIiwibGluZW5vIiwiZXNjIiwibGluZXMiLCJzcGxpdCIsInN0YXJ0IiwiTWF0aCIsIm1heCIsImVuZCIsIm1pbiIsImNvbnRleHQiLCJzbGljZSIsIm1hcCIsImxpbmUiLCJjdXJyIiwiam9pbiIsIm1lc3NhZ2UiLCJzdHJpcFNlbWkiLCJ0ZW1wbCIsInNjb3BlIiwiY29uc29sZSIsIndhcm4iLCJUZW1wbGF0ZSIsInJlbmRlciIsImQiLCJzaGFsbG93Q29weUZyb21MaXN0IiwicmVuZGVyRmlsZSIsImFyZ3MiLCJwcm90b3R5cGUiLCJzaGlmdCIsInZpZXdPcHRzIiwicG9wIiwic2V0dGluZ3MiLCJjbGVhckNhY2hlIiwicmVzZXQiLCJ0ZXh0Iiwib3B0c1BhcmFtIiwiaGFzT3duT25seU9iamVjdCIsInRlbXBsYXRlVGV4dCIsIm1vZGUiLCJ0cnVuY2F0ZSIsImN1cnJlbnRMaW5lIiwic291cmNlIiwiY2xpZW50IiwiZXNjYXBlIiwiZXNjYXBlWE1MIiwiY29tcGlsZURlYnVnIiwiZGVidWciLCJvcGVuRGVsaW1pdGVyIiwiY2xvc2VEZWxpbWl0ZXIiLCJkZWxpbWl0ZXIiLCJzdHJpY3QiLCJybVdoaXRlc3BhY2UiLCJvdXRwdXRGdW5jdGlvbk5hbWUiLCJhc3luYyIsImRlc3RydWN0dXJlZExvY2FscyIsImxlZ2FjeUluY2x1ZGUiLCJfd2l0aCIsInJlZ2V4IiwiY3JlYXRlUmVnZXgiLCJtb2RlcyIsIkVWQUwiLCJFU0NBUEVEIiwiUkFXIiwiQ09NTUVOVCIsIkxJVEVSQUwiLCJkZWxpbSIsImVzY2FwZVJlZ0V4cENoYXJzIiwib3BlbiIsImNsb3NlIiwiUmVnRXhwIiwic3JjIiwiZm4iLCJwcmVwZW5kZWQiLCJhcHBlbmRlZCIsImVzY2FwZUZuIiwiY3RvciIsInNhbml0aXplZEZpbGVuYW1lIiwiSlNPTiIsInN0cmluZ2lmeSIsImdlbmVyYXRlU291cmNlIiwidGVzdCIsImRlc3RydWN0dXJpbmciLCJsb2ciLCJTeW50YXhFcnJvciIsInJldHVybmVkRm4iLCJhbm9ueW1vdXMiLCJpbmNsdWRlIiwiaW5jbHVkZURhdGEiLCJhcHBseSIsImRlZmluZVByb3BlcnR5IiwiYmFzZW5hbWUiLCJ2YWx1ZSIsIndyaXRhYmxlIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIm1hdGNoZXMiLCJwYXJzZVRlbXBsYXRlVGV4dCIsImZvckVhY2giLCJpbmRleCIsImNsb3NpbmciLCJpbmRleE9mIiwic2NhbkxpbmUiLCJwYXQiLCJhcnIiLCJmaXJzdFBvcyIsInB1c2giLCJzdWJzdHJpbmciLCJfYWRkT3V0cHV0IiwibmV3TGluZUNvdW50IiwibGFzdEluZGV4T2YiLCJfX2V4cHJlc3MiLCJWRVJTSU9OIiwicmVnRXhwQ2hhcnMiLCJoYXNPd25Qcm9wZXJ0eSIsImhhc093biIsIm9iaiIsImtleSIsInN0cmluZyIsIlN0cmluZyIsIl9FTkNPREVfSFRNTF9SVUxFUyIsIl9NQVRDSF9IVE1MIiwiZW5jb2RlX2NoYXIiLCJlc2NhcGVGdW5jU3RyIiwibWFya3VwIiwidW5kZWZpbmVkIiwiZXNjYXBlWE1MVG9TdHJpbmciLCJ0byIsImZyb20iLCJsaXN0IiwiX2RhdGEiLCJ2YWwiLCJyZW1vdmUiLCJoeXBoZW5Ub0NhbWVsIiwidG9VcHBlckNhc2UiLCJfX3Byb3RvX18iLCJwcm9jZXNzIiwibm9ybWFsaXplQXJyYXkiLCJwYXJ0cyIsImFsbG93QWJvdmVSb290IiwidXAiLCJsYXN0Iiwic3BsaWNlIiwidW5zaGlmdCIsInJlc29sdmVkUGF0aCIsInJlc29sdmVkQWJzb2x1dGUiLCJjd2QiLCJUeXBlRXJyb3IiLCJjaGFyQXQiLCJmaWx0ZXIiLCJub3JtYWxpemUiLCJpc0Fic29sdXRlIiwidHJhaWxpbmdTbGFzaCIsInN1YnN0ciIsInJlbGF0aXZlIiwidHJpbSIsImZyb21QYXJ0cyIsInRvUGFydHMiLCJzYW1lUGFydHNMZW5ndGgiLCJvdXRwdXRQYXJ0cyIsInNlcCIsImNoYXJDb2RlQXQiLCJoYXNSb290IiwibWF0Y2hlZFNsYXNoIiwic3RhcnREb3QiLCJzdGFydFBhcnQiLCJwcmVEb3RTdGF0ZSIsInhzIiwicmVzIiwibGVuIiwiX3Byb2Nlc3MiLCJjYWNoZWRTZXRUaW1lb3V0IiwiY2FjaGVkQ2xlYXJUaW1lb3V0IiwiZGVmYXVsdFNldFRpbW91dCIsImRlZmF1bHRDbGVhclRpbWVvdXQiLCJzZXRUaW1lb3V0IiwiY2xlYXJUaW1lb3V0IiwicnVuVGltZW91dCIsImZ1biIsInJ1bkNsZWFyVGltZW91dCIsIm1hcmtlciIsInF1ZXVlIiwiZHJhaW5pbmciLCJjdXJyZW50UXVldWUiLCJxdWV1ZUluZGV4IiwiY2xlYW5VcE5leHRUaWNrIiwiZHJhaW5RdWV1ZSIsInRpbWVvdXQiLCJydW4iLCJuZXh0VGljayIsIkl0ZW0iLCJhcnJheSIsInRpdGxlIiwiYnJvd3NlciIsImVudiIsImFyZ3YiLCJ2ZXJzaW9ucyIsIm5vb3AiLCJvbiIsImFkZExpc3RlbmVyIiwib25jZSIsIm9mZiIsInJlbW92ZUxpc3RlbmVyIiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwiZW1pdCIsInByZXBlbmRMaXN0ZW5lciIsInByZXBlbmRPbmNlTGlzdGVuZXIiLCJsaXN0ZW5lcnMiLCJiaW5kaW5nIiwiY2hkaXIiLCJkaXIiLCJ1bWFzayIsImRlc2NyaXB0aW9uIiwia2V5d29yZHMiLCJhdXRob3IiLCJsaWNlbnNlIiwiYmluIiwibWFpbiIsImpzZGVsaXZyIiwidW5wa2ciLCJyZXBvc2l0b3J5IiwidHlwZSIsInVybCIsImJ1Z3MiLCJob21lcGFnZSIsImRlcGVuZGVuY2llcyIsImpha2UiLCJkZXZEZXBlbmRlbmNpZXMiLCJicm93c2VyaWZ5IiwiZXNsaW50IiwianNkb2MiLCJtb2NoYSIsImVuZ2luZXMiLCJub2RlIiwic2NyaXB0cyIsIlRhYmxlVXRpbHMiLCJfdGVtcGxhdGVzIiwibWVyZ2VBdHRyIiwiYXR0cjEiLCJhdHRyMiIsImFzc2lnbiIsIl90eXBlb2YiLCIkIiwiZWFjaCIsImlzTnVtZXJpYyIsIm51bSIsImlzTmFOIiwiaGFzaENvZGUiLCJjcmMzMiIsIkRhdGUiLCJnZXRUaW1lIiwicmFuZG9tIiwiaXNPYmplY3QiLCJ0cGxOYW1lIiwic3RyUGFkTGVmdCIsImNvdW50IiwicmVwZWF0IiwiVGFibGVSZW5kZXIiLCJyZW5kZXJUYWJsZSIsInRhYmxlIiwiZ2V0T3B0aW9ucyIsInJlY29yZHNFbGVtZW50cyIsImNvbHVtbnNIZWFkZXIiLCJjb2x1bW5zRm9vdGVyIiwiY29sR3JvdXBzIiwiY29sdW1uRWxlbWVudHMiLCJUYWJsZVRwbCIsIl9jb2x1bW5zIiwiY29sdW1uIiwiaXNTaG93IiwiY29sdW1uT3B0aW9ucyIsImF0dHJpYnV0ZXMiLCJzb3J0YWJsZSIsIm1lbnVFbGVtZW50cyIsIm1lbnVTaG93QWx3YXlzIiwibWVudVBvc2l0aW9uIiwiZmllbGQiLCJhdHRySGVhZGVyIiwiZml4ZWQiLCJhdHRyIiwiX3NvcnQiLCJzb3J0RmllbGQiLCJvcmRlciIsInNob3dIZWFkZXJzIiwibWVudSIsIml0ZW1zIiwic2hvd0Fsd2F5cyIsInBvc2l0aW9uIiwiaXRlbSIsInRvTG93ZXJDYXNlIiwib25DbGljayIsImF0dHJJdGVtIiwibWVudUVsZW1lbnQiLCJmaW5kIiwiY2xpY2siLCJldmVudCIsInByb3AiLCJocmVmIiwic3R5bGUiLCJ3aWR0aCIsInVuaXQiLCJtaW5XaWR0aCIsIm1heFdpZHRoIiwibGFiZWwiLCJzaG93TGFiZWwiLCJjb2x1bW5FbGVtZW50IiwiaXNzZXRNZW51IiwibWVudUNvbnRhaW5lciIsIm1lbnVCdXR0b24iLCJvcmlnaW5hbEV2ZW50IiwiY2FuY2VsQnViYmxlIiwiZWxlbWVudCIsImFwcGVuZCIsIl9yZWNvcmRzIiwiX3JlY29yZHNUb3RhbCIsImdldFJlY29yZHNDb3VudCIsIl9yZWNvcmRzTnVtYmVyIiwiX3BhZ2UiLCJfcmVjb3Jkc1BlclBhZ2UiLCJyZW5kZXJSZWNvcmRzIiwicm93cyIsImhlYWRlclJvdyIsImNlbGxzIiwiaGVhZGVyQ29sdW1uIiwiY29udGVudCIsImNvbHVtbnMiLCJmb290ZXJSb3ciLCJmb290ZXJDb2x1bW4iLCJjbGFzc2VzIiwidGhlYWRBdHRyIiwidGhlYWRUb3AiLCJ0YWJsZUVsZW1lbnQiLCJ0Ym9keSIsInJlY29yZEVsZW1lbnQiLCJyZWNvcmRzIiwidGhhdCIsImdyb3VwIiwiZ3JvdXBWYWx1ZSIsImdyb3VwSW5kZXgiLCJyZWNvcmRzR3JvdXBzIiwicmVjb3JkIiwic2hvdyIsImlzR3JvdXAiLCJyZWNvcmRzR3JvdXAiLCJyZW5kZXJSZWNvcmRzR3JvdXAiLCJyZW5kZXJSZWNvcmQiLCJyZW5kZXJHcm91cCIsImNvbHVtbnNDb3VudCIsIl9jb3VudENvbHVtbnNTaG93IiwibGFuZyIsImdldExhbmciLCJmaWVsZHMiLCJyZWNvcmRBdHRyIiwiZmllbGRDb250ZW50IiwicmVuZGVyRmllbGQiLCJvbkNsaWNrVXJsIiwibWV0YSIsInF1ZXJ5U2VsZWN0b3IiLCJjb2x1bW5GaWVsZCIsImdldEZpZWxkIiwiZmllbGRQcm9wcyIsImZpZWxkQXR0ciIsImdldEFjdGlvbnMiLCJhY3Rpb25zIiwiZmllbGRBdHRyUmVzdWx0IiwiaXNDb2xsYXBzaW5nIiwiZ3JvdXBFbGVtZW50IiwiY29sc3BhbiIsInRkIiwicmVuZGVyQ29udGVudCIsImNvbGxhcHNlZCIsImhhc0NsYXNzIiwicmVtb3ZlQ2xhc3MiLCJhZGRDbGFzcyIsImZhZGVPdXQiLCJmYWRlSW4iLCJyZW5kZXJFeHBhbmQiLCJyZW5kZXJDb21wb25lbnRzIiwiZXhwYW5kUmVjb3JkIiwiaHRtbCIsIkhUTUxFbGVtZW50IiwialF1ZXJ5IiwicmVuZGVyQ29udHJvbCIsImNvbnRyb2wiLCJjb250cm9sRWxlbWVudCIsImlkIiwiZ2V0SWQiLCJjb21wb25lbnRzIiwiZXZlbnROYW1lIiwiaW5pdEV2ZW50cyIsImNvbXBvbmVudCIsIkNvcmVVSSIsImluc3RhbmNlIiwiVGFibGVFbGVtZW50cyIsImdldENvbnRhaW5lciIsInRhYmxlSWQiLCJnZXRMb2NrIiwiZ2V0V3JhcHBlciIsImdldFNlYXJjaENvbnRhaW5lciIsImdldENvbHVtbnNDb250YWluZXIiLCJnZXRTZWFyY2hDb250cm9sIiwiY29udHJvbElkIiwiZ2V0Q29udHJvbCIsImdldFRhYmxlIiwiZ2V0VGFibGVUYm9keSIsImdldFRhYmxlVGhlYWQiLCJnZXRUYWJsZVNvcnRhYmxlIiwiZ2V0VHJSZWNvcmRzIiwiZ2V0VHJCeUluZGV4IiwiZ2V0VHJFbXB0eSIsImdldEV4cGFuZFJvdyIsIm5leHQiLCJhZGRFeHBhbmRSb3ciLCJhZnRlciIsImhpZGVFeHBhbmRSb3ciLCJyZWNvcmRFeHBhbmRlZCIsImhpZGUiLCJzaG93RXhwYW5kUm93IiwicmVtb3ZlRXhwYW5kUm93IiwiZ2V0U2VsZWN0ZWRJbmRleGVzIiwiaW5kZXhlcyIsImdldFJvd3NTd2l0Y2hlcyIsImdldFJvd3NTZWxlY3RzIiwiZ2V0Um93c1NlbGVjdEFsbCIsImdldE5vV3JhcFRvZ2dsZXMiLCJzZWxlY3RUciIsInRyIiwic2VsZWN0VHJBbGwiLCJ0YWJsZUNvbnRhaW5lciIsInVuc2VsZWN0VHIiLCJ1bnNlbGVjdFRyQWxsIiwiZml4ZWRDb2xzTGVmdCIsInRhYmxlV3JhcHBlciIsImNvbE9mZnNldCIsImNzcyIsIm91dGVyV2lkdGgiLCJmaXhlZENvbHNSaWdodCIsInJldmVyc2UiLCJUYWJsZVByaXZhdGUiLCJpbml0Q29sdW1ucyIsImNvbHVtbnNTdG9yYWdlIiwic2F2ZVN0YXRlIiwiZ2V0U3RvcmFnZUZpZWxkIiwia2V5MiIsImNvbHVtblN0b3JhZ2UiLCJfb3B0aW9ucyIsIm92ZXJmbG93IiwiY29sdW1uSW5zdGFuY2UiLCJUYWJsZSIsImluaXRTZWFyY2giLCJzZWFyY2hDb250cm9scyIsInNlYXJjaFZhbHVlcyIsInNlYXJjaCIsImNvbnRyb2xJbnN0YW5jZSIsIl9zZWFyY2giLCJpbml0Q29udHJvbHMiLCJyb3ciLCJjb250cm9sc0xlZnQiLCJjb250cm9sc0NlbnRlciIsImNvbnRyb2xzUmlnaHQiLCJsZWZ0IiwiaW5pdENvbnRyb2wiLCJjZW50ZXIiLCJyaWdodCIsIl9jb250cm9sc1Bvc2l0aW9ucyIsImNvbnRyb2xzIiwiX2NvbnRyb2xzIiwiZmlsdGVyTmFtZSIsImZpbHRlcnMiLCJmaWx0ZXJWYWx1ZXMiLCJfZmlsdGVycyIsImluaXRTb3J0Iiwic29ydCIsInNlYXJjaExvY2FsUmVjb3JkcyIsInNlYXJjaERhdGEiLCJnZXRTZWFyY2hEYXRhIiwiZmlsdGVyRGF0YSIsImdldEZpbHRlckRhdGEiLCJjb2x1bW5zT3B0aW9ucyIsImNvbnZlcnRUb1N0cmluZyIsImlzRmlsdGVyZWRSZWNvcmQiLCJzZXRSZWNvcmRzIiwiX3JlY29yZHNJbmRleCIsImFkZFJlY29yZCIsImFmdGVySW5kZXgiLCJleHRlbmQiLCJfbWV0YSIsInNlcSIsIl9zZXEiLCJhZGRSZWNvcmRCZWZvcmUiLCJpc3NldEtleSIsImtleUJlZm9yZSIsInJlY29yZERhdGEiLCJmaWVsZFZhbHVlIiwiX3RyaWdnZXIiLCJwYXJhbXMiLCJfZXZlbnRzIiwiY2FsbGJhY2siLCJzaW5nbGVFeGVjIiwic29ydFJlY29yZHNCeVNlcSIsImIiLCJzb3J0UmVjb3Jkc0J5RmllbGRzIiwiY29sdW1uc0NvbnZlcnRlcnMiLCJpc3NldEFGaWVsZCIsImlzc2V0QkZpZWxkIiwiYVZhbCIsImJWYWwiLCJzZXRDb2x1bW5zU29ydCIsInRoZWFkIiwic29ydENvbHVtbiIsInNvcnRJdGVtIiwiZ2V0U3RvcmFnZSIsInN0b3JhZ2UiLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwicGFyc2UiLCJzZXRTdG9yYWdlIiwic3RvcmFnZUFsbCIsInNldEl0ZW0iLCJzZXRTdG9yYWdlRmllbGQiLCJUYWJsZUluc3RhbmNlIiwiX2NsYXNzQ2FsbENoZWNrIiwiX2RlZmluZVByb3BlcnR5IiwicHJpbWFyeUtleSIsImxhbmdJdGVtcyIsImhlaWdodCIsIm1pbkhlaWdodCIsIm5heEhlaWdodCIsInBhZ2UiLCJyZWNvcmRzUGVyUGFnZSIsIm5vV3JhcCIsIm5vV3JhcFRvZ2dsZSIsInNob3dTY3JvbGxTaGFkb3ciLCJyZWNvcmRzUmVxdWVzdCIsIm1ldGhvZCIsInJlcXVlc3RQYXJhbXMiLCJoZWFkZXIiLCJmb290ZXIiLCJsYWJlbFdpZHRoIiwiX2lkIiwicGFnZVNpemUiLCJfaXNSZWNvcmRzUmVxdWVzdCIsIl9jcmVhdGVDbGFzcyIsInJlY29yZEtleSIsImdldFJlY29yZEJ5SW5kZXgiLCJmaWVsZFF1b3RlIiwibG9jYXRpb24iLCJwcmV2ZW50RGVmYXVsdCIsInBhcmVudCIsInNvcnRhYmxlQ29sdW1ucyIsInNvcnRpbmciLCJjdXJyZW50T3JkZXIiLCJzb3J0RGVmYXVsdCIsInNvcnRGaWVsZHMiLCJib290c3RyYXAiLCJUb29sdGlwIiwid2lkdGhTaXplcyIsImhlaWdodFNpemVzIiwiaGVhZGVyc091dCIsImhlYWRlcnNJbiIsImZvb3RlcnNJbiIsImZvb3RlcnNPdXQiLCJtYXhIZWlnaHQiLCJjb250cm9sUmVuZGVyIiwiaGVhZGVyQ29udHJvbHMiLCJmb290ZXJDb250cm9scyIsImxvYWRCeUZ1bmN0aW9uIiwibG9hZCIsImNsYXNzZXNXcmFwcGVyIiwidGhlbWUiLCJjb250YWluZXJFbGVtZW50IiwiY2xhc3Nlc1Jvb3QiLCJwcmVwZW5kIiwiZG9tRWxlbWVudCIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJsb2NrIiwiY29udGFpbmVyIiwidW5sb2NrIiwicGFyYW1QYWdlIiwicGFyYW1Db3VudCIsInBhcmFtU3RhcnQiLCJOdW1iZXIiLCJwYXJhbUVuZCIsInBhcmFtU2VhcmNoIiwic2VhcmNoSXRlbSIsInBhcmFtU29ydCIsImFqYXgiLCJkYXRhVHlwZSIsImJlZm9yZVNlbmQiLCJ4aHIiLCJzdWNjZXNzIiwidG90YWwiLCJlcnJvciIsInRleHRTdGF0dXMiLCJlcnJvclRocm93biIsImNvbXBsZXRlIiwidGhlbiIsInJlbG9hZCIsInJlZnJlc2giLCJyZXBsYWNlV2l0aCIsInNldFBhZ2VTaXplIiwic2VsZWN0QWxsIiwidW5zZWxlY3RBbGwiLCJzZWxlY3RSZWNvcmQiLCJnZXRSZWNvcmRCeUlkIiwic2VsZWN0UmVjb3JkQnlJbmRleCIsInVuc2VsZWN0UmVjb3JkIiwiZ2V0U2VsZWN0ZWRSZWNvcmRzSWQiLCJnZXRTZWxlY3RlZFJlY29yZHMiLCJnZXRSZWNvcmQiLCJnZXRSZWNvcmRzIiwiZ2V0RGF0YSIsImdldFJlY29yZHNEYXRhIiwicHJldlBhZ2UiLCJuZXh0UGFnZSIsInRvdGFsUGFnZXMiLCJjZWlsIiwiZ29QYWdlIiwiZXZlbnROYW1lcyIsInNldENvbHVtbnNTaG93IiwiaXNDaGFuZ2UiLCJzZXRTaG93Iiwic2hvd0NvbHVtbnMiLCJoaWRlQ29sdW1ucyIsImV4dE9wdGlvbnMiLCJnZXRWYWx1ZSIsInNlYXJjaFJlY29yZHMiLCJjbGVhclNlYXJjaCIsInNldFZhbHVlIiwiY2xlYXJGaWx0ZXJzIiwicmVjb3JkSXRlbSIsImdldFJlY29yZEJ5RmllbGQiLCJnZXRDb250cm9sQnlJZCIsImdldFNlYXJjaENvbnRyb2xCeUlkIiwiY29sdW1uU29ydGFibGUiLCJyZW1vdmVSZWNvcmRCeUluZGV4IiwiZW1wdHlSZWNvcmRzIiwiYWRkUmVjb3JkQWZ0ZXJJbmRleCIsImFkZFJlY29yZEJlZm9yZUluZGV4IiwiYmVmb3JlIiwiYWRkUmVjb3JkRmlyc3QiLCJhZGRSZWNvcmRMYXN0IiwicGFyc2VJbnQiLCJ0YWJsZUJvZHkiLCJleHBhbmRSZWNvcmRDb250ZW50IiwicmVjb3JkSW5kZXgiLCJpc1JlYnVpbGQiLCJjYWxsYmFja1Jlc3VsdCIsImV4cGFuZFJlY29yZFVybCIsInJlc3BvbnNlIiwiZ2V0UmVzcG9uc2VIZWFkZXIiLCJfaW5zdGFuY2VzIiwiX3NldHRpbmdzIiwiZ2V0U2V0dGluZyIsInNldFNldHRpbmdzIiwibGFuZ0VuIiwibGFuZ1J1IiwiQ29udHJvbCIsIl90YWJsZSIsIkNvbnRyb2xMaW5rIiwiX0NvbnRyb2wiLCJfY2FsbFN1cGVyIiwiX2luaGVyaXRzIiwibGluayIsIkNvbnRyb2xCdXR0b24iLCJidG4iLCJDb250cm9sRHJvcGRvd24iLCJidXR0b24iLCJkcm9wZG93biIsIkNvbnRyb2xCdXR0b25Hcm91cCIsIl90aGlzIiwiYnV0dG9ucyIsIm1ha2VMaW5rIiwiX2xpbmsiLCJtYWtlQnV0dG9uIiwiX2J1dHRvbiIsIm1ha2VEcm9wZG93biIsIl9kcm9wZG93biIsImxpbmtFbGVtZW50IiwiYnV0dG9uRWxlbWVudCIsImRyb3Bkb3duRWxlbWVudCIsImJ0bkdyb3VwIiwiQ29udHJvbEN1c3RvbSIsIkNvbnRyb2xQYWdlU2l6ZSIsIm9wdGlvbnNPcmlnaW5hbCIsInJlY29yZHNQZXJQYWdlTGlzdCIsImNoYW5nZSIsIkNvbnRyb2xQYWdlSnVtcCIsImlucHV0Iiwia2V5dXAiLCJrZXlDb2RlIiwiY29udHJvbFBhZ2VzIiwic2hvd1ByZXYiLCJwcmV2Iiwic2hvd05leHQiLCJzaG93RGl2aWRlclN0YXJ0Iiwic2hvd0RpdmlkZXJFbmQiLCJzaG93UGFnZUZpcnN0Iiwic2hvd1BhZ2VMYXN0IiwicGFnZXMiLCJwYWdlc1RvdGFsIiwiY291bnRIYWxmIiwiZmxvb3IiLCJjdXJyZW50UGFnZSIsImlzQWN0aXZlUHJldiIsImlzQWN0aXZlTmV4dCIsImJ0blByZXYiLCJidG5OZXh0IiwiYnRuUGFnZXMiLCJDb250cm9sUGFnZXMiLCJjb250cm9sVXBkYXRlIiwiX2NvbnRyb2wiLCJDb250cm9sVG90YWwiLCJyZWNvcmRzVG90YWwiLCJDb250cm9sU2VhcmNoIiwiYnRuQ2xlYXIiLCJidG5Db21wbGV0ZSIsImNsZWFyIiwic2VhcmNoQWN0aW9uIiwiYnRuQXR0ciIsImJ0bkNvbnRlbnQiLCJfcmVuZGVyQnRuQ2xlYXIiLCJidXR0b25Ub2dnbGUiLCJidXR0b25DbGVhciIsImNvbHVtbnNDb250YWluZXIiLCJmYWRlVG9nZ2xlIiwiYnRuQ29tcGxldGVBdHRyIiwiYnRuQ29tcGxldGVDb250ZW50IiwidGFibGVPcHRpb25zIiwic2VhcmNoQ29udHJvbCIsImRlc2NyaXB0aW9uTGFiZWwiLCJjb250cm9sQ29udGFpbmVyIiwic3VmZml4Iiwic2VhcmNoQ29udGFpbmVyIiwid3JhcHBlciIsImluc2VydEFmdGVyIiwiQ29udHJvbENvbHVtbnMiLCJjb250YWluZXJTZWFyY2giLCJzaG93QWxsIiwiY29udGFpbmVyTGlzdCIsImlzIiwiQ29udHJvbENhcHRpb24iLCJDb250cm9sRmlsdGVyQ2xlYXIiLCJDb250cm9sRGl2aWRlciIsIkZpbHRlciIsInNlYXJjaFZhbHVlIiwiRmlsdGVyVGV4dCIsIl9GaWx0ZXIiLCJhdXRvU2VhcmNoIiwiX3ZhbHVlIiwiYXR0ckJ0biIsIkZpbHRlck51bWJlciIsIm51bWJlclN0YXJ0IiwibnVtYmVyRW5kIiwiaW5wdXRTdGFydCIsImlucHV0RW5kIiwidmFsdWVTdGFydCIsInZhbHVlRW5kIiwiaXNzZXRTdGFydCIsImlzc2V0RW5kIiwic3RhcnRBdHRyIiwiZW5kQXR0ciIsImF0dHJTdGFydCIsImF0dHJFbmQiLCJGaWx0ZXJEYXRlIiwiRmlsdGVyRGF0ZXRpbWUiLCJGaWx0ZXJEYXRlTW9udGgiLCJGaWx0ZXJEYXRlUmFuZ2UiLCJkYXRlU3RhcnQiLCJkYXRlRW5kIiwic3RhcnRFbmQiLCJIVE1MSW5wdXRFbGVtZW50Iiwic2hvd1BpY2tlciIsIkZpbHRlckRhdGV0aW1lUmFuZ2UiLCJGaWx0ZXJDaGVja2JveCIsImlucHV0cyIsIm9wdGlvbiIsImNoZWNrZWQiLCJfY2xhc3MiLCJGaWx0ZXJSYWRpbyIsIkZpbHRlclNlbGVjdCIsImlzTXVsdGlwbGUiLCJzZWxlY3RPcHRpb25zIiwiX2J1aWxkT3B0aW9uIiwicmVuZGVyQXR0ciIsImdyb3VwQXR0ciIsImdyb3VwT3B0aW9ucyIsImdyb3VwT3B0aW9uIiwib3B0aW9uQXR0ciIsIm9wdGlvblRleHQiLCJpdGVtVmFsdWUiLCJGaWx0ZXJTd2l0Y2giLCJ2YWx1ZVkiLCJTZWFyY2giLCJTZWFyY2hUZXh0IiwiX1NlYXJjaCIsIlNlYXJjaE51bWJlciIsIlNlYXJjaERhdGUiLCJTZWFyY2hEYXRlTW9udGgiLCJTZWFyY2hEYXRldGltZSIsIlNlYXJjaERhdGVSYW5nZSIsIlNlYXJjaERhdGV0aW1lUmFuZ2UiLCJTZWFyY2hDaGVja2JveCIsIlNlYXJjaENoZWNrYm94QnRuIiwib3B0aW9uc0NsYXNzIiwiaGFzaCIsIlNlYXJjaFJhZGlvIiwiY2hlY2tlZEFsbCIsIlNlYXJjaFJhZGlvQnRuIiwib3B0aW9uQWxsSGFzaCIsIm9wdGlvbk9wdGlvbnNDbGFzcyIsIlNlYXJjaFNlbGVjdCIsIlNlYXJjaFN3aXRjaCIsIkNvbHVtbiIsIkNvbHVtbnNEYXRlIiwiX0NvbHVtbiIsImZvcm1hdCIsImRhdGUiLCJnZXRGdWxsWWVhciIsIm1vbnRoTmFtZXMiLCJnZXRNb250aCIsIm1vbnRoTmFtZXNTaG9ydCIsImdldERhdGUiLCJkYXlOYW1lcyIsImRheU5hbWVzTWluIiwiQ29sdW1uc0RhdGV0aW1lIiwiZ2V0SG91cnMiLCJnZXRNaW51dGVzIiwiZ2V0U2Vjb25kcyIsImhvb2tDYWxsYmFjayIsImhvb2tzIiwic2V0SG9va0NhbGxiYWNrIiwiaGFzT3duUHJvcCIsImlzT2JqZWN0RW1wdHkiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiayIsImlzVW5kZWZpbmVkIiwiaXNOdW1iZXIiLCJpc0RhdGUiLCJhcnJMZW4iLCJ2YWx1ZU9mIiwiY3JlYXRlVVRDIiwibG9jYWxlIiwiY3JlYXRlTG9jYWxPclVUQyIsInV0YyIsImRlZmF1bHRQYXJzaW5nRmxhZ3MiLCJlbXB0eSIsInVudXNlZFRva2VucyIsInVudXNlZElucHV0IiwiY2hhcnNMZWZ0T3ZlciIsIm51bGxJbnB1dCIsImludmFsaWRFcmEiLCJpbnZhbGlkTW9udGgiLCJpbnZhbGlkRm9ybWF0IiwidXNlckludmFsaWRhdGVkIiwiaXNvIiwicGFyc2VkRGF0ZVBhcnRzIiwiZXJhIiwibWVyaWRpZW0iLCJyZmMyODIyIiwid2Vla2RheU1pc21hdGNoIiwiZ2V0UGFyc2luZ0ZsYWdzIiwibSIsIl9wZiIsImlzVmFsaWQiLCJmbGFncyIsInBhcnNlZFBhcnRzIiwiaXNOb3dWYWxpZCIsIl9kIiwiaW52YWxpZFdlZWtkYXkiLCJfc3RyaWN0IiwiYmlnSG91ciIsImlzRnJvemVuIiwiX2lzVmFsaWQiLCJjcmVhdGVJbnZhbGlkIiwiTmFOIiwibW9tZW50UHJvcGVydGllcyIsInVwZGF0ZUluUHJvZ3Jlc3MiLCJjb3B5Q29uZmlnIiwibW9tZW50UHJvcGVydGllc0xlbiIsIl9pc0FNb21lbnRPYmplY3QiLCJfaSIsIl9mIiwiX2wiLCJfdHptIiwiX2lzVVRDIiwiX29mZnNldCIsIl9sb2NhbGUiLCJNb21lbnQiLCJjb25maWciLCJ1cGRhdGVPZmZzZXQiLCJpc01vbWVudCIsIm1zZyIsInN1cHByZXNzRGVwcmVjYXRpb25XYXJuaW5ncyIsImRlcHJlY2F0ZSIsImZpcnN0VGltZSIsImRlcHJlY2F0aW9uSGFuZGxlciIsImFyZyIsImFyZ0xlbiIsInN0YWNrIiwiZGVwcmVjYXRpb25zIiwiZGVwcmVjYXRlU2ltcGxlIiwiaXNGdW5jdGlvbiIsIl9jb25maWciLCJfZGF5T2ZNb250aE9yZGluYWxQYXJzZUxlbmllbnQiLCJfZGF5T2ZNb250aE9yZGluYWxQYXJzZSIsIl9vcmRpbmFsUGFyc2UiLCJtZXJnZUNvbmZpZ3MiLCJwYXJlbnRDb25maWciLCJjaGlsZENvbmZpZyIsIkxvY2FsZSIsImtleXMiLCJkZWZhdWx0Q2FsZW5kYXIiLCJzYW1lRGF5IiwibmV4dERheSIsIm5leHRXZWVrIiwibGFzdERheSIsImxhc3RXZWVrIiwic2FtZUVsc2UiLCJjYWxlbmRhciIsIm1vbSIsIm5vdyIsIm91dHB1dCIsIl9jYWxlbmRhciIsInplcm9GaWxsIiwibnVtYmVyIiwidGFyZ2V0TGVuZ3RoIiwiZm9yY2VTaWduIiwiYWJzTnVtYmVyIiwiYWJzIiwiemVyb3NUb0ZpbGwiLCJzaWduIiwicG93IiwiZm9ybWF0dGluZ1Rva2VucyIsImxvY2FsRm9ybWF0dGluZ1Rva2VucyIsImZvcm1hdEZ1bmN0aW9ucyIsImZvcm1hdFRva2VuRnVuY3Rpb25zIiwiYWRkRm9ybWF0VG9rZW4iLCJ0b2tlbiIsInBhZGRlZCIsIm9yZGluYWwiLCJsb2NhbGVEYXRhIiwicmVtb3ZlRm9ybWF0dGluZ1Rva2VucyIsIm1ha2VGb3JtYXRGdW5jdGlvbiIsImZvcm1hdE1vbWVudCIsImludmFsaWREYXRlIiwiZXhwYW5kRm9ybWF0IiwicmVwbGFjZUxvbmdEYXRlRm9ybWF0VG9rZW5zIiwibG9uZ0RhdGVGb3JtYXQiLCJsYXN0SW5kZXgiLCJkZWZhdWx0TG9uZ0RhdGVGb3JtYXQiLCJMVFMiLCJMVCIsIkwiLCJMTCIsIkxMTCIsIkxMTEwiLCJfbG9uZ0RhdGVGb3JtYXQiLCJmb3JtYXRVcHBlciIsInRvayIsImRlZmF1bHRJbnZhbGlkRGF0ZSIsIl9pbnZhbGlkRGF0ZSIsImRlZmF1bHRPcmRpbmFsIiwiZGVmYXVsdERheU9mTW9udGhPcmRpbmFsUGFyc2UiLCJfb3JkaW5hbCIsImRlZmF1bHRSZWxhdGl2ZVRpbWUiLCJmdXR1cmUiLCJwYXN0IiwicyIsInNzIiwibW0iLCJoIiwiaGgiLCJkZCIsInciLCJ3dyIsIk0iLCJNTSIsInkiLCJ5eSIsInJlbGF0aXZlVGltZSIsIndpdGhvdXRTdWZmaXgiLCJpc0Z1dHVyZSIsIl9yZWxhdGl2ZVRpbWUiLCJwYXN0RnV0dXJlIiwiZGlmZiIsImFsaWFzZXMiLCJEIiwiZGF0ZXMiLCJkYXlzIiwiZGF5Iiwid2Vla2RheXMiLCJ3ZWVrZGF5IiwiRSIsImlzb3dlZWtkYXlzIiwiaXNvd2Vla2RheSIsIkRERCIsImRheW9meWVhcnMiLCJkYXlvZnllYXIiLCJob3VycyIsImhvdXIiLCJtcyIsIm1pbGxpc2Vjb25kcyIsIm1pbGxpc2Vjb25kIiwibWludXRlcyIsIm1pbnV0ZSIsIm1vbnRocyIsIm1vbnRoIiwiUSIsInF1YXJ0ZXJzIiwicXVhcnRlciIsInNlY29uZHMiLCJzZWNvbmQiLCJnZyIsIndlZWt5ZWFycyIsIndlZWt5ZWFyIiwiR0ciLCJpc293ZWVreWVhcnMiLCJpc293ZWVreWVhciIsIndlZWtzIiwid2VlayIsIlciLCJpc293ZWVrcyIsImlzb3dlZWsiLCJ5ZWFycyIsInllYXIiLCJub3JtYWxpemVVbml0cyIsInVuaXRzIiwibm9ybWFsaXplT2JqZWN0VW5pdHMiLCJpbnB1dE9iamVjdCIsIm5vcm1hbGl6ZWRJbnB1dCIsIm5vcm1hbGl6ZWRQcm9wIiwicHJpb3JpdGllcyIsImlzb1dlZWtkYXkiLCJkYXlPZlllYXIiLCJ3ZWVrWWVhciIsImlzb1dlZWtZZWFyIiwiaXNvV2VlayIsImdldFByaW9yaXRpemVkVW5pdHMiLCJ1bml0c09iaiIsInByaW9yaXR5IiwibWF0Y2gxIiwibWF0Y2gyIiwibWF0Y2gzIiwibWF0Y2g0IiwibWF0Y2g2IiwibWF0Y2gxdG8yIiwibWF0Y2gzdG80IiwibWF0Y2g1dG82IiwibWF0Y2gxdG8zIiwibWF0Y2gxdG80IiwibWF0Y2gxdG82IiwibWF0Y2hVbnNpZ25lZCIsIm1hdGNoU2lnbmVkIiwibWF0Y2hPZmZzZXQiLCJtYXRjaFNob3J0T2Zmc2V0IiwibWF0Y2hUaW1lc3RhbXAiLCJtYXRjaFdvcmQiLCJtYXRjaDF0bzJOb0xlYWRpbmdaZXJvIiwibWF0Y2gxdG8ySGFzWmVybyIsInJlZ2V4ZXMiLCJhZGRSZWdleFRva2VuIiwic3RyaWN0UmVnZXgiLCJpc1N0cmljdCIsImdldFBhcnNlUmVnZXhGb3JUb2tlbiIsInVuZXNjYXBlRm9ybWF0IiwicmVnZXhFc2NhcGUiLCJtYXRjaGVkIiwicDEiLCJwMiIsInAzIiwicDQiLCJhYnNGbG9vciIsInRvSW50IiwiYXJndW1lbnRGb3JDb2VyY2lvbiIsImNvZXJjZWROdW1iZXIiLCJpc0Zpbml0ZSIsInRva2VucyIsImFkZFBhcnNlVG9rZW4iLCJ0b2tlbkxlbiIsImFkZFdlZWtQYXJzZVRva2VuIiwiX3ciLCJhZGRUaW1lVG9BcnJheUZyb21Ub2tlbiIsIl9hIiwiaXNMZWFwWWVhciIsIllFQVIiLCJNT05USCIsIkRBVEUiLCJIT1VSIiwiTUlOVVRFIiwiU0VDT05EIiwiTUlMTElTRUNPTkQiLCJXRUVLIiwiV0VFS0RBWSIsInBhcnNlVHdvRGlnaXRZZWFyIiwiZGF5c0luWWVhciIsImdldFNldFllYXIiLCJtYWtlR2V0U2V0IiwiZ2V0SXNMZWFwWWVhciIsImtlZXBUaW1lIiwiaXNVVEMiLCJnZXRVVENNaWxsaXNlY29uZHMiLCJnZXRNaWxsaXNlY29uZHMiLCJnZXRVVENTZWNvbmRzIiwiZ2V0VVRDTWludXRlcyIsImdldFVUQ0hvdXJzIiwiZ2V0VVRDRGF0ZSIsImdldFVUQ0RheSIsImdldERheSIsImdldFVUQ01vbnRoIiwiZ2V0VVRDRnVsbFllYXIiLCJzZXRVVENNaWxsaXNlY29uZHMiLCJzZXRNaWxsaXNlY29uZHMiLCJzZXRVVENTZWNvbmRzIiwic2V0U2Vjb25kcyIsInNldFVUQ01pbnV0ZXMiLCJzZXRNaW51dGVzIiwic2V0VVRDSG91cnMiLCJzZXRIb3VycyIsInNldFVUQ0RhdGUiLCJzZXREYXRlIiwic2V0VVRDRnVsbFllYXIiLCJzZXRGdWxsWWVhciIsInN0cmluZ0dldCIsInN0cmluZ1NldCIsInByaW9yaXRpemVkIiwicHJpb3JpdGl6ZWRMZW4iLCJtb2QiLCJ4IiwiZGF5c0luTW9udGgiLCJtb2RNb250aCIsIm1vbnRoc1Nob3J0IiwibW9udGhzU2hvcnRSZWdleCIsIm1vbnRoc1JlZ2V4IiwibW9udGhzUGFyc2UiLCJkZWZhdWx0TG9jYWxlTW9udGhzIiwiZGVmYXVsdExvY2FsZU1vbnRoc1Nob3J0IiwiTU9OVEhTX0lOX0ZPUk1BVCIsImRlZmF1bHRNb250aHNTaG9ydFJlZ2V4IiwiZGVmYXVsdE1vbnRoc1JlZ2V4IiwibG9jYWxlTW9udGhzIiwiX21vbnRocyIsImlzRm9ybWF0IiwibG9jYWxlTW9udGhzU2hvcnQiLCJfbW9udGhzU2hvcnQiLCJoYW5kbGVTdHJpY3RQYXJzZSIsIm1vbnRoTmFtZSIsImlpIiwibGxjIiwidG9Mb2NhbGVMb3dlckNhc2UiLCJfbW9udGhzUGFyc2UiLCJfbG9uZ01vbnRoc1BhcnNlIiwiX3Nob3J0TW9udGhzUGFyc2UiLCJsb2NhbGVNb250aHNQYXJzZSIsIl9tb250aHNQYXJzZUV4YWN0Iiwic2V0TW9udGgiLCJzZXRVVENNb250aCIsImdldFNldE1vbnRoIiwiZ2V0RGF5c0luTW9udGgiLCJjb21wdXRlTW9udGhzUGFyc2UiLCJfbW9udGhzU2hvcnRTdHJpY3RSZWdleCIsIl9tb250aHNTaG9ydFJlZ2V4IiwiX21vbnRoc1N0cmljdFJlZ2V4IiwiX21vbnRoc1JlZ2V4IiwiY21wTGVuUmV2Iiwic2hvcnRQaWVjZXMiLCJsb25nUGllY2VzIiwibWl4ZWRQaWVjZXMiLCJzaG9ydFAiLCJsb25nUCIsImNyZWF0ZURhdGUiLCJjcmVhdGVVVENEYXRlIiwiVVRDIiwiZmlyc3RXZWVrT2Zmc2V0IiwiZG93IiwiZG95IiwiZndkIiwiZndkbHciLCJkYXlPZlllYXJGcm9tV2Vla3MiLCJsb2NhbFdlZWtkYXkiLCJ3ZWVrT2Zmc2V0IiwicmVzWWVhciIsInJlc0RheU9mWWVhciIsIndlZWtPZlllYXIiLCJyZXNXZWVrIiwid2Vla3NJblllYXIiLCJ3ZWVrT2Zmc2V0TmV4dCIsImxvY2FsZVdlZWsiLCJfd2VlayIsImRlZmF1bHRMb2NhbGVXZWVrIiwibG9jYWxlRmlyc3REYXlPZldlZWsiLCJsb2NhbGVGaXJzdERheU9mWWVhciIsImdldFNldFdlZWsiLCJhZGQiLCJnZXRTZXRJU09XZWVrIiwid2Vla2RheXNNaW4iLCJ3ZWVrZGF5c1Nob3J0Iiwid2Vla2RheXNNaW5SZWdleCIsIndlZWtkYXlzU2hvcnRSZWdleCIsIndlZWtkYXlzUmVnZXgiLCJ3ZWVrZGF5c1BhcnNlIiwicGFyc2VXZWVrZGF5IiwicGFyc2VJc29XZWVrZGF5Iiwic2hpZnRXZWVrZGF5cyIsIndzIiwiZGVmYXVsdExvY2FsZVdlZWtkYXlzIiwiZGVmYXVsdExvY2FsZVdlZWtkYXlzU2hvcnQiLCJkZWZhdWx0TG9jYWxlV2Vla2RheXNNaW4iLCJkZWZhdWx0V2Vla2RheXNSZWdleCIsImRlZmF1bHRXZWVrZGF5c1Nob3J0UmVnZXgiLCJkZWZhdWx0V2Vla2RheXNNaW5SZWdleCIsImxvY2FsZVdlZWtkYXlzIiwiX3dlZWtkYXlzIiwibG9jYWxlV2Vla2RheXNTaG9ydCIsIl93ZWVrZGF5c1Nob3J0IiwibG9jYWxlV2Vla2RheXNNaW4iLCJfd2Vla2RheXNNaW4iLCJ3ZWVrZGF5TmFtZSIsIl93ZWVrZGF5c1BhcnNlIiwiX3Nob3J0V2Vla2RheXNQYXJzZSIsIl9taW5XZWVrZGF5c1BhcnNlIiwibG9jYWxlV2Vla2RheXNQYXJzZSIsIl93ZWVrZGF5c1BhcnNlRXhhY3QiLCJfZnVsbFdlZWtkYXlzUGFyc2UiLCJnZXRTZXREYXlPZldlZWsiLCJnZXRTZXRMb2NhbGVEYXlPZldlZWsiLCJnZXRTZXRJU09EYXlPZldlZWsiLCJjb21wdXRlV2Vla2RheXNQYXJzZSIsIl93ZWVrZGF5c1N0cmljdFJlZ2V4IiwiX3dlZWtkYXlzUmVnZXgiLCJfd2Vla2RheXNTaG9ydFN0cmljdFJlZ2V4IiwiX3dlZWtkYXlzU2hvcnRSZWdleCIsIl93ZWVrZGF5c01pblN0cmljdFJlZ2V4IiwiX3dlZWtkYXlzTWluUmVnZXgiLCJtaW5QaWVjZXMiLCJtaW5wIiwic2hvcnRwIiwibG9uZ3AiLCJoRm9ybWF0Iiwia0Zvcm1hdCIsImxvd2VyY2FzZSIsIm1hdGNoTWVyaWRpZW0iLCJfbWVyaWRpZW1QYXJzZSIsImtJbnB1dCIsIl9pc1BtIiwiaXNQTSIsIl9tZXJpZGllbSIsInBvcyIsInBvczEiLCJwb3MyIiwibG9jYWxlSXNQTSIsImRlZmF1bHRMb2NhbGVNZXJpZGllbVBhcnNlIiwiZ2V0U2V0SG91ciIsImxvY2FsZU1lcmlkaWVtIiwiaXNMb3dlciIsImJhc2VDb25maWciLCJkYXlPZk1vbnRoT3JkaW5hbFBhcnNlIiwibWVyaWRpZW1QYXJzZSIsImxvY2FsZXMiLCJsb2NhbGVGYW1pbGllcyIsImdsb2JhbExvY2FsZSIsImNvbW1vblByZWZpeCIsImFycjEiLCJhcnIyIiwibWlubCIsIm5vcm1hbGl6ZUxvY2FsZSIsImNob29zZUxvY2FsZSIsIm5hbWVzIiwiaiIsImxvYWRMb2NhbGUiLCJpc0xvY2FsZU5hbWVTYW5lIiwib2xkTG9jYWxlIiwiYWxpYXNlZFJlcXVpcmUiLCJfYWJiciIsImdldFNldEdsb2JhbExvY2FsZSIsInZhbHVlcyIsImdldExvY2FsZSIsImRlZmluZUxvY2FsZSIsImFiYnIiLCJwYXJlbnRMb2NhbGUiLCJ1cGRhdGVMb2NhbGUiLCJ0bXBMb2NhbGUiLCJsaXN0TG9jYWxlcyIsImNoZWNrT3ZlcmZsb3ciLCJfb3ZlcmZsb3dEYXlPZlllYXIiLCJfb3ZlcmZsb3dXZWVrcyIsIl9vdmVyZmxvd1dlZWtkYXkiLCJleHRlbmRlZElzb1JlZ2V4IiwiYmFzaWNJc29SZWdleCIsInR6UmVnZXgiLCJpc29EYXRlcyIsImlzb1RpbWVzIiwiYXNwTmV0SnNvblJlZ2V4Iiwib2JzT2Zmc2V0cyIsIlVUIiwiR01UIiwiRURUIiwiRVNUIiwiQ0RUIiwiQ1NUIiwiTURUIiwiTVNUIiwiUERUIiwiUFNUIiwiY29uZmlnRnJvbUlTTyIsImwiLCJhbGxvd1RpbWUiLCJkYXRlRm9ybWF0IiwidGltZUZvcm1hdCIsInR6Rm9ybWF0IiwiaXNvRGF0ZXNMZW4iLCJpc29UaW1lc0xlbiIsImNvbmZpZ0Zyb21TdHJpbmdBbmRGb3JtYXQiLCJleHRyYWN0RnJvbVJGQzI4MjJTdHJpbmdzIiwieWVhclN0ciIsIm1vbnRoU3RyIiwiZGF5U3RyIiwiaG91clN0ciIsIm1pbnV0ZVN0ciIsInNlY29uZFN0ciIsInVudHJ1bmNhdGVZZWFyIiwicHJlcHJvY2Vzc1JGQzI4MjIiLCJjaGVja1dlZWtkYXkiLCJ3ZWVrZGF5U3RyIiwicGFyc2VkSW5wdXQiLCJ3ZWVrZGF5UHJvdmlkZWQiLCJ3ZWVrZGF5QWN0dWFsIiwiY2FsY3VsYXRlT2Zmc2V0Iiwib2JzT2Zmc2V0IiwibWlsaXRhcnlPZmZzZXQiLCJudW1PZmZzZXQiLCJobSIsImNvbmZpZ0Zyb21SRkMyODIyIiwicGFyc2VkQXJyYXkiLCJjb25maWdGcm9tU3RyaW5nIiwiY3JlYXRlRnJvbUlucHV0RmFsbGJhY2siLCJfdXNlVVRDIiwiZGVmYXVsdHMiLCJjdXJyZW50RGF0ZUFycmF5Iiwibm93VmFsdWUiLCJjb25maWdGcm9tQXJyYXkiLCJjdXJyZW50RGF0ZSIsImV4cGVjdGVkV2Vla2RheSIsInllYXJUb1VzZSIsImRheU9mWWVhckZyb21XZWVrSW5mbyIsIl9kYXlPZlllYXIiLCJfbmV4dERheSIsInRlbXAiLCJ3ZWVrZGF5T3ZlcmZsb3ciLCJjdXJXZWVrIiwiY3JlYXRlTG9jYWwiLCJJU09fODYwMSIsIlJGQ18yODIyIiwic2tpcHBlZCIsInN0cmluZ0xlbmd0aCIsInRvdGFsUGFyc2VkSW5wdXRMZW5ndGgiLCJtZXJpZGllbUZpeFdyYXAiLCJlcmFzQ29udmVydFllYXIiLCJpc1BtIiwibWVyaWRpZW1Ib3VyIiwiY29uZmlnRnJvbVN0cmluZ0FuZEFycmF5IiwidGVtcENvbmZpZyIsImJlc3RNb21lbnQiLCJzY29yZVRvQmVhdCIsImN1cnJlbnRTY29yZSIsInZhbGlkRm9ybWF0Rm91bmQiLCJiZXN0Rm9ybWF0SXNWYWxpZCIsImNvbmZpZ2ZMZW4iLCJzY29yZSIsImNvbmZpZ0Zyb21PYmplY3QiLCJkYXlPckRhdGUiLCJjcmVhdGVGcm9tQ29uZmlnIiwicHJlcGFyZUNvbmZpZyIsInByZXBhcnNlIiwiY29uZmlnRnJvbUlucHV0IiwicHJvdG90eXBlTWluIiwib3RoZXIiLCJwcm90b3R5cGVNYXgiLCJwaWNrQnkiLCJtb21lbnRzIiwib3JkZXJpbmciLCJpc0R1cmF0aW9uVmFsaWQiLCJ1bml0SGFzRGVjaW1hbCIsIm9yZGVyTGVuIiwicGFyc2VGbG9hdCIsImNyZWF0ZUR1cmF0aW9uIiwiRHVyYXRpb24iLCJkdXJhdGlvbiIsIl9taWxsaXNlY29uZHMiLCJfZGF5cyIsIl9idWJibGUiLCJpc0R1cmF0aW9uIiwiYWJzUm91bmQiLCJyb3VuZCIsImNvbXBhcmVBcnJheXMiLCJhcnJheTEiLCJhcnJheTIiLCJkb250Q29udmVydCIsImxlbmd0aERpZmYiLCJkaWZmcyIsIm9mZnNldCIsInNlcGFyYXRvciIsInV0Y09mZnNldCIsIm9mZnNldEZyb21TdHJpbmciLCJjaHVua09mZnNldCIsIm1hdGNoZXIiLCJjaHVuayIsImNsb25lV2l0aE9mZnNldCIsIm1vZGVsIiwiY2xvbmUiLCJzZXRUaW1lIiwibG9jYWwiLCJnZXREYXRlT2Zmc2V0IiwiZ2V0VGltZXpvbmVPZmZzZXQiLCJnZXRTZXRPZmZzZXQiLCJrZWVwTG9jYWxUaW1lIiwia2VlcE1pbnV0ZXMiLCJsb2NhbEFkanVzdCIsIl9jaGFuZ2VJblByb2dyZXNzIiwiYWRkU3VidHJhY3QiLCJnZXRTZXRab25lIiwic2V0T2Zmc2V0VG9VVEMiLCJzZXRPZmZzZXRUb0xvY2FsIiwic3VidHJhY3QiLCJzZXRPZmZzZXRUb1BhcnNlZE9mZnNldCIsInRab25lIiwiaGFzQWxpZ25lZEhvdXJPZmZzZXQiLCJpc0RheWxpZ2h0U2F2aW5nVGltZSIsImlzRGF5bGlnaHRTYXZpbmdUaW1lU2hpZnRlZCIsIl9pc0RTVFNoaWZ0ZWQiLCJ0b0FycmF5IiwiaXNMb2NhbCIsImlzVXRjT2Zmc2V0IiwiaXNVdGMiLCJhc3BOZXRSZWdleCIsImlzb1JlZ2V4IiwicmV0IiwiZGlmZlJlcyIsInBhcnNlSXNvIiwibW9tZW50c0RpZmZlcmVuY2UiLCJpbnZhbGlkIiwiaW5wIiwicG9zaXRpdmVNb21lbnRzRGlmZmVyZW5jZSIsImJhc2UiLCJpc0FmdGVyIiwiaXNCZWZvcmUiLCJjcmVhdGVBZGRlciIsImRpcmVjdGlvbiIsInBlcmlvZCIsImR1ciIsInRtcCIsImlzQWRkaW5nIiwiaXNTdHJpbmciLCJpc01vbWVudElucHV0IiwiaXNOdW1iZXJPclN0cmluZ0FycmF5IiwiaXNNb21lbnRJbnB1dE9iamVjdCIsIm9iamVjdFRlc3QiLCJwcm9wZXJ0eVRlc3QiLCJwcm9wZXJ0aWVzIiwicHJvcGVydHkiLCJwcm9wZXJ0eUxlbiIsImFycmF5VGVzdCIsImRhdGFUeXBlVGVzdCIsImlzQ2FsZW5kYXJTcGVjIiwiZ2V0Q2FsZW5kYXJGb3JtYXQiLCJteU1vbWVudCIsInRpbWUiLCJmb3JtYXRzIiwic29kIiwic3RhcnRPZiIsImNhbGVuZGFyRm9ybWF0IiwibG9jYWxJbnB1dCIsImVuZE9mIiwiaXNCZXR3ZWVuIiwiaW5jbHVzaXZpdHkiLCJsb2NhbEZyb20iLCJsb2NhbFRvIiwiaXNTYW1lIiwiaW5wdXRNcyIsImlzU2FtZU9yQWZ0ZXIiLCJpc1NhbWVPckJlZm9yZSIsImFzRmxvYXQiLCJ6b25lRGVsdGEiLCJtb250aERpZmYiLCJ3aG9sZU1vbnRoRGlmZiIsImFuY2hvciIsImFuY2hvcjIiLCJhZGp1c3QiLCJkZWZhdWx0Rm9ybWF0IiwiZGVmYXVsdEZvcm1hdFV0YyIsInRvSVNPU3RyaW5nIiwia2VlcE9mZnNldCIsInRvRGF0ZSIsImluc3BlY3QiLCJ6b25lIiwicHJlZml4IiwiZGF0ZXRpbWUiLCJpbnB1dFN0cmluZyIsInBvc3Rmb3JtYXQiLCJodW1hbml6ZSIsImZyb21Ob3ciLCJ0b05vdyIsIm5ld0xvY2FsZURhdGEiLCJNU19QRVJfU0VDT05EIiwiTVNfUEVSX01JTlVURSIsIk1TX1BFUl9IT1VSIiwiTVNfUEVSXzQwMF9ZRUFSUyIsImRpdmlkZW5kIiwiZGl2aXNvciIsImxvY2FsU3RhcnRPZkRhdGUiLCJ1dGNTdGFydE9mRGF0ZSIsInN0YXJ0T2ZEYXRlIiwidW5peCIsInRvT2JqZWN0IiwidG9KU09OIiwicGFyc2luZ0ZsYWdzIiwiaW52YWxpZEF0IiwiY3JlYXRpb25EYXRhIiwibWF0Y2hFcmFBYmJyIiwibWF0Y2hFcmFOYW1lIiwibWF0Y2hFcmFOYXJyb3ciLCJlcmFzUGFyc2UiLCJtYXRjaEVyYVllYXJPcmRpbmFsIiwiX2VyYVllYXJPcmRpbmFsUmVnZXgiLCJlcmFZZWFyT3JkaW5hbFBhcnNlIiwibG9jYWxlRXJhcyIsImVyYXMiLCJfZXJhcyIsInNpbmNlIiwibW9tZW50IiwidW50aWwiLCJJbmZpbml0eSIsImxvY2FsZUVyYXNQYXJzZSIsImVyYU5hbWUiLCJuYXJyb3ciLCJsb2NhbGVFcmFzQ29udmVydFllYXIiLCJnZXRFcmFOYW1lIiwiZ2V0RXJhTmFycm93IiwiZ2V0RXJhQWJiciIsImdldEVyYVllYXIiLCJlcmFzTmFtZVJlZ2V4IiwiY29tcHV0ZUVyYXNQYXJzZSIsIl9lcmFzTmFtZVJlZ2V4IiwiX2VyYXNSZWdleCIsImVyYXNBYmJyUmVnZXgiLCJfZXJhc0FiYnJSZWdleCIsImVyYXNOYXJyb3dSZWdleCIsIl9lcmFzTmFycm93UmVnZXgiLCJhYmJyUGllY2VzIiwibmFtZVBpZWNlcyIsIm5hcnJvd1BpZWNlcyIsImVyYXNOYW1lIiwiZXJhc0FiYnIiLCJlcmFzTmFycm93IiwiYWRkV2Vla1llYXJGb3JtYXRUb2tlbiIsImdldHRlciIsImdldFNldFdlZWtZZWFyIiwiZ2V0U2V0V2Vla1llYXJIZWxwZXIiLCJnZXRTZXRJU09XZWVrWWVhciIsImdldElTT1dlZWtzSW5ZZWFyIiwiZ2V0SVNPV2Vla3NJbklTT1dlZWtZZWFyIiwiZ2V0V2Vla3NJblllYXIiLCJ3ZWVrSW5mbyIsImdldFdlZWtzSW5XZWVrWWVhciIsIndlZWtzVGFyZ2V0Iiwic2V0V2Vla0FsbCIsImRheU9mWWVhckRhdGEiLCJnZXRTZXRRdWFydGVyIiwiZ2V0U2V0RGF5T2ZNb250aCIsImdldFNldERheU9mWWVhciIsImdldFNldE1pbnV0ZSIsImdldFNldFNlY29uZCIsImdldFNldE1pbGxpc2Vjb25kIiwicGFyc2VNcyIsImdldFpvbmVBYmJyIiwiZ2V0Wm9uZU5hbWUiLCJwcm90byIsIlN5bWJvbCIsImZvciIsImVyYU5hcnJvdyIsImVyYUFiYnIiLCJlcmFZZWFyIiwiaXNvV2Vla3MiLCJ3ZWVrc0luV2Vla1llYXIiLCJpc29XZWVrc0luWWVhciIsImlzb1dlZWtzSW5JU09XZWVrWWVhciIsInBhcnNlWm9uZSIsImlzRFNUIiwiem9uZUFiYnIiLCJ6b25lTmFtZSIsImlzRFNUU2hpZnRlZCIsImNyZWF0ZVVuaXgiLCJjcmVhdGVJblpvbmUiLCJwcmVQYXJzZVBvc3RGb3JtYXQiLCJmaXJzdERheU9mWWVhciIsImZpcnN0RGF5T2ZXZWVrIiwic2V0dGVyIiwibGlzdE1vbnRoc0ltcGwiLCJvdXQiLCJsaXN0V2Vla2RheXNJbXBsIiwibG9jYWxlU29ydGVkIiwibGlzdE1vbnRocyIsImxpc3RNb250aHNTaG9ydCIsImxpc3RXZWVrZGF5cyIsImxpc3RXZWVrZGF5c1Nob3J0IiwibGlzdFdlZWtkYXlzTWluIiwibGFuZ0RhdGEiLCJtYXRoQWJzIiwiYWJzQ2VpbCIsImJ1YmJsZSIsIm1vbnRoc0Zyb21EYXlzIiwibW9udGhzVG9EYXlzIiwiZGF5c1RvTW9udGhzIiwiYXMiLCJtYWtlQXMiLCJhbGlhcyIsImFzTWlsbGlzZWNvbmRzIiwiYXNTZWNvbmRzIiwiYXNNaW51dGVzIiwiYXNIb3VycyIsImFzRGF5cyIsImFzV2Vla3MiLCJhc01vbnRocyIsImFzUXVhcnRlcnMiLCJhc1llYXJzIiwibWFrZUdldHRlciIsInRocmVzaG9sZHMiLCJzdWJzdGl0dXRlVGltZUFnbyIsInBvc05lZ0R1cmF0aW9uIiwiZ2V0U2V0UmVsYXRpdmVUaW1lUm91bmRpbmciLCJyb3VuZGluZ0Z1bmN0aW9uIiwiZ2V0U2V0UmVsYXRpdmVUaW1lVGhyZXNob2xkIiwidGhyZXNob2xkIiwibGltaXQiLCJhcmdXaXRoU3VmZml4IiwiYXJnVGhyZXNob2xkcyIsIndpdGhTdWZmaXgiLCJ0aCIsInRvdGFsU2lnbiIsInltU2lnbiIsImRheXNTaWduIiwiaG1zU2lnbiIsInRvRml4ZWQiLCJ0b0lzb1N0cmluZyIsInJlbGF0aXZlVGltZVJvdW5kaW5nIiwicmVsYXRpdmVUaW1lVGhyZXNob2xkIiwiSFRNTDVfRk1UIiwiREFURVRJTUVfTE9DQUwiLCJEQVRFVElNRV9MT0NBTF9TRUNPTkRTIiwiREFURVRJTUVfTE9DQUxfTVMiLCJUSU1FIiwiVElNRV9TRUNPTkRTIiwiVElNRV9NUyIsInBsdXJhbCIsIndvcmQiLCJmb3JtcyIsInJlbGF0aXZlVGltZVdpdGhQbHVyYWwiLCJzdGFuZGFsb25lIiwibG9uZ01vbnRoc1BhcnNlIiwic2hvcnRNb250aHNQYXJzZSIsIm1vbnRoc1N0cmljdFJlZ2V4IiwibW9udGhzU2hvcnRTdHJpY3RSZWdleCIsIkNvbHVtbnNEYXRlSHVtYW4iLCJfbGFuZyIsImRhdGVDb250ZW50IiwiQ29sdW1uc0h0bWwiLCJjb2x1bW5WYWx1ZSIsIkNvbHVtbnNOdW1iZXIiLCJDb2x1bW5zTW9uZXkiLCJjdXJyZW5jeSIsIkNvbHVtbnNOdW1iZXJzIiwiQ29sdW1uc1NlbGVjdCIsIm9yaWdpbmFsT3B0aW9ucyIsInNlbGVjdHMiLCJzdG9wUHJvcGFnYXRpb24iLCJzZXRBY3RpdmUiLCJ0cmlnZ2VyIiwic2V0SW5hY3RpdmUiLCJzZWxlY3QiLCJDb2x1bW5zU3dpdGNoIiwiZGlzYWJsZWQiLCJ2YWx1ZU4iLCJvbkNoYW5nZSIsImNvbnRhaW5lcnMiLCJpc0NoZWNrZWQiLCJmb3JtU3dpdGNoIiwicmVjb3JkVGFibGUiLCJDb2x1bW5zVGV4dCIsIkNvbHVtbnNCdXR0b24iLCJDb2x1bW5zTGluayIsImxpbmtDb250ZW50IiwiQ29sdW1uc01lbnUiLCJsaW5rQXR0ciIsImxpbmtBdHRyaWJ1dGVzIiwiYnRuQXR0cmlidXRlcyIsIm1lbnVDb250ZW50IiwiZHJvcGRvd25NZW51IiwiZGV0YWNoIiwiZU9mZnNldCIsInRhcmdldCIsInRvcCIsIm91dGVySGVpZ2h0IiwiQ29sdW1uc0JhZGdlIiwiQ29sdW1uc0NvbXBvbmVudCIsIkNvbHVtbnNQcm9ncmVzcyIsInNob3dQZXJjZW50IiwiYmFyQ29sb3IiLCJiYXJXaWR0aCIsImJhckhlaWdodCIsInBlcmNlbnQiLCJwZXJjZW50VGV4dCIsImNvbG9yIiwiQ29sdW1uc0ltYWdlIiwiaW1nV2lkdGgiLCJpbWdIZWlnaHQiLCJpbWdCb3JkZXIiLCJpbWdTdHlsZSIsInJ1IiwiZW4iLCJidXR0b25Hcm91cCIsImN1c3RvbSIsInBhZ2VKdW1wIiwiY2FwdGlvbiIsImZpbHRlckNsZWFyIiwiZGl2aWRlciIsImRhdGVNb250aCIsImRhdGVSYW5nZSIsImRhdGV0aW1lUmFuZ2UiLCJjaGVja2JveCIsInJhZGlvIiwiY2hlY2tib3hCdG4iLCJyYWRpb0J0biIsImRhdGVIdW1hbiIsIm1vbmV5IiwibnVtYmVycyIsImJhZGdlIiwicHJvZ3Jlc3MiLCJpbWFnZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztFQUFBLElBQUlBLEdBQUcsR0FBR0MsTUFBTSxDQUFDQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7RUFDN0JGLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQyxHQUFHLDREQUE0RCxDQUFBO0VBQ3hGQSxHQUFHLENBQUMscUJBQXFCLENBQUMsR0FBRywwREFBMEQsQ0FBQTtFQUN2RkEsR0FBRyxDQUFDLG9CQUFvQixDQUFDLEdBQUcsb0JBQW9CLENBQUE7RUFDaERBLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxHQUFHLG1DQUFtQyxDQUFBO0VBQzlEQSxHQUFHLENBQUMsbUJBQW1CLENBQUMsR0FBRywwc0JBQTBzQixDQUFBO0VBQ3J1QkEsR0FBRyxDQUFDLHVCQUF1QixDQUFDLEdBQUcsd1NBQXdTLENBQUE7RUFDdlVBLEdBQUcsQ0FBQywyQkFBMkIsQ0FBQyxHQUFHLG9GQUFvRixDQUFBO0VBQ3ZIQSxHQUFHLENBQUMscUJBQXFCLENBQUMsR0FBRyw0RkFBNEYsQ0FBQTtFQUN6SEEsR0FBRyxDQUFDLHFCQUFxQixDQUFDLEdBQUcsK05BQStOLENBQUE7RUFDNVBBLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLHNWQUFzVixDQUFBO0VBQzlXQSxHQUFHLENBQUMsNEJBQTRCLENBQUMsR0FBRyw0Q0FBNEMsQ0FBQTtFQUNoRkEsR0FBRyxDQUFDLG1DQUFtQyxDQUFDLEdBQUcsMkRBQTJELENBQUE7RUFDdEdBLEdBQUcsQ0FBQyxxQ0FB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"],"names":["global","factory","exports","module","define","amd","globalThis","self","CoreUI","table","this","_callSuper","t","o","e","_getPrototypeOf","_possibleConstructorReturn","_isNativeReflectConstruct","Reflect","construct","constructor","apply","TypeError","ReferenceError","_classCallCheck","a","n","_defineProperties","r","length","enumerable","configurable","writable","Object","defineProperty","_toPropertyKey","key","_createClass","prototype","_defineProperty","value","setPrototypeOf","getPrototypeOf","bind","__proto__","_inherits","create","_setPrototypeOf","Boolean","valueOf","call","i","Symbol","toPrimitive","String","Number","_typeof","iterator","hookCallback","tpl","TableUtils","f","window","ejs","c","require","u","Error","code","p","1","fs","path","utils","scopeOptionWarned","_VERSION_STRING","version","_OPTS_PASSABLE_WITH_DATA","_OPTS_PASSABLE_WITH_DATA_EXPRESS","concat","_BOM","_JS_IDENTIFIER","resolvePaths","name","paths","filePath","some","v","resolveInclude","existsSync","handleCache","options","template","func","filename","hasTemplate","arguments","cache","get","fileLoader","toString","replace","compile","set","includeFile","opts","shallowCopy","createNullProtoObjWherePossible","includePath","views","match","exec","Array","isArray","root","includer","escapeFunction","includerResult","rethrow","err","str","flnm","lineno","esc","lines","split","start","Math","max","end","min","context","slice","map","line","curr","join","message","stripSemi","Template","text","optsParam","hasOwnOnlyObject","templateText","mode","truncate","currentLine","source","client","escape","escapeXML","compileDebug","debug","openDelimiter","closeDelimiter","delimiter","strict","rmWhitespace","outputFunctionName","localsName","async","destructuredLocals","legacyInclude","_with","regex","createRegex","readFileSync","promiseImpl","Function","Promise","isDir","dirname","extname","resolve","scope","console","warn","render","d","data","shallowCopyFromList","renderFile","cb","result","args","shift","pop","settings","viewOpts","reject","clearCache","reset","modes","EVAL","ESCAPED","RAW","COMMENT","LITERAL","delim","escapeRegExpChars","open","close","RegExp","fn","prepended","appended","escapeFn","sanitizedFilename","JSON","stringify","generateSource","test","destructuring","src","log","ctor","SyntaxError","returnedFn","includeData","basename","matches","parseTemplateText","forEach","index","indexOf","closing","scanLine","firstPos","pat","arr","push","substring","_addOutput","newLineCount","lastIndexOf","__express","VERSION","../package.json","./utils","2","hasOwn","obj","hasOwnProperty","regExpChars","_ENCODE_HTML_RULES","string","&","<",">","\"","'","_MATCH_HTML","encode_char","escapeXMLToString","markup","undefined","to","from","list","_data","val","remove","hyphenToCamel","toUpperCase","3","4","process","normalizeArray","parts","allowAboveRoot","up","last","splice","unshift","filter","xs","res","resolvedPath","resolvedAbsolute","cwd","charAt","normalize","isAbsolute","trailingSlash","substr","relative","trim","fromParts","toParts","samePartsLength","outputParts","sep","hasRoot","charCodeAt","matchedSlash","ext","startDot","startPart","preDotState","len","_process","5","cachedSetTimeout","cachedClearTimeout","defaultSetTimout","defaultClearTimeout","setTimeout","clearTimeout","runTimeout","fun","currentQueue","queue","draining","queueIndex","cleanUpNextTick","drainQueue","timeout","run","runClearTimeout","marker","Item","array","noop","nextTick","title","browser","env","argv","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","binding","chdir","dir","umask","6","description","keywords","author","license","bin","main","jsdelivr","unpkg","repository","type","url","bugs","homepage","dependencies","jake","devDependencies","browserify","eslint","git-directory-deploy","jsdoc","lru-cache","mocha","uglify-js","engines","node","scripts","_templates","mergeAttr","attr1","attr2","assign","$","each","isNumeric","num","isNaN","hashCode","crc32","Date","getTime","random","isObject","tplName","strPadLeft","count","repeat","TableRender","renderTable","rows","_rows","getOptions","recordsElements","columnsHeader","columnsFooter","colGroups","columnElements","classes","_columns","column","columnOptions","attributes","sortable","menuElements","menuPosition","columnElement","menuContainer","isShow","menuShowAlways","field","attrHeader","data-field","fixed","class","attr","_sort","sortField","order","showHeaders","menu","items","showAlways","position","item","toLowerCase","attrItem","onClick","menuElement","find","click","event","prop","_attrItem","_attr","href","style","width","unit","minWidth","_unit","maxWidth","_unit2","label","showLabel","issetMenu","originalEvent","cancelBubble","element","append","_records","_recordsTotal","getRecordsCount","_recordsNumber","_page","_recordsPerPage","renderRecords","headerRow","cells","headerColumn","content","columns","footerRow","footerColumn","theadAttr","tableElement","theadTop","tbody","recordElement","records","that","group","groupValue","groupIndex","recordsGroups","record","show","isGroup","recordsGroup","renderRecordsGroup","renderRecord","renderGroup","columnsCount","_countColumnsShow","lang","getLang","fields","recordAttr","fieldContent","renderField","onClickUrl","meta","querySelector","columnField","getField","fieldProps","fieldAttr","getActions","actions","fieldAttrResult","renderContent","isCollapsing","groupElement","colspan","td","collapsed","hasClass","removeClass","addClass","fadeOut","fadeIn","renderExpand","renderComponents","expandRecord","html","HTMLElement","jQuery","renderControl","control","controlElement","id","getId","components","eventName","instance","initEvents","component","TableElements","tableId","next","after","recordExpanded","hide","indexes","tr","tableContainer","tableWrapper","colOffset","css","outerWidth","reverse","TablePrivate","initColumns","columnsStorage","saveState","getStorageField","key2","columnStorage","_options","overflow","columnInstance","Table","initSearch","searchControls","searchValues","search","controlInstance","_search","initControls","row","controlsLeft","controlsCenter","controlsRight","left","initControl","center","right","_controlsPositions","filterName","controls","_controls","filters","filterValues","_filters","initSort","sort","searchLocalRecords","searchData","getSearchData","filterData","getFilterData","columnsOptions","convertToString","isFilteredRecord","setRecords","_recordsIndex","addRecord","afterIndex","extend","_meta","seq","_seq","addRecordBefore","issetKey","keyBefore","recordData","fieldValue","_trigger","params","_events","callback","singleExec","sortRecordsBySeq","b","sortRecordsByFields","columnsConverters","issetAField","issetBField","aVal","bVal","setColumnsSort","thead","sortColumn","sortItem","getStorage","storage","localStorage","getItem","parse","setStorage","storageAll","setItem","setStorageField","TableInstance","primaryKey","langItems","height","minHeight","naxHeight","page","recordsPerPage","noWrap","noWrapToggle","showScrollShadow","recordsRequest","method","requestParams","header","footer","labelWidth","_id","pageSize","_isRecordsRequest","recordKey","getRecordByIndex","fieldQuote","location","preventDefault","parent","sortableColumns","sorting","currentOrder","sortDefault","sortFields","bootstrap","Tooltip","widthSizes","heightSizes","headersOut","headersIn","footersIn","footersOut","_unit3","_unit4","maxHeight","_unit5","headerControls","_headerControls","controlRender","footerControls","_footerControls","loadByFunction","load","classesWrapper","theme","containerElement","classesRoot","prepend","domElement","document","getElementById","container","lock","paramSearch","paramPage","paramCount","paramStart","paramEnd","searchItem","paramSort","ajax","dataType","beforeSend","xhr","success","total","error","textStatus","errorThrown","complete","unlock","then","replaceWith","getRecordById","getRecordsData","reload","totalPages","ceil","eventNames","isChange","setShow","refresh","extOptions","getValue","setValue","searchRecords","recordItem","getRecordByField","columnSortable","emptyRecords","before","tableBody","parseInt","recordIndex","isRebuild","_recordIndex","callbackResult","expandRecordContent","response","getResponseHeader","_instances","_settings","getSetting","setSettings","Control","_table","ControlLink","link","ControlButton","btn","ControlDropdown","dropdown","button","ControlButtonGroup","_this","buttons","btnGroup","_link","linkElement","_button","buttonElement","_dropdown","dropdownElement","ControlCustom","ControlPageSize","optionsOriginal","recordsPerPageList","change","setPageSize","ControlPageJump","input","goPage","keyup","keyCode","controlPages","showPrev","prev","showNext","showDividerStart","showDividerEnd","showPageFirst","showPageLast","pages","pagesTotal","countHalf","floor","currentPage","isActivePrev","isActiveNext","btnPrev","prevPage","btnNext","nextPage","btnPages","ControlPages","controlUpdate","_control","ControlTotal","recordsTotal","ControlSearch","btnClear","btnComplete","clear","searchAction","btnAttr","btnContent","_renderBtnClear","buttonToggle","buttonClear","btnCompleteAttr","columnsContainer","fadeToggle","btnCompleteContent","tableOptions","searchControl","controlContainer","descriptionLabel","suffix","searchContainer","clearSearch","_btnClear","insertAfter","ControlColumns","showAll","containerList","containerSearch","wrapper","is","setColumnsShow","ControlCaption","ControlFilterClear","clearFilters","ControlDivider","Filter","searchValue","FilterText","autoSearch","_value","attrBtn","FilterNumber","numberStart","numberEnd","inputStart","inputEnd","valueStart","valueEnd","issetStart","issetEnd","startAttr","endAttr","attrStart","attrEnd","FilterDate","FilterDatetime","FilterDateMonth","FilterDateRange","dateStart","dateEnd","startEnd","HTMLInputElement","showPicker","FilterDatetimeRange","FilterCheckbox","inputs","option","checked","_class","FilterRadio","FilterSelect","isMultiple","selectOptions","renderAttr","groupOptions","_buildOption","groupAttr","groupOption","optionAttr","optionText","itemValue","FilterSwitch","valueY","Search","SearchText","SearchNumber","SearchDate","SearchDateMonth","SearchDatetime","SearchDateRange","SearchDatetimeRange","SearchCheckbox","_checked","SearchCheckboxBtn","optionsClass","hash","SearchRadio","checkedAll","SearchRadioBtn","optionAllHash","optionOptionsClass","SearchSelect","SearchSwitch","Column","ColumnsDate","format","date","getFullYear","monthNames","getMonth","monthNamesShort","getDate","dayNames","dayNamesMin","ColumnsDatetime","getHours","getMinutes","getSeconds","hooks","hasOwnProp","isObjectEmpty","getOwnPropertyNames","k","isUndefined","isNumber","isDate","arrLen","createUTC","locale","createLocalOrUTC","utc","getParsingFlags","m","_pf","empty","unusedTokens","unusedInput","charsLeftOver","nullInput","invalidEra","invalidMonth","invalidFormat","userInvalidated","iso","parsedDateParts","era","meridiem","rfc2822","weekdayMismatch","isValid$2","flags","parsedParts","isNowValid","_d","invalidWeekday","_strict","bigHour","isFrozen","_isValid","createInvalid$1","NaN","momentProperties","updateInProgress","copyConfig","momentPropertiesLen","_isAMomentObject","_i","_f","_l","_tzm","_isUTC","_offset","_locale","Moment","config","isValid","updateOffset","isMoment","msg","suppressDeprecationWarnings","deprecate","firstTime","deprecationHandler","arg","argLen","stack","deprecations","deprecateSimple","isFunction","mergeConfigs","parentConfig","childConfig","Locale","keys","zeroFill","number","targetLength","forceSign","absNumber","abs","pow","formattingTokens","localFormattingTokens","formatFunctions","formatTokenFunctions","addFormatToken","token","padded","ordinal","localeData","formatMoment","expandFormat","mom","output","invalidDate","replaceLongDateFormatTokens","longDateFormat","lastIndex","aliases","D","dates","days","day","weekdays","weekday","E","isoweekdays","isoweekday","DDD","dayofyears","dayofyear","h","hours","hour","ms","milliseconds","millisecond","minutes","minute","M","months","month","Q","quarters","quarter","s","seconds","second","gg","weekyears","weekyear","GG","isoweekyears","isoweekyear","w","weeks","week","W","isoweeks","isoweek","y","years","year","normalizeUnits","units","normalizeObjectUnits","inputObject","normalizedProp","normalizedInput","priorities","isoWeekday","dayOfYear","weekYear","isoWeekYear","isoWeek","match1","match2","match3","match4","match6","match1to2","match3to4","match5to6","match1to3","match1to4","match1to6","matchUnsigned","matchSigned","matchOffset","matchShortOffset","matchWord","match1to2NoLeadingZero","match1to2HasZero","addRegexToken","strictRegex","regexes","isStrict","getParseRegexForToken","regexEscape","matched","p1","p2","p3","p4","absFloor","toInt","argumentForCoercion","coercedNumber","isFinite","tokens","addParseToken","tokenLen","addWeekParseToken","_w","isLeapYear","YEAR","MONTH","DATE","HOUR","MINUTE","SECOND","MILLISECOND","WEEK","WEEKDAY","daysInYear","parseTwoDigitYear","getSetYear","makeGetSet","keepTime","get$2","isUTC","getUTCMilliseconds","getMilliseconds","getUTCSeconds","getUTCMinutes","getUTCHours","getUTCDate","getUTCDay","getDay","getUTCMonth","getUTCFullYear","setUTCMilliseconds","setMilliseconds","setUTCSeconds","setSeconds","setUTCMinutes","setMinutes","setUTCHours","setHours","setUTCDate","setDate","setUTCFullYear","setFullYear","daysInMonth","x","modMonth","monthsShort","monthsShortRegex","monthsRegex","monthsParse","defaultLocaleMonths","defaultLocaleMonthsShort","MONTHS_IN_FORMAT","defaultMonthsShortRegex","defaultMonthsRegex","setMonth","setUTCMonth","getSetMonth","computeMonthsParse","cmpLenRev","shortP","longP","shortPieces","longPieces","mixedPieces","_monthsRegex","_monthsShortRegex","_monthsStrictRegex","_monthsShortStrictRegex","createDate","createUTCDate","UTC","firstWeekOffset","dow","doy","fwd","dayOfYearFromWeeks","resYear","resDayOfYear","weekOfYear","resWeek","weekOffset","weeksInYear","weekOffsetNext","shiftWeekdays","ws","weekdaysMin","weekdaysShort","weekdaysMinRegex","weekdaysShortRegex","weekdaysRegex","weekdaysParse","defaultLocaleWeekdays","defaultLocaleWeekdaysShort","defaultLocaleWeekdaysMin","defaultWeekdaysRegex","defaultWeekdaysShortRegex","defaultWeekdaysMinRegex","computeWeekdaysParse","minp","shortp","longp","minPieces","_weekdaysRegex","_weekdaysShortRegex","_weekdaysMinRegex","_weekdaysStrictRegex","_weekdaysShortStrictRegex","_weekdaysMinStrictRegex","hFormat","lowercase","matchMeridiem","_meridiemParse","kInput","_isPm","isPM","_meridiem","pos","pos1","pos2","getSetHour","globalLocale","baseConfig","calendar","sameDay","nextDay","nextWeek","lastDay","lastWeek","sameElse","LTS","LT","L","LL","LLL","LLLL","dayOfMonthOrdinalParse","relativeTime","future","past","ss","mm","hh","dd","ww","MM","yy","meridiemParse","locales","localeFamilies","normalizeLocale","chooseLocale","names","j","loadLocale","arr1","arr2","minl","oldLocale","_abbr","getSetGlobalLocale","values","getLocale","defineLocale","abbr","_config","parentLocale","checkOverflow","_a","_overflowDayOfYear","_overflowWeeks","_overflowWeekday","extendedIsoRegex","basicIsoRegex","tzRegex","isoDates","isoTimes","aspNetJsonRegex","obsOffsets","UT","GMT","EDT","EST","CDT","CST","MDT","MST","PDT","PST","configFromISO","l","allowTime","dateFormat","timeFormat","tzFormat","isoDatesLen","isoTimesLen","configFromStringAndFormat","extractFromRFC2822Strings","yearStr","monthStr","dayStr","hourStr","minuteStr","secondStr","configFromRFC2822","obsOffset","militaryOffset","parsedArray","weekdayStr","parsedInput","numOffset","hm","defaults","configFromArray","currentDate","weekdayOverflow","curWeek","nowValue","now","_useUTC","createLocal","_week","temp","_dayOfYear","yearToUse","_nextDay","expectedWeekday","ISO_8601","RFC_2822","stringLength","totalParsedInputLength","skipped","meridiemHour","isPm","erasConvertYear","prepareConfig","dayOrDate","preparse","configFromStringAndArray","tempConfig","bestMoment","scoreToBeat","currentScore","validFormatFound","bestFormatIsValid","configfLen","score","createFromInputFallback","add","prototypeMin","other","prototypeMax","pickBy","moments","ordering","Duration","duration","unitHasDecimal","orderLen","parseFloat","_milliseconds","_days","_months","_bubble","isDuration","absRound","round","offset","separator","utcOffset","sign","offsetFromString","chunkOffset","matcher","cloneWithOffset","model","diff","clone","setTime","local","getDateOffset","getTimezoneOffset","isUtc","aspNetRegex","isoRegex","createDuration","ret","parseIso","diffRes","base","isBefore","positiveMomentsDifference","inp","isAfter","createAdder","direction","period","tmp","addSubtract$1","isAdding","invalid","add$1","subtract$1","isString","isMomentInput","arrayTest","dataTypeTest","property","objectTest","propertyTest","properties","propertyLen","monthDiff","wholeMonthDiff","anchor","newLocaleData","defaultFormat","defaultFormatUtc","MS_PER_400_YEARS","mod","dividend","divisor","localStartOfDate","utcStartOfDate","matchEraAbbr","erasAbbrRegex","computeErasParse","erasName","erasAbbr","erasNarrow","abbrPieces","namePieces","narrowPieces","eras","narrow","_erasRegex","_erasNameRegex","_erasAbbrRegex","_erasNarrowRegex","addWeekYearFormatToken","getter","getSetWeekYearHelper","weeksTarget","dayOfYearData","erasNameRegex","erasNarrowRegex","erasParse","_eraYearOrdinalRegex","eraYearOrdinalParse","_dayOfMonthOrdinalParse","_ordinalParse","_dayOfMonthOrdinalParseLenient","getSetDayOfMonth","getSetMinute","getSetSecond","parseMs","getSetMillisecond","proto$2","preParsePostFormat","time","formats","sod","startOf","calendarFormat","asFloat","zoneDelta","endOf","startOfDate","inputString","postformat","withoutSuffix","humanize","fromNow","toNow","invalidAt","localInput","isBetween","inclusivity","localFrom","localTo","isSame","inputMs","isSameOrAfter","isSameOrBefore","parsingFlags","prioritized","unitsObj","priority","prioritizedLen","subtract","toArray","toObject","toDate","toISOString","keepOffset","inspect","zone","prefix","isLocal","for","toJSON","unix","creationData","eraName","since","until","eraNarrow","eraAbbr","eraYear","isoWeeks","weekInfo","weeksInWeekYear","isoWeeksInYear","isoWeeksInISOWeekYear","keepLocalTime","keepMinutes","localAdjust","_changeInProgress","parseZone","tZone","hasAlignedHourOffset","isDST","isUtcOffset","zoneAbbr","zoneName","isDSTShifted","_isDSTShifted","array1","array2","dontConvert","lengthDiff","diffs","proto$1","get$1","setter","listMonthsImpl","out","listWeekdaysImpl","localeSorted","_calendar","_longDateFormat","formatUpper","tok","_invalidDate","_ordinal","isFuture","_relativeTime","pastFuture","_eras","Infinity","isFormat","_monthsShort","monthName","_monthsParseExact","ii","llc","toLocaleLowerCase","_monthsParse","_longMonthsParse","_shortMonthsParse","firstDayOfYear","firstDayOfWeek","_weekdays","_weekdaysMin","_weekdaysShort","weekdayName","_weekdaysParseExact","_weekdaysParse","_shortWeekdaysParse","_minWeekdaysParse","_fullWeekdaysParse","isLower","langData","mathAbs","addSubtract","absCeil","daysToMonths","monthsToDays","makeAs","alias","as","asMilliseconds","asSeconds","asMinutes","asHours","asDays","asWeeks","asMonths","asQuarters","asYears","makeGetter","thresholds","posNegDuration","ymSign","daysSign","hmsSign","toFixed","proto","relativeTimeWithPlural","forms","word","monthsFromDays","argWithSuffix","argThresholds","withSuffix","th","toIsoString","updateLocale","tmpLocale","relativeTimeRounding","roundingFunction","relativeTimeThreshold","threshold","limit","myMoment","HTML5_FMT","DATETIME_LOCAL","DATETIME_LOCAL_SECONDS","DATETIME_LOCAL_MS","TIME","TIME_SECONDS","TIME_MS","standalone","longMonthsParse","shortMonthsParse","monthsStrictRegex","monthsShortStrictRegex","ColumnsDateHuman","_lang","dateContent","ColumnsHtml","columnValue","ColumnsNumber","ColumnsMoney","currency","ColumnsNumbers","ColumnsSelect","originalOptions","selects","selectAll","stopPropagation","unselectAll","setActive","trigger","setInactive","select","ColumnsSwitch","disabled","valueN","onChange","isChecked","formSwitch","recordTable","ColumnsText","ColumnsButton","ColumnsLink","linkContent","ColumnsMenu","menuContent","dropdownMenu","linkAttributes","btnAttributes","linkAttr","detach","eOffset","target","display","top","outerHeight","ColumnsBadge","ColumnsComponent","ColumnsProgress","showPercent","barColor","barWidth","barHeight","percent","percentText","color","ColumnsImage","imgWidth","imgHeight","imgBorder","imgStyle","ru","loading","all","en","buttonGroup","custom","pageJump","caption","filterClear","divider","datetime","dateMonth","dateRange","datetimeRange","checkbox","radio","checkboxBtn","radioBtn","dateHuman","money","numbers","badge","progress","image"],"mappings":"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"}