(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
	typeof define === 'function' && define.amd ? define(factory) :
	(global.CoreUI = global.CoreUI || {}, global.CoreUI.table = factory());
}(this, (function () { 'use strict';

function _AsyncGenerator(e) {
  var r, t;
  function resume(r, t) {
    try {
      var n = e[r](t),
        o = n.value,
        u = o instanceof _OverloadYield;
      Promise.resolve(u ? o.v : o).then(function (t) {
        if (u) {
          var i = "return" === r ? "return" : "next";
          if (!o.k || t.done) return resume(i, t);
          t = e[i](t).value;
        }
        settle(n.done ? "return" : "normal", t);
      }, function (e) {
        resume("throw", e);
      });
    } catch (e) {
      settle("throw", e);
    }
  }
  function settle(e, n) {
    switch (e) {
      case "return":
        r.resolve({
          value: n,
          done: !0
        });
        break;
      case "throw":
        r.reject(n);
        break;
      default:
        r.resolve({
          value: n,
          done: !1
        });
    }
    (r = r.next) ? resume(r.key, r.arg) : t = null;
  }
  this._invoke = function (e, n) {
    return new Promise(function (o, u) {
      var i = {
        key: e,
        arg: n,
        resolve: o,
        reject: u,
        next: null
      };
      t ? t = t.next = i : (r = t = i, resume(e, n));
    });
  }, "function" != typeof e.return && (this.return = void 0);
}
_AsyncGenerator.prototype["function" == typeof Symbol && Symbol.asyncIterator || "@@asyncIterator"] = function () {
  return this;
}, _AsyncGenerator.prototype.next = function (e) {
  return this._invoke("next", e);
}, _AsyncGenerator.prototype.throw = function (e) {
  return this._invoke("throw", e);
}, _AsyncGenerator.prototype.return = function (e) {
  return this._invoke("return", e);
};
function _OverloadYield(t, e) {
  this.v = t, this.k = e;
}
function _typeof(o) {
  "@babel/helpers - typeof";

  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) {
    return typeof o;
  } : function (o) {
    return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
  }, _typeof(o);
}

(function (f) {
  if (typeof exports === "object" && typeof module !== "undefined") {
    module.exports = f();
  } else if (typeof define === "function" && define.amd) {
    define([], f);
  } else {
    var g;
    if (typeof window !== "undefined") {
      g = window;
    } else if (typeof global !== "undefined") {
      g = global;
    } else if (typeof self !== "undefined") {
      g = self;
    } else {
      g = this;
    }
    g.ejs = f();
  }
})(function () {
  return function () {
    function r(e, n, t) {
      function o(i, f) {
        if (!n[i]) {
          if (!e[i]) {
            var c = "function" == typeof require && require;
            if (!f && c) return c(i, !0);
            if (u) return u(i, !0);
            var a = new Error("Cannot find module '" + i + "'");
            throw a.code = "MODULE_NOT_FOUND", a;
          }
          var p = n[i] = {
            exports: {}
          };
          e[i][0].call(p.exports, function (r) {
            var n = e[i][1][r];
            return o(n || r);
          }, p, p.exports, r, e, n, t);
        }
        return n[i].exports;
      }
      for (var u = "function" == typeof require && require, i = 0; i < t.length; i++) o(t[i]);
      return o;
    }
    return r;
  }()({
    1: [function (require, module, exports) {
      "use strict";

      var fs = require("fs");
      var path = require("path");
      var utils = require("./utils");
      var scopeOptionWarned = false;
      var _VERSION_STRING = require("../package.json").version;
      var _DEFAULT_OPEN_DELIMITER = "<";
      var _DEFAULT_CLOSE_DELIMITER = ">";
      var _DEFAULT_DELIMITER = "%";
      var _DEFAULT_LOCALS_NAME = "locals";
      var _NAME = "ejs";
      var _REGEX_STRING = "(<%%|%%>|<%=|<%-|<%_|<%#|<%|%>|-%>|_%>)";
      var _OPTS_PASSABLE_WITH_DATA = ["delimiter", "scope", "context", "debug", "compileDebug", "client", "_with", "rmWhitespace", "strict", "filename", "async"];
      var _OPTS_PASSABLE_WITH_DATA_EXPRESS = _OPTS_PASSABLE_WITH_DATA.concat("cache");
      var _BOM = /^\uFEFF/;
      var _JS_IDENTIFIER = /^[a-zA-Z_$][0-9a-zA-Z_$]*$/;
      exports.cache = utils.cache;
      exports.fileLoader = fs.readFileSync;
      exports.localsName = _DEFAULT_LOCALS_NAME;
      exports.promiseImpl = new Function("return this;")().Promise;
      exports.resolveInclude = function (name, filename, isDir) {
        var dirname = path.dirname;
        var extname = path.extname;
        var resolve = path.resolve;
        var includePath = resolve(isDir ? filename : dirname(filename), name);
        var ext = extname(name);
        if (!ext) {
          includePath += ".ejs";
        }
        return includePath;
      };
      function resolvePaths(name, paths) {
        var filePath;
        if (paths.some(function (v) {
          filePath = exports.resolveInclude(name, v, true);
          return fs.existsSync(filePath);
        })) {
          return filePath;
        }
      }
      function getIncludePath(path, options) {
        var includePath;
        var filePath;
        var views = options.views;
        var match = /^[A-Za-z]+:\\|^\//.exec(path);
        if (match && match.length) {
          path = path.replace(/^\/*/, "");
          if (Array.isArray(options.root)) {
            includePath = resolvePaths(path, options.root);
          } else {
            includePath = exports.resolveInclude(path, options.root || "/", true);
          }
        } else {
          if (options.filename) {
            filePath = exports.resolveInclude(path, options.filename);
            if (fs.existsSync(filePath)) {
              includePath = filePath;
            }
          }
          if (!includePath && Array.isArray(views)) {
            includePath = resolvePaths(path, views);
          }
          if (!includePath && typeof options.includer !== "function") {
            throw new Error('Could not find the include file "' + options.escapeFunction(path) + '"');
          }
        }
        return includePath;
      }
      function handleCache(options, template) {
        var func;
        var filename = options.filename;
        var hasTemplate = arguments.length > 1;
        if (options.cache) {
          if (!filename) {
            throw new Error("cache option requires a filename");
          }
          func = exports.cache.get(filename);
          if (func) {
            return func;
          }
          if (!hasTemplate) {
            template = fileLoader(filename).toString().replace(_BOM, "");
          }
        } else if (!hasTemplate) {
          if (!filename) {
            throw new Error("Internal EJS error: no file name or template " + "provided");
          }
          template = fileLoader(filename).toString().replace(_BOM, "");
        }
        func = exports.compile(template, options);
        if (options.cache) {
          exports.cache.set(filename, func);
        }
        return func;
      }
      function tryHandleCache(options, data, cb) {
        var result;
        if (!cb) {
          if (typeof exports.promiseImpl == "function") {
            return new exports.promiseImpl(function (resolve, reject) {
              try {
                result = handleCache(options)(data);
                resolve(result);
              } catch (err) {
                reject(err);
              }
            });
          } else {
            throw new Error("Please provide a callback function");
          }
        } else {
          try {
            result = handleCache(options)(data);
          } catch (err) {
            return cb(err);
          }
          cb(null, result);
        }
      }
      function fileLoader(filePath) {
        return exports.fileLoader(filePath);
      }
      function includeFile(path, options) {
        var opts = utils.shallowCopy(utils.createNullProtoObjWherePossible(), options);
        opts.filename = getIncludePath(path, opts);
        if (typeof options.includer === "function") {
          var includerResult = options.includer(path, opts.filename);
          if (includerResult) {
            if (includerResult.filename) {
              opts.filename = includerResult.filename;
            }
            if (includerResult.template) {
              return handleCache(opts, includerResult.template);
            }
          }
        }
        return handleCache(opts);
      }
      function rethrow(err, str, flnm, lineno, esc) {
        var lines = str.split("\n");
        var start = Math.max(lineno - 3, 0);
        var end = Math.min(lines.length, lineno + 3);
        var filename = esc(flnm);
        var context = lines.slice(start, end).map(function (line, i) {
          var curr = i + start + 1;
          return (curr == lineno ? " >> " : "    ") + curr + "| " + line;
        }).join("\n");
        err.path = filename;
        err.message = (filename || "ejs") + ":" + lineno + "\n" + context + "\n\n" + err.message;
        throw err;
      }
      function stripSemi(str) {
        return str.replace(/;(\s*$)/, "$1");
      }
      exports.compile = function compile(template, opts) {
        var templ;
        if (opts && opts.scope) {
          if (!scopeOptionWarned) {
            console.warn("`scope` option is deprecated and will be removed in EJS 3");
            scopeOptionWarned = true;
          }
          if (!opts.context) {
            opts.context = opts.scope;
          }
          delete opts.scope;
        }
        templ = new Template(template, opts);
        return templ.compile();
      };
      exports.render = function (template, d, o) {
        var data = d || utils.createNullProtoObjWherePossible();
        var opts = o || utils.createNullProtoObjWherePossible();
        if (arguments.length == 2) {
          utils.shallowCopyFromList(opts, data, _OPTS_PASSABLE_WITH_DATA);
        }
        return handleCache(opts, template)(data);
      };
      exports.renderFile = function () {
        var args = Array.prototype.slice.call(arguments);
        var filename = args.shift();
        var cb;
        var opts = {
          filename: filename
        };
        var data;
        var viewOpts;
        if (typeof arguments[arguments.length - 1] == "function") {
          cb = args.pop();
        }
        if (args.length) {
          data = args.shift();
          if (args.length) {
            utils.shallowCopy(opts, args.pop());
          } else {
            if (data.settings) {
              if (data.settings.views) {
                opts.views = data.settings.views;
              }
              if (data.settings["view cache"]) {
                opts.cache = true;
              }
              viewOpts = data.settings["view options"];
              if (viewOpts) {
                utils.shallowCopy(opts, viewOpts);
              }
            }
            utils.shallowCopyFromList(opts, data, _OPTS_PASSABLE_WITH_DATA_EXPRESS);
          }
          opts.filename = filename;
        } else {
          data = utils.createNullProtoObjWherePossible();
        }
        return tryHandleCache(opts, data, cb);
      };
      exports.Template = Template;
      exports.clearCache = function () {
        exports.cache.reset();
      };
      function Template(text, opts) {
        opts = opts || utils.createNullProtoObjWherePossible();
        var options = utils.createNullProtoObjWherePossible();
        this.templateText = text;
        this.mode = null;
        this.truncate = false;
        this.currentLine = 1;
        this.source = "";
        options.client = opts.client || false;
        options.escapeFunction = opts.escape || opts.escapeFunction || utils.escapeXML;
        options.compileDebug = opts.compileDebug !== false;
        options.debug = !!opts.debug;
        options.filename = opts.filename;
        options.openDelimiter = opts.openDelimiter || exports.openDelimiter || _DEFAULT_OPEN_DELIMITER;
        options.closeDelimiter = opts.closeDelimiter || exports.closeDelimiter || _DEFAULT_CLOSE_DELIMITER;
        options.delimiter = opts.delimiter || exports.delimiter || _DEFAULT_DELIMITER;
        options.strict = opts.strict || false;
        options.context = opts.context;
        options.cache = opts.cache || false;
        options.rmWhitespace = opts.rmWhitespace;
        options.root = opts.root;
        options.includer = opts.includer;
        options.outputFunctionName = opts.outputFunctionName;
        options.localsName = opts.localsName || exports.localsName || _DEFAULT_LOCALS_NAME;
        options.views = opts.views;
        options.async = opts.async;
        options.destructuredLocals = opts.destructuredLocals;
        options.legacyInclude = typeof opts.legacyInclude != "undefined" ? !!opts.legacyInclude : true;
        if (options.strict) {
          options._with = false;
        } else {
          options._with = typeof opts._with != "undefined" ? opts._with : true;
        }
        this.opts = options;
        this.regex = this.createRegex();
      }
      Template.modes = {
        EVAL: "eval",
        ESCAPED: "escaped",
        RAW: "raw",
        COMMENT: "comment",
        LITERAL: "literal"
      };
      Template.prototype = {
        createRegex: function () {
          var str = _REGEX_STRING;
          var delim = utils.escapeRegExpChars(this.opts.delimiter);
          var open = utils.escapeRegExpChars(this.opts.openDelimiter);
          var close = utils.escapeRegExpChars(this.opts.closeDelimiter);
          str = str.replace(/%/g, delim).replace(/</g, open).replace(/>/g, close);
          return new RegExp(str);
        },
        compile: function () {
          var src;
          var fn;
          var opts = this.opts;
          var prepended = "";
          var appended = "";
          var escapeFn = opts.escapeFunction;
          var ctor;
          var sanitizedFilename = opts.filename ? JSON.stringify(opts.filename) : "undefined";
          if (!this.source) {
            this.generateSource();
            prepended += '  var __output = "";\n' + "  function __append(s) { if (s !== undefined && s !== null) __output += s }\n";
            if (opts.outputFunctionName) {
              if (!_JS_IDENTIFIER.test(opts.outputFunctionName)) {
                throw new Error("outputFunctionName is not a valid JS identifier.");
              }
              prepended += "  var " + opts.outputFunctionName + " = __append;" + "\n";
            }
            if (opts.localsName && !_JS_IDENTIFIER.test(opts.localsName)) {
              throw new Error("localsName is not a valid JS identifier.");
            }
            if (opts.destructuredLocals && opts.destructuredLocals.length) {
              var destructuring = "  var __locals = (" + opts.localsName + " || {}),\n";
              for (var i = 0; i < opts.destructuredLocals.length; i++) {
                var name = opts.destructuredLocals[i];
                if (!_JS_IDENTIFIER.test(name)) {
                  throw new Error("destructuredLocals[" + i + "] is not a valid JS identifier.");
                }
                if (i > 0) {
                  destructuring += ",\n  ";
                }
                destructuring += name + " = __locals." + name;
              }
              prepended += destructuring + ";\n";
            }
            if (opts._with !== false) {
              prepended += "  with (" + opts.localsName + " || {}) {" + "\n";
              appended += "  }" + "\n";
            }
            appended += "  return __output;" + "\n";
            this.source = prepended + this.source + appended;
          }
          if (opts.compileDebug) {
            src = "var __line = 1" + "\n" + "  , __lines = " + JSON.stringify(this.templateText) + "\n" + "  , __filename = " + sanitizedFilename + ";" + "\n" + "try {" + "\n" + this.source + "} catch (e) {" + "\n" + "  rethrow(e, __lines, __filename, __line, escapeFn);" + "\n" + "}" + "\n";
          } else {
            src = this.source;
          }
          if (opts.client) {
            src = "escapeFn = escapeFn || " + escapeFn.toString() + ";" + "\n" + src;
            if (opts.compileDebug) {
              src = "rethrow = rethrow || " + rethrow.toString() + ";" + "\n" + src;
            }
          }
          if (opts.strict) {
            src = '"use strict";\n' + src;
          }
          if (opts.debug) {
            console.log(src);
          }
          if (opts.compileDebug && opts.filename) {
            src = src + "\n" + "//# sourceURL=" + sanitizedFilename + "\n";
          }
          try {
            if (opts.async) {
              try {
                ctor = new Function("return (async function(){}).constructor;")();
              } catch (e) {
                if (e instanceof SyntaxError) {
                  throw new Error("This environment does not support async/await");
                } else {
                  throw e;
                }
              }
            } else {
              ctor = Function;
            }
            fn = new ctor(opts.localsName + ", escapeFn, include, rethrow", src);
          } catch (e) {
            if (e instanceof SyntaxError) {
              if (opts.filename) {
                e.message += " in " + opts.filename;
              }
              e.message += " while compiling ejs\n\n";
              e.message += "If the above error is not helpful, you may want to try EJS-Lint:\n";
              e.message += "https://github.com/RyanZim/EJS-Lint";
              if (!opts.async) {
                e.message += "\n";
                e.message += "Or, if you meant to create an async function, pass `async: true` as an option.";
              }
            }
            throw e;
          }
          var returnedFn = opts.client ? fn : function anonymous(data) {
            var include = function (path, includeData) {
              var d = utils.shallowCopy(utils.createNullProtoObjWherePossible(), data);
              if (includeData) {
                d = utils.shallowCopy(d, includeData);
              }
              return includeFile(path, opts)(d);
            };
            return fn.apply(opts.context, [data || utils.createNullProtoObjWherePossible(), escapeFn, include, rethrow]);
          };
          if (opts.filename && typeof Object.defineProperty === "function") {
            var filename = opts.filename;
            var basename = path.basename(filename, path.extname(filename));
            try {
              Object.defineProperty(returnedFn, "name", {
                value: basename,
                writable: false,
                enumerable: false,
                configurable: true
              });
            } catch (e) {}
          }
          return returnedFn;
        },
        generateSource: function () {
          var opts = this.opts;
          if (opts.rmWhitespace) {
            this.templateText = this.templateText.replace(/[\r\n]+/g, "\n").replace(/^\s+|\s+$/gm, "");
          }
          this.templateText = this.templateText.replace(/[ \t]*<%_/gm, "<%_").replace(/_%>[ \t]*/gm, "_%>");
          var self = this;
          var matches = this.parseTemplateText();
          var d = this.opts.delimiter;
          var o = this.opts.openDelimiter;
          var c = this.opts.closeDelimiter;
          if (matches && matches.length) {
            matches.forEach(function (line, index) {
              var closing;
              if (line.indexOf(o + d) === 0 && line.indexOf(o + d + d) !== 0) {
                closing = matches[index + 2];
                if (!(closing == d + c || closing == "-" + d + c || closing == "_" + d + c)) {
                  throw new Error('Could not find matching close tag for "' + line + '".');
                }
              }
              self.scanLine(line);
            });
          }
        },
        parseTemplateText: function () {
          var str = this.templateText;
          var pat = this.regex;
          var result = pat.exec(str);
          var arr = [];
          var firstPos;
          while (result) {
            firstPos = result.index;
            if (firstPos !== 0) {
              arr.push(str.substring(0, firstPos));
              str = str.slice(firstPos);
            }
            arr.push(result[0]);
            str = str.slice(result[0].length);
            result = pat.exec(str);
          }
          if (str) {
            arr.push(str);
          }
          return arr;
        },
        _addOutput: function (line) {
          if (this.truncate) {
            line = line.replace(/^(?:\r\n|\r|\n)/, "");
            this.truncate = false;
          }
          if (!line) {
            return line;
          }
          line = line.replace(/\\/g, "\\\\");
          line = line.replace(/\n/g, "\\n");
          line = line.replace(/\r/g, "\\r");
          line = line.replace(/"/g, '\\"');
          this.source += '    ; __append("' + line + '")' + "\n";
        },
        scanLine: function (line) {
          var self = this;
          var d = this.opts.delimiter;
          var o = this.opts.openDelimiter;
          var c = this.opts.closeDelimiter;
          var newLineCount = 0;
          newLineCount = line.split("\n").length - 1;
          switch (line) {
            case o + d:
            case o + d + "_":
              this.mode = Template.modes.EVAL;
              break;
            case o + d + "=":
              this.mode = Template.modes.ESCAPED;
              break;
            case o + d + "-":
              this.mode = Template.modes.RAW;
              break;
            case o + d + "#":
              this.mode = Template.modes.COMMENT;
              break;
            case o + d + d:
              this.mode = Template.modes.LITERAL;
              this.source += '    ; __append("' + line.replace(o + d + d, o + d) + '")' + "\n";
              break;
            case d + d + c:
              this.mode = Template.modes.LITERAL;
              this.source += '    ; __append("' + line.replace(d + d + c, d + c) + '")' + "\n";
              break;
            case d + c:
            case "-" + d + c:
            case "_" + d + c:
              if (this.mode == Template.modes.LITERAL) {
                this._addOutput(line);
              }
              this.mode = null;
              this.truncate = line.indexOf("-") === 0 || line.indexOf("_") === 0;
              break;
            default:
              if (this.mode) {
                switch (this.mode) {
                  case Template.modes.EVAL:
                  case Template.modes.ESCAPED:
                  case Template.modes.RAW:
                    if (line.lastIndexOf("//") > line.lastIndexOf("\n")) {
                      line += "\n";
                    }
                }
                switch (this.mode) {
                  case Template.modes.EVAL:
                    this.source += "    ; " + line + "\n";
                    break;
                  case Template.modes.ESCAPED:
                    this.source += "    ; __append(escapeFn(" + stripSemi(line) + "))" + "\n";
                    break;
                  case Template.modes.RAW:
                    this.source += "    ; __append(" + stripSemi(line) + ")" + "\n";
                    break;
                  case Template.modes.COMMENT:
                    break;
                  case Template.modes.LITERAL:
                    this._addOutput(line);
                    break;
                }
              } else {
                this._addOutput(line);
              }
          }
          if (self.opts.compileDebug && newLineCount) {
            this.currentLine += newLineCount;
            this.source += "    ; __line = " + this.currentLine + "\n";
          }
        }
      };
      exports.escapeXML = utils.escapeXML;
      exports.__express = exports.renderFile;
      exports.VERSION = _VERSION_STRING;
      exports.name = _NAME;
      if (typeof window != "undefined") {
        window.ejs = exports;
      }
    }, {
      "../package.json": 6,
      "./utils": 2,
      fs: 3,
      path: 4
    }],
    2: [function (require, module, exports) {
      "use strict";

      var regExpChars = /[|\\{}()[\]^$+*?.]/g;
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      var hasOwn = function (obj, key) {
        return hasOwnProperty.apply(obj, [key]);
      };
      exports.escapeRegExpChars = function (string) {
        if (!string) {
          return "";
        }
        return String(string).replace(regExpChars, "\\$&");
      };
      var _ENCODE_HTML_RULES = {
        "&": "&amp;",
        "<": "&lt;",
        ">": "&gt;",
        '"': "&#34;",
        "'": "&#39;"
      };
      var _MATCH_HTML = /[&<>'"]/g;
      function encode_char(c) {
        return _ENCODE_HTML_RULES[c] || c;
      }
      var escapeFuncStr = "var _ENCODE_HTML_RULES = {\n" + '      "&": "&amp;"\n' + '    , "<": "&lt;"\n' + '    , ">": "&gt;"\n' + '    , \'"\': "&#34;"\n' + '    , "\'": "&#39;"\n' + "    }\n" + "  , _MATCH_HTML = /[&<>'\"]/g;\n" + "function encode_char(c) {\n" + "  return _ENCODE_HTML_RULES[c] || c;\n" + "};\n";
      exports.escapeXML = function (markup) {
        return markup == undefined ? "" : String(markup).replace(_MATCH_HTML, encode_char);
      };
      function escapeXMLToString() {
        return Function.prototype.toString.call(this) + ";\n" + escapeFuncStr;
      }
      try {
        if (typeof Object.defineProperty === "function") {
          Object.defineProperty(exports.escapeXML, "toString", {
            value: escapeXMLToString
          });
        } else {
          exports.escapeXML.toString = escapeXMLToString;
        }
      } catch (err) {
        console.warn("Unable to set escapeXML.toString (is the Function prototype frozen?)");
      }
      exports.shallowCopy = function (to, from) {
        from = from || {};
        if (to !== null && to !== undefined) {
          for (var p in from) {
            if (!hasOwn(from, p)) {
              continue;
            }
            if (p === "__proto__" || p === "constructor") {
              continue;
            }
            to[p] = from[p];
          }
        }
        return to;
      };
      exports.shallowCopyFromList = function (to, from, list) {
        list = list || [];
        from = from || {};
        if (to !== null && to !== undefined) {
          for (var i = 0; i < list.length; i++) {
            var p = list[i];
            if (typeof from[p] != "undefined") {
              if (!hasOwn(from, p)) {
                continue;
              }
              if (p === "__proto__" || p === "constructor") {
                continue;
              }
              to[p] = from[p];
            }
          }
        }
        return to;
      };
      exports.cache = {
        _data: {},
        set: function (key, val) {
          this._data[key] = val;
        },
        get: function (key) {
          return this._data[key];
        },
        remove: function (key) {
          delete this._data[key];
        },
        reset: function () {
          this._data = {};
        }
      };
      exports.hyphenToCamel = function (str) {
        return str.replace(/-[a-z]/g, function (match) {
          return match[1].toUpperCase();
        });
      };
      exports.createNullProtoObjWherePossible = function () {
        if (typeof Object.create == "function") {
          return function () {
            return Object.create(null);
          };
        }
        if (!({
          __proto__: null
        } instanceof Object)) {
          return function () {
            return {
              __proto__: null
            };
          };
        }
        return function () {
          return {};
        };
      }();
    }, {}],
    3: [function (require, module, exports) {}, {}],
    4: [function (require, module, exports) {
      (function (process) {
        function normalizeArray(parts, allowAboveRoot) {
          var up = 0;
          for (var i = parts.length - 1; i >= 0; i--) {
            var last = parts[i];
            if (last === ".") {
              parts.splice(i, 1);
            } else if (last === "..") {
              parts.splice(i, 1);
              up++;
            } else if (up) {
              parts.splice(i, 1);
              up--;
            }
          }
          if (allowAboveRoot) {
            for (; up--; up) {
              parts.unshift("..");
            }
          }
          return parts;
        }
        exports.resolve = function () {
          var resolvedPath = "",
            resolvedAbsolute = false;
          for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
            var path = i >= 0 ? arguments[i] : process.cwd();
            if (typeof path !== "string") {
              throw new TypeError("Arguments to path.resolve must be strings");
            } else if (!path) {
              continue;
            }
            resolvedPath = path + "/" + resolvedPath;
            resolvedAbsolute = path.charAt(0) === "/";
          }
          resolvedPath = normalizeArray(filter(resolvedPath.split("/"), function (p) {
            return !!p;
          }), !resolvedAbsolute).join("/");
          return (resolvedAbsolute ? "/" : "") + resolvedPath || ".";
        };
        exports.normalize = function (path) {
          var isAbsolute = exports.isAbsolute(path),
            trailingSlash = substr(path, -1) === "/";
          path = normalizeArray(filter(path.split("/"), function (p) {
            return !!p;
          }), !isAbsolute).join("/");
          if (!path && !isAbsolute) {
            path = ".";
          }
          if (path && trailingSlash) {
            path += "/";
          }
          return (isAbsolute ? "/" : "") + path;
        };
        exports.isAbsolute = function (path) {
          return path.charAt(0) === "/";
        };
        exports.join = function () {
          var paths = Array.prototype.slice.call(arguments, 0);
          return exports.normalize(filter(paths, function (p, index) {
            if (typeof p !== "string") {
              throw new TypeError("Arguments to path.join must be strings");
            }
            return p;
          }).join("/"));
        };
        exports.relative = function (from, to) {
          from = exports.resolve(from).substr(1);
          to = exports.resolve(to).substr(1);
          function trim(arr) {
            var start = 0;
            for (; start < arr.length; start++) {
              if (arr[start] !== "") break;
            }
            var end = arr.length - 1;
            for (; end >= 0; end--) {
              if (arr[end] !== "") break;
            }
            if (start > end) return [];
            return arr.slice(start, end - start + 1);
          }
          var fromParts = trim(from.split("/"));
          var toParts = trim(to.split("/"));
          var length = Math.min(fromParts.length, toParts.length);
          var samePartsLength = length;
          for (var i = 0; i < length; i++) {
            if (fromParts[i] !== toParts[i]) {
              samePartsLength = i;
              break;
            }
          }
          var outputParts = [];
          for (var i = samePartsLength; i < fromParts.length; i++) {
            outputParts.push("..");
          }
          outputParts = outputParts.concat(toParts.slice(samePartsLength));
          return outputParts.join("/");
        };
        exports.sep = "/";
        exports.delimiter = ":";
        exports.dirname = function (path) {
          if (typeof path !== "string") path = path + "";
          if (path.length === 0) return ".";
          var code = path.charCodeAt(0);
          var hasRoot = code === 47;
          var end = -1;
          var matchedSlash = true;
          for (var i = path.length - 1; i >= 1; --i) {
            code = path.charCodeAt(i);
            if (code === 47) {
              if (!matchedSlash) {
                end = i;
                break;
              }
            } else {
              matchedSlash = false;
            }
          }
          if (end === -1) return hasRoot ? "/" : ".";
          if (hasRoot && end === 1) {
            return "/";
          }
          return path.slice(0, end);
        };
        function basename(path) {
          if (typeof path !== "string") path = path + "";
          var start = 0;
          var end = -1;
          var matchedSlash = true;
          var i;
          for (i = path.length - 1; i >= 0; --i) {
            if (path.charCodeAt(i) === 47) {
              if (!matchedSlash) {
                start = i + 1;
                break;
              }
            } else if (end === -1) {
              matchedSlash = false;
              end = i + 1;
            }
          }
          if (end === -1) return "";
          return path.slice(start, end);
        }
        exports.basename = function (path, ext) {
          var f = basename(path);
          if (ext && f.substr(-1 * ext.length) === ext) {
            f = f.substr(0, f.length - ext.length);
          }
          return f;
        };
        exports.extname = function (path) {
          if (typeof path !== "string") path = path + "";
          var startDot = -1;
          var startPart = 0;
          var end = -1;
          var matchedSlash = true;
          var preDotState = 0;
          for (var i = path.length - 1; i >= 0; --i) {
            var code = path.charCodeAt(i);
            if (code === 47) {
              if (!matchedSlash) {
                startPart = i + 1;
                break;
              }
              continue;
            }
            if (end === -1) {
              matchedSlash = false;
              end = i + 1;
            }
            if (code === 46) {
              if (startDot === -1) startDot = i;else if (preDotState !== 1) preDotState = 1;
            } else if (startDot !== -1) {
              preDotState = -1;
            }
          }
          if (startDot === -1 || end === -1 || preDotState === 0 || preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
            return "";
          }
          return path.slice(startDot, end);
        };
        function filter(xs, f) {
          if (xs.filter) return xs.filter(f);
          var res = [];
          for (var i = 0; i < xs.length; i++) {
            if (f(xs[i], i, xs)) res.push(xs[i]);
          }
          return res;
        }
        var substr = "ab".substr(-1) === "b" ? function (str, start, len) {
          return str.substr(start, len);
        } : function (str, start, len) {
          if (start < 0) start = str.length + start;
          return str.substr(start, len);
        };
      }).call(this, require("_process"));
    }, {
      _process: 5
    }],
    5: [function (require, module, exports) {
      var process = module.exports = {};
      var cachedSetTimeout;
      var cachedClearTimeout;
      function defaultSetTimout() {
        throw new Error("setTimeout has not been defined");
      }
      function defaultClearTimeout() {
        throw new Error("clearTimeout has not been defined");
      }
      (function () {
        try {
          if (typeof setTimeout === "function") {
            cachedSetTimeout = setTimeout;
          } else {
            cachedSetTimeout = defaultSetTimout;
          }
        } catch (e) {
          cachedSetTimeout = defaultSetTimout;
        }
        try {
          if (typeof clearTimeout === "function") {
            cachedClearTimeout = clearTimeout;
          } else {
            cachedClearTimeout = defaultClearTimeout;
          }
        } catch (e) {
          cachedClearTimeout = defaultClearTimeout;
        }
      })();
      function runTimeout(fun) {
        if (cachedSetTimeout === setTimeout) {
          return setTimeout(fun, 0);
        }
        if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
          cachedSetTimeout = setTimeout;
          return setTimeout(fun, 0);
        }
        try {
          return cachedSetTimeout(fun, 0);
        } catch (e) {
          try {
            return cachedSetTimeout.call(null, fun, 0);
          } catch (e) {
            return cachedSetTimeout.call(this, fun, 0);
          }
        }
      }
      function runClearTimeout(marker) {
        if (cachedClearTimeout === clearTimeout) {
          return clearTimeout(marker);
        }
        if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
          cachedClearTimeout = clearTimeout;
          return clearTimeout(marker);
        }
        try {
          return cachedClearTimeout(marker);
        } catch (e) {
          try {
            return cachedClearTimeout.call(null, marker);
          } catch (e) {
            return cachedClearTimeout.call(this, marker);
          }
        }
      }
      var queue = [];
      var draining = false;
      var currentQueue;
      var queueIndex = -1;
      function cleanUpNextTick() {
        if (!draining || !currentQueue) {
          return;
        }
        draining = false;
        if (currentQueue.length) {
          queue = currentQueue.concat(queue);
        } else {
          queueIndex = -1;
        }
        if (queue.length) {
          drainQueue();
        }
      }
      function drainQueue() {
        if (draining) {
          return;
        }
        var timeout = runTimeout(cleanUpNextTick);
        draining = true;
        var len = queue.length;
        while (len) {
          currentQueue = queue;
          queue = [];
          while (++queueIndex < len) {
            if (currentQueue) {
              currentQueue[queueIndex].run();
            }
          }
          queueIndex = -1;
          len = queue.length;
        }
        currentQueue = null;
        draining = false;
        runClearTimeout(timeout);
      }
      process.nextTick = function (fun) {
        var args = new Array(arguments.length - 1);
        if (arguments.length > 1) {
          for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
          }
        }
        queue.push(new Item(fun, args));
        if (queue.length === 1 && !draining) {
          runTimeout(drainQueue);
        }
      };
      function Item(fun, array) {
        this.fun = fun;
        this.array = array;
      }
      Item.prototype.run = function () {
        this.fun.apply(null, this.array);
      };
      process.title = "browser";
      process.browser = true;
      process.env = {};
      process.argv = [];
      process.version = "";
      process.versions = {};
      function noop() {}
      process.on = noop;
      process.addListener = noop;
      process.once = noop;
      process.off = noop;
      process.removeListener = noop;
      process.removeAllListeners = noop;
      process.emit = noop;
      process.prependListener = noop;
      process.prependOnceListener = noop;
      process.listeners = function (name) {
        return [];
      };
      process.binding = function (name) {
        throw new Error("process.binding is not supported");
      };
      process.cwd = function () {
        return "/";
      };
      process.chdir = function (dir) {
        throw new Error("process.chdir is not supported");
      };
      process.umask = function () {
        return 0;
      };
    }, {}],
    6: [function (require, module, exports) {
      module.exports = {
        name: "ejs",
        description: "Embedded JavaScript templates",
        keywords: ["template", "engine", "ejs"],
        version: "3.1.8",
        author: "Matthew Eernisse <mde@fleegix.org> (http://fleegix.org)",
        license: "Apache-2.0",
        bin: {
          ejs: "./bin/cli.js"
        },
        main: "./lib/ejs.js",
        jsdelivr: "ejs.min.js",
        unpkg: "ejs.min.js",
        repository: {
          type: "git",
          url: "git://github.com/mde/ejs.git"
        },
        bugs: "https://github.com/mde/ejs/issues",
        homepage: "https://github.com/mde/ejs",
        dependencies: {
          jake: "^10.8.5"
        },
        devDependencies: {
          browserify: "^16.5.1",
          eslint: "^6.8.0",
          "git-directory-deploy": "^1.5.1",
          jsdoc: "^4.0.2",
          "lru-cache": "^4.0.1",
          mocha: "^10.2.0",
          "uglify-js": "^3.3.16"
        },
        engines: {
          node: ">=0.10.0"
        },
        scripts: {
          test: "mocha -u tdd"
        }
      };
    }, {}]
  }, {}, [1])(1);
});

var tpl = Object.create(null);
tpl['table-columns-footer.html'] = '<tr> <% $.each(columns, function(key, column) { %> <td<%- column.attr%>><%- column.content %></td> <% }); %> </tr>';
tpl['table-columns-header.html'] = '<tr class="fw-medium bg-white"> <% $.each(columns, function(key, column) { %> <td<%- column.attr%>><%- column.content %></td> <% }); %> </tr>';
tpl['table-columns.html'] = '<tr class="fw-medium bg-white"> <% $.each(columns, function(key, column) { %> <td<%- column.attr%>> <%- column.label %> <% if (column.description) { %> <small class="bi bi-question-circle text-body-secondary coreui-table__cursor_help" title="<%= column.description %>"></small> <% } %> <% if (column.sortable === \'asc\') { %> <i class="bi bi-sort-down-alt"></i> <% } else if (column.sortable === \'desc\') { %> <i class="bi bi-sort-down"></i> <% } %> </td> <% }); %> </tr>';
tpl['table-control.html'] = '<div id="coreui-table-control-<%= id %>" class="coreui-table__control"></div>';
tpl['table-controls-footer-out.html'] = ' <div class="coreui-table__footer d-flex justify-content-between"> <% if (controlsLeft.length) { %> <div class="coreui-table__controls coreui-table__controls_left d-flex justify-content-start gap-2 flex-wrap flex-fill mb-1 mt-2 align-items-center"></div> <% } %> <% if (controlsCenter.length) { %> <div class="coreui-table__controls coreui-table__controls_center d-flex justify-content-center gap-2 flex-wrap flex-fill mb-1 mt-2 align-items-center"></div> <% } %> <% if (controlsRight.length) { %> <div class="coreui-table__controls coreui-table__controls_right d-flex justify-content-end gap-2 flex-wrap flex-fill mb-1 mt-2 align-items-center"></div> <% } %> </div>';
tpl['table-controls-footer.html'] = ' <div class="coreui-table__footer ps-1 pe-1 d-flex justify-content-between border-top border-secondary-subtle"> <% if (controlsLeft.length) { %> <div class="coreui-table__controls coreui-table__controls_left d-flex justify-content-start gap-2 flex-wrap flex-fill mb-1 mt-1 align-items-center"></div> <% } %> <% if (controlsCenter.length) { %> <div class="coreui-table__controls coreui-table__controls_center d-flex justify-content-center gap-2 flex-wrap flex-fill mb-1 mt-1 align-items-center"></div> <% } %> <% if (controlsRight.length) { %> <div class="coreui-table__controls coreui-table__controls_right d-flex justify-content-end gap-2 flex-wrap flex-fill mb-1 mt-1 align-items-center"></div> <% } %> </div>';
tpl['table-controls-header-out.html'] = ' <div class="coreui-table__header d-flex justify-content-between"> <% if (controlsLeft.length) { %> <div class="coreui-table__controls coreui-table__controls_left d-flex justify-content-start gap-2 flex-wrap flex-fill mb-2 mt-1 align-items-center"></div> <% } %> <% if (controlsCenter.length) { %> <div class="coreui-table__controls coreui-table__controls_center d-flex justify-content-center gap-2 flex-wrap flex-fill mb-2 mt-1 align-items-center"></div> <% } %> <% if (controlsRight.length) { %> <div class="coreui-table__controls coreui-table__controls_right d-flex justify-content-end gap-2 flex-wrap flex-fill mb-2 mt-1 align-items-center"></div> <% } %> </div>';
tpl['table-controls-header.html'] = ' <div class="coreui-table__header ps-1 pe-1 d-flex justify-content-between border-bottom border-secondary-subtle"> <% if (controlsLeft.length) { %> <div class="coreui-table__controls coreui-table__controls_left d-flex justify-content-start gap-2 flex-wrap flex-fill my-1 align-items-center"></div> <% } %> <% if (controlsCenter.length) { %> <div class="coreui-table__controls coreui-table__controls_center d-flex justify-content-center gap-2 flex-wrap flex-fill my-1 align-items-center"></div> <% } %> <% if (controlsRight.length) { %> <div class="coreui-table__controls coreui-table__controls_right d-flex justify-content-end gap-2 flex-wrap flex-fill my-1 align-items-center"></div> <% } %> </div>';
tpl['table-loader.html'] = '<div class="coreui-table-lock position-absolute w-100 top-0 bottom-0"> <div class="coreui-table-block bg-secondary-subtle position-absolute opacity-50 w-100 top-0 bottom-0"></div> <div class="coreui-table-message position-relative d-flex align-content-center justify-content-start gap-2 mt-3 py-1 px-2 m-auto border border-secondary-subtle rounded-3 bg-body-secondary"> <div class="spinner-border text-secondary align-self-center"></div> <span class="lh-lg"><%= lang.loading %></span> </div> </div>';
tpl['table-record-expand.html'] = '<tr class="coreui-table__record-expanded" style="display: none"> <td colspan="<%= colspan %>"></td> </tr>';
tpl['table-record-group.html'] = '<tr<%- attr %>> <td colspan="<%= colspan %>"></td> </tr>';
tpl['table-record.html'] = '<tr<%- record.attr %> data-record-index="<%= record.index %>"> <% $.each(record.fields, function(key2, field) { %> <td<%- field.attr %>></td> <% }); %> </tr>';
tpl['table-records-empty.html'] = '<tr> <td class="text-center" colspan="<%= columnsCount %>"><%= lang.emptyRecords %></td> </tr>';
tpl['table-wrapper.html'] = ' <div id="coreui-table-<%= id %>" class="coreui-table"<% if (widthSizes) { %> style="<%= widthSizes.join(\';\') %>"<% } %>> <div class="coreui-table__container position-relative"> <div class="coreui-table__wrapper<% if (overflow) { %> overflow-x-auto<% } %>" <% if (heightSizes) { %>style="<%= heightSizes.join(\';\') %>"<% } %>></div> </div> </div>';
tpl['table.html'] = ' <table class="table <%= classes %> mb-0"> <colgroup> <% $.each(colGroups, function(key, columnGroup) { %> <col<% if (columnGroup.style) { %> style="<%= columnGroup.style %>"<% } %>/> <% }); %> </colgroup> <% if (columnHeaders) { %> <thead<% if (theadAttr) { %> <%- theadAttr %>"<% } %>> <%- columnGroupsHeader %> <%- columns %> </thead> <% } %> <tbody></tbody> <% if (columnGroupsFooter != \'\') { %> <tfoot> <%- columnGroupsFooter %> </tfoot> <% } %> </table>';
tpl['columns/badge.html'] = '<span class="badge text-bg-<%= type %>"><%= text %></span>';
tpl['columns/button.html'] = '<button type="button"<%- attr %>><%- content %></button>';
tpl['columns/link.html'] = '<a <%- attr %>><%- content %></a>';
tpl['columns/menu.html'] = ' <div class="btn-group" role="group"> <button type="button" data-bs-toggle="dropdown" <%- attr %>> <%- content %> </button> <ul class="dropdown-menu dropdown-menu-<%= position %>"> <% $.each(items, function(key, item) { %> <% if (item.type === \'link\') { %> <li><a href="<%= item.link %>"<%- item.attr %>><%= item.content %></a></li> <% } else if (item.type === \'button\') { %> <li> <button type="button" id="btn-dropdown-<%= item.id %>"<%- item.attr %>> <%- item.content %> </button> </li> <% } else if (item.type === \'divider\') { %> <li><hr class="dropdown-divider"></li> <% } else if (item.type === \'header\') { %> <li><h6 class="dropdown-header"><%= item.content %></h6></li> <% } %> <% }) %> </ul> </div>';
tpl['columns/select.html'] = '<input class="coreui-table__select form-check-input" type="checkbox" value="<%= index %>">';
tpl['columns/select_label.html'] = '<input class="coreui-table__select-all form-check-input" type="checkbox" value="">';
tpl['columns/switch.html'] = '<div class="form-switch"> <input class="form-check-input coreui-table__switch" type="checkbox" data-field="<%= field %>" value="record.index"<% if (checked) { %> checked<% } %><% if (disabled) { %> disabled<% } %>> </div>';
tpl['filters/checkbox.html'] = ' <div class="btn-group"> <% if (label) { %> <span class="input-group-text"><%= label %></span> <% } %> <% $.each(items, function(key, item) { %> <input type="checkbox" class="btn-check" autocomplete="off" id="<%= (field + key) %>" name="<%= field %>" value="<%= item.value %>" <%= item.checked ? \' checked\' : \'\' %>> <label class="<%= item.class %>" for="<%= (field + key) %>"><%= item.text %></label> <% }); %> </div>';
tpl['filters/clear.html'] = ' <button type="button" <%- attr %>><%- content %></button>';
tpl['filters/date.html'] = ' <div class="input-group"> <% if (label) { %> <span class="input-group-text"><%= label %></span> <% } %> <input type="date" <%- attr %>> </div>';
tpl['filters/datetime.html'] = ' <div class="input-group"> <% if (label) { %> <span class="input-group-text"><%= label %></span> <% } %> <input type="datetime-local" <%- attr %>> </div>';
tpl['filters/datetime_range.html'] = ' <div class="input-group"> <% if (label) { %> <span class="input-group-text"><%= label %></span> <% } %> <input type="datetime-local" <%- startAttr %>> <input type="datetime-local" <%- endAttr %>> </div>';
tpl['filters/date_month.html'] = ' <div class="input-group"> <% if (label) { %> <span class="input-group-text"><%= label %></span> <% } %> <input type="month" <%- attr %>> </div>';
tpl['filters/date_range.html'] = ' <div class="input-group"> <% if (label) { %> <span class="input-group-text"><%= label %></span> <% } %> <input type="date" <%- startAttr %>> <input type="date" <%- endAttr %>> </div>';
tpl['filters/number.html'] = ' <div class="input-group"> <% if (label) { %> <span class="input-group-text"><%= label %></span> <% } %> <input type="number" <%- attrStart %>> <input type="number" <%- attrEnd %>> <button type="button" <%- btnAttr %>> <%- btnContent %> </button> </div>';
tpl['filters/radio.html'] = ' <div class="btn-group"> <% if (label) { %> <span class="input-group-text"><%= label %></span> <% } %> <% $.each(items, function(key, item) { %> <input type="radio" class="btn-check" autocomplete="off" id="<%= (field + key) %>" name="<%= field %>" value="<%= item.value %>" <%= item.checked ? \' checked\' : \'\' %>> <label class="<%= item.class %>" for="<%= (field + key) %>"><%= item.text %></label> <% }); %> </div>';
tpl['filters/select.html'] = '<div class="input-group"> <% if (label) { %> <span class="input-group-text"><%= label %></span> <% } %> <select <%- attr %>> <option>--</option> <% $.each(options, function(key, option) { %> <% if (option.type === \'group\') { %> <optgroup<%- option.attr %>/> <% $.each(option.options, function(key, groupOption) { %> <option <%- groupOption.attr %>/><%= groupOption.text %></option> <% }); %> </optgroup> <% } else { %> <option <%- option.attr %>/><%= option.text %></option> <% } %> <% }); %> </select> </div>';
tpl['filters/switch.html'] = '<div class="form-check form-switch"> <input class="form-check-input" type="checkbox" id="<%= (field + id) %>" name="<%= field %>" value="<%= valueY %>" <%= checked ? \' checked\' : \'\' %>> <% if (label != \'\') { %> <label class="form-check-label" for="<%= (field + id) %>"><%= label %></label> <% } %> </div>';
tpl['filters/text.html'] = ' <div class="input-group"> <% if (label) { %> <span class="input-group-text"><%= label %></span> <% } %> <input type="text" <%- attr %>> <button type="button" <%- btnAttr %>> <%- btnContent %> </button> </div>';
tpl['controls/button.html'] = '<button type="button"<%- attr %>><%- content %></button>';
tpl['controls/button_group.html'] = ' <div class="btn-group" role="group"> <% $.each(buttons, function(key, button) { %> <% if (button.type === \'link\') { %> <a href="<%= button.link %>"<%- button.attr %>><%= button.content %></a> <% } else if (button.type === \'button\') { %> <button type="button" id="btn-<%= button.id %>"<%- button.attr %>> <%= button.content %> </button> <% } else if (button.type === \'dropdown\') { %> <div class="btn-group" role="group"> <button type="button" data-bs-toggle="dropdown"<%- button.attr %>> <%- button.content %> </button> <ul class="dropdown-menu dropdown-menu-<%= button.position %>"> <% $.each(button.items, function(key, item) { %> <% if (item.type === \'link\') { %> <li><a class="dropdown-item" href="<%= item.link %>"><%= item.content %></a></li> <% } else if (item.type === \'button\') { %> <li> <button type="button" class="dropdown-item" id="btn-dropdown-<%= item.id %>"> <%= item.content %> </button> </li> <% } else if (item.type === \'divider\') { %> <li><hr class="dropdown-divider"></li> <% } %> <% }) %> </ul> </div> <% } %> <% }) %> </div>';
tpl['controls/caption.html'] = '<div class="d-flex flex-column me-3"> <small class="text-body-secondary fw-medium"> <%= title %> <% if (description) { %> <i class="bi bi-question-circle coreui-table__cursor_help" title="<%= description %>"></i> <% } %> </small> <b class="text-nowrap"><%= value %></b> </div>';
tpl['controls/columns-container.html'] = ' <div class="coreui-table__columns px-3 pt-3 pb-4"> <div class="mb-3"> <div class="form-check coreui-table__check_all"> <label class="form-check-label"> <input class="form-check-input" type="checkbox" <% if (showAll === true) { %>checked<% } %>> <%= lang.all %> </label> </div> <% $.each(columns, function(key, column) { %> <div class="form-check coreui-table_check-column"> <label class="form-check-label"> <input class="form-check-input" type="checkbox" value="<%= column.field %>" <% if (column.show === true) { %>checked<% } %>> <%= column.label %> </label> </div> <% }); %> </div> <button type="button" <%- btnCompleteAttr %>> <%- btnCompleteContent %> </button> </div>';
tpl['controls/columns.html'] = '<button type="button"<%- btnAttr %>><%-btnContent%></button>';
tpl['controls/dropdown.html'] = ' <div class="btn-group" role="group"> <button type="button" data-bs-toggle="dropdown"<%- attr %>> <%- content %> </button> <ul class="dropdown-menu dropdown-menu-<%= position %>"> <% $.each(items, function(key, item) { %> <% if (item.type === \'link\') { %> <li><a class="dropdown-item" href="<%= item.link %>"><%= item.content %></a></li> <% } else if (item.type === \'button\') { %> <li> <button type="button" class="dropdown-item" id="btn-dropdown-<%= item.id %>"> <%= item.content %> </button> </li> <% } else if (item.type === \'divider\') { %> <li><hr class="dropdown-divider"></li> <% } %> <% }) %> </ul> </div>';
tpl['controls/link.html'] = '<a href="<%- href %>"<%- attr %>><%- content %></a>';
tpl['controls/page-jump.html'] = ' <div class="coreui-table__page_jump_container"> <div <%- attr %>> <input type="number" class="form-control border-secondary-subtle" min="1"> <button class="btn btn-outline-secondary border-secondary-subtle" type="button"> <i class="bi bi-chevron-compact-right"></i> </button> </div> </div>';
tpl['controls/page-size.html'] = ' <select <%- attr %>> <% $.each(recordsPerPageList, function(key, count) { %> <option value="<%= count %>"<% if (recordsPerPage == count) { %>selected<% } %>> <% if (count == \'0\') { %><%= lang.all %><% } else { %><%= count %><% } %> </option> <% }); %> </select>';
tpl['controls/pages.html'] = ' <nav> <ul <%- attr %>> <% if (showPrev) { %> <li class="page-item coreui-table__page_prev <% if ( ! isActivePrev) { %> disabled<% } %>"> <button type="button" class="page-link text-secondary"> <i class="bi bi-chevron-left"></i> </button> </li> <% } %> <% if (showPageFirst) { %> <li class="page-item"> <button type="button" class="page-link text-secondary coreui-table__page"> 1 </button> </li> <% } %> <% if (showDividerStart) { %> <li class="page-item disabled"> <span class="page-link text-secondary px-1">...</span> </li> <% } %> <% $.each(pages, function(key, page) { %> <% if (page == currentPage) { %> <li class="page-item"> <span class="page-link"><%= page %></span> </li> <% } else { %> <li class="page-item"> <button type="button" class="page-link text-secondary coreui-table__page"> <%= page %> </button> </li> <% } %> <% }); %> <% if (showDividerEnd) { %> <li class="page-item disabled"> <span class="page-link text-secondary px-1">...</span> </li> <% } %> <% if (showPageLast) { %> <li class="page-item"> <button type="button" class="page-link text-secondary coreui-table__page"> <%= pagesTotal %> </button> </li> <% } %> <% if (showNext) { %> <li class="page-item coreui-table__page_next<% if ( ! isActiveNext) { %> disabled<% } %>"> <button type="button" class="page-link text-secondary"> <i class="bi bi-chevron-right"></i> </button> </li> <% } %> </ul> </nav>';
tpl['controls/search-clear.html'] = ' <button type="button" <%- attr %>> <%- content %> </button> ';
tpl['controls/search-container.html'] = ' <div class="coreui-table__search px-3 pt-3 pb-4"> <div class="mb-3"> <% $.each(controls, function(key, control) { %> <div class="mb-2 d-flex flex-column flex-md-row "> <label class="col-form-label fw-medium text-start text-md-end pe-2" style="min-width:<%= labelWidth %>;width:<%= labelWidth %>"> <%= control.label %> <% if (control.description) { %> <div class="text-muted fw-normal"> <small><%= control.description %></small> </div> <% } %> </label> <div class="flex-fill search-control-<%= control.id %>"> <%- control.content %> <% if (control.prefix) { %> <%= control.prefix %> <% } %> </div> </div> <% }); %> </div> <div class="d-flex flex-sm-wrap flex-md-nowrap"> <div class="d-none d-md-block" style="width:<%= labelWidth %>;min-width:<%= labelWidth %>"></div> <div class="d-flex justify-content-start flex-wrap gap-2"> <button type="button" <%- btnCompleteAttr %>> <%- btnCompleteContent %> </button> </div> </div> </div>';
tpl['controls/search.html'] = '<div class="btn-group"> <button type="button"<%- btnAttr %>><%- btnContent %></button> <%- btnClear %> </div> ';
tpl['controls/total.html'] = '<div <%- attr %>> <small><%= lang.total %>: <span class="coreui-table__count-total"><%= recordsTotal %></span></small> </div>';
tpl['search/checkbox.html'] = ' <% $.each(options, function(key, option) { %> <div class="form-check"> <label class="form-check-label"> <input class="form-check-input" type="checkbox" name="<%= field %>" value="<%- option.value %>" <%= option.checked ? \' checked\' : \'\' %>> <%= option.text %> </label> </div> <% }); %>';
tpl['search/date.html'] = ' <input type="date" <%- attr %>>';
tpl['search/datetime.html'] = ' <input type="datetime-local" <%- attr %>>';
tpl['search/datetime_range.html'] = ' <input type="datetime-local" <%- startAttr %>> <input type="datetime-local" <%- endAttr %>>';
tpl['search/date_month.html'] = ' <input type="month" <%- attr %>>';
tpl['search/date_range.html'] = ' <input type="date" <%- startAttr %>> <input type="date" <%- endAttr %>>';
tpl['search/number.html'] = ' <input type="number" <%- startAttr %>> <input type="number" <%- endAttr %>>';
tpl['search/radio.html'] = '<div class="form-check"> <label class="form-check-label"> <input class="form-check-input" type="radio" name="<%= field %>" value=""<%= checkedAll ? \' checked\' : \'\' %>> <%= lang.all %> </label> </div> <% $.each(options, function(key, option) { %> <div class="form-check"> <label class="form-check-label"> <input class="form-check-input" type="radio" name="<%= field %>" value="<%- option.value %>" <%= option.checked ? \' checked\' : \'\' %>> <%= option.text %> </label> </div> <% }); %>';
tpl['search/select.html'] = ' <select <%- attr %>> <option>--</option> <% $.each(options, function(key, option) { %> <% if (option.type === \'group\') { %> <optgroup<%- option.attr %>/> <% $.each(option.options, function(key, groupOption) { %> <option <%- groupOption.attr %>/><%= groupOption.text %></option> <% }); %> </optgroup> <% } else { %> <option <%- option.attr %>/><%= option.text %></option> <% } %> <% }); %> </select>';
tpl['search/switch.html'] = '<div class="form-check form-switch pt-2"> <input class="form-check-input" type="checkbox" id="<%= (field + id) %>" name="<%= field %>" value="<%= valueY %>" <%= checked ? \' checked\' : \'\' %>> </div>';
tpl['search/text.html'] = ' <input type="text" <%- attr %>>';

var coreuiTableUtils = {
  /**
   * Объединение атрибутов
   * @param attr1
   * @param attr2
   * @returns {object}
   */
  mergeAttr: function mergeAttr(attr1, attr2) {
    var mergeAttr = Object.assign({}, attr1);
    if (_typeof(attr2) === 'object') {
      $.each(attr2, function (name, value) {
        if (mergeAttr.hasOwnProperty(name)) {
          if (name === 'class') {
            mergeAttr[name] += ' ' + value;
          } else if (name === 'style') {
            mergeAttr[name] += ';' + value;
          } else {
            mergeAttr[name] = value;
          }
        } else {
          mergeAttr[name] = value;
        }
      });
    }
    return mergeAttr;
  },
  /**
   * Проверка на число
   * @param num
   * @returns {boolean}
   * @private
   */
  isNumeric: function isNumeric(num) {
    return (typeof num === 'number' || typeof num === "string" && num.trim() !== '') && !isNaN(num);
  },
  /**
   * @returns {string}
   * @private
   */
  hashCode: function hashCode() {
    return this.crc32((new Date().getTime() + Math.random()).toString()).toString(16);
  },
  /**
   * Проверка на объект
   * @param value
   */
  isObject: function isObject(value) {
    return _typeof(value) === 'object' && !Array.isArray(value) && value !== null;
  },
  /**
   * @param str
   * @returns {number}
   * @private
   */
  crc32: function crc32(str) {
    for (var a, o = [], c = 0; c < 256; c++) {
      a = c;
      for (var f = 0; f < 8; f++) {
        a = 1 & a ? 3988292384 ^ a >>> 1 : a >>> 1;
      }
      o[c] = a;
    }
    for (var n = -1, t = 0; t < str.length; t++) {
      n = n >>> 8 ^ o[255 & (n ^ str.charCodeAt(t))];
    }
    return (-1 ^ n) >>> 0;
  }
};

var coreuiTableRender = {
  /**
   * Сборка таблицы
   * @param {object} table
   * @private
   */
  renderTable: function renderTable(table) {
    var options = table.getOptions();
    var recordsElements = [];
    var columnGroupsHeader = '';
    var columnGroupsFooter = '';
    var colGroups = [];
    var columns = [];

    // Колонки
    if (table._columns.length > 0) {
      $.each(table._columns, function (key, column) {
        if (!column.isShow()) {
          return;
        }
        var columnOptions = column.getOptions();
        var attributes = [];
        var sortable = null;
        if (columnOptions.hasOwnProperty('field') && typeof columnOptions.field === 'string') {
          columnOptions.attrHeader = coreuiTableUtils.mergeAttr(columnOptions.attrHeader, {
            "data-field": columnOptions.field
          });
        }
        if (columnOptions.hasOwnProperty('fixed') && typeof columnOptions.fixed === 'string') {
          columnOptions.attrHeader = coreuiTableUtils.mergeAttr(columnOptions.attrHeader, {
            "class": 'coreui-table__fixed_' + columnOptions.fixed
          });
          columnOptions.attr = coreuiTableUtils.mergeAttr(columnOptions.attr, {
            "class": 'coreui-table__fixed_' + columnOptions.fixed
          });
        }
        if (columnOptions.type !== 'numbers') {
          if (columnOptions.hasOwnProperty('sortable') && columnOptions.sortable) {
            columnOptions.attrHeader = coreuiTableUtils.mergeAttr(columnOptions.attrHeader, {
              "class": 'coreui-table__sortable'
            });
          }
          if (table._sort.length > 0 && columnOptions.hasOwnProperty('field') && typeof columnOptions.field === 'string' && columnOptions.field) {
            $.each(table._sort, function (key, sortField) {
              if (columnOptions.field === sortField.field) {
                if (sortField.order === 'asc') {
                  sortable = 'asc';
                } else if (sortField.order === 'desc') {
                  sortable = 'desc';
                }
                return false;
              }
            });
          }
        }
        if (columnOptions.attrHeader && coreuiTableUtils.isObject(columnOptions.attrHeader)) {
          $.each(columnOptions.attrHeader, function (name, value) {
            attributes.push(name + '="' + value + '"');
          });
        }
        var style = [];
        if (columnOptions.hasOwnProperty('width') && ['string', 'number'].indexOf(_typeof(columnOptions.width)) >= 0) {
          var unit = typeof columnOptions.width === 'number' ? 'px' : '';
          style.push('width:' + columnOptions.width + unit);
        }
        if (columnOptions.hasOwnProperty('minWidth') && ['string', 'number'].indexOf(_typeof(columnOptions.minWidth)) >= 0) {
          var _unit = typeof columnOptions.minWidth === 'number' ? 'px' : '';
          style.push('min-width:' + columnOptions.minWidth + _unit);
        }
        if (columnOptions.hasOwnProperty('maxWidth') && ['string', 'number'].indexOf(_typeof(columnOptions.maxWidth)) >= 0) {
          var _unit2 = typeof columnOptions.maxWidth === 'number' ? 'px' : '';
          style.push('max-width:' + columnOptions.maxWidth + _unit2);
        }
        colGroups.push({
          style: style.length > 0 ? style.join(';') : ''
        });
        columns.push({
          attr: attributes.length > 0 ? ' ' + attributes.join(' ') : '',
          label: columnOptions.hasOwnProperty('label') ? columnOptions.label : "",
          description: columnOptions.hasOwnProperty('description') ? columnOptions.description : '',
          sortable: sortable
        });
      });
    }

    // Строки
    if (!table._isRecordsRequest) {
      if (table._records.length > 0) {
        table._recordsTotal = table.getRecordsCount();
        table._recordsNumber = table._page === 1 ? 1 : (table._page - 1) * table._recordsPerPage + 1;
        recordsElements = coreuiTableRender.renderRecords(table, table._records);
      } else {
        recordsElements = coreuiTableRender.renderRecords(table, []);
      }
    }
    if (options.hasOwnProperty('columnGroupsHeader') && Array.isArray(options.columnGroupsHeader) && options.columnGroupsHeader.length > 0) {
      var rows = [];
      $.each(options.columnGroupsHeader, function (key, headerRow) {
        if (Array.isArray(headerRow)) {
          var cells = [];
          $.each(headerRow, function (key, headerColumn) {
            if (coreuiTableUtils.isObject(headerColumn)) {
              var attributes = [];
              if (headerColumn.hasOwnProperty('attr') && coreuiTableUtils.isObject(headerColumn.attr)) {
                $.each(headerColumn.attr, function (name, value) {
                  attributes.push(name + '="' + value + '"');
                });
              }
              cells.push({
                content: headerColumn.hasOwnProperty('content') ? headerColumn.content : '',
                description: headerColumn.hasOwnProperty('description') ? headerColumn.description : '',
                attr: attributes.length > 0 ? ' ' + attributes.join(' ') : ''
              });
            }
          });
          rows.push(ejs.render(tpl['table-columns-header.html'], {
            columns: cells
          }));
        }
      });
      columnGroupsHeader = rows.join('');
    }
    if (options.hasOwnProperty('columnGroupsFooter') && Array.isArray(options.columnGroupsFooter) && options.columnGroupsFooter.length > 0) {
      var _rows = [];
      $.each(options.columnGroupsFooter, function (key, footerRow) {
        if (Array.isArray(footerRow)) {
          var cells = [];
          $.each(footerRow, function (key, footerColumn) {
            if (coreuiTableUtils.isObject(footerColumn)) {
              var attributes = [];
              if (footerColumn.hasOwnProperty('attr') && coreuiTableUtils.isObject(footerColumn.attr)) {
                $.each(footerColumn.attr, function (name, value) {
                  attributes.push(name + '="' + value + '"');
                });
              }
              cells.push({
                content: footerColumn.hasOwnProperty('content') ? footerColumn.content : '',
                description: footerColumn.hasOwnProperty('description') ? footerColumn.description : '',
                attr: attributes.length > 0 ? ' ' + attributes.join(' ') : ''
              });
            }
          });
          _rows.push(ejs.render(tpl['table-columns-footer.html'], {
            columns: cells
          }));
        }
      });
      columnGroupsFooter = _rows.join('');
    }
    var classes = [];
    if (typeof options["class"] === 'string' && options["class"]) {
      classes.push(options["class"]);
    }
    if (!columnGroupsFooter) {
      classes.push('empty-tfoot');
    }
    var htmlColumns = ejs.render(tpl['table-columns.html'], {
      columns: columns
    });
    var theadAttr = [];
    if (options.hasOwnProperty('theadTop') && ['string', 'number'].indexOf(_typeof(options.theadTop)) >= 0 && options.theadTop > 0) {
      var unit = coreuiTableUtils.isNumeric(options.theadTop) ? 'px' : '';
      theadAttr.push('style="top:' + options.theadTop + unit + '"');
    }
    var tableElement = $(ejs.render(tpl['table.html'], {
      classes: classes.join(' '),
      theadAttr: theadAttr.length > 0 ? theadAttr.join(' ') : '',
      columnHeaders: options.columnHeaders,
      columnGroupsHeader: columnGroupsHeader,
      colGroups: colGroups,
      columns: htmlColumns,
      columnGroupsFooter: columnGroupsFooter
    }));
    var tbody = tableElement.find('tbody');
    $.each(recordsElements, function (key, recordElement) {
      tbody.append(recordElement);
    });
    return tableElement;
  },
  /**
   * Сборка записей таблицы
   * @param {object} table
   * @param {Array}  records
   * @return {Array}
   */
  renderRecords: function renderRecords(table, records) {
    var renderRecords = [];
    if (records.length > 0) {
      var that = this;
      var options = table.getOptions();
      var group = options.hasOwnProperty('group') && coreuiTableUtils.isObject(options.group) && options.group.hasOwnProperty('field') && typeof options.group.field === 'string' && options.group.field ? options.group : null;
      var groupValue = null;
      $.each(records, function (key, record) {
        if (record.show) {
          if (group && record.data.hasOwnProperty(group.field) && ['string', 'number'].indexOf(_typeof(record.data[group.field])) >= 0 && groupValue != record.data[group.field]) {
            groupValue = record.data[group.field];
            renderRecords.push(that.renderGroup(table, group, record));
          }
          renderRecords.push(that.renderRecord(table, record));
          table._recordsNumber++;
        }
      });
    }
    if (renderRecords.length === 0) {
      renderRecords = [$(ejs.render(tpl['table-records-empty.html'], {
        columnsCount: table._countColumnsShow,
        lang: table.getLang()
      }))];
    }
    return renderRecords;
  },
  /**
   * Сборка записи таблицы
   * @param {object} table
   * @param {object} record
   * @returns {{ attr: (string), fields: (object) }}}
   * @private
   */
  renderRecord: function renderRecord(table, record) {
    var that = this;
    var options = table.getOptions();
    var fields = [];
    var recordAttr = {
      "class": 'coreui-table__record'
    };
    record = $.extend(true, {}, record);
    $.each(table._columns, function (key, column) {
      if (!column.isShow()) {
        return;
      }
      var field = that.renderField(table, column, record);
      if (field) {
        fields.push(field);
      }
    });
    if (typeof options.onClickUrl === 'string' && options.onClickUrl) {
      recordAttr["class"] += ' coreui-table_pointer';
    }
    if (record.meta) {
      recordAttr = coreuiTableUtils.mergeAttr(recordAttr, record.meta.attr);
    }
    var attributes = [];
    $.each(recordAttr, function (name, value) {
      attributes.push(name + '="' + value + '"');
    });
    var recordElement = $(ejs.render(tpl['table-record.html'], {
      record: {
        attr: attributes.length > 0 ? ' ' + attributes.join(' ') : '',
        index: record.index,
        fields: fields
      }
    }));
    $.each(fields, function (key, field) {
      recordElement.find(' > td:eq(' + key + ')').html(field.content);
    });
    return recordElement;
  },
  /**
   * Сборка ячейки таблицы
   * @param {object} table
   * @param {object} column
   * @param {object} record
   * @returns {{ attr: (string), content: (string) }}
   * @private
   */
  renderField: function renderField(table, column, record) {
    var columnOptions = column.getOptions();
    var columnField = typeof columnOptions.field === 'string' ? columnOptions.field : null;
    var content = null;
    var fieldProps = record.meta && record.meta.hasOwnProperty('fields') && record.meta.fields.hasOwnProperty(columnField) ? record.meta.fields[columnField] : null;
    var fieldAttr = columnOptions.hasOwnProperty('attr') && coreuiTableUtils.isObject(columnOptions.attr) ? columnOptions.attr : {};
    if (fieldProps && coreuiTableUtils.isObject(fieldProps)) {
      if (fieldProps && fieldProps.hasOwnProperty('show') && !fieldProps.show) {
        return null;
      }
      if (coreuiTableUtils.isObject(fieldProps.attr)) {
        fieldAttr = coreuiTableUtils.mergeAttr(fieldAttr, fieldProps.attr);
      }
    }
    if (columnOptions.hasOwnProperty('fixed') && typeof columnOptions.fixed === 'string') {
      fieldAttr = coreuiTableUtils.mergeAttr(fieldAttr, {
        "class": 'coreui-table__fixed_' + columnOptions.fixed
      });
    }
    if (typeof columnOptions.render === 'function') {
      content = columnOptions.render({
        data: record.data,
        meta: record.meta,
        index: record.index
      }, table);
    } else {
      content = columnField && record.data.hasOwnProperty(columnField) ? record.data[columnField] : null;
    }
    content = column.render(content, record);
    var fieldAttrResult = [];
    $.each(fieldAttr, function (name, value) {
      fieldAttrResult.push(name + '="' + value + '"');
    });
    return {
      attr: fieldAttrResult.length > 0 ? ' ' + fieldAttrResult.join(' ') : '',
      content: content
    };
  },
  /**
   * Сборка записи-группы
   * @param {object} table
   * @param {object} group
   * @param {object} record
   * @returns {{ attr: (string), fields: (object) }}}
   * @private
   */
  renderGroup: function renderGroup(table, group, record) {
    var attr = group.hasOwnProperty('attr') && coreuiTableUtils.isObject(group.attr) ? group.attr : {};
    if (attr.hasOwnProperty('class') && typeof attr["class"] === 'string') {
      attr["class"] += ' coreui-table__record-group';
    } else {
      attr["class"] = 'coreui-table__record-group';
    }
    var attributes = [];
    $.each(attr, function (name, value) {
      if (typeof value === 'string') {
        attributes.push(name + '="' + value + '"');
      }
    });
    var recordElement = $(ejs.render(tpl['table-record-group.html'], {
      attr: attributes.length > 0 ? ' ' + attributes.join(' ') : '',
      colspan: table._countColumnsShow
    }));
    var content = record.data[group.field];
    if (group.hasOwnProperty('render') && typeof group.render === 'function') {
      var renderContent = group.render(record);
      if (renderContent) {
        content = renderContent;
      }
    }
    recordElement.find(' > td').html(content);
    return recordElement;
  },
  /**
   * Сборка раскрывающейся строки
   * @param {object}       table
   * @param {Array|string} content
   */
  renderExpand: function renderExpand(table, content) {
    if (_typeof(content) === 'object') {
      content = coreuiTableRender.renderComponents(table, content, 'record_expand_show');
    }
    var expandRecord = $(ejs.render(tpl['table-record-expand.html'], {
      colspan: table._countColumnsShow
    }));
    if (['string', 'number'].indexOf(_typeof(content)) >= 0) {
      expandRecord.find('td').html(content);
    } else if (Array.isArray(content)) {
      $.each(content, function (key, item) {
        if (['string', 'number'].indexOf(_typeof(item)) >= 0 || item instanceof HTMLElement || window.hasOwnProperty('jQuery') && item instanceof jQuery) {
          expandRecord.find('td').append(item);
        }
      });
    }
    return expandRecord;
  },
  /**
   * Сборка элемента управления
   * @param {object} table
   * @param {object} control
   * @private
   * @returns {HTMLElement|jQuery}
   */
  renderControl: function renderControl(table, control) {
    if (coreuiTableUtils.isObject(control)) {
      var controlElement = $(ejs.render(tpl['table-control.html'], {
        id: control.getId()
      }));
      controlElement.append(control.render());
      if (control.hasOwnProperty('initEvents') && typeof control.initEvents === 'function') {
        table.on('container_show', function () {
          control.initEvents();
        });
      }
      return controlElement;
    }
  },
  /**
   * Формирование контента компонента
   * @param {object} table
   * @param {object} components
   * @param {string} eventName
   * @return {Array}
   */
  renderComponents: function renderComponents(table, components, eventName) {
    var result = [];
    if (components instanceof Object) {
      var alloyComponents = ['coreui.table', 'coreui.layout', 'coreui.panel', 'coreui.tabs', 'coreui.info', 'coreui.chart'];
      if (!Array.isArray(components)) {
        components = [components];
      }
      for (var i = 0; i < components.length; i++) {
        if (typeof components[i] === 'string') {
          result.push(components[i]);
        } else if (!Array.isArray(components[i]) && components[i].hasOwnProperty('component') && alloyComponents.indexOf(components[i].component) >= 0) {
          var name = components[i].component.split('.')[1];
          if (CoreUI.hasOwnProperty(name) && coreuiTableUtils.isObject(CoreUI[name])) {
            var instance = CoreUI[name].create(components[i]);
            result.push(instance.render());
            if (eventName) {
              table.on(eventName, instance.initEvents, instance, true);
            }
          }
        }
      }
    }
    return result;
  }
};

var coreuiTablePrivate = {
  /**
   * Инициализация колонок
   * @param {Object} table
   * @param {Array} columns
   * @private
   */
  initColumns: function initColumns(table, columns) {
    $.each(columns, function (key, column) {
      if (typeof column.type === 'undefined' || !coreuiTable$1.columns.hasOwnProperty(column.type)) {
        column.type = 'text';
      }
      if (!column.hasOwnProperty('show') || typeof column.show !== 'boolean') {
        column.show = true;
      }
      if (column.hasOwnProperty('fixed') && typeof column.fixed === 'string') {
        table._options.overflow = true;
      }
      var columnInstance = $.extend(true, {}, coreuiTable$1.columns[column.type]);
      columnInstance.init(table, column);
      table._columns.push(columnInstance);
      if (columnInstance.isShow()) {
        table._countColumnsShow++;
      }
    });
  },
  /**
   * Инициализация поисковых полей
   * @param {Object} table
   * @param {Array}  searchControls
   * @private
   */
  initSearch: function initSearch(table, searchControls) {
    var options = table.getOptions();
    var searchValues = options.saveState && options.id ? coreuiTablePrivate.getStorageField(table.getId(), 'search') : null;
    $.each(searchControls, function (key, control) {
      if (!coreuiTableUtils.isObject(control)) {
        control = {};
      }
      if (!control.hasOwnProperty('type') || typeof control.type !== 'string' || !coreuiTable$1.search.hasOwnProperty(control.type)) {
        control.type = 'text';
      }
      if (options.saveState && options.id) {
        control.value = null;
        if (Array.isArray(searchValues) && control.hasOwnProperty('field')) {
          $.each(searchValues, function (key, search) {
            if (coreuiTableUtils.isObject(search) && search.hasOwnProperty('field') && search.hasOwnProperty('value') && search.field && search.field === control.field) {
              control.value = search.value;
              return false;
            }
          });
        }
      }
      var controlInstance = $.extend(true, {}, coreuiTable$1.search[control.type]);
      controlInstance.init(table, control);
      table._search.push(controlInstance);
    });
  },
  /**
   * Инициализация контролов и фильтров
   * @param {Object} table
   * @param {Array}  rows
   * @param {string} position
   * @private
   */
  initControls: function initControls(table, rows, position) {
    var that = this;
    $.each(rows, function (key, row) {
      var type = 'in';
      var controlsLeft = [];
      var controlsCenter = [];
      var controlsRight = [];
      if (typeof row.type === 'string' && ['in', 'out'].indexOf(row.type.toLowerCase()) >= 0) {
        type = row.type.toLowerCase();
      }
      if (row.hasOwnProperty('left') && Array.isArray(row.left)) {
        $.each(row.left, function (key, control) {
          var instance = that.initControl(table, control);
          if (coreuiTableUtils.isObject(instance)) {
            controlsLeft.push(instance);
          }
        });
      }
      if (row.hasOwnProperty('center') && Array.isArray(row.center)) {
        $.each(row.center, function (key, control) {
          var instance = that.initControl(table, control);
          if (coreuiTableUtils.isObject(instance)) {
            controlsCenter.push(instance);
          }
        });
      }
      if (row.hasOwnProperty('right') && Array.isArray(row.right)) {
        $.each(row.right, function (key, control) {
          var instance = that.initControl(table, control);
          if (coreuiTableUtils.isObject(instance)) {
            controlsRight.push(instance);
          }
        });
      }
      if (controlsLeft.length > 0 || controlsCenter.length > 0 || controlsRight.length > 0) {
        table._controlsPositions[position].push({
          type: type,
          left: controlsLeft,
          center: controlsCenter,
          right: controlsRight
        });
      }
    });
  },
  /**
   * Инициализация контрола или фильтра
   * @param {Object} table
   * @param {object} control
   * @private
   */
  initControl: function initControl(table, control) {
    var instance = null;
    if (coreuiTableUtils.isObject(control) && typeof control.type === 'string') {
      if (coreuiTable$1.controls.hasOwnProperty(control.type)) {
        instance = $.extend(true, {}, coreuiTable$1.controls[control.type]);
        instance.init(table, control);
        table._controls.push(instance);
      } else if (control.type.indexOf('filter:') === 0) {
        var filterName = control.type.substring(7);
        if (coreuiTable$1.filters.hasOwnProperty(filterName)) {
          if (control.hasOwnProperty('field')) {
            var options = table.getOptions();
            if (options.saveState && options.id) {
              var filterValues = options.saveState && options.id ? coreuiTablePrivate.getStorageField(table.getId(), 'filters') : null;
              control.value = null;
              if (Array.isArray(filterValues)) {
                $.each(filterValues, function (key, filter) {
                  if (coreuiTableUtils.isObject(filter) && filter.hasOwnProperty('field') && filter.hasOwnProperty('value') && filter.field && filter.field === control.field) {
                    control.value = filter.value;
                    return false;
                  }
                });
              }
            }
          }
          instance = $.extend(true, {}, coreuiTable$1.filters[filterName]);
          instance.init(table, control);
          table._filters.push(instance);
        }
      }
    }
    return instance;
  },
  /**
   * Инициализация сортировки
   * @param {Object} table
   * @param {Array} sort
   * @private
   */
  initSort: function initSort(table, sort) {
    if (Array.isArray(sort) && sort.length > 0) {
      $.each(sort, function (key, sortField) {
        if (coreuiTableUtils.isObject(sortField) && sortField.hasOwnProperty('field') && sortField.hasOwnProperty('order') && typeof sortField.field === 'string' && typeof sortField.order === 'string' && sortField.field && sortField.order && ['asc', 'desc'].indexOf(sortField.order) >= 0) {
          table._sort.push({
            field: sortField.field,
            order: sortField.order
          });
        }
      });
    }
  },
  /**
   * Установка записей
   * @param {Object} table
   * @param {Array}  records
   * @private
   */
  setRecords: function setRecords(table, records) {
    table._recordsIndex = 1;
    table._records = [];
    var that = this;
    $.each(records, function (key, record) {
      that.addRecord(table, record);
    });
  },
  /**
   * Добавление новой записи
   * @param {object} table
   * @param {object} data
   * @param {number} afterIndex
   * @return {object|null}
   * @private
   */
  addRecord: function addRecord(table, data, afterIndex) {
    if (coreuiTableUtils.isObject(data)) {
      data = $.extend(true, {}, data);
      var meta = data.hasOwnProperty('_meta') && coreuiTableUtils.isObject(data._meta) ? data._meta : null;
      if (meta) {
        delete data._meta;
      }
      var record = {
        index: table._recordsIndex++,
        data: data,
        show: true,
        meta: meta,
        seq: table._seq++
      };
      if (typeof afterIndex === 'number') {
        if (afterIndex === 0) {
          table._records.splice(0, 0, record);
          return record;
        } else {
          var index = null;
          $.each(table._records, function (key, record) {
            if (afterIndex === record.index) {
              index = key;
              return false;
            }
          });
          if (index !== null) {
            table._records.splice(index, 0, record);
            return record;
          }
        }
      } else {
        table._records.push(record);
        return record;
      }
    }
    return null;
  },
  /**
   * Добавление новой записи перед указанной
   * @param {object} table
   * @param {object} data
   * @param {number} index
   * @return {object|null}
   * @private
   */
  addRecordBefore: function addRecordBefore(table, data, index) {
    if (coreuiTableUtils.isObject(data) && typeof index === 'number') {
      data = $.extend(true, {}, data);
      var meta = data.hasOwnProperty('_meta') && coreuiTableUtils.isObject(data._meta) ? data._meta : null;
      if (meta) {
        delete data._meta;
      }
      var record = {
        index: table._recordsIndex++,
        data: data,
        show: true,
        meta: meta,
        seq: table._seq++
      };
      var issetKey = false;
      var keyBefore = null;
      $.each(table._records, function (key, record) {
        if (index === record.index) {
          issetKey = true;
          return false;
        }
        keyBefore = key;
      });
      if (issetKey && keyBefore) {
        table._records.splice(keyBefore, 0, record);
        return record;
      }
    }
    return null;
  },
  /**
   * Проверка подходит ли запись под поисковые данные
   * @param {Array}  filters
   * @param {object} recordData
   * @return {boolean}
   * @private
   */
  isFilteredRecord: function isFilteredRecord(filters, recordData) {
    var isShow = true;
    $.each(filters, function (key, filter) {
      if (recordData.hasOwnProperty(filter.field) && ['string', 'number'].indexOf(_typeof(recordData[filter.field])) >= 0) {
        if (['string', 'number'].indexOf(_typeof(filter.value)) >= 0) {
          if (filter.hasOwnProperty('alg') && filter.alg === 'strict') {
            if (recordData[filter.field].toString().toLowerCase() != filter.value.toString().toLowerCase()) {
              isShow = false;
              return false;
            }
          } else if (recordData[filter.field].toString().toLowerCase().indexOf(filter.value.toString().toLowerCase()) < 0) {
            isShow = false;
            return false;
          }
        } else if (Array.isArray(filter.value)) {
          if (filter.value.indexOf(recordData[filter.field].toString()) < 0) {
            isShow = false;
            return false;
          }
        } else if (coreuiTableUtils.isObject(filter.value) && filter.value.hasOwnProperty('start') && filter.value.hasOwnProperty('end')) {
          var issetStart = ['string', 'number'].indexOf(_typeof(filter.value.start)) >= 0;
          var issetEnd = ['string', 'number'].indexOf(_typeof(filter.value.end)) >= 0;
          if (issetStart && issetEnd) {
            if (recordData[filter.field] < filter.value.start || filter.value.end < recordData[filter.field]) {
              isShow = false;
              return false;
            }
          } else if (issetStart) {
            if (filter.value.start > recordData[filter.field]) {
              isShow = false;
              return false;
            }
          } else if (issetEnd) {
            if (filter.value.end < recordData[filter.field]) {
              isShow = false;
              return false;
            }
          }
        }
      } else {
        isShow = false;
        return false;
      }
    });
    return isShow;
  },
  /**
   * Выполнения зарегистрированных функций в указанном событии
   * @param {object} table
   * @param {string} name
   * @param {Array}  params
   * @private
   */
  _trigger: function _trigger(table, name, params) {
    params = params || [];
    if (table._events.hasOwnProperty(name) && table._events[name].length > 0) {
      for (var i = 0; i < table._events[name].length; i++) {
        var callback = table._events[name][i].callback;
        var context = table._events[name][i].context ? table._events[name][i].context : table;
        callback.apply(context, params);
        if (table._events[name][i].singleExec) {
          table._events[name].splice(i, 1);
          i--;
        }
      }
    }
  },
  /**
   * Сортировка записей по seq
   * @param {Array} records
   * @return {*}
   */
  sortRecordsBySeq: function sortRecordsBySeq(records) {
    return records.sort(function (a, b) {
      return a.seq - b.seq;
    });
  },
  /**
   * Сортировка записей по указанным полям
   * @param records
   * @param fields
   */
  sortRecordsByFields: function sortRecordsByFields(records, fields) {
    return records.sort(function (a, b) {
      for (var i = 0; i < fields.length; i++) {
        var issetAField = a.data.hasOwnProperty(fields[i].field);
        var issetBField = b.data.hasOwnProperty(fields[i].field);
        if (!issetAField && !issetBField) {
          return 0;
        } else if (!issetAField) {
          return 1;
        } else if (!issetBField) {
          return -1;
        }
        var val = a.data[fields[i].field] < b.data[fields[i].field] ? -1 : a.data[fields[i].field] > b.data[fields[i].field] ? 1 : 0;
        if (fields[i].order === "desc") {
          val = val * -1;
        }
        if (val !== 0) {
          return val;
        }
      }
    });
  },
  /**
   * Получение данных из хранилища
   * @param {string} tableId
   * @return {object|null}
   */
  getStorage: function getStorage(tableId) {
    var storage = localStorage.getItem('coreui_table');
    try {
      if (typeof storage === 'string' && storage) {
        storage = JSON.parse(storage);
        if (coreuiTableUtils.isObject(storage)) {
          return tableId && typeof tableId === 'string' ? storage.hasOwnProperty(tableId) ? storage[tableId] : null : storage;
        }
      }
      return null;
    } catch (e) {
      return null;
    }
  },
  /**
   * Сохранение данных в хранилище
   * @param {string}      tableId
   * @param {object|null} storage
   */
  setStorage: function setStorage(tableId, storage) {
    if (typeof tableId !== 'string' || !tableId) {
      return;
    }
    var storageAll = this.getStorage();
    if (coreuiTableUtils.isObject(storageAll)) {
      if (storageAll.hasOwnProperty(tableId)) {
        if (storage) {
          storageAll[tableId] = storage;
        } else {
          delete storageAll[tableId];
        }
      } else if (storage) {
        storageAll[tableId] = storage;
      }
    }
    localStorage.setItem('coreui_table', JSON.stringify(storageAll || {}));
  },
  /**
   * Получение поля из хранилища
   * @param tableId
   * @param field
   * @return {*|null}
   */
  getStorageField: function getStorageField(tableId, field) {
    var storage = this.getStorage(tableId) || {};
    return storage.hasOwnProperty(field) ? storage[field] : null;
  },
  /**
   * Сохранение поля в хранилище
   * @param tableId
   * @param field
   * @param data
   */
  setStorageField: function setStorageField(tableId, field, data) {
    var storage = this.getStorage(tableId) || {};
    if (data === null) {
      if (storage.hasOwnProperty(field)) {
        delete storage[field];
      }
    } else {
      storage[field] = data;
    }
    this.setStorage(tableId, storage);
  }
};

var coreuiTableElements = {
  /**
   * Получение контейнера таблицы
   * @param {string} tableId
   * @return {jQuery}
   */
  getContainer: function getContainer(tableId) {
    return $('#coreui-table-' + tableId + ' > .coreui-table__container');
  },
  /**
   * Получение обертки таблицы
   * @param {string} tableId
   * @return {jQuery}
   */
  getLock: function getLock(tableId) {
    return $('#coreui-table-' + tableId + ' > .coreui-table__container > .coreui-table-lock');
  },
  /**
   * Получение обертки таблицы
   * @param {string} tableId
   * @return {jQuery}
   */
  getWrapper: function getWrapper(tableId) {
    return $('#coreui-table-' + tableId + ' > .coreui-table__container > .coreui-table__wrapper');
  },
  /**
   * Получение поискового контейнера
   * @param {string} tableId
   * @return {jQuery}
   */
  getSearchContainer: function getSearchContainer(tableId) {
    return $('#coreui-table-' + tableId + ' > .coreui-table__container > .coreui-table__wrapper > .coreui-table__search');
  },
  /**
   * Получение поискового контейнера
   * @param {string} tableId
   * @return {jQuery}
   */
  getColumnsContainer: function getColumnsContainer(tableId) {
    return $('#coreui-table-' + tableId + ' > .coreui-table__container > .coreui-table__wrapper > .coreui-table__columns');
  },
  /**
   * Получение контейнера поискового контрола
   * @param {string} tableId
   * @param {string} controlId
   * @return {jQuery}
   */
  getSearchControl: function getSearchControl(tableId, controlId) {
    return $('#coreui-table-' + tableId + ' > .coreui-table__container > .coreui-table__wrapper > .coreui-table__search .search-control-' + controlId);
  },
  /**
   * Получение контейнера контрола
   * @param {string} tableId
   * @param {string} controlId
   * @return {jQuery}
   */
  getControl: function getControl(tableId, controlId) {
    return $('#coreui-table-' + tableId + '  #coreui-table-control-' + controlId);
  },
  /**
   * Получение таблицы
   * @param {string} tableId
   * @return {jQuery}
   */
  getTable: function getTable(tableId) {
    return $('#coreui-table-' + tableId + ' > .coreui-table__container > .coreui-table__wrapper > table');
  },
  /**
   * Получение тела таблицы
   * @param {string} tableId
   * @return {jQuery}
   */
  getTableTbody: function getTableTbody(tableId) {
    return $('#coreui-table-' + tableId + ' > .coreui-table__container > .coreui-table__wrapper > table > tbody');
  },
  /**
   * Получение ячеек с сортировкой по таблице
   * @param {string} tableId
   * @return {jQuery}
   */
  getTableSortable: function getTableSortable(tableId) {
    return $('#coreui-table-' + tableId + ' > .coreui-table__container > .coreui-table__wrapper > table > thead > tr > td.coreui-table__sortable');
  },
  /**
   * Получение строк записей
   * @param {string} tableId
   * @return {jQuery}
   */
  getTrRecords: function getTrRecords(tableId) {
    return $('#coreui-table-' + tableId + ' > .coreui-table__container > .coreui-table__wrapper > table > tbody > tr.coreui-table__record');
  },
  /**
   * Получение элемента строки по ключу
   * @param {string} tableId
   * @param {int}    index
   * @return {jQuery}
   */
  getTrByIndex: function getTrByIndex(tableId, index) {
    return $('#coreui-table-' + tableId + ' > .coreui-table__container > .coreui-table__wrapper > table > tbody > tr[data-record-index="' + index + '"]');
  },
  /**
   * Получение контента под строкой
   * @param {jQuery} recordElement
   * @return {jQuery}
   */
  getExpandRow: function getExpandRow(recordElement) {
    return recordElement.next().hasClass('coreui-table__record-expanded') ? recordElement.next() : null;
  },
  /**
   * Добавление контента под строкой
   * @param {object}       table
   * @param {jQuery}       recordElement
   * @param {Array|string} content
   * @return {jQuery}
   */
  addExpandRow: function addExpandRow(table, recordElement, content) {
    var expandRecord = coreuiTableRender.renderExpand(table, content, 'record_expand_show');
    recordElement.after(expandRecord);
    recordElement.next().show('fast');
    recordElement.addClass('record-expanded');
    var recordIndex = recordElement.data('record-index');
    coreuiTablePrivate._trigger(table, 'record_expand_show', [recordIndex]);
  },
  /**
   * Скрытие контента под строкой
   * @param {jQuery} recordExpanded
   * @return {jQuery}
   */
  hideExpandRow: function hideExpandRow(recordExpanded) {
    recordExpanded.hide('fast');
  },
  /**
   * Показ контента под строкой
   * @param {jQuery} recordExpanded
   * @return {jQuery}
   */
  showExpandRow: function showExpandRow(recordExpanded) {
    recordExpanded.show('fast');
  },
  /**
   * Удаление контента под строкой
   * @param {jQuery} recordExpanded
   * @return {jQuery}
   */
  removeExpandRow: function removeExpandRow(recordExpanded) {
    recordExpanded.hide('fast', function () {
      $(this).remove();
    });
  },
  /**
   * Получение выбранных на таблице элементов
   * @param {string} tableId
   * @return {Array}
   */
  getSelectedIndexes: function getSelectedIndexes(tableId) {
    var indexes = [];
    $('#coreui-table-' + tableId + ' > .coreui-table__container > .coreui-table__wrapper > table > tbody > tr.coreui-table__record > td.coreui-table__select_container > .coreui-table__select:checked').each(function (key, element) {
      indexes.push($(element).val());
    });
    return indexes;
  },
  /**
   * Получение выбранных на таблице элементов
   * @param {string} tableId
   * @return {Array}
   */
  getRowsSwitches: function getRowsSwitches(tableId) {
    return $('#coreui-table-' + tableId + ' > .coreui-table__container > .coreui-table__wrapper > table > tbody > tr.coreui-table__record > td.coreui-table__switch_container');
  },
  /**
   * Получение элементов выбора строк
   * @param {string} tableId
   * @return {Array}
   */
  getRowsSelects: function getRowsSelects(tableId) {
    return $('#coreui-table-' + tableId + ' > .coreui-table__container > .coreui-table__wrapper  > table > tbody > tr.coreui-table__record > td.coreui-table__select_container');
  },
  /**
   * Получение элемента для выбора всех строк
   * @param {string} tableId
   * @return {Array}
   */
  getRowsSelectAll: function getRowsSelectAll(tableId) {
    return $('#coreui-table-' + tableId + ' > .coreui-table__container > .coreui-table__wrapper  > table > thead > tr > td > .coreui-table__select-all');
  },
  /**
   * Получение элементов для раскрытия ячеек
   * @param {string} tableId
   * @return {Array}
   */
  getNoWrapToggles: function getNoWrapToggles(tableId) {
    return $('#coreui-table-' + tableId + ' > .coreui-table__container > .coreui-table__wrapper  > table > tbody > tr > td.coreui_table__no-wrap > i.toggle');
  },
  /**
   * Выделение строки в таблице
   * @param {jQuery} tr
   */
  selectTr: function selectTr(tr) {
    tr.addClass('table-primary');
    $('.coreui-table__select', tr).prop('checked', true);
  },
  /**
   * Выделение всех строк в таблице
   * @param {string} tableId
   */
  selectTrAll: function selectTrAll(tableId) {
    var tableContainer = '#coreui-table-' + tableId + ' > .coreui-table__container > .coreui-table__wrapper > table';
    $(tableContainer + ' > thead > tr > td > .coreui-table__select-all').prop('checked', true);
    $(tableContainer + ' > tbody > tr.coreui-table__record').addClass('table-primary');
    $(tableContainer + ' > tbody > tr.coreui-table__record > td > .coreui-table__select').prop('checked', true);
  },
  /**
   * Снятие выделение строки в таблице
   * @param {jQuery} tr
   */
  unselectTr: function unselectTr(tr) {
    $(tr).removeClass('table-primary');
    $('.coreui-table__select', tr).prop('checked', false);
  },
  /**
   * Снятие выделение со всех строк в таблице
   * @param {string} tableId
   */
  unselectTrAll: function unselectTrAll(tableId) {
    var tableContainer = '#coreui-table-' + tableId + ' > .coreui-table__container > .coreui-table__wrapper > table';
    $(tableContainer + ' > thead > tr > td > .coreui-table__select-all').prop('checked', false);
    $(tableContainer + ' > tbody > tr.coreui-table__record').removeClass('table-primary');
    $(tableContainer + ' > tbody > tr.coreui-table__record > td.coreui-table__select_container > .coreui-table__select').prop('checked', false);
  },
  /**
   * Фиксация колонок слева
   * @param {string} tableId
   */
  fixedColsLeft: function fixedColsLeft(tableId) {
    var tableWrapper = '#coreui-table-' + tableId + ' > .coreui-table__container > .coreui-table__wrapper';
    var colOffset = 0;
    $(tableWrapper + ' > table > thead > tr:last-child > td.coreui-table__fixed_left').each(function () {
      var index = $(this).index() + 1;
      if (index !== 1) {
        $(tableWrapper + ' > table > thead > tr:last-child > td:nth-child(' + index + ')').css('left', colOffset + 'px');
        $(tableWrapper + ' > table > tbody > tr > td:nth-child(' + index + ')')
        //.addClass('coreui-table__fixed_left')
        .css('left', colOffset + 'px');
      }
      colOffset += $(this).outerWidth();
    });
  },
  /**
   * Фиксация колонок справа
   * @param {string} tableId
   */
  fixedColsRight: function fixedColsRight(tableId) {
    var tableWrapper = '#coreui-table-' + tableId + ' > .coreui-table__container > .coreui-table__wrapper';
    var colOffset = 0;
    $($(tableWrapper + ' > table > thead > tr:last-child > td.coreui-table__fixed_right').get().reverse()).each(function () {
      var index = $(this).index() + 1;
      if (index !== 1) {
        $(tableWrapper + ' > table > thead > tr:last-child > td:nth-child(' + index + ')').css('right', colOffset + 'px');
        $(tableWrapper + ' > table > tbody > tr > td:nth-child(' + index + ')')
        //.addClass('coreui-table__fixed_left')
        .css('right', colOffset + 'px');
      }
      colOffset += $(this).outerWidth();
    });
  }
};

var coreuiTableInstance = {
  _options: {
    id: null,
    "class": '',
    primaryKey: 'id',
    lang: 'ru',
    width: null,
    minWidth: null,
    maxWidth: null,
    height: null,
    minHeight: null,
    naxHeight: null,
    overflow: false,
    page: 1,
    recordsPerPage: 25,
    theadTop: 0,
    saveState: false,
    noWrap: false,
    noWrapToggle: false,
    columnHeaders: true,
    recordsRequest: {
      method: 'GET',
      url: null,
      // '/mod/index/orders/?page=[page]'
      params: {
        page: 'page',
        count: 'count',
        start: 'start',
        end: 'end',
        sort: 'sort',
        search: 'search',
        filter: 'filter'
      }
    },
    group: {
      field: null,
      attr: {},
      render: null
    },
    onClick: null,
    onClickUrl: null,
    sort: [],
    header: [],
    footer: [],
    columnGroupsHeader: [],
    search: {
      labelWidth: 200,
      controls: []
    },
    columns: [],
    columnGroupsFooter: [],
    records: []
  },
  _id: '',
  _page: 1,
  _recordsIndex: 1,
  _recordsPerPage: 25,
  _recordsTotal: 0,
  _recordsNumber: 1,
  _seq: 1,
  _isRecordsRequest: false,
  _countColumnsShow: 0,
  _records: [],
  _sort: [],
  _columns: [],
  _search: [],
  _filters: [],
  _controls: [],
  _controlsPositions: {
    header: [],
    footer: []
  },
  _events: {},
  /**
   * Инициализация
   * @param {object} options
   * @private
   */
  _init: function _init(options) {
    this._options = $.extend(true, {}, this._options, options);
    this._events = {};
    this._id = this._options.hasOwnProperty('id') && typeof this._options.id === 'string' && this._options.id ? this._options.id : coreuiTableUtils.hashCode();
    if (this._options.page > 0) {
      this._page = this._options.page;
    }
    if (this._options.recordsPerPage > 0) {
      this._recordsPerPage = this._options.recordsPerPage;
    }
    this._isRecordsRequest = this._options.hasOwnProperty('recordsRequest') && coreuiTableUtils.isObject(this._options.recordsRequest) && this._options.recordsRequest.hasOwnProperty('url') && typeof this._options.recordsRequest.url === 'string' && this._options.recordsRequest.url !== '' && this._options.recordsRequest.url !== '#';
    if (this._isRecordsRequest) {
      if (!this._options.recordsRequest.hasOwnProperty('method') || typeof this._options.recordsRequest.method !== 'string') {
        this._options.recordsRequest.method = 'GET';
      }
    } else if (Array.isArray(this._options.records)) {
      coreuiTablePrivate.setRecords(this, this._options.records);
    }

    // Инициализация колонок
    if (_typeof(this._options.columns) === 'object' && Array.isArray(this._options.columns) && this._options.columns.length > 0) {
      coreuiTablePrivate.initColumns(this, this._options.columns);
    }

    // Инициализация поисковых полей
    if (coreuiTableUtils.isObject(this._options.search) && _typeof(this._options.search.controls) === 'object' && Array.isArray(this._options.search.controls) && this._options.search.controls.length > 0) {
      coreuiTablePrivate.initSearch(this, this._options.search.controls);
    }

    // Инициализация контролов и фильтров
    if (this._options.hasOwnProperty('header') && Array.isArray(this._options.header) && this._options.header.length > 0) {
      coreuiTablePrivate.initControls(this, this._options.header, 'header');
    }
    if (this._options.hasOwnProperty('footer') && Array.isArray(this._options.footer) && this._options.footer.length > 0) {
      coreuiTablePrivate.initControls(this, this._options.footer, 'footer');
    }

    // Сортировка
    if (this._options.saveState && this._options.id) {
      var sort = coreuiTablePrivate.getStorageField(this.getId(), 'sort');
      if (Array.isArray(sort) && sort.length > 0) {
        coreuiTablePrivate.initSort(this, sort);
        if (this._records.length > 0) {
          this._records = coreuiTablePrivate.sortRecordsByFields(this._records, this._sort);
        }
      }
    } else {
      if (this._options.hasOwnProperty('sort') && Array.isArray(this._options.sort) && this._options.sort.length > 0) {
        coreuiTablePrivate.initSort(this, this._options.sort);
      }
    }
  },
  /**
   * Инициализация событий таблицы
   */
  initEvents: function initEvents() {
    var that = this;

    // Показ строк
    this.on('records_show', function () {
      // Переход по ссылке
      if (typeof that._options.onClickUrl === 'string' && that._options.onClickUrl) {
        coreuiTableElements.getTrRecords(that.getId()).click(function () {
          var recordKey = $(this).data('record-index');
          var record = that.getRecordByIndex(recordKey);
          if (!record) {
            return;
          }
          var url = that._options.onClickUrl;
          $.each(record.data, function (field, value) {
            var fieldQuote = field.replace(/([^\w\d])/g, '\\$1');
            url = url.replace(new RegExp('\\[' + fieldQuote + '\\]', 'g'), value);
          });
          if (url && url !== '#') {
            location.href = url;
          }
        });
      }

      // Событие нажатия на строку
      if (typeof that._options.onClick === 'function') {
        coreuiTableElements.getTrRecords(that.getId()).click(function (event) {
          var recordKey = $(this).data('record-index');
          var record = that.getRecordByIndex(recordKey);
          if (!record) {
            return;
          }
          that._options.onClick(event, record);
        });
      }

      // Раскрытие строки
      coreuiTableElements.getNoWrapToggles(that.getId()).click(function (event) {
        event.cancelBubble = true;
        event.preventDefault();
        var parent = $(this).parent();
        if (parent.hasClass('shown')) {
          $(this).removeClass('bi-caret-up-fill');
          $(this).addClass('bi-caret-down-fill');
          parent.removeClass('shown');
        } else {
          $(this).removeClass('bi-caret-down-fill');
          $(this).addClass('bi-caret-up-fill');
          parent.addClass('shown');
        }
      });

      // Фиксация колонок
      coreuiTableElements.fixedColsLeft(that.getId());
      coreuiTableElements.fixedColsRight(that.getId());
    });

    // Показ таблицы
    this.on('table_show', function () {
      var sortableColumns = coreuiTableElements.getTableSortable(that.getId());
      if (sortableColumns[0]) {
        sortableColumns.click(function () {
          var field = $(this).data('field');
          if (field) {
            var sorting = [];
            var currentOrder = null;
            $.each(that._sort, function (key, sortField) {
              if (field === sortField.field) {
                currentOrder = sortField.order;
                return false;
              }
            });
            if (currentOrder === null) {
              sorting.push({
                field: field,
                order: 'asc'
              });
            } else if (currentOrder === 'asc') {
              sorting.push({
                field: field,
                order: 'desc'
              });
            }
            if (sorting.length === 0) {
              that.sortDefault();
            } else {
              that.sortFields(sorting);
            }
          }
        });
      }
    });

    // События смены состояния
    if (this._options.saveState && this._options.id) {
      this.on('records_sort', function () {
        coreuiTablePrivate.setStorageField(that.getId(), 'sort', that._sort);
      });
      this.on('search_change', function () {
        coreuiTablePrivate.setStorageField(that.getId(), 'search', that.getSearchData());
      });
      this.on('filters_change', function () {
        coreuiTablePrivate.setStorageField(that.getId(), 'filters', that.getFilterData());
      });
      this.on('columns_change', function () {
        var columns = [];
        $.each(that._columns, function (key, column) {
          var columnOptions = column.getOptions();
          columns.push({
            field: columnOptions.field,
            isShow: column.isShow()
          });
        });
        coreuiTablePrivate.setStorageField(that.getId(), 'columns', columns);
      });
    }
    coreuiTablePrivate._trigger(this, 'table_show', [this]);
    coreuiTablePrivate._trigger(this, 'container_show');

    // Вызов события показа строк
    if (!this._isRecordsRequest) {
      coreuiTablePrivate._trigger(this, 'records_show', [this]);
    }
  },
  /**
   * Получение идентификатора таблицы
   * @returns {string}
   */
  getId: function getId() {
    return this._id;
  },
  /**
   * Получение опций таблицы
   * @returns {*}
   */
  getOptions: function getOptions() {
    return $.extend(true, {}, this._options);
  },
  /**
   *
   * @param element
   * @returns {*}
   */
  render: function render(element) {
    var that = this;
    var widthSizes = [];
    var heightSizes = [];
    var render = {
      headersOut: [],
      headersIn: [],
      footersIn: [],
      footersOut: []
    };
    this._recordsTotal = this._records.length;
    if (this._options.width > 0) {
      var unit = typeof this._options.width === 'number' ? 'px' : '';
      widthSizes.push('width:' + this._options.width + unit);
    }
    if (this._options.minWidth > 0) {
      var _unit = typeof this._options.minWidth === 'number' ? 'px' : '';
      widthSizes.push('min-width:' + this._options.minWidth + _unit);
    }
    if (this._options.maxWidth > 0) {
      var _unit2 = typeof this._options.maxWidth === 'number' ? 'px' : '';
      widthSizes.push('max-width:' + this._options.maxWidth + _unit2);
      this._options.overflow = true;
    }
    if (this._options.height > 0) {
      var _unit3 = typeof this._options.height === 'number' ? 'px' : '';
      heightSizes.push('height:' + this._options.height + _unit3);
    }
    if (this._options.minHeight > 0) {
      var _unit4 = typeof this._options.minHeight === 'number' ? 'px' : '';
      heightSizes.push('min-height:' + this._options.minHeight + _unit4);
    }
    if (this._options.maxHeight > 0) {
      var _unit5 = typeof this._options.maxHeight === 'number' ? 'px' : '';
      heightSizes.push('max-height:' + this._options.maxHeight + _unit5);
      this._options.overflow = true;
    }

    // Верхние элементы управления
    if (Array.isArray(this._controlsPositions.header) && this._controlsPositions.header.length > 0) {
      $.each(this._controlsPositions.header, function (key, header) {
        var controlsLeft = [];
        var controlsCenter = [];
        var controlsRight = [];
        if (Array.isArray(header.left) && header.left.length > 0) {
          $.each(header.left, function (key, control) {
            var controlRender = coreuiTableRender.renderControl(that, control);
            if (controlRender) {
              controlsLeft.push(controlRender);
            }
          });
        }
        if (Array.isArray(header.center) && header.center.length > 0) {
          $.each(header.center, function (key, control) {
            var controlRender = coreuiTableRender.renderControl(that, control);
            if (controlRender) {
              controlsCenter.push(controlRender);
            }
          });
        }
        if (Array.isArray(header.right) && header.right.length > 0) {
          $.each(header.right, function (key, control) {
            var controlRender = coreuiTableRender.renderControl(that, control);
            if (controlRender) {
              controlsRight.push(controlRender);
            }
          });
        }
        if (controlsLeft.length > 0 || controlsCenter.length > 0 || controlsRight.length > 0) {
          if (header.type === 'in') {
            var headerControls = $(ejs.render(tpl['table-controls-header.html'], {
              controlsLeft: controlsLeft,
              controlsCenter: controlsCenter,
              controlsRight: controlsRight
            }));
            if (controlsLeft.length > 0) {
              $.each(controlsLeft, function (key, control) {
                headerControls.find('.coreui-table__controls_left').append(control);
              });
            }
            if (controlsCenter.length > 0) {
              $.each(controlsCenter, function (key, control) {
                headerControls.find('.coreui-table__controls_center').append(control);
              });
            }
            if (controlsRight.length > 0) {
              $.each(controlsRight, function (key, control) {
                headerControls.find('.coreui-table__controls_right').append(control);
              });
            }
            render.headersIn.push(headerControls);
          } else {
            var _headerControls = $(ejs.render(tpl['table-controls-header-out.html'], {
              controlsLeft: controlsLeft,
              controlsCenter: controlsCenter,
              controlsRight: controlsRight
            }));
            if (controlsLeft.length > 0) {
              $.each(controlsLeft, function (key, control) {
                _headerControls.find('.coreui-table__controls_left').append(control);
              });
            }
            if (controlsCenter.length > 0) {
              $.each(controlsCenter, function (key, control) {
                _headerControls.find('.coreui-table__controls_center').append(control);
              });
            }
            if (controlsRight.length > 0) {
              $.each(controlsRight, function (key, control) {
                _headerControls.find('.coreui-table__controls_right').append(control);
              });
            }
            render.headersOut.push(_headerControls);
          }
        }
      });
    }

    // Нижние элементы управления
    if (Array.isArray(this._controlsPositions.footer) && this._controlsPositions.footer.length > 0) {
      $.each(this._controlsPositions.footer, function (key, footer) {
        var controlsLeft = [];
        var controlsCenter = [];
        var controlsRight = [];
        if (Array.isArray(footer.left) && footer.left.length > 0) {
          $.each(footer.left, function (key, control) {
            var controlRender = coreuiTableRender.renderControl(that, control);
            if (controlRender) {
              controlsLeft.push(controlRender);
            }
          });
        }
        if (Array.isArray(footer.center) && footer.center.length > 0) {
          $.each(footer.center, function (key, control) {
            var controlRender = coreuiTableRender.renderControl(that, control);
            if (controlRender) {
              controlsCenter.push(controlRender);
            }
          });
        }
        if (Array.isArray(footer.right) && footer.right.length > 0) {
          $.each(footer.right, function (key, control) {
            var controlRender = coreuiTableRender.renderControl(that, control);
            if (controlRender) {
              controlsRight.push(controlRender);
            }
          });
        }
        if (controlsLeft.length > 0 || controlsCenter.length > 0 || controlsRight.length > 0) {
          if (footer.type === 'in') {
            var footerControls = $(ejs.render(tpl['table-controls-footer.html'], {
              controlsLeft: controlsLeft,
              controlsCenter: controlsCenter,
              controlsRight: controlsRight
            }));
            if (controlsLeft.length > 0) {
              $.each(controlsLeft, function (key, control) {
                footerControls.find('.coreui-table__controls_left').append(control);
              });
            }
            if (controlsCenter.length > 0) {
              $.each(controlsCenter, function (key, control) {
                footerControls.find('.coreui-table__controls_center').append(control);
              });
            }
            if (controlsRight.length > 0) {
              $.each(controlsRight, function (key, control) {
                footerControls.find('.coreui-table__controls_right').append(control);
              });
            }
            render.footersIn.push(footerControls);
          } else {
            var _footerControls = $(ejs.render(tpl['table-controls-footer-out.html'], {
              controlsLeft: controlsLeft,
              controlsCenter: controlsCenter,
              controlsRight: controlsRight
            }));
            if (controlsLeft.length > 0) {
              $.each(controlsLeft, function (key, control) {
                _footerControls.find('.coreui-table__controls_left').append(control);
              });
            }
            if (controlsCenter.length > 0) {
              $.each(controlsCenter, function (key, control) {
                _footerControls.find('.coreui-table__controls_center').append(control);
              });
            }
            if (controlsRight.length > 0) {
              $.each(controlsRight, function (key, control) {
                _footerControls.find('.coreui-table__controls_right').append(control);
              });
            }
            render.footersOut.push(_footerControls);
          }
        }
      });
    }

    // Загрузка записей
    if (this._isRecordsRequest) {
      this.on('container_show', function () {
        that.load(this._options.recordsRequest.url, this._options.recordsRequest.method);
      });
    }
    var tableElement = coreuiTableRender.renderTable(this);
    var containerElement = $(ejs.render(tpl['table-wrapper.html'], {
      id: this._id,
      lang: this.getLang(),
      widthSizes: widthSizes,
      heightSizes: heightSizes,
      recordsTotal: this._recordsTotal,
      overflow: !!this._options.overflow
    }));
    if (render.headersOut.length > 0) {
      containerElement.prepend(render.headersOut);
    }
    if (render.headersIn.length > 0) {
      containerElement.find('.coreui-table__container').prepend(render.headersIn);
    }
    if (render.footersIn.length > 0) {
      containerElement.find('.coreui-table__container').append(render.footersIn);
    }
    if (render.footersOut.length > 0) {
      containerElement.append(render.footersOut);
    }
    containerElement.find('.coreui-table__wrapper').html(tableElement);
    if (element === undefined) {
      return containerElement;
    }

    // Dom element
    var domElement = null;
    if (typeof element === 'string') {
      domElement = document.getElementById(element);
    } else if (element instanceof HTMLElement) {
      domElement = element;
    }
    if (domElement) {
      $(domElement).html(containerElement);
      this.initEvents();
    }
  },
  /**
   * Блокировка таблицы
   */
  lock: function lock() {
    var container = coreuiTableElements.getContainer(this.getId());
    if (container[0] && !container.find('.coreui-table-lock')[0]) {
      var html = ejs.render(tpl['table-loader.html'], {
        lang: this.getLang()
      });
      container.prepend(html);
    }
  },
  /**
   * Разблокировка таблицы
   */
  unlock: function unlock() {
    coreuiTableElements.getLock(this.getId()).hide(50, function () {
      $(this).remove();
    });
  },
  /**
   * Загрузка строк
   * @param {string} url
   * @param {string} method
   */
  load: function load(url, method) {
    this.lock();
    var that = this;
    var params = {};
    if (url.match(/\[page\]/)) {
      url = url.replace(/\[page\]/g, this._page);
    } else {
      var paramPage = coreuiTableUtils.isObject(this._options.recordsRequest.params) && this._options.recordsRequest.params.hasOwnProperty('page') ? this._options.recordsRequest.params.page : 'page';
      params[paramPage] = this._page;
    }
    if (url.match(/\[count\]/)) {
      url = url.replace(/\[count\]/g, this._recordsPerPage);
    } else {
      var paramCount = coreuiTableUtils.isObject(this._options.recordsRequest.params) && this._options.recordsRequest.params.hasOwnProperty('count') ? this._options.recordsRequest.params.count : 'count';
      params[paramCount] = this._recordsPerPage;
    }
    if (url.match(/\[start\]/)) {
      url = url.replace(/\[start\]/g, (this._page - 1) * this._recordsPerPage + 1);
    } else {
      var paramStart = coreuiTableUtils.isObject(this._options.recordsRequest.params) && this._options.recordsRequest.params.hasOwnProperty('start') ? this._options.recordsRequest.params.start : 'start';
      params[paramStart] = (this._page - 1) * this._recordsPerPage + 1;
    }
    if (url.match(/\[end\]/)) {
      url = url.replace(/\[end\]/g, (this._page - 1) * this._recordsPerPage + Number(this._recordsPerPage));
    } else {
      var paramEnd = coreuiTableUtils.isObject(this._options.recordsRequest.params) && this._options.recordsRequest.params.hasOwnProperty('end') ? this._options.recordsRequest.params.end : 'end';
      params[paramEnd] = (this._page - 1) * this._recordsPerPage + Number(this._recordsPerPage);
    }
    var searchData = this.getSearchData();
    var filterData = this.getFilterData();
    if (searchData.length > 0) {
      var paramSearch = coreuiTableUtils.isObject(this._options.recordsRequest.params) && this._options.recordsRequest.params.hasOwnProperty('search') && typeof this._options.recordsRequest.params.search === 'string' ? this._options.recordsRequest.params.search : 'search';
      params[paramSearch] = searchData;
    }
    if (filterData.length > 0) {
      var paramFilters = coreuiTableUtils.isObject(this._options.recordsRequest.params) && this._options.recordsRequest.params.hasOwnProperty('filter') && typeof this._options.recordsRequest.params.filter === 'string' ? this._options.recordsRequest.params.filter : 'filter';
      params[paramFilters] = filterData;
    }
    if (this._sort.length > 0) {
      var paramSort = coreuiTableUtils.isObject(this._options.recordsRequest.params) && this._options.recordsRequest.params.hasOwnProperty('sort') && typeof this._options.recordsRequest.params.sort === 'string' ? this._options.recordsRequest.params.sort : 'sort';
      params[paramSort] = this._sort;
    }
    $.ajax({
      url: url,
      method: method || 'GET',
      dataType: "json",
      data: params,
      beforeSend: function beforeSend(xhr) {
        coreuiTablePrivate._trigger(that, 'records_load_start', [that, xhr]);
      },
      success: function success(result) {
        if (result.hasOwnProperty('records') && _typeof(result.records) === 'object' && Array.isArray(result.records)) {
          var total = result.hasOwnProperty('total') && coreuiTableUtils.isNumeric(result.total) ? result.total : null;
          that.setRecords(result.records, total);
        } else {
          that.setRecords([]);
        }
      },
      error: function error(xhr, textStatus, errorThrown) {
        that.setRecords([]);
        coreuiTablePrivate._trigger(that, 'records_load_error', [that, xhr, textStatus, errorThrown]);
      },
      complete: function complete(xhr, textStatus) {
        that.unlock();
        coreuiTablePrivate._trigger(that, 'records_load_end', [that, xhr, textStatus]);
      }
    });
  },
  /**
   * Перезагрузка записей в таблице
   */
  reload: function reload() {
    if (this._isRecordsRequest) {
      this.load(this._options.recordsRequest.url, this._options.recordsRequest.method);
    }
  },
  /**
   * Пересоздание тела таблицы
   */
  refresh: function refresh() {
    var table = coreuiTableRender.renderTable(this);
    coreuiTableElements.getTable(this.getId()).replaceWith(table);
    coreuiTablePrivate._trigger(this, 'table_show', [this]);
    coreuiTablePrivate._trigger(this, 'records_show', [this]);
  },
  /**
   * Установка общего количества записей на странице
   * @param recordsPerPage
   */
  setPageSize: function setPageSize(recordsPerPage) {
    this._recordsPerPage = recordsPerPage;
    coreuiTablePrivate._trigger(this, 'page_size_update');
  },
  /**
   * Выбор всех записей в таблице
   */
  selectAll: function selectAll() {
    coreuiTableElements.selectTrAll(this.getId());
    coreuiTablePrivate._trigger(this, 'record_select_all');
  },
  /**
   * Отмена выбор всех записей в таблице
   */
  unselectAll: function unselectAll() {
    coreuiTableElements.unselectTrAll(this.getId());
    coreuiTablePrivate._trigger(this, 'record_unselect_all');
  },
  /**
   * Выбор записи в таблице
   * @param {string} id
   */
  selectRecord: function selectRecord(id) {
    var record = this.getRecordById(id);
    if (!record) {
      return;
    }
    var tr = coreuiTableElements.getTrByIndex(this.getId(), record.index);
    if (tr.length === 0) {
      return;
    }
    coreuiTableElements.selectTr(tr);
    coreuiTablePrivate._trigger(this, 'record_select', [record]);
  },
  /**
   * Отмена выбора записи в таблице
   * @param {string} id
   */
  unselectRecord: function unselectRecord(id) {
    var record = this.getRecordById(id);
    if (!record) {
      return;
    }
    var tr = coreuiTableElements.getTrByIndex(this.getId(), record.index);
    if (!tr) {
      return;
    }
    coreuiTableElements.unselectTr(tr);
    coreuiTablePrivate._trigger(this, 'record_unselect', [record.data]);
  },
  /**
   * Получение выбранных id
   * @return {array}
   */
  getSelectedRecordsId: function getSelectedRecordsId() {
    var records = [];
    var that = this;
    var field = this._options.primaryKey;
    $.each(coreuiTableElements.getSelectedIndexes(this.getId()), function (key, index) {
      var record = that.getRecordByIndex(index);
      if (!record || !record.data.hasOwnProperty(field)) {
        return;
      }
      records.push(record.data[field]);
    });
    return records;
  },
  /**
   * Получение выбранных записей
   * @return {array}
   */
  getSelectedRecords: function getSelectedRecords() {
    var records = [];
    var that = this;
    $.each(coreuiTableElements.getSelectedIndexes(this.getId()), function (key, index) {
      var record = that.getRecordByIndex(index);
      if (!record) {
        return;
      }
      records.push(record);
    });
    return records;
  },
  /**
   * Получение записи по id
   * @param id
   * @return {object|null}
   */
  getRecord: function getRecord(id) {
    var record = this.getRecordById(id);
    if (!record) {
      return null;
    }
    return record.data;
  },
  /**
   * Получение записей
   */
  getRecords: function getRecords() {
    var records = [];
    $.each(this._records, function (key, record) {
      records.push($.extend(true, {}, record));
    });
    return records;
  },
  /**
   * Переход к предыдущей странице
   */
  prevPage: function prevPage() {
    if (this._page > 1) {
      this._page--;
      this.reload();
    }
  },
  /**
   * Переход к следующей странице
   * @return {array}
   */
  nextPage: function nextPage() {
    var totalPages = this._recordsTotal > 0 && this._recordsPerPage > 0 ? Math.ceil(this._recordsTotal / this._recordsPerPage) : 1;
    if (this._page < totalPages) {
      this._page++;
      this.reload();
    }
  },
  /**
   * Переход к указанной странице
   */
  goPage: function goPage(page) {
    if (page >= 1) {
      this._page = page;
      this.reload();
    }
  },
  /**
   * Регистрация функции на событие
   * @param {Array|string} eventName
   * @param {function}     callback
   * @param {*}            context
   * @param {boolean}      singleExec
   */
  on: function on(eventName, callback, context, singleExec) {
    var eventNames = [];
    if (Array.isArray(eventName)) {
      $.each(eventName, function (key, name) {
        if (typeof name === 'string' && name) {
          eventNames.push(name);
        }
      });
    } else if (typeof eventName === 'string' && eventName) {
      eventNames.push(eventName);
    } else {
      return;
    }
    var that = this;
    $.each(eventNames, function (key, name) {
      if (!Array.isArray(that._events[name])) {
        that._events[name] = [];
      }
      that._events[name].push({
        context: context ? context : that,
        callback: callback,
        singleExec: !!singleExec
      });
    });
  },
  /**
   * Получение переводов текущего языка
   * @return {object}
   */
  getLang: function getLang() {
    var result = {};
    if (this._options.lang && coreuiTable$1.lang.hasOwnProperty(this._options.lang)) {
      result = coreuiTable$1.lang[this._options.lang];
    } else {
      var lang = coreuiTable$1.getSetting('lang');
      if (lang && coreuiTable$1.lang.hasOwnProperty(lang)) {
        result = coreuiTable$1.lang[lang];
      } else if (Object.keys(coreuiTable$1.lang).length > 0) {
        result = coreuiTable$1.lang[Object.keys(coreuiTable$1.lang)[0]];
      }
    }
    return $.extend(true, {}, result);
  },
  /**
   * Установка видимых колонок, не указанные колонки будут скрыты
   * @param {Array} columns
   */
  setColumnsShow: function setColumnsShow(columns) {
    if (!Array.isArray(columns)) {
      return;
    }
    $.each(this._columns, function (key, column) {
      var options = column.getOptions();
      if (options.hasOwnProperty('field') && typeof options.field === 'string') {
        column.setShow(columns.indexOf(options.field) >= 0);
      }
    });
    coreuiTablePrivate._trigger(this, 'columns_change');
  },
  /**
   * Получение поисковых данных
   * @return {*[]}
   */
  getSearchData: function getSearchData() {
    var searchData = [];
    $.each(this._search, function (key, control) {
      var options = control.getOptions();
      if (options.hasOwnProperty('field') && typeof options.field === 'string' && options.field) {
        var value = control.getValue();
        if (value !== null) {
          searchData.push({
            field: options.field,
            value: value,
            alg: control.hasOwnProperty('getAlgorithm') && typeof control.getAlgorithm === 'function' ? control.getAlgorithm() : null
          });
        }
      }
    });
    return searchData;
  },
  /**
   * Получение данных из фильтров
   * @return {*[]}
   */
  getFilterData: function getFilterData() {
    var filterData = [];
    $.each(this._filters, function (key, control) {
      var options = control.getOptions();
      if (options.hasOwnProperty('field') && typeof options.field === 'string' && options.field) {
        var value = control.getValue();
        if (value !== null) {
          filterData.push({
            field: options.field,
            value: value,
            alg: control.hasOwnProperty('getAlgorithm') && typeof control.getAlgorithm === 'function' ? control.getAlgorithm() : null
          });
        }
      }
    });
    return filterData;
  },
  /**
   * Поиск по таблице с использованием данных из поиска и фильтров
   */
  searchRecords: function searchRecords() {
    var searchData = this.getSearchData();
    var filterData = this.getFilterData();
    if (this._isRecordsRequest) {
      this.load(this._options.recordsRequest.url, this._options.recordsRequest.method);
    } else {
      $.each(this._records, function (index, record) {
        var isShow = true;
        if (searchData.length > 0) {
          isShow = coreuiTablePrivate.isFilteredRecord(searchData, record.data);
        }
        if (isShow && filterData.length > 0) {
          isShow = coreuiTablePrivate.isFilteredRecord(filterData, record.data);
        }
        record.show = isShow;
      });
      this.refresh();
    }
    coreuiTablePrivate._trigger(this, 'filters_change', [filterData]);
    coreuiTablePrivate._trigger(this, 'search_change', [searchData]);
  },
  /**
   * Очистка поисковых данных
   */
  searchClear: function searchClear() {
    $.each(this._search, function (key, search) {
      search.setValue(null);
    });
    this.searchRecords();
  },
  /**
   * Очистка поисковых данных в фильтрах
   */
  filtersClear: function filtersClear() {
    $.each(this._filters, function (key, filter) {
      filter.setValue(null);
    });
    this.searchRecords();
  },
  /**
   * Получение записи по индексу
   * @param {string|number} index
   * @return {object|null}
   */
  getRecordByIndex: function getRecordByIndex(index) {
    if (['string', 'number'].indexOf(_typeof(index)) < 0 || index === '') {
      return null;
    }
    index = Number(index);
    if (index <= 0) {
      return null;
    }
    var record = null;
    $.each(this._records, function (key, recordItem) {
      if (recordItem.index === index) {
        record = {
          index: recordItem.index,
          data: $.extend(true, {}, recordItem.data),
          meta: recordItem.meta ? $.extend(true, {}, recordItem.meta) : null
        };
        return false;
      }
    });
    return record;
  },
  /**
   * Получение записи по id
   * @param {string} id
   * @return {object|null}
   */
  getRecordById: function getRecordById(id) {
    return this.getRecordByField(this._options.primaryKey, id);
  },
  /**
   * Получение записи по полю
   * @param {string}        field
   * @param {string|number} value
   * @return {object|null}
   */
  getRecordByField: function getRecordByField(field, value) {
    if (['string', 'number'].indexOf(_typeof(field)) < 0 || field === '') {
      return null;
    }
    var record = null;
    $.each(this._records, function (key, recordItem) {
      if (recordItem.data.hasOwnProperty(field) && recordItem.data[field] === value) {
        record = $.extend(true, {}, recordItem);
        return false;
      }
    });
    return record;
  },
  /**
   * Получение контрола по его id
   * @param {string} id
   * @return {object}
   */
  getControlById: function getControlById(id) {
    var result = null;
    $.each(this._controls, function (key, control) {
      if (control.hasOwnProperty('getId') && typeof control.getId === 'function' && control.getId() === id) {
        result = control;
        return false;
      }
    });
    return result;
  },
  /**
   * Получение контрола поиска по его id
   * @param {string} id
   * @return {object}
   */
  getSearchControlById: function getSearchControlById(id) {
    var result = null;
    $.each(this._search, function (key, search) {
      if (search.hasOwnProperty('getId') && typeof search.getId === 'function' && search.getId() === id) {
        result = search;
        return false;
      }
    });
    return result;
  },
  /**
   * Сортировка по полям
   * @param {Array} sorting
   */
  sortFields: function sortFields(sorting) {
    if (!Array.isArray(sorting)) {
      return;
    }
    var that = this;
    this._sort = [];
    $.each(sorting, function (key, sort) {
      if (!coreuiTableUtils.isObject(sort) || !sort.hasOwnProperty('field') || !sort.hasOwnProperty('order') || typeof sort.field !== 'string' || typeof sort.order !== 'string' || !sort.field || !sort.order) {
        return;
      }
      var columnSortable = false;
      $.each(that._columns, function (key, column) {
        var options = column.getOptions();
        if (options.hasOwnProperty('field') && options.hasOwnProperty('sortable') && typeof options.field === 'string' && options.field === sort.field && options.sortable) {
          columnSortable = true;
          return false;
        }
      });
      if (columnSortable) {
        that._sort.push({
          field: sort.field,
          order: sort.order
        });
      }
    });
    if (this._sort.length >= 0) {
      if (this._isRecordsRequest) {
        this.load(this._options.recordsRequest.url, this._options.recordsRequest.method);
      } else {
        this.records = coreuiTablePrivate.sortRecordsByFields(this._records, this._sort);
        this.refresh();
      }
    }
    coreuiTablePrivate._trigger(this, 'records_sort', [this]);
  },
  /**
   * Сортировка по умолчанию
   */
  sortDefault: function sortDefault() {
    this._sort = [];
    if (this._isRecordsRequest) {
      this.load(this._options.recordsRequest.url, this._options.recordsRequest.method);
    } else {
      this.records = coreuiTablePrivate.sortRecordsBySeq(this._records);
      this.refresh();
    }
    coreuiTablePrivate._trigger(this, 'records_sort', [this]);
  },
  /**
   * Удаление строки из таблицы по индексу
   * @param index
   */
  removeRecordByIndex: function removeRecordByIndex(index) {
    var recordKey = null;
    $.each(this._records, function (key, recordItem) {
      if (recordItem.index === index) {
        recordKey = key;
        return false;
      }
    });
    if (recordKey !== null && recordKey >= 0) {
      this._records.splice(recordKey, 1);
      var tr = coreuiTableElements.getTrByIndex(this.getId(), index);
      if (tr.length >= 0) {
        tr.fadeOut('fast', function () {
          tr.remove();
        });
      }
      this._recordsNumber--;
    }
  },
  /**
   * Добавление строки в таблицу после строки с индексом
   * @param {object} recordData
   * @param {number} index
   */
  addRecordAfterIndex: function addRecordAfterIndex(recordData, index) {
    var tr = coreuiTableElements.getTrByIndex(this.getId(), index);
    if (tr.length >= 0) {
      var record = coreuiTablePrivate.addRecord(this, recordData, index);
      if (record) {
        tr.after(coreuiTableRender.renderRecord(this, record));
        this._recordsNumber++;
      }
    }
  },
  /**
   * Добавление строки в таблицу перед строкой с индексом
   * @param {object} recordData
   * @param {number} index
   */
  addRecordBeforeIndex: function addRecordBeforeIndex(recordData, index) {
    var tr = coreuiTableElements.getTrByIndex(this.getId(), index);
    if (tr.length >= 0) {
      var record = coreuiTablePrivate.addRecordBefore(this, recordData, index);
      if (record) {
        tr.before(coreuiTableRender.renderRecord(this, record));
        this._recordsNumber++;
      }
    }
  },
  /**
   * Добавление строки в начало таблицы
   * @param {object} recordData
   */
  addRecordFirst: function addRecordFirst(recordData) {
    var tbody = coreuiTableElements.getTableTbody(this.getId());
    if (tbody.length >= 0) {
      var record = coreuiTablePrivate.addRecord(this, recordData, 0);
      tbody.prepend(coreuiTableRender.renderRecord(this, record));
      this._recordsNumber++;
    }
  },
  /**
   * Добавление строки в конец таблицы
   * @param {object} recordData
   */
  addRecordLast: function addRecordLast(recordData) {
    var tbody = coreuiTableElements.getTableTbody(this.getId());
    if (tbody.length >= 0) {
      var record = coreuiTablePrivate.addRecord(this, recordData);
      tbody.append(coreuiTableRender.renderRecord(this, record));
      this._recordsNumber++;
    }
  },
  /**
   * Показ указанных записей в таблице
   * @param {Array}  records
   * @param {number} total
   */
  setRecords: function setRecords(records, total) {
    if (!Array.isArray(records)) {
      return;
    }
    this._recordsTotal = coreuiTableUtils.isNumeric(total) ? parseInt(total) : records.length;
    coreuiTablePrivate.setRecords(this, records);
    if (records.length > 0) {
      this._recordsNumber = this._page === 1 ? 1 : (this._page - 1) * this._recordsPerPage + 1;
    }
    var recordsElements = coreuiTableRender.renderRecords(this, this._records);
    var tableBody = coreuiTableElements.getTableTbody(this.getId());
    tableBody.html('');
    $.each(recordsElements, function (key, recordElement) {
      tableBody.append(recordElement);
    });
    coreuiTablePrivate._trigger(this, 'records_show', [this]);
  },
  /**
   * Получение количества строк
   * @return {number}
   */
  getRecordsCount: function getRecordsCount() {
    var count = 0;
    if (this._isRecordsRequest) {
      count = this._recordsTotal;
    } else {
      $.each(this._records, function (key, record) {
        if (record.show) {
          count++;
        }
      });
    }
    return count;
  },
  /**
   * Раскрытие / скрытие дополнительных данных строки
   * @param {number}                                   recordIndex
   * @param {HTMLElement|jQuery|string|Array|function} content
   * @param {boolean}                                  isRebuild - true default
   */
  expandRecordContent: function expandRecordContent(recordIndex, content, isRebuild) {
    var recordElement = coreuiTableElements.getTrByIndex(this.getId(), recordIndex);
    var recordExpanded = coreuiTableElements.getExpandRow(recordElement);
    if (recordElement.hasClass('record-expanded')) {
      if (recordExpanded) {
        if (isRebuild === undefined || isRebuild) {
          coreuiTableElements.removeExpandRow(recordExpanded);
        } else {
          coreuiTableElements.hideExpandRow(recordExpanded);
        }
      }
      recordElement.removeClass('record-expanded');
      coreuiTablePrivate._trigger(this, 'record_expand_hide', [recordIndex]);
    } else {
      if (recordExpanded) {
        coreuiTableElements.showExpandRow(recordExpanded);
        recordElement.addClass('record-expanded');
        coreuiTablePrivate._trigger(this, 'record_expand_show', [recordIndex]);
      } else {
        if (typeof content === 'function') {
          var callbackResult = content();
          if (callbackResult instanceof Promise) {
            var that = this;
            callbackResult.then(function (result) {
              coreuiTableElements.addExpandRow(that, recordElement, result);
            })["catch"](function () {
              coreuiTableElements.addExpandRow(that, recordElement, '');
            });
          } else {
            coreuiTableElements.addExpandRow(this, recordElement, callbackResult);
          }
        } else {
          coreuiTableElements.addExpandRow(this, recordElement, content);
        }
      }
    }
  },
  /**
   * Раскрытие / скрытие дополнительных данных строки
   * @param {number}  recordIndex
   * @param {string}  url
   * @param {boolean} isRebuild
   */
  expandRecordUrl: function expandRecordUrl(recordIndex, url, isRebuild) {
    var that = this;
    this.expandRecordContent(recordIndex, function () {
      that.lock();
      return new Promise(function (resolve, reject) {
        $.ajax({
          method: 'get',
          url: url,
          success: function success(response, textStatus, xhr) {
            var result = response;
            if (typeof response === 'string') {
              if (String(xhr.getResponseHeader('Content-Type')).indexOf('application/json') === 0) {
                try {
                  result = JSON.parse(response);
                } catch (e) {
                  console.warn(e);
                }
              }
            }
            resolve(result);
          },
          error: function error(xhr, textStatus, errorThrown) {
            reject(xhr, textStatus, errorThrown);
          },
          complete: function complete(xhr, textStatus) {
            that.unlock();
          }
        });
      });
    }, isRebuild);
  }
};

var coreuiTable$1 = {
  columns: {},
  controls: {},
  filters: {},
  search: {},
  lang: {},
  _instances: {},
  _settings: {
    lang: 'ru'
  },
  /**
   * @param {object} options
   * @returns {CoreUI.table.instance}
   */
  create: function create(options) {
    var instance = $.extend(true, {}, coreuiTableInstance);
    instance._init(options instanceof Object ? options : {});
    var tableId = instance.getId();
    this._instances[tableId] = instance;
    return instance;
  },
  /**
   * @param {string} id
   * @returns {CoreUI.table.instance|null}
   */
  get: function get(id) {
    if (!this._instances.hasOwnProperty(id)) {
      return null;
    }
    if (!$('#coreui-table-' + id)[0]) {
      delete this._instances[id];
      return null;
    }
    return this._instances[id];
  },
  /**
   * Установка настроек
   * @param {object} settings
   */
  setSettings: function setSettings(settings) {
    this._settings = $.extend(true, {}, this._settings, settings);
  },
  /**
   * Получение значения настройки
   * @param {string} name
   */
  getSetting: function getSetting(name) {
    var value = null;
    if (this._settings.hasOwnProperty(name)) {
      value = this._settings[name];
    }
    return value;
  }
};

coreuiTable$1.lang.ru = {
  "emptyRecords": "Нет записей",
  "loading": "Загрузка...",
  "total": "Всего",
  "all": "Все",
  "complete": "Применить",
  "search": "Искать",
  "clear": "Очистить"
};

coreuiTable$1.lang.ru = {
  "emptyRecords": "No records",
  "loading": "Loading...",
  "total": "Total",
  "all": "All",
  "complete": "Complete",
  "search": "Search",
  "clear": "Clear"
};

coreuiTable$1.controls.link = {
  _id: null,
  _table: null,
  _options: {
    id: null,
    type: 'link',
    href: null,
    content: null,
    onClick: null,
    attr: null
  },
  /**
   * Инициализация
   * @param {CoreUI.table.instance} table
   * @param {object} options
   */
  init: function init(table, options) {
    this._options = $.extend({}, this._options, options);
    this._table = table;
    this._id = this._options.hasOwnProperty('id') && typeof this._options.id === 'string' && this._options.id ? this._options.id : coreuiTableUtils.hashCode();
  },
  /**
   * Инициализация событий связанных с элементом управления
   */
  initEvents: function initEvents() {
    var that = this;
    if (typeof this._options.onClick === 'function' || typeof this._options.onClick === 'string') {
      var control = coreuiTableElements.getControl(this._table.getId(), this.getId());
      $('a', control).click(function (event) {
        if (typeof that._options.onClick === 'function') {
          return that._options.onClick(event, that._table);
        } else if (typeof that._options.onClick === 'string') {
          return new Function(that._options.onClick)();
        }
      });
    }
  },
  /**
   * Получение ID элемента управления
   * @returns {string}
   */
  getId: function getId() {
    return this._id;
  },
  /**
   * Формирование контента для размещения на странице
   * @returns {string}
   */
  render: function render() {
    var attributes = [];
    if (_typeof(this._options.attr) === 'object') {
      $.each(this._options.attr, function (name, value) {
        attributes.push(name + '="' + value + '"');
      });
    }
    return ejs.render(tpl['controls/link.html'], {
      href: this._options.href,
      content: this._options.content,
      attr: attributes.length > 0 ? ' ' + attributes.join(' ') : ''
    });
  }
};

coreuiTable$1.controls.button = {
  _id: null,
  _table: null,
  _options: {
    id: null,
    type: 'button',
    content: null,
    onClick: null,
    attr: null
  },
  /**
   * Инициализация
   * @param {CoreUI.table.instance} table
   * @param {object} options
   */
  init: function init(table, options) {
    this._options = $.extend({}, this._options, options);
    this._table = table;
    this._id = this._options.hasOwnProperty('id') && typeof this._options.id === 'string' && this._options.id ? this._options.id : coreuiTableUtils.hashCode();
  },
  /**
   * Инициализация событий связанных с элементом управления
   */
  initEvents: function initEvents() {
    var that = this;
    if (typeof this._options.onClick === 'function' || typeof this._options.onClick === 'string') {
      var control = coreuiTableElements.getControl(this._table.getId(), this.getId());
      $('button', control).click(function (event) {
        if (typeof that._options.onClick === 'function') {
          that._options.onClick(event, that._table);
        } else if (typeof that._options.onClick === 'string') {
          new Function(that._options.onClick)();
        }
      });
    }
  },
  /**
   * Получение ID элемента управления
   * @returns {string}
   */
  getId: function getId() {
    return this._id;
  },
  /**
   * Формирование контента для размещения на странице
   * @returns {string}
   */
  render: function render() {
    var attributes = [];
    if (coreuiTableUtils.isObject(this._options.attr)) {
      $.each(this._options.attr, function (name, value) {
        attributes.push(name + '="' + value + '"');
      });
    }
    return ejs.render(tpl['controls/button.html'], {
      content: this._options.content,
      attr: attributes.length > 0 ? ' ' + attributes.join(' ') : ''
    });
  }
};

coreuiTable$1.controls.dropdown = {
  _id: null,
  _table: null,
  _options: {
    id: null,
    type: 'dropdown',
    content: null,
    items: null,
    attr: {
      "class": 'btn btn-primary'
    }
  },
  /**
   * Инициализация
   * @param {CoreUI.table.instance} table
   * @param {object} options
   */
  init: function init(table, options) {
    this._options = $.extend({}, this._options, options);
    this._table = table;
    this._id = this._options.hasOwnProperty('id') && typeof this._options.id === 'string' && this._options.id ? this._options.id : coreuiTableUtils.hashCode();
    if (Array.isArray(this._options.items)) {
      $.each(this._options.items, function (key, item) {
        if (coreuiTableUtils.isObject(item) && typeof item.type === 'string') {
          item.id = coreuiTableUtils.hashCode();
        }
      });
    }
  },
  /**
   * Получение параметров
   * @returns {object}
   */
  getOptions: function getOptions() {
    return $.extend(true, {}, this._options);
  },
  /**
   * Инициализация событий связанных с элементом управления
   */
  initEvents: function initEvents() {
    var that = this;
    var options = this.getOptions();
    if (Array.isArray(options.items)) {
      $.each(options.items, function (key, item) {
        if (coreuiTableUtils.isObject(item) && typeof item.type === 'string') {
          if (item.type === 'button') {
            if (item.hasOwnProperty('content') && item.hasOwnProperty('onClick') && ['string', 'function'].indexOf(_typeof(item.onClick)) >= 0 && typeof item.content === 'string') {
              var control = coreuiTableElements.getControl(that._table.getId(), that.getId());
              $('button#btn-dropdown-' + item.id, control).click(function (event) {
                if (typeof item.onClick === 'function') {
                  item.onClick(event, that._table);
                } else if (typeof item.onClick === 'string') {
                  new Function(item.onClick)();
                }
              });
            }
          }
        }
      });
    }
  },
  /**
   * Получение ID элемента управления
   * @returns {string}
   */
  getId: function getId() {
    return this._id;
  },
  /**
   * Формирование контента для размещения на странице
   * @returns {string}
   */
  render: function render() {
    var options = this.getOptions();
    var items = [];
    var attributes = [];
    if (Array.isArray(options.items)) {
      $.each(options.items, function (key, item) {
        if (coreuiTableUtils.isObject(item) && typeof item.type === 'string') {
          if (item.type === 'link') {
            if (item.hasOwnProperty('link') && item.hasOwnProperty('content') && typeof item.link === 'string' && typeof item.content === 'string') {
              items.push({
                type: 'link',
                link: item.link,
                content: item.content
              });
            }
          } else if (item.type === 'button') {
            if (item.hasOwnProperty('content') && item.hasOwnProperty('onClick') && typeof item.content === 'string' && ['string', 'function'].indexOf(_typeof(item.onClick)) >= 0) {
              items.push({
                type: 'button',
                id: item.id,
                content: item.content
              });
            }
          } else if (item.type === 'divider') {
            items.push({
              type: 'divider'
            });
          }
        }
      });
    }
    if (coreuiTableUtils.isObject(options.attr)) {
      if (options.attr.hasOwnProperty('class') && ['string', 'number'].indexOf(_typeof(options.attr["class"])) >= 0) {
        options.attr["class"] += ' dropdown-toggle';
      }
      if (options.attr.hasOwnProperty('type')) {
        delete options.attr.type;
      }
      if (options.attr.hasOwnProperty('id')) {
        delete options.attr.id;
      }
      if (options.attr.hasOwnProperty('data-bs-toggle')) {
        delete options.attr['data-bs-toggle'];
      }
      $.each(options.attr, function (name, value) {
        attributes.push(name + '="' + value + '"');
      });
    }
    return ejs.render(tpl['controls/dropdown.html'], {
      content: options.content,
      position: options.hasOwnProperty('position') && typeof options.position === 'string' ? options.position : 'end',
      attr: attributes.length > 0 ? ' ' + attributes.join(' ') : '',
      items: items
    });
  }
};

coreuiTable$1.controls.button_group = {
  _id: null,
  _table: null,
  _options: {
    id: null,
    type: 'button_group',
    content: null,
    onClick: null,
    attr: null
  },
  _link: {
    attr: {
      "class": 'btn btn-secondary'
    }
  },
  _button: {
    attr: {
      "class": 'btn btn-secondary'
    }
  },
  _dropdown: {
    attr: {
      "class": 'btn btn-secondary'
    }
  },
  /**
   * Инициализация
   * @param {CoreUI.table.instance} table
   * @param {object} options
   */
  init: function init(table, options) {
    this._options = $.extend({}, this._options, options);
    this._table = table;
    this._id = this._options.hasOwnProperty('id') && typeof this._options.id === 'string' && this._options.id ? this._options.id : coreuiTableUtils.hashCode();
    if (Array.isArray(this._options.buttons)) {
      $.each(this._options.buttons, function (key, button) {
        if (coreuiTableUtils.isObject(button) && typeof button.type === 'string') {
          button.id = coreuiTableUtils.hashCode();
          if (button.type === 'dropdown' && Array.isArray(button.items)) {
            $.each(button.items, function (key, item) {
              if (coreuiTableUtils.isObject(item) && typeof item.type === 'string') {
                item.id = coreuiTableUtils.hashCode();
              }
            });
          }
        }
      });
    }
  },
  /**
   * Получение параметров
   * @returns {object}
   */
  getOptions: function getOptions() {
    return $.extend(true, {}, this._options);
  },
  /**
   * Инициализация событий связанных с элементом управления
   */
  initEvents: function initEvents() {
    var that = this;
    var options = this.getOptions();
    if (Array.isArray(options.buttons)) {
      var control = coreuiTableElements.getControl(this._table.getId(), this._id);
      $.each(options.buttons, function (key, button) {
        if (coreuiTableUtils.isObject(button) && typeof button.type === 'string') {
          if (button.type === 'button') {
            if (button.hasOwnProperty('content') && button.hasOwnProperty('onClick') && ['string', 'function'].indexOf(_typeof(button.onClick)) >= 0 && typeof button.content === 'string') {
              $('button#btn-' + button.id, control).click(function (event) {
                if (typeof button.onClick === 'function') {
                  button.onClick(event, that._table);
                } else if (typeof button.onClick === 'string') {
                  new Function(button.onClick)();
                }
              });
            }
          } else if (button.type === 'dropdown' && Array.isArray(button.items)) {
            $.each(button.items, function (key, item) {
              if (coreuiTableUtils.isObject(item) && typeof item.type === 'string') {
                if (item.hasOwnProperty('content') && item.hasOwnProperty('onClick') && ['string', 'function'].indexOf(_typeof(item.onClick)) >= 0 && typeof item.content === 'string') {
                  $('button#btn-dropdown-' + item.id, control).click(function (event) {
                    if (typeof item.onClick === 'function') {
                      item.onClick(event, that._table);
                    } else if (typeof item.onClick === 'string') {
                      new Function(item.onClick)();
                    }
                  });
                }
              }
            });
          }
        }
      });
    }
  },
  /**
   * Получение ID элемента управления
   * @returns {string}
   */
  getId: function getId() {
    return this._id;
  },
  /**
   * Формирование контента для размещения на странице
   * @returns {string}
   */
  render: function render() {
    var options = this.getOptions();
    var buttons = [];
    var that = this;
    if (Array.isArray(options.buttons)) {
      $.each(options.buttons, function (key, button) {
        if (coreuiTableUtils.isObject(button) && typeof button.type === 'string') {
          if (button.type === 'link') {
            if (button.hasOwnProperty('link') && button.hasOwnProperty('content') && typeof button.link === 'string' && typeof button.content === 'string') {
              var attributes = [];
              if (coreuiTableUtils.isObject(button.attr)) {
                button.attr = {};
              }
              if (button.attr.hasOwnProperty('href')) {
                delete button.attr.href;
              }
              if (!button.attr.hasOwnProperty('class')) {
                button.attr["class"] = that._link.attr["class"];
              }
              $.each(button.attr, function (name, value) {
                attributes.push(name + '="' + value + '"');
              });
              buttons.push({
                type: 'link',
                link: button.link,
                content: button.content,
                attr: attributes
              });
            }
          } else if (button.type === 'button') {
            if (button.hasOwnProperty('content') && button.hasOwnProperty('onClick') && typeof button.content === 'string' && ['string', 'function'].indexOf(_typeof(button.onClick)) >= 0) {
              var _attributes = [];
              if (coreuiTableUtils.isObject(button.attr)) {
                button.attr = {};
              }
              if (button.attr.hasOwnProperty('type')) {
                delete button.attr.type;
              }
              if (button.attr.hasOwnProperty('id')) {
                delete button.attr.id;
              }
              if (!button.attr.hasOwnProperty('class')) {
                button.attr["class"] = that._button.attr["class"];
              }
              $.each(button.attr, function (name, value) {
                _attributes.push(name + '="' + value + '"');
              });
              buttons.push({
                type: 'button',
                link: button.link,
                id: button.id,
                content: button.content,
                attr: _attributes
              });
            }
          } else if (button.type === 'dropdown') {
            if (Array.isArray(button.items)) {
              var _attributes2 = [];
              var items = [];
              $.each(button.items, function (key, item) {
                if (coreuiTableUtils.isObject(item) && typeof item.type === 'string') {
                  if (item.type === 'link') {
                    if (item.hasOwnProperty('link') && item.hasOwnProperty('content') && typeof item.link === 'string' && typeof item.content === 'string') {
                      items.push({
                        type: 'link',
                        link: item.link,
                        content: item.content
                      });
                    }
                  } else if (item.type === 'button') {
                    if (item.hasOwnProperty('content') && item.hasOwnProperty('onClick') && typeof item.content === 'string' && ['string', 'function'].indexOf(_typeof(item.onClick)) >= 0) {
                      items.push({
                        type: 'button',
                        id: item.id,
                        content: item.content
                      });
                    }
                  } else if (item.type === 'divider') {
                    items.push({
                      type: 'divider'
                    });
                  }
                }
              });
              if (coreuiTableUtils.isObject(button.attr)) {
                button.attr = {};
              }
              if (button.attr.hasOwnProperty('type')) {
                delete button.attr.type;
              }
              if (button.attr.hasOwnProperty('id')) {
                delete button.attr.id;
              }
              if (!button.attr.hasOwnProperty('class')) {
                button.attr["class"] = that._dropdown.attr["class"];
              }
              if (button.attr.hasOwnProperty('class') && ['string', 'number'].indexOf(_typeof(button.attr["class"])) >= 0) {
                button.attr["class"] += ' dropdown-toggle';
              }
              $.each(button.attr, function (name, value) {
                _attributes2.push(name + '="' + value + '"');
              });
              buttons.push({
                type: 'dropdown',
                content: button.content,
                position: button.hasOwnProperty('position') && typeof button.position === 'string' ? button.position : 'end',
                attr: _attributes2,
                items: items
              });
            }
          }
        }
      });
    }
    return ejs.render(tpl['controls/button_group.html'], {
      buttons: buttons
    });
  }
};

coreuiTable$1.controls.custom = {
  _id: null,
  _table: null,
  _options: {
    id: null,
    type: 'custom',
    content: null
  },
  /**
   * Инициализация
   * @param {CoreUI.table.instance} table
   * @param {object} options
   */
  init: function init(table, options) {
    this._options = $.extend({}, this._options, options);
    this._table = table;
    this._id = this._options.hasOwnProperty('id') && typeof this._options.id === 'string' && this._options.id ? this._options.id : coreuiTableUtils.hashCode();
  },
  /**
   * Инициализация событий связанных с элементом управления
   */
  initEvents: function initEvents() {},
  /**
   * Получение ID элемента управления
   * @returns {string}
   */
  getId: function getId() {
    return this._id;
  },
  /**
   * Формирование контента для размещения на странице
   * @returns {string|HTMLElement|jQuery}
   */
  render: function render() {
    if (typeof this._options.content === 'string') {
      return this._options.content;
    } else if (typeof this._options.content === 'function') {
      return this._options.content();
    }
  }
};

coreuiTable$1.controls.page_size = {
  _id: null,
  _table: null,
  _options: {
    id: null,
    type: 'page_size',
    attr: {
      "class": 'form-select'
    },
    list: [25, 50, 100, 1000]
  },
  /**
   * Инициализация
   * @param {CoreUI.table.instance} table
   * @param {object}                options
   */
  init: function init(table, options) {
    if (options.hasOwnProperty('attr') && coreuiTableUtils.isObject(options.attr)) {
      options.attr = coreuiTableUtils.mergeAttr(this._options.attr, options.attr);
    }
    this._options = $.extend({}, this._options, options);
    this._table = table;
    this._id = this._options.hasOwnProperty('id') && typeof this._options.id === 'string' && this._options.id ? this._options.id : coreuiTableUtils.hashCode();
    if (!Array.isArray(this._options.list)) {
      this._options.list = [];
    }
    if (this._options.list.indexOf(this._table._recordsPerPage) < 0) {
      this._options.list.unshift(this._table._recordsPerPage);
    }
  },
  /**
   * Инициализация событий связанных с элементом управления
   */
  initEvents: function initEvents() {
    var that = this;
    var control = coreuiTableElements.getControl(this._table.getId(), this.getId());
    var selectPageSize = $('select', control);
    selectPageSize.change(function () {
      that._table._page = 1;
      that._table.setPageSize(Number(selectPageSize.val()));
      that._table.reload();
    });
    this._table.on('page_size_update', function () {
      selectPageSize.val(that._table._recordsPerPage);
    });
  },
  /**
   * Получение ID элемента управления
   * @returns {string}
   */
  getId: function getId() {
    return this._id;
  },
  /**
   * Формирование контента для размещения на странице
   * @returns {string}
   */
  render: function render() {
    var attributes = [];
    if (coreuiTableUtils.isObject(this._options.attr)) {
      $.each(this._options.attr, function (name, value) {
        attributes.push(name + '="' + value + '"');
      });
    }
    return ejs.render(tpl['controls/page-size.html'], {
      recordsPerPageList: this._options.list,
      recordsPerPage: this._table._recordsPerPage,
      attr: attributes.length > 0 ? ' ' + attributes.join(' ') : '',
      lang: this._table.getLang()
    });
  }
};

coreuiTable$1.controls.page_jump = {
  _id: null,
  _table: null,
  _options: {
    id: null,
    type: 'page_jump',
    attr: {
      "class": 'input-group'
    }
  },
  /**
   * Инициализация
   * @param {CoreUI.table.instance} table
   * @param {object} options
   */
  init: function init(table, options) {
    if (options.hasOwnProperty('attr') && coreuiTableUtils.isObject(options.attr)) {
      options.attr = coreuiTableUtils.mergeAttr(this._options.attr, options.attr);
    }
    this._options = $.extend({}, this._options, options);
    this._table = table;
    this._id = this._options.hasOwnProperty('id') && typeof this._options.id === 'string' && this._options.id ? this._options.id : coreuiTableUtils.hashCode();
  },
  /**
   * Инициализация событий связанных с элементом управления
   */
  initEvents: function initEvents() {
    var that = this;
    var control = coreuiTableElements.getControl(this._table.getId(), this.getId());
    var input = $('input', control);
    var button = $('button', control);
    if (button[0]) {
      button.click(function () {
        that._table.goPage(input.val());
      });
      input.keyup(function (event) {
        if (event.key === 'Enter' || event.keyCode === 13) {
          that._table.goPage(input.val());
        }
      });
    }
  },
  /**
   * Получение ID элемента управления
   * @returns {string}
   */
  getId: function getId() {
    return this._id;
  },
  /**
   * Формирование контента для размещения на странице
   * @returns {string}
   */
  render: function render() {
    var attributes = [];
    if (coreuiTableUtils.isObject(this._options.attr)) {
      $.each(this._options.attr, function (name, value) {
        attributes.push(name + '="' + value + '"');
      });
    }
    return ejs.render(tpl['controls/page-jump.html'], {
      recordsPerPageList: this._options.list,
      recordsPerPage: this._table._recordsPerPage,
      attr: attributes.length > 0 ? ' ' + attributes.join(' ') : '',
      lang: this._table.getLang()
    });
  }
};

coreuiTable$1.controls.pages = {
  _id: null,
  _table: null,
  _options: {
    show: {
      prev: true,
      next: true
    },
    count: 3,
    attr: {
      "class": 'pagination mb-0'
    }
  },
  /**
   * Инициализация
   * @param {CoreUI.table.instance} table
   * @param {object} options
   */
  init: function init(table, options) {
    if (options.hasOwnProperty('attr') && coreuiTableUtils.isObject(options.attr)) {
      options.attr = coreuiTableUtils.mergeAttr(this._options.attr, options.attr);
    }
    this._options = $.extend({}, this._options, options);
    this._table = table;
    this._id = coreuiTableUtils.hashCode();
  },
  /**
   * Инициализация событий связанных с элементом управления
   */
  initEvents: function initEvents() {
    var that = this;
    var control = coreuiTableElements.getControl(this._table.getId(), this.getId());
    this._initEvents();
    this._table.on('records_show', function () {
      control.html(that.render());
      that._initEvents();
    });
  },
  /**
   * Получение ID элемента управления
   * @returns {string}
   */
  getId: function getId() {
    return this._id;
  },
  /**
   * Формирование контента для размещения на странице
   * @returns {string}
   */
  render: function render() {
    var attributes = [];
    var showPrev = !!this._options.show.prev;
    var showNext = !!this._options.show.next;
    var showDividerStart = false;
    var showDividerEnd = false;
    var showPageFirst = false;
    var showPageLast = false;
    var pages = [];
    var pagesTotal = this._table._recordsTotal > 0 && this._table._recordsPerPage > 0 ? Math.ceil(this._table._recordsTotal / this._table._recordsPerPage) : 1;
    if (this._table._recordsTotal > 0 && this._options.count > 0 && coreuiTableUtils.isNumeric(this._options.count)) {
      var count = Math.min(this._options.count, pagesTotal);
      var countHalf = Math.max(0, Math.floor(count / 2));
      if (count % 2 === 0) {
        countHalf -= 1;
      }
      var start = this._table._page > 1 ? Math.max(1, this._table._page - countHalf) : this._table._page;
      if (start + count > pagesTotal) {
        start = pagesTotal - (count - 1);
      }
      for (var i = 0; i < count; i++) {
        pages.push(start + i);
      }
    } else {
      if (this._options.count > 0 && this._table._page > 1) {
        pages.push(this._table._page);
      }
    }
    if (pages.length > 0) {
      if (pages[0] >= 2) {
        showPageFirst = true;
      }
      if (pages[0] >= 3) {
        showDividerStart = true;
      }
      if (pages[pages.length - 1] + 1 < pagesTotal) {
        showDividerEnd = true;
      }
      if (pages[pages.length - 1] < pagesTotal) {
        showPageLast = true;
      }
    }
    if (coreuiTableUtils.isObject(this._options.attr)) {
      $.each(this._options.attr, function (name, value) {
        attributes.push(name + '="' + value + '"');
      });
    }
    return ejs.render(tpl['controls/pages.html'], {
      currentPage: this._table._page,
      isActivePrev: this._table._page > 1,
      isActiveNext: this._table._page < pagesTotal,
      pagesTotal: pagesTotal,
      showPrev: showPrev,
      showPageFirst: showPageFirst,
      showDividerStart: showDividerStart,
      pages: pages,
      showDividerEnd: showDividerEnd,
      showPageLast: showPageLast,
      showNext: showNext,
      attr: attributes.length > 0 ? ' ' + attributes.join(' ') : '',
      lang: this._table.getLang()
    });
  },
  /**
   * Инициализация событий на элементах
   * @private
   */
  _initEvents: function _initEvents() {
    var that = this;
    var control = coreuiTableElements.getControl(this._table.getId(), this.getId());
    var btnPrev = $('.coreui-table__page_prev', control);
    if (btnPrev[0]) {
      if (that._table._page <= 1) {
        btnPrev.addClass('disabled');
      }
      btnPrev.click(function () {
        if (that._table._page > 1) {
          that._table.prevPage();
        }
      });
    }
    var btnNext = $('.coreui-table__page_next', control);
    if (btnNext[0]) {
      btnNext.click(function () {
        that._table.nextPage();
      });
    }
    var pages = $('.coreui-table__page', control);
    if (pages[0]) {
      pages.click(function () {
        var page = Number($.trim($(this).text()));
        if (page > 0) {
          that._table.goPage(page);
        }
      });
    }
  }
};

coreuiTable$1.controls.total = {
  _id: null,
  _table: null,
  _options: {
    attr: {
      "class": 'px-1'
    }
  },
  /**
   * Инициализация
   * @param {CoreUI.table.instance} table
   * @param {object}                options
   */
  init: function init(table, options) {
    if (options.hasOwnProperty('attr') && coreuiTableUtils.isObject(options.attr)) {
      options.attr = coreuiTableUtils.mergeAttr(this._options.attr, options.attr);
    }
    this._options = $.extend({}, this._options, options);
    this._table = table;
    this._id = coreuiTableUtils.hashCode();
  },
  /**
   * Инициализация событий связанных с элементом управления
   */
  initEvents: function initEvents() {
    var that = this;
    var control = coreuiTableElements.getControl(this._table.getId(), this.getId());
    this._table.on('records_show', function () {
      control.html(that.render());
    });
  },
  /**
   * Получение ID элемента управления
   * @returns {string}
   */
  getId: function getId() {
    return this._id;
  },
  /**
   * Формирование контента для размещения на странице
   * @returns {string}
   */
  render: function render() {
    var attributes = [];
    if (coreuiTableUtils.isObject(this._options.attr)) {
      $.each(this._options.attr, function (name, value) {
        attributes.push(name + '="' + value + '"');
      });
    }
    return ejs.render(tpl['controls/total.html'], {
      recordsTotal: this._table._recordsTotal,
      attr: attributes.length > 0 ? ' ' + attributes.join(' ') : '',
      lang: this._table.getLang()
    });
  }
};

coreuiTable$1.controls.search = {
  _id: null,
  _table: null,
  _options: {
    btn: {
      attr: {
        "class": 'btn btn-secondary'
      },
      content: null
    },
    btnClear: {
      content: "<i class=\"bi bi-x\"></i>",
      attr: {
        "class": 'btn btn-outline-secondary'
      }
    },
    btnComplete: {
      attr: {
        "class": 'btn btn-primary'
      },
      content: null
    }
  },
  /**
   * Инициализация
   * @param {CoreUI.table.instance} table
   * @param {object} options
   */
  init: function init(table, options) {
    this._options = $.extend(true, {}, this._options, options);
    this._table = table;
    this._id = coreuiTableUtils.hashCode();
    if (!coreuiTableUtils.isObject(this._options.btn)) {
      this._options.btn = {};
    }
    if (!this._options.btn.hasOwnProperty('content') || typeof this._options.btn.content !== 'string') {
      this._options.btn.content = table.getLang().search;
    }
    if (!coreuiTableUtils.isObject(this._options.btnClear)) {
      this._options.btnClear = {};
    }
    if (!this._options.btnClear.hasOwnProperty('content') || typeof this._options.btnClear.content !== 'string') {
      this._options.btnClear.content = table.getLang().clear;
    }
    if (!coreuiTableUtils.isObject(this._options.btnComplete)) {
      this._options.btnComplete = {};
    }
    if (!this._options.btnComplete.hasOwnProperty('content') || typeof this._options.btnComplete.content !== 'string') {
      this._options.btnComplete.content = table.getLang().search;
    }
  },
  /**
   * Инициализация событий связанных с элементом управления
   */
  initEvents: function initEvents() {
    var that = this;
    var control = coreuiTableElements.getControl(this._table.getId(), this.getId());
    var buttonToggle = $('button.btn-search-toggle', control);
    var buttonClear = $('button.btn-clear', control);
    buttonToggle.click(function () {
      var container = coreuiTableElements.getSearchContainer(that._table.getId());
      var columnsContainer = coreuiTableElements.getColumnsContainer(that._table.getId());
      if (columnsContainer[0]) {
        columnsContainer.hide();
      }
      if (container[0]) {
        container.fadeToggle('fast');
      } else {
        var controls = [];
        var controlsEvents = [];
        var btnCompleteAttr = [];
        var btnCompleteContent = '';
        var wrapper = coreuiTableElements.getWrapper(that._table.getId());
        var tableOptions = that._table.getOptions();
        var labelWidth = tableOptions.search.hasOwnProperty('labelWidth') && tableOptions.search.labelWidth ? tableOptions.search.labelWidth : 160;
        $.each(that._table._search, function (key, control) {
          var options = control.getOptions();
          if (options.hasOwnProperty('field') && typeof options.field === 'string' && options.field) {
            controls.push({
              label: options.hasOwnProperty('label') && typeof options.label === 'string' ? options.label : '',
              description: options.hasOwnProperty('description') && typeof options.description === 'string' ? options.description : '',
              prefix: options.hasOwnProperty('prefix') && typeof options.prefix === 'string' ? options.prefix : '',
              id: control.getId(),
              content: control.render()
            });
            if (control.hasOwnProperty('initEvents') && typeof control.initEvents === 'function') {
              controlsEvents.push({
                event: control.initEvents,
                control: control
              });
            }
          }
        });
        if (!coreuiTableUtils.isObject(that._options.btnComplete)) {
          that._options.btnComplete = {};
        }
        if (!coreuiTableUtils.isObject(that._options.btnComplete.attr)) {
          that._options.btnComplete.attr = {};
        }
        if (that._options.btnComplete.attr.hasOwnProperty('type')) {
          delete that._options.btnComplete.attr.type;
        }
        if (!that._options.btnComplete.attr.hasOwnProperty('class') || typeof that._options.btnComplete.attr["class"] !== 'string') {
          that._options.btnComplete.attr["class"] = 'btn-complete';
        } else {
          that._options.btnComplete.attr["class"] += ' btn-complete';
        }
        if (coreuiTableUtils.isObject(that._options.btnComplete.attr)) {
          $.each(that._options.btnComplete.attr, function (name, value) {
            btnCompleteAttr.push(name + '="' + value + '"');
          });
        }
        if (typeof that._options.btnComplete.content === 'string') {
          btnCompleteContent = that._options.btnComplete.content;
        }
        var content = ejs.render(tpl['controls/search-container.html'], {
          labelWidth: labelWidth + (typeof labelWidth === 'number' ? 'px' : ''),
          controls: controls,
          btnCompleteAttr: btnCompleteAttr.length > 0 ? ' ' + btnCompleteAttr.join(' ') : '',
          btnCompleteContent: btnCompleteContent
        });
        wrapper.prepend(content);
        if (controlsEvents.length > 0) {
          $.each(controlsEvents, function (key, controlsEvent) {
            controlsEvent.event.apply(controlsEvent.control);
          });
        }
        container = $('> .coreui-table__search', wrapper);
        $('.btn-complete', container).click(function () {
          that._table.searchRecords();
          container.fadeOut('fast');
        });
      }
    });
    buttonClear.click(function () {
      that._table.searchClear();
      var container = coreuiTableElements.getSearchContainer(that._table.getId());
      if (container[0]) {
        container.fadeOut('fast');
      }
    });
    this._table.on('search_change', function (searchData) {
      var buttonClear = $('button.btn-clear', control);
      if (searchData.length > 0) {
        if (!buttonClear[0]) {
          $(that._renderBtnClear()).insertAfter(buttonToggle);
          $('button.btn-clear', control).click(function () {
            that._table.searchClear();
            var container = coreuiTableElements.getSearchContainer(that._table.getId());
            if (container[0]) {
              container.fadeOut('fast');
            }
          });
        }
      } else {
        buttonClear.remove();
        var container = coreuiTableElements.getSearchContainer(that._table.getId());
        if (container[0]) {
          container.fadeOut('fast');
        }
      }
    });
  },
  /**
   * Получение ID элемента управления
   * @returns {string}
   */
  getId: function getId() {
    return this._id;
  },
  /**
   * Формирование контента для размещения на странице
   * @returns {string}
   */
  render: function render() {
    var btnAttr = [];
    var btnContent = '';
    var btnClear = '';
    if (!coreuiTableUtils.isObject(this._options.btn)) {
      this._options.btn = {};
    }
    if (!coreuiTableUtils.isObject(this._options.btn.attr)) {
      this._options.btn.attr = {};
    }
    if (!this._options.btn.attr.hasOwnProperty('class') || typeof this._options.btn.attr["class"] !== 'string') {
      this._options.btn.attr["class"] = 'btn-search-toggle';
    } else {
      this._options.btn.attr["class"] += ' btn-search-toggle';
    }
    $.each(this._options.btn.attr, function (name, value) {
      btnAttr.push(name + '="' + value + '"');
    });
    if (typeof this._options.btn.content === 'string') {
      btnContent = this._options.btn.content;
    }
    if (this._table.getSearchData().length > 0) {
      btnClear = this._renderBtnClear();
    }
    return ejs.render(tpl['controls/search.html'], {
      btnContent: btnContent,
      btnAttr: btnAttr.length > 0 ? ' ' + btnAttr.join(' ') : '',
      btnClear: btnClear
    });
  },
  /**
   * Рендер кнопки отмены
   * @private
   */
  _renderBtnClear: function _renderBtnClear() {
    var attributes = [];
    var content = '';
    if (!coreuiTableUtils.isObject(this._options.btnClear)) {
      this._options.btnClear = {};
    }
    if (!coreuiTableUtils.isObject(this._options.btnClear.attr)) {
      this._options.btnClear.attr = {};
    }
    if (!this._options.btnClear.attr.hasOwnProperty('class') || typeof this._options.btnClear.attr["class"] !== 'string') {
      this._options.btnClear.attr["class"] = 'btn-clear';
    } else {
      this._options.btnClear.attr["class"] += ' btn-clear';
    }
    $.each(this._options.btnClear.attr, function (name, value) {
      attributes.push(name + '="' + value + '"');
    });
    if (typeof this._options.btnClear.content === 'string') {
      content = this._options.btnClear.content;
    }
    return ejs.render(tpl['controls/search-clear.html'], {
      content: content,
      attr: attributes.length > 0 ? ' ' + attributes.join(' ') : ''
    });
  }
};

coreuiTable$1.controls.columns = {
  _id: null,
  _table: null,
  _options: {
    id: null,
    type: 'columns',
    btn: {
      content: '<i class="bi bi-layout-three-columns"></i>',
      attr: {
        "class": 'btn btn-outline-secondary'
      }
    },
    btnComplete: {
      content: null,
      attr: {
        "class": 'btn btn-primary'
      }
    }
  },
  /**
   * Инициализация
   * @param {CoreUI.table.instance} table
   * @param {object} options
   */
  init: function init(table, options) {
    this._options = $.extend({}, this._options, options);
    this._table = table;
    this._id = this._options.hasOwnProperty('id') && typeof this._options.id === 'string' && this._options.id ? this._options.id : coreuiTableUtils.hashCode();
    if (!coreuiTableUtils.isObject(this._options.btn)) {
      this._options.btn = {};
    }
    if (!coreuiTableUtils.isObject(this._options.btnComplete)) {
      this._options.btnComplete = {};
    }
    if (coreuiTableUtils.isObject(this._options.btnComplete) && typeof this._options.btnComplete.content !== 'string') {
      this._options.btnComplete.content = table.getLang().complete;
    }
  },
  /**
   * Получение параметров
   * @returns {object}
   */
  getOptions: function getOptions() {
    return $.extend(true, {}, this._options);
  },
  /**
   * Инициализация событий связанных с элементом управления
   */
  initEvents: function initEvents() {
    var that = this;
    var options = this.getOptions();
    var control = coreuiTableElements.getControl(this._table.getId(), this._id);
    var button = $('button', control);
    button.click(function () {
      var container = coreuiTableElements.getColumnsContainer(that._table.getId());
      var containerSearch = coreuiTableElements.getSearchContainer(that._table.getId());
      if (containerSearch[0]) {
        containerSearch.hide();
      }
      if (container[0]) {
        container.fadeToggle('fast');
      } else {
        var columns = [];
        var showAll = true;
        var btnCompleteAttr = [];
        var btnCompleteContent = '';
        var wrapper = coreuiTableElements.getWrapper(that._table.getId());
        $.each(that._table._columns, function (key, column) {
          var options = column.getOptions();
          if (options.hasOwnProperty('field') && typeof options.field === 'string' && options.field) {
            var isShow = column.isShow();
            columns.push({
              field: options.field,
              label: options.hasOwnProperty('label') && typeof options.label === 'string' ? options.label : '',
              show: isShow
            });
            if (!isShow) {
              showAll = false;
            }
          }
        });
        if (!coreuiTableUtils.isObject(options.btnComplete)) {
          options.btnComplete = {};
        }
        if (!coreuiTableUtils.isObject(options.btnComplete.attr)) {
          options.btnComplete.attr = {};
        }
        if (options.btnComplete.attr.hasOwnProperty('type')) {
          delete options.btnComplete.attr.type;
        }
        if (!options.btnComplete.attr.hasOwnProperty('class') || typeof options.btnComplete.attr["class"] !== 'string') {
          options.btnComplete.attr["class"] = 'btn-complete';
        } else {
          options.btnComplete.attr["class"] += ' btn-complete';
        }
        if (coreuiTableUtils.isObject(options.btnComplete.attr)) {
          $.each(options.btnComplete.attr, function (name, value) {
            btnCompleteAttr.push(name + '="' + value + '"');
          });
        }
        if (typeof options.btnComplete.content === 'string') {
          btnCompleteContent = options.btnComplete.content;
        }
        var content = ejs.render(tpl['controls/columns-container.html'], {
          showAll: showAll,
          columns: columns,
          btnCompleteAttr: btnCompleteAttr.length > 0 ? ' ' + btnCompleteAttr.join(' ') : '',
          btnCompleteContent: btnCompleteContent,
          lang: that._table.getLang()
        });
        wrapper.prepend(content);
        container = $('> .coreui-table__columns', wrapper);
        $('.coreui-table__check_all input', container).change(function () {
          $('.coreui-table_check-column input', container).prop('checked', $(this).is(":checked"));
        });
        $('.btn-complete', container).click(function () {
          var columns = [];
          $('.coreui-table_check-column input:checked', container).each(function (key, input) {
            columns.push($(input).val());
          });
          that._table.setColumnsShow(columns);
          that._table.refresh();
          container.fadeOut('fast');
        });
      }
    });
  },
  /**
   * Получение ID элемента управления
   * @returns {string}
   */
  getId: function getId() {
    return this._id;
  },
  /**
   * Формирование контента для размещения на странице
   * @returns {string}
   */
  render: function render() {
    var attributes = [];
    if (coreuiTableUtils.isObject(this._options.btn.attr)) {
      $.each(this._options.btn.attr, function (name, value) {
        attributes.push(name + '="' + value + '"');
      });
    }
    return ejs.render(tpl['controls/columns.html'], {
      btnContent: this._options.btn.content,
      btnAttr: attributes.length > 0 ? ' ' + attributes.join(' ') : ''
    });
  }
};

coreuiTable$1.controls.caption = {
  _id: null,
  _table: null,
  _options: {
    id: null,
    type: 'caption',
    title: null,
    description: null,
    value: null
  },
  /**
   * Инициализация
   * @param {CoreUI.table.instance} table
   * @param {object} options
   */
  init: function init(table, options) {
    this._options = $.extend({}, this._options, options);
    this._table = table;
    this._id = this._options.hasOwnProperty('id') && typeof this._options.id === 'string' && this._options.id ? this._options.id : coreuiTableUtils.hashCode();
  },
  /**
   * Инициализация событий связанных с элементом управления
   */
  initEvents: function initEvents() {},
  /**
   * Получение ID элемента управления
   * @returns {string}
   */
  getId: function getId() {
    return this._id;
  },
  /**
   * Формирование контента для размещения на странице
   * @returns {string}
   */
  render: function render() {
    return ejs.render(tpl['controls/caption.html'], {
      title: this._options.title,
      description: this._options.description,
      value: this._options.value
    });
  }
};

coreuiTable$1.filters.clear = {
  _id: null,
  _table: null,
  _options: {
    id: null,
    type: 'clear',
    content: null,
    attr: {
      "class": 'btn btn-secondary'
    }
  },
  /**
   * Инициализация
   * @param {CoreUI.table.instance} table
   * @param {object}                options
   */
  init: function init(table, options) {
    this._options = $.extend(true, {}, this._options, options);
    this._table = table;
    this._id = this._options.hasOwnProperty('id') && typeof this._options.id === 'string' && this._options.id ? this._options.id : coreuiTableUtils.hashCode();
    if (!this._options.hasOwnProperty('content') || typeof this._options.content !== 'string') {
      this._options.content = table.getLang().clear;
    }
  },
  /**
   * Получение параметров
   * @returns {object}
   */
  getOptions: function getOptions() {
    return $.extend(true, {}, this._options);
  },
  /**
   * Получение id
   * @returns {string}
   */
  getId: function getId() {
    return this._id;
  },
  /**
   * Установка значения
   * @param {string} value
   */
  setValue: function setValue(value) {},
  /**
   * Получение значения
   * @returns {null}
   */
  getValue: function getValue() {
    return null;
  },
  /**
   * Инициализация событий
   * @returns {object}
   */
  initEvents: function initEvents() {
    var control = coreuiTableElements.getControl(this._table.getId(), this._id);
    var that = this;
    $('button', control).click(function () {
      that._table.filtersClear();
    });
    this._table.on('filters_change', function (filterData) {
      if (filterData.length > 0) {
        $('button', control).show();
      } else {
        $('button', control).hide();
      }
    });
  },
  /**
   * Формирование контента
   * @returns {string}
   */
  render: function render() {
    var options = this.getOptions();
    if (!coreuiTableUtils.isObject(options.attr)) {
      options.attr = {};
    }
    if (options.attr.hasOwnProperty('type')) {
      delete options.attr.type;
    }
    var filterData = this._table.getFilterData();
    if (filterData.length === 0) {
      if (options.attr.hasOwnProperty('style') && typeof options.attr.style === 'string') {
        options.attr.style += ';display:none;';
      } else {
        options.attr.style = "display:none";
      }
    }
    var attr = [];
    $.each(options.attr, function (name, value) {
      attr.push(name + '="' + value + '"');
    });
    return ejs.render(tpl['filters/clear.html'], {
      attr: attr.length > 0 ? ' ' + attr.join(' ') : '',
      content: options.content ? options.content : ''
    });
  }
};

coreuiTable$1.filters.text = {
  _id: null,
  _table: null,
  _value: null,
  _render: false,
  _options: {
    id: null,
    type: 'text',
    field: null,
    label: null,
    value: null,
    width: 200,
    attr: {
      "class": "form-control"
    },
    btn: {
      attr: {
        "class": "btn btn-outline-secondary border-secondary-subtle"
      },
      content: '<i class="bi bi-search"></i>'
    }
  },
  /**
   * Инициализация
   * @param {CoreUI.table.instance} table
   * @param {object}                options
   */
  init: function init(table, options) {
    this._options = $.extend(true, {}, this._options, options);
    this._table = table;
    this._id = this._options.hasOwnProperty('id') && typeof this._options.id === 'string' && this._options.id ? this._options.id : coreuiTableUtils.hashCode();
    if (this._options.value !== null) {
      this.setValue(this._options.value);
    }
  },
  /**
   * Получение параметров
   * @returns {object}
   */
  getOptions: function getOptions() {
    return $.extend(true, {}, this._options);
  },
  /**
   * Получение id
   * @returns {string}
   */
  getId: function getId() {
    return this._id;
  },
  /**
   * Установка значения
   * @param {string|number|null} value
   */
  setValue: function setValue(value) {
    if (value !== null && typeof value !== 'string' && typeof value !== 'number') {
      return;
    }
    this._value = value;
    if (this._render) {
      var control = coreuiTableElements.getControl(this._table.getId(), this._id);
      if (control[0]) {
        $('input', control).val(this._value === null ? '' : this._value);
      }
    }
  },
  /**
   * Получение значения
   * @returns {string|null}
   */
  getValue: function getValue() {
    var control = coreuiTableElements.getControl(this._table.getId(), this._id);
    var input = $('input', control);
    if (input[0]) {
      var value = input.val();
      if (typeof value === 'string' && value !== '') {
        return value;
      }
    }
    return null;
  },
  /**
   * Инициализация событий
   * @returns {object}
   */
  initEvents: function initEvents() {
    var control = coreuiTableElements.getControl(this._table.getId(), this._id);
    var that = this;
    $('input', control).keyup(function (e) {
      if (e.key === 'Enter' || e.keyCode === 13) {
        that._table.searchRecords();
      }
    });
    $('button', control).click(function (e) {
      that._table.searchRecords();
    });
  },
  /**
   * Формирование контента
   * @returns {string}
   */
  render: function render() {
    this._render = true;
    var options = this.getOptions();
    var label = typeof options.label === 'string' || typeof options.label === 'number' ? options.label : '';
    if (!coreuiTableUtils.isObject(options.attr)) {
      options.attr = {};
    }
    if (options.hasOwnProperty('width') && coreuiTableUtils.isNumeric(options.width)) {
      if (options.attr.hasOwnProperty('style')) {
        options.attr['style'] += ';width:' + options.width + 'px';
      } else {
        options.attr['style'] = 'width:' + options.width + 'px';
      }
    }
    options.attr['name'] = typeof options.field === 'string' ? options.field : '';
    options.attr['value'] = typeof this._value === 'string' || typeof this._value === 'number' ? this._value : '';
    if (options.attr.hasOwnProperty('type')) {
      delete options.attr.type;
    }
    if (!coreuiTableUtils.isObject(options.btn)) {
      options.btn = {};
    }
    if (!coreuiTableUtils.isObject(options.btn.attr)) {
      options.btn.attr = {};
    }
    if (options.btn.attr.hasOwnProperty('type')) {
      delete options.btn.attr.type;
    }
    var attr = [];
    var attrBtn = [];
    $.each(options.attr, function (name, value) {
      attr.push(name + '="' + value + '"');
    });
    $.each(options.btn.attr, function (name, value) {
      attrBtn.push(name + '="' + value + '"');
    });
    return ejs.render(tpl['filters/text.html'], {
      attr: attr.length > 0 ? ' ' + attr.join(' ') : '',
      label: label,
      btnAttr: attrBtn.length > 0 ? ' ' + attrBtn.join(' ') : '',
      btnContent: options.btn.content ? options.btn.content : ''
    });
  }
};

coreuiTable$1.filters.number = {
  _id: null,
  _table: null,
  _value: null,
  _render: false,
  _options: {
    id: null,
    type: 'number',
    field: null,
    label: null,
    value: null,
    width: 90,
    attr: {
      "class": "form-control"
    },
    btn: {
      attr: {
        "class": "btn btn-outline-secondary border-secondary-subtle"
      },
      content: '<i class="bi bi-search"></i>'
    }
  },
  /**
   * Инициализация
   * @param {CoreUI.table.instance} table
   * @param {object}                options
   */
  init: function init(table, options) {
    this._options = $.extend(true, {}, this._options, options);
    this._table = table;
    this._id = this._options.hasOwnProperty('id') && typeof this._options.id === 'string' && this._options.id ? this._options.id : coreuiTableUtils.hashCode();
    if (this._options.value !== null) {
      this.setValue(this._options.value);
    }
  },
  /**
   * Получение параметров
   * @returns {object}
   */
  getOptions: function getOptions() {
    return $.extend(true, {}, this._options);
  },
  /**
   * Получение id
   * @returns {string}
   */
  getId: function getId() {
    return this._id;
  },
  /**
   * Установка значения
   * @param {object|null} value
   */
  setValue: function setValue(value) {
    if (value) {
      if (!coreuiTableUtils.isObject(value)) {
        return;
      }
      var numberStart = null;
      var numberEnd = null;
      if (value.hasOwnProperty('start') && (typeof value.start === 'string' || typeof value.start !== 'number') && value.start !== '') {
        numberStart = value.start;
      }
      if (value.hasOwnProperty('end') && (typeof value.end === 'string' || typeof value.end !== 'number') && value.end !== '') {
        numberEnd = value.end;
      }
      if (numberStart === null && numberEnd === null) {
        this._value = null;
      } else {
        this._value = {
          start: numberStart,
          end: numberEnd
        };
      }
    } else {
      this._value = null;
    }
    if (this._render) {
      var control = coreuiTableElements.getControl(this._table.getId(), this._id);
      if (control[0]) {
        var inputStart = $('input.number-start', control);
        var inputEnd = $('input.number-end', control);
        if (this._value === null) {
          inputStart.val('');
          inputEnd.val('');
        } else if (coreuiTableUtils.isObject(this._value)) {
          inputStart.val(_typeof(this._value.start) !== null ? this._value.start : '');
          inputEnd.val(_typeof(this._value.end) !== null ? this._value.end : '');
        }
      }
    }
  },
  /**
   * Получение значения
   * @returns {string}
   */
  getValue: function getValue() {
    var control = coreuiTableElements.getControl(this._table.getId(), this._id);
    var inputStart = $('input.number-start', control);
    var inputEnd = $('input.number-end', control);
    if (inputStart[0] && inputEnd[0]) {
      var valueStart = inputStart.val();
      var valueEnd = inputEnd.val();
      if (typeof valueStart === 'string' && valueStart !== '' || typeof valueEnd === 'string' && valueEnd !== '') {
        return {
          start: valueStart !== '' ? valueStart : null,
          end: valueEnd !== '' ? valueEnd : null
        };
      }
    }
    return null;
  },
  /**
   * Инициализация событий
   * @returns {object}
   */
  initEvents: function initEvents() {
    var control = coreuiTableElements.getControl(this._table.getId(), this._id);
    var that = this;
    $('input.number-start, input.number-end', control).keyup(function (e) {
      if (e.key === 'Enter' || e.keyCode === 13) {
        that._table.searchRecords();
      }
    });
    $('button', control).click(function (e) {
      that._table.searchRecords();
    });
  },
  /**
   * Формирование контента
   * @returns {string}
   */
  render: function render() {
    this._render = true;
    var options = this.getOptions();
    var label = typeof options.label === 'string' || typeof options.label === 'number' ? options.label : '';
    if (!coreuiTableUtils.isObject(options.attr)) {
      options.attr = {};
    }
    if (options.hasOwnProperty('width') && coreuiTableUtils.isNumeric(options.width)) {
      if (options.attr.hasOwnProperty('style')) {
        options.attr['style'] += ';width:' + options.width + 'px';
      } else {
        options.attr['style'] = 'width:' + options.width + 'px';
      }
    }
    if (options.attr.hasOwnProperty('type')) {
      delete options.attr.type;
    }
    if (options.attr.hasOwnProperty('value')) {
      delete options.attr.value;
    }
    var field = typeof options.field === 'string' ? options.field : '';
    var startAttr = [];
    var endAttr = [];
    var attrBtn = [];
    $.each(options.attr, function (name, value) {
      if (['name', 'value', 'class'].indexOf(name) >= 0 || ['string', 'number'].indexOf(_typeof(value)) < 0) {
        return;
      }
      startAttr.push(name + '="' + value + '"');
      endAttr.push(name + '="' + value + '"');
    });
    if (options.attr.hasOwnProperty('class') && ['string', 'number'].indexOf(_typeof(options.attr["class"])) >= 0) {
      startAttr.push('class="' + options.attr["class"] + ' number-start"');
      endAttr.push('class="' + options.attr["class"] + ' number-end"');
    } else {
      startAttr.push('class="number-start"');
      endAttr.push('class="number-end"');
    }
    if (field) {
      startAttr.push('name="' + field + '[start]"');
      endAttr.push('name="' + field + '[end]"');
    }
    startAttr.push('value="' + (this._value ? this._value.start : '') + '"');
    endAttr.push('value="' + (this._value ? this._value.end : '') + '"');
    if (!coreuiTableUtils.isObject(options.btn)) {
      options.btn = {};
    }
    if (!coreuiTableUtils.isObject(options.btn.attr)) {
      options.btn.attr = {};
    }
    if (options.btn.attr.hasOwnProperty('type')) {
      delete options.btn.attr.type;
    }
    $.each(options.btn.attr, function (name, value) {
      attrBtn.push(name + '="' + value + '"');
    });
    return ejs.render(tpl['filters/number.html'], {
      attrStart: startAttr.length > 0 ? ' ' + startAttr.join(' ') : '',
      attrEnd: endAttr.length > 0 ? ' ' + endAttr.join(' ') : '',
      label: label,
      btnAttr: attrBtn.length > 0 ? ' ' + attrBtn.join(' ') : '',
      btnContent: options.btn.content ? options.btn.content : ''
    });
  }
};

coreuiTable$1.filters.date = {
  _id: null,
  _table: null,
  _value: null,
  _render: false,
  _options: {
    id: null,
    type: 'date',
    field: null,
    label: null,
    value: null,
    width: 200,
    attr: {
      "class": "form-control"
    }
  },
  /**
   * Инициализация
   * @param {CoreUI.table.instance} table
   * @param {object}                options
   */
  init: function init(table, options) {
    this._options = $.extend(true, {}, this._options, options);
    this._table = table;
    this._id = this._options.hasOwnProperty('id') && typeof this._options.id === 'string' && this._options.id ? this._options.id : coreuiTableUtils.hashCode();
    if (this._options.value !== null) {
      this.setValue(this._options.value);
    }
  },
  /**
   * Получение параметров
   * @returns {object}
   */
  getOptions: function getOptions() {
    return $.extend(true, {}, this._options);
  },
  /**
   * Получение id
   * @returns {string}
   */
  getId: function getId() {
    return this._id;
  },
  /**
   * Установка значения
   * @param {string} value
   */
  setValue: function setValue(value) {
    if (typeof value !== 'string' && value !== null) {
      return;
    }
    if (value && (value.match(/^\d{4}\-\d{2}\-\d{2}$/) === null || isNaN(new Date(value)))) {
      return;
    }
    this._value = value;
    if (this._render) {
      var control = coreuiTableElements.getControl(this._table.getId(), this._id);
      if (control[0]) {
        $('input', control).val(this._value === null ? '' : this._value);
      }
    }
  },
  /**
   * Получение значения
   * @returns {string}
   */
  getValue: function getValue() {
    var control = coreuiTableElements.getControl(this._table.getId(), this._id);
    var input = $('input', control);
    if (input[0]) {
      var value = input.val();
      if (typeof value === 'string' && value !== '') {
        return value;
      }
    }
    return null;
  },
  /**
   * Инициализация событий
   * @returns {object}
   */
  initEvents: function initEvents() {
    var control = coreuiTableElements.getControl(this._table.getId(), this._id);
    var that = this;
    $('input', control).change(function (e) {
      that._table.searchRecords();
    });
  },
  /**
   * Формирование контента
   * @returns {string}
   */
  render: function render() {
    this._render = true;
    var options = this.getOptions();
    var label = typeof options.label === 'string' || typeof options.label === 'number' ? options.label : '';
    if (!coreuiTableUtils.isObject(options.attr)) {
      options.attr = {};
    }
    if (options.hasOwnProperty('width') && coreuiTableUtils.isNumeric(options.width)) {
      if (options.attr.hasOwnProperty('style')) {
        options.attr['style'] += ';width:' + options.width + 'px';
      } else {
        options.attr['style'] = 'width:' + options.width + 'px';
      }
    }
    options.attr['name'] = typeof options.field === 'string' ? options.field : '';
    options.attr['value'] = typeof this._value === 'string' || typeof this._value === 'number' ? this._value : '';
    if (options.attr.hasOwnProperty('type')) {
      delete options.attr.type;
    }
    var attr = [];
    $.each(options.attr, function (name, value) {
      attr.push(name + '="' + value + '"');
    });
    return ejs.render(tpl['filters/date.html'], {
      attr: attr.length > 0 ? ' ' + attr.join(' ') : '',
      label: label
    });
  }
};

coreuiTable$1.filters.datetime = {
  _id: null,
  _table: null,
  _value: null,
  _render: false,
  _options: {
    id: null,
    type: 'datetime',
    field: null,
    label: null,
    value: null,
    width: 200,
    attr: {
      "class": "form-control"
    }
  },
  /**
   * Инициализация
   * @param {CoreUI.table.instance} table
   * @param {object}                options
   */
  init: function init(table, options) {
    this._options = $.extend(true, {}, this._options, options);
    this._table = table;
    this._id = this._options.hasOwnProperty('id') && typeof this._options.id === 'string' && this._options.id ? this._options.id : coreuiTableUtils.hashCode();
    if (this._options.value !== null) {
      this.setValue(this._options.value);
    }
  },
  /**
   * Получение параметров
   * @returns {object}
   */
  getOptions: function getOptions() {
    return $.extend(true, {}, this._options);
  },
  /**
   * Получение id
   * @returns {string}
   */
  getId: function getId() {
    return this._id;
  },
  /**
   * Установка значения
   * @param {string|null} value
   */
  setValue: function setValue(value) {
    if (typeof value !== 'string' && value !== null) {
      return;
    }
    if (value && (value.match(/^\d{4}\-\d{2}\-\d{2} \d{2}:\d{2}:\d{2}$/) === null || isNaN(new Date(value)))) {
      return;
    }
    this._value = value;
    if (this._render) {
      var control = coreuiTableElements.getControl(this._table.getId(), this._id);
      if (control[0]) {
        $('input', control).val(this._value === null ? '' : this._value);
      }
    }
  },
  /**
   * Получение значения
   * @returns {string|null}
   */
  getValue: function getValue() {
    var control = coreuiTableElements.getControl(this._table.getId(), this._id);
    var input = $('input', control);
    if (input[0]) {
      var value = input.val();
      if (typeof value === 'string' && value !== '') {
        return value;
      }
    }
    return null;
  },
  /**
   * Инициализация событий
   * @returns {object}
   */
  initEvents: function initEvents() {
    var control = coreuiTableElements.getControl(this._table.getId(), this._id);
    var that = this;
    $('input', control).change(function (e) {
      that._table.searchRecords();
    });
  },
  /**
   * Формирование контента
   * @returns {string}
   */
  render: function render() {
    this._render = true;
    var options = this.getOptions();
    var label = typeof options.label === 'string' || typeof options.label === 'number' ? options.label : '';
    if (!coreuiTableUtils.isObject(options.attr)) {
      options.attr = {};
    }
    if (options.hasOwnProperty('width') && coreuiTableUtils.isNumeric(options.width)) {
      if (options.attr.hasOwnProperty('style')) {
        options.attr['style'] += ';width:' + options.width + 'px';
      } else {
        options.attr['style'] = 'width:' + options.width + 'px';
      }
    }
    options.attr['name'] = typeof options.field === 'string' ? options.field : '';
    options.attr['value'] = typeof this._value === 'string' || typeof this._value === 'number' ? this._value : '';
    if (options.attr.hasOwnProperty('type')) {
      delete options.attr.type;
    }
    var attr = [];
    $.each(options.attr, function (name, value) {
      attr.push(name + '="' + value + '"');
    });
    return ejs.render(tpl['filters/datetime.html'], {
      attr: attr.length > 0 ? ' ' + attr.join(' ') : '',
      label: label
    });
  }
};

coreuiTable$1.filters.date_month = {
  _id: null,
  _table: null,
  _value: null,
  _render: false,
  _options: {
    id: null,
    type: 'date_month',
    field: null,
    label: null,
    value: null,
    width: 200,
    attr: {
      "class": "form-control"
    }
  },
  /**
   * Инициализация
   * @param {CoreUI.table.instance} table
   * @param {object}                options
   */
  init: function init(table, options) {
    this._options = $.extend(true, {}, this._options, options);
    this._table = table;
    this._id = this._options.hasOwnProperty('id') && typeof this._options.id === 'string' && this._options.id ? this._options.id : coreuiTableUtils.hashCode();
    if (this._options.value !== null) {
      this.setValue(this._options.value);
    }
  },
  /**
   * Получение параметров
   * @returns {object}
   */
  getOptions: function getOptions() {
    return $.extend(true, {}, this._options);
  },
  /**
   * Получение id
   * @returns {string}
   */
  getId: function getId() {
    return this._id;
  },
  /**
   * Установка значения
   * @param {string|null} value
   */
  setValue: function setValue(value) {
    if (typeof value !== 'string' && value !== null) {
      return;
    }
    if (value && (value.match(/^\d{4}\-\d{2}$/) === null || isNaN(new Date(value)))) {
      return;
    }
    this._value = value;
    if (this._render) {
      var control = coreuiTableElements.getControl(this._table.getId(), this._id);
      if (control[0]) {
        $('input', control).val(this._value === null ? '' : this._value);
      }
    }
  },
  /**
   * Получение значения
   * @returns {string}
   */
  getValue: function getValue() {
    var control = coreuiTableElements.getControl(this._table.getId(), this._id);
    var input = $('input', control);
    if (input[0]) {
      var value = input.val();
      if (typeof value === 'string' && value !== '') {
        return value;
      }
    }
    return null;
  },
  /**
   * Инициализация событий
   * @returns {object}
   */
  initEvents: function initEvents() {
    var control = coreuiTableElements.getControl(this._table.getId(), this._id);
    var that = this;
    $('input', control).change(function (e) {
      that._table.searchRecords();
    });
  },
  /**
   * Формирование контента
   * @returns {string}
   */
  render: function render() {
    this._render = true;
    var options = this.getOptions();
    var label = typeof options.label === 'string' || typeof options.label === 'number' ? options.label : '';
    if (!coreuiTableUtils.isObject(options.attr)) {
      options.attr = {};
    }
    if (options.hasOwnProperty('width') && coreuiTableUtils.isNumeric(options.width)) {
      if (options.attr.hasOwnProperty('style')) {
        options.attr['style'] += ';width:' + options.width + 'px';
      } else {
        options.attr['style'] = 'width:' + options.width + 'px';
      }
    }
    options.attr['name'] = typeof options.field === 'string' ? options.field : '';
    options.attr['value'] = typeof this._value === 'string' || typeof this._value === 'number' ? this._value : '';
    if (options.attr.hasOwnProperty('type')) {
      delete options.attr.type;
    }
    var attr = [];
    $.each(options.attr, function (name, value) {
      attr.push(name + '="' + value + '"');
    });
    return ejs.render(tpl['filters/date_month.html'], {
      attr: attr.length > 0 ? ' ' + attr.join(' ') : '',
      label: label
    });
  }
};

coreuiTable$1.filters.date_range = {
  _id: null,
  _table: null,
  _value: null,
  _render: false,
  _options: {
    id: null,
    type: 'date_range',
    field: null,
    label: null,
    value: null,
    width: 200,
    attr: {
      "class": "form-control d-inline-block"
    }
  },
  /**
   * Инициализация
   * @param {CoreUI.table.instance} table
   * @param {object}                options
   */
  init: function init(table, options) {
    this._options = $.extend(true, {}, this._options, options);
    this._table = table;
    this._id = this._options.hasOwnProperty('id') && typeof this._options.id === 'string' && this._options.id ? this._options.id : coreuiTableUtils.hashCode();
    if (this._options.value !== null) {
      this.setValue(this._options.value);
    }
  },
  /**
   * Получение параметров
   * @returns {object}
   */
  getOptions: function getOptions() {
    return $.extend(true, {}, this._options);
  },
  /**
   * Получение id
   * @returns {string}
   */
  getId: function getId() {
    return this._id;
  },
  /**
   * Установка значения
   * @param {object|null} value
   */
  setValue: function setValue(value) {
    if (value) {
      if (!coreuiTableUtils.isObject(value)) {
        return;
      }
      var dateStart = null;
      var dateEnd = null;
      if (value.hasOwnProperty('start') && typeof value.start === 'string' && value.start.match(/^\d{4}\-\d{2}\-\d{2}$/) === null && isNaN(new Date(value.start))) {
        dateStart = value.start;
      }
      if (value.hasOwnProperty('end') && typeof value.end === 'string' && value.end.match(/^\d{4}\-\d{2}\-\d{2}$/) === null && isNaN(new Date(value.end))) {
        dateEnd = value.end;
      }
      if (dateStart === null && dateEnd === null) {
        this._value = null;
      } else {
        this._value = {
          start: dateStart,
          end: dateEnd
        };
      }
    } else {
      this._value = null;
    }
    if (this._render) {
      var control = coreuiTableElements.getControl(this._table.getId(), this._id);
      if (control[0]) {
        var inputStart = $('input.date-start', control);
        var inputEnd = $('input.date-end', control);
        if (this._value === null) {
          inputStart.val('');
          inputEnd.val('');
        } else if (coreuiTableUtils.isObject(this._value)) {
          inputStart.val(_typeof(this._value.start) !== null ? this._value.start : '');
          inputEnd.val(_typeof(this._value.end) !== null ? this._value.end : '');
        }
      }
    }
  },
  /**
   * Получение значения
   * @returns {Object|null}
   */
  getValue: function getValue() {
    var control = coreuiTableElements.getControl(this._table.getId(), this._id);
    var inputStart = $('input.date-start', control);
    var inputEnd = $('input.date-end', control);
    if (inputStart[0] && inputEnd[0]) {
      var valueStart = inputStart.val();
      var valueEnd = inputEnd.val();
      if (typeof valueStart === 'string' && valueStart !== '' || typeof valueEnd === 'string' && valueEnd !== '') {
        return {
          start: valueStart !== '' ? valueStart : null,
          end: valueEnd !== '' ? valueEnd : null
        };
      }
    }
    return null;
  },
  /**
   * Инициализация событий
   * @returns {object}
   */
  initEvents: function initEvents() {
    var control = coreuiTableElements.getControl(this._table.getId(), this._id);
    var that = this;
    $('input', control).change(function (e) {
      that._table.searchRecords();
    });
  },
  /**
   * Формирование контента
   * @returns {string}
   */
  render: function render() {
    this._render = true;
    var options = this.getOptions();
    var label = typeof options.label === 'string' || typeof options.label === 'number' ? options.label : '';
    if (!coreuiTableUtils.isObject(options.attr)) {
      options.attr = {};
    }
    if (options.hasOwnProperty('width') && coreuiTableUtils.isNumeric(options.width)) {
      if (options.attr.hasOwnProperty('style')) {
        options.attr['style'] += ';width:' + options.width + 'px';
      } else {
        options.attr['style'] = 'width:' + options.width + 'px';
      }
    }
    if (options.attr.hasOwnProperty('type')) {
      delete options.attr.type;
    }
    if (options.attr.hasOwnProperty('value')) {
      delete options.attr.value;
    }
    var field = typeof options.field === 'string' ? options.field : '';
    var startAttr = [];
    var startEnd = [];
    $.each(options.attr, function (name, value) {
      if (['name', 'value', 'class'].indexOf(name) >= 0 || ['string', 'number'].indexOf(_typeof(value)) < 0) {
        return;
      }
      startAttr.push(name + '="' + value + '"');
      startEnd.push(name + '="' + value + '"');
    });
    if (options.attr.hasOwnProperty('class') && ['string', 'number'].indexOf(_typeof(options.attr["class"])) >= 0) {
      startAttr.push('class="' + options.attr["class"] + ' date-start"');
      startEnd.push('class="' + options.attr["class"] + ' date-end"');
    } else {
      startAttr.push('class="date-start"');
      startEnd.push('class="date-end"');
    }
    if (field) {
      startAttr.push('name="' + field + '[start]"');
      startEnd.push('name="' + field + '[end]"');
    }
    startAttr.push('value="' + (this._value ? this._value.start : '') + '"');
    startEnd.push('value="' + (this._value ? this._value.end : '') + '"');
    return ejs.render(tpl['filters/date_range.html'], {
      label: label,
      startAttr: startAttr.length > 0 ? ' ' + startAttr.join(' ') : '',
      endAttr: startEnd.length > 0 ? ' ' + startEnd.join(' ') : ''
    });
  }
};

coreuiTable$1.filters.datetime_range = {
  _id: null,
  _table: null,
  _value: null,
  _render: false,
  _options: {
    id: null,
    type: 'datetime_range',
    field: null,
    label: null,
    value: null,
    width: 200,
    attr: {
      "class": "form-control d-inline-block"
    }
  },
  /**
   * Инициализация
   * @param {CoreUI.table.instance} table
   * @param {object}                options
   */
  init: function init(table, options) {
    this._options = $.extend(true, {}, this._options, options);
    this._table = table;
    this._id = this._options.hasOwnProperty('id') && typeof this._options.id === 'string' && this._options.id ? this._options.id : coreuiTableUtils.hashCode();
    if (this._options.value !== null) {
      this.setValue(this._options.value);
    }
  },
  /**
   * Получение параметров
   * @returns {object}
   */
  getOptions: function getOptions() {
    return $.extend(true, {}, this._options);
  },
  /**
   * Получение id
   * @returns {string}
   */
  getId: function getId() {
    return this._id;
  },
  /**
   * Установка значения
   * @param {object|null} value
   */
  setValue: function setValue(value) {
    if (value) {
      if (!coreuiTableUtils.isObject(value)) {
        return;
      }
      var dateStart = null;
      var dateEnd = null;
      if (value.hasOwnProperty('start') && typeof value.start === 'string' && value.start.match(/^\d{4}\-\d{2}\-\d{2} \d{2}:\d{2}:\d{2}$/) === null && isNaN(new Date(value.start))) {
        dateStart = value.start;
      }
      if (value.hasOwnProperty('end') && typeof value.end === 'string' && value.end.match(/^\d{4}\-\d{2}\-\d{2} \d{2}:\d{2}:\d{2}$/) === null && isNaN(new Date(value.end))) {
        dateEnd = value.end;
      }
      if (dateStart === null && dateEnd === null) {
        this._value = null;
      } else {
        this._value = {
          start: dateStart,
          end: dateEnd
        };
      }
    } else {
      this._value = null;
    }
    if (this._render) {
      var control = coreuiTableElements.getControl(this._table.getId(), this._id);
      if (control[0]) {
        var inputStart = $('input.date-start', control);
        var inputEnd = $('input.date-end', control);
        if (this._value === null) {
          inputStart.val('');
          inputEnd.val('');
        } else if (coreuiTableUtils.isObject(this._value)) {
          inputStart.val(_typeof(this._value.start) !== null ? this._value.start : '');
          inputEnd.val(_typeof(this._value.end) !== null ? this._value.end : '');
        }
      }
    }
  },
  /**
   * Получение значения
   * @returns {Object|null}
   */
  getValue: function getValue() {
    var control = coreuiTableElements.getControl(this._table.getId(), this._id);
    var inputStart = $('input.date-start', control);
    var inputEnd = $('input.date-end', control);
    if (inputStart[0] && inputEnd[0]) {
      var valueStart = inputStart.val();
      var valueEnd = inputEnd.val();
      if (typeof valueStart === 'string' && valueStart !== '' || typeof valueEnd === 'string' && valueEnd !== '') {
        return {
          start: valueStart !== '' ? valueStart : null,
          end: valueEnd !== '' ? valueEnd : null
        };
      }
    }
    return null;
  },
  /**
   * Инициализация событий
   * @returns {object}
   */
  initEvents: function initEvents() {
    var control = coreuiTableElements.getControl(this._table.getId(), this._id);
    var that = this;
    $('input', control).change(function (e) {
      that._table.searchRecords();
    });
  },
  /**
   * Формирование контента
   * @returns {string}
   */
  render: function render() {
    this._render = true;
    var options = this.getOptions();
    var label = typeof options.label === 'string' || typeof options.label === 'number' ? options.label : '';
    if (!coreuiTableUtils.isObject(options.attr)) {
      options.attr = {};
    }
    if (options.hasOwnProperty('width') && coreuiTableUtils.isNumeric(options.width)) {
      if (options.attr.hasOwnProperty('style')) {
        options.attr['style'] += ';width:' + options.width + 'px';
      } else {
        options.attr['style'] = 'width:' + options.width + 'px';
      }
    }
    if (options.attr.hasOwnProperty('type')) {
      delete options.attr.type;
    }
    if (options.attr.hasOwnProperty('value')) {
      delete options.attr.value;
    }
    var field = typeof options.field === 'string' ? options.field : '';
    var startAttr = [];
    var startEnd = [];
    $.each(options.attr, function (name, value) {
      if (['name', 'value', 'class'].indexOf(name) >= 0 || ['string', 'number'].indexOf(_typeof(value)) < 0) {
        return;
      }
      startAttr.push(name + '="' + value + '"');
      startEnd.push(name + '="' + value + '"');
    });
    if (options.attr.hasOwnProperty('class') && ['string', 'number'].indexOf(_typeof(options.attr["class"])) >= 0) {
      startAttr.push('class="' + options.attr["class"] + ' date-start"');
      startEnd.push('class="' + options.attr["class"] + ' date-end"');
    } else {
      startAttr.push('class="date-start"');
      startEnd.push('class="date-end"');
    }
    if (field) {
      startAttr.push('name="' + field + '[start]"');
      startEnd.push('name="' + field + '[end]"');
    }
    startAttr.push('value="' + (this._value ? this._value.start : '') + '"');
    startEnd.push('value="' + (this._value ? this._value.end : '') + '"');
    return ejs.render(tpl['filters/datetime_range.html'], {
      label: label,
      startAttr: startAttr.length > 0 ? ' ' + startAttr.join(' ') : '',
      endAttr: startEnd.length > 0 ? ' ' + startEnd.join(' ') : ''
    });
  }
};

coreuiTable$1.filters.checkbox = {
  _id: null,
  _table: null,
  _value: null,
  _class: 'btn btn-outline-secondary',
  _render: false,
  _options: {
    id: null,
    type: 'checkbox',
    field: null,
    label: null,
    value: null,
    options: []
  },
  /**
   * Инициализация
   * @param {CoreUI.table.instance} table
   * @param {object}                options
   */
  init: function init(table, options) {
    this._options = $.extend(true, {}, this._options, options);
    this._table = table;
    this._id = this._options.hasOwnProperty('id') && typeof this._options.id === 'string' && this._options.id ? this._options.id : coreuiTableUtils.hashCode();
    if (this._options.value !== null) {
      this.setValue(this._options.value);
    }
  },
  /**
   * Получение параметров
   * @returns {object}
   */
  getOptions: function getOptions() {
    return $.extend(true, {}, this._options);
  },
  /**
   * Получение id
   * @returns {string}
   */
  getId: function getId() {
    return this._id;
  },
  /**
   * Установка значения
   * @param {Array|string|number|null} value
   */
  setValue: function setValue(value) {
    if (['string', 'number', 'object'].indexOf(_typeof(value)) < 0) {
      return;
    }
    if (_typeof(value) === 'object') {
      if (Array.isArray(value)) {
        var items = [];
        $.each(value, function (key, item) {
          if (typeof value !== 'string' && typeof value !== 'number') {
            return;
          }
          items.push(item);
        });
        this._value = items;
      } else {
        this._value = null;
      }
    } else {
      this._value = [value];
    }
    if (this._render) {
      var control = coreuiTableElements.getControl(this._table.getId(), this._id);
      if (control[0]) {
        $('input:checked', control).prop('checked', false);
        if (Array.isArray(this._value)) {
          $.each(this._value, function (key, value) {
            $('input[value="' + value + '"]', control).prop('checked', true);
          });
        }
      }
    }
  },
  /**
   * Получение значения
   * @returns {Array|null}
   */
  getValue: function getValue() {
    var control = coreuiTableElements.getControl(this._table.getId(), this._id);
    if (control[0]) {
      var inputs = $('input:checked', control);
      var items = [];
      $.each(inputs, function (key, input) {
        var value = $(input).attr('value');
        if (['string', 'number'].indexOf(_typeof(value)) >= 0 && value !== '') {
          items.push(value);
        }
      });
      return items.length > 0 ? items : null;
    } else {
      return this._value;
    }
  },
  /**
   * Инициализация событий
   */
  initEvents: function initEvents() {
    var control = coreuiTableElements.getControl(this._table.getId(), this._id);
    var that = this;
    $('input', control).change(function (e) {
      that._table.searchRecords();
    });
  },
  /**
   * Формирование контента
   * @returns {string}
   */
  render: function render() {
    this._render = true;
    var that = this;
    var options = this.getOptions();
    var field = typeof options.field === 'string' ? options.field : '';
    var items = [];
    var label = typeof options.label === 'string' || typeof options.label === 'number' ? options.label : '';
    $.each(options.options, function (key, option) {
      if (!coreuiTableUtils.isObject(option) || !option.hasOwnProperty('value') || ['string', 'numeric'].indexOf(_typeof(option.value)) === -1) {
        return;
      }
      var checked = Array.isArray(that._value) ? that._value.indexOf(option.value) >= 0 : false;
      var text = option.hasOwnProperty('text') ? option.text : option.value;
      items.push({
        text: text,
        value: option.value,
        "class": option.hasOwnProperty('class') && typeof option["class"] === 'string' ? option["class"] : that._class,
        checked: checked
      });
    });
    return ejs.render(tpl['filters/checkbox.html'], {
      label: label,
      items: items,
      field: field + this.getId(),
      lang: this._table.getLang()
    });
  }
};

coreuiTable$1.filters.radio = {
  _id: null,
  _table: null,
  _value: null,
  _class: 'btn btn-outline-secondary',
  _render: false,
  _options: {
    id: null,
    type: 'radio',
    field: null,
    label: null,
    value: null,
    options: []
  },
  /**
   * Инициализация
   * @param {CoreUI.table.instance} table
   * @param {object}                options
   */
  init: function init(table, options) {
    this._options = $.extend(true, {}, this._options, options);
    this._table = table;
    this._id = this._options.hasOwnProperty('id') && typeof this._options.id === 'string' && this._options.id ? this._options.id : coreuiTableUtils.hashCode();
    if (this._options.value !== null) {
      this.setValue(this._options.value);
    }
  },
  /**
   * Получение параметров
   * @returns {object}
   */
  getOptions: function getOptions() {
    return $.extend(true, {}, this._options);
  },
  /**
   * Получение id
   * @returns {string}
   */
  getId: function getId() {
    return this._id;
  },
  /**
   * Установка значения
   * @param {string|number|null} value
   */
  setValue: function setValue(value) {
    if (value !== null && typeof value !== 'string' && typeof value !== 'number') {
      return;
    }
    this._value = value;
    if (this._render) {
      var control = coreuiTableElements.getControl(this._table.getId(), this._id);
      if (control[0]) {
        $('input', control).prop('checked', false);
        if (this._value !== null) {
          $('input[value="' + this._value + '"]', control).prop('checked', true);
        }
      }
    }
  },
  /**
   * Получение значения
   * @returns {string|null}
   */
  getValue: function getValue() {
    var control = coreuiTableElements.getControl(this._table.getId(), this._id);
    var input = $('input:checked', control);
    if (input[0]) {
      var value = input.val();
      return value === '' ? null : value;
    } else {
      return this._value;
    }
  },
  /**
   * Получение типа поискового алгоритма
   */
  getAlgorithm: function getAlgorithm() {
    return 'strict';
  },
  /**
   * Инициализация событий
   */
  initEvents: function initEvents() {
    var control = coreuiTableElements.getControl(this._table.getId(), this._id);
    var that = this;
    $('input', control).change(function (e) {
      that._table.searchRecords();
    });
  },
  /**
   * Формирование контента
   * @returns {string}
   */
  render: function render() {
    this._render = true;
    var that = this;
    var options = this.getOptions();
    var field = typeof options.field === 'string' ? options.field : '';
    var items = [];
    var label = typeof options.label === 'string' || typeof options.label === 'number' ? options.label : '';
    $.each(options.options, function (key, option) {
      if (!coreuiTableUtils.isObject(option) || !option.hasOwnProperty('value') || ['string', 'numeric'].indexOf(_typeof(option.value)) === -1) {
        return;
      }
      var text = option.hasOwnProperty('text') ? option.text : option.value;
      items.push({
        text: text,
        value: option.value,
        "class": option.hasOwnProperty('class') && typeof option["class"] === 'string' ? option["class"] : that._class,
        checked: option.value == that._value
      });
    });
    return ejs.render(tpl['filters/radio.html'], {
      label: label,
      items: items,
      field: field + this.getId(),
      lang: this._table.getLang()
    });
  }
};

coreuiTable$1.filters.select = {
  _id: null,
  _table: null,
  _value: null,
  _render: false,
  _options: {
    id: null,
    type: 'select',
    field: null,
    label: null,
    width: null,
    attr: {
      "class": 'form-select d-inline-block'
    },
    options: []
  },
  /**
   * Инициализация
   * @param {CoreUI.table.instance} table
   * @param {object}                options
   */
  init: function init(table, options) {
    this._options = $.extend(true, {}, this._options, options);
    this._table = table;
    this._id = this._options.hasOwnProperty('id') && typeof this._options.id === 'string' && this._options.id ? this._options.id : coreuiTableUtils.hashCode();
  },
  /**
   * Получение параметров
   * @returns {object}
   */
  getOptions: function getOptions() {
    return $.extend(true, {}, this._options);
  },
  /**
   * Получение id
   * @returns {string}
   */
  getId: function getId() {
    return this._id;
  },
  /**
   * Установка значения
   * @param {Array|string|number|null} value
   */
  setValue: function setValue(value) {
    if (['string', 'number', 'object'].indexOf(_typeof(value)) < 0) {
      return;
    }
    if (_typeof(value) === 'object') {
      if (Array.isArray(value)) {
        var items = [];
        $.each(value, function (key, item) {
          if (typeof value !== 'string' && typeof value !== 'number') {
            return;
          }
          items.push(item);
        });
        this._value = items;
      } else {
        this._value = null;
      }
    } else {
      this._value = [value];
    }
    if (this._render) {
      var control = coreuiTableElements.getControl(this._table.getId(), this._id);
      if (control[0]) {
        $('select option:selected', control).prop('selected', false);
        if (Array.isArray(this._value)) {
          $.each(this._value, function (key, value) {
            $('select option[value="' + value + '"]', control).prop('selected', true);
          });
        }
      }
    }
  },
  /**
   * Получение значения
   * @returns {Array|null}
   */
  getValue: function getValue() {
    var control = coreuiTableElements.getControl(this._table.getId(), this._id);
    if (control[0]) {
      var options = $('select option:checked', control);
      var items = [];
      $.each(options, function (key, option) {
        var value = $(option).attr('value');
        if (['string', 'number'].indexOf(_typeof(value)) >= 0 && value !== '') {
          items.push(value);
        }
      });
      return items.length > 0 ? items : null;
    } else {
      return null;
    }
  },
  /**
   * Инициализация событий
   */
  initEvents: function initEvents() {
    var control = coreuiTableElements.getControl(this._table.getId(), this._id);
    var that = this;
    $('select', control).change(function (e) {
      that._table.searchRecords();
    });
  },
  /**
   * Формирование контента
   * @returns {string}
   */
  render: function render() {
    this._render = true;
    var that = this;
    var options = this.getOptions();
    var selectOptions = [];
    var attributes = [];
    var label = typeof options.label === 'string' || typeof options.label === 'number' ? options.label : '';
    if (!options.hasOwnProperty('attr') || !coreuiTableUtils.isObject(options.attr)) {
      options.attr = {};
    }
    if (options.field) {
      options.attr.name = this._options.field;
    }
    if (options.width) {
      options.attr = coreuiTableUtils.mergeAttr({
        style: 'width:' + options.width + 'px'
      }, options.attr);
    }
    if (options.hasOwnProperty('options') && _typeof(options.options) === 'object' && options.options !== null) {
      $.each(options.options, function (key, option) {
        if (typeof option === 'string' || typeof option === 'number') {
          selectOptions.push(that._buildOption({
            type: 'option',
            value: key,
            text: option
          }));
        } else if (coreuiTableUtils.isObject(option)) {
          var type = option.hasOwnProperty('type') && typeof option.type === 'string' ? option.type : 'option';
          if (type === 'group') {
            var renderAttr = [];
            var groupAttr = {};
            var groupOptions = [];
            if (option.hasOwnProperty('attr') && coreuiTableUtils.isObject(option.attr)) {
              groupAttr = option.attr;
            }
            if (option.hasOwnProperty('label') && ['string', 'number'].indexOf(_typeof(option.label)) >= 0) {
              groupAttr.label = option.label;
            }
            $.each(groupAttr, function (name, value) {
              renderAttr.push(name + '="' + value + '"');
            });
            if (Array.isArray(option.options)) {
              $.each(option.options, function (key, groupOption) {
                groupOptions.push(that._buildOption(groupOption));
              });
            }
            selectOptions.push({
              type: 'group',
              attr: renderAttr.length > 0 ? ' ' + renderAttr.join(' ') : '',
              options: groupOptions
            });
          } else {
            selectOptions.push(that._buildOption(option));
          }
        }
      });
    }
    $.each(options.attr, function (name, value) {
      attributes.push(name + '="' + value + '"');
    });
    return ejs.render(tpl['filters/select.html'], {
      label: label,
      attr: attributes.length > 0 ? ' ' + attributes.join(' ') : '',
      options: selectOptions
    });
  },
  /**
   * Сборка опции
   * @param option
   * @return {object}
   * @private
   */
  _buildOption: function _buildOption(option) {
    var optionAttr = [];
    var optionText = option.hasOwnProperty('text') && ['string', 'number'].indexOf(_typeof(option.text)) >= 0 ? option.text : '';
    $.each(option, function (name, value) {
      if (name !== 'text') {
        optionAttr.push(name + '="' + value + '"');
      }
    });
    if (Array.isArray(this._value)) {
      $.each(this._value, function (key, itemValue) {
        if (itemValue == option.value) {
          optionAttr.push('selected="selected"');
          return false;
        }
      });
    } else if (this._value == option.value) {
      optionAttr.push('selected="selected"');
    }
    return {
      type: 'option',
      text: optionText,
      attr: optionAttr.length > 0 ? ' ' + optionAttr.join(' ') : ''
    };
  }
};

coreuiTable$1.filters["switch"] = {
  _id: null,
  _table: null,
  _value: null,
  _render: false,
  _options: {
    id: null,
    type: 'switch',
    field: null,
    label: null,
    value: null,
    valueY: 'Y'
  },
  /**
   * Инициализация
   * @param {CoreUI.table.instance} table
   * @param {object}                options
   */
  init: function init(table, options) {
    this._options = $.extend(true, {}, this._options, options);
    this._table = table;
    this._id = this._options.hasOwnProperty('id') && typeof this._options.id === 'string' && this._options.id ? this._options.id : coreuiTableUtils.hashCode();
    if (this._options.value !== null) {
      this.setValue(this._options.value);
    }
  },
  /**
   * Получение параметров
   * @returns {object}
   */
  getOptions: function getOptions() {
    return $.extend(true, {}, this._options);
  },
  /**
   * Получение id
   * @returns {string}
   */
  getId: function getId() {
    return this._id;
  },
  /**
   * Установка значения
   * @param {string|number|null} value
   */
  setValue: function setValue(value) {
    if (value !== null && typeof value !== 'string' && typeof value !== 'number') {
      return;
    }
    this._value = value;
    if (this._render) {
      var control = coreuiTableElements.getControl(this._table.getId(), this._id);
      if (control[0]) {
        var valueY = typeof this._options.valueY === 'string' || typeof this._options.valueY === 'number' ? this._options.valueY : '';
        if (this._value === null) {
          $('input', control).prop('checked', false);
        } else if (this._value === valueY) {
          $('input', control).prop('checked', true);
        } else {
          $('input', control).prop('checked', false);
        }
      }
    }
  },
  /**
   * Получение значения
   * @returns {string}
   */
  getValue: function getValue() {
    var control = coreuiTableElements.getControl(this._table.getId(), this._id);
    var input = $('input:checked', control);
    return input[0] ? input.val() : null;
  },
  /**
   * Инициализация событий
   */
  initEvents: function initEvents() {
    var control = coreuiTableElements.getControl(this._table.getId(), this._id);
    var that = this;
    $('input', control).change(function (e) {
      that._table.searchRecords();
    });
  },
  /**
   * Формирование контента
   * @returns {string}
   */
  render: function render() {
    this._render = true;
    var options = this.getOptions();
    var valueY = typeof options.valueY === 'string' || typeof options.valueY === 'number' ? options.valueY : '';
    var label = typeof options.label === 'string' || typeof options.label === 'number' ? options.label : '';
    return ejs.render(tpl['filters/switch.html'], {
      id: this._id,
      valueY: valueY,
      field: typeof options.field === 'string' ? options.field : '',
      checked: this._value == valueY,
      label: label
    });
  }
};

coreuiTable$1.search.text = {
  _id: null,
  _table: null,
  _value: null,
  _render: false,
  _options: {
    id: null,
    type: 'text',
    field: null,
    label: null,
    value: null,
    width: 200,
    attr: {
      "class": "form-control d-inline-block"
    }
  },
  /**
   * Инициализация
   * @param {CoreUI.table.instance} table
   * @param {object}                options
   */
  init: function init(table, options) {
    this._options = $.extend(true, {}, this._options, options);
    this._table = table;
    this._id = this._options.hasOwnProperty('id') && typeof this._options.id === 'string' && this._options.id ? this._options.id : coreuiTableUtils.hashCode();
    if (this._options.value !== null) {
      this.setValue(this._options.value);
    }
  },
  /**
   * Получение параметров
   * @returns {object}
   */
  getOptions: function getOptions() {
    return $.extend(true, {}, this._options);
  },
  /**
   * Получение id
   * @returns {string}
   */
  getId: function getId() {
    return this._id;
  },
  /**
   * Установка значения
   * @param {string} value
   */
  setValue: function setValue(value) {
    if (value !== null && typeof value !== 'string' && typeof value !== 'number') {
      return;
    }
    this._value = value;
    if (this._render) {
      var control = coreuiTableElements.getSearchControl(this._table.getId(), this._id);
      if (control[0]) {
        $('input', control).val(this._value === null ? '' : this._value);
      }
    }
  },
  /**
   * Получение значения
   * @returns {string|null}
   */
  getValue: function getValue() {
    var control = coreuiTableElements.getSearchControl(this._table.getId(), this._id);
    var input = $('input', control);
    if (input[0]) {
      var value = input.val();
      if (typeof value === 'string' && value !== '') {
        return value;
      }
    }
    return null;
  },
  /**
   * Инициализация событий
   * @returns {object}
   */
  initEvents: function initEvents() {
    var container = coreuiTableElements.getSearchContainer(this._table.getId());
    var control = coreuiTableElements.getSearchControl(this._table.getId(), this._id);
    var that = this;
    $('input', control).keyup(function (e) {
      if (e.key === 'Enter' || e.keyCode === 13) {
        that._table.searchRecords();
        container.fadeOut('fast');
      }
    });
  },
  /**
   * Формирование контента
   * @returns {string}
   */
  render: function render() {
    this._render = true;
    if (!coreuiTableUtils.isObject(this._options.attr)) {
      this._options.attr = {};
    }
    if (this._options.hasOwnProperty('width') && coreuiTableUtils.isNumeric(this._options.width)) {
      if (this._options.attr.hasOwnProperty('style')) {
        this._options.attr['style'] += ';width:' + this._options.width + 'px';
      } else {
        this._options.attr['style'] = 'width:' + this._options.width + 'px';
      }
    }
    this._options.attr['name'] = typeof this._options.field === 'string' ? this._options.field : '';
    this._options.attr['value'] = typeof this._value === 'string' || typeof this._value === 'number' ? this._value : '';
    if (this._options.attr.hasOwnProperty('type')) {
      delete this._options.attr.type;
    }
    var attributes = [];
    $.each(this._options.attr, function (name, value) {
      attributes.push(name + '="' + value + '"');
    });
    return ejs.render(tpl['search/text.html'], {
      attr: attributes.length > 0 ? ' ' + attributes.join(' ') : ''
    });
  }
};

coreuiTable$1.search.number = {
  _id: null,
  _table: null,
  _value: null,
  _render: false,
  _options: {
    id: null,
    type: 'number',
    field: null,
    label: null,
    value: null,
    width: 200,
    attr: {
      "class": "form-control d-inline-block"
    }
  },
  /**
   * Инициализация
   * @param {CoreUI.table.instance} table
   * @param {object}                options
   */
  init: function init(table, options) {
    this._options = $.extend(true, {}, this._options, options);
    this._table = table;
    this._id = this._options.hasOwnProperty('id') && typeof this._options.id === 'string' && this._options.id ? this._options.id : coreuiTableUtils.hashCode();
    if (this._options.value !== null) {
      this.setValue(this._options.value);
    }
  },
  /**
   * Получение параметров
   * @returns {object}
   */
  getOptions: function getOptions() {
    return $.extend(true, {}, this._options);
  },
  /**
   * Получение id
   * @returns {string}
   */
  getId: function getId() {
    return this._id;
  },
  /**
   * Установка значения
   * @param {Object} value
   */
  setValue: function setValue(value) {
    if (value) {
      if (!coreuiTableUtils.isObject(value)) {
        return;
      }
      var numberStart = null;
      var numberEnd = null;
      if (value.hasOwnProperty('start') && ['string', 'number'].indexOf(_typeof(value.start)) >= 0) {
        numberStart = value.start;
      }
      if (value.hasOwnProperty('end') && ['string', 'number'].indexOf(_typeof(value.end)) >= 0) {
        numberEnd = value.end;
      }
      if (numberStart === null && numberEnd === null) {
        this._value = null;
      } else {
        this._value = {
          start: numberStart,
          end: numberEnd
        };
      }
    } else {
      this._value = null;
    }
    if (this._render) {
      var control = coreuiTableElements.getSearchControl(this._table.getId(), this._id);
      if (control[0]) {
        var inputStart = $('input.number-start', control);
        var inputEnd = $('input.number-end', control);
        if (this._value === null) {
          inputStart.val('');
          inputEnd.val('');
        } else if (coreuiTableUtils.isObject(this._value)) {
          inputStart.val(_typeof(this._value.start) !== null ? this._value.start : '');
          inputEnd.val(_typeof(this._value.end) !== null ? this._value.end : '');
        }
      }
    }
  },
  /**
   * Получение значения
   * @returns {string|null}
   */
  getValue: function getValue() {
    var control = coreuiTableElements.getSearchControl(this._table.getId(), this._id);
    var inputStart = $('input.number-start', control);
    var inputEnd = $('input.number-end', control);
    if (inputStart[0] && inputEnd[0]) {
      var valueStart = inputStart.val();
      var valueEnd = inputEnd.val();
      if (typeof valueStart === 'string' && valueStart !== '' || typeof valueEnd === 'string' && valueEnd !== '') {
        return {
          start: valueStart !== '' ? valueStart : null,
          end: valueEnd !== '' ? valueEnd : null
        };
      }
    }
    return null;
  },
  /**
   * Инициализация событий
   * @returns {object}
   */
  initEvents: function initEvents() {
    var container = coreuiTableElements.getSearchContainer(this._table.getId());
    var control = coreuiTableElements.getSearchControl(this._table.getId(), this._id);
    var that = this;
    $('input.number-start, input.number-end', control).keyup(function (e) {
      if (e.key === 'Enter' || e.keyCode === 13) {
        that._table.searchRecords();
        container.fadeOut('fast');
      }
    });
  },
  /**
   * Формирование контента
   * @returns {string}
   */
  render: function render() {
    this._render = true;
    if (!coreuiTableUtils.isObject(this._options.attr)) {
      this._options.attr = {};
    }
    if (this._options.hasOwnProperty('width') && coreuiTableUtils.isNumeric(this._options.width)) {
      if (this._options.attr.hasOwnProperty('style')) {
        this._options.attr['style'] += ';width:' + this._options.width + 'px';
      } else {
        this._options.attr['style'] = 'width:' + this._options.width + 'px';
      }
    }
    if (this._options.attr.hasOwnProperty('type')) {
      delete this._options.attr.type;
    }
    if (this._options.attr.hasOwnProperty('value')) {
      delete this._options.attr.value;
    }
    var field = typeof this._options.field === 'string' ? this._options.field : '';
    var startAttr = [];
    var startEnd = [];
    $.each(this._options.attr, function (name, value) {
      if (['name', 'value', 'class'].indexOf(name) >= 0 || ['string', 'number'].indexOf(_typeof(value)) < 0) {
        return;
      }
      startAttr.push(name + '="' + value + '"');
      startEnd.push(name + '="' + value + '"');
    });
    if (this._options.attr.hasOwnProperty('class') && ['string', 'number'].indexOf(_typeof(this._options.attr["class"])) >= 0) {
      startAttr.push('class="' + this._options.attr["class"] + ' number-start"');
      startEnd.push('class="' + this._options.attr["class"] + ' number-end"');
    } else {
      startAttr.push('class="number-start"');
      startEnd.push('class="number-end"');
    }
    if (field) {
      startAttr.push('name="' + field + '[start]"');
      startEnd.push('name="' + field + '[end]"');
    }
    startAttr.push('value="' + (this._value ? this._value.start : '') + '"');
    startEnd.push('value="' + (this._value ? this._value.end : '') + '"');
    return ejs.render(tpl['search/number.html'], {
      startAttr: startAttr.length > 0 ? ' ' + startAttr.join(' ') : '',
      endAttr: startEnd.length > 0 ? ' ' + startEnd.join(' ') : ''
    });
  }
};

coreuiTable$1.search.date = {
  _id: null,
  _table: null,
  _value: null,
  _render: false,
  _options: {
    id: null,
    type: 'date',
    field: null,
    label: null,
    value: null,
    width: 200,
    attr: {
      "class": "form-control d-inline-block"
    }
  },
  /**
   * Инициализация
   * @param {CoreUI.table.instance} table
   * @param {object}                options
   */
  init: function init(table, options) {
    this._options = $.extend(true, {}, this._options, options);
    this._table = table;
    this._id = this._options.hasOwnProperty('id') && typeof this._options.id === 'string' && this._options.id ? this._options.id : coreuiTableUtils.hashCode();
    if (this._options.value !== null) {
      this.setValue(this._options.value);
    }
  },
  /**
   * Получение параметров
   * @returns {object}
   */
  getOptions: function getOptions() {
    return $.extend(true, {}, this._options);
  },
  /**
   * Получение id
   * @returns {string}
   */
  getId: function getId() {
    return this._id;
  },
  /**
   * Установка значения
   * @param {string} value
   */
  setValue: function setValue(value) {
    if (typeof value !== 'string' && value !== null) {
      return;
    }
    if (value && (value.match(/^\d{4}\-\d{2}\-\d{2}$/) === null || isNaN(new Date(value)))) {
      return;
    }
    this._value = value;
    if (this._render) {
      var control = coreuiTableElements.getSearchControl(this._table.getId(), this._id);
      if (control[0]) {
        $('input', control).val(this._value === null ? '' : this._value);
      }
    }
  },
  /**
   * Получение значения
   * @returns {string|null}
   */
  getValue: function getValue() {
    var control = coreuiTableElements.getSearchControl(this._table.getId(), this._id);
    var input = $('input', control);
    if (input[0]) {
      var value = input.val();
      if (typeof value === 'string' && value !== '') {
        return value;
      }
    }
    return null;
  },
  /**
   * Инициализация событий
   * @returns {object}
   */
  initEvents: function initEvents() {
    var container = coreuiTableElements.getSearchContainer(this._table.getId());
    var control = coreuiTableElements.getSearchControl(this._table.getId(), this._id);
    var that = this;
    $('input', control).keyup(function (e) {
      if (e.key === 'Enter' || e.keyCode === 13) {
        that._table.searchRecords();
        container.fadeOut('fast');
      }
    });
  },
  /**
   * Формирование контента
   * @returns {string}
   */
  render: function render() {
    this._render = true;
    if (!coreuiTableUtils.isObject(this._options.attr)) {
      this._options.attr = {};
    }
    if (this._options.hasOwnProperty('width') && coreuiTableUtils.isNumeric(this._options.width)) {
      if (this._options.attr.hasOwnProperty('style')) {
        this._options.attr['style'] += ';width:' + this._options.width + 'px';
      } else {
        this._options.attr['style'] = 'width:' + this._options.width + 'px';
      }
    }
    this._options.attr['name'] = typeof this._options.field === 'string' ? this._options.field : '';
    this._options.attr['value'] = typeof this._value === 'string' || typeof this._value === 'number' ? this._value : '';
    if (this._options.attr.hasOwnProperty('type')) {
      delete this._options.attr.type;
    }
    var attributes = [];
    $.each(this._options.attr, function (name, value) {
      attributes.push(name + '="' + value + '"');
    });
    return ejs.render(tpl['search/date.html'], {
      attr: attributes.length > 0 ? ' ' + attributes.join(' ') : ''
    });
  }
};

coreuiTable$1.search.date_month = {
  _id: null,
  _table: null,
  _value: null,
  _render: false,
  _options: {
    id: null,
    type: 'date_month',
    field: null,
    label: null,
    value: null,
    width: 200,
    attr: {
      "class": "form-control d-inline-block"
    }
  },
  /**
   * Инициализация
   * @param {CoreUI.table.instance} table
   * @param {object}                options
   */
  init: function init(table, options) {
    this._options = $.extend(true, {}, this._options, options);
    this._table = table;
    this._id = this._options.hasOwnProperty('id') && typeof this._options.id === 'string' && this._options.id ? this._options.id : coreuiTableUtils.hashCode();
    if (this._options.value !== null) {
      this.setValue(this._options.value);
    }
  },
  /**
   * Получение параметров
   * @returns {object}
   */
  getOptions: function getOptions() {
    return $.extend(true, {}, this._options);
  },
  /**
   * Получение id
   * @returns {string}
   */
  getId: function getId() {
    return this._id;
  },
  /**
   * Установка значения
   * @param {string|null} value
   */
  setValue: function setValue(value) {
    if (typeof value !== 'string' && value !== null) {
      return;
    }
    if (value && (value.match(/^\d{4}\-\d{2}$/) === null || isNaN(new Date(value)))) {
      return;
    }
    this._value = value;
    if (this._render) {
      var control = coreuiTableElements.getSearchControl(this._table.getId(), this._id);
      if (control[0]) {
        $('input', control).val(this._value === null ? '' : this._value);
      }
    }
  },
  /**
   * Получение значения
   * @returns {string|null}
   */
  getValue: function getValue() {
    var control = coreuiTableElements.getSearchControl(this._table.getId(), this._id);
    var input = $('input', control);
    if (input[0]) {
      var value = input.val();
      if (typeof value === 'string' && value !== '') {
        return value;
      }
    }
    return null;
  },
  /**
   * Инициализация событий
   * @returns {object}
   */
  initEvents: function initEvents() {
    var container = coreuiTableElements.getSearchContainer(this._table.getId());
    var control = coreuiTableElements.getSearchControl(this._table.getId(), this._id);
    var that = this;
    $('input', control).keyup(function (e) {
      if (e.key === 'Enter' || e.keyCode === 13) {
        that._table.searchRecords();
        container.fadeOut('fast');
      }
    });
  },
  /**
   * Формирование контента
   * @returns {string}
   */
  render: function render() {
    this._render = true;
    if (!coreuiTableUtils.isObject(this._options.attr)) {
      this._options.attr = {};
    }
    if (this._options.hasOwnProperty('width') && coreuiTableUtils.isNumeric(this._options.width)) {
      if (this._options.attr.hasOwnProperty('style')) {
        this._options.attr['style'] += ';width:' + this._options.width + 'px';
      } else {
        this._options.attr['style'] = 'width:' + this._options.width + 'px';
      }
    }
    this._options.attr['name'] = typeof this._options.field === 'string' ? this._options.field : '';
    this._options.attr['value'] = typeof this._value === 'string' || typeof this._value === 'number' ? this._value : '';
    if (this._options.attr.hasOwnProperty('type')) {
      delete this._options.attr.type;
    }
    var attributes = [];
    $.each(this._options.attr, function (name, value) {
      attributes.push(name + '="' + value + '"');
    });
    return ejs.render(tpl['search/date_month.html'], {
      attr: attributes.length > 0 ? ' ' + attributes.join(' ') : ''
    });
  }
};

coreuiTable$1.search.datetime = {
  _id: null,
  _table: null,
  _value: null,
  _render: false,
  _options: {
    id: null,
    type: 'datetime',
    field: null,
    label: null,
    value: null,
    width: 200,
    attr: {
      "class": "form-control d-inline-block"
    }
  },
  /**
   * Инициализация
   * @param {CoreUI.table.instance} table
   * @param {object}                options
   */
  init: function init(table, options) {
    this._options = $.extend(true, {}, this._options, options);
    this._table = table;
    this._id = this._options.hasOwnProperty('id') && typeof this._options.id === 'string' && this._options.id ? this._options.id : coreuiTableUtils.hashCode();
    if (this._options.value !== null) {
      this.setValue(this._options.value);
    }
  },
  /**
   * Получение параметров
   * @returns {object}
   */
  getOptions: function getOptions() {
    return $.extend(true, {}, this._options);
  },
  /**
   * Получение id
   * @returns {string}
   */
  getId: function getId() {
    return this._id;
  },
  /**
   * Установка значения
   * @param {string} value
   */
  setValue: function setValue(value) {
    if (typeof value !== 'string' && value !== null) {
      return;
    }
    if (value && (value.match(/^\d{4}\-\d{2}\-\d{2} \d{2}:\d{2}:\d{2}$/) === null || isNaN(new Date(value)))) {
      return;
    }
    this._value = value;
    if (this._render) {
      var control = coreuiTableElements.getSearchControl(this._table.getId(), this._id);
      if (control[0]) {
        $('input', control).val(this._value === null ? '' : this._value);
      }
    }
  },
  /**
   * Получение значения
   * @returns {string}
   */
  getValue: function getValue() {
    var control = coreuiTableElements.getSearchControl(this._table.getId(), this._id);
    var input = $('input', control);
    if (input[0]) {
      var value = input.val();
      if (typeof value === 'string' && value !== '') {
        return value;
      }
    }
    return null;
  },
  /**
   * Инициализация событий
   * @returns {object}
   */
  initEvents: function initEvents() {
    var container = coreuiTableElements.getSearchContainer(this._table.getId());
    var control = coreuiTableElements.getSearchControl(this._table.getId(), this._id);
    var that = this;
    $('input', control).keyup(function (e) {
      if (e.key === 'Enter' || e.keyCode === 13) {
        that._table.searchRecords();
        container.fadeOut('fast');
      }
    });
  },
  /**
   * Формирование контента
   * @returns {string}
   */
  render: function render() {
    this._render = true;
    if (!coreuiTableUtils.isObject(this._options.attr)) {
      this._options.attr = {};
    }
    if (this._options.hasOwnProperty('width') && coreuiTableUtils.isNumeric(this._options.width)) {
      if (this._options.attr.hasOwnProperty('style')) {
        this._options.attr['style'] += ';width:' + this._options.width + 'px';
      } else {
        this._options.attr['style'] = 'width:' + this._options.width + 'px';
      }
    }
    this._options.attr['name'] = typeof this._options.field === 'string' ? this._options.field : '';
    this._options.attr['value'] = typeof this._value === 'string' || typeof this._value === 'number' ? this._value : '';
    if (this._options.attr.hasOwnProperty('type')) {
      delete this._options.attr.type;
    }
    var attributes = [];
    $.each(this._options.attr, function (name, value) {
      attributes.push(name + '="' + value + '"');
    });
    return ejs.render(tpl['search/datetime.html'], {
      attr: attributes.length > 0 ? ' ' + attributes.join(' ') : ''
    });
  }
};

coreuiTable$1.search.date_range = {
  _id: null,
  _table: null,
  _value: null,
  _render: false,
  _options: {
    id: null,
    type: 'date_range',
    field: null,
    label: null,
    value: null,
    width: 200,
    attr: {
      "class": "form-control d-inline-block"
    }
  },
  /**
   * Инициализация
   * @param {CoreUI.table.instance} table
   * @param {object}                options
   */
  init: function init(table, options) {
    this._options = $.extend(true, {}, this._options, options);
    this._table = table;
    this._id = this._options.hasOwnProperty('id') && typeof this._options.id === 'string' && this._options.id ? this._options.id : coreuiTableUtils.hashCode();
    if (this._options.value !== null) {
      this.setValue(this._options.value);
    }
  },
  /**
   * Получение параметров
   * @returns {object}
   */
  getOptions: function getOptions() {
    return $.extend(true, {}, this._options);
  },
  /**
   * Получение id
   * @returns {string}
   */
  getId: function getId() {
    return this._id;
  },
  /**
   * Установка значения
   * @param {Object} value
   */
  setValue: function setValue(value) {
    if (value) {
      if (!coreuiTableUtils.isObject(value)) {
        return;
      }
      var dateStart = null;
      var dateEnd = null;
      if (value.hasOwnProperty('start') && typeof value.start === 'string' && value.start.match(/^\d{4}\-\d{2}\-\d{2}$/) === null && isNaN(new Date(value.start))) {
        dateStart = value.start;
      }
      if (value.hasOwnProperty('end') && typeof value.end === 'string' && value.end.match(/^\d{4}\-\d{2}\-\d{2}$/) === null && isNaN(new Date(value.end))) {
        dateEnd = value.end;
      }
      if (dateStart === null && dateEnd === null) {
        this._value = null;
      } else {
        this._value = {
          start: dateStart,
          end: dateEnd
        };
      }
    } else {
      this._value = null;
    }
    if (this._render) {
      var control = coreuiTableElements.getSearchControl(this._table.getId(), this._id);
      if (control[0]) {
        var inputStart = $('input.date-start', control);
        var inputEnd = $('input.date-end', control);
        if (this._value === null) {
          inputStart.val('');
          inputEnd.val('');
        } else if (coreuiTableUtils.isObject(this._value)) {
          inputStart.val(_typeof(this._value.start) !== null ? this._value.start : '');
          inputEnd.val(_typeof(this._value.end) !== null ? this._value.end : '');
        }
      }
    }
  },
  /**
   * Получение значения
   * @returns {Object|null}
   */
  getValue: function getValue() {
    var control = coreuiTableElements.getSearchControl(this._table.getId(), this._id);
    var inputStart = $('input.date-start', control);
    var inputEnd = $('input.date-end', control);
    if (inputStart[0] && inputEnd[0]) {
      var valueStart = inputStart.val();
      var valueEnd = inputEnd.val();
      if (typeof valueStart === 'string' && valueStart !== '' || typeof valueEnd === 'string' && valueEnd !== '') {
        return {
          start: valueStart !== '' ? valueStart : null,
          end: valueEnd !== '' ? valueEnd : null
        };
      }
    }
    return null;
  },
  /**
   * Инициализация событий
   * @returns {object}
   */
  initEvents: function initEvents() {
    var container = coreuiTableElements.getSearchContainer(this._table.getId());
    var control = coreuiTableElements.getSearchControl(this._table.getId(), this._id);
    var that = this;
    $('input.date-start, input.date-end', control).keyup(function (e) {
      if (e.key === 'Enter' || e.keyCode === 13) {
        that._table.searchRecords();
        container.fadeOut('fast');
      }
    });
  },
  /**
   * Формирование контента
   * @returns {string}
   */
  render: function render() {
    this._render = true;
    var options = this.getOptions();
    if (!coreuiTableUtils.isObject(options.attr)) {
      options.attr = {};
    }
    if (options.hasOwnProperty('width') && coreuiTableUtils.isNumeric(options.width)) {
      if (options.attr.hasOwnProperty('style')) {
        options.attr['style'] += ';width:' + options.width + 'px';
      } else {
        options.attr['style'] = 'width:' + options.width + 'px';
      }
    }
    if (options.attr.hasOwnProperty('type')) {
      delete options.attr.type;
    }
    if (options.attr.hasOwnProperty('value')) {
      delete options.attr.value;
    }
    var field = typeof options.field === 'string' ? options.field : '';
    var startAttr = [];
    var startEnd = [];
    $.each(options.attr, function (name, value) {
      if (['name', 'value', 'class'].indexOf(name) >= 0 || ['string', 'number'].indexOf(_typeof(value)) < 0) {
        return;
      }
      startAttr.push(name + '="' + value + '"');
      startEnd.push(name + '="' + value + '"');
    });
    if (options.attr.hasOwnProperty('class') && ['string', 'number'].indexOf(_typeof(options.attr["class"])) >= 0) {
      startAttr.push('class="' + options.attr["class"] + ' date-start"');
      startEnd.push('class="' + options.attr["class"] + ' date-end"');
    } else {
      startAttr.push('class="date-start"');
      startEnd.push('class="date-end"');
    }
    if (field) {
      startAttr.push('name="' + field + '[start]"');
      startEnd.push('name="' + field + '[end]"');
    }
    startAttr.push('value="' + (this._value ? this._value.start : '') + '"');
    startEnd.push('value="' + (this._value ? this._value.end : '') + '"');
    return ejs.render(tpl['search/date_range.html'], {
      startAttr: startAttr.length > 0 ? ' ' + startAttr.join(' ') : '',
      endAttr: startEnd.length > 0 ? ' ' + startEnd.join(' ') : ''
    });
  }
};

coreuiTable$1.search.datetime_range = {
  _id: null,
  _table: null,
  _value: null,
  _render: false,
  _options: {
    id: null,
    type: 'datetime_range',
    field: null,
    label: null,
    value: null,
    width: 200,
    attr: {
      "class": "form-control d-inline-block"
    }
  },
  /**
   * Инициализация
   * @param {CoreUI.table.instance} table
   * @param {object}                options
   */
  init: function init(table, options) {
    this._options = $.extend(true, {}, this._options, options);
    this._table = table;
    this._id = this._options.hasOwnProperty('id') && typeof this._options.id === 'string' && this._options.id ? this._options.id : coreuiTableUtils.hashCode();
    if (this._options.value !== null) {
      this.setValue(this._options.value);
    }
  },
  /**
   * Получение параметров
   * @returns {object}
   */
  getOptions: function getOptions() {
    return $.extend(true, {}, this._options);
  },
  /**
   * Получение id
   * @returns {string}
   */
  getId: function getId() {
    return this._id;
  },
  /**
   * Установка значения
   * @param {Object} value
   */
  setValue: function setValue(value) {
    if (value) {
      if (!coreuiTableUtils.isObject(value)) {
        return;
      }
      var dateStart = null;
      var dateEnd = null;
      if (value.hasOwnProperty('start') && typeof value.start === 'string' && value.start.match(/^\d{4}\-\d{2}\-\d{2} \d{2}:\d{2}:\d{2}$/) === null && isNaN(new Date(value.start))) {
        dateStart = value.start;
      }
      if (value.hasOwnProperty('end') && typeof value.end === 'string' && value.end.match(/^\d{4}\-\d{2}\-\d{2} \d{2}:\d{2}:\d{2}$/) === null && isNaN(new Date(value.end))) {
        dateEnd = value.end;
      }
      if (dateStart === null && dateEnd === null) {
        this._value = null;
      } else {
        this._value = {
          start: dateStart,
          end: dateEnd
        };
      }
    } else {
      this._value = null;
    }
    if (this._render) {
      var control = coreuiTableElements.getSearchControl(this._table.getId(), this._id);
      if (control[0]) {
        var inputStart = $('input.date-start', control);
        var inputEnd = $('input.date-end', control);
        if (this._value === null) {
          inputStart.val('');
          inputEnd.val('');
        } else if (coreuiTableUtils.isObject(this._value)) {
          inputStart.val(_typeof(this._value.start) !== null ? this._value.start : '');
          inputEnd.val(_typeof(this._value.end) !== null ? this._value.end : '');
        }
      }
    }
  },
  /**
   * Получение значения
   * @returns {Object|null}
   */
  getValue: function getValue() {
    var control = coreuiTableElements.getSearchControl(this._table.getId(), this._id);
    var inputStart = $('input.date-start', control);
    var inputEnd = $('input.date-end', control);
    if (inputStart[0] && inputEnd[0]) {
      var valueStart = inputStart.val();
      var valueEnd = inputEnd.val();
      if (typeof valueStart === 'string' && valueStart !== '' || typeof valueEnd === 'string' && valueEnd !== '') {
        return {
          start: valueStart !== '' ? valueStart : null,
          end: valueEnd !== '' ? valueEnd : null
        };
      }
    }
    return null;
  },
  /**
   * Инициализация событий
   * @returns {object}
   */
  initEvents: function initEvents() {
    var container = coreuiTableElements.getSearchContainer(this._table.getId());
    var control = coreuiTableElements.getSearchControl(this._table.getId(), this._id);
    var that = this;
    $('input.date-start, input.date-end', control).keyup(function (e) {
      if (e.key === 'Enter' || e.keyCode === 13) {
        that._table.searchRecords();
        container.fadeOut('fast');
      }
    });
  },
  /**
   * Формирование контента
   * @returns {string}
   */
  render: function render() {
    this._render = true;
    if (!coreuiTableUtils.isObject(this._options.attr)) {
      this._options.attr = {};
    }
    if (this._options.hasOwnProperty('width') && coreuiTableUtils.isNumeric(this._options.width)) {
      if (this._options.attr.hasOwnProperty('style')) {
        this._options.attr['style'] += ';width:' + this._options.width + 'px';
      } else {
        this._options.attr['style'] = 'width:' + this._options.width + 'px';
      }
    }
    if (this._options.attr.hasOwnProperty('type')) {
      delete this._options.attr.type;
    }
    if (this._options.attr.hasOwnProperty('value')) {
      delete this._options.attr.value;
    }
    var field = typeof this._options.field === 'string' ? this._options.field : '';
    var startAttr = [];
    var startEnd = [];
    $.each(this._options.attr, function (name, value) {
      if (['name', 'value', 'class'].indexOf(name) >= 0 || ['string', 'number'].indexOf(_typeof(value)) < 0) {
        return;
      }
      startAttr.push(name + '="' + value + '"');
      startEnd.push(name + '="' + value + '"');
    });
    if (this._options.attr.hasOwnProperty('class') && ['string', 'number'].indexOf(_typeof(this._options.attr["class"])) >= 0) {
      startAttr.push('class="' + this._options.attr["class"] + ' date-start"');
      startEnd.push('class="' + this._options.attr["class"] + ' date-end"');
    } else {
      startAttr.push('class="date-start"');
      startEnd.push('class="date-end"');
    }
    if (field) {
      startAttr.push('name="' + field + '[start]"');
      startEnd.push('name="' + field + '[end]"');
    }
    startAttr.push('value="' + (this._value ? this._value.start : '') + '"');
    startEnd.push('value="' + (this._value ? this._value.end : '') + '"');
    return ejs.render(tpl['search/datetime_range.html'], {
      startAttr: startAttr.length > 0 ? ' ' + startAttr.join(' ') : '',
      endAttr: startEnd.length > 0 ? ' ' + startEnd.join(' ') : ''
    });
  }
};

coreuiTable$1.search.checkbox = {
  _id: null,
  _table: null,
  _value: null,
  _render: false,
  _options: {
    id: null,
    type: 'checkbox',
    field: null,
    label: null,
    value: null,
    options: []
  },
  /**
   * Инициализация
   * @param {CoreUI.table.instance} table
   * @param {object}                options
   */
  init: function init(table, options) {
    this._options = $.extend(true, {}, this._options, options);
    this._table = table;
    this._id = this._options.hasOwnProperty('id') && typeof this._options.id === 'string' && this._options.id ? this._options.id : coreuiTableUtils.hashCode();
    if (this._options.value !== null) {
      this.setValue(this._options.value);
    }
  },
  /**
   * Получение параметров
   * @returns {object}
   */
  getOptions: function getOptions() {
    return $.extend(true, {}, this._options);
  },
  /**
   * Получение id
   * @returns {string}
   */
  getId: function getId() {
    return this._id;
  },
  /**
   * Установка значения
   * @param {Array|null} value
   */
  setValue: function setValue(value) {
    if (['string', 'number', 'object'].indexOf(_typeof(value)) < 0) {
      return;
    }
    if (_typeof(value) === 'object') {
      if (Array.isArray(value)) {
        var items = [];
        $.each(value, function (key, item) {
          if (typeof value !== 'string' && typeof value !== 'number') {
            return;
          }
          items.push(item);
        });
        this._value = items;
      } else {
        this._value = null;
      }
    } else {
      this._value = [value];
    }
    if (this._render) {
      var control = coreuiTableElements.getSearchControl(this._table.getId(), this._id);
      if (control[0]) {
        $('input:checked', control).prop('checked', false);
        if (Array.isArray(this._value)) {
          $.each(this._value, function (key, value) {
            $('input[value="' + value + '"]', control).prop('checked', true);
          });
        }
      }
    }
  },
  /**
   * Получение значения
   * @returns {Array|null}
   */
  getValue: function getValue() {
    var control = coreuiTableElements.getSearchControl(this._table.getId(), this._id);
    if (control[0]) {
      var inputs = $('input:checked', control);
      var items = [];
      $.each(inputs, function (key, input) {
        var value = $(input).attr('value');
        if (['string', 'number'].indexOf(_typeof(value)) >= 0 && value !== '') {
          items.push(value);
        }
      });
      return items.length > 0 ? items : null;
    } else {
      return this._value;
    }
  },
  /**
   * Инициализация событий
   */
  initEvents: function initEvents() {},
  /**
   * Формирование контента
   * @returns {string}
   */
  render: function render() {
    this._render = true;
    var that = this;
    var options = [];
    $.each(this._options.options, function (key, option) {
      if (!coreuiTableUtils.isObject(option) || !option.hasOwnProperty('value') || ['string', 'numeric'].indexOf(_typeof(option.value)) === -1) {
        return;
      }
      var checked = Array.isArray(that._value) ? that._value.indexOf(option.value) >= 0 : false;
      var text = option.hasOwnProperty('text') ? option.text : option.value;
      options.push({
        text: text,
        value: option.value,
        checked: checked
      });
    });
    return ejs.render(tpl['search/checkbox.html'], {
      options: options,
      field: typeof this._options.field === 'string' ? this._options.field : ''
    });
  }
};

coreuiTable$1.search.radio = {
  _id: null,
  _table: null,
  _value: null,
  _render: false,
  _options: {
    id: null,
    type: 'radio',
    field: null,
    label: null,
    value: null,
    options: []
  },
  /**
   * Инициализация
   * @param {CoreUI.table.instance} table
   * @param {object}                options
   */
  init: function init(table, options) {
    this._options = $.extend(true, {}, this._options, options);
    this._table = table;
    this._id = this._options.hasOwnProperty('id') && typeof this._options.id === 'string' && this._options.id ? this._options.id : coreuiTableUtils.hashCode();
    if (this._options.value !== null) {
      this.setValue(this._options.value);
    }
  },
  /**
   * Получение параметров
   * @returns {object}
   */
  getOptions: function getOptions() {
    return $.extend(true, {}, this._options);
  },
  /**
   * Получение id
   * @returns {string}
   */
  getId: function getId() {
    return this._id;
  },
  /**
   * Установка значения
   * @param {string} value
   */
  setValue: function setValue(value) {
    if (value !== null && typeof value !== 'string' && typeof value !== 'number') {
      return;
    }
    this._value = value;
    if (this._render) {
      var control = coreuiTableElements.getSearchControl(this._table.getId(), this._id);
      if (control[0]) {
        $('input', control).prop('checked', false);
        if (this._value !== null) {
          $('input[value="' + this._value + '"]', control).prop('checked', true);
        }
      }
    }
  },
  /**
   * Получение значения
   * @returns {string|null}
   */
  getValue: function getValue() {
    var control = coreuiTableElements.getSearchControl(this._table.getId(), this._id);
    var input = $('input:checked', control);
    if (input[0]) {
      var value = input.val();
      return value === '' ? null : value;
    } else {
      return this._value;
    }
  },
  /**
   * Получение типа поискового алгоритма
   */
  getAlgorithm: function getAlgorithm() {
    return 'strict';
  },
  /**
   * Инициализация событий
   * @returns {object}
   */
  initEvents: function initEvents() {},
  /**
   * Формирование контента
   * @returns {string}
   */
  render: function render() {
    this._render = true;
    var that = this;
    var checkedAll = true;
    var options = [];
    $.each(this._options.options, function (key, option) {
      if (!coreuiTableUtils.isObject(option) || !option.hasOwnProperty('value') || ['string', 'numeric'].indexOf(_typeof(option.value)) === -1) {
        return;
      }
      var checked = option.value == that._value;
      var text = option.hasOwnProperty('text') ? option.text : option.value;
      if (checked) {
        checkedAll = false;
      }
      options.push({
        text: text,
        value: option.value,
        checked: checked
      });
    });
    return ejs.render(tpl['search/radio.html'], {
      options: options,
      checkedAll: checkedAll,
      field: typeof this._options.field === 'string' ? this._options.field : '',
      lang: this._table.getLang()
    });
  }
};

coreuiTable$1.search.select = {
  _id: null,
  _table: null,
  _value: null,
  _render: false,
  _options: {
    id: null,
    type: 'select',
    field: null,
    label: null,
    width: null,
    value: null,
    attr: {
      "class": 'form-select d-inline-block'
    },
    options: []
  },
  /**
   * Инициализация
   * @param {CoreUI.table.instance} table
   * @param {object}                options
   */
  init: function init(table, options) {
    this._options = $.extend(true, {}, this._options, options);
    this._table = table;
    this._id = this._options.hasOwnProperty('id') && typeof this._options.id === 'string' && this._options.id ? this._options.id : coreuiTableUtils.hashCode();
    if (this._options.value !== null) {
      this.setValue(this._options.value);
    }
  },
  /**
   * Получение параметров
   * @returns {object}
   */
  getOptions: function getOptions() {
    return $.extend(true, {}, this._options);
  },
  /**
   * Получение id
   * @returns {string}
   */
  getId: function getId() {
    return this._id;
  },
  /**
   * Установка значения
   * @param {Array} value
   */
  setValue: function setValue(value) {
    if (['string', 'number', 'object'].indexOf(_typeof(value)) < 0) {
      return;
    }
    if (_typeof(value) === 'object') {
      if (Array.isArray(value)) {
        var items = [];
        $.each(value, function (key, item) {
          if (typeof value !== 'string' && typeof value !== 'number') {
            return;
          }
          items.push(item);
        });
        this._value = items;
      } else {
        this._value = null;
      }
    } else {
      this._value = [value];
    }
    if (this._render) {
      var control = coreuiTableElements.getSearchControl(this._table.getId(), this._id);
      if (control[0]) {
        $('select option:selected', control).prop('selected', false);
        if (Array.isArray(this._value)) {
          $.each(this._value, function (key, value) {
            $('select option[value="' + value + '"]', control).prop('selected', true);
          });
        }
      }
    }
  },
  /**
   * Получение значения
   * @returns {Array|null}
   */
  getValue: function getValue() {
    var control = coreuiTableElements.getSearchControl(this._table.getId(), this._id);
    if (control[0]) {
      var options = $('select option:selected', control);
      var items = [];
      $.each(options, function (key, option) {
        var value = $(option).attr('value');
        if (['string', 'number'].indexOf(_typeof(value)) >= 0 && value !== '') {
          items.push(value);
        }
      });
      return items.length > 0 ? items : null;
    } else {
      return this._value;
    }
  },
  /**
   * Инициализация событий
   * @returns {object}
   */
  initEvents: function initEvents() {},
  /**
   * Формирование контента
   * @returns {string}
   */
  render: function render() {
    this._render = true;
    var that = this;
    var options = this.getOptions();
    var selectOptions = [];
    var attributes = [];
    if (!options.hasOwnProperty('attr') || !coreuiTableUtils.isObject(options.attr)) {
      options.attr = {};
    }
    if (options.field) {
      options.attr.name = this._options.field;
    }
    if (options.width) {
      options.attr = coreuiTableUtils.mergeAttr({
        style: 'width:' + options.width + 'px'
      }, options.attr);
    }
    if (options.hasOwnProperty('options') && _typeof(options.options) === 'object' && options.options !== null) {
      $.each(options.options, function (key, option) {
        if (typeof option === 'string' || typeof option === 'number') {
          selectOptions.push(that._buildOption({
            type: 'option',
            value: key,
            text: option
          }));
        } else if (coreuiTableUtils.isObject(option)) {
          var type = option.hasOwnProperty('type') && typeof option.type === 'string' ? option.type : 'option';
          if (type === 'group') {
            var renderAttr = [];
            var groupAttr = {};
            var groupOptions = [];
            if (option.hasOwnProperty('attr') && coreuiTableUtils.isObject(option.attr)) {
              groupAttr = option.attr;
            }
            if (option.hasOwnProperty('label') && ['string', 'number'].indexOf(_typeof(option.label)) >= 0) {
              groupAttr.label = option.label;
            }
            $.each(groupAttr, function (name, value) {
              renderAttr.push(name + '="' + value + '"');
            });
            if (Array.isArray(option.options)) {
              $.each(option.options, function (key, groupOption) {
                groupOptions.push(that._buildOption(groupOption));
              });
            }
            selectOptions.push({
              type: 'group',
              attr: renderAttr.length > 0 ? ' ' + renderAttr.join(' ') : '',
              options: groupOptions
            });
          } else {
            selectOptions.push(that._buildOption(option));
          }
        }
      });
    }
    $.each(options.attr, function (name, value) {
      attributes.push(name + '="' + value + '"');
    });
    return ejs.render(tpl['search/select.html'], {
      field: options,
      value: this._value,
      attr: attributes.length > 0 ? ' ' + attributes.join(' ') : '',
      options: selectOptions
    });
  },
  /**
   * Сборка опции
   * @param option
   * @return {object}
   * @private
   */
  _buildOption: function _buildOption(option) {
    var optionAttr = [];
    var optionText = option.hasOwnProperty('text') && ['string', 'number'].indexOf(_typeof(option.text)) >= 0 ? option.text : '';
    $.each(option, function (name, value) {
      if (name !== 'text') {
        optionAttr.push(name + '="' + value + '"');
      }
    });
    if (Array.isArray(this._value)) {
      $.each(this._value, function (key, itemValue) {
        if (itemValue == option.value) {
          optionAttr.push('selected="selected"');
          return false;
        }
      });
    } else if (this._value == option.value) {
      optionAttr.push('selected="selected"');
    }
    return {
      type: 'option',
      text: optionText,
      attr: optionAttr.length > 0 ? ' ' + optionAttr.join(' ') : ''
    };
  }
};

coreuiTable$1.search["switch"] = {
  _id: null,
  _table: null,
  _value: null,
  _render: false,
  _options: {
    id: null,
    type: 'switch',
    field: null,
    value: null,
    valueY: 'Y'
  },
  /**
   * Инициализация
   * @param {CoreUI.table.instance} table
   * @param {object}                options
   */
  init: function init(table, options) {
    this._options = $.extend(true, {}, this._options, options);
    this._table = table;
    this._id = this._options.hasOwnProperty('id') && typeof this._options.id === 'string' && this._options.id ? this._options.id : coreuiTableUtils.hashCode();
    if (this._options.value !== null) {
      this.setValue(this._options.value);
    }
  },
  /**
   * Получение параметров
   * @returns {object}
   */
  getOptions: function getOptions() {
    return $.extend(true, {}, this._options);
  },
  /**
   * Получение id
   * @returns {string}
   */
  getId: function getId() {
    return this._id;
  },
  /**
   * Установка значения
   * @param {string|number|null} value
   */
  setValue: function setValue(value) {
    if (value !== null && typeof value !== 'string' && typeof value !== 'number') {
      return;
    }
    this._value = value;
    if (this._render) {
      var control = coreuiTableElements.getSearchControl(this._table.getId(), this._id);
      if (control[0]) {
        var valueY = typeof this._options.valueY === 'string' || typeof this._options.valueY === 'number' ? this._options.valueY : '';
        if (this._value === null) {
          $('input', control).prop('checked', false);
        } else if (this._value === valueY) {
          $('input', control).prop('checked', true);
        } else {
          $('input', control).prop('checked', false);
        }
      }
    }
  },
  /**
   * Получение значения
   * @returns {string}
   */
  getValue: function getValue() {
    var control = coreuiTableElements.getSearchControl(this._table.getId(), this._id);
    var input = $('input:checked', control);
    return input[0] ? input.val() : null;
  },
  /**
   * Инициализация событий
   */
  initEvents: function initEvents() {},
  /**
   * Формирование контента
   * @returns {string}
   */
  render: function render() {
    this._render = true;
    var options = this.getOptions();
    var valueY = typeof options.valueY === 'string' || typeof options.valueY === 'number' ? options.valueY : '';
    return ejs.render(tpl['search/switch.html'], {
      id: this._id,
      valueY: valueY,
      field: typeof options.field === 'string' ? options.field : '',
      checked: this._value == valueY
    });
  }
};

coreuiTable$1.columns.date = {
  _table: null,
  _options: {
    type: 'date',
    field: null,
    label: null,
    show: true,
    width: null,
    format: 'DD.MM.YYYY',
    attr: {},
    attrHeader: {},
    render: null
  },
  /**
   * Инициализация
   * @param {CoreUI.table.instance} table
   * @param {object}                options
   */
  init: function init(table, options) {
    this._table = table;
    this._options = $.extend({}, this._options, options);
  },
  /**
   * Установка видимости колонки
   * @param {boolean} isShow
   */
  setShow: function setShow(isShow) {
    this._options.show = !!isShow;
  },
  /**
   * Видимости колонки
   */
  isShow: function isShow() {
    return !!this._options.show;
  },
  /**
   * Получение параметров
   * @returns {object}
   */
  getOptions: function getOptions() {
    return $.extend({}, this._options);
  },
  /**
   * Формирование контента
   * @param {string} content
   * @param {object} record
   * @returns {string}
   */
  render: function render(content, record) {
    if (typeof content !== 'string') {
      return '';
    }
    try {
      if (content !== '') {
        var date = new Date(content);
        content = this._options.format.replace(/YYYY/g, this._strPadLeft(date.getFullYear(), 4)).replace(/MM/g, this._strPadLeft(date.getMonth() + 1, 2)).replace(/M/g, date.getMonth() + 1).replace(/DD/g, this._strPadLeft(date.getDate(), 2)).replace(/D/g, date.getDate());
      }
    } catch (e) {
      content = '';
    }
    return content;
  },
  /**
   * Размерность строки
   * @param {string} str
   * @param {int}    count
   * @param {string} repeat
   * @returns {string}
   */
  _strPadLeft: function _strPadLeft(str, count, repeat) {
    str = String(str);
    if (str.length >= count) {
      return str;
    }
    repeat = repeat ? repeat : '0';
    return (repeat.repeat(count) + str).slice(-count);
  }
};

coreuiTable$1.columns.datetime = {
  _table: null,
  _options: {
    type: 'datetime',
    field: null,
    label: null,
    show: true,
    width: null,
    format: 'DD.MM.YYYY hh:mm:ss',
    attr: {},
    attrHeader: {},
    render: null
  },
  /**
   * Инициализация
   * @param {CoreUI.table.instance} table
   * @param {object}                options
   */
  init: function init(table, options) {
    this._table = table;
    this._options = $.extend({}, this._options, options);
  },
  /**
   * Установка видимости колонки
   * @param {boolean} isShow
   */
  setShow: function setShow(isShow) {
    this._options.show = !!isShow;
  },
  /**
   * Видимости колонки
   */
  isShow: function isShow() {
    return !!this._options.show;
  },
  /**
   * Получение параметров
   * @returns {object}
   */
  getOptions: function getOptions() {
    return $.extend({}, this._options);
  },
  /**
   * Формирование контента
   * @param {string} content
   * @param {object} record
   * @returns {string}
   */
  render: function render(content, record) {
    if (typeof content !== 'string') {
      return '';
    }
    try {
      if (content !== '') {
        var date = new Date(content);
        content = this._options.format.replace(/YYYY/g, this._strPadLeft(date.getFullYear(), 4)).replace(/MM/g, this._strPadLeft(date.getMonth() + 1, 2)).replace(/M/g, date.getMonth() + 1).replace(/DD/g, this._strPadLeft(date.getDate(), 2)).replace(/D/g, date.getDate()).replace(/hh/g, this._strPadLeft(date.getHours(), 2)).replace(/mm/g, this._strPadLeft(date.getMinutes(), 2)).replace(/m/g, date.getMinutes()).replace(/ss/g, this._strPadLeft(date.getSeconds(), 2)).replace(/s/g, date.getSeconds());
      }
    } catch (e) {
      content = '';
    }
    return content;
  },
  /**
   * Размерность строки
   * @param {string} str
   * @param {int}    count
   * @param {string} repeat
   * @returns {string}
   */
  _strPadLeft: function _strPadLeft(str, count, repeat) {
    str = String(str);
    if (str.length >= count) {
      return str;
    }
    repeat = repeat ? repeat : '0';
    return (repeat.repeat(count) + str).slice(-count);
  }
};

coreuiTable$1.columns.html = {
  _table: null,
  _options: {
    type: 'html',
    field: null,
    label: null,
    show: true,
    width: null,
    minWidth: null,
    maxWidth: null,
    noWrap: null,
    noWrapToggle: null,
    attr: {},
    attrHeader: {},
    render: null
  },
  /**
   * Инициализация
   * @param {CoreUI.table.instance} table
   * @param {object}                options
   */
  init: function init(table, options) {
    this._table = table;
    this._options = $.extend({}, this._options, options);
    var tableOptions = this._table.getOptions();
    if (this._options.noWrap || this._options.noWrap === null && tableOptions.noWrap) {
      if (!this._options.attr) {
        this._options.attr = {
          "class": 'coreui_table__no-wrap'
        };
      } else {
        this._options.attr = coreuiTableUtils.mergeAttr(this._options.attr, {
          "class": 'coreui_table__no-wrap'
        });
      }
      this._options.noWrap = true;
      if (this._options.noWrapToggle || this._options.noWrapToggle === null && tableOptions.noWrapToggle) {
        this._options.noWrapToggle = true;
      }
    }
  },
  /**
   * Установка видимости колонки
   * @param {boolean} isShow
   */
  setShow: function setShow(isShow) {
    this._options.show = !!isShow;
  },
  /**
   * Видимости колонки
   */
  isShow: function isShow() {
    return !!this._options.show;
  },
  /**
   * Получение параметров
   * @returns {object}
   */
  getOptions: function getOptions() {
    return $.extend({}, this._options);
  },
  /**
   * Формирование контента
   * @param {string|HTMLElement|jQuery} content
   * @param {object}                    record
   * @returns {string}
   */
  render: function render(content, record) {
    if (['string', 'bigint', 'symbol', 'number'].indexOf(_typeof(content)) < 0 && !(content instanceof HTMLElement) && !(window.hasOwnProperty('jQuery') && content instanceof jQuery)) {
      return '';
    }
    if (this._options.noWrap) {
      content = $('<div></div>').append(content);
      if (this._options.noWrapToggle) {
        content = $(content).after('<i class="bi bi-caret-down-fill toggle"></i>');
      }
    }
    return content;
  }
};

coreuiTable$1.columns.number = {
  _table: null,
  _options: {
    type: 'number',
    field: null,
    label: null,
    show: true,
    width: null,
    minWidth: null,
    maxWidth: null,
    noWrap: null,
    noWrapToggle: null,
    attr: {},
    attrHeader: {},
    render: null
  },
  /**
   * Инициализация
   * @param {CoreUI.table.instance} table
   * @param {object}                options
   */
  init: function init(table, options) {
    this._table = table;
    this._options = $.extend({}, this._options, options);
    var tableOptions = this._table.getOptions();
    if (this._options.noWrap || this._options.noWrap === null && tableOptions.noWrap) {
      if (!this._options.attr) {
        this._options.attr = {
          "class": 'coreui_table__no-wrap'
        };
      } else {
        this._options.attr = coreuiTableUtils.mergeAttr(this._options.attr, {
          "class": 'coreui_table__no-wrap'
        });
      }
      this._options.noWrap = true;
      if (this._options.noWrapToggle || this._options.noWrapToggle === null && tableOptions.noWrapToggle) {
        this._options.noWrapToggle = true;
      }
    }
  },
  /**
   * Установка видимости колонки
   * @param {boolean} isShow
   */
  setShow: function setShow(isShow) {
    this._options.show = !!isShow;
  },
  /**
   * Видимости колонки
   */
  isShow: function isShow() {
    return !!this._options.show;
  },
  /**
   * Получение параметров
   * @returns {object}
   */
  getOptions: function getOptions() {
    return $.extend({}, this._options);
  },
  /**
   * Формирование контента
   * @param {string} content
   * @param {object} record
   * @returns {string}
   */
  render: function render(content, record) {
    if (['string', 'bigint', 'symbol', 'number'].indexOf(_typeof(content)) < 0) {
      return '';
    }
    content = String(content).replace(/,/g, '.').replace(/[^0-9\-\.]/g, '').replace(/[\s]{2,}/g, ' ');
    content = content.replace(/(?<!(\.\d*|^.{0}))(?=(\d{3})+(?!\d))/g, '$1 ').replace(/\- /g, '-');
    if (this._options.noWrap) {
      content = '<div>' + content + '</div>';
      if (this._options.noWrapToggle) {
        content += '<i class="bi bi-caret-down-fill toggle"></i>';
      }
    }
    return content;
  }
};

coreuiTable$1.columns.money = {
  _table: null,
  _options: {
    type: 'money',
    field: null,
    label: null,
    show: true,
    width: null,
    minWidth: null,
    maxWidth: null,
    noWrap: null,
    noWrapToggle: null,
    currency: null,
    attr: {
      "class": 'text-end'
    },
    attrHeader: {
      "class": 'text-end'
    },
    render: null
  },
  /**
   * Инициализация
   * @param {CoreUI.table.instance} table
   * @param {object}                options
   */
  init: function init(table, options) {
    this._table = table;
    this._options = $.extend({}, this._options, options);
    var tableOptions = this._table.getOptions();
    if (this._options.noWrap || this._options.noWrap === null && tableOptions.noWrap) {
      if (!this._options.attr) {
        this._options.attr = {
          "class": 'coreui_table__no-wrap'
        };
      } else {
        this._options.attr = coreuiTableUtils.mergeAttr(this._options.attr, {
          "class": 'coreui_table__no-wrap'
        });
      }
      this._options.noWrap = true;
      if (this._options.noWrapToggle || this._options.noWrapToggle === null && tableOptions.noWrapToggle) {
        this._options.noWrapToggle = true;
      }
    }
  },
  /**
   * Установка видимости колонки
   * @param {boolean} isShow
   */
  setShow: function setShow(isShow) {
    this._options.show = !!isShow;
  },
  /**
   * Видимости колонки
   */
  isShow: function isShow() {
    return !!this._options.show;
  },
  /**
   * Получение параметров
   * @returns {object}
   */
  getOptions: function getOptions() {
    return $.extend({}, this._options);
  },
  /**
   * Формирование контента
   * @param {string} content
   * @param {object} record
   * @returns {string}
   */
  render: function render(content, record) {
    if (['string', 'bigint', 'symbol', 'number'].indexOf(_typeof(content)) < 0) {
      return '';
    }
    if (isNaN(content)) {
      content = content.toString().replace(/(\d)(?=(\d\d\d)+([^\d]|$))/g, '$1 ');
    } else {
      content = Number(content).toFixed(2).toString();
      content = content.replace(/(\d)(?=(\d\d\d)+([^\d]|$))/g, '$1 ');
    }
    if (this._options.currency && ['string', 'number'].indexOf(_typeof(this._options.currency)) >= 0) {
      content += ' <small class="text-muted">' + this._options.currency + '</small>';
    }
    if (this._options.noWrap) {
      content = '<div>' + content + '</div>';
      if (this._options.noWrapToggle) {
        content += '<i class="bi bi-caret-down-fill toggle"></i>';
      }
    }
    return content;
  }
};

coreuiTable$1.columns.numbers = {
  _table: null,
  _options: {
    type: 'numbers',
    label: '№',
    width: 20,
    attr: {
      "class": 'text-end'
    },
    attrHeader: null
  },
  /**
   * Инициализация
   * @param {CoreUI.table.instance} table
   * @param {object}                options
   */
  init: function init(table, options) {
    this._table = table;
    this._options = $.extend(true, {}, this._options, options);
  },
  /**
   * Видимости колонки
   */
  isShow: function isShow() {
    return true;
  },
  /**
   * Получение параметров
   * @returns {object}
   */
  getOptions: function getOptions() {
    return $.extend({}, this._options);
  },
  /**
   * Формирование контента
   * @param {string} content
   * @param {object} record
   * @returns {string}
   */
  render: function render(content, record) {
    return this._table._recordsNumber;
  }
};

coreuiTable$1.columns.select = {
  _table: null,
  _options: {
    type: 'select',
    field: null,
    label: '',
    show: true,
    width: 35,
    attr: {
      "class": 'coreui-table__select_container text-center'
    },
    attrHeader: {
      "class": 'text-center'
    }
  },
  /**
   * Инициализация
   * @param {CoreUI.table.instance} table
   * @param {object}                options
   */
  init: function init(table, options) {
    if (options.hasOwnProperty('attr')) {
      options.attr = CoreUI.table._mergeAttr(this._options.attr, options.attr);
    }
    if (options.hasOwnProperty('attrHeader')) {
      options.attrHeader = CoreUI.table._mergeAttr(this._options.attrHeader, options.attrHeader);
    }
    this._table = table;
    this._options = $.extend(true, {}, this._options, options);
    this._options.label = tpl['columns/select_label.html'];

    // Показ строк
    this._table.on('records_show', function () {
      var selects = coreuiTableElements.getRowsSelects(table.getId());
      var selectAll = coreuiTableElements.getRowsSelectAll(table.getId());

      // Отмена обработки нажатия в select колонках
      $(selects).click(function (event) {
        event.stopPropagation();
      });

      // Выбор всех строк
      selectAll.click(function (event) {
        if ($(this).is(':checked')) {
          table.selectAll();
        } else {
          table.unselectAll();
        }
      });
    });
  },
  /**
   * Установка видимости колонки
   * @param {boolean} isShow
   */
  setShow: function setShow(isShow) {
    this._options.show = !!isShow;
  },
  /**
   * Видимости колонки
   */
  isShow: function isShow() {
    return !!this._options.show;
  },
  /**
   * Получение параметров
   * @returns {object}
   */
  getOptions: function getOptions() {
    return $.extend({}, this._options);
  },
  /**
   * Формирование контента
   * @param {string} content
   * @param {object} record
   * @returns {string}
   */
  render: function render(content, record) {
    var select = $(ejs.render(tpl['columns/select.html'], {
      index: record.index
    }));
    var that = this;

    // Выбор строки
    select.click(function (event) {
      var tr = coreuiTableElements.getTrByIndex(that._table.getId(), record.index);
      if (!tr) {
        return;
      }
      if ($(this).is(':checked')) {
        $(tr).addClass('table-primary');
        coreuiTablePrivate._trigger(that._table, 'record_select', [record]);
      } else {
        $(tr).removeClass('table-primary');
        coreuiTablePrivate._trigger(that._table, 'record_unselect', [record]);
      }
    });
    return select;
  }
};

coreuiTable$1.columns["switch"] = {
  _table: null,
  _options: {
    type: 'switch',
    label: '',
    field: '',
    show: true,
    disabled: false,
    width: 5,
    valueY: 'Y',
    valueN: 'N',
    attr: {
      "class": 'coreui-table__switch_container'
    },
    attrHeader: {},
    onChange: null
  },
  /**
   * Инициализация
   * @param {CoreUI.table.instance} table
   * @param {object}                options
   */
  init: function init(table, options) {
    this._table = table;
    this._options = $.extend(true, {}, this._options, options);

    // Показ строк
    this._table.on('records_show', function () {
      var containers = coreuiTableElements.getRowsSwitches(table.getId());

      // Отмена обработки нажатия в switch колонках
      containers.click(function (event) {
        event.stopPropagation();
      });
    });
  },
  /**
   * Установка видимости колонки
   * @param {boolean} isShow
   */
  setShow: function setShow(isShow) {
    this._options.show = !!isShow;
  },
  /**
   * Видимости колонки
   */
  isShow: function isShow() {
    return !!this._options.show;
  },
  /**
   * Получение параметров
   * @returns {object}
   */
  getOptions: function getOptions() {
    return $.extend(true, {}, this._options);
  },
  /**
   * Формирование контента
   * @param {string} content
   * @param {object} record
   * @returns {string}
   */
  render: function render(content, record) {
    var isChecked = record.data.hasOwnProperty(this._options.field) && record.data[this._options.field] === this._options.valueY;
    var formSwitch = $(ejs.render(tpl['columns/switch.html'], {
      index: record.index,
      field: this._options.field,
      disabled: this._options.disabled,
      checked: isChecked
    }));

    // События нажатия на переключатель
    if (this._options.hasOwnProperty('onChange') && (typeof this._options.onChange === 'function' || typeof this._options.onChange === 'string')) {
      var that = this;
      $('.coreui-table__switch', formSwitch).change(function (event) {
        var isChecked = $(this).is(':checked');
        if (typeof that._options.onChange === 'function') {
          that._options.onChange(record, isChecked, this);
        } else if (typeof that._options.onChange === 'string') {
          var id = null;
          if (record.hasOwnProperty(that._table._options.primaryKey)) {
            id = record[that._table._options.primaryKey];
          }
          var func = new Function('record', 'checked', 'id', that._options.onChange);
          func(record, this, id);
        }
        return false;
      });
    }
    return formSwitch;
  }
};

coreuiTable$1.columns.text = {
  _table: null,
  _options: {
    type: 'text',
    field: null,
    label: null,
    show: true,
    width: null,
    minWidth: null,
    maxWidth: null,
    attr: null,
    noWrap: null,
    noWrapToggle: null,
    attrHeader: null,
    render: null
  },
  /**
   * Инициализация
   * @param {CoreUI.table.instance} table
   * @param {object}                options
   */
  init: function init(table, options) {
    this._table = table;
    this._options = $.extend({}, this._options, options);
    var tableOptions = this._table.getOptions();
    if (this._options.noWrap || this._options.noWrap === null && tableOptions.noWrap) {
      if (!this._options.attr) {
        this._options.attr = {
          "class": 'coreui_table__no-wrap'
        };
      } else {
        this._options.attr = coreuiTableUtils.mergeAttr(this._options.attr, {
          "class": 'coreui_table__no-wrap'
        });
      }
      this._options.noWrap = true;
      if (this._options.noWrapToggle || this._options.noWrapToggle === null && tableOptions.noWrapToggle) {
        this._options.noWrapToggle = true;
      }
    }
  },
  /**
   * Установка видимости колонки
   * @param {boolean} isShow
   */
  setShow: function setShow(isShow) {
    this._options.show = !!isShow;
  },
  /**
   * Видимости колонки
   */
  isShow: function isShow() {
    return !!this._options.show;
  },
  /**
   * Получение параметров
   * @returns {object}
   */
  getOptions: function getOptions() {
    return $.extend({}, this._options);
  },
  /**
   * Формирование контента
   * @param {string} content
   * @param {object} record
   * @returns {string}
   */
  render: function render(content, record) {
    if (['string', 'bigint', 'symbol', 'number'].indexOf(_typeof(content)) < 0) {
      return '';
    }
    content = String(content).replace(/</g, '&lt;').replace(/>/g, '&gt;');
    if (this._options.noWrap) {
      content = '<div>' + content + '</div>';
      if (this._options.noWrapToggle) {
        content += '<i class="bi bi-caret-down-fill toggle"></i>';
      }
    }
    return content;
  }
};

coreuiTable$1.columns.button = {
  _table: null,
  _options: {
    type: 'button',
    field: null,
    label: null,
    show: true,
    width: null,
    minWidth: null,
    maxWidth: null
  },
  /**
   * Инициализация
   * @param {CoreUI.table.instance} table
   * @param {object}                options
   */
  init: function init(table, options) {
    this._table = table;
    this._options = $.extend({}, this._options, options);
  },
  /**
   * Установка видимости колонки
   * @param {boolean} isShow
   */
  setShow: function setShow(isShow) {
    this._options.show = !!isShow;
  },
  /**
   * Видимости колонки
   */
  isShow: function isShow() {
    return !!this._options.show;
  },
  /**
   * Получение параметров
   * @returns {object}
   */
  getOptions: function getOptions() {
    return $.extend({}, this._options);
  },
  /**
   * Формирование контента
   * @param {object} content
   * @param {object} record
   * @returns {string}
   */
  render: function render(content, record) {
    if (!coreuiTableUtils.isObject(content)) {
      return '';
    }
    if (!coreuiTableUtils.isObject(content.attr)) {
      content.attr = {};
    }
    if (!content.attr.hasOwnProperty('class')) {
      content.attr["class"] = 'btn btn-outline-secondary';
    }
    if (content.attr.hasOwnProperty('type')) {
      delete content.attr.type;
    }
    var attributes = [];
    $.each(content.attr, function (name, value) {
      if (['string', 'number'].indexOf(_typeof(value)) >= 0) {
        attributes.push(name + '="' + value + '"');
      }
    });
    var btn = $(ejs.render(tpl['columns/button.html'], {
      content: content.content,
      attr: attributes.length > 0 ? ' ' + attributes.join(' ') : ''
    }));
    if (content.hasOwnProperty('onClick')) {
      var that = this;
      if (typeof content.onClick === 'function') {
        btn.click(function (event) {
          event.cancelBubble = true;
          event.preventDefault();
          content.onClick(record, that._table);
        });
      } else if (typeof content.onClick === 'string') {
        var func = new Function('record', 'table', content.onClick);
        btn.click(function (event) {
          event.cancelBubble = true;
          event.preventDefault();
          func(record, that._table);
        });
      } else {
        btn.click(function (event) {
          event.cancelBubble = true;
          event.preventDefault();
        });
      }
    } else {
      btn.click(function (event) {
        event.cancelBubble = true;
        event.preventDefault();
      });
    }
    return btn;
  }
};

coreuiTable$1.columns.link = {
  _table: null,
  _options: {
    type: 'link',
    field: null,
    label: null,
    show: true,
    width: null,
    minWidth: null,
    maxWidth: null
  },
  /**
   * Инициализация
   * @param {CoreUI.table.instance} table
   * @param {object}                options
   */
  init: function init(table, options) {
    this._table = table;
    this._options = $.extend({}, this._options, options);
  },
  /**
   * Установка видимости колонки
   * @param {boolean} isShow
   */
  setShow: function setShow(isShow) {
    this._options.show = !!isShow;
  },
  /**
   * Видимости колонки
   */
  isShow: function isShow() {
    return !!this._options.show;
  },
  /**
   * Получение параметров
   * @returns {object}
   */
  getOptions: function getOptions() {
    return $.extend({}, this._options);
  },
  /**
   * Формирование контента
   * @param {object|string} content
   * @param {object}        record
   * @returns {string}
   */
  render: function render(content, record) {
    if ((typeof content !== 'string' || !content) && (!coreuiTableUtils.isObject(content) || !content.hasOwnProperty('url') || typeof content.url !== 'string' || !content.url)) {
      return '';
    }
    var linkContent = '';
    var attr = {};
    if (typeof content === 'string') {
      attr.href = content;
      linkContent = content;
    } else {
      if (content.hasOwnProperty('attr') && coreuiTableUtils.isObject(content.attr)) {
        attr = content.attr;
      }
      if (attr.hasOwnProperty('href')) {
        delete attr.href;
      }
      attr.href = content.url;
      if (content.hasOwnProperty('content') && typeof content.content === 'string' && content.content) {
        linkContent = content.content;
      } else {
        linkContent = content.url;
      }
    }
    var attributes = [];
    $.each(attr, function (name, value) {
      if (['string', 'number'].indexOf(_typeof(value)) >= 0) {
        attributes.push(name + '="' + value + '"');
      }
    });
    var link = $(ejs.render(tpl['columns/link.html'], {
      content: linkContent,
      attr: attributes.length > 0 ? ' ' + attributes.join(' ') : ''
    }));
    link.click(function (event) {
      event.cancelBubble = true;
      event.preventDefault();
    });
    return link;
  }
};

coreuiTable$1.columns.menu = {
  _table: null,
  _options: {
    type: 'menu',
    field: null,
    label: null,
    show: true,
    width: null,
    minWidth: null,
    maxWidth: null
  },
  /**
   * Инициализация
   * @param {CoreUI.table.instance} table
   * @param {object}                options
   */
  init: function init(table, options) {
    this._table = table;
    this._options = $.extend({}, this._options, options);
  },
  /**
   * Установка видимости колонки
   * @param {boolean} isShow
   */
  setShow: function setShow(isShow) {
    this._options.show = !!isShow;
  },
  /**
   * Видимости колонки
   */
  isShow: function isShow() {
    return !!this._options.show;
  },
  /**
   * Получение параметров
   * @returns {object}
   */
  getOptions: function getOptions() {
    return $.extend({}, this._options);
  },
  /**
   * Формирование контента
   * @param {object|string} content
   * @param {object}        record
   * @returns {string}
   */
  render: function render(content, record) {
    if (!coreuiTableUtils.isObject(content) || !content.hasOwnProperty('items') || !Array.isArray(content.items) || content.items.length === 0) {
      return '';
    }
    var items = [];
    var attr = {};
    if (Array.isArray(content.items)) {
      $.each(content.items, function (key, item) {
        if (coreuiTableUtils.isObject(item) && typeof item.type === 'string') {
          if (item.type === 'link') {
            if (item.hasOwnProperty('link') && item.hasOwnProperty('content') && typeof item.link === 'string' && typeof item.content === 'string') {
              var linkAttr = {};
              if (item.hasOwnProperty('attr') || coreuiTableUtils.isObject(item.attr)) {
                linkAttr = item.attr;
              }
              if (linkAttr.hasOwnProperty('href')) {
                delete linkAttr.href;
              }
              if (!linkAttr.hasOwnProperty('class') || typeof linkAttr["class"] !== 'string') {
                linkAttr["class"] = 'dropdown-item';
              } else {
                linkAttr["class"] += ' dropdown-item';
              }
              var linkAttributes = [];
              $.each(linkAttr, function (name, value) {
                if (['string', 'number'].indexOf(_typeof(value)) >= 0) {
                  linkAttributes.push(name + '="' + value + '"');
                }
              });
              items.push({
                type: 'link',
                link: item.link,
                content: item.content,
                attr: linkAttributes
              });
            }
          } else if (item.type === 'button') {
            if (item.hasOwnProperty('content') && item.hasOwnProperty('onClick') && typeof item.content === 'string' && ['string', 'function'].indexOf(_typeof(item.onClick)) >= 0) {
              var btnAttr = {};
              if (item.hasOwnProperty('attr') || coreuiTableUtils.isObject(item.attr)) {
                btnAttr = item.attr;
              }
              if (btnAttr.hasOwnProperty('type')) {
                delete btnAttr.type;
              }
              if (btnAttr.hasOwnProperty('id')) {
                delete btnAttr['id'];
              }
              if (!btnAttr.hasOwnProperty('class') || typeof btnAttr["class"] !== 'string') {
                btnAttr["class"] = 'dropdown-item';
              } else {
                btnAttr["class"] += ' dropdown-item';
              }
              var btnAttributes = [];
              $.each(btnAttr, function (name, value) {
                if (['string', 'number'].indexOf(_typeof(value)) >= 0) {
                  btnAttributes.push(name + '="' + value + '"');
                }
              });
              items.push({
                type: 'button',
                id: coreuiTableUtils.hashCode(),
                content: item.content,
                onClick: item.onClick,
                attr: btnAttributes.length > 0 ? ' ' + btnAttributes.join(' ') : ''
              });
            }
          } else if (item.type === 'divider') {
            items.push({
              type: 'divider'
            });
          } else if (item.type === 'header') {
            if (item.hasOwnProperty('content') && typeof item.content === 'string') {
              items.push({
                type: 'header',
                content: item.content
              });
            }
          }
        }
      });
    }
    if (content.hasOwnProperty('attr') || coreuiTableUtils.isObject(content.attr)) {
      attr = content.attr;
    }
    if (!attr.hasOwnProperty('class') || ['string', 'number'].indexOf(_typeof(attr["class"])) < 0) {
      attr["class"] = 'btn rounded-1';
    }
    if (attr.hasOwnProperty('type')) {
      delete attr.type;
    }
    if (attr.hasOwnProperty('data-bs-toggle')) {
      delete attr['data-bs-toggle'];
    }
    var attributes = [];
    $.each(attr, function (name, value) {
      if (['string', 'number'].indexOf(_typeof(value)) >= 0) {
        attributes.push(name + '="' + value + '"');
      }
    });
    var menuContent = content.hasOwnProperty('content') && typeof content.content === 'string' && content.content ? content.content : '<i class="bi bi-three-dots-vertical"></i>';
    var position = content.hasOwnProperty('position') && typeof content.position === 'string' && content.position ? content.position : 'end';
    var menu = $(ejs.render(tpl['columns/menu.html'], {
      content: menuContent,
      position: position,
      attr: attributes.length > 0 ? ' ' + attributes.join(' ') : '',
      items: items
    }));
    menu.click(function (event) {
      event.cancelBubble = true;
      event.preventDefault();
    });
    if (Array.isArray(items)) {
      var that = this;
      $.each(items, function (key, item) {
        if (coreuiTableUtils.isObject(item) && typeof item.type === 'string') {
          if (item.type === 'button') {
            if (item.hasOwnProperty('content') && item.hasOwnProperty('onClick') && ['string', 'function'].indexOf(_typeof(item.onClick)) >= 0 && typeof item.content === 'string') {
              $('button#btn-dropdown-' + item.id, menu).click(function (event) {
                if (typeof item.onClick === 'function') {
                  item.onClick(record, that._table, event);
                } else if (typeof item.onClick === 'string') {
                  new Function('record', 'table', 'event', item.onClick)(record, that._table, event);
                }
              });
            }
          }
        }
      });
    }
    return menu;
  }
};

coreuiTable$1.columns.badge = {
  _table: null,
  _options: {
    type: 'badge',
    field: null,
    label: null,
    show: true,
    width: null,
    minWidth: null,
    maxWidth: null
  },
  /**
   * Инициализация
   * @param {CoreUI.table.instance} table
   * @param {object}                options
   */
  init: function init(table, options) {
    this._table = table;
    this._options = $.extend({}, this._options, options);
  },
  /**
   * Установка видимости колонки
   * @param {boolean} isShow
   */
  setShow: function setShow(isShow) {
    this._options.show = !!isShow;
  },
  /**
   * Видимости колонки
   */
  isShow: function isShow() {
    return !!this._options.show;
  },
  /**
   * Получение параметров
   * @returns {object}
   */
  getOptions: function getOptions() {
    return $.extend({}, this._options);
  },
  /**
   * Формирование контента
   * @param {object|string} content
   * @param {object}        record
   * @returns {string}
   */
  render: function render(content, record) {
    if (!coreuiTableUtils.isObject(content) || !content.hasOwnProperty('type') || !content.hasOwnProperty('text') || typeof content.type !== 'string' || typeof content.text !== 'string' || !content.type || !content.text) {
      return '';
    }
    return $(ejs.render(tpl['columns/badge.html'], {
      type: content.type,
      text: content.text
    }));
  }
};

coreuiTable$1.columns.component = {
  _table: null,
  _options: {
    type: 'component',
    field: null,
    label: null,
    show: true,
    width: null,
    minWidth: null,
    maxWidth: null
  },
  /**
   * Инициализация
   * @param {CoreUI.table.instance} table
   * @param {object}                options
   */
  init: function init(table, options) {
    this._table = table;
    this._options = $.extend({}, this._options, options);
  },
  /**
   * Установка видимости колонки
   * @param {boolean} isShow
   */
  setShow: function setShow(isShow) {
    this._options.show = !!isShow;
  },
  /**
   * Видимости колонки
   */
  isShow: function isShow() {
    return !!this._options.show;
  },
  /**
   * Получение параметров
   * @returns {object}
   */
  getOptions: function getOptions() {
    return $.extend({}, this._options);
  },
  /**
   * Формирование контента
   * @param {object|string} content
   * @param {object}        record
   * @returns {string}
   */
  render: function render(content, record) {
    if (!coreuiTableUtils.isObject(content) || !content.hasOwnProperty('component') || typeof content.component !== 'string' || !content.component) {
      return '';
    }
    return coreuiTableRender.renderComponents(this._table, content, 'records_show');
  }
};

return coreuiTable$1;

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjpudWxsLCJzb3VyY2VzIjpbIkM6L1VzZXJzL2FkbWluL3Byb2plY3RzL2NvcmV1aS9jb3JldWktdGFibGUvbm9kZV9tb2R1bGVzL2Vqcy9lanMubWluLmpzIiwiQzovVXNlcnMvYWRtaW4vcHJvamVjdHMvY29yZXVpL2NvcmV1aS10YWJsZS9zcmMvanMvY29yZXVpLnRhYmxlLnRlbXBsYXRlcy5qcyIsIkM6L1VzZXJzL2FkbWluL3Byb2plY3RzL2NvcmV1aS9jb3JldWktdGFibGUvc3JjL2pzL2NvcmV1aS50YWJsZS51dGlscy5qcyIsIkM6L1VzZXJzL2FkbWluL3Byb2plY3RzL2NvcmV1aS9jb3JldWktdGFibGUvc3JjL2pzL2NvcmV1aS50YWJsZS5yZW5kZXIuanMiLCJDOi9Vc2Vycy9hZG1pbi9wcm9qZWN0cy9jb3JldWkvY29yZXVpLXRhYmxlL3NyYy9qcy9jb3JldWkudGFibGUucHJpdmF0ZS5qcyIsIkM6L1VzZXJzL2FkbWluL3Byb2plY3RzL2NvcmV1aS9jb3JldWktdGFibGUvc3JjL2pzL2NvcmV1aS50YWJsZS5lbGVtZW50cy5qcyIsIkM6L1VzZXJzL2FkbWluL3Byb2plY3RzL2NvcmV1aS9jb3JldWktdGFibGUvc3JjL2pzL2NvcmV1aS50YWJsZS5pbnN0YW5jZS5qcyIsIkM6L1VzZXJzL2FkbWluL3Byb2plY3RzL2NvcmV1aS9jb3JldWktdGFibGUvc3JjL2pzL2NvcmV1aS50YWJsZS5qcyIsIkM6L1VzZXJzL2FkbWluL3Byb2plY3RzL2NvcmV1aS9jb3JldWktdGFibGUvc3JjL2pzL2xhbmcvcnUuanMiLCJDOi9Vc2Vycy9hZG1pbi9wcm9qZWN0cy9jb3JldWkvY29yZXVpLXRhYmxlL3NyYy9qcy9sYW5nL2VuLmpzIiwiQzovVXNlcnMvYWRtaW4vcHJvamVjdHMvY29yZXVpL2NvcmV1aS10YWJsZS9zcmMvanMvY29udHJvbHMvbGluay5qcyIsIkM6L1VzZXJzL2FkbWluL3Byb2plY3RzL2NvcmV1aS9jb3JldWktdGFibGUvc3JjL2pzL2NvbnRyb2xzL2J1dHRvbi5qcyIsIkM6L1VzZXJzL2FkbWluL3Byb2plY3RzL2NvcmV1aS9jb3JldWktdGFibGUvc3JjL2pzL2NvbnRyb2xzL2Ryb3Bkb3duLmpzIiwiQzovVXNlcnMvYWRtaW4vcHJvamVjdHMvY29yZXVpL2NvcmV1aS10YWJsZS9zcmMvanMvY29udHJvbHMvYnV0dG9uX2dyb3VwLmpzIiwiQzovVXNlcnMvYWRtaW4vcHJvamVjdHMvY29yZXVpL2NvcmV1aS10YWJsZS9zcmMvanMvY29udHJvbHMvY3VzdG9tLmpzIiwiQzovVXNlcnMvYWRtaW4vcHJvamVjdHMvY29yZXVpL2NvcmV1aS10YWJsZS9zcmMvanMvY29udHJvbHMvcGFnZV9zaXplLmpzIiwiQzovVXNlcnMvYWRtaW4vcHJvamVjdHMvY29yZXVpL2NvcmV1aS10YWJsZS9zcmMvanMvY29udHJvbHMvcGFnZV9qdW1wLmpzIiwiQzovVXNlcnMvYWRtaW4vcHJvamVjdHMvY29yZXVpL2NvcmV1aS10YWJsZS9zcmMvanMvY29udHJvbHMvcGFnZXMuanMiLCJDOi9Vc2Vycy9hZG1pbi9wcm9qZWN0cy9jb3JldWkvY29yZXVpLXRhYmxlL3NyYy9qcy9jb250cm9scy90b3RhbC5qcyIsIkM6L1VzZXJzL2FkbWluL3Byb2plY3RzL2NvcmV1aS9jb3JldWktdGFibGUvc3JjL2pzL2NvbnRyb2xzL3NlYXJjaC5qcyIsIkM6L1VzZXJzL2FkbWluL3Byb2plY3RzL2NvcmV1aS9jb3JldWktdGFibGUvc3JjL2pzL2NvbnRyb2xzL2NvbHVtbnMuanMiLCJDOi9Vc2Vycy9hZG1pbi9wcm9qZWN0cy9jb3JldWkvY29yZXVpLXRhYmxlL3NyYy9qcy9jb250cm9scy9jYXB0aW9uLmpzIiwiQzovVXNlcnMvYWRtaW4vcHJvamVjdHMvY29yZXVpL2NvcmV1aS10YWJsZS9zcmMvanMvZmlsdGVycy9jbGVhci5qcyIsIkM6L1VzZXJzL2FkbWluL3Byb2plY3RzL2NvcmV1aS9jb3JldWktdGFibGUvc3JjL2pzL2ZpbHRlcnMvdGV4dC5qcyIsIkM6L1VzZXJzL2FkbWluL3Byb2plY3RzL2NvcmV1aS9jb3JldWktdGFibGUvc3JjL2pzL2ZpbHRlcnMvbnVtYmVyLmpzIiwiQzovVXNlcnMvYWRtaW4vcHJvamVjdHMvY29yZXVpL2NvcmV1aS10YWJsZS9zcmMvanMvZmlsdGVycy9kYXRlLmpzIiwiQzovVXNlcnMvYWRtaW4vcHJvamVjdHMvY29yZXVpL2NvcmV1aS10YWJsZS9zcmMvanMvZmlsdGVycy9kYXRldGltZS5qcyIsIkM6L1VzZXJzL2FkbWluL3Byb2plY3RzL2NvcmV1aS9jb3JldWktdGFibGUvc3JjL2pzL2ZpbHRlcnMvZGF0ZV9tb250aC5qcyIsIkM6L1VzZXJzL2FkbWluL3Byb2plY3RzL2NvcmV1aS9jb3JldWktdGFibGUvc3JjL2pzL2ZpbHRlcnMvZGF0ZV9yYW5nZS5qcyIsIkM6L1VzZXJzL2FkbWluL3Byb2plY3RzL2NvcmV1aS9jb3JldWktdGFibGUvc3JjL2pzL2ZpbHRlcnMvZGF0ZXRpbWVfcmFuZ2UuanMiLCJDOi9Vc2Vycy9hZG1pbi9wcm9qZWN0cy9jb3JldWkvY29yZXVpLXRhYmxlL3NyYy9qcy9maWx0ZXJzL2NoZWNrYm94LmpzIiwiQzovVXNlcnMvYWRtaW4vcHJvamVjdHMvY29yZXVpL2NvcmV1aS10YWJsZS9zcmMvanMvZmlsdGVycy9yYWRpby5qcyIsIkM6L1VzZXJzL2FkbWluL3Byb2plY3RzL2NvcmV1aS9jb3JldWktdGFibGUvc3JjL2pzL2ZpbHRlcnMvc2VsZWN0LmpzIiwiQzovVXNlcnMvYWRtaW4vcHJvamVjdHMvY29yZXVpL2NvcmV1aS10YWJsZS9zcmMvanMvZmlsdGVycy9zd2l0Y2guanMiLCJDOi9Vc2Vycy9hZG1pbi9wcm9qZWN0cy9jb3JldWkvY29yZXVpLXRhYmxlL3NyYy9qcy9zZWFyY2gvdGV4dC5qcyIsIkM6L1VzZXJzL2FkbWluL3Byb2plY3RzL2NvcmV1aS9jb3JldWktdGFibGUvc3JjL2pzL3NlYXJjaC9udW1iZXIuanMiLCJDOi9Vc2Vycy9hZG1pbi9wcm9qZWN0cy9jb3JldWkvY29yZXVpLXRhYmxlL3NyYy9qcy9zZWFyY2gvZGF0ZS5qcyIsIkM6L1VzZXJzL2FkbWluL3Byb2plY3RzL2NvcmV1aS9jb3JldWktdGFibGUvc3JjL2pzL3NlYXJjaC9kYXRlX21vbnRoLmpzIiwiQzovVXNlcnMvYWRtaW4vcHJvamVjdHMvY29yZXVpL2NvcmV1aS10YWJsZS9zcmMvanMvc2VhcmNoL2RhdGV0aW1lLmpzIiwiQzovVXNlcnMvYWRtaW4vcHJvamVjdHMvY29yZXVpL2NvcmV1aS10YWJsZS9zcmMvanMvc2VhcmNoL2RhdGVfcmFuZ2UuanMiLCJDOi9Vc2Vycy9hZG1pbi9wcm9qZWN0cy9jb3JldWkvY29yZXVpLXRhYmxlL3NyYy9qcy9zZWFyY2gvZGF0ZXRpbWVfcmFuZ2UuanMiLCJDOi9Vc2Vycy9hZG1pbi9wcm9qZWN0cy9jb3JldWkvY29yZXVpLXRhYmxlL3NyYy9qcy9zZWFyY2gvY2hlY2tib3guanMiLCJDOi9Vc2Vycy9hZG1pbi9wcm9qZWN0cy9jb3JldWkvY29yZXVpLXRhYmxlL3NyYy9qcy9zZWFyY2gvcmFkaW8uanMiLCJDOi9Vc2Vycy9hZG1pbi9wcm9qZWN0cy9jb3JldWkvY29yZXVpLXRhYmxlL3NyYy9qcy9zZWFyY2gvc2VsZWN0LmpzIiwiQzovVXNlcnMvYWRtaW4vcHJvamVjdHMvY29yZXVpL2NvcmV1aS10YWJsZS9zcmMvanMvc2VhcmNoL3N3aXRjaC5qcyIsIkM6L1VzZXJzL2FkbWluL3Byb2plY3RzL2NvcmV1aS9jb3JldWktdGFibGUvc3JjL2pzL2NvbHVtbnMvZGF0ZS5qcyIsIkM6L1VzZXJzL2FkbWluL3Byb2plY3RzL2NvcmV1aS9jb3JldWktdGFibGUvc3JjL2pzL2NvbHVtbnMvZGF0ZXRpbWUuanMiLCJDOi9Vc2Vycy9hZG1pbi9wcm9qZWN0cy9jb3JldWkvY29yZXVpLXRhYmxlL3NyYy9qcy9jb2x1bW5zL2h0bWwuanMiLCJDOi9Vc2Vycy9hZG1pbi9wcm9qZWN0cy9jb3JldWkvY29yZXVpLXRhYmxlL3NyYy9qcy9jb2x1bW5zL251bWJlci5qcyIsIkM6L1VzZXJzL2FkbWluL3Byb2plY3RzL2NvcmV1aS9jb3JldWktdGFibGUvc3JjL2pzL2NvbHVtbnMvbW9uZXkuanMiLCJDOi9Vc2Vycy9hZG1pbi9wcm9qZWN0cy9jb3JldWkvY29yZXVpLXRhYmxlL3NyYy9qcy9jb2x1bW5zL251bWJlcnMuanMiLCJDOi9Vc2Vycy9hZG1pbi9wcm9qZWN0cy9jb3JldWkvY29yZXVpLXRhYmxlL3NyYy9qcy9jb2x1bW5zL3NlbGVjdC5qcyIsIkM6L1VzZXJzL2FkbWluL3Byb2plY3RzL2NvcmV1aS9jb3JldWktdGFibGUvc3JjL2pzL2NvbHVtbnMvc3dpdGNoLmpzIiwiQzovVXNlcnMvYWRtaW4vcHJvamVjdHMvY29yZXVpL2NvcmV1aS10YWJsZS9zcmMvanMvY29sdW1ucy90ZXh0LmpzIiwiQzovVXNlcnMvYWRtaW4vcHJvamVjdHMvY29yZXVpL2NvcmV1aS10YWJsZS9zcmMvanMvY29sdW1ucy9idXR0b24uanMiLCJDOi9Vc2Vycy9hZG1pbi9wcm9qZWN0cy9jb3JldWkvY29yZXVpLXRhYmxlL3NyYy9qcy9jb2x1bW5zL2xpbmsuanMiLCJDOi9Vc2Vycy9hZG1pbi9wcm9qZWN0cy9jb3JldWkvY29yZXVpLXRhYmxlL3NyYy9qcy9jb2x1bW5zL21lbnUuanMiLCJDOi9Vc2Vycy9hZG1pbi9wcm9qZWN0cy9jb3JldWkvY29yZXVpLXRhYmxlL3NyYy9qcy9jb2x1bW5zL2JhZGdlLmpzIiwiQzovVXNlcnMvYWRtaW4vcHJvamVjdHMvY29yZXVpL2NvcmV1aS10YWJsZS9zcmMvanMvY29sdW1ucy9jb21wb25lbnQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKGYpe2lmKHR5cGVvZiBleHBvcnRzPT09XCJvYmplY3RcIiYmdHlwZW9mIG1vZHVsZSE9PVwidW5kZWZpbmVkXCIpe21vZHVsZS5leHBvcnRzPWYoKX1lbHNlIGlmKHR5cGVvZiBkZWZpbmU9PT1cImZ1bmN0aW9uXCImJmRlZmluZS5hbWQpe2RlZmluZShbXSxmKX1lbHNle3ZhciBnO2lmKHR5cGVvZiB3aW5kb3chPT1cInVuZGVmaW5lZFwiKXtnPXdpbmRvd31lbHNlIGlmKHR5cGVvZiBnbG9iYWwhPT1cInVuZGVmaW5lZFwiKXtnPWdsb2JhbH1lbHNlIGlmKHR5cGVvZiBzZWxmIT09XCJ1bmRlZmluZWRcIil7Zz1zZWxmfWVsc2V7Zz10aGlzfWcuZWpzPWYoKX19KShmdW5jdGlvbigpe3ZhciBkZWZpbmUsbW9kdWxlLGV4cG9ydHM7cmV0dXJuIGZ1bmN0aW9uKCl7ZnVuY3Rpb24gcihlLG4sdCl7ZnVuY3Rpb24gbyhpLGYpe2lmKCFuW2ldKXtpZighZVtpXSl7dmFyIGM9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZTtpZighZiYmYylyZXR1cm4gYyhpLCEwKTtpZih1KXJldHVybiB1KGksITApO3ZhciBhPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIraStcIidcIik7dGhyb3cgYS5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGF9dmFyIHA9bltpXT17ZXhwb3J0czp7fX07ZVtpXVswXS5jYWxsKHAuZXhwb3J0cyxmdW5jdGlvbihyKXt2YXIgbj1lW2ldWzFdW3JdO3JldHVybiBvKG58fHIpfSxwLHAuZXhwb3J0cyxyLGUsbix0KX1yZXR1cm4gbltpXS5leHBvcnRzfWZvcih2YXIgdT1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlLGk9MDtpPHQubGVuZ3RoO2krKylvKHRbaV0pO3JldHVybiBvfXJldHVybiByfSgpKHsxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcInVzZSBzdHJpY3RcIjt2YXIgZnM9cmVxdWlyZShcImZzXCIpO3ZhciBwYXRoPXJlcXVpcmUoXCJwYXRoXCIpO3ZhciB1dGlscz1yZXF1aXJlKFwiLi91dGlsc1wiKTt2YXIgc2NvcGVPcHRpb25XYXJuZWQ9ZmFsc2U7dmFyIF9WRVJTSU9OX1NUUklORz1yZXF1aXJlKFwiLi4vcGFja2FnZS5qc29uXCIpLnZlcnNpb247dmFyIF9ERUZBVUxUX09QRU5fREVMSU1JVEVSPVwiPFwiO3ZhciBfREVGQVVMVF9DTE9TRV9ERUxJTUlURVI9XCI+XCI7dmFyIF9ERUZBVUxUX0RFTElNSVRFUj1cIiVcIjt2YXIgX0RFRkFVTFRfTE9DQUxTX05BTUU9XCJsb2NhbHNcIjt2YXIgX05BTUU9XCJlanNcIjt2YXIgX1JFR0VYX1NUUklORz1cIig8JSV8JSU+fDwlPXw8JS18PCVffDwlI3w8JXwlPnwtJT58XyU+KVwiO3ZhciBfT1BUU19QQVNTQUJMRV9XSVRIX0RBVEE9W1wiZGVsaW1pdGVyXCIsXCJzY29wZVwiLFwiY29udGV4dFwiLFwiZGVidWdcIixcImNvbXBpbGVEZWJ1Z1wiLFwiY2xpZW50XCIsXCJfd2l0aFwiLFwicm1XaGl0ZXNwYWNlXCIsXCJzdHJpY3RcIixcImZpbGVuYW1lXCIsXCJhc3luY1wiXTt2YXIgX09QVFNfUEFTU0FCTEVfV0lUSF9EQVRBX0VYUFJFU1M9X09QVFNfUEFTU0FCTEVfV0lUSF9EQVRBLmNvbmNhdChcImNhY2hlXCIpO3ZhciBfQk9NPS9eXFx1RkVGRi87dmFyIF9KU19JREVOVElGSUVSPS9eW2EtekEtWl8kXVswLTlhLXpBLVpfJF0qJC87ZXhwb3J0cy5jYWNoZT11dGlscy5jYWNoZTtleHBvcnRzLmZpbGVMb2FkZXI9ZnMucmVhZEZpbGVTeW5jO2V4cG9ydHMubG9jYWxzTmFtZT1fREVGQVVMVF9MT0NBTFNfTkFNRTtleHBvcnRzLnByb21pc2VJbXBsPW5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzO1wiKSgpLlByb21pc2U7ZXhwb3J0cy5yZXNvbHZlSW5jbHVkZT1mdW5jdGlvbihuYW1lLGZpbGVuYW1lLGlzRGlyKXt2YXIgZGlybmFtZT1wYXRoLmRpcm5hbWU7dmFyIGV4dG5hbWU9cGF0aC5leHRuYW1lO3ZhciByZXNvbHZlPXBhdGgucmVzb2x2ZTt2YXIgaW5jbHVkZVBhdGg9cmVzb2x2ZShpc0Rpcj9maWxlbmFtZTpkaXJuYW1lKGZpbGVuYW1lKSxuYW1lKTt2YXIgZXh0PWV4dG5hbWUobmFtZSk7aWYoIWV4dCl7aW5jbHVkZVBhdGgrPVwiLmVqc1wifXJldHVybiBpbmNsdWRlUGF0aH07ZnVuY3Rpb24gcmVzb2x2ZVBhdGhzKG5hbWUscGF0aHMpe3ZhciBmaWxlUGF0aDtpZihwYXRocy5zb21lKGZ1bmN0aW9uKHYpe2ZpbGVQYXRoPWV4cG9ydHMucmVzb2x2ZUluY2x1ZGUobmFtZSx2LHRydWUpO3JldHVybiBmcy5leGlzdHNTeW5jKGZpbGVQYXRoKX0pKXtyZXR1cm4gZmlsZVBhdGh9fWZ1bmN0aW9uIGdldEluY2x1ZGVQYXRoKHBhdGgsb3B0aW9ucyl7dmFyIGluY2x1ZGVQYXRoO3ZhciBmaWxlUGF0aDt2YXIgdmlld3M9b3B0aW9ucy52aWV3czt2YXIgbWF0Y2g9L15bQS1aYS16XSs6XFxcXHxeXFwvLy5leGVjKHBhdGgpO2lmKG1hdGNoJiZtYXRjaC5sZW5ndGgpe3BhdGg9cGF0aC5yZXBsYWNlKC9eXFwvKi8sXCJcIik7aWYoQXJyYXkuaXNBcnJheShvcHRpb25zLnJvb3QpKXtpbmNsdWRlUGF0aD1yZXNvbHZlUGF0aHMocGF0aCxvcHRpb25zLnJvb3QpfWVsc2V7aW5jbHVkZVBhdGg9ZXhwb3J0cy5yZXNvbHZlSW5jbHVkZShwYXRoLG9wdGlvbnMucm9vdHx8XCIvXCIsdHJ1ZSl9fWVsc2V7aWYob3B0aW9ucy5maWxlbmFtZSl7ZmlsZVBhdGg9ZXhwb3J0cy5yZXNvbHZlSW5jbHVkZShwYXRoLG9wdGlvbnMuZmlsZW5hbWUpO2lmKGZzLmV4aXN0c1N5bmMoZmlsZVBhdGgpKXtpbmNsdWRlUGF0aD1maWxlUGF0aH19aWYoIWluY2x1ZGVQYXRoJiZBcnJheS5pc0FycmF5KHZpZXdzKSl7aW5jbHVkZVBhdGg9cmVzb2x2ZVBhdGhzKHBhdGgsdmlld3MpfWlmKCFpbmNsdWRlUGF0aCYmdHlwZW9mIG9wdGlvbnMuaW5jbHVkZXIhPT1cImZ1bmN0aW9uXCIpe3Rocm93IG5ldyBFcnJvcignQ291bGQgbm90IGZpbmQgdGhlIGluY2x1ZGUgZmlsZSBcIicrb3B0aW9ucy5lc2NhcGVGdW5jdGlvbihwYXRoKSsnXCInKX19cmV0dXJuIGluY2x1ZGVQYXRofWZ1bmN0aW9uIGhhbmRsZUNhY2hlKG9wdGlvbnMsdGVtcGxhdGUpe3ZhciBmdW5jO3ZhciBmaWxlbmFtZT1vcHRpb25zLmZpbGVuYW1lO3ZhciBoYXNUZW1wbGF0ZT1hcmd1bWVudHMubGVuZ3RoPjE7aWYob3B0aW9ucy5jYWNoZSl7aWYoIWZpbGVuYW1lKXt0aHJvdyBuZXcgRXJyb3IoXCJjYWNoZSBvcHRpb24gcmVxdWlyZXMgYSBmaWxlbmFtZVwiKX1mdW5jPWV4cG9ydHMuY2FjaGUuZ2V0KGZpbGVuYW1lKTtpZihmdW5jKXtyZXR1cm4gZnVuY31pZighaGFzVGVtcGxhdGUpe3RlbXBsYXRlPWZpbGVMb2FkZXIoZmlsZW5hbWUpLnRvU3RyaW5nKCkucmVwbGFjZShfQk9NLFwiXCIpfX1lbHNlIGlmKCFoYXNUZW1wbGF0ZSl7aWYoIWZpbGVuYW1lKXt0aHJvdyBuZXcgRXJyb3IoXCJJbnRlcm5hbCBFSlMgZXJyb3I6IG5vIGZpbGUgbmFtZSBvciB0ZW1wbGF0ZSBcIitcInByb3ZpZGVkXCIpfXRlbXBsYXRlPWZpbGVMb2FkZXIoZmlsZW5hbWUpLnRvU3RyaW5nKCkucmVwbGFjZShfQk9NLFwiXCIpfWZ1bmM9ZXhwb3J0cy5jb21waWxlKHRlbXBsYXRlLG9wdGlvbnMpO2lmKG9wdGlvbnMuY2FjaGUpe2V4cG9ydHMuY2FjaGUuc2V0KGZpbGVuYW1lLGZ1bmMpfXJldHVybiBmdW5jfWZ1bmN0aW9uIHRyeUhhbmRsZUNhY2hlKG9wdGlvbnMsZGF0YSxjYil7dmFyIHJlc3VsdDtpZighY2Ipe2lmKHR5cGVvZiBleHBvcnRzLnByb21pc2VJbXBsPT1cImZ1bmN0aW9uXCIpe3JldHVybiBuZXcgZXhwb3J0cy5wcm9taXNlSW1wbChmdW5jdGlvbihyZXNvbHZlLHJlamVjdCl7dHJ5e3Jlc3VsdD1oYW5kbGVDYWNoZShvcHRpb25zKShkYXRhKTtyZXNvbHZlKHJlc3VsdCl9Y2F0Y2goZXJyKXtyZWplY3QoZXJyKX19KX1lbHNle3Rocm93IG5ldyBFcnJvcihcIlBsZWFzZSBwcm92aWRlIGEgY2FsbGJhY2sgZnVuY3Rpb25cIil9fWVsc2V7dHJ5e3Jlc3VsdD1oYW5kbGVDYWNoZShvcHRpb25zKShkYXRhKX1jYXRjaChlcnIpe3JldHVybiBjYihlcnIpfWNiKG51bGwscmVzdWx0KX19ZnVuY3Rpb24gZmlsZUxvYWRlcihmaWxlUGF0aCl7cmV0dXJuIGV4cG9ydHMuZmlsZUxvYWRlcihmaWxlUGF0aCl9ZnVuY3Rpb24gaW5jbHVkZUZpbGUocGF0aCxvcHRpb25zKXt2YXIgb3B0cz11dGlscy5zaGFsbG93Q29weSh1dGlscy5jcmVhdGVOdWxsUHJvdG9PYmpXaGVyZVBvc3NpYmxlKCksb3B0aW9ucyk7b3B0cy5maWxlbmFtZT1nZXRJbmNsdWRlUGF0aChwYXRoLG9wdHMpO2lmKHR5cGVvZiBvcHRpb25zLmluY2x1ZGVyPT09XCJmdW5jdGlvblwiKXt2YXIgaW5jbHVkZXJSZXN1bHQ9b3B0aW9ucy5pbmNsdWRlcihwYXRoLG9wdHMuZmlsZW5hbWUpO2lmKGluY2x1ZGVyUmVzdWx0KXtpZihpbmNsdWRlclJlc3VsdC5maWxlbmFtZSl7b3B0cy5maWxlbmFtZT1pbmNsdWRlclJlc3VsdC5maWxlbmFtZX1pZihpbmNsdWRlclJlc3VsdC50ZW1wbGF0ZSl7cmV0dXJuIGhhbmRsZUNhY2hlKG9wdHMsaW5jbHVkZXJSZXN1bHQudGVtcGxhdGUpfX19cmV0dXJuIGhhbmRsZUNhY2hlKG9wdHMpfWZ1bmN0aW9uIHJldGhyb3coZXJyLHN0cixmbG5tLGxpbmVubyxlc2Mpe3ZhciBsaW5lcz1zdHIuc3BsaXQoXCJcXG5cIik7dmFyIHN0YXJ0PU1hdGgubWF4KGxpbmVuby0zLDApO3ZhciBlbmQ9TWF0aC5taW4obGluZXMubGVuZ3RoLGxpbmVubyszKTt2YXIgZmlsZW5hbWU9ZXNjKGZsbm0pO3ZhciBjb250ZXh0PWxpbmVzLnNsaWNlKHN0YXJ0LGVuZCkubWFwKGZ1bmN0aW9uKGxpbmUsaSl7dmFyIGN1cnI9aStzdGFydCsxO3JldHVybihjdXJyPT1saW5lbm8/XCIgPj4gXCI6XCIgICAgXCIpK2N1cnIrXCJ8IFwiK2xpbmV9KS5qb2luKFwiXFxuXCIpO2Vyci5wYXRoPWZpbGVuYW1lO2Vyci5tZXNzYWdlPShmaWxlbmFtZXx8XCJlanNcIikrXCI6XCIrbGluZW5vK1wiXFxuXCIrY29udGV4dCtcIlxcblxcblwiK2Vyci5tZXNzYWdlO3Rocm93IGVycn1mdW5jdGlvbiBzdHJpcFNlbWkoc3RyKXtyZXR1cm4gc3RyLnJlcGxhY2UoLzsoXFxzKiQpLyxcIiQxXCIpfWV4cG9ydHMuY29tcGlsZT1mdW5jdGlvbiBjb21waWxlKHRlbXBsYXRlLG9wdHMpe3ZhciB0ZW1wbDtpZihvcHRzJiZvcHRzLnNjb3BlKXtpZighc2NvcGVPcHRpb25XYXJuZWQpe2NvbnNvbGUud2FybihcImBzY29wZWAgb3B0aW9uIGlzIGRlcHJlY2F0ZWQgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiBFSlMgM1wiKTtzY29wZU9wdGlvbldhcm5lZD10cnVlfWlmKCFvcHRzLmNvbnRleHQpe29wdHMuY29udGV4dD1vcHRzLnNjb3BlfWRlbGV0ZSBvcHRzLnNjb3BlfXRlbXBsPW5ldyBUZW1wbGF0ZSh0ZW1wbGF0ZSxvcHRzKTtyZXR1cm4gdGVtcGwuY29tcGlsZSgpfTtleHBvcnRzLnJlbmRlcj1mdW5jdGlvbih0ZW1wbGF0ZSxkLG8pe3ZhciBkYXRhPWR8fHV0aWxzLmNyZWF0ZU51bGxQcm90b09ialdoZXJlUG9zc2libGUoKTt2YXIgb3B0cz1vfHx1dGlscy5jcmVhdGVOdWxsUHJvdG9PYmpXaGVyZVBvc3NpYmxlKCk7aWYoYXJndW1lbnRzLmxlbmd0aD09Mil7dXRpbHMuc2hhbGxvd0NvcHlGcm9tTGlzdChvcHRzLGRhdGEsX09QVFNfUEFTU0FCTEVfV0lUSF9EQVRBKX1yZXR1cm4gaGFuZGxlQ2FjaGUob3B0cyx0ZW1wbGF0ZSkoZGF0YSl9O2V4cG9ydHMucmVuZGVyRmlsZT1mdW5jdGlvbigpe3ZhciBhcmdzPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7dmFyIGZpbGVuYW1lPWFyZ3Muc2hpZnQoKTt2YXIgY2I7dmFyIG9wdHM9e2ZpbGVuYW1lOmZpbGVuYW1lfTt2YXIgZGF0YTt2YXIgdmlld09wdHM7aWYodHlwZW9mIGFyZ3VtZW50c1thcmd1bWVudHMubGVuZ3RoLTFdPT1cImZ1bmN0aW9uXCIpe2NiPWFyZ3MucG9wKCl9aWYoYXJncy5sZW5ndGgpe2RhdGE9YXJncy5zaGlmdCgpO2lmKGFyZ3MubGVuZ3RoKXt1dGlscy5zaGFsbG93Q29weShvcHRzLGFyZ3MucG9wKCkpfWVsc2V7aWYoZGF0YS5zZXR0aW5ncyl7aWYoZGF0YS5zZXR0aW5ncy52aWV3cyl7b3B0cy52aWV3cz1kYXRhLnNldHRpbmdzLnZpZXdzfWlmKGRhdGEuc2V0dGluZ3NbXCJ2aWV3IGNhY2hlXCJdKXtvcHRzLmNhY2hlPXRydWV9dmlld09wdHM9ZGF0YS5zZXR0aW5nc1tcInZpZXcgb3B0aW9uc1wiXTtpZih2aWV3T3B0cyl7dXRpbHMuc2hhbGxvd0NvcHkob3B0cyx2aWV3T3B0cyl9fXV0aWxzLnNoYWxsb3dDb3B5RnJvbUxpc3Qob3B0cyxkYXRhLF9PUFRTX1BBU1NBQkxFX1dJVEhfREFUQV9FWFBSRVNTKX1vcHRzLmZpbGVuYW1lPWZpbGVuYW1lfWVsc2V7ZGF0YT11dGlscy5jcmVhdGVOdWxsUHJvdG9PYmpXaGVyZVBvc3NpYmxlKCl9cmV0dXJuIHRyeUhhbmRsZUNhY2hlKG9wdHMsZGF0YSxjYil9O2V4cG9ydHMuVGVtcGxhdGU9VGVtcGxhdGU7ZXhwb3J0cy5jbGVhckNhY2hlPWZ1bmN0aW9uKCl7ZXhwb3J0cy5jYWNoZS5yZXNldCgpfTtmdW5jdGlvbiBUZW1wbGF0ZSh0ZXh0LG9wdHMpe29wdHM9b3B0c3x8dXRpbHMuY3JlYXRlTnVsbFByb3RvT2JqV2hlcmVQb3NzaWJsZSgpO3ZhciBvcHRpb25zPXV0aWxzLmNyZWF0ZU51bGxQcm90b09ialdoZXJlUG9zc2libGUoKTt0aGlzLnRlbXBsYXRlVGV4dD10ZXh0O3RoaXMubW9kZT1udWxsO3RoaXMudHJ1bmNhdGU9ZmFsc2U7dGhpcy5jdXJyZW50TGluZT0xO3RoaXMuc291cmNlPVwiXCI7b3B0aW9ucy5jbGllbnQ9b3B0cy5jbGllbnR8fGZhbHNlO29wdGlvbnMuZXNjYXBlRnVuY3Rpb249b3B0cy5lc2NhcGV8fG9wdHMuZXNjYXBlRnVuY3Rpb258fHV0aWxzLmVzY2FwZVhNTDtvcHRpb25zLmNvbXBpbGVEZWJ1Zz1vcHRzLmNvbXBpbGVEZWJ1ZyE9PWZhbHNlO29wdGlvbnMuZGVidWc9ISFvcHRzLmRlYnVnO29wdGlvbnMuZmlsZW5hbWU9b3B0cy5maWxlbmFtZTtvcHRpb25zLm9wZW5EZWxpbWl0ZXI9b3B0cy5vcGVuRGVsaW1pdGVyfHxleHBvcnRzLm9wZW5EZWxpbWl0ZXJ8fF9ERUZBVUxUX09QRU5fREVMSU1JVEVSO29wdGlvbnMuY2xvc2VEZWxpbWl0ZXI9b3B0cy5jbG9zZURlbGltaXRlcnx8ZXhwb3J0cy5jbG9zZURlbGltaXRlcnx8X0RFRkFVTFRfQ0xPU0VfREVMSU1JVEVSO29wdGlvbnMuZGVsaW1pdGVyPW9wdHMuZGVsaW1pdGVyfHxleHBvcnRzLmRlbGltaXRlcnx8X0RFRkFVTFRfREVMSU1JVEVSO29wdGlvbnMuc3RyaWN0PW9wdHMuc3RyaWN0fHxmYWxzZTtvcHRpb25zLmNvbnRleHQ9b3B0cy5jb250ZXh0O29wdGlvbnMuY2FjaGU9b3B0cy5jYWNoZXx8ZmFsc2U7b3B0aW9ucy5ybVdoaXRlc3BhY2U9b3B0cy5ybVdoaXRlc3BhY2U7b3B0aW9ucy5yb290PW9wdHMucm9vdDtvcHRpb25zLmluY2x1ZGVyPW9wdHMuaW5jbHVkZXI7b3B0aW9ucy5vdXRwdXRGdW5jdGlvbk5hbWU9b3B0cy5vdXRwdXRGdW5jdGlvbk5hbWU7b3B0aW9ucy5sb2NhbHNOYW1lPW9wdHMubG9jYWxzTmFtZXx8ZXhwb3J0cy5sb2NhbHNOYW1lfHxfREVGQVVMVF9MT0NBTFNfTkFNRTtvcHRpb25zLnZpZXdzPW9wdHMudmlld3M7b3B0aW9ucy5hc3luYz1vcHRzLmFzeW5jO29wdGlvbnMuZGVzdHJ1Y3R1cmVkTG9jYWxzPW9wdHMuZGVzdHJ1Y3R1cmVkTG9jYWxzO29wdGlvbnMubGVnYWN5SW5jbHVkZT10eXBlb2Ygb3B0cy5sZWdhY3lJbmNsdWRlIT1cInVuZGVmaW5lZFwiPyEhb3B0cy5sZWdhY3lJbmNsdWRlOnRydWU7aWYob3B0aW9ucy5zdHJpY3Qpe29wdGlvbnMuX3dpdGg9ZmFsc2V9ZWxzZXtvcHRpb25zLl93aXRoPXR5cGVvZiBvcHRzLl93aXRoIT1cInVuZGVmaW5lZFwiP29wdHMuX3dpdGg6dHJ1ZX10aGlzLm9wdHM9b3B0aW9uczt0aGlzLnJlZ2V4PXRoaXMuY3JlYXRlUmVnZXgoKX1UZW1wbGF0ZS5tb2Rlcz17RVZBTDpcImV2YWxcIixFU0NBUEVEOlwiZXNjYXBlZFwiLFJBVzpcInJhd1wiLENPTU1FTlQ6XCJjb21tZW50XCIsTElURVJBTDpcImxpdGVyYWxcIn07VGVtcGxhdGUucHJvdG90eXBlPXtjcmVhdGVSZWdleDpmdW5jdGlvbigpe3ZhciBzdHI9X1JFR0VYX1NUUklORzt2YXIgZGVsaW09dXRpbHMuZXNjYXBlUmVnRXhwQ2hhcnModGhpcy5vcHRzLmRlbGltaXRlcik7dmFyIG9wZW49dXRpbHMuZXNjYXBlUmVnRXhwQ2hhcnModGhpcy5vcHRzLm9wZW5EZWxpbWl0ZXIpO3ZhciBjbG9zZT11dGlscy5lc2NhcGVSZWdFeHBDaGFycyh0aGlzLm9wdHMuY2xvc2VEZWxpbWl0ZXIpO3N0cj1zdHIucmVwbGFjZSgvJS9nLGRlbGltKS5yZXBsYWNlKC88L2csb3BlbikucmVwbGFjZSgvPi9nLGNsb3NlKTtyZXR1cm4gbmV3IFJlZ0V4cChzdHIpfSxjb21waWxlOmZ1bmN0aW9uKCl7dmFyIHNyYzt2YXIgZm47dmFyIG9wdHM9dGhpcy5vcHRzO3ZhciBwcmVwZW5kZWQ9XCJcIjt2YXIgYXBwZW5kZWQ9XCJcIjt2YXIgZXNjYXBlRm49b3B0cy5lc2NhcGVGdW5jdGlvbjt2YXIgY3Rvcjt2YXIgc2FuaXRpemVkRmlsZW5hbWU9b3B0cy5maWxlbmFtZT9KU09OLnN0cmluZ2lmeShvcHRzLmZpbGVuYW1lKTpcInVuZGVmaW5lZFwiO2lmKCF0aGlzLnNvdXJjZSl7dGhpcy5nZW5lcmF0ZVNvdXJjZSgpO3ByZXBlbmRlZCs9JyAgdmFyIF9fb3V0cHV0ID0gXCJcIjtcXG4nK1wiICBmdW5jdGlvbiBfX2FwcGVuZChzKSB7IGlmIChzICE9PSB1bmRlZmluZWQgJiYgcyAhPT0gbnVsbCkgX19vdXRwdXQgKz0gcyB9XFxuXCI7aWYob3B0cy5vdXRwdXRGdW5jdGlvbk5hbWUpe2lmKCFfSlNfSURFTlRJRklFUi50ZXN0KG9wdHMub3V0cHV0RnVuY3Rpb25OYW1lKSl7dGhyb3cgbmV3IEVycm9yKFwib3V0cHV0RnVuY3Rpb25OYW1lIGlzIG5vdCBhIHZhbGlkIEpTIGlkZW50aWZpZXIuXCIpfXByZXBlbmRlZCs9XCIgIHZhciBcIitvcHRzLm91dHB1dEZ1bmN0aW9uTmFtZStcIiA9IF9fYXBwZW5kO1wiK1wiXFxuXCJ9aWYob3B0cy5sb2NhbHNOYW1lJiYhX0pTX0lERU5USUZJRVIudGVzdChvcHRzLmxvY2Fsc05hbWUpKXt0aHJvdyBuZXcgRXJyb3IoXCJsb2NhbHNOYW1lIGlzIG5vdCBhIHZhbGlkIEpTIGlkZW50aWZpZXIuXCIpfWlmKG9wdHMuZGVzdHJ1Y3R1cmVkTG9jYWxzJiZvcHRzLmRlc3RydWN0dXJlZExvY2Fscy5sZW5ndGgpe3ZhciBkZXN0cnVjdHVyaW5nPVwiICB2YXIgX19sb2NhbHMgPSAoXCIrb3B0cy5sb2NhbHNOYW1lK1wiIHx8IHt9KSxcXG5cIjtmb3IodmFyIGk9MDtpPG9wdHMuZGVzdHJ1Y3R1cmVkTG9jYWxzLmxlbmd0aDtpKyspe3ZhciBuYW1lPW9wdHMuZGVzdHJ1Y3R1cmVkTG9jYWxzW2ldO2lmKCFfSlNfSURFTlRJRklFUi50ZXN0KG5hbWUpKXt0aHJvdyBuZXcgRXJyb3IoXCJkZXN0cnVjdHVyZWRMb2NhbHNbXCIraStcIl0gaXMgbm90IGEgdmFsaWQgSlMgaWRlbnRpZmllci5cIil9aWYoaT4wKXtkZXN0cnVjdHVyaW5nKz1cIixcXG4gIFwifWRlc3RydWN0dXJpbmcrPW5hbWUrXCIgPSBfX2xvY2Fscy5cIituYW1lfXByZXBlbmRlZCs9ZGVzdHJ1Y3R1cmluZytcIjtcXG5cIn1pZihvcHRzLl93aXRoIT09ZmFsc2Upe3ByZXBlbmRlZCs9XCIgIHdpdGggKFwiK29wdHMubG9jYWxzTmFtZStcIiB8fCB7fSkge1wiK1wiXFxuXCI7YXBwZW5kZWQrPVwiICB9XCIrXCJcXG5cIn1hcHBlbmRlZCs9XCIgIHJldHVybiBfX291dHB1dDtcIitcIlxcblwiO3RoaXMuc291cmNlPXByZXBlbmRlZCt0aGlzLnNvdXJjZSthcHBlbmRlZH1pZihvcHRzLmNvbXBpbGVEZWJ1Zyl7c3JjPVwidmFyIF9fbGluZSA9IDFcIitcIlxcblwiK1wiICAsIF9fbGluZXMgPSBcIitKU09OLnN0cmluZ2lmeSh0aGlzLnRlbXBsYXRlVGV4dCkrXCJcXG5cIitcIiAgLCBfX2ZpbGVuYW1lID0gXCIrc2FuaXRpemVkRmlsZW5hbWUrXCI7XCIrXCJcXG5cIitcInRyeSB7XCIrXCJcXG5cIit0aGlzLnNvdXJjZStcIn0gY2F0Y2ggKGUpIHtcIitcIlxcblwiK1wiICByZXRocm93KGUsIF9fbGluZXMsIF9fZmlsZW5hbWUsIF9fbGluZSwgZXNjYXBlRm4pO1wiK1wiXFxuXCIrXCJ9XCIrXCJcXG5cIn1lbHNle3NyYz10aGlzLnNvdXJjZX1pZihvcHRzLmNsaWVudCl7c3JjPVwiZXNjYXBlRm4gPSBlc2NhcGVGbiB8fCBcIitlc2NhcGVGbi50b1N0cmluZygpK1wiO1wiK1wiXFxuXCIrc3JjO2lmKG9wdHMuY29tcGlsZURlYnVnKXtzcmM9XCJyZXRocm93ID0gcmV0aHJvdyB8fCBcIityZXRocm93LnRvU3RyaW5nKCkrXCI7XCIrXCJcXG5cIitzcmN9fWlmKG9wdHMuc3RyaWN0KXtzcmM9J1widXNlIHN0cmljdFwiO1xcbicrc3JjfWlmKG9wdHMuZGVidWcpe2NvbnNvbGUubG9nKHNyYyl9aWYob3B0cy5jb21waWxlRGVidWcmJm9wdHMuZmlsZW5hbWUpe3NyYz1zcmMrXCJcXG5cIitcIi8vIyBzb3VyY2VVUkw9XCIrc2FuaXRpemVkRmlsZW5hbWUrXCJcXG5cIn10cnl7aWYob3B0cy5hc3luYyl7dHJ5e2N0b3I9bmV3IEZ1bmN0aW9uKFwicmV0dXJuIChhc3luYyBmdW5jdGlvbigpe30pLmNvbnN0cnVjdG9yO1wiKSgpfWNhdGNoKGUpe2lmKGUgaW5zdGFuY2VvZiBTeW50YXhFcnJvcil7dGhyb3cgbmV3IEVycm9yKFwiVGhpcyBlbnZpcm9ubWVudCBkb2VzIG5vdCBzdXBwb3J0IGFzeW5jL2F3YWl0XCIpfWVsc2V7dGhyb3cgZX19fWVsc2V7Y3Rvcj1GdW5jdGlvbn1mbj1uZXcgY3RvcihvcHRzLmxvY2Fsc05hbWUrXCIsIGVzY2FwZUZuLCBpbmNsdWRlLCByZXRocm93XCIsc3JjKX1jYXRjaChlKXtpZihlIGluc3RhbmNlb2YgU3ludGF4RXJyb3Ipe2lmKG9wdHMuZmlsZW5hbWUpe2UubWVzc2FnZSs9XCIgaW4gXCIrb3B0cy5maWxlbmFtZX1lLm1lc3NhZ2UrPVwiIHdoaWxlIGNvbXBpbGluZyBlanNcXG5cXG5cIjtlLm1lc3NhZ2UrPVwiSWYgdGhlIGFib3ZlIGVycm9yIGlzIG5vdCBoZWxwZnVsLCB5b3UgbWF5IHdhbnQgdG8gdHJ5IEVKUy1MaW50OlxcblwiO2UubWVzc2FnZSs9XCJodHRwczovL2dpdGh1Yi5jb20vUnlhblppbS9FSlMtTGludFwiO2lmKCFvcHRzLmFzeW5jKXtlLm1lc3NhZ2UrPVwiXFxuXCI7ZS5tZXNzYWdlKz1cIk9yLCBpZiB5b3UgbWVhbnQgdG8gY3JlYXRlIGFuIGFzeW5jIGZ1bmN0aW9uLCBwYXNzIGBhc3luYzogdHJ1ZWAgYXMgYW4gb3B0aW9uLlwifX10aHJvdyBlfXZhciByZXR1cm5lZEZuPW9wdHMuY2xpZW50P2ZuOmZ1bmN0aW9uIGFub255bW91cyhkYXRhKXt2YXIgaW5jbHVkZT1mdW5jdGlvbihwYXRoLGluY2x1ZGVEYXRhKXt2YXIgZD11dGlscy5zaGFsbG93Q29weSh1dGlscy5jcmVhdGVOdWxsUHJvdG9PYmpXaGVyZVBvc3NpYmxlKCksZGF0YSk7aWYoaW5jbHVkZURhdGEpe2Q9dXRpbHMuc2hhbGxvd0NvcHkoZCxpbmNsdWRlRGF0YSl9cmV0dXJuIGluY2x1ZGVGaWxlKHBhdGgsb3B0cykoZCl9O3JldHVybiBmbi5hcHBseShvcHRzLmNvbnRleHQsW2RhdGF8fHV0aWxzLmNyZWF0ZU51bGxQcm90b09ialdoZXJlUG9zc2libGUoKSxlc2NhcGVGbixpbmNsdWRlLHJldGhyb3ddKX07aWYob3B0cy5maWxlbmFtZSYmdHlwZW9mIE9iamVjdC5kZWZpbmVQcm9wZXJ0eT09PVwiZnVuY3Rpb25cIil7dmFyIGZpbGVuYW1lPW9wdHMuZmlsZW5hbWU7dmFyIGJhc2VuYW1lPXBhdGguYmFzZW5hbWUoZmlsZW5hbWUscGF0aC5leHRuYW1lKGZpbGVuYW1lKSk7dHJ5e09iamVjdC5kZWZpbmVQcm9wZXJ0eShyZXR1cm5lZEZuLFwibmFtZVwiLHt2YWx1ZTpiYXNlbmFtZSx3cml0YWJsZTpmYWxzZSxlbnVtZXJhYmxlOmZhbHNlLGNvbmZpZ3VyYWJsZTp0cnVlfSl9Y2F0Y2goZSl7fX1yZXR1cm4gcmV0dXJuZWRGbn0sZ2VuZXJhdGVTb3VyY2U6ZnVuY3Rpb24oKXt2YXIgb3B0cz10aGlzLm9wdHM7aWYob3B0cy5ybVdoaXRlc3BhY2Upe3RoaXMudGVtcGxhdGVUZXh0PXRoaXMudGVtcGxhdGVUZXh0LnJlcGxhY2UoL1tcXHJcXG5dKy9nLFwiXFxuXCIpLnJlcGxhY2UoL15cXHMrfFxccyskL2dtLFwiXCIpfXRoaXMudGVtcGxhdGVUZXh0PXRoaXMudGVtcGxhdGVUZXh0LnJlcGxhY2UoL1sgXFx0XSo8JV8vZ20sXCI8JV9cIikucmVwbGFjZSgvXyU+WyBcXHRdKi9nbSxcIl8lPlwiKTt2YXIgc2VsZj10aGlzO3ZhciBtYXRjaGVzPXRoaXMucGFyc2VUZW1wbGF0ZVRleHQoKTt2YXIgZD10aGlzLm9wdHMuZGVsaW1pdGVyO3ZhciBvPXRoaXMub3B0cy5vcGVuRGVsaW1pdGVyO3ZhciBjPXRoaXMub3B0cy5jbG9zZURlbGltaXRlcjtpZihtYXRjaGVzJiZtYXRjaGVzLmxlbmd0aCl7bWF0Y2hlcy5mb3JFYWNoKGZ1bmN0aW9uKGxpbmUsaW5kZXgpe3ZhciBjbG9zaW5nO2lmKGxpbmUuaW5kZXhPZihvK2QpPT09MCYmbGluZS5pbmRleE9mKG8rZCtkKSE9PTApe2Nsb3Npbmc9bWF0Y2hlc1tpbmRleCsyXTtpZighKGNsb3Npbmc9PWQrY3x8Y2xvc2luZz09XCItXCIrZCtjfHxjbG9zaW5nPT1cIl9cIitkK2MpKXt0aHJvdyBuZXcgRXJyb3IoJ0NvdWxkIG5vdCBmaW5kIG1hdGNoaW5nIGNsb3NlIHRhZyBmb3IgXCInK2xpbmUrJ1wiLicpfX1zZWxmLnNjYW5MaW5lKGxpbmUpfSl9fSxwYXJzZVRlbXBsYXRlVGV4dDpmdW5jdGlvbigpe3ZhciBzdHI9dGhpcy50ZW1wbGF0ZVRleHQ7dmFyIHBhdD10aGlzLnJlZ2V4O3ZhciByZXN1bHQ9cGF0LmV4ZWMoc3RyKTt2YXIgYXJyPVtdO3ZhciBmaXJzdFBvczt3aGlsZShyZXN1bHQpe2ZpcnN0UG9zPXJlc3VsdC5pbmRleDtpZihmaXJzdFBvcyE9PTApe2Fyci5wdXNoKHN0ci5zdWJzdHJpbmcoMCxmaXJzdFBvcykpO3N0cj1zdHIuc2xpY2UoZmlyc3RQb3MpfWFyci5wdXNoKHJlc3VsdFswXSk7c3RyPXN0ci5zbGljZShyZXN1bHRbMF0ubGVuZ3RoKTtyZXN1bHQ9cGF0LmV4ZWMoc3RyKX1pZihzdHIpe2Fyci5wdXNoKHN0cil9cmV0dXJuIGFycn0sX2FkZE91dHB1dDpmdW5jdGlvbihsaW5lKXtpZih0aGlzLnRydW5jYXRlKXtsaW5lPWxpbmUucmVwbGFjZSgvXig/OlxcclxcbnxcXHJ8XFxuKS8sXCJcIik7dGhpcy50cnVuY2F0ZT1mYWxzZX1pZighbGluZSl7cmV0dXJuIGxpbmV9bGluZT1saW5lLnJlcGxhY2UoL1xcXFwvZyxcIlxcXFxcXFxcXCIpO2xpbmU9bGluZS5yZXBsYWNlKC9cXG4vZyxcIlxcXFxuXCIpO2xpbmU9bGluZS5yZXBsYWNlKC9cXHIvZyxcIlxcXFxyXCIpO2xpbmU9bGluZS5yZXBsYWNlKC9cIi9nLCdcXFxcXCInKTt0aGlzLnNvdXJjZSs9JyAgICA7IF9fYXBwZW5kKFwiJytsaW5lKydcIiknK1wiXFxuXCJ9LHNjYW5MaW5lOmZ1bmN0aW9uKGxpbmUpe3ZhciBzZWxmPXRoaXM7dmFyIGQ9dGhpcy5vcHRzLmRlbGltaXRlcjt2YXIgbz10aGlzLm9wdHMub3BlbkRlbGltaXRlcjt2YXIgYz10aGlzLm9wdHMuY2xvc2VEZWxpbWl0ZXI7dmFyIG5ld0xpbmVDb3VudD0wO25ld0xpbmVDb3VudD1saW5lLnNwbGl0KFwiXFxuXCIpLmxlbmd0aC0xO3N3aXRjaChsaW5lKXtjYXNlIG8rZDpjYXNlIG8rZCtcIl9cIjp0aGlzLm1vZGU9VGVtcGxhdGUubW9kZXMuRVZBTDticmVhaztjYXNlIG8rZCtcIj1cIjp0aGlzLm1vZGU9VGVtcGxhdGUubW9kZXMuRVNDQVBFRDticmVhaztjYXNlIG8rZCtcIi1cIjp0aGlzLm1vZGU9VGVtcGxhdGUubW9kZXMuUkFXO2JyZWFrO2Nhc2UgbytkK1wiI1wiOnRoaXMubW9kZT1UZW1wbGF0ZS5tb2Rlcy5DT01NRU5UO2JyZWFrO2Nhc2UgbytkK2Q6dGhpcy5tb2RlPVRlbXBsYXRlLm1vZGVzLkxJVEVSQUw7dGhpcy5zb3VyY2UrPScgICAgOyBfX2FwcGVuZChcIicrbGluZS5yZXBsYWNlKG8rZCtkLG8rZCkrJ1wiKScrXCJcXG5cIjticmVhaztjYXNlIGQrZCtjOnRoaXMubW9kZT1UZW1wbGF0ZS5tb2Rlcy5MSVRFUkFMO3RoaXMuc291cmNlKz0nICAgIDsgX19hcHBlbmQoXCInK2xpbmUucmVwbGFjZShkK2QrYyxkK2MpKydcIiknK1wiXFxuXCI7YnJlYWs7Y2FzZSBkK2M6Y2FzZVwiLVwiK2QrYzpjYXNlXCJfXCIrZCtjOmlmKHRoaXMubW9kZT09VGVtcGxhdGUubW9kZXMuTElURVJBTCl7dGhpcy5fYWRkT3V0cHV0KGxpbmUpfXRoaXMubW9kZT1udWxsO3RoaXMudHJ1bmNhdGU9bGluZS5pbmRleE9mKFwiLVwiKT09PTB8fGxpbmUuaW5kZXhPZihcIl9cIik9PT0wO2JyZWFrO2RlZmF1bHQ6aWYodGhpcy5tb2RlKXtzd2l0Y2godGhpcy5tb2RlKXtjYXNlIFRlbXBsYXRlLm1vZGVzLkVWQUw6Y2FzZSBUZW1wbGF0ZS5tb2Rlcy5FU0NBUEVEOmNhc2UgVGVtcGxhdGUubW9kZXMuUkFXOmlmKGxpbmUubGFzdEluZGV4T2YoXCIvL1wiKT5saW5lLmxhc3RJbmRleE9mKFwiXFxuXCIpKXtsaW5lKz1cIlxcblwifX1zd2l0Y2godGhpcy5tb2RlKXtjYXNlIFRlbXBsYXRlLm1vZGVzLkVWQUw6dGhpcy5zb3VyY2UrPVwiICAgIDsgXCIrbGluZStcIlxcblwiO2JyZWFrO2Nhc2UgVGVtcGxhdGUubW9kZXMuRVNDQVBFRDp0aGlzLnNvdXJjZSs9XCIgICAgOyBfX2FwcGVuZChlc2NhcGVGbihcIitzdHJpcFNlbWkobGluZSkrXCIpKVwiK1wiXFxuXCI7YnJlYWs7Y2FzZSBUZW1wbGF0ZS5tb2Rlcy5SQVc6dGhpcy5zb3VyY2UrPVwiICAgIDsgX19hcHBlbmQoXCIrc3RyaXBTZW1pKGxpbmUpK1wiKVwiK1wiXFxuXCI7YnJlYWs7Y2FzZSBUZW1wbGF0ZS5tb2Rlcy5DT01NRU5UOmJyZWFrO2Nhc2UgVGVtcGxhdGUubW9kZXMuTElURVJBTDp0aGlzLl9hZGRPdXRwdXQobGluZSk7YnJlYWt9fWVsc2V7dGhpcy5fYWRkT3V0cHV0KGxpbmUpfX1pZihzZWxmLm9wdHMuY29tcGlsZURlYnVnJiZuZXdMaW5lQ291bnQpe3RoaXMuY3VycmVudExpbmUrPW5ld0xpbmVDb3VudDt0aGlzLnNvdXJjZSs9XCIgICAgOyBfX2xpbmUgPSBcIit0aGlzLmN1cnJlbnRMaW5lK1wiXFxuXCJ9fX07ZXhwb3J0cy5lc2NhcGVYTUw9dXRpbHMuZXNjYXBlWE1MO2V4cG9ydHMuX19leHByZXNzPWV4cG9ydHMucmVuZGVyRmlsZTtleHBvcnRzLlZFUlNJT049X1ZFUlNJT05fU1RSSU5HO2V4cG9ydHMubmFtZT1fTkFNRTtpZih0eXBlb2Ygd2luZG93IT1cInVuZGVmaW5lZFwiKXt3aW5kb3cuZWpzPWV4cG9ydHN9fSx7XCIuLi9wYWNrYWdlLmpzb25cIjo2LFwiLi91dGlsc1wiOjIsZnM6MyxwYXRoOjR9XSwyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcInVzZSBzdHJpY3RcIjt2YXIgcmVnRXhwQ2hhcnM9L1t8XFxcXHt9KClbXFxdXiQrKj8uXS9nO3ZhciBoYXNPd25Qcm9wZXJ0eT1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O3ZhciBoYXNPd249ZnVuY3Rpb24ob2JqLGtleSl7cmV0dXJuIGhhc093blByb3BlcnR5LmFwcGx5KG9iaixba2V5XSl9O2V4cG9ydHMuZXNjYXBlUmVnRXhwQ2hhcnM9ZnVuY3Rpb24oc3RyaW5nKXtpZighc3RyaW5nKXtyZXR1cm5cIlwifXJldHVybiBTdHJpbmcoc3RyaW5nKS5yZXBsYWNlKHJlZ0V4cENoYXJzLFwiXFxcXCQmXCIpfTt2YXIgX0VOQ09ERV9IVE1MX1JVTEVTPXtcIiZcIjpcIiZhbXA7XCIsXCI8XCI6XCImbHQ7XCIsXCI+XCI6XCImZ3Q7XCIsJ1wiJzpcIiYjMzQ7XCIsXCInXCI6XCImIzM5O1wifTt2YXIgX01BVENIX0hUTUw9L1smPD4nXCJdL2c7ZnVuY3Rpb24gZW5jb2RlX2NoYXIoYyl7cmV0dXJuIF9FTkNPREVfSFRNTF9SVUxFU1tjXXx8Y312YXIgZXNjYXBlRnVuY1N0cj1cInZhciBfRU5DT0RFX0hUTUxfUlVMRVMgPSB7XFxuXCIrJyAgICAgIFwiJlwiOiBcIiZhbXA7XCJcXG4nKycgICAgLCBcIjxcIjogXCImbHQ7XCJcXG4nKycgICAgLCBcIj5cIjogXCImZ3Q7XCJcXG4nKycgICAgLCBcXCdcIlxcJzogXCImIzM0O1wiXFxuJysnICAgICwgXCJcXCdcIjogXCImIzM5O1wiXFxuJytcIiAgICB9XFxuXCIrXCIgICwgX01BVENIX0hUTUwgPSAvWyY8PidcXFwiXS9nO1xcblwiK1wiZnVuY3Rpb24gZW5jb2RlX2NoYXIoYykge1xcblwiK1wiICByZXR1cm4gX0VOQ09ERV9IVE1MX1JVTEVTW2NdIHx8IGM7XFxuXCIrXCJ9O1xcblwiO2V4cG9ydHMuZXNjYXBlWE1MPWZ1bmN0aW9uKG1hcmt1cCl7cmV0dXJuIG1hcmt1cD09dW5kZWZpbmVkP1wiXCI6U3RyaW5nKG1hcmt1cCkucmVwbGFjZShfTUFUQ0hfSFRNTCxlbmNvZGVfY2hhcil9O2Z1bmN0aW9uIGVzY2FwZVhNTFRvU3RyaW5nKCl7cmV0dXJuIEZ1bmN0aW9uLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHRoaXMpK1wiO1xcblwiK2VzY2FwZUZ1bmNTdHJ9dHJ5e2lmKHR5cGVvZiBPYmplY3QuZGVmaW5lUHJvcGVydHk9PT1cImZ1bmN0aW9uXCIpe09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLmVzY2FwZVhNTCxcInRvU3RyaW5nXCIse3ZhbHVlOmVzY2FwZVhNTFRvU3RyaW5nfSl9ZWxzZXtleHBvcnRzLmVzY2FwZVhNTC50b1N0cmluZz1lc2NhcGVYTUxUb1N0cmluZ319Y2F0Y2goZXJyKXtjb25zb2xlLndhcm4oXCJVbmFibGUgdG8gc2V0IGVzY2FwZVhNTC50b1N0cmluZyAoaXMgdGhlIEZ1bmN0aW9uIHByb3RvdHlwZSBmcm96ZW4/KVwiKX1leHBvcnRzLnNoYWxsb3dDb3B5PWZ1bmN0aW9uKHRvLGZyb20pe2Zyb209ZnJvbXx8e307aWYodG8hPT1udWxsJiZ0byE9PXVuZGVmaW5lZCl7Zm9yKHZhciBwIGluIGZyb20pe2lmKCFoYXNPd24oZnJvbSxwKSl7Y29udGludWV9aWYocD09PVwiX19wcm90b19fXCJ8fHA9PT1cImNvbnN0cnVjdG9yXCIpe2NvbnRpbnVlfXRvW3BdPWZyb21bcF19fXJldHVybiB0b307ZXhwb3J0cy5zaGFsbG93Q29weUZyb21MaXN0PWZ1bmN0aW9uKHRvLGZyb20sbGlzdCl7bGlzdD1saXN0fHxbXTtmcm9tPWZyb218fHt9O2lmKHRvIT09bnVsbCYmdG8hPT11bmRlZmluZWQpe2Zvcih2YXIgaT0wO2k8bGlzdC5sZW5ndGg7aSsrKXt2YXIgcD1saXN0W2ldO2lmKHR5cGVvZiBmcm9tW3BdIT1cInVuZGVmaW5lZFwiKXtpZighaGFzT3duKGZyb20scCkpe2NvbnRpbnVlfWlmKHA9PT1cIl9fcHJvdG9fX1wifHxwPT09XCJjb25zdHJ1Y3RvclwiKXtjb250aW51ZX10b1twXT1mcm9tW3BdfX19cmV0dXJuIHRvfTtleHBvcnRzLmNhY2hlPXtfZGF0YTp7fSxzZXQ6ZnVuY3Rpb24oa2V5LHZhbCl7dGhpcy5fZGF0YVtrZXldPXZhbH0sZ2V0OmZ1bmN0aW9uKGtleSl7cmV0dXJuIHRoaXMuX2RhdGFba2V5XX0scmVtb3ZlOmZ1bmN0aW9uKGtleSl7ZGVsZXRlIHRoaXMuX2RhdGFba2V5XX0scmVzZXQ6ZnVuY3Rpb24oKXt0aGlzLl9kYXRhPXt9fX07ZXhwb3J0cy5oeXBoZW5Ub0NhbWVsPWZ1bmN0aW9uKHN0cil7cmV0dXJuIHN0ci5yZXBsYWNlKC8tW2Etel0vZyxmdW5jdGlvbihtYXRjaCl7cmV0dXJuIG1hdGNoWzFdLnRvVXBwZXJDYXNlKCl9KX07ZXhwb3J0cy5jcmVhdGVOdWxsUHJvdG9PYmpXaGVyZVBvc3NpYmxlPWZ1bmN0aW9uKCl7aWYodHlwZW9mIE9iamVjdC5jcmVhdGU9PVwiZnVuY3Rpb25cIil7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIE9iamVjdC5jcmVhdGUobnVsbCl9fWlmKCEoe19fcHJvdG9fXzpudWxsfWluc3RhbmNlb2YgT2JqZWN0KSl7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJue19fcHJvdG9fXzpudWxsfX19cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJue319fSgpfSx7fV0sMzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7fSx7fV0sNDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7KGZ1bmN0aW9uKHByb2Nlc3Mpe2Z1bmN0aW9uIG5vcm1hbGl6ZUFycmF5KHBhcnRzLGFsbG93QWJvdmVSb290KXt2YXIgdXA9MDtmb3IodmFyIGk9cGFydHMubGVuZ3RoLTE7aT49MDtpLS0pe3ZhciBsYXN0PXBhcnRzW2ldO2lmKGxhc3Q9PT1cIi5cIil7cGFydHMuc3BsaWNlKGksMSl9ZWxzZSBpZihsYXN0PT09XCIuLlwiKXtwYXJ0cy5zcGxpY2UoaSwxKTt1cCsrfWVsc2UgaWYodXApe3BhcnRzLnNwbGljZShpLDEpO3VwLS19fWlmKGFsbG93QWJvdmVSb290KXtmb3IoO3VwLS07dXApe3BhcnRzLnVuc2hpZnQoXCIuLlwiKX19cmV0dXJuIHBhcnRzfWV4cG9ydHMucmVzb2x2ZT1mdW5jdGlvbigpe3ZhciByZXNvbHZlZFBhdGg9XCJcIixyZXNvbHZlZEFic29sdXRlPWZhbHNlO2Zvcih2YXIgaT1hcmd1bWVudHMubGVuZ3RoLTE7aT49LTEmJiFyZXNvbHZlZEFic29sdXRlO2ktLSl7dmFyIHBhdGg9aT49MD9hcmd1bWVudHNbaV06cHJvY2Vzcy5jd2QoKTtpZih0eXBlb2YgcGF0aCE9PVwic3RyaW5nXCIpe3Rocm93IG5ldyBUeXBlRXJyb3IoXCJBcmd1bWVudHMgdG8gcGF0aC5yZXNvbHZlIG11c3QgYmUgc3RyaW5nc1wiKX1lbHNlIGlmKCFwYXRoKXtjb250aW51ZX1yZXNvbHZlZFBhdGg9cGF0aCtcIi9cIityZXNvbHZlZFBhdGg7cmVzb2x2ZWRBYnNvbHV0ZT1wYXRoLmNoYXJBdCgwKT09PVwiL1wifXJlc29sdmVkUGF0aD1ub3JtYWxpemVBcnJheShmaWx0ZXIocmVzb2x2ZWRQYXRoLnNwbGl0KFwiL1wiKSxmdW5jdGlvbihwKXtyZXR1cm4hIXB9KSwhcmVzb2x2ZWRBYnNvbHV0ZSkuam9pbihcIi9cIik7cmV0dXJuKHJlc29sdmVkQWJzb2x1dGU/XCIvXCI6XCJcIikrcmVzb2x2ZWRQYXRofHxcIi5cIn07ZXhwb3J0cy5ub3JtYWxpemU9ZnVuY3Rpb24ocGF0aCl7dmFyIGlzQWJzb2x1dGU9ZXhwb3J0cy5pc0Fic29sdXRlKHBhdGgpLHRyYWlsaW5nU2xhc2g9c3Vic3RyKHBhdGgsLTEpPT09XCIvXCI7cGF0aD1ub3JtYWxpemVBcnJheShmaWx0ZXIocGF0aC5zcGxpdChcIi9cIiksZnVuY3Rpb24ocCl7cmV0dXJuISFwfSksIWlzQWJzb2x1dGUpLmpvaW4oXCIvXCIpO2lmKCFwYXRoJiYhaXNBYnNvbHV0ZSl7cGF0aD1cIi5cIn1pZihwYXRoJiZ0cmFpbGluZ1NsYXNoKXtwYXRoKz1cIi9cIn1yZXR1cm4oaXNBYnNvbHV0ZT9cIi9cIjpcIlwiKStwYXRofTtleHBvcnRzLmlzQWJzb2x1dGU9ZnVuY3Rpb24ocGF0aCl7cmV0dXJuIHBhdGguY2hhckF0KDApPT09XCIvXCJ9O2V4cG9ydHMuam9pbj1mdW5jdGlvbigpe3ZhciBwYXRocz1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMCk7cmV0dXJuIGV4cG9ydHMubm9ybWFsaXplKGZpbHRlcihwYXRocyxmdW5jdGlvbihwLGluZGV4KXtpZih0eXBlb2YgcCE9PVwic3RyaW5nXCIpe3Rocm93IG5ldyBUeXBlRXJyb3IoXCJBcmd1bWVudHMgdG8gcGF0aC5qb2luIG11c3QgYmUgc3RyaW5nc1wiKX1yZXR1cm4gcH0pLmpvaW4oXCIvXCIpKX07ZXhwb3J0cy5yZWxhdGl2ZT1mdW5jdGlvbihmcm9tLHRvKXtmcm9tPWV4cG9ydHMucmVzb2x2ZShmcm9tKS5zdWJzdHIoMSk7dG89ZXhwb3J0cy5yZXNvbHZlKHRvKS5zdWJzdHIoMSk7ZnVuY3Rpb24gdHJpbShhcnIpe3ZhciBzdGFydD0wO2Zvcig7c3RhcnQ8YXJyLmxlbmd0aDtzdGFydCsrKXtpZihhcnJbc3RhcnRdIT09XCJcIilicmVha312YXIgZW5kPWFyci5sZW5ndGgtMTtmb3IoO2VuZD49MDtlbmQtLSl7aWYoYXJyW2VuZF0hPT1cIlwiKWJyZWFrfWlmKHN0YXJ0PmVuZClyZXR1cm5bXTtyZXR1cm4gYXJyLnNsaWNlKHN0YXJ0LGVuZC1zdGFydCsxKX12YXIgZnJvbVBhcnRzPXRyaW0oZnJvbS5zcGxpdChcIi9cIikpO3ZhciB0b1BhcnRzPXRyaW0odG8uc3BsaXQoXCIvXCIpKTt2YXIgbGVuZ3RoPU1hdGgubWluKGZyb21QYXJ0cy5sZW5ndGgsdG9QYXJ0cy5sZW5ndGgpO3ZhciBzYW1lUGFydHNMZW5ndGg9bGVuZ3RoO2Zvcih2YXIgaT0wO2k8bGVuZ3RoO2krKyl7aWYoZnJvbVBhcnRzW2ldIT09dG9QYXJ0c1tpXSl7c2FtZVBhcnRzTGVuZ3RoPWk7YnJlYWt9fXZhciBvdXRwdXRQYXJ0cz1bXTtmb3IodmFyIGk9c2FtZVBhcnRzTGVuZ3RoO2k8ZnJvbVBhcnRzLmxlbmd0aDtpKyspe291dHB1dFBhcnRzLnB1c2goXCIuLlwiKX1vdXRwdXRQYXJ0cz1vdXRwdXRQYXJ0cy5jb25jYXQodG9QYXJ0cy5zbGljZShzYW1lUGFydHNMZW5ndGgpKTtyZXR1cm4gb3V0cHV0UGFydHMuam9pbihcIi9cIil9O2V4cG9ydHMuc2VwPVwiL1wiO2V4cG9ydHMuZGVsaW1pdGVyPVwiOlwiO2V4cG9ydHMuZGlybmFtZT1mdW5jdGlvbihwYXRoKXtpZih0eXBlb2YgcGF0aCE9PVwic3RyaW5nXCIpcGF0aD1wYXRoK1wiXCI7aWYocGF0aC5sZW5ndGg9PT0wKXJldHVyblwiLlwiO3ZhciBjb2RlPXBhdGguY2hhckNvZGVBdCgwKTt2YXIgaGFzUm9vdD1jb2RlPT09NDc7dmFyIGVuZD0tMTt2YXIgbWF0Y2hlZFNsYXNoPXRydWU7Zm9yKHZhciBpPXBhdGgubGVuZ3RoLTE7aT49MTstLWkpe2NvZGU9cGF0aC5jaGFyQ29kZUF0KGkpO2lmKGNvZGU9PT00Nyl7aWYoIW1hdGNoZWRTbGFzaCl7ZW5kPWk7YnJlYWt9fWVsc2V7bWF0Y2hlZFNsYXNoPWZhbHNlfX1pZihlbmQ9PT0tMSlyZXR1cm4gaGFzUm9vdD9cIi9cIjpcIi5cIjtpZihoYXNSb290JiZlbmQ9PT0xKXtyZXR1cm5cIi9cIn1yZXR1cm4gcGF0aC5zbGljZSgwLGVuZCl9O2Z1bmN0aW9uIGJhc2VuYW1lKHBhdGgpe2lmKHR5cGVvZiBwYXRoIT09XCJzdHJpbmdcIilwYXRoPXBhdGgrXCJcIjt2YXIgc3RhcnQ9MDt2YXIgZW5kPS0xO3ZhciBtYXRjaGVkU2xhc2g9dHJ1ZTt2YXIgaTtmb3IoaT1wYXRoLmxlbmd0aC0xO2k+PTA7LS1pKXtpZihwYXRoLmNoYXJDb2RlQXQoaSk9PT00Nyl7aWYoIW1hdGNoZWRTbGFzaCl7c3RhcnQ9aSsxO2JyZWFrfX1lbHNlIGlmKGVuZD09PS0xKXttYXRjaGVkU2xhc2g9ZmFsc2U7ZW5kPWkrMX19aWYoZW5kPT09LTEpcmV0dXJuXCJcIjtyZXR1cm4gcGF0aC5zbGljZShzdGFydCxlbmQpfWV4cG9ydHMuYmFzZW5hbWU9ZnVuY3Rpb24ocGF0aCxleHQpe3ZhciBmPWJhc2VuYW1lKHBhdGgpO2lmKGV4dCYmZi5zdWJzdHIoLTEqZXh0Lmxlbmd0aCk9PT1leHQpe2Y9Zi5zdWJzdHIoMCxmLmxlbmd0aC1leHQubGVuZ3RoKX1yZXR1cm4gZn07ZXhwb3J0cy5leHRuYW1lPWZ1bmN0aW9uKHBhdGgpe2lmKHR5cGVvZiBwYXRoIT09XCJzdHJpbmdcIilwYXRoPXBhdGgrXCJcIjt2YXIgc3RhcnREb3Q9LTE7dmFyIHN0YXJ0UGFydD0wO3ZhciBlbmQ9LTE7dmFyIG1hdGNoZWRTbGFzaD10cnVlO3ZhciBwcmVEb3RTdGF0ZT0wO2Zvcih2YXIgaT1wYXRoLmxlbmd0aC0xO2k+PTA7LS1pKXt2YXIgY29kZT1wYXRoLmNoYXJDb2RlQXQoaSk7aWYoY29kZT09PTQ3KXtpZighbWF0Y2hlZFNsYXNoKXtzdGFydFBhcnQ9aSsxO2JyZWFrfWNvbnRpbnVlfWlmKGVuZD09PS0xKXttYXRjaGVkU2xhc2g9ZmFsc2U7ZW5kPWkrMX1pZihjb2RlPT09NDYpe2lmKHN0YXJ0RG90PT09LTEpc3RhcnREb3Q9aTtlbHNlIGlmKHByZURvdFN0YXRlIT09MSlwcmVEb3RTdGF0ZT0xfWVsc2UgaWYoc3RhcnREb3QhPT0tMSl7cHJlRG90U3RhdGU9LTF9fWlmKHN0YXJ0RG90PT09LTF8fGVuZD09PS0xfHxwcmVEb3RTdGF0ZT09PTB8fHByZURvdFN0YXRlPT09MSYmc3RhcnREb3Q9PT1lbmQtMSYmc3RhcnREb3Q9PT1zdGFydFBhcnQrMSl7cmV0dXJuXCJcIn1yZXR1cm4gcGF0aC5zbGljZShzdGFydERvdCxlbmQpfTtmdW5jdGlvbiBmaWx0ZXIoeHMsZil7aWYoeHMuZmlsdGVyKXJldHVybiB4cy5maWx0ZXIoZik7dmFyIHJlcz1bXTtmb3IodmFyIGk9MDtpPHhzLmxlbmd0aDtpKyspe2lmKGYoeHNbaV0saSx4cykpcmVzLnB1c2goeHNbaV0pfXJldHVybiByZXN9dmFyIHN1YnN0cj1cImFiXCIuc3Vic3RyKC0xKT09PVwiYlwiP2Z1bmN0aW9uKHN0cixzdGFydCxsZW4pe3JldHVybiBzdHIuc3Vic3RyKHN0YXJ0LGxlbil9OmZ1bmN0aW9uKHN0cixzdGFydCxsZW4pe2lmKHN0YXJ0PDApc3RhcnQ9c3RyLmxlbmd0aCtzdGFydDtyZXR1cm4gc3RyLnN1YnN0cihzdGFydCxsZW4pfX0pLmNhbGwodGhpcyxyZXF1aXJlKFwiX3Byb2Nlc3NcIikpfSx7X3Byb2Nlc3M6NX1dLDU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe3ZhciBwcm9jZXNzPW1vZHVsZS5leHBvcnRzPXt9O3ZhciBjYWNoZWRTZXRUaW1lb3V0O3ZhciBjYWNoZWRDbGVhclRpbWVvdXQ7ZnVuY3Rpb24gZGVmYXVsdFNldFRpbW91dCgpe3Rocm93IG5ldyBFcnJvcihcInNldFRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWRcIil9ZnVuY3Rpb24gZGVmYXVsdENsZWFyVGltZW91dCgpe3Rocm93IG5ldyBFcnJvcihcImNsZWFyVGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZFwiKX0oZnVuY3Rpb24oKXt0cnl7aWYodHlwZW9mIHNldFRpbWVvdXQ9PT1cImZ1bmN0aW9uXCIpe2NhY2hlZFNldFRpbWVvdXQ9c2V0VGltZW91dH1lbHNle2NhY2hlZFNldFRpbWVvdXQ9ZGVmYXVsdFNldFRpbW91dH19Y2F0Y2goZSl7Y2FjaGVkU2V0VGltZW91dD1kZWZhdWx0U2V0VGltb3V0fXRyeXtpZih0eXBlb2YgY2xlYXJUaW1lb3V0PT09XCJmdW5jdGlvblwiKXtjYWNoZWRDbGVhclRpbWVvdXQ9Y2xlYXJUaW1lb3V0fWVsc2V7Y2FjaGVkQ2xlYXJUaW1lb3V0PWRlZmF1bHRDbGVhclRpbWVvdXR9fWNhdGNoKGUpe2NhY2hlZENsZWFyVGltZW91dD1kZWZhdWx0Q2xlYXJUaW1lb3V0fX0pKCk7ZnVuY3Rpb24gcnVuVGltZW91dChmdW4pe2lmKGNhY2hlZFNldFRpbWVvdXQ9PT1zZXRUaW1lb3V0KXtyZXR1cm4gc2V0VGltZW91dChmdW4sMCl9aWYoKGNhY2hlZFNldFRpbWVvdXQ9PT1kZWZhdWx0U2V0VGltb3V0fHwhY2FjaGVkU2V0VGltZW91dCkmJnNldFRpbWVvdXQpe2NhY2hlZFNldFRpbWVvdXQ9c2V0VGltZW91dDtyZXR1cm4gc2V0VGltZW91dChmdW4sMCl9dHJ5e3JldHVybiBjYWNoZWRTZXRUaW1lb3V0KGZ1biwwKX1jYXRjaChlKXt0cnl7cmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbChudWxsLGZ1biwwKX1jYXRjaChlKXtyZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKHRoaXMsZnVuLDApfX19ZnVuY3Rpb24gcnVuQ2xlYXJUaW1lb3V0KG1hcmtlcil7aWYoY2FjaGVkQ2xlYXJUaW1lb3V0PT09Y2xlYXJUaW1lb3V0KXtyZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcil9aWYoKGNhY2hlZENsZWFyVGltZW91dD09PWRlZmF1bHRDbGVhclRpbWVvdXR8fCFjYWNoZWRDbGVhclRpbWVvdXQpJiZjbGVhclRpbWVvdXQpe2NhY2hlZENsZWFyVGltZW91dD1jbGVhclRpbWVvdXQ7cmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpfXRyeXtyZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0KG1hcmtlcil9Y2F0Y2goZSl7dHJ5e3JldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbChudWxsLG1hcmtlcil9Y2F0Y2goZSl7cmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKHRoaXMsbWFya2VyKX19fXZhciBxdWV1ZT1bXTt2YXIgZHJhaW5pbmc9ZmFsc2U7dmFyIGN1cnJlbnRRdWV1ZTt2YXIgcXVldWVJbmRleD0tMTtmdW5jdGlvbiBjbGVhblVwTmV4dFRpY2soKXtpZighZHJhaW5pbmd8fCFjdXJyZW50UXVldWUpe3JldHVybn1kcmFpbmluZz1mYWxzZTtpZihjdXJyZW50UXVldWUubGVuZ3RoKXtxdWV1ZT1jdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKX1lbHNle3F1ZXVlSW5kZXg9LTF9aWYocXVldWUubGVuZ3RoKXtkcmFpblF1ZXVlKCl9fWZ1bmN0aW9uIGRyYWluUXVldWUoKXtpZihkcmFpbmluZyl7cmV0dXJufXZhciB0aW1lb3V0PXJ1blRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtkcmFpbmluZz10cnVlO3ZhciBsZW49cXVldWUubGVuZ3RoO3doaWxlKGxlbil7Y3VycmVudFF1ZXVlPXF1ZXVlO3F1ZXVlPVtdO3doaWxlKCsrcXVldWVJbmRleDxsZW4pe2lmKGN1cnJlbnRRdWV1ZSl7Y3VycmVudFF1ZXVlW3F1ZXVlSW5kZXhdLnJ1bigpfX1xdWV1ZUluZGV4PS0xO2xlbj1xdWV1ZS5sZW5ndGh9Y3VycmVudFF1ZXVlPW51bGw7ZHJhaW5pbmc9ZmFsc2U7cnVuQ2xlYXJUaW1lb3V0KHRpbWVvdXQpfXByb2Nlc3MubmV4dFRpY2s9ZnVuY3Rpb24oZnVuKXt2YXIgYXJncz1uZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aC0xKTtpZihhcmd1bWVudHMubGVuZ3RoPjEpe2Zvcih2YXIgaT0xO2k8YXJndW1lbnRzLmxlbmd0aDtpKyspe2FyZ3NbaS0xXT1hcmd1bWVudHNbaV19fXF1ZXVlLnB1c2gobmV3IEl0ZW0oZnVuLGFyZ3MpKTtpZihxdWV1ZS5sZW5ndGg9PT0xJiYhZHJhaW5pbmcpe3J1blRpbWVvdXQoZHJhaW5RdWV1ZSl9fTtmdW5jdGlvbiBJdGVtKGZ1bixhcnJheSl7dGhpcy5mdW49ZnVuO3RoaXMuYXJyYXk9YXJyYXl9SXRlbS5wcm90b3R5cGUucnVuPWZ1bmN0aW9uKCl7dGhpcy5mdW4uYXBwbHkobnVsbCx0aGlzLmFycmF5KX07cHJvY2Vzcy50aXRsZT1cImJyb3dzZXJcIjtwcm9jZXNzLmJyb3dzZXI9dHJ1ZTtwcm9jZXNzLmVudj17fTtwcm9jZXNzLmFyZ3Y9W107cHJvY2Vzcy52ZXJzaW9uPVwiXCI7cHJvY2Vzcy52ZXJzaW9ucz17fTtmdW5jdGlvbiBub29wKCl7fXByb2Nlc3Mub249bm9vcDtwcm9jZXNzLmFkZExpc3RlbmVyPW5vb3A7cHJvY2Vzcy5vbmNlPW5vb3A7cHJvY2Vzcy5vZmY9bm9vcDtwcm9jZXNzLnJlbW92ZUxpc3RlbmVyPW5vb3A7cHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnM9bm9vcDtwcm9jZXNzLmVtaXQ9bm9vcDtwcm9jZXNzLnByZXBlbmRMaXN0ZW5lcj1ub29wO3Byb2Nlc3MucHJlcGVuZE9uY2VMaXN0ZW5lcj1ub29wO3Byb2Nlc3MubGlzdGVuZXJzPWZ1bmN0aW9uKG5hbWUpe3JldHVybltdfTtwcm9jZXNzLmJpbmRpbmc9ZnVuY3Rpb24obmFtZSl7dGhyb3cgbmV3IEVycm9yKFwicHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWRcIil9O3Byb2Nlc3MuY3dkPWZ1bmN0aW9uKCl7cmV0dXJuXCIvXCJ9O3Byb2Nlc3MuY2hkaXI9ZnVuY3Rpb24oZGlyKXt0aHJvdyBuZXcgRXJyb3IoXCJwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWRcIil9O3Byb2Nlc3MudW1hc2s9ZnVuY3Rpb24oKXtyZXR1cm4gMH19LHt9XSw2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXttb2R1bGUuZXhwb3J0cz17bmFtZTpcImVqc1wiLGRlc2NyaXB0aW9uOlwiRW1iZWRkZWQgSmF2YVNjcmlwdCB0ZW1wbGF0ZXNcIixrZXl3b3JkczpbXCJ0ZW1wbGF0ZVwiLFwiZW5naW5lXCIsXCJlanNcIl0sdmVyc2lvbjpcIjMuMS44XCIsYXV0aG9yOlwiTWF0dGhldyBFZXJuaXNzZSA8bWRlQGZsZWVnaXgub3JnPiAoaHR0cDovL2ZsZWVnaXgub3JnKVwiLGxpY2Vuc2U6XCJBcGFjaGUtMi4wXCIsYmluOntlanM6XCIuL2Jpbi9jbGkuanNcIn0sbWFpbjpcIi4vbGliL2Vqcy5qc1wiLGpzZGVsaXZyOlwiZWpzLm1pbi5qc1wiLHVucGtnOlwiZWpzLm1pbi5qc1wiLHJlcG9zaXRvcnk6e3R5cGU6XCJnaXRcIix1cmw6XCJnaXQ6Ly9naXRodWIuY29tL21kZS9lanMuZ2l0XCJ9LGJ1Z3M6XCJodHRwczovL2dpdGh1Yi5jb20vbWRlL2Vqcy9pc3N1ZXNcIixob21lcGFnZTpcImh0dHBzOi8vZ2l0aHViLmNvbS9tZGUvZWpzXCIsZGVwZW5kZW5jaWVzOntqYWtlOlwiXjEwLjguNVwifSxkZXZEZXBlbmRlbmNpZXM6e2Jyb3dzZXJpZnk6XCJeMTYuNS4xXCIsZXNsaW50OlwiXjYuOC4wXCIsXCJnaXQtZGlyZWN0b3J5LWRlcGxveVwiOlwiXjEuNS4xXCIsanNkb2M6XCJeNC4wLjJcIixcImxydS1jYWNoZVwiOlwiXjQuMC4xXCIsbW9jaGE6XCJeMTAuMi4wXCIsXCJ1Z2xpZnktanNcIjpcIl4zLjMuMTZcIn0sZW5naW5lczp7bm9kZTpcIj49MC4xMC4wXCJ9LHNjcmlwdHM6e3Rlc3Q6XCJtb2NoYSAtdSB0ZGRcIn19fSx7fV19LHt9LFsxXSkoMSl9KTtcbiIsImxldCB0cGwgPSBPYmplY3QuY3JlYXRlKG51bGwpXG50cGxbJ3RhYmxlLWNvbHVtbnMtZm9vdGVyLmh0bWwnXSA9ICc8dHI+IDwlICQuZWFjaChjb2x1bW5zLCBmdW5jdGlvbihrZXksIGNvbHVtbikgeyAlPiA8dGQ8JS0gY29sdW1uLmF0dHIlPj48JS0gY29sdW1uLmNvbnRlbnQgJT48L3RkPiA8JSB9KTsgJT4gPC90cj4nXG50cGxbJ3RhYmxlLWNvbHVtbnMtaGVhZGVyLmh0bWwnXSA9ICc8dHIgY2xhc3M9XCJmdy1tZWRpdW0gYmctd2hpdGVcIj4gPCUgJC5lYWNoKGNvbHVtbnMsIGZ1bmN0aW9uKGtleSwgY29sdW1uKSB7ICU+IDx0ZDwlLSBjb2x1bW4uYXR0ciU+PjwlLSBjb2x1bW4uY29udGVudCAlPjwvdGQ+IDwlIH0pOyAlPiA8L3RyPidcbnRwbFsndGFibGUtY29sdW1ucy5odG1sJ10gPSAnPHRyIGNsYXNzPVwiZnctbWVkaXVtIGJnLXdoaXRlXCI+IDwlICQuZWFjaChjb2x1bW5zLCBmdW5jdGlvbihrZXksIGNvbHVtbikgeyAlPiA8dGQ8JS0gY29sdW1uLmF0dHIlPj4gPCUtIGNvbHVtbi5sYWJlbCAlPiA8JSBpZiAoY29sdW1uLmRlc2NyaXB0aW9uKSB7ICU+IDxzbWFsbCBjbGFzcz1cImJpIGJpLXF1ZXN0aW9uLWNpcmNsZSB0ZXh0LWJvZHktc2Vjb25kYXJ5IGNvcmV1aS10YWJsZV9fY3Vyc29yX2hlbHBcIiB0aXRsZT1cIjwlPSBjb2x1bW4uZGVzY3JpcHRpb24gJT5cIj48L3NtYWxsPiA8JSB9ICU+IDwlIGlmIChjb2x1bW4uc29ydGFibGUgPT09IFxcJ2FzY1xcJykgeyAlPiA8aSBjbGFzcz1cImJpIGJpLXNvcnQtZG93bi1hbHRcIj48L2k+IDwlIH0gZWxzZSBpZiAoY29sdW1uLnNvcnRhYmxlID09PSBcXCdkZXNjXFwnKSB7ICU+IDxpIGNsYXNzPVwiYmkgYmktc29ydC1kb3duXCI+PC9pPiA8JSB9ICU+IDwvdGQ+IDwlIH0pOyAlPiA8L3RyPidcbnRwbFsndGFibGUtY29udHJvbC5odG1sJ10gPSAnPGRpdiBpZD1cImNvcmV1aS10YWJsZS1jb250cm9sLTwlPSBpZCAlPlwiIGNsYXNzPVwiY29yZXVpLXRhYmxlX19jb250cm9sXCI+PC9kaXY+J1xudHBsWyd0YWJsZS1jb250cm9scy1mb290ZXItb3V0Lmh0bWwnXSA9ICcgPGRpdiBjbGFzcz1cImNvcmV1aS10YWJsZV9fZm9vdGVyIGQtZmxleCBqdXN0aWZ5LWNvbnRlbnQtYmV0d2VlblwiPiA8JSBpZiAoY29udHJvbHNMZWZ0Lmxlbmd0aCkgeyAlPiA8ZGl2IGNsYXNzPVwiY29yZXVpLXRhYmxlX19jb250cm9scyBjb3JldWktdGFibGVfX2NvbnRyb2xzX2xlZnQgZC1mbGV4IGp1c3RpZnktY29udGVudC1zdGFydCBnYXAtMiBmbGV4LXdyYXAgZmxleC1maWxsIG1iLTEgbXQtMiBhbGlnbi1pdGVtcy1jZW50ZXJcIj48L2Rpdj4gPCUgfSAlPiA8JSBpZiAoY29udHJvbHNDZW50ZXIubGVuZ3RoKSB7ICU+IDxkaXYgY2xhc3M9XCJjb3JldWktdGFibGVfX2NvbnRyb2xzIGNvcmV1aS10YWJsZV9fY29udHJvbHNfY2VudGVyIGQtZmxleCBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyIGdhcC0yIGZsZXgtd3JhcCBmbGV4LWZpbGwgbWItMSBtdC0yIGFsaWduLWl0ZW1zLWNlbnRlclwiPjwvZGl2PiA8JSB9ICU+IDwlIGlmIChjb250cm9sc1JpZ2h0Lmxlbmd0aCkgeyAlPiA8ZGl2IGNsYXNzPVwiY29yZXVpLXRhYmxlX19jb250cm9scyBjb3JldWktdGFibGVfX2NvbnRyb2xzX3JpZ2h0IGQtZmxleCBqdXN0aWZ5LWNvbnRlbnQtZW5kIGdhcC0yIGZsZXgtd3JhcCBmbGV4LWZpbGwgbWItMSBtdC0yIGFsaWduLWl0ZW1zLWNlbnRlclwiPjwvZGl2PiA8JSB9ICU+IDwvZGl2PidcbnRwbFsndGFibGUtY29udHJvbHMtZm9vdGVyLmh0bWwnXSA9ICcgPGRpdiBjbGFzcz1cImNvcmV1aS10YWJsZV9fZm9vdGVyIHBzLTEgcGUtMSBkLWZsZXgganVzdGlmeS1jb250ZW50LWJldHdlZW4gYm9yZGVyLXRvcCBib3JkZXItc2Vjb25kYXJ5LXN1YnRsZVwiPiA8JSBpZiAoY29udHJvbHNMZWZ0Lmxlbmd0aCkgeyAlPiA8ZGl2IGNsYXNzPVwiY29yZXVpLXRhYmxlX19jb250cm9scyBjb3JldWktdGFibGVfX2NvbnRyb2xzX2xlZnQgZC1mbGV4IGp1c3RpZnktY29udGVudC1zdGFydCBnYXAtMiBmbGV4LXdyYXAgZmxleC1maWxsIG1iLTEgbXQtMSBhbGlnbi1pdGVtcy1jZW50ZXJcIj48L2Rpdj4gPCUgfSAlPiA8JSBpZiAoY29udHJvbHNDZW50ZXIubGVuZ3RoKSB7ICU+IDxkaXYgY2xhc3M9XCJjb3JldWktdGFibGVfX2NvbnRyb2xzIGNvcmV1aS10YWJsZV9fY29udHJvbHNfY2VudGVyIGQtZmxleCBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyIGdhcC0yIGZsZXgtd3JhcCBmbGV4LWZpbGwgbWItMSBtdC0xIGFsaWduLWl0ZW1zLWNlbnRlclwiPjwvZGl2PiA8JSB9ICU+IDwlIGlmIChjb250cm9sc1JpZ2h0Lmxlbmd0aCkgeyAlPiA8ZGl2IGNsYXNzPVwiY29yZXVpLXRhYmxlX19jb250cm9scyBjb3JldWktdGFibGVfX2NvbnRyb2xzX3JpZ2h0IGQtZmxleCBqdXN0aWZ5LWNvbnRlbnQtZW5kIGdhcC0yIGZsZXgtd3JhcCBmbGV4LWZpbGwgbWItMSBtdC0xIGFsaWduLWl0ZW1zLWNlbnRlclwiPjwvZGl2PiA8JSB9ICU+IDwvZGl2PidcbnRwbFsndGFibGUtY29udHJvbHMtaGVhZGVyLW91dC5odG1sJ10gPSAnIDxkaXYgY2xhc3M9XCJjb3JldWktdGFibGVfX2hlYWRlciBkLWZsZXgganVzdGlmeS1jb250ZW50LWJldHdlZW5cIj4gPCUgaWYgKGNvbnRyb2xzTGVmdC5sZW5ndGgpIHsgJT4gPGRpdiBjbGFzcz1cImNvcmV1aS10YWJsZV9fY29udHJvbHMgY29yZXVpLXRhYmxlX19jb250cm9sc19sZWZ0IGQtZmxleCBqdXN0aWZ5LWNvbnRlbnQtc3RhcnQgZ2FwLTIgZmxleC13cmFwIGZsZXgtZmlsbCBtYi0yIG10LTEgYWxpZ24taXRlbXMtY2VudGVyXCI+PC9kaXY+IDwlIH0gJT4gPCUgaWYgKGNvbnRyb2xzQ2VudGVyLmxlbmd0aCkgeyAlPiA8ZGl2IGNsYXNzPVwiY29yZXVpLXRhYmxlX19jb250cm9scyBjb3JldWktdGFibGVfX2NvbnRyb2xzX2NlbnRlciBkLWZsZXgganVzdGlmeS1jb250ZW50LWNlbnRlciBnYXAtMiBmbGV4LXdyYXAgZmxleC1maWxsIG1iLTIgbXQtMSBhbGlnbi1pdGVtcy1jZW50ZXJcIj48L2Rpdj4gPCUgfSAlPiA8JSBpZiAoY29udHJvbHNSaWdodC5sZW5ndGgpIHsgJT4gPGRpdiBjbGFzcz1cImNvcmV1aS10YWJsZV9fY29udHJvbHMgY29yZXVpLXRhYmxlX19jb250cm9sc19yaWdodCBkLWZsZXgganVzdGlmeS1jb250ZW50LWVuZCBnYXAtMiBmbGV4LXdyYXAgZmxleC1maWxsIG1iLTIgbXQtMSBhbGlnbi1pdGVtcy1jZW50ZXJcIj48L2Rpdj4gPCUgfSAlPiA8L2Rpdj4nXG50cGxbJ3RhYmxlLWNvbnRyb2xzLWhlYWRlci5odG1sJ10gPSAnIDxkaXYgY2xhc3M9XCJjb3JldWktdGFibGVfX2hlYWRlciBwcy0xIHBlLTEgZC1mbGV4IGp1c3RpZnktY29udGVudC1iZXR3ZWVuIGJvcmRlci1ib3R0b20gYm9yZGVyLXNlY29uZGFyeS1zdWJ0bGVcIj4gPCUgaWYgKGNvbnRyb2xzTGVmdC5sZW5ndGgpIHsgJT4gPGRpdiBjbGFzcz1cImNvcmV1aS10YWJsZV9fY29udHJvbHMgY29yZXVpLXRhYmxlX19jb250cm9sc19sZWZ0IGQtZmxleCBqdXN0aWZ5LWNvbnRlbnQtc3RhcnQgZ2FwLTIgZmxleC13cmFwIGZsZXgtZmlsbCBteS0xIGFsaWduLWl0ZW1zLWNlbnRlclwiPjwvZGl2PiA8JSB9ICU+IDwlIGlmIChjb250cm9sc0NlbnRlci5sZW5ndGgpIHsgJT4gPGRpdiBjbGFzcz1cImNvcmV1aS10YWJsZV9fY29udHJvbHMgY29yZXVpLXRhYmxlX19jb250cm9sc19jZW50ZXIgZC1mbGV4IGp1c3RpZnktY29udGVudC1jZW50ZXIgZ2FwLTIgZmxleC13cmFwIGZsZXgtZmlsbCBteS0xIGFsaWduLWl0ZW1zLWNlbnRlclwiPjwvZGl2PiA8JSB9ICU+IDwlIGlmIChjb250cm9sc1JpZ2h0Lmxlbmd0aCkgeyAlPiA8ZGl2IGNsYXNzPVwiY29yZXVpLXRhYmxlX19jb250cm9scyBjb3JldWktdGFibGVfX2NvbnRyb2xzX3JpZ2h0IGQtZmxleCBqdXN0aWZ5LWNvbnRlbnQtZW5kIGdhcC0yIGZsZXgtd3JhcCBmbGV4LWZpbGwgbXktMSBhbGlnbi1pdGVtcy1jZW50ZXJcIj48L2Rpdj4gPCUgfSAlPiA8L2Rpdj4nXG50cGxbJ3RhYmxlLWxvYWRlci5odG1sJ10gPSAnPGRpdiBjbGFzcz1cImNvcmV1aS10YWJsZS1sb2NrIHBvc2l0aW9uLWFic29sdXRlIHctMTAwIHRvcC0wIGJvdHRvbS0wXCI+IDxkaXYgY2xhc3M9XCJjb3JldWktdGFibGUtYmxvY2sgYmctc2Vjb25kYXJ5LXN1YnRsZSBwb3NpdGlvbi1hYnNvbHV0ZSBvcGFjaXR5LTUwIHctMTAwIHRvcC0wIGJvdHRvbS0wXCI+PC9kaXY+IDxkaXYgY2xhc3M9XCJjb3JldWktdGFibGUtbWVzc2FnZSBwb3NpdGlvbi1yZWxhdGl2ZSBkLWZsZXggYWxpZ24tY29udGVudC1jZW50ZXIganVzdGlmeS1jb250ZW50LXN0YXJ0IGdhcC0yIG10LTMgcHktMSBweC0yIG0tYXV0byBib3JkZXIgYm9yZGVyLXNlY29uZGFyeS1zdWJ0bGUgcm91bmRlZC0zIGJnLWJvZHktc2Vjb25kYXJ5XCI+IDxkaXYgY2xhc3M9XCJzcGlubmVyLWJvcmRlciB0ZXh0LXNlY29uZGFyeSBhbGlnbi1zZWxmLWNlbnRlclwiPjwvZGl2PiA8c3BhbiBjbGFzcz1cImxoLWxnXCI+PCU9IGxhbmcubG9hZGluZyAlPjwvc3Bhbj4gPC9kaXY+IDwvZGl2PidcbnRwbFsndGFibGUtcmVjb3JkLWV4cGFuZC5odG1sJ10gPSAnPHRyIGNsYXNzPVwiY29yZXVpLXRhYmxlX19yZWNvcmQtZXhwYW5kZWRcIiBzdHlsZT1cImRpc3BsYXk6IG5vbmVcIj4gPHRkIGNvbHNwYW49XCI8JT0gY29sc3BhbiAlPlwiPjwvdGQ+IDwvdHI+J1xudHBsWyd0YWJsZS1yZWNvcmQtZ3JvdXAuaHRtbCddID0gJzx0cjwlLSBhdHRyICU+PiA8dGQgY29sc3Bhbj1cIjwlPSBjb2xzcGFuICU+XCI+PC90ZD4gPC90cj4nXG50cGxbJ3RhYmxlLXJlY29yZC5odG1sJ10gPSAnPHRyPCUtIHJlY29yZC5hdHRyICU+IGRhdGEtcmVjb3JkLWluZGV4PVwiPCU9IHJlY29yZC5pbmRleCAlPlwiPiA8JSAkLmVhY2gocmVjb3JkLmZpZWxkcywgZnVuY3Rpb24oa2V5MiwgZmllbGQpIHsgJT4gPHRkPCUtIGZpZWxkLmF0dHIgJT4+PC90ZD4gPCUgfSk7ICU+IDwvdHI+J1xudHBsWyd0YWJsZS1yZWNvcmRzLWVtcHR5Lmh0bWwnXSA9ICc8dHI+IDx0ZCBjbGFzcz1cInRleHQtY2VudGVyXCIgY29sc3Bhbj1cIjwlPSBjb2x1bW5zQ291bnQgJT5cIj48JT0gbGFuZy5lbXB0eVJlY29yZHMgJT48L3RkPiA8L3RyPidcbnRwbFsndGFibGUtd3JhcHBlci5odG1sJ10gPSAnIDxkaXYgaWQ9XCJjb3JldWktdGFibGUtPCU9IGlkICU+XCIgY2xhc3M9XCJjb3JldWktdGFibGVcIjwlIGlmICh3aWR0aFNpemVzKSB7ICU+IHN0eWxlPVwiPCU9IHdpZHRoU2l6ZXMuam9pbihcXCc7XFwnKSAlPlwiPCUgfSAlPj4gPGRpdiBjbGFzcz1cImNvcmV1aS10YWJsZV9fY29udGFpbmVyIHBvc2l0aW9uLXJlbGF0aXZlXCI+IDxkaXYgY2xhc3M9XCJjb3JldWktdGFibGVfX3dyYXBwZXI8JSBpZiAob3ZlcmZsb3cpIHsgJT4gb3ZlcmZsb3cteC1hdXRvPCUgfSAlPlwiIDwlIGlmIChoZWlnaHRTaXplcykgeyAlPnN0eWxlPVwiPCU9IGhlaWdodFNpemVzLmpvaW4oXFwnO1xcJykgJT5cIjwlIH0gJT4+PC9kaXY+IDwvZGl2PiA8L2Rpdj4nXG50cGxbJ3RhYmxlLmh0bWwnXSA9ICcgPHRhYmxlIGNsYXNzPVwidGFibGUgPCU9IGNsYXNzZXMgJT4gbWItMFwiPiA8Y29sZ3JvdXA+IDwlICQuZWFjaChjb2xHcm91cHMsIGZ1bmN0aW9uKGtleSwgY29sdW1uR3JvdXApIHsgJT4gPGNvbDwlIGlmIChjb2x1bW5Hcm91cC5zdHlsZSkgeyAlPiBzdHlsZT1cIjwlPSBjb2x1bW5Hcm91cC5zdHlsZSAlPlwiPCUgfSAlPi8+IDwlIH0pOyAlPiA8L2NvbGdyb3VwPiA8JSBpZiAoY29sdW1uSGVhZGVycykgeyAlPiA8dGhlYWQ8JSBpZiAodGhlYWRBdHRyKSB7ICU+IDwlLSB0aGVhZEF0dHIgJT5cIjwlIH0gJT4+IDwlLSBjb2x1bW5Hcm91cHNIZWFkZXIgJT4gPCUtIGNvbHVtbnMgJT4gPC90aGVhZD4gPCUgfSAlPiA8dGJvZHk+PC90Ym9keT4gPCUgaWYgKGNvbHVtbkdyb3Vwc0Zvb3RlciAhPSBcXCdcXCcpIHsgJT4gPHRmb290PiA8JS0gY29sdW1uR3JvdXBzRm9vdGVyICU+IDwvdGZvb3Q+IDwlIH0gJT4gPC90YWJsZT4nXG50cGxbJ2NvbHVtbnMvYmFkZ2UuaHRtbCddID0gJzxzcGFuIGNsYXNzPVwiYmFkZ2UgdGV4dC1iZy08JT0gdHlwZSAlPlwiPjwlPSB0ZXh0ICU+PC9zcGFuPidcbnRwbFsnY29sdW1ucy9idXR0b24uaHRtbCddID0gJzxidXR0b24gdHlwZT1cImJ1dHRvblwiPCUtIGF0dHIgJT4+PCUtIGNvbnRlbnQgJT48L2J1dHRvbj4nXG50cGxbJ2NvbHVtbnMvbGluay5odG1sJ10gPSAnPGEgPCUtIGF0dHIgJT4+PCUtIGNvbnRlbnQgJT48L2E+J1xudHBsWydjb2x1bW5zL21lbnUuaHRtbCddID0gJyA8ZGl2IGNsYXNzPVwiYnRuLWdyb3VwXCIgcm9sZT1cImdyb3VwXCI+IDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGRhdGEtYnMtdG9nZ2xlPVwiZHJvcGRvd25cIiA8JS0gYXR0ciAlPj4gPCUtIGNvbnRlbnQgJT4gPC9idXR0b24+IDx1bCBjbGFzcz1cImRyb3Bkb3duLW1lbnUgZHJvcGRvd24tbWVudS08JT0gcG9zaXRpb24gJT5cIj4gPCUgJC5lYWNoKGl0ZW1zLCBmdW5jdGlvbihrZXksIGl0ZW0pIHsgJT4gPCUgaWYgKGl0ZW0udHlwZSA9PT0gXFwnbGlua1xcJykgeyAlPiA8bGk+PGEgaHJlZj1cIjwlPSBpdGVtLmxpbmsgJT5cIjwlLSBpdGVtLmF0dHIgJT4+PCU9IGl0ZW0uY29udGVudCAlPjwvYT48L2xpPiA8JSB9IGVsc2UgaWYgKGl0ZW0udHlwZSA9PT0gXFwnYnV0dG9uXFwnKSB7ICU+IDxsaT4gPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgaWQ9XCJidG4tZHJvcGRvd24tPCU9IGl0ZW0uaWQgJT5cIjwlLSBpdGVtLmF0dHIgJT4+IDwlLSBpdGVtLmNvbnRlbnQgJT4gPC9idXR0b24+IDwvbGk+IDwlIH0gZWxzZSBpZiAoaXRlbS50eXBlID09PSBcXCdkaXZpZGVyXFwnKSB7ICU+IDxsaT48aHIgY2xhc3M9XCJkcm9wZG93bi1kaXZpZGVyXCI+PC9saT4gPCUgfSBlbHNlIGlmIChpdGVtLnR5cGUgPT09IFxcJ2hlYWRlclxcJykgeyAlPiA8bGk+PGg2IGNsYXNzPVwiZHJvcGRvd24taGVhZGVyXCI+PCU9IGl0ZW0uY29udGVudCAlPjwvaDY+PC9saT4gPCUgfSAlPiA8JSB9KSAlPiA8L3VsPiA8L2Rpdj4nXG50cGxbJ2NvbHVtbnMvc2VsZWN0Lmh0bWwnXSA9ICc8aW5wdXQgY2xhc3M9XCJjb3JldWktdGFibGVfX3NlbGVjdCBmb3JtLWNoZWNrLWlucHV0XCIgdHlwZT1cImNoZWNrYm94XCIgdmFsdWU9XCI8JT0gaW5kZXggJT5cIj4nXG50cGxbJ2NvbHVtbnMvc2VsZWN0X2xhYmVsLmh0bWwnXSA9ICc8aW5wdXQgY2xhc3M9XCJjb3JldWktdGFibGVfX3NlbGVjdC1hbGwgZm9ybS1jaGVjay1pbnB1dFwiIHR5cGU9XCJjaGVja2JveFwiIHZhbHVlPVwiXCI+J1xudHBsWydjb2x1bW5zL3N3aXRjaC5odG1sJ10gPSAnPGRpdiBjbGFzcz1cImZvcm0tc3dpdGNoXCI+IDxpbnB1dCBjbGFzcz1cImZvcm0tY2hlY2staW5wdXQgY29yZXVpLXRhYmxlX19zd2l0Y2hcIiB0eXBlPVwiY2hlY2tib3hcIiBkYXRhLWZpZWxkPVwiPCU9IGZpZWxkICU+XCIgdmFsdWU9XCJyZWNvcmQuaW5kZXhcIjwlIGlmIChjaGVja2VkKSB7ICU+IGNoZWNrZWQ8JSB9ICU+PCUgaWYgKGRpc2FibGVkKSB7ICU+IGRpc2FibGVkPCUgfSAlPj4gPC9kaXY+J1xudHBsWydmaWx0ZXJzL2NoZWNrYm94Lmh0bWwnXSA9ICcgPGRpdiBjbGFzcz1cImJ0bi1ncm91cFwiPiA8JSBpZiAobGFiZWwpIHsgJT4gPHNwYW4gY2xhc3M9XCJpbnB1dC1ncm91cC10ZXh0XCI+PCU9IGxhYmVsICU+PC9zcGFuPiA8JSB9ICU+IDwlICQuZWFjaChpdGVtcywgZnVuY3Rpb24oa2V5LCBpdGVtKSB7ICU+IDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBjbGFzcz1cImJ0bi1jaGVja1wiIGF1dG9jb21wbGV0ZT1cIm9mZlwiIGlkPVwiPCU9IChmaWVsZCArIGtleSkgJT5cIiBuYW1lPVwiPCU9IGZpZWxkICU+XCIgdmFsdWU9XCI8JT0gaXRlbS52YWx1ZSAlPlwiIDwlPSBpdGVtLmNoZWNrZWQgPyBcXCcgY2hlY2tlZFxcJyA6IFxcJ1xcJyAlPj4gPGxhYmVsIGNsYXNzPVwiPCU9IGl0ZW0uY2xhc3MgJT5cIiBmb3I9XCI8JT0gKGZpZWxkICsga2V5KSAlPlwiPjwlPSBpdGVtLnRleHQgJT48L2xhYmVsPiA8JSB9KTsgJT4gPC9kaXY+J1xudHBsWydmaWx0ZXJzL2NsZWFyLmh0bWwnXSA9ICcgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgPCUtIGF0dHIgJT4+PCUtIGNvbnRlbnQgJT48L2J1dHRvbj4nXG50cGxbJ2ZpbHRlcnMvZGF0ZS5odG1sJ10gPSAnIDxkaXYgY2xhc3M9XCJpbnB1dC1ncm91cFwiPiA8JSBpZiAobGFiZWwpIHsgJT4gPHNwYW4gY2xhc3M9XCJpbnB1dC1ncm91cC10ZXh0XCI+PCU9IGxhYmVsICU+PC9zcGFuPiA8JSB9ICU+IDxpbnB1dCB0eXBlPVwiZGF0ZVwiIDwlLSBhdHRyICU+PiA8L2Rpdj4nXG50cGxbJ2ZpbHRlcnMvZGF0ZXRpbWUuaHRtbCddID0gJyA8ZGl2IGNsYXNzPVwiaW5wdXQtZ3JvdXBcIj4gPCUgaWYgKGxhYmVsKSB7ICU+IDxzcGFuIGNsYXNzPVwiaW5wdXQtZ3JvdXAtdGV4dFwiPjwlPSBsYWJlbCAlPjwvc3Bhbj4gPCUgfSAlPiA8aW5wdXQgdHlwZT1cImRhdGV0aW1lLWxvY2FsXCIgPCUtIGF0dHIgJT4+IDwvZGl2PidcbnRwbFsnZmlsdGVycy9kYXRldGltZV9yYW5nZS5odG1sJ10gPSAnIDxkaXYgY2xhc3M9XCJpbnB1dC1ncm91cFwiPiA8JSBpZiAobGFiZWwpIHsgJT4gPHNwYW4gY2xhc3M9XCJpbnB1dC1ncm91cC10ZXh0XCI+PCU9IGxhYmVsICU+PC9zcGFuPiA8JSB9ICU+IDxpbnB1dCB0eXBlPVwiZGF0ZXRpbWUtbG9jYWxcIiA8JS0gc3RhcnRBdHRyICU+PiA8aW5wdXQgdHlwZT1cImRhdGV0aW1lLWxvY2FsXCIgPCUtIGVuZEF0dHIgJT4+IDwvZGl2PidcbnRwbFsnZmlsdGVycy9kYXRlX21vbnRoLmh0bWwnXSA9ICcgPGRpdiBjbGFzcz1cImlucHV0LWdyb3VwXCI+IDwlIGlmIChsYWJlbCkgeyAlPiA8c3BhbiBjbGFzcz1cImlucHV0LWdyb3VwLXRleHRcIj48JT0gbGFiZWwgJT48L3NwYW4+IDwlIH0gJT4gPGlucHV0IHR5cGU9XCJtb250aFwiIDwlLSBhdHRyICU+PiA8L2Rpdj4nXG50cGxbJ2ZpbHRlcnMvZGF0ZV9yYW5nZS5odG1sJ10gPSAnIDxkaXYgY2xhc3M9XCJpbnB1dC1ncm91cFwiPiA8JSBpZiAobGFiZWwpIHsgJT4gPHNwYW4gY2xhc3M9XCJpbnB1dC1ncm91cC10ZXh0XCI+PCU9IGxhYmVsICU+PC9zcGFuPiA8JSB9ICU+IDxpbnB1dCB0eXBlPVwiZGF0ZVwiIDwlLSBzdGFydEF0dHIgJT4+IDxpbnB1dCB0eXBlPVwiZGF0ZVwiIDwlLSBlbmRBdHRyICU+PiA8L2Rpdj4nXG50cGxbJ2ZpbHRlcnMvbnVtYmVyLmh0bWwnXSA9ICcgPGRpdiBjbGFzcz1cImlucHV0LWdyb3VwXCI+IDwlIGlmIChsYWJlbCkgeyAlPiA8c3BhbiBjbGFzcz1cImlucHV0LWdyb3VwLXRleHRcIj48JT0gbGFiZWwgJT48L3NwYW4+IDwlIH0gJT4gPGlucHV0IHR5cGU9XCJudW1iZXJcIiA8JS0gYXR0clN0YXJ0ICU+PiA8aW5wdXQgdHlwZT1cIm51bWJlclwiIDwlLSBhdHRyRW5kICU+PiA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiA8JS0gYnRuQXR0ciAlPj4gPCUtIGJ0bkNvbnRlbnQgJT4gPC9idXR0b24+IDwvZGl2PidcbnRwbFsnZmlsdGVycy9yYWRpby5odG1sJ10gPSAnIDxkaXYgY2xhc3M9XCJidG4tZ3JvdXBcIj4gPCUgaWYgKGxhYmVsKSB7ICU+IDxzcGFuIGNsYXNzPVwiaW5wdXQtZ3JvdXAtdGV4dFwiPjwlPSBsYWJlbCAlPjwvc3Bhbj4gPCUgfSAlPiA8JSAkLmVhY2goaXRlbXMsIGZ1bmN0aW9uKGtleSwgaXRlbSkgeyAlPiA8aW5wdXQgdHlwZT1cInJhZGlvXCIgY2xhc3M9XCJidG4tY2hlY2tcIiBhdXRvY29tcGxldGU9XCJvZmZcIiBpZD1cIjwlPSAoZmllbGQgKyBrZXkpICU+XCIgbmFtZT1cIjwlPSBmaWVsZCAlPlwiIHZhbHVlPVwiPCU9IGl0ZW0udmFsdWUgJT5cIiA8JT0gaXRlbS5jaGVja2VkID8gXFwnIGNoZWNrZWRcXCcgOiBcXCdcXCcgJT4+IDxsYWJlbCBjbGFzcz1cIjwlPSBpdGVtLmNsYXNzICU+XCIgZm9yPVwiPCU9IChmaWVsZCArIGtleSkgJT5cIj48JT0gaXRlbS50ZXh0ICU+PC9sYWJlbD4gPCUgfSk7ICU+IDwvZGl2PidcbnRwbFsnZmlsdGVycy9zZWxlY3QuaHRtbCddID0gJzxkaXYgY2xhc3M9XCJpbnB1dC1ncm91cFwiPiA8JSBpZiAobGFiZWwpIHsgJT4gPHNwYW4gY2xhc3M9XCJpbnB1dC1ncm91cC10ZXh0XCI+PCU9IGxhYmVsICU+PC9zcGFuPiA8JSB9ICU+IDxzZWxlY3QgPCUtIGF0dHIgJT4+IDxvcHRpb24+LS08L29wdGlvbj4gPCUgJC5lYWNoKG9wdGlvbnMsIGZ1bmN0aW9uKGtleSwgb3B0aW9uKSB7ICU+IDwlIGlmIChvcHRpb24udHlwZSA9PT0gXFwnZ3JvdXBcXCcpIHsgJT4gPG9wdGdyb3VwPCUtIG9wdGlvbi5hdHRyICU+Lz4gPCUgJC5lYWNoKG9wdGlvbi5vcHRpb25zLCBmdW5jdGlvbihrZXksIGdyb3VwT3B0aW9uKSB7ICU+IDxvcHRpb24gPCUtIGdyb3VwT3B0aW9uLmF0dHIgJT4vPjwlPSBncm91cE9wdGlvbi50ZXh0ICU+PC9vcHRpb24+IDwlIH0pOyAlPiA8L29wdGdyb3VwPiA8JSB9IGVsc2UgeyAlPiA8b3B0aW9uIDwlLSBvcHRpb24uYXR0ciAlPi8+PCU9IG9wdGlvbi50ZXh0ICU+PC9vcHRpb24+IDwlIH0gJT4gPCUgfSk7ICU+IDwvc2VsZWN0PiA8L2Rpdj4nXG50cGxbJ2ZpbHRlcnMvc3dpdGNoLmh0bWwnXSA9ICc8ZGl2IGNsYXNzPVwiZm9ybS1jaGVjayBmb3JtLXN3aXRjaFwiPiA8aW5wdXQgY2xhc3M9XCJmb3JtLWNoZWNrLWlucHV0XCIgdHlwZT1cImNoZWNrYm94XCIgaWQ9XCI8JT0gKGZpZWxkICsgaWQpICU+XCIgbmFtZT1cIjwlPSBmaWVsZCAlPlwiIHZhbHVlPVwiPCU9IHZhbHVlWSAlPlwiIDwlPSBjaGVja2VkID8gXFwnIGNoZWNrZWRcXCcgOiBcXCdcXCcgJT4+IDwlIGlmIChsYWJlbCAhPSBcXCdcXCcpIHsgJT4gPGxhYmVsIGNsYXNzPVwiZm9ybS1jaGVjay1sYWJlbFwiIGZvcj1cIjwlPSAoZmllbGQgKyBpZCkgJT5cIj48JT0gbGFiZWwgJT48L2xhYmVsPiA8JSB9ICU+IDwvZGl2PidcbnRwbFsnZmlsdGVycy90ZXh0Lmh0bWwnXSA9ICcgPGRpdiBjbGFzcz1cImlucHV0LWdyb3VwXCI+IDwlIGlmIChsYWJlbCkgeyAlPiA8c3BhbiBjbGFzcz1cImlucHV0LWdyb3VwLXRleHRcIj48JT0gbGFiZWwgJT48L3NwYW4+IDwlIH0gJT4gPGlucHV0IHR5cGU9XCJ0ZXh0XCIgPCUtIGF0dHIgJT4+IDxidXR0b24gdHlwZT1cImJ1dHRvblwiIDwlLSBidG5BdHRyICU+PiA8JS0gYnRuQ29udGVudCAlPiA8L2J1dHRvbj4gPC9kaXY+J1xudHBsWydjb250cm9scy9idXR0b24uaHRtbCddID0gJzxidXR0b24gdHlwZT1cImJ1dHRvblwiPCUtIGF0dHIgJT4+PCUtIGNvbnRlbnQgJT48L2J1dHRvbj4nXG50cGxbJ2NvbnRyb2xzL2J1dHRvbl9ncm91cC5odG1sJ10gPSAnIDxkaXYgY2xhc3M9XCJidG4tZ3JvdXBcIiByb2xlPVwiZ3JvdXBcIj4gPCUgJC5lYWNoKGJ1dHRvbnMsIGZ1bmN0aW9uKGtleSwgYnV0dG9uKSB7ICU+IDwlIGlmIChidXR0b24udHlwZSA9PT0gXFwnbGlua1xcJykgeyAlPiA8YSBocmVmPVwiPCU9IGJ1dHRvbi5saW5rICU+XCI8JS0gYnV0dG9uLmF0dHIgJT4+PCU9IGJ1dHRvbi5jb250ZW50ICU+PC9hPiA8JSB9IGVsc2UgaWYgKGJ1dHRvbi50eXBlID09PSBcXCdidXR0b25cXCcpIHsgJT4gPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgaWQ9XCJidG4tPCU9IGJ1dHRvbi5pZCAlPlwiPCUtIGJ1dHRvbi5hdHRyICU+PiA8JT0gYnV0dG9uLmNvbnRlbnQgJT4gPC9idXR0b24+IDwlIH0gZWxzZSBpZiAoYnV0dG9uLnR5cGUgPT09IFxcJ2Ryb3Bkb3duXFwnKSB7ICU+IDxkaXYgY2xhc3M9XCJidG4tZ3JvdXBcIiByb2xlPVwiZ3JvdXBcIj4gPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgZGF0YS1icy10b2dnbGU9XCJkcm9wZG93blwiPCUtIGJ1dHRvbi5hdHRyICU+PiA8JS0gYnV0dG9uLmNvbnRlbnQgJT4gPC9idXR0b24+IDx1bCBjbGFzcz1cImRyb3Bkb3duLW1lbnUgZHJvcGRvd24tbWVudS08JT0gYnV0dG9uLnBvc2l0aW9uICU+XCI+IDwlICQuZWFjaChidXR0b24uaXRlbXMsIGZ1bmN0aW9uKGtleSwgaXRlbSkgeyAlPiA8JSBpZiAoaXRlbS50eXBlID09PSBcXCdsaW5rXFwnKSB7ICU+IDxsaT48YSBjbGFzcz1cImRyb3Bkb3duLWl0ZW1cIiBocmVmPVwiPCU9IGl0ZW0ubGluayAlPlwiPjwlPSBpdGVtLmNvbnRlbnQgJT48L2E+PC9saT4gPCUgfSBlbHNlIGlmIChpdGVtLnR5cGUgPT09IFxcJ2J1dHRvblxcJykgeyAlPiA8bGk+IDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiZHJvcGRvd24taXRlbVwiIGlkPVwiYnRuLWRyb3Bkb3duLTwlPSBpdGVtLmlkICU+XCI+IDwlPSBpdGVtLmNvbnRlbnQgJT4gPC9idXR0b24+IDwvbGk+IDwlIH0gZWxzZSBpZiAoaXRlbS50eXBlID09PSBcXCdkaXZpZGVyXFwnKSB7ICU+IDxsaT48aHIgY2xhc3M9XCJkcm9wZG93bi1kaXZpZGVyXCI+PC9saT4gPCUgfSAlPiA8JSB9KSAlPiA8L3VsPiA8L2Rpdj4gPCUgfSAlPiA8JSB9KSAlPiA8L2Rpdj4nXG50cGxbJ2NvbnRyb2xzL2NhcHRpb24uaHRtbCddID0gJzxkaXYgY2xhc3M9XCJkLWZsZXggZmxleC1jb2x1bW4gbWUtM1wiPiA8c21hbGwgY2xhc3M9XCJ0ZXh0LWJvZHktc2Vjb25kYXJ5IGZ3LW1lZGl1bVwiPiA8JT0gdGl0bGUgJT4gPCUgaWYgKGRlc2NyaXB0aW9uKSB7ICU+IDxpIGNsYXNzPVwiYmkgYmktcXVlc3Rpb24tY2lyY2xlIGNvcmV1aS10YWJsZV9fY3Vyc29yX2hlbHBcIiB0aXRsZT1cIjwlPSBkZXNjcmlwdGlvbiAlPlwiPjwvaT4gPCUgfSAlPiA8L3NtYWxsPiA8YiBjbGFzcz1cInRleHQtbm93cmFwXCI+PCU9IHZhbHVlICU+PC9iPiA8L2Rpdj4nXG50cGxbJ2NvbnRyb2xzL2NvbHVtbnMtY29udGFpbmVyLmh0bWwnXSA9ICcgPGRpdiBjbGFzcz1cImNvcmV1aS10YWJsZV9fY29sdW1ucyBweC0zIHB0LTMgcGItNFwiPiA8ZGl2IGNsYXNzPVwibWItM1wiPiA8ZGl2IGNsYXNzPVwiZm9ybS1jaGVjayBjb3JldWktdGFibGVfX2NoZWNrX2FsbFwiPiA8bGFiZWwgY2xhc3M9XCJmb3JtLWNoZWNrLWxhYmVsXCI+IDxpbnB1dCBjbGFzcz1cImZvcm0tY2hlY2staW5wdXRcIiB0eXBlPVwiY2hlY2tib3hcIiA8JSBpZiAoc2hvd0FsbCA9PT0gdHJ1ZSkgeyAlPmNoZWNrZWQ8JSB9ICU+PiA8JT0gbGFuZy5hbGwgJT4gPC9sYWJlbD4gPC9kaXY+IDwlICQuZWFjaChjb2x1bW5zLCBmdW5jdGlvbihrZXksIGNvbHVtbikgeyAlPiA8ZGl2IGNsYXNzPVwiZm9ybS1jaGVjayBjb3JldWktdGFibGVfY2hlY2stY29sdW1uXCI+IDxsYWJlbCBjbGFzcz1cImZvcm0tY2hlY2stbGFiZWxcIj4gPGlucHV0IGNsYXNzPVwiZm9ybS1jaGVjay1pbnB1dFwiIHR5cGU9XCJjaGVja2JveFwiIHZhbHVlPVwiPCU9IGNvbHVtbi5maWVsZCAlPlwiIDwlIGlmIChjb2x1bW4uc2hvdyA9PT0gdHJ1ZSkgeyAlPmNoZWNrZWQ8JSB9ICU+PiA8JT0gY29sdW1uLmxhYmVsICU+IDwvbGFiZWw+IDwvZGl2PiA8JSB9KTsgJT4gPC9kaXY+IDxidXR0b24gdHlwZT1cImJ1dHRvblwiIDwlLSBidG5Db21wbGV0ZUF0dHIgJT4+IDwlLSBidG5Db21wbGV0ZUNvbnRlbnQgJT4gPC9idXR0b24+IDwvZGl2PidcbnRwbFsnY29udHJvbHMvY29sdW1ucy5odG1sJ10gPSAnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCI8JS0gYnRuQXR0ciAlPj48JS1idG5Db250ZW50JT48L2J1dHRvbj4nXG50cGxbJ2NvbnRyb2xzL2Ryb3Bkb3duLmh0bWwnXSA9ICcgPGRpdiBjbGFzcz1cImJ0bi1ncm91cFwiIHJvbGU9XCJncm91cFwiPiA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBkYXRhLWJzLXRvZ2dsZT1cImRyb3Bkb3duXCI8JS0gYXR0ciAlPj4gPCUtIGNvbnRlbnQgJT4gPC9idXR0b24+IDx1bCBjbGFzcz1cImRyb3Bkb3duLW1lbnUgZHJvcGRvd24tbWVudS08JT0gcG9zaXRpb24gJT5cIj4gPCUgJC5lYWNoKGl0ZW1zLCBmdW5jdGlvbihrZXksIGl0ZW0pIHsgJT4gPCUgaWYgKGl0ZW0udHlwZSA9PT0gXFwnbGlua1xcJykgeyAlPiA8bGk+PGEgY2xhc3M9XCJkcm9wZG93bi1pdGVtXCIgaHJlZj1cIjwlPSBpdGVtLmxpbmsgJT5cIj48JT0gaXRlbS5jb250ZW50ICU+PC9hPjwvbGk+IDwlIH0gZWxzZSBpZiAoaXRlbS50eXBlID09PSBcXCdidXR0b25cXCcpIHsgJT4gPGxpPiA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImRyb3Bkb3duLWl0ZW1cIiBpZD1cImJ0bi1kcm9wZG93bi08JT0gaXRlbS5pZCAlPlwiPiA8JT0gaXRlbS5jb250ZW50ICU+IDwvYnV0dG9uPiA8L2xpPiA8JSB9IGVsc2UgaWYgKGl0ZW0udHlwZSA9PT0gXFwnZGl2aWRlclxcJykgeyAlPiA8bGk+PGhyIGNsYXNzPVwiZHJvcGRvd24tZGl2aWRlclwiPjwvbGk+IDwlIH0gJT4gPCUgfSkgJT4gPC91bD4gPC9kaXY+J1xudHBsWydjb250cm9scy9saW5rLmh0bWwnXSA9ICc8YSBocmVmPVwiPCUtIGhyZWYgJT5cIjwlLSBhdHRyICU+PjwlLSBjb250ZW50ICU+PC9hPidcbnRwbFsnY29udHJvbHMvcGFnZS1qdW1wLmh0bWwnXSA9ICcgPGRpdiBjbGFzcz1cImNvcmV1aS10YWJsZV9fcGFnZV9qdW1wX2NvbnRhaW5lclwiPiA8ZGl2IDwlLSBhdHRyICU+PiA8aW5wdXQgdHlwZT1cIm51bWJlclwiIGNsYXNzPVwiZm9ybS1jb250cm9sIGJvcmRlci1zZWNvbmRhcnktc3VidGxlXCIgbWluPVwiMVwiPiA8YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1vdXRsaW5lLXNlY29uZGFyeSBib3JkZXItc2Vjb25kYXJ5LXN1YnRsZVwiIHR5cGU9XCJidXR0b25cIj4gPGkgY2xhc3M9XCJiaSBiaS1jaGV2cm9uLWNvbXBhY3QtcmlnaHRcIj48L2k+IDwvYnV0dG9uPiA8L2Rpdj4gPC9kaXY+J1xudHBsWydjb250cm9scy9wYWdlLXNpemUuaHRtbCddID0gJyA8c2VsZWN0IDwlLSBhdHRyICU+PiA8JSAkLmVhY2gocmVjb3Jkc1BlclBhZ2VMaXN0LCBmdW5jdGlvbihrZXksIGNvdW50KSB7ICU+IDxvcHRpb24gdmFsdWU9XCI8JT0gY291bnQgJT5cIjwlIGlmIChyZWNvcmRzUGVyUGFnZSA9PSBjb3VudCkgeyAlPnNlbGVjdGVkPCUgfSAlPj4gPCUgaWYgKGNvdW50ID09IFxcJzBcXCcpIHsgJT48JT0gbGFuZy5hbGwgJT48JSB9IGVsc2UgeyAlPjwlPSBjb3VudCAlPjwlIH0gJT4gPC9vcHRpb24+IDwlIH0pOyAlPiA8L3NlbGVjdD4nXG50cGxbJ2NvbnRyb2xzL3BhZ2VzLmh0bWwnXSA9ICcgPG5hdj4gPHVsIDwlLSBhdHRyICU+PiA8JSBpZiAoc2hvd1ByZXYpIHsgJT4gPGxpIGNsYXNzPVwicGFnZS1pdGVtIGNvcmV1aS10YWJsZV9fcGFnZV9wcmV2IDwlIGlmICggISBpc0FjdGl2ZVByZXYpIHsgJT4gZGlzYWJsZWQ8JSB9ICU+XCI+IDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwicGFnZS1saW5rIHRleHQtc2Vjb25kYXJ5XCI+IDxpIGNsYXNzPVwiYmkgYmktY2hldnJvbi1sZWZ0XCI+PC9pPiA8L2J1dHRvbj4gPC9saT4gPCUgfSAlPiA8JSBpZiAoc2hvd1BhZ2VGaXJzdCkgeyAlPiA8bGkgY2xhc3M9XCJwYWdlLWl0ZW1cIj4gPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJwYWdlLWxpbmsgdGV4dC1zZWNvbmRhcnkgY29yZXVpLXRhYmxlX19wYWdlXCI+IDEgPC9idXR0b24+IDwvbGk+IDwlIH0gJT4gPCUgaWYgKHNob3dEaXZpZGVyU3RhcnQpIHsgJT4gPGxpIGNsYXNzPVwicGFnZS1pdGVtIGRpc2FibGVkXCI+IDxzcGFuIGNsYXNzPVwicGFnZS1saW5rIHRleHQtc2Vjb25kYXJ5IHB4LTFcIj4uLi48L3NwYW4+IDwvbGk+IDwlIH0gJT4gPCUgJC5lYWNoKHBhZ2VzLCBmdW5jdGlvbihrZXksIHBhZ2UpIHsgJT4gPCUgaWYgKHBhZ2UgPT0gY3VycmVudFBhZ2UpIHsgJT4gPGxpIGNsYXNzPVwicGFnZS1pdGVtXCI+IDxzcGFuIGNsYXNzPVwicGFnZS1saW5rXCI+PCU9IHBhZ2UgJT48L3NwYW4+IDwvbGk+IDwlIH0gZWxzZSB7ICU+IDxsaSBjbGFzcz1cInBhZ2UtaXRlbVwiPiA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cInBhZ2UtbGluayB0ZXh0LXNlY29uZGFyeSBjb3JldWktdGFibGVfX3BhZ2VcIj4gPCU9IHBhZ2UgJT4gPC9idXR0b24+IDwvbGk+IDwlIH0gJT4gPCUgfSk7ICU+IDwlIGlmIChzaG93RGl2aWRlckVuZCkgeyAlPiA8bGkgY2xhc3M9XCJwYWdlLWl0ZW0gZGlzYWJsZWRcIj4gPHNwYW4gY2xhc3M9XCJwYWdlLWxpbmsgdGV4dC1zZWNvbmRhcnkgcHgtMVwiPi4uLjwvc3Bhbj4gPC9saT4gPCUgfSAlPiA8JSBpZiAoc2hvd1BhZ2VMYXN0KSB7ICU+IDxsaSBjbGFzcz1cInBhZ2UtaXRlbVwiPiA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cInBhZ2UtbGluayB0ZXh0LXNlY29uZGFyeSBjb3JldWktdGFibGVfX3BhZ2VcIj4gPCU9IHBhZ2VzVG90YWwgJT4gPC9idXR0b24+IDwvbGk+IDwlIH0gJT4gPCUgaWYgKHNob3dOZXh0KSB7ICU+IDxsaSBjbGFzcz1cInBhZ2UtaXRlbSBjb3JldWktdGFibGVfX3BhZ2VfbmV4dDwlIGlmICggISBpc0FjdGl2ZU5leHQpIHsgJT4gZGlzYWJsZWQ8JSB9ICU+XCI+IDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwicGFnZS1saW5rIHRleHQtc2Vjb25kYXJ5XCI+IDxpIGNsYXNzPVwiYmkgYmktY2hldnJvbi1yaWdodFwiPjwvaT4gPC9idXR0b24+IDwvbGk+IDwlIH0gJT4gPC91bD4gPC9uYXY+J1xudHBsWydjb250cm9scy9zZWFyY2gtY2xlYXIuaHRtbCddID0gJyA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiA8JS0gYXR0ciAlPj4gPCUtIGNvbnRlbnQgJT4gPC9idXR0b24+ICdcbnRwbFsnY29udHJvbHMvc2VhcmNoLWNvbnRhaW5lci5odG1sJ10gPSAnIDxkaXYgY2xhc3M9XCJjb3JldWktdGFibGVfX3NlYXJjaCBweC0zIHB0LTMgcGItNFwiPiA8ZGl2IGNsYXNzPVwibWItM1wiPiA8JSAkLmVhY2goY29udHJvbHMsIGZ1bmN0aW9uKGtleSwgY29udHJvbCkgeyAlPiA8ZGl2IGNsYXNzPVwibWItMiBkLWZsZXggZmxleC1jb2x1bW4gZmxleC1tZC1yb3cgXCI+IDxsYWJlbCBjbGFzcz1cImNvbC1mb3JtLWxhYmVsIGZ3LW1lZGl1bSB0ZXh0LXN0YXJ0IHRleHQtbWQtZW5kIHBlLTJcIiBzdHlsZT1cIm1pbi13aWR0aDo8JT0gbGFiZWxXaWR0aCAlPjt3aWR0aDo8JT0gbGFiZWxXaWR0aCAlPlwiPiA8JT0gY29udHJvbC5sYWJlbCAlPiA8JSBpZiAoY29udHJvbC5kZXNjcmlwdGlvbikgeyAlPiA8ZGl2IGNsYXNzPVwidGV4dC1tdXRlZCBmdy1ub3JtYWxcIj4gPHNtYWxsPjwlPSBjb250cm9sLmRlc2NyaXB0aW9uICU+PC9zbWFsbD4gPC9kaXY+IDwlIH0gJT4gPC9sYWJlbD4gPGRpdiBjbGFzcz1cImZsZXgtZmlsbCBzZWFyY2gtY29udHJvbC08JT0gY29udHJvbC5pZCAlPlwiPiA8JS0gY29udHJvbC5jb250ZW50ICU+IDwlIGlmIChjb250cm9sLnByZWZpeCkgeyAlPiA8JT0gY29udHJvbC5wcmVmaXggJT4gPCUgfSAlPiA8L2Rpdj4gPC9kaXY+IDwlIH0pOyAlPiA8L2Rpdj4gPGRpdiBjbGFzcz1cImQtZmxleCBmbGV4LXNtLXdyYXAgZmxleC1tZC1ub3dyYXBcIj4gPGRpdiBjbGFzcz1cImQtbm9uZSBkLW1kLWJsb2NrXCIgc3R5bGU9XCJ3aWR0aDo8JT0gbGFiZWxXaWR0aCAlPjttaW4td2lkdGg6PCU9IGxhYmVsV2lkdGggJT5cIj48L2Rpdj4gPGRpdiBjbGFzcz1cImQtZmxleCBqdXN0aWZ5LWNvbnRlbnQtc3RhcnQgZmxleC13cmFwIGdhcC0yXCI+IDxidXR0b24gdHlwZT1cImJ1dHRvblwiIDwlLSBidG5Db21wbGV0ZUF0dHIgJT4+IDwlLSBidG5Db21wbGV0ZUNvbnRlbnQgJT4gPC9idXR0b24+IDwvZGl2PiA8L2Rpdj4gPC9kaXY+J1xudHBsWydjb250cm9scy9zZWFyY2guaHRtbCddID0gJzxkaXYgY2xhc3M9XCJidG4tZ3JvdXBcIj4gPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCI8JS0gYnRuQXR0ciAlPj48JS0gYnRuQ29udGVudCAlPjwvYnV0dG9uPiA8JS0gYnRuQ2xlYXIgJT4gPC9kaXY+ICdcbnRwbFsnY29udHJvbHMvdG90YWwuaHRtbCddID0gJzxkaXYgPCUtIGF0dHIgJT4+IDxzbWFsbD48JT0gbGFuZy50b3RhbCAlPjogPHNwYW4gY2xhc3M9XCJjb3JldWktdGFibGVfX2NvdW50LXRvdGFsXCI+PCU9IHJlY29yZHNUb3RhbCAlPjwvc3Bhbj48L3NtYWxsPiA8L2Rpdj4nXG50cGxbJ3NlYXJjaC9jaGVja2JveC5odG1sJ10gPSAnIDwlICQuZWFjaChvcHRpb25zLCBmdW5jdGlvbihrZXksIG9wdGlvbikgeyAlPiA8ZGl2IGNsYXNzPVwiZm9ybS1jaGVja1wiPiA8bGFiZWwgY2xhc3M9XCJmb3JtLWNoZWNrLWxhYmVsXCI+IDxpbnB1dCBjbGFzcz1cImZvcm0tY2hlY2staW5wdXRcIiB0eXBlPVwiY2hlY2tib3hcIiBuYW1lPVwiPCU9IGZpZWxkICU+XCIgdmFsdWU9XCI8JS0gb3B0aW9uLnZhbHVlICU+XCIgPCU9IG9wdGlvbi5jaGVja2VkID8gXFwnIGNoZWNrZWRcXCcgOiBcXCdcXCcgJT4+IDwlPSBvcHRpb24udGV4dCAlPiA8L2xhYmVsPiA8L2Rpdj4gPCUgfSk7ICU+J1xudHBsWydzZWFyY2gvZGF0ZS5odG1sJ10gPSAnIDxpbnB1dCB0eXBlPVwiZGF0ZVwiIDwlLSBhdHRyICU+PidcbnRwbFsnc2VhcmNoL2RhdGV0aW1lLmh0bWwnXSA9ICcgPGlucHV0IHR5cGU9XCJkYXRldGltZS1sb2NhbFwiIDwlLSBhdHRyICU+PidcbnRwbFsnc2VhcmNoL2RhdGV0aW1lX3JhbmdlLmh0bWwnXSA9ICcgPGlucHV0IHR5cGU9XCJkYXRldGltZS1sb2NhbFwiIDwlLSBzdGFydEF0dHIgJT4+IDxpbnB1dCB0eXBlPVwiZGF0ZXRpbWUtbG9jYWxcIiA8JS0gZW5kQXR0ciAlPj4nXG50cGxbJ3NlYXJjaC9kYXRlX21vbnRoLmh0bWwnXSA9ICcgPGlucHV0IHR5cGU9XCJtb250aFwiIDwlLSBhdHRyICU+PidcbnRwbFsnc2VhcmNoL2RhdGVfcmFuZ2UuaHRtbCddID0gJyA8aW5wdXQgdHlwZT1cImRhdGVcIiA8JS0gc3RhcnRBdHRyICU+PiA8aW5wdXQgdHlwZT1cImRhdGVcIiA8JS0gZW5kQXR0ciAlPj4nXG50cGxbJ3NlYXJjaC9udW1iZXIuaHRtbCddID0gJyA8aW5wdXQgdHlwZT1cIm51bWJlclwiIDwlLSBzdGFydEF0dHIgJT4+IDxpbnB1dCB0eXBlPVwibnVtYmVyXCIgPCUtIGVuZEF0dHIgJT4+J1xudHBsWydzZWFyY2gvcmFkaW8uaHRtbCddID0gJzxkaXYgY2xhc3M9XCJmb3JtLWNoZWNrXCI+IDxsYWJlbCBjbGFzcz1cImZvcm0tY2hlY2stbGFiZWxcIj4gPGlucHV0IGNsYXNzPVwiZm9ybS1jaGVjay1pbnB1dFwiIHR5cGU9XCJyYWRpb1wiIG5hbWU9XCI8JT0gZmllbGQgJT5cIiB2YWx1ZT1cIlwiPCU9IGNoZWNrZWRBbGwgPyBcXCcgY2hlY2tlZFxcJyA6IFxcJ1xcJyAlPj4gPCU9IGxhbmcuYWxsICU+IDwvbGFiZWw+IDwvZGl2PiA8JSAkLmVhY2gob3B0aW9ucywgZnVuY3Rpb24oa2V5LCBvcHRpb24pIHsgJT4gPGRpdiBjbGFzcz1cImZvcm0tY2hlY2tcIj4gPGxhYmVsIGNsYXNzPVwiZm9ybS1jaGVjay1sYWJlbFwiPiA8aW5wdXQgY2xhc3M9XCJmb3JtLWNoZWNrLWlucHV0XCIgdHlwZT1cInJhZGlvXCIgbmFtZT1cIjwlPSBmaWVsZCAlPlwiIHZhbHVlPVwiPCUtIG9wdGlvbi52YWx1ZSAlPlwiIDwlPSBvcHRpb24uY2hlY2tlZCA/IFxcJyBjaGVja2VkXFwnIDogXFwnXFwnICU+PiA8JT0gb3B0aW9uLnRleHQgJT4gPC9sYWJlbD4gPC9kaXY+IDwlIH0pOyAlPidcbnRwbFsnc2VhcmNoL3NlbGVjdC5odG1sJ10gPSAnIDxzZWxlY3QgPCUtIGF0dHIgJT4+IDxvcHRpb24+LS08L29wdGlvbj4gPCUgJC5lYWNoKG9wdGlvbnMsIGZ1bmN0aW9uKGtleSwgb3B0aW9uKSB7ICU+IDwlIGlmIChvcHRpb24udHlwZSA9PT0gXFwnZ3JvdXBcXCcpIHsgJT4gPG9wdGdyb3VwPCUtIG9wdGlvbi5hdHRyICU+Lz4gPCUgJC5lYWNoKG9wdGlvbi5vcHRpb25zLCBmdW5jdGlvbihrZXksIGdyb3VwT3B0aW9uKSB7ICU+IDxvcHRpb24gPCUtIGdyb3VwT3B0aW9uLmF0dHIgJT4vPjwlPSBncm91cE9wdGlvbi50ZXh0ICU+PC9vcHRpb24+IDwlIH0pOyAlPiA8L29wdGdyb3VwPiA8JSB9IGVsc2UgeyAlPiA8b3B0aW9uIDwlLSBvcHRpb24uYXR0ciAlPi8+PCU9IG9wdGlvbi50ZXh0ICU+PC9vcHRpb24+IDwlIH0gJT4gPCUgfSk7ICU+IDwvc2VsZWN0PidcbnRwbFsnc2VhcmNoL3N3aXRjaC5odG1sJ10gPSAnPGRpdiBjbGFzcz1cImZvcm0tY2hlY2sgZm9ybS1zd2l0Y2ggcHQtMlwiPiA8aW5wdXQgY2xhc3M9XCJmb3JtLWNoZWNrLWlucHV0XCIgdHlwZT1cImNoZWNrYm94XCIgaWQ9XCI8JT0gKGZpZWxkICsgaWQpICU+XCIgbmFtZT1cIjwlPSBmaWVsZCAlPlwiIHZhbHVlPVwiPCU9IHZhbHVlWSAlPlwiIDwlPSBjaGVja2VkID8gXFwnIGNoZWNrZWRcXCcgOiBcXCdcXCcgJT4+IDwvZGl2PidcbnRwbFsnc2VhcmNoL3RleHQuaHRtbCddID0gJyA8aW5wdXQgdHlwZT1cInRleHRcIiA8JS0gYXR0ciAlPj4nO1xuZXhwb3J0IGRlZmF1bHQgdHBsOyIsIlxyXG5sZXQgY29yZXVpVGFibGVVdGlscyA9IHtcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQntCx0YrQtdC00LjQvdC10L3QuNC1INCw0YLRgNC40LHRg9GC0L7QslxyXG4gICAgICogQHBhcmFtIGF0dHIxXHJcbiAgICAgKiBAcGFyYW0gYXR0cjJcclxuICAgICAqIEByZXR1cm5zIHtvYmplY3R9XHJcbiAgICAgKi9cclxuICAgIG1lcmdlQXR0cjogZnVuY3Rpb24gKGF0dHIxLCBhdHRyMikge1xyXG5cclxuICAgICAgICBsZXQgbWVyZ2VBdHRyID0gT2JqZWN0LmFzc2lnbih7fSwgYXR0cjEpO1xyXG5cclxuICAgICAgICBpZiAodHlwZW9mIGF0dHIyID09PSAnb2JqZWN0Jykge1xyXG4gICAgICAgICAgICAkLmVhY2goYXR0cjIsIGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKG1lcmdlQXR0ci5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChuYW1lID09PSAnY2xhc3MnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lcmdlQXR0cltuYW1lXSArPSAnICcgKyB2YWx1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChuYW1lID09PSAnc3R5bGUnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lcmdlQXR0cltuYW1lXSArPSAnOycgKyB2YWx1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWVyZ2VBdHRyW25hbWVdID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbWVyZ2VBdHRyW25hbWVdID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIG1lcmdlQXR0cjtcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/RgNC+0LLQtdGA0LrQsCDQvdCwINGH0LjRgdC70L5cclxuICAgICAqIEBwYXJhbSBudW1cclxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgaXNOdW1lcmljOiBmdW5jdGlvbihudW0pIHtcclxuICAgICAgICByZXR1cm4gKHR5cGVvZihudW0pID09PSAnbnVtYmVyJyB8fCB0eXBlb2YobnVtKSA9PT0gXCJzdHJpbmdcIiAmJiBudW0udHJpbSgpICE9PSAnJykgJiYgISBpc05hTihudW0pO1xyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgaGFzaENvZGU6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNyYzMyKChuZXcgRGF0ZSgpLmdldFRpbWUoKSArIE1hdGgucmFuZG9tKCkpLnRvU3RyaW5nKCkpLnRvU3RyaW5nKDE2KTtcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/RgNC+0LLQtdGA0LrQsCDQvdCwINC+0LHRitC10LrRglxyXG4gICAgICogQHBhcmFtIHZhbHVlXHJcbiAgICAgKi9cclxuICAgIGlzT2JqZWN0OiBmdW5jdGlvbiAodmFsdWUpIHtcclxuXHJcbiAgICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiZcclxuICAgICAgICAgICAgISBBcnJheS5pc0FycmF5KHZhbHVlKSAmJlxyXG4gICAgICAgICAgICB2YWx1ZSAhPT0gbnVsbDtcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHN0clxyXG4gICAgICogQHJldHVybnMge251bWJlcn1cclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIGNyYzMyOiBmdW5jdGlvbiAoc3RyKSB7XHJcblxyXG4gICAgICAgIGZvciAodmFyIGEsIG8gPSBbXSwgYyA9IDA7IGMgPCAyNTY7IGMrKykge1xyXG4gICAgICAgICAgICBhID0gYztcclxuICAgICAgICAgICAgZm9yICh2YXIgZiA9IDA7IGYgPCA4OyBmKyspIHtcclxuICAgICAgICAgICAgICAgIGEgPSAxICYgYSA/IDM5ODgyOTIzODQgXiBhID4+PiAxIDogYSA+Pj4gMVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG9bY10gPSBhXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmb3IgKHZhciBuID0gLTEsIHQgPSAwOyB0IDwgc3RyLmxlbmd0aDsgdCsrKSB7XHJcbiAgICAgICAgICAgIG4gPSBuID4+PiA4IF4gb1syNTUgJiAobiBeIHN0ci5jaGFyQ29kZUF0KHQpKV1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiAoLTEgXiBuKSA+Pj4gMDtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNvcmV1aVRhYmxlVXRpbHM7IiwiXHJcblxyXG5pbXBvcnQgJy4uLy4uL25vZGVfbW9kdWxlcy9lanMvZWpzLm1pbic7XHJcbmltcG9ydCBjb3JldWlUYWJsZVRwbCAgIGZyb20gJy4vY29yZXVpLnRhYmxlLnRlbXBsYXRlcyc7XHJcbmltcG9ydCBjb3JldWlUYWJsZVV0aWxzIGZyb20gXCIuL2NvcmV1aS50YWJsZS51dGlsc1wiO1xyXG5cclxuXHJcbmxldCBjb3JldWlUYWJsZVJlbmRlciA9IHtcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQodCx0L7RgNC60LAg0YLQsNCx0LvQuNGG0YtcclxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSB0YWJsZVxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgcmVuZGVyVGFibGU6IGZ1bmN0aW9uICh0YWJsZSkge1xyXG5cclxuICAgICAgICBsZXQgb3B0aW9ucyAgICAgICAgICAgID0gdGFibGUuZ2V0T3B0aW9ucygpO1xyXG4gICAgICAgIGxldCByZWNvcmRzRWxlbWVudHMgICAgPSBbXTtcclxuICAgICAgICBsZXQgY29sdW1uR3JvdXBzSGVhZGVyID0gJyc7XHJcbiAgICAgICAgbGV0IGNvbHVtbkdyb3Vwc0Zvb3RlciA9ICcnO1xyXG4gICAgICAgIGxldCBjb2xHcm91cHMgICAgICAgICAgPSBbXTtcclxuICAgICAgICBsZXQgY29sdW1ucyAgICAgICAgICAgID0gW107XHJcblxyXG4gICAgICAgIC8vINCa0L7Qu9C+0L3QutC4XHJcbiAgICAgICAgaWYgKHRhYmxlLl9jb2x1bW5zLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgJC5lYWNoKHRhYmxlLl9jb2x1bW5zLCBmdW5jdGlvbiAoa2V5LCBjb2x1bW4pIHtcclxuICAgICAgICAgICAgICAgIGlmICggISBjb2x1bW4uaXNTaG93KCkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgbGV0IGNvbHVtbk9wdGlvbnMgPSBjb2x1bW4uZ2V0T3B0aW9ucygpO1xyXG4gICAgICAgICAgICAgICAgbGV0IGF0dHJpYnV0ZXMgICAgPSBbXTtcclxuICAgICAgICAgICAgICAgIGxldCBzb3J0YWJsZSAgICAgID0gbnVsbDtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY29sdW1uT3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnZmllbGQnKSAmJiB0eXBlb2YgY29sdW1uT3B0aW9ucy5maWVsZCA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb2x1bW5PcHRpb25zLmF0dHJIZWFkZXIgPSBjb3JldWlUYWJsZVV0aWxzLm1lcmdlQXR0cihjb2x1bW5PcHRpb25zLmF0dHJIZWFkZXIsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCJkYXRhLWZpZWxkXCI6IGNvbHVtbk9wdGlvbnMuZmllbGRcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY29sdW1uT3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnZml4ZWQnKSAmJiB0eXBlb2YgY29sdW1uT3B0aW9ucy5maXhlZCA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb2x1bW5PcHRpb25zLmF0dHJIZWFkZXIgPSBjb3JldWlUYWJsZVV0aWxzLm1lcmdlQXR0cihjb2x1bW5PcHRpb25zLmF0dHJIZWFkZXIsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M6ICdjb3JldWktdGFibGVfX2ZpeGVkXycgKyBjb2x1bW5PcHRpb25zLmZpeGVkXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGNvbHVtbk9wdGlvbnMuYXR0ciA9IGNvcmV1aVRhYmxlVXRpbHMubWVyZ2VBdHRyKGNvbHVtbk9wdGlvbnMuYXR0ciwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzczogJ2NvcmV1aS10YWJsZV9fZml4ZWRfJyArIGNvbHVtbk9wdGlvbnMuZml4ZWRcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY29sdW1uT3B0aW9ucy50eXBlICE9PSAnbnVtYmVycycpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY29sdW1uT3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnc29ydGFibGUnKSAmJiBjb2x1bW5PcHRpb25zLnNvcnRhYmxlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbHVtbk9wdGlvbnMuYXR0ckhlYWRlciA9IGNvcmV1aVRhYmxlVXRpbHMubWVyZ2VBdHRyKGNvbHVtbk9wdGlvbnMuYXR0ckhlYWRlciwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M6ICdjb3JldWktdGFibGVfX3NvcnRhYmxlJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWJsZS5fc29ydC5sZW5ndGggPiAwICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbHVtbk9wdGlvbnMuaGFzT3duUHJvcGVydHkoJ2ZpZWxkJykgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGNvbHVtbk9wdGlvbnMuZmllbGQgPT09ICdzdHJpbmcnICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbHVtbk9wdGlvbnMuZmllbGRcclxuICAgICAgICAgICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJC5lYWNoKHRhYmxlLl9zb3J0LCBmdW5jdGlvbiAoa2V5LCBzb3J0RmllbGQpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29sdW1uT3B0aW9ucy5maWVsZCA9PT0gc29ydEZpZWxkLmZpZWxkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNvcnRGaWVsZC5vcmRlciA9PT0gJ2FzYycpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc29ydGFibGUgPSAnYXNjJztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzb3J0RmllbGQub3JkZXIgPT09ICdkZXNjJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3J0YWJsZSA9ICdkZXNjJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChjb2x1bW5PcHRpb25zLmF0dHJIZWFkZXIgJiYgY29yZXVpVGFibGVVdGlscy5pc09iamVjdChjb2x1bW5PcHRpb25zLmF0dHJIZWFkZXIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJC5lYWNoKGNvbHVtbk9wdGlvbnMuYXR0ckhlYWRlciwgZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXMucHVzaChuYW1lICsgJz1cIicgKyB2YWx1ZSArICdcIicpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgc3R5bGUgPSBbXTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY29sdW1uT3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnd2lkdGgnKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgIFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIGNvbHVtbk9wdGlvbnMud2lkdGgpID49IDBcclxuICAgICAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCB1bml0ID0gdHlwZW9mIGNvbHVtbk9wdGlvbnMud2lkdGggPT09ICdudW1iZXInID8gJ3B4JyA6ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlLnB1c2goJ3dpZHRoOicgKyBjb2x1bW5PcHRpb25zLndpZHRoICsgdW5pdCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoY29sdW1uT3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnbWluV2lkdGgnKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgIFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIGNvbHVtbk9wdGlvbnMubWluV2lkdGgpID49IDBcclxuICAgICAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCB1bml0ID0gdHlwZW9mIGNvbHVtbk9wdGlvbnMubWluV2lkdGggPT09ICdudW1iZXInID8gJ3B4JyA6ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlLnB1c2goJ21pbi13aWR0aDonICsgY29sdW1uT3B0aW9ucy5taW5XaWR0aCArIHVuaXQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGNvbHVtbk9wdGlvbnMuaGFzT3duUHJvcGVydHkoJ21heFdpZHRoJykgJiZcclxuICAgICAgICAgICAgICAgICAgICBbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiBjb2x1bW5PcHRpb25zLm1heFdpZHRoKSA+PSAwXHJcbiAgICAgICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgdW5pdCA9IHR5cGVvZiBjb2x1bW5PcHRpb25zLm1heFdpZHRoID09PSAnbnVtYmVyJyA/ICdweCcgOiAnJztcclxuICAgICAgICAgICAgICAgICAgICBzdHlsZS5wdXNoKCdtYXgtd2lkdGg6JyArIGNvbHVtbk9wdGlvbnMubWF4V2lkdGggKyB1bml0KTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBjb2xHcm91cHMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHN0eWxlLmxlbmd0aCA+IDAgPyBzdHlsZS5qb2luKCc7JykgOiAnJ1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgY29sdW1ucy5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICBhdHRyOiBhdHRyaWJ1dGVzLmxlbmd0aCA+IDAgPyAoJyAnICsgYXR0cmlidXRlcy5qb2luKCcgJykpIDogJycsXHJcbiAgICAgICAgICAgICAgICAgICAgbGFiZWw6IGNvbHVtbk9wdGlvbnMuaGFzT3duUHJvcGVydHkoJ2xhYmVsJykgPyBjb2x1bW5PcHRpb25zLmxhYmVsIDogXCJcIixcclxuICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogY29sdW1uT3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnZGVzY3JpcHRpb24nKSA/IGNvbHVtbk9wdGlvbnMuZGVzY3JpcHRpb24gOiAnJyxcclxuICAgICAgICAgICAgICAgICAgICBzb3J0YWJsZTogc29ydGFibGVcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICAvLyDQodGC0YDQvtC60LhcclxuICAgICAgICBpZiAoICEgdGFibGUuX2lzUmVjb3Jkc1JlcXVlc3QpIHtcclxuXHJcbiAgICAgICAgICAgIGlmICh0YWJsZS5fcmVjb3Jkcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICB0YWJsZS5fcmVjb3Jkc1RvdGFsICA9IHRhYmxlLmdldFJlY29yZHNDb3VudCgpO1xyXG4gICAgICAgICAgICAgICAgdGFibGUuX3JlY29yZHNOdW1iZXIgPSB0YWJsZS5fcGFnZSA9PT0gMVxyXG4gICAgICAgICAgICAgICAgICAgID8gMVxyXG4gICAgICAgICAgICAgICAgICAgIDogKCh0YWJsZS5fcGFnZSAtIDEpICogdGFibGUuX3JlY29yZHNQZXJQYWdlKSArIDE7XHJcblxyXG4gICAgICAgICAgICAgICAgcmVjb3Jkc0VsZW1lbnRzID0gY29yZXVpVGFibGVSZW5kZXIucmVuZGVyUmVjb3Jkcyh0YWJsZSwgdGFibGUuX3JlY29yZHMpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmVjb3Jkc0VsZW1lbnRzID0gY29yZXVpVGFibGVSZW5kZXIucmVuZGVyUmVjb3Jkcyh0YWJsZSwgW10pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgaWYgKG9wdGlvbnMuaGFzT3duUHJvcGVydHkoJ2NvbHVtbkdyb3Vwc0hlYWRlcicpICYmXHJcbiAgICAgICAgICAgIEFycmF5LmlzQXJyYXkob3B0aW9ucy5jb2x1bW5Hcm91cHNIZWFkZXIpICYmXHJcbiAgICAgICAgICAgIG9wdGlvbnMuY29sdW1uR3JvdXBzSGVhZGVyLmxlbmd0aCA+IDBcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgbGV0IHJvd3MgPSBbXTtcclxuXHJcbiAgICAgICAgICAgICQuZWFjaChvcHRpb25zLmNvbHVtbkdyb3Vwc0hlYWRlciwgZnVuY3Rpb24gKGtleSwgaGVhZGVyUm93KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShoZWFkZXJSb3cpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNlbGxzID0gW107XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICQuZWFjaChoZWFkZXJSb3csIGZ1bmN0aW9uIChrZXksIGhlYWRlckNvbHVtbikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29yZXVpVGFibGVVdGlscy5pc09iamVjdChoZWFkZXJDb2x1bW4pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgYXR0cmlidXRlcyA9IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChoZWFkZXJDb2x1bW4uaGFzT3duUHJvcGVydHkoJ2F0dHInKSAmJiBjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KGhlYWRlckNvbHVtbi5hdHRyKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQuZWFjaChoZWFkZXJDb2x1bW4uYXR0ciwgZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXMucHVzaChuYW1lICsgJz1cIicgKyB2YWx1ZSArICdcIicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlbGxzLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IGhlYWRlckNvbHVtbi5oYXNPd25Qcm9wZXJ0eSgnY29udGVudCcpID8gaGVhZGVyQ29sdW1uLmNvbnRlbnQgOiAnJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogaGVhZGVyQ29sdW1uLmhhc093blByb3BlcnR5KCdkZXNjcmlwdGlvbicpID8gaGVhZGVyQ29sdW1uLmRlc2NyaXB0aW9uIDogJycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cjogYXR0cmlidXRlcy5sZW5ndGggPiAwID8gJyAnICsgYXR0cmlidXRlcy5qb2luKCcgJykgOiAnJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJvd3MucHVzaChcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWpzLnJlbmRlcihjb3JldWlUYWJsZVRwbFsndGFibGUtY29sdW1ucy1oZWFkZXIuaHRtbCddLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2x1bW5zOiBjZWxscyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIGNvbHVtbkdyb3Vwc0hlYWRlciA9IHJvd3Muam9pbignJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAob3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnY29sdW1uR3JvdXBzRm9vdGVyJykgJiZcclxuICAgICAgICAgICAgQXJyYXkuaXNBcnJheShvcHRpb25zLmNvbHVtbkdyb3Vwc0Zvb3RlcikgJiZcclxuICAgICAgICAgICAgb3B0aW9ucy5jb2x1bW5Hcm91cHNGb290ZXIubGVuZ3RoID4gMFxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICBsZXQgcm93cyA9IFtdO1xyXG5cclxuICAgICAgICAgICAgJC5lYWNoKG9wdGlvbnMuY29sdW1uR3JvdXBzRm9vdGVyLCBmdW5jdGlvbiAoa2V5LCBmb290ZXJSb3cpIHtcclxuICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGZvb3RlclJvdykpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgY2VsbHMgPSBbXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgJC5lYWNoKGZvb3RlclJvdywgZnVuY3Rpb24gKGtleSwgZm9vdGVyQ29sdW1uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KGZvb3RlckNvbHVtbikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBhdHRyaWJ1dGVzID0gW107XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZvb3RlckNvbHVtbi5oYXNPd25Qcm9wZXJ0eSgnYXR0cicpICYmIGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QoZm9vdGVyQ29sdW1uLmF0dHIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJC5lYWNoKGZvb3RlckNvbHVtbi5hdHRyLCBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlcy5wdXNoKG5hbWUgKyAnPVwiJyArIHZhbHVlICsgJ1wiJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2VsbHMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudDogZm9vdGVyQ29sdW1uLmhhc093blByb3BlcnR5KCdjb250ZW50JykgPyBmb290ZXJDb2x1bW4uY29udGVudCA6ICcnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBmb290ZXJDb2x1bW4uaGFzT3duUHJvcGVydHkoJ2Rlc2NyaXB0aW9uJykgPyBmb290ZXJDb2x1bW4uZGVzY3JpcHRpb24gOiAnJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyOiBhdHRyaWJ1dGVzLmxlbmd0aCA+IDAgPyAnICcgKyBhdHRyaWJ1dGVzLmpvaW4oJyAnKSA6ICcnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcm93cy5wdXNoKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlanMucmVuZGVyKGNvcmV1aVRhYmxlVHBsWyd0YWJsZS1jb2x1bW5zLWZvb3Rlci5odG1sJ10sIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbHVtbnM6IGNlbGxzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgY29sdW1uR3JvdXBzRm9vdGVyID0gcm93cy5qb2luKCcnKTtcclxuICAgICAgICB9XHJcblxyXG5cclxuXHJcbiAgICAgICAgbGV0IGNsYXNzZXMgPSBbXTtcclxuXHJcbiAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zLmNsYXNzID09PSAnc3RyaW5nJyAmJiBvcHRpb25zLmNsYXNzKSB7XHJcbiAgICAgICAgICAgIGNsYXNzZXMucHVzaChvcHRpb25zLmNsYXNzKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICggISBjb2x1bW5Hcm91cHNGb290ZXIpIHtcclxuICAgICAgICAgICAgY2xhc3Nlcy5wdXNoKCdlbXB0eS10Zm9vdCcpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IGh0bWxDb2x1bW5zID0gZWpzLnJlbmRlcihjb3JldWlUYWJsZVRwbFsndGFibGUtY29sdW1ucy5odG1sJ10sIHtcclxuICAgICAgICAgICAgY29sdW1uczogY29sdW1ucyxcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgbGV0IHRoZWFkQXR0ciA9IFtdO1xyXG5cclxuICAgICAgICBpZiAob3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgndGhlYWRUb3AnKSAmJlxyXG4gICAgICAgICAgICBbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiBvcHRpb25zLnRoZWFkVG9wKSA+PSAwICYmXHJcbiAgICAgICAgICAgIG9wdGlvbnMudGhlYWRUb3AgPiAwXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIGxldCB1bml0ID0gY29yZXVpVGFibGVVdGlscy5pc051bWVyaWMob3B0aW9ucy50aGVhZFRvcCkgPyAncHgnIDogJyc7XHJcbiAgICAgICAgICAgIHRoZWFkQXR0ci5wdXNoKCdzdHlsZT1cInRvcDonICsgb3B0aW9ucy50aGVhZFRvcCArIHVuaXQgKyAnXCInKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCB0YWJsZUVsZW1lbnQgPSAkKFxyXG4gICAgICAgICAgICBlanMucmVuZGVyKGNvcmV1aVRhYmxlVHBsWyd0YWJsZS5odG1sJ10sIHtcclxuICAgICAgICAgICAgICAgIGNsYXNzZXM6IGNsYXNzZXMuam9pbignICcpLFxyXG4gICAgICAgICAgICAgICAgdGhlYWRBdHRyOiB0aGVhZEF0dHIubGVuZ3RoID4gMCA/IHRoZWFkQXR0ci5qb2luKCcgJykgOiAnJyxcclxuICAgICAgICAgICAgICAgIGNvbHVtbkhlYWRlcnM6IG9wdGlvbnMuY29sdW1uSGVhZGVycyxcclxuICAgICAgICAgICAgICAgIGNvbHVtbkdyb3Vwc0hlYWRlciA6IGNvbHVtbkdyb3Vwc0hlYWRlcixcclxuICAgICAgICAgICAgICAgIGNvbEdyb3VwcyA6IGNvbEdyb3VwcyxcclxuICAgICAgICAgICAgICAgIGNvbHVtbnMgOiBodG1sQ29sdW1ucyxcclxuICAgICAgICAgICAgICAgIGNvbHVtbkdyb3Vwc0Zvb3RlciA6IGNvbHVtbkdyb3Vwc0Zvb3RlcixcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICApO1xyXG5cclxuXHJcbiAgICAgICAgbGV0IHRib2R5ID0gdGFibGVFbGVtZW50LmZpbmQoJ3Rib2R5Jyk7XHJcblxyXG4gICAgICAgICQuZWFjaChyZWNvcmRzRWxlbWVudHMsIGZ1bmN0aW9uIChrZXksIHJlY29yZEVsZW1lbnQpIHtcclxuICAgICAgICAgICAgdGJvZHkuYXBwZW5kKHJlY29yZEVsZW1lbnQpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gdGFibGVFbGVtZW50XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCh0LHQvtGA0LrQsCDQt9Cw0L/QuNGB0LXQuSDRgtCw0LHQu9C40YbRi1xyXG4gICAgICogQHBhcmFtIHtvYmplY3R9IHRhYmxlXHJcbiAgICAgKiBAcGFyYW0ge0FycmF5fSAgcmVjb3Jkc1xyXG4gICAgICogQHJldHVybiB7QXJyYXl9XHJcbiAgICAgKi9cclxuICAgIHJlbmRlclJlY29yZHM6IGZ1bmN0aW9uICh0YWJsZSwgcmVjb3Jkcykge1xyXG5cclxuICAgICAgICBsZXQgcmVuZGVyUmVjb3JkcyA9IFtdO1xyXG5cclxuICAgICAgICBpZiAocmVjb3Jkcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIGxldCB0aGF0ICAgID0gdGhpcztcclxuICAgICAgICAgICAgbGV0IG9wdGlvbnMgPSB0YWJsZS5nZXRPcHRpb25zKCk7XHJcbiAgICAgICAgICAgIGxldCBncm91cCAgID0gb3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnZ3JvdXAnKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3Qob3B0aW9ucy5ncm91cCkgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zLmdyb3VwLmhhc093blByb3BlcnR5KCdmaWVsZCcpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIG9wdGlvbnMuZ3JvdXAuZmllbGQgPT09ICdzdHJpbmcnICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5ncm91cC5maWVsZFxyXG4gICAgICAgICAgICAgICAgPyBvcHRpb25zLmdyb3VwXHJcbiAgICAgICAgICAgICAgICA6IG51bGw7XHJcbiAgICAgICAgICAgIGxldCBncm91cFZhbHVlID0gbnVsbDtcclxuXHJcbiAgICAgICAgICAgICQuZWFjaChyZWNvcmRzLCBmdW5jdGlvbiAoa2V5LCByZWNvcmQpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAocmVjb3JkLnNob3cpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZ3JvdXAgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVjb3JkLmRhdGEuaGFzT3duUHJvcGVydHkoZ3JvdXAuZmllbGQpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIHJlY29yZC5kYXRhW2dyb3VwLmZpZWxkXSkgPj0gMCAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBncm91cFZhbHVlICE9IHJlY29yZC5kYXRhW2dyb3VwLmZpZWxkXVxyXG4gICAgICAgICAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBncm91cFZhbHVlID0gcmVjb3JkLmRhdGFbZ3JvdXAuZmllbGRdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZW5kZXJSZWNvcmRzLnB1c2godGhhdC5yZW5kZXJHcm91cCh0YWJsZSwgZ3JvdXAsIHJlY29yZCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmVuZGVyUmVjb3Jkcy5wdXNoKHRoYXQucmVuZGVyUmVjb3JkKHRhYmxlLCByZWNvcmQpKTtcclxuICAgICAgICAgICAgICAgICAgICB0YWJsZS5fcmVjb3Jkc051bWJlcisrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChyZW5kZXJSZWNvcmRzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICByZW5kZXJSZWNvcmRzID0gW1xyXG4gICAgICAgICAgICAgICAgJChcclxuICAgICAgICAgICAgICAgICAgICBlanMucmVuZGVyKGNvcmV1aVRhYmxlVHBsWyd0YWJsZS1yZWNvcmRzLWVtcHR5Lmh0bWwnXSwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2x1bW5zQ291bnQ6IHRhYmxlLl9jb3VudENvbHVtbnNTaG93LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsYW5nOiB0YWJsZS5nZXRMYW5nKCksXHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgXTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiByZW5kZXJSZWNvcmRzO1xyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQodCx0L7RgNC60LAg0LfQsNC/0LjRgdC4INGC0LDQsdC70LjRhtGLXHJcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gdGFibGVcclxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSByZWNvcmRcclxuICAgICAqIEByZXR1cm5zIHt7IGF0dHI6IChzdHJpbmcpLCBmaWVsZHM6IChvYmplY3QpIH19fVxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgcmVuZGVyUmVjb3JkOiBmdW5jdGlvbiAodGFibGUsIHJlY29yZCkge1xyXG5cclxuICAgICAgICBsZXQgdGhhdCAgICAgICA9IHRoaXM7XHJcbiAgICAgICAgbGV0IG9wdGlvbnMgICAgPSB0YWJsZS5nZXRPcHRpb25zKCk7XHJcbiAgICAgICAgbGV0IGZpZWxkcyAgICAgPSBbXTtcclxuICAgICAgICBsZXQgcmVjb3JkQXR0ciA9IHtcclxuICAgICAgICAgICAgY2xhc3M6ICdjb3JldWktdGFibGVfX3JlY29yZCdcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICByZWNvcmQgPSAkLmV4dGVuZCh0cnVlLCB7fSwgcmVjb3JkKTtcclxuXHJcbiAgICAgICAgJC5lYWNoKHRhYmxlLl9jb2x1bW5zLCBmdW5jdGlvbiAoa2V5LCBjb2x1bW4pIHtcclxuICAgICAgICAgICAgaWYgKCAhIGNvbHVtbi5pc1Nob3coKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBsZXQgZmllbGQgPSB0aGF0LnJlbmRlckZpZWxkKHRhYmxlLCBjb2x1bW4sIHJlY29yZCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoZmllbGQpIHtcclxuICAgICAgICAgICAgICAgIGZpZWxkcy5wdXNoKGZpZWxkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMub25DbGlja1VybCA9PT0gJ3N0cmluZycgJiYgb3B0aW9ucy5vbkNsaWNrVXJsKSB7XHJcbiAgICAgICAgICAgIHJlY29yZEF0dHIuY2xhc3MgKz0gJyBjb3JldWktdGFibGVfcG9pbnRlcic7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAocmVjb3JkLm1ldGEpIHtcclxuICAgICAgICAgICAgcmVjb3JkQXR0ciA9IGNvcmV1aVRhYmxlVXRpbHMubWVyZ2VBdHRyKHJlY29yZEF0dHIsIHJlY29yZC5tZXRhLmF0dHIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IGF0dHJpYnV0ZXMgPSBbXTtcclxuXHJcbiAgICAgICAgJC5lYWNoKHJlY29yZEF0dHIsIGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xyXG4gICAgICAgICAgICBhdHRyaWJ1dGVzLnB1c2gobmFtZSArICc9XCInICsgdmFsdWUgKyAnXCInKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgbGV0IHJlY29yZEVsZW1lbnQgPSAkKFxyXG4gICAgICAgICAgICBlanMucmVuZGVyKGNvcmV1aVRhYmxlVHBsWyd0YWJsZS1yZWNvcmQuaHRtbCddLCB7XHJcbiAgICAgICAgICAgICAgICByZWNvcmQ6IHtcclxuICAgICAgICAgICAgICAgICAgICBhdHRyOiBhdHRyaWJ1dGVzLmxlbmd0aCA+IDAgPyAoJyAnICsgYXR0cmlidXRlcy5qb2luKCcgJykpIDogJycsXHJcbiAgICAgICAgICAgICAgICAgICAgaW5kZXg6IHJlY29yZC5pbmRleCxcclxuICAgICAgICAgICAgICAgICAgICBmaWVsZHM6IGZpZWxkcyxcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSlcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICAkLmVhY2goZmllbGRzLCBmdW5jdGlvbiAoa2V5LCBmaWVsZCkge1xyXG4gICAgICAgICAgICByZWNvcmRFbGVtZW50LmZpbmQoJyA+IHRkOmVxKCcgKyBrZXkgKyAnKScpLmh0bWwoZmllbGQuY29udGVudClcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHJlY29yZEVsZW1lbnQ7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCh0LHQvtGA0LrQsCDRj9GH0LXQudC60Lgg0YLQsNCx0LvQuNGG0YtcclxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSB0YWJsZVxyXG4gICAgICogQHBhcmFtIHtvYmplY3R9IGNvbHVtblxyXG4gICAgICogQHBhcmFtIHtvYmplY3R9IHJlY29yZFxyXG4gICAgICogQHJldHVybnMge3sgYXR0cjogKHN0cmluZyksIGNvbnRlbnQ6IChzdHJpbmcpIH19XHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICByZW5kZXJGaWVsZDogZnVuY3Rpb24gKHRhYmxlLCBjb2x1bW4sIHJlY29yZCkge1xyXG5cclxuICAgICAgICBsZXQgY29sdW1uT3B0aW9ucyA9IGNvbHVtbi5nZXRPcHRpb25zKCk7XHJcbiAgICAgICAgbGV0IGNvbHVtbkZpZWxkICAgPSB0eXBlb2YgY29sdW1uT3B0aW9ucy5maWVsZCA9PT0gJ3N0cmluZycgPyBjb2x1bW5PcHRpb25zLmZpZWxkIDogbnVsbDtcclxuICAgICAgICBsZXQgY29udGVudCAgICAgICA9IG51bGw7XHJcbiAgICAgICAgbGV0IGZpZWxkUHJvcHMgICAgPSByZWNvcmQubWV0YSAmJiByZWNvcmQubWV0YS5oYXNPd25Qcm9wZXJ0eSgnZmllbGRzJykgJiYgcmVjb3JkLm1ldGEuZmllbGRzLmhhc093blByb3BlcnR5KGNvbHVtbkZpZWxkKVxyXG4gICAgICAgICAgICA/IHJlY29yZC5tZXRhLmZpZWxkc1tjb2x1bW5GaWVsZF1cclxuICAgICAgICAgICAgOiBudWxsO1xyXG4gICAgICAgIGxldCBmaWVsZEF0dHIgPSBjb2x1bW5PcHRpb25zLmhhc093blByb3BlcnR5KCdhdHRyJykgJiYgY29yZXVpVGFibGVVdGlscy5pc09iamVjdChjb2x1bW5PcHRpb25zLmF0dHIpXHJcbiAgICAgICAgICAgID8gY29sdW1uT3B0aW9ucy5hdHRyXHJcbiAgICAgICAgICAgIDoge307XHJcblxyXG4gICAgICAgIGlmIChmaWVsZFByb3BzICYmIGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QoZmllbGRQcm9wcykpIHtcclxuICAgICAgICAgICAgaWYgKGZpZWxkUHJvcHMgJiYgZmllbGRQcm9wcy5oYXNPd25Qcm9wZXJ0eSgnc2hvdycpICYmICEgZmllbGRQcm9wcy5zaG93KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QoZmllbGRQcm9wcy5hdHRyKSkge1xyXG4gICAgICAgICAgICAgICAgZmllbGRBdHRyID0gY29yZXVpVGFibGVVdGlscy5tZXJnZUF0dHIoZmllbGRBdHRyLCBmaWVsZFByb3BzLmF0dHIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoY29sdW1uT3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnZml4ZWQnKSAmJiB0eXBlb2YgY29sdW1uT3B0aW9ucy5maXhlZCA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgZmllbGRBdHRyID0gY29yZXVpVGFibGVVdGlscy5tZXJnZUF0dHIoZmllbGRBdHRyLCB7XHJcbiAgICAgICAgICAgICAgICBjbGFzczogJ2NvcmV1aS10YWJsZV9fZml4ZWRfJyArIGNvbHVtbk9wdGlvbnMuZml4ZWRcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodHlwZW9mIGNvbHVtbk9wdGlvbnMucmVuZGVyID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgIGNvbnRlbnQgPSBjb2x1bW5PcHRpb25zLnJlbmRlcih7XHJcbiAgICAgICAgICAgICAgICBkYXRhOiByZWNvcmQuZGF0YSxcclxuICAgICAgICAgICAgICAgIG1ldGE6IHJlY29yZC5tZXRhLFxyXG4gICAgICAgICAgICAgICAgaW5kZXg6IHJlY29yZC5pbmRleCxcclxuICAgICAgICAgICAgfSwgdGFibGUpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnRlbnQgPSBjb2x1bW5GaWVsZCAmJiByZWNvcmQuZGF0YS5oYXNPd25Qcm9wZXJ0eShjb2x1bW5GaWVsZClcclxuICAgICAgICAgICAgICAgID8gcmVjb3JkLmRhdGFbY29sdW1uRmllbGRdXHJcbiAgICAgICAgICAgICAgICA6IG51bGw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb250ZW50ID0gY29sdW1uLnJlbmRlcihjb250ZW50LCByZWNvcmQpO1xyXG5cclxuICAgICAgICBsZXQgZmllbGRBdHRyUmVzdWx0ID0gW107XHJcblxyXG4gICAgICAgICQuZWFjaChmaWVsZEF0dHIsIGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xyXG4gICAgICAgICAgICBmaWVsZEF0dHJSZXN1bHQucHVzaChuYW1lICsgJz1cIicgKyB2YWx1ZSArICdcIicpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBhdHRyOiAgICBmaWVsZEF0dHJSZXN1bHQubGVuZ3RoID4gMCA/ICgnICcgKyBmaWVsZEF0dHJSZXN1bHQuam9pbignICcpKSA6ICcnLFxyXG4gICAgICAgICAgICBjb250ZW50OiBjb250ZW50LFxyXG4gICAgICAgIH07XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCh0LHQvtGA0LrQsCDQt9Cw0L/QuNGB0Lgt0LPRgNGD0L/Qv9GLXHJcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gdGFibGVcclxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBncm91cFxyXG4gICAgICogQHBhcmFtIHtvYmplY3R9IHJlY29yZFxyXG4gICAgICogQHJldHVybnMge3sgYXR0cjogKHN0cmluZyksIGZpZWxkczogKG9iamVjdCkgfX19XHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICByZW5kZXJHcm91cDogZnVuY3Rpb24gKHRhYmxlLCBncm91cCwgcmVjb3JkKSB7XHJcblxyXG4gICAgICAgIGxldCBhdHRyID0gZ3JvdXAuaGFzT3duUHJvcGVydHkoJ2F0dHInKSAmJiBjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KGdyb3VwLmF0dHIpXHJcbiAgICAgICAgICAgID8gZ3JvdXAuYXR0clxyXG4gICAgICAgICAgICA6IHt9O1xyXG5cclxuICAgICAgICBpZiAoYXR0ci5oYXNPd25Qcm9wZXJ0eSgnY2xhc3MnKSAmJiB0eXBlb2YgYXR0ci5jbGFzcyA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgYXR0ci5jbGFzcyArPSAnIGNvcmV1aS10YWJsZV9fcmVjb3JkLWdyb3VwJztcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBhdHRyLmNsYXNzID0gJ2NvcmV1aS10YWJsZV9fcmVjb3JkLWdyb3VwJztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBhdHRyaWJ1dGVzID0gW107XHJcblxyXG4gICAgICAgICQuZWFjaChhdHRyLCBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXMucHVzaChuYW1lICsgJz1cIicgKyB2YWx1ZSArICdcIicpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGxldCByZWNvcmRFbGVtZW50ID0gJChcclxuICAgICAgICAgICAgZWpzLnJlbmRlcihjb3JldWlUYWJsZVRwbFsndGFibGUtcmVjb3JkLWdyb3VwLmh0bWwnXSwge1xyXG4gICAgICAgICAgICAgICAgYXR0cjogYXR0cmlidXRlcy5sZW5ndGggPiAwID8gKCcgJyArIGF0dHJpYnV0ZXMuam9pbignICcpKSA6ICcnLFxyXG4gICAgICAgICAgICAgICAgY29sc3BhbjogdGFibGUuX2NvdW50Q29sdW1uc1Nob3csXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgbGV0IGNvbnRlbnQgPSByZWNvcmQuZGF0YVtncm91cC5maWVsZF07XHJcblxyXG4gICAgICAgIGlmIChncm91cC5oYXNPd25Qcm9wZXJ0eSgncmVuZGVyJykgJiYgdHlwZW9mIGdyb3VwLnJlbmRlciA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICBsZXQgcmVuZGVyQ29udGVudCA9IGdyb3VwLnJlbmRlcihyZWNvcmQpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHJlbmRlckNvbnRlbnQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRlbnQgPSByZW5kZXJDb250ZW50O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZWNvcmRFbGVtZW50LmZpbmQoJyA+IHRkJykuaHRtbChjb250ZW50KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHJlY29yZEVsZW1lbnQ7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCh0LHQvtGA0LrQsCDRgNCw0YHQutGA0YvQstCw0Y7RidC10LnRgdGPINGB0YLRgNC+0LrQuFxyXG4gICAgICogQHBhcmFtIHtvYmplY3R9ICAgICAgIHRhYmxlXHJcbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gY29udGVudFxyXG4gICAgICovXHJcbiAgICByZW5kZXJFeHBhbmQ6IGZ1bmN0aW9uICh0YWJsZSwgY29udGVudCkge1xyXG5cclxuICAgICAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgICAgIGNvbnRlbnQgPSBjb3JldWlUYWJsZVJlbmRlci5yZW5kZXJDb21wb25lbnRzKHRhYmxlLCBjb250ZW50LCAncmVjb3JkX2V4cGFuZF9zaG93Jyk7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgbGV0IGV4cGFuZFJlY29yZCA9ICQoXHJcbiAgICAgICAgICAgIGVqcy5yZW5kZXIoY29yZXVpVGFibGVUcGxbJ3RhYmxlLXJlY29yZC1leHBhbmQuaHRtbCddLCB7XHJcbiAgICAgICAgICAgICAgICBjb2xzcGFuOiB0YWJsZS5fY291bnRDb2x1bW5zU2hvdyxcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICBpZiAoWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2YgY29udGVudCkgPj0gMCkge1xyXG4gICAgICAgICAgICBleHBhbmRSZWNvcmQuZmluZCgndGQnKS5odG1sKGNvbnRlbnQpXHJcblxyXG4gICAgICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShjb250ZW50KSkge1xyXG4gICAgICAgICAgICAkLmVhY2goY29udGVudCwgZnVuY3Rpb24gKGtleSwgaXRlbSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIGl0ZW0pID49IDAgfHxcclxuICAgICAgICAgICAgICAgICAgICBpdGVtIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQgfHxcclxuICAgICAgICAgICAgICAgICAgICAod2luZG93Lmhhc093blByb3BlcnR5KCdqUXVlcnknKSAmJiBpdGVtIGluc3RhbmNlb2YgalF1ZXJ5KVxyXG4gICAgICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZXhwYW5kUmVjb3JkLmZpbmQoJ3RkJykuYXBwZW5kKGl0ZW0pXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGV4cGFuZFJlY29yZDtcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KHQsdC+0YDQutCwINGN0LvQtdC80LXQvdGC0LAg0YPQv9GA0LDQstC70LXQvdC40Y9cclxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSB0YWJsZVxyXG4gICAgICogQHBhcmFtIHtvYmplY3R9IGNvbnRyb2xcclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKiBAcmV0dXJucyB7SFRNTEVsZW1lbnR8alF1ZXJ5fVxyXG4gICAgICovXHJcbiAgICByZW5kZXJDb250cm9sOiBmdW5jdGlvbiAodGFibGUsIGNvbnRyb2wpIHtcclxuXHJcbiAgICAgICAgaWYgKGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QoY29udHJvbCkpIHtcclxuICAgICAgICAgICAgbGV0IGNvbnRyb2xFbGVtZW50ID0gJChcclxuICAgICAgICAgICAgICAgIGVqcy5yZW5kZXIoY29yZXVpVGFibGVUcGxbJ3RhYmxlLWNvbnRyb2wuaHRtbCddLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWQ6IGNvbnRyb2wuZ2V0SWQoKVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnRyb2xFbGVtZW50LmFwcGVuZChjb250cm9sLnJlbmRlcigpKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChjb250cm9sLmhhc093blByb3BlcnR5KCdpbml0RXZlbnRzJykgJiYgdHlwZW9mIGNvbnRyb2wuaW5pdEV2ZW50cyA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICAgICAgdGFibGUub24oJ2NvbnRhaW5lcl9zaG93JywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2wuaW5pdEV2ZW50cygpXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGNvbnRyb2xFbGVtZW50O1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KTQvtGA0LzQuNGA0L7QstCw0L3QuNC1INC60L7QvdGC0LXQvdGC0LAg0LrQvtC80L/QvtC90LXQvdGC0LBcclxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSB0YWJsZVxyXG4gICAgICogQHBhcmFtIHtvYmplY3R9IGNvbXBvbmVudHNcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudE5hbWVcclxuICAgICAqIEByZXR1cm4ge0FycmF5fVxyXG4gICAgICovXHJcbiAgICByZW5kZXJDb21wb25lbnRzOiBmdW5jdGlvbiAodGFibGUsIGNvbXBvbmVudHMsIGV2ZW50TmFtZSkge1xyXG5cclxuICAgICAgICBsZXQgcmVzdWx0ID0gW107XHJcblxyXG4gICAgICAgIGlmIChjb21wb25lbnRzIGluc3RhbmNlb2YgT2JqZWN0KSB7XHJcbiAgICAgICAgICAgIGxldCBhbGxveUNvbXBvbmVudHMgPSBbXHJcbiAgICAgICAgICAgICAgICAnY29yZXVpLnRhYmxlJyxcclxuICAgICAgICAgICAgICAgICdjb3JldWkubGF5b3V0JyxcclxuICAgICAgICAgICAgICAgICdjb3JldWkucGFuZWwnLFxyXG4gICAgICAgICAgICAgICAgJ2NvcmV1aS50YWJzJyxcclxuICAgICAgICAgICAgICAgICdjb3JldWkuaW5mbycsXHJcbiAgICAgICAgICAgICAgICAnY29yZXVpLmNoYXJ0JyxcclxuICAgICAgICAgICAgXTtcclxuXHJcbiAgICAgICAgICAgIGlmICggISBBcnJheS5pc0FycmF5KGNvbXBvbmVudHMpKSB7XHJcbiAgICAgICAgICAgICAgICBjb21wb25lbnRzID0gWyBjb21wb25lbnRzIF07XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY29tcG9uZW50cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjb21wb25lbnRzW2ldID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKGNvbXBvbmVudHNbaV0pO1xyXG5cclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoICEgQXJyYXkuaXNBcnJheShjb21wb25lbnRzW2ldKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudHNbaV0uaGFzT3duUHJvcGVydHkoJ2NvbXBvbmVudCcpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgYWxsb3lDb21wb25lbnRzLmluZGV4T2YoY29tcG9uZW50c1tpXS5jb21wb25lbnQpID49IDBcclxuICAgICAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBuYW1lID0gY29tcG9uZW50c1tpXS5jb21wb25lbnQuc3BsaXQoJy4nKVsxXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKENvcmVVSS5oYXNPd25Qcm9wZXJ0eShuYW1lKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KENvcmVVSVtuYW1lXSlcclxuICAgICAgICAgICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGluc3RhbmNlID0gQ29yZVVJW25hbWVdLmNyZWF0ZShjb21wb25lbnRzW2ldKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goaW5zdGFuY2UucmVuZGVyKCkpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50TmFtZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFibGUub24oZXZlbnROYW1lLCBpbnN0YW5jZS5pbml0RXZlbnRzLCBpbnN0YW5jZSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjb3JldWlUYWJsZVJlbmRlcjsiLCJcclxuaW1wb3J0IGNvcmV1aVRhYmxlICAgICAgZnJvbSBcIi4vY29yZXVpLnRhYmxlXCI7XHJcbmltcG9ydCBjb3JldWlUYWJsZVV0aWxzIGZyb20gXCIuL2NvcmV1aS50YWJsZS51dGlsc1wiO1xyXG5cclxuXHJcbmxldCBjb3JldWlUYWJsZVByaXZhdGUgPSB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQmNC90LjRhtC40LDQu9C40LfQsNGG0LjRjyDQutC+0LvQvtC90L7QulxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHRhYmxlXHJcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBjb2x1bW5zXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBpbml0Q29sdW1ucyh0YWJsZSwgY29sdW1ucykge1xyXG5cclxuICAgICAgICAkLmVhY2goY29sdW1ucywgZnVuY3Rpb24gKGtleSwgY29sdW1uKSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29sdW1uLnR5cGUgPT09ICd1bmRlZmluZWQnIHx8XHJcbiAgICAgICAgICAgICAgICAhIGNvcmV1aVRhYmxlLmNvbHVtbnMuaGFzT3duUHJvcGVydHkoY29sdW1uLnR5cGUpXHJcbiAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgY29sdW1uLnR5cGUgPSAndGV4dCc7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICggISBjb2x1bW4uaGFzT3duUHJvcGVydHkoJ3Nob3cnKSB8fCB0eXBlb2YgY29sdW1uLnNob3cgIT09ICdib29sZWFuJykge1xyXG4gICAgICAgICAgICAgICAgY29sdW1uLnNob3cgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoY29sdW1uLmhhc093blByb3BlcnR5KCdmaXhlZCcpICYmIHR5cGVvZiBjb2x1bW4uZml4ZWQgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgICAgICB0YWJsZS5fb3B0aW9ucy5vdmVyZmxvdyA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGxldCBjb2x1bW5JbnN0YW5jZSA9ICQuZXh0ZW5kKHRydWUsIHt9LCBjb3JldWlUYWJsZS5jb2x1bW5zW2NvbHVtbi50eXBlXSk7XHJcbiAgICAgICAgICAgIGNvbHVtbkluc3RhbmNlLmluaXQodGFibGUsIGNvbHVtbik7XHJcbiAgICAgICAgICAgIHRhYmxlLl9jb2x1bW5zLnB1c2goY29sdW1uSW5zdGFuY2UpO1xyXG5cclxuICAgICAgICAgICAgaWYgKGNvbHVtbkluc3RhbmNlLmlzU2hvdygpKSB7XHJcbiAgICAgICAgICAgICAgICB0YWJsZS5fY291bnRDb2x1bW5zU2hvdysrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPINC/0L7QuNGB0LrQvtCy0YvRhSDQv9C+0LvQtdC5XHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gdGFibGVcclxuICAgICAqIEBwYXJhbSB7QXJyYXl9ICBzZWFyY2hDb250cm9sc1xyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgaW5pdFNlYXJjaDogZnVuY3Rpb24gKHRhYmxlLCBzZWFyY2hDb250cm9scykge1xyXG5cclxuICAgICAgICBsZXQgb3B0aW9ucyAgICAgID0gdGFibGUuZ2V0T3B0aW9ucygpO1xyXG4gICAgICAgIGxldCBzZWFyY2hWYWx1ZXMgPSBvcHRpb25zLnNhdmVTdGF0ZSAmJiBvcHRpb25zLmlkXHJcbiAgICAgICAgICAgID8gY29yZXVpVGFibGVQcml2YXRlLmdldFN0b3JhZ2VGaWVsZCh0YWJsZS5nZXRJZCgpLCAnc2VhcmNoJylcclxuICAgICAgICAgICAgOiBudWxsO1xyXG5cclxuICAgICAgICAkLmVhY2goc2VhcmNoQ29udHJvbHMsIGZ1bmN0aW9uIChrZXksIGNvbnRyb2wpIHtcclxuICAgICAgICAgICAgaWYgKCAhIGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QoY29udHJvbCkpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRyb2wgPSB7fTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKCAhIGNvbnRyb2wuaGFzT3duUHJvcGVydHkoJ3R5cGUnKSB8fFxyXG4gICAgICAgICAgICAgICAgdHlwZW9mIGNvbnRyb2wudHlwZSAhPT0gJ3N0cmluZycgfHxcclxuICAgICAgICAgICAgICAgICEgY29yZXVpVGFibGUuc2VhcmNoLmhhc093blByb3BlcnR5KGNvbnRyb2wudHlwZSlcclxuICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICBjb250cm9sLnR5cGUgPSAndGV4dCc7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChvcHRpb25zLnNhdmVTdGF0ZSAmJiBvcHRpb25zLmlkKSB7XHJcbiAgICAgICAgICAgICAgICBjb250cm9sLnZhbHVlID0gbnVsbDtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShzZWFyY2hWYWx1ZXMpICYmIGNvbnRyb2wuaGFzT3duUHJvcGVydHkoJ2ZpZWxkJykpIHtcclxuICAgICAgICAgICAgICAgICAgICAkLmVhY2goc2VhcmNoVmFsdWVzLCBmdW5jdGlvbiAoa2V5LCBzZWFyY2gpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3Qoc2VhcmNoKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VhcmNoLmhhc093blByb3BlcnR5KCdmaWVsZCcpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWFyY2guaGFzT3duUHJvcGVydHkoJ3ZhbHVlJykgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlYXJjaC5maWVsZCAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VhcmNoLmZpZWxkID09PSBjb250cm9sLmZpZWxkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbC52YWx1ZSA9IHNlYXJjaC52YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGxldCBjb250cm9sSW5zdGFuY2UgPSAkLmV4dGVuZCh0cnVlLCB7fSwgY29yZXVpVGFibGUuc2VhcmNoW2NvbnRyb2wudHlwZV0pO1xyXG4gICAgICAgICAgICBjb250cm9sSW5zdGFuY2UuaW5pdCh0YWJsZSwgY29udHJvbCk7XHJcbiAgICAgICAgICAgIHRhYmxlLl9zZWFyY2gucHVzaChjb250cm9sSW5zdGFuY2UpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQmNC90LjRhtC40LDQu9C40LfQsNGG0LjRjyDQutC+0L3RgtGA0L7Qu9C+0LIg0Lgg0YTQuNC70YzRgtGA0L7QslxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHRhYmxlXHJcbiAgICAgKiBAcGFyYW0ge0FycmF5fSAgcm93c1xyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHBvc2l0aW9uXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBpbml0Q29udHJvbHM6IGZ1bmN0aW9uICh0YWJsZSwgcm93cywgcG9zaXRpb24pIHtcclxuXHJcbiAgICAgICAgbGV0IHRoYXQgPSB0aGlzO1xyXG5cclxuICAgICAgICAkLmVhY2gocm93cywgZnVuY3Rpb24gKGtleSwgcm93KSB7XHJcblxyXG4gICAgICAgICAgICBsZXQgdHlwZSAgICAgICAgICAgPSAnaW4nO1xyXG4gICAgICAgICAgICBsZXQgY29udHJvbHNMZWZ0ICAgPSBbXTtcclxuICAgICAgICAgICAgbGV0IGNvbnRyb2xzQ2VudGVyID0gW107XHJcbiAgICAgICAgICAgIGxldCBjb250cm9sc1JpZ2h0ICA9IFtdO1xyXG5cclxuICAgICAgICAgICAgaWYgKHR5cGVvZiByb3cudHlwZSA9PT0gJ3N0cmluZycgJiZcclxuICAgICAgICAgICAgICAgIFsnaW4nLCAnb3V0J10uaW5kZXhPZihyb3cudHlwZS50b0xvd2VyQ2FzZSgpKSA+PSAwXHJcbiAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgdHlwZSA9IHJvdy50eXBlLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChyb3cuaGFzT3duUHJvcGVydHkoJ2xlZnQnKSAmJiBBcnJheS5pc0FycmF5KHJvdy5sZWZ0KSkge1xyXG4gICAgICAgICAgICAgICAgJC5lYWNoKHJvdy5sZWZ0LCBmdW5jdGlvbiAoa2V5LCBjb250cm9sKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGluc3RhbmNlID0gdGhhdC5pbml0Q29udHJvbCh0YWJsZSwgY29udHJvbCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KGluc3RhbmNlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sc0xlZnQucHVzaChpbnN0YW5jZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChyb3cuaGFzT3duUHJvcGVydHkoJ2NlbnRlcicpICYmIEFycmF5LmlzQXJyYXkocm93LmNlbnRlcikpIHtcclxuICAgICAgICAgICAgICAgICQuZWFjaChyb3cuY2VudGVyLCBmdW5jdGlvbiAoa2V5LCBjb250cm9sKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGluc3RhbmNlID0gdGhhdC5pbml0Q29udHJvbCh0YWJsZSwgY29udHJvbCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KGluc3RhbmNlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sc0NlbnRlci5wdXNoKGluc3RhbmNlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHJvdy5oYXNPd25Qcm9wZXJ0eSgncmlnaHQnKSAmJiBBcnJheS5pc0FycmF5KHJvdy5yaWdodCkpIHtcclxuICAgICAgICAgICAgICAgICQuZWFjaChyb3cucmlnaHQsIGZ1bmN0aW9uIChrZXksIGNvbnRyb2wpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgaW5zdGFuY2UgPSB0aGF0LmluaXRDb250cm9sKHRhYmxlLCBjb250cm9sKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QoaW5zdGFuY2UpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xzUmlnaHQucHVzaChpbnN0YW5jZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChjb250cm9sc0xlZnQubGVuZ3RoID4gMCB8fCBjb250cm9sc0NlbnRlci5sZW5ndGggPiAwIHx8IGNvbnRyb2xzUmlnaHQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgdGFibGUuX2NvbnRyb2xzUG9zaXRpb25zW3Bvc2l0aW9uXS5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICB0eXBlOiB0eXBlLFxyXG4gICAgICAgICAgICAgICAgICAgIGxlZnQ6IGNvbnRyb2xzTGVmdCxcclxuICAgICAgICAgICAgICAgICAgICBjZW50ZXI6IGNvbnRyb2xzQ2VudGVyLFxyXG4gICAgICAgICAgICAgICAgICAgIHJpZ2h0OiBjb250cm9sc1JpZ2h0LFxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y8g0LrQvtC90YLRgNC+0LvQsCDQuNC70Lgg0YTQuNC70YzRgtGA0LBcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSB0YWJsZVxyXG4gICAgICogQHBhcmFtIHtvYmplY3R9IGNvbnRyb2xcclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIGluaXRDb250cm9sOiBmdW5jdGlvbiAodGFibGUsIGNvbnRyb2wpIHtcclxuXHJcbiAgICAgICAgbGV0IGluc3RhbmNlID0gbnVsbDtcclxuXHJcbiAgICAgICAgaWYgKGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QoY29udHJvbCkgJiYgdHlwZW9mIGNvbnRyb2wudHlwZSA9PT0gJ3N0cmluZycpIHtcclxuXHJcbiAgICAgICAgICAgIGlmIChjb3JldWlUYWJsZS5jb250cm9scy5oYXNPd25Qcm9wZXJ0eShjb250cm9sLnR5cGUpKSB7XHJcbiAgICAgICAgICAgICAgICBpbnN0YW5jZSA9ICQuZXh0ZW5kKHRydWUsIHt9LCBjb3JldWlUYWJsZS5jb250cm9sc1tjb250cm9sLnR5cGVdKTtcclxuICAgICAgICAgICAgICAgIGluc3RhbmNlLmluaXQodGFibGUsIGNvbnRyb2wpO1xyXG5cclxuICAgICAgICAgICAgICAgIHRhYmxlLl9jb250cm9scy5wdXNoKGluc3RhbmNlKTtcclxuXHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY29udHJvbC50eXBlLmluZGV4T2YoJ2ZpbHRlcjonKSA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgbGV0IGZpbHRlck5hbWUgPSBjb250cm9sLnR5cGUuc3Vic3RyaW5nKDcpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChjb3JldWlUYWJsZS5maWx0ZXJzLmhhc093blByb3BlcnR5KGZpbHRlck5hbWUpKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjb250cm9sLmhhc093blByb3BlcnR5KCdmaWVsZCcpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBvcHRpb25zID0gdGFibGUuZ2V0T3B0aW9ucygpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuc2F2ZVN0YXRlICYmIG9wdGlvbnMuaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBmaWx0ZXJWYWx1ZXMgPSBvcHRpb25zLnNhdmVTdGF0ZSAmJiBvcHRpb25zLmlkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBjb3JldWlUYWJsZVByaXZhdGUuZ2V0U3RvcmFnZUZpZWxkKHRhYmxlLmdldElkKCksICdmaWx0ZXJzJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IG51bGw7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbC52YWx1ZSA9IG51bGw7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZmlsdGVyVmFsdWVzKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQuZWFjaChmaWx0ZXJWYWx1ZXMsIGZ1bmN0aW9uIChrZXksIGZpbHRlcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29yZXVpVGFibGVVdGlscy5pc09iamVjdChmaWx0ZXIpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWx0ZXIuaGFzT3duUHJvcGVydHkoJ2ZpZWxkJykgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbHRlci5oYXNPd25Qcm9wZXJ0eSgndmFsdWUnKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsdGVyLmZpZWxkICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWx0ZXIuZmllbGQgPT09IGNvbnRyb2wuZmllbGRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sLnZhbHVlID0gZmlsdGVyLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaW5zdGFuY2UgPSAkLmV4dGVuZCh0cnVlLCB7fSwgY29yZXVpVGFibGUuZmlsdGVyc1tmaWx0ZXJOYW1lXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaW5zdGFuY2UuaW5pdCh0YWJsZSwgY29udHJvbCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHRhYmxlLl9maWx0ZXJzLnB1c2goaW5zdGFuY2UpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gaW5zdGFuY2U7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPINGB0L7RgNGC0LjRgNC+0LLQutC4XHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gdGFibGVcclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHNvcnRcclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIGluaXRTb3J0OiBmdW5jdGlvbiAodGFibGUsIHNvcnQpIHtcclxuXHJcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoc29ydCkgJiYgc29ydC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICQuZWFjaChzb3J0LCBmdW5jdGlvbiAoa2V5LCBzb3J0RmllbGQpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY29yZXVpVGFibGVVdGlscy5pc09iamVjdChzb3J0RmllbGQpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgc29ydEZpZWxkLmhhc093blByb3BlcnR5KCdmaWVsZCcpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgc29ydEZpZWxkLmhhc093blByb3BlcnR5KCdvcmRlcicpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZW9mIHNvcnRGaWVsZC5maWVsZCA9PT0gJ3N0cmluZycgJiZcclxuICAgICAgICAgICAgICAgICAgICB0eXBlb2Ygc29ydEZpZWxkLm9yZGVyID09PSAnc3RyaW5nJyAmJlxyXG4gICAgICAgICAgICAgICAgICAgIHNvcnRGaWVsZC5maWVsZCAmJlxyXG4gICAgICAgICAgICAgICAgICAgIHNvcnRGaWVsZC5vcmRlciAmJlxyXG4gICAgICAgICAgICAgICAgICAgIFsnYXNjJywgJ2Rlc2MnXS5pbmRleE9mKHNvcnRGaWVsZC5vcmRlcikgPj0gMFxyXG4gICAgICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGFibGUuX3NvcnQucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkOiBzb3J0RmllbGQuZmllbGQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9yZGVyOiBzb3J0RmllbGQub3JkZXJcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQo9GB0YLQsNC90L7QstC60LAg0LfQsNC/0LjRgdC10LlcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSB0YWJsZVxyXG4gICAgICogQHBhcmFtIHtBcnJheX0gIHJlY29yZHNcclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIHNldFJlY29yZHM6IGZ1bmN0aW9uICh0YWJsZSwgcmVjb3Jkcykge1xyXG5cclxuICAgICAgICB0YWJsZS5fcmVjb3Jkc0luZGV4ID0gMTtcclxuICAgICAgICB0YWJsZS5fcmVjb3JkcyAgICAgID0gW107XHJcblxyXG4gICAgICAgIGxldCB0aGF0ID0gdGhpcztcclxuXHJcbiAgICAgICAgJC5lYWNoKHJlY29yZHMsIGZ1bmN0aW9uIChrZXksIHJlY29yZCkge1xyXG5cclxuICAgICAgICAgICAgdGhhdC5hZGRSZWNvcmQodGFibGUsIHJlY29yZCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCU0L7QsdCw0LLQu9C10L3QuNC1INC90L7QstC+0Lkg0LfQsNC/0LjRgdC4XHJcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gdGFibGVcclxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBkYXRhXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYWZ0ZXJJbmRleFxyXG4gICAgICogQHJldHVybiB7b2JqZWN0fG51bGx9XHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBhZGRSZWNvcmQ6IGZ1bmN0aW9uICh0YWJsZSwgZGF0YSwgYWZ0ZXJJbmRleCkge1xyXG5cclxuICAgICAgICBpZiAoY29yZXVpVGFibGVVdGlscy5pc09iamVjdChkYXRhKSkge1xyXG4gICAgICAgICAgICBkYXRhID0gJC5leHRlbmQodHJ1ZSwge30sIGRhdGEpO1xyXG5cclxuICAgICAgICAgICAgbGV0IG1ldGEgPSBkYXRhLmhhc093blByb3BlcnR5KCdfbWV0YScpICYmIGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QoZGF0YS5fbWV0YSlcclxuICAgICAgICAgICAgICAgID8gZGF0YS5fbWV0YVxyXG4gICAgICAgICAgICAgICAgOiBudWxsO1xyXG5cclxuICAgICAgICAgICAgaWYgKG1ldGEpIHtcclxuICAgICAgICAgICAgICAgIGRlbGV0ZSBkYXRhLl9tZXRhO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBsZXQgcmVjb3JkID0ge1xyXG4gICAgICAgICAgICAgICAgaW5kZXg6IHRhYmxlLl9yZWNvcmRzSW5kZXgrKyxcclxuICAgICAgICAgICAgICAgIGRhdGE6IGRhdGEsXHJcbiAgICAgICAgICAgICAgICBzaG93OiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgbWV0YTogbWV0YSxcclxuICAgICAgICAgICAgICAgIHNlcTogdGFibGUuX3NlcSsrLFxyXG4gICAgICAgICAgICB9O1xyXG5cclxuXHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgYWZ0ZXJJbmRleCA9PT0gJ251bWJlcicpIHtcclxuICAgICAgICAgICAgICAgIGlmIChhZnRlckluZGV4ID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGFibGUuX3JlY29yZHMuc3BsaWNlKDAsIDAsIHJlY29yZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlY29yZDtcclxuXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBpbmRleCA9IG51bGw7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICQuZWFjaCh0YWJsZS5fcmVjb3JkcywgZnVuY3Rpb24gKGtleSwgcmVjb3JkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhZnRlckluZGV4ID09PSByZWNvcmQuaW5kZXgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4ID0ga2V5O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpbmRleCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0YWJsZS5fcmVjb3Jkcy5zcGxpY2UoaW5kZXgsIDAsIHJlY29yZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZWNvcmQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRhYmxlLl9yZWNvcmRzLnB1c2gocmVjb3JkKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiByZWNvcmQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0JTQvtCx0LDQstC70LXQvdC40LUg0L3QvtCy0L7QuSDQt9Cw0L/QuNGB0Lgg0L/QtdGA0LXQtCDRg9C60LDQt9Cw0L3QvdC+0LlcclxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSB0YWJsZVxyXG4gICAgICogQHBhcmFtIHtvYmplY3R9IGRhdGFcclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleFxyXG4gICAgICogQHJldHVybiB7b2JqZWN0fG51bGx9XHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBhZGRSZWNvcmRCZWZvcmU6IGZ1bmN0aW9uICh0YWJsZSwgZGF0YSwgaW5kZXgpIHtcclxuXHJcbiAgICAgICAgaWYgKGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QoZGF0YSkgJiYgdHlwZW9mIGluZGV4ID09PSAnbnVtYmVyJykge1xyXG4gICAgICAgICAgICBkYXRhID0gJC5leHRlbmQodHJ1ZSwge30sIGRhdGEpO1xyXG5cclxuICAgICAgICAgICAgbGV0IG1ldGEgPSBkYXRhLmhhc093blByb3BlcnR5KCdfbWV0YScpICYmIGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QoZGF0YS5fbWV0YSlcclxuICAgICAgICAgICAgICAgID8gZGF0YS5fbWV0YVxyXG4gICAgICAgICAgICAgICAgOiBudWxsO1xyXG5cclxuICAgICAgICAgICAgaWYgKG1ldGEpIHtcclxuICAgICAgICAgICAgICAgIGRlbGV0ZSBkYXRhLl9tZXRhO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBsZXQgcmVjb3JkID0ge1xyXG4gICAgICAgICAgICAgICAgaW5kZXg6IHRhYmxlLl9yZWNvcmRzSW5kZXgrKyxcclxuICAgICAgICAgICAgICAgIGRhdGE6IGRhdGEsXHJcbiAgICAgICAgICAgICAgICBzaG93OiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgbWV0YTogbWV0YSxcclxuICAgICAgICAgICAgICAgIHNlcTogdGFibGUuX3NlcSsrLFxyXG4gICAgICAgICAgICB9O1xyXG5cclxuXHJcbiAgICAgICAgICAgIGxldCBpc3NldEtleSAgPSBmYWxzZTtcclxuICAgICAgICAgICAgbGV0IGtleUJlZm9yZSA9IG51bGw7XHJcblxyXG4gICAgICAgICAgICAkLmVhY2godGFibGUuX3JlY29yZHMsIGZ1bmN0aW9uIChrZXksIHJlY29yZCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGluZGV4ID09PSByZWNvcmQuaW5kZXgpIHtcclxuICAgICAgICAgICAgICAgICAgICBpc3NldEtleSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGtleUJlZm9yZSA9IGtleTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBpZiAoaXNzZXRLZXkgJiYga2V5QmVmb3JlKSB7XHJcbiAgICAgICAgICAgICAgICB0YWJsZS5fcmVjb3Jkcy5zcGxpY2Uoa2V5QmVmb3JlLCAwLCByZWNvcmQpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlY29yZDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQn9GA0L7QstC10YDQutCwINC/0L7QtNGF0L7QtNC40YIg0LvQuCDQt9Cw0L/QuNGB0Ywg0L/QvtC0INC/0L7QuNGB0LrQvtCy0YvQtSDQtNCw0L3QvdGL0LVcclxuICAgICAqIEBwYXJhbSB7QXJyYXl9ICBmaWx0ZXJzXHJcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gcmVjb3JkRGF0YVxyXG4gICAgICogQHJldHVybiB7Ym9vbGVhbn1cclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIGlzRmlsdGVyZWRSZWNvcmQ6IGZ1bmN0aW9uIChmaWx0ZXJzLCByZWNvcmREYXRhKSB7XHJcblxyXG4gICAgICAgIGxldCBpc1Nob3cgPSB0cnVlO1xyXG5cclxuICAgICAgICAkLmVhY2goZmlsdGVycywgZnVuY3Rpb24gKGtleSwgZmlsdGVyKSB7XHJcblxyXG4gICAgICAgICAgICBpZiAocmVjb3JkRGF0YS5oYXNPd25Qcm9wZXJ0eShmaWx0ZXIuZmllbGQpICYmXHJcbiAgICAgICAgICAgICAgICBbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiByZWNvcmREYXRhW2ZpbHRlci5maWVsZF0pID49IDBcclxuICAgICAgICAgICAgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIGZpbHRlci52YWx1ZSkgPj0gMCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoZmlsdGVyLmhhc093blByb3BlcnR5KCdhbGcnKSAmJiBmaWx0ZXIuYWxnID09PSAnc3RyaWN0Jykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVjb3JkRGF0YVtmaWx0ZXIuZmllbGRdLnRvU3RyaW5nKCkudG9Mb3dlckNhc2UoKSAhPSBmaWx0ZXIudmFsdWUudG9TdHJpbmcoKS50b0xvd2VyQ2FzZSgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc1Nob3cgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHJlY29yZERhdGFbZmlsdGVyLmZpZWxkXS50b1N0cmluZygpLnRvTG93ZXJDYXNlKClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5pbmRleE9mKGZpbHRlci52YWx1ZS50b1N0cmluZygpLnRvTG93ZXJDYXNlKCkpIDwgMFxyXG4gICAgICAgICAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpc1Nob3cgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoZmlsdGVyLnZhbHVlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChmaWx0ZXIudmFsdWUuaW5kZXhPZihyZWNvcmREYXRhW2ZpbHRlci5maWVsZF0udG9TdHJpbmcoKSkgPCAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzU2hvdyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY29yZXVpVGFibGVVdGlscy5pc09iamVjdChmaWx0ZXIudmFsdWUpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyLnZhbHVlLmhhc093blByb3BlcnR5KCdzdGFydCcpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyLnZhbHVlLmhhc093blByb3BlcnR5KCdlbmQnKVxyXG4gICAgICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGlzc2V0U3RhcnQgPSBbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiBmaWx0ZXIudmFsdWUuc3RhcnQpID49IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGlzc2V0RW5kICAgPSBbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiBmaWx0ZXIudmFsdWUuZW5kKSA+PSAwO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoaXNzZXRTdGFydCAmJiBpc3NldEVuZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVjb3JkRGF0YVtmaWx0ZXIuZmllbGRdIDwgZmlsdGVyLnZhbHVlLnN0YXJ0IHx8IGZpbHRlci52YWx1ZS5lbmQgPCByZWNvcmREYXRhW2ZpbHRlci5maWVsZF0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzU2hvdyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNzZXRTdGFydCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmlsdGVyLnZhbHVlLnN0YXJ0ID4gcmVjb3JkRGF0YVtmaWx0ZXIuZmllbGRdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc1Nob3cgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGlzc2V0RW5kKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmaWx0ZXIudmFsdWUuZW5kIDwgcmVjb3JkRGF0YVtmaWx0ZXIuZmllbGRdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc1Nob3cgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpc1Nob3cgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gaXNTaG93O1xyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQktGL0L/QvtC70L3QtdC90LjRjyDQt9Cw0YDQtdCz0LjRgdGC0YDQuNGA0L7QstCw0L3QvdGL0YUg0YTRg9C90LrRhtC40Lkg0LIg0YPQutCw0LfQsNC90L3QvtC8INGB0L7QsdGL0YLQuNC4XHJcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gdGFibGVcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXHJcbiAgICAgKiBAcGFyYW0ge0FycmF5fSAgcGFyYW1zXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBfdHJpZ2dlcjogZnVuY3Rpb24odGFibGUsIG5hbWUsIHBhcmFtcykge1xyXG5cclxuICAgICAgICBwYXJhbXMgPSBwYXJhbXMgfHwgW107XHJcblxyXG4gICAgICAgIGlmICh0YWJsZS5fZXZlbnRzLmhhc093blByb3BlcnR5KG5hbWUpICYmIHRhYmxlLl9ldmVudHNbbmFtZV0ubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRhYmxlLl9ldmVudHNbbmFtZV0ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGxldCBjYWxsYmFjayA9IHRhYmxlLl9ldmVudHNbbmFtZV1baV0uY2FsbGJhY2s7XHJcbiAgICAgICAgICAgICAgICBsZXQgY29udGV4dCAgPSB0YWJsZS5fZXZlbnRzW25hbWVdW2ldLmNvbnRleHQgPyB0YWJsZS5fZXZlbnRzW25hbWVdW2ldLmNvbnRleHQgOiB0YWJsZTtcclxuXHJcbiAgICAgICAgICAgICAgICBjYWxsYmFjay5hcHBseShjb250ZXh0LCBwYXJhbXMpXHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHRhYmxlLl9ldmVudHNbbmFtZV1baV0uc2luZ2xlRXhlYykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRhYmxlLl9ldmVudHNbbmFtZV0uc3BsaWNlKGksIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgIGktLTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KHQvtGA0YLQuNGA0L7QstC60LAg0LfQsNC/0LjRgdC10Lkg0L/QviBzZXFcclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHJlY29yZHNcclxuICAgICAqIEByZXR1cm4geyp9XHJcbiAgICAgKi9cclxuICAgIHNvcnRSZWNvcmRzQnlTZXE6IGZ1bmN0aW9uIChyZWNvcmRzKSB7XHJcblxyXG4gICAgICAgIHJldHVybiByZWNvcmRzLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGEuc2VxIC0gYi5zZXE7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCh0L7RgNGC0LjRgNC+0LLQutCwINC30LDQv9C40YHQtdC5INC/0L4g0YPQutCw0LfQsNC90L3Ri9C8INC/0L7Qu9GP0LxcclxuICAgICAqIEBwYXJhbSByZWNvcmRzXHJcbiAgICAgKiBAcGFyYW0gZmllbGRzXHJcbiAgICAgKi9cclxuICAgIHNvcnRSZWNvcmRzQnlGaWVsZHM6IGZ1bmN0aW9uIChyZWNvcmRzLCBmaWVsZHMpIHtcclxuXHJcbiAgICAgICAgcmV0dXJuIHJlY29yZHMuc29ydChmdW5jdGlvbihhLCBiKSB7XHJcblxyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZpZWxkcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgbGV0IGlzc2V0QUZpZWxkID0gYS5kYXRhLmhhc093blByb3BlcnR5KGZpZWxkc1tpXS5maWVsZCk7XHJcbiAgICAgICAgICAgICAgICBsZXQgaXNzZXRCRmllbGQgPSBiLmRhdGEuaGFzT3duUHJvcGVydHkoZmllbGRzW2ldLmZpZWxkKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoICEgaXNzZXRBRmllbGQgJiYgISBpc3NldEJGaWVsZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAwO1xyXG5cclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoICEgaXNzZXRBRmllbGQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gMTtcclxuXHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCAhIGlzc2V0QkZpZWxkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC0xO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgdmFsID0gYS5kYXRhW2ZpZWxkc1tpXS5maWVsZF0gPCBiLmRhdGFbZmllbGRzW2ldLmZpZWxkXVxyXG4gICAgICAgICAgICAgICAgICAgID8gLTFcclxuICAgICAgICAgICAgICAgICAgICA6IChhLmRhdGFbZmllbGRzW2ldLmZpZWxkXSA+IGIuZGF0YVtmaWVsZHNbaV0uZmllbGRdID8gMSA6IDApO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChmaWVsZHNbaV0ub3JkZXIgPT09IFwiZGVzY1wiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFsID0gdmFsICogLTE7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHZhbCAhPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWw7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0LTQsNC90L3Ri9GFINC40Lcg0YXRgNCw0L3QuNC70LjRidCwXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGFibGVJZFxyXG4gICAgICogQHJldHVybiB7b2JqZWN0fG51bGx9XHJcbiAgICAgKi9cclxuICAgIGdldFN0b3JhZ2U6IGZ1bmN0aW9uICh0YWJsZUlkKSB7XHJcblxyXG4gICAgICAgIGxldCBzdG9yYWdlID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2NvcmV1aV90YWJsZScpO1xyXG5cclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHN0b3JhZ2UgPT09ICdzdHJpbmcnICYmIHN0b3JhZ2UpIHtcclxuICAgICAgICAgICAgICAgIHN0b3JhZ2UgPSBKU09OLnBhcnNlKHN0b3JhZ2UpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KHN0b3JhZ2UpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRhYmxlSWQgJiYgdHlwZW9mIHRhYmxlSWQgPT09ICdzdHJpbmcnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgID8gKHN0b3JhZ2UuaGFzT3duUHJvcGVydHkodGFibGVJZCkgPyBzdG9yYWdlW3RhYmxlSWRdIDogbnVsbClcclxuICAgICAgICAgICAgICAgICAgICAgICAgOiBzdG9yYWdlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuXHJcbiAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCh0L7RhdGA0LDQvdC10L3QuNC1INC00LDQvdC90YvRhSDQsiDRhdGA0LDQvdC40LvQuNGJ0LVcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSAgICAgIHRhYmxlSWRcclxuICAgICAqIEBwYXJhbSB7b2JqZWN0fG51bGx9IHN0b3JhZ2VcclxuICAgICAqL1xyXG4gICAgc2V0U3RvcmFnZTogZnVuY3Rpb24gKHRhYmxlSWQsIHN0b3JhZ2UpIHtcclxuXHJcbiAgICAgICAgaWYgKHR5cGVvZiB0YWJsZUlkICE9PSAnc3RyaW5nJyB8fCAhIHRhYmxlSWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IHN0b3JhZ2VBbGwgPSB0aGlzLmdldFN0b3JhZ2UoKTtcclxuXHJcbiAgICAgICAgaWYgKGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3Qoc3RvcmFnZUFsbCkpIHtcclxuICAgICAgICAgICAgaWYgKHN0b3JhZ2VBbGwuaGFzT3duUHJvcGVydHkodGFibGVJZCkpIHtcclxuICAgICAgICAgICAgICAgIGlmIChzdG9yYWdlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RvcmFnZUFsbFt0YWJsZUlkXSA9IHN0b3JhZ2U7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBzdG9yYWdlQWxsW3RhYmxlSWRdO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgfSBlbHNlIGlmIChzdG9yYWdlKSB7XHJcbiAgICAgICAgICAgICAgICBzdG9yYWdlQWxsW3RhYmxlSWRdID0gc3RvcmFnZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2NvcmV1aV90YWJsZScsIEpTT04uc3RyaW5naWZ5KHN0b3JhZ2VBbGwgfHwge30pKTtcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC/0L7Qu9GPINC40Lcg0YXRgNCw0L3QuNC70LjRidCwXHJcbiAgICAgKiBAcGFyYW0gdGFibGVJZFxyXG4gICAgICogQHBhcmFtIGZpZWxkXHJcbiAgICAgKiBAcmV0dXJuIHsqfG51bGx9XHJcbiAgICAgKi9cclxuICAgIGdldFN0b3JhZ2VGaWVsZDogZnVuY3Rpb24gKHRhYmxlSWQsIGZpZWxkKSB7XHJcblxyXG4gICAgICAgIGxldCBzdG9yYWdlID0gdGhpcy5nZXRTdG9yYWdlKHRhYmxlSWQpIHx8IHt9O1xyXG5cclxuICAgICAgICByZXR1cm4gc3RvcmFnZS5oYXNPd25Qcm9wZXJ0eShmaWVsZClcclxuICAgICAgICAgICAgPyBzdG9yYWdlW2ZpZWxkXVxyXG4gICAgICAgICAgICA6IG51bGw7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCh0L7RhdGA0LDQvdC10L3QuNC1INC/0L7Qu9GPINCyINGF0YDQsNC90LjQu9C40YnQtVxyXG4gICAgICogQHBhcmFtIHRhYmxlSWRcclxuICAgICAqIEBwYXJhbSBmaWVsZFxyXG4gICAgICogQHBhcmFtIGRhdGFcclxuICAgICAqL1xyXG4gICAgc2V0U3RvcmFnZUZpZWxkOiBmdW5jdGlvbiAodGFibGVJZCwgZmllbGQsIGRhdGEpIHtcclxuXHJcbiAgICAgICAgbGV0IHN0b3JhZ2UgPSB0aGlzLmdldFN0b3JhZ2UodGFibGVJZCkgfHwge307XHJcblxyXG4gICAgICAgIGlmIChkYXRhID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIGlmIChzdG9yYWdlLmhhc093blByb3BlcnR5KGZpZWxkKSkge1xyXG4gICAgICAgICAgICAgICAgZGVsZXRlIHN0b3JhZ2VbZmllbGRdO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHN0b3JhZ2VbZmllbGRdID0gZGF0YTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuc2V0U3RvcmFnZSh0YWJsZUlkLCBzdG9yYWdlKTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY29yZXVpVGFibGVQcml2YXRlOyIsImltcG9ydCBjb3JldWlUYWJsZVJlbmRlciBmcm9tIFwiLi9jb3JldWkudGFibGUucmVuZGVyXCI7XHJcbmltcG9ydCBjb3JldWlUYWJsZVByaXZhdGUgZnJvbSBcIi4vY29yZXVpLnRhYmxlLnByaXZhdGVcIjtcclxuaW1wb3J0IGNvcmV1aVRhYmxlVGVtcGxhdGVzIGZyb20gXCIuL2NvcmV1aS50YWJsZS50ZW1wbGF0ZXNcIjtcclxuaW1wb3J0IGNvcmV1aVRhYmxlVHBsIGZyb20gXCIuL2NvcmV1aS50YWJsZS50ZW1wbGF0ZXNcIjtcclxuXHJcblxyXG5sZXQgY29yZXVpVGFibGVFbGVtZW50cyA9IHtcclxuXHJcbiAgICAvKipcclxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSDQutC+0L3RgtC10LnQvdC10YDQsCDRgtCw0LHQu9C40YbRi1xyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRhYmxlSWRcclxuICAgICAqIEByZXR1cm4ge2pRdWVyeX1cclxuICAgICAqL1xyXG4gICAgZ2V0Q29udGFpbmVyOiBmdW5jdGlvbiAodGFibGVJZCkge1xyXG5cclxuICAgICAgICByZXR1cm4gJCgnI2NvcmV1aS10YWJsZS0nICsgdGFibGVJZCArICcgPiAuY29yZXVpLXRhYmxlX19jb250YWluZXInKTtcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC+0LHQtdGA0YLQutC4INGC0LDQsdC70LjRhtGLXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGFibGVJZFxyXG4gICAgICogQHJldHVybiB7alF1ZXJ5fVxyXG4gICAgICovXHJcbiAgICBnZXRMb2NrOiBmdW5jdGlvbiAodGFibGVJZCkge1xyXG5cclxuICAgICAgICByZXR1cm4gJCgnI2NvcmV1aS10YWJsZS0nICsgdGFibGVJZCArICcgPiAuY29yZXVpLXRhYmxlX19jb250YWluZXIgPiAuY29yZXVpLXRhYmxlLWxvY2snKTtcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC+0LHQtdGA0YLQutC4INGC0LDQsdC70LjRhtGLXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGFibGVJZFxyXG4gICAgICogQHJldHVybiB7alF1ZXJ5fVxyXG4gICAgICovXHJcbiAgICBnZXRXcmFwcGVyOiBmdW5jdGlvbiAodGFibGVJZCkge1xyXG5cclxuICAgICAgICByZXR1cm4gJCgnI2NvcmV1aS10YWJsZS0nICsgdGFibGVJZCArICcgPiAuY29yZXVpLXRhYmxlX19jb250YWluZXIgPiAuY29yZXVpLXRhYmxlX193cmFwcGVyJyk7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSDQv9C+0LjRgdC60L7QstC+0LPQviDQutC+0L3RgtC10LnQvdC10YDQsFxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRhYmxlSWRcclxuICAgICAqIEByZXR1cm4ge2pRdWVyeX1cclxuICAgICAqL1xyXG4gICAgZ2V0U2VhcmNoQ29udGFpbmVyOiBmdW5jdGlvbiAodGFibGVJZCkge1xyXG5cclxuICAgICAgICByZXR1cm4gJCgnI2NvcmV1aS10YWJsZS0nICsgdGFibGVJZCArICcgPiAuY29yZXVpLXRhYmxlX19jb250YWluZXIgPiAuY29yZXVpLXRhYmxlX193cmFwcGVyID4gLmNvcmV1aS10YWJsZV9fc2VhcmNoJyk7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSDQv9C+0LjRgdC60L7QstC+0LPQviDQutC+0L3RgtC10LnQvdC10YDQsFxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRhYmxlSWRcclxuICAgICAqIEByZXR1cm4ge2pRdWVyeX1cclxuICAgICAqL1xyXG4gICAgZ2V0Q29sdW1uc0NvbnRhaW5lcjogZnVuY3Rpb24gKHRhYmxlSWQpIHtcclxuXHJcbiAgICAgICAgcmV0dXJuICQoJyNjb3JldWktdGFibGUtJyArIHRhYmxlSWQgKyAnID4gLmNvcmV1aS10YWJsZV9fY29udGFpbmVyID4gLmNvcmV1aS10YWJsZV9fd3JhcHBlciA+IC5jb3JldWktdGFibGVfX2NvbHVtbnMnKTtcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC60L7QvdGC0LXQudC90LXRgNCwINC/0L7QuNGB0LrQvtCy0L7Qs9C+INC60L7QvdGC0YDQvtC70LBcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0YWJsZUlkXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gY29udHJvbElkXHJcbiAgICAgKiBAcmV0dXJuIHtqUXVlcnl9XHJcbiAgICAgKi9cclxuICAgIGdldFNlYXJjaENvbnRyb2w6IGZ1bmN0aW9uICh0YWJsZUlkLCBjb250cm9sSWQpIHtcclxuXHJcbiAgICAgICAgcmV0dXJuICQoJyNjb3JldWktdGFibGUtJyArIHRhYmxlSWQgKyAnID4gLmNvcmV1aS10YWJsZV9fY29udGFpbmVyID4gLmNvcmV1aS10YWJsZV9fd3JhcHBlciA+IC5jb3JldWktdGFibGVfX3NlYXJjaCAuc2VhcmNoLWNvbnRyb2wtJyArIGNvbnRyb2xJZCk7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSDQutC+0L3RgtC10LnQvdC10YDQsCDQutC+0L3RgtGA0L7Qu9CwXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGFibGVJZFxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGNvbnRyb2xJZFxyXG4gICAgICogQHJldHVybiB7alF1ZXJ5fVxyXG4gICAgICovXHJcbiAgICBnZXRDb250cm9sOiBmdW5jdGlvbiAodGFibGVJZCwgY29udHJvbElkKSB7XHJcblxyXG4gICAgICAgIHJldHVybiAkKCcjY29yZXVpLXRhYmxlLScgKyB0YWJsZUlkICsgJyAgI2NvcmV1aS10YWJsZS1jb250cm9sLScgKyBjb250cm9sSWQpO1xyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0YLQsNCx0LvQuNGG0YtcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0YWJsZUlkXHJcbiAgICAgKiBAcmV0dXJuIHtqUXVlcnl9XHJcbiAgICAgKi9cclxuICAgIGdldFRhYmxlOiBmdW5jdGlvbiAodGFibGVJZCkge1xyXG5cclxuICAgICAgICByZXR1cm4gJCgnI2NvcmV1aS10YWJsZS0nICsgdGFibGVJZCArICcgPiAuY29yZXVpLXRhYmxlX19jb250YWluZXIgPiAuY29yZXVpLXRhYmxlX193cmFwcGVyID4gdGFibGUnKTtcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INGC0LXQu9CwINGC0LDQsdC70LjRhtGLXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGFibGVJZFxyXG4gICAgICogQHJldHVybiB7alF1ZXJ5fVxyXG4gICAgICovXHJcbiAgICBnZXRUYWJsZVRib2R5OiBmdW5jdGlvbiAodGFibGVJZCkge1xyXG5cclxuICAgICAgICByZXR1cm4gJCgnI2NvcmV1aS10YWJsZS0nICsgdGFibGVJZCArICcgPiAuY29yZXVpLXRhYmxlX19jb250YWluZXIgPiAuY29yZXVpLXRhYmxlX193cmFwcGVyID4gdGFibGUgPiB0Ym9keScpO1xyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0Y/Rh9C10LXQuiDRgSDRgdC+0YDRgtC40YDQvtCy0LrQvtC5INC/0L4g0YLQsNCx0LvQuNGG0LVcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0YWJsZUlkXHJcbiAgICAgKiBAcmV0dXJuIHtqUXVlcnl9XHJcbiAgICAgKi9cclxuICAgIGdldFRhYmxlU29ydGFibGU6IGZ1bmN0aW9uICh0YWJsZUlkKSB7XHJcblxyXG4gICAgICAgIHJldHVybiAkKCcjY29yZXVpLXRhYmxlLScgKyB0YWJsZUlkICsgJyA+IC5jb3JldWktdGFibGVfX2NvbnRhaW5lciA+IC5jb3JldWktdGFibGVfX3dyYXBwZXIgPiB0YWJsZSA+IHRoZWFkID4gdHIgPiB0ZC5jb3JldWktdGFibGVfX3NvcnRhYmxlJyk7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSDRgdGC0YDQvtC6INC30LDQv9C40YHQtdC5XHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGFibGVJZFxyXG4gICAgICogQHJldHVybiB7alF1ZXJ5fVxyXG4gICAgICovXHJcbiAgICBnZXRUclJlY29yZHM6IGZ1bmN0aW9uICh0YWJsZUlkKSB7XHJcblxyXG4gICAgICAgIHJldHVybiAkKCcjY29yZXVpLXRhYmxlLScgKyB0YWJsZUlkICsgJyA+IC5jb3JldWktdGFibGVfX2NvbnRhaW5lciA+IC5jb3JldWktdGFibGVfX3dyYXBwZXIgPiB0YWJsZSA+IHRib2R5ID4gdHIuY29yZXVpLXRhYmxlX19yZWNvcmQnKTtcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INGN0LvQtdC80LXQvdGC0LAg0YHRgtGA0L7QutC4INC/0L4g0LrQu9GO0YfRg1xyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRhYmxlSWRcclxuICAgICAqIEBwYXJhbSB7aW50fSAgICBpbmRleFxyXG4gICAgICogQHJldHVybiB7alF1ZXJ5fVxyXG4gICAgICovXHJcbiAgICBnZXRUckJ5SW5kZXg6IGZ1bmN0aW9uICh0YWJsZUlkLCBpbmRleCkge1xyXG5cclxuICAgICAgICByZXR1cm4gJCgnI2NvcmV1aS10YWJsZS0nICsgdGFibGVJZCArICcgPiAuY29yZXVpLXRhYmxlX19jb250YWluZXIgPiAuY29yZXVpLXRhYmxlX193cmFwcGVyID4gdGFibGUgPiB0Ym9keSA+IHRyW2RhdGEtcmVjb3JkLWluZGV4PVwiJyArIGluZGV4ICsgJ1wiXScpO1xyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0LrQvtC90YLQtdC90YLQsCDQv9C+0LQg0YHRgtGA0L7QutC+0LlcclxuICAgICAqIEBwYXJhbSB7alF1ZXJ5fSByZWNvcmRFbGVtZW50XHJcbiAgICAgKiBAcmV0dXJuIHtqUXVlcnl9XHJcbiAgICAgKi9cclxuICAgIGdldEV4cGFuZFJvdzogZnVuY3Rpb24gKHJlY29yZEVsZW1lbnQpIHtcclxuXHJcbiAgICAgICAgcmV0dXJuIHJlY29yZEVsZW1lbnQubmV4dCgpLmhhc0NsYXNzKCdjb3JldWktdGFibGVfX3JlY29yZC1leHBhbmRlZCcpXHJcbiAgICAgICAgICAgID8gcmVjb3JkRWxlbWVudC5uZXh0KClcclxuICAgICAgICAgICAgOiBudWxsO1xyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQlNC+0LHQsNCy0LvQtdC90LjQtSDQutC+0L3RgtC10L3RgtCwINC/0L7QtCDRgdGC0YDQvtC60L7QuVxyXG4gICAgICogQHBhcmFtIHtvYmplY3R9ICAgICAgIHRhYmxlXHJcbiAgICAgKiBAcGFyYW0ge2pRdWVyeX0gICAgICAgcmVjb3JkRWxlbWVudFxyXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IGNvbnRlbnRcclxuICAgICAqIEByZXR1cm4ge2pRdWVyeX1cclxuICAgICAqL1xyXG4gICAgYWRkRXhwYW5kUm93OiBmdW5jdGlvbiAodGFibGUsIHJlY29yZEVsZW1lbnQsIGNvbnRlbnQpIHtcclxuXHJcbiAgICAgICAgbGV0IGV4cGFuZFJlY29yZCA9IGNvcmV1aVRhYmxlUmVuZGVyLnJlbmRlckV4cGFuZCh0YWJsZSwgY29udGVudCwgJ3JlY29yZF9leHBhbmRfc2hvdycpO1xyXG5cclxuICAgICAgICByZWNvcmRFbGVtZW50LmFmdGVyKGV4cGFuZFJlY29yZCk7XHJcbiAgICAgICAgcmVjb3JkRWxlbWVudC5uZXh0KCkuc2hvdygnZmFzdCcpO1xyXG4gICAgICAgIHJlY29yZEVsZW1lbnQuYWRkQ2xhc3MoJ3JlY29yZC1leHBhbmRlZCcpO1xyXG5cclxuICAgICAgICBsZXQgcmVjb3JkSW5kZXggPSByZWNvcmRFbGVtZW50LmRhdGEoJ3JlY29yZC1pbmRleCcpO1xyXG5cclxuICAgICAgICBjb3JldWlUYWJsZVByaXZhdGUuX3RyaWdnZXIodGFibGUsICdyZWNvcmRfZXhwYW5kX3Nob3cnLCBbcmVjb3JkSW5kZXhdKTtcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KHQutGA0YvRgtC40LUg0LrQvtC90YLQtdC90YLQsCDQv9C+0LQg0YHRgtGA0L7QutC+0LlcclxuICAgICAqIEBwYXJhbSB7alF1ZXJ5fSByZWNvcmRFeHBhbmRlZFxyXG4gICAgICogQHJldHVybiB7alF1ZXJ5fVxyXG4gICAgICovXHJcbiAgICBoaWRlRXhwYW5kUm93OiBmdW5jdGlvbiAocmVjb3JkRXhwYW5kZWQpIHtcclxuXHJcbiAgICAgICAgcmVjb3JkRXhwYW5kZWQuaGlkZSgnZmFzdCcpXHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCf0L7QutCw0Lcg0LrQvtC90YLQtdC90YLQsCDQv9C+0LQg0YHRgtGA0L7QutC+0LlcclxuICAgICAqIEBwYXJhbSB7alF1ZXJ5fSByZWNvcmRFeHBhbmRlZFxyXG4gICAgICogQHJldHVybiB7alF1ZXJ5fVxyXG4gICAgICovXHJcbiAgICBzaG93RXhwYW5kUm93OiBmdW5jdGlvbiAocmVjb3JkRXhwYW5kZWQpIHtcclxuXHJcbiAgICAgICAgcmVjb3JkRXhwYW5kZWQuc2hvdygnZmFzdCcpXHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCj0LTQsNC70LXQvdC40LUg0LrQvtC90YLQtdC90YLQsCDQv9C+0LQg0YHRgtGA0L7QutC+0LlcclxuICAgICAqIEBwYXJhbSB7alF1ZXJ5fSByZWNvcmRFeHBhbmRlZFxyXG4gICAgICogQHJldHVybiB7alF1ZXJ5fVxyXG4gICAgICovXHJcbiAgICByZW1vdmVFeHBhbmRSb3c6IGZ1bmN0aW9uIChyZWNvcmRFeHBhbmRlZCkge1xyXG5cclxuICAgICAgICByZWNvcmRFeHBhbmRlZC5oaWRlKCdmYXN0JywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAkKHRoaXMpLnJlbW92ZSgpO1xyXG4gICAgICAgIH0pXHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSDQstGL0LHRgNCw0L3QvdGL0YUg0L3QsCDRgtCw0LHQu9C40YbQtSDRjdC70LXQvNC10L3RgtC+0LJcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0YWJsZUlkXHJcbiAgICAgKiBAcmV0dXJuIHtBcnJheX1cclxuICAgICAqL1xyXG4gICAgZ2V0U2VsZWN0ZWRJbmRleGVzOiBmdW5jdGlvbiAodGFibGVJZCkge1xyXG5cclxuICAgICAgICBsZXQgaW5kZXhlcyA9IFtdO1xyXG5cclxuICAgICAgICAkKCcjY29yZXVpLXRhYmxlLScgKyB0YWJsZUlkICsgJyA+IC5jb3JldWktdGFibGVfX2NvbnRhaW5lciA+IC5jb3JldWktdGFibGVfX3dyYXBwZXIgPiB0YWJsZSA+IHRib2R5ID4gdHIuY29yZXVpLXRhYmxlX19yZWNvcmQgPiB0ZC5jb3JldWktdGFibGVfX3NlbGVjdF9jb250YWluZXIgPiAuY29yZXVpLXRhYmxlX19zZWxlY3Q6Y2hlY2tlZCcpXHJcbiAgICAgICAgICAgIC5lYWNoKGZ1bmN0aW9uIChrZXksIGVsZW1lbnQpIHtcclxuICAgICAgICAgICAgICAgIGluZGV4ZXMucHVzaCgkKGVsZW1lbnQpLnZhbCgpKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiBpbmRleGVzO1xyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0LLRi9Cx0YDQsNC90L3Ri9GFINC90LAg0YLQsNCx0LvQuNGG0LUg0Y3Qu9C10LzQtdC90YLQvtCyXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGFibGVJZFxyXG4gICAgICogQHJldHVybiB7QXJyYXl9XHJcbiAgICAgKi9cclxuICAgIGdldFJvd3NTd2l0Y2hlczogZnVuY3Rpb24gKHRhYmxlSWQpIHtcclxuXHJcbiAgICAgICAgcmV0dXJuICQoJyNjb3JldWktdGFibGUtJyArIHRhYmxlSWQgKyAnID4gLmNvcmV1aS10YWJsZV9fY29udGFpbmVyID4gLmNvcmV1aS10YWJsZV9fd3JhcHBlciA+IHRhYmxlID4gdGJvZHkgPiB0ci5jb3JldWktdGFibGVfX3JlY29yZCA+IHRkLmNvcmV1aS10YWJsZV9fc3dpdGNoX2NvbnRhaW5lcicpO1xyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0Y3Qu9C10LzQtdC90YLQvtCyINCy0YvQsdC+0YDQsCDRgdGC0YDQvtC6XHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGFibGVJZFxyXG4gICAgICogQHJldHVybiB7QXJyYXl9XHJcbiAgICAgKi9cclxuICAgIGdldFJvd3NTZWxlY3RzOiBmdW5jdGlvbiAodGFibGVJZCkge1xyXG5cclxuICAgICAgICByZXR1cm4gJCgnI2NvcmV1aS10YWJsZS0nICsgdGFibGVJZCArICcgPiAuY29yZXVpLXRhYmxlX19jb250YWluZXIgPiAuY29yZXVpLXRhYmxlX193cmFwcGVyICA+IHRhYmxlID4gdGJvZHkgPiB0ci5jb3JldWktdGFibGVfX3JlY29yZCA+IHRkLmNvcmV1aS10YWJsZV9fc2VsZWN0X2NvbnRhaW5lcicpO1xyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0Y3Qu9C10LzQtdC90YLQsCDQtNC70Y8g0LLRi9Cx0L7RgNCwINCy0YHQtdGFINGB0YLRgNC+0LpcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0YWJsZUlkXHJcbiAgICAgKiBAcmV0dXJuIHtBcnJheX1cclxuICAgICAqL1xyXG4gICAgZ2V0Um93c1NlbGVjdEFsbDogZnVuY3Rpb24gKHRhYmxlSWQpIHtcclxuXHJcbiAgICAgICAgcmV0dXJuICQoJyNjb3JldWktdGFibGUtJyArIHRhYmxlSWQgKyAnID4gLmNvcmV1aS10YWJsZV9fY29udGFpbmVyID4gLmNvcmV1aS10YWJsZV9fd3JhcHBlciAgPiB0YWJsZSA+IHRoZWFkID4gdHIgPiB0ZCA+IC5jb3JldWktdGFibGVfX3NlbGVjdC1hbGwnKTtcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INGN0LvQtdC80LXQvdGC0L7QsiDQtNC70Y8g0YDQsNGB0LrRgNGL0YLQuNGPINGP0YfQtdC10LpcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0YWJsZUlkXHJcbiAgICAgKiBAcmV0dXJuIHtBcnJheX1cclxuICAgICAqL1xyXG4gICAgZ2V0Tm9XcmFwVG9nZ2xlczogZnVuY3Rpb24gKHRhYmxlSWQpIHtcclxuXHJcbiAgICAgICAgcmV0dXJuICQoJyNjb3JldWktdGFibGUtJyArIHRhYmxlSWQgKyAnID4gLmNvcmV1aS10YWJsZV9fY29udGFpbmVyID4gLmNvcmV1aS10YWJsZV9fd3JhcHBlciAgPiB0YWJsZSA+IHRib2R5ID4gdHIgPiB0ZC5jb3JldWlfdGFibGVfX25vLXdyYXAgPiBpLnRvZ2dsZScpO1xyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQktGL0LTQtdC70LXQvdC40LUg0YHRgtGA0L7QutC4INCyINGC0LDQsdC70LjRhtC1XHJcbiAgICAgKiBAcGFyYW0ge2pRdWVyeX0gdHJcclxuICAgICAqL1xyXG4gICAgc2VsZWN0VHIodHIpIHtcclxuXHJcbiAgICAgICAgdHIuYWRkQ2xhc3MoJ3RhYmxlLXByaW1hcnknKTtcclxuICAgICAgICAkKCcuY29yZXVpLXRhYmxlX19zZWxlY3QnLCB0cikucHJvcCgnY2hlY2tlZCcsIHRydWUpO1xyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQktGL0LTQtdC70LXQvdC40LUg0LLRgdC10YUg0YHRgtGA0L7QuiDQsiDRgtCw0LHQu9C40YbQtVxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRhYmxlSWRcclxuICAgICAqL1xyXG4gICAgc2VsZWN0VHJBbGwodGFibGVJZCkge1xyXG5cclxuICAgICAgICBsZXQgdGFibGVDb250YWluZXIgPSAnI2NvcmV1aS10YWJsZS0nICsgdGFibGVJZCArICcgPiAuY29yZXVpLXRhYmxlX19jb250YWluZXIgPiAuY29yZXVpLXRhYmxlX193cmFwcGVyID4gdGFibGUnO1xyXG5cclxuICAgICAgICAkKHRhYmxlQ29udGFpbmVyICsgJyA+IHRoZWFkID4gdHIgPiB0ZCA+IC5jb3JldWktdGFibGVfX3NlbGVjdC1hbGwnKS5wcm9wKCdjaGVja2VkJywgdHJ1ZSk7XHJcbiAgICAgICAgJCh0YWJsZUNvbnRhaW5lciArICcgPiB0Ym9keSA+IHRyLmNvcmV1aS10YWJsZV9fcmVjb3JkJykuYWRkQ2xhc3MoJ3RhYmxlLXByaW1hcnknKTtcclxuICAgICAgICAkKHRhYmxlQ29udGFpbmVyICsgJyA+IHRib2R5ID4gdHIuY29yZXVpLXRhYmxlX19yZWNvcmQgPiB0ZCA+IC5jb3JldWktdGFibGVfX3NlbGVjdCcpLnByb3AoJ2NoZWNrZWQnLCB0cnVlKTtcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KHQvdGP0YLQuNC1INCy0YvQtNC10LvQtdC90LjQtSDRgdGC0YDQvtC60Lgg0LIg0YLQsNCx0LvQuNGG0LVcclxuICAgICAqIEBwYXJhbSB7alF1ZXJ5fSB0clxyXG4gICAgICovXHJcbiAgICB1bnNlbGVjdFRyKHRyKSB7XHJcblxyXG4gICAgICAgICQodHIpLnJlbW92ZUNsYXNzKCd0YWJsZS1wcmltYXJ5Jyk7XHJcbiAgICAgICAgJCgnLmNvcmV1aS10YWJsZV9fc2VsZWN0JywgdHIpLnByb3AoJ2NoZWNrZWQnLCBmYWxzZSk7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCh0L3Rj9GC0LjQtSDQstGL0LTQtdC70LXQvdC40LUg0YHQviDQstGB0LXRhSDRgdGC0YDQvtC6INCyINGC0LDQsdC70LjRhtC1XHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGFibGVJZFxyXG4gICAgICovXHJcbiAgICB1bnNlbGVjdFRyQWxsKHRhYmxlSWQpIHtcclxuXHJcbiAgICAgICAgbGV0IHRhYmxlQ29udGFpbmVyID0gJyNjb3JldWktdGFibGUtJyArIHRhYmxlSWQgKyAnID4gLmNvcmV1aS10YWJsZV9fY29udGFpbmVyID4gLmNvcmV1aS10YWJsZV9fd3JhcHBlciA+IHRhYmxlJztcclxuXHJcbiAgICAgICAgJCh0YWJsZUNvbnRhaW5lciArICcgPiB0aGVhZCA+IHRyID4gdGQgPiAuY29yZXVpLXRhYmxlX19zZWxlY3QtYWxsJykucHJvcCgnY2hlY2tlZCcsIGZhbHNlKTtcclxuICAgICAgICAkKHRhYmxlQ29udGFpbmVyICsgJyA+IHRib2R5ID4gdHIuY29yZXVpLXRhYmxlX19yZWNvcmQnKS5yZW1vdmVDbGFzcygndGFibGUtcHJpbWFyeScpO1xyXG4gICAgICAgICQodGFibGVDb250YWluZXIgKyAnID4gdGJvZHkgPiB0ci5jb3JldWktdGFibGVfX3JlY29yZCA+IHRkLmNvcmV1aS10YWJsZV9fc2VsZWN0X2NvbnRhaW5lciA+IC5jb3JldWktdGFibGVfX3NlbGVjdCcpLnByb3AoJ2NoZWNrZWQnLCBmYWxzZSk7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCk0LjQutGB0LDRhtC40Y8g0LrQvtC70L7QvdC+0Log0YHQu9C10LLQsFxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRhYmxlSWRcclxuICAgICAqL1xyXG4gICAgZml4ZWRDb2xzTGVmdDogZnVuY3Rpb24gKHRhYmxlSWQpIHtcclxuXHJcbiAgICAgICAgbGV0IHRhYmxlV3JhcHBlciA9ICcjY29yZXVpLXRhYmxlLScgKyB0YWJsZUlkICsgJyA+IC5jb3JldWktdGFibGVfX2NvbnRhaW5lciA+IC5jb3JldWktdGFibGVfX3dyYXBwZXInO1xyXG4gICAgICAgIGxldCBjb2xPZmZzZXQgICAgPSAwO1xyXG5cclxuICAgICAgICAkKHRhYmxlV3JhcHBlciArICcgPiB0YWJsZSA+IHRoZWFkID4gdHI6bGFzdC1jaGlsZCA+IHRkLmNvcmV1aS10YWJsZV9fZml4ZWRfbGVmdCcpLmVhY2goZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBsZXQgaW5kZXggPSAkKHRoaXMpLmluZGV4KCkgKyAxO1xyXG5cclxuICAgICAgICAgICAgaWYgKGluZGV4ICE9PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAkKHRhYmxlV3JhcHBlciArICcgPiB0YWJsZSA+IHRoZWFkID4gdHI6bGFzdC1jaGlsZCA+IHRkOm50aC1jaGlsZCgnICsgaW5kZXggKyAnKScpLmNzcygnbGVmdCcsIGNvbE9mZnNldCArICdweCcpO1xyXG4gICAgICAgICAgICAgICAgJCh0YWJsZVdyYXBwZXIgKyAnID4gdGFibGUgPiB0Ym9keSA+IHRyID4gdGQ6bnRoLWNoaWxkKCcgKyBpbmRleCArICcpJylcclxuICAgICAgICAgICAgICAgICAgICAvLy5hZGRDbGFzcygnY29yZXVpLXRhYmxlX19maXhlZF9sZWZ0JylcclxuICAgICAgICAgICAgICAgICAgICAuY3NzKCdsZWZ0JywgY29sT2Zmc2V0ICsgJ3B4Jyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbE9mZnNldCArPSAkKHRoaXMpLm91dGVyV2lkdGgoKTtcclxuICAgICAgICB9KTtcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KTQuNC60YHQsNGG0LjRjyDQutC+0LvQvtC90L7QuiDRgdC/0YDQsNCy0LBcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0YWJsZUlkXHJcbiAgICAgKi9cclxuICAgIGZpeGVkQ29sc1JpZ2h0OiBmdW5jdGlvbiAodGFibGVJZCkge1xyXG5cclxuICAgICAgICBsZXQgdGFibGVXcmFwcGVyID0gJyNjb3JldWktdGFibGUtJyArIHRhYmxlSWQgKyAnID4gLmNvcmV1aS10YWJsZV9fY29udGFpbmVyID4gLmNvcmV1aS10YWJsZV9fd3JhcHBlcic7XHJcbiAgICAgICAgbGV0IGNvbE9mZnNldCAgICA9IDA7XHJcblxyXG4gICAgICAgICQoJCh0YWJsZVdyYXBwZXIgKyAnID4gdGFibGUgPiB0aGVhZCA+IHRyOmxhc3QtY2hpbGQgPiB0ZC5jb3JldWktdGFibGVfX2ZpeGVkX3JpZ2h0JykuZ2V0KCkucmV2ZXJzZSgpKS5lYWNoKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgbGV0IGluZGV4ICA9ICQodGhpcykuaW5kZXgoKSArIDE7XHJcblxyXG4gICAgICAgICAgICBpZiAoaW5kZXggIT09IDEpIHtcclxuICAgICAgICAgICAgICAgICQodGFibGVXcmFwcGVyICsgJyA+IHRhYmxlID4gdGhlYWQgPiB0cjpsYXN0LWNoaWxkID4gdGQ6bnRoLWNoaWxkKCcgKyBpbmRleCArICcpJykuY3NzKCdyaWdodCcsIGNvbE9mZnNldCArICdweCcpO1xyXG4gICAgICAgICAgICAgICAgJCh0YWJsZVdyYXBwZXIgKyAnID4gdGFibGUgPiB0Ym9keSA+IHRyID4gdGQ6bnRoLWNoaWxkKCcgKyBpbmRleCArICcpJylcclxuICAgICAgICAgICAgICAgICAgICAvLy5hZGRDbGFzcygnY29yZXVpLXRhYmxlX19maXhlZF9sZWZ0JylcclxuICAgICAgICAgICAgICAgICAgICAuY3NzKCdyaWdodCcsIGNvbE9mZnNldCArICdweCcpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb2xPZmZzZXQgKz0gJCh0aGlzKS5vdXRlcldpZHRoKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNvcmV1aVRhYmxlRWxlbWVudHM7IiwiXHJcbmltcG9ydCAnLi4vLi4vbm9kZV9tb2R1bGVzL2Vqcy9lanMubWluJztcclxuaW1wb3J0IGNvcmV1aVRhYmxlICAgICAgICAgZnJvbSAnLi9jb3JldWkudGFibGUnO1xyXG5pbXBvcnQgY29yZXVpVGFibGVUcGwgICAgICBmcm9tICcuL2NvcmV1aS50YWJsZS50ZW1wbGF0ZXMnO1xyXG5pbXBvcnQgY29yZXVpVGFibGVVdGlscyAgICBmcm9tIFwiLi9jb3JldWkudGFibGUudXRpbHNcIjtcclxuaW1wb3J0IGNvcmV1aVRhYmxlUmVuZGVyICAgZnJvbSBcIi4vY29yZXVpLnRhYmxlLnJlbmRlclwiO1xyXG5pbXBvcnQgY29yZXVpVGFibGVFbGVtZW50cyBmcm9tIFwiLi9jb3JldWkudGFibGUuZWxlbWVudHNcIjtcclxuaW1wb3J0IGNvcmV1aVRhYmxlUHJpdmF0ZSAgZnJvbSBcIi4vY29yZXVpLnRhYmxlLnByaXZhdGVcIjtcclxuXHJcblxyXG5sZXQgY29yZXVpVGFibGVJbnN0YW5jZSA9IHtcclxuXHJcbiAgICBfb3B0aW9uczoge1xyXG4gICAgICAgIGlkOiBudWxsLFxyXG4gICAgICAgIGNsYXNzOiAnJyxcclxuICAgICAgICBwcmltYXJ5S2V5OiAnaWQnLFxyXG4gICAgICAgIGxhbmc6ICdydScsXHJcbiAgICAgICAgd2lkdGg6IG51bGwsXHJcbiAgICAgICAgbWluV2lkdGg6IG51bGwsXHJcbiAgICAgICAgbWF4V2lkdGg6IG51bGwsXHJcbiAgICAgICAgaGVpZ2h0OiBudWxsLFxyXG4gICAgICAgIG1pbkhlaWdodDogbnVsbCxcclxuICAgICAgICBuYXhIZWlnaHQ6IG51bGwsXHJcbiAgICAgICAgb3ZlcmZsb3c6IGZhbHNlLFxyXG4gICAgICAgIHBhZ2U6IDEsXHJcbiAgICAgICAgcmVjb3Jkc1BlclBhZ2U6IDI1LFxyXG4gICAgICAgIHRoZWFkVG9wOiAwLFxyXG4gICAgICAgIHNhdmVTdGF0ZTogZmFsc2UsXHJcbiAgICAgICAgbm9XcmFwOiBmYWxzZSxcclxuICAgICAgICBub1dyYXBUb2dnbGU6IGZhbHNlLFxyXG4gICAgICAgIGNvbHVtbkhlYWRlcnM6IHRydWUsXHJcblxyXG4gICAgICAgIHJlY29yZHNSZXF1ZXN0OiB7XHJcbiAgICAgICAgICAgIG1ldGhvZDogJ0dFVCcsXHJcbiAgICAgICAgICAgIHVybDogbnVsbCwgIC8vICcvbW9kL2luZGV4L29yZGVycy8/cGFnZT1bcGFnZV0nXHJcbiAgICAgICAgICAgIHBhcmFtczoge1xyXG4gICAgICAgICAgICAgICAgcGFnZTogJ3BhZ2UnLFxyXG4gICAgICAgICAgICAgICAgY291bnQ6ICdjb3VudCcsXHJcbiAgICAgICAgICAgICAgICBzdGFydDogJ3N0YXJ0JyxcclxuICAgICAgICAgICAgICAgIGVuZDogJ2VuZCcsXHJcbiAgICAgICAgICAgICAgICBzb3J0OiAnc29ydCcsXHJcbiAgICAgICAgICAgICAgICBzZWFyY2g6ICdzZWFyY2gnLFxyXG4gICAgICAgICAgICAgICAgZmlsdGVyOiAnZmlsdGVyJyxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBncm91cDoge1xyXG4gICAgICAgICAgICBmaWVsZDogbnVsbCxcclxuICAgICAgICAgICAgYXR0cjoge30sXHJcbiAgICAgICAgICAgIHJlbmRlcjogbnVsbFxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIG9uQ2xpY2s6IG51bGwsXHJcbiAgICAgICAgb25DbGlja1VybDogbnVsbCxcclxuICAgICAgICBzb3J0OiBbXSxcclxuICAgICAgICBoZWFkZXI6IFtdLFxyXG4gICAgICAgIGZvb3RlcjogW10sXHJcbiAgICAgICAgY29sdW1uR3JvdXBzSGVhZGVyOiBbXSxcclxuICAgICAgICBzZWFyY2g6IHtcclxuICAgICAgICAgICAgbGFiZWxXaWR0aDogMjAwLFxyXG4gICAgICAgICAgICBjb250cm9sczogW10sXHJcbiAgICAgICAgfSxcclxuICAgICAgICBjb2x1bW5zOiBbXSxcclxuICAgICAgICBjb2x1bW5Hcm91cHNGb290ZXI6IFtdLFxyXG4gICAgICAgIHJlY29yZHM6IFtdXHJcbiAgICB9LFxyXG5cclxuICAgIF9pZDogJycsXHJcbiAgICBfcGFnZTogMSxcclxuICAgIF9yZWNvcmRzSW5kZXg6IDEsXHJcbiAgICBfcmVjb3Jkc1BlclBhZ2U6IDI1LFxyXG4gICAgX3JlY29yZHNUb3RhbDogMCxcclxuICAgIF9yZWNvcmRzTnVtYmVyOiAxLFxyXG4gICAgX3NlcTogMSxcclxuICAgIF9pc1JlY29yZHNSZXF1ZXN0OiBmYWxzZSxcclxuICAgIF9jb3VudENvbHVtbnNTaG93OiAwLFxyXG5cclxuICAgIF9yZWNvcmRzOiBbXSxcclxuICAgIF9zb3J0OiBbXSxcclxuICAgIF9jb2x1bW5zOiBbXSxcclxuICAgIF9zZWFyY2g6IFtdLFxyXG4gICAgX2ZpbHRlcnM6IFtdLFxyXG4gICAgX2NvbnRyb2xzOiBbXSxcclxuICAgIF9jb250cm9sc1Bvc2l0aW9uczoge1xyXG4gICAgICAgIGhlYWRlcjogW10sXHJcbiAgICAgICAgZm9vdGVyOiBbXSxcclxuICAgIH0sXHJcbiAgICBfZXZlbnRzOiB7fSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQmNC90LjRhtC40LDQu9C40LfQsNGG0LjRj1xyXG4gICAgICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnNcclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIF9pbml0OiBmdW5jdGlvbiAob3B0aW9ucykge1xyXG5cclxuICAgICAgICB0aGlzLl9vcHRpb25zID0gJC5leHRlbmQodHJ1ZSwge30sIHRoaXMuX29wdGlvbnMsIG9wdGlvbnMpO1xyXG4gICAgICAgIHRoaXMuX2V2ZW50cyAgPSB7fTtcclxuICAgICAgICB0aGlzLl9pZCAgICAgID0gdGhpcy5fb3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnaWQnKSAmJiB0eXBlb2YgdGhpcy5fb3B0aW9ucy5pZCA9PT0gJ3N0cmluZycgJiYgdGhpcy5fb3B0aW9ucy5pZFxyXG4gICAgICAgICAgICA/IHRoaXMuX29wdGlvbnMuaWRcclxuICAgICAgICAgICAgOiBjb3JldWlUYWJsZVV0aWxzLmhhc2hDb2RlKCk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLnBhZ2UgPiAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3BhZ2UgPSB0aGlzLl9vcHRpb25zLnBhZ2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLnJlY29yZHNQZXJQYWdlID4gMCkge1xyXG4gICAgICAgICAgICB0aGlzLl9yZWNvcmRzUGVyUGFnZSA9IHRoaXMuX29wdGlvbnMucmVjb3Jkc1BlclBhZ2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9pc1JlY29yZHNSZXF1ZXN0ID0gKFxyXG4gICAgICAgICAgICB0aGlzLl9vcHRpb25zLmhhc093blByb3BlcnR5KCdyZWNvcmRzUmVxdWVzdCcpICYmXHJcbiAgICAgICAgICAgIGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QodGhpcy5fb3B0aW9ucy5yZWNvcmRzUmVxdWVzdCkgJiZcclxuICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy5yZWNvcmRzUmVxdWVzdC5oYXNPd25Qcm9wZXJ0eSgndXJsJykgJiZcclxuICAgICAgICAgICAgdHlwZW9mIHRoaXMuX29wdGlvbnMucmVjb3Jkc1JlcXVlc3QudXJsID09PSAnc3RyaW5nJyAmJlxyXG4gICAgICAgICAgICB0aGlzLl9vcHRpb25zLnJlY29yZHNSZXF1ZXN0LnVybCAhPT0gJycgJiZcclxuICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy5yZWNvcmRzUmVxdWVzdC51cmwgIT09ICcjJ1xyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9pc1JlY29yZHNSZXF1ZXN0KSB7XHJcbiAgICAgICAgICAgIGlmICggISB0aGlzLl9vcHRpb25zLnJlY29yZHNSZXF1ZXN0Lmhhc093blByb3BlcnR5KCdtZXRob2QnKSB8fFxyXG4gICAgICAgICAgICAgICAgdHlwZW9mIHRoaXMuX29wdGlvbnMucmVjb3Jkc1JlcXVlc3QubWV0aG9kICE9PSAnc3RyaW5nJ1xyXG4gICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX29wdGlvbnMucmVjb3Jkc1JlcXVlc3QubWV0aG9kID0gJ0dFVCc7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHRoaXMuX29wdGlvbnMucmVjb3JkcykpIHtcclxuICAgICAgICAgICAgY29yZXVpVGFibGVQcml2YXRlLnNldFJlY29yZHModGhpcywgdGhpcy5fb3B0aW9ucy5yZWNvcmRzKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPINC60L7Qu9C+0L3QvtC6XHJcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLl9vcHRpb25zLmNvbHVtbnMgPT09ICdvYmplY3QnICYmXHJcbiAgICAgICAgICAgIEFycmF5LmlzQXJyYXkodGhpcy5fb3B0aW9ucy5jb2x1bW5zKSAmJlxyXG4gICAgICAgICAgICB0aGlzLl9vcHRpb25zLmNvbHVtbnMubGVuZ3RoID4gMFxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICBjb3JldWlUYWJsZVByaXZhdGUuaW5pdENvbHVtbnModGhpcywgdGhpcy5fb3B0aW9ucy5jb2x1bW5zKTtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICAvLyDQmNC90LjRhtC40LDQu9C40LfQsNGG0LjRjyDQv9C+0LjRgdC60L7QstGL0YUg0L/QvtC70LXQuVxyXG4gICAgICAgIGlmIChjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KHRoaXMuX29wdGlvbnMuc2VhcmNoKSAmJlxyXG4gICAgICAgICAgICB0eXBlb2YgdGhpcy5fb3B0aW9ucy5zZWFyY2guY29udHJvbHMgPT09ICdvYmplY3QnICYmXHJcbiAgICAgICAgICAgIEFycmF5LmlzQXJyYXkodGhpcy5fb3B0aW9ucy5zZWFyY2guY29udHJvbHMpICYmXHJcbiAgICAgICAgICAgIHRoaXMuX29wdGlvbnMuc2VhcmNoLmNvbnRyb2xzLmxlbmd0aCA+IDBcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgY29yZXVpVGFibGVQcml2YXRlLmluaXRTZWFyY2godGhpcywgdGhpcy5fb3B0aW9ucy5zZWFyY2guY29udHJvbHMpO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIC8vINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPINC60L7QvdGC0YDQvtC70L7QsiDQuCDRhNC40LvRjNGC0YDQvtCyXHJcbiAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMuaGFzT3duUHJvcGVydHkoJ2hlYWRlcicpICYmXHJcbiAgICAgICAgICAgIEFycmF5LmlzQXJyYXkodGhpcy5fb3B0aW9ucy5oZWFkZXIpICYmXHJcbiAgICAgICAgICAgIHRoaXMuX29wdGlvbnMuaGVhZGVyLmxlbmd0aCA+IDBcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgY29yZXVpVGFibGVQcml2YXRlLmluaXRDb250cm9scyh0aGlzLCB0aGlzLl9vcHRpb25zLmhlYWRlciwgJ2hlYWRlcicpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMuaGFzT3duUHJvcGVydHkoJ2Zvb3RlcicpICYmXHJcbiAgICAgICAgICAgIEFycmF5LmlzQXJyYXkodGhpcy5fb3B0aW9ucy5mb290ZXIpICYmXHJcbiAgICAgICAgICAgIHRoaXMuX29wdGlvbnMuZm9vdGVyLmxlbmd0aCA+IDBcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgY29yZXVpVGFibGVQcml2YXRlLmluaXRDb250cm9scyh0aGlzLCB0aGlzLl9vcHRpb25zLmZvb3RlciwgJ2Zvb3RlcicpO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIC8vINCh0L7RgNGC0LjRgNC+0LLQutCwXHJcbiAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMuc2F2ZVN0YXRlICYmIHRoaXMuX29wdGlvbnMuaWQpIHtcclxuICAgICAgICAgICAgbGV0IHNvcnQgPSBjb3JldWlUYWJsZVByaXZhdGUuZ2V0U3RvcmFnZUZpZWxkKHRoaXMuZ2V0SWQoKSwgJ3NvcnQnKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHNvcnQpICYmIHNvcnQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgY29yZXVpVGFibGVQcml2YXRlLmluaXRTb3J0KHRoaXMsIHNvcnQpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9yZWNvcmRzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZWNvcmRzID0gY29yZXVpVGFibGVQcml2YXRlLnNvcnRSZWNvcmRzQnlGaWVsZHModGhpcy5fcmVjb3JkcywgdGhpcy5fc29ydCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMuaGFzT3duUHJvcGVydHkoJ3NvcnQnKSAmJlxyXG4gICAgICAgICAgICAgICAgQXJyYXkuaXNBcnJheSh0aGlzLl9vcHRpb25zLnNvcnQpICYmXHJcbiAgICAgICAgICAgICAgICB0aGlzLl9vcHRpb25zLnNvcnQubGVuZ3RoID4gMFxyXG4gICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgIGNvcmV1aVRhYmxlUHJpdmF0ZS5pbml0U29ydCh0aGlzLCB0aGlzLl9vcHRpb25zLnNvcnQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQmNC90LjRhtC40LDQu9C40LfQsNGG0LjRjyDRgdC+0LHRi9GC0LjQuSDRgtCw0LHQu9C40YbRi1xyXG4gICAgICovXHJcbiAgICBpbml0RXZlbnRzOiBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgIGxldCB0aGF0ID0gdGhpcztcclxuXHJcbiAgICAgICAgLy8g0J/QvtC60LDQtyDRgdGC0YDQvtC6XHJcbiAgICAgICAgdGhpcy5vbigncmVjb3Jkc19zaG93JywgZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAgICAgLy8g0J/QtdGA0LXRhdC+0LQg0L/QviDRgdGB0YvQu9C60LVcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGF0Ll9vcHRpb25zLm9uQ2xpY2tVcmwgPT09ICdzdHJpbmcnICYmIHRoYXQuX29wdGlvbnMub25DbGlja1VybCkge1xyXG4gICAgICAgICAgICAgICAgY29yZXVpVGFibGVFbGVtZW50cy5nZXRUclJlY29yZHModGhhdC5nZXRJZCgpKS5jbGljayhmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJlY29yZEtleSA9ICQodGhpcykuZGF0YSgncmVjb3JkLWluZGV4Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJlY29yZCAgICA9IHRoYXQuZ2V0UmVjb3JkQnlJbmRleChyZWNvcmRLZXkpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoICEgcmVjb3JkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGxldCB1cmwgPSB0aGF0Ll9vcHRpb25zLm9uQ2xpY2tVcmw7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICQuZWFjaChyZWNvcmQuZGF0YSwgZnVuY3Rpb24gKGZpZWxkLCB2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgZmllbGRRdW90ZSA9IGZpZWxkLnJlcGxhY2UoLyhbXlxcd1xcZF0pL2csICdcXFxcJDEnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdXJsID0gdXJsLnJlcGxhY2UoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgUmVnRXhwKCdcXFxcWycgKyBmaWVsZFF1b3RlICsgJ1xcXFxdJywgJ2cnKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh1cmwgJiYgdXJsICE9PSAnIycpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbG9jYXRpb24uaHJlZiA9IHVybDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8g0KHQvtCx0YvRgtC40LUg0L3QsNC20LDRgtC40Y8g0L3QsCDRgdGC0YDQvtC60YNcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGF0Ll9vcHRpb25zLm9uQ2xpY2sgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgICAgIGNvcmV1aVRhYmxlRWxlbWVudHMuZ2V0VHJSZWNvcmRzKHRoYXQuZ2V0SWQoKSkuY2xpY2soZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJlY29yZEtleSA9ICQodGhpcykuZGF0YSgncmVjb3JkLWluZGV4Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJlY29yZCAgICA9IHRoYXQuZ2V0UmVjb3JkQnlJbmRleChyZWNvcmRLZXkpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoICEgcmVjb3JkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHRoYXQuX29wdGlvbnMub25DbGljayhldmVudCwgcmVjb3JkKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyDQoNCw0YHQutGA0YvRgtC40LUg0YHRgtGA0L7QutC4XHJcbiAgICAgICAgICAgIGNvcmV1aVRhYmxlRWxlbWVudHMuZ2V0Tm9XcmFwVG9nZ2xlcyh0aGF0LmdldElkKCkpLmNsaWNrKGZ1bmN0aW9uIChldmVudCkge1xyXG5cclxuICAgICAgICAgICAgICAgIGV2ZW50LmNhbmNlbEJ1YmJsZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgICAgICAgICAgIGxldCBwYXJlbnQgPSAkKHRoaXMpLnBhcmVudCgpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChwYXJlbnQuaGFzQ2xhc3MoJ3Nob3duJykpIHtcclxuICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLnJlbW92ZUNsYXNzKCdiaS1jYXJldC11cC1maWxsJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5hZGRDbGFzcygnYmktY2FyZXQtZG93bi1maWxsJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50LnJlbW92ZUNsYXNzKCdzaG93bicpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLnJlbW92ZUNsYXNzKCdiaS1jYXJldC1kb3duLWZpbGwnKTtcclxuICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLmFkZENsYXNzKCdiaS1jYXJldC11cC1maWxsJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50LmFkZENsYXNzKCdzaG93bicpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIC8vINCk0LjQutGB0LDRhtC40Y8g0LrQvtC70L7QvdC+0LpcclxuICAgICAgICAgICAgY29yZXVpVGFibGVFbGVtZW50cy5maXhlZENvbHNMZWZ0KHRoYXQuZ2V0SWQoKSlcclxuICAgICAgICAgICAgY29yZXVpVGFibGVFbGVtZW50cy5maXhlZENvbHNSaWdodCh0aGF0LmdldElkKCkpXHJcbiAgICAgICAgfSk7XHJcblxyXG5cclxuICAgICAgICAvLyDQn9C+0LrQsNC3INGC0LDQsdC70LjRhtGLXHJcbiAgICAgICAgdGhpcy5vbigndGFibGVfc2hvdycsIGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgICAgIGxldCBzb3J0YWJsZUNvbHVtbnMgPSBjb3JldWlUYWJsZUVsZW1lbnRzLmdldFRhYmxlU29ydGFibGUodGhhdC5nZXRJZCgpKTtcclxuICAgICAgICAgICAgaWYgKHNvcnRhYmxlQ29sdW1uc1swXSkge1xyXG4gICAgICAgICAgICAgICAgc29ydGFibGVDb2x1bW5zLmNsaWNrKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgZmllbGQgPSAkKHRoaXMpLmRhdGEoJ2ZpZWxkJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChmaWVsZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgc29ydGluZyAgICAgID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjdXJyZW50T3JkZXIgPSBudWxsO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgJC5lYWNoKHRoYXQuX3NvcnQsIGZ1bmN0aW9uIChrZXksIHNvcnRGaWVsZCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmaWVsZCA9PT0gc29ydEZpZWxkLmZpZWxkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudE9yZGVyID0gc29ydEZpZWxkLm9yZGVyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRPcmRlciA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc29ydGluZy5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWVsZDogZmllbGQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3JkZXI6ICdhc2MnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGN1cnJlbnRPcmRlciA9PT0gJ2FzYycpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvcnRpbmcucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmllbGQ6IGZpZWxkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9yZGVyOiAnZGVzYycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzb3J0aW5nLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC5zb3J0RGVmYXVsdCgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQuc29ydEZpZWxkcyhzb3J0aW5nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG5cclxuICAgICAgICAvLyDQodC+0LHRi9GC0LjRjyDRgdC80LXQvdGLINGB0L7RgdGC0L7Rj9C90LjRj1xyXG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLnNhdmVTdGF0ZSAmJiB0aGlzLl9vcHRpb25zLmlkKSB7XHJcbiAgICAgICAgICAgIHRoaXMub24oJ3JlY29yZHNfc29ydCcsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGNvcmV1aVRhYmxlUHJpdmF0ZS5zZXRTdG9yYWdlRmllbGQodGhhdC5nZXRJZCgpLCAnc29ydCcsIHRoYXQuX3NvcnQpO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMub24oJ3NlYXJjaF9jaGFuZ2UnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBjb3JldWlUYWJsZVByaXZhdGUuc2V0U3RvcmFnZUZpZWxkKHRoYXQuZ2V0SWQoKSwgJ3NlYXJjaCcsIHRoYXQuZ2V0U2VhcmNoRGF0YSgpKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLm9uKCdmaWx0ZXJzX2NoYW5nZScsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGNvcmV1aVRhYmxlUHJpdmF0ZS5zZXRTdG9yYWdlRmllbGQodGhhdC5nZXRJZCgpLCAnZmlsdGVycycsIHRoYXQuZ2V0RmlsdGVyRGF0YSgpKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLm9uKCdjb2x1bW5zX2NoYW5nZScsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGxldCBjb2x1bW5zID0gW107XHJcblxyXG4gICAgICAgICAgICAgICAgJC5lYWNoKHRoYXQuX2NvbHVtbnMsIGZ1bmN0aW9uIChrZXksIGNvbHVtbikge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBjb2x1bW5PcHRpb25zID0gY29sdW1uLmdldE9wdGlvbnMoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY29sdW1ucy5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmllbGQ6IGNvbHVtbk9wdGlvbnMuZmllbGQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzU2hvdzogY29sdW1uLmlzU2hvdygpLFxyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICBjb3JldWlUYWJsZVByaXZhdGUuc2V0U3RvcmFnZUZpZWxkKHRoYXQuZ2V0SWQoKSwgJ2NvbHVtbnMnLCBjb2x1bW5zKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgY29yZXVpVGFibGVQcml2YXRlLl90cmlnZ2VyKHRoaXMsICd0YWJsZV9zaG93JywgWyB0aGlzIF0pO1xyXG4gICAgICAgIGNvcmV1aVRhYmxlUHJpdmF0ZS5fdHJpZ2dlcih0aGlzLCAnY29udGFpbmVyX3Nob3cnKTtcclxuXHJcbiAgICAgICAgLy8g0JLRi9C30L7QsiDRgdC+0LHRi9GC0LjRjyDQv9C+0LrQsNC30LAg0YHRgtGA0L7QulxyXG4gICAgICAgIGlmICggISB0aGlzLl9pc1JlY29yZHNSZXF1ZXN0KSB7XHJcbiAgICAgICAgICAgIGNvcmV1aVRhYmxlUHJpdmF0ZS5fdHJpZ2dlcih0aGlzLCAncmVjb3Jkc19zaG93JywgWyB0aGlzIF0pO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC40LTQtdC90YLQuNGE0LjQutCw0YLQvtGA0LAg0YLQsNCx0LvQuNGG0YtcclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIGdldElkOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lkO1xyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0L7Qv9GG0LjQuSDRgtCw0LHQu9C40YbRi1xyXG4gICAgICogQHJldHVybnMgeyp9XHJcbiAgICAgKi9cclxuICAgIGdldE9wdGlvbnM6IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgcmV0dXJuICQuZXh0ZW5kKHRydWUsIHt9LCB0aGlzLl9vcHRpb25zKTtcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBlbGVtZW50XHJcbiAgICAgKiBAcmV0dXJucyB7Kn1cclxuICAgICAqL1xyXG4gICAgcmVuZGVyOiBmdW5jdGlvbihlbGVtZW50KSB7XHJcblxyXG4gICAgICAgIGxldCB0aGF0ICAgICAgICA9IHRoaXM7XHJcbiAgICAgICAgbGV0IHdpZHRoU2l6ZXMgID0gW107XHJcbiAgICAgICAgbGV0IGhlaWdodFNpemVzID0gW107XHJcbiAgICAgICAgbGV0IHJlbmRlciAgICAgID0ge1xyXG4gICAgICAgICAgICBoZWFkZXJzT3V0OiBbXSxcclxuICAgICAgICAgICAgaGVhZGVyc0luOiBbXSxcclxuICAgICAgICAgICAgZm9vdGVyc0luOiBbXSxcclxuICAgICAgICAgICAgZm9vdGVyc091dDogW11cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB0aGlzLl9yZWNvcmRzVG90YWwgPSB0aGlzLl9yZWNvcmRzLmxlbmd0aDtcclxuXHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLndpZHRoID4gMCkge1xyXG4gICAgICAgICAgICBsZXQgdW5pdCA9IHR5cGVvZiB0aGlzLl9vcHRpb25zLndpZHRoID09PSAnbnVtYmVyJyA/ICdweCcgOiAnJztcclxuICAgICAgICAgICAgd2lkdGhTaXplcy5wdXNoKCd3aWR0aDonICsgdGhpcy5fb3B0aW9ucy53aWR0aCArIHVuaXQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMubWluV2lkdGggPiAwKSB7XHJcbiAgICAgICAgICAgIGxldCB1bml0ID0gdHlwZW9mIHRoaXMuX29wdGlvbnMubWluV2lkdGggPT09ICdudW1iZXInID8gJ3B4JyA6ICcnO1xyXG4gICAgICAgICAgICB3aWR0aFNpemVzLnB1c2goJ21pbi13aWR0aDonICsgdGhpcy5fb3B0aW9ucy5taW5XaWR0aCArIHVuaXQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMubWF4V2lkdGggPiAwKSB7XHJcbiAgICAgICAgICAgIGxldCB1bml0ID0gdHlwZW9mIHRoaXMuX29wdGlvbnMubWF4V2lkdGggPT09ICdudW1iZXInID8gJ3B4JyA6ICcnO1xyXG4gICAgICAgICAgICB3aWR0aFNpemVzLnB1c2goJ21heC13aWR0aDonICsgdGhpcy5fb3B0aW9ucy5tYXhXaWR0aCArIHVuaXQpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy5vdmVyZmxvdyA9IHRydWU7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMuaGVpZ2h0ID4gMCkge1xyXG4gICAgICAgICAgICBsZXQgdW5pdCA9IHR5cGVvZiB0aGlzLl9vcHRpb25zLmhlaWdodCA9PT0gJ251bWJlcicgPyAncHgnIDogJyc7XHJcbiAgICAgICAgICAgIGhlaWdodFNpemVzLnB1c2goJ2hlaWdodDonICsgdGhpcy5fb3B0aW9ucy5oZWlnaHQgKyB1bml0KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLm1pbkhlaWdodCA+IDApIHtcclxuICAgICAgICAgICAgbGV0IHVuaXQgPSB0eXBlb2YgdGhpcy5fb3B0aW9ucy5taW5IZWlnaHQgPT09ICdudW1iZXInID8gJ3B4JyA6ICcnO1xyXG4gICAgICAgICAgICBoZWlnaHRTaXplcy5wdXNoKCdtaW4taGVpZ2h0OicgKyB0aGlzLl9vcHRpb25zLm1pbkhlaWdodCArIHVuaXQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMubWF4SGVpZ2h0ID4gMCkge1xyXG4gICAgICAgICAgICBsZXQgdW5pdCA9IHR5cGVvZiB0aGlzLl9vcHRpb25zLm1heEhlaWdodCA9PT0gJ251bWJlcicgPyAncHgnIDogJyc7XHJcbiAgICAgICAgICAgIGhlaWdodFNpemVzLnB1c2goJ21heC1oZWlnaHQ6JyArIHRoaXMuX29wdGlvbnMubWF4SGVpZ2h0ICsgdW5pdCk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLl9vcHRpb25zLm92ZXJmbG93ID0gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG5cclxuXHJcbiAgICAgICAgLy8g0JLQtdGA0YXQvdC40LUg0Y3Qu9C10LzQtdC90YLRiyDRg9C/0YDQsNCy0LvQtdC90LjRj1xyXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHRoaXMuX2NvbnRyb2xzUG9zaXRpb25zLmhlYWRlcikgJiZcclxuICAgICAgICAgICAgdGhpcy5fY29udHJvbHNQb3NpdGlvbnMuaGVhZGVyLmxlbmd0aCA+IDBcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgJC5lYWNoKHRoaXMuX2NvbnRyb2xzUG9zaXRpb25zLmhlYWRlciwgZnVuY3Rpb24gKGtleSwgaGVhZGVyKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgY29udHJvbHNMZWZ0ICAgPSBbXTtcclxuICAgICAgICAgICAgICAgIGxldCBjb250cm9sc0NlbnRlciA9IFtdO1xyXG4gICAgICAgICAgICAgICAgbGV0IGNvbnRyb2xzUmlnaHQgID0gW107XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoaGVhZGVyLmxlZnQpICYmIGhlYWRlci5sZWZ0Lmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAkLmVhY2goaGVhZGVyLmxlZnQsIGZ1bmN0aW9uIChrZXksIGNvbnRyb2wpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGNvbnRyb2xSZW5kZXIgPSBjb3JldWlUYWJsZVJlbmRlci5yZW5kZXJDb250cm9sKHRoYXQsIGNvbnRyb2wpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbnRyb2xSZW5kZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xzTGVmdC5wdXNoKGNvbnRyb2xSZW5kZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoaGVhZGVyLmNlbnRlcikgJiYgaGVhZGVyLmNlbnRlci5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJC5lYWNoKGhlYWRlci5jZW50ZXIsIGZ1bmN0aW9uIChrZXksIGNvbnRyb2wpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGNvbnRyb2xSZW5kZXIgPSBjb3JldWlUYWJsZVJlbmRlci5yZW5kZXJDb250cm9sKHRoYXQsIGNvbnRyb2wpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbnRyb2xSZW5kZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xzQ2VudGVyLnB1c2goY29udHJvbFJlbmRlcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShoZWFkZXIucmlnaHQpICYmIGhlYWRlci5yaWdodC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJC5lYWNoKGhlYWRlci5yaWdodCwgZnVuY3Rpb24gKGtleSwgY29udHJvbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgY29udHJvbFJlbmRlciA9IGNvcmV1aVRhYmxlUmVuZGVyLnJlbmRlckNvbnRyb2wodGhhdCwgY29udHJvbCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29udHJvbFJlbmRlcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbHNSaWdodC5wdXNoKGNvbnRyb2xSZW5kZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGNvbnRyb2xzTGVmdC5sZW5ndGggPiAwIHx8IGNvbnRyb2xzQ2VudGVyLmxlbmd0aCA+IDAgfHwgY29udHJvbHNSaWdodC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGhlYWRlci50eXBlID09PSAnaW4nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBoZWFkZXJDb250cm9scyA9ICQoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlanMucmVuZGVyKGNvcmV1aVRhYmxlVHBsWyd0YWJsZS1jb250cm9scy1oZWFkZXIuaHRtbCddLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbHNMZWZ0OiBjb250cm9sc0xlZnQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbHNDZW50ZXI6IGNvbnRyb2xzQ2VudGVyLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xzUmlnaHQ6IGNvbnRyb2xzUmlnaHQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbnRyb2xzTGVmdC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLmVhY2goY29udHJvbHNMZWZ0LCBmdW5jdGlvbiAoa2V5LCBjb250cm9sKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyQ29udHJvbHMuZmluZCgnLmNvcmV1aS10YWJsZV9fY29udHJvbHNfbGVmdCcpLmFwcGVuZChjb250cm9sKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb250cm9sc0NlbnRlci5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLmVhY2goY29udHJvbHNDZW50ZXIsIGZ1bmN0aW9uIChrZXksIGNvbnRyb2wpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJDb250cm9scy5maW5kKCcuY29yZXVpLXRhYmxlX19jb250cm9sc19jZW50ZXInKS5hcHBlbmQoY29udHJvbClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29udHJvbHNSaWdodC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLmVhY2goY29udHJvbHNSaWdodCwgZnVuY3Rpb24gKGtleSwgY29udHJvbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlckNvbnRyb2xzLmZpbmQoJy5jb3JldWktdGFibGVfX2NvbnRyb2xzX3JpZ2h0JykuYXBwZW5kKGNvbnRyb2wpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVyLmhlYWRlcnNJbi5wdXNoKGhlYWRlckNvbnRyb2xzKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGhlYWRlckNvbnRyb2xzID0gJChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVqcy5yZW5kZXIoY29yZXVpVGFibGVUcGxbJ3RhYmxlLWNvbnRyb2xzLWhlYWRlci1vdXQuaHRtbCddLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbHNMZWZ0OiBjb250cm9sc0xlZnQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbHNDZW50ZXI6IGNvbnRyb2xzQ2VudGVyLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xzUmlnaHQ6IGNvbnRyb2xzUmlnaHQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbnRyb2xzTGVmdC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLmVhY2goY29udHJvbHNMZWZ0LCBmdW5jdGlvbiAoa2V5LCBjb250cm9sKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyQ29udHJvbHMuZmluZCgnLmNvcmV1aS10YWJsZV9fY29udHJvbHNfbGVmdCcpLmFwcGVuZChjb250cm9sKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb250cm9sc0NlbnRlci5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLmVhY2goY29udHJvbHNDZW50ZXIsIGZ1bmN0aW9uIChrZXksIGNvbnRyb2wpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJDb250cm9scy5maW5kKCcuY29yZXVpLXRhYmxlX19jb250cm9sc19jZW50ZXInKS5hcHBlbmQoY29udHJvbClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29udHJvbHNSaWdodC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLmVhY2goY29udHJvbHNSaWdodCwgZnVuY3Rpb24gKGtleSwgY29udHJvbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlckNvbnRyb2xzLmZpbmQoJy5jb3JldWktdGFibGVfX2NvbnRyb2xzX3JpZ2h0JykuYXBwZW5kKGNvbnRyb2wpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVyLmhlYWRlcnNPdXQucHVzaChoZWFkZXJDb250cm9scyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vINCd0LjQttC90LjQtSDRjdC70LXQvNC10L3RgtGLINGD0L/RgNCw0LLQu9C10L3QuNGPXHJcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodGhpcy5fY29udHJvbHNQb3NpdGlvbnMuZm9vdGVyKSAmJlxyXG4gICAgICAgICAgICB0aGlzLl9jb250cm9sc1Bvc2l0aW9ucy5mb290ZXIubGVuZ3RoID4gMFxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICAkLmVhY2godGhpcy5fY29udHJvbHNQb3NpdGlvbnMuZm9vdGVyLCBmdW5jdGlvbiAoa2V5LCBmb290ZXIpIHtcclxuICAgICAgICAgICAgICAgIGxldCBjb250cm9sc0xlZnQgICA9IFtdO1xyXG4gICAgICAgICAgICAgICAgbGV0IGNvbnRyb2xzQ2VudGVyID0gW107XHJcbiAgICAgICAgICAgICAgICBsZXQgY29udHJvbHNSaWdodCAgPSBbXTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShmb290ZXIubGVmdCkgJiYgZm9vdGVyLmxlZnQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICQuZWFjaChmb290ZXIubGVmdCwgZnVuY3Rpb24gKGtleSwgY29udHJvbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgY29udHJvbFJlbmRlciA9IGNvcmV1aVRhYmxlUmVuZGVyLnJlbmRlckNvbnRyb2wodGhhdCwgY29udHJvbCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29udHJvbFJlbmRlcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbHNMZWZ0LnB1c2goY29udHJvbFJlbmRlcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShmb290ZXIuY2VudGVyKSAmJiBmb290ZXIuY2VudGVyLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAkLmVhY2goZm9vdGVyLmNlbnRlciwgZnVuY3Rpb24gKGtleSwgY29udHJvbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgY29udHJvbFJlbmRlciA9IGNvcmV1aVRhYmxlUmVuZGVyLnJlbmRlckNvbnRyb2wodGhhdCwgY29udHJvbCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29udHJvbFJlbmRlcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbHNDZW50ZXIucHVzaChjb250cm9sUmVuZGVyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGZvb3Rlci5yaWdodCkgJiYgZm9vdGVyLnJpZ2h0Lmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAkLmVhY2goZm9vdGVyLnJpZ2h0LCBmdW5jdGlvbiAoa2V5LCBjb250cm9sKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjb250cm9sUmVuZGVyID0gY29yZXVpVGFibGVSZW5kZXIucmVuZGVyQ29udHJvbCh0aGF0LCBjb250cm9sKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb250cm9sUmVuZGVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sc1JpZ2h0LnB1c2goY29udHJvbFJlbmRlcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY29udHJvbHNMZWZ0Lmxlbmd0aCA+IDAgfHwgY29udHJvbHNDZW50ZXIubGVuZ3RoID4gMCB8fCBjb250cm9sc1JpZ2h0Lmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZm9vdGVyLnR5cGUgPT09ICdpbicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGZvb3RlckNvbnRyb2xzID0gJChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVqcy5yZW5kZXIoY29yZXVpVGFibGVUcGxbJ3RhYmxlLWNvbnRyb2xzLWZvb3Rlci5odG1sJ10sIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sc0xlZnQ6IGNvbnRyb2xzTGVmdCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sc0NlbnRlcjogY29udHJvbHNDZW50ZXIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbHNSaWdodDogY29udHJvbHNSaWdodCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XHJcblxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbnRyb2xzTGVmdC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLmVhY2goY29udHJvbHNMZWZ0LCBmdW5jdGlvbiAoa2V5LCBjb250cm9sKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9vdGVyQ29udHJvbHMuZmluZCgnLmNvcmV1aS10YWJsZV9fY29udHJvbHNfbGVmdCcpLmFwcGVuZChjb250cm9sKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb250cm9sc0NlbnRlci5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLmVhY2goY29udHJvbHNDZW50ZXIsIGZ1bmN0aW9uIChrZXksIGNvbnRyb2wpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb290ZXJDb250cm9scy5maW5kKCcuY29yZXVpLXRhYmxlX19jb250cm9sc19jZW50ZXInKS5hcHBlbmQoY29udHJvbClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29udHJvbHNSaWdodC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLmVhY2goY29udHJvbHNSaWdodCwgZnVuY3Rpb24gKGtleSwgY29udHJvbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvb3RlckNvbnRyb2xzLmZpbmQoJy5jb3JldWktdGFibGVfX2NvbnRyb2xzX3JpZ2h0JykuYXBwZW5kKGNvbnRyb2wpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVyLmZvb3RlcnNJbi5wdXNoKGZvb3RlckNvbnRyb2xzKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgZm9vdGVyQ29udHJvbHMgPSAkKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWpzLnJlbmRlcihjb3JldWlUYWJsZVRwbFsndGFibGUtY29udHJvbHMtZm9vdGVyLW91dC5odG1sJ10sIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sc0xlZnQ6IGNvbnRyb2xzTGVmdCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sc0NlbnRlcjogY29udHJvbHNDZW50ZXIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbHNSaWdodDogY29udHJvbHNSaWdodCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XHJcblxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbnRyb2xzTGVmdC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLmVhY2goY29udHJvbHNMZWZ0LCBmdW5jdGlvbiAoa2V5LCBjb250cm9sKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9vdGVyQ29udHJvbHMuZmluZCgnLmNvcmV1aS10YWJsZV9fY29udHJvbHNfbGVmdCcpLmFwcGVuZChjb250cm9sKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb250cm9sc0NlbnRlci5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLmVhY2goY29udHJvbHNDZW50ZXIsIGZ1bmN0aW9uIChrZXksIGNvbnRyb2wpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb290ZXJDb250cm9scy5maW5kKCcuY29yZXVpLXRhYmxlX19jb250cm9sc19jZW50ZXInKS5hcHBlbmQoY29udHJvbClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29udHJvbHNSaWdodC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLmVhY2goY29udHJvbHNSaWdodCwgZnVuY3Rpb24gKGtleSwgY29udHJvbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvb3RlckNvbnRyb2xzLmZpbmQoJy5jb3JldWktdGFibGVfX2NvbnRyb2xzX3JpZ2h0JykuYXBwZW5kKGNvbnRyb2wpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVyLmZvb3RlcnNPdXQucHVzaChmb290ZXJDb250cm9scyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICAvLyDQl9Cw0LPRgNGD0LfQutCwINC30LDQv9C40YHQtdC5XHJcbiAgICAgICAgaWYgKHRoaXMuX2lzUmVjb3Jkc1JlcXVlc3QpIHtcclxuICAgICAgICAgICAgdGhpcy5vbignY29udGFpbmVyX3Nob3cnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICB0aGF0LmxvYWQodGhpcy5fb3B0aW9ucy5yZWNvcmRzUmVxdWVzdC51cmwsIHRoaXMuX29wdGlvbnMucmVjb3Jkc1JlcXVlc3QubWV0aG9kKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgdGFibGVFbGVtZW50ICAgICA9IGNvcmV1aVRhYmxlUmVuZGVyLnJlbmRlclRhYmxlKHRoaXMpO1xyXG4gICAgICAgIGxldCBjb250YWluZXJFbGVtZW50ID0gJChcclxuICAgICAgICAgICAgZWpzLnJlbmRlcihjb3JldWlUYWJsZVRwbFsndGFibGUtd3JhcHBlci5odG1sJ10sIHtcclxuICAgICAgICAgICAgICAgIGlkOiB0aGlzLl9pZCxcclxuICAgICAgICAgICAgICAgIGxhbmc6IHRoaXMuZ2V0TGFuZygpLFxyXG4gICAgICAgICAgICAgICAgd2lkdGhTaXplczogd2lkdGhTaXplcyxcclxuICAgICAgICAgICAgICAgIGhlaWdodFNpemVzOiBoZWlnaHRTaXplcyxcclxuICAgICAgICAgICAgICAgIHJlY29yZHNUb3RhbDogdGhpcy5fcmVjb3Jkc1RvdGFsLFxyXG4gICAgICAgICAgICAgICAgb3ZlcmZsb3c6ICEhIHRoaXMuX29wdGlvbnMub3ZlcmZsb3csXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgKTtcclxuXHJcblxyXG4gICAgICAgIGlmIChyZW5kZXIuaGVhZGVyc091dC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIGNvbnRhaW5lckVsZW1lbnQucHJlcGVuZChyZW5kZXIuaGVhZGVyc091dCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChyZW5kZXIuaGVhZGVyc0luLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgY29udGFpbmVyRWxlbWVudC5maW5kKCcuY29yZXVpLXRhYmxlX19jb250YWluZXInKS5wcmVwZW5kKHJlbmRlci5oZWFkZXJzSW4pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAocmVuZGVyLmZvb3RlcnNJbi5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIGNvbnRhaW5lckVsZW1lbnQuZmluZCgnLmNvcmV1aS10YWJsZV9fY29udGFpbmVyJykuYXBwZW5kKHJlbmRlci5mb290ZXJzSW4pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAocmVuZGVyLmZvb3RlcnNPdXQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICBjb250YWluZXJFbGVtZW50LmFwcGVuZChyZW5kZXIuZm9vdGVyc091dCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb250YWluZXJFbGVtZW50LmZpbmQoJy5jb3JldWktdGFibGVfX3dyYXBwZXInKS5odG1sKHRhYmxlRWxlbWVudCk7XHJcblxyXG4gICAgICAgIGlmIChlbGVtZW50ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGNvbnRhaW5lckVsZW1lbnQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBEb20gZWxlbWVudFxyXG4gICAgICAgIGxldCBkb21FbGVtZW50ID0gbnVsbDtcclxuXHJcbiAgICAgICAgaWYgKHR5cGVvZiBlbGVtZW50ID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICBkb21FbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoZWxlbWVudCk7XHJcblxyXG4gICAgICAgIH0gZWxzZSBpZiAoZWxlbWVudCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSB7XHJcbiAgICAgICAgICAgIGRvbUVsZW1lbnQgPSBlbGVtZW50O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGRvbUVsZW1lbnQpIHtcclxuICAgICAgICAgICAgJChkb21FbGVtZW50KS5odG1sKGNvbnRhaW5lckVsZW1lbnQpO1xyXG4gICAgICAgICAgICB0aGlzLmluaXRFdmVudHMoKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCR0LvQvtC60LjRgNC+0LLQutCwINGC0LDQsdC70LjRhtGLXHJcbiAgICAgKi9cclxuICAgIGxvY2s6IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgbGV0IGNvbnRhaW5lciA9IGNvcmV1aVRhYmxlRWxlbWVudHMuZ2V0Q29udGFpbmVyKHRoaXMuZ2V0SWQoKSk7XHJcblxyXG4gICAgICAgIGlmIChjb250YWluZXJbMF0gJiYgISBjb250YWluZXIuZmluZCgnLmNvcmV1aS10YWJsZS1sb2NrJylbMF0pIHtcclxuICAgICAgICAgICAgbGV0IGh0bWwgPSAgZWpzLnJlbmRlcihjb3JldWlUYWJsZVRwbFsndGFibGUtbG9hZGVyLmh0bWwnXSwge1xyXG4gICAgICAgICAgICAgICAgbGFuZzogdGhpcy5nZXRMYW5nKClcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBjb250YWluZXIucHJlcGVuZChodG1sKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCg0LDQt9Cx0LvQvtC60LjRgNC+0LLQutCwINGC0LDQsdC70LjRhtGLXHJcbiAgICAgKi9cclxuICAgIHVubG9jazogZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICBjb3JldWlUYWJsZUVsZW1lbnRzLmdldExvY2sodGhpcy5nZXRJZCgpKS5oaWRlKDUwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICQodGhpcykucmVtb3ZlKClcclxuICAgICAgICB9KTtcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0JfQsNCz0YDRg9C30LrQsCDRgdGC0YDQvtC6XHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbWV0aG9kXHJcbiAgICAgKi9cclxuICAgIGxvYWQ6IGZ1bmN0aW9uICh1cmwsIG1ldGhvZCkge1xyXG5cclxuICAgICAgICB0aGlzLmxvY2soKTtcclxuXHJcbiAgICAgICAgbGV0IHRoYXQgICA9IHRoaXM7XHJcbiAgICAgICAgbGV0IHBhcmFtcyA9IHt9O1xyXG5cclxuICAgICAgICBpZiAodXJsLm1hdGNoKC9cXFtwYWdlXFxdLykpIHtcclxuICAgICAgICAgICAgdXJsID0gdXJsLnJlcGxhY2UoL1xcW3BhZ2VcXF0vZywgdGhpcy5fcGFnZSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgbGV0IHBhcmFtUGFnZSA9IGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QodGhpcy5fb3B0aW9ucy5yZWNvcmRzUmVxdWVzdC5wYXJhbXMpICYmIHRoaXMuX29wdGlvbnMucmVjb3Jkc1JlcXVlc3QucGFyYW1zLmhhc093blByb3BlcnR5KCdwYWdlJylcclxuICAgICAgICAgICAgICAgID8gdGhpcy5fb3B0aW9ucy5yZWNvcmRzUmVxdWVzdC5wYXJhbXMucGFnZVxyXG4gICAgICAgICAgICAgICAgOiAncGFnZSc7XHJcbiAgICAgICAgICAgIHBhcmFtc1twYXJhbVBhZ2VdID0gdGhpcy5fcGFnZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh1cmwubWF0Y2goL1xcW2NvdW50XFxdLykpIHtcclxuICAgICAgICAgICAgdXJsID0gdXJsLnJlcGxhY2UoL1xcW2NvdW50XFxdL2csIHRoaXMuX3JlY29yZHNQZXJQYWdlKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBsZXQgcGFyYW1Db3VudCA9IGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QodGhpcy5fb3B0aW9ucy5yZWNvcmRzUmVxdWVzdC5wYXJhbXMpICYmIHRoaXMuX29wdGlvbnMucmVjb3Jkc1JlcXVlc3QucGFyYW1zLmhhc093blByb3BlcnR5KCdjb3VudCcpXHJcbiAgICAgICAgICAgICAgICA/IHRoaXMuX29wdGlvbnMucmVjb3Jkc1JlcXVlc3QucGFyYW1zLmNvdW50XHJcbiAgICAgICAgICAgICAgICA6ICdjb3VudCc7XHJcbiAgICAgICAgICAgIHBhcmFtc1twYXJhbUNvdW50XSA9IHRoaXMuX3JlY29yZHNQZXJQYWdlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHVybC5tYXRjaCgvXFxbc3RhcnRcXF0vKSkge1xyXG4gICAgICAgICAgICB1cmwgPSB1cmwucmVwbGFjZSgvXFxbc3RhcnRcXF0vZywgKCh0aGlzLl9wYWdlIC0gMSkgKiB0aGlzLl9yZWNvcmRzUGVyUGFnZSkgKyAxKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBsZXQgcGFyYW1TdGFydCA9IGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QodGhpcy5fb3B0aW9ucy5yZWNvcmRzUmVxdWVzdC5wYXJhbXMpICYmIHRoaXMuX29wdGlvbnMucmVjb3Jkc1JlcXVlc3QucGFyYW1zLmhhc093blByb3BlcnR5KCdzdGFydCcpXHJcbiAgICAgICAgICAgICAgICA/IHRoaXMuX29wdGlvbnMucmVjb3Jkc1JlcXVlc3QucGFyYW1zLnN0YXJ0XHJcbiAgICAgICAgICAgICAgICA6ICdzdGFydCc7XHJcbiAgICAgICAgICAgIHBhcmFtc1twYXJhbVN0YXJ0XSA9ICgodGhpcy5fcGFnZSAtIDEpICogdGhpcy5fcmVjb3Jkc1BlclBhZ2UpICsgMTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh1cmwubWF0Y2goL1xcW2VuZFxcXS8pKSB7XHJcbiAgICAgICAgICAgIHVybCA9IHVybC5yZXBsYWNlKC9cXFtlbmRcXF0vZywgKCh0aGlzLl9wYWdlIC0gMSkgKiB0aGlzLl9yZWNvcmRzUGVyUGFnZSkgKyBOdW1iZXIodGhpcy5fcmVjb3Jkc1BlclBhZ2UpKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBsZXQgcGFyYW1FbmQgPSBjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KHRoaXMuX29wdGlvbnMucmVjb3Jkc1JlcXVlc3QucGFyYW1zKSAmJiB0aGlzLl9vcHRpb25zLnJlY29yZHNSZXF1ZXN0LnBhcmFtcy5oYXNPd25Qcm9wZXJ0eSgnZW5kJylcclxuICAgICAgICAgICAgICAgID8gdGhpcy5fb3B0aW9ucy5yZWNvcmRzUmVxdWVzdC5wYXJhbXMuZW5kXHJcbiAgICAgICAgICAgICAgICA6ICdlbmQnO1xyXG4gICAgICAgICAgICBwYXJhbXNbcGFyYW1FbmRdID0gKCh0aGlzLl9wYWdlIC0gMSkgKiB0aGlzLl9yZWNvcmRzUGVyUGFnZSkgKyBOdW1iZXIodGhpcy5fcmVjb3Jkc1BlclBhZ2UpO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIGxldCBzZWFyY2hEYXRhID0gdGhpcy5nZXRTZWFyY2hEYXRhKCk7XHJcbiAgICAgICAgbGV0IGZpbHRlckRhdGEgPSB0aGlzLmdldEZpbHRlckRhdGEoKTtcclxuXHJcbiAgICAgICAgaWYgKHNlYXJjaERhdGEubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICBsZXQgcGFyYW1TZWFyY2ggPSBjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KHRoaXMuX29wdGlvbnMucmVjb3Jkc1JlcXVlc3QucGFyYW1zKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9vcHRpb25zLnJlY29yZHNSZXF1ZXN0LnBhcmFtcy5oYXNPd25Qcm9wZXJ0eSgnc2VhcmNoJykgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIHRoaXMuX29wdGlvbnMucmVjb3Jkc1JlcXVlc3QucGFyYW1zLnNlYXJjaCA9PT0gJ3N0cmluZydcclxuICAgICAgICAgICAgICAgID8gdGhpcy5fb3B0aW9ucy5yZWNvcmRzUmVxdWVzdC5wYXJhbXMuc2VhcmNoXHJcbiAgICAgICAgICAgICAgICA6ICdzZWFyY2gnO1xyXG5cclxuICAgICAgICAgICAgcGFyYW1zW3BhcmFtU2VhcmNoXSA9IHNlYXJjaERhdGE7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoZmlsdGVyRGF0YS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIGxldCBwYXJhbUZpbHRlcnMgPSBjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KHRoaXMuX29wdGlvbnMucmVjb3Jkc1JlcXVlc3QucGFyYW1zKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9vcHRpb25zLnJlY29yZHNSZXF1ZXN0LnBhcmFtcy5oYXNPd25Qcm9wZXJ0eSgnZmlsdGVyJykgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIHRoaXMuX29wdGlvbnMucmVjb3Jkc1JlcXVlc3QucGFyYW1zLmZpbHRlciA9PT0gJ3N0cmluZydcclxuICAgICAgICAgICAgICAgID8gdGhpcy5fb3B0aW9ucy5yZWNvcmRzUmVxdWVzdC5wYXJhbXMuZmlsdGVyXHJcbiAgICAgICAgICAgICAgICA6ICdmaWx0ZXInO1xyXG5cclxuICAgICAgICAgICAgcGFyYW1zW3BhcmFtRmlsdGVyc10gPSBmaWx0ZXJEYXRhO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX3NvcnQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICBsZXQgcGFyYW1Tb3J0ID0gY29yZXVpVGFibGVVdGlscy5pc09iamVjdCh0aGlzLl9vcHRpb25zLnJlY29yZHNSZXF1ZXN0LnBhcmFtcykgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX29wdGlvbnMucmVjb3Jkc1JlcXVlc3QucGFyYW1zLmhhc093blByb3BlcnR5KCdzb3J0JykgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVvZiB0aGlzLl9vcHRpb25zLnJlY29yZHNSZXF1ZXN0LnBhcmFtcy5zb3J0ID09PSAnc3RyaW5nJ1xyXG4gICAgICAgICAgICAgICAgPyB0aGlzLl9vcHRpb25zLnJlY29yZHNSZXF1ZXN0LnBhcmFtcy5zb3J0XHJcbiAgICAgICAgICAgICAgICA6ICdzb3J0JztcclxuXHJcbiAgICAgICAgICAgIHBhcmFtc1twYXJhbVNvcnRdID0gdGhpcy5fc29ydDtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICAkLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6IHVybCxcclxuICAgICAgICAgICAgbWV0aG9kOiBtZXRob2QgfHwgJ0dFVCcsXHJcbiAgICAgICAgICAgIGRhdGFUeXBlOiBcImpzb25cIixcclxuICAgICAgICAgICAgZGF0YTogcGFyYW1zLFxyXG4gICAgICAgICAgICBiZWZvcmVTZW5kOiBmdW5jdGlvbih4aHIpIHtcclxuICAgICAgICAgICAgICAgIGNvcmV1aVRhYmxlUHJpdmF0ZS5fdHJpZ2dlcih0aGF0LCAncmVjb3Jkc19sb2FkX3N0YXJ0JywgWyB0aGF0LCB4aHIgXSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChyZXN1bHQpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0Lmhhc093blByb3BlcnR5KCdyZWNvcmRzJykgJiZcclxuICAgICAgICAgICAgICAgICAgICB0eXBlb2YgcmVzdWx0LnJlY29yZHMgPT09ICdvYmplY3QnICYmXHJcbiAgICAgICAgICAgICAgICAgICAgQXJyYXkuaXNBcnJheShyZXN1bHQucmVjb3JkcylcclxuICAgICAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCB0b3RhbCA9IHJlc3VsdC5oYXNPd25Qcm9wZXJ0eSgndG90YWwnKSAmJiBjb3JldWlUYWJsZVV0aWxzLmlzTnVtZXJpYyhyZXN1bHQudG90YWwpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgID8gcmVzdWx0LnRvdGFsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDogbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICB0aGF0LnNldFJlY29yZHMocmVzdWx0LnJlY29yZHMsIHRvdGFsKTtcclxuXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoYXQuc2V0UmVjb3JkcyhbXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbih4aHIsIHRleHRTdGF0dXMsIGVycm9yVGhyb3duKSB7XHJcbiAgICAgICAgICAgICAgICB0aGF0LnNldFJlY29yZHMoW10pO1xyXG4gICAgICAgICAgICAgICAgY29yZXVpVGFibGVQcml2YXRlLl90cmlnZ2VyKHRoYXQsICdyZWNvcmRzX2xvYWRfZXJyb3InLCBbIHRoYXQsIHhociwgdGV4dFN0YXR1cywgZXJyb3JUaHJvd24gXSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGNvbXBsZXRlOiBmdW5jdGlvbih4aHIsIHRleHRTdGF0dXMpIHtcclxuICAgICAgICAgICAgICAgIHRoYXQudW5sb2NrKCk7XHJcbiAgICAgICAgICAgICAgICBjb3JldWlUYWJsZVByaXZhdGUuX3RyaWdnZXIodGhhdCwgJ3JlY29yZHNfbG9hZF9lbmQnLCBbIHRoYXQsIHhociwgdGV4dFN0YXR1cyBdKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9KTtcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QtdGA0LXQt9Cw0LPRgNGD0LfQutCwINC30LDQv9C40YHQtdC5INCyINGC0LDQsdC70LjRhtC1XHJcbiAgICAgKi9cclxuICAgIHJlbG9hZDogZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICBpZiAodGhpcy5faXNSZWNvcmRzUmVxdWVzdCkge1xyXG4gICAgICAgICAgICB0aGlzLmxvYWQodGhpcy5fb3B0aW9ucy5yZWNvcmRzUmVxdWVzdC51cmwsIHRoaXMuX29wdGlvbnMucmVjb3Jkc1JlcXVlc3QubWV0aG9kKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCf0LXRgNC10YHQvtC30LTQsNC90LjQtSDRgtC10LvQsCDRgtCw0LHQu9C40YbRi1xyXG4gICAgICovXHJcbiAgICByZWZyZXNoOiBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgIGxldCB0YWJsZSA9IGNvcmV1aVRhYmxlUmVuZGVyLnJlbmRlclRhYmxlKHRoaXMpO1xyXG5cclxuICAgICAgICBjb3JldWlUYWJsZUVsZW1lbnRzLmdldFRhYmxlKHRoaXMuZ2V0SWQoKSkucmVwbGFjZVdpdGgodGFibGUpO1xyXG5cclxuICAgICAgICBjb3JldWlUYWJsZVByaXZhdGUuX3RyaWdnZXIodGhpcywgJ3RhYmxlX3Nob3cnLCBbIHRoaXMgXSk7XHJcbiAgICAgICAgY29yZXVpVGFibGVQcml2YXRlLl90cmlnZ2VyKHRoaXMsICdyZWNvcmRzX3Nob3cnLCBbIHRoaXMgXSk7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCj0YHRgtCw0L3QvtCy0LrQsCDQvtCx0YnQtdCz0L4g0LrQvtC70LjRh9C10YHRgtCy0LAg0LfQsNC/0LjRgdC10Lkg0L3QsCDRgdGC0YDQsNC90LjRhtC1XHJcbiAgICAgKiBAcGFyYW0gcmVjb3Jkc1BlclBhZ2VcclxuICAgICAqL1xyXG4gICAgc2V0UGFnZVNpemU6IGZ1bmN0aW9uIChyZWNvcmRzUGVyUGFnZSkge1xyXG5cclxuICAgICAgICB0aGlzLl9yZWNvcmRzUGVyUGFnZSA9IHJlY29yZHNQZXJQYWdlO1xyXG5cclxuICAgICAgICBjb3JldWlUYWJsZVByaXZhdGUuX3RyaWdnZXIodGhpcywgJ3BhZ2Vfc2l6ZV91cGRhdGUnKTtcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0JLRi9Cx0L7RgCDQstGB0LXRhSDQt9Cw0L/QuNGB0LXQuSDQsiDRgtCw0LHQu9C40YbQtVxyXG4gICAgICovXHJcbiAgICBzZWxlY3RBbGw6IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgY29yZXVpVGFibGVFbGVtZW50cy5zZWxlY3RUckFsbCh0aGlzLmdldElkKCkpXHJcblxyXG4gICAgICAgIGNvcmV1aVRhYmxlUHJpdmF0ZS5fdHJpZ2dlcih0aGlzLCAncmVjb3JkX3NlbGVjdF9hbGwnKTtcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J7RgtC80LXQvdCwINCy0YvQsdC+0YAg0LLRgdC10YUg0LfQsNC/0LjRgdC10Lkg0LIg0YLQsNCx0LvQuNGG0LVcclxuICAgICAqL1xyXG4gICAgdW5zZWxlY3RBbGw6IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgY29yZXVpVGFibGVFbGVtZW50cy51bnNlbGVjdFRyQWxsKHRoaXMuZ2V0SWQoKSlcclxuXHJcbiAgICAgICAgY29yZXVpVGFibGVQcml2YXRlLl90cmlnZ2VyKHRoaXMsICdyZWNvcmRfdW5zZWxlY3RfYWxsJyk7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCS0YvQsdC+0YAg0LfQsNC/0LjRgdC4INCyINGC0LDQsdC70LjRhtC1XHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWRcclxuICAgICAqL1xyXG4gICAgc2VsZWN0UmVjb3JkOiBmdW5jdGlvbiAoaWQpIHtcclxuXHJcbiAgICAgICAgbGV0IHJlY29yZCA9IHRoaXMuZ2V0UmVjb3JkQnlJZChpZCk7XHJcblxyXG4gICAgICAgIGlmICggISByZWNvcmQpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IHRyID0gY29yZXVpVGFibGVFbGVtZW50cy5nZXRUckJ5SW5kZXgodGhpcy5nZXRJZCgpLCByZWNvcmQuaW5kZXgpO1xyXG5cclxuICAgICAgICBpZiAodHIubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvcmV1aVRhYmxlRWxlbWVudHMuc2VsZWN0VHIodHIpXHJcblxyXG4gICAgICAgIGNvcmV1aVRhYmxlUHJpdmF0ZS5fdHJpZ2dlcih0aGlzLCAncmVjb3JkX3NlbGVjdCcsIFsgcmVjb3JkIF0pO1xyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQntGC0LzQtdC90LAg0LLRi9Cx0L7RgNCwINC30LDQv9C40YHQuCDQsiDRgtCw0LHQu9C40YbQtVxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGlkXHJcbiAgICAgKi9cclxuICAgIHVuc2VsZWN0UmVjb3JkOiBmdW5jdGlvbiAoaWQpIHtcclxuXHJcbiAgICAgICAgbGV0IHJlY29yZCA9IHRoaXMuZ2V0UmVjb3JkQnlJZChpZCk7XHJcblxyXG4gICAgICAgIGlmICggISByZWNvcmQpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IHRyID0gY29yZXVpVGFibGVFbGVtZW50cy5nZXRUckJ5SW5kZXgodGhpcy5nZXRJZCgpLCByZWNvcmQuaW5kZXgpO1xyXG5cclxuICAgICAgICBpZiAoICEgdHIpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29yZXVpVGFibGVFbGVtZW50cy51bnNlbGVjdFRyKHRyKVxyXG5cclxuICAgICAgICBjb3JldWlUYWJsZVByaXZhdGUuX3RyaWdnZXIodGhpcywgJ3JlY29yZF91bnNlbGVjdCcsIFsgcmVjb3JkLmRhdGEgXSk7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSDQstGL0LHRgNCw0L3QvdGL0YUgaWRcclxuICAgICAqIEByZXR1cm4ge2FycmF5fVxyXG4gICAgICovXHJcbiAgICBnZXRTZWxlY3RlZFJlY29yZHNJZDogZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICBsZXQgcmVjb3JkcyA9IFtdO1xyXG4gICAgICAgIGxldCB0aGF0ICAgID0gdGhpcztcclxuICAgICAgICBsZXQgZmllbGQgICA9IHRoaXMuX29wdGlvbnMucHJpbWFyeUtleTtcclxuXHJcbiAgICAgICAgJC5lYWNoKGNvcmV1aVRhYmxlRWxlbWVudHMuZ2V0U2VsZWN0ZWRJbmRleGVzKHRoaXMuZ2V0SWQoKSksIGZ1bmN0aW9uIChrZXksIGluZGV4KSB7XHJcbiAgICAgICAgICAgIGxldCByZWNvcmQgPSB0aGF0LmdldFJlY29yZEJ5SW5kZXgoaW5kZXgpO1xyXG5cclxuICAgICAgICAgICAgaWYgKCAhIHJlY29yZCB8fCAhIHJlY29yZC5kYXRhLmhhc093blByb3BlcnR5KGZpZWxkKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZWNvcmRzLnB1c2gocmVjb3JkLmRhdGFbZmllbGRdKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHJlY29yZHM7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSDQstGL0LHRgNCw0L3QvdGL0YUg0LfQsNC/0LjRgdC10LlcclxuICAgICAqIEByZXR1cm4ge2FycmF5fVxyXG4gICAgICovXHJcbiAgICBnZXRTZWxlY3RlZFJlY29yZHM6IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgbGV0IHJlY29yZHMgPSBbXTtcclxuICAgICAgICBsZXQgdGhhdCAgICA9IHRoaXM7XHJcblxyXG4gICAgICAgICQuZWFjaChjb3JldWlUYWJsZUVsZW1lbnRzLmdldFNlbGVjdGVkSW5kZXhlcyh0aGlzLmdldElkKCkpLCBmdW5jdGlvbiAoa2V5LCBpbmRleCkge1xyXG4gICAgICAgICAgICBsZXQgcmVjb3JkID0gdGhhdC5nZXRSZWNvcmRCeUluZGV4KGluZGV4KTtcclxuXHJcbiAgICAgICAgICAgIGlmICggISByZWNvcmQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmVjb3Jkcy5wdXNoKHJlY29yZCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiByZWNvcmRzO1xyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0LfQsNC/0LjRgdC4INC/0L4gaWRcclxuICAgICAqIEBwYXJhbSBpZFxyXG4gICAgICogQHJldHVybiB7b2JqZWN0fG51bGx9XHJcbiAgICAgKi9cclxuICAgIGdldFJlY29yZDogZnVuY3Rpb24gKGlkKSB7XHJcblxyXG4gICAgICAgIGxldCByZWNvcmQgPSB0aGlzLmdldFJlY29yZEJ5SWQoaWQpO1xyXG5cclxuICAgICAgICBpZiAoICEgcmVjb3JkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHJlY29yZC5kYXRhO1xyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0LfQsNC/0LjRgdC10LlcclxuICAgICAqL1xyXG4gICAgZ2V0UmVjb3JkczogZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICBsZXQgcmVjb3JkcyA9IFtdXHJcblxyXG4gICAgICAgICQuZWFjaCh0aGlzLl9yZWNvcmRzLCBmdW5jdGlvbiAoa2V5LCByZWNvcmQpIHtcclxuICAgICAgICAgICAgcmVjb3Jkcy5wdXNoKCQuZXh0ZW5kKHRydWUsIHt9LCByZWNvcmQpKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHJlY29yZHM7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCf0LXRgNC10YXQvtC0INC6INC/0YDQtdC00YvQtNGD0YnQtdC5INGB0YLRgNCw0L3QuNGG0LVcclxuICAgICAqL1xyXG4gICAgcHJldlBhZ2U6IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX3BhZ2UgPiAxKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3BhZ2UtLTtcclxuICAgICAgICAgICAgdGhpcy5yZWxvYWQoKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCf0LXRgNC10YXQvtC0INC6INGB0LvQtdC00YPRjtGJ0LXQuSDRgdGC0YDQsNC90LjRhtC1XHJcbiAgICAgKiBAcmV0dXJuIHthcnJheX1cclxuICAgICAqL1xyXG4gICAgbmV4dFBhZ2U6IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgbGV0IHRvdGFsUGFnZXMgPSB0aGlzLl9yZWNvcmRzVG90YWwgPiAwICYmIHRoaXMuX3JlY29yZHNQZXJQYWdlID4gMFxyXG4gICAgICAgICAgICA/IE1hdGguY2VpbCh0aGlzLl9yZWNvcmRzVG90YWwgLyB0aGlzLl9yZWNvcmRzUGVyUGFnZSlcclxuICAgICAgICAgICAgOiAxO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5fcGFnZSA8IHRvdGFsUGFnZXMpIHtcclxuICAgICAgICAgICAgdGhpcy5fcGFnZSsrO1xyXG4gICAgICAgICAgICB0aGlzLnJlbG9hZCgpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QtdGA0LXRhdC+0LQg0Log0YPQutCw0LfQsNC90L3QvtC5INGB0YLRgNCw0L3QuNGG0LVcclxuICAgICAqL1xyXG4gICAgZ29QYWdlOiBmdW5jdGlvbiAocGFnZSkge1xyXG5cclxuICAgICAgICBpZiAocGFnZSA+PSAxKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3BhZ2UgPSBwYWdlO1xyXG4gICAgICAgICAgICB0aGlzLnJlbG9hZCgpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KDQtdCz0LjRgdGC0YDQsNGG0LjRjyDRhNGD0L3QutGG0LjQuCDQvdCwINGB0L7QsdGL0YLQuNC1XHJcbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gZXZlbnROYW1lXHJcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSAgICAgY2FsbGJhY2tcclxuICAgICAqIEBwYXJhbSB7Kn0gICAgICAgICAgICBjb250ZXh0XHJcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59ICAgICAgc2luZ2xlRXhlY1xyXG4gICAgICovXHJcbiAgICBvbjogZnVuY3Rpb24oZXZlbnROYW1lLCBjYWxsYmFjaywgY29udGV4dCwgc2luZ2xlRXhlYykge1xyXG5cclxuICAgICAgICBsZXQgZXZlbnROYW1lcyA9IFtdO1xyXG5cclxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShldmVudE5hbWUpKSB7XHJcbiAgICAgICAgICAgICQuZWFjaChldmVudE5hbWUsIGZ1bmN0aW9uIChrZXksIG5hbWUpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbmFtZSA9PT0gJ3N0cmluZycgJiYgbmFtZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50TmFtZXMucHVzaChuYW1lKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGV2ZW50TmFtZSA9PT0gJ3N0cmluZycgJiYgZXZlbnROYW1lKSB7XHJcbiAgICAgICAgICAgIGV2ZW50TmFtZXMucHVzaChldmVudE5hbWUpO1xyXG5cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgdGhhdCA9IHRoaXM7XHJcblxyXG4gICAgICAgICQuZWFjaChldmVudE5hbWVzLCBmdW5jdGlvbiAoa2V5LCBuYW1lKSB7XHJcblxyXG4gICAgICAgICAgICBpZiAoICEgQXJyYXkuaXNBcnJheSh0aGF0Ll9ldmVudHNbbmFtZV0pKSB7XHJcbiAgICAgICAgICAgICAgICB0aGF0Ll9ldmVudHNbbmFtZV0gPSBbXTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhhdC5fZXZlbnRzW25hbWVdLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgY29udGV4dCA6IGNvbnRleHQgPyBjb250ZXh0IDogdGhhdCxcclxuICAgICAgICAgICAgICAgIGNhbGxiYWNrOiBjYWxsYmFjayxcclxuICAgICAgICAgICAgICAgIHNpbmdsZUV4ZWM6ICEhIHNpbmdsZUV4ZWMsXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0L/QtdGA0LXQstC+0LTQvtCyINGC0LXQutGD0YnQtdCz0L4g0Y/Qt9GL0LrQsFxyXG4gICAgICogQHJldHVybiB7b2JqZWN0fVxyXG4gICAgICovXHJcbiAgICBnZXRMYW5nOiBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgIGxldCByZXN1bHQgPSB7fTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMubGFuZyAmJiBjb3JldWlUYWJsZS5sYW5nLmhhc093blByb3BlcnR5KHRoaXMuX29wdGlvbnMubGFuZykpIHtcclxuICAgICAgICAgICAgcmVzdWx0ID0gY29yZXVpVGFibGUubGFuZ1t0aGlzLl9vcHRpb25zLmxhbmddO1xyXG5cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBsZXQgbGFuZyA9IGNvcmV1aVRhYmxlLmdldFNldHRpbmcoJ2xhbmcnKVxyXG5cclxuICAgICAgICAgICAgaWYgKGxhbmcgJiYgY29yZXVpVGFibGUubGFuZy5oYXNPd25Qcm9wZXJ0eShsYW5nKSkge1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gY29yZXVpVGFibGUubGFuZ1tsYW5nXTtcclxuXHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoT2JqZWN0LmtleXMoY29yZXVpVGFibGUubGFuZykubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gY29yZXVpVGFibGUubGFuZ1tPYmplY3Qua2V5cyhjb3JldWlUYWJsZS5sYW5nKVswXV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiAkLmV4dGVuZCh0cnVlLCB7fSwgcmVzdWx0KTtcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KPRgdGC0LDQvdC+0LLQutCwINCy0LjQtNC40LzRi9GFINC60L7Qu9C+0L3QvtC6LCDQvdC1INGD0LrQsNC30LDQvdC90YvQtSDQutC+0LvQvtC90LrQuCDQsdGD0LTRg9GCINGB0LrRgNGL0YLRi1xyXG4gICAgICogQHBhcmFtIHtBcnJheX0gY29sdW1uc1xyXG4gICAgICovXHJcbiAgICBzZXRDb2x1bW5zU2hvdzogZnVuY3Rpb24gKGNvbHVtbnMpIHtcclxuXHJcbiAgICAgICAgaWYgKCAhIEFycmF5LmlzQXJyYXkoY29sdW1ucykpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgJC5lYWNoKHRoaXMuX2NvbHVtbnMsIGZ1bmN0aW9uIChrZXksIGNvbHVtbikge1xyXG4gICAgICAgICAgICBsZXQgb3B0aW9ucyA9IGNvbHVtbi5nZXRPcHRpb25zKCk7XHJcblxyXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnZmllbGQnKSAmJiB0eXBlb2Ygb3B0aW9ucy5maWVsZCA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgICAgIGNvbHVtbi5zZXRTaG93KGNvbHVtbnMuaW5kZXhPZihvcHRpb25zLmZpZWxkKSA+PSAwKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuXHJcbiAgICAgICAgY29yZXVpVGFibGVQcml2YXRlLl90cmlnZ2VyKHRoaXMsICdjb2x1bW5zX2NoYW5nZScpO1xyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0L/QvtC40YHQutC+0LLRi9GFINC00LDQvdC90YvRhVxyXG4gICAgICogQHJldHVybiB7KltdfVxyXG4gICAgICovXHJcbiAgICBnZXRTZWFyY2hEYXRhOiBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgIGxldCBzZWFyY2hEYXRhID0gW107XHJcblxyXG4gICAgICAgICQuZWFjaCh0aGlzLl9zZWFyY2gsIGZ1bmN0aW9uIChrZXksIGNvbnRyb2wpIHtcclxuICAgICAgICAgICAgbGV0IG9wdGlvbnMgPSBjb250cm9sLmdldE9wdGlvbnMoKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmhhc093blByb3BlcnR5KCdmaWVsZCcpICYmXHJcbiAgICAgICAgICAgICAgICB0eXBlb2Ygb3B0aW9ucy5maWVsZCA9PT0gJ3N0cmluZycgJiZcclxuICAgICAgICAgICAgICAgIG9wdGlvbnMuZmllbGRcclxuICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgdmFsdWUgPSBjb250cm9sLmdldFZhbHVlKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VhcmNoRGF0YS5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmllbGQ6IG9wdGlvbnMuZmllbGQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiB2YWx1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWxnOiBjb250cm9sLmhhc093blByb3BlcnR5KCdnZXRBbGdvcml0aG0nKSAmJiB0eXBlb2YgY29udHJvbC5nZXRBbGdvcml0aG0gPT09ICdmdW5jdGlvbicgPyBjb250cm9sLmdldEFsZ29yaXRobSgpIDogbnVsbFxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiBzZWFyY2hEYXRhO1xyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0LTQsNC90L3Ri9GFINC40Lcg0YTQuNC70YzRgtGA0L7QslxyXG4gICAgICogQHJldHVybiB7KltdfVxyXG4gICAgICovXHJcbiAgICBnZXRGaWx0ZXJEYXRhOiBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgIGxldCBmaWx0ZXJEYXRhID0gW107XHJcblxyXG4gICAgICAgICQuZWFjaCh0aGlzLl9maWx0ZXJzLCBmdW5jdGlvbiAoa2V5LCBjb250cm9sKSB7XHJcbiAgICAgICAgICAgIGxldCBvcHRpb25zID0gY29udHJvbC5nZXRPcHRpb25zKCk7XHJcblxyXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnZmllbGQnKSAmJlxyXG4gICAgICAgICAgICAgICAgdHlwZW9mIG9wdGlvbnMuZmllbGQgPT09ICdzdHJpbmcnICYmXHJcbiAgICAgICAgICAgICAgICBvcHRpb25zLmZpZWxkXHJcbiAgICAgICAgICAgICkge1xyXG5cclxuICAgICAgICAgICAgICAgIGxldCB2YWx1ZSA9IGNvbnRyb2wuZ2V0VmFsdWUoKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXJEYXRhLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWVsZDogb3B0aW9ucy5maWVsZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHZhbHVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGc6IGNvbnRyb2wuaGFzT3duUHJvcGVydHkoJ2dldEFsZ29yaXRobScpICYmIHR5cGVvZiBjb250cm9sLmdldEFsZ29yaXRobSA9PT0gJ2Z1bmN0aW9uJyA/IGNvbnRyb2wuZ2V0QWxnb3JpdGhtKCkgOiBudWxsXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGZpbHRlckRhdGE7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCf0L7QuNGB0Log0L/QviDRgtCw0LHQu9C40YbQtSDRgSDQuNGB0L/QvtC70YzQt9C+0LLQsNC90LjQtdC8INC00LDQvdC90YvRhSDQuNC3INC/0L7QuNGB0LrQsCDQuCDRhNC40LvRjNGC0YDQvtCyXHJcbiAgICAgKi9cclxuICAgIHNlYXJjaFJlY29yZHM6IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgbGV0IHNlYXJjaERhdGEgPSB0aGlzLmdldFNlYXJjaERhdGEoKTtcclxuICAgICAgICBsZXQgZmlsdGVyRGF0YSA9IHRoaXMuZ2V0RmlsdGVyRGF0YSgpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5faXNSZWNvcmRzUmVxdWVzdCkge1xyXG4gICAgICAgICAgICB0aGlzLmxvYWQodGhpcy5fb3B0aW9ucy5yZWNvcmRzUmVxdWVzdC51cmwsIHRoaXMuX29wdGlvbnMucmVjb3Jkc1JlcXVlc3QubWV0aG9kKTtcclxuXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgJC5lYWNoKHRoaXMuX3JlY29yZHMsIGZ1bmN0aW9uIChpbmRleCwgcmVjb3JkKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgbGV0IGlzU2hvdyA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHNlYXJjaERhdGEubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlzU2hvdyA9IGNvcmV1aVRhYmxlUHJpdmF0ZS5pc0ZpbHRlcmVkUmVjb3JkKHNlYXJjaERhdGEsIHJlY29yZC5kYXRhKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoaXNTaG93ICYmIGZpbHRlckRhdGEubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlzU2hvdyA9IGNvcmV1aVRhYmxlUHJpdmF0ZS5pc0ZpbHRlcmVkUmVjb3JkKGZpbHRlckRhdGEsIHJlY29yZC5kYXRhKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICByZWNvcmQuc2hvdyA9IGlzU2hvdztcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLnJlZnJlc2goKTtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICBjb3JldWlUYWJsZVByaXZhdGUuX3RyaWdnZXIodGhpcywgJ2ZpbHRlcnNfY2hhbmdlJywgWyBmaWx0ZXJEYXRhIF0pO1xyXG4gICAgICAgIGNvcmV1aVRhYmxlUHJpdmF0ZS5fdHJpZ2dlcih0aGlzLCAnc2VhcmNoX2NoYW5nZScsIFsgc2VhcmNoRGF0YSBdKTtcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J7Rh9C40YHRgtC60LAg0L/QvtC40YHQutC+0LLRi9GFINC00LDQvdC90YvRhVxyXG4gICAgICovXHJcbiAgICBzZWFyY2hDbGVhcjogZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAkLmVhY2godGhpcy5fc2VhcmNoLCBmdW5jdGlvbiAoa2V5LCBzZWFyY2gpIHtcclxuICAgICAgICAgICAgc2VhcmNoLnNldFZhbHVlKG51bGwpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLnNlYXJjaFJlY29yZHMoKTtcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J7Rh9C40YHRgtC60LAg0L/QvtC40YHQutC+0LLRi9GFINC00LDQvdC90YvRhSDQsiDRhNC40LvRjNGC0YDQsNGFXHJcbiAgICAgKi9cclxuICAgIGZpbHRlcnNDbGVhcjogZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAkLmVhY2godGhpcy5fZmlsdGVycywgZnVuY3Rpb24gKGtleSwgZmlsdGVyKSB7XHJcbiAgICAgICAgICAgIGZpbHRlci5zZXRWYWx1ZShudWxsKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5zZWFyY2hSZWNvcmRzKCk7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSDQt9Cw0L/QuNGB0Lgg0L/QviDQuNC90LTQtdC60YHRg1xyXG4gICAgICogQHBhcmFtIHtzdHJpbmd8bnVtYmVyfSBpbmRleFxyXG4gICAgICogQHJldHVybiB7b2JqZWN0fG51bGx9XHJcbiAgICAgKi9cclxuICAgIGdldFJlY29yZEJ5SW5kZXg6IGZ1bmN0aW9uIChpbmRleCkge1xyXG5cclxuICAgICAgICBpZiAoWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2YgaW5kZXgpIDwgMCB8fCBpbmRleCA9PT0gJycpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpbmRleCA9IE51bWJlcihpbmRleCk7XHJcblxyXG4gICAgICAgIGlmIChpbmRleCA8PSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IHJlY29yZCA9IG51bGw7XHJcblxyXG4gICAgICAgICQuZWFjaCh0aGlzLl9yZWNvcmRzLCBmdW5jdGlvbiAoa2V5LCByZWNvcmRJdGVtKSB7XHJcbiAgICAgICAgICAgIGlmIChyZWNvcmRJdGVtLmluZGV4ID09PSBpbmRleCkge1xyXG4gICAgICAgICAgICAgICAgcmVjb3JkID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIGluZGV4OiByZWNvcmRJdGVtLmluZGV4LFxyXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6ICQuZXh0ZW5kKHRydWUsIHt9LCByZWNvcmRJdGVtLmRhdGEpLFxyXG4gICAgICAgICAgICAgICAgICAgIG1ldGE6IHJlY29yZEl0ZW0ubWV0YSA/ICQuZXh0ZW5kKHRydWUsIHt9LCByZWNvcmRJdGVtLm1ldGEpIDogbnVsbCxcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHJlY29yZDtcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC30LDQv9C40YHQuCDQv9C+IGlkXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWRcclxuICAgICAqIEByZXR1cm4ge29iamVjdHxudWxsfVxyXG4gICAgICovXHJcbiAgICBnZXRSZWNvcmRCeUlkOiBmdW5jdGlvbiAoaWQpIHtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UmVjb3JkQnlGaWVsZCh0aGlzLl9vcHRpb25zLnByaW1hcnlLZXksIGlkKTtcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC30LDQv9C40YHQuCDQv9C+INC/0L7Qu9GOXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gICAgICAgIGZpZWxkXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ3xudW1iZXJ9IHZhbHVlXHJcbiAgICAgKiBAcmV0dXJuIHtvYmplY3R8bnVsbH1cclxuICAgICAqL1xyXG4gICAgZ2V0UmVjb3JkQnlGaWVsZDogZnVuY3Rpb24gKGZpZWxkLCB2YWx1ZSkge1xyXG5cclxuICAgICAgICBpZiAoWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2YgZmllbGQpIDwgMCB8fCBmaWVsZCA9PT0gJycpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgcmVjb3JkID0gbnVsbDtcclxuXHJcbiAgICAgICAgJC5lYWNoKHRoaXMuX3JlY29yZHMsIGZ1bmN0aW9uIChrZXksIHJlY29yZEl0ZW0pIHtcclxuICAgICAgICAgICAgaWYgKHJlY29yZEl0ZW0uZGF0YS5oYXNPd25Qcm9wZXJ0eShmaWVsZCkgJiYgcmVjb3JkSXRlbS5kYXRhW2ZpZWxkXSA9PT0gdmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIHJlY29yZCA9ICQuZXh0ZW5kKHRydWUsIHt9LCByZWNvcmRJdGVtKTtcclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHJlY29yZDtcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC60L7QvdGC0YDQvtC70LAg0L/QviDQtdCz0L4gaWRcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZFxyXG4gICAgICogQHJldHVybiB7b2JqZWN0fVxyXG4gICAgICovXHJcbiAgICBnZXRDb250cm9sQnlJZDogZnVuY3Rpb24gKGlkKSB7XHJcblxyXG4gICAgICAgIGxldCByZXN1bHQgPSBudWxsO1xyXG5cclxuICAgICAgICAkLmVhY2godGhpcy5fY29udHJvbHMsIGZ1bmN0aW9uIChrZXksIGNvbnRyb2wpIHtcclxuICAgICAgICAgICAgaWYgKGNvbnRyb2wuaGFzT3duUHJvcGVydHkoJ2dldElkJykgJiZcclxuICAgICAgICAgICAgICAgIHR5cGVvZiBjb250cm9sLmdldElkID09PSAnZnVuY3Rpb24nICYmXHJcbiAgICAgICAgICAgICAgICBjb250cm9sLmdldElkKCkgPT09IGlkXHJcbiAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gY29udHJvbDtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0LrQvtC90YLRgNC+0LvQsCDQv9C+0LjRgdC60LAg0L/QviDQtdCz0L4gaWRcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZFxyXG4gICAgICogQHJldHVybiB7b2JqZWN0fVxyXG4gICAgICovXHJcbiAgICBnZXRTZWFyY2hDb250cm9sQnlJZDogZnVuY3Rpb24gKGlkKSB7XHJcblxyXG4gICAgICAgIGxldCByZXN1bHQgPSBudWxsO1xyXG5cclxuICAgICAgICAkLmVhY2godGhpcy5fc2VhcmNoLCBmdW5jdGlvbiAoa2V5LCBzZWFyY2gpIHtcclxuICAgICAgICAgICAgaWYgKHNlYXJjaC5oYXNPd25Qcm9wZXJ0eSgnZ2V0SWQnKSAmJlxyXG4gICAgICAgICAgICAgICAgdHlwZW9mIHNlYXJjaC5nZXRJZCA9PT0gJ2Z1bmN0aW9uJyAmJlxyXG4gICAgICAgICAgICAgICAgc2VhcmNoLmdldElkKCkgPT09IGlkXHJcbiAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gc2VhcmNoO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCh0L7RgNGC0LjRgNC+0LLQutCwINC/0L4g0L/QvtC70Y/QvFxyXG4gICAgICogQHBhcmFtIHtBcnJheX0gc29ydGluZ1xyXG4gICAgICovXHJcbiAgICBzb3J0RmllbGRzOiBmdW5jdGlvbiAoc29ydGluZykge1xyXG5cclxuICAgICAgICBpZiAoICEgQXJyYXkuaXNBcnJheShzb3J0aW5nKSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgdGhhdCA9IHRoaXM7XHJcblxyXG4gICAgICAgIHRoaXMuX3NvcnQgPSBbXTtcclxuXHJcbiAgICAgICAgJC5lYWNoKHNvcnRpbmcsIGZ1bmN0aW9uIChrZXksIHNvcnQpIHtcclxuICAgICAgICAgICAgaWYgKCAhIGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3Qoc29ydCkgfHxcclxuICAgICAgICAgICAgICAgICAhIHNvcnQuaGFzT3duUHJvcGVydHkoJ2ZpZWxkJykgfHxcclxuICAgICAgICAgICAgICAgICAhIHNvcnQuaGFzT3duUHJvcGVydHkoJ29yZGVyJykgfHxcclxuICAgICAgICAgICAgICAgIHR5cGVvZiBzb3J0LmZpZWxkICE9PSAnc3RyaW5nJyB8fFxyXG4gICAgICAgICAgICAgICAgdHlwZW9mIHNvcnQub3JkZXIgIT09ICdzdHJpbmcnIHx8XHJcbiAgICAgICAgICAgICAgICAgISBzb3J0LmZpZWxkIHx8XHJcbiAgICAgICAgICAgICAgICAgISBzb3J0Lm9yZGVyXHJcbiAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICAgICAgbGV0IGNvbHVtblNvcnRhYmxlID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICAkLmVhY2godGhhdC5fY29sdW1ucywgZnVuY3Rpb24gKGtleSwgY29sdW1uKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgb3B0aW9ucyA9IGNvbHVtbi5nZXRPcHRpb25zKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuaGFzT3duUHJvcGVydHkoJ2ZpZWxkJykgJiZcclxuICAgICAgICAgICAgICAgICAgICBvcHRpb25zLmhhc093blByb3BlcnR5KCdzb3J0YWJsZScpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZW9mIG9wdGlvbnMuZmllbGQgPT09ICdzdHJpbmcnICYmXHJcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5maWVsZCA9PT0gc29ydC5maWVsZCAmJlxyXG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnMuc29ydGFibGVcclxuICAgICAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbHVtblNvcnRhYmxlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuXHJcbiAgICAgICAgICAgIGlmIChjb2x1bW5Tb3J0YWJsZSkge1xyXG4gICAgICAgICAgICAgICAgdGhhdC5fc29ydC5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICBmaWVsZDogc29ydC5maWVsZCxcclxuICAgICAgICAgICAgICAgICAgICBvcmRlcjogc29ydC5vcmRlcixcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG5cclxuICAgICAgICBpZiAodGhpcy5fc29ydC5sZW5ndGggPj0gMCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5faXNSZWNvcmRzUmVxdWVzdCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5sb2FkKHRoaXMuX29wdGlvbnMucmVjb3Jkc1JlcXVlc3QudXJsLCB0aGlzLl9vcHRpb25zLnJlY29yZHNSZXF1ZXN0Lm1ldGhvZCk7XHJcblxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yZWNvcmRzID0gY29yZXVpVGFibGVQcml2YXRlLnNvcnRSZWNvcmRzQnlGaWVsZHModGhpcy5fcmVjb3JkcywgdGhpcy5fc29ydCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlZnJlc2goKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29yZXVpVGFibGVQcml2YXRlLl90cmlnZ2VyKHRoaXMsICdyZWNvcmRzX3NvcnQnLCBbIHRoaXMgXSk7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCh0L7RgNGC0LjRgNC+0LLQutCwINC/0L4g0YPQvNC+0LvRh9Cw0L3QuNGOXHJcbiAgICAgKi9cclxuICAgIHNvcnREZWZhdWx0OiBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgIHRoaXMuX3NvcnQgPSBbXTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX2lzUmVjb3Jkc1JlcXVlc3QpIHtcclxuICAgICAgICAgICAgdGhpcy5sb2FkKHRoaXMuX29wdGlvbnMucmVjb3Jkc1JlcXVlc3QudXJsLCB0aGlzLl9vcHRpb25zLnJlY29yZHNSZXF1ZXN0Lm1ldGhvZCk7XHJcblxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMucmVjb3JkcyA9IGNvcmV1aVRhYmxlUHJpdmF0ZS5zb3J0UmVjb3Jkc0J5U2VxKHRoaXMuX3JlY29yZHMpO1xyXG4gICAgICAgICAgICB0aGlzLnJlZnJlc2goKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvcmV1aVRhYmxlUHJpdmF0ZS5fdHJpZ2dlcih0aGlzLCAncmVjb3Jkc19zb3J0JywgWyB0aGlzIF0pO1xyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQo9C00LDQu9C10L3QuNC1INGB0YLRgNC+0LrQuCDQuNC3INGC0LDQsdC70LjRhtGLINC/0L4g0LjQvdC00LXQutGB0YNcclxuICAgICAqIEBwYXJhbSBpbmRleFxyXG4gICAgICovXHJcbiAgICByZW1vdmVSZWNvcmRCeUluZGV4OiBmdW5jdGlvbiAoaW5kZXgpIHtcclxuXHJcbiAgICAgICAgbGV0IHJlY29yZEtleSA9IG51bGw7XHJcblxyXG4gICAgICAgICQuZWFjaCh0aGlzLl9yZWNvcmRzLCBmdW5jdGlvbiAoa2V5LCByZWNvcmRJdGVtKSB7XHJcbiAgICAgICAgICAgIGlmIChyZWNvcmRJdGVtLmluZGV4ID09PSBpbmRleCkge1xyXG4gICAgICAgICAgICAgICAgcmVjb3JkS2V5ID0ga2V5O1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGlmIChyZWNvcmRLZXkgIT09IG51bGwgJiYgcmVjb3JkS2V5ID49IDApIHtcclxuICAgICAgICAgICAgdGhpcy5fcmVjb3Jkcy5zcGxpY2UocmVjb3JkS2V5LCAxKTtcclxuXHJcbiAgICAgICAgICAgIGxldCB0ciA9IGNvcmV1aVRhYmxlRWxlbWVudHMuZ2V0VHJCeUluZGV4KHRoaXMuZ2V0SWQoKSwgaW5kZXgpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRyLmxlbmd0aCA+PSAwKSB7XHJcbiAgICAgICAgICAgICAgICB0ci5mYWRlT3V0KCdmYXN0JywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRyLnJlbW92ZSgpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuX3JlY29yZHNOdW1iZXItLTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCU0L7QsdCw0LLQu9C10L3QuNC1INGB0YLRgNC+0LrQuCDQsiDRgtCw0LHQu9C40YbRgyDQv9C+0YHQu9C1INGB0YLRgNC+0LrQuCDRgSDQuNC90LTQtdC60YHQvtC8XHJcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gcmVjb3JkRGF0YVxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGluZGV4XHJcbiAgICAgKi9cclxuICAgIGFkZFJlY29yZEFmdGVySW5kZXg6IGZ1bmN0aW9uIChyZWNvcmREYXRhLCBpbmRleCkge1xyXG5cclxuICAgICAgICBsZXQgdHIgPSBjb3JldWlUYWJsZUVsZW1lbnRzLmdldFRyQnlJbmRleCh0aGlzLmdldElkKCksIGluZGV4KTtcclxuXHJcbiAgICAgICAgaWYgKHRyLmxlbmd0aCA+PSAwKSB7XHJcbiAgICAgICAgICAgIGxldCByZWNvcmQgPSBjb3JldWlUYWJsZVByaXZhdGUuYWRkUmVjb3JkKHRoaXMsIHJlY29yZERhdGEsIGluZGV4KTtcclxuXHJcbiAgICAgICAgICAgIGlmIChyZWNvcmQpIHtcclxuICAgICAgICAgICAgICAgIHRyLmFmdGVyKFxyXG4gICAgICAgICAgICAgICAgICAgIGNvcmV1aVRhYmxlUmVuZGVyLnJlbmRlclJlY29yZCh0aGlzLCByZWNvcmQpXHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fcmVjb3Jkc051bWJlcisrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQlNC+0LHQsNCy0LvQtdC90LjQtSDRgdGC0YDQvtC60Lgg0LIg0YLQsNCx0LvQuNGG0YMg0L/QtdGA0LXQtCDRgdGC0YDQvtC60L7QuSDRgSDQuNC90LTQtdC60YHQvtC8XHJcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gcmVjb3JkRGF0YVxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGluZGV4XHJcbiAgICAgKi9cclxuICAgIGFkZFJlY29yZEJlZm9yZUluZGV4OiBmdW5jdGlvbiAocmVjb3JkRGF0YSwgaW5kZXgpIHtcclxuXHJcbiAgICAgICAgbGV0IHRyID0gY29yZXVpVGFibGVFbGVtZW50cy5nZXRUckJ5SW5kZXgodGhpcy5nZXRJZCgpLCBpbmRleCk7XHJcblxyXG4gICAgICAgIGlmICh0ci5sZW5ndGggPj0gMCkge1xyXG4gICAgICAgICAgICBsZXQgcmVjb3JkID0gY29yZXVpVGFibGVQcml2YXRlLmFkZFJlY29yZEJlZm9yZSh0aGlzLCByZWNvcmREYXRhLCBpbmRleCk7XHJcblxyXG4gICAgICAgICAgICBpZiAocmVjb3JkKSB7XHJcbiAgICAgICAgICAgICAgICB0ci5iZWZvcmUoXHJcbiAgICAgICAgICAgICAgICAgICAgY29yZXVpVGFibGVSZW5kZXIucmVuZGVyUmVjb3JkKHRoaXMsIHJlY29yZClcclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9yZWNvcmRzTnVtYmVyKys7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCU0L7QsdCw0LLQu9C10L3QuNC1INGB0YLRgNC+0LrQuCDQsiDQvdCw0YfQsNC70L4g0YLQsNCx0LvQuNGG0YtcclxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSByZWNvcmREYXRhXHJcbiAgICAgKi9cclxuICAgIGFkZFJlY29yZEZpcnN0OiBmdW5jdGlvbiAocmVjb3JkRGF0YSkge1xyXG5cclxuICAgICAgICBsZXQgdGJvZHkgPSBjb3JldWlUYWJsZUVsZW1lbnRzLmdldFRhYmxlVGJvZHkodGhpcy5nZXRJZCgpKTtcclxuXHJcbiAgICAgICAgaWYgKHRib2R5Lmxlbmd0aCA+PSAwKSB7XHJcbiAgICAgICAgICAgIGxldCByZWNvcmQgPSBjb3JldWlUYWJsZVByaXZhdGUuYWRkUmVjb3JkKHRoaXMsIHJlY29yZERhdGEsIDApO1xyXG5cclxuICAgICAgICAgICAgdGJvZHkucHJlcGVuZChcclxuICAgICAgICAgICAgICAgIGNvcmV1aVRhYmxlUmVuZGVyLnJlbmRlclJlY29yZCh0aGlzLCByZWNvcmQpXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIHRoaXMuX3JlY29yZHNOdW1iZXIrKztcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCU0L7QsdCw0LLQu9C10L3QuNC1INGB0YLRgNC+0LrQuCDQsiDQutC+0L3QtdGGINGC0LDQsdC70LjRhtGLXHJcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gcmVjb3JkRGF0YVxyXG4gICAgICovXHJcbiAgICBhZGRSZWNvcmRMYXN0OiBmdW5jdGlvbiAocmVjb3JkRGF0YSkge1xyXG5cclxuICAgICAgICBsZXQgdGJvZHkgPSBjb3JldWlUYWJsZUVsZW1lbnRzLmdldFRhYmxlVGJvZHkodGhpcy5nZXRJZCgpKTtcclxuXHJcbiAgICAgICAgaWYgKHRib2R5Lmxlbmd0aCA+PSAwKSB7XHJcbiAgICAgICAgICAgIGxldCByZWNvcmQgPSBjb3JldWlUYWJsZVByaXZhdGUuYWRkUmVjb3JkKHRoaXMsIHJlY29yZERhdGEpO1xyXG5cclxuICAgICAgICAgICAgdGJvZHkuYXBwZW5kKFxyXG4gICAgICAgICAgICAgICAgY29yZXVpVGFibGVSZW5kZXIucmVuZGVyUmVjb3JkKHRoaXMsIHJlY29yZClcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgdGhpcy5fcmVjb3Jkc051bWJlcisrO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC60LDQtyDRg9C60LDQt9Cw0L3QvdGL0YUg0LfQsNC/0LjRgdC10Lkg0LIg0YLQsNCx0LvQuNGG0LVcclxuICAgICAqIEBwYXJhbSB7QXJyYXl9ICByZWNvcmRzXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdG90YWxcclxuICAgICAqL1xyXG4gICAgc2V0UmVjb3JkczogZnVuY3Rpb24gKHJlY29yZHMsIHRvdGFsKSB7XHJcblxyXG4gICAgICAgIGlmICggISBBcnJheS5pc0FycmF5KHJlY29yZHMpKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX3JlY29yZHNUb3RhbCA9IGNvcmV1aVRhYmxlVXRpbHMuaXNOdW1lcmljKHRvdGFsKSA/IHBhcnNlSW50KHRvdGFsKSA6IHJlY29yZHMubGVuZ3RoO1xyXG5cclxuICAgICAgICBjb3JldWlUYWJsZVByaXZhdGUuc2V0UmVjb3Jkcyh0aGlzLCByZWNvcmRzKTtcclxuXHJcbiAgICAgICAgaWYgKHJlY29yZHMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICB0aGlzLl9yZWNvcmRzTnVtYmVyID0gdGhpcy5fcGFnZSA9PT0gMVxyXG4gICAgICAgICAgICAgICAgPyAxXHJcbiAgICAgICAgICAgICAgICA6ICgodGhpcy5fcGFnZSAtIDEpICogdGhpcy5fcmVjb3Jkc1BlclBhZ2UpICsgMTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCByZWNvcmRzRWxlbWVudHMgPSBjb3JldWlUYWJsZVJlbmRlci5yZW5kZXJSZWNvcmRzKHRoaXMsIHRoaXMuX3JlY29yZHMpO1xyXG4gICAgICAgIGxldCB0YWJsZUJvZHkgICAgICAgPSBjb3JldWlUYWJsZUVsZW1lbnRzLmdldFRhYmxlVGJvZHkodGhpcy5nZXRJZCgpKTtcclxuXHJcbiAgICAgICAgdGFibGVCb2R5Lmh0bWwoJycpO1xyXG5cclxuICAgICAgICAkLmVhY2gocmVjb3Jkc0VsZW1lbnRzLCBmdW5jdGlvbiAoa2V5LCByZWNvcmRFbGVtZW50KSB7XHJcbiAgICAgICAgICAgIHRhYmxlQm9keS5hcHBlbmQocmVjb3JkRWxlbWVudCk7XHJcbiAgICAgICAgfSlcclxuXHJcblxyXG4gICAgICAgIGNvcmV1aVRhYmxlUHJpdmF0ZS5fdHJpZ2dlcih0aGlzLCAncmVjb3Jkc19zaG93JywgWyB0aGlzIF0pO1xyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0LrQvtC70LjRh9C10YHRgtCy0LAg0YHRgtGA0L7QulxyXG4gICAgICogQHJldHVybiB7bnVtYmVyfVxyXG4gICAgICovXHJcbiAgICBnZXRSZWNvcmRzQ291bnQ6IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgbGV0IGNvdW50ID0gMDtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX2lzUmVjb3Jkc1JlcXVlc3QpIHtcclxuICAgICAgICAgICAgY291bnQgPSB0aGlzLl9yZWNvcmRzVG90YWw7XHJcblxyXG4gICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICAkLmVhY2godGhpcy5fcmVjb3JkcywgZnVuY3Rpb24gKGtleSwgcmVjb3JkKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAocmVjb3JkLnNob3cpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb3VudCsrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBjb3VudDtcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KDQsNGB0LrRgNGL0YLQuNC1IC8g0YHQutGA0YvRgtC40LUg0LTQvtC/0L7Qu9C90LjRgtC10LvRjNC90YvRhSDQtNCw0L3QvdGL0YUg0YHRgtGA0L7QutC4XHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlY29yZEluZGV4XHJcbiAgICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fGpRdWVyeXxzdHJpbmd8QXJyYXl8ZnVuY3Rpb259IGNvbnRlbnRcclxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNSZWJ1aWxkIC0gdHJ1ZSBkZWZhdWx0XHJcbiAgICAgKi9cclxuICAgIGV4cGFuZFJlY29yZENvbnRlbnQ6IGZ1bmN0aW9uIChyZWNvcmRJbmRleCwgY29udGVudCwgaXNSZWJ1aWxkKSB7XHJcblxyXG4gICAgICAgIGxldCByZWNvcmRFbGVtZW50ICA9IGNvcmV1aVRhYmxlRWxlbWVudHMuZ2V0VHJCeUluZGV4KHRoaXMuZ2V0SWQoKSwgcmVjb3JkSW5kZXgpO1xyXG4gICAgICAgIGxldCByZWNvcmRFeHBhbmRlZCA9IGNvcmV1aVRhYmxlRWxlbWVudHMuZ2V0RXhwYW5kUm93KHJlY29yZEVsZW1lbnQpO1xyXG5cclxuICAgICAgICBpZiAocmVjb3JkRWxlbWVudC5oYXNDbGFzcygncmVjb3JkLWV4cGFuZGVkJykpIHtcclxuXHJcbiAgICAgICAgICAgIGlmIChyZWNvcmRFeHBhbmRlZCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGlzUmVidWlsZCA9PT0gdW5kZWZpbmVkIHx8IGlzUmVidWlsZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvcmV1aVRhYmxlRWxlbWVudHMucmVtb3ZlRXhwYW5kUm93KHJlY29yZEV4cGFuZGVkKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29yZXVpVGFibGVFbGVtZW50cy5oaWRlRXhwYW5kUm93KHJlY29yZEV4cGFuZGVkKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmVjb3JkRWxlbWVudC5yZW1vdmVDbGFzcygncmVjb3JkLWV4cGFuZGVkJyk7XHJcbiAgICAgICAgICAgIGNvcmV1aVRhYmxlUHJpdmF0ZS5fdHJpZ2dlcih0aGlzLCAncmVjb3JkX2V4cGFuZF9oaWRlJywgW3JlY29yZEluZGV4XSk7XHJcblxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmIChyZWNvcmRFeHBhbmRlZCkge1xyXG4gICAgICAgICAgICAgICAgY29yZXVpVGFibGVFbGVtZW50cy5zaG93RXhwYW5kUm93KHJlY29yZEV4cGFuZGVkKTtcclxuICAgICAgICAgICAgICAgIHJlY29yZEVsZW1lbnQuYWRkQ2xhc3MoJ3JlY29yZC1leHBhbmRlZCcpO1xyXG4gICAgICAgICAgICAgICAgY29yZXVpVGFibGVQcml2YXRlLl90cmlnZ2VyKHRoaXMsICdyZWNvcmRfZXhwYW5kX3Nob3cnLCBbcmVjb3JkSW5kZXhdKTtcclxuXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgY2FsbGJhY2tSZXN1bHQgPSBjb250ZW50KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjYWxsYmFja1Jlc3VsdCBpbnN0YW5jZW9mIFByb21pc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHRoYXQgPSB0aGlzO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2tSZXN1bHRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3JldWlUYWJsZUVsZW1lbnRzLmFkZEV4cGFuZFJvdyh0aGF0LCByZWNvcmRFbGVtZW50LCByZXN1bHQpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3JldWlUYWJsZUVsZW1lbnRzLmFkZEV4cGFuZFJvdyh0aGF0LCByZWNvcmRFbGVtZW50LCAnJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNle1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb3JldWlUYWJsZUVsZW1lbnRzLmFkZEV4cGFuZFJvdyh0aGlzLCByZWNvcmRFbGVtZW50LCBjYWxsYmFja1Jlc3VsdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29yZXVpVGFibGVFbGVtZW50cy5hZGRFeHBhbmRSb3codGhpcywgcmVjb3JkRWxlbWVudCwgY29udGVudCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCg0LDRgdC60YDRi9GC0LjQtSAvINGB0LrRgNGL0YLQuNC1INC00L7Qv9C+0LvQvdC40YLQtdC70YzQvdGL0YUg0LTQsNC90L3Ri9GFINGB0YLRgNC+0LrQuFxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9ICByZWNvcmRJbmRleFxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9ICB1cmxcclxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gaXNSZWJ1aWxkXHJcbiAgICAgKi9cclxuICAgIGV4cGFuZFJlY29yZFVybDogZnVuY3Rpb24gKHJlY29yZEluZGV4LCB1cmwsIGlzUmVidWlsZCkge1xyXG5cclxuICAgICAgICBsZXQgdGhhdCA9IHRoaXM7XHJcblxyXG4gICAgICAgIHRoaXMuZXhwYW5kUmVjb3JkQ29udGVudChyZWNvcmRJbmRleCwgZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAgICAgdGhhdC5sb2NrKCk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG5cclxuICAgICAgICAgICAgICAgICQuYWpheCh7XHJcbiAgICAgICAgICAgICAgICAgICAgbWV0aG9kIDogJ2dldCcsXHJcbiAgICAgICAgICAgICAgICAgICAgdXJsICAgIDogdXJsLFxyXG4gICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChyZXNwb25zZSwgdGV4dFN0YXR1cywgeGhyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCByZXN1bHQgPSByZXNwb25zZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcmVzcG9uc2UgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoU3RyaW5nKHhoci5nZXRSZXNwb25zZUhlYWRlcignQ29udGVudC1UeXBlJykpLmluZGV4T2YoJ2FwcGxpY2F0aW9uL2pzb24nKSA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IEpTT04ucGFyc2UocmVzcG9uc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uKHhociwgdGV4dFN0YXR1cywgZXJyb3JUaHJvd24pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KHhociwgdGV4dFN0YXR1cywgZXJyb3JUaHJvd24pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgY29tcGxldGU6IGZ1bmN0aW9uKHhociwgdGV4dFN0YXR1cykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGF0LnVubG9jaygpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIH0sIGlzUmVidWlsZCk7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjb3JldWlUYWJsZUluc3RhbmNlOyIsIlxyXG5pbXBvcnQgY29yZXVpVGFibGVJbnN0YW5jZSBmcm9tICcuL2NvcmV1aS50YWJsZS5pbnN0YW5jZSc7XHJcblxyXG5sZXQgY29yZXVpVGFibGUgPSB7XHJcblxyXG4gICAgY29sdW1uczoge30sXHJcbiAgICBjb250cm9sczoge30sXHJcbiAgICBmaWx0ZXJzOiB7fSxcclxuICAgIHNlYXJjaDoge30sXHJcbiAgICBsYW5nOiB7fSxcclxuXHJcbiAgICBfaW5zdGFuY2VzOiB7fSxcclxuICAgIF9zZXR0aW5nczoge1xyXG4gICAgICAgIGxhbmc6ICdydScsXHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnNcclxuICAgICAqIEByZXR1cm5zIHtDb3JlVUkudGFibGUuaW5zdGFuY2V9XHJcbiAgICAgKi9cclxuICAgIGNyZWF0ZTogZnVuY3Rpb24gKG9wdGlvbnMpIHtcclxuXHJcbiAgICAgICAgbGV0IGluc3RhbmNlID0gJC5leHRlbmQodHJ1ZSwge30sIGNvcmV1aVRhYmxlSW5zdGFuY2UpO1xyXG4gICAgICAgIGluc3RhbmNlLl9pbml0KG9wdGlvbnMgaW5zdGFuY2VvZiBPYmplY3QgPyBvcHRpb25zIDoge30pO1xyXG5cclxuICAgICAgICBsZXQgdGFibGVJZCA9IGluc3RhbmNlLmdldElkKCk7XHJcbiAgICAgICAgdGhpcy5faW5zdGFuY2VzW3RhYmxlSWRdID0gaW5zdGFuY2U7XHJcblxyXG4gICAgICAgIHJldHVybiBpbnN0YW5jZTtcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGlkXHJcbiAgICAgKiBAcmV0dXJucyB7Q29yZVVJLnRhYmxlLmluc3RhbmNlfG51bGx9XHJcbiAgICAgKi9cclxuICAgIGdldDogZnVuY3Rpb24gKGlkKSB7XHJcblxyXG4gICAgICAgIGlmICggISB0aGlzLl9pbnN0YW5jZXMuaGFzT3duUHJvcGVydHkoaWQpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCAhICQoJyNjb3JldWktdGFibGUtJyArIGlkKVswXSkge1xyXG4gICAgICAgICAgICBkZWxldGUgdGhpcy5faW5zdGFuY2VzW2lkXTtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5faW5zdGFuY2VzW2lkXTtcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KPRgdGC0LDQvdC+0LLQutCwINC90LDRgdGC0YDQvtC10LpcclxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBzZXR0aW5nc1xyXG4gICAgICovXHJcbiAgICBzZXRTZXR0aW5nczogZnVuY3Rpb24oc2V0dGluZ3MpIHtcclxuXHJcbiAgICAgICAgdGhpcy5fc2V0dGluZ3MgPSAkLmV4dGVuZCh0cnVlLCB7fSwgdGhpcy5fc2V0dGluZ3MsIHNldHRpbmdzKTtcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC30L3QsNGH0LXQvdC40Y8g0L3QsNGB0YLRgNC+0LnQutC4XHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxyXG4gICAgICovXHJcbiAgICBnZXRTZXR0aW5nOiBmdW5jdGlvbihuYW1lKSB7XHJcblxyXG4gICAgICAgIGxldCB2YWx1ZSA9IG51bGw7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9zZXR0aW5ncy5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xyXG4gICAgICAgICAgICB2YWx1ZSA9IHRoaXMuX3NldHRpbmdzW25hbWVdO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjb3JldWlUYWJsZTsiLCJcclxuaW1wb3J0IGNvcmV1aVRhYmxlIGZyb20gXCIuLi9jb3JldWkudGFibGVcIjtcclxuXHJcbmNvcmV1aVRhYmxlLmxhbmcucnUgPSB7XHJcbiAgICBcImVtcHR5UmVjb3Jkc1wiOiBcItCd0LXRgiDQt9Cw0L/QuNGB0LXQuVwiLFxyXG4gICAgXCJsb2FkaW5nXCI6IFwi0JfQsNCz0YDRg9C30LrQsC4uLlwiLFxyXG4gICAgXCJ0b3RhbFwiOiBcItCS0YHQtdCz0L5cIixcclxuICAgIFwiYWxsXCI6IFwi0JLRgdC1XCIsXHJcbiAgICBcImNvbXBsZXRlXCI6IFwi0J/RgNC40LzQtdC90LjRgtGMXCIsXHJcbiAgICBcInNlYXJjaFwiOiBcItCY0YHQutCw0YLRjFwiLFxyXG4gICAgXCJjbGVhclwiOiBcItCe0YfQuNGB0YLQuNGC0YxcIixcclxufSIsIlxyXG5pbXBvcnQgY29yZXVpVGFibGUgZnJvbSBcIi4uL2NvcmV1aS50YWJsZVwiO1xyXG5cclxuY29yZXVpVGFibGUubGFuZy5ydSA9IHtcclxuICAgIFwiZW1wdHlSZWNvcmRzXCI6IFwiTm8gcmVjb3Jkc1wiLFxyXG4gICAgXCJsb2FkaW5nXCI6IFwiTG9hZGluZy4uLlwiLFxyXG4gICAgXCJ0b3RhbFwiOiBcIlRvdGFsXCIsXHJcbiAgICBcImFsbFwiOiBcIkFsbFwiLFxyXG4gICAgXCJjb21wbGV0ZVwiOiBcIkNvbXBsZXRlXCIsXHJcbiAgICBcInNlYXJjaFwiOiBcIlNlYXJjaFwiLFxyXG4gICAgXCJjbGVhclwiOiBcIkNsZWFyXCIsXHJcbn0iLCJcclxuaW1wb3J0ICcuLi8uLi8uLi9ub2RlX21vZHVsZXMvZWpzL2Vqcy5taW4nO1xyXG5pbXBvcnQgY29yZXVpVGFibGVUcGwgICBmcm9tICcuLi9jb3JldWkudGFibGUudGVtcGxhdGVzJztcclxuaW1wb3J0IGNvcmV1aVRhYmxlVXRpbHMgZnJvbSAnLi4vY29yZXVpLnRhYmxlLnV0aWxzJztcclxuaW1wb3J0IGNvcmV1aVRhYmxlICAgICAgZnJvbSBcIi4uL2NvcmV1aS50YWJsZVwiO1xyXG5pbXBvcnQgY29yZXVpVGFibGVFbGVtZW50cyBmcm9tIFwiLi4vY29yZXVpLnRhYmxlLmVsZW1lbnRzXCI7XHJcblxyXG5jb3JldWlUYWJsZS5jb250cm9scy5saW5rID0ge1xyXG5cclxuICAgIF9pZDogbnVsbCxcclxuICAgIF90YWJsZTogbnVsbCxcclxuICAgIF9vcHRpb25zOiB7XHJcbiAgICAgICAgaWQ6IG51bGwsXHJcbiAgICAgICAgdHlwZTogJ2xpbmsnLFxyXG4gICAgICAgIGhyZWY6IG51bGwsXHJcbiAgICAgICAgY29udGVudDogbnVsbCxcclxuICAgICAgICBvbkNsaWNrOiBudWxsLFxyXG4gICAgICAgIGF0dHI6IG51bGxcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y9cclxuICAgICAqIEBwYXJhbSB7Q29yZVVJLnRhYmxlLmluc3RhbmNlfSB0YWJsZVxyXG4gICAgICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnNcclxuICAgICAqL1xyXG4gICAgaW5pdDogZnVuY3Rpb24gKHRhYmxlLCBvcHRpb25zKSB7XHJcblxyXG4gICAgICAgIHRoaXMuX29wdGlvbnMgPSAkLmV4dGVuZCh7fSwgdGhpcy5fb3B0aW9ucywgb3B0aW9ucyk7XHJcbiAgICAgICAgdGhpcy5fdGFibGUgICA9IHRhYmxlO1xyXG4gICAgICAgIHRoaXMuX2lkICAgICAgPSB0aGlzLl9vcHRpb25zLmhhc093blByb3BlcnR5KCdpZCcpICYmIHR5cGVvZiB0aGlzLl9vcHRpb25zLmlkID09PSAnc3RyaW5nJyAmJiB0aGlzLl9vcHRpb25zLmlkXHJcbiAgICAgICAgICAgID8gdGhpcy5fb3B0aW9ucy5pZFxyXG4gICAgICAgICAgICA6IGNvcmV1aVRhYmxlVXRpbHMuaGFzaENvZGUoKTtcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y8g0YHQvtCx0YvRgtC40Lkg0YHQstGP0LfQsNC90L3Ri9GFINGBINGN0LvQtdC80LXQvdGC0L7QvCDRg9C/0YDQsNCy0LvQtdC90LjRj1xyXG4gICAgICovXHJcbiAgICBpbml0RXZlbnRzOiBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgIGxldCB0aGF0ID0gdGhpcztcclxuXHJcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLl9vcHRpb25zLm9uQ2xpY2sgPT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIHRoaXMuX29wdGlvbnMub25DbGljayA9PT0gJ3N0cmluZycpIHtcclxuXHJcbiAgICAgICAgICAgIGxldCBjb250cm9sID0gY29yZXVpVGFibGVFbGVtZW50cy5nZXRDb250cm9sKHRoaXMuX3RhYmxlLmdldElkKCksIHRoaXMuZ2V0SWQoKSk7XHJcbiAgICAgICAgICAgICQoJ2EnLCBjb250cm9sKVxyXG4gICAgICAgICAgICAgICAgLmNsaWNrKGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdGhhdC5fb3B0aW9ucy5vbkNsaWNrID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGF0Ll9vcHRpb25zLm9uQ2xpY2soZXZlbnQsIHRoYXQuX3RhYmxlKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdGhhdC5fb3B0aW9ucy5vbkNsaWNrID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKG5ldyBGdW5jdGlvbih0aGF0Ll9vcHRpb25zLm9uQ2xpY2spKSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1IElEINGN0LvQtdC80LXQvdGC0LAg0YPQv9GA0LDQstC70LXQvdC40Y9cclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIGdldElkOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lkO1xyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQpNC+0YDQvNC40YDQvtCy0LDQvdC40LUg0LrQvtC90YLQtdC90YLQsCDQtNC70Y8g0YDQsNC30LzQtdGJ0LXQvdC40Y8g0L3QsCDRgdGC0YDQsNC90LjRhtC1XHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxyXG4gICAgICovXHJcbiAgICByZW5kZXI6IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICBsZXQgYXR0cmlidXRlcyA9IFtdO1xyXG5cclxuICAgICAgICBpZiAodHlwZW9mIHRoaXMuX29wdGlvbnMuYXR0ciA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgICAgICAgJC5lYWNoKHRoaXMuX29wdGlvbnMuYXR0ciwgZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzLnB1c2gobmFtZSArICc9XCInICsgdmFsdWUgKyAnXCInKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gZWpzLnJlbmRlcihjb3JldWlUYWJsZVRwbFsnY29udHJvbHMvbGluay5odG1sJ10sIHtcclxuICAgICAgICAgICAgaHJlZjogdGhpcy5fb3B0aW9ucy5ocmVmLFxyXG4gICAgICAgICAgICBjb250ZW50OiB0aGlzLl9vcHRpb25zLmNvbnRlbnQsXHJcbiAgICAgICAgICAgIGF0dHI6IGF0dHJpYnV0ZXMubGVuZ3RoID4gMCA/ICgnICcgKyBhdHRyaWJ1dGVzLmpvaW4oJyAnKSkgOiAnJyxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufSIsIlxyXG5pbXBvcnQgJy4uLy4uLy4uL25vZGVfbW9kdWxlcy9lanMvZWpzLm1pbic7XHJcbmltcG9ydCBjb3JldWlUYWJsZVRwbCAgICAgIGZyb20gJy4uL2NvcmV1aS50YWJsZS50ZW1wbGF0ZXMnO1xyXG5pbXBvcnQgY29yZXVpVGFibGVVdGlscyAgICBmcm9tICcuLi9jb3JldWkudGFibGUudXRpbHMnO1xyXG5pbXBvcnQgY29yZXVpVGFibGUgICAgICAgICBmcm9tIFwiLi4vY29yZXVpLnRhYmxlXCI7XHJcbmltcG9ydCBjb3JldWlUYWJsZUVsZW1lbnRzIGZyb20gXCIuLi9jb3JldWkudGFibGUuZWxlbWVudHNcIjtcclxuXHJcbmNvcmV1aVRhYmxlLmNvbnRyb2xzLmJ1dHRvbiA9IHtcclxuXHJcbiAgICBfaWQ6IG51bGwsXHJcbiAgICBfdGFibGU6IG51bGwsXHJcbiAgICBfb3B0aW9uczoge1xyXG4gICAgICAgIGlkOiBudWxsLFxyXG4gICAgICAgIHR5cGU6ICdidXR0b24nLFxyXG4gICAgICAgIGNvbnRlbnQ6IG51bGwsXHJcbiAgICAgICAgb25DbGljazogbnVsbCxcclxuICAgICAgICBhdHRyOiBudWxsXHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPXHJcbiAgICAgKiBAcGFyYW0ge0NvcmVVSS50YWJsZS5pbnN0YW5jZX0gdGFibGVcclxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zXHJcbiAgICAgKi9cclxuICAgIGluaXQ6IGZ1bmN0aW9uICh0YWJsZSwgb3B0aW9ucykge1xyXG5cclxuICAgICAgICB0aGlzLl9vcHRpb25zID0gJC5leHRlbmQoe30sIHRoaXMuX29wdGlvbnMsIG9wdGlvbnMpO1xyXG4gICAgICAgIHRoaXMuX3RhYmxlICAgPSB0YWJsZTtcclxuICAgICAgICB0aGlzLl9pZCAgICAgID0gdGhpcy5fb3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnaWQnKSAmJiB0eXBlb2YgdGhpcy5fb3B0aW9ucy5pZCA9PT0gJ3N0cmluZycgJiYgdGhpcy5fb3B0aW9ucy5pZFxyXG4gICAgICAgICAgICA/IHRoaXMuX29wdGlvbnMuaWRcclxuICAgICAgICAgICAgOiBjb3JldWlUYWJsZVV0aWxzLmhhc2hDb2RlKCk7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPINGB0L7QsdGL0YLQuNC5INGB0LLRj9C30LDQvdC90YvRhSDRgSDRjdC70LXQvNC10L3RgtC+0Lwg0YPQv9GA0LDQstC70LXQvdC40Y9cclxuICAgICAqL1xyXG4gICAgaW5pdEV2ZW50czogZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICBsZXQgdGhhdCA9IHRoaXM7XHJcblxyXG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5fb3B0aW9ucy5vbkNsaWNrID09PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiB0aGlzLl9vcHRpb25zLm9uQ2xpY2sgPT09ICdzdHJpbmcnKSB7XHJcblxyXG4gICAgICAgICAgICBsZXQgY29udHJvbCA9IGNvcmV1aVRhYmxlRWxlbWVudHMuZ2V0Q29udHJvbCh0aGlzLl90YWJsZS5nZXRJZCgpLCB0aGlzLmdldElkKCkpO1xyXG4gICAgICAgICAgICAkKCdidXR0b24nLCBjb250cm9sKVxyXG4gICAgICAgICAgICAgICAgLmNsaWNrKGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdGhhdC5fb3B0aW9ucy5vbkNsaWNrID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQuX29wdGlvbnMub25DbGljayhldmVudCwgdGhhdC5fdGFibGUpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiB0aGF0Ll9vcHRpb25zLm9uQ2xpY2sgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIChuZXcgRnVuY3Rpb24odGhhdC5fb3B0aW9ucy5vbkNsaWNrKSkoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSBJRCDRjdC70LXQvNC10L3RgtCwINGD0L/RgNCw0LLQu9C10L3QuNGPXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxyXG4gICAgICovXHJcbiAgICBnZXRJZDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9pZDtcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KTQvtGA0LzQuNGA0L7QstCw0L3QuNC1INC60L7QvdGC0LXQvdGC0LAg0LTQu9GPINGA0LDQt9C80LXRidC10L3QuNGPINC90LAg0YHRgtGA0LDQvdC40YbQtVxyXG4gICAgICogQHJldHVybnMge3N0cmluZ31cclxuICAgICAqL1xyXG4gICAgcmVuZGVyOiBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgbGV0IGF0dHJpYnV0ZXMgPSBbXTtcclxuXHJcbiAgICAgICAgaWYgKGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QodGhpcy5fb3B0aW9ucy5hdHRyKSkge1xyXG4gICAgICAgICAgICAkLmVhY2godGhpcy5fb3B0aW9ucy5hdHRyLCBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXMucHVzaChuYW1lICsgJz1cIicgKyB2YWx1ZSArICdcIicpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICByZXR1cm4gZWpzLnJlbmRlcihjb3JldWlUYWJsZVRwbFsnY29udHJvbHMvYnV0dG9uLmh0bWwnXSwge1xyXG4gICAgICAgICAgICBjb250ZW50OiB0aGlzLl9vcHRpb25zLmNvbnRlbnQsXHJcbiAgICAgICAgICAgIGF0dHI6IGF0dHJpYnV0ZXMubGVuZ3RoID4gMCA/ICgnICcgKyBhdHRyaWJ1dGVzLmpvaW4oJyAnKSkgOiAnJyxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufSIsIlxyXG5pbXBvcnQgJy4uLy4uLy4uL25vZGVfbW9kdWxlcy9lanMvZWpzLm1pbic7XHJcbmltcG9ydCBjb3JldWlUYWJsZVRwbCAgIGZyb20gJy4uL2NvcmV1aS50YWJsZS50ZW1wbGF0ZXMnO1xyXG5pbXBvcnQgY29yZXVpVGFibGVVdGlscyBmcm9tICcuLi9jb3JldWkudGFibGUudXRpbHMnO1xyXG5pbXBvcnQgY29yZXVpVGFibGUgICAgICBmcm9tIFwiLi4vY29yZXVpLnRhYmxlXCI7XHJcbmltcG9ydCBDb3JldWlUYWJsZVV0aWxzIGZyb20gXCIuLi9jb3JldWkudGFibGUudXRpbHNcIjtcclxuaW1wb3J0IGNvcmV1aVRhYmxlRWxlbWVudHMgZnJvbSBcIi4uL2NvcmV1aS50YWJsZS5lbGVtZW50c1wiO1xyXG5cclxuY29yZXVpVGFibGUuY29udHJvbHMuZHJvcGRvd24gPSB7XHJcblxyXG4gICAgX2lkOiBudWxsLFxyXG4gICAgX3RhYmxlOiBudWxsLFxyXG4gICAgX29wdGlvbnM6IHtcclxuICAgICAgICBpZDogbnVsbCxcclxuICAgICAgICB0eXBlOiAnZHJvcGRvd24nLFxyXG4gICAgICAgIGNvbnRlbnQ6IG51bGwsXHJcbiAgICAgICAgaXRlbXM6IG51bGwsXHJcbiAgICAgICAgYXR0cjoge1xyXG4gICAgICAgICAgICBjbGFzczogJ2J0biBidG4tcHJpbWFyeScsXHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQmNC90LjRhtC40LDQu9C40LfQsNGG0LjRj1xyXG4gICAgICogQHBhcmFtIHtDb3JlVUkudGFibGUuaW5zdGFuY2V9IHRhYmxlXHJcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gb3B0aW9uc1xyXG4gICAgICovXHJcbiAgICBpbml0OiBmdW5jdGlvbiAodGFibGUsIG9wdGlvbnMpIHtcclxuXHJcbiAgICAgICAgdGhpcy5fb3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCB0aGlzLl9vcHRpb25zLCBvcHRpb25zKTtcclxuICAgICAgICB0aGlzLl90YWJsZSAgID0gdGFibGU7XHJcbiAgICAgICAgdGhpcy5faWQgICAgICA9IHRoaXMuX29wdGlvbnMuaGFzT3duUHJvcGVydHkoJ2lkJykgJiYgdHlwZW9mIHRoaXMuX29wdGlvbnMuaWQgPT09ICdzdHJpbmcnICYmIHRoaXMuX29wdGlvbnMuaWRcclxuICAgICAgICAgICAgPyB0aGlzLl9vcHRpb25zLmlkXHJcbiAgICAgICAgICAgIDogY29yZXVpVGFibGVVdGlscy5oYXNoQ29kZSgpO1xyXG5cclxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh0aGlzLl9vcHRpb25zLml0ZW1zKSkge1xyXG4gICAgICAgICAgICAkLmVhY2godGhpcy5fb3B0aW9ucy5pdGVtcywgZnVuY3Rpb24gKGtleSwgaXRlbSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKENvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QoaXRlbSkgJiYgdHlwZW9mIGl0ZW0udHlwZSA9PT0gJ3N0cmluZycpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaXRlbS5pZCA9IGNvcmV1aVRhYmxlVXRpbHMuaGFzaENvZGUoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0L/QsNGA0LDQvNC10YLRgNC+0LJcclxuICAgICAqIEByZXR1cm5zIHtvYmplY3R9XHJcbiAgICAgKi9cclxuICAgIGdldE9wdGlvbnM6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gJC5leHRlbmQodHJ1ZSwge30sIHRoaXMuX29wdGlvbnMpO1xyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQmNC90LjRhtC40LDQu9C40LfQsNGG0LjRjyDRgdC+0LHRi9GC0LjQuSDRgdCy0Y/Qt9Cw0L3QvdGL0YUg0YEg0Y3Qu9C10LzQtdC90YLQvtC8INGD0L/RgNCw0LLQu9C10L3QuNGPXHJcbiAgICAgKi9cclxuICAgIGluaXRFdmVudHM6IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgbGV0IHRoYXQgICAgPSB0aGlzO1xyXG4gICAgICAgIGxldCBvcHRpb25zID0gdGhpcy5nZXRPcHRpb25zKCk7XHJcblxyXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KG9wdGlvbnMuaXRlbXMpKSB7XHJcbiAgICAgICAgICAgICQuZWFjaChvcHRpb25zLml0ZW1zLCBmdW5jdGlvbiAoa2V5LCBpdGVtKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoQ29yZXVpVGFibGVVdGlscy5pc09iamVjdChpdGVtKSAmJiB0eXBlb2YgaXRlbS50eXBlID09PSAnc3RyaW5nJykge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbS50eXBlID09PSAnYnV0dG9uJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbS5oYXNPd25Qcm9wZXJ0eSgnY29udGVudCcpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtLmhhc093blByb3BlcnR5KCdvbkNsaWNrJykgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFsnc3RyaW5nJywgJ2Z1bmN0aW9uJ10uaW5kZXhPZih0eXBlb2YgaXRlbS5vbkNsaWNrKSA+PSAwICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlb2YgaXRlbS5jb250ZW50ID09PSAnc3RyaW5nJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgY29udHJvbCA9IGNvcmV1aVRhYmxlRWxlbWVudHMuZ2V0Q29udHJvbCh0aGF0Ll90YWJsZS5nZXRJZCgpLCB0aGF0LmdldElkKCkpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoJ2J1dHRvbiNidG4tZHJvcGRvd24tJyArIGl0ZW0uaWQsIGNvbnRyb2wpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmNsaWNrKGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGl0ZW0ub25DbGljayA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5vbkNsaWNrKGV2ZW50LCB0aGF0Ll90YWJsZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBpdGVtLm9uQ2xpY2sgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAobmV3IEZ1bmN0aW9uKGl0ZW0ub25DbGljaykpKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUgSUQg0Y3Qu9C10LzQtdC90YLQsCDRg9C/0YDQsNCy0LvQtdC90LjRj1xyXG4gICAgICogQHJldHVybnMge3N0cmluZ31cclxuICAgICAqL1xyXG4gICAgZ2V0SWQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5faWQ7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCk0L7RgNC80LjRgNC+0LLQsNC90LjQtSDQutC+0L3RgtC10L3RgtCwINC00LvRjyDRgNCw0LfQvNC10YnQtdC90LjRjyDQvdCwINGB0YLRgNCw0L3QuNGG0LVcclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIHJlbmRlcjogZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgIGxldCBvcHRpb25zICAgID0gdGhpcy5nZXRPcHRpb25zKCk7XHJcbiAgICAgICAgbGV0IGl0ZW1zICAgICAgPSBbXTtcclxuICAgICAgICBsZXQgYXR0cmlidXRlcyA9IFtdO1xyXG5cclxuXHJcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkob3B0aW9ucy5pdGVtcykpIHtcclxuICAgICAgICAgICAgJC5lYWNoKG9wdGlvbnMuaXRlbXMsIGZ1bmN0aW9uIChrZXksIGl0ZW0pIHtcclxuICAgICAgICAgICAgICAgIGlmIChDb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KGl0ZW0pICYmIHR5cGVvZiBpdGVtLnR5cGUgPT09ICdzdHJpbmcnKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpdGVtLnR5cGUgPT09ICdsaW5rJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbS5oYXNPd25Qcm9wZXJ0eSgnbGluaycpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtLmhhc093blByb3BlcnR5KCdjb250ZW50JykgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVvZiBpdGVtLmxpbmsgPT09ICdzdHJpbmcnICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlb2YgaXRlbS5jb250ZW50ID09PSAnc3RyaW5nJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdsaW5rJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5rOiBpdGVtLmxpbmssXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudDogaXRlbS5jb250ZW50LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpdGVtLnR5cGUgPT09ICdidXR0b24nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpdGVtLmhhc093blByb3BlcnR5KCdjb250ZW50JykgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0uaGFzT3duUHJvcGVydHkoJ29uQ2xpY2snKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGl0ZW0uY29udGVudCA9PT0gJ3N0cmluZycgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFsnc3RyaW5nJywgJ2Z1bmN0aW9uJ10uaW5kZXhPZih0eXBlb2YgaXRlbS5vbkNsaWNrKSA+PSAwXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2J1dHRvbicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IGl0ZW0uaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudDogaXRlbS5jb250ZW50LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaXRlbS50eXBlID09PSAnZGl2aWRlcicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnZGl2aWRlcicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoY29yZXVpVGFibGVVdGlscy5pc09iamVjdChvcHRpb25zLmF0dHIpKSB7XHJcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmF0dHIuaGFzT3duUHJvcGVydHkoJ2NsYXNzJykgJiZcclxuICAgICAgICAgICAgICAgIFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIG9wdGlvbnMuYXR0ci5jbGFzcykgPj0gMFxyXG4gICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgIG9wdGlvbnMuYXR0ci5jbGFzcyArPSAnIGRyb3Bkb3duLXRvZ2dsZSc7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmF0dHIuaGFzT3duUHJvcGVydHkoJ3R5cGUnKSkge1xyXG4gICAgICAgICAgICAgICAgZGVsZXRlIG9wdGlvbnMuYXR0ci50eXBlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmF0dHIuaGFzT3duUHJvcGVydHkoJ2lkJykpIHtcclxuICAgICAgICAgICAgICAgIGRlbGV0ZSBvcHRpb25zLmF0dHIuaWQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuYXR0ci5oYXNPd25Qcm9wZXJ0eSgnZGF0YS1icy10b2dnbGUnKSkge1xyXG4gICAgICAgICAgICAgICAgZGVsZXRlIG9wdGlvbnMuYXR0clsnZGF0YS1icy10b2dnbGUnXTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgJC5lYWNoKG9wdGlvbnMuYXR0ciwgZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzLnB1c2gobmFtZSArICc9XCInICsgdmFsdWUgKyAnXCInKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gZWpzLnJlbmRlcihjb3JldWlUYWJsZVRwbFsnY29udHJvbHMvZHJvcGRvd24uaHRtbCddLCB7XHJcbiAgICAgICAgICAgIGNvbnRlbnQ6IG9wdGlvbnMuY29udGVudCxcclxuICAgICAgICAgICAgcG9zaXRpb246IG9wdGlvbnMuaGFzT3duUHJvcGVydHkoJ3Bvc2l0aW9uJykgJiYgdHlwZW9mIG9wdGlvbnMucG9zaXRpb24gPT09ICdzdHJpbmcnID8gb3B0aW9ucy5wb3NpdGlvbiA6ICdlbmQnLFxyXG4gICAgICAgICAgICBhdHRyOiBhdHRyaWJ1dGVzLmxlbmd0aCA+IDAgPyAoJyAnICsgYXR0cmlidXRlcy5qb2luKCcgJykpIDogJycsXHJcbiAgICAgICAgICAgIGl0ZW1zOiBpdGVtcyxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufSIsIlxyXG5pbXBvcnQgJy4uLy4uLy4uL25vZGVfbW9kdWxlcy9lanMvZWpzLm1pbic7XHJcbmltcG9ydCBjb3JldWlUYWJsZVRwbCAgIGZyb20gJy4uL2NvcmV1aS50YWJsZS50ZW1wbGF0ZXMnO1xyXG5pbXBvcnQgY29yZXVpVGFibGVVdGlscyBmcm9tICcuLi9jb3JldWkudGFibGUudXRpbHMnO1xyXG5pbXBvcnQgY29yZXVpVGFibGUgICAgICBmcm9tIFwiLi4vY29yZXVpLnRhYmxlXCI7XHJcbmltcG9ydCBDb3JldWlUYWJsZVV0aWxzIGZyb20gXCIuLi9jb3JldWkudGFibGUudXRpbHNcIjtcclxuaW1wb3J0IGNvcmV1aVRhYmxlRWxlbWVudHMgZnJvbSBcIi4uL2NvcmV1aS50YWJsZS5lbGVtZW50c1wiO1xyXG5cclxuY29yZXVpVGFibGUuY29udHJvbHMuYnV0dG9uX2dyb3VwID0ge1xyXG5cclxuICAgIF9pZDogbnVsbCxcclxuICAgIF90YWJsZTogbnVsbCxcclxuICAgIF9vcHRpb25zOiB7XHJcbiAgICAgICAgaWQ6IG51bGwsXHJcbiAgICAgICAgdHlwZTogJ2J1dHRvbl9ncm91cCcsXHJcbiAgICAgICAgY29udGVudDogbnVsbCxcclxuICAgICAgICBvbkNsaWNrOiBudWxsLFxyXG4gICAgICAgIGF0dHI6IG51bGxcclxuICAgIH0sXHJcbiAgICBfbGluazoge1xyXG4gICAgICAgIGF0dHI6IHtcclxuICAgICAgICAgICAgY2xhc3M6ICdidG4gYnRuLXNlY29uZGFyeSdcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgX2J1dHRvbjoge1xyXG4gICAgICAgIGF0dHI6IHtcclxuICAgICAgICAgICAgY2xhc3M6ICdidG4gYnRuLXNlY29uZGFyeSdcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgX2Ryb3Bkb3duOiB7XHJcbiAgICAgICAgYXR0cjoge1xyXG4gICAgICAgICAgICBjbGFzczogJ2J0biBidG4tc2Vjb25kYXJ5J1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y9cclxuICAgICAqIEBwYXJhbSB7Q29yZVVJLnRhYmxlLmluc3RhbmNlfSB0YWJsZVxyXG4gICAgICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnNcclxuICAgICAqL1xyXG4gICAgaW5pdDogZnVuY3Rpb24gKHRhYmxlLCBvcHRpb25zKSB7XHJcblxyXG4gICAgICAgIHRoaXMuX29wdGlvbnMgPSAkLmV4dGVuZCh7fSwgdGhpcy5fb3B0aW9ucywgb3B0aW9ucyk7XHJcbiAgICAgICAgdGhpcy5fdGFibGUgICA9IHRhYmxlO1xyXG4gICAgICAgIHRoaXMuX2lkICAgICAgPSB0aGlzLl9vcHRpb25zLmhhc093blByb3BlcnR5KCdpZCcpICYmIHR5cGVvZiB0aGlzLl9vcHRpb25zLmlkID09PSAnc3RyaW5nJyAmJiB0aGlzLl9vcHRpb25zLmlkXHJcbiAgICAgICAgICAgID8gdGhpcy5fb3B0aW9ucy5pZFxyXG4gICAgICAgICAgICA6IGNvcmV1aVRhYmxlVXRpbHMuaGFzaENvZGUoKTtcclxuXHJcblxyXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHRoaXMuX29wdGlvbnMuYnV0dG9ucykpIHtcclxuICAgICAgICAgICAgJC5lYWNoKHRoaXMuX29wdGlvbnMuYnV0dG9ucywgZnVuY3Rpb24gKGtleSwgYnV0dG9uKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoQ29yZXVpVGFibGVVdGlscy5pc09iamVjdChidXR0b24pICYmIHR5cGVvZiBidXR0b24udHlwZSA9PT0gJ3N0cmluZycpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgYnV0dG9uLmlkID0gY29yZXVpVGFibGVVdGlscy5oYXNoQ29kZSgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoYnV0dG9uLnR5cGUgPT09ICdkcm9wZG93bicgJiYgQXJyYXkuaXNBcnJheShidXR0b24uaXRlbXMpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICQuZWFjaChidXR0b24uaXRlbXMsIGZ1bmN0aW9uIChrZXksIGl0ZW0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChDb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KGl0ZW0pICYmIHR5cGVvZiBpdGVtLnR5cGUgPT09ICdzdHJpbmcnKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0uaWQgPSBjb3JldWlUYWJsZVV0aWxzLmhhc2hDb2RlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0L/QsNGA0LDQvNC10YLRgNC+0LJcclxuICAgICAqIEByZXR1cm5zIHtvYmplY3R9XHJcbiAgICAgKi9cclxuICAgIGdldE9wdGlvbnM6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gJC5leHRlbmQodHJ1ZSwge30sIHRoaXMuX29wdGlvbnMpO1xyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQmNC90LjRhtC40LDQu9C40LfQsNGG0LjRjyDRgdC+0LHRi9GC0LjQuSDRgdCy0Y/Qt9Cw0L3QvdGL0YUg0YEg0Y3Qu9C10LzQtdC90YLQvtC8INGD0L/RgNCw0LLQu9C10L3QuNGPXHJcbiAgICAgKi9cclxuICAgIGluaXRFdmVudHM6IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgbGV0IHRoYXQgICAgPSB0aGlzO1xyXG4gICAgICAgIGxldCBvcHRpb25zID0gdGhpcy5nZXRPcHRpb25zKCk7XHJcblxyXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KG9wdGlvbnMuYnV0dG9ucykpIHtcclxuXHJcbiAgICAgICAgICAgIGxldCBjb250cm9sID0gY29yZXVpVGFibGVFbGVtZW50cy5nZXRDb250cm9sKHRoaXMuX3RhYmxlLmdldElkKCksIHRoaXMuX2lkKTtcclxuXHJcbiAgICAgICAgICAgICQuZWFjaChvcHRpb25zLmJ1dHRvbnMsIGZ1bmN0aW9uIChrZXksIGJ1dHRvbikge1xyXG4gICAgICAgICAgICAgICAgaWYgKENvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QoYnV0dG9uKSAmJiB0eXBlb2YgYnV0dG9uLnR5cGUgPT09ICdzdHJpbmcnKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChidXR0b24udHlwZSA9PT0gJ2J1dHRvbicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGJ1dHRvbi5oYXNPd25Qcm9wZXJ0eSgnY29udGVudCcpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBidXR0b24uaGFzT3duUHJvcGVydHkoJ29uQ2xpY2snKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgWydzdHJpbmcnLCAnZnVuY3Rpb24nXS5pbmRleE9mKHR5cGVvZiBidXR0b24ub25DbGljaykgPj0gMCAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGJ1dHRvbi5jb250ZW50ID09PSAnc3RyaW5nJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCdidXR0b24jYnRuLScgKyBidXR0b24uaWQsIGNvbnRyb2wpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmNsaWNrKGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGJ1dHRvbi5vbkNsaWNrID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBidXR0b24ub25DbGljayhldmVudCwgdGhhdC5fdGFibGUpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgYnV0dG9uLm9uQ2xpY2sgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAobmV3IEZ1bmN0aW9uKGJ1dHRvbi5vbkNsaWNrKSkoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYnV0dG9uLnR5cGUgPT09ICdkcm9wZG93bicgJiYgQXJyYXkuaXNBcnJheShidXR0b24uaXRlbXMpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICQuZWFjaChidXR0b24uaXRlbXMsIGZ1bmN0aW9uIChrZXksIGl0ZW0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChDb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KGl0ZW0pICYmIHR5cGVvZiBpdGVtLnR5cGUgPT09ICdzdHJpbmcnKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpdGVtLmhhc093blByb3BlcnR5KCdjb250ZW50JykgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5oYXNPd25Qcm9wZXJ0eSgnb25DbGljaycpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFsnc3RyaW5nJywgJ2Z1bmN0aW9uJ10uaW5kZXhPZih0eXBlb2YgaXRlbS5vbkNsaWNrKSA+PSAwICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVvZiBpdGVtLmNvbnRlbnQgPT09ICdzdHJpbmcnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCdidXR0b24jYnRuLWRyb3Bkb3duLScgKyBpdGVtLmlkLCBjb250cm9sKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmNsaWNrKGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgaXRlbS5vbkNsaWNrID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0ub25DbGljayhldmVudCwgdGhhdC5fdGFibGUpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBpdGVtLm9uQ2xpY2sgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChuZXcgRnVuY3Rpb24oaXRlbS5vbkNsaWNrKSkoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUgSUQg0Y3Qu9C10LzQtdC90YLQsCDRg9C/0YDQsNCy0LvQtdC90LjRj1xyXG4gICAgICogQHJldHVybnMge3N0cmluZ31cclxuICAgICAqL1xyXG4gICAgZ2V0SWQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5faWQ7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCk0L7RgNC80LjRgNC+0LLQsNC90LjQtSDQutC+0L3RgtC10L3RgtCwINC00LvRjyDRgNCw0LfQvNC10YnQtdC90LjRjyDQvdCwINGB0YLRgNCw0L3QuNGG0LVcclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIHJlbmRlcjogZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgIGxldCBvcHRpb25zID0gdGhpcy5nZXRPcHRpb25zKCk7XHJcbiAgICAgICAgbGV0IGJ1dHRvbnMgPSBbXTtcclxuICAgICAgICBsZXQgdGhhdCAgICA9IHRoaXM7XHJcblxyXG5cclxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShvcHRpb25zLmJ1dHRvbnMpKSB7XHJcbiAgICAgICAgICAgICQuZWFjaChvcHRpb25zLmJ1dHRvbnMsIGZ1bmN0aW9uIChrZXksIGJ1dHRvbikge1xyXG4gICAgICAgICAgICAgICAgaWYgKENvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QoYnV0dG9uKSAmJiB0eXBlb2YgYnV0dG9uLnR5cGUgPT09ICdzdHJpbmcnKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChidXR0b24udHlwZSA9PT0gJ2xpbmsnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChidXR0b24uaGFzT3duUHJvcGVydHkoJ2xpbmsnKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnV0dG9uLmhhc093blByb3BlcnR5KCdjb250ZW50JykgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVvZiBidXR0b24ubGluayA9PT0gJ3N0cmluZycgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVvZiBidXR0b24uY29udGVudCA9PT0gJ3N0cmluZydcclxuICAgICAgICAgICAgICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgYXR0cmlidXRlcyA9IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KGJ1dHRvbi5hdHRyKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbi5hdHRyID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGJ1dHRvbi5hdHRyLmhhc093blByb3BlcnR5KCdocmVmJykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgYnV0dG9uLmF0dHIuaHJlZjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoICEgYnV0dG9uLmF0dHIuaGFzT3duUHJvcGVydHkoJ2NsYXNzJykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBidXR0b24uYXR0ci5jbGFzcyA9IHRoYXQuX2xpbmsuYXR0ci5jbGFzcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLmVhY2goYnV0dG9uLmF0dHIsIGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXMucHVzaChuYW1lICsgJz1cIicgKyB2YWx1ZSArICdcIicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnV0dG9ucy5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnbGluaycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluazogYnV0dG9uLmxpbmssXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudDogYnV0dG9uLmNvbnRlbnQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cjogYXR0cmlidXRlc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChidXR0b24udHlwZSA9PT0gJ2J1dHRvbicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGJ1dHRvbi5oYXNPd25Qcm9wZXJ0eSgnY29udGVudCcpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBidXR0b24uaGFzT3duUHJvcGVydHkoJ29uQ2xpY2snKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGJ1dHRvbi5jb250ZW50ID09PSAnc3RyaW5nJyAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgWydzdHJpbmcnLCAnZnVuY3Rpb24nXS5pbmRleE9mKHR5cGVvZiBidXR0b24ub25DbGljaykgPj0gMFxyXG4gICAgICAgICAgICAgICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBhdHRyaWJ1dGVzID0gW107XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QoYnV0dG9uLmF0dHIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnV0dG9uLmF0dHIgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYnV0dG9uLmF0dHIuaGFzT3duUHJvcGVydHkoJ3R5cGUnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBidXR0b24uYXR0ci50eXBlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChidXR0b24uYXR0ci5oYXNPd25Qcm9wZXJ0eSgnaWQnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBidXR0b24uYXR0ci5pZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoICEgYnV0dG9uLmF0dHIuaGFzT3duUHJvcGVydHkoJ2NsYXNzJykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBidXR0b24uYXR0ci5jbGFzcyA9IHRoYXQuX2J1dHRvbi5hdHRyLmNsYXNzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQuZWFjaChidXR0b24uYXR0ciwgZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlcy5wdXNoKG5hbWUgKyAnPVwiJyArIHZhbHVlICsgJ1wiJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBidXR0b25zLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdidXR0b24nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbms6IGJ1dHRvbi5saW5rLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBidXR0b24uaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudDogYnV0dG9uLmNvbnRlbnQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cjogYXR0cmlidXRlc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYnV0dG9uLnR5cGUgPT09ICdkcm9wZG93bicpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGJ1dHRvbi5pdGVtcykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBhdHRyaWJ1dGVzID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgaXRlbXMgICAgICA9IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQuZWFjaChidXR0b24uaXRlbXMsIGZ1bmN0aW9uIChrZXksIGl0ZW0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoQ29yZXVpVGFibGVVdGlscy5pc09iamVjdChpdGVtKSAmJiB0eXBlb2YgaXRlbS50eXBlID09PSAnc3RyaW5nJykge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0udHlwZSA9PT0gJ2xpbmsnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbS5oYXNPd25Qcm9wZXJ0eSgnbGluaycpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5oYXNPd25Qcm9wZXJ0eSgnY29udGVudCcpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGl0ZW0ubGluayA9PT0gJ3N0cmluZycgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlb2YgaXRlbS5jb250ZW50ID09PSAnc3RyaW5nJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdsaW5rJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluazogaXRlbS5saW5rLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBpdGVtLmNvbnRlbnQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGl0ZW0udHlwZSA9PT0gJ2J1dHRvbicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpdGVtLmhhc093blByb3BlcnR5KCdjb250ZW50JykgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtLmhhc093blByb3BlcnR5KCdvbkNsaWNrJykgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlb2YgaXRlbS5jb250ZW50ID09PSAnc3RyaW5nJyAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFsnc3RyaW5nJywgJ2Z1bmN0aW9uJ10uaW5kZXhPZih0eXBlb2YgaXRlbS5vbkNsaWNrKSA+PSAwXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtcy5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2J1dHRvbicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBpdGVtLmlkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBpdGVtLmNvbnRlbnQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpdGVtLnR5cGUgPT09ICdkaXZpZGVyJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2RpdmlkZXInLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QoYnV0dG9uLmF0dHIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnV0dG9uLmF0dHIgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYnV0dG9uLmF0dHIuaGFzT3duUHJvcGVydHkoJ3R5cGUnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBidXR0b24uYXR0ci50eXBlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChidXR0b24uYXR0ci5oYXNPd25Qcm9wZXJ0eSgnaWQnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBidXR0b24uYXR0ci5pZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoICEgYnV0dG9uLmF0dHIuaGFzT3duUHJvcGVydHkoJ2NsYXNzJykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBidXR0b24uYXR0ci5jbGFzcyA9IHRoYXQuX2Ryb3Bkb3duLmF0dHIuY2xhc3M7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGJ1dHRvbi5hdHRyLmhhc093blByb3BlcnR5KCdjbGFzcycpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2YgYnV0dG9uLmF0dHIuY2xhc3MpID49IDBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbi5hdHRyLmNsYXNzICs9ICcgZHJvcGRvd24tdG9nZ2xlJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJC5lYWNoKGJ1dHRvbi5hdHRyLCBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzLnB1c2gobmFtZSArICc9XCInICsgdmFsdWUgKyAnXCInKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbnMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2Ryb3Bkb3duJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBidXR0b24uY29udGVudCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogYnV0dG9uLmhhc093blByb3BlcnR5KCdwb3NpdGlvbicpICYmIHR5cGVvZiBidXR0b24ucG9zaXRpb24gPT09ICdzdHJpbmcnID8gYnV0dG9uLnBvc2l0aW9uIDogJ2VuZCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cjogYXR0cmlidXRlcyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtczogaXRlbXNcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICByZXR1cm4gZWpzLnJlbmRlcihjb3JldWlUYWJsZVRwbFsnY29udHJvbHMvYnV0dG9uX2dyb3VwLmh0bWwnXSwge1xyXG4gICAgICAgICAgICBidXR0b25zOiBidXR0b25zLFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59IiwiXHJcbmltcG9ydCBjb3JldWlUYWJsZVV0aWxzIGZyb20gJy4uL2NvcmV1aS50YWJsZS51dGlscyc7XHJcbmltcG9ydCBjb3JldWlUYWJsZSAgICAgIGZyb20gXCIuLi9jb3JldWkudGFibGVcIjtcclxuXHJcbmNvcmV1aVRhYmxlLmNvbnRyb2xzLmN1c3RvbSA9IHtcclxuXHJcbiAgICBfaWQ6IG51bGwsXHJcbiAgICBfdGFibGU6IG51bGwsXHJcbiAgICBfb3B0aW9uczoge1xyXG4gICAgICAgIGlkOiBudWxsLFxyXG4gICAgICAgIHR5cGU6ICdjdXN0b20nLFxyXG4gICAgICAgIGNvbnRlbnQ6IG51bGxcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y9cclxuICAgICAqIEBwYXJhbSB7Q29yZVVJLnRhYmxlLmluc3RhbmNlfSB0YWJsZVxyXG4gICAgICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnNcclxuICAgICAqL1xyXG4gICAgaW5pdDogZnVuY3Rpb24gKHRhYmxlLCBvcHRpb25zKSB7XHJcblxyXG4gICAgICAgIHRoaXMuX29wdGlvbnMgPSAkLmV4dGVuZCh7fSwgdGhpcy5fb3B0aW9ucywgb3B0aW9ucyk7XHJcbiAgICAgICAgdGhpcy5fdGFibGUgICA9IHRhYmxlO1xyXG4gICAgICAgIHRoaXMuX2lkICAgICAgPSB0aGlzLl9vcHRpb25zLmhhc093blByb3BlcnR5KCdpZCcpICYmIHR5cGVvZiB0aGlzLl9vcHRpb25zLmlkID09PSAnc3RyaW5nJyAmJiB0aGlzLl9vcHRpb25zLmlkXHJcbiAgICAgICAgICAgID8gdGhpcy5fb3B0aW9ucy5pZFxyXG4gICAgICAgICAgICA6IGNvcmV1aVRhYmxlVXRpbHMuaGFzaENvZGUoKTtcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y8g0YHQvtCx0YvRgtC40Lkg0YHQstGP0LfQsNC90L3Ri9GFINGBINGN0LvQtdC80LXQvdGC0L7QvCDRg9C/0YDQsNCy0LvQtdC90LjRj1xyXG4gICAgICovXHJcbiAgICBpbml0RXZlbnRzOiBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUgSUQg0Y3Qu9C10LzQtdC90YLQsCDRg9C/0YDQsNCy0LvQtdC90LjRj1xyXG4gICAgICogQHJldHVybnMge3N0cmluZ31cclxuICAgICAqL1xyXG4gICAgZ2V0SWQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5faWQ7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCk0L7RgNC80LjRgNC+0LLQsNC90LjQtSDQutC+0L3RgtC10L3RgtCwINC00LvRjyDRgNCw0LfQvNC10YnQtdC90LjRjyDQvdCwINGB0YLRgNCw0L3QuNGG0LVcclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd8SFRNTEVsZW1lbnR8alF1ZXJ5fVxyXG4gICAgICovXHJcbiAgICByZW5kZXI6IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICBpZiAodHlwZW9mIHRoaXMuX29wdGlvbnMuY29udGVudCA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX29wdGlvbnMuY29udGVudDtcclxuXHJcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdGhpcy5fb3B0aW9ucy5jb250ZW50ID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9vcHRpb25zLmNvbnRlbnQoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCJcclxuaW1wb3J0ICcuLi8uLi8uLi9ub2RlX21vZHVsZXMvZWpzL2Vqcy5taW4nO1xyXG5pbXBvcnQgY29yZXVpVGFibGUgICAgICBmcm9tIFwiLi4vY29yZXVpLnRhYmxlXCI7XHJcbmltcG9ydCBjb3JldWlUYWJsZVRwbCAgIGZyb20gXCIuLi9jb3JldWkudGFibGUudGVtcGxhdGVzXCI7XHJcbmltcG9ydCBjb3JldWlUYWJsZVV0aWxzIGZyb20gJy4uL2NvcmV1aS50YWJsZS51dGlscyc7XHJcbmltcG9ydCBjb3JldWlUYWJsZUVsZW1lbnRzIGZyb20gXCIuLi9jb3JldWkudGFibGUuZWxlbWVudHNcIjtcclxuXHJcbmNvcmV1aVRhYmxlLmNvbnRyb2xzLnBhZ2Vfc2l6ZSA9IHtcclxuXHJcbiAgICBfaWQ6IG51bGwsXHJcbiAgICBfdGFibGU6IG51bGwsXHJcbiAgICBfb3B0aW9uczoge1xyXG4gICAgICAgIGlkOiBudWxsLFxyXG4gICAgICAgIHR5cGU6ICdwYWdlX3NpemUnLFxyXG4gICAgICAgIGF0dHI6IHtcclxuICAgICAgICAgICAgY2xhc3M6ICdmb3JtLXNlbGVjdCdcclxuICAgICAgICB9LFxyXG4gICAgICAgIGxpc3Q6IFsgMjUsIDUwLCAxMDAsIDEwMDAgXVxyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQmNC90LjRhtC40LDQu9C40LfQsNGG0LjRj1xyXG4gICAgICogQHBhcmFtIHtDb3JlVUkudGFibGUuaW5zdGFuY2V9IHRhYmxlXHJcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gICAgICAgICAgICAgICAgb3B0aW9uc1xyXG4gICAgICovXHJcbiAgICBpbml0OiBmdW5jdGlvbiAodGFibGUsIG9wdGlvbnMpIHtcclxuXHJcbiAgICAgICAgaWYgKG9wdGlvbnMuaGFzT3duUHJvcGVydHkoJ2F0dHInKSAmJiBjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KG9wdGlvbnMuYXR0cikpIHtcclxuICAgICAgICAgICAgb3B0aW9ucy5hdHRyID0gY29yZXVpVGFibGVVdGlscy5tZXJnZUF0dHIodGhpcy5fb3B0aW9ucy5hdHRyLCBvcHRpb25zLmF0dHIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fb3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCB0aGlzLl9vcHRpb25zLCBvcHRpb25zKTtcclxuICAgICAgICB0aGlzLl90YWJsZSAgID0gdGFibGU7XHJcbiAgICAgICAgdGhpcy5faWQgICAgICA9IHRoaXMuX29wdGlvbnMuaGFzT3duUHJvcGVydHkoJ2lkJykgJiYgdHlwZW9mIHRoaXMuX29wdGlvbnMuaWQgPT09ICdzdHJpbmcnICYmIHRoaXMuX29wdGlvbnMuaWRcclxuICAgICAgICAgICAgPyB0aGlzLl9vcHRpb25zLmlkXHJcbiAgICAgICAgICAgIDogY29yZXVpVGFibGVVdGlscy5oYXNoQ29kZSgpO1xyXG5cclxuICAgICAgICBpZiAoICEgQXJyYXkuaXNBcnJheSh0aGlzLl9vcHRpb25zLmxpc3QpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX29wdGlvbnMubGlzdCA9IFtdO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMubGlzdC5pbmRleE9mKHRoaXMuX3RhYmxlLl9yZWNvcmRzUGVyUGFnZSkgPCAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX29wdGlvbnMubGlzdC51bnNoaWZ0KHRoaXMuX3RhYmxlLl9yZWNvcmRzUGVyUGFnZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQmNC90LjRhtC40LDQu9C40LfQsNGG0LjRjyDRgdC+0LHRi9GC0LjQuSDRgdCy0Y/Qt9Cw0L3QvdGL0YUg0YEg0Y3Qu9C10LzQtdC90YLQvtC8INGD0L/RgNCw0LLQu9C10L3QuNGPXHJcbiAgICAgKi9cclxuICAgIGluaXRFdmVudHM6IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgbGV0IHRoYXQgICAgICAgICAgID0gdGhpcztcclxuICAgICAgICBsZXQgY29udHJvbCAgICAgICAgPSBjb3JldWlUYWJsZUVsZW1lbnRzLmdldENvbnRyb2wodGhpcy5fdGFibGUuZ2V0SWQoKSwgdGhpcy5nZXRJZCgpKTtcclxuICAgICAgICBsZXQgc2VsZWN0UGFnZVNpemUgPSAkKCdzZWxlY3QnLCBjb250cm9sKTtcclxuXHJcbiAgICAgICAgc2VsZWN0UGFnZVNpemUuY2hhbmdlKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdGhhdC5fdGFibGUuX3BhZ2UgPSAxO1xyXG4gICAgICAgICAgICB0aGF0Ll90YWJsZS5zZXRQYWdlU2l6ZShOdW1iZXIoc2VsZWN0UGFnZVNpemUudmFsKCkpKTtcclxuICAgICAgICAgICAgdGhhdC5fdGFibGUucmVsb2FkKCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuX3RhYmxlLm9uKCdwYWdlX3NpemVfdXBkYXRlJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBzZWxlY3RQYWdlU2l6ZS52YWwodGhhdC5fdGFibGUuX3JlY29yZHNQZXJQYWdlKTtcclxuICAgICAgICB9KTtcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1IElEINGN0LvQtdC80LXQvdGC0LAg0YPQv9GA0LDQstC70LXQvdC40Y9cclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIGdldElkOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lkO1xyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQpNC+0YDQvNC40YDQvtCy0LDQvdC40LUg0LrQvtC90YLQtdC90YLQsCDQtNC70Y8g0YDQsNC30LzQtdGJ0LXQvdC40Y8g0L3QsCDRgdGC0YDQsNC90LjRhtC1XHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxyXG4gICAgICovXHJcbiAgICByZW5kZXI6IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICBsZXQgYXR0cmlidXRlcyA9IFtdO1xyXG5cclxuICAgICAgICBpZiAoY29yZXVpVGFibGVVdGlscy5pc09iamVjdCh0aGlzLl9vcHRpb25zLmF0dHIpKSB7XHJcbiAgICAgICAgICAgICQuZWFjaCh0aGlzLl9vcHRpb25zLmF0dHIsIGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgYXR0cmlidXRlcy5wdXNoKG5hbWUgKyAnPVwiJyArIHZhbHVlICsgJ1wiJyk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGVqcy5yZW5kZXIoY29yZXVpVGFibGVUcGxbJ2NvbnRyb2xzL3BhZ2Utc2l6ZS5odG1sJ10sIHtcclxuICAgICAgICAgICAgcmVjb3Jkc1BlclBhZ2VMaXN0OiB0aGlzLl9vcHRpb25zLmxpc3QsXHJcbiAgICAgICAgICAgIHJlY29yZHNQZXJQYWdlOiB0aGlzLl90YWJsZS5fcmVjb3Jkc1BlclBhZ2UsXHJcbiAgICAgICAgICAgIGF0dHI6IGF0dHJpYnV0ZXMubGVuZ3RoID4gMCA/ICgnICcgKyBhdHRyaWJ1dGVzLmpvaW4oJyAnKSkgOiAnJyxcclxuICAgICAgICAgICAgbGFuZzogdGhpcy5fdGFibGUuZ2V0TGFuZygpLFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59IiwiXHJcbmltcG9ydCBjb3JldWlUYWJsZVV0aWxzIGZyb20gJy4uL2NvcmV1aS50YWJsZS51dGlscyc7XHJcbmltcG9ydCBjb3JldWlUYWJsZSAgICAgIGZyb20gXCIuLi9jb3JldWkudGFibGVcIjtcclxuaW1wb3J0IGNvcmV1aVRhYmxlVHBsIGZyb20gXCIuLi9jb3JldWkudGFibGUudGVtcGxhdGVzXCI7XHJcbmltcG9ydCBjb3JldWlUYWJsZUVsZW1lbnRzIGZyb20gXCIuLi9jb3JldWkudGFibGUuZWxlbWVudHNcIjtcclxuXHJcbmNvcmV1aVRhYmxlLmNvbnRyb2xzLnBhZ2VfanVtcCA9IHtcclxuXHJcbiAgICBfaWQ6IG51bGwsXHJcbiAgICBfdGFibGU6IG51bGwsXHJcbiAgICBfb3B0aW9uczoge1xyXG4gICAgICAgIGlkOiBudWxsLFxyXG4gICAgICAgIHR5cGU6ICdwYWdlX2p1bXAnLFxyXG4gICAgICAgIGF0dHI6IHtcclxuICAgICAgICAgICAgY2xhc3M6ICdpbnB1dC1ncm91cCdcclxuICAgICAgICB9LFxyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQmNC90LjRhtC40LDQu9C40LfQsNGG0LjRj1xyXG4gICAgICogQHBhcmFtIHtDb3JlVUkudGFibGUuaW5zdGFuY2V9IHRhYmxlXHJcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gb3B0aW9uc1xyXG4gICAgICovXHJcbiAgICBpbml0OiBmdW5jdGlvbiAodGFibGUsIG9wdGlvbnMpIHtcclxuXHJcbiAgICAgICAgaWYgKG9wdGlvbnMuaGFzT3duUHJvcGVydHkoJ2F0dHInKSAmJiBjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KG9wdGlvbnMuYXR0cikpIHtcclxuICAgICAgICAgICAgb3B0aW9ucy5hdHRyID0gY29yZXVpVGFibGVVdGlscy5tZXJnZUF0dHIodGhpcy5fb3B0aW9ucy5hdHRyLCBvcHRpb25zLmF0dHIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fb3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCB0aGlzLl9vcHRpb25zLCBvcHRpb25zKTtcclxuICAgICAgICB0aGlzLl90YWJsZSAgID0gdGFibGU7XHJcbiAgICAgICAgdGhpcy5faWQgICAgICA9IHRoaXMuX29wdGlvbnMuaGFzT3duUHJvcGVydHkoJ2lkJykgJiYgdHlwZW9mIHRoaXMuX29wdGlvbnMuaWQgPT09ICdzdHJpbmcnICYmIHRoaXMuX29wdGlvbnMuaWRcclxuICAgICAgICAgICAgPyB0aGlzLl9vcHRpb25zLmlkXHJcbiAgICAgICAgICAgIDogY29yZXVpVGFibGVVdGlscy5oYXNoQ29kZSgpO1xyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQmNC90LjRhtC40LDQu9C40LfQsNGG0LjRjyDRgdC+0LHRi9GC0LjQuSDRgdCy0Y/Qt9Cw0L3QvdGL0YUg0YEg0Y3Qu9C10LzQtdC90YLQvtC8INGD0L/RgNCw0LLQu9C10L3QuNGPXHJcbiAgICAgKi9cclxuICAgIGluaXRFdmVudHM6IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgbGV0IHRoYXQgICAgPSB0aGlzO1xyXG4gICAgICAgIGxldCBjb250cm9sID0gY29yZXVpVGFibGVFbGVtZW50cy5nZXRDb250cm9sKHRoaXMuX3RhYmxlLmdldElkKCksIHRoaXMuZ2V0SWQoKSk7XHJcbiAgICAgICAgbGV0IGlucHV0ICAgPSAkKCdpbnB1dCcsIGNvbnRyb2wpO1xyXG4gICAgICAgIGxldCBidXR0b24gID0gJCgnYnV0dG9uJywgY29udHJvbCk7XHJcblxyXG4gICAgICAgIGlmIChidXR0b25bMF0pIHtcclxuICAgICAgICAgICAgYnV0dG9uLmNsaWNrKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHRoYXQuX3RhYmxlLmdvUGFnZShpbnB1dC52YWwoKSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBpbnB1dC5rZXl1cChmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAgICAgICAgIGlmIChldmVudC5rZXkgPT09ICdFbnRlcicgfHwgZXZlbnQua2V5Q29kZSA9PT0gMTMpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGF0Ll90YWJsZS5nb1BhZ2UoaW5wdXQudmFsKCkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSBJRCDRjdC70LXQvNC10L3RgtCwINGD0L/RgNCw0LLQu9C10L3QuNGPXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxyXG4gICAgICovXHJcbiAgICBnZXRJZDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9pZDtcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KTQvtGA0LzQuNGA0L7QstCw0L3QuNC1INC60L7QvdGC0LXQvdGC0LAg0LTQu9GPINGA0LDQt9C80LXRidC10L3QuNGPINC90LAg0YHRgtGA0LDQvdC40YbQtVxyXG4gICAgICogQHJldHVybnMge3N0cmluZ31cclxuICAgICAqL1xyXG4gICAgcmVuZGVyOiBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgbGV0IGF0dHJpYnV0ZXMgPSBbXTtcclxuXHJcbiAgICAgICAgaWYgKGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QodGhpcy5fb3B0aW9ucy5hdHRyKSkge1xyXG4gICAgICAgICAgICAkLmVhY2godGhpcy5fb3B0aW9ucy5hdHRyLCBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXMucHVzaChuYW1lICsgJz1cIicgKyB2YWx1ZSArICdcIicpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBlanMucmVuZGVyKGNvcmV1aVRhYmxlVHBsWydjb250cm9scy9wYWdlLWp1bXAuaHRtbCddLCB7XHJcbiAgICAgICAgICAgIHJlY29yZHNQZXJQYWdlTGlzdDogdGhpcy5fb3B0aW9ucy5saXN0LFxyXG4gICAgICAgICAgICByZWNvcmRzUGVyUGFnZTogdGhpcy5fdGFibGUuX3JlY29yZHNQZXJQYWdlLFxyXG4gICAgICAgICAgICBhdHRyOiBhdHRyaWJ1dGVzLmxlbmd0aCA+IDAgPyAoJyAnICsgYXR0cmlidXRlcy5qb2luKCcgJykpIDogJycsXHJcbiAgICAgICAgICAgIGxhbmc6IHRoaXMuX3RhYmxlLmdldExhbmcoKSxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufSIsIlxyXG5pbXBvcnQgY29yZXVpVGFibGVVdGlscyBmcm9tICcuLi9jb3JldWkudGFibGUudXRpbHMnO1xyXG5pbXBvcnQgY29yZXVpVGFibGUgICAgICBmcm9tIFwiLi4vY29yZXVpLnRhYmxlXCI7XHJcbmltcG9ydCBjb3JldWlUYWJsZVRwbCBmcm9tIFwiLi4vY29yZXVpLnRhYmxlLnRlbXBsYXRlc1wiO1xyXG5pbXBvcnQgY29yZXVpVGFibGVFbGVtZW50cyBmcm9tIFwiLi4vY29yZXVpLnRhYmxlLmVsZW1lbnRzXCI7XHJcblxyXG5jb3JldWlUYWJsZS5jb250cm9scy5wYWdlcyA9IHtcclxuXHJcbiAgICBfaWQ6IG51bGwsXHJcbiAgICBfdGFibGU6IG51bGwsXHJcbiAgICBfb3B0aW9uczoge1xyXG4gICAgICAgIHNob3c6IHtcclxuICAgICAgICAgICAgcHJldjogdHJ1ZSxcclxuICAgICAgICAgICAgbmV4dDogdHJ1ZSxcclxuICAgICAgICB9LFxyXG4gICAgICAgIGNvdW50OiAzLFxyXG4gICAgICAgIGF0dHI6IHtcclxuICAgICAgICAgICAgY2xhc3M6ICdwYWdpbmF0aW9uIG1iLTAnXHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQmNC90LjRhtC40LDQu9C40LfQsNGG0LjRj1xyXG4gICAgICogQHBhcmFtIHtDb3JlVUkudGFibGUuaW5zdGFuY2V9IHRhYmxlXHJcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gb3B0aW9uc1xyXG4gICAgICovXHJcbiAgICBpbml0OiBmdW5jdGlvbiAodGFibGUsIG9wdGlvbnMpIHtcclxuXHJcbiAgICAgICAgaWYgKG9wdGlvbnMuaGFzT3duUHJvcGVydHkoJ2F0dHInKSAmJiBjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KG9wdGlvbnMuYXR0cikpIHtcclxuICAgICAgICAgICAgb3B0aW9ucy5hdHRyID0gY29yZXVpVGFibGVVdGlscy5tZXJnZUF0dHIodGhpcy5fb3B0aW9ucy5hdHRyLCBvcHRpb25zLmF0dHIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fb3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCB0aGlzLl9vcHRpb25zLCBvcHRpb25zKTtcclxuICAgICAgICB0aGlzLl90YWJsZSAgID0gdGFibGU7XHJcbiAgICAgICAgdGhpcy5faWQgICAgICA9IGNvcmV1aVRhYmxlVXRpbHMuaGFzaENvZGUoKTtcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y8g0YHQvtCx0YvRgtC40Lkg0YHQstGP0LfQsNC90L3Ri9GFINGBINGN0LvQtdC80LXQvdGC0L7QvCDRg9C/0YDQsNCy0LvQtdC90LjRj1xyXG4gICAgICovXHJcbiAgICBpbml0RXZlbnRzOiBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgIGxldCB0aGF0ICAgID0gdGhpcztcclxuICAgICAgICBsZXQgY29udHJvbCA9IGNvcmV1aVRhYmxlRWxlbWVudHMuZ2V0Q29udHJvbCh0aGlzLl90YWJsZS5nZXRJZCgpLCB0aGlzLmdldElkKCkpO1xyXG5cclxuICAgICAgICB0aGlzLl9pbml0RXZlbnRzKCk7XHJcblxyXG4gICAgICAgIHRoaXMuX3RhYmxlLm9uKCdyZWNvcmRzX3Nob3cnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGNvbnRyb2wuaHRtbCh0aGF0LnJlbmRlcigpKTtcclxuICAgICAgICAgICAgdGhhdC5faW5pdEV2ZW50cygpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUgSUQg0Y3Qu9C10LzQtdC90YLQsCDRg9C/0YDQsNCy0LvQtdC90LjRj1xyXG4gICAgICogQHJldHVybnMge3N0cmluZ31cclxuICAgICAqL1xyXG4gICAgZ2V0SWQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5faWQ7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCk0L7RgNC80LjRgNC+0LLQsNC90LjQtSDQutC+0L3RgtC10L3RgtCwINC00LvRjyDRgNCw0LfQvNC10YnQtdC90LjRjyDQvdCwINGB0YLRgNCw0L3QuNGG0LVcclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIHJlbmRlcjogZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgIGxldCBhdHRyaWJ1dGVzICAgICAgID0gW107XHJcbiAgICAgICAgbGV0IHNob3dQcmV2ICAgICAgICAgPSAhISB0aGlzLl9vcHRpb25zLnNob3cucHJldjtcclxuICAgICAgICBsZXQgc2hvd05leHQgICAgICAgICA9ICEhIHRoaXMuX29wdGlvbnMuc2hvdy5uZXh0O1xyXG4gICAgICAgIGxldCBzaG93RGl2aWRlclN0YXJ0ID0gZmFsc2U7XHJcbiAgICAgICAgbGV0IHNob3dEaXZpZGVyRW5kICAgPSBmYWxzZTtcclxuICAgICAgICBsZXQgc2hvd1BhZ2VGaXJzdCAgICA9IGZhbHNlO1xyXG4gICAgICAgIGxldCBzaG93UGFnZUxhc3QgICAgID0gZmFsc2U7XHJcbiAgICAgICAgbGV0IHBhZ2VzICAgICAgICAgICAgPSBbXTtcclxuICAgICAgICBsZXQgcGFnZXNUb3RhbCAgICAgICA9IHRoaXMuX3RhYmxlLl9yZWNvcmRzVG90YWwgPiAwICYmIHRoaXMuX3RhYmxlLl9yZWNvcmRzUGVyUGFnZSA+IDBcclxuICAgICAgICAgICAgPyBNYXRoLmNlaWwodGhpcy5fdGFibGUuX3JlY29yZHNUb3RhbCAvIHRoaXMuX3RhYmxlLl9yZWNvcmRzUGVyUGFnZSlcclxuICAgICAgICAgICAgOiAxO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5fdGFibGUuX3JlY29yZHNUb3RhbCA+IDAgJiZcclxuICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy5jb3VudCA+IDAgJiZcclxuICAgICAgICAgICAgY29yZXVpVGFibGVVdGlscy5pc051bWVyaWModGhpcy5fb3B0aW9ucy5jb3VudClcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgbGV0IGNvdW50ICAgICA9IE1hdGgubWluKHRoaXMuX29wdGlvbnMuY291bnQsIHBhZ2VzVG90YWwpO1xyXG4gICAgICAgICAgICBsZXQgY291bnRIYWxmID0gTWF0aC5tYXgoMCwgTWF0aC5mbG9vcihjb3VudCAvIDIpKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChjb3VudCAlIDIgPT09IDApIHtcclxuICAgICAgICAgICAgICAgIGNvdW50SGFsZiAtPSAxO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBsZXQgc3RhcnQgPSB0aGlzLl90YWJsZS5fcGFnZSA+IDFcclxuICAgICAgICAgICAgICAgID8gTWF0aC5tYXgoMSwgdGhpcy5fdGFibGUuX3BhZ2UgLSBjb3VudEhhbGYpXHJcbiAgICAgICAgICAgICAgICA6IHRoaXMuX3RhYmxlLl9wYWdlO1xyXG5cclxuICAgICAgICAgICAgaWYgKHN0YXJ0ICsgY291bnQgPiBwYWdlc1RvdGFsKSB7XHJcbiAgICAgICAgICAgICAgICBzdGFydCA9IHBhZ2VzVG90YWwgLSAoY291bnQgLSAxKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBwYWdlcy5wdXNoKHN0YXJ0ICsgaSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy5jb3VudCA+IDAgJiZcclxuICAgICAgICAgICAgICAgIHRoaXMuX3RhYmxlLl9wYWdlID4gMVxyXG4gICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgIHBhZ2VzLnB1c2godGhpcy5fdGFibGUuX3BhZ2UpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAocGFnZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICBpZiAocGFnZXNbMF0gPj0gMikge1xyXG4gICAgICAgICAgICAgICAgc2hvd1BhZ2VGaXJzdCA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHBhZ2VzWzBdID49IDMpIHtcclxuICAgICAgICAgICAgICAgIHNob3dEaXZpZGVyU3RhcnQgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAocGFnZXNbcGFnZXMubGVuZ3RoIC0gMV0gKyAxIDwgcGFnZXNUb3RhbCkge1xyXG4gICAgICAgICAgICAgICAgc2hvd0RpdmlkZXJFbmQgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChwYWdlc1twYWdlcy5sZW5ndGggLSAxXSA8IHBhZ2VzVG90YWwpIHtcclxuICAgICAgICAgICAgICAgIHNob3dQYWdlTGFzdCA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KHRoaXMuX29wdGlvbnMuYXR0cikpIHtcclxuICAgICAgICAgICAgJC5lYWNoKHRoaXMuX29wdGlvbnMuYXR0ciwgZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzLnB1c2gobmFtZSArICc9XCInICsgdmFsdWUgKyAnXCInKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gZWpzLnJlbmRlcihjb3JldWlUYWJsZVRwbFsnY29udHJvbHMvcGFnZXMuaHRtbCddLCB7XHJcbiAgICAgICAgICAgIGN1cnJlbnRQYWdlOiB0aGlzLl90YWJsZS5fcGFnZSxcclxuICAgICAgICAgICAgaXNBY3RpdmVQcmV2OiB0aGlzLl90YWJsZS5fcGFnZSA+IDEsXHJcbiAgICAgICAgICAgIGlzQWN0aXZlTmV4dDogdGhpcy5fdGFibGUuX3BhZ2UgPCBwYWdlc1RvdGFsLFxyXG4gICAgICAgICAgICBwYWdlc1RvdGFsOiBwYWdlc1RvdGFsLFxyXG5cclxuICAgICAgICAgICAgc2hvd1ByZXY6IHNob3dQcmV2LFxyXG4gICAgICAgICAgICBzaG93UGFnZUZpcnN0OiBzaG93UGFnZUZpcnN0LFxyXG4gICAgICAgICAgICBzaG93RGl2aWRlclN0YXJ0OiBzaG93RGl2aWRlclN0YXJ0LFxyXG5cclxuICAgICAgICAgICAgcGFnZXM6IHBhZ2VzLFxyXG5cclxuICAgICAgICAgICAgc2hvd0RpdmlkZXJFbmQ6IHNob3dEaXZpZGVyRW5kLFxyXG4gICAgICAgICAgICBzaG93UGFnZUxhc3Q6IHNob3dQYWdlTGFzdCxcclxuICAgICAgICAgICAgc2hvd05leHQ6IHNob3dOZXh0LFxyXG5cclxuICAgICAgICAgICAgYXR0cjogYXR0cmlidXRlcy5sZW5ndGggPiAwID8gKCcgJyArIGF0dHJpYnV0ZXMuam9pbignICcpKSA6ICcnLFxyXG4gICAgICAgICAgICBsYW5nOiB0aGlzLl90YWJsZS5nZXRMYW5nKCksXHJcbiAgICAgICAgfSk7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPINGB0L7QsdGL0YLQuNC5INC90LAg0Y3Qu9C10LzQtdC90YLQsNGFXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBfaW5pdEV2ZW50czogZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICBsZXQgdGhhdCAgICA9IHRoaXM7XHJcbiAgICAgICAgbGV0IGNvbnRyb2wgPSBjb3JldWlUYWJsZUVsZW1lbnRzLmdldENvbnRyb2wodGhpcy5fdGFibGUuZ2V0SWQoKSwgdGhpcy5nZXRJZCgpKTtcclxuXHJcbiAgICAgICAgbGV0IGJ0blByZXYgPSAkKCcuY29yZXVpLXRhYmxlX19wYWdlX3ByZXYnLCBjb250cm9sKVxyXG4gICAgICAgIGlmIChidG5QcmV2WzBdKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGF0Ll90YWJsZS5fcGFnZSA8PSAxKSB7XHJcbiAgICAgICAgICAgICAgICBidG5QcmV2LmFkZENsYXNzKCdkaXNhYmxlZCcpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBidG5QcmV2LmNsaWNrKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGF0Ll90YWJsZS5fcGFnZSA+IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGF0Ll90YWJsZS5wcmV2UGFnZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IGJ0bk5leHQgPSAkKCcuY29yZXVpLXRhYmxlX19wYWdlX25leHQnLCBjb250cm9sKVxyXG4gICAgICAgIGlmIChidG5OZXh0WzBdKSB7XHJcbiAgICAgICAgICAgIGJ0bk5leHQuY2xpY2soZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgdGhhdC5fdGFibGUubmV4dFBhZ2UoKTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBwYWdlcyA9ICQoJy5jb3JldWktdGFibGVfX3BhZ2UnLCBjb250cm9sKVxyXG4gICAgICAgIGlmIChwYWdlc1swXSkge1xyXG4gICAgICAgICAgICBwYWdlcy5jbGljayhmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgcGFnZSA9IE51bWJlcigkLnRyaW0oJCh0aGlzKS50ZXh0KCkpKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAocGFnZSA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGF0Ll90YWJsZS5nb1BhZ2UocGFnZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59IiwiXHJcbmltcG9ydCAnLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Vqcy9lanMubWluJztcclxuaW1wb3J0IGNvcmV1aVRhYmxlICAgICAgZnJvbSBcIi4uL2NvcmV1aS50YWJsZVwiO1xyXG5pbXBvcnQgY29yZXVpVGFibGVUcGwgICBmcm9tIFwiLi4vY29yZXVpLnRhYmxlLnRlbXBsYXRlc1wiO1xyXG5pbXBvcnQgY29yZXVpVGFibGVVdGlscyBmcm9tICcuLi9jb3JldWkudGFibGUudXRpbHMnO1xyXG5pbXBvcnQgY29yZXVpVGFibGVFbGVtZW50cyBmcm9tIFwiLi4vY29yZXVpLnRhYmxlLmVsZW1lbnRzXCI7XHJcblxyXG5jb3JldWlUYWJsZS5jb250cm9scy50b3RhbCA9IHtcclxuXHJcbiAgICBfaWQ6IG51bGwsXHJcbiAgICBfdGFibGU6IG51bGwsXHJcbiAgICBfb3B0aW9uczoge1xyXG4gICAgICAgIGF0dHI6IHtcclxuICAgICAgICAgICAgY2xhc3M6ICdweC0xJ1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y9cclxuICAgICAqIEBwYXJhbSB7Q29yZVVJLnRhYmxlLmluc3RhbmNlfSB0YWJsZVxyXG4gICAgICogQHBhcmFtIHtvYmplY3R9ICAgICAgICAgICAgICAgIG9wdGlvbnNcclxuICAgICAqL1xyXG4gICAgaW5pdDogZnVuY3Rpb24gKHRhYmxlLCBvcHRpb25zKSB7XHJcblxyXG4gICAgICAgIGlmIChvcHRpb25zLmhhc093blByb3BlcnR5KCdhdHRyJykgJiYgY29yZXVpVGFibGVVdGlscy5pc09iamVjdChvcHRpb25zLmF0dHIpKSB7XHJcbiAgICAgICAgICAgIG9wdGlvbnMuYXR0ciA9IGNvcmV1aVRhYmxlVXRpbHMubWVyZ2VBdHRyKHRoaXMuX29wdGlvbnMuYXR0ciwgb3B0aW9ucy5hdHRyKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX29wdGlvbnMgPSAkLmV4dGVuZCh7fSwgdGhpcy5fb3B0aW9ucywgb3B0aW9ucyk7XHJcbiAgICAgICAgdGhpcy5fdGFibGUgICA9IHRhYmxlO1xyXG4gICAgICAgIHRoaXMuX2lkICAgICAgPSBjb3JldWlUYWJsZVV0aWxzLmhhc2hDb2RlKCk7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPINGB0L7QsdGL0YLQuNC5INGB0LLRj9C30LDQvdC90YvRhSDRgSDRjdC70LXQvNC10L3RgtC+0Lwg0YPQv9GA0LDQstC70LXQvdC40Y9cclxuICAgICAqL1xyXG4gICAgaW5pdEV2ZW50czogZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICBsZXQgdGhhdCAgICA9IHRoaXM7XHJcbiAgICAgICAgbGV0IGNvbnRyb2wgPSBjb3JldWlUYWJsZUVsZW1lbnRzLmdldENvbnRyb2wodGhpcy5fdGFibGUuZ2V0SWQoKSwgdGhpcy5nZXRJZCgpKTtcclxuXHJcbiAgICAgICAgdGhpcy5fdGFibGUub24oJ3JlY29yZHNfc2hvdycsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgY29udHJvbC5odG1sKHRoYXQucmVuZGVyKCkpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUgSUQg0Y3Qu9C10LzQtdC90YLQsCDRg9C/0YDQsNCy0LvQtdC90LjRj1xyXG4gICAgICogQHJldHVybnMge3N0cmluZ31cclxuICAgICAqL1xyXG4gICAgZ2V0SWQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5faWQ7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCk0L7RgNC80LjRgNC+0LLQsNC90LjQtSDQutC+0L3RgtC10L3RgtCwINC00LvRjyDRgNCw0LfQvNC10YnQtdC90LjRjyDQvdCwINGB0YLRgNCw0L3QuNGG0LVcclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIHJlbmRlcjogZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgIGxldCBhdHRyaWJ1dGVzID0gW107XHJcblxyXG4gICAgICAgIGlmIChjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KHRoaXMuX29wdGlvbnMuYXR0cikpIHtcclxuICAgICAgICAgICAgJC5lYWNoKHRoaXMuX29wdGlvbnMuYXR0ciwgZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzLnB1c2gobmFtZSArICc9XCInICsgdmFsdWUgKyAnXCInKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBlanMucmVuZGVyKGNvcmV1aVRhYmxlVHBsWydjb250cm9scy90b3RhbC5odG1sJ10sIHtcclxuICAgICAgICAgICAgcmVjb3Jkc1RvdGFsOiB0aGlzLl90YWJsZS5fcmVjb3Jkc1RvdGFsLFxyXG4gICAgICAgICAgICBhdHRyOiBhdHRyaWJ1dGVzLmxlbmd0aCA+IDAgPyAoJyAnICsgYXR0cmlidXRlcy5qb2luKCcgJykpIDogJycsXHJcbiAgICAgICAgICAgIGxhbmc6IHRoaXMuX3RhYmxlLmdldExhbmcoKSxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufSIsIlxyXG5pbXBvcnQgY29yZXVpVGFibGVVdGlscyBmcm9tICcuLi9jb3JldWkudGFibGUudXRpbHMnO1xyXG5pbXBvcnQgY29yZXVpVGFibGUgICAgICBmcm9tIFwiLi4vY29yZXVpLnRhYmxlXCI7XHJcbmltcG9ydCBjb3JldWlUYWJsZVRwbCAgIGZyb20gXCIuLi9jb3JldWkudGFibGUudGVtcGxhdGVzXCI7XHJcbmltcG9ydCBDb3JldWlUYWJsZVV0aWxzIGZyb20gXCIuLi9jb3JldWkudGFibGUudXRpbHNcIjtcclxuaW1wb3J0IGNvcmV1aVRhYmxlRWxlbWVudHMgZnJvbSBcIi4uL2NvcmV1aS50YWJsZS5lbGVtZW50c1wiO1xyXG5cclxuY29yZXVpVGFibGUuY29udHJvbHMuc2VhcmNoID0ge1xyXG5cclxuICAgIF9pZDogbnVsbCxcclxuICAgIF90YWJsZTogbnVsbCxcclxuICAgIF9vcHRpb25zOiB7XHJcbiAgICAgICAgYnRuOiB7XHJcbiAgICAgICAgICAgIGF0dHI6IHsgY2xhc3M6ICdidG4gYnRuLXNlY29uZGFyeScgfSxcclxuICAgICAgICAgICAgY29udGVudDogbnVsbCxcclxuICAgICAgICB9LFxyXG4gICAgICAgIGJ0bkNsZWFyOiB7XHJcbiAgICAgICAgICAgIGNvbnRlbnQ6IFwiPGkgY2xhc3M9XFxcImJpIGJpLXhcXFwiPjwvaT5cIixcclxuICAgICAgICAgICAgYXR0cjogeyBjbGFzczogJ2J0biBidG4tb3V0bGluZS1zZWNvbmRhcnknIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIGJ0bkNvbXBsZXRlOiB7XHJcbiAgICAgICAgICAgIGF0dHI6IHsgY2xhc3M6ICdidG4gYnRuLXByaW1hcnknIH0sXHJcbiAgICAgICAgICAgIGNvbnRlbnQ6IG51bGxcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPXHJcbiAgICAgKiBAcGFyYW0ge0NvcmVVSS50YWJsZS5pbnN0YW5jZX0gdGFibGVcclxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zXHJcbiAgICAgKi9cclxuICAgIGluaXQ6IGZ1bmN0aW9uICh0YWJsZSwgb3B0aW9ucykge1xyXG5cclxuICAgICAgICB0aGlzLl9vcHRpb25zID0gJC5leHRlbmQodHJ1ZSwge30sIHRoaXMuX29wdGlvbnMsIG9wdGlvbnMpO1xyXG4gICAgICAgIHRoaXMuX3RhYmxlICAgPSB0YWJsZTtcclxuICAgICAgICB0aGlzLl9pZCAgICAgID0gY29yZXVpVGFibGVVdGlscy5oYXNoQ29kZSgpO1xyXG5cclxuXHJcbiAgICAgICAgaWYgKCAhIENvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QodGhpcy5fb3B0aW9ucy5idG4pKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX29wdGlvbnMuYnRuID0ge307XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoICEgdGhpcy5fb3B0aW9ucy5idG4uaGFzT3duUHJvcGVydHkoJ2NvbnRlbnQnKSB8fFxyXG4gICAgICAgICAgICB0eXBlb2YgdGhpcy5fb3B0aW9ucy5idG4uY29udGVudCAhPT0gJ3N0cmluZydcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy5idG4uY29udGVudCA9IHRhYmxlLmdldExhbmcoKS5zZWFyY2hcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICBpZiAoICEgQ29yZXVpVGFibGVVdGlscy5pc09iamVjdCh0aGlzLl9vcHRpb25zLmJ0bkNsZWFyKSkge1xyXG4gICAgICAgICAgICB0aGlzLl9vcHRpb25zLmJ0bkNsZWFyID0ge307XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoICEgdGhpcy5fb3B0aW9ucy5idG5DbGVhci5oYXNPd25Qcm9wZXJ0eSgnY29udGVudCcpIHx8XHJcbiAgICAgICAgICAgIHR5cGVvZiB0aGlzLl9vcHRpb25zLmJ0bkNsZWFyLmNvbnRlbnQgIT09ICdzdHJpbmcnXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX29wdGlvbnMuYnRuQ2xlYXIuY29udGVudCA9IHRhYmxlLmdldExhbmcoKS5jbGVhclxyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIGlmICggISBDb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KHRoaXMuX29wdGlvbnMuYnRuQ29tcGxldGUpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX29wdGlvbnMuYnRuQ29tcGxldGUgPSB7fTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICggISB0aGlzLl9vcHRpb25zLmJ0bkNvbXBsZXRlLmhhc093blByb3BlcnR5KCdjb250ZW50JykgfHxcclxuICAgICAgICAgICAgdHlwZW9mIHRoaXMuX29wdGlvbnMuYnRuQ29tcGxldGUuY29udGVudCAhPT0gJ3N0cmluZydcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy5idG5Db21wbGV0ZS5jb250ZW50ID0gdGFibGUuZ2V0TGFuZygpLnNlYXJjaFxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y8g0YHQvtCx0YvRgtC40Lkg0YHQstGP0LfQsNC90L3Ri9GFINGBINGN0LvQtdC80LXQvdGC0L7QvCDRg9C/0YDQsNCy0LvQtdC90LjRj1xyXG4gICAgICovXHJcbiAgICBpbml0RXZlbnRzOiBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgIGxldCB0aGF0ICAgICAgICAgPSB0aGlzO1xyXG4gICAgICAgIGxldCBjb250cm9sICAgICAgPSBjb3JldWlUYWJsZUVsZW1lbnRzLmdldENvbnRyb2wodGhpcy5fdGFibGUuZ2V0SWQoKSwgdGhpcy5nZXRJZCgpKTtcclxuICAgICAgICBsZXQgYnV0dG9uVG9nZ2xlID0gJCgnYnV0dG9uLmJ0bi1zZWFyY2gtdG9nZ2xlJywgY29udHJvbCk7XHJcbiAgICAgICAgbGV0IGJ1dHRvbkNsZWFyICA9ICQoJ2J1dHRvbi5idG4tY2xlYXInLCBjb250cm9sKTtcclxuXHJcbiAgICAgICAgYnV0dG9uVG9nZ2xlLmNsaWNrKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgbGV0IGNvbnRhaW5lciAgICAgICAgPSBjb3JldWlUYWJsZUVsZW1lbnRzLmdldFNlYXJjaENvbnRhaW5lcih0aGF0Ll90YWJsZS5nZXRJZCgpKTtcclxuICAgICAgICAgICAgbGV0IGNvbHVtbnNDb250YWluZXIgPSBjb3JldWlUYWJsZUVsZW1lbnRzLmdldENvbHVtbnNDb250YWluZXIodGhhdC5fdGFibGUuZ2V0SWQoKSk7XHJcblxyXG4gICAgICAgICAgICBpZiAoY29sdW1uc0NvbnRhaW5lclswXSkge1xyXG4gICAgICAgICAgICAgICAgY29sdW1uc0NvbnRhaW5lci5oaWRlKCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChjb250YWluZXJbMF0pIHtcclxuICAgICAgICAgICAgICAgIGNvbnRhaW5lci5mYWRlVG9nZ2xlKCdmYXN0Jyk7XHJcblxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgbGV0IGNvbnRyb2xzICAgICAgICAgICA9IFtdO1xyXG4gICAgICAgICAgICAgICAgbGV0IGNvbnRyb2xzRXZlbnRzICAgICA9IFtdO1xyXG4gICAgICAgICAgICAgICAgbGV0IGJ0bkNvbXBsZXRlQXR0ciAgICA9IFtdO1xyXG4gICAgICAgICAgICAgICAgbGV0IGJ0bkNvbXBsZXRlQ29udGVudCA9ICcnO1xyXG4gICAgICAgICAgICAgICAgbGV0IHdyYXBwZXIgICAgICAgICAgICA9IGNvcmV1aVRhYmxlRWxlbWVudHMuZ2V0V3JhcHBlcih0aGF0Ll90YWJsZS5nZXRJZCgpKTtcclxuICAgICAgICAgICAgICAgIGxldCB0YWJsZU9wdGlvbnMgICAgICAgPSB0aGF0Ll90YWJsZS5nZXRPcHRpb25zKCk7XHJcbiAgICAgICAgICAgICAgICBsZXQgbGFiZWxXaWR0aCAgICAgICAgID0gdGFibGVPcHRpb25zLnNlYXJjaC5oYXNPd25Qcm9wZXJ0eSgnbGFiZWxXaWR0aCcpICYmIHRhYmxlT3B0aW9ucy5zZWFyY2gubGFiZWxXaWR0aFxyXG4gICAgICAgICAgICAgICAgICAgID8gdGFibGVPcHRpb25zLnNlYXJjaC5sYWJlbFdpZHRoXHJcbiAgICAgICAgICAgICAgICAgICAgOiAxNjA7XHJcblxyXG4gICAgICAgICAgICAgICAgJC5lYWNoKHRoYXQuX3RhYmxlLl9zZWFyY2gsIGZ1bmN0aW9uIChrZXksIGNvbnRyb2wpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgb3B0aW9ucyA9IGNvbnRyb2wuZ2V0T3B0aW9ucygpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnZmllbGQnKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlb2Ygb3B0aW9ucy5maWVsZCA9PT0gJ3N0cmluZycgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5maWVsZFxyXG4gICAgICAgICAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9scy5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiAgICAgICBvcHRpb25zLmhhc093blByb3BlcnR5KCdsYWJlbCcpICYmIHR5cGVvZiBvcHRpb25zLmxhYmVsID09PSAnc3RyaW5nJyA/IG9wdGlvbnMubGFiZWwgOiAnJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBvcHRpb25zLmhhc093blByb3BlcnR5KCdkZXNjcmlwdGlvbicpICYmIHR5cGVvZiBvcHRpb25zLmRlc2NyaXB0aW9uID09PSAnc3RyaW5nJyA/IG9wdGlvbnMuZGVzY3JpcHRpb24gOiAnJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZWZpeDogICAgICBvcHRpb25zLmhhc093blByb3BlcnR5KCdwcmVmaXgnKSAmJiB0eXBlb2Ygb3B0aW9ucy5wcmVmaXggPT09ICdzdHJpbmcnID8gb3B0aW9ucy5wcmVmaXggOiAnJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiAgICAgICAgICBjb250cm9sLmdldElkKCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiAgICAgY29udHJvbC5yZW5kZXIoKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29udHJvbC5oYXNPd25Qcm9wZXJ0eSgnaW5pdEV2ZW50cycpICYmIHR5cGVvZiBjb250cm9sLmluaXRFdmVudHMgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xzRXZlbnRzLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50OiBjb250cm9sLmluaXRFdmVudHMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbDogY29udHJvbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG5cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoICEgY29yZXVpVGFibGVVdGlscy5pc09iamVjdCh0aGF0Ll9vcHRpb25zLmJ0bkNvbXBsZXRlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoYXQuX29wdGlvbnMuYnRuQ29tcGxldGUgPSB7fTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoICEgY29yZXVpVGFibGVVdGlscy5pc09iamVjdCh0aGF0Ll9vcHRpb25zLmJ0bkNvbXBsZXRlLmF0dHIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhhdC5fb3B0aW9ucy5idG5Db21wbGV0ZS5hdHRyID0ge307XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHRoYXQuX29wdGlvbnMuYnRuQ29tcGxldGUuYXR0ci5oYXNPd25Qcm9wZXJ0eSgndHlwZScpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHRoYXQuX29wdGlvbnMuYnRuQ29tcGxldGUuYXR0ci50eXBlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmICggISB0aGF0Ll9vcHRpb25zLmJ0bkNvbXBsZXRlLmF0dHIuaGFzT3duUHJvcGVydHkoJ2NsYXNzJykgfHxcclxuICAgICAgICAgICAgICAgICAgICB0eXBlb2YgdGhhdC5fb3B0aW9ucy5idG5Db21wbGV0ZS5hdHRyLmNsYXNzICE9PSAnc3RyaW5nJ1xyXG4gICAgICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhhdC5fb3B0aW9ucy5idG5Db21wbGV0ZS5hdHRyLmNsYXNzID0gJ2J0bi1jb21wbGV0ZSc7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoYXQuX29wdGlvbnMuYnRuQ29tcGxldGUuYXR0ci5jbGFzcyArPSAnIGJ0bi1jb21wbGV0ZSc7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QodGhhdC5fb3B0aW9ucy5idG5Db21wbGV0ZS5hdHRyKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICQuZWFjaCh0aGF0Ll9vcHRpb25zLmJ0bkNvbXBsZXRlLmF0dHIsIGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBidG5Db21wbGV0ZUF0dHIucHVzaChuYW1lICsgJz1cIicgKyB2YWx1ZSArICdcIicpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGF0Ll9vcHRpb25zLmJ0bkNvbXBsZXRlLmNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYnRuQ29tcGxldGVDb250ZW50ID0gdGhhdC5fb3B0aW9ucy5idG5Db21wbGV0ZS5jb250ZW50O1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGxldCBjb250ZW50ID0gZWpzLnJlbmRlcihjb3JldWlUYWJsZVRwbFsnY29udHJvbHMvc2VhcmNoLWNvbnRhaW5lci5odG1sJ10sIHtcclxuICAgICAgICAgICAgICAgICAgICBsYWJlbFdpZHRoOiBsYWJlbFdpZHRoICsgKHR5cGVvZiBsYWJlbFdpZHRoID09PSAnbnVtYmVyJyA/ICdweCcgOiAnJyksXHJcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbHM6IGNvbnRyb2xzLFxyXG4gICAgICAgICAgICAgICAgICAgIGJ0bkNvbXBsZXRlQXR0cjogICAgYnRuQ29tcGxldGVBdHRyLmxlbmd0aCA+IDAgPyAoJyAnICsgYnRuQ29tcGxldGVBdHRyLmpvaW4oJyAnKSkgOiAnJyxcclxuICAgICAgICAgICAgICAgICAgICBidG5Db21wbGV0ZUNvbnRlbnQ6IGJ0bkNvbXBsZXRlQ29udGVudCxcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgd3JhcHBlci5wcmVwZW5kKGNvbnRlbnQpO1xyXG5cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY29udHJvbHNFdmVudHMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICQuZWFjaChjb250cm9sc0V2ZW50cywgZnVuY3Rpb24gKGtleSwgY29udHJvbHNFdmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sc0V2ZW50LmV2ZW50LmFwcGx5KGNvbnRyb2xzRXZlbnQuY29udHJvbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgICAgICAgICAgY29udGFpbmVyID0gJCgnPiAuY29yZXVpLXRhYmxlX19zZWFyY2gnLCB3cmFwcGVyKTtcclxuXHJcbiAgICAgICAgICAgICAgICAkKCcuYnRuLWNvbXBsZXRlJywgY29udGFpbmVyKS5jbGljayhmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhhdC5fdGFibGUuc2VhcmNoUmVjb3JkcygpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBjb250YWluZXIuZmFkZU91dCgnZmFzdCcpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcblxyXG4gICAgICAgIGJ1dHRvbkNsZWFyLmNsaWNrKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdGhhdC5fdGFibGUuc2VhcmNoQ2xlYXIoKTtcclxuXHJcbiAgICAgICAgICAgIGxldCBjb250YWluZXIgPSBjb3JldWlUYWJsZUVsZW1lbnRzLmdldFNlYXJjaENvbnRhaW5lcih0aGF0Ll90YWJsZS5nZXRJZCgpKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChjb250YWluZXJbMF0pIHtcclxuICAgICAgICAgICAgICAgIGNvbnRhaW5lci5mYWRlT3V0KCdmYXN0Jyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcblxyXG4gICAgICAgIHRoaXMuX3RhYmxlLm9uKCdzZWFyY2hfY2hhbmdlJywgZnVuY3Rpb24gKHNlYXJjaERhdGEpIHtcclxuICAgICAgICAgICAgbGV0IGJ1dHRvbkNsZWFyID0gJCgnYnV0dG9uLmJ0bi1jbGVhcicsIGNvbnRyb2wpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHNlYXJjaERhdGEubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCAhIGJ1dHRvbkNsZWFyWzBdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJCh0aGF0Ll9yZW5kZXJCdG5DbGVhcigpKS5pbnNlcnRBZnRlcihidXR0b25Ub2dnbGUpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAkKCdidXR0b24uYnRuLWNsZWFyJywgY29udHJvbCkuY2xpY2soZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGF0Ll90YWJsZS5zZWFyY2hDbGVhcigpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGNvbnRhaW5lciA9IGNvcmV1aVRhYmxlRWxlbWVudHMuZ2V0U2VhcmNoQ29udGFpbmVyKHRoYXQuX3RhYmxlLmdldElkKCkpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbnRhaW5lclswXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyLmZhZGVPdXQoJ2Zhc3QnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGJ1dHRvbkNsZWFyLnJlbW92ZSgpO1xyXG5cclxuICAgICAgICAgICAgICAgIGxldCBjb250YWluZXIgPSBjb3JldWlUYWJsZUVsZW1lbnRzLmdldFNlYXJjaENvbnRhaW5lcih0aGF0Ll90YWJsZS5nZXRJZCgpKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY29udGFpbmVyWzBdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyLmZhZGVPdXQoJ2Zhc3QnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUgSUQg0Y3Qu9C10LzQtdC90YLQsCDRg9C/0YDQsNCy0LvQtdC90LjRj1xyXG4gICAgICogQHJldHVybnMge3N0cmluZ31cclxuICAgICAqL1xyXG4gICAgZ2V0SWQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5faWQ7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCk0L7RgNC80LjRgNC+0LLQsNC90LjQtSDQutC+0L3RgtC10L3RgtCwINC00LvRjyDRgNCw0LfQvNC10YnQtdC90LjRjyDQvdCwINGB0YLRgNCw0L3QuNGG0LVcclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIHJlbmRlcjogZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgIGxldCBidG5BdHRyICAgID0gW107XHJcbiAgICAgICAgbGV0IGJ0bkNvbnRlbnQgPSAnJztcclxuICAgICAgICBsZXQgYnRuQ2xlYXIgICA9ICcnO1xyXG5cclxuXHJcbiAgICAgICAgaWYgKCAhIGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QodGhpcy5fb3B0aW9ucy5idG4pKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX29wdGlvbnMuYnRuID0ge307XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICggISBjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KHRoaXMuX29wdGlvbnMuYnRuLmF0dHIpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX29wdGlvbnMuYnRuLmF0dHIgPSB7fTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICggISB0aGlzLl9vcHRpb25zLmJ0bi5hdHRyLmhhc093blByb3BlcnR5KCdjbGFzcycpIHx8XHJcbiAgICAgICAgICAgIHR5cGVvZiB0aGlzLl9vcHRpb25zLmJ0bi5hdHRyLmNsYXNzICE9PSAnc3RyaW5nJ1xyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICB0aGlzLl9vcHRpb25zLmJ0bi5hdHRyLmNsYXNzID0gJ2J0bi1zZWFyY2gtdG9nZ2xlJztcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLl9vcHRpb25zLmJ0bi5hdHRyLmNsYXNzICs9ICcgYnRuLXNlYXJjaC10b2dnbGUnO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgJC5lYWNoKHRoaXMuX29wdGlvbnMuYnRuLmF0dHIsIGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xyXG4gICAgICAgICAgICBidG5BdHRyLnB1c2gobmFtZSArICc9XCInICsgdmFsdWUgKyAnXCInKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLl9vcHRpb25zLmJ0bi5jb250ZW50ID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICBidG5Db250ZW50ID0gdGhpcy5fb3B0aW9ucy5idG4uY29udGVudDtcclxuICAgICAgICB9XHJcblxyXG5cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX3RhYmxlLmdldFNlYXJjaERhdGEoKS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIGJ0bkNsZWFyID0gdGhpcy5fcmVuZGVyQnRuQ2xlYXIoKTtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICByZXR1cm4gZWpzLnJlbmRlcihjb3JldWlUYWJsZVRwbFsnY29udHJvbHMvc2VhcmNoLmh0bWwnXSwge1xyXG4gICAgICAgICAgICBidG5Db250ZW50OiBidG5Db250ZW50LFxyXG4gICAgICAgICAgICBidG5BdHRyOiBidG5BdHRyLmxlbmd0aCA+IDAgPyAoJyAnICsgYnRuQXR0ci5qb2luKCcgJykpIDogJycsXHJcbiAgICAgICAgICAgIGJ0bkNsZWFyOiBidG5DbGVhclxyXG4gICAgICAgIH0pO1xyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQoNC10L3QtNC10YAg0LrQvdC+0L/QutC4INC+0YLQvNC10L3Ri1xyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgX3JlbmRlckJ0bkNsZWFyOiBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgIGxldCBhdHRyaWJ1dGVzID0gW107XHJcbiAgICAgICAgbGV0IGNvbnRlbnQgICAgPSAnJztcclxuXHJcbiAgICAgICAgaWYgKCAhIGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QodGhpcy5fb3B0aW9ucy5idG5DbGVhcikpIHtcclxuICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy5idG5DbGVhciA9IHt9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoICEgY29yZXVpVGFibGVVdGlscy5pc09iamVjdCh0aGlzLl9vcHRpb25zLmJ0bkNsZWFyLmF0dHIpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX29wdGlvbnMuYnRuQ2xlYXIuYXR0ciA9IHt9O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCAhIHRoaXMuX29wdGlvbnMuYnRuQ2xlYXIuYXR0ci5oYXNPd25Qcm9wZXJ0eSgnY2xhc3MnKSB8fFxyXG4gICAgICAgICAgICB0eXBlb2YgdGhpcy5fb3B0aW9ucy5idG5DbGVhci5hdHRyLmNsYXNzICE9PSAnc3RyaW5nJ1xyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICB0aGlzLl9vcHRpb25zLmJ0bkNsZWFyLmF0dHIuY2xhc3MgPSAnYnRuLWNsZWFyJztcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLl9vcHRpb25zLmJ0bkNsZWFyLmF0dHIuY2xhc3MgKz0gJyBidG4tY2xlYXInO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgJC5lYWNoKHRoaXMuX29wdGlvbnMuYnRuQ2xlYXIuYXR0ciwgZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XHJcbiAgICAgICAgICAgIGF0dHJpYnV0ZXMucHVzaChuYW1lICsgJz1cIicgKyB2YWx1ZSArICdcIicpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBpZiAodHlwZW9mIHRoaXMuX29wdGlvbnMuYnRuQ2xlYXIuY29udGVudCA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgY29udGVudCA9IHRoaXMuX29wdGlvbnMuYnRuQ2xlYXIuY29udGVudDtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICByZXR1cm4gZWpzLnJlbmRlcihjb3JldWlUYWJsZVRwbFsnY29udHJvbHMvc2VhcmNoLWNsZWFyLmh0bWwnXSwge1xyXG4gICAgICAgICAgICBjb250ZW50OiBjb250ZW50LFxyXG4gICAgICAgICAgICBhdHRyOiBhdHRyaWJ1dGVzLmxlbmd0aCA+IDAgPyAoJyAnICsgYXR0cmlidXRlcy5qb2luKCcgJykpIDogJycsXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn0iLCJcclxuaW1wb3J0IGNvcmV1aVRhYmxlVXRpbHMgZnJvbSAnLi4vY29yZXVpLnRhYmxlLnV0aWxzJztcclxuaW1wb3J0IGNvcmV1aVRhYmxlICAgICAgZnJvbSBcIi4uL2NvcmV1aS50YWJsZVwiO1xyXG5pbXBvcnQgY29yZXVpVGFibGVUcGwgZnJvbSBcIi4uL2NvcmV1aS50YWJsZS50ZW1wbGF0ZXNcIjtcclxuaW1wb3J0IENvcmV1aVRhYmxlVXRpbHMgZnJvbSBcIi4uL2NvcmV1aS50YWJsZS51dGlsc1wiO1xyXG5pbXBvcnQgY29yZXVpVGFibGVFbGVtZW50cyBmcm9tIFwiLi4vY29yZXVpLnRhYmxlLmVsZW1lbnRzXCI7XHJcblxyXG5jb3JldWlUYWJsZS5jb250cm9scy5jb2x1bW5zID0ge1xyXG5cclxuICAgIF9pZDogbnVsbCxcclxuICAgIF90YWJsZTogbnVsbCxcclxuICAgIF9vcHRpb25zOiB7XHJcbiAgICAgICAgaWQ6IG51bGwsXHJcbiAgICAgICAgdHlwZTogJ2NvbHVtbnMnLFxyXG4gICAgICAgIGJ0bjoge1xyXG4gICAgICAgICAgICBjb250ZW50OiAnPGkgY2xhc3M9XCJiaSBiaS1sYXlvdXQtdGhyZWUtY29sdW1uc1wiPjwvaT4nLFxyXG4gICAgICAgICAgICBhdHRyOiB7XHJcbiAgICAgICAgICAgICAgICBjbGFzczogJ2J0biBidG4tb3V0bGluZS1zZWNvbmRhcnknXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIGJ0bkNvbXBsZXRlOiB7XHJcbiAgICAgICAgICAgIGNvbnRlbnQ6IG51bGwsXHJcbiAgICAgICAgICAgIGF0dHI6IHsgY2xhc3M6ICdidG4gYnRuLXByaW1hcnknIH1cclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPXHJcbiAgICAgKiBAcGFyYW0ge0NvcmVVSS50YWJsZS5pbnN0YW5jZX0gdGFibGVcclxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zXHJcbiAgICAgKi9cclxuICAgIGluaXQ6IGZ1bmN0aW9uICh0YWJsZSwgb3B0aW9ucykge1xyXG5cclxuICAgICAgICB0aGlzLl9vcHRpb25zID0gJC5leHRlbmQoe30sIHRoaXMuX29wdGlvbnMsIG9wdGlvbnMpO1xyXG4gICAgICAgIHRoaXMuX3RhYmxlICAgPSB0YWJsZTtcclxuICAgICAgICB0aGlzLl9pZCAgICAgID0gdGhpcy5fb3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnaWQnKSAmJiB0eXBlb2YgdGhpcy5fb3B0aW9ucy5pZCA9PT0gJ3N0cmluZycgJiYgdGhpcy5fb3B0aW9ucy5pZFxyXG4gICAgICAgICAgICA/IHRoaXMuX29wdGlvbnMuaWRcclxuICAgICAgICAgICAgOiBjb3JldWlUYWJsZVV0aWxzLmhhc2hDb2RlKCk7XHJcblxyXG5cclxuICAgICAgICBpZiAoICEgQ29yZXVpVGFibGVVdGlscy5pc09iamVjdCh0aGlzLl9vcHRpb25zLmJ0bikpIHtcclxuICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy5idG4gPSB7fTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICggISBDb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KHRoaXMuX29wdGlvbnMuYnRuQ29tcGxldGUpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX29wdGlvbnMuYnRuQ29tcGxldGUgPSB7fTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChDb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KHRoaXMuX29wdGlvbnMuYnRuQ29tcGxldGUpICYmXHJcbiAgICAgICAgICAgIHR5cGVvZiB0aGlzLl9vcHRpb25zLmJ0bkNvbXBsZXRlLmNvbnRlbnQgIT09ICdzdHJpbmcnXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX29wdGlvbnMuYnRuQ29tcGxldGUuY29udGVudCA9IHRhYmxlLmdldExhbmcoKS5jb21wbGV0ZVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC/0LDRgNCw0LzQtdGC0YDQvtCyXHJcbiAgICAgKiBAcmV0dXJucyB7b2JqZWN0fVxyXG4gICAgICovXHJcbiAgICBnZXRPcHRpb25zOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuICQuZXh0ZW5kKHRydWUsIHt9LCB0aGlzLl9vcHRpb25zKTtcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y8g0YHQvtCx0YvRgtC40Lkg0YHQstGP0LfQsNC90L3Ri9GFINGBINGN0LvQtdC80LXQvdGC0L7QvCDRg9C/0YDQsNCy0LvQtdC90LjRj1xyXG4gICAgICovXHJcbiAgICBpbml0RXZlbnRzOiBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgIGxldCB0aGF0ICAgID0gdGhpcztcclxuICAgICAgICBsZXQgb3B0aW9ucyA9IHRoaXMuZ2V0T3B0aW9ucygpO1xyXG4gICAgICAgIGxldCBjb250cm9sID0gY29yZXVpVGFibGVFbGVtZW50cy5nZXRDb250cm9sKHRoaXMuX3RhYmxlLmdldElkKCksIHRoaXMuX2lkKTtcclxuICAgICAgICBsZXQgYnV0dG9uICA9ICQoJ2J1dHRvbicsIGNvbnRyb2wpO1xyXG5cclxuICAgICAgICBidXR0b24uY2xpY2soZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBsZXQgY29udGFpbmVyICAgICAgID0gY29yZXVpVGFibGVFbGVtZW50cy5nZXRDb2x1bW5zQ29udGFpbmVyKHRoYXQuX3RhYmxlLmdldElkKCkpO1xyXG4gICAgICAgICAgICBsZXQgY29udGFpbmVyU2VhcmNoID0gY29yZXVpVGFibGVFbGVtZW50cy5nZXRTZWFyY2hDb250YWluZXIodGhhdC5fdGFibGUuZ2V0SWQoKSk7XHJcblxyXG4gICAgICAgICAgICBpZiAoY29udGFpbmVyU2VhcmNoWzBdKSB7XHJcbiAgICAgICAgICAgICAgICBjb250YWluZXJTZWFyY2guaGlkZSgpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoY29udGFpbmVyWzBdKSB7XHJcbiAgICAgICAgICAgICAgICBjb250YWluZXIuZmFkZVRvZ2dsZSgnZmFzdCcpO1xyXG5cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGxldCBjb2x1bW5zICAgICAgICAgICAgPSBbXTtcclxuICAgICAgICAgICAgICAgIGxldCBzaG93QWxsICAgICAgICAgICAgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgbGV0IGJ0bkNvbXBsZXRlQXR0ciAgICA9IFtdO1xyXG4gICAgICAgICAgICAgICAgbGV0IGJ0bkNvbXBsZXRlQ29udGVudCA9ICcnO1xyXG4gICAgICAgICAgICAgICAgbGV0IHdyYXBwZXIgICAgICAgICAgICA9IGNvcmV1aVRhYmxlRWxlbWVudHMuZ2V0V3JhcHBlcih0aGF0Ll90YWJsZS5nZXRJZCgpKTtcclxuXHJcbiAgICAgICAgICAgICAgICAkLmVhY2godGhhdC5fdGFibGUuX2NvbHVtbnMsIGZ1bmN0aW9uIChrZXksIGNvbHVtbikge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBvcHRpb25zID0gY29sdW1uLmdldE9wdGlvbnMoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuaGFzT3duUHJvcGVydHkoJ2ZpZWxkJykgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIG9wdGlvbnMuZmllbGQgPT09ICdzdHJpbmcnICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnMuZmllbGRcclxuICAgICAgICAgICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGlzU2hvdyA9IGNvbHVtbi5pc1Nob3coKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbHVtbnMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWVsZDogb3B0aW9ucy5maWVsZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiBvcHRpb25zLmhhc093blByb3BlcnR5KCdsYWJlbCcpICYmIHR5cGVvZiBvcHRpb25zLmxhYmVsID09PSAnc3RyaW5nJyA/IG9wdGlvbnMubGFiZWwgOiAnJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3c6IGlzU2hvdyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoICEgaXNTaG93KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG93QWxsID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcblxyXG5cclxuICAgICAgICAgICAgICAgIGlmICggISBjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KG9wdGlvbnMuYnRuQ29tcGxldGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5idG5Db21wbGV0ZSA9IHt9O1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmICggISBjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KG9wdGlvbnMuYnRuQ29tcGxldGUuYXR0cikpIHtcclxuICAgICAgICAgICAgICAgICAgICBvcHRpb25zLmJ0bkNvbXBsZXRlLmF0dHIgPSB7fTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5idG5Db21wbGV0ZS5hdHRyLmhhc093blByb3BlcnR5KCd0eXBlJykpIHtcclxuICAgICAgICAgICAgICAgICAgICBkZWxldGUgb3B0aW9ucy5idG5Db21wbGV0ZS5hdHRyLnR5cGU7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCAhIG9wdGlvbnMuYnRuQ29tcGxldGUuYXR0ci5oYXNPd25Qcm9wZXJ0eSgnY2xhc3MnKSB8fFxyXG4gICAgICAgICAgICAgICAgICAgIHR5cGVvZiBvcHRpb25zLmJ0bkNvbXBsZXRlLmF0dHIuY2xhc3MgIT09ICdzdHJpbmcnXHJcbiAgICAgICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgICAgICBvcHRpb25zLmJ0bkNvbXBsZXRlLmF0dHIuY2xhc3MgPSAnYnRuLWNvbXBsZXRlJztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5idG5Db21wbGV0ZS5hdHRyLmNsYXNzICs9ICcgYnRuLWNvbXBsZXRlJztcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY29yZXVpVGFibGVVdGlscy5pc09iamVjdChvcHRpb25zLmJ0bkNvbXBsZXRlLmF0dHIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJC5lYWNoKG9wdGlvbnMuYnRuQ29tcGxldGUuYXR0ciwgZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ0bkNvbXBsZXRlQXR0ci5wdXNoKG5hbWUgKyAnPVwiJyArIHZhbHVlICsgJ1wiJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zLmJ0bkNvbXBsZXRlLmNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYnRuQ29tcGxldGVDb250ZW50ID0gb3B0aW9ucy5idG5Db21wbGV0ZS5jb250ZW50O1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgY29udGVudCA9IGVqcy5yZW5kZXIoY29yZXVpVGFibGVUcGxbJ2NvbnRyb2xzL2NvbHVtbnMtY29udGFpbmVyLmh0bWwnXSwge1xyXG4gICAgICAgICAgICAgICAgICAgIHNob3dBbGw6ICAgICAgICAgICAgc2hvd0FsbCxcclxuICAgICAgICAgICAgICAgICAgICBjb2x1bW5zOiAgICAgICAgICAgIGNvbHVtbnMsXHJcbiAgICAgICAgICAgICAgICAgICAgYnRuQ29tcGxldGVBdHRyOiAgICBidG5Db21wbGV0ZUF0dHIubGVuZ3RoID4gMCA/ICgnICcgKyBidG5Db21wbGV0ZUF0dHIuam9pbignICcpKSA6ICcnLFxyXG4gICAgICAgICAgICAgICAgICAgIGJ0bkNvbXBsZXRlQ29udGVudDogYnRuQ29tcGxldGVDb250ZW50LFxyXG4gICAgICAgICAgICAgICAgICAgIGxhbmc6ICAgICAgICAgICAgICAgdGhhdC5fdGFibGUuZ2V0TGFuZygpLFxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB3cmFwcGVyLnByZXBlbmQoY29udGVudCk7XHJcblxyXG5cclxuXHJcbiAgICAgICAgICAgICAgICBjb250YWluZXIgPSAkKCc+IC5jb3JldWktdGFibGVfX2NvbHVtbnMnLCB3cmFwcGVyKTtcclxuXHJcbiAgICAgICAgICAgICAgICAkKCcuY29yZXVpLXRhYmxlX19jaGVja19hbGwgaW5wdXQnLCBjb250YWluZXIpLmNoYW5nZShmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJCgnLmNvcmV1aS10YWJsZV9jaGVjay1jb2x1bW4gaW5wdXQnLCBjb250YWluZXIpLnByb3AoJ2NoZWNrZWQnLCAkKHRoaXMpLmlzKFwiOmNoZWNrZWRcIikpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG5cclxuICAgICAgICAgICAgICAgICQoJy5idG4tY29tcGxldGUnLCBjb250YWluZXIpLmNsaWNrKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgY29sdW1ucyA9IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAkKCcuY29yZXVpLXRhYmxlX2NoZWNrLWNvbHVtbiBpbnB1dDpjaGVja2VkJywgY29udGFpbmVyKS5lYWNoKGZ1bmN0aW9uIChrZXksIGlucHV0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbHVtbnMucHVzaCgkKGlucHV0KS52YWwoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHRoYXQuX3RhYmxlLnNldENvbHVtbnNTaG93KGNvbHVtbnMpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoYXQuX3RhYmxlLnJlZnJlc2goKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyLmZhZGVPdXQoJ2Zhc3QnKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSBJRCDRjdC70LXQvNC10L3RgtCwINGD0L/RgNCw0LLQu9C10L3QuNGPXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxyXG4gICAgICovXHJcbiAgICBnZXRJZDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9pZDtcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KTQvtGA0LzQuNGA0L7QstCw0L3QuNC1INC60L7QvdGC0LXQvdGC0LAg0LTQu9GPINGA0LDQt9C80LXRidC10L3QuNGPINC90LAg0YHRgtGA0LDQvdC40YbQtVxyXG4gICAgICogQHJldHVybnMge3N0cmluZ31cclxuICAgICAqL1xyXG4gICAgcmVuZGVyOiBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgbGV0IGF0dHJpYnV0ZXMgPSBbXTtcclxuXHJcbiAgICAgICAgaWYgKGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QodGhpcy5fb3B0aW9ucy5idG4uYXR0cikpIHtcclxuICAgICAgICAgICAgJC5lYWNoKHRoaXMuX29wdGlvbnMuYnRuLmF0dHIsIGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgYXR0cmlidXRlcy5wdXNoKG5hbWUgKyAnPVwiJyArIHZhbHVlICsgJ1wiJyk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGVqcy5yZW5kZXIoY29yZXVpVGFibGVUcGxbJ2NvbnRyb2xzL2NvbHVtbnMuaHRtbCddLCB7XHJcbiAgICAgICAgICAgIGJ0bkNvbnRlbnQ6IHRoaXMuX29wdGlvbnMuYnRuLmNvbnRlbnQsXHJcbiAgICAgICAgICAgIGJ0bkF0dHI6IGF0dHJpYnV0ZXMubGVuZ3RoID4gMCA/ICgnICcgKyBhdHRyaWJ1dGVzLmpvaW4oJyAnKSkgOiAnJyxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufSIsIlxyXG5pbXBvcnQgJy4uLy4uLy4uL25vZGVfbW9kdWxlcy9lanMvZWpzLm1pbic7XHJcbmltcG9ydCBjb3JldWlUYWJsZVRwbCAgICAgIGZyb20gJy4uL2NvcmV1aS50YWJsZS50ZW1wbGF0ZXMnO1xyXG5pbXBvcnQgY29yZXVpVGFibGVVdGlscyAgICBmcm9tICcuLi9jb3JldWkudGFibGUudXRpbHMnO1xyXG5pbXBvcnQgY29yZXVpVGFibGUgICAgICAgICBmcm9tIFwiLi4vY29yZXVpLnRhYmxlXCI7XHJcbmltcG9ydCBjb3JldWlUYWJsZUVsZW1lbnRzIGZyb20gXCIuLi9jb3JldWkudGFibGUuZWxlbWVudHNcIjtcclxuXHJcbmNvcmV1aVRhYmxlLmNvbnRyb2xzLmNhcHRpb24gPSB7XHJcblxyXG4gICAgX2lkOiBudWxsLFxyXG4gICAgX3RhYmxlOiBudWxsLFxyXG4gICAgX29wdGlvbnM6IHtcclxuICAgICAgICBpZDogbnVsbCxcclxuICAgICAgICB0eXBlOiAnY2FwdGlvbicsXHJcbiAgICAgICAgdGl0bGU6IG51bGwsXHJcbiAgICAgICAgZGVzY3JpcHRpb246IG51bGwsXHJcbiAgICAgICAgdmFsdWU6IG51bGwsXHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPXHJcbiAgICAgKiBAcGFyYW0ge0NvcmVVSS50YWJsZS5pbnN0YW5jZX0gdGFibGVcclxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zXHJcbiAgICAgKi9cclxuICAgIGluaXQ6IGZ1bmN0aW9uICh0YWJsZSwgb3B0aW9ucykge1xyXG5cclxuICAgICAgICB0aGlzLl9vcHRpb25zID0gJC5leHRlbmQoe30sIHRoaXMuX29wdGlvbnMsIG9wdGlvbnMpO1xyXG4gICAgICAgIHRoaXMuX3RhYmxlICAgPSB0YWJsZTtcclxuICAgICAgICB0aGlzLl9pZCAgICAgID0gdGhpcy5fb3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnaWQnKSAmJiB0eXBlb2YgdGhpcy5fb3B0aW9ucy5pZCA9PT0gJ3N0cmluZycgJiYgdGhpcy5fb3B0aW9ucy5pZFxyXG4gICAgICAgICAgICA/IHRoaXMuX29wdGlvbnMuaWRcclxuICAgICAgICAgICAgOiBjb3JldWlUYWJsZVV0aWxzLmhhc2hDb2RlKCk7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPINGB0L7QsdGL0YLQuNC5INGB0LLRj9C30LDQvdC90YvRhSDRgSDRjdC70LXQvNC10L3RgtC+0Lwg0YPQv9GA0LDQstC70LXQvdC40Y9cclxuICAgICAqL1xyXG4gICAgaW5pdEV2ZW50czogZnVuY3Rpb24gKCkge1xyXG5cclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1IElEINGN0LvQtdC80LXQvdGC0LAg0YPQv9GA0LDQstC70LXQvdC40Y9cclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIGdldElkOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lkO1xyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQpNC+0YDQvNC40YDQvtCy0LDQvdC40LUg0LrQvtC90YLQtdC90YLQsCDQtNC70Y8g0YDQsNC30LzQtdGJ0LXQvdC40Y8g0L3QsCDRgdGC0YDQsNC90LjRhtC1XHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxyXG4gICAgICovXHJcbiAgICByZW5kZXI6IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICByZXR1cm4gZWpzLnJlbmRlcihjb3JldWlUYWJsZVRwbFsnY29udHJvbHMvY2FwdGlvbi5odG1sJ10sIHtcclxuICAgICAgICAgICAgdGl0bGU6IHRoaXMuX29wdGlvbnMudGl0bGUsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiB0aGlzLl9vcHRpb25zLmRlc2NyaXB0aW9uLFxyXG4gICAgICAgICAgICB2YWx1ZTogdGhpcy5fb3B0aW9ucy52YWx1ZSxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufSIsIlxyXG5pbXBvcnQgY29yZXVpVGFibGUgICAgICBmcm9tIFwiLi4vY29yZXVpLnRhYmxlXCI7XHJcbmltcG9ydCBjb3JldWlUYWJsZVRwbCAgIGZyb20gXCIuLi9jb3JldWkudGFibGUudGVtcGxhdGVzXCI7XHJcbmltcG9ydCBjb3JldWlUYWJsZVV0aWxzIGZyb20gXCIuLi9jb3JldWkudGFibGUudXRpbHNcIjtcclxuaW1wb3J0IENvcmV1aVRhYmxlVXRpbHMgZnJvbSBcIi4uL2NvcmV1aS50YWJsZS51dGlsc1wiO1xyXG5pbXBvcnQgY29yZXVpVGFibGVFbGVtZW50cyBmcm9tIFwiLi4vY29yZXVpLnRhYmxlLmVsZW1lbnRzXCI7XHJcblxyXG5jb3JldWlUYWJsZS5maWx0ZXJzLmNsZWFyID0ge1xyXG5cclxuICAgIF9pZDogbnVsbCxcclxuICAgIF90YWJsZTogbnVsbCxcclxuICAgIF9vcHRpb25zOiB7XHJcbiAgICAgICAgaWQ6IG51bGwsXHJcbiAgICAgICAgdHlwZTogJ2NsZWFyJyxcclxuICAgICAgICBjb250ZW50OiBudWxsLFxyXG4gICAgICAgIGF0dHI6IHtcclxuICAgICAgICAgICAgY2xhc3M6ICdidG4gYnRuLXNlY29uZGFyeSdcclxuICAgICAgICB9LFxyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQmNC90LjRhtC40LDQu9C40LfQsNGG0LjRj1xyXG4gICAgICogQHBhcmFtIHtDb3JlVUkudGFibGUuaW5zdGFuY2V9IHRhYmxlXHJcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gICAgICAgICAgICAgICAgb3B0aW9uc1xyXG4gICAgICovXHJcbiAgICBpbml0OiBmdW5jdGlvbiAodGFibGUsIG9wdGlvbnMpIHtcclxuXHJcbiAgICAgICAgdGhpcy5fb3B0aW9ucyA9ICQuZXh0ZW5kKHRydWUsIHt9LCB0aGlzLl9vcHRpb25zLCBvcHRpb25zKTtcclxuICAgICAgICB0aGlzLl90YWJsZSAgID0gdGFibGU7XHJcbiAgICAgICAgdGhpcy5faWQgICAgICA9IHRoaXMuX29wdGlvbnMuaGFzT3duUHJvcGVydHkoJ2lkJykgJiYgdHlwZW9mIHRoaXMuX29wdGlvbnMuaWQgPT09ICdzdHJpbmcnICYmIHRoaXMuX29wdGlvbnMuaWRcclxuICAgICAgICAgICAgPyB0aGlzLl9vcHRpb25zLmlkXHJcbiAgICAgICAgICAgIDogY29yZXVpVGFibGVVdGlscy5oYXNoQ29kZSgpO1xyXG5cclxuXHJcbiAgICAgICAgaWYgKCAhIHRoaXMuX29wdGlvbnMuaGFzT3duUHJvcGVydHkoJ2NvbnRlbnQnKSB8fFxyXG4gICAgICAgICAgICB0eXBlb2YgdGhpcy5fb3B0aW9ucy5jb250ZW50ICE9PSAnc3RyaW5nJ1xyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICB0aGlzLl9vcHRpb25zLmNvbnRlbnQgPSB0YWJsZS5nZXRMYW5nKCkuY2xlYXJcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSDQv9Cw0YDQsNC80LXRgtGA0L7QslxyXG4gICAgICogQHJldHVybnMge29iamVjdH1cclxuICAgICAqL1xyXG4gICAgZ2V0T3B0aW9uczogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiAkLmV4dGVuZCh0cnVlLCB7fSwgdGhpcy5fb3B0aW9ucyk7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSBpZFxyXG4gICAgICogQHJldHVybnMge3N0cmluZ31cclxuICAgICAqL1xyXG4gICAgZ2V0SWQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5faWQ7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCj0YHRgtCw0L3QvtCy0LrQsCDQt9C90LDRh9C10L3QuNGPXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcclxuICAgICAqL1xyXG4gICAgc2V0VmFsdWU6IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG5cclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC30L3QsNGH0LXQvdC40Y9cclxuICAgICAqIEByZXR1cm5zIHtudWxsfVxyXG4gICAgICovXHJcbiAgICBnZXRWYWx1ZTogZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y8g0YHQvtCx0YvRgtC40LlcclxuICAgICAqIEByZXR1cm5zIHtvYmplY3R9XHJcbiAgICAgKi9cclxuICAgIGluaXRFdmVudHM6IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgbGV0IGNvbnRyb2wgPSBjb3JldWlUYWJsZUVsZW1lbnRzLmdldENvbnRyb2wodGhpcy5fdGFibGUuZ2V0SWQoKSwgdGhpcy5faWQpO1xyXG4gICAgICAgIGxldCB0aGF0ICAgID0gdGhpcztcclxuXHJcbiAgICAgICAgJCgnYnV0dG9uJywgY29udHJvbCkuY2xpY2soZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB0aGF0Ll90YWJsZS5maWx0ZXJzQ2xlYXIoKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5fdGFibGUub24oJ2ZpbHRlcnNfY2hhbmdlJywgZnVuY3Rpb24gKGZpbHRlckRhdGEpIHtcclxuXHJcbiAgICAgICAgICAgIGlmIChmaWx0ZXJEYXRhLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICQoJ2J1dHRvbicsIGNvbnRyb2wpLnNob3coKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICQoJ2J1dHRvbicsIGNvbnRyb2wpLmhpZGUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQpNC+0YDQvNC40YDQvtCy0LDQvdC40LUg0LrQvtC90YLQtdC90YLQsFxyXG4gICAgICogQHJldHVybnMge3N0cmluZ31cclxuICAgICAqL1xyXG4gICAgcmVuZGVyOiBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgbGV0IG9wdGlvbnMgPSB0aGlzLmdldE9wdGlvbnMoKTtcclxuXHJcbiAgICAgICAgaWYgKCAhIGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3Qob3B0aW9ucy5hdHRyKSkge1xyXG4gICAgICAgICAgICBvcHRpb25zLmF0dHIgPSB7fTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChvcHRpb25zLmF0dHIuaGFzT3duUHJvcGVydHkoJ3R5cGUnKSkge1xyXG4gICAgICAgICAgICBkZWxldGUgb3B0aW9ucy5hdHRyLnR5cGU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgZmlsdGVyRGF0YSA9IHRoaXMuX3RhYmxlLmdldEZpbHRlckRhdGEoKTtcclxuXHJcbiAgICAgICAgaWYgKGZpbHRlckRhdGEubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmF0dHIuaGFzT3duUHJvcGVydHkoJ3N0eWxlJykgJiYgdHlwZW9mIG9wdGlvbnMuYXR0ci5zdHlsZSA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgICAgIG9wdGlvbnMuYXR0ci5zdHlsZSArPSAnO2Rpc3BsYXk6bm9uZTsnXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBvcHRpb25zLmF0dHIuc3R5bGUgPSBcImRpc3BsYXk6bm9uZVwiXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBhdHRyID0gW107XHJcblxyXG4gICAgICAgICQuZWFjaChvcHRpb25zLmF0dHIsIGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xyXG4gICAgICAgICAgICBhdHRyLnB1c2gobmFtZSArICc9XCInICsgdmFsdWUgKyAnXCInKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGVqcy5yZW5kZXIoY29yZXVpVGFibGVUcGxbJ2ZpbHRlcnMvY2xlYXIuaHRtbCddLCB7XHJcbiAgICAgICAgICAgIGF0dHI6IGF0dHIubGVuZ3RoID4gMCA/ICgnICcgKyBhdHRyLmpvaW4oJyAnKSkgOiAnJyxcclxuICAgICAgICAgICAgY29udGVudDogb3B0aW9ucy5jb250ZW50ID8gb3B0aW9ucy5jb250ZW50IDogJycsXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn0iLCJcclxuaW1wb3J0ICcuLi8uLi8uLi9ub2RlX21vZHVsZXMvZWpzL2Vqcy5taW4nO1xyXG5pbXBvcnQgY29yZXVpVGFibGUgICAgICAgICBmcm9tIFwiLi4vY29yZXVpLnRhYmxlXCI7XHJcbmltcG9ydCBjb3JldWlUYWJsZVRwbCAgICAgIGZyb20gXCIuLi9jb3JldWkudGFibGUudGVtcGxhdGVzXCI7XHJcbmltcG9ydCBjb3JldWlUYWJsZVV0aWxzICAgIGZyb20gXCIuLi9jb3JldWkudGFibGUudXRpbHNcIjtcclxuaW1wb3J0IGNvcmV1aVRhYmxlRWxlbWVudHMgZnJvbSBcIi4uL2NvcmV1aS50YWJsZS5lbGVtZW50c1wiO1xyXG5cclxuY29yZXVpVGFibGUuZmlsdGVycy50ZXh0ID0ge1xyXG5cclxuICAgIF9pZDogbnVsbCxcclxuICAgIF90YWJsZTogbnVsbCxcclxuICAgIF92YWx1ZTogbnVsbCxcclxuICAgIF9yZW5kZXI6IGZhbHNlLFxyXG4gICAgX29wdGlvbnM6IHtcclxuICAgICAgICBpZDogbnVsbCxcclxuICAgICAgICB0eXBlOiAndGV4dCcsXHJcbiAgICAgICAgZmllbGQ6IG51bGwsXHJcbiAgICAgICAgbGFiZWw6IG51bGwsXHJcbiAgICAgICAgdmFsdWU6IG51bGwsXHJcbiAgICAgICAgd2lkdGg6IDIwMCxcclxuICAgICAgICBhdHRyOiB7XHJcbiAgICAgICAgICAgIGNsYXNzOiBcImZvcm0tY29udHJvbFwiLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgYnRuOiB7XHJcbiAgICAgICAgICAgIGF0dHI6IHsgY2xhc3M6IFwiYnRuIGJ0bi1vdXRsaW5lLXNlY29uZGFyeSBib3JkZXItc2Vjb25kYXJ5LXN1YnRsZVwiIH0sXHJcbiAgICAgICAgICAgIGNvbnRlbnQ6ICc8aSBjbGFzcz1cImJpIGJpLXNlYXJjaFwiPjwvaT4nXHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQmNC90LjRhtC40LDQu9C40LfQsNGG0LjRj1xyXG4gICAgICogQHBhcmFtIHtDb3JlVUkudGFibGUuaW5zdGFuY2V9IHRhYmxlXHJcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gICAgICAgICAgICAgICAgb3B0aW9uc1xyXG4gICAgICovXHJcbiAgICBpbml0OiBmdW5jdGlvbiAodGFibGUsIG9wdGlvbnMpIHtcclxuXHJcbiAgICAgICAgdGhpcy5fb3B0aW9ucyA9ICQuZXh0ZW5kKHRydWUsIHt9LCB0aGlzLl9vcHRpb25zLCBvcHRpb25zKTtcclxuICAgICAgICB0aGlzLl90YWJsZSAgID0gdGFibGU7XHJcbiAgICAgICAgdGhpcy5faWQgICAgICA9IHRoaXMuX29wdGlvbnMuaGFzT3duUHJvcGVydHkoJ2lkJykgJiYgdHlwZW9mIHRoaXMuX29wdGlvbnMuaWQgPT09ICdzdHJpbmcnICYmIHRoaXMuX29wdGlvbnMuaWRcclxuICAgICAgICAgICAgPyB0aGlzLl9vcHRpb25zLmlkXHJcbiAgICAgICAgICAgIDogY29yZXVpVGFibGVVdGlscy5oYXNoQ29kZSgpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy52YWx1ZSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLnNldFZhbHVlKHRoaXMuX29wdGlvbnMudmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC/0LDRgNCw0LzQtdGC0YDQvtCyXHJcbiAgICAgKiBAcmV0dXJucyB7b2JqZWN0fVxyXG4gICAgICovXHJcbiAgICBnZXRPcHRpb25zOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuICQuZXh0ZW5kKHRydWUsIHt9LCB0aGlzLl9vcHRpb25zKTtcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1IGlkXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxyXG4gICAgICovXHJcbiAgICBnZXRJZDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9pZDtcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KPRgdGC0LDQvdC+0LLQutCwINC30L3QsNGH0LXQvdC40Y9cclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfG51bWJlcnxudWxsfSB2YWx1ZVxyXG4gICAgICovXHJcbiAgICBzZXRWYWx1ZTogZnVuY3Rpb24gKHZhbHVlKSB7XHJcblxyXG4gICAgICAgIGlmICh2YWx1ZSAhPT0gbnVsbCAmJlxyXG4gICAgICAgICAgICB0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnICYmXHJcbiAgICAgICAgICAgIHR5cGVvZiB2YWx1ZSAhPT0gJ251bWJlcidcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fdmFsdWUgPSB2YWx1ZVxyXG5cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX3JlbmRlcikge1xyXG4gICAgICAgICAgICBsZXQgY29udHJvbCA9IGNvcmV1aVRhYmxlRWxlbWVudHMuZ2V0Q29udHJvbCh0aGlzLl90YWJsZS5nZXRJZCgpLCB0aGlzLl9pZCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoY29udHJvbFswXSkge1xyXG4gICAgICAgICAgICAgICAgJCgnaW5wdXQnLCBjb250cm9sKS52YWwoXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdmFsdWUgPT09IG51bGwgPyAnJyA6IHRoaXMuX3ZhbHVlXHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0LfQvdCw0YfQtdC90LjRj1xyXG4gICAgICogQHJldHVybnMge3N0cmluZ3xudWxsfVxyXG4gICAgICovXHJcbiAgICBnZXRWYWx1ZTogZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICBsZXQgY29udHJvbCA9IGNvcmV1aVRhYmxlRWxlbWVudHMuZ2V0Q29udHJvbCh0aGlzLl90YWJsZS5nZXRJZCgpLCB0aGlzLl9pZCk7XHJcbiAgICAgICAgbGV0IGlucHV0ICAgPSAkKCdpbnB1dCcsIGNvbnRyb2wpO1xyXG5cclxuICAgICAgICBpZiAoaW5wdXRbMF0pIHtcclxuICAgICAgICAgICAgbGV0IHZhbHVlID0gaW5wdXQudmFsKCk7XHJcblxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJiB2YWx1ZSAhPT0gJycpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPINGB0L7QsdGL0YLQuNC5XHJcbiAgICAgKiBAcmV0dXJucyB7b2JqZWN0fVxyXG4gICAgICovXHJcbiAgICBpbml0RXZlbnRzOiBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgIGxldCBjb250cm9sID0gY29yZXVpVGFibGVFbGVtZW50cy5nZXRDb250cm9sKHRoaXMuX3RhYmxlLmdldElkKCksIHRoaXMuX2lkKTtcclxuICAgICAgICBsZXQgdGhhdCAgICA9IHRoaXM7XHJcblxyXG4gICAgICAgICQoJ2lucHV0JywgY29udHJvbCkua2V5dXAoZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICBpZiAoZS5rZXkgPT09ICdFbnRlcicgfHwgZS5rZXlDb2RlID09PSAxMykge1xyXG4gICAgICAgICAgICAgICAgdGhhdC5fdGFibGUuc2VhcmNoUmVjb3JkcygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICQoJ2J1dHRvbicsIGNvbnRyb2wpLmNsaWNrKGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgdGhhdC5fdGFibGUuc2VhcmNoUmVjb3JkcygpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQpNC+0YDQvNC40YDQvtCy0LDQvdC40LUg0LrQvtC90YLQtdC90YLQsFxyXG4gICAgICogQHJldHVybnMge3N0cmluZ31cclxuICAgICAqL1xyXG4gICAgcmVuZGVyOiBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgdGhpcy5fcmVuZGVyID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgbGV0IG9wdGlvbnMgPSB0aGlzLmdldE9wdGlvbnMoKTtcclxuICAgICAgICBsZXQgbGFiZWwgICA9IHR5cGVvZiBvcHRpb25zLmxhYmVsID09PSAnc3RyaW5nJyB8fCB0eXBlb2Ygb3B0aW9ucy5sYWJlbCA9PT0gJ251bWJlcidcclxuICAgICAgICAgICAgPyBvcHRpb25zLmxhYmVsXHJcbiAgICAgICAgICAgIDogJyc7XHJcblxyXG4gICAgICAgIGlmICggISBjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KG9wdGlvbnMuYXR0cikpIHtcclxuICAgICAgICAgICAgb3B0aW9ucy5hdHRyID0ge307XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAob3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnd2lkdGgnKSAmJlxyXG4gICAgICAgICAgICBjb3JldWlUYWJsZVV0aWxzLmlzTnVtZXJpYyhvcHRpb25zLndpZHRoKVxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5hdHRyLmhhc093blByb3BlcnR5KCdzdHlsZScpKSB7XHJcbiAgICAgICAgICAgICAgICBvcHRpb25zLmF0dHJbJ3N0eWxlJ10gKz0gJzt3aWR0aDonICsgb3B0aW9ucy53aWR0aCArICdweCc7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBvcHRpb25zLmF0dHJbJ3N0eWxlJ10gPSAnd2lkdGg6JyArIG9wdGlvbnMud2lkdGggKyAncHgnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBvcHRpb25zLmF0dHJbJ25hbWUnXSAgPSB0eXBlb2Ygb3B0aW9ucy5maWVsZCA9PT0gJ3N0cmluZycgPyBvcHRpb25zLmZpZWxkIDogJyc7XHJcbiAgICAgICAgb3B0aW9ucy5hdHRyWyd2YWx1ZSddID0gdHlwZW9mIHRoaXMuX3ZhbHVlID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgdGhpcy5fdmFsdWUgPT09ICdudW1iZXInXHJcbiAgICAgICAgICAgID8gdGhpcy5fdmFsdWVcclxuICAgICAgICAgICAgOiAnJztcclxuXHJcbiAgICAgICAgaWYgKG9wdGlvbnMuYXR0ci5oYXNPd25Qcm9wZXJ0eSgndHlwZScpKSB7XHJcbiAgICAgICAgICAgIGRlbGV0ZSBvcHRpb25zLmF0dHIudHlwZTtcclxuICAgICAgICB9XHJcblxyXG5cclxuXHJcbiAgICAgICAgaWYgKCAhIGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3Qob3B0aW9ucy5idG4pKSB7XHJcbiAgICAgICAgICAgIG9wdGlvbnMuYnRuID0ge307XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICggISBjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KG9wdGlvbnMuYnRuLmF0dHIpKSB7XHJcbiAgICAgICAgICAgIG9wdGlvbnMuYnRuLmF0dHIgPSB7fTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChvcHRpb25zLmJ0bi5hdHRyLmhhc093blByb3BlcnR5KCd0eXBlJykpIHtcclxuICAgICAgICAgICAgZGVsZXRlIG9wdGlvbnMuYnRuLmF0dHIudHlwZTtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICBsZXQgYXR0ciAgICA9IFtdO1xyXG4gICAgICAgIGxldCBhdHRyQnRuID0gW107XHJcblxyXG4gICAgICAgICQuZWFjaChvcHRpb25zLmF0dHIsIGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xyXG4gICAgICAgICAgICBhdHRyLnB1c2gobmFtZSArICc9XCInICsgdmFsdWUgKyAnXCInKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICAkLmVhY2gob3B0aW9ucy5idG4uYXR0ciwgZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XHJcbiAgICAgICAgICAgIGF0dHJCdG4ucHVzaChuYW1lICsgJz1cIicgKyB2YWx1ZSArICdcIicpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gZWpzLnJlbmRlcihjb3JldWlUYWJsZVRwbFsnZmlsdGVycy90ZXh0Lmh0bWwnXSwge1xyXG4gICAgICAgICAgICBhdHRyOiBhdHRyLmxlbmd0aCA+IDAgPyAoJyAnICsgYXR0ci5qb2luKCcgJykpIDogJycsXHJcbiAgICAgICAgICAgIGxhYmVsOiBsYWJlbCxcclxuICAgICAgICAgICAgYnRuQXR0cjogYXR0ckJ0bi5sZW5ndGggPiAwID8gKCcgJyArIGF0dHJCdG4uam9pbignICcpKSA6ICcnLFxyXG4gICAgICAgICAgICBidG5Db250ZW50OiBvcHRpb25zLmJ0bi5jb250ZW50ID8gb3B0aW9ucy5idG4uY29udGVudCA6ICcnLFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59IiwiXHJcbmltcG9ydCAnLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Vqcy9lanMubWluJztcclxuaW1wb3J0IGNvcmV1aVRhYmxlICAgICAgZnJvbSBcIi4uL2NvcmV1aS50YWJsZVwiO1xyXG5pbXBvcnQgY29yZXVpVGFibGVUcGwgICBmcm9tIFwiLi4vY29yZXVpLnRhYmxlLnRlbXBsYXRlc1wiO1xyXG5pbXBvcnQgY29yZXVpVGFibGVVdGlscyBmcm9tIFwiLi4vY29yZXVpLnRhYmxlLnV0aWxzXCI7XHJcbmltcG9ydCBjb3JldWlUYWJsZUVsZW1lbnRzIGZyb20gXCIuLi9jb3JldWkudGFibGUuZWxlbWVudHNcIjtcclxuXHJcbmNvcmV1aVRhYmxlLmZpbHRlcnMubnVtYmVyID0ge1xyXG5cclxuICAgIF9pZDogbnVsbCxcclxuICAgIF90YWJsZTogbnVsbCxcclxuICAgIF92YWx1ZTogbnVsbCxcclxuICAgIF9yZW5kZXI6IGZhbHNlLFxyXG4gICAgX29wdGlvbnM6IHtcclxuICAgICAgICBpZDogbnVsbCxcclxuICAgICAgICB0eXBlOiAnbnVtYmVyJyxcclxuICAgICAgICBmaWVsZDogbnVsbCxcclxuICAgICAgICBsYWJlbDogbnVsbCxcclxuICAgICAgICB2YWx1ZTogbnVsbCxcclxuICAgICAgICB3aWR0aDogOTAsXHJcbiAgICAgICAgYXR0cjoge1xyXG4gICAgICAgICAgICBjbGFzczogXCJmb3JtLWNvbnRyb2xcIixcclxuICAgICAgICB9LFxyXG4gICAgICAgIGJ0bjoge1xyXG4gICAgICAgICAgICBhdHRyOiB7IGNsYXNzOiBcImJ0biBidG4tb3V0bGluZS1zZWNvbmRhcnkgYm9yZGVyLXNlY29uZGFyeS1zdWJ0bGVcIiB9LFxyXG4gICAgICAgICAgICBjb250ZW50OiAnPGkgY2xhc3M9XCJiaSBiaS1zZWFyY2hcIj48L2k+J1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y9cclxuICAgICAqIEBwYXJhbSB7Q29yZVVJLnRhYmxlLmluc3RhbmNlfSB0YWJsZVxyXG4gICAgICogQHBhcmFtIHtvYmplY3R9ICAgICAgICAgICAgICAgIG9wdGlvbnNcclxuICAgICAqL1xyXG4gICAgaW5pdDogZnVuY3Rpb24gKHRhYmxlLCBvcHRpb25zKSB7XHJcblxyXG4gICAgICAgIHRoaXMuX29wdGlvbnMgPSAkLmV4dGVuZCh0cnVlLCB7fSwgdGhpcy5fb3B0aW9ucywgb3B0aW9ucyk7XHJcbiAgICAgICAgdGhpcy5fdGFibGUgICA9IHRhYmxlO1xyXG4gICAgICAgIHRoaXMuX2lkICAgICAgPSB0aGlzLl9vcHRpb25zLmhhc093blByb3BlcnR5KCdpZCcpICYmIHR5cGVvZiB0aGlzLl9vcHRpb25zLmlkID09PSAnc3RyaW5nJyAmJiB0aGlzLl9vcHRpb25zLmlkXHJcbiAgICAgICAgICAgID8gdGhpcy5fb3B0aW9ucy5pZFxyXG4gICAgICAgICAgICA6IGNvcmV1aVRhYmxlVXRpbHMuaGFzaENvZGUoKTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMudmFsdWUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5zZXRWYWx1ZSh0aGlzLl9vcHRpb25zLnZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSDQv9Cw0YDQsNC80LXRgtGA0L7QslxyXG4gICAgICogQHJldHVybnMge29iamVjdH1cclxuICAgICAqL1xyXG4gICAgZ2V0T3B0aW9uczogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiAkLmV4dGVuZCh0cnVlLCB7fSwgdGhpcy5fb3B0aW9ucyk7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSBpZFxyXG4gICAgICogQHJldHVybnMge3N0cmluZ31cclxuICAgICAqL1xyXG4gICAgZ2V0SWQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5faWQ7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCj0YHRgtCw0L3QvtCy0LrQsCDQt9C90LDRh9C10L3QuNGPXHJcbiAgICAgKiBAcGFyYW0ge29iamVjdHxudWxsfSB2YWx1ZVxyXG4gICAgICovXHJcbiAgICBzZXRWYWx1ZTogZnVuY3Rpb24gKHZhbHVlKSB7XHJcblxyXG4gICAgICAgIGlmICh2YWx1ZSkge1xyXG4gICAgICAgICAgICBpZiAoICEgY29yZXVpVGFibGVVdGlscy5pc09iamVjdCh2YWx1ZSkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgbGV0IG51bWJlclN0YXJ0ID0gbnVsbDtcclxuICAgICAgICAgICAgbGV0IG51bWJlckVuZCAgID0gbnVsbDtcclxuXHJcbiAgICAgICAgICAgIGlmICh2YWx1ZS5oYXNPd25Qcm9wZXJ0eSgnc3RhcnQnKSAmJlxyXG4gICAgICAgICAgICAgICAgKHR5cGVvZiB2YWx1ZS5zdGFydCA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIHZhbHVlLnN0YXJ0ICE9PSAnbnVtYmVyJykgJiZcclxuICAgICAgICAgICAgICAgIHZhbHVlLnN0YXJ0ICE9PSAnJ1xyXG4gICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgIG51bWJlclN0YXJ0ID0gdmFsdWUuc3RhcnQ7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh2YWx1ZS5oYXNPd25Qcm9wZXJ0eSgnZW5kJykgJiZcclxuICAgICAgICAgICAgICAgICh0eXBlb2YgdmFsdWUuZW5kID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgdmFsdWUuZW5kICE9PSAnbnVtYmVyJykgJiZcclxuICAgICAgICAgICAgICAgIHZhbHVlLmVuZCAhPT0gJydcclxuICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICBudW1iZXJFbmQgPSB2YWx1ZS5lbmQ7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChudW1iZXJTdGFydCA9PT0gbnVsbCAmJiBudW1iZXJFbmQgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3ZhbHVlID0gbnVsbDtcclxuXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl92YWx1ZSA9IHtcclxuICAgICAgICAgICAgICAgICAgICBzdGFydDogbnVtYmVyU3RhcnQsXHJcbiAgICAgICAgICAgICAgICAgICAgZW5kOiAgIG51bWJlckVuZFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLl92YWx1ZSA9IG51bGw7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX3JlbmRlcikge1xyXG4gICAgICAgICAgICBsZXQgY29udHJvbCA9IGNvcmV1aVRhYmxlRWxlbWVudHMuZ2V0Q29udHJvbCh0aGlzLl90YWJsZS5nZXRJZCgpLCB0aGlzLl9pZCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoY29udHJvbFswXSkge1xyXG4gICAgICAgICAgICAgICAgbGV0IGlucHV0U3RhcnQgPSAkKCdpbnB1dC5udW1iZXItc3RhcnQnLCBjb250cm9sKTtcclxuICAgICAgICAgICAgICAgIGxldCBpbnB1dEVuZCAgID0gJCgnaW5wdXQubnVtYmVyLWVuZCcsIGNvbnRyb2wpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl92YWx1ZSA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlucHV0U3RhcnQudmFsKCcnKTtcclxuICAgICAgICAgICAgICAgICAgICBpbnB1dEVuZC52YWwoJycpO1xyXG5cclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY29yZXVpVGFibGVVdGlscy5pc09iamVjdCh0aGlzLl92YWx1ZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpbnB1dFN0YXJ0LnZhbCh0eXBlb2YgdGhpcy5fdmFsdWUuc3RhcnQgIT09IG51bGwgPyB0aGlzLl92YWx1ZS5zdGFydCA6ICcnKTtcclxuICAgICAgICAgICAgICAgICAgICBpbnB1dEVuZC52YWwodHlwZW9mIHRoaXMuX3ZhbHVlLmVuZCAhPT0gbnVsbCA/IHRoaXMuX3ZhbHVlLmVuZCA6ICcnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC30L3QsNGH0LXQvdC40Y9cclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIGdldFZhbHVlOiBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgIGxldCBjb250cm9sICAgID0gY29yZXVpVGFibGVFbGVtZW50cy5nZXRDb250cm9sKHRoaXMuX3RhYmxlLmdldElkKCksIHRoaXMuX2lkKTtcclxuICAgICAgICBsZXQgaW5wdXRTdGFydCA9ICQoJ2lucHV0Lm51bWJlci1zdGFydCcsIGNvbnRyb2wpO1xyXG4gICAgICAgIGxldCBpbnB1dEVuZCAgID0gJCgnaW5wdXQubnVtYmVyLWVuZCcsIGNvbnRyb2wpO1xyXG5cclxuICAgICAgICBpZiAoaW5wdXRTdGFydFswXSAmJiBpbnB1dEVuZFswXSkge1xyXG5cclxuICAgICAgICAgICAgbGV0IHZhbHVlU3RhcnQgPSBpbnB1dFN0YXJ0LnZhbCgpO1xyXG4gICAgICAgICAgICBsZXQgdmFsdWVFbmQgICA9IGlucHV0RW5kLnZhbCgpO1xyXG5cclxuICAgICAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICAgICAgKHR5cGVvZiB2YWx1ZVN0YXJ0ID09PSAnc3RyaW5nJyAmJiB2YWx1ZVN0YXJ0ICE9PSAnJykgfHxcclxuICAgICAgICAgICAgICAgICh0eXBlb2YgdmFsdWVFbmQgPT09ICdzdHJpbmcnICYmIHZhbHVlRW5kICE9PSAnJylcclxuICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0OiB2YWx1ZVN0YXJ0ICE9PSAnJyA/IHZhbHVlU3RhcnQgOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgIGVuZDogdmFsdWVFbmQgIT09ICcnID8gdmFsdWVFbmQgOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9LFxyXG5cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQmNC90LjRhtC40LDQu9C40LfQsNGG0LjRjyDRgdC+0LHRi9GC0LjQuVxyXG4gICAgICogQHJldHVybnMge29iamVjdH1cclxuICAgICAqL1xyXG4gICAgaW5pdEV2ZW50czogZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICBsZXQgY29udHJvbCA9IGNvcmV1aVRhYmxlRWxlbWVudHMuZ2V0Q29udHJvbCh0aGlzLl90YWJsZS5nZXRJZCgpLCB0aGlzLl9pZCk7XHJcbiAgICAgICAgbGV0IHRoYXQgICAgPSB0aGlzO1xyXG5cclxuICAgICAgICAkKCdpbnB1dC5udW1iZXItc3RhcnQsIGlucHV0Lm51bWJlci1lbmQnLCBjb250cm9sKS5rZXl1cChmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgIGlmIChlLmtleSA9PT0gJ0VudGVyJyB8fCBlLmtleUNvZGUgPT09IDEzKSB7XHJcbiAgICAgICAgICAgICAgICB0aGF0Ll90YWJsZS5zZWFyY2hSZWNvcmRzKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgJCgnYnV0dG9uJywgY29udHJvbCkuY2xpY2soZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICB0aGF0Ll90YWJsZS5zZWFyY2hSZWNvcmRzKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCk0L7RgNC80LjRgNC+0LLQsNC90LjQtSDQutC+0L3RgtC10L3RgtCwXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxyXG4gICAgICovXHJcbiAgICByZW5kZXI6IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICB0aGlzLl9yZW5kZXIgPSB0cnVlO1xyXG5cclxuICAgICAgICBsZXQgb3B0aW9ucyA9IHRoaXMuZ2V0T3B0aW9ucygpO1xyXG4gICAgICAgIGxldCBsYWJlbCAgID0gdHlwZW9mIG9wdGlvbnMubGFiZWwgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBvcHRpb25zLmxhYmVsID09PSAnbnVtYmVyJ1xyXG4gICAgICAgICAgICA/IG9wdGlvbnMubGFiZWxcclxuICAgICAgICAgICAgOiAnJztcclxuXHJcbiAgICAgICAgaWYgKCAhIGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3Qob3B0aW9ucy5hdHRyKSkge1xyXG4gICAgICAgICAgICBvcHRpb25zLmF0dHIgPSB7fTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChvcHRpb25zLmhhc093blByb3BlcnR5KCd3aWR0aCcpICYmXHJcbiAgICAgICAgICAgIGNvcmV1aVRhYmxlVXRpbHMuaXNOdW1lcmljKG9wdGlvbnMud2lkdGgpXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmF0dHIuaGFzT3duUHJvcGVydHkoJ3N0eWxlJykpIHtcclxuICAgICAgICAgICAgICAgIG9wdGlvbnMuYXR0clsnc3R5bGUnXSArPSAnO3dpZHRoOicgKyBvcHRpb25zLndpZHRoICsgJ3B4JztcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIG9wdGlvbnMuYXR0clsnc3R5bGUnXSA9ICd3aWR0aDonICsgb3B0aW9ucy53aWR0aCArICdweCc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChvcHRpb25zLmF0dHIuaGFzT3duUHJvcGVydHkoJ3R5cGUnKSkge1xyXG4gICAgICAgICAgICBkZWxldGUgb3B0aW9ucy5hdHRyLnR5cGU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAob3B0aW9ucy5hdHRyLmhhc093blByb3BlcnR5KCd2YWx1ZScpKSB7XHJcbiAgICAgICAgICAgIGRlbGV0ZSBvcHRpb25zLmF0dHIudmFsdWU7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgbGV0IGZpZWxkICAgICA9IHR5cGVvZiBvcHRpb25zLmZpZWxkID09PSAnc3RyaW5nJyA/IG9wdGlvbnMuZmllbGQgOiAnJztcclxuICAgICAgICBsZXQgc3RhcnRBdHRyID0gW107XHJcbiAgICAgICAgbGV0IGVuZEF0dHIgICA9IFtdO1xyXG4gICAgICAgIGxldCBhdHRyQnRuICAgPSBbXTtcclxuXHJcblxyXG4gICAgICAgICQuZWFjaChvcHRpb25zLmF0dHIsIGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xyXG4gICAgICAgICAgICBpZiAoWyduYW1lJywgJ3ZhbHVlJywgJ2NsYXNzJ10uaW5kZXhPZihuYW1lKSA+PSAwIHx8XHJcbiAgICAgICAgICAgICAgICBbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiB2YWx1ZSkgPCAwXHJcbiAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzdGFydEF0dHIucHVzaChuYW1lICsgJz1cIicgKyB2YWx1ZSArICdcIicpO1xyXG4gICAgICAgICAgICBlbmRBdHRyLnB1c2gobmFtZSArICc9XCInICsgdmFsdWUgKyAnXCInKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgaWYgKG9wdGlvbnMuYXR0ci5oYXNPd25Qcm9wZXJ0eSgnY2xhc3MnKSAmJlxyXG4gICAgICAgICAgICBbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiBvcHRpb25zLmF0dHIuY2xhc3MpID49IDBcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgc3RhcnRBdHRyLnB1c2goJ2NsYXNzPVwiJyArIG9wdGlvbnMuYXR0ci5jbGFzcyArICcgbnVtYmVyLXN0YXJ0XCInKTtcclxuICAgICAgICAgICAgZW5kQXR0ci5wdXNoKCdjbGFzcz1cIicgKyBvcHRpb25zLmF0dHIuY2xhc3MgKyAnIG51bWJlci1lbmRcIicpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHN0YXJ0QXR0ci5wdXNoKCdjbGFzcz1cIm51bWJlci1zdGFydFwiJyk7XHJcbiAgICAgICAgICAgIGVuZEF0dHIucHVzaCgnY2xhc3M9XCJudW1iZXItZW5kXCInKTtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICBpZiAoZmllbGQpIHtcclxuICAgICAgICAgICAgc3RhcnRBdHRyLnB1c2goJ25hbWU9XCInICsgZmllbGQgKyAnW3N0YXJ0XVwiJyk7XHJcbiAgICAgICAgICAgIGVuZEF0dHIucHVzaCgnbmFtZT1cIicgKyBmaWVsZCArICdbZW5kXVwiJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzdGFydEF0dHIucHVzaCgndmFsdWU9XCInICsgKHRoaXMuX3ZhbHVlID8gdGhpcy5fdmFsdWUuc3RhcnQgOiAnJykgKyAnXCInKTtcclxuICAgICAgICBlbmRBdHRyLnB1c2goJ3ZhbHVlPVwiJyArICh0aGlzLl92YWx1ZSA/IHRoaXMuX3ZhbHVlLmVuZCA6ICcnKSArICdcIicpO1xyXG5cclxuXHJcblxyXG4gICAgICAgIGlmICggISBjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KG9wdGlvbnMuYnRuKSkge1xyXG4gICAgICAgICAgICBvcHRpb25zLmJ0biA9IHt9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoICEgY29yZXVpVGFibGVVdGlscy5pc09iamVjdChvcHRpb25zLmJ0bi5hdHRyKSkge1xyXG4gICAgICAgICAgICBvcHRpb25zLmJ0bi5hdHRyID0ge307XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAob3B0aW9ucy5idG4uYXR0ci5oYXNPd25Qcm9wZXJ0eSgndHlwZScpKSB7XHJcbiAgICAgICAgICAgIGRlbGV0ZSBvcHRpb25zLmJ0bi5hdHRyLnR5cGU7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgJC5lYWNoKG9wdGlvbnMuYnRuLmF0dHIsIGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xyXG4gICAgICAgICAgICBhdHRyQnRuLnB1c2gobmFtZSArICc9XCInICsgdmFsdWUgKyAnXCInKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGVqcy5yZW5kZXIoY29yZXVpVGFibGVUcGxbJ2ZpbHRlcnMvbnVtYmVyLmh0bWwnXSwge1xyXG4gICAgICAgICAgICBhdHRyU3RhcnQ6IHN0YXJ0QXR0ci5sZW5ndGggPiAwID8gKCcgJyArIHN0YXJ0QXR0ci5qb2luKCcgJykpIDogJycsXHJcbiAgICAgICAgICAgIGF0dHJFbmQ6IGVuZEF0dHIubGVuZ3RoID4gMCA/ICgnICcgKyBlbmRBdHRyLmpvaW4oJyAnKSkgOiAnJyxcclxuICAgICAgICAgICAgbGFiZWw6IGxhYmVsLFxyXG4gICAgICAgICAgICBidG5BdHRyOiBhdHRyQnRuLmxlbmd0aCA+IDAgPyAoJyAnICsgYXR0ckJ0bi5qb2luKCcgJykpIDogJycsXHJcbiAgICAgICAgICAgIGJ0bkNvbnRlbnQ6IG9wdGlvbnMuYnRuLmNvbnRlbnQgPyBvcHRpb25zLmJ0bi5jb250ZW50IDogJycsXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn0iLCJcclxuaW1wb3J0ICcuLi8uLi8uLi9ub2RlX21vZHVsZXMvZWpzL2Vqcy5taW4nO1xyXG5pbXBvcnQgY29yZXVpVGFibGUgICAgICBmcm9tIFwiLi4vY29yZXVpLnRhYmxlXCI7XHJcbmltcG9ydCBjb3JldWlUYWJsZVRwbCAgIGZyb20gXCIuLi9jb3JldWkudGFibGUudGVtcGxhdGVzXCI7XHJcbmltcG9ydCBjb3JldWlUYWJsZVV0aWxzIGZyb20gXCIuLi9jb3JldWkudGFibGUudXRpbHNcIjtcclxuaW1wb3J0IGNvcmV1aVRhYmxlRWxlbWVudHMgZnJvbSBcIi4uL2NvcmV1aS50YWJsZS5lbGVtZW50c1wiO1xyXG5cclxuY29yZXVpVGFibGUuZmlsdGVycy5kYXRlID0ge1xyXG5cclxuICAgIF9pZDogbnVsbCxcclxuICAgIF90YWJsZTogbnVsbCxcclxuICAgIF92YWx1ZTogbnVsbCxcclxuICAgIF9yZW5kZXI6IGZhbHNlLFxyXG4gICAgX29wdGlvbnM6IHtcclxuICAgICAgICBpZDogbnVsbCxcclxuICAgICAgICB0eXBlOiAnZGF0ZScsXHJcbiAgICAgICAgZmllbGQ6IG51bGwsXHJcbiAgICAgICAgbGFiZWw6IG51bGwsXHJcbiAgICAgICAgdmFsdWU6IG51bGwsXHJcbiAgICAgICAgd2lkdGg6IDIwMCxcclxuICAgICAgICBhdHRyOiB7XHJcbiAgICAgICAgICAgIGNsYXNzOiBcImZvcm0tY29udHJvbFwiLFxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y9cclxuICAgICAqIEBwYXJhbSB7Q29yZVVJLnRhYmxlLmluc3RhbmNlfSB0YWJsZVxyXG4gICAgICogQHBhcmFtIHtvYmplY3R9ICAgICAgICAgICAgICAgIG9wdGlvbnNcclxuICAgICAqL1xyXG4gICAgaW5pdDogZnVuY3Rpb24gKHRhYmxlLCBvcHRpb25zKSB7XHJcblxyXG4gICAgICAgIHRoaXMuX29wdGlvbnMgPSAkLmV4dGVuZCh0cnVlLCB7fSwgdGhpcy5fb3B0aW9ucywgb3B0aW9ucyk7XHJcbiAgICAgICAgdGhpcy5fdGFibGUgICA9IHRhYmxlO1xyXG4gICAgICAgIHRoaXMuX2lkICAgICAgPSB0aGlzLl9vcHRpb25zLmhhc093blByb3BlcnR5KCdpZCcpICYmIHR5cGVvZiB0aGlzLl9vcHRpb25zLmlkID09PSAnc3RyaW5nJyAmJiB0aGlzLl9vcHRpb25zLmlkXHJcbiAgICAgICAgICAgID8gdGhpcy5fb3B0aW9ucy5pZFxyXG4gICAgICAgICAgICA6IGNvcmV1aVRhYmxlVXRpbHMuaGFzaENvZGUoKTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMudmFsdWUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5zZXRWYWx1ZSh0aGlzLl9vcHRpb25zLnZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSDQv9Cw0YDQsNC80LXRgtGA0L7QslxyXG4gICAgICogQHJldHVybnMge29iamVjdH1cclxuICAgICAqL1xyXG4gICAgZ2V0T3B0aW9uczogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiAkLmV4dGVuZCh0cnVlLCB7fSwgdGhpcy5fb3B0aW9ucyk7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSBpZFxyXG4gICAgICogQHJldHVybnMge3N0cmluZ31cclxuICAgICAqL1xyXG4gICAgZ2V0SWQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5faWQ7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCj0YHRgtCw0L3QvtCy0LrQsCDQt9C90LDRh9C10L3QuNGPXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcclxuICAgICAqL1xyXG4gICAgc2V0VmFsdWU6IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG5cclxuICAgICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJyAmJiB2YWx1ZSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodmFsdWUgJiZcclxuICAgICAgICAgICAgKFxyXG4gICAgICAgICAgICAgICAgdmFsdWUubWF0Y2goL15cXGR7NH1cXC1cXGR7Mn1cXC1cXGR7Mn0kLykgPT09IG51bGwgfHxcclxuICAgICAgICAgICAgICAgIGlzTmFOKG5ldyBEYXRlKHZhbHVlKSlcclxuICAgICAgICAgICAgKVxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgdGhpcy5fdmFsdWUgPSB2YWx1ZTtcclxuXHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9yZW5kZXIpIHtcclxuICAgICAgICAgICAgbGV0IGNvbnRyb2wgPSBjb3JldWlUYWJsZUVsZW1lbnRzLmdldENvbnRyb2wodGhpcy5fdGFibGUuZ2V0SWQoKSwgdGhpcy5faWQpO1xyXG5cclxuICAgICAgICAgICAgaWYgKGNvbnRyb2xbMF0pIHtcclxuICAgICAgICAgICAgICAgICQoJ2lucHV0JywgY29udHJvbCkudmFsKFxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3ZhbHVlID09PSBudWxsID8gJycgOiB0aGlzLl92YWx1ZVxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC30L3QsNGH0LXQvdC40Y9cclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIGdldFZhbHVlOiBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgIGxldCBjb250cm9sID0gY29yZXVpVGFibGVFbGVtZW50cy5nZXRDb250cm9sKHRoaXMuX3RhYmxlLmdldElkKCksIHRoaXMuX2lkKTtcclxuICAgICAgICBsZXQgaW5wdXQgICA9ICQoJ2lucHV0JywgY29udHJvbCk7XHJcblxyXG4gICAgICAgIGlmIChpbnB1dFswXSkge1xyXG4gICAgICAgICAgICBsZXQgdmFsdWUgPSBpbnB1dC52YWwoKTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnICYmIHZhbHVlICE9PSAnJykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH0sXHJcblxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPINGB0L7QsdGL0YLQuNC5XHJcbiAgICAgKiBAcmV0dXJucyB7b2JqZWN0fVxyXG4gICAgICovXHJcbiAgICBpbml0RXZlbnRzOiBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgIGxldCBjb250cm9sID0gY29yZXVpVGFibGVFbGVtZW50cy5nZXRDb250cm9sKHRoaXMuX3RhYmxlLmdldElkKCksIHRoaXMuX2lkKTtcclxuICAgICAgICBsZXQgdGhhdCAgICA9IHRoaXM7XHJcblxyXG4gICAgICAgICQoJ2lucHV0JywgY29udHJvbCkuY2hhbmdlKGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgdGhhdC5fdGFibGUuc2VhcmNoUmVjb3JkcygpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQpNC+0YDQvNC40YDQvtCy0LDQvdC40LUg0LrQvtC90YLQtdC90YLQsFxyXG4gICAgICogQHJldHVybnMge3N0cmluZ31cclxuICAgICAqL1xyXG4gICAgcmVuZGVyOiBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgdGhpcy5fcmVuZGVyID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgbGV0IG9wdGlvbnMgPSB0aGlzLmdldE9wdGlvbnMoKTtcclxuICAgICAgICBsZXQgbGFiZWwgICA9IHR5cGVvZiBvcHRpb25zLmxhYmVsID09PSAnc3RyaW5nJyB8fCB0eXBlb2Ygb3B0aW9ucy5sYWJlbCA9PT0gJ251bWJlcidcclxuICAgICAgICAgICAgPyBvcHRpb25zLmxhYmVsXHJcbiAgICAgICAgICAgIDogJyc7XHJcblxyXG4gICAgICAgIGlmICggISBjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KG9wdGlvbnMuYXR0cikpIHtcclxuICAgICAgICAgICAgb3B0aW9ucy5hdHRyID0ge307XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAob3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnd2lkdGgnKSAmJlxyXG4gICAgICAgICAgICBjb3JldWlUYWJsZVV0aWxzLmlzTnVtZXJpYyhvcHRpb25zLndpZHRoKVxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5hdHRyLmhhc093blByb3BlcnR5KCdzdHlsZScpKSB7XHJcbiAgICAgICAgICAgICAgICBvcHRpb25zLmF0dHJbJ3N0eWxlJ10gKz0gJzt3aWR0aDonICsgb3B0aW9ucy53aWR0aCArICdweCc7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBvcHRpb25zLmF0dHJbJ3N0eWxlJ10gPSAnd2lkdGg6JyArIG9wdGlvbnMud2lkdGggKyAncHgnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBvcHRpb25zLmF0dHJbJ25hbWUnXSAgPSB0eXBlb2Ygb3B0aW9ucy5maWVsZCA9PT0gJ3N0cmluZycgPyBvcHRpb25zLmZpZWxkIDogJyc7XHJcbiAgICAgICAgb3B0aW9ucy5hdHRyWyd2YWx1ZSddID0gdHlwZW9mIHRoaXMuX3ZhbHVlID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgdGhpcy5fdmFsdWUgPT09ICdudW1iZXInXHJcbiAgICAgICAgICAgID8gdGhpcy5fdmFsdWVcclxuICAgICAgICAgICAgOiAnJztcclxuXHJcbiAgICAgICAgaWYgKG9wdGlvbnMuYXR0ci5oYXNPd25Qcm9wZXJ0eSgndHlwZScpKSB7XHJcbiAgICAgICAgICAgIGRlbGV0ZSBvcHRpb25zLmF0dHIudHlwZTtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICBsZXQgYXR0ciA9IFtdO1xyXG5cclxuICAgICAgICAkLmVhY2gob3B0aW9ucy5hdHRyLCBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcclxuICAgICAgICAgICAgYXR0ci5wdXNoKG5hbWUgKyAnPVwiJyArIHZhbHVlICsgJ1wiJyk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiBlanMucmVuZGVyKGNvcmV1aVRhYmxlVHBsWydmaWx0ZXJzL2RhdGUuaHRtbCddLCB7XHJcbiAgICAgICAgICAgIGF0dHI6IGF0dHIubGVuZ3RoID4gMCA/ICgnICcgKyBhdHRyLmpvaW4oJyAnKSkgOiAnJyxcclxuICAgICAgICAgICAgbGFiZWw6IGxhYmVsXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn0iLCJcclxuaW1wb3J0ICcuLi8uLi8uLi9ub2RlX21vZHVsZXMvZWpzL2Vqcy5taW4nO1xyXG5pbXBvcnQgY29yZXVpVGFibGUgICAgICBmcm9tIFwiLi4vY29yZXVpLnRhYmxlXCI7XHJcbmltcG9ydCBjb3JldWlUYWJsZVRwbCAgIGZyb20gXCIuLi9jb3JldWkudGFibGUudGVtcGxhdGVzXCI7XHJcbmltcG9ydCBjb3JldWlUYWJsZVV0aWxzIGZyb20gXCIuLi9jb3JldWkudGFibGUudXRpbHNcIjtcclxuaW1wb3J0IGNvcmV1aVRhYmxlRWxlbWVudHMgZnJvbSBcIi4uL2NvcmV1aS50YWJsZS5lbGVtZW50c1wiO1xyXG5cclxuY29yZXVpVGFibGUuZmlsdGVycy5kYXRldGltZSA9IHtcclxuXHJcbiAgICBfaWQ6IG51bGwsXHJcbiAgICBfdGFibGU6IG51bGwsXHJcbiAgICBfdmFsdWU6IG51bGwsXHJcbiAgICBfcmVuZGVyOiBmYWxzZSxcclxuICAgIF9vcHRpb25zOiB7XHJcbiAgICAgICAgaWQ6IG51bGwsXHJcbiAgICAgICAgdHlwZTogJ2RhdGV0aW1lJyxcclxuICAgICAgICBmaWVsZDogbnVsbCxcclxuICAgICAgICBsYWJlbDogbnVsbCxcclxuICAgICAgICB2YWx1ZTogbnVsbCxcclxuICAgICAgICB3aWR0aDogMjAwLFxyXG4gICAgICAgIGF0dHI6IHtcclxuICAgICAgICAgICAgY2xhc3M6IFwiZm9ybS1jb250cm9sXCIsXHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQmNC90LjRhtC40LDQu9C40LfQsNGG0LjRj1xyXG4gICAgICogQHBhcmFtIHtDb3JlVUkudGFibGUuaW5zdGFuY2V9IHRhYmxlXHJcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gICAgICAgICAgICAgICAgb3B0aW9uc1xyXG4gICAgICovXHJcbiAgICBpbml0OiBmdW5jdGlvbiAodGFibGUsIG9wdGlvbnMpIHtcclxuXHJcbiAgICAgICAgdGhpcy5fb3B0aW9ucyA9ICQuZXh0ZW5kKHRydWUsIHt9LCB0aGlzLl9vcHRpb25zLCBvcHRpb25zKTtcclxuICAgICAgICB0aGlzLl90YWJsZSAgID0gdGFibGU7XHJcbiAgICAgICAgdGhpcy5faWQgICAgICA9IHRoaXMuX29wdGlvbnMuaGFzT3duUHJvcGVydHkoJ2lkJykgJiYgdHlwZW9mIHRoaXMuX29wdGlvbnMuaWQgPT09ICdzdHJpbmcnICYmIHRoaXMuX29wdGlvbnMuaWRcclxuICAgICAgICAgICAgPyB0aGlzLl9vcHRpb25zLmlkXHJcbiAgICAgICAgICAgIDogY29yZXVpVGFibGVVdGlscy5oYXNoQ29kZSgpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy52YWx1ZSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLnNldFZhbHVlKHRoaXMuX29wdGlvbnMudmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC/0LDRgNCw0LzQtdGC0YDQvtCyXHJcbiAgICAgKiBAcmV0dXJucyB7b2JqZWN0fVxyXG4gICAgICovXHJcbiAgICBnZXRPcHRpb25zOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuICQuZXh0ZW5kKHRydWUsIHt9LCB0aGlzLl9vcHRpb25zKTtcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1IGlkXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxyXG4gICAgICovXHJcbiAgICBnZXRJZDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9pZDtcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KPRgdGC0LDQvdC+0LLQutCwINC30L3QsNGH0LXQvdC40Y9cclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfG51bGx9IHZhbHVlXHJcbiAgICAgKi9cclxuICAgIHNldFZhbHVlOiBmdW5jdGlvbiAodmFsdWUpIHtcclxuXHJcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycgJiYgdmFsdWUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHZhbHVlICYmXHJcbiAgICAgICAgICAgIChcclxuICAgICAgICAgICAgICAgIHZhbHVlLm1hdGNoKC9eXFxkezR9XFwtXFxkezJ9XFwtXFxkezJ9IFxcZHsyfTpcXGR7Mn06XFxkezJ9JC8pID09PSBudWxsIHx8XHJcbiAgICAgICAgICAgICAgICBpc05hTihuZXcgRGF0ZSh2YWx1ZSkpXHJcbiAgICAgICAgICAgIClcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fdmFsdWUgPSB2YWx1ZTtcclxuXHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9yZW5kZXIpIHtcclxuICAgICAgICAgICAgbGV0IGNvbnRyb2wgPSBjb3JldWlUYWJsZUVsZW1lbnRzLmdldENvbnRyb2wodGhpcy5fdGFibGUuZ2V0SWQoKSwgdGhpcy5faWQpO1xyXG5cclxuICAgICAgICAgICAgaWYgKGNvbnRyb2xbMF0pIHtcclxuICAgICAgICAgICAgICAgICQoJ2lucHV0JywgY29udHJvbCkudmFsKFxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3ZhbHVlID09PSBudWxsID8gJycgOiB0aGlzLl92YWx1ZVxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC30L3QsNGH0LXQvdC40Y9cclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd8bnVsbH1cclxuICAgICAqL1xyXG4gICAgZ2V0VmFsdWU6IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgbGV0IGNvbnRyb2wgPSBjb3JldWlUYWJsZUVsZW1lbnRzLmdldENvbnRyb2wodGhpcy5fdGFibGUuZ2V0SWQoKSwgdGhpcy5faWQpO1xyXG4gICAgICAgIGxldCBpbnB1dCAgID0gJCgnaW5wdXQnLCBjb250cm9sKTtcclxuXHJcbiAgICAgICAgaWYgKGlucHV0WzBdKSB7XHJcbiAgICAgICAgICAgIGxldCB2YWx1ZSA9IGlucHV0LnZhbCgpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYgdmFsdWUgIT09ICcnKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfSxcclxuXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y8g0YHQvtCx0YvRgtC40LlcclxuICAgICAqIEByZXR1cm5zIHtvYmplY3R9XHJcbiAgICAgKi9cclxuICAgIGluaXRFdmVudHM6IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgbGV0IGNvbnRyb2wgPSBjb3JldWlUYWJsZUVsZW1lbnRzLmdldENvbnRyb2wodGhpcy5fdGFibGUuZ2V0SWQoKSwgdGhpcy5faWQpO1xyXG4gICAgICAgIGxldCB0aGF0ICAgID0gdGhpcztcclxuXHJcbiAgICAgICAgJCgnaW5wdXQnLCBjb250cm9sKS5jaGFuZ2UoZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICB0aGF0Ll90YWJsZS5zZWFyY2hSZWNvcmRzKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCk0L7RgNC80LjRgNC+0LLQsNC90LjQtSDQutC+0L3RgtC10L3RgtCwXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxyXG4gICAgICovXHJcbiAgICByZW5kZXI6IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICB0aGlzLl9yZW5kZXIgPSB0cnVlO1xyXG5cclxuICAgICAgICBsZXQgb3B0aW9ucyA9IHRoaXMuZ2V0T3B0aW9ucygpO1xyXG4gICAgICAgIGxldCBsYWJlbCAgID0gdHlwZW9mIG9wdGlvbnMubGFiZWwgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBvcHRpb25zLmxhYmVsID09PSAnbnVtYmVyJ1xyXG4gICAgICAgICAgICA/IG9wdGlvbnMubGFiZWxcclxuICAgICAgICAgICAgOiAnJztcclxuXHJcbiAgICAgICAgaWYgKCAhIGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3Qob3B0aW9ucy5hdHRyKSkge1xyXG4gICAgICAgICAgICBvcHRpb25zLmF0dHIgPSB7fTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChvcHRpb25zLmhhc093blByb3BlcnR5KCd3aWR0aCcpICYmXHJcbiAgICAgICAgICAgIGNvcmV1aVRhYmxlVXRpbHMuaXNOdW1lcmljKG9wdGlvbnMud2lkdGgpXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmF0dHIuaGFzT3duUHJvcGVydHkoJ3N0eWxlJykpIHtcclxuICAgICAgICAgICAgICAgIG9wdGlvbnMuYXR0clsnc3R5bGUnXSArPSAnO3dpZHRoOicgKyBvcHRpb25zLndpZHRoICsgJ3B4JztcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIG9wdGlvbnMuYXR0clsnc3R5bGUnXSA9ICd3aWR0aDonICsgb3B0aW9ucy53aWR0aCArICdweCc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIG9wdGlvbnMuYXR0clsnbmFtZSddICA9IHR5cGVvZiBvcHRpb25zLmZpZWxkID09PSAnc3RyaW5nJyA/IG9wdGlvbnMuZmllbGQgOiAnJztcclxuICAgICAgICBvcHRpb25zLmF0dHJbJ3ZhbHVlJ10gPSB0eXBlb2YgdGhpcy5fdmFsdWUgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiB0aGlzLl92YWx1ZSA9PT0gJ251bWJlcidcclxuICAgICAgICAgICAgPyB0aGlzLl92YWx1ZVxyXG4gICAgICAgICAgICA6ICcnO1xyXG5cclxuICAgICAgICBpZiAob3B0aW9ucy5hdHRyLmhhc093blByb3BlcnR5KCd0eXBlJykpIHtcclxuICAgICAgICAgICAgZGVsZXRlIG9wdGlvbnMuYXR0ci50eXBlO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIGxldCBhdHRyID0gW107XHJcblxyXG4gICAgICAgICQuZWFjaChvcHRpb25zLmF0dHIsIGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xyXG4gICAgICAgICAgICBhdHRyLnB1c2gobmFtZSArICc9XCInICsgdmFsdWUgKyAnXCInKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGVqcy5yZW5kZXIoY29yZXVpVGFibGVUcGxbJ2ZpbHRlcnMvZGF0ZXRpbWUuaHRtbCddLCB7XHJcbiAgICAgICAgICAgIGF0dHI6IGF0dHIubGVuZ3RoID4gMCA/ICgnICcgKyBhdHRyLmpvaW4oJyAnKSkgOiAnJyxcclxuICAgICAgICAgICAgbGFiZWw6IGxhYmVsXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn0iLCJcclxuaW1wb3J0ICcuLi8uLi8uLi9ub2RlX21vZHVsZXMvZWpzL2Vqcy5taW4nO1xyXG5pbXBvcnQgY29yZXVpVGFibGUgICAgICBmcm9tIFwiLi4vY29yZXVpLnRhYmxlXCI7XHJcbmltcG9ydCBjb3JldWlUYWJsZVRwbCAgIGZyb20gXCIuLi9jb3JldWkudGFibGUudGVtcGxhdGVzXCI7XHJcbmltcG9ydCBjb3JldWlUYWJsZVV0aWxzIGZyb20gXCIuLi9jb3JldWkudGFibGUudXRpbHNcIjtcclxuaW1wb3J0IGNvcmV1aVRhYmxlRWxlbWVudHMgZnJvbSBcIi4uL2NvcmV1aS50YWJsZS5lbGVtZW50c1wiO1xyXG5cclxuY29yZXVpVGFibGUuZmlsdGVycy5kYXRlX21vbnRoID0ge1xyXG5cclxuICAgIF9pZDogbnVsbCxcclxuICAgIF90YWJsZTogbnVsbCxcclxuICAgIF92YWx1ZTogbnVsbCxcclxuICAgIF9yZW5kZXI6IGZhbHNlLFxyXG4gICAgX29wdGlvbnM6IHtcclxuICAgICAgICBpZDogbnVsbCxcclxuICAgICAgICB0eXBlOiAnZGF0ZV9tb250aCcsXHJcbiAgICAgICAgZmllbGQ6IG51bGwsXHJcbiAgICAgICAgbGFiZWw6IG51bGwsXHJcbiAgICAgICAgdmFsdWU6IG51bGwsXHJcbiAgICAgICAgd2lkdGg6IDIwMCxcclxuICAgICAgICBhdHRyOiB7XHJcbiAgICAgICAgICAgIGNsYXNzOiBcImZvcm0tY29udHJvbFwiLFxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y9cclxuICAgICAqIEBwYXJhbSB7Q29yZVVJLnRhYmxlLmluc3RhbmNlfSB0YWJsZVxyXG4gICAgICogQHBhcmFtIHtvYmplY3R9ICAgICAgICAgICAgICAgIG9wdGlvbnNcclxuICAgICAqL1xyXG4gICAgaW5pdDogZnVuY3Rpb24gKHRhYmxlLCBvcHRpb25zKSB7XHJcblxyXG4gICAgICAgIHRoaXMuX29wdGlvbnMgPSAkLmV4dGVuZCh0cnVlLCB7fSwgdGhpcy5fb3B0aW9ucywgb3B0aW9ucyk7XHJcbiAgICAgICAgdGhpcy5fdGFibGUgICA9IHRhYmxlO1xyXG4gICAgICAgIHRoaXMuX2lkICAgICAgPSB0aGlzLl9vcHRpb25zLmhhc093blByb3BlcnR5KCdpZCcpICYmIHR5cGVvZiB0aGlzLl9vcHRpb25zLmlkID09PSAnc3RyaW5nJyAmJiB0aGlzLl9vcHRpb25zLmlkXHJcbiAgICAgICAgICAgID8gdGhpcy5fb3B0aW9ucy5pZFxyXG4gICAgICAgICAgICA6IGNvcmV1aVRhYmxlVXRpbHMuaGFzaENvZGUoKTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMudmFsdWUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5zZXRWYWx1ZSh0aGlzLl9vcHRpb25zLnZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSDQv9Cw0YDQsNC80LXRgtGA0L7QslxyXG4gICAgICogQHJldHVybnMge29iamVjdH1cclxuICAgICAqL1xyXG4gICAgZ2V0T3B0aW9uczogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiAkLmV4dGVuZCh0cnVlLCB7fSwgdGhpcy5fb3B0aW9ucyk7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSBpZFxyXG4gICAgICogQHJldHVybnMge3N0cmluZ31cclxuICAgICAqL1xyXG4gICAgZ2V0SWQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5faWQ7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCj0YHRgtCw0L3QvtCy0LrQsCDQt9C90LDRh9C10L3QuNGPXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ3xudWxsfSB2YWx1ZVxyXG4gICAgICovXHJcbiAgICBzZXRWYWx1ZTogZnVuY3Rpb24gKHZhbHVlKSB7XHJcblxyXG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnICYmIHZhbHVlICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh2YWx1ZSAmJlxyXG4gICAgICAgICAgICAoXHJcbiAgICAgICAgICAgICAgICB2YWx1ZS5tYXRjaCgvXlxcZHs0fVxcLVxcZHsyfSQvKSA9PT0gbnVsbCB8fFxyXG4gICAgICAgICAgICAgICAgaXNOYU4obmV3IERhdGUodmFsdWUpKVxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX3ZhbHVlID0gdmFsdWU7XHJcblxyXG5cclxuICAgICAgICBpZiAodGhpcy5fcmVuZGVyKSB7XHJcbiAgICAgICAgICAgIGxldCBjb250cm9sID0gY29yZXVpVGFibGVFbGVtZW50cy5nZXRDb250cm9sKHRoaXMuX3RhYmxlLmdldElkKCksIHRoaXMuX2lkKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChjb250cm9sWzBdKSB7XHJcbiAgICAgICAgICAgICAgICAkKCdpbnB1dCcsIGNvbnRyb2wpLnZhbChcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl92YWx1ZSA9PT0gbnVsbCA/ICcnIDogdGhpcy5fdmFsdWVcclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSDQt9C90LDRh9C10L3QuNGPXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxyXG4gICAgICovXHJcbiAgICBnZXRWYWx1ZTogZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICBsZXQgY29udHJvbCA9IGNvcmV1aVRhYmxlRWxlbWVudHMuZ2V0Q29udHJvbCh0aGlzLl90YWJsZS5nZXRJZCgpLCB0aGlzLl9pZCk7XHJcbiAgICAgICAgbGV0IGlucHV0ICAgPSAkKCdpbnB1dCcsIGNvbnRyb2wpO1xyXG5cclxuICAgICAgICBpZiAoaW5wdXRbMF0pIHtcclxuICAgICAgICAgICAgbGV0IHZhbHVlID0gaW5wdXQudmFsKCk7XHJcblxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJiB2YWx1ZSAhPT0gJycpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9LFxyXG5cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQmNC90LjRhtC40LDQu9C40LfQsNGG0LjRjyDRgdC+0LHRi9GC0LjQuVxyXG4gICAgICogQHJldHVybnMge29iamVjdH1cclxuICAgICAqL1xyXG4gICAgaW5pdEV2ZW50czogZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICBsZXQgY29udHJvbCA9IGNvcmV1aVRhYmxlRWxlbWVudHMuZ2V0Q29udHJvbCh0aGlzLl90YWJsZS5nZXRJZCgpLCB0aGlzLl9pZCk7XHJcbiAgICAgICAgbGV0IHRoYXQgICAgPSB0aGlzO1xyXG5cclxuICAgICAgICAkKCdpbnB1dCcsIGNvbnRyb2wpLmNoYW5nZShmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgIHRoYXQuX3RhYmxlLnNlYXJjaFJlY29yZHMoKTtcclxuICAgICAgICB9KTtcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KTQvtGA0LzQuNGA0L7QstCw0L3QuNC1INC60L7QvdGC0LXQvdGC0LBcclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIHJlbmRlcjogZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgIHRoaXMuX3JlbmRlciA9IHRydWU7XHJcblxyXG4gICAgICAgIGxldCBvcHRpb25zID0gdGhpcy5nZXRPcHRpb25zKCk7XHJcbiAgICAgICAgbGV0IGxhYmVsICAgPSB0eXBlb2Ygb3B0aW9ucy5sYWJlbCA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIG9wdGlvbnMubGFiZWwgPT09ICdudW1iZXInXHJcbiAgICAgICAgICAgID8gb3B0aW9ucy5sYWJlbFxyXG4gICAgICAgICAgICA6ICcnO1xyXG5cclxuICAgICAgICBpZiAoICEgY29yZXVpVGFibGVVdGlscy5pc09iamVjdChvcHRpb25zLmF0dHIpKSB7XHJcbiAgICAgICAgICAgIG9wdGlvbnMuYXR0ciA9IHt9O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKG9wdGlvbnMuaGFzT3duUHJvcGVydHkoJ3dpZHRoJykgJiZcclxuICAgICAgICAgICAgY29yZXVpVGFibGVVdGlscy5pc051bWVyaWMob3B0aW9ucy53aWR0aClcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuYXR0ci5oYXNPd25Qcm9wZXJ0eSgnc3R5bGUnKSkge1xyXG4gICAgICAgICAgICAgICAgb3B0aW9ucy5hdHRyWydzdHlsZSddICs9ICc7d2lkdGg6JyArIG9wdGlvbnMud2lkdGggKyAncHgnO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgb3B0aW9ucy5hdHRyWydzdHlsZSddID0gJ3dpZHRoOicgKyBvcHRpb25zLndpZHRoICsgJ3B4JztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgb3B0aW9ucy5hdHRyWyduYW1lJ10gID0gdHlwZW9mIG9wdGlvbnMuZmllbGQgPT09ICdzdHJpbmcnID8gb3B0aW9ucy5maWVsZCA6ICcnO1xyXG4gICAgICAgIG9wdGlvbnMuYXR0clsndmFsdWUnXSA9IHR5cGVvZiB0aGlzLl92YWx1ZSA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIHRoaXMuX3ZhbHVlID09PSAnbnVtYmVyJ1xyXG4gICAgICAgICAgICA/IHRoaXMuX3ZhbHVlXHJcbiAgICAgICAgICAgIDogJyc7XHJcblxyXG4gICAgICAgIGlmIChvcHRpb25zLmF0dHIuaGFzT3duUHJvcGVydHkoJ3R5cGUnKSkge1xyXG4gICAgICAgICAgICBkZWxldGUgb3B0aW9ucy5hdHRyLnR5cGU7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgbGV0IGF0dHIgPSBbXTtcclxuXHJcbiAgICAgICAgJC5lYWNoKG9wdGlvbnMuYXR0ciwgZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XHJcbiAgICAgICAgICAgIGF0dHIucHVzaChuYW1lICsgJz1cIicgKyB2YWx1ZSArICdcIicpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gZWpzLnJlbmRlcihjb3JldWlUYWJsZVRwbFsnZmlsdGVycy9kYXRlX21vbnRoLmh0bWwnXSwge1xyXG4gICAgICAgICAgICBhdHRyOiBhdHRyLmxlbmd0aCA+IDAgPyAoJyAnICsgYXR0ci5qb2luKCcgJykpIDogJycsXHJcbiAgICAgICAgICAgIGxhYmVsOiBsYWJlbFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59IiwiXHJcbmltcG9ydCBjb3JldWlUYWJsZSAgICAgIGZyb20gXCIuLi9jb3JldWkudGFibGVcIjtcclxuaW1wb3J0IGNvcmV1aVRhYmxlVHBsICAgZnJvbSBcIi4uL2NvcmV1aS50YWJsZS50ZW1wbGF0ZXNcIjtcclxuaW1wb3J0IGNvcmV1aVRhYmxlVXRpbHMgZnJvbSBcIi4uL2NvcmV1aS50YWJsZS51dGlsc1wiO1xyXG5pbXBvcnQgY29yZXVpVGFibGVFbGVtZW50cyBmcm9tIFwiLi4vY29yZXVpLnRhYmxlLmVsZW1lbnRzXCI7XHJcblxyXG5jb3JldWlUYWJsZS5maWx0ZXJzLmRhdGVfcmFuZ2UgPSB7XHJcblxyXG4gICAgX2lkOiBudWxsLFxyXG4gICAgX3RhYmxlOiBudWxsLFxyXG4gICAgX3ZhbHVlOiBudWxsLFxyXG4gICAgX3JlbmRlcjogZmFsc2UsXHJcbiAgICBfb3B0aW9uczoge1xyXG4gICAgICAgIGlkOiBudWxsLFxyXG4gICAgICAgIHR5cGU6ICdkYXRlX3JhbmdlJyxcclxuICAgICAgICBmaWVsZDogbnVsbCxcclxuICAgICAgICBsYWJlbDogbnVsbCxcclxuICAgICAgICB2YWx1ZTogbnVsbCxcclxuICAgICAgICB3aWR0aDogMjAwLFxyXG4gICAgICAgIGF0dHI6IHtcclxuICAgICAgICAgICAgY2xhc3M6IFwiZm9ybS1jb250cm9sIGQtaW5saW5lLWJsb2NrXCIsXHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQmNC90LjRhtC40LDQu9C40LfQsNGG0LjRj1xyXG4gICAgICogQHBhcmFtIHtDb3JlVUkudGFibGUuaW5zdGFuY2V9IHRhYmxlXHJcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gICAgICAgICAgICAgICAgb3B0aW9uc1xyXG4gICAgICovXHJcbiAgICBpbml0OiBmdW5jdGlvbiAodGFibGUsIG9wdGlvbnMpIHtcclxuXHJcbiAgICAgICAgdGhpcy5fb3B0aW9ucyA9ICQuZXh0ZW5kKHRydWUsIHt9LCB0aGlzLl9vcHRpb25zLCBvcHRpb25zKTtcclxuICAgICAgICB0aGlzLl90YWJsZSAgID0gdGFibGU7XHJcbiAgICAgICAgdGhpcy5faWQgICAgICA9IHRoaXMuX29wdGlvbnMuaGFzT3duUHJvcGVydHkoJ2lkJykgJiYgdHlwZW9mIHRoaXMuX29wdGlvbnMuaWQgPT09ICdzdHJpbmcnICYmIHRoaXMuX29wdGlvbnMuaWRcclxuICAgICAgICAgICAgPyB0aGlzLl9vcHRpb25zLmlkXHJcbiAgICAgICAgICAgIDogY29yZXVpVGFibGVVdGlscy5oYXNoQ29kZSgpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy52YWx1ZSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLnNldFZhbHVlKHRoaXMuX29wdGlvbnMudmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC/0LDRgNCw0LzQtdGC0YDQvtCyXHJcbiAgICAgKiBAcmV0dXJucyB7b2JqZWN0fVxyXG4gICAgICovXHJcbiAgICBnZXRPcHRpb25zOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuICQuZXh0ZW5kKHRydWUsIHt9LCB0aGlzLl9vcHRpb25zKTtcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1IGlkXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxyXG4gICAgICovXHJcbiAgICBnZXRJZDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9pZDtcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KPRgdGC0LDQvdC+0LLQutCwINC30L3QsNGH0LXQvdC40Y9cclxuICAgICAqIEBwYXJhbSB7b2JqZWN0fG51bGx9IHZhbHVlXHJcbiAgICAgKi9cclxuICAgIHNldFZhbHVlOiBmdW5jdGlvbiAodmFsdWUpIHtcclxuXHJcbiAgICAgICAgaWYgKHZhbHVlKSB7XHJcbiAgICAgICAgICAgIGlmICggISBjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KHZhbHVlKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBsZXQgZGF0ZVN0YXJ0ID0gbnVsbDtcclxuICAgICAgICAgICAgbGV0IGRhdGVFbmQgICA9IG51bGw7XHJcblxyXG4gICAgICAgICAgICBpZiAodmFsdWUuaGFzT3duUHJvcGVydHkoJ3N0YXJ0JykgJiZcclxuICAgICAgICAgICAgICAgIHR5cGVvZiB2YWx1ZS5zdGFydCA9PT0gJ3N0cmluZycgJiZcclxuICAgICAgICAgICAgICAgIHZhbHVlLnN0YXJ0Lm1hdGNoKC9eXFxkezR9XFwtXFxkezJ9XFwtXFxkezJ9JC8pID09PSBudWxsICYmXHJcbiAgICAgICAgICAgICAgICBpc05hTihuZXcgRGF0ZSh2YWx1ZS5zdGFydCkpXHJcbiAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgZGF0ZVN0YXJ0ID0gdmFsdWUuc3RhcnQ7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh2YWx1ZS5oYXNPd25Qcm9wZXJ0eSgnZW5kJykgJiZcclxuICAgICAgICAgICAgICAgIHR5cGVvZiB2YWx1ZS5lbmQgPT09ICdzdHJpbmcnICYmXHJcbiAgICAgICAgICAgICAgICB2YWx1ZS5lbmQubWF0Y2goL15cXGR7NH1cXC1cXGR7Mn1cXC1cXGR7Mn0kLykgPT09IG51bGwgJiZcclxuICAgICAgICAgICAgICAgIGlzTmFOKG5ldyBEYXRlKHZhbHVlLmVuZCkpXHJcbiAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgZGF0ZUVuZCA9IHZhbHVlLmVuZDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGRhdGVTdGFydCA9PT0gbnVsbCAmJiBkYXRlRW5kID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl92YWx1ZSA9IG51bGw7XHJcblxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fdmFsdWUgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IGRhdGVTdGFydCxcclxuICAgICAgICAgICAgICAgICAgICBlbmQ6IGRhdGVFbmRcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5fdmFsdWUgPSBudWxsO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9yZW5kZXIpIHtcclxuICAgICAgICAgICAgbGV0IGNvbnRyb2wgPSBjb3JldWlUYWJsZUVsZW1lbnRzLmdldENvbnRyb2wodGhpcy5fdGFibGUuZ2V0SWQoKSwgdGhpcy5faWQpO1xyXG5cclxuICAgICAgICAgICAgaWYgKGNvbnRyb2xbMF0pIHtcclxuICAgICAgICAgICAgICAgIGxldCBpbnB1dFN0YXJ0ID0gJCgnaW5wdXQuZGF0ZS1zdGFydCcsIGNvbnRyb2wpO1xyXG4gICAgICAgICAgICAgICAgbGV0IGlucHV0RW5kICAgPSAkKCdpbnB1dC5kYXRlLWVuZCcsIGNvbnRyb2wpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl92YWx1ZSA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlucHV0U3RhcnQudmFsKCcnKTtcclxuICAgICAgICAgICAgICAgICAgICBpbnB1dEVuZC52YWwoJycpO1xyXG5cclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY29yZXVpVGFibGVVdGlscy5pc09iamVjdCh0aGlzLl92YWx1ZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpbnB1dFN0YXJ0LnZhbCh0eXBlb2YgdGhpcy5fdmFsdWUuc3RhcnQgIT09IG51bGwgPyB0aGlzLl92YWx1ZS5zdGFydCA6ICcnKTtcclxuICAgICAgICAgICAgICAgICAgICBpbnB1dEVuZC52YWwodHlwZW9mIHRoaXMuX3ZhbHVlLmVuZCAhPT0gbnVsbCA/IHRoaXMuX3ZhbHVlLmVuZCA6ICcnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC30L3QsNGH0LXQvdC40Y9cclxuICAgICAqIEByZXR1cm5zIHtPYmplY3R8bnVsbH1cclxuICAgICAqL1xyXG4gICAgZ2V0VmFsdWU6IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgbGV0IGNvbnRyb2wgICAgPSBjb3JldWlUYWJsZUVsZW1lbnRzLmdldENvbnRyb2wodGhpcy5fdGFibGUuZ2V0SWQoKSwgdGhpcy5faWQpO1xyXG4gICAgICAgIGxldCBpbnB1dFN0YXJ0ID0gJCgnaW5wdXQuZGF0ZS1zdGFydCcsIGNvbnRyb2wpO1xyXG4gICAgICAgIGxldCBpbnB1dEVuZCAgID0gJCgnaW5wdXQuZGF0ZS1lbmQnLCBjb250cm9sKTtcclxuXHJcbiAgICAgICAgaWYgKGlucHV0U3RhcnRbMF0gJiYgaW5wdXRFbmRbMF0pIHtcclxuXHJcbiAgICAgICAgICAgIGxldCB2YWx1ZVN0YXJ0ID0gaW5wdXRTdGFydC52YWwoKTtcclxuICAgICAgICAgICAgbGV0IHZhbHVlRW5kICAgPSBpbnB1dEVuZC52YWwoKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChcclxuICAgICAgICAgICAgICAgICh0eXBlb2YgdmFsdWVTdGFydCA9PT0gJ3N0cmluZycgJiYgdmFsdWVTdGFydCAhPT0gJycpIHx8XHJcbiAgICAgICAgICAgICAgICAodHlwZW9mIHZhbHVlRW5kID09PSAnc3RyaW5nJyAmJiB2YWx1ZUVuZCAhPT0gJycpXHJcbiAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICBzdGFydDogdmFsdWVTdGFydCAhPT0gJycgPyB2YWx1ZVN0YXJ0IDogbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICBlbmQ6IHZhbHVlRW5kICE9PSAnJyA/IHZhbHVlRW5kIDogbnVsbCxcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfSxcclxuXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y8g0YHQvtCx0YvRgtC40LlcclxuICAgICAqIEByZXR1cm5zIHtvYmplY3R9XHJcbiAgICAgKi9cclxuICAgIGluaXRFdmVudHM6IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgbGV0IGNvbnRyb2wgPSBjb3JldWlUYWJsZUVsZW1lbnRzLmdldENvbnRyb2wodGhpcy5fdGFibGUuZ2V0SWQoKSwgdGhpcy5faWQpO1xyXG4gICAgICAgIGxldCB0aGF0ICAgID0gdGhpcztcclxuXHJcbiAgICAgICAgJCgnaW5wdXQnLCBjb250cm9sKS5jaGFuZ2UoZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICB0aGF0Ll90YWJsZS5zZWFyY2hSZWNvcmRzKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCk0L7RgNC80LjRgNC+0LLQsNC90LjQtSDQutC+0L3RgtC10L3RgtCwXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxyXG4gICAgICovXHJcbiAgICByZW5kZXI6IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICB0aGlzLl9yZW5kZXIgPSB0cnVlO1xyXG5cclxuICAgICAgICBsZXQgb3B0aW9ucyA9IHRoaXMuZ2V0T3B0aW9ucygpO1xyXG4gICAgICAgIGxldCBsYWJlbCAgID0gdHlwZW9mIG9wdGlvbnMubGFiZWwgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBvcHRpb25zLmxhYmVsID09PSAnbnVtYmVyJ1xyXG4gICAgICAgICAgICA/IG9wdGlvbnMubGFiZWxcclxuICAgICAgICAgICAgOiAnJztcclxuXHJcbiAgICAgICAgaWYgKCAhIGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3Qob3B0aW9ucy5hdHRyKSkge1xyXG4gICAgICAgICAgICBvcHRpb25zLmF0dHIgPSB7fTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChvcHRpb25zLmhhc093blByb3BlcnR5KCd3aWR0aCcpICYmXHJcbiAgICAgICAgICAgIGNvcmV1aVRhYmxlVXRpbHMuaXNOdW1lcmljKG9wdGlvbnMud2lkdGgpXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmF0dHIuaGFzT3duUHJvcGVydHkoJ3N0eWxlJykpIHtcclxuICAgICAgICAgICAgICAgIG9wdGlvbnMuYXR0clsnc3R5bGUnXSArPSAnO3dpZHRoOicgKyBvcHRpb25zLndpZHRoICsgJ3B4JztcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIG9wdGlvbnMuYXR0clsnc3R5bGUnXSA9ICd3aWR0aDonICsgb3B0aW9ucy53aWR0aCArICdweCc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChvcHRpb25zLmF0dHIuaGFzT3duUHJvcGVydHkoJ3R5cGUnKSkge1xyXG4gICAgICAgICAgICBkZWxldGUgb3B0aW9ucy5hdHRyLnR5cGU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAob3B0aW9ucy5hdHRyLmhhc093blByb3BlcnR5KCd2YWx1ZScpKSB7XHJcbiAgICAgICAgICAgIGRlbGV0ZSBvcHRpb25zLmF0dHIudmFsdWU7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgbGV0IGZpZWxkICAgICA9IHR5cGVvZiBvcHRpb25zLmZpZWxkID09PSAnc3RyaW5nJyA/IG9wdGlvbnMuZmllbGQgOiAnJztcclxuICAgICAgICBsZXQgc3RhcnRBdHRyID0gW107XHJcbiAgICAgICAgbGV0IHN0YXJ0RW5kICA9IFtdO1xyXG5cclxuXHJcbiAgICAgICAgJC5lYWNoKG9wdGlvbnMuYXR0ciwgZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XHJcbiAgICAgICAgICAgIGlmIChbJ25hbWUnLCAndmFsdWUnLCAnY2xhc3MnXS5pbmRleE9mKG5hbWUpID49IDAgfHxcclxuICAgICAgICAgICAgICAgIFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIHZhbHVlKSA8IDBcclxuICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHN0YXJ0QXR0ci5wdXNoKG5hbWUgKyAnPVwiJyArIHZhbHVlICsgJ1wiJyk7XHJcbiAgICAgICAgICAgIHN0YXJ0RW5kLnB1c2gobmFtZSArICc9XCInICsgdmFsdWUgKyAnXCInKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgaWYgKG9wdGlvbnMuYXR0ci5oYXNPd25Qcm9wZXJ0eSgnY2xhc3MnKSAmJlxyXG4gICAgICAgICAgICBbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiBvcHRpb25zLmF0dHIuY2xhc3MpID49IDBcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgc3RhcnRBdHRyLnB1c2goJ2NsYXNzPVwiJyArIG9wdGlvbnMuYXR0ci5jbGFzcyArICcgZGF0ZS1zdGFydFwiJyk7XHJcbiAgICAgICAgICAgIHN0YXJ0RW5kLnB1c2goJ2NsYXNzPVwiJyArIG9wdGlvbnMuYXR0ci5jbGFzcyArICcgZGF0ZS1lbmRcIicpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHN0YXJ0QXR0ci5wdXNoKCdjbGFzcz1cImRhdGUtc3RhcnRcIicpO1xyXG4gICAgICAgICAgICBzdGFydEVuZC5wdXNoKCdjbGFzcz1cImRhdGUtZW5kXCInKTtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICBpZiAoZmllbGQpIHtcclxuICAgICAgICAgICAgc3RhcnRBdHRyLnB1c2goJ25hbWU9XCInICsgZmllbGQgKyAnW3N0YXJ0XVwiJyk7XHJcbiAgICAgICAgICAgIHN0YXJ0RW5kLnB1c2goJ25hbWU9XCInICsgZmllbGQgKyAnW2VuZF1cIicpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc3RhcnRBdHRyLnB1c2goJ3ZhbHVlPVwiJyArICh0aGlzLl92YWx1ZSA/IHRoaXMuX3ZhbHVlLnN0YXJ0IDogJycpICsgJ1wiJyk7XHJcbiAgICAgICAgc3RhcnRFbmQucHVzaCgndmFsdWU9XCInICsgKHRoaXMuX3ZhbHVlID8gdGhpcy5fdmFsdWUuZW5kIDogJycpICsgJ1wiJyk7XHJcblxyXG5cclxuICAgICAgICByZXR1cm4gZWpzLnJlbmRlcihjb3JldWlUYWJsZVRwbFsnZmlsdGVycy9kYXRlX3JhbmdlLmh0bWwnXSwge1xyXG4gICAgICAgICAgICBsYWJlbDogbGFiZWwsXHJcbiAgICAgICAgICAgIHN0YXJ0QXR0cjogc3RhcnRBdHRyLmxlbmd0aCA+IDAgPyAoJyAnICsgc3RhcnRBdHRyLmpvaW4oJyAnKSkgOiAnJyxcclxuICAgICAgICAgICAgZW5kQXR0cjogc3RhcnRFbmQubGVuZ3RoID4gMCA/ICgnICcgKyBzdGFydEVuZC5qb2luKCcgJykpIDogJycsXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn0iLCJcclxuaW1wb3J0IGNvcmV1aVRhYmxlICAgICAgZnJvbSBcIi4uL2NvcmV1aS50YWJsZVwiO1xyXG5pbXBvcnQgY29yZXVpVGFibGVUcGwgICBmcm9tIFwiLi4vY29yZXVpLnRhYmxlLnRlbXBsYXRlc1wiO1xyXG5pbXBvcnQgY29yZXVpVGFibGVVdGlscyBmcm9tIFwiLi4vY29yZXVpLnRhYmxlLnV0aWxzXCI7XHJcbmltcG9ydCBjb3JldWlUYWJsZUVsZW1lbnRzIGZyb20gXCIuLi9jb3JldWkudGFibGUuZWxlbWVudHNcIjtcclxuXHJcbmNvcmV1aVRhYmxlLmZpbHRlcnMuZGF0ZXRpbWVfcmFuZ2UgPSB7XHJcblxyXG4gICAgX2lkOiBudWxsLFxyXG4gICAgX3RhYmxlOiBudWxsLFxyXG4gICAgX3ZhbHVlOiBudWxsLFxyXG4gICAgX3JlbmRlcjogZmFsc2UsXHJcbiAgICBfb3B0aW9uczoge1xyXG4gICAgICAgIGlkOiBudWxsLFxyXG4gICAgICAgIHR5cGU6ICdkYXRldGltZV9yYW5nZScsXHJcbiAgICAgICAgZmllbGQ6IG51bGwsXHJcbiAgICAgICAgbGFiZWw6IG51bGwsXHJcbiAgICAgICAgdmFsdWU6IG51bGwsXHJcbiAgICAgICAgd2lkdGg6IDIwMCxcclxuICAgICAgICBhdHRyOiB7XHJcbiAgICAgICAgICAgIGNsYXNzOiBcImZvcm0tY29udHJvbCBkLWlubGluZS1ibG9ja1wiLFxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y9cclxuICAgICAqIEBwYXJhbSB7Q29yZVVJLnRhYmxlLmluc3RhbmNlfSB0YWJsZVxyXG4gICAgICogQHBhcmFtIHtvYmplY3R9ICAgICAgICAgICAgICAgIG9wdGlvbnNcclxuICAgICAqL1xyXG4gICAgaW5pdDogZnVuY3Rpb24gKHRhYmxlLCBvcHRpb25zKSB7XHJcblxyXG4gICAgICAgIHRoaXMuX29wdGlvbnMgPSAkLmV4dGVuZCh0cnVlLCB7fSwgdGhpcy5fb3B0aW9ucywgb3B0aW9ucyk7XHJcbiAgICAgICAgdGhpcy5fdGFibGUgICA9IHRhYmxlO1xyXG4gICAgICAgIHRoaXMuX2lkICAgICAgPSB0aGlzLl9vcHRpb25zLmhhc093blByb3BlcnR5KCdpZCcpICYmIHR5cGVvZiB0aGlzLl9vcHRpb25zLmlkID09PSAnc3RyaW5nJyAmJiB0aGlzLl9vcHRpb25zLmlkXHJcbiAgICAgICAgICAgID8gdGhpcy5fb3B0aW9ucy5pZFxyXG4gICAgICAgICAgICA6IGNvcmV1aVRhYmxlVXRpbHMuaGFzaENvZGUoKTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMudmFsdWUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5zZXRWYWx1ZSh0aGlzLl9vcHRpb25zLnZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSDQv9Cw0YDQsNC80LXRgtGA0L7QslxyXG4gICAgICogQHJldHVybnMge29iamVjdH1cclxuICAgICAqL1xyXG4gICAgZ2V0T3B0aW9uczogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiAkLmV4dGVuZCh0cnVlLCB7fSwgdGhpcy5fb3B0aW9ucyk7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSBpZFxyXG4gICAgICogQHJldHVybnMge3N0cmluZ31cclxuICAgICAqL1xyXG4gICAgZ2V0SWQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5faWQ7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCj0YHRgtCw0L3QvtCy0LrQsCDQt9C90LDRh9C10L3QuNGPXHJcbiAgICAgKiBAcGFyYW0ge29iamVjdHxudWxsfSB2YWx1ZVxyXG4gICAgICovXHJcbiAgICBzZXRWYWx1ZTogZnVuY3Rpb24gKHZhbHVlKSB7XHJcblxyXG4gICAgICAgIGlmICh2YWx1ZSkge1xyXG4gICAgICAgICAgICBpZiAoICEgY29yZXVpVGFibGVVdGlscy5pc09iamVjdCh2YWx1ZSkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgbGV0IGRhdGVTdGFydCA9IG51bGw7XHJcbiAgICAgICAgICAgIGxldCBkYXRlRW5kICAgPSBudWxsO1xyXG5cclxuICAgICAgICAgICAgaWYgKHZhbHVlLmhhc093blByb3BlcnR5KCdzdGFydCcpICYmXHJcbiAgICAgICAgICAgICAgICB0eXBlb2YgdmFsdWUuc3RhcnQgPT09ICdzdHJpbmcnICYmXHJcbiAgICAgICAgICAgICAgICB2YWx1ZS5zdGFydC5tYXRjaCgvXlxcZHs0fVxcLVxcZHsyfVxcLVxcZHsyfSBcXGR7Mn06XFxkezJ9OlxcZHsyfSQvKSA9PT0gbnVsbCAmJlxyXG4gICAgICAgICAgICAgICAgaXNOYU4obmV3IERhdGUodmFsdWUuc3RhcnQpKVxyXG4gICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgIGRhdGVTdGFydCA9IHZhbHVlLnN0YXJ0O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodmFsdWUuaGFzT3duUHJvcGVydHkoJ2VuZCcpICYmXHJcbiAgICAgICAgICAgICAgICB0eXBlb2YgdmFsdWUuZW5kID09PSAnc3RyaW5nJyAmJlxyXG4gICAgICAgICAgICAgICAgdmFsdWUuZW5kLm1hdGNoKC9eXFxkezR9XFwtXFxkezJ9XFwtXFxkezJ9IFxcZHsyfTpcXGR7Mn06XFxkezJ9JC8pID09PSBudWxsICYmXHJcbiAgICAgICAgICAgICAgICBpc05hTihuZXcgRGF0ZSh2YWx1ZS5lbmQpKVxyXG4gICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgIGRhdGVFbmQgPSB2YWx1ZS5lbmQ7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChkYXRlU3RhcnQgPT09IG51bGwgJiYgZGF0ZUVuZCA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fdmFsdWUgPSBudWxsO1xyXG5cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3ZhbHVlID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0OiBkYXRlU3RhcnQsXHJcbiAgICAgICAgICAgICAgICAgICAgZW5kOiAgIGRhdGVFbmRcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5fdmFsdWUgPSBudWxsO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9yZW5kZXIpIHtcclxuICAgICAgICAgICAgbGV0IGNvbnRyb2wgPSBjb3JldWlUYWJsZUVsZW1lbnRzLmdldENvbnRyb2wodGhpcy5fdGFibGUuZ2V0SWQoKSwgdGhpcy5faWQpO1xyXG5cclxuICAgICAgICAgICAgaWYgKGNvbnRyb2xbMF0pIHtcclxuICAgICAgICAgICAgICAgIGxldCBpbnB1dFN0YXJ0ID0gJCgnaW5wdXQuZGF0ZS1zdGFydCcsIGNvbnRyb2wpO1xyXG4gICAgICAgICAgICAgICAgbGV0IGlucHV0RW5kICAgPSAkKCdpbnB1dC5kYXRlLWVuZCcsIGNvbnRyb2wpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl92YWx1ZSA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlucHV0U3RhcnQudmFsKCcnKTtcclxuICAgICAgICAgICAgICAgICAgICBpbnB1dEVuZC52YWwoJycpO1xyXG5cclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY29yZXVpVGFibGVVdGlscy5pc09iamVjdCh0aGlzLl92YWx1ZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpbnB1dFN0YXJ0LnZhbCh0eXBlb2YgdGhpcy5fdmFsdWUuc3RhcnQgIT09IG51bGwgPyB0aGlzLl92YWx1ZS5zdGFydCA6ICcnKTtcclxuICAgICAgICAgICAgICAgICAgICBpbnB1dEVuZC52YWwodHlwZW9mIHRoaXMuX3ZhbHVlLmVuZCAhPT0gbnVsbCA/IHRoaXMuX3ZhbHVlLmVuZCA6ICcnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC30L3QsNGH0LXQvdC40Y9cclxuICAgICAqIEByZXR1cm5zIHtPYmplY3R8bnVsbH1cclxuICAgICAqL1xyXG4gICAgZ2V0VmFsdWU6IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgbGV0IGNvbnRyb2wgICAgPSBjb3JldWlUYWJsZUVsZW1lbnRzLmdldENvbnRyb2wodGhpcy5fdGFibGUuZ2V0SWQoKSwgdGhpcy5faWQpO1xyXG4gICAgICAgIGxldCBpbnB1dFN0YXJ0ID0gJCgnaW5wdXQuZGF0ZS1zdGFydCcsIGNvbnRyb2wpO1xyXG4gICAgICAgIGxldCBpbnB1dEVuZCAgID0gJCgnaW5wdXQuZGF0ZS1lbmQnLCBjb250cm9sKTtcclxuXHJcbiAgICAgICAgaWYgKGlucHV0U3RhcnRbMF0gJiYgaW5wdXRFbmRbMF0pIHtcclxuXHJcbiAgICAgICAgICAgIGxldCB2YWx1ZVN0YXJ0ID0gaW5wdXRTdGFydC52YWwoKTtcclxuICAgICAgICAgICAgbGV0IHZhbHVlRW5kICAgPSBpbnB1dEVuZC52YWwoKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChcclxuICAgICAgICAgICAgICAgICh0eXBlb2YgdmFsdWVTdGFydCA9PT0gJ3N0cmluZycgJiYgdmFsdWVTdGFydCAhPT0gJycpIHx8XHJcbiAgICAgICAgICAgICAgICAodHlwZW9mIHZhbHVlRW5kID09PSAnc3RyaW5nJyAmJiB2YWx1ZUVuZCAhPT0gJycpXHJcbiAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICBzdGFydDogdmFsdWVTdGFydCAhPT0gJycgPyB2YWx1ZVN0YXJ0IDogbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICBlbmQ6IHZhbHVlRW5kICE9PSAnJyA/IHZhbHVlRW5kIDogbnVsbCxcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfSxcclxuXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y8g0YHQvtCx0YvRgtC40LlcclxuICAgICAqIEByZXR1cm5zIHtvYmplY3R9XHJcbiAgICAgKi9cclxuICAgIGluaXRFdmVudHM6IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgbGV0IGNvbnRyb2wgPSBjb3JldWlUYWJsZUVsZW1lbnRzLmdldENvbnRyb2wodGhpcy5fdGFibGUuZ2V0SWQoKSwgdGhpcy5faWQpO1xyXG4gICAgICAgIGxldCB0aGF0ICAgID0gdGhpcztcclxuXHJcbiAgICAgICAgJCgnaW5wdXQnLCBjb250cm9sKS5jaGFuZ2UoZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICB0aGF0Ll90YWJsZS5zZWFyY2hSZWNvcmRzKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCk0L7RgNC80LjRgNC+0LLQsNC90LjQtSDQutC+0L3RgtC10L3RgtCwXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxyXG4gICAgICovXHJcbiAgICByZW5kZXI6IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICB0aGlzLl9yZW5kZXIgPSB0cnVlO1xyXG5cclxuICAgICAgICBsZXQgb3B0aW9ucyA9IHRoaXMuZ2V0T3B0aW9ucygpO1xyXG4gICAgICAgIGxldCBsYWJlbCAgID0gdHlwZW9mIG9wdGlvbnMubGFiZWwgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBvcHRpb25zLmxhYmVsID09PSAnbnVtYmVyJ1xyXG4gICAgICAgICAgICA/IG9wdGlvbnMubGFiZWxcclxuICAgICAgICAgICAgOiAnJztcclxuXHJcbiAgICAgICAgaWYgKCAhIGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3Qob3B0aW9ucy5hdHRyKSkge1xyXG4gICAgICAgICAgICBvcHRpb25zLmF0dHIgPSB7fTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChvcHRpb25zLmhhc093blByb3BlcnR5KCd3aWR0aCcpICYmXHJcbiAgICAgICAgICAgIGNvcmV1aVRhYmxlVXRpbHMuaXNOdW1lcmljKG9wdGlvbnMud2lkdGgpXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmF0dHIuaGFzT3duUHJvcGVydHkoJ3N0eWxlJykpIHtcclxuICAgICAgICAgICAgICAgIG9wdGlvbnMuYXR0clsnc3R5bGUnXSArPSAnO3dpZHRoOicgKyBvcHRpb25zLndpZHRoICsgJ3B4JztcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIG9wdGlvbnMuYXR0clsnc3R5bGUnXSA9ICd3aWR0aDonICsgb3B0aW9ucy53aWR0aCArICdweCc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChvcHRpb25zLmF0dHIuaGFzT3duUHJvcGVydHkoJ3R5cGUnKSkge1xyXG4gICAgICAgICAgICBkZWxldGUgb3B0aW9ucy5hdHRyLnR5cGU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAob3B0aW9ucy5hdHRyLmhhc093blByb3BlcnR5KCd2YWx1ZScpKSB7XHJcbiAgICAgICAgICAgIGRlbGV0ZSBvcHRpb25zLmF0dHIudmFsdWU7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgbGV0IGZpZWxkICAgICA9IHR5cGVvZiBvcHRpb25zLmZpZWxkID09PSAnc3RyaW5nJyA/IG9wdGlvbnMuZmllbGQgOiAnJztcclxuICAgICAgICBsZXQgc3RhcnRBdHRyID0gW107XHJcbiAgICAgICAgbGV0IHN0YXJ0RW5kICA9IFtdO1xyXG5cclxuXHJcbiAgICAgICAgJC5lYWNoKG9wdGlvbnMuYXR0ciwgZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XHJcbiAgICAgICAgICAgIGlmIChbJ25hbWUnLCAndmFsdWUnLCAnY2xhc3MnXS5pbmRleE9mKG5hbWUpID49IDAgfHxcclxuICAgICAgICAgICAgICAgIFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIHZhbHVlKSA8IDBcclxuICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHN0YXJ0QXR0ci5wdXNoKG5hbWUgKyAnPVwiJyArIHZhbHVlICsgJ1wiJyk7XHJcbiAgICAgICAgICAgIHN0YXJ0RW5kLnB1c2gobmFtZSArICc9XCInICsgdmFsdWUgKyAnXCInKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgaWYgKG9wdGlvbnMuYXR0ci5oYXNPd25Qcm9wZXJ0eSgnY2xhc3MnKSAmJlxyXG4gICAgICAgICAgICBbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiBvcHRpb25zLmF0dHIuY2xhc3MpID49IDBcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgc3RhcnRBdHRyLnB1c2goJ2NsYXNzPVwiJyArIG9wdGlvbnMuYXR0ci5jbGFzcyArICcgZGF0ZS1zdGFydFwiJyk7XHJcbiAgICAgICAgICAgIHN0YXJ0RW5kLnB1c2goJ2NsYXNzPVwiJyArIG9wdGlvbnMuYXR0ci5jbGFzcyArICcgZGF0ZS1lbmRcIicpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHN0YXJ0QXR0ci5wdXNoKCdjbGFzcz1cImRhdGUtc3RhcnRcIicpO1xyXG4gICAgICAgICAgICBzdGFydEVuZC5wdXNoKCdjbGFzcz1cImRhdGUtZW5kXCInKTtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICBpZiAoZmllbGQpIHtcclxuICAgICAgICAgICAgc3RhcnRBdHRyLnB1c2goJ25hbWU9XCInICsgZmllbGQgKyAnW3N0YXJ0XVwiJyk7XHJcbiAgICAgICAgICAgIHN0YXJ0RW5kLnB1c2goJ25hbWU9XCInICsgZmllbGQgKyAnW2VuZF1cIicpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc3RhcnRBdHRyLnB1c2goJ3ZhbHVlPVwiJyArICh0aGlzLl92YWx1ZSA/IHRoaXMuX3ZhbHVlLnN0YXJ0IDogJycpICsgJ1wiJyk7XHJcbiAgICAgICAgc3RhcnRFbmQucHVzaCgndmFsdWU9XCInICsgKHRoaXMuX3ZhbHVlID8gdGhpcy5fdmFsdWUuZW5kIDogJycpICsgJ1wiJyk7XHJcblxyXG5cclxuICAgICAgICByZXR1cm4gZWpzLnJlbmRlcihjb3JldWlUYWJsZVRwbFsnZmlsdGVycy9kYXRldGltZV9yYW5nZS5odG1sJ10sIHtcclxuICAgICAgICAgICAgbGFiZWw6IGxhYmVsLFxyXG4gICAgICAgICAgICBzdGFydEF0dHI6IHN0YXJ0QXR0ci5sZW5ndGggPiAwID8gKCcgJyArIHN0YXJ0QXR0ci5qb2luKCcgJykpIDogJycsXHJcbiAgICAgICAgICAgIGVuZEF0dHI6IHN0YXJ0RW5kLmxlbmd0aCA+IDAgPyAoJyAnICsgc3RhcnRFbmQuam9pbignICcpKSA6ICcnLFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59IiwiXHJcbmltcG9ydCBjb3JldWlUYWJsZSAgICAgIGZyb20gXCIuLi9jb3JldWkudGFibGVcIjtcclxuaW1wb3J0IGNvcmV1aVRhYmxlVHBsICAgZnJvbSBcIi4uL2NvcmV1aS50YWJsZS50ZW1wbGF0ZXNcIjtcclxuaW1wb3J0IGNvcmV1aVRhYmxlVXRpbHMgZnJvbSBcIi4uL2NvcmV1aS50YWJsZS51dGlsc1wiO1xyXG5pbXBvcnQgY29yZXVpVGFibGVFbGVtZW50cyBmcm9tIFwiLi4vY29yZXVpLnRhYmxlLmVsZW1lbnRzXCI7XHJcblxyXG5jb3JldWlUYWJsZS5maWx0ZXJzLmNoZWNrYm94ID0ge1xyXG5cclxuICAgIF9pZDogbnVsbCxcclxuICAgIF90YWJsZTogbnVsbCxcclxuICAgIF92YWx1ZTogbnVsbCxcclxuICAgIF9jbGFzczogJ2J0biBidG4tb3V0bGluZS1zZWNvbmRhcnknLFxyXG4gICAgX3JlbmRlcjogZmFsc2UsXHJcbiAgICBfb3B0aW9uczoge1xyXG4gICAgICAgIGlkOiBudWxsLFxyXG4gICAgICAgIHR5cGU6ICdjaGVja2JveCcsXHJcbiAgICAgICAgZmllbGQ6IG51bGwsXHJcbiAgICAgICAgbGFiZWw6IG51bGwsXHJcbiAgICAgICAgdmFsdWU6IG51bGwsXHJcbiAgICAgICAgb3B0aW9uczogW10sXHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPXHJcbiAgICAgKiBAcGFyYW0ge0NvcmVVSS50YWJsZS5pbnN0YW5jZX0gdGFibGVcclxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSAgICAgICAgICAgICAgICBvcHRpb25zXHJcbiAgICAgKi9cclxuICAgIGluaXQ6IGZ1bmN0aW9uICh0YWJsZSwgb3B0aW9ucykge1xyXG5cclxuICAgICAgICB0aGlzLl9vcHRpb25zID0gJC5leHRlbmQodHJ1ZSwge30sIHRoaXMuX29wdGlvbnMsIG9wdGlvbnMpO1xyXG4gICAgICAgIHRoaXMuX3RhYmxlICAgPSB0YWJsZTtcclxuICAgICAgICB0aGlzLl9pZCAgICAgID0gdGhpcy5fb3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnaWQnKSAmJiB0eXBlb2YgdGhpcy5fb3B0aW9ucy5pZCA9PT0gJ3N0cmluZycgJiYgdGhpcy5fb3B0aW9ucy5pZFxyXG4gICAgICAgICAgICA/IHRoaXMuX29wdGlvbnMuaWRcclxuICAgICAgICAgICAgOiBjb3JldWlUYWJsZVV0aWxzLmhhc2hDb2RlKCk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLnZhbHVlICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0VmFsdWUodGhpcy5fb3B0aW9ucy52YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0L/QsNGA0LDQvNC10YLRgNC+0LJcclxuICAgICAqIEByZXR1cm5zIHtvYmplY3R9XHJcbiAgICAgKi9cclxuICAgIGdldE9wdGlvbnM6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gJC5leHRlbmQodHJ1ZSwge30sIHRoaXMuX29wdGlvbnMpO1xyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUgaWRcclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIGdldElkOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lkO1xyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQo9GB0YLQsNC90L7QstC60LAg0LfQvdCw0YfQtdC90LjRj1xyXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd8bnVtYmVyfG51bGx9IHZhbHVlXHJcbiAgICAgKi9cclxuICAgIHNldFZhbHVlOiBmdW5jdGlvbiAodmFsdWUpIHtcclxuXHJcbiAgICAgICAgaWYgKFsnc3RyaW5nJywgJ251bWJlcicsICdvYmplY3QnXS5pbmRleE9mKHR5cGVvZiB2YWx1ZSkgPCAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xyXG4gICAgICAgICAgICAgICAgbGV0IGl0ZW1zID0gW107XHJcblxyXG4gICAgICAgICAgICAgICAgJC5lYWNoKHZhbHVlLCBmdW5jdGlvbiAoa2V5LCBpdGVtKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycgJiYgdHlwZW9mIHZhbHVlICE9PSAnbnVtYmVyJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpdGVtcy5wdXNoKGl0ZW0pO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5fdmFsdWUgPSBpdGVtcztcclxuXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl92YWx1ZSA9IG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5fdmFsdWUgPSBbIHZhbHVlIF07XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX3JlbmRlcikge1xyXG4gICAgICAgICAgICBsZXQgY29udHJvbCA9IGNvcmV1aVRhYmxlRWxlbWVudHMuZ2V0Q29udHJvbCh0aGlzLl90YWJsZS5nZXRJZCgpLCB0aGlzLl9pZCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoY29udHJvbFswXSkge1xyXG4gICAgICAgICAgICAgICAgJCgnaW5wdXQ6Y2hlY2tlZCcsIGNvbnRyb2wpLnByb3AoJ2NoZWNrZWQnLCBmYWxzZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodGhpcy5fdmFsdWUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJC5lYWNoKHRoaXMuX3ZhbHVlLCBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkKCdpbnB1dFt2YWx1ZT1cIicgKyB2YWx1ZSArICdcIl0nLCBjb250cm9sKS5wcm9wKCdjaGVja2VkJywgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC30L3QsNGH0LXQvdC40Y9cclxuICAgICAqIEByZXR1cm5zIHtBcnJheXxudWxsfVxyXG4gICAgICovXHJcbiAgICBnZXRWYWx1ZTogZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICBsZXQgY29udHJvbCA9IGNvcmV1aVRhYmxlRWxlbWVudHMuZ2V0Q29udHJvbCh0aGlzLl90YWJsZS5nZXRJZCgpLCB0aGlzLl9pZCk7XHJcblxyXG4gICAgICAgIGlmIChjb250cm9sWzBdKSB7XHJcbiAgICAgICAgICAgIGxldCBpbnB1dHMgPSAkKCdpbnB1dDpjaGVja2VkJywgY29udHJvbCk7XHJcbiAgICAgICAgICAgIGxldCBpdGVtcyAgPSBbXTtcclxuXHJcbiAgICAgICAgICAgICQuZWFjaChpbnB1dHMsIGZ1bmN0aW9uIChrZXksIGlucHV0KSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgdmFsdWUgPSAkKGlucHV0KS5hdHRyKCd2YWx1ZScpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiB2YWx1ZSkgPj0gMCAmJlxyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlICE9PSAnJ1xyXG4gICAgICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaXRlbXMucHVzaCh2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGl0ZW1zLmxlbmd0aCA+IDAgPyBpdGVtcyA6IG51bGw7XHJcblxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl92YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPINGB0L7QsdGL0YLQuNC5XHJcbiAgICAgKi9cclxuICAgIGluaXRFdmVudHM6IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgbGV0IGNvbnRyb2wgPSBjb3JldWlUYWJsZUVsZW1lbnRzLmdldENvbnRyb2wodGhpcy5fdGFibGUuZ2V0SWQoKSwgdGhpcy5faWQpO1xyXG4gICAgICAgIGxldCB0aGF0ICAgID0gdGhpcztcclxuXHJcbiAgICAgICAgJCgnaW5wdXQnLCBjb250cm9sKS5jaGFuZ2UoZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICB0aGF0Ll90YWJsZS5zZWFyY2hSZWNvcmRzKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCk0L7RgNC80LjRgNC+0LLQsNC90LjQtSDQutC+0L3RgtC10L3RgtCwXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxyXG4gICAgICovXHJcbiAgICByZW5kZXI6IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICB0aGlzLl9yZW5kZXIgPSB0cnVlO1xyXG5cclxuICAgICAgICBsZXQgdGhhdCAgICA9IHRoaXM7XHJcbiAgICAgICAgbGV0IG9wdGlvbnMgPSB0aGlzLmdldE9wdGlvbnMoKTtcclxuICAgICAgICBsZXQgZmllbGQgICA9IHR5cGVvZiBvcHRpb25zLmZpZWxkID09PSAnc3RyaW5nJyA/IG9wdGlvbnMuZmllbGQgOiAnJztcclxuICAgICAgICBsZXQgaXRlbXMgICA9IFtdO1xyXG4gICAgICAgIGxldCBsYWJlbCAgID0gdHlwZW9mIG9wdGlvbnMubGFiZWwgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBvcHRpb25zLmxhYmVsID09PSAnbnVtYmVyJ1xyXG4gICAgICAgICAgICA/IG9wdGlvbnMubGFiZWxcclxuICAgICAgICAgICAgOiAnJztcclxuXHJcbiAgICAgICAgJC5lYWNoKG9wdGlvbnMub3B0aW9ucywgZnVuY3Rpb24gKGtleSwgb3B0aW9uKSB7XHJcbiAgICAgICAgICAgIGlmICggISBjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KG9wdGlvbikgfHxcclxuICAgICAgICAgICAgICAgICEgb3B0aW9uLmhhc093blByb3BlcnR5KCd2YWx1ZScpIHx8XHJcbiAgICAgICAgICAgICAgICBbJ3N0cmluZycsICdudW1lcmljJ10uaW5kZXhPZih0eXBlb2Ygb3B0aW9uLnZhbHVlKSA9PT0gLTFcclxuICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGxldCBjaGVja2VkID0gQXJyYXkuaXNBcnJheSh0aGF0Ll92YWx1ZSkgPyB0aGF0Ll92YWx1ZS5pbmRleE9mKG9wdGlvbi52YWx1ZSkgPj0gMCA6IGZhbHNlO1xyXG4gICAgICAgICAgICBsZXQgdGV4dCAgICA9IG9wdGlvbi5oYXNPd25Qcm9wZXJ0eSgndGV4dCcpXHJcbiAgICAgICAgICAgICAgICA/IG9wdGlvbi50ZXh0XHJcbiAgICAgICAgICAgICAgICA6IG9wdGlvbi52YWx1ZTtcclxuXHJcbiAgICAgICAgICAgIGl0ZW1zLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgdGV4dDogICAgdGV4dCxcclxuICAgICAgICAgICAgICAgIHZhbHVlOiAgIG9wdGlvbi52YWx1ZSxcclxuICAgICAgICAgICAgICAgIGNsYXNzOiAgIG9wdGlvbi5oYXNPd25Qcm9wZXJ0eSgnY2xhc3MnKSAmJiB0eXBlb2Ygb3B0aW9uLmNsYXNzID09PSAnc3RyaW5nJyA/IG9wdGlvbi5jbGFzcyA6IHRoYXQuX2NsYXNzLFxyXG4gICAgICAgICAgICAgICAgY2hlY2tlZDogY2hlY2tlZCxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiBlanMucmVuZGVyKGNvcmV1aVRhYmxlVHBsWydmaWx0ZXJzL2NoZWNrYm94Lmh0bWwnXSwge1xyXG4gICAgICAgICAgICBsYWJlbDogbGFiZWwsXHJcbiAgICAgICAgICAgIGl0ZW1zOiBpdGVtcyxcclxuICAgICAgICAgICAgZmllbGQ6IGZpZWxkICsgdGhpcy5nZXRJZCgpLFxyXG4gICAgICAgICAgICBsYW5nOiB0aGlzLl90YWJsZS5nZXRMYW5nKClcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufSIsIlxyXG5pbXBvcnQgY29yZXVpVGFibGUgICAgICBmcm9tIFwiLi4vY29yZXVpLnRhYmxlXCI7XHJcbmltcG9ydCBjb3JldWlUYWJsZVRwbCAgIGZyb20gXCIuLi9jb3JldWkudGFibGUudGVtcGxhdGVzXCI7XHJcbmltcG9ydCBjb3JldWlUYWJsZVV0aWxzIGZyb20gXCIuLi9jb3JldWkudGFibGUudXRpbHNcIjtcclxuaW1wb3J0IGNvcmV1aVRhYmxlRWxlbWVudHMgZnJvbSBcIi4uL2NvcmV1aS50YWJsZS5lbGVtZW50c1wiO1xyXG5cclxuY29yZXVpVGFibGUuZmlsdGVycy5yYWRpbyA9IHtcclxuXHJcbiAgICBfaWQ6IG51bGwsXHJcbiAgICBfdGFibGU6IG51bGwsXHJcbiAgICBfdmFsdWU6IG51bGwsXHJcbiAgICBfY2xhc3M6ICdidG4gYnRuLW91dGxpbmUtc2Vjb25kYXJ5JyxcclxuICAgIF9yZW5kZXI6IGZhbHNlLFxyXG4gICAgX29wdGlvbnM6IHtcclxuICAgICAgICBpZDogbnVsbCxcclxuICAgICAgICB0eXBlOiAncmFkaW8nLFxyXG4gICAgICAgIGZpZWxkOiBudWxsLFxyXG4gICAgICAgIGxhYmVsOiBudWxsLFxyXG4gICAgICAgIHZhbHVlOiBudWxsLFxyXG4gICAgICAgIG9wdGlvbnM6IFtdLFxyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQmNC90LjRhtC40LDQu9C40LfQsNGG0LjRj1xyXG4gICAgICogQHBhcmFtIHtDb3JlVUkudGFibGUuaW5zdGFuY2V9IHRhYmxlXHJcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gICAgICAgICAgICAgICAgb3B0aW9uc1xyXG4gICAgICovXHJcbiAgICBpbml0OiBmdW5jdGlvbiAodGFibGUsIG9wdGlvbnMpIHtcclxuXHJcbiAgICAgICAgdGhpcy5fb3B0aW9ucyA9ICQuZXh0ZW5kKHRydWUsIHt9LCB0aGlzLl9vcHRpb25zLCBvcHRpb25zKTtcclxuICAgICAgICB0aGlzLl90YWJsZSAgID0gdGFibGU7XHJcbiAgICAgICAgdGhpcy5faWQgICAgICA9IHRoaXMuX29wdGlvbnMuaGFzT3duUHJvcGVydHkoJ2lkJykgJiYgdHlwZW9mIHRoaXMuX29wdGlvbnMuaWQgPT09ICdzdHJpbmcnICYmIHRoaXMuX29wdGlvbnMuaWRcclxuICAgICAgICAgICAgPyB0aGlzLl9vcHRpb25zLmlkXHJcbiAgICAgICAgICAgIDogY29yZXVpVGFibGVVdGlscy5oYXNoQ29kZSgpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy52YWx1ZSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLnNldFZhbHVlKHRoaXMuX29wdGlvbnMudmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC/0LDRgNCw0LzQtdGC0YDQvtCyXHJcbiAgICAgKiBAcmV0dXJucyB7b2JqZWN0fVxyXG4gICAgICovXHJcbiAgICBnZXRPcHRpb25zOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuICQuZXh0ZW5kKHRydWUsIHt9LCB0aGlzLl9vcHRpb25zKTtcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1IGlkXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxyXG4gICAgICovXHJcbiAgICBnZXRJZDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9pZDtcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KPRgdGC0LDQvdC+0LLQutCwINC30L3QsNGH0LXQvdC40Y9cclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfG51bWJlcnxudWxsfSB2YWx1ZVxyXG4gICAgICovXHJcbiAgICBzZXRWYWx1ZTogZnVuY3Rpb24gKHZhbHVlKSB7XHJcblxyXG4gICAgICAgIGlmICh2YWx1ZSAhPT0gbnVsbCAmJlxyXG4gICAgICAgICAgICB0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnICYmXHJcbiAgICAgICAgICAgIHR5cGVvZiB2YWx1ZSAhPT0gJ251bWJlcidcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fdmFsdWUgPSB2YWx1ZTtcclxuXHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9yZW5kZXIpIHtcclxuICAgICAgICAgICAgbGV0IGNvbnRyb2wgPSBjb3JldWlUYWJsZUVsZW1lbnRzLmdldENvbnRyb2wodGhpcy5fdGFibGUuZ2V0SWQoKSwgdGhpcy5faWQpO1xyXG5cclxuICAgICAgICAgICAgaWYgKGNvbnRyb2xbMF0pIHtcclxuICAgICAgICAgICAgICAgICQoJ2lucHV0JywgY29udHJvbCkucHJvcCgnY2hlY2tlZCcsIGZhbHNlKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fdmFsdWUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAkKCdpbnB1dFt2YWx1ZT1cIicgKyB0aGlzLl92YWx1ZSArICdcIl0nLCBjb250cm9sKS5wcm9wKCdjaGVja2VkJywgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSDQt9C90LDRh9C10L3QuNGPXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfG51bGx9XHJcbiAgICAgKi9cclxuICAgIGdldFZhbHVlOiBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgIGxldCBjb250cm9sID0gY29yZXVpVGFibGVFbGVtZW50cy5nZXRDb250cm9sKHRoaXMuX3RhYmxlLmdldElkKCksIHRoaXMuX2lkKTtcclxuICAgICAgICBsZXQgaW5wdXQgICA9ICQoJ2lucHV0OmNoZWNrZWQnLCBjb250cm9sKTtcclxuXHJcbiAgICAgICAgaWYgKGlucHV0WzBdKSB7XHJcbiAgICAgICAgICAgIGxldCB2YWx1ZSA9IGlucHV0LnZhbCgpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlID09PSAnJ1xyXG4gICAgICAgICAgICAgICAgPyBudWxsXHJcbiAgICAgICAgICAgICAgICA6IHZhbHVlXHJcblxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl92YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSDRgtC40L/QsCDQv9C+0LjRgdC60L7QstC+0LPQviDQsNC70LPQvtGA0LjRgtC80LBcclxuICAgICAqL1xyXG4gICAgZ2V0QWxnb3JpdGhtOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuICdzdHJpY3QnO1xyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQmNC90LjRhtC40LDQu9C40LfQsNGG0LjRjyDRgdC+0LHRi9GC0LjQuVxyXG4gICAgICovXHJcbiAgICBpbml0RXZlbnRzOiBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgIGxldCBjb250cm9sID0gY29yZXVpVGFibGVFbGVtZW50cy5nZXRDb250cm9sKHRoaXMuX3RhYmxlLmdldElkKCksIHRoaXMuX2lkKTtcclxuICAgICAgICBsZXQgdGhhdCAgICA9IHRoaXM7XHJcblxyXG4gICAgICAgICQoJ2lucHV0JywgY29udHJvbCkuY2hhbmdlKGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgdGhhdC5fdGFibGUuc2VhcmNoUmVjb3JkcygpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQpNC+0YDQvNC40YDQvtCy0LDQvdC40LUg0LrQvtC90YLQtdC90YLQsFxyXG4gICAgICogQHJldHVybnMge3N0cmluZ31cclxuICAgICAqL1xyXG4gICAgcmVuZGVyOiBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgdGhpcy5fcmVuZGVyID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgbGV0IHRoYXQgICAgPSB0aGlzO1xyXG4gICAgICAgIGxldCBvcHRpb25zID0gdGhpcy5nZXRPcHRpb25zKCk7XHJcbiAgICAgICAgbGV0IGZpZWxkICAgPSB0eXBlb2Ygb3B0aW9ucy5maWVsZCA9PT0gJ3N0cmluZycgPyBvcHRpb25zLmZpZWxkIDogJyc7XHJcbiAgICAgICAgbGV0IGl0ZW1zICAgPSBbXTtcclxuICAgICAgICBsZXQgbGFiZWwgICA9IHR5cGVvZiBvcHRpb25zLmxhYmVsID09PSAnc3RyaW5nJyB8fCB0eXBlb2Ygb3B0aW9ucy5sYWJlbCA9PT0gJ251bWJlcidcclxuICAgICAgICAgICAgPyBvcHRpb25zLmxhYmVsXHJcbiAgICAgICAgICAgIDogJyc7XHJcblxyXG4gICAgICAgICQuZWFjaChvcHRpb25zLm9wdGlvbnMsIGZ1bmN0aW9uIChrZXksIG9wdGlvbikge1xyXG4gICAgICAgICAgICBpZiAoICEgY29yZXVpVGFibGVVdGlscy5pc09iamVjdChvcHRpb24pIHx8XHJcbiAgICAgICAgICAgICAgICAhIG9wdGlvbi5oYXNPd25Qcm9wZXJ0eSgndmFsdWUnKSB8fFxyXG4gICAgICAgICAgICAgICAgWydzdHJpbmcnLCAnbnVtZXJpYyddLmluZGV4T2YodHlwZW9mIG9wdGlvbi52YWx1ZSkgPT09IC0xXHJcbiAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBsZXQgdGV4dCA9IG9wdGlvbi5oYXNPd25Qcm9wZXJ0eSgndGV4dCcpXHJcbiAgICAgICAgICAgICAgICA/IG9wdGlvbi50ZXh0XHJcbiAgICAgICAgICAgICAgICA6IG9wdGlvbi52YWx1ZTtcclxuXHJcbiAgICAgICAgICAgIGl0ZW1zLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgdGV4dDogICAgdGV4dCxcclxuICAgICAgICAgICAgICAgIHZhbHVlOiAgIG9wdGlvbi52YWx1ZSxcclxuICAgICAgICAgICAgICAgIGNsYXNzOiAgIG9wdGlvbi5oYXNPd25Qcm9wZXJ0eSgnY2xhc3MnKSAmJiB0eXBlb2Ygb3B0aW9uLmNsYXNzID09PSAnc3RyaW5nJyA/IG9wdGlvbi5jbGFzcyA6IHRoYXQuX2NsYXNzLFxyXG4gICAgICAgICAgICAgICAgY2hlY2tlZDogb3B0aW9uLnZhbHVlID09IHRoYXQuX3ZhbHVlLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGVqcy5yZW5kZXIoY29yZXVpVGFibGVUcGxbJ2ZpbHRlcnMvcmFkaW8uaHRtbCddLCB7XHJcbiAgICAgICAgICAgIGxhYmVsOiBsYWJlbCxcclxuICAgICAgICAgICAgaXRlbXM6IGl0ZW1zLFxyXG4gICAgICAgICAgICBmaWVsZDogZmllbGQgKyB0aGlzLmdldElkKCksXHJcbiAgICAgICAgICAgIGxhbmc6IHRoaXMuX3RhYmxlLmdldExhbmcoKVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59IiwiXHJcbmltcG9ydCBjb3JldWlUYWJsZSAgICAgIGZyb20gXCIuLi9jb3JldWkudGFibGVcIjtcclxuaW1wb3J0IGNvcmV1aVRhYmxlVHBsICAgZnJvbSBcIi4uL2NvcmV1aS50YWJsZS50ZW1wbGF0ZXNcIjtcclxuaW1wb3J0IGNvcmV1aVRhYmxlVXRpbHMgZnJvbSBcIi4uL2NvcmV1aS50YWJsZS51dGlsc1wiO1xyXG5pbXBvcnQgQ29yZXVpVGFibGVVdGlscyBmcm9tIFwiLi4vY29yZXVpLnRhYmxlLnV0aWxzXCI7XHJcbmltcG9ydCBjb3JldWlUYWJsZUVsZW1lbnRzIGZyb20gXCIuLi9jb3JldWkudGFibGUuZWxlbWVudHNcIjtcclxuXHJcbmNvcmV1aVRhYmxlLmZpbHRlcnMuc2VsZWN0ID0ge1xyXG5cclxuICAgIF9pZDogbnVsbCxcclxuICAgIF90YWJsZTogbnVsbCxcclxuICAgIF92YWx1ZTogbnVsbCxcclxuICAgIF9yZW5kZXI6IGZhbHNlLFxyXG4gICAgX29wdGlvbnM6IHtcclxuICAgICAgICBpZDogbnVsbCxcclxuICAgICAgICB0eXBlOiAnc2VsZWN0JyxcclxuICAgICAgICBmaWVsZDogbnVsbCxcclxuICAgICAgICBsYWJlbDogbnVsbCxcclxuICAgICAgICB3aWR0aDogbnVsbCxcclxuICAgICAgICBhdHRyOiB7XHJcbiAgICAgICAgICAgIGNsYXNzOiAnZm9ybS1zZWxlY3QgZC1pbmxpbmUtYmxvY2snXHJcbiAgICAgICAgfSxcclxuICAgICAgICBvcHRpb25zOiBbXVxyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQmNC90LjRhtC40LDQu9C40LfQsNGG0LjRj1xyXG4gICAgICogQHBhcmFtIHtDb3JlVUkudGFibGUuaW5zdGFuY2V9IHRhYmxlXHJcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gICAgICAgICAgICAgICAgb3B0aW9uc1xyXG4gICAgICovXHJcbiAgICBpbml0OiBmdW5jdGlvbiAodGFibGUsIG9wdGlvbnMpIHtcclxuXHJcbiAgICAgICAgdGhpcy5fb3B0aW9ucyA9ICQuZXh0ZW5kKHRydWUsIHt9LCB0aGlzLl9vcHRpb25zLCBvcHRpb25zKTtcclxuICAgICAgICB0aGlzLl90YWJsZSAgID0gdGFibGU7XHJcbiAgICAgICAgdGhpcy5faWQgICAgICA9IHRoaXMuX29wdGlvbnMuaGFzT3duUHJvcGVydHkoJ2lkJykgJiYgdHlwZW9mIHRoaXMuX29wdGlvbnMuaWQgPT09ICdzdHJpbmcnICYmIHRoaXMuX29wdGlvbnMuaWRcclxuICAgICAgICAgICAgPyB0aGlzLl9vcHRpb25zLmlkXHJcbiAgICAgICAgICAgIDogY29yZXVpVGFibGVVdGlscy5oYXNoQ29kZSgpO1xyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0L/QsNGA0LDQvNC10YLRgNC+0LJcclxuICAgICAqIEByZXR1cm5zIHtvYmplY3R9XHJcbiAgICAgKi9cclxuICAgIGdldE9wdGlvbnM6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gJC5leHRlbmQodHJ1ZSwge30sIHRoaXMuX29wdGlvbnMpO1xyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUgaWRcclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIGdldElkOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lkO1xyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQo9GB0YLQsNC90L7QstC60LAg0LfQvdCw0YfQtdC90LjRj1xyXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd8bnVtYmVyfG51bGx9IHZhbHVlXHJcbiAgICAgKi9cclxuICAgIHNldFZhbHVlOiBmdW5jdGlvbiAodmFsdWUpIHtcclxuXHJcbiAgICAgICAgaWYgKFsnc3RyaW5nJywgJ251bWJlcicsICdvYmplY3QnXS5pbmRleE9mKHR5cGVvZiB2YWx1ZSkgPCAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xyXG4gICAgICAgICAgICAgICAgbGV0IGl0ZW1zID0gW107XHJcblxyXG4gICAgICAgICAgICAgICAgJC5lYWNoKHZhbHVlLCBmdW5jdGlvbiAoa2V5LCBpdGVtKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycgJiYgdHlwZW9mIHZhbHVlICE9PSAnbnVtYmVyJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpdGVtcy5wdXNoKGl0ZW0pO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5fdmFsdWUgPSBpdGVtcztcclxuXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl92YWx1ZSA9IG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5fdmFsdWUgPSBbIHZhbHVlIF07XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX3JlbmRlcikge1xyXG4gICAgICAgICAgICBsZXQgY29udHJvbCA9IGNvcmV1aVRhYmxlRWxlbWVudHMuZ2V0Q29udHJvbCh0aGlzLl90YWJsZS5nZXRJZCgpLCB0aGlzLl9pZCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoY29udHJvbFswXSkge1xyXG4gICAgICAgICAgICAgICAgJCgnc2VsZWN0IG9wdGlvbjpzZWxlY3RlZCcsIGNvbnRyb2wpLnByb3AoJ3NlbGVjdGVkJywgZmFsc2UpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHRoaXMuX3ZhbHVlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICQuZWFjaCh0aGlzLl92YWx1ZSwgZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJCgnc2VsZWN0IG9wdGlvblt2YWx1ZT1cIicgKyB2YWx1ZSArICdcIl0nLCBjb250cm9sKS5wcm9wKCdzZWxlY3RlZCcsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSDQt9C90LDRh9C10L3QuNGPXHJcbiAgICAgKiBAcmV0dXJucyB7QXJyYXl8bnVsbH1cclxuICAgICAqL1xyXG4gICAgZ2V0VmFsdWU6IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgbGV0IGNvbnRyb2wgPSBjb3JldWlUYWJsZUVsZW1lbnRzLmdldENvbnRyb2wodGhpcy5fdGFibGUuZ2V0SWQoKSwgdGhpcy5faWQpO1xyXG5cclxuICAgICAgICBpZiAoY29udHJvbFswXSkge1xyXG4gICAgICAgICAgICBsZXQgb3B0aW9ucyA9ICQoJ3NlbGVjdCBvcHRpb246Y2hlY2tlZCcsIGNvbnRyb2wpO1xyXG4gICAgICAgICAgICBsZXQgaXRlbXMgICA9IFtdO1xyXG5cclxuICAgICAgICAgICAgJC5lYWNoKG9wdGlvbnMsIGZ1bmN0aW9uIChrZXksIG9wdGlvbikge1xyXG4gICAgICAgICAgICAgICAgbGV0IHZhbHVlID0gJChvcHRpb24pLmF0dHIoJ3ZhbHVlJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIHZhbHVlKSA+PSAwICYmXHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgIT09ICcnXHJcbiAgICAgICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgICAgICBpdGVtcy5wdXNoKHZhbHVlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gaXRlbXMubGVuZ3RoID4gMCA/IGl0ZW1zIDogbnVsbDtcclxuXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y8g0YHQvtCx0YvRgtC40LlcclxuICAgICAqL1xyXG4gICAgaW5pdEV2ZW50czogZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICBsZXQgY29udHJvbCA9IGNvcmV1aVRhYmxlRWxlbWVudHMuZ2V0Q29udHJvbCh0aGlzLl90YWJsZS5nZXRJZCgpLCB0aGlzLl9pZCk7XHJcbiAgICAgICAgbGV0IHRoYXQgICAgPSB0aGlzO1xyXG5cclxuICAgICAgICAkKCdzZWxlY3QnLCBjb250cm9sKS5jaGFuZ2UoZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICB0aGF0Ll90YWJsZS5zZWFyY2hSZWNvcmRzKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCk0L7RgNC80LjRgNC+0LLQsNC90LjQtSDQutC+0L3RgtC10L3RgtCwXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxyXG4gICAgICovXHJcbiAgICByZW5kZXI6IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICB0aGlzLl9yZW5kZXIgPSB0cnVlO1xyXG5cclxuICAgICAgICBsZXQgdGhhdCAgICAgICAgICA9IHRoaXM7XHJcbiAgICAgICAgbGV0IG9wdGlvbnMgICAgICAgPSB0aGlzLmdldE9wdGlvbnMoKTtcclxuICAgICAgICBsZXQgc2VsZWN0T3B0aW9ucyA9IFtdO1xyXG4gICAgICAgIGxldCBhdHRyaWJ1dGVzICAgID0gW107XHJcbiAgICAgICAgbGV0IGxhYmVsICAgICAgICAgPSB0eXBlb2Ygb3B0aW9ucy5sYWJlbCA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIG9wdGlvbnMubGFiZWwgPT09ICdudW1iZXInXHJcbiAgICAgICAgICAgID8gb3B0aW9ucy5sYWJlbFxyXG4gICAgICAgICAgICA6ICcnO1xyXG5cclxuICAgICAgICBpZiAoICEgb3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnYXR0cicpIHx8XHJcbiAgICAgICAgICAgICEgY29yZXVpVGFibGVVdGlscy5pc09iamVjdChvcHRpb25zLmF0dHIpXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIG9wdGlvbnMuYXR0ciA9IHt9O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKG9wdGlvbnMuZmllbGQpIHtcclxuICAgICAgICAgICAgb3B0aW9ucy5hdHRyLm5hbWUgPSB0aGlzLl9vcHRpb25zLmZpZWxkO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKG9wdGlvbnMud2lkdGgpIHtcclxuICAgICAgICAgICAgb3B0aW9ucy5hdHRyID0gY29yZXVpVGFibGVVdGlscy5tZXJnZUF0dHIoXHJcbiAgICAgICAgICAgICAgICB7IHN0eWxlOiAnd2lkdGg6JyArIG9wdGlvbnMud2lkdGggKyAncHgnIH0sXHJcbiAgICAgICAgICAgICAgICBvcHRpb25zLmF0dHJcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChvcHRpb25zLmhhc093blByb3BlcnR5KCdvcHRpb25zJykgJiZcclxuICAgICAgICAgICAgdHlwZW9mIG9wdGlvbnMub3B0aW9ucyA9PT0gJ29iamVjdCcgJiZcclxuICAgICAgICAgICAgb3B0aW9ucy5vcHRpb25zICE9PSBudWxsXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICQuZWFjaChvcHRpb25zLm9wdGlvbnMsIGZ1bmN0aW9uIChrZXksIG9wdGlvbikge1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygb3B0aW9uID09PSAnc3RyaW5nJyB8fCB0eXBlb2Ygb3B0aW9uID09PSAnbnVtYmVyJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdE9wdGlvbnMucHVzaCh0aGF0Ll9idWlsZE9wdGlvbih7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdvcHRpb24nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZToga2V5LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBvcHRpb25cclxuICAgICAgICAgICAgICAgICAgICB9KSk7XHJcblxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChDb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KG9wdGlvbikpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgdHlwZSA9IG9wdGlvbi5oYXNPd25Qcm9wZXJ0eSgndHlwZScpICYmIHR5cGVvZiBvcHRpb24udHlwZSA9PT0gJ3N0cmluZydcclxuICAgICAgICAgICAgICAgICAgICAgICAgPyBvcHRpb24udHlwZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA6ICdvcHRpb24nO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZSA9PT0gJ2dyb3VwJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgcmVuZGVyQXR0ciAgID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBncm91cEF0dHIgICAgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGdyb3VwT3B0aW9ucyA9IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbi5oYXNPd25Qcm9wZXJ0eSgnYXR0cicpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KG9wdGlvbi5hdHRyKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdyb3VwQXR0ciA9IG9wdGlvbi5hdHRyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob3B0aW9uLmhhc093blByb3BlcnR5KCdsYWJlbCcpICYmIFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mKG9wdGlvbi5sYWJlbCkpID49IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdyb3VwQXR0ci5sYWJlbCA9IG9wdGlvbi5sYWJlbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgJC5lYWNoKGdyb3VwQXR0ciwgZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW5kZXJBdHRyLnB1c2gobmFtZSArICc9XCInICsgdmFsdWUgKyAnXCInKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShvcHRpb24ub3B0aW9ucykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQuZWFjaChvcHRpb24ub3B0aW9ucywgZnVuY3Rpb24gKGtleSwgZ3JvdXBPcHRpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBncm91cE9wdGlvbnMucHVzaCh0aGF0Ll9idWlsZE9wdGlvbihncm91cE9wdGlvbikpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdE9wdGlvbnMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnZ3JvdXAnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cjogcmVuZGVyQXR0ci5sZW5ndGggPiAwID8gKCcgJyArIHJlbmRlckF0dHIuam9pbignICcpKSA6ICcnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uczogZ3JvdXBPcHRpb25zLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0T3B0aW9ucy5wdXNoKHRoYXQuX2J1aWxkT3B0aW9uKG9wdGlvbikpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAkLmVhY2gob3B0aW9ucy5hdHRyLCBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcclxuICAgICAgICAgICAgYXR0cmlidXRlcy5wdXNoKG5hbWUgKyAnPVwiJyArIHZhbHVlICsgJ1wiJyk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiBlanMucmVuZGVyKGNvcmV1aVRhYmxlVHBsWydmaWx0ZXJzL3NlbGVjdC5odG1sJ10sIHtcclxuICAgICAgICAgICAgbGFiZWw6IGxhYmVsLFxyXG4gICAgICAgICAgICBhdHRyOiBhdHRyaWJ1dGVzLmxlbmd0aCA+IDAgPyAoJyAnICsgYXR0cmlidXRlcy5qb2luKCcgJykpIDogJycsXHJcbiAgICAgICAgICAgIG9wdGlvbnM6IHNlbGVjdE9wdGlvbnNcclxuICAgICAgICB9KTtcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KHQsdC+0YDQutCwINC+0L/RhtC40LhcclxuICAgICAqIEBwYXJhbSBvcHRpb25cclxuICAgICAqIEByZXR1cm4ge29iamVjdH1cclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIF9idWlsZE9wdGlvbjogZnVuY3Rpb24gKG9wdGlvbikge1xyXG5cclxuICAgICAgICBsZXQgb3B0aW9uQXR0ciA9IFtdO1xyXG4gICAgICAgIGxldCBvcHRpb25UZXh0ID0gb3B0aW9uLmhhc093blByb3BlcnR5KCd0ZXh0JykgJiYgWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2Yob3B0aW9uLnRleHQpKSA+PSAwXHJcbiAgICAgICAgICAgID8gb3B0aW9uLnRleHRcclxuICAgICAgICAgICAgOiAnJztcclxuXHJcbiAgICAgICAgJC5lYWNoKG9wdGlvbiwgZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XHJcbiAgICAgICAgICAgIGlmIChuYW1lICE9PSAndGV4dCcpIHtcclxuICAgICAgICAgICAgICAgIG9wdGlvbkF0dHIucHVzaChuYW1lICsgJz1cIicgKyB2YWx1ZSArICdcIicpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG5cclxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh0aGlzLl92YWx1ZSkpIHtcclxuICAgICAgICAgICAgJC5lYWNoKHRoaXMuX3ZhbHVlLCBmdW5jdGlvbiAoa2V5LCBpdGVtVmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIGlmIChpdGVtVmFsdWUgPT0gb3B0aW9uLnZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9uQXR0ci5wdXNoKCdzZWxlY3RlZD1cInNlbGVjdGVkXCInKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX3ZhbHVlID09IG9wdGlvbi52YWx1ZSkge1xyXG4gICAgICAgICAgICBvcHRpb25BdHRyLnB1c2goJ3NlbGVjdGVkPVwic2VsZWN0ZWRcIicpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgdHlwZTogJ29wdGlvbicsXHJcbiAgICAgICAgICAgIHRleHQ6IG9wdGlvblRleHQsXHJcbiAgICAgICAgICAgIGF0dHI6IG9wdGlvbkF0dHIubGVuZ3RoID4gMCA/ICgnICcgKyBvcHRpb25BdHRyLmpvaW4oJyAnKSkgOiAnJ1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbn0iLCJcclxuaW1wb3J0IGNvcmV1aVRhYmxlICAgICAgZnJvbSBcIi4uL2NvcmV1aS50YWJsZVwiO1xyXG5pbXBvcnQgY29yZXVpVGFibGVUcGwgICBmcm9tIFwiLi4vY29yZXVpLnRhYmxlLnRlbXBsYXRlc1wiO1xyXG5pbXBvcnQgY29yZXVpVGFibGVVdGlscyBmcm9tIFwiLi4vY29yZXVpLnRhYmxlLnV0aWxzXCI7XHJcbmltcG9ydCBjb3JldWlUYWJsZUVsZW1lbnRzIGZyb20gXCIuLi9jb3JldWkudGFibGUuZWxlbWVudHNcIjtcclxuXHJcbmNvcmV1aVRhYmxlLmZpbHRlcnMuc3dpdGNoID0ge1xyXG5cclxuICAgIF9pZDogbnVsbCxcclxuICAgIF90YWJsZTogbnVsbCxcclxuICAgIF92YWx1ZTogbnVsbCxcclxuICAgIF9yZW5kZXI6IGZhbHNlLFxyXG4gICAgX29wdGlvbnM6IHtcclxuICAgICAgICBpZDogbnVsbCxcclxuICAgICAgICB0eXBlOiAnc3dpdGNoJyxcclxuICAgICAgICBmaWVsZDogbnVsbCxcclxuICAgICAgICBsYWJlbDogbnVsbCxcclxuICAgICAgICB2YWx1ZTogbnVsbCxcclxuICAgICAgICB2YWx1ZVk6ICdZJ1xyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQmNC90LjRhtC40LDQu9C40LfQsNGG0LjRj1xyXG4gICAgICogQHBhcmFtIHtDb3JlVUkudGFibGUuaW5zdGFuY2V9IHRhYmxlXHJcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gICAgICAgICAgICAgICAgb3B0aW9uc1xyXG4gICAgICovXHJcbiAgICBpbml0OiBmdW5jdGlvbiAodGFibGUsIG9wdGlvbnMpIHtcclxuXHJcbiAgICAgICAgdGhpcy5fb3B0aW9ucyA9ICQuZXh0ZW5kKHRydWUsIHt9LCB0aGlzLl9vcHRpb25zLCBvcHRpb25zKTtcclxuICAgICAgICB0aGlzLl90YWJsZSAgID0gdGFibGU7XHJcbiAgICAgICAgdGhpcy5faWQgICAgICA9IHRoaXMuX29wdGlvbnMuaGFzT3duUHJvcGVydHkoJ2lkJykgJiYgdHlwZW9mIHRoaXMuX29wdGlvbnMuaWQgPT09ICdzdHJpbmcnICYmIHRoaXMuX29wdGlvbnMuaWRcclxuICAgICAgICAgICAgPyB0aGlzLl9vcHRpb25zLmlkXHJcbiAgICAgICAgICAgIDogY29yZXVpVGFibGVVdGlscy5oYXNoQ29kZSgpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy52YWx1ZSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLnNldFZhbHVlKHRoaXMuX29wdGlvbnMudmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC/0LDRgNCw0LzQtdGC0YDQvtCyXHJcbiAgICAgKiBAcmV0dXJucyB7b2JqZWN0fVxyXG4gICAgICovXHJcbiAgICBnZXRPcHRpb25zOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuICQuZXh0ZW5kKHRydWUsIHt9LCB0aGlzLl9vcHRpb25zKTtcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1IGlkXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxyXG4gICAgICovXHJcbiAgICBnZXRJZDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9pZDtcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KPRgdGC0LDQvdC+0LLQutCwINC30L3QsNGH0LXQvdC40Y9cclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfG51bWJlcnxudWxsfSB2YWx1ZVxyXG4gICAgICovXHJcbiAgICBzZXRWYWx1ZTogZnVuY3Rpb24gKHZhbHVlKSB7XHJcblxyXG4gICAgICAgIGlmICh2YWx1ZSAhPT0gbnVsbCAmJlxyXG4gICAgICAgICAgICB0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnICYmXHJcbiAgICAgICAgICAgIHR5cGVvZiB2YWx1ZSAhPT0gJ251bWJlcidcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fdmFsdWUgPSB2YWx1ZVxyXG5cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX3JlbmRlcikge1xyXG4gICAgICAgICAgICBsZXQgY29udHJvbCA9IGNvcmV1aVRhYmxlRWxlbWVudHMuZ2V0Q29udHJvbCh0aGlzLl90YWJsZS5nZXRJZCgpLCB0aGlzLl9pZCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoY29udHJvbFswXSkge1xyXG4gICAgICAgICAgICAgICAgbGV0IHZhbHVlWSA9IHR5cGVvZiB0aGlzLl9vcHRpb25zLnZhbHVlWSA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIHRoaXMuX29wdGlvbnMudmFsdWVZID09PSAnbnVtYmVyJ1xyXG4gICAgICAgICAgICAgICAgICAgID8gdGhpcy5fb3B0aW9ucy52YWx1ZVlcclxuICAgICAgICAgICAgICAgICAgICA6ICcnXHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX3ZhbHVlID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJCgnaW5wdXQnLCBjb250cm9sKS5wcm9wKCdjaGVja2VkJywgZmFsc2UpO1xyXG5cclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5fdmFsdWUgPT09IHZhbHVlWSkge1xyXG4gICAgICAgICAgICAgICAgICAgICQoJ2lucHV0JywgY29udHJvbCkucHJvcCgnY2hlY2tlZCcsIHRydWUpO1xyXG5cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJCgnaW5wdXQnLCBjb250cm9sKS5wcm9wKCdjaGVja2VkJywgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0LfQvdCw0YfQtdC90LjRj1xyXG4gICAgICogQHJldHVybnMge3N0cmluZ31cclxuICAgICAqL1xyXG4gICAgZ2V0VmFsdWU6IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgbGV0IGNvbnRyb2wgPSBjb3JldWlUYWJsZUVsZW1lbnRzLmdldENvbnRyb2wodGhpcy5fdGFibGUuZ2V0SWQoKSwgdGhpcy5faWQpO1xyXG4gICAgICAgIGxldCBpbnB1dCAgID0gJCgnaW5wdXQ6Y2hlY2tlZCcsIGNvbnRyb2wpO1xyXG5cclxuICAgICAgICByZXR1cm4gaW5wdXRbMF0gPyBpbnB1dC52YWwoKSA6IG51bGw7XHJcbiAgICB9LFxyXG5cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQmNC90LjRhtC40LDQu9C40LfQsNGG0LjRjyDRgdC+0LHRi9GC0LjQuVxyXG4gICAgICovXHJcbiAgICBpbml0RXZlbnRzOiBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgIGxldCBjb250cm9sID0gY29yZXVpVGFibGVFbGVtZW50cy5nZXRDb250cm9sKHRoaXMuX3RhYmxlLmdldElkKCksIHRoaXMuX2lkKTtcclxuICAgICAgICBsZXQgdGhhdCAgICA9IHRoaXM7XHJcblxyXG4gICAgICAgICQoJ2lucHV0JywgY29udHJvbCkuY2hhbmdlKGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgdGhhdC5fdGFibGUuc2VhcmNoUmVjb3JkcygpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQpNC+0YDQvNC40YDQvtCy0LDQvdC40LUg0LrQvtC90YLQtdC90YLQsFxyXG4gICAgICogQHJldHVybnMge3N0cmluZ31cclxuICAgICAqL1xyXG4gICAgcmVuZGVyOiBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgdGhpcy5fcmVuZGVyID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgbGV0IG9wdGlvbnMgPSB0aGlzLmdldE9wdGlvbnMoKTtcclxuICAgICAgICBsZXQgdmFsdWVZICA9IHR5cGVvZiBvcHRpb25zLnZhbHVlWSA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIG9wdGlvbnMudmFsdWVZID09PSAnbnVtYmVyJ1xyXG4gICAgICAgICAgICA/IG9wdGlvbnMudmFsdWVZXHJcbiAgICAgICAgICAgIDogJydcclxuICAgICAgICBsZXQgbGFiZWwgICA9IHR5cGVvZiBvcHRpb25zLmxhYmVsID09PSAnc3RyaW5nJyB8fCB0eXBlb2Ygb3B0aW9ucy5sYWJlbCA9PT0gJ251bWJlcidcclxuICAgICAgICAgICAgPyBvcHRpb25zLmxhYmVsXHJcbiAgICAgICAgICAgIDogJyc7XHJcblxyXG5cclxuICAgICAgICByZXR1cm4gZWpzLnJlbmRlcihjb3JldWlUYWJsZVRwbFsnZmlsdGVycy9zd2l0Y2guaHRtbCddLCB7XHJcbiAgICAgICAgICAgIGlkOiB0aGlzLl9pZCxcclxuICAgICAgICAgICAgdmFsdWVZOiB2YWx1ZVksXHJcbiAgICAgICAgICAgIGZpZWxkOiB0eXBlb2Ygb3B0aW9ucy5maWVsZCA9PT0gJ3N0cmluZycgPyBvcHRpb25zLmZpZWxkIDogJycsXHJcbiAgICAgICAgICAgIGNoZWNrZWQ6IHRoaXMuX3ZhbHVlID09IHZhbHVlWSxcclxuICAgICAgICAgICAgbGFiZWw6IGxhYmVsLFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59IiwiXHJcbmltcG9ydCBjb3JldWlUYWJsZSAgICAgICAgIGZyb20gXCIuLi9jb3JldWkudGFibGVcIjtcclxuaW1wb3J0IGNvcmV1aVRhYmxlVHBsICAgICAgZnJvbSBcIi4uL2NvcmV1aS50YWJsZS50ZW1wbGF0ZXNcIjtcclxuaW1wb3J0IGNvcmV1aVRhYmxlVXRpbHMgICAgZnJvbSBcIi4uL2NvcmV1aS50YWJsZS51dGlsc1wiO1xyXG5pbXBvcnQgY29yZXVpVGFibGVFbGVtZW50cyBmcm9tIFwiLi4vY29yZXVpLnRhYmxlLmVsZW1lbnRzXCI7XHJcblxyXG5jb3JldWlUYWJsZS5zZWFyY2gudGV4dCA9IHtcclxuXHJcbiAgICBfaWQ6IG51bGwsXHJcbiAgICBfdGFibGU6IG51bGwsXHJcbiAgICBfdmFsdWU6IG51bGwsXHJcbiAgICBfcmVuZGVyOiBmYWxzZSxcclxuICAgIF9vcHRpb25zOiB7XHJcbiAgICAgICAgaWQ6IG51bGwsXHJcbiAgICAgICAgdHlwZTogJ3RleHQnLFxyXG4gICAgICAgIGZpZWxkOiBudWxsLFxyXG4gICAgICAgIGxhYmVsOiBudWxsLFxyXG4gICAgICAgIHZhbHVlOiBudWxsLFxyXG4gICAgICAgIHdpZHRoOiAyMDAsXHJcbiAgICAgICAgYXR0cjoge1xyXG4gICAgICAgICAgICBjbGFzczogXCJmb3JtLWNvbnRyb2wgZC1pbmxpbmUtYmxvY2tcIixcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPXHJcbiAgICAgKiBAcGFyYW0ge0NvcmVVSS50YWJsZS5pbnN0YW5jZX0gdGFibGVcclxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSAgICAgICAgICAgICAgICBvcHRpb25zXHJcbiAgICAgKi9cclxuICAgIGluaXQ6IGZ1bmN0aW9uICh0YWJsZSwgb3B0aW9ucykge1xyXG5cclxuICAgICAgICB0aGlzLl9vcHRpb25zID0gJC5leHRlbmQodHJ1ZSwge30sIHRoaXMuX29wdGlvbnMsIG9wdGlvbnMpO1xyXG4gICAgICAgIHRoaXMuX3RhYmxlICAgPSB0YWJsZTtcclxuICAgICAgICB0aGlzLl9pZCAgICAgID0gdGhpcy5fb3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnaWQnKSAmJiB0eXBlb2YgdGhpcy5fb3B0aW9ucy5pZCA9PT0gJ3N0cmluZycgJiYgdGhpcy5fb3B0aW9ucy5pZFxyXG4gICAgICAgICAgICA/IHRoaXMuX29wdGlvbnMuaWRcclxuICAgICAgICAgICAgOiBjb3JldWlUYWJsZVV0aWxzLmhhc2hDb2RlKCk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLnZhbHVlICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0VmFsdWUodGhpcy5fb3B0aW9ucy52YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0L/QsNGA0LDQvNC10YLRgNC+0LJcclxuICAgICAqIEByZXR1cm5zIHtvYmplY3R9XHJcbiAgICAgKi9cclxuICAgIGdldE9wdGlvbnM6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gJC5leHRlbmQodHJ1ZSwge30sIHRoaXMuX29wdGlvbnMpO1xyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUgaWRcclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIGdldElkOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lkO1xyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQo9GB0YLQsNC90L7QstC60LAg0LfQvdCw0YfQtdC90LjRj1xyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXHJcbiAgICAgKi9cclxuICAgIHNldFZhbHVlOiBmdW5jdGlvbiAodmFsdWUpIHtcclxuXHJcbiAgICAgICAgaWYgKHZhbHVlICE9PSBudWxsICYmXHJcbiAgICAgICAgICAgIHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycgJiZcclxuICAgICAgICAgICAgdHlwZW9mIHZhbHVlICE9PSAnbnVtYmVyJ1xyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl92YWx1ZSA9IHZhbHVlXHJcblxyXG5cclxuICAgICAgICBpZiAodGhpcy5fcmVuZGVyKSB7XHJcbiAgICAgICAgICAgIGxldCBjb250cm9sID0gY29yZXVpVGFibGVFbGVtZW50cy5nZXRTZWFyY2hDb250cm9sKHRoaXMuX3RhYmxlLmdldElkKCksIHRoaXMuX2lkKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChjb250cm9sWzBdKSB7XHJcbiAgICAgICAgICAgICAgICAkKCdpbnB1dCcsIGNvbnRyb2wpLnZhbChcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl92YWx1ZSA9PT0gbnVsbCA/ICcnIDogdGhpcy5fdmFsdWVcclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSDQt9C90LDRh9C10L3QuNGPXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfG51bGx9XHJcbiAgICAgKi9cclxuICAgIGdldFZhbHVlOiBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgIGxldCBjb250cm9sID0gY29yZXVpVGFibGVFbGVtZW50cy5nZXRTZWFyY2hDb250cm9sKHRoaXMuX3RhYmxlLmdldElkKCksIHRoaXMuX2lkKTtcclxuICAgICAgICBsZXQgaW5wdXQgICA9ICQoJ2lucHV0JywgY29udHJvbCk7XHJcblxyXG4gICAgICAgIGlmIChpbnB1dFswXSkge1xyXG4gICAgICAgICAgICBsZXQgdmFsdWUgPSBpbnB1dC52YWwoKTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnICYmIHZhbHVlICE9PSAnJykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y8g0YHQvtCx0YvRgtC40LlcclxuICAgICAqIEByZXR1cm5zIHtvYmplY3R9XHJcbiAgICAgKi9cclxuICAgIGluaXRFdmVudHM6IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgbGV0IGNvbnRhaW5lciA9IGNvcmV1aVRhYmxlRWxlbWVudHMuZ2V0U2VhcmNoQ29udGFpbmVyKHRoaXMuX3RhYmxlLmdldElkKCkpO1xyXG4gICAgICAgIGxldCBjb250cm9sICAgPSBjb3JldWlUYWJsZUVsZW1lbnRzLmdldFNlYXJjaENvbnRyb2wodGhpcy5fdGFibGUuZ2V0SWQoKSwgdGhpcy5faWQpO1xyXG4gICAgICAgIGxldCB0aGF0ICAgICAgPSB0aGlzO1xyXG5cclxuICAgICAgICAkKCdpbnB1dCcsIGNvbnRyb2wpLmtleXVwKGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgaWYgKGUua2V5ID09PSAnRW50ZXInIHx8IGUua2V5Q29kZSA9PT0gMTMpIHtcclxuICAgICAgICAgICAgICAgIHRoYXQuX3RhYmxlLnNlYXJjaFJlY29yZHMoKTtcclxuICAgICAgICAgICAgICAgIGNvbnRhaW5lci5mYWRlT3V0KCdmYXN0Jyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KTQvtGA0LzQuNGA0L7QstCw0L3QuNC1INC60L7QvdGC0LXQvdGC0LBcclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIHJlbmRlcjogZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgIHRoaXMuX3JlbmRlciA9IHRydWU7XHJcblxyXG4gICAgICAgIGlmICggISBjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KHRoaXMuX29wdGlvbnMuYXR0cikpIHtcclxuICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy5hdHRyID0ge307XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnd2lkdGgnKSAmJlxyXG4gICAgICAgICAgICBjb3JldWlUYWJsZVV0aWxzLmlzTnVtZXJpYyh0aGlzLl9vcHRpb25zLndpZHRoKVxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy5hdHRyLmhhc093blByb3BlcnR5KCdzdHlsZScpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9vcHRpb25zLmF0dHJbJ3N0eWxlJ10gKz0gJzt3aWR0aDonICsgdGhpcy5fb3B0aW9ucy53aWR0aCArICdweCc7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9vcHRpb25zLmF0dHJbJ3N0eWxlJ10gPSAnd2lkdGg6JyArIHRoaXMuX29wdGlvbnMud2lkdGggKyAncHgnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9vcHRpb25zLmF0dHJbJ25hbWUnXSAgPSB0eXBlb2YgdGhpcy5fb3B0aW9ucy5maWVsZCA9PT0gJ3N0cmluZycgPyB0aGlzLl9vcHRpb25zLmZpZWxkIDogJyc7XHJcbiAgICAgICAgdGhpcy5fb3B0aW9ucy5hdHRyWyd2YWx1ZSddID0gdHlwZW9mIHRoaXMuX3ZhbHVlID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgdGhpcy5fdmFsdWUgPT09ICdudW1iZXInXHJcbiAgICAgICAgICAgID8gdGhpcy5fdmFsdWVcclxuICAgICAgICAgICAgOiAnJztcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMuYXR0ci5oYXNPd25Qcm9wZXJ0eSgndHlwZScpKSB7XHJcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9vcHRpb25zLmF0dHIudHlwZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBhdHRyaWJ1dGVzID0gW107XHJcblxyXG4gICAgICAgICQuZWFjaCh0aGlzLl9vcHRpb25zLmF0dHIsIGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xyXG4gICAgICAgICAgICBhdHRyaWJ1dGVzLnB1c2gobmFtZSArICc9XCInICsgdmFsdWUgKyAnXCInKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGVqcy5yZW5kZXIoY29yZXVpVGFibGVUcGxbJ3NlYXJjaC90ZXh0Lmh0bWwnXSwge1xyXG4gICAgICAgICAgICBhdHRyOiBhdHRyaWJ1dGVzLmxlbmd0aCA+IDAgPyAoJyAnICsgYXR0cmlidXRlcy5qb2luKCcgJykpIDogJycsXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn0iLCJcclxuaW1wb3J0IGNvcmV1aVRhYmxlICAgICAgICAgZnJvbSBcIi4uL2NvcmV1aS50YWJsZVwiO1xyXG5pbXBvcnQgY29yZXVpVGFibGVUcGwgICAgICBmcm9tIFwiLi4vY29yZXVpLnRhYmxlLnRlbXBsYXRlc1wiO1xyXG5pbXBvcnQgY29yZXVpVGFibGVVdGlscyAgICBmcm9tIFwiLi4vY29yZXVpLnRhYmxlLnV0aWxzXCI7XHJcbmltcG9ydCBjb3JldWlUYWJsZUVsZW1lbnRzIGZyb20gXCIuLi9jb3JldWkudGFibGUuZWxlbWVudHNcIjtcclxuXHJcbmNvcmV1aVRhYmxlLnNlYXJjaC5udW1iZXIgPSB7XHJcblxyXG4gICAgX2lkOiBudWxsLFxyXG4gICAgX3RhYmxlOiBudWxsLFxyXG4gICAgX3ZhbHVlOiBudWxsLFxyXG4gICAgX3JlbmRlcjogZmFsc2UsXHJcbiAgICBfb3B0aW9uczoge1xyXG4gICAgICAgIGlkOiBudWxsLFxyXG4gICAgICAgIHR5cGU6ICdudW1iZXInLFxyXG4gICAgICAgIGZpZWxkOiBudWxsLFxyXG4gICAgICAgIGxhYmVsOiBudWxsLFxyXG4gICAgICAgIHZhbHVlOiBudWxsLFxyXG4gICAgICAgIHdpZHRoOiAyMDAsXHJcbiAgICAgICAgYXR0cjoge1xyXG4gICAgICAgICAgICBjbGFzczogXCJmb3JtLWNvbnRyb2wgZC1pbmxpbmUtYmxvY2tcIixcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPXHJcbiAgICAgKiBAcGFyYW0ge0NvcmVVSS50YWJsZS5pbnN0YW5jZX0gdGFibGVcclxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSAgICAgICAgICAgICAgICBvcHRpb25zXHJcbiAgICAgKi9cclxuICAgIGluaXQ6IGZ1bmN0aW9uICh0YWJsZSwgb3B0aW9ucykge1xyXG5cclxuICAgICAgICB0aGlzLl9vcHRpb25zID0gJC5leHRlbmQodHJ1ZSwge30sIHRoaXMuX29wdGlvbnMsIG9wdGlvbnMpO1xyXG4gICAgICAgIHRoaXMuX3RhYmxlICAgPSB0YWJsZTtcclxuICAgICAgICB0aGlzLl9pZCAgICAgID0gdGhpcy5fb3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnaWQnKSAmJiB0eXBlb2YgdGhpcy5fb3B0aW9ucy5pZCA9PT0gJ3N0cmluZycgJiYgdGhpcy5fb3B0aW9ucy5pZFxyXG4gICAgICAgICAgICA/IHRoaXMuX29wdGlvbnMuaWRcclxuICAgICAgICAgICAgOiBjb3JldWlUYWJsZVV0aWxzLmhhc2hDb2RlKCk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLnZhbHVlICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0VmFsdWUodGhpcy5fb3B0aW9ucy52YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0L/QsNGA0LDQvNC10YLRgNC+0LJcclxuICAgICAqIEByZXR1cm5zIHtvYmplY3R9XHJcbiAgICAgKi9cclxuICAgIGdldE9wdGlvbnM6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gJC5leHRlbmQodHJ1ZSwge30sIHRoaXMuX29wdGlvbnMpO1xyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUgaWRcclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIGdldElkOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lkO1xyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQo9GB0YLQsNC90L7QstC60LAg0LfQvdCw0YfQtdC90LjRj1xyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHZhbHVlXHJcbiAgICAgKi9cclxuICAgIHNldFZhbHVlOiBmdW5jdGlvbiAodmFsdWUpIHtcclxuXHJcbiAgICAgICAgaWYgKHZhbHVlKSB7XHJcbiAgICAgICAgICAgIGlmICggISBjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KHZhbHVlKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBsZXQgbnVtYmVyU3RhcnQgPSBudWxsO1xyXG4gICAgICAgICAgICBsZXQgbnVtYmVyRW5kICAgPSBudWxsO1xyXG5cclxuICAgICAgICAgICAgaWYgKHZhbHVlLmhhc093blByb3BlcnR5KCdzdGFydCcpICYmXHJcbiAgICAgICAgICAgICAgICBbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiB2YWx1ZS5zdGFydCkgPj0gMFxyXG4gICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgIG51bWJlclN0YXJ0ID0gdmFsdWUuc3RhcnQ7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh2YWx1ZS5oYXNPd25Qcm9wZXJ0eSgnZW5kJykgJiZcclxuICAgICAgICAgICAgICAgIFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIHZhbHVlLmVuZCkgPj0gMFxyXG4gICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgIG51bWJlckVuZCA9IHZhbHVlLmVuZDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKG51bWJlclN0YXJ0ID09PSBudWxsICYmIG51bWJlckVuZCA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fdmFsdWUgPSBudWxsO1xyXG5cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3ZhbHVlID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0OiBudW1iZXJTdGFydCxcclxuICAgICAgICAgICAgICAgICAgICBlbmQ6IG51bWJlckVuZFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLl92YWx1ZSA9IG51bGw7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX3JlbmRlcikge1xyXG4gICAgICAgICAgICBsZXQgY29udHJvbCA9IGNvcmV1aVRhYmxlRWxlbWVudHMuZ2V0U2VhcmNoQ29udHJvbCh0aGlzLl90YWJsZS5nZXRJZCgpLCB0aGlzLl9pZCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoY29udHJvbFswXSkge1xyXG4gICAgICAgICAgICAgICAgbGV0IGlucHV0U3RhcnQgPSAkKCdpbnB1dC5udW1iZXItc3RhcnQnLCBjb250cm9sKTtcclxuICAgICAgICAgICAgICAgIGxldCBpbnB1dEVuZCAgID0gJCgnaW5wdXQubnVtYmVyLWVuZCcsIGNvbnRyb2wpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl92YWx1ZSA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlucHV0U3RhcnQudmFsKCcnKTtcclxuICAgICAgICAgICAgICAgICAgICBpbnB1dEVuZC52YWwoJycpO1xyXG5cclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY29yZXVpVGFibGVVdGlscy5pc09iamVjdCh0aGlzLl92YWx1ZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpbnB1dFN0YXJ0LnZhbCh0eXBlb2YgdGhpcy5fdmFsdWUuc3RhcnQgIT09IG51bGwgPyB0aGlzLl92YWx1ZS5zdGFydCA6ICcnKTtcclxuICAgICAgICAgICAgICAgICAgICBpbnB1dEVuZC52YWwodHlwZW9mIHRoaXMuX3ZhbHVlLmVuZCAhPT0gbnVsbCA/IHRoaXMuX3ZhbHVlLmVuZCA6ICcnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC30L3QsNGH0LXQvdC40Y9cclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd8bnVsbH1cclxuICAgICAqL1xyXG4gICAgZ2V0VmFsdWU6IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgbGV0IGNvbnRyb2wgICAgPSBjb3JldWlUYWJsZUVsZW1lbnRzLmdldFNlYXJjaENvbnRyb2wodGhpcy5fdGFibGUuZ2V0SWQoKSwgdGhpcy5faWQpO1xyXG4gICAgICAgIGxldCBpbnB1dFN0YXJ0ID0gJCgnaW5wdXQubnVtYmVyLXN0YXJ0JywgY29udHJvbCk7XHJcbiAgICAgICAgbGV0IGlucHV0RW5kICAgPSAkKCdpbnB1dC5udW1iZXItZW5kJywgY29udHJvbCk7XHJcblxyXG4gICAgICAgIGlmIChpbnB1dFN0YXJ0WzBdICYmIGlucHV0RW5kWzBdKSB7XHJcblxyXG4gICAgICAgICAgICBsZXQgdmFsdWVTdGFydCA9IGlucHV0U3RhcnQudmFsKCk7XHJcbiAgICAgICAgICAgIGxldCB2YWx1ZUVuZCAgID0gaW5wdXRFbmQudmFsKCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgICAgICAodHlwZW9mIHZhbHVlU3RhcnQgPT09ICdzdHJpbmcnICYmIHZhbHVlU3RhcnQgIT09ICcnKSB8fFxyXG4gICAgICAgICAgICAgICAgKHR5cGVvZiB2YWx1ZUVuZCA9PT0gJ3N0cmluZycgJiYgdmFsdWVFbmQgIT09ICcnKVxyXG4gICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IHZhbHVlU3RhcnQgIT09ICcnID8gdmFsdWVTdGFydCA6IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgZW5kOiB2YWx1ZUVuZCAhPT0gJycgPyB2YWx1ZUVuZCA6IG51bGwsXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y8g0YHQvtCx0YvRgtC40LlcclxuICAgICAqIEByZXR1cm5zIHtvYmplY3R9XHJcbiAgICAgKi9cclxuICAgIGluaXRFdmVudHM6IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgbGV0IGNvbnRhaW5lciA9IGNvcmV1aVRhYmxlRWxlbWVudHMuZ2V0U2VhcmNoQ29udGFpbmVyKHRoaXMuX3RhYmxlLmdldElkKCkpO1xyXG4gICAgICAgIGxldCBjb250cm9sICAgPSBjb3JldWlUYWJsZUVsZW1lbnRzLmdldFNlYXJjaENvbnRyb2wodGhpcy5fdGFibGUuZ2V0SWQoKSwgdGhpcy5faWQpO1xyXG4gICAgICAgIGxldCB0aGF0ICAgICAgPSB0aGlzO1xyXG5cclxuICAgICAgICAkKCdpbnB1dC5udW1iZXItc3RhcnQsIGlucHV0Lm51bWJlci1lbmQnLCBjb250cm9sKS5rZXl1cChmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgIGlmIChlLmtleSA9PT0gJ0VudGVyJyB8fCBlLmtleUNvZGUgPT09IDEzKSB7XHJcbiAgICAgICAgICAgICAgICB0aGF0Ll90YWJsZS5zZWFyY2hSZWNvcmRzKCk7XHJcbiAgICAgICAgICAgICAgICBjb250YWluZXIuZmFkZU91dCgnZmFzdCcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCk0L7RgNC80LjRgNC+0LLQsNC90LjQtSDQutC+0L3RgtC10L3RgtCwXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxyXG4gICAgICovXHJcbiAgICByZW5kZXI6IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICB0aGlzLl9yZW5kZXIgPSB0cnVlO1xyXG5cclxuICAgICAgICBpZiAoICEgY29yZXVpVGFibGVVdGlscy5pc09iamVjdCh0aGlzLl9vcHRpb25zLmF0dHIpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX29wdGlvbnMuYXR0ciA9IHt9O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMuaGFzT3duUHJvcGVydHkoJ3dpZHRoJykgJiZcclxuICAgICAgICAgICAgY29yZXVpVGFibGVVdGlscy5pc051bWVyaWModGhpcy5fb3B0aW9ucy53aWR0aClcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMuYXR0ci5oYXNPd25Qcm9wZXJ0eSgnc3R5bGUnKSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy5hdHRyWydzdHlsZSddICs9ICc7d2lkdGg6JyArIHRoaXMuX29wdGlvbnMud2lkdGggKyAncHgnO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy5hdHRyWydzdHlsZSddID0gJ3dpZHRoOicgKyB0aGlzLl9vcHRpb25zLndpZHRoICsgJ3B4JztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMuYXR0ci5oYXNPd25Qcm9wZXJ0eSgndHlwZScpKSB7XHJcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9vcHRpb25zLmF0dHIudHlwZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLmF0dHIuaGFzT3duUHJvcGVydHkoJ3ZhbHVlJykpIHtcclxuICAgICAgICAgICAgZGVsZXRlIHRoaXMuX29wdGlvbnMuYXR0ci52YWx1ZTtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICBsZXQgZmllbGQgICAgID0gdHlwZW9mIHRoaXMuX29wdGlvbnMuZmllbGQgPT09ICdzdHJpbmcnID8gdGhpcy5fb3B0aW9ucy5maWVsZCA6ICcnO1xyXG4gICAgICAgIGxldCBzdGFydEF0dHIgPSBbXTtcclxuICAgICAgICBsZXQgc3RhcnRFbmQgID0gW107XHJcblxyXG5cclxuICAgICAgICAkLmVhY2godGhpcy5fb3B0aW9ucy5hdHRyLCBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcclxuICAgICAgICAgICAgaWYgKFsnbmFtZScsICd2YWx1ZScsICdjbGFzcyddLmluZGV4T2YobmFtZSkgPj0gMCB8fFxyXG4gICAgICAgICAgICAgICAgWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2YgdmFsdWUpIDwgMFxyXG4gICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgc3RhcnRBdHRyLnB1c2gobmFtZSArICc9XCInICsgdmFsdWUgKyAnXCInKTtcclxuICAgICAgICAgICAgc3RhcnRFbmQucHVzaChuYW1lICsgJz1cIicgKyB2YWx1ZSArICdcIicpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy5hdHRyLmhhc093blByb3BlcnR5KCdjbGFzcycpICYmXHJcbiAgICAgICAgICAgIFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIHRoaXMuX29wdGlvbnMuYXR0ci5jbGFzcykgPj0gMFxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICBzdGFydEF0dHIucHVzaCgnY2xhc3M9XCInICsgdGhpcy5fb3B0aW9ucy5hdHRyLmNsYXNzICsgJyBudW1iZXItc3RhcnRcIicpO1xyXG4gICAgICAgICAgICBzdGFydEVuZC5wdXNoKCdjbGFzcz1cIicgKyB0aGlzLl9vcHRpb25zLmF0dHIuY2xhc3MgKyAnIG51bWJlci1lbmRcIicpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHN0YXJ0QXR0ci5wdXNoKCdjbGFzcz1cIm51bWJlci1zdGFydFwiJyk7XHJcbiAgICAgICAgICAgIHN0YXJ0RW5kLnB1c2goJ2NsYXNzPVwibnVtYmVyLWVuZFwiJyk7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgaWYgKGZpZWxkKSB7XHJcbiAgICAgICAgICAgIHN0YXJ0QXR0ci5wdXNoKCduYW1lPVwiJyArIGZpZWxkICsgJ1tzdGFydF1cIicpO1xyXG4gICAgICAgICAgICBzdGFydEVuZC5wdXNoKCduYW1lPVwiJyArIGZpZWxkICsgJ1tlbmRdXCInKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHN0YXJ0QXR0ci5wdXNoKCd2YWx1ZT1cIicgKyAodGhpcy5fdmFsdWUgPyB0aGlzLl92YWx1ZS5zdGFydCA6ICcnKSArICdcIicpO1xyXG4gICAgICAgIHN0YXJ0RW5kLnB1c2goJ3ZhbHVlPVwiJyArICh0aGlzLl92YWx1ZSA/IHRoaXMuX3ZhbHVlLmVuZCA6ICcnKSArICdcIicpO1xyXG5cclxuXHJcbiAgICAgICAgcmV0dXJuIGVqcy5yZW5kZXIoY29yZXVpVGFibGVUcGxbJ3NlYXJjaC9udW1iZXIuaHRtbCddLCB7XHJcbiAgICAgICAgICAgIHN0YXJ0QXR0cjogc3RhcnRBdHRyLmxlbmd0aCA+IDAgPyAoJyAnICsgc3RhcnRBdHRyLmpvaW4oJyAnKSkgOiAnJyxcclxuICAgICAgICAgICAgZW5kQXR0cjogc3RhcnRFbmQubGVuZ3RoID4gMCA/ICgnICcgKyBzdGFydEVuZC5qb2luKCcgJykpIDogJycsXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn0iLCJcclxuaW1wb3J0IGNvcmV1aVRhYmxlICAgICAgZnJvbSBcIi4uL2NvcmV1aS50YWJsZVwiO1xyXG5pbXBvcnQgY29yZXVpVGFibGVUcGwgICBmcm9tIFwiLi4vY29yZXVpLnRhYmxlLnRlbXBsYXRlc1wiO1xyXG5pbXBvcnQgY29yZXVpVGFibGVVdGlscyBmcm9tIFwiLi4vY29yZXVpLnRhYmxlLnV0aWxzXCI7XHJcbmltcG9ydCBjb3JldWlUYWJsZUVsZW1lbnRzIGZyb20gXCIuLi9jb3JldWkudGFibGUuZWxlbWVudHNcIjtcclxuXHJcbmNvcmV1aVRhYmxlLnNlYXJjaC5kYXRlID0ge1xyXG5cclxuICAgIF9pZDogbnVsbCxcclxuICAgIF90YWJsZTogbnVsbCxcclxuICAgIF92YWx1ZTogbnVsbCxcclxuICAgIF9yZW5kZXI6IGZhbHNlLFxyXG4gICAgX29wdGlvbnM6IHtcclxuICAgICAgICBpZDogbnVsbCxcclxuICAgICAgICB0eXBlOiAnZGF0ZScsXHJcbiAgICAgICAgZmllbGQ6IG51bGwsXHJcbiAgICAgICAgbGFiZWw6IG51bGwsXHJcbiAgICAgICAgdmFsdWU6IG51bGwsXHJcbiAgICAgICAgd2lkdGg6IDIwMCxcclxuICAgICAgICBhdHRyOiB7XHJcbiAgICAgICAgICAgIGNsYXNzOiBcImZvcm0tY29udHJvbCBkLWlubGluZS1ibG9ja1wiLFxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y9cclxuICAgICAqIEBwYXJhbSB7Q29yZVVJLnRhYmxlLmluc3RhbmNlfSB0YWJsZVxyXG4gICAgICogQHBhcmFtIHtvYmplY3R9ICAgICAgICAgICAgICAgIG9wdGlvbnNcclxuICAgICAqL1xyXG4gICAgaW5pdDogZnVuY3Rpb24gKHRhYmxlLCBvcHRpb25zKSB7XHJcblxyXG4gICAgICAgIHRoaXMuX29wdGlvbnMgPSAkLmV4dGVuZCh0cnVlLCB7fSwgdGhpcy5fb3B0aW9ucywgb3B0aW9ucyk7XHJcbiAgICAgICAgdGhpcy5fdGFibGUgICA9IHRhYmxlO1xyXG4gICAgICAgIHRoaXMuX2lkICAgICAgPSB0aGlzLl9vcHRpb25zLmhhc093blByb3BlcnR5KCdpZCcpICYmIHR5cGVvZiB0aGlzLl9vcHRpb25zLmlkID09PSAnc3RyaW5nJyAmJiB0aGlzLl9vcHRpb25zLmlkXHJcbiAgICAgICAgICAgID8gdGhpcy5fb3B0aW9ucy5pZFxyXG4gICAgICAgICAgICA6IGNvcmV1aVRhYmxlVXRpbHMuaGFzaENvZGUoKTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMudmFsdWUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5zZXRWYWx1ZSh0aGlzLl9vcHRpb25zLnZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSDQv9Cw0YDQsNC80LXRgtGA0L7QslxyXG4gICAgICogQHJldHVybnMge29iamVjdH1cclxuICAgICAqL1xyXG4gICAgZ2V0T3B0aW9uczogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiAkLmV4dGVuZCh0cnVlLCB7fSwgdGhpcy5fb3B0aW9ucyk7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSBpZFxyXG4gICAgICogQHJldHVybnMge3N0cmluZ31cclxuICAgICAqL1xyXG4gICAgZ2V0SWQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5faWQ7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCj0YHRgtCw0L3QvtCy0LrQsCDQt9C90LDRh9C10L3QuNGPXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcclxuICAgICAqL1xyXG4gICAgc2V0VmFsdWU6IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG5cclxuICAgICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJyAmJiB2YWx1ZSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodmFsdWUgJiZcclxuICAgICAgICAgICAgKFxyXG4gICAgICAgICAgICAgICAgdmFsdWUubWF0Y2goL15cXGR7NH1cXC1cXGR7Mn1cXC1cXGR7Mn0kLykgPT09IG51bGwgfHxcclxuICAgICAgICAgICAgICAgIGlzTmFOKG5ldyBEYXRlKHZhbHVlKSlcclxuICAgICAgICAgICAgKVxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgdGhpcy5fdmFsdWUgPSB2YWx1ZTtcclxuXHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9yZW5kZXIpIHtcclxuICAgICAgICAgICAgbGV0IGNvbnRyb2wgPSBjb3JldWlUYWJsZUVsZW1lbnRzLmdldFNlYXJjaENvbnRyb2wodGhpcy5fdGFibGUuZ2V0SWQoKSwgdGhpcy5faWQpO1xyXG5cclxuICAgICAgICAgICAgaWYgKGNvbnRyb2xbMF0pIHtcclxuICAgICAgICAgICAgICAgICQoJ2lucHV0JywgY29udHJvbCkudmFsKFxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3ZhbHVlID09PSBudWxsID8gJycgOiB0aGlzLl92YWx1ZVxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC30L3QsNGH0LXQvdC40Y9cclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd8bnVsbH1cclxuICAgICAqL1xyXG4gICAgZ2V0VmFsdWU6IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgbGV0IGNvbnRyb2wgPSBjb3JldWlUYWJsZUVsZW1lbnRzLmdldFNlYXJjaENvbnRyb2wodGhpcy5fdGFibGUuZ2V0SWQoKSwgdGhpcy5faWQpO1xyXG4gICAgICAgIGxldCBpbnB1dCAgID0gJCgnaW5wdXQnLCBjb250cm9sKTtcclxuXHJcbiAgICAgICAgaWYgKGlucHV0WzBdKSB7XHJcbiAgICAgICAgICAgIGxldCB2YWx1ZSA9IGlucHV0LnZhbCgpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYgdmFsdWUgIT09ICcnKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQmNC90LjRhtC40LDQu9C40LfQsNGG0LjRjyDRgdC+0LHRi9GC0LjQuVxyXG4gICAgICogQHJldHVybnMge29iamVjdH1cclxuICAgICAqL1xyXG4gICAgaW5pdEV2ZW50czogZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICBsZXQgY29udGFpbmVyID0gY29yZXVpVGFibGVFbGVtZW50cy5nZXRTZWFyY2hDb250YWluZXIodGhpcy5fdGFibGUuZ2V0SWQoKSk7XHJcbiAgICAgICAgbGV0IGNvbnRyb2wgICA9IGNvcmV1aVRhYmxlRWxlbWVudHMuZ2V0U2VhcmNoQ29udHJvbCh0aGlzLl90YWJsZS5nZXRJZCgpLCB0aGlzLl9pZCk7XHJcbiAgICAgICAgbGV0IHRoYXQgICAgICA9IHRoaXM7XHJcblxyXG4gICAgICAgICQoJ2lucHV0JywgY29udHJvbCkua2V5dXAoZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICBpZiAoZS5rZXkgPT09ICdFbnRlcicgfHwgZS5rZXlDb2RlID09PSAxMykge1xyXG4gICAgICAgICAgICAgICAgdGhhdC5fdGFibGUuc2VhcmNoUmVjb3JkcygpO1xyXG4gICAgICAgICAgICAgICAgY29udGFpbmVyLmZhZGVPdXQoJ2Zhc3QnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQpNC+0YDQvNC40YDQvtCy0LDQvdC40LUg0LrQvtC90YLQtdC90YLQsFxyXG4gICAgICogQHJldHVybnMge3N0cmluZ31cclxuICAgICAqL1xyXG4gICAgcmVuZGVyOiBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgdGhpcy5fcmVuZGVyID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgaWYgKCAhIGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QodGhpcy5fb3B0aW9ucy5hdHRyKSkge1xyXG4gICAgICAgICAgICB0aGlzLl9vcHRpb25zLmF0dHIgPSB7fTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLmhhc093blByb3BlcnR5KCd3aWR0aCcpICYmXHJcbiAgICAgICAgICAgIGNvcmV1aVRhYmxlVXRpbHMuaXNOdW1lcmljKHRoaXMuX29wdGlvbnMud2lkdGgpXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9vcHRpb25zLmF0dHIuaGFzT3duUHJvcGVydHkoJ3N0eWxlJykpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX29wdGlvbnMuYXR0clsnc3R5bGUnXSArPSAnO3dpZHRoOicgKyB0aGlzLl9vcHRpb25zLndpZHRoICsgJ3B4JztcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX29wdGlvbnMuYXR0clsnc3R5bGUnXSA9ICd3aWR0aDonICsgdGhpcy5fb3B0aW9ucy53aWR0aCArICdweCc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX29wdGlvbnMuYXR0clsnbmFtZSddICA9IHR5cGVvZiB0aGlzLl9vcHRpb25zLmZpZWxkID09PSAnc3RyaW5nJyA/IHRoaXMuX29wdGlvbnMuZmllbGQgOiAnJztcclxuICAgICAgICB0aGlzLl9vcHRpb25zLmF0dHJbJ3ZhbHVlJ10gPSB0eXBlb2YgdGhpcy5fdmFsdWUgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiB0aGlzLl92YWx1ZSA9PT0gJ251bWJlcidcclxuICAgICAgICAgICAgPyB0aGlzLl92YWx1ZVxyXG4gICAgICAgICAgICA6ICcnO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy5hdHRyLmhhc093blByb3BlcnR5KCd0eXBlJykpIHtcclxuICAgICAgICAgICAgZGVsZXRlIHRoaXMuX29wdGlvbnMuYXR0ci50eXBlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IGF0dHJpYnV0ZXMgPSBbXTtcclxuXHJcbiAgICAgICAgJC5lYWNoKHRoaXMuX29wdGlvbnMuYXR0ciwgZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XHJcbiAgICAgICAgICAgIGF0dHJpYnV0ZXMucHVzaChuYW1lICsgJz1cIicgKyB2YWx1ZSArICdcIicpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gZWpzLnJlbmRlcihjb3JldWlUYWJsZVRwbFsnc2VhcmNoL2RhdGUuaHRtbCddLCB7XHJcbiAgICAgICAgICAgIGF0dHI6IGF0dHJpYnV0ZXMubGVuZ3RoID4gMCA/ICgnICcgKyBhdHRyaWJ1dGVzLmpvaW4oJyAnKSkgOiAnJyxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufSIsIlxyXG5pbXBvcnQgY29yZXVpVGFibGUgICAgICBmcm9tIFwiLi4vY29yZXVpLnRhYmxlXCI7XHJcbmltcG9ydCBjb3JldWlUYWJsZVRwbCAgIGZyb20gXCIuLi9jb3JldWkudGFibGUudGVtcGxhdGVzXCI7XHJcbmltcG9ydCBjb3JldWlUYWJsZVV0aWxzIGZyb20gXCIuLi9jb3JldWkudGFibGUudXRpbHNcIjtcclxuaW1wb3J0IGNvcmV1aVRhYmxlRWxlbWVudHMgZnJvbSBcIi4uL2NvcmV1aS50YWJsZS5lbGVtZW50c1wiO1xyXG5cclxuY29yZXVpVGFibGUuc2VhcmNoLmRhdGVfbW9udGggPSB7XHJcblxyXG4gICAgX2lkOiBudWxsLFxyXG4gICAgX3RhYmxlOiBudWxsLFxyXG4gICAgX3ZhbHVlOiBudWxsLFxyXG4gICAgX3JlbmRlcjogZmFsc2UsXHJcbiAgICBfb3B0aW9uczoge1xyXG4gICAgICAgIGlkOiBudWxsLFxyXG4gICAgICAgIHR5cGU6ICdkYXRlX21vbnRoJyxcclxuICAgICAgICBmaWVsZDogbnVsbCxcclxuICAgICAgICBsYWJlbDogbnVsbCxcclxuICAgICAgICB2YWx1ZTogbnVsbCxcclxuICAgICAgICB3aWR0aDogMjAwLFxyXG4gICAgICAgIGF0dHI6IHtcclxuICAgICAgICAgICAgY2xhc3M6IFwiZm9ybS1jb250cm9sIGQtaW5saW5lLWJsb2NrXCIsXHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQmNC90LjRhtC40LDQu9C40LfQsNGG0LjRj1xyXG4gICAgICogQHBhcmFtIHtDb3JlVUkudGFibGUuaW5zdGFuY2V9IHRhYmxlXHJcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gICAgICAgICAgICAgICAgb3B0aW9uc1xyXG4gICAgICovXHJcbiAgICBpbml0OiBmdW5jdGlvbiAodGFibGUsIG9wdGlvbnMpIHtcclxuXHJcbiAgICAgICAgdGhpcy5fb3B0aW9ucyA9ICQuZXh0ZW5kKHRydWUsIHt9LCB0aGlzLl9vcHRpb25zLCBvcHRpb25zKTtcclxuICAgICAgICB0aGlzLl90YWJsZSAgID0gdGFibGU7XHJcbiAgICAgICAgdGhpcy5faWQgICAgICA9IHRoaXMuX29wdGlvbnMuaGFzT3duUHJvcGVydHkoJ2lkJykgJiYgdHlwZW9mIHRoaXMuX29wdGlvbnMuaWQgPT09ICdzdHJpbmcnICYmIHRoaXMuX29wdGlvbnMuaWRcclxuICAgICAgICAgICAgPyB0aGlzLl9vcHRpb25zLmlkXHJcbiAgICAgICAgICAgIDogY29yZXVpVGFibGVVdGlscy5oYXNoQ29kZSgpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy52YWx1ZSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLnNldFZhbHVlKHRoaXMuX29wdGlvbnMudmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC/0LDRgNCw0LzQtdGC0YDQvtCyXHJcbiAgICAgKiBAcmV0dXJucyB7b2JqZWN0fVxyXG4gICAgICovXHJcbiAgICBnZXRPcHRpb25zOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuICQuZXh0ZW5kKHRydWUsIHt9LCB0aGlzLl9vcHRpb25zKTtcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1IGlkXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxyXG4gICAgICovXHJcbiAgICBnZXRJZDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9pZDtcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KPRgdGC0LDQvdC+0LLQutCwINC30L3QsNGH0LXQvdC40Y9cclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfG51bGx9IHZhbHVlXHJcbiAgICAgKi9cclxuICAgIHNldFZhbHVlOiBmdW5jdGlvbiAodmFsdWUpIHtcclxuXHJcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycgJiYgdmFsdWUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHZhbHVlICYmXHJcbiAgICAgICAgICAgIChcclxuICAgICAgICAgICAgICAgIHZhbHVlLm1hdGNoKC9eXFxkezR9XFwtXFxkezJ9JC8pID09PSBudWxsIHx8XHJcbiAgICAgICAgICAgICAgICBpc05hTihuZXcgRGF0ZSh2YWx1ZSkpXHJcbiAgICAgICAgICAgIClcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fdmFsdWUgPSB2YWx1ZTtcclxuXHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9yZW5kZXIpIHtcclxuICAgICAgICAgICAgbGV0IGNvbnRyb2wgPSBjb3JldWlUYWJsZUVsZW1lbnRzLmdldFNlYXJjaENvbnRyb2wodGhpcy5fdGFibGUuZ2V0SWQoKSwgdGhpcy5faWQpO1xyXG5cclxuICAgICAgICAgICAgaWYgKGNvbnRyb2xbMF0pIHtcclxuICAgICAgICAgICAgICAgICQoJ2lucHV0JywgY29udHJvbCkudmFsKFxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3ZhbHVlID09PSBudWxsID8gJycgOiB0aGlzLl92YWx1ZVxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC30L3QsNGH0LXQvdC40Y9cclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd8bnVsbH1cclxuICAgICAqL1xyXG4gICAgZ2V0VmFsdWU6IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgbGV0IGNvbnRyb2wgPSBjb3JldWlUYWJsZUVsZW1lbnRzLmdldFNlYXJjaENvbnRyb2wodGhpcy5fdGFibGUuZ2V0SWQoKSwgdGhpcy5faWQpO1xyXG4gICAgICAgIGxldCBpbnB1dCAgID0gJCgnaW5wdXQnLCBjb250cm9sKTtcclxuXHJcbiAgICAgICAgaWYgKGlucHV0WzBdKSB7XHJcbiAgICAgICAgICAgIGxldCB2YWx1ZSA9IGlucHV0LnZhbCgpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYgdmFsdWUgIT09ICcnKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfSxcclxuXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y8g0YHQvtCx0YvRgtC40LlcclxuICAgICAqIEByZXR1cm5zIHtvYmplY3R9XHJcbiAgICAgKi9cclxuICAgIGluaXRFdmVudHM6IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgbGV0IGNvbnRhaW5lciA9IGNvcmV1aVRhYmxlRWxlbWVudHMuZ2V0U2VhcmNoQ29udGFpbmVyKHRoaXMuX3RhYmxlLmdldElkKCkpO1xyXG4gICAgICAgIGxldCBjb250cm9sICAgPSBjb3JldWlUYWJsZUVsZW1lbnRzLmdldFNlYXJjaENvbnRyb2wodGhpcy5fdGFibGUuZ2V0SWQoKSwgdGhpcy5faWQpO1xyXG4gICAgICAgIGxldCB0aGF0ICAgICAgPSB0aGlzO1xyXG5cclxuICAgICAgICAkKCdpbnB1dCcsIGNvbnRyb2wpLmtleXVwKGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgaWYgKGUua2V5ID09PSAnRW50ZXInIHx8IGUua2V5Q29kZSA9PT0gMTMpIHtcclxuICAgICAgICAgICAgICAgIHRoYXQuX3RhYmxlLnNlYXJjaFJlY29yZHMoKTtcclxuICAgICAgICAgICAgICAgIGNvbnRhaW5lci5mYWRlT3V0KCdmYXN0Jyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KTQvtGA0LzQuNGA0L7QstCw0L3QuNC1INC60L7QvdGC0LXQvdGC0LBcclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIHJlbmRlcjogZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgIHRoaXMuX3JlbmRlciA9IHRydWU7XHJcblxyXG4gICAgICAgIGlmICggISBjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KHRoaXMuX29wdGlvbnMuYXR0cikpIHtcclxuICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy5hdHRyID0ge307XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnd2lkdGgnKSAmJlxyXG4gICAgICAgICAgICBjb3JldWlUYWJsZVV0aWxzLmlzTnVtZXJpYyh0aGlzLl9vcHRpb25zLndpZHRoKVxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy5hdHRyLmhhc093blByb3BlcnR5KCdzdHlsZScpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9vcHRpb25zLmF0dHJbJ3N0eWxlJ10gKz0gJzt3aWR0aDonICsgdGhpcy5fb3B0aW9ucy53aWR0aCArICdweCc7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9vcHRpb25zLmF0dHJbJ3N0eWxlJ10gPSAnd2lkdGg6JyArIHRoaXMuX29wdGlvbnMud2lkdGggKyAncHgnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9vcHRpb25zLmF0dHJbJ25hbWUnXSAgPSB0eXBlb2YgdGhpcy5fb3B0aW9ucy5maWVsZCA9PT0gJ3N0cmluZycgPyB0aGlzLl9vcHRpb25zLmZpZWxkIDogJyc7XHJcbiAgICAgICAgdGhpcy5fb3B0aW9ucy5hdHRyWyd2YWx1ZSddID0gdHlwZW9mIHRoaXMuX3ZhbHVlID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgdGhpcy5fdmFsdWUgPT09ICdudW1iZXInXHJcbiAgICAgICAgICAgID8gdGhpcy5fdmFsdWVcclxuICAgICAgICAgICAgOiAnJztcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMuYXR0ci5oYXNPd25Qcm9wZXJ0eSgndHlwZScpKSB7XHJcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9vcHRpb25zLmF0dHIudHlwZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBhdHRyaWJ1dGVzID0gW107XHJcblxyXG4gICAgICAgICQuZWFjaCh0aGlzLl9vcHRpb25zLmF0dHIsIGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xyXG4gICAgICAgICAgICBhdHRyaWJ1dGVzLnB1c2gobmFtZSArICc9XCInICsgdmFsdWUgKyAnXCInKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGVqcy5yZW5kZXIoY29yZXVpVGFibGVUcGxbJ3NlYXJjaC9kYXRlX21vbnRoLmh0bWwnXSwge1xyXG4gICAgICAgICAgICBhdHRyOiBhdHRyaWJ1dGVzLmxlbmd0aCA+IDAgPyAoJyAnICsgYXR0cmlidXRlcy5qb2luKCcgJykpIDogJycsXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn0iLCJcclxuaW1wb3J0IGNvcmV1aVRhYmxlICAgICAgICAgZnJvbSBcIi4uL2NvcmV1aS50YWJsZVwiO1xyXG5pbXBvcnQgY29yZXVpVGFibGVUcGwgICAgICBmcm9tIFwiLi4vY29yZXVpLnRhYmxlLnRlbXBsYXRlc1wiO1xyXG5pbXBvcnQgY29yZXVpVGFibGVVdGlscyAgICBmcm9tIFwiLi4vY29yZXVpLnRhYmxlLnV0aWxzXCI7XHJcbmltcG9ydCBjb3JldWlUYWJsZUVsZW1lbnRzIGZyb20gXCIuLi9jb3JldWkudGFibGUuZWxlbWVudHNcIjtcclxuXHJcbmNvcmV1aVRhYmxlLnNlYXJjaC5kYXRldGltZSA9IHtcclxuXHJcbiAgICBfaWQ6IG51bGwsXHJcbiAgICBfdGFibGU6IG51bGwsXHJcbiAgICBfdmFsdWU6IG51bGwsXHJcbiAgICBfcmVuZGVyOiBmYWxzZSxcclxuICAgIF9vcHRpb25zOiB7XHJcbiAgICAgICAgaWQ6IG51bGwsXHJcbiAgICAgICAgdHlwZTogJ2RhdGV0aW1lJyxcclxuICAgICAgICBmaWVsZDogbnVsbCxcclxuICAgICAgICBsYWJlbDogbnVsbCxcclxuICAgICAgICB2YWx1ZTogbnVsbCxcclxuICAgICAgICB3aWR0aDogMjAwLFxyXG4gICAgICAgIGF0dHI6IHtcclxuICAgICAgICAgICAgY2xhc3M6IFwiZm9ybS1jb250cm9sIGQtaW5saW5lLWJsb2NrXCIsXHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQmNC90LjRhtC40LDQu9C40LfQsNGG0LjRj1xyXG4gICAgICogQHBhcmFtIHtDb3JlVUkudGFibGUuaW5zdGFuY2V9IHRhYmxlXHJcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gICAgICAgICAgICAgICAgb3B0aW9uc1xyXG4gICAgICovXHJcbiAgICBpbml0OiBmdW5jdGlvbiAodGFibGUsIG9wdGlvbnMpIHtcclxuXHJcbiAgICAgICAgdGhpcy5fb3B0aW9ucyA9ICQuZXh0ZW5kKHRydWUsIHt9LCB0aGlzLl9vcHRpb25zLCBvcHRpb25zKTtcclxuICAgICAgICB0aGlzLl90YWJsZSAgID0gdGFibGU7XHJcbiAgICAgICAgdGhpcy5faWQgICAgICA9IHRoaXMuX29wdGlvbnMuaGFzT3duUHJvcGVydHkoJ2lkJykgJiYgdHlwZW9mIHRoaXMuX29wdGlvbnMuaWQgPT09ICdzdHJpbmcnICYmIHRoaXMuX29wdGlvbnMuaWRcclxuICAgICAgICAgICAgPyB0aGlzLl9vcHRpb25zLmlkXHJcbiAgICAgICAgICAgIDogY29yZXVpVGFibGVVdGlscy5oYXNoQ29kZSgpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy52YWx1ZSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLnNldFZhbHVlKHRoaXMuX29wdGlvbnMudmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC/0LDRgNCw0LzQtdGC0YDQvtCyXHJcbiAgICAgKiBAcmV0dXJucyB7b2JqZWN0fVxyXG4gICAgICovXHJcbiAgICBnZXRPcHRpb25zOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuICQuZXh0ZW5kKHRydWUsIHt9LCB0aGlzLl9vcHRpb25zKTtcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1IGlkXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxyXG4gICAgICovXHJcbiAgICBnZXRJZDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9pZDtcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KPRgdGC0LDQvdC+0LLQutCwINC30L3QsNGH0LXQvdC40Y9cclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxyXG4gICAgICovXHJcbiAgICBzZXRWYWx1ZTogZnVuY3Rpb24gKHZhbHVlKSB7XHJcblxyXG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnICYmIHZhbHVlICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh2YWx1ZSAmJlxyXG4gICAgICAgICAgICAoXHJcbiAgICAgICAgICAgICAgICB2YWx1ZS5tYXRjaCgvXlxcZHs0fVxcLVxcZHsyfVxcLVxcZHsyfSBcXGR7Mn06XFxkezJ9OlxcZHsyfSQvKSA9PT0gbnVsbCB8fFxyXG4gICAgICAgICAgICAgICAgaXNOYU4obmV3IERhdGUodmFsdWUpKVxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX3ZhbHVlID0gdmFsdWU7XHJcblxyXG5cclxuICAgICAgICBpZiAodGhpcy5fcmVuZGVyKSB7XHJcbiAgICAgICAgICAgIGxldCBjb250cm9sID0gY29yZXVpVGFibGVFbGVtZW50cy5nZXRTZWFyY2hDb250cm9sKHRoaXMuX3RhYmxlLmdldElkKCksIHRoaXMuX2lkKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChjb250cm9sWzBdKSB7XHJcbiAgICAgICAgICAgICAgICAkKCdpbnB1dCcsIGNvbnRyb2wpLnZhbChcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl92YWx1ZSA9PT0gbnVsbCA/ICcnIDogdGhpcy5fdmFsdWVcclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSDQt9C90LDRh9C10L3QuNGPXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxyXG4gICAgICovXHJcbiAgICBnZXRWYWx1ZTogZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICBsZXQgY29udHJvbCA9IGNvcmV1aVRhYmxlRWxlbWVudHMuZ2V0U2VhcmNoQ29udHJvbCh0aGlzLl90YWJsZS5nZXRJZCgpLCB0aGlzLl9pZCk7XHJcbiAgICAgICAgbGV0IGlucHV0ICAgPSAkKCdpbnB1dCcsIGNvbnRyb2wpO1xyXG5cclxuICAgICAgICBpZiAoaW5wdXRbMF0pIHtcclxuICAgICAgICAgICAgbGV0IHZhbHVlID0gaW5wdXQudmFsKCk7XHJcblxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJiB2YWx1ZSAhPT0gJycpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPINGB0L7QsdGL0YLQuNC5XHJcbiAgICAgKiBAcmV0dXJucyB7b2JqZWN0fVxyXG4gICAgICovXHJcbiAgICBpbml0RXZlbnRzOiBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgIGxldCBjb250YWluZXIgPSBjb3JldWlUYWJsZUVsZW1lbnRzLmdldFNlYXJjaENvbnRhaW5lcih0aGlzLl90YWJsZS5nZXRJZCgpKTtcclxuICAgICAgICBsZXQgY29udHJvbCAgID0gY29yZXVpVGFibGVFbGVtZW50cy5nZXRTZWFyY2hDb250cm9sKHRoaXMuX3RhYmxlLmdldElkKCksIHRoaXMuX2lkKTtcclxuICAgICAgICBsZXQgdGhhdCAgICAgID0gdGhpcztcclxuXHJcbiAgICAgICAgJCgnaW5wdXQnLCBjb250cm9sKS5rZXl1cChmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgIGlmIChlLmtleSA9PT0gJ0VudGVyJyB8fCBlLmtleUNvZGUgPT09IDEzKSB7XHJcbiAgICAgICAgICAgICAgICB0aGF0Ll90YWJsZS5zZWFyY2hSZWNvcmRzKCk7XHJcbiAgICAgICAgICAgICAgICBjb250YWluZXIuZmFkZU91dCgnZmFzdCcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCk0L7RgNC80LjRgNC+0LLQsNC90LjQtSDQutC+0L3RgtC10L3RgtCwXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxyXG4gICAgICovXHJcbiAgICByZW5kZXI6IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICB0aGlzLl9yZW5kZXIgPSB0cnVlO1xyXG5cclxuICAgICAgICBpZiAoICEgY29yZXVpVGFibGVVdGlscy5pc09iamVjdCh0aGlzLl9vcHRpb25zLmF0dHIpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX29wdGlvbnMuYXR0ciA9IHt9O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMuaGFzT3duUHJvcGVydHkoJ3dpZHRoJykgJiZcclxuICAgICAgICAgICAgY29yZXVpVGFibGVVdGlscy5pc051bWVyaWModGhpcy5fb3B0aW9ucy53aWR0aClcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMuYXR0ci5oYXNPd25Qcm9wZXJ0eSgnc3R5bGUnKSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy5hdHRyWydzdHlsZSddICs9ICc7d2lkdGg6JyArIHRoaXMuX29wdGlvbnMud2lkdGggKyAncHgnO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy5hdHRyWydzdHlsZSddID0gJ3dpZHRoOicgKyB0aGlzLl9vcHRpb25zLndpZHRoICsgJ3B4JztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fb3B0aW9ucy5hdHRyWyduYW1lJ10gID0gdHlwZW9mIHRoaXMuX29wdGlvbnMuZmllbGQgPT09ICdzdHJpbmcnID8gdGhpcy5fb3B0aW9ucy5maWVsZCA6ICcnO1xyXG4gICAgICAgIHRoaXMuX29wdGlvbnMuYXR0clsndmFsdWUnXSA9IHR5cGVvZiB0aGlzLl92YWx1ZSA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIHRoaXMuX3ZhbHVlID09PSAnbnVtYmVyJ1xyXG4gICAgICAgICAgICA/IHRoaXMuX3ZhbHVlXHJcbiAgICAgICAgICAgIDogJyc7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLmF0dHIuaGFzT3duUHJvcGVydHkoJ3R5cGUnKSkge1xyXG4gICAgICAgICAgICBkZWxldGUgdGhpcy5fb3B0aW9ucy5hdHRyLnR5cGU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgYXR0cmlidXRlcyA9IFtdO1xyXG5cclxuICAgICAgICAkLmVhY2godGhpcy5fb3B0aW9ucy5hdHRyLCBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcclxuICAgICAgICAgICAgYXR0cmlidXRlcy5wdXNoKG5hbWUgKyAnPVwiJyArIHZhbHVlICsgJ1wiJyk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiBlanMucmVuZGVyKGNvcmV1aVRhYmxlVHBsWydzZWFyY2gvZGF0ZXRpbWUuaHRtbCddLCB7XHJcbiAgICAgICAgICAgIGF0dHI6IGF0dHJpYnV0ZXMubGVuZ3RoID4gMCA/ICgnICcgKyBhdHRyaWJ1dGVzLmpvaW4oJyAnKSkgOiAnJyxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufSIsIlxyXG5pbXBvcnQgY29yZXVpVGFibGUgICAgICAgICBmcm9tIFwiLi4vY29yZXVpLnRhYmxlXCI7XHJcbmltcG9ydCBjb3JldWlUYWJsZVRwbCAgICAgIGZyb20gXCIuLi9jb3JldWkudGFibGUudGVtcGxhdGVzXCI7XHJcbmltcG9ydCBjb3JldWlUYWJsZVV0aWxzICAgIGZyb20gXCIuLi9jb3JldWkudGFibGUudXRpbHNcIjtcclxuaW1wb3J0IGNvcmV1aVRhYmxlRWxlbWVudHMgZnJvbSBcIi4uL2NvcmV1aS50YWJsZS5lbGVtZW50c1wiO1xyXG5cclxuY29yZXVpVGFibGUuc2VhcmNoLmRhdGVfcmFuZ2UgPSB7XHJcblxyXG4gICAgX2lkOiBudWxsLFxyXG4gICAgX3RhYmxlOiBudWxsLFxyXG4gICAgX3ZhbHVlOiBudWxsLFxyXG4gICAgX3JlbmRlcjogZmFsc2UsXHJcbiAgICBfb3B0aW9uczoge1xyXG4gICAgICAgIGlkOiBudWxsLFxyXG4gICAgICAgIHR5cGU6ICdkYXRlX3JhbmdlJyxcclxuICAgICAgICBmaWVsZDogbnVsbCxcclxuICAgICAgICBsYWJlbDogbnVsbCxcclxuICAgICAgICB2YWx1ZTogbnVsbCxcclxuICAgICAgICB3aWR0aDogMjAwLFxyXG4gICAgICAgIGF0dHI6IHtcclxuICAgICAgICAgICAgY2xhc3M6IFwiZm9ybS1jb250cm9sIGQtaW5saW5lLWJsb2NrXCIsXHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQmNC90LjRhtC40LDQu9C40LfQsNGG0LjRj1xyXG4gICAgICogQHBhcmFtIHtDb3JlVUkudGFibGUuaW5zdGFuY2V9IHRhYmxlXHJcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gICAgICAgICAgICAgICAgb3B0aW9uc1xyXG4gICAgICovXHJcbiAgICBpbml0OiBmdW5jdGlvbiAodGFibGUsIG9wdGlvbnMpIHtcclxuXHJcbiAgICAgICAgdGhpcy5fb3B0aW9ucyA9ICQuZXh0ZW5kKHRydWUsIHt9LCB0aGlzLl9vcHRpb25zLCBvcHRpb25zKTtcclxuICAgICAgICB0aGlzLl90YWJsZSAgID0gdGFibGU7XHJcbiAgICAgICAgdGhpcy5faWQgICAgICA9IHRoaXMuX29wdGlvbnMuaGFzT3duUHJvcGVydHkoJ2lkJykgJiYgdHlwZW9mIHRoaXMuX29wdGlvbnMuaWQgPT09ICdzdHJpbmcnICYmIHRoaXMuX29wdGlvbnMuaWRcclxuICAgICAgICAgICAgPyB0aGlzLl9vcHRpb25zLmlkXHJcbiAgICAgICAgICAgIDogY29yZXVpVGFibGVVdGlscy5oYXNoQ29kZSgpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy52YWx1ZSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLnNldFZhbHVlKHRoaXMuX29wdGlvbnMudmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC/0LDRgNCw0LzQtdGC0YDQvtCyXHJcbiAgICAgKiBAcmV0dXJucyB7b2JqZWN0fVxyXG4gICAgICovXHJcbiAgICBnZXRPcHRpb25zOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuICQuZXh0ZW5kKHRydWUsIHt9LCB0aGlzLl9vcHRpb25zKTtcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1IGlkXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxyXG4gICAgICovXHJcbiAgICBnZXRJZDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9pZDtcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KPRgdGC0LDQvdC+0LLQutCwINC30L3QsNGH0LXQvdC40Y9cclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSB2YWx1ZVxyXG4gICAgICovXHJcbiAgICBzZXRWYWx1ZTogZnVuY3Rpb24gKHZhbHVlKSB7XHJcblxyXG4gICAgICAgIGlmICh2YWx1ZSkge1xyXG4gICAgICAgICAgICBpZiAoICEgY29yZXVpVGFibGVVdGlscy5pc09iamVjdCh2YWx1ZSkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgbGV0IGRhdGVTdGFydCA9IG51bGw7XHJcbiAgICAgICAgICAgIGxldCBkYXRlRW5kICAgPSBudWxsO1xyXG5cclxuICAgICAgICAgICAgaWYgKHZhbHVlLmhhc093blByb3BlcnR5KCdzdGFydCcpICYmXHJcbiAgICAgICAgICAgICAgICB0eXBlb2YgdmFsdWUuc3RhcnQgPT09ICdzdHJpbmcnICYmXHJcbiAgICAgICAgICAgICAgICB2YWx1ZS5zdGFydC5tYXRjaCgvXlxcZHs0fVxcLVxcZHsyfVxcLVxcZHsyfSQvKSA9PT0gbnVsbCAmJlxyXG4gICAgICAgICAgICAgICAgaXNOYU4obmV3IERhdGUodmFsdWUuc3RhcnQpKVxyXG4gICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgIGRhdGVTdGFydCA9IHZhbHVlLnN0YXJ0O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodmFsdWUuaGFzT3duUHJvcGVydHkoJ2VuZCcpICYmXHJcbiAgICAgICAgICAgICAgICB0eXBlb2YgdmFsdWUuZW5kID09PSAnc3RyaW5nJyAmJlxyXG4gICAgICAgICAgICAgICAgdmFsdWUuZW5kLm1hdGNoKC9eXFxkezR9XFwtXFxkezJ9XFwtXFxkezJ9JC8pID09PSBudWxsICYmXHJcbiAgICAgICAgICAgICAgICBpc05hTihuZXcgRGF0ZSh2YWx1ZS5lbmQpKVxyXG4gICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgIGRhdGVFbmQgPSB2YWx1ZS5lbmQ7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChkYXRlU3RhcnQgPT09IG51bGwgJiYgZGF0ZUVuZCA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fdmFsdWUgPSBudWxsO1xyXG5cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3ZhbHVlID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0OiBkYXRlU3RhcnQsXHJcbiAgICAgICAgICAgICAgICAgICAgZW5kOiBkYXRlRW5kXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3ZhbHVlID0gbnVsbDtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICBpZiAodGhpcy5fcmVuZGVyKSB7XHJcbiAgICAgICAgICAgIGxldCBjb250cm9sID0gY29yZXVpVGFibGVFbGVtZW50cy5nZXRTZWFyY2hDb250cm9sKHRoaXMuX3RhYmxlLmdldElkKCksIHRoaXMuX2lkKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChjb250cm9sWzBdKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgaW5wdXRTdGFydCA9ICQoJ2lucHV0LmRhdGUtc3RhcnQnLCBjb250cm9sKTtcclxuICAgICAgICAgICAgICAgIGxldCBpbnB1dEVuZCAgID0gJCgnaW5wdXQuZGF0ZS1lbmQnLCBjb250cm9sKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fdmFsdWUgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBpbnB1dFN0YXJ0LnZhbCgnJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgaW5wdXRFbmQudmFsKCcnKTtcclxuXHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QodGhpcy5fdmFsdWUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaW5wdXRTdGFydC52YWwodHlwZW9mIHRoaXMuX3ZhbHVlLnN0YXJ0ICE9PSBudWxsID8gdGhpcy5fdmFsdWUuc3RhcnQgOiAnJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgaW5wdXRFbmQudmFsKHR5cGVvZiB0aGlzLl92YWx1ZS5lbmQgIT09IG51bGwgPyB0aGlzLl92YWx1ZS5lbmQgOiAnJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSDQt9C90LDRh9C10L3QuNGPXHJcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fG51bGx9XHJcbiAgICAgKi9cclxuICAgIGdldFZhbHVlOiBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgIGxldCBjb250cm9sICAgID0gY29yZXVpVGFibGVFbGVtZW50cy5nZXRTZWFyY2hDb250cm9sKHRoaXMuX3RhYmxlLmdldElkKCksIHRoaXMuX2lkKTtcclxuICAgICAgICBsZXQgaW5wdXRTdGFydCA9ICQoJ2lucHV0LmRhdGUtc3RhcnQnLCBjb250cm9sKTtcclxuICAgICAgICBsZXQgaW5wdXRFbmQgICA9ICQoJ2lucHV0LmRhdGUtZW5kJywgY29udHJvbCk7XHJcblxyXG4gICAgICAgIGlmIChpbnB1dFN0YXJ0WzBdICYmIGlucHV0RW5kWzBdKSB7XHJcblxyXG4gICAgICAgICAgICBsZXQgdmFsdWVTdGFydCA9IGlucHV0U3RhcnQudmFsKCk7XHJcbiAgICAgICAgICAgIGxldCB2YWx1ZUVuZCAgID0gaW5wdXRFbmQudmFsKCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgICAgICAodHlwZW9mIHZhbHVlU3RhcnQgPT09ICdzdHJpbmcnICYmIHZhbHVlU3RhcnQgIT09ICcnKSB8fFxyXG4gICAgICAgICAgICAgICAgKHR5cGVvZiB2YWx1ZUVuZCA9PT0gJ3N0cmluZycgJiYgdmFsdWVFbmQgIT09ICcnKVxyXG4gICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IHZhbHVlU3RhcnQgIT09ICcnID8gdmFsdWVTdGFydCA6IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgZW5kOiB2YWx1ZUVuZCAhPT0gJycgPyB2YWx1ZUVuZCA6IG51bGwsXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y8g0YHQvtCx0YvRgtC40LlcclxuICAgICAqIEByZXR1cm5zIHtvYmplY3R9XHJcbiAgICAgKi9cclxuICAgIGluaXRFdmVudHM6IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgbGV0IGNvbnRhaW5lciA9IGNvcmV1aVRhYmxlRWxlbWVudHMuZ2V0U2VhcmNoQ29udGFpbmVyKHRoaXMuX3RhYmxlLmdldElkKCkpO1xyXG4gICAgICAgIGxldCBjb250cm9sICAgPSBjb3JldWlUYWJsZUVsZW1lbnRzLmdldFNlYXJjaENvbnRyb2wodGhpcy5fdGFibGUuZ2V0SWQoKSwgdGhpcy5faWQpO1xyXG4gICAgICAgIGxldCB0aGF0ICAgICAgPSB0aGlzO1xyXG5cclxuICAgICAgICAkKCdpbnB1dC5kYXRlLXN0YXJ0LCBpbnB1dC5kYXRlLWVuZCcsIGNvbnRyb2wpLmtleXVwKGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgaWYgKGUua2V5ID09PSAnRW50ZXInIHx8IGUua2V5Q29kZSA9PT0gMTMpIHtcclxuICAgICAgICAgICAgICAgIHRoYXQuX3RhYmxlLnNlYXJjaFJlY29yZHMoKTtcclxuICAgICAgICAgICAgICAgIGNvbnRhaW5lci5mYWRlT3V0KCdmYXN0Jyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KTQvtGA0LzQuNGA0L7QstCw0L3QuNC1INC60L7QvdGC0LXQvdGC0LBcclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIHJlbmRlcjogZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgIHRoaXMuX3JlbmRlciA9IHRydWU7XHJcblxyXG4gICAgICAgIGxldCBvcHRpb25zID0gdGhpcy5nZXRPcHRpb25zKCk7XHJcblxyXG4gICAgICAgIGlmICggISBjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KG9wdGlvbnMuYXR0cikpIHtcclxuICAgICAgICAgICAgb3B0aW9ucy5hdHRyID0ge307XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAob3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnd2lkdGgnKSAmJlxyXG4gICAgICAgICAgICBjb3JldWlUYWJsZVV0aWxzLmlzTnVtZXJpYyhvcHRpb25zLndpZHRoKVxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5hdHRyLmhhc093blByb3BlcnR5KCdzdHlsZScpKSB7XHJcbiAgICAgICAgICAgICAgICBvcHRpb25zLmF0dHJbJ3N0eWxlJ10gKz0gJzt3aWR0aDonICsgb3B0aW9ucy53aWR0aCArICdweCc7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBvcHRpb25zLmF0dHJbJ3N0eWxlJ10gPSAnd2lkdGg6JyArIG9wdGlvbnMud2lkdGggKyAncHgnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAob3B0aW9ucy5hdHRyLmhhc093blByb3BlcnR5KCd0eXBlJykpIHtcclxuICAgICAgICAgICAgZGVsZXRlIG9wdGlvbnMuYXR0ci50eXBlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKG9wdGlvbnMuYXR0ci5oYXNPd25Qcm9wZXJ0eSgndmFsdWUnKSkge1xyXG4gICAgICAgICAgICBkZWxldGUgb3B0aW9ucy5hdHRyLnZhbHVlO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIGxldCBmaWVsZCAgICAgPSB0eXBlb2Ygb3B0aW9ucy5maWVsZCA9PT0gJ3N0cmluZycgPyBvcHRpb25zLmZpZWxkIDogJyc7XHJcbiAgICAgICAgbGV0IHN0YXJ0QXR0ciA9IFtdO1xyXG4gICAgICAgIGxldCBzdGFydEVuZCAgPSBbXTtcclxuXHJcblxyXG4gICAgICAgICQuZWFjaChvcHRpb25zLmF0dHIsIGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xyXG4gICAgICAgICAgICBpZiAoWyduYW1lJywgJ3ZhbHVlJywgJ2NsYXNzJ10uaW5kZXhPZihuYW1lKSA+PSAwIHx8XHJcbiAgICAgICAgICAgICAgICBbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiB2YWx1ZSkgPCAwXHJcbiAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzdGFydEF0dHIucHVzaChuYW1lICsgJz1cIicgKyB2YWx1ZSArICdcIicpO1xyXG4gICAgICAgICAgICBzdGFydEVuZC5wdXNoKG5hbWUgKyAnPVwiJyArIHZhbHVlICsgJ1wiJyk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGlmIChvcHRpb25zLmF0dHIuaGFzT3duUHJvcGVydHkoJ2NsYXNzJykgJiZcclxuICAgICAgICAgICAgWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2Ygb3B0aW9ucy5hdHRyLmNsYXNzKSA+PSAwXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIHN0YXJ0QXR0ci5wdXNoKCdjbGFzcz1cIicgKyBvcHRpb25zLmF0dHIuY2xhc3MgKyAnIGRhdGUtc3RhcnRcIicpO1xyXG4gICAgICAgICAgICBzdGFydEVuZC5wdXNoKCdjbGFzcz1cIicgKyBvcHRpb25zLmF0dHIuY2xhc3MgKyAnIGRhdGUtZW5kXCInKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBzdGFydEF0dHIucHVzaCgnY2xhc3M9XCJkYXRlLXN0YXJ0XCInKTtcclxuICAgICAgICAgICAgc3RhcnRFbmQucHVzaCgnY2xhc3M9XCJkYXRlLWVuZFwiJyk7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgaWYgKGZpZWxkKSB7XHJcbiAgICAgICAgICAgIHN0YXJ0QXR0ci5wdXNoKCduYW1lPVwiJyArIGZpZWxkICsgJ1tzdGFydF1cIicpO1xyXG4gICAgICAgICAgICBzdGFydEVuZC5wdXNoKCduYW1lPVwiJyArIGZpZWxkICsgJ1tlbmRdXCInKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHN0YXJ0QXR0ci5wdXNoKCd2YWx1ZT1cIicgKyAodGhpcy5fdmFsdWUgPyB0aGlzLl92YWx1ZS5zdGFydCA6ICcnKSArICdcIicpO1xyXG4gICAgICAgIHN0YXJ0RW5kLnB1c2goJ3ZhbHVlPVwiJyArICh0aGlzLl92YWx1ZSA/IHRoaXMuX3ZhbHVlLmVuZCA6ICcnKSArICdcIicpO1xyXG5cclxuXHJcbiAgICAgICAgcmV0dXJuIGVqcy5yZW5kZXIoY29yZXVpVGFibGVUcGxbJ3NlYXJjaC9kYXRlX3JhbmdlLmh0bWwnXSwge1xyXG4gICAgICAgICAgICBzdGFydEF0dHI6IHN0YXJ0QXR0ci5sZW5ndGggPiAwID8gKCcgJyArIHN0YXJ0QXR0ci5qb2luKCcgJykpIDogJycsXHJcbiAgICAgICAgICAgIGVuZEF0dHI6IHN0YXJ0RW5kLmxlbmd0aCA+IDAgPyAoJyAnICsgc3RhcnRFbmQuam9pbignICcpKSA6ICcnLFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59IiwiXHJcbmltcG9ydCBjb3JldWlUYWJsZSAgICAgICAgIGZyb20gXCIuLi9jb3JldWkudGFibGVcIjtcclxuaW1wb3J0IGNvcmV1aVRhYmxlVHBsICAgICAgZnJvbSBcIi4uL2NvcmV1aS50YWJsZS50ZW1wbGF0ZXNcIjtcclxuaW1wb3J0IGNvcmV1aVRhYmxlVXRpbHMgICAgZnJvbSBcIi4uL2NvcmV1aS50YWJsZS51dGlsc1wiO1xyXG5pbXBvcnQgY29yZXVpVGFibGVFbGVtZW50cyBmcm9tIFwiLi4vY29yZXVpLnRhYmxlLmVsZW1lbnRzXCI7XHJcblxyXG5jb3JldWlUYWJsZS5zZWFyY2guZGF0ZXRpbWVfcmFuZ2UgPSB7XHJcblxyXG4gICAgX2lkOiBudWxsLFxyXG4gICAgX3RhYmxlOiBudWxsLFxyXG4gICAgX3ZhbHVlOiBudWxsLFxyXG4gICAgX3JlbmRlcjogZmFsc2UsXHJcbiAgICBfb3B0aW9uczoge1xyXG4gICAgICAgIGlkOiBudWxsLFxyXG4gICAgICAgIHR5cGU6ICdkYXRldGltZV9yYW5nZScsXHJcbiAgICAgICAgZmllbGQ6IG51bGwsXHJcbiAgICAgICAgbGFiZWw6IG51bGwsXHJcbiAgICAgICAgdmFsdWU6IG51bGwsXHJcbiAgICAgICAgd2lkdGg6IDIwMCxcclxuICAgICAgICBhdHRyOiB7XHJcbiAgICAgICAgICAgIGNsYXNzOiBcImZvcm0tY29udHJvbCBkLWlubGluZS1ibG9ja1wiLFxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y9cclxuICAgICAqIEBwYXJhbSB7Q29yZVVJLnRhYmxlLmluc3RhbmNlfSB0YWJsZVxyXG4gICAgICogQHBhcmFtIHtvYmplY3R9ICAgICAgICAgICAgICAgIG9wdGlvbnNcclxuICAgICAqL1xyXG4gICAgaW5pdDogZnVuY3Rpb24gKHRhYmxlLCBvcHRpb25zKSB7XHJcblxyXG4gICAgICAgIHRoaXMuX29wdGlvbnMgPSAkLmV4dGVuZCh0cnVlLCB7fSwgdGhpcy5fb3B0aW9ucywgb3B0aW9ucyk7XHJcbiAgICAgICAgdGhpcy5fdGFibGUgICA9IHRhYmxlO1xyXG4gICAgICAgIHRoaXMuX2lkICAgICAgPSB0aGlzLl9vcHRpb25zLmhhc093blByb3BlcnR5KCdpZCcpICYmIHR5cGVvZiB0aGlzLl9vcHRpb25zLmlkID09PSAnc3RyaW5nJyAmJiB0aGlzLl9vcHRpb25zLmlkXHJcbiAgICAgICAgICAgID8gdGhpcy5fb3B0aW9ucy5pZFxyXG4gICAgICAgICAgICA6IGNvcmV1aVRhYmxlVXRpbHMuaGFzaENvZGUoKTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMudmFsdWUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5zZXRWYWx1ZSh0aGlzLl9vcHRpb25zLnZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSDQv9Cw0YDQsNC80LXRgtGA0L7QslxyXG4gICAgICogQHJldHVybnMge29iamVjdH1cclxuICAgICAqL1xyXG4gICAgZ2V0T3B0aW9uczogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiAkLmV4dGVuZCh0cnVlLCB7fSwgdGhpcy5fb3B0aW9ucyk7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSBpZFxyXG4gICAgICogQHJldHVybnMge3N0cmluZ31cclxuICAgICAqL1xyXG4gICAgZ2V0SWQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5faWQ7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCj0YHRgtCw0L3QvtCy0LrQsCDQt9C90LDRh9C10L3QuNGPXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gdmFsdWVcclxuICAgICAqL1xyXG4gICAgc2V0VmFsdWU6IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG5cclxuICAgICAgICBpZiAodmFsdWUpIHtcclxuICAgICAgICAgICAgaWYgKCAhIGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QodmFsdWUpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGxldCBkYXRlU3RhcnQgPSBudWxsO1xyXG4gICAgICAgICAgICBsZXQgZGF0ZUVuZCAgID0gbnVsbDtcclxuXHJcbiAgICAgICAgICAgIGlmICh2YWx1ZS5oYXNPd25Qcm9wZXJ0eSgnc3RhcnQnKSAmJlxyXG4gICAgICAgICAgICAgICAgdHlwZW9mIHZhbHVlLnN0YXJ0ID09PSAnc3RyaW5nJyAmJlxyXG4gICAgICAgICAgICAgICAgdmFsdWUuc3RhcnQubWF0Y2goL15cXGR7NH1cXC1cXGR7Mn1cXC1cXGR7Mn0gXFxkezJ9OlxcZHsyfTpcXGR7Mn0kLykgPT09IG51bGwgJiZcclxuICAgICAgICAgICAgICAgIGlzTmFOKG5ldyBEYXRlKHZhbHVlLnN0YXJ0KSlcclxuICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICBkYXRlU3RhcnQgPSB2YWx1ZS5zdGFydDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHZhbHVlLmhhc093blByb3BlcnR5KCdlbmQnKSAmJlxyXG4gICAgICAgICAgICAgICAgdHlwZW9mIHZhbHVlLmVuZCA9PT0gJ3N0cmluZycgJiZcclxuICAgICAgICAgICAgICAgIHZhbHVlLmVuZC5tYXRjaCgvXlxcZHs0fVxcLVxcZHsyfVxcLVxcZHsyfSBcXGR7Mn06XFxkezJ9OlxcZHsyfSQvKSA9PT0gbnVsbCAmJlxyXG4gICAgICAgICAgICAgICAgaXNOYU4obmV3IERhdGUodmFsdWUuZW5kKSlcclxuICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICBkYXRlRW5kID0gdmFsdWUuZW5kO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoZGF0ZVN0YXJ0ID09PSBudWxsICYmIGRhdGVFbmQgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3ZhbHVlID0gbnVsbDtcclxuXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl92YWx1ZSA9IHtcclxuICAgICAgICAgICAgICAgICAgICBzdGFydDogZGF0ZVN0YXJ0LFxyXG4gICAgICAgICAgICAgICAgICAgIGVuZDogZGF0ZUVuZFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLl92YWx1ZSA9IG51bGw7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX3JlbmRlcikge1xyXG4gICAgICAgICAgICBsZXQgY29udHJvbCA9IGNvcmV1aVRhYmxlRWxlbWVudHMuZ2V0U2VhcmNoQ29udHJvbCh0aGlzLl90YWJsZS5nZXRJZCgpLCB0aGlzLl9pZCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoY29udHJvbFswXSkge1xyXG4gICAgICAgICAgICAgICAgbGV0IGlucHV0U3RhcnQgPSAkKCdpbnB1dC5kYXRlLXN0YXJ0JywgY29udHJvbCk7XHJcbiAgICAgICAgICAgICAgICBsZXQgaW5wdXRFbmQgICA9ICQoJ2lucHV0LmRhdGUtZW5kJywgY29udHJvbCk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX3ZhbHVlID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaW5wdXRTdGFydC52YWwoJycpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlucHV0RW5kLnZhbCgnJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KHRoaXMuX3ZhbHVlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlucHV0U3RhcnQudmFsKHR5cGVvZiB0aGlzLl92YWx1ZS5zdGFydCAhPT0gbnVsbCA/IHRoaXMuX3ZhbHVlLnN0YXJ0IDogJycpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlucHV0RW5kLnZhbCh0eXBlb2YgdGhpcy5fdmFsdWUuZW5kICE9PSBudWxsID8gdGhpcy5fdmFsdWUuZW5kIDogJycpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0LfQvdCw0YfQtdC90LjRj1xyXG4gICAgICogQHJldHVybnMge09iamVjdHxudWxsfVxyXG4gICAgICovXHJcbiAgICBnZXRWYWx1ZTogZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICBsZXQgY29udHJvbCAgICA9IGNvcmV1aVRhYmxlRWxlbWVudHMuZ2V0U2VhcmNoQ29udHJvbCh0aGlzLl90YWJsZS5nZXRJZCgpLCB0aGlzLl9pZCk7XHJcbiAgICAgICAgbGV0IGlucHV0U3RhcnQgPSAkKCdpbnB1dC5kYXRlLXN0YXJ0JywgY29udHJvbCk7XHJcbiAgICAgICAgbGV0IGlucHV0RW5kICAgPSAkKCdpbnB1dC5kYXRlLWVuZCcsIGNvbnRyb2wpO1xyXG5cclxuICAgICAgICBpZiAoaW5wdXRTdGFydFswXSAmJiBpbnB1dEVuZFswXSkge1xyXG5cclxuICAgICAgICAgICAgbGV0IHZhbHVlU3RhcnQgPSBpbnB1dFN0YXJ0LnZhbCgpO1xyXG4gICAgICAgICAgICBsZXQgdmFsdWVFbmQgICA9IGlucHV0RW5kLnZhbCgpO1xyXG5cclxuICAgICAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICAgICAgKHR5cGVvZiB2YWx1ZVN0YXJ0ID09PSAnc3RyaW5nJyAmJiB2YWx1ZVN0YXJ0ICE9PSAnJykgfHxcclxuICAgICAgICAgICAgICAgICh0eXBlb2YgdmFsdWVFbmQgPT09ICdzdHJpbmcnICYmIHZhbHVlRW5kICE9PSAnJylcclxuICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0OiB2YWx1ZVN0YXJ0ICE9PSAnJyA/IHZhbHVlU3RhcnQgOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgIGVuZDogdmFsdWVFbmQgIT09ICcnID8gdmFsdWVFbmQgOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y8g0YHQvtCx0YvRgtC40LlcclxuICAgICAqIEByZXR1cm5zIHtvYmplY3R9XHJcbiAgICAgKi9cclxuICAgIGluaXRFdmVudHM6IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgbGV0IGNvbnRhaW5lciA9IGNvcmV1aVRhYmxlRWxlbWVudHMuZ2V0U2VhcmNoQ29udGFpbmVyKHRoaXMuX3RhYmxlLmdldElkKCkpO1xyXG4gICAgICAgIGxldCBjb250cm9sICAgPSBjb3JldWlUYWJsZUVsZW1lbnRzLmdldFNlYXJjaENvbnRyb2wodGhpcy5fdGFibGUuZ2V0SWQoKSwgdGhpcy5faWQpO1xyXG4gICAgICAgIGxldCB0aGF0ICAgICAgPSB0aGlzO1xyXG5cclxuICAgICAgICAkKCdpbnB1dC5kYXRlLXN0YXJ0LCBpbnB1dC5kYXRlLWVuZCcsIGNvbnRyb2wpLmtleXVwKGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgaWYgKGUua2V5ID09PSAnRW50ZXInIHx8IGUua2V5Q29kZSA9PT0gMTMpIHtcclxuICAgICAgICAgICAgICAgIHRoYXQuX3RhYmxlLnNlYXJjaFJlY29yZHMoKTtcclxuICAgICAgICAgICAgICAgIGNvbnRhaW5lci5mYWRlT3V0KCdmYXN0Jyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KTQvtGA0LzQuNGA0L7QstCw0L3QuNC1INC60L7QvdGC0LXQvdGC0LBcclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIHJlbmRlcjogZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgIHRoaXMuX3JlbmRlciA9IHRydWU7XHJcblxyXG4gICAgICAgIGlmICggISBjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KHRoaXMuX29wdGlvbnMuYXR0cikpIHtcclxuICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy5hdHRyID0ge307XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnd2lkdGgnKSAmJlxyXG4gICAgICAgICAgICBjb3JldWlUYWJsZVV0aWxzLmlzTnVtZXJpYyh0aGlzLl9vcHRpb25zLndpZHRoKVxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy5hdHRyLmhhc093blByb3BlcnR5KCdzdHlsZScpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9vcHRpb25zLmF0dHJbJ3N0eWxlJ10gKz0gJzt3aWR0aDonICsgdGhpcy5fb3B0aW9ucy53aWR0aCArICdweCc7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9vcHRpb25zLmF0dHJbJ3N0eWxlJ10gPSAnd2lkdGg6JyArIHRoaXMuX29wdGlvbnMud2lkdGggKyAncHgnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy5hdHRyLmhhc093blByb3BlcnR5KCd0eXBlJykpIHtcclxuICAgICAgICAgICAgZGVsZXRlIHRoaXMuX29wdGlvbnMuYXR0ci50eXBlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMuYXR0ci5oYXNPd25Qcm9wZXJ0eSgndmFsdWUnKSkge1xyXG4gICAgICAgICAgICBkZWxldGUgdGhpcy5fb3B0aW9ucy5hdHRyLnZhbHVlO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIGxldCBmaWVsZCAgICAgPSB0eXBlb2YgdGhpcy5fb3B0aW9ucy5maWVsZCA9PT0gJ3N0cmluZycgPyB0aGlzLl9vcHRpb25zLmZpZWxkIDogJyc7XHJcbiAgICAgICAgbGV0IHN0YXJ0QXR0ciA9IFtdO1xyXG4gICAgICAgIGxldCBzdGFydEVuZCAgPSBbXTtcclxuXHJcblxyXG4gICAgICAgICQuZWFjaCh0aGlzLl9vcHRpb25zLmF0dHIsIGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xyXG4gICAgICAgICAgICBpZiAoWyduYW1lJywgJ3ZhbHVlJywgJ2NsYXNzJ10uaW5kZXhPZihuYW1lKSA+PSAwIHx8XHJcbiAgICAgICAgICAgICAgICBbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiB2YWx1ZSkgPCAwXHJcbiAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzdGFydEF0dHIucHVzaChuYW1lICsgJz1cIicgKyB2YWx1ZSArICdcIicpO1xyXG4gICAgICAgICAgICBzdGFydEVuZC5wdXNoKG5hbWUgKyAnPVwiJyArIHZhbHVlICsgJ1wiJyk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLmF0dHIuaGFzT3duUHJvcGVydHkoJ2NsYXNzJykgJiZcclxuICAgICAgICAgICAgWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2YgdGhpcy5fb3B0aW9ucy5hdHRyLmNsYXNzKSA+PSAwXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIHN0YXJ0QXR0ci5wdXNoKCdjbGFzcz1cIicgKyB0aGlzLl9vcHRpb25zLmF0dHIuY2xhc3MgKyAnIGRhdGUtc3RhcnRcIicpO1xyXG4gICAgICAgICAgICBzdGFydEVuZC5wdXNoKCdjbGFzcz1cIicgKyB0aGlzLl9vcHRpb25zLmF0dHIuY2xhc3MgKyAnIGRhdGUtZW5kXCInKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBzdGFydEF0dHIucHVzaCgnY2xhc3M9XCJkYXRlLXN0YXJ0XCInKTtcclxuICAgICAgICAgICAgc3RhcnRFbmQucHVzaCgnY2xhc3M9XCJkYXRlLWVuZFwiJyk7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgaWYgKGZpZWxkKSB7XHJcbiAgICAgICAgICAgIHN0YXJ0QXR0ci5wdXNoKCduYW1lPVwiJyArIGZpZWxkICsgJ1tzdGFydF1cIicpO1xyXG4gICAgICAgICAgICBzdGFydEVuZC5wdXNoKCduYW1lPVwiJyArIGZpZWxkICsgJ1tlbmRdXCInKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHN0YXJ0QXR0ci5wdXNoKCd2YWx1ZT1cIicgKyAodGhpcy5fdmFsdWUgPyB0aGlzLl92YWx1ZS5zdGFydCA6ICcnKSArICdcIicpO1xyXG4gICAgICAgIHN0YXJ0RW5kLnB1c2goJ3ZhbHVlPVwiJyArICh0aGlzLl92YWx1ZSA/IHRoaXMuX3ZhbHVlLmVuZCA6ICcnKSArICdcIicpO1xyXG5cclxuXHJcbiAgICAgICAgcmV0dXJuIGVqcy5yZW5kZXIoY29yZXVpVGFibGVUcGxbJ3NlYXJjaC9kYXRldGltZV9yYW5nZS5odG1sJ10sIHtcclxuICAgICAgICAgICAgc3RhcnRBdHRyOiBzdGFydEF0dHIubGVuZ3RoID4gMCA/ICgnICcgKyBzdGFydEF0dHIuam9pbignICcpKSA6ICcnLFxyXG4gICAgICAgICAgICBlbmRBdHRyOiBzdGFydEVuZC5sZW5ndGggPiAwID8gKCcgJyArIHN0YXJ0RW5kLmpvaW4oJyAnKSkgOiAnJyxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufSIsIlxyXG5pbXBvcnQgY29yZXVpVGFibGUgICAgICAgICBmcm9tIFwiLi4vY29yZXVpLnRhYmxlXCI7XHJcbmltcG9ydCBjb3JldWlUYWJsZVRwbCAgICAgIGZyb20gXCIuLi9jb3JldWkudGFibGUudGVtcGxhdGVzXCI7XHJcbmltcG9ydCBjb3JldWlUYWJsZVV0aWxzICAgIGZyb20gXCIuLi9jb3JldWkudGFibGUudXRpbHNcIjtcclxuaW1wb3J0IGNvcmV1aVRhYmxlRWxlbWVudHMgZnJvbSBcIi4uL2NvcmV1aS50YWJsZS5lbGVtZW50c1wiO1xyXG5cclxuY29yZXVpVGFibGUuc2VhcmNoLmNoZWNrYm94ID0ge1xyXG5cclxuICAgIF9pZDogbnVsbCxcclxuICAgIF90YWJsZTogbnVsbCxcclxuICAgIF92YWx1ZTogbnVsbCxcclxuICAgIF9yZW5kZXI6IGZhbHNlLFxyXG4gICAgX29wdGlvbnM6IHtcclxuICAgICAgICBpZDogbnVsbCxcclxuICAgICAgICB0eXBlOiAnY2hlY2tib3gnLFxyXG4gICAgICAgIGZpZWxkOiBudWxsLFxyXG4gICAgICAgIGxhYmVsOiBudWxsLFxyXG4gICAgICAgIHZhbHVlOiBudWxsLFxyXG4gICAgICAgIG9wdGlvbnM6IFtdXHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPXHJcbiAgICAgKiBAcGFyYW0ge0NvcmVVSS50YWJsZS5pbnN0YW5jZX0gdGFibGVcclxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSAgICAgICAgICAgICAgICBvcHRpb25zXHJcbiAgICAgKi9cclxuICAgIGluaXQ6IGZ1bmN0aW9uICh0YWJsZSwgb3B0aW9ucykge1xyXG5cclxuICAgICAgICB0aGlzLl9vcHRpb25zID0gJC5leHRlbmQodHJ1ZSwge30sIHRoaXMuX29wdGlvbnMsIG9wdGlvbnMpO1xyXG4gICAgICAgIHRoaXMuX3RhYmxlICAgPSB0YWJsZTtcclxuICAgICAgICB0aGlzLl9pZCAgICAgID0gdGhpcy5fb3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnaWQnKSAmJiB0eXBlb2YgdGhpcy5fb3B0aW9ucy5pZCA9PT0gJ3N0cmluZycgJiYgdGhpcy5fb3B0aW9ucy5pZFxyXG4gICAgICAgICAgICA/IHRoaXMuX29wdGlvbnMuaWRcclxuICAgICAgICAgICAgOiBjb3JldWlUYWJsZVV0aWxzLmhhc2hDb2RlKCk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLnZhbHVlICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0VmFsdWUodGhpcy5fb3B0aW9ucy52YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0L/QsNGA0LDQvNC10YLRgNC+0LJcclxuICAgICAqIEByZXR1cm5zIHtvYmplY3R9XHJcbiAgICAgKi9cclxuICAgIGdldE9wdGlvbnM6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gJC5leHRlbmQodHJ1ZSwge30sIHRoaXMuX29wdGlvbnMpO1xyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUgaWRcclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIGdldElkOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lkO1xyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQo9GB0YLQsNC90L7QstC60LAg0LfQvdCw0YfQtdC90LjRj1xyXG4gICAgICogQHBhcmFtIHtBcnJheXxudWxsfSB2YWx1ZVxyXG4gICAgICovXHJcbiAgICBzZXRWYWx1ZTogZnVuY3Rpb24gKHZhbHVlKSB7XHJcblxyXG4gICAgICAgIGlmIChbJ3N0cmluZycsICdudW1iZXInLCAnb2JqZWN0J10uaW5kZXhPZih0eXBlb2YgdmFsdWUpIDwgMCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0Jykge1xyXG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcclxuICAgICAgICAgICAgICAgIGxldCBpdGVtcyA9IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgICQuZWFjaCh2YWx1ZSwgZnVuY3Rpb24gKGtleSwgaXRlbSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnICYmIHR5cGVvZiB2YWx1ZSAhPT0gJ251bWJlcicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaXRlbXMucHVzaChpdGVtKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuX3ZhbHVlID0gaXRlbXM7XHJcblxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fdmFsdWUgPSBudWxsO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3ZhbHVlID0gWyB2YWx1ZSBdO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9yZW5kZXIpIHtcclxuICAgICAgICAgICAgbGV0IGNvbnRyb2wgPSBjb3JldWlUYWJsZUVsZW1lbnRzLmdldFNlYXJjaENvbnRyb2wodGhpcy5fdGFibGUuZ2V0SWQoKSwgdGhpcy5faWQpO1xyXG5cclxuICAgICAgICAgICAgaWYgKGNvbnRyb2xbMF0pIHtcclxuICAgICAgICAgICAgICAgICQoJ2lucHV0OmNoZWNrZWQnLCBjb250cm9sKS5wcm9wKCdjaGVja2VkJywgZmFsc2UpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHRoaXMuX3ZhbHVlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICQuZWFjaCh0aGlzLl92YWx1ZSwgZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJCgnaW5wdXRbdmFsdWU9XCInICsgdmFsdWUgKyAnXCJdJywgY29udHJvbCkucHJvcCgnY2hlY2tlZCcsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSDQt9C90LDRh9C10L3QuNGPXHJcbiAgICAgKiBAcmV0dXJucyB7QXJyYXl8bnVsbH1cclxuICAgICAqL1xyXG4gICAgZ2V0VmFsdWU6IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgbGV0IGNvbnRyb2wgPSBjb3JldWlUYWJsZUVsZW1lbnRzLmdldFNlYXJjaENvbnRyb2wodGhpcy5fdGFibGUuZ2V0SWQoKSwgdGhpcy5faWQpO1xyXG5cclxuICAgICAgICBpZiAoY29udHJvbFswXSkge1xyXG4gICAgICAgICAgICBsZXQgaW5wdXRzID0gJCgnaW5wdXQ6Y2hlY2tlZCcsIGNvbnRyb2wpO1xyXG4gICAgICAgICAgICBsZXQgaXRlbXMgID0gW107XHJcblxyXG4gICAgICAgICAgICAkLmVhY2goaW5wdXRzLCBmdW5jdGlvbiAoa2V5LCBpbnB1dCkge1xyXG4gICAgICAgICAgICAgICAgbGV0IHZhbHVlID0gJChpbnB1dCkuYXR0cigndmFsdWUnKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2YgdmFsdWUpID49IDAgJiZcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZSAhPT0gJydcclxuICAgICAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgICAgIGl0ZW1zLnB1c2godmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBpdGVtcy5sZW5ndGggPiAwID8gaXRlbXMgOiBudWxsO1xyXG5cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fdmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y8g0YHQvtCx0YvRgtC40LlcclxuICAgICAqL1xyXG4gICAgaW5pdEV2ZW50czogZnVuY3Rpb24gKCkge1xyXG5cclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KTQvtGA0LzQuNGA0L7QstCw0L3QuNC1INC60L7QvdGC0LXQvdGC0LBcclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIHJlbmRlcjogZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgIHRoaXMuX3JlbmRlciA9IHRydWU7XHJcblxyXG4gICAgICAgIGxldCB0aGF0ICAgID0gdGhpcztcclxuICAgICAgICBsZXQgb3B0aW9ucyA9IFtdO1xyXG5cclxuICAgICAgICAkLmVhY2godGhpcy5fb3B0aW9ucy5vcHRpb25zLCBmdW5jdGlvbiAoa2V5LCBvcHRpb24pIHtcclxuICAgICAgICAgICAgaWYgKCAhIGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3Qob3B0aW9uKSB8fFxyXG4gICAgICAgICAgICAgICAgISBvcHRpb24uaGFzT3duUHJvcGVydHkoJ3ZhbHVlJykgfHxcclxuICAgICAgICAgICAgICAgIFsnc3RyaW5nJywgJ251bWVyaWMnXS5pbmRleE9mKHR5cGVvZiBvcHRpb24udmFsdWUpID09PSAtMVxyXG4gICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgbGV0IGNoZWNrZWQgPSBBcnJheS5pc0FycmF5KHRoYXQuX3ZhbHVlKSA/IHRoYXQuX3ZhbHVlLmluZGV4T2Yob3B0aW9uLnZhbHVlKSA+PSAwIDogZmFsc2U7XHJcbiAgICAgICAgICAgIGxldCB0ZXh0ICAgID0gb3B0aW9uLmhhc093blByb3BlcnR5KCd0ZXh0JylcclxuICAgICAgICAgICAgICAgID8gb3B0aW9uLnRleHRcclxuICAgICAgICAgICAgICAgIDogb3B0aW9uLnZhbHVlO1xyXG5cclxuICAgICAgICAgICAgb3B0aW9ucy5wdXNoKHtcclxuICAgICAgICAgICAgICAgIHRleHQ6ICAgIHRleHQsXHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogICBvcHRpb24udmFsdWUsXHJcbiAgICAgICAgICAgICAgICBjaGVja2VkOiBjaGVja2VkLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGVqcy5yZW5kZXIoY29yZXVpVGFibGVUcGxbJ3NlYXJjaC9jaGVja2JveC5odG1sJ10sIHtcclxuICAgICAgICAgICAgb3B0aW9uczogb3B0aW9ucyxcclxuICAgICAgICAgICAgZmllbGQ6IHR5cGVvZiB0aGlzLl9vcHRpb25zLmZpZWxkID09PSAnc3RyaW5nJyA/IHRoaXMuX29wdGlvbnMuZmllbGQgOiAnJ1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59IiwiXHJcbmltcG9ydCBjb3JldWlUYWJsZSAgICAgICAgIGZyb20gXCIuLi9jb3JldWkudGFibGVcIjtcclxuaW1wb3J0IGNvcmV1aVRhYmxlVHBsICAgICAgZnJvbSBcIi4uL2NvcmV1aS50YWJsZS50ZW1wbGF0ZXNcIjtcclxuaW1wb3J0IGNvcmV1aVRhYmxlVXRpbHMgICAgZnJvbSBcIi4uL2NvcmV1aS50YWJsZS51dGlsc1wiO1xyXG5pbXBvcnQgY29yZXVpVGFibGVFbGVtZW50cyBmcm9tIFwiLi4vY29yZXVpLnRhYmxlLmVsZW1lbnRzXCI7XHJcblxyXG5jb3JldWlUYWJsZS5zZWFyY2gucmFkaW8gPSB7XHJcblxyXG4gICAgX2lkOiBudWxsLFxyXG4gICAgX3RhYmxlOiBudWxsLFxyXG4gICAgX3ZhbHVlOiBudWxsLFxyXG4gICAgX3JlbmRlcjogZmFsc2UsXHJcbiAgICBfb3B0aW9uczoge1xyXG4gICAgICAgIGlkOiBudWxsLFxyXG4gICAgICAgIHR5cGU6ICdyYWRpbycsXHJcbiAgICAgICAgZmllbGQ6IG51bGwsXHJcbiAgICAgICAgbGFiZWw6IG51bGwsXHJcbiAgICAgICAgdmFsdWU6IG51bGwsXHJcbiAgICAgICAgb3B0aW9uczogW10sXHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPXHJcbiAgICAgKiBAcGFyYW0ge0NvcmVVSS50YWJsZS5pbnN0YW5jZX0gdGFibGVcclxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSAgICAgICAgICAgICAgICBvcHRpb25zXHJcbiAgICAgKi9cclxuICAgIGluaXQ6IGZ1bmN0aW9uICh0YWJsZSwgb3B0aW9ucykge1xyXG5cclxuICAgICAgICB0aGlzLl9vcHRpb25zID0gJC5leHRlbmQodHJ1ZSwge30sIHRoaXMuX29wdGlvbnMsIG9wdGlvbnMpO1xyXG4gICAgICAgIHRoaXMuX3RhYmxlICAgPSB0YWJsZTtcclxuICAgICAgICB0aGlzLl9pZCAgICAgID0gdGhpcy5fb3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnaWQnKSAmJiB0eXBlb2YgdGhpcy5fb3B0aW9ucy5pZCA9PT0gJ3N0cmluZycgJiYgdGhpcy5fb3B0aW9ucy5pZFxyXG4gICAgICAgICAgICA/IHRoaXMuX29wdGlvbnMuaWRcclxuICAgICAgICAgICAgOiBjb3JldWlUYWJsZVV0aWxzLmhhc2hDb2RlKCk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLnZhbHVlICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0VmFsdWUodGhpcy5fb3B0aW9ucy52YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0L/QsNGA0LDQvNC10YLRgNC+0LJcclxuICAgICAqIEByZXR1cm5zIHtvYmplY3R9XHJcbiAgICAgKi9cclxuICAgIGdldE9wdGlvbnM6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gJC5leHRlbmQodHJ1ZSwge30sIHRoaXMuX29wdGlvbnMpO1xyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUgaWRcclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIGdldElkOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lkO1xyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQo9GB0YLQsNC90L7QstC60LAg0LfQvdCw0YfQtdC90LjRj1xyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXHJcbiAgICAgKi9cclxuICAgIHNldFZhbHVlOiBmdW5jdGlvbiAodmFsdWUpIHtcclxuXHJcbiAgICAgICAgaWYgKHZhbHVlICE9PSBudWxsICYmXHJcbiAgICAgICAgICAgIHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycgJiZcclxuICAgICAgICAgICAgdHlwZW9mIHZhbHVlICE9PSAnbnVtYmVyJ1xyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl92YWx1ZSA9IHZhbHVlO1xyXG5cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX3JlbmRlcikge1xyXG4gICAgICAgICAgICBsZXQgY29udHJvbCA9IGNvcmV1aVRhYmxlRWxlbWVudHMuZ2V0U2VhcmNoQ29udHJvbCh0aGlzLl90YWJsZS5nZXRJZCgpLCB0aGlzLl9pZCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoY29udHJvbFswXSkge1xyXG4gICAgICAgICAgICAgICAgJCgnaW5wdXQnLCBjb250cm9sKS5wcm9wKCdjaGVja2VkJywgZmFsc2UpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl92YWx1ZSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICQoJ2lucHV0W3ZhbHVlPVwiJyArIHRoaXMuX3ZhbHVlICsgJ1wiXScsIGNvbnRyb2wpLnByb3AoJ2NoZWNrZWQnLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC30L3QsNGH0LXQvdC40Y9cclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd8bnVsbH1cclxuICAgICAqL1xyXG4gICAgZ2V0VmFsdWU6IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgbGV0IGNvbnRyb2wgPSBjb3JldWlUYWJsZUVsZW1lbnRzLmdldFNlYXJjaENvbnRyb2wodGhpcy5fdGFibGUuZ2V0SWQoKSwgdGhpcy5faWQpO1xyXG4gICAgICAgIGxldCBpbnB1dCAgID0gJCgnaW5wdXQ6Y2hlY2tlZCcsIGNvbnRyb2wpO1xyXG5cclxuICAgICAgICBpZiAoaW5wdXRbMF0pIHtcclxuICAgICAgICAgICAgbGV0IHZhbHVlID0gaW5wdXQudmFsKCk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdmFsdWUgPT09ICcnXHJcbiAgICAgICAgICAgICAgICA/IG51bGxcclxuICAgICAgICAgICAgICAgIDogdmFsdWVcclxuXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INGC0LjQv9CwINC/0L7QuNGB0LrQvtCy0L7Qs9C+INCw0LvQs9C+0YDQuNGC0LzQsFxyXG4gICAgICovXHJcbiAgICBnZXRBbGdvcml0aG06IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gJ3N0cmljdCc7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPINGB0L7QsdGL0YLQuNC5XHJcbiAgICAgKiBAcmV0dXJucyB7b2JqZWN0fVxyXG4gICAgICovXHJcbiAgICBpbml0RXZlbnRzOiBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQpNC+0YDQvNC40YDQvtCy0LDQvdC40LUg0LrQvtC90YLQtdC90YLQsFxyXG4gICAgICogQHJldHVybnMge3N0cmluZ31cclxuICAgICAqL1xyXG4gICAgcmVuZGVyOiBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgdGhpcy5fcmVuZGVyID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgbGV0IHRoYXQgICAgICAgPSB0aGlzO1xyXG4gICAgICAgIGxldCBjaGVja2VkQWxsID0gdHJ1ZTtcclxuICAgICAgICBsZXQgb3B0aW9ucyAgICA9IFtdO1xyXG5cclxuICAgICAgICAkLmVhY2godGhpcy5fb3B0aW9ucy5vcHRpb25zLCBmdW5jdGlvbiAoa2V5LCBvcHRpb24pIHtcclxuICAgICAgICAgICAgaWYgKCAhIGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3Qob3B0aW9uKSB8fFxyXG4gICAgICAgICAgICAgICAgICEgb3B0aW9uLmhhc093blByb3BlcnR5KCd2YWx1ZScpIHx8XHJcbiAgICAgICAgICAgICAgICBbJ3N0cmluZycsICdudW1lcmljJ10uaW5kZXhPZih0eXBlb2Ygb3B0aW9uLnZhbHVlKSA9PT0gLTFcclxuICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGxldCBjaGVja2VkID0gb3B0aW9uLnZhbHVlID09IHRoYXQuX3ZhbHVlO1xyXG4gICAgICAgICAgICBsZXQgdGV4dCAgICA9IG9wdGlvbi5oYXNPd25Qcm9wZXJ0eSgndGV4dCcpXHJcbiAgICAgICAgICAgICAgICA/IG9wdGlvbi50ZXh0XHJcbiAgICAgICAgICAgICAgICA6IG9wdGlvbi52YWx1ZTtcclxuXHJcbiAgICAgICAgICAgIGlmIChjaGVja2VkKSB7XHJcbiAgICAgICAgICAgICAgICBjaGVja2VkQWxsID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIG9wdGlvbnMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICB0ZXh0OiAgICB0ZXh0LFxyXG4gICAgICAgICAgICAgICAgdmFsdWU6ICAgb3B0aW9uLnZhbHVlLFxyXG4gICAgICAgICAgICAgICAgY2hlY2tlZDogY2hlY2tlZCxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiBlanMucmVuZGVyKGNvcmV1aVRhYmxlVHBsWydzZWFyY2gvcmFkaW8uaHRtbCddLCB7XHJcbiAgICAgICAgICAgIG9wdGlvbnM6IG9wdGlvbnMsXHJcbiAgICAgICAgICAgIGNoZWNrZWRBbGw6IGNoZWNrZWRBbGwsXHJcbiAgICAgICAgICAgIGZpZWxkOiB0eXBlb2YgdGhpcy5fb3B0aW9ucy5maWVsZCA9PT0gJ3N0cmluZycgPyB0aGlzLl9vcHRpb25zLmZpZWxkIDogJycsXHJcbiAgICAgICAgICAgIGxhbmc6IHRoaXMuX3RhYmxlLmdldExhbmcoKVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59IiwiXHJcbmltcG9ydCBjb3JldWlUYWJsZSAgICAgICAgIGZyb20gXCIuLi9jb3JldWkudGFibGVcIjtcclxuaW1wb3J0IGNvcmV1aVRhYmxlVHBsICAgICAgZnJvbSBcIi4uL2NvcmV1aS50YWJsZS50ZW1wbGF0ZXNcIjtcclxuaW1wb3J0IGNvcmV1aVRhYmxlVXRpbHMgICAgZnJvbSBcIi4uL2NvcmV1aS50YWJsZS51dGlsc1wiO1xyXG5pbXBvcnQgQ29yZXVpVGFibGVVdGlscyAgICBmcm9tIFwiLi4vY29yZXVpLnRhYmxlLnV0aWxzXCI7XHJcbmltcG9ydCBjb3JldWlUYWJsZUVsZW1lbnRzIGZyb20gXCIuLi9jb3JldWkudGFibGUuZWxlbWVudHNcIjtcclxuXHJcbmNvcmV1aVRhYmxlLnNlYXJjaC5zZWxlY3QgPSB7XHJcblxyXG4gICAgX2lkOiBudWxsLFxyXG4gICAgX3RhYmxlOiBudWxsLFxyXG4gICAgX3ZhbHVlOiBudWxsLFxyXG4gICAgX3JlbmRlcjogZmFsc2UsXHJcbiAgICBfb3B0aW9uczoge1xyXG4gICAgICAgIGlkOiBudWxsLFxyXG4gICAgICAgIHR5cGU6ICdzZWxlY3QnLFxyXG4gICAgICAgIGZpZWxkOiBudWxsLFxyXG4gICAgICAgIGxhYmVsOiBudWxsLFxyXG4gICAgICAgIHdpZHRoOiBudWxsLFxyXG4gICAgICAgIHZhbHVlOiBudWxsLFxyXG4gICAgICAgIGF0dHI6IHtcclxuICAgICAgICAgICAgY2xhc3M6ICdmb3JtLXNlbGVjdCBkLWlubGluZS1ibG9jaydcclxuICAgICAgICB9LFxyXG4gICAgICAgIG9wdGlvbnM6IFtdXHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPXHJcbiAgICAgKiBAcGFyYW0ge0NvcmVVSS50YWJsZS5pbnN0YW5jZX0gdGFibGVcclxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSAgICAgICAgICAgICAgICBvcHRpb25zXHJcbiAgICAgKi9cclxuICAgIGluaXQ6IGZ1bmN0aW9uICh0YWJsZSwgb3B0aW9ucykge1xyXG5cclxuICAgICAgICB0aGlzLl9vcHRpb25zID0gJC5leHRlbmQodHJ1ZSwge30sIHRoaXMuX29wdGlvbnMsIG9wdGlvbnMpO1xyXG4gICAgICAgIHRoaXMuX3RhYmxlICAgPSB0YWJsZTtcclxuICAgICAgICB0aGlzLl9pZCAgICAgID0gdGhpcy5fb3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnaWQnKSAmJiB0eXBlb2YgdGhpcy5fb3B0aW9ucy5pZCA9PT0gJ3N0cmluZycgJiYgdGhpcy5fb3B0aW9ucy5pZFxyXG4gICAgICAgICAgICA/IHRoaXMuX29wdGlvbnMuaWRcclxuICAgICAgICAgICAgOiBjb3JldWlUYWJsZVV0aWxzLmhhc2hDb2RlKCk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLnZhbHVlICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0VmFsdWUodGhpcy5fb3B0aW9ucy52YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0L/QsNGA0LDQvNC10YLRgNC+0LJcclxuICAgICAqIEByZXR1cm5zIHtvYmplY3R9XHJcbiAgICAgKi9cclxuICAgIGdldE9wdGlvbnM6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gJC5leHRlbmQodHJ1ZSwge30sIHRoaXMuX29wdGlvbnMpO1xyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUgaWRcclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIGdldElkOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lkO1xyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQo9GB0YLQsNC90L7QstC60LAg0LfQvdCw0YfQtdC90LjRj1xyXG4gICAgICogQHBhcmFtIHtBcnJheX0gdmFsdWVcclxuICAgICAqL1xyXG4gICAgc2V0VmFsdWU6IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG5cclxuICAgICAgICBpZiAoWydzdHJpbmcnLCAnbnVtYmVyJywgJ29iamVjdCddLmluZGV4T2YodHlwZW9mIHZhbHVlKSA8IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgaXRlbXMgPSBbXTtcclxuXHJcbiAgICAgICAgICAgICAgICAkLmVhY2godmFsdWUsIGZ1bmN0aW9uIChrZXksIGl0ZW0pIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJyAmJiB0eXBlb2YgdmFsdWUgIT09ICdudW1iZXInKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGl0ZW1zLnB1c2goaXRlbSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLl92YWx1ZSA9IGl0ZW1zO1xyXG5cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3ZhbHVlID0gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLl92YWx1ZSA9IFsgdmFsdWUgXTtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICBpZiAodGhpcy5fcmVuZGVyKSB7XHJcbiAgICAgICAgICAgIGxldCBjb250cm9sID0gY29yZXVpVGFibGVFbGVtZW50cy5nZXRTZWFyY2hDb250cm9sKHRoaXMuX3RhYmxlLmdldElkKCksIHRoaXMuX2lkKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChjb250cm9sWzBdKSB7XHJcbiAgICAgICAgICAgICAgICAkKCdzZWxlY3Qgb3B0aW9uOnNlbGVjdGVkJywgY29udHJvbCkucHJvcCgnc2VsZWN0ZWQnLCBmYWxzZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodGhpcy5fdmFsdWUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJC5lYWNoKHRoaXMuX3ZhbHVlLCBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkKCdzZWxlY3Qgb3B0aW9uW3ZhbHVlPVwiJyArIHZhbHVlICsgJ1wiXScsIGNvbnRyb2wpLnByb3AoJ3NlbGVjdGVkJywgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC30L3QsNGH0LXQvdC40Y9cclxuICAgICAqIEByZXR1cm5zIHtBcnJheXxudWxsfVxyXG4gICAgICovXHJcbiAgICBnZXRWYWx1ZTogZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICBsZXQgY29udHJvbCA9IGNvcmV1aVRhYmxlRWxlbWVudHMuZ2V0U2VhcmNoQ29udHJvbCh0aGlzLl90YWJsZS5nZXRJZCgpLCB0aGlzLl9pZCk7XHJcblxyXG4gICAgICAgIGlmIChjb250cm9sWzBdKSB7XHJcbiAgICAgICAgICAgIGxldCBvcHRpb25zID0gJCgnc2VsZWN0IG9wdGlvbjpzZWxlY3RlZCcsIGNvbnRyb2wpO1xyXG4gICAgICAgICAgICBsZXQgaXRlbXMgICA9IFtdO1xyXG5cclxuICAgICAgICAgICAgJC5lYWNoKG9wdGlvbnMsIGZ1bmN0aW9uIChrZXksIG9wdGlvbikge1xyXG4gICAgICAgICAgICAgICAgbGV0IHZhbHVlID0gJChvcHRpb24pLmF0dHIoJ3ZhbHVlJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIHZhbHVlKSA+PSAwICYmXHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgIT09ICcnXHJcbiAgICAgICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgICAgICBpdGVtcy5wdXNoKHZhbHVlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gaXRlbXMubGVuZ3RoID4gMCA/IGl0ZW1zIDogbnVsbDtcclxuXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPINGB0L7QsdGL0YLQuNC5XHJcbiAgICAgKiBAcmV0dXJucyB7b2JqZWN0fVxyXG4gICAgICovXHJcbiAgICBpbml0RXZlbnRzOiBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQpNC+0YDQvNC40YDQvtCy0LDQvdC40LUg0LrQvtC90YLQtdC90YLQsFxyXG4gICAgICogQHJldHVybnMge3N0cmluZ31cclxuICAgICAqL1xyXG4gICAgcmVuZGVyOiBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgdGhpcy5fcmVuZGVyID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgbGV0IHRoYXQgICAgICAgICAgPSB0aGlzO1xyXG4gICAgICAgIGxldCBvcHRpb25zICAgICAgID0gdGhpcy5nZXRPcHRpb25zKCk7XHJcbiAgICAgICAgbGV0IHNlbGVjdE9wdGlvbnMgPSBbXTtcclxuICAgICAgICBsZXQgYXR0cmlidXRlcyAgICA9IFtdO1xyXG5cclxuICAgICAgICBpZiAoICEgb3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnYXR0cicpIHx8XHJcbiAgICAgICAgICAgICAhIGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3Qob3B0aW9ucy5hdHRyKVxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICBvcHRpb25zLmF0dHIgPSB7fTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChvcHRpb25zLmZpZWxkKSB7XHJcbiAgICAgICAgICAgIG9wdGlvbnMuYXR0ci5uYW1lID0gdGhpcy5fb3B0aW9ucy5maWVsZDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChvcHRpb25zLndpZHRoKSB7XHJcbiAgICAgICAgICAgIG9wdGlvbnMuYXR0ciA9IGNvcmV1aVRhYmxlVXRpbHMubWVyZ2VBdHRyKFxyXG4gICAgICAgICAgICAgICAgeyBzdHlsZTogJ3dpZHRoOicgKyBvcHRpb25zLndpZHRoICsgJ3B4JyB9LFxyXG4gICAgICAgICAgICAgICAgb3B0aW9ucy5hdHRyXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAob3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnb3B0aW9ucycpICYmXHJcbiAgICAgICAgICAgIHR5cGVvZiBvcHRpb25zLm9wdGlvbnMgPT09ICdvYmplY3QnICYmXHJcbiAgICAgICAgICAgIG9wdGlvbnMub3B0aW9ucyAhPT0gbnVsbFxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICAkLmVhY2gob3B0aW9ucy5vcHRpb25zLCBmdW5jdGlvbiAoa2V5LCBvcHRpb24pIHtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG9wdGlvbiA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIG9wdGlvbiA9PT0gJ251bWJlcicpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZWxlY3RPcHRpb25zLnB1c2godGhhdC5fYnVpbGRPcHRpb24oe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnb3B0aW9uJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGtleSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogb3B0aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgfSkpO1xyXG5cclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoQ29yZXVpVGFibGVVdGlscy5pc09iamVjdChvcHRpb24pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHR5cGUgPSBvcHRpb24uaGFzT3duUHJvcGVydHkoJ3R5cGUnKSAmJiB0eXBlb2Ygb3B0aW9uLnR5cGUgPT09ICdzdHJpbmcnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgID8gb3B0aW9uLnR5cGVcclxuICAgICAgICAgICAgICAgICAgICAgICAgOiAnb3B0aW9uJztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGUgPT09ICdncm91cCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHJlbmRlckF0dHIgICA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgZ3JvdXBBdHRyICAgID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBncm91cE9wdGlvbnMgPSBbXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcHRpb24uaGFzT3duUHJvcGVydHkoJ2F0dHInKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29yZXVpVGFibGVVdGlscy5pc09iamVjdChvcHRpb24uYXR0cilcclxuICAgICAgICAgICAgICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBncm91cEF0dHIgPSBvcHRpb24uYXR0cjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbi5oYXNPd25Qcm9wZXJ0eSgnbGFiZWwnKSAmJiBbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZihvcHRpb24ubGFiZWwpKSA+PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBncm91cEF0dHIubGFiZWwgPSBvcHRpb24ubGFiZWw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICQuZWFjaChncm91cEF0dHIsIGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVyQXR0ci5wdXNoKG5hbWUgKyAnPVwiJyArIHZhbHVlICsgJ1wiJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkob3B0aW9uLm9wdGlvbnMpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLmVhY2gob3B0aW9uLm9wdGlvbnMsIGZ1bmN0aW9uIChrZXksIGdyb3VwT3B0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3JvdXBPcHRpb25zLnB1c2godGhhdC5fYnVpbGRPcHRpb24oZ3JvdXBPcHRpb24pKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RPcHRpb25zLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2dyb3VwJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHI6IHJlbmRlckF0dHIubGVuZ3RoID4gMCA/ICgnICcgKyByZW5kZXJBdHRyLmpvaW4oJyAnKSkgOiAnJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnM6IGdyb3VwT3B0aW9ucyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdE9wdGlvbnMucHVzaCh0aGF0Ll9idWlsZE9wdGlvbihvcHRpb24pKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgJC5lYWNoKG9wdGlvbnMuYXR0ciwgZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XHJcbiAgICAgICAgICAgIGF0dHJpYnV0ZXMucHVzaChuYW1lICsgJz1cIicgKyB2YWx1ZSArICdcIicpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gZWpzLnJlbmRlcihjb3JldWlUYWJsZVRwbFsnc2VhcmNoL3NlbGVjdC5odG1sJ10sIHtcclxuICAgICAgICAgICAgZmllbGQ6IG9wdGlvbnMsXHJcbiAgICAgICAgICAgIHZhbHVlOiB0aGlzLl92YWx1ZSxcclxuICAgICAgICAgICAgYXR0cjogYXR0cmlidXRlcy5sZW5ndGggPiAwID8gKCcgJyArIGF0dHJpYnV0ZXMuam9pbignICcpKSA6ICcnLFxyXG4gICAgICAgICAgICBvcHRpb25zOiBzZWxlY3RPcHRpb25zXHJcbiAgICAgICAgfSk7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCh0LHQvtGA0LrQsCDQvtC/0YbQuNC4XHJcbiAgICAgKiBAcGFyYW0gb3B0aW9uXHJcbiAgICAgKiBAcmV0dXJuIHtvYmplY3R9XHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBfYnVpbGRPcHRpb246IGZ1bmN0aW9uIChvcHRpb24pIHtcclxuXHJcbiAgICAgICAgbGV0IG9wdGlvbkF0dHIgPSBbXTtcclxuICAgICAgICBsZXQgb3B0aW9uVGV4dCA9IG9wdGlvbi5oYXNPd25Qcm9wZXJ0eSgndGV4dCcpICYmIFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mKG9wdGlvbi50ZXh0KSkgPj0gMFxyXG4gICAgICAgICAgICA/IG9wdGlvbi50ZXh0XHJcbiAgICAgICAgICAgIDogJyc7XHJcblxyXG4gICAgICAgICQuZWFjaChvcHRpb24sIGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xyXG4gICAgICAgICAgICBpZiAobmFtZSAhPT0gJ3RleHQnKSB7XHJcbiAgICAgICAgICAgICAgICBvcHRpb25BdHRyLnB1c2gobmFtZSArICc9XCInICsgdmFsdWUgKyAnXCInKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuXHJcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodGhpcy5fdmFsdWUpKSB7XHJcbiAgICAgICAgICAgICQuZWFjaCh0aGlzLl92YWx1ZSwgZnVuY3Rpb24gKGtleSwgaXRlbVZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaXRlbVZhbHVlID09IG9wdGlvbi52YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbkF0dHIucHVzaCgnc2VsZWN0ZWQ9XCJzZWxlY3RlZFwiJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLl92YWx1ZSA9PSBvcHRpb24udmFsdWUpIHtcclxuICAgICAgICAgICAgb3B0aW9uQXR0ci5wdXNoKCdzZWxlY3RlZD1cInNlbGVjdGVkXCInKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHR5cGU6ICdvcHRpb24nLFxyXG4gICAgICAgICAgICB0ZXh0OiBvcHRpb25UZXh0LFxyXG4gICAgICAgICAgICBhdHRyOiBvcHRpb25BdHRyLmxlbmd0aCA+IDAgPyAoJyAnICsgb3B0aW9uQXR0ci5qb2luKCcgJykpIDogJydcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG59IiwiXHJcbmltcG9ydCBjb3JldWlUYWJsZSAgICAgIGZyb20gXCIuLi9jb3JldWkudGFibGVcIjtcclxuaW1wb3J0IGNvcmV1aVRhYmxlVHBsICAgZnJvbSBcIi4uL2NvcmV1aS50YWJsZS50ZW1wbGF0ZXNcIjtcclxuaW1wb3J0IGNvcmV1aVRhYmxlVXRpbHMgZnJvbSBcIi4uL2NvcmV1aS50YWJsZS51dGlsc1wiO1xyXG5pbXBvcnQgY29yZXVpVGFibGVFbGVtZW50cyBmcm9tIFwiLi4vY29yZXVpLnRhYmxlLmVsZW1lbnRzXCI7XHJcblxyXG5jb3JldWlUYWJsZS5zZWFyY2guc3dpdGNoID0ge1xyXG5cclxuICAgIF9pZDogbnVsbCxcclxuICAgIF90YWJsZTogbnVsbCxcclxuICAgIF92YWx1ZTogbnVsbCxcclxuICAgIF9yZW5kZXI6IGZhbHNlLFxyXG4gICAgX29wdGlvbnM6IHtcclxuICAgICAgICBpZDogbnVsbCxcclxuICAgICAgICB0eXBlOiAnc3dpdGNoJyxcclxuICAgICAgICBmaWVsZDogbnVsbCxcclxuICAgICAgICB2YWx1ZTogbnVsbCxcclxuICAgICAgICB2YWx1ZVk6ICdZJ1xyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQmNC90LjRhtC40LDQu9C40LfQsNGG0LjRj1xyXG4gICAgICogQHBhcmFtIHtDb3JlVUkudGFibGUuaW5zdGFuY2V9IHRhYmxlXHJcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gICAgICAgICAgICAgICAgb3B0aW9uc1xyXG4gICAgICovXHJcbiAgICBpbml0OiBmdW5jdGlvbiAodGFibGUsIG9wdGlvbnMpIHtcclxuXHJcbiAgICAgICAgdGhpcy5fb3B0aW9ucyA9ICQuZXh0ZW5kKHRydWUsIHt9LCB0aGlzLl9vcHRpb25zLCBvcHRpb25zKTtcclxuICAgICAgICB0aGlzLl90YWJsZSAgID0gdGFibGU7XHJcbiAgICAgICAgdGhpcy5faWQgICAgICA9IHRoaXMuX29wdGlvbnMuaGFzT3duUHJvcGVydHkoJ2lkJykgJiYgdHlwZW9mIHRoaXMuX29wdGlvbnMuaWQgPT09ICdzdHJpbmcnICYmIHRoaXMuX29wdGlvbnMuaWRcclxuICAgICAgICAgICAgPyB0aGlzLl9vcHRpb25zLmlkXHJcbiAgICAgICAgICAgIDogY29yZXVpVGFibGVVdGlscy5oYXNoQ29kZSgpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy52YWx1ZSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLnNldFZhbHVlKHRoaXMuX29wdGlvbnMudmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC/0LDRgNCw0LzQtdGC0YDQvtCyXHJcbiAgICAgKiBAcmV0dXJucyB7b2JqZWN0fVxyXG4gICAgICovXHJcbiAgICBnZXRPcHRpb25zOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuICQuZXh0ZW5kKHRydWUsIHt9LCB0aGlzLl9vcHRpb25zKTtcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1IGlkXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxyXG4gICAgICovXHJcbiAgICBnZXRJZDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9pZDtcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KPRgdGC0LDQvdC+0LLQutCwINC30L3QsNGH0LXQvdC40Y9cclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfG51bWJlcnxudWxsfSB2YWx1ZVxyXG4gICAgICovXHJcbiAgICBzZXRWYWx1ZTogZnVuY3Rpb24gKHZhbHVlKSB7XHJcblxyXG4gICAgICAgIGlmICh2YWx1ZSAhPT0gbnVsbCAmJlxyXG4gICAgICAgICAgICB0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnICYmXHJcbiAgICAgICAgICAgIHR5cGVvZiB2YWx1ZSAhPT0gJ251bWJlcidcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fdmFsdWUgPSB2YWx1ZVxyXG5cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX3JlbmRlcikge1xyXG4gICAgICAgICAgICBsZXQgY29udHJvbCA9IGNvcmV1aVRhYmxlRWxlbWVudHMuZ2V0U2VhcmNoQ29udHJvbCh0aGlzLl90YWJsZS5nZXRJZCgpLCB0aGlzLl9pZCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoY29udHJvbFswXSkge1xyXG4gICAgICAgICAgICAgICAgbGV0IHZhbHVlWSA9IHR5cGVvZiB0aGlzLl9vcHRpb25zLnZhbHVlWSA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIHRoaXMuX29wdGlvbnMudmFsdWVZID09PSAnbnVtYmVyJ1xyXG4gICAgICAgICAgICAgICAgICAgID8gdGhpcy5fb3B0aW9ucy52YWx1ZVlcclxuICAgICAgICAgICAgICAgICAgICA6ICcnXHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX3ZhbHVlID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJCgnaW5wdXQnLCBjb250cm9sKS5wcm9wKCdjaGVja2VkJywgZmFsc2UpO1xyXG5cclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5fdmFsdWUgPT09IHZhbHVlWSkge1xyXG4gICAgICAgICAgICAgICAgICAgICQoJ2lucHV0JywgY29udHJvbCkucHJvcCgnY2hlY2tlZCcsIHRydWUpO1xyXG5cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJCgnaW5wdXQnLCBjb250cm9sKS5wcm9wKCdjaGVja2VkJywgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0LfQvdCw0YfQtdC90LjRj1xyXG4gICAgICogQHJldHVybnMge3N0cmluZ31cclxuICAgICAqL1xyXG4gICAgZ2V0VmFsdWU6IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgbGV0IGNvbnRyb2wgPSBjb3JldWlUYWJsZUVsZW1lbnRzLmdldFNlYXJjaENvbnRyb2wodGhpcy5fdGFibGUuZ2V0SWQoKSwgdGhpcy5faWQpO1xyXG4gICAgICAgIGxldCBpbnB1dCAgID0gJCgnaW5wdXQ6Y2hlY2tlZCcsIGNvbnRyb2wpO1xyXG5cclxuICAgICAgICByZXR1cm4gaW5wdXRbMF0gPyBpbnB1dC52YWwoKSA6IG51bGw7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPINGB0L7QsdGL0YLQuNC5XHJcbiAgICAgKi9cclxuICAgIGluaXRFdmVudHM6IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCk0L7RgNC80LjRgNC+0LLQsNC90LjQtSDQutC+0L3RgtC10L3RgtCwXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxyXG4gICAgICovXHJcbiAgICByZW5kZXI6IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICB0aGlzLl9yZW5kZXIgPSB0cnVlO1xyXG5cclxuICAgICAgICBsZXQgb3B0aW9ucyA9IHRoaXMuZ2V0T3B0aW9ucygpO1xyXG4gICAgICAgIGxldCB2YWx1ZVkgID0gdHlwZW9mIG9wdGlvbnMudmFsdWVZID09PSAnc3RyaW5nJyB8fCB0eXBlb2Ygb3B0aW9ucy52YWx1ZVkgPT09ICdudW1iZXInXHJcbiAgICAgICAgICAgID8gb3B0aW9ucy52YWx1ZVlcclxuICAgICAgICAgICAgOiAnJ1xyXG5cclxuICAgICAgICByZXR1cm4gZWpzLnJlbmRlcihjb3JldWlUYWJsZVRwbFsnc2VhcmNoL3N3aXRjaC5odG1sJ10sIHtcclxuICAgICAgICAgICAgaWQ6IHRoaXMuX2lkLFxyXG4gICAgICAgICAgICB2YWx1ZVk6IHZhbHVlWSxcclxuICAgICAgICAgICAgZmllbGQ6IHR5cGVvZiBvcHRpb25zLmZpZWxkID09PSAnc3RyaW5nJyA/IG9wdGlvbnMuZmllbGQgOiAnJyxcclxuICAgICAgICAgICAgY2hlY2tlZDogdGhpcy5fdmFsdWUgPT0gdmFsdWVZLFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59IiwiXHJcbmltcG9ydCBjb3JldWlUYWJsZSBmcm9tIFwiLi4vY29yZXVpLnRhYmxlXCI7XHJcblxyXG5jb3JldWlUYWJsZS5jb2x1bW5zLmRhdGUgPSB7XHJcblxyXG4gICAgX3RhYmxlOiBudWxsLFxyXG4gICAgX29wdGlvbnM6IHtcclxuICAgICAgICB0eXBlOiAnZGF0ZScsXHJcbiAgICAgICAgZmllbGQ6IG51bGwsXHJcbiAgICAgICAgbGFiZWw6IG51bGwsXHJcbiAgICAgICAgc2hvdzogdHJ1ZSxcclxuICAgICAgICB3aWR0aDogbnVsbCxcclxuICAgICAgICBmb3JtYXQ6ICdERC5NTS5ZWVlZJyxcclxuICAgICAgICBhdHRyOiB7fSxcclxuICAgICAgICBhdHRySGVhZGVyOiB7fSxcclxuICAgICAgICByZW5kZXI6IG51bGxcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y9cclxuICAgICAqIEBwYXJhbSB7Q29yZVVJLnRhYmxlLmluc3RhbmNlfSB0YWJsZVxyXG4gICAgICogQHBhcmFtIHtvYmplY3R9ICAgICAgICAgICAgICAgIG9wdGlvbnNcclxuICAgICAqL1xyXG4gICAgaW5pdDogZnVuY3Rpb24gKHRhYmxlLCBvcHRpb25zKSB7XHJcblxyXG4gICAgICAgIHRoaXMuX3RhYmxlICAgPSB0YWJsZTtcclxuICAgICAgICB0aGlzLl9vcHRpb25zID0gJC5leHRlbmQoe30sIHRoaXMuX29wdGlvbnMsIG9wdGlvbnMpO1xyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQo9GB0YLQsNC90L7QstC60LAg0LLQuNC00LjQvNC+0YHRgtC4INC60L7Qu9C+0L3QutC4XHJcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGlzU2hvd1xyXG4gICAgICovXHJcbiAgICBzZXRTaG93OiBmdW5jdGlvbiAoaXNTaG93KSB7XHJcbiAgICAgICAgdGhpcy5fb3B0aW9ucy5zaG93ID0gISEgaXNTaG93O1xyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQktC40LTQuNC80L7RgdGC0Lgg0LrQvtC70L7QvdC60LhcclxuICAgICAqL1xyXG4gICAgaXNTaG93OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuICEhIHRoaXMuX29wdGlvbnMuc2hvdztcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC/0LDRgNCw0LzQtdGC0YDQvtCyXHJcbiAgICAgKiBAcmV0dXJucyB7b2JqZWN0fVxyXG4gICAgICovXHJcbiAgICBnZXRPcHRpb25zOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuICQuZXh0ZW5kKHt9LCB0aGlzLl9vcHRpb25zKTtcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KTQvtGA0LzQuNGA0L7QstCw0L3QuNC1INC60L7QvdGC0LXQvdGC0LBcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjb250ZW50XHJcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gcmVjb3JkXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxyXG4gICAgICovXHJcbiAgICByZW5kZXI6IGZ1bmN0aW9uKGNvbnRlbnQsIHJlY29yZCkge1xyXG5cclxuICAgICAgICBpZiAodHlwZW9mIGNvbnRlbnQgIT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAnJztcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBpZiAoY29udGVudCAhPT0gJycpIHtcclxuICAgICAgICAgICAgICAgIGxldCBkYXRlID0gbmV3IERhdGUoY29udGVudCk7XHJcblxyXG4gICAgICAgICAgICAgICAgY29udGVudCA9IHRoaXMuX29wdGlvbnMuZm9ybWF0XHJcbiAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL1lZWVkvZywgdGhpcy5fc3RyUGFkTGVmdChkYXRlLmdldEZ1bGxZZWFyKCksIDQpKVxyXG4gICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9NTS9nLCB0aGlzLl9zdHJQYWRMZWZ0KGRhdGUuZ2V0TW9udGgoKSArIDEsIDIpKVxyXG4gICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9NL2csIGRhdGUuZ2V0TW9udGgoKSArIDEpXHJcbiAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL0REL2csIHRoaXMuX3N0clBhZExlZnQoZGF0ZS5nZXREYXRlKCksIDIpKVxyXG4gICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9EL2csIGRhdGUuZ2V0RGF0ZSgpKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgIGNvbnRlbnQgPSAnJztcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICByZXR1cm4gY29udGVudDtcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KDQsNC30LzQtdGA0L3QvtGB0YLRjCDRgdGC0YDQvtC60LhcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJcclxuICAgICAqIEBwYXJhbSB7aW50fSAgICBjb3VudFxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHJlcGVhdFxyXG4gICAgICogQHJldHVybnMge3N0cmluZ31cclxuICAgICAqL1xyXG4gICAgX3N0clBhZExlZnQ6IGZ1bmN0aW9uIChzdHIsIGNvdW50LCByZXBlYXQpIHtcclxuXHJcbiAgICAgICAgc3RyID0gU3RyaW5nKHN0cik7XHJcblxyXG4gICAgICAgIGlmIChzdHIubGVuZ3RoID49IGNvdW50KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBzdHI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXBlYXQgPSByZXBlYXQgPyByZXBlYXQgOiAnMCc7XHJcblxyXG4gICAgICAgIHJldHVybiAocmVwZWF0LnJlcGVhdChjb3VudCkgKyBzdHIpLnNsaWNlKC0oY291bnQpKTtcclxuICAgIH1cclxufSIsImltcG9ydCBjb3JldWlUYWJsZSBmcm9tIFwiLi4vY29yZXVpLnRhYmxlXCI7XHJcblxyXG5jb3JldWlUYWJsZS5jb2x1bW5zLmRhdGV0aW1lID0ge1xyXG5cclxuICAgIF90YWJsZTogbnVsbCxcclxuICAgIF9vcHRpb25zOiB7XHJcbiAgICAgICAgdHlwZTogJ2RhdGV0aW1lJyxcclxuICAgICAgICBmaWVsZDogbnVsbCxcclxuICAgICAgICBsYWJlbDogbnVsbCxcclxuICAgICAgICBzaG93OiB0cnVlLFxyXG4gICAgICAgIHdpZHRoOiBudWxsLFxyXG4gICAgICAgIGZvcm1hdDogJ0RELk1NLllZWVkgaGg6bW06c3MnLFxyXG4gICAgICAgIGF0dHI6IHt9LFxyXG4gICAgICAgIGF0dHJIZWFkZXI6IHt9LFxyXG4gICAgICAgIHJlbmRlcjogbnVsbFxyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQmNC90LjRhtC40LDQu9C40LfQsNGG0LjRj1xyXG4gICAgICogQHBhcmFtIHtDb3JlVUkudGFibGUuaW5zdGFuY2V9IHRhYmxlXHJcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gICAgICAgICAgICAgICAgb3B0aW9uc1xyXG4gICAgICovXHJcbiAgICBpbml0OiBmdW5jdGlvbiAodGFibGUsIG9wdGlvbnMpIHtcclxuXHJcbiAgICAgICAgdGhpcy5fdGFibGUgICA9IHRhYmxlO1xyXG4gICAgICAgIHRoaXMuX29wdGlvbnMgPSAkLmV4dGVuZCh7fSwgdGhpcy5fb3B0aW9ucywgb3B0aW9ucyk7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCj0YHRgtCw0L3QvtCy0LrQsCDQstC40LTQuNC80L7RgdGC0Lgg0LrQvtC70L7QvdC60LhcclxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gaXNTaG93XHJcbiAgICAgKi9cclxuICAgIHNldFNob3c6IGZ1bmN0aW9uIChpc1Nob3cpIHtcclxuICAgICAgICB0aGlzLl9vcHRpb25zLnNob3cgPSAhISBpc1Nob3c7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCS0LjQtNC40LzQvtGB0YLQuCDQutC+0LvQvtC90LrQuFxyXG4gICAgICovXHJcbiAgICBpc1Nob3c6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gISEgdGhpcy5fb3B0aW9ucy5zaG93O1xyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0L/QsNGA0LDQvNC10YLRgNC+0LJcclxuICAgICAqIEByZXR1cm5zIHtvYmplY3R9XHJcbiAgICAgKi9cclxuICAgIGdldE9wdGlvbnM6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gJC5leHRlbmQoe30sIHRoaXMuX29wdGlvbnMpO1xyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQpNC+0YDQvNC40YDQvtCy0LDQvdC40LUg0LrQvtC90YLQtdC90YLQsFxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGNvbnRlbnRcclxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSByZWNvcmRcclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIHJlbmRlcjogZnVuY3Rpb24oY29udGVudCwgcmVjb3JkKSB7XHJcblxyXG4gICAgICAgIGlmICh0eXBlb2YgY29udGVudCAhPT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKGNvbnRlbnQgIT09ICcnKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgZGF0ZSA9IG5ldyBEYXRlKGNvbnRlbnQpO1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnRlbnQgPSB0aGlzLl9vcHRpb25zLmZvcm1hdFxyXG4gICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9ZWVlZL2csIHRoaXMuX3N0clBhZExlZnQoZGF0ZS5nZXRGdWxsWWVhcigpLCA0KSlcclxuICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvTU0vZywgdGhpcy5fc3RyUGFkTGVmdChkYXRlLmdldE1vbnRoKCkgKyAxLCAyKSlcclxuICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvTS9nLCBkYXRlLmdldE1vbnRoKCkgKyAxKVxyXG4gICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9ERC9nLCB0aGlzLl9zdHJQYWRMZWZ0KGRhdGUuZ2V0RGF0ZSgpLCAyKSlcclxuICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvRC9nLCBkYXRlLmdldERhdGUoKSlcclxuICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvaGgvZywgdGhpcy5fc3RyUGFkTGVmdChkYXRlLmdldEhvdXJzKCksIDIpKVxyXG4gICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9tbS9nLCB0aGlzLl9zdHJQYWRMZWZ0KGRhdGUuZ2V0TWludXRlcygpLCAyKSlcclxuICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvbS9nLCBkYXRlLmdldE1pbnV0ZXMoKSlcclxuICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvc3MvZywgdGhpcy5fc3RyUGFkTGVmdChkYXRlLmdldFNlY29uZHMoKSwgMikpXHJcbiAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL3MvZywgZGF0ZS5nZXRTZWNvbmRzKCkpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgY29udGVudCA9ICcnO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIHJldHVybiBjb250ZW50O1xyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQoNCw0LfQvNC10YDQvdC+0YHRgtGMINGB0YLRgNC+0LrQuFxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHN0clxyXG4gICAgICogQHBhcmFtIHtpbnR9ICAgIGNvdW50XHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcmVwZWF0XHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxyXG4gICAgICovXHJcbiAgICBfc3RyUGFkTGVmdDogZnVuY3Rpb24gKHN0ciwgY291bnQsIHJlcGVhdCkge1xyXG5cclxuICAgICAgICBzdHIgPSBTdHJpbmcoc3RyKTtcclxuXHJcbiAgICAgICAgaWYgKHN0ci5sZW5ndGggPj0gY291bnQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHN0cjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJlcGVhdCA9IHJlcGVhdCA/IHJlcGVhdCA6ICcwJztcclxuXHJcbiAgICAgICAgcmV0dXJuIChyZXBlYXQucmVwZWF0KGNvdW50KSArIHN0cikuc2xpY2UoLShjb3VudCkpO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IGNvcmV1aVRhYmxlICAgICAgZnJvbSBcIi4uL2NvcmV1aS50YWJsZVwiO1xyXG5pbXBvcnQgY29yZXVpVGFibGVVdGlscyBmcm9tIFwiLi4vY29yZXVpLnRhYmxlLnV0aWxzXCI7XHJcblxyXG5jb3JldWlUYWJsZS5jb2x1bW5zLmh0bWwgPSB7XHJcblxyXG4gICAgX3RhYmxlOiBudWxsLFxyXG4gICAgX29wdGlvbnM6IHtcclxuICAgICAgICB0eXBlOiAnaHRtbCcsXHJcbiAgICAgICAgZmllbGQ6IG51bGwsXHJcbiAgICAgICAgbGFiZWw6IG51bGwsXHJcbiAgICAgICAgc2hvdzogdHJ1ZSxcclxuICAgICAgICB3aWR0aDogbnVsbCxcclxuICAgICAgICBtaW5XaWR0aDogbnVsbCxcclxuICAgICAgICBtYXhXaWR0aDogbnVsbCxcclxuICAgICAgICBub1dyYXA6IG51bGwsXHJcbiAgICAgICAgbm9XcmFwVG9nZ2xlOiBudWxsLFxyXG4gICAgICAgIGF0dHI6IHt9LFxyXG4gICAgICAgIGF0dHJIZWFkZXI6IHt9LFxyXG4gICAgICAgIHJlbmRlcjogbnVsbFxyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQmNC90LjRhtC40LDQu9C40LfQsNGG0LjRj1xyXG4gICAgICogQHBhcmFtIHtDb3JlVUkudGFibGUuaW5zdGFuY2V9IHRhYmxlXHJcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gICAgICAgICAgICAgICAgb3B0aW9uc1xyXG4gICAgICovXHJcbiAgICBpbml0OiBmdW5jdGlvbiAodGFibGUsIG9wdGlvbnMpIHtcclxuXHJcbiAgICAgICAgdGhpcy5fdGFibGUgICA9IHRhYmxlO1xyXG4gICAgICAgIHRoaXMuX29wdGlvbnMgPSAkLmV4dGVuZCh7fSwgdGhpcy5fb3B0aW9ucywgb3B0aW9ucyk7XHJcblxyXG4gICAgICAgIGxldCB0YWJsZU9wdGlvbnMgPSB0aGlzLl90YWJsZS5nZXRPcHRpb25zKCk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLm5vV3JhcCB8fFxyXG4gICAgICAgICAgICAodGhpcy5fb3B0aW9ucy5ub1dyYXAgPT09IG51bGwgJiYgdGFibGVPcHRpb25zLm5vV3JhcClcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgaWYgKCAhIHRoaXMuX29wdGlvbnMuYXR0cikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy5hdHRyID0geyBjbGFzcyA6ICdjb3JldWlfdGFibGVfX25vLXdyYXAnIH07XHJcblxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy5hdHRyID0gY29yZXVpVGFibGVVdGlscy5tZXJnZUF0dHIodGhpcy5fb3B0aW9ucy5hdHRyLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3M6ICdjb3JldWlfdGFibGVfX25vLXdyYXAnXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy5ub1dyYXAgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMubm9XcmFwVG9nZ2xlIHx8XHJcbiAgICAgICAgICAgICAgICAodGhpcy5fb3B0aW9ucy5ub1dyYXBUb2dnbGUgPT09IG51bGwgJiYgdGFibGVPcHRpb25zLm5vV3JhcFRvZ2dsZSlcclxuICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9vcHRpb25zLm5vV3JhcFRvZ2dsZSA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCj0YHRgtCw0L3QvtCy0LrQsCDQstC40LTQuNC80L7RgdGC0Lgg0LrQvtC70L7QvdC60LhcclxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gaXNTaG93XHJcbiAgICAgKi9cclxuICAgIHNldFNob3c6IGZ1bmN0aW9uIChpc1Nob3cpIHtcclxuICAgICAgICB0aGlzLl9vcHRpb25zLnNob3cgPSAhISBpc1Nob3c7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCS0LjQtNC40LzQvtGB0YLQuCDQutC+0LvQvtC90LrQuFxyXG4gICAgICovXHJcbiAgICBpc1Nob3c6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gISEgdGhpcy5fb3B0aW9ucy5zaG93O1xyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0L/QsNGA0LDQvNC10YLRgNC+0LJcclxuICAgICAqIEByZXR1cm5zIHtvYmplY3R9XHJcbiAgICAgKi9cclxuICAgIGdldE9wdGlvbnM6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gJC5leHRlbmQoe30sIHRoaXMuX29wdGlvbnMpO1xyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQpNC+0YDQvNC40YDQvtCy0LDQvdC40LUg0LrQvtC90YLQtdC90YLQsFxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd8SFRNTEVsZW1lbnR8alF1ZXJ5fSBjb250ZW50XHJcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gICAgICAgICAgICAgICAgICAgIHJlY29yZFxyXG4gICAgICogQHJldHVybnMge3N0cmluZ31cclxuICAgICAqL1xyXG4gICAgcmVuZGVyOiBmdW5jdGlvbihjb250ZW50LCByZWNvcmQpIHtcclxuXHJcbiAgICAgICAgaWYgKFsnc3RyaW5nJywgJ2JpZ2ludCcsICdzeW1ib2wnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2YgY29udGVudCkgPCAwICYmXHJcbiAgICAgICAgICAgICEgKGNvbnRlbnQgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkgJiZcclxuICAgICAgICAgICAgISAod2luZG93Lmhhc093blByb3BlcnR5KCdqUXVlcnknKSAmJiBjb250ZW50IGluc3RhbmNlb2YgalF1ZXJ5KVxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICByZXR1cm4gJyc7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy5ub1dyYXApIHtcclxuICAgICAgICAgICAgY29udGVudCA9ICQoJzxkaXY+PC9kaXY+JykuYXBwZW5kKGNvbnRlbnQpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMubm9XcmFwVG9nZ2xlKSB7XHJcbiAgICAgICAgICAgICAgICBjb250ZW50ID0gJChjb250ZW50KS5hZnRlcignPGkgY2xhc3M9XCJiaSBiaS1jYXJldC1kb3duLWZpbGwgdG9nZ2xlXCI+PC9pPicpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBjb250ZW50O1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IGNvcmV1aVRhYmxlIGZyb20gXCIuLi9jb3JldWkudGFibGVcIjtcclxuaW1wb3J0IGNvcmV1aVRhYmxlVXRpbHMgZnJvbSBcIi4uL2NvcmV1aS50YWJsZS51dGlsc1wiO1xyXG5cclxuY29yZXVpVGFibGUuY29sdW1ucy5udW1iZXIgPSB7XHJcblxyXG4gICAgX3RhYmxlOiBudWxsLFxyXG4gICAgX29wdGlvbnM6IHtcclxuICAgICAgICB0eXBlOiAnbnVtYmVyJyxcclxuICAgICAgICBmaWVsZDogbnVsbCxcclxuICAgICAgICBsYWJlbDogbnVsbCxcclxuICAgICAgICBzaG93OiB0cnVlLFxyXG4gICAgICAgIHdpZHRoOiBudWxsLFxyXG4gICAgICAgIG1pbldpZHRoOiBudWxsLFxyXG4gICAgICAgIG1heFdpZHRoOiBudWxsLFxyXG4gICAgICAgIG5vV3JhcDogbnVsbCxcclxuICAgICAgICBub1dyYXBUb2dnbGU6IG51bGwsXHJcbiAgICAgICAgYXR0cjoge30sXHJcbiAgICAgICAgYXR0ckhlYWRlcjoge30sXHJcbiAgICAgICAgcmVuZGVyOiBudWxsXHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPXHJcbiAgICAgKiBAcGFyYW0ge0NvcmVVSS50YWJsZS5pbnN0YW5jZX0gdGFibGVcclxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSAgICAgICAgICAgICAgICBvcHRpb25zXHJcbiAgICAgKi9cclxuICAgIGluaXQ6IGZ1bmN0aW9uICh0YWJsZSwgb3B0aW9ucykge1xyXG5cclxuICAgICAgICB0aGlzLl90YWJsZSAgID0gdGFibGU7XHJcbiAgICAgICAgdGhpcy5fb3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCB0aGlzLl9vcHRpb25zLCBvcHRpb25zKTtcclxuXHJcbiAgICAgICAgbGV0IHRhYmxlT3B0aW9ucyA9IHRoaXMuX3RhYmxlLmdldE9wdGlvbnMoKTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMubm9XcmFwIHx8XHJcbiAgICAgICAgICAgICh0aGlzLl9vcHRpb25zLm5vV3JhcCA9PT0gbnVsbCAmJiB0YWJsZU9wdGlvbnMubm9XcmFwKVxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICBpZiAoICEgdGhpcy5fb3B0aW9ucy5hdHRyKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9vcHRpb25zLmF0dHIgPSB7IGNsYXNzIDogJ2NvcmV1aV90YWJsZV9fbm8td3JhcCcgfTtcclxuXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9vcHRpb25zLmF0dHIgPSBjb3JldWlUYWJsZVV0aWxzLm1lcmdlQXR0cih0aGlzLl9vcHRpb25zLmF0dHIsIHtcclxuICAgICAgICAgICAgICAgICAgICBjbGFzczogJ2NvcmV1aV90YWJsZV9fbm8td3JhcCdcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLl9vcHRpb25zLm5vV3JhcCA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy5ub1dyYXBUb2dnbGUgfHxcclxuICAgICAgICAgICAgICAgICh0aGlzLl9vcHRpb25zLm5vV3JhcFRvZ2dsZSA9PT0gbnVsbCAmJiB0YWJsZU9wdGlvbnMubm9XcmFwVG9nZ2xlKVxyXG4gICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX29wdGlvbnMubm9XcmFwVG9nZ2xlID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KPRgdGC0LDQvdC+0LLQutCwINCy0LjQtNC40LzQvtGB0YLQuCDQutC+0LvQvtC90LrQuFxyXG4gICAgICogQHBhcmFtIHtib29sZWFufSBpc1Nob3dcclxuICAgICAqL1xyXG4gICAgc2V0U2hvdzogZnVuY3Rpb24gKGlzU2hvdykge1xyXG4gICAgICAgIHRoaXMuX29wdGlvbnMuc2hvdyA9ICEhIGlzU2hvdztcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0JLQuNC00LjQvNC+0YHRgtC4INC60L7Qu9C+0L3QutC4XHJcbiAgICAgKi9cclxuICAgIGlzU2hvdzogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiAhISB0aGlzLl9vcHRpb25zLnNob3c7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSDQv9Cw0YDQsNC80LXRgtGA0L7QslxyXG4gICAgICogQHJldHVybnMge29iamVjdH1cclxuICAgICAqL1xyXG4gICAgZ2V0T3B0aW9uczogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiAkLmV4dGVuZCh7fSwgdGhpcy5fb3B0aW9ucyk7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCk0L7RgNC80LjRgNC+0LLQsNC90LjQtSDQutC+0L3RgtC10L3RgtCwXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gY29udGVudFxyXG4gICAgICogQHBhcmFtIHtvYmplY3R9IHJlY29yZFxyXG4gICAgICogQHJldHVybnMge3N0cmluZ31cclxuICAgICAqL1xyXG4gICAgcmVuZGVyOiBmdW5jdGlvbihjb250ZW50LCByZWNvcmQpIHtcclxuXHJcbiAgICAgICAgaWYgKFsnc3RyaW5nJywgJ2JpZ2ludCcsICdzeW1ib2wnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2YgY29udGVudCkgPCAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAnJztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnRlbnQgPSBTdHJpbmcoY29udGVudClcclxuICAgICAgICAgICAgLnJlcGxhY2UoLywvZywgJy4nKVxyXG4gICAgICAgICAgICAucmVwbGFjZSgvW14wLTlcXC1cXC5dL2csICcnKVxyXG4gICAgICAgICAgICAucmVwbGFjZSgvW1xcc117Mix9L2csICcgJyk7XHJcblxyXG4gICAgICAgIGNvbnRlbnQgPSBjb250ZW50LnJlcGxhY2UoLyg/PCEoXFwuXFxkKnxeLnswfSkpKD89KFxcZHszfSkrKD8hXFxkKSkvZywgJyQxICcpXHJcbiAgICAgICAgICAgIC5yZXBsYWNlKC9cXC0gL2csICctJyk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLm5vV3JhcCkge1xyXG4gICAgICAgICAgICBjb250ZW50ID0gJzxkaXY+JyArIGNvbnRlbnQgKyAnPC9kaXY+J1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMubm9XcmFwVG9nZ2xlKSB7XHJcbiAgICAgICAgICAgICAgICBjb250ZW50ICs9ICc8aSBjbGFzcz1cImJpIGJpLWNhcmV0LWRvd24tZmlsbCB0b2dnbGVcIj48L2k+J1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gY29udGVudDtcclxuICAgIH1cclxufSIsImltcG9ydCBjb3JldWlUYWJsZSAgICAgIGZyb20gXCIuLi9jb3JldWkudGFibGVcIjtcclxuaW1wb3J0IGNvcmV1aVRhYmxlVXRpbHMgZnJvbSBcIi4uL2NvcmV1aS50YWJsZS51dGlsc1wiO1xyXG5cclxuY29yZXVpVGFibGUuY29sdW1ucy5tb25leSA9IHtcclxuXHJcbiAgICBfdGFibGU6IG51bGwsXHJcbiAgICBfb3B0aW9uczoge1xyXG4gICAgICAgIHR5cGU6ICdtb25leScsXHJcbiAgICAgICAgZmllbGQ6IG51bGwsXHJcbiAgICAgICAgbGFiZWw6IG51bGwsXHJcbiAgICAgICAgc2hvdzogdHJ1ZSxcclxuICAgICAgICB3aWR0aDogbnVsbCxcclxuICAgICAgICBtaW5XaWR0aDogbnVsbCxcclxuICAgICAgICBtYXhXaWR0aDogbnVsbCxcclxuICAgICAgICBub1dyYXA6IG51bGwsXHJcbiAgICAgICAgbm9XcmFwVG9nZ2xlOiBudWxsLFxyXG4gICAgICAgIGN1cnJlbmN5OiBudWxsLFxyXG4gICAgICAgIGF0dHI6IHtcclxuICAgICAgICAgICAgY2xhc3M6ICd0ZXh0LWVuZCdcclxuICAgICAgICB9LFxyXG4gICAgICAgIGF0dHJIZWFkZXI6IHtcclxuICAgICAgICAgICAgY2xhc3M6ICd0ZXh0LWVuZCdcclxuICAgICAgICB9LFxyXG4gICAgICAgIHJlbmRlcjogbnVsbFxyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQmNC90LjRhtC40LDQu9C40LfQsNGG0LjRj1xyXG4gICAgICogQHBhcmFtIHtDb3JlVUkudGFibGUuaW5zdGFuY2V9IHRhYmxlXHJcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gICAgICAgICAgICAgICAgb3B0aW9uc1xyXG4gICAgICovXHJcbiAgICBpbml0OiBmdW5jdGlvbiAodGFibGUsIG9wdGlvbnMpIHtcclxuXHJcbiAgICAgICAgdGhpcy5fdGFibGUgICA9IHRhYmxlO1xyXG4gICAgICAgIHRoaXMuX29wdGlvbnMgPSAkLmV4dGVuZCh7fSwgdGhpcy5fb3B0aW9ucywgb3B0aW9ucyk7XHJcblxyXG4gICAgICAgIGxldCB0YWJsZU9wdGlvbnMgPSB0aGlzLl90YWJsZS5nZXRPcHRpb25zKCk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLm5vV3JhcCB8fFxyXG4gICAgICAgICAgICAodGhpcy5fb3B0aW9ucy5ub1dyYXAgPT09IG51bGwgJiYgdGFibGVPcHRpb25zLm5vV3JhcClcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgaWYgKCAhIHRoaXMuX29wdGlvbnMuYXR0cikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy5hdHRyID0geyBjbGFzcyA6ICdjb3JldWlfdGFibGVfX25vLXdyYXAnIH07XHJcblxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy5hdHRyID0gY29yZXVpVGFibGVVdGlscy5tZXJnZUF0dHIodGhpcy5fb3B0aW9ucy5hdHRyLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3M6ICdjb3JldWlfdGFibGVfX25vLXdyYXAnXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy5ub1dyYXAgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMubm9XcmFwVG9nZ2xlIHx8XHJcbiAgICAgICAgICAgICAgICAodGhpcy5fb3B0aW9ucy5ub1dyYXBUb2dnbGUgPT09IG51bGwgJiYgdGFibGVPcHRpb25zLm5vV3JhcFRvZ2dsZSlcclxuICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9vcHRpb25zLm5vV3JhcFRvZ2dsZSA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCj0YHRgtCw0L3QvtCy0LrQsCDQstC40LTQuNC80L7RgdGC0Lgg0LrQvtC70L7QvdC60LhcclxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gaXNTaG93XHJcbiAgICAgKi9cclxuICAgIHNldFNob3c6IGZ1bmN0aW9uIChpc1Nob3cpIHtcclxuICAgICAgICB0aGlzLl9vcHRpb25zLnNob3cgPSAhISBpc1Nob3c7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCS0LjQtNC40LzQvtGB0YLQuCDQutC+0LvQvtC90LrQuFxyXG4gICAgICovXHJcbiAgICBpc1Nob3c6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gISEgdGhpcy5fb3B0aW9ucy5zaG93O1xyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0L/QsNGA0LDQvNC10YLRgNC+0LJcclxuICAgICAqIEByZXR1cm5zIHtvYmplY3R9XHJcbiAgICAgKi9cclxuICAgIGdldE9wdGlvbnM6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gJC5leHRlbmQoe30sIHRoaXMuX29wdGlvbnMpO1xyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQpNC+0YDQvNC40YDQvtCy0LDQvdC40LUg0LrQvtC90YLQtdC90YLQsFxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGNvbnRlbnRcclxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSByZWNvcmRcclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIHJlbmRlcjogZnVuY3Rpb24oY29udGVudCwgcmVjb3JkKSB7XHJcblxyXG4gICAgICAgIGlmIChbJ3N0cmluZycsICdiaWdpbnQnLCAnc3ltYm9sJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIGNvbnRlbnQpIDwgMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gJyc7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgaWYgKGlzTmFOKGNvbnRlbnQpKSB7XHJcbiAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50LnRvU3RyaW5nKClcclxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKC8oXFxkKSg/PShcXGRcXGRcXGQpKyhbXlxcZF18JCkpL2csICckMSAnKTtcclxuXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY29udGVudCA9IE51bWJlcihjb250ZW50KS50b0ZpeGVkKDIpLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50LnJlcGxhY2UoLyhcXGQpKD89KFxcZFxcZFxcZCkrKFteXFxkXXwkKSkvZywgJyQxICcpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMuY3VycmVuY3kgJiZcclxuICAgICAgICAgICAgWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2YgdGhpcy5fb3B0aW9ucy5jdXJyZW5jeSkgPj0gMFxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICBjb250ZW50ICs9ICcgPHNtYWxsIGNsYXNzPVwidGV4dC1tdXRlZFwiPicgKyB0aGlzLl9vcHRpb25zLmN1cnJlbmN5ICsgJzwvc21hbGw+JztcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy5ub1dyYXApIHtcclxuICAgICAgICAgICAgY29udGVudCA9ICc8ZGl2PicgKyBjb250ZW50ICsgJzwvZGl2PidcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9vcHRpb25zLm5vV3JhcFRvZ2dsZSkge1xyXG4gICAgICAgICAgICAgICAgY29udGVudCArPSAnPGkgY2xhc3M9XCJiaSBiaS1jYXJldC1kb3duLWZpbGwgdG9nZ2xlXCI+PC9pPidcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGNvbnRlbnQ7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgY29yZXVpVGFibGUgZnJvbSBcIi4uL2NvcmV1aS50YWJsZVwiO1xyXG5cclxuY29yZXVpVGFibGUuY29sdW1ucy5udW1iZXJzID0ge1xyXG5cclxuICAgIF90YWJsZTogbnVsbCxcclxuICAgIF9vcHRpb25zOiB7XHJcbiAgICAgICAgdHlwZTogJ251bWJlcnMnLFxyXG4gICAgICAgIGxhYmVsOiAn4oSWJyxcclxuICAgICAgICB3aWR0aDogMjAsXHJcbiAgICAgICAgYXR0cjogeyBjbGFzczogJ3RleHQtZW5kJyB9LFxyXG4gICAgICAgIGF0dHJIZWFkZXI6IG51bGxcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y9cclxuICAgICAqIEBwYXJhbSB7Q29yZVVJLnRhYmxlLmluc3RhbmNlfSB0YWJsZVxyXG4gICAgICogQHBhcmFtIHtvYmplY3R9ICAgICAgICAgICAgICAgIG9wdGlvbnNcclxuICAgICAqL1xyXG4gICAgaW5pdDogZnVuY3Rpb24gKHRhYmxlLCBvcHRpb25zKSB7XHJcblxyXG4gICAgICAgIHRoaXMuX3RhYmxlICAgID0gdGFibGU7XHJcbiAgICAgICAgdGhpcy5fb3B0aW9ucyAgPSAkLmV4dGVuZCh0cnVlLCB7fSwgdGhpcy5fb3B0aW9ucywgb3B0aW9ucyk7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCS0LjQtNC40LzQvtGB0YLQuCDQutC+0LvQvtC90LrQuFxyXG4gICAgICovXHJcbiAgICBpc1Nob3c6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC/0LDRgNCw0LzQtdGC0YDQvtCyXHJcbiAgICAgKiBAcmV0dXJucyB7b2JqZWN0fVxyXG4gICAgICovXHJcbiAgICBnZXRPcHRpb25zOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuICQuZXh0ZW5kKHt9LCB0aGlzLl9vcHRpb25zKTtcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KTQvtGA0LzQuNGA0L7QstCw0L3QuNC1INC60L7QvdGC0LXQvdGC0LBcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjb250ZW50XHJcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gcmVjb3JkXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxyXG4gICAgICovXHJcbiAgICByZW5kZXI6IGZ1bmN0aW9uKGNvbnRlbnQsIHJlY29yZCkge1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5fdGFibGUuX3JlY29yZHNOdW1iZXI7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgY29yZXVpVGFibGUgICAgICAgICBmcm9tIFwiLi4vY29yZXVpLnRhYmxlXCI7XHJcbmltcG9ydCBjb3JldWlUYWJsZUVsZW1lbnRzIGZyb20gXCIuLi9jb3JldWkudGFibGUuZWxlbWVudHNcIjtcclxuaW1wb3J0IGNvcmV1aVRhYmxlUHJpdmF0ZSAgZnJvbSBcIi4uL2NvcmV1aS50YWJsZS5wcml2YXRlXCI7XHJcbmltcG9ydCBjb3JldWlUYWJsZVRwbCAgICAgIGZyb20gXCIuLi9jb3JldWkudGFibGUudGVtcGxhdGVzXCI7XHJcblxyXG5jb3JldWlUYWJsZS5jb2x1bW5zLnNlbGVjdCA9IHtcclxuXHJcbiAgICBfdGFibGU6IG51bGwsXHJcbiAgICBfb3B0aW9uczoge1xyXG4gICAgICAgIHR5cGU6ICdzZWxlY3QnLFxyXG4gICAgICAgIGZpZWxkOiBudWxsLFxyXG4gICAgICAgIGxhYmVsOiAnJyxcclxuICAgICAgICBzaG93OiB0cnVlLFxyXG4gICAgICAgIHdpZHRoOiAzNSxcclxuICAgICAgICBhdHRyOiB7IGNsYXNzOiAnY29yZXVpLXRhYmxlX19zZWxlY3RfY29udGFpbmVyIHRleHQtY2VudGVyJyB9LFxyXG4gICAgICAgIGF0dHJIZWFkZXI6IHsgY2xhc3M6ICd0ZXh0LWNlbnRlcicgfVxyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQmNC90LjRhtC40LDQu9C40LfQsNGG0LjRj1xyXG4gICAgICogQHBhcmFtIHtDb3JlVUkudGFibGUuaW5zdGFuY2V9IHRhYmxlXHJcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gICAgICAgICAgICAgICAgb3B0aW9uc1xyXG4gICAgICovXHJcbiAgICBpbml0OiBmdW5jdGlvbiAodGFibGUsIG9wdGlvbnMpIHtcclxuXHJcbiAgICAgICAgaWYgKG9wdGlvbnMuaGFzT3duUHJvcGVydHkoJ2F0dHInKSkge1xyXG4gICAgICAgICAgICBvcHRpb25zLmF0dHIgPSBDb3JlVUkudGFibGUuX21lcmdlQXR0cih0aGlzLl9vcHRpb25zLmF0dHIsIG9wdGlvbnMuYXR0cik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChvcHRpb25zLmhhc093blByb3BlcnR5KCdhdHRySGVhZGVyJykpIHtcclxuICAgICAgICAgICAgb3B0aW9ucy5hdHRySGVhZGVyID0gQ29yZVVJLnRhYmxlLl9tZXJnZUF0dHIodGhpcy5fb3B0aW9ucy5hdHRySGVhZGVyLCBvcHRpb25zLmF0dHJIZWFkZXIpO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIHRoaXMuX3RhYmxlICAgICAgICAgPSB0YWJsZTtcclxuICAgICAgICB0aGlzLl9vcHRpb25zICAgICAgID0gJC5leHRlbmQodHJ1ZSwge30sIHRoaXMuX29wdGlvbnMsIG9wdGlvbnMpO1xyXG4gICAgICAgIHRoaXMuX29wdGlvbnMubGFiZWwgPSBjb3JldWlUYWJsZVRwbFsnY29sdW1ucy9zZWxlY3RfbGFiZWwuaHRtbCddO1xyXG5cclxuICAgICAgICAvLyDQn9C+0LrQsNC3INGB0YLRgNC+0LpcclxuICAgICAgICB0aGlzLl90YWJsZS5vbigncmVjb3Jkc19zaG93JywgZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAgICAgbGV0IHNlbGVjdHMgICA9IGNvcmV1aVRhYmxlRWxlbWVudHMuZ2V0Um93c1NlbGVjdHModGFibGUuZ2V0SWQoKSk7XHJcbiAgICAgICAgICAgIGxldCBzZWxlY3RBbGwgPSBjb3JldWlUYWJsZUVsZW1lbnRzLmdldFJvd3NTZWxlY3RBbGwodGFibGUuZ2V0SWQoKSk7XHJcblxyXG4gICAgICAgICAgICAvLyDQntGC0LzQtdC90LAg0L7QsdGA0LDQsdC+0YLQutC4INC90LDQttCw0YLQuNGPINCyIHNlbGVjdCDQutC+0LvQvtC90LrQsNGFXHJcbiAgICAgICAgICAgICQoc2VsZWN0cykuY2xpY2soZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAvLyDQktGL0LHQvtGAINCy0YHQtdGFINGB0YLRgNC+0LpcclxuICAgICAgICAgICAgc2VsZWN0QWxsLmNsaWNrKGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCQodGhpcykuaXMoJzpjaGVja2VkJykpIHtcclxuICAgICAgICAgICAgICAgICAgICB0YWJsZS5zZWxlY3RBbGwoKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGFibGUudW5zZWxlY3RBbGwoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCj0YHRgtCw0L3QvtCy0LrQsCDQstC40LTQuNC80L7RgdGC0Lgg0LrQvtC70L7QvdC60LhcclxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gaXNTaG93XHJcbiAgICAgKi9cclxuICAgIHNldFNob3c6IGZ1bmN0aW9uIChpc1Nob3cpIHtcclxuICAgICAgICB0aGlzLl9vcHRpb25zLnNob3cgPSAhISBpc1Nob3c7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCS0LjQtNC40LzQvtGB0YLQuCDQutC+0LvQvtC90LrQuFxyXG4gICAgICovXHJcbiAgICBpc1Nob3c6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gISEgdGhpcy5fb3B0aW9ucy5zaG93O1xyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0L/QsNGA0LDQvNC10YLRgNC+0LJcclxuICAgICAqIEByZXR1cm5zIHtvYmplY3R9XHJcbiAgICAgKi9cclxuICAgIGdldE9wdGlvbnM6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gJC5leHRlbmQoe30sIHRoaXMuX29wdGlvbnMpO1xyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQpNC+0YDQvNC40YDQvtCy0LDQvdC40LUg0LrQvtC90YLQtdC90YLQsFxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGNvbnRlbnRcclxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSByZWNvcmRcclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIHJlbmRlcjogZnVuY3Rpb24oY29udGVudCwgcmVjb3JkKSB7XHJcblxyXG4gICAgICAgIGxldCBzZWxlY3QgPSAkKFxyXG4gICAgICAgICAgICBlanMucmVuZGVyKGNvcmV1aVRhYmxlVHBsWydjb2x1bW5zL3NlbGVjdC5odG1sJ10sIHtcclxuICAgICAgICAgICAgICAgIGluZGV4OiByZWNvcmQuaW5kZXhcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICBsZXQgdGhhdCA9IHRoaXM7XHJcblxyXG4gICAgICAgIC8vINCS0YvQsdC+0YAg0YHRgtGA0L7QutC4XHJcbiAgICAgICAgc2VsZWN0LmNsaWNrKGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICBsZXQgdHIgPSBjb3JldWlUYWJsZUVsZW1lbnRzLmdldFRyQnlJbmRleCh0aGF0Ll90YWJsZS5nZXRJZCgpLCByZWNvcmQuaW5kZXgpO1xyXG5cclxuICAgICAgICAgICAgaWYgKCAhIHRyKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICgkKHRoaXMpLmlzKCc6Y2hlY2tlZCcpKSB7XHJcbiAgICAgICAgICAgICAgICAkKHRyKS5hZGRDbGFzcygndGFibGUtcHJpbWFyeScpO1xyXG5cclxuICAgICAgICAgICAgICAgIGNvcmV1aVRhYmxlUHJpdmF0ZS5fdHJpZ2dlcih0aGF0Ll90YWJsZSwgJ3JlY29yZF9zZWxlY3QnLCBbIHJlY29yZCBdKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICQodHIpLnJlbW92ZUNsYXNzKCd0YWJsZS1wcmltYXJ5Jyk7XHJcblxyXG4gICAgICAgICAgICAgICAgY29yZXVpVGFibGVQcml2YXRlLl90cmlnZ2VyKHRoYXQuX3RhYmxlLCAncmVjb3JkX3Vuc2VsZWN0JywgWyByZWNvcmQgXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHNlbGVjdDtcclxuICAgIH1cclxufSIsImltcG9ydCBjb3JldWlUYWJsZSBmcm9tIFwiLi4vY29yZXVpLnRhYmxlXCI7XHJcbmltcG9ydCBjb3JldWlUYWJsZUVsZW1lbnRzIGZyb20gXCIuLi9jb3JldWkudGFibGUuZWxlbWVudHNcIjtcclxuaW1wb3J0IGNvcmV1aVRhYmxlVHBsIGZyb20gXCIuLi9jb3JldWkudGFibGUudGVtcGxhdGVzXCI7XHJcblxyXG5jb3JldWlUYWJsZS5jb2x1bW5zLnN3aXRjaCA9IHtcclxuXHJcbiAgICBfdGFibGU6IG51bGwsXHJcbiAgICBfb3B0aW9uczoge1xyXG4gICAgICAgIHR5cGU6ICdzd2l0Y2gnLFxyXG4gICAgICAgIGxhYmVsOiAnJyxcclxuICAgICAgICBmaWVsZDogJycsXHJcbiAgICAgICAgc2hvdzogdHJ1ZSxcclxuICAgICAgICBkaXNhYmxlZDogZmFsc2UsXHJcbiAgICAgICAgd2lkdGg6IDUsXHJcbiAgICAgICAgdmFsdWVZOiAnWScsXHJcbiAgICAgICAgdmFsdWVOOiAnTicsXHJcbiAgICAgICAgYXR0cjogeyBjbGFzczogJ2NvcmV1aS10YWJsZV9fc3dpdGNoX2NvbnRhaW5lcicgfSxcclxuICAgICAgICBhdHRySGVhZGVyOiB7IH0sXHJcbiAgICAgICAgb25DaGFuZ2U6IG51bGxcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y9cclxuICAgICAqIEBwYXJhbSB7Q29yZVVJLnRhYmxlLmluc3RhbmNlfSB0YWJsZVxyXG4gICAgICogQHBhcmFtIHtvYmplY3R9ICAgICAgICAgICAgICAgIG9wdGlvbnNcclxuICAgICAqL1xyXG4gICAgaW5pdDogZnVuY3Rpb24gKHRhYmxlLCBvcHRpb25zKSB7XHJcblxyXG4gICAgICAgIHRoaXMuX3RhYmxlICAgPSB0YWJsZTtcclxuICAgICAgICB0aGlzLl9vcHRpb25zID0gJC5leHRlbmQodHJ1ZSwge30sIHRoaXMuX29wdGlvbnMsIG9wdGlvbnMpO1xyXG5cclxuICAgICAgICAvLyDQn9C+0LrQsNC3INGB0YLRgNC+0LpcclxuICAgICAgICB0aGlzLl90YWJsZS5vbigncmVjb3Jkc19zaG93JywgZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAgICAgbGV0IGNvbnRhaW5lcnMgPSBjb3JldWlUYWJsZUVsZW1lbnRzLmdldFJvd3NTd2l0Y2hlcyh0YWJsZS5nZXRJZCgpKTtcclxuXHJcbiAgICAgICAgICAgIC8vINCe0YLQvNC10L3QsCDQvtCx0YDQsNCx0L7RgtC60Lgg0L3QsNC20LDRgtC40Y8g0LIgc3dpdGNoINC60L7Qu9C+0L3QutCw0YVcclxuICAgICAgICAgICAgY29udGFpbmVycy5jbGljayhmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KPRgdGC0LDQvdC+0LLQutCwINCy0LjQtNC40LzQvtGB0YLQuCDQutC+0LvQvtC90LrQuFxyXG4gICAgICogQHBhcmFtIHtib29sZWFufSBpc1Nob3dcclxuICAgICAqL1xyXG4gICAgc2V0U2hvdzogZnVuY3Rpb24gKGlzU2hvdykge1xyXG4gICAgICAgIHRoaXMuX29wdGlvbnMuc2hvdyA9ICEhIGlzU2hvdztcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0JLQuNC00LjQvNC+0YHRgtC4INC60L7Qu9C+0L3QutC4XHJcbiAgICAgKi9cclxuICAgIGlzU2hvdzogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiAhISB0aGlzLl9vcHRpb25zLnNob3c7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSDQv9Cw0YDQsNC80LXRgtGA0L7QslxyXG4gICAgICogQHJldHVybnMge29iamVjdH1cclxuICAgICAqL1xyXG4gICAgZ2V0T3B0aW9uczogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiAkLmV4dGVuZCh0cnVlLCB7fSwgdGhpcy5fb3B0aW9ucyk7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCk0L7RgNC80LjRgNC+0LLQsNC90LjQtSDQutC+0L3RgtC10L3RgtCwXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gY29udGVudFxyXG4gICAgICogQHBhcmFtIHtvYmplY3R9IHJlY29yZFxyXG4gICAgICogQHJldHVybnMge3N0cmluZ31cclxuICAgICAqL1xyXG4gICAgcmVuZGVyOiBmdW5jdGlvbihjb250ZW50LCByZWNvcmQpIHtcclxuXHJcbiAgICAgICAgbGV0IGlzQ2hlY2tlZCA9IHJlY29yZC5kYXRhLmhhc093blByb3BlcnR5KHRoaXMuX29wdGlvbnMuZmllbGQpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlY29yZC5kYXRhW3RoaXMuX29wdGlvbnMuZmllbGRdID09PSB0aGlzLl9vcHRpb25zLnZhbHVlWTtcclxuXHJcbiAgICAgICAgbGV0IGZvcm1Td2l0Y2ggPSAkKFxyXG4gICAgICAgICAgICBlanMucmVuZGVyKGNvcmV1aVRhYmxlVHBsWydjb2x1bW5zL3N3aXRjaC5odG1sJ10sIHtcclxuICAgICAgICAgICAgICAgIGluZGV4OiByZWNvcmQuaW5kZXgsXHJcbiAgICAgICAgICAgICAgICBmaWVsZDogdGhpcy5fb3B0aW9ucy5maWVsZCxcclxuICAgICAgICAgICAgICAgIGRpc2FibGVkOiB0aGlzLl9vcHRpb25zLmRpc2FibGVkLFxyXG4gICAgICAgICAgICAgICAgY2hlY2tlZDogaXNDaGVja2VkXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgLy8g0KHQvtCx0YvRgtC40Y8g0L3QsNC20LDRgtC40Y8g0L3QsCDQv9C10YDQtdC60LvRjtGH0LDRgtC10LvRjFxyXG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLmhhc093blByb3BlcnR5KCdvbkNoYW5nZScpICYmXHJcbiAgICAgICAgICAgICh0eXBlb2YgdGhpcy5fb3B0aW9ucy5vbkNoYW5nZSA9PT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2YgdGhpcy5fb3B0aW9ucy5vbkNoYW5nZSA9PT0gJ3N0cmluZycpXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIGxldCB0aGF0ID0gdGhpcztcclxuXHJcbiAgICAgICAgICAgICQoJy5jb3JldWktdGFibGVfX3N3aXRjaCcsIGZvcm1Td2l0Y2gpLmNoYW5nZShmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAgICAgICAgIGxldCBpc0NoZWNrZWQgPSAkKHRoaXMpLmlzKCc6Y2hlY2tlZCcpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdGhhdC5fb3B0aW9ucy5vbkNoYW5nZSA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoYXQuX29wdGlvbnMub25DaGFuZ2UocmVjb3JkLCBpc0NoZWNrZWQsIHRoaXMpO1xyXG5cclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHRoYXQuX29wdGlvbnMub25DaGFuZ2UgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGlkID0gbnVsbDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlY29yZC5oYXNPd25Qcm9wZXJ0eSh0aGF0Ll90YWJsZS5fb3B0aW9ucy5wcmltYXJ5S2V5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZCA9IHJlY29yZFt0aGF0Ll90YWJsZS5fb3B0aW9ucy5wcmltYXJ5S2V5XTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGxldCBmdW5jID0gbmV3IEZ1bmN0aW9uKCdyZWNvcmQnLCAnY2hlY2tlZCcsICdpZCcsIHRoYXQuX29wdGlvbnMub25DaGFuZ2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIGZ1bmMocmVjb3JkLCB0aGlzLCBpZCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBmb3JtU3dpdGNoO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IGNvcmV1aVRhYmxlIGZyb20gXCIuLi9jb3JldWkudGFibGVcIjtcclxuaW1wb3J0IGNvcmV1aVRhYmxlVXRpbHMgZnJvbSBcIi4uL2NvcmV1aS50YWJsZS51dGlsc1wiO1xyXG5cclxuY29yZXVpVGFibGUuY29sdW1ucy50ZXh0ID0ge1xyXG5cclxuICAgIF90YWJsZTogbnVsbCxcclxuICAgIF9vcHRpb25zOiB7XHJcbiAgICAgICAgdHlwZTogJ3RleHQnLFxyXG4gICAgICAgIGZpZWxkOiBudWxsLFxyXG4gICAgICAgIGxhYmVsOiBudWxsLFxyXG4gICAgICAgIHNob3c6IHRydWUsXHJcbiAgICAgICAgd2lkdGg6IG51bGwsXHJcbiAgICAgICAgbWluV2lkdGg6IG51bGwsXHJcbiAgICAgICAgbWF4V2lkdGg6IG51bGwsXHJcbiAgICAgICAgYXR0cjogbnVsbCxcclxuICAgICAgICBub1dyYXA6IG51bGwsXHJcbiAgICAgICAgbm9XcmFwVG9nZ2xlOiBudWxsLFxyXG4gICAgICAgIGF0dHJIZWFkZXI6IG51bGwsXHJcbiAgICAgICAgcmVuZGVyOiBudWxsXHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPXHJcbiAgICAgKiBAcGFyYW0ge0NvcmVVSS50YWJsZS5pbnN0YW5jZX0gdGFibGVcclxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSAgICAgICAgICAgICAgICBvcHRpb25zXHJcbiAgICAgKi9cclxuICAgIGluaXQ6IGZ1bmN0aW9uICh0YWJsZSwgb3B0aW9ucykge1xyXG5cclxuICAgICAgICB0aGlzLl90YWJsZSAgID0gdGFibGU7XHJcbiAgICAgICAgdGhpcy5fb3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCB0aGlzLl9vcHRpb25zLCBvcHRpb25zKTtcclxuXHJcbiAgICAgICAgbGV0IHRhYmxlT3B0aW9ucyA9IHRoaXMuX3RhYmxlLmdldE9wdGlvbnMoKTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMubm9XcmFwIHx8XHJcbiAgICAgICAgICAgICh0aGlzLl9vcHRpb25zLm5vV3JhcCA9PT0gbnVsbCAmJiB0YWJsZU9wdGlvbnMubm9XcmFwKVxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICBpZiAoICEgdGhpcy5fb3B0aW9ucy5hdHRyKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9vcHRpb25zLmF0dHIgPSB7IGNsYXNzIDogJ2NvcmV1aV90YWJsZV9fbm8td3JhcCcgfTtcclxuXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9vcHRpb25zLmF0dHIgPSBjb3JldWlUYWJsZVV0aWxzLm1lcmdlQXR0cih0aGlzLl9vcHRpb25zLmF0dHIsIHtcclxuICAgICAgICAgICAgICAgICAgICBjbGFzczogJ2NvcmV1aV90YWJsZV9fbm8td3JhcCdcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLl9vcHRpb25zLm5vV3JhcCA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy5ub1dyYXBUb2dnbGUgfHxcclxuICAgICAgICAgICAgICAgICh0aGlzLl9vcHRpb25zLm5vV3JhcFRvZ2dsZSA9PT0gbnVsbCAmJiB0YWJsZU9wdGlvbnMubm9XcmFwVG9nZ2xlKVxyXG4gICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX29wdGlvbnMubm9XcmFwVG9nZ2xlID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KPRgdGC0LDQvdC+0LLQutCwINCy0LjQtNC40LzQvtGB0YLQuCDQutC+0LvQvtC90LrQuFxyXG4gICAgICogQHBhcmFtIHtib29sZWFufSBpc1Nob3dcclxuICAgICAqL1xyXG4gICAgc2V0U2hvdzogZnVuY3Rpb24gKGlzU2hvdykge1xyXG4gICAgICAgIHRoaXMuX29wdGlvbnMuc2hvdyA9ICEhIGlzU2hvdztcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0JLQuNC00LjQvNC+0YHRgtC4INC60L7Qu9C+0L3QutC4XHJcbiAgICAgKi9cclxuICAgIGlzU2hvdzogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiAhISB0aGlzLl9vcHRpb25zLnNob3c7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSDQv9Cw0YDQsNC80LXRgtGA0L7QslxyXG4gICAgICogQHJldHVybnMge29iamVjdH1cclxuICAgICAqL1xyXG4gICAgZ2V0T3B0aW9uczogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiAkLmV4dGVuZCh7fSwgdGhpcy5fb3B0aW9ucyk7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCk0L7RgNC80LjRgNC+0LLQsNC90LjQtSDQutC+0L3RgtC10L3RgtCwXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gY29udGVudFxyXG4gICAgICogQHBhcmFtIHtvYmplY3R9IHJlY29yZFxyXG4gICAgICogQHJldHVybnMge3N0cmluZ31cclxuICAgICAqL1xyXG4gICAgcmVuZGVyOiBmdW5jdGlvbihjb250ZW50LCByZWNvcmQpIHtcclxuXHJcbiAgICAgICAgaWYgKFsnc3RyaW5nJywgJ2JpZ2ludCcsICdzeW1ib2wnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2YgY29udGVudCkgPCAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAnJztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnRlbnQgPSBTdHJpbmcoY29udGVudClcclxuICAgICAgICAgICAgLnJlcGxhY2UoLzwvZywgJyZsdDsnKVxyXG4gICAgICAgICAgICAucmVwbGFjZSgvPi9nLCAnJmd0OycpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy5ub1dyYXApIHtcclxuICAgICAgICAgICAgY29udGVudCA9ICc8ZGl2PicgKyBjb250ZW50ICsgJzwvZGl2PidcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9vcHRpb25zLm5vV3JhcFRvZ2dsZSkge1xyXG4gICAgICAgICAgICAgICAgY29udGVudCArPSAnPGkgY2xhc3M9XCJiaSBiaS1jYXJldC1kb3duLWZpbGwgdG9nZ2xlXCI+PC9pPidcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGNvbnRlbnQ7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgY29yZXVpVGFibGUgICAgICBmcm9tIFwiLi4vY29yZXVpLnRhYmxlXCI7XHJcbmltcG9ydCBjb3JldWlUYWJsZVV0aWxzIGZyb20gXCIuLi9jb3JldWkudGFibGUudXRpbHNcIjtcclxuaW1wb3J0IGNvcmV1aVRhYmxlVHBsICAgZnJvbSBcIi4uL2NvcmV1aS50YWJsZS50ZW1wbGF0ZXNcIjtcclxuXHJcbmNvcmV1aVRhYmxlLmNvbHVtbnMuYnV0dG9uID0ge1xyXG5cclxuICAgIF90YWJsZTogbnVsbCxcclxuICAgIF9vcHRpb25zOiB7XHJcbiAgICAgICAgdHlwZTogJ2J1dHRvbicsXHJcbiAgICAgICAgZmllbGQ6IG51bGwsXHJcbiAgICAgICAgbGFiZWw6IG51bGwsXHJcbiAgICAgICAgc2hvdzogdHJ1ZSxcclxuICAgICAgICB3aWR0aDogbnVsbCxcclxuICAgICAgICBtaW5XaWR0aDogbnVsbCxcclxuICAgICAgICBtYXhXaWR0aDogbnVsbCxcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y9cclxuICAgICAqIEBwYXJhbSB7Q29yZVVJLnRhYmxlLmluc3RhbmNlfSB0YWJsZVxyXG4gICAgICogQHBhcmFtIHtvYmplY3R9ICAgICAgICAgICAgICAgIG9wdGlvbnNcclxuICAgICAqL1xyXG4gICAgaW5pdDogZnVuY3Rpb24gKHRhYmxlLCBvcHRpb25zKSB7XHJcblxyXG4gICAgICAgIHRoaXMuX3RhYmxlICAgPSB0YWJsZTtcclxuICAgICAgICB0aGlzLl9vcHRpb25zID0gJC5leHRlbmQoe30sIHRoaXMuX29wdGlvbnMsIG9wdGlvbnMpO1xyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQo9GB0YLQsNC90L7QstC60LAg0LLQuNC00LjQvNC+0YHRgtC4INC60L7Qu9C+0L3QutC4XHJcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGlzU2hvd1xyXG4gICAgICovXHJcbiAgICBzZXRTaG93OiBmdW5jdGlvbiAoaXNTaG93KSB7XHJcbiAgICAgICAgdGhpcy5fb3B0aW9ucy5zaG93ID0gISEgaXNTaG93O1xyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQktC40LTQuNC80L7RgdGC0Lgg0LrQvtC70L7QvdC60LhcclxuICAgICAqL1xyXG4gICAgaXNTaG93OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuICEhIHRoaXMuX29wdGlvbnMuc2hvdztcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC/0LDRgNCw0LzQtdGC0YDQvtCyXHJcbiAgICAgKiBAcmV0dXJucyB7b2JqZWN0fVxyXG4gICAgICovXHJcbiAgICBnZXRPcHRpb25zOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuICQuZXh0ZW5kKHt9LCB0aGlzLl9vcHRpb25zKTtcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KTQvtGA0LzQuNGA0L7QstCw0L3QuNC1INC60L7QvdGC0LXQvdGC0LBcclxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBjb250ZW50XHJcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gcmVjb3JkXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxyXG4gICAgICovXHJcbiAgICByZW5kZXI6IGZ1bmN0aW9uKGNvbnRlbnQsIHJlY29yZCkge1xyXG5cclxuICAgICAgICBpZiAoICEgY29yZXVpVGFibGVVdGlscy5pc09iamVjdChjb250ZW50KSkge1xyXG4gICAgICAgICAgICByZXR1cm4gJyc7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgaWYgKCAhIGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QoY29udGVudC5hdHRyKSkge1xyXG4gICAgICAgICAgICBjb250ZW50LmF0dHIgPSB7fVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCAhIGNvbnRlbnQuYXR0ci5oYXNPd25Qcm9wZXJ0eSgnY2xhc3MnKSkge1xyXG4gICAgICAgICAgICBjb250ZW50LmF0dHIuY2xhc3MgPSAnYnRuIGJ0bi1vdXRsaW5lLXNlY29uZGFyeSdcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChjb250ZW50LmF0dHIuaGFzT3duUHJvcGVydHkoJ3R5cGUnKSkge1xyXG4gICAgICAgICAgICBkZWxldGUgY29udGVudC5hdHRyLnR5cGU7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgbGV0IGF0dHJpYnV0ZXMgPSBbXTtcclxuXHJcbiAgICAgICAgJC5lYWNoKGNvbnRlbnQuYXR0ciwgZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XHJcbiAgICAgICAgICAgIGlmIChbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiB2YWx1ZSkgPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgYXR0cmlidXRlcy5wdXNoKG5hbWUgKyAnPVwiJyArIHZhbHVlICsgJ1wiJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgbGV0IGJ0biA9ICQoXHJcbiAgICAgICAgICAgIGVqcy5yZW5kZXIoY29yZXVpVGFibGVUcGxbJ2NvbHVtbnMvYnV0dG9uLmh0bWwnXSwge1xyXG4gICAgICAgICAgICAgICAgY29udGVudDogY29udGVudC5jb250ZW50LFxyXG4gICAgICAgICAgICAgICAgYXR0cjogYXR0cmlidXRlcy5sZW5ndGggPiAwID8gKCcgJyArIGF0dHJpYnV0ZXMuam9pbignICcpKSA6ICcnLFxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICk7XHJcblxyXG5cclxuICAgICAgICBpZiAoY29udGVudC5oYXNPd25Qcm9wZXJ0eSgnb25DbGljaycpKSB7XHJcbiAgICAgICAgICAgIGxldCB0aGF0ID0gdGhpcztcclxuXHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29udGVudC5vbkNsaWNrID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgICAgICBidG4uY2xpY2soZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQuY2FuY2VsQnViYmxlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBjb250ZW50Lm9uQ2xpY2socmVjb3JkLCB0aGF0Ll90YWJsZSlcclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgY29udGVudC5vbkNsaWNrID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICAgICAgbGV0IGZ1bmMgPSBuZXcgRnVuY3Rpb24oJ3JlY29yZCcsICd0YWJsZScsIGNvbnRlbnQub25DbGljayk7XHJcblxyXG4gICAgICAgICAgICAgICAgYnRuLmNsaWNrKGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50LmNhbmNlbEJ1YmJsZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZnVuYyhyZWNvcmQsIHRoYXQuX3RhYmxlKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGJ0bi5jbGljayhmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICBldmVudC5jYW5jZWxCdWJibGUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBidG4uY2xpY2soZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICBldmVudC5jYW5jZWxCdWJibGUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gYnRuO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IGNvcmV1aVRhYmxlICAgICAgZnJvbSBcIi4uL2NvcmV1aS50YWJsZVwiO1xyXG5pbXBvcnQgY29yZXVpVGFibGVVdGlscyBmcm9tIFwiLi4vY29yZXVpLnRhYmxlLnV0aWxzXCI7XHJcbmltcG9ydCBjb3JldWlUYWJsZVRwbCAgIGZyb20gXCIuLi9jb3JldWkudGFibGUudGVtcGxhdGVzXCI7XHJcblxyXG5jb3JldWlUYWJsZS5jb2x1bW5zLmxpbmsgPSB7XHJcblxyXG4gICAgX3RhYmxlOiBudWxsLFxyXG4gICAgX29wdGlvbnM6IHtcclxuICAgICAgICB0eXBlOiAnbGluaycsXHJcbiAgICAgICAgZmllbGQ6IG51bGwsXHJcbiAgICAgICAgbGFiZWw6IG51bGwsXHJcbiAgICAgICAgc2hvdzogdHJ1ZSxcclxuICAgICAgICB3aWR0aDogbnVsbCxcclxuICAgICAgICBtaW5XaWR0aDogbnVsbCxcclxuICAgICAgICBtYXhXaWR0aDogbnVsbCxcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y9cclxuICAgICAqIEBwYXJhbSB7Q29yZVVJLnRhYmxlLmluc3RhbmNlfSB0YWJsZVxyXG4gICAgICogQHBhcmFtIHtvYmplY3R9ICAgICAgICAgICAgICAgIG9wdGlvbnNcclxuICAgICAqL1xyXG4gICAgaW5pdDogZnVuY3Rpb24gKHRhYmxlLCBvcHRpb25zKSB7XHJcblxyXG4gICAgICAgIHRoaXMuX3RhYmxlICAgPSB0YWJsZTtcclxuICAgICAgICB0aGlzLl9vcHRpb25zID0gJC5leHRlbmQoe30sIHRoaXMuX29wdGlvbnMsIG9wdGlvbnMpO1xyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQo9GB0YLQsNC90L7QstC60LAg0LLQuNC00LjQvNC+0YHRgtC4INC60L7Qu9C+0L3QutC4XHJcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGlzU2hvd1xyXG4gICAgICovXHJcbiAgICBzZXRTaG93OiBmdW5jdGlvbiAoaXNTaG93KSB7XHJcbiAgICAgICAgdGhpcy5fb3B0aW9ucy5zaG93ID0gISEgaXNTaG93O1xyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQktC40LTQuNC80L7RgdGC0Lgg0LrQvtC70L7QvdC60LhcclxuICAgICAqL1xyXG4gICAgaXNTaG93OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuICEhIHRoaXMuX29wdGlvbnMuc2hvdztcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC/0LDRgNCw0LzQtdGC0YDQvtCyXHJcbiAgICAgKiBAcmV0dXJucyB7b2JqZWN0fVxyXG4gICAgICovXHJcbiAgICBnZXRPcHRpb25zOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuICQuZXh0ZW5kKHt9LCB0aGlzLl9vcHRpb25zKTtcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KTQvtGA0LzQuNGA0L7QstCw0L3QuNC1INC60L7QvdGC0LXQvdGC0LBcclxuICAgICAqIEBwYXJhbSB7b2JqZWN0fHN0cmluZ30gY29udGVudFxyXG4gICAgICogQHBhcmFtIHtvYmplY3R9ICAgICAgICByZWNvcmRcclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIHJlbmRlcjogZnVuY3Rpb24oY29udGVudCwgcmVjb3JkKSB7XHJcblxyXG4gICAgICAgIGlmIChcclxuICAgICAgICAgICAgKHR5cGVvZiBjb250ZW50ICE9PSAnc3RyaW5nJyB8fCAhIGNvbnRlbnQpXHJcbiAgICAgICAgICAgICYmXHJcbiAgICAgICAgICAgICggISBjb3JldWlUYWJsZVV0aWxzLmlzT2JqZWN0KGNvbnRlbnQpIHx8XHJcbiAgICAgICAgICAgICAgISBjb250ZW50Lmhhc093blByb3BlcnR5KCd1cmwnKSB8fFxyXG4gICAgICAgICAgICAgIHR5cGVvZiBjb250ZW50LnVybCAhPT0gJ3N0cmluZycgfHxcclxuICAgICAgICAgICAgICAhIGNvbnRlbnQudXJsXHJcbiAgICAgICAgICAgIClcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IGxpbmtDb250ZW50ID0gJyc7XHJcbiAgICAgICAgbGV0IGF0dHIgICAgICAgID0ge307XHJcblxyXG4gICAgICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgYXR0ci5ocmVmICAgPSBjb250ZW50O1xyXG4gICAgICAgICAgICBsaW5rQ29udGVudCA9IGNvbnRlbnQ7XHJcblxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmIChjb250ZW50Lmhhc093blByb3BlcnR5KCdhdHRyJykgJiZcclxuICAgICAgICAgICAgICAgIGNvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QoY29udGVudC5hdHRyKVxyXG4gICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgIGF0dHIgPSBjb250ZW50LmF0dHI7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChhdHRyLmhhc093blByb3BlcnR5KCdocmVmJykpIHtcclxuICAgICAgICAgICAgICAgIGRlbGV0ZSBhdHRyLmhyZWY7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGF0dHIuaHJlZiA9IGNvbnRlbnQudXJsO1xyXG5cclxuXHJcbiAgICAgICAgICAgIGlmIChjb250ZW50Lmhhc093blByb3BlcnR5KCdjb250ZW50JykgJiZcclxuICAgICAgICAgICAgICAgIHR5cGVvZiBjb250ZW50LmNvbnRlbnQgPT09ICdzdHJpbmcnICYmXHJcbiAgICAgICAgICAgICAgICBjb250ZW50LmNvbnRlbnRcclxuICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICBsaW5rQ29udGVudCA9IGNvbnRlbnQuY29udGVudDtcclxuXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBsaW5rQ29udGVudCA9IGNvbnRlbnQudXJsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgbGV0IGF0dHJpYnV0ZXMgPSBbXTtcclxuXHJcbiAgICAgICAgJC5lYWNoKGF0dHIsIGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xyXG4gICAgICAgICAgICBpZiAoWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2YgdmFsdWUpID49IDApIHtcclxuICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXMucHVzaChuYW1lICsgJz1cIicgKyB2YWx1ZSArICdcIicpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGxldCBsaW5rID0gJChcclxuICAgICAgICAgICAgZWpzLnJlbmRlcihjb3JldWlUYWJsZVRwbFsnY29sdW1ucy9saW5rLmh0bWwnXSwge1xyXG4gICAgICAgICAgICAgICAgY29udGVudDogbGlua0NvbnRlbnQsXHJcbiAgICAgICAgICAgICAgICBhdHRyOiBhdHRyaWJ1dGVzLmxlbmd0aCA+IDAgPyAoJyAnICsgYXR0cmlidXRlcy5qb2luKCcgJykpIDogJycsXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgKTtcclxuXHJcblxyXG4gICAgICAgIGxpbmsuY2xpY2soZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgIGV2ZW50LmNhbmNlbEJ1YmJsZSA9IHRydWU7XHJcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiBsaW5rO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IGNvcmV1aVRhYmxlICAgICAgZnJvbSBcIi4uL2NvcmV1aS50YWJsZVwiO1xyXG5pbXBvcnQgY29yZXVpVGFibGVVdGlscyBmcm9tIFwiLi4vY29yZXVpLnRhYmxlLnV0aWxzXCI7XHJcbmltcG9ydCBjb3JldWlUYWJsZVRwbCAgIGZyb20gXCIuLi9jb3JldWkudGFibGUudGVtcGxhdGVzXCI7XHJcbmltcG9ydCBDb3JldWlUYWJsZVV0aWxzIGZyb20gXCIuLi9jb3JldWkudGFibGUudXRpbHNcIjtcclxuaW1wb3J0IGNvcmV1aVRhYmxlRWxlbWVudHMgZnJvbSBcIi4uL2NvcmV1aS50YWJsZS5lbGVtZW50c1wiO1xyXG5cclxuY29yZXVpVGFibGUuY29sdW1ucy5tZW51ID0ge1xyXG5cclxuICAgIF90YWJsZTogbnVsbCxcclxuICAgIF9vcHRpb25zOiB7XHJcbiAgICAgICAgdHlwZTogJ21lbnUnLFxyXG4gICAgICAgIGZpZWxkOiBudWxsLFxyXG4gICAgICAgIGxhYmVsOiBudWxsLFxyXG4gICAgICAgIHNob3c6IHRydWUsXHJcbiAgICAgICAgd2lkdGg6IG51bGwsXHJcbiAgICAgICAgbWluV2lkdGg6IG51bGwsXHJcbiAgICAgICAgbWF4V2lkdGg6IG51bGwsXHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPXHJcbiAgICAgKiBAcGFyYW0ge0NvcmVVSS50YWJsZS5pbnN0YW5jZX0gdGFibGVcclxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSAgICAgICAgICAgICAgICBvcHRpb25zXHJcbiAgICAgKi9cclxuICAgIGluaXQ6IGZ1bmN0aW9uICh0YWJsZSwgb3B0aW9ucykge1xyXG5cclxuICAgICAgICB0aGlzLl90YWJsZSAgID0gdGFibGU7XHJcbiAgICAgICAgdGhpcy5fb3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCB0aGlzLl9vcHRpb25zLCBvcHRpb25zKTtcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KPRgdGC0LDQvdC+0LLQutCwINCy0LjQtNC40LzQvtGB0YLQuCDQutC+0LvQvtC90LrQuFxyXG4gICAgICogQHBhcmFtIHtib29sZWFufSBpc1Nob3dcclxuICAgICAqL1xyXG4gICAgc2V0U2hvdzogZnVuY3Rpb24gKGlzU2hvdykge1xyXG4gICAgICAgIHRoaXMuX29wdGlvbnMuc2hvdyA9ICEhIGlzU2hvdztcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0JLQuNC00LjQvNC+0YHRgtC4INC60L7Qu9C+0L3QutC4XHJcbiAgICAgKi9cclxuICAgIGlzU2hvdzogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiAhISB0aGlzLl9vcHRpb25zLnNob3c7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSDQv9Cw0YDQsNC80LXRgtGA0L7QslxyXG4gICAgICogQHJldHVybnMge29iamVjdH1cclxuICAgICAqL1xyXG4gICAgZ2V0T3B0aW9uczogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiAkLmV4dGVuZCh7fSwgdGhpcy5fb3B0aW9ucyk7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCk0L7RgNC80LjRgNC+0LLQsNC90LjQtSDQutC+0L3RgtC10L3RgtCwXHJcbiAgICAgKiBAcGFyYW0ge29iamVjdHxzdHJpbmd9IGNvbnRlbnRcclxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSAgICAgICAgcmVjb3JkXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxyXG4gICAgICovXHJcbiAgICByZW5kZXI6IGZ1bmN0aW9uKGNvbnRlbnQsIHJlY29yZCkge1xyXG5cclxuICAgICAgICBpZiAoICEgY29yZXVpVGFibGVVdGlscy5pc09iamVjdChjb250ZW50KSB8fFxyXG4gICAgICAgICAgICAgISBjb250ZW50Lmhhc093blByb3BlcnR5KCdpdGVtcycpIHx8XHJcbiAgICAgICAgICAgICAhIEFycmF5LmlzQXJyYXkoY29udGVudC5pdGVtcykgfHxcclxuICAgICAgICAgICAgY29udGVudC5pdGVtcy5sZW5ndGggPT09IDBcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IGl0ZW1zID0gW107XHJcbiAgICAgICAgbGV0IGF0dHIgID0ge307XHJcblxyXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KGNvbnRlbnQuaXRlbXMpKSB7XHJcbiAgICAgICAgICAgICQuZWFjaChjb250ZW50Lml0ZW1zLCBmdW5jdGlvbiAoa2V5LCBpdGVtKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoQ29yZXVpVGFibGVVdGlscy5pc09iamVjdChpdGVtKSAmJiB0eXBlb2YgaXRlbS50eXBlID09PSAnc3RyaW5nJykge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbS50eXBlID09PSAnbGluaycpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0uaGFzT3duUHJvcGVydHkoJ2xpbmsnKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5oYXNPd25Qcm9wZXJ0eSgnY29udGVudCcpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlb2YgaXRlbS5saW5rID09PSAnc3RyaW5nJyAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGl0ZW0uY29udGVudCA9PT0gJ3N0cmluZydcclxuICAgICAgICAgICAgICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgbGlua0F0dHIgPSB7fTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbS5oYXNPd25Qcm9wZXJ0eSgnYXR0cicpIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29yZXVpVGFibGVVdGlscy5pc09iamVjdChpdGVtLmF0dHIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5rQXR0ciA9IGl0ZW0uYXR0cjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsaW5rQXR0ci5oYXNPd25Qcm9wZXJ0eSgnaHJlZicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGxpbmtBdHRyLmhyZWY7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCAhIGxpbmtBdHRyLmhhc093blByb3BlcnR5KCdjbGFzcycpIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGxpbmtBdHRyLmNsYXNzICE9PSAnc3RyaW5nJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGlua0F0dHIuY2xhc3MgPSAnZHJvcGRvd24taXRlbSc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmtBdHRyLmNsYXNzICs9ICcgZHJvcGRvd24taXRlbSc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGxpbmtBdHRyaWJ1dGVzID0gW107XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJC5lYWNoKGxpbmtBdHRyLCBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2YgdmFsdWUpID49IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGlua0F0dHJpYnV0ZXMucHVzaChuYW1lICsgJz1cIicgKyB2YWx1ZSArICdcIicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdsaW5rJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5rOiBpdGVtLmxpbmssXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudDogaXRlbS5jb250ZW50LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHI6IGxpbmtBdHRyaWJ1dGVzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpdGVtLnR5cGUgPT09ICdidXR0b24nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpdGVtLmhhc093blByb3BlcnR5KCdjb250ZW50JykgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0uaGFzT3duUHJvcGVydHkoJ29uQ2xpY2snKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGl0ZW0uY29udGVudCA9PT0gJ3N0cmluZycgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFsnc3RyaW5nJywgJ2Z1bmN0aW9uJ10uaW5kZXhPZih0eXBlb2YgaXRlbS5vbkNsaWNrKSA+PSAwXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGJ0bkF0dHIgPSB7fTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbS5oYXNPd25Qcm9wZXJ0eSgnYXR0cicpIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29yZXVpVGFibGVVdGlscy5pc09iamVjdChpdGVtLmF0dHIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBidG5BdHRyID0gaXRlbS5hdHRyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChidG5BdHRyLmhhc093blByb3BlcnR5KCd0eXBlJykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgYnRuQXR0ci50eXBlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGJ0bkF0dHIuaGFzT3duUHJvcGVydHkoJ2lkJykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgYnRuQXR0clsnaWQnXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoICEgYnRuQXR0ci5oYXNPd25Qcm9wZXJ0eSgnY2xhc3MnKSB8fFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVvZiBidG5BdHRyLmNsYXNzICE9PSAnc3RyaW5nJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnRuQXR0ci5jbGFzcyA9ICdkcm9wZG93bi1pdGVtJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnRuQXR0ci5jbGFzcyArPSAnIGRyb3Bkb3duLWl0ZW0nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBidG5BdHRyaWJ1dGVzID0gW107XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJC5lYWNoKGJ0bkF0dHIsIGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiB2YWx1ZSkgPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBidG5BdHRyaWJ1dGVzLnB1c2gobmFtZSArICc9XCInICsgdmFsdWUgKyAnXCInKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtcy5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnYnV0dG9uJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogY29yZXVpVGFibGVVdGlscy5oYXNoQ29kZSgpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IGl0ZW0uY29udGVudCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrOiBpdGVtLm9uQ2xpY2ssXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cjogYnRuQXR0cmlidXRlcy5sZW5ndGggPiAwID8gKCcgJyArIGJ0bkF0dHJpYnV0ZXMuam9pbignICcpKSA6ICcnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaXRlbS50eXBlID09PSAnZGl2aWRlcicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnZGl2aWRlcicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGl0ZW0udHlwZSA9PT0gJ2hlYWRlcicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0uaGFzT3duUHJvcGVydHkoJ2NvbnRlbnQnKSAmJiB0eXBlb2YgaXRlbS5jb250ZW50ID09PSAnc3RyaW5nJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdoZWFkZXInLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IGl0ZW0uY29udGVudCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChjb250ZW50Lmhhc093blByb3BlcnR5KCdhdHRyJykgfHxcclxuICAgICAgICAgICAgY29yZXVpVGFibGVVdGlscy5pc09iamVjdChjb250ZW50LmF0dHIpXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIGF0dHIgPSBjb250ZW50LmF0dHI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoICEgYXR0ci5oYXNPd25Qcm9wZXJ0eSgnY2xhc3MnKSB8fFxyXG4gICAgICAgICAgICBbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiBhdHRyLmNsYXNzKSA8IDBcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgYXR0ci5jbGFzcyA9ICdidG4gcm91bmRlZC0xJztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChhdHRyLmhhc093blByb3BlcnR5KCd0eXBlJykpIHtcclxuICAgICAgICAgICAgZGVsZXRlIGF0dHIudHlwZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChhdHRyLmhhc093blByb3BlcnR5KCdkYXRhLWJzLXRvZ2dsZScpKSB7XHJcbiAgICAgICAgICAgIGRlbGV0ZSBhdHRyWydkYXRhLWJzLXRvZ2dsZSddO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIGxldCBhdHRyaWJ1dGVzID0gW107XHJcblxyXG4gICAgICAgICQuZWFjaChhdHRyLCBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcclxuICAgICAgICAgICAgaWYgKFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIHZhbHVlKSA+PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzLnB1c2gobmFtZSArICc9XCInICsgdmFsdWUgKyAnXCInKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuXHJcbiAgICAgICAgbGV0IG1lbnVDb250ZW50ID0gY29udGVudC5oYXNPd25Qcm9wZXJ0eSgnY29udGVudCcpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGNvbnRlbnQuY29udGVudCA9PT0gJ3N0cmluZycgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50LmNvbnRlbnRcclxuICAgICAgICAgICAgPyBjb250ZW50LmNvbnRlbnRcclxuICAgICAgICAgICAgOiAnPGkgY2xhc3M9XCJiaSBiaS10aHJlZS1kb3RzLXZlcnRpY2FsXCI+PC9pPic7XHJcblxyXG4gICAgICAgIGxldCBwb3NpdGlvbiA9IGNvbnRlbnQuaGFzT3duUHJvcGVydHkoJ3Bvc2l0aW9uJykgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICB0eXBlb2YgY29udGVudC5wb3NpdGlvbiA9PT0gJ3N0cmluZycgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50LnBvc2l0aW9uXHJcbiAgICAgICAgICAgID8gY29udGVudC5wb3NpdGlvblxyXG4gICAgICAgICAgICA6ICdlbmQnO1xyXG5cclxuXHJcbiAgICAgICAgbGV0IG1lbnUgPSAkKFxyXG4gICAgICAgICAgICBlanMucmVuZGVyKGNvcmV1aVRhYmxlVHBsWydjb2x1bW5zL21lbnUuaHRtbCddLCB7XHJcbiAgICAgICAgICAgICAgICBjb250ZW50OiBtZW51Q29udGVudCxcclxuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBwb3NpdGlvbixcclxuICAgICAgICAgICAgICAgIGF0dHI6IGF0dHJpYnV0ZXMubGVuZ3RoID4gMCA/ICgnICcgKyBhdHRyaWJ1dGVzLmpvaW4oJyAnKSkgOiAnJyxcclxuICAgICAgICAgICAgICAgIGl0ZW1zOiBpdGVtcyxcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICBtZW51LmNsaWNrKGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICBldmVudC5jYW5jZWxCdWJibGUgPSB0cnVlO1xyXG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuXHJcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoaXRlbXMpKSB7XHJcbiAgICAgICAgICAgIGxldCB0aGF0ID0gdGhpcztcclxuXHJcbiAgICAgICAgICAgICQuZWFjaChpdGVtcywgZnVuY3Rpb24gKGtleSwgaXRlbSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKENvcmV1aVRhYmxlVXRpbHMuaXNPYmplY3QoaXRlbSkgJiYgdHlwZW9mIGl0ZW0udHlwZSA9PT0gJ3N0cmluZycpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0udHlwZSA9PT0gJ2J1dHRvbicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0uaGFzT3duUHJvcGVydHkoJ2NvbnRlbnQnKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5oYXNPd25Qcm9wZXJ0eSgnb25DbGljaycpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbJ3N0cmluZycsICdmdW5jdGlvbiddLmluZGV4T2YodHlwZW9mIGl0ZW0ub25DbGljaykgPj0gMCAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGl0ZW0uY29udGVudCA9PT0gJ3N0cmluZydcclxuICAgICAgICAgICAgICAgICAgICAgICAgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgnYnV0dG9uI2J0bi1kcm9wZG93bi0nICsgaXRlbS5pZCwgbWVudSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuY2xpY2soZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgaXRlbS5vbkNsaWNrID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtLm9uQ2xpY2socmVjb3JkLCB0aGF0Ll90YWJsZSwgZXZlbnQpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgaXRlbS5vbkNsaWNrID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKG5ldyBGdW5jdGlvbigncmVjb3JkJywgJ3RhYmxlJywgJ2V2ZW50JywgaXRlbS5vbkNsaWNrKSkocmVjb3JkLCB0aGF0Ll90YWJsZSwgZXZlbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIG1lbnU7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgY29yZXVpVGFibGUgICAgICBmcm9tIFwiLi4vY29yZXVpLnRhYmxlXCI7XHJcbmltcG9ydCBjb3JldWlUYWJsZVV0aWxzIGZyb20gXCIuLi9jb3JldWkudGFibGUudXRpbHNcIjtcclxuaW1wb3J0IGNvcmV1aVRhYmxlVHBsICAgZnJvbSBcIi4uL2NvcmV1aS50YWJsZS50ZW1wbGF0ZXNcIjtcclxuXHJcbmNvcmV1aVRhYmxlLmNvbHVtbnMuYmFkZ2UgPSB7XHJcblxyXG4gICAgX3RhYmxlOiBudWxsLFxyXG4gICAgX29wdGlvbnM6IHtcclxuICAgICAgICB0eXBlOiAnYmFkZ2UnLFxyXG4gICAgICAgIGZpZWxkOiBudWxsLFxyXG4gICAgICAgIGxhYmVsOiBudWxsLFxyXG4gICAgICAgIHNob3c6IHRydWUsXHJcbiAgICAgICAgd2lkdGg6IG51bGwsXHJcbiAgICAgICAgbWluV2lkdGg6IG51bGwsXHJcbiAgICAgICAgbWF4V2lkdGg6IG51bGwsXHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPXHJcbiAgICAgKiBAcGFyYW0ge0NvcmVVSS50YWJsZS5pbnN0YW5jZX0gdGFibGVcclxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSAgICAgICAgICAgICAgICBvcHRpb25zXHJcbiAgICAgKi9cclxuICAgIGluaXQ6IGZ1bmN0aW9uICh0YWJsZSwgb3B0aW9ucykge1xyXG5cclxuICAgICAgICB0aGlzLl90YWJsZSAgID0gdGFibGU7XHJcbiAgICAgICAgdGhpcy5fb3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCB0aGlzLl9vcHRpb25zLCBvcHRpb25zKTtcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KPRgdGC0LDQvdC+0LLQutCwINCy0LjQtNC40LzQvtGB0YLQuCDQutC+0LvQvtC90LrQuFxyXG4gICAgICogQHBhcmFtIHtib29sZWFufSBpc1Nob3dcclxuICAgICAqL1xyXG4gICAgc2V0U2hvdzogZnVuY3Rpb24gKGlzU2hvdykge1xyXG4gICAgICAgIHRoaXMuX29wdGlvbnMuc2hvdyA9ICEhIGlzU2hvdztcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0JLQuNC00LjQvNC+0YHRgtC4INC60L7Qu9C+0L3QutC4XHJcbiAgICAgKi9cclxuICAgIGlzU2hvdzogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiAhISB0aGlzLl9vcHRpb25zLnNob3c7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSDQv9Cw0YDQsNC80LXRgtGA0L7QslxyXG4gICAgICogQHJldHVybnMge29iamVjdH1cclxuICAgICAqL1xyXG4gICAgZ2V0T3B0aW9uczogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiAkLmV4dGVuZCh7fSwgdGhpcy5fb3B0aW9ucyk7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCk0L7RgNC80LjRgNC+0LLQsNC90LjQtSDQutC+0L3RgtC10L3RgtCwXHJcbiAgICAgKiBAcGFyYW0ge29iamVjdHxzdHJpbmd9IGNvbnRlbnRcclxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSAgICAgICAgcmVjb3JkXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxyXG4gICAgICovXHJcbiAgICByZW5kZXI6IGZ1bmN0aW9uKGNvbnRlbnQsIHJlY29yZCkge1xyXG5cclxuICAgICAgICBpZiAoICEgY29yZXVpVGFibGVVdGlscy5pc09iamVjdChjb250ZW50KSB8fFxyXG4gICAgICAgICAgICAgISBjb250ZW50Lmhhc093blByb3BlcnR5KCd0eXBlJykgfHxcclxuICAgICAgICAgICAgICEgY29udGVudC5oYXNPd25Qcm9wZXJ0eSgndGV4dCcpIHx8XHJcbiAgICAgICAgICAgICB0eXBlb2YgY29udGVudC50eXBlICE9PSAnc3RyaW5nJyB8fFxyXG4gICAgICAgICAgICAgdHlwZW9mIGNvbnRlbnQudGV4dCAhPT0gJ3N0cmluZycgfHxcclxuICAgICAgICAgICAgICEgY29udGVudC50eXBlIHx8XHJcbiAgICAgICAgICAgICAhIGNvbnRlbnQudGV4dFxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICByZXR1cm4gJyc7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gJChcclxuICAgICAgICAgICAgZWpzLnJlbmRlcihjb3JldWlUYWJsZVRwbFsnY29sdW1ucy9iYWRnZS5odG1sJ10sIHtcclxuICAgICAgICAgICAgICAgIHR5cGU6IGNvbnRlbnQudHlwZSxcclxuICAgICAgICAgICAgICAgIHRleHQ6IGNvbnRlbnQudGV4dFxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgY29yZXVpVGFibGUgICAgICBmcm9tIFwiLi4vY29yZXVpLnRhYmxlXCI7XHJcbmltcG9ydCBjb3JldWlUYWJsZVV0aWxzIGZyb20gXCIuLi9jb3JldWkudGFibGUudXRpbHNcIjtcclxuaW1wb3J0IGNvcmV1aVRhYmxlVHBsICAgZnJvbSBcIi4uL2NvcmV1aS50YWJsZS50ZW1wbGF0ZXNcIjtcclxuaW1wb3J0IGNvcmV1aVRhYmxlUHJpdmF0ZSBmcm9tIFwiLi4vY29yZXVpLnRhYmxlLnByaXZhdGVcIjtcclxuaW1wb3J0IGNvcmV1aVRhYmxlUmVuZGVyIGZyb20gXCIuLi9jb3JldWkudGFibGUucmVuZGVyXCI7XHJcblxyXG5jb3JldWlUYWJsZS5jb2x1bW5zLmNvbXBvbmVudCA9IHtcclxuXHJcbiAgICBfdGFibGU6IG51bGwsXHJcbiAgICBfb3B0aW9uczoge1xyXG4gICAgICAgIHR5cGU6ICdjb21wb25lbnQnLFxyXG4gICAgICAgIGZpZWxkOiBudWxsLFxyXG4gICAgICAgIGxhYmVsOiBudWxsLFxyXG4gICAgICAgIHNob3c6IHRydWUsXHJcbiAgICAgICAgd2lkdGg6IG51bGwsXHJcbiAgICAgICAgbWluV2lkdGg6IG51bGwsXHJcbiAgICAgICAgbWF4V2lkdGg6IG51bGwsXHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPXHJcbiAgICAgKiBAcGFyYW0ge0NvcmVVSS50YWJsZS5pbnN0YW5jZX0gdGFibGVcclxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSAgICAgICAgICAgICAgICBvcHRpb25zXHJcbiAgICAgKi9cclxuICAgIGluaXQ6IGZ1bmN0aW9uICh0YWJsZSwgb3B0aW9ucykge1xyXG5cclxuICAgICAgICB0aGlzLl90YWJsZSAgID0gdGFibGU7XHJcbiAgICAgICAgdGhpcy5fb3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCB0aGlzLl9vcHRpb25zLCBvcHRpb25zKTtcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KPRgdGC0LDQvdC+0LLQutCwINCy0LjQtNC40LzQvtGB0YLQuCDQutC+0LvQvtC90LrQuFxyXG4gICAgICogQHBhcmFtIHtib29sZWFufSBpc1Nob3dcclxuICAgICAqL1xyXG4gICAgc2V0U2hvdzogZnVuY3Rpb24gKGlzU2hvdykge1xyXG4gICAgICAgIHRoaXMuX29wdGlvbnMuc2hvdyA9ICEhIGlzU2hvdztcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0JLQuNC00LjQvNC+0YHRgtC4INC60L7Qu9C+0L3QutC4XHJcbiAgICAgKi9cclxuICAgIGlzU2hvdzogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiAhISB0aGlzLl9vcHRpb25zLnNob3c7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSDQv9Cw0YDQsNC80LXRgtGA0L7QslxyXG4gICAgICogQHJldHVybnMge29iamVjdH1cclxuICAgICAqL1xyXG4gICAgZ2V0T3B0aW9uczogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiAkLmV4dGVuZCh7fSwgdGhpcy5fb3B0aW9ucyk7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCk0L7RgNC80LjRgNC+0LLQsNC90LjQtSDQutC+0L3RgtC10L3RgtCwXHJcbiAgICAgKiBAcGFyYW0ge29iamVjdHxzdHJpbmd9IGNvbnRlbnRcclxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSAgICAgICAgcmVjb3JkXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxyXG4gICAgICovXHJcbiAgICByZW5kZXI6IGZ1bmN0aW9uKGNvbnRlbnQsIHJlY29yZCkge1xyXG5cclxuICAgICAgICBpZiAoICEgY29yZXVpVGFibGVVdGlscy5pc09iamVjdChjb250ZW50KSB8fFxyXG4gICAgICAgICAgICAgISBjb250ZW50Lmhhc093blByb3BlcnR5KCdjb21wb25lbnQnKSB8fFxyXG4gICAgICAgICAgICAgdHlwZW9mIGNvbnRlbnQuY29tcG9uZW50ICE9PSAnc3RyaW5nJyB8fFxyXG4gICAgICAgICAgICAgISBjb250ZW50LmNvbXBvbmVudFxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICByZXR1cm4gJyc7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gY29yZXVpVGFibGVSZW5kZXIucmVuZGVyQ29tcG9uZW50cyh0aGlzLl90YWJsZSwgY29udGVudCwgJ3JlY29yZHNfc2hvdycpO1xyXG4gICAgfVxyXG59Il0sIm5hbWVzIjpbImYiLCJleHBvcnRzIiwibW9kdWxlIiwiZGVmaW5lIiwiYW1kIiwiZyIsIndpbmRvdyIsImdsb2JhbCIsInNlbGYiLCJlanMiLCJyIiwiZSIsIm4iLCJ0IiwibyIsImkiLCJjIiwicmVxdWlyZSIsInUiLCJhIiwiRXJyb3IiLCJjb2RlIiwicCIsImNhbGwiLCJsZW5ndGgiLCJmcyIsInBhdGgiLCJ1dGlscyIsInNjb3BlT3B0aW9uV2FybmVkIiwiX1ZFUlNJT05fU1RSSU5HIiwidmVyc2lvbiIsIl9ERUZBVUxUX09QRU5fREVMSU1JVEVSIiwiX0RFRkFVTFRfQ0xPU0VfREVMSU1JVEVSIiwiX0RFRkFVTFRfREVMSU1JVEVSIiwiX0RFRkFVTFRfTE9DQUxTX05BTUUiLCJfTkFNRSIsIl9SRUdFWF9TVFJJTkciLCJfT1BUU19QQVNTQUJMRV9XSVRIX0RBVEEiLCJfT1BUU19QQVNTQUJMRV9XSVRIX0RBVEFfRVhQUkVTUyIsImNvbmNhdCIsIl9CT00iLCJfSlNfSURFTlRJRklFUiIsImNhY2hlIiwiZmlsZUxvYWRlciIsInJlYWRGaWxlU3luYyIsImxvY2Fsc05hbWUiLCJwcm9taXNlSW1wbCIsIkZ1bmN0aW9uIiwiUHJvbWlzZSIsInJlc29sdmVJbmNsdWRlIiwibmFtZSIsImZpbGVuYW1lIiwiaXNEaXIiLCJkaXJuYW1lIiwiZXh0bmFtZSIsInJlc29sdmUiLCJpbmNsdWRlUGF0aCIsImV4dCIsInJlc29sdmVQYXRocyIsInBhdGhzIiwiZmlsZVBhdGgiLCJzb21lIiwidiIsImV4aXN0c1N5bmMiLCJnZXRJbmNsdWRlUGF0aCIsIm9wdGlvbnMiLCJ2aWV3cyIsIm1hdGNoIiwiZXhlYyIsInJlcGxhY2UiLCJBcnJheSIsImlzQXJyYXkiLCJyb290IiwiaW5jbHVkZXIiLCJlc2NhcGVGdW5jdGlvbiIsImhhbmRsZUNhY2hlIiwidGVtcGxhdGUiLCJmdW5jIiwiaGFzVGVtcGxhdGUiLCJhcmd1bWVudHMiLCJnZXQiLCJ0b1N0cmluZyIsImNvbXBpbGUiLCJzZXQiLCJ0cnlIYW5kbGVDYWNoZSIsImRhdGEiLCJjYiIsInJlc3VsdCIsInJlamVjdCIsImVyciIsImluY2x1ZGVGaWxlIiwib3B0cyIsInNoYWxsb3dDb3B5IiwiY3JlYXRlTnVsbFByb3RvT2JqV2hlcmVQb3NzaWJsZSIsImluY2x1ZGVyUmVzdWx0IiwicmV0aHJvdyIsInN0ciIsImZsbm0iLCJsaW5lbm8iLCJlc2MiLCJsaW5lcyIsInNwbGl0Iiwic3RhcnQiLCJNYXRoIiwibWF4IiwiZW5kIiwibWluIiwiY29udGV4dCIsInNsaWNlIiwibWFwIiwibGluZSIsImN1cnIiLCJqb2luIiwibWVzc2FnZSIsInN0cmlwU2VtaSIsInRlbXBsIiwic2NvcGUiLCJjb25zb2xlIiwid2FybiIsIlRlbXBsYXRlIiwicmVuZGVyIiwiZCIsInNoYWxsb3dDb3B5RnJvbUxpc3QiLCJyZW5kZXJGaWxlIiwiYXJncyIsInByb3RvdHlwZSIsInNoaWZ0Iiwidmlld09wdHMiLCJwb3AiLCJzZXR0aW5ncyIsImNsZWFyQ2FjaGUiLCJyZXNldCIsInRleHQiLCJ0ZW1wbGF0ZVRleHQiLCJtb2RlIiwidHJ1bmNhdGUiLCJjdXJyZW50TGluZSIsInNvdXJjZSIsImNsaWVudCIsImVzY2FwZSIsImVzY2FwZVhNTCIsImNvbXBpbGVEZWJ1ZyIsImRlYnVnIiwib3BlbkRlbGltaXRlciIsImNsb3NlRGVsaW1pdGVyIiwiZGVsaW1pdGVyIiwic3RyaWN0Iiwicm1XaGl0ZXNwYWNlIiwib3V0cHV0RnVuY3Rpb25OYW1lIiwiYXN5bmMiLCJkZXN0cnVjdHVyZWRMb2NhbHMiLCJsZWdhY3lJbmNsdWRlIiwiX3dpdGgiLCJyZWdleCIsImNyZWF0ZVJlZ2V4IiwibW9kZXMiLCJFVkFMIiwiRVNDQVBFRCIsIlJBVyIsIkNPTU1FTlQiLCJMSVRFUkFMIiwiZGVsaW0iLCJlc2NhcGVSZWdFeHBDaGFycyIsIm9wZW4iLCJjbG9zZSIsIlJlZ0V4cCIsInNyYyIsImZuIiwicHJlcGVuZGVkIiwiYXBwZW5kZWQiLCJlc2NhcGVGbiIsImN0b3IiLCJzYW5pdGl6ZWRGaWxlbmFtZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJnZW5lcmF0ZVNvdXJjZSIsInRlc3QiLCJkZXN0cnVjdHVyaW5nIiwibG9nIiwiU3ludGF4RXJyb3IiLCJyZXR1cm5lZEZuIiwiYW5vbnltb3VzIiwiaW5jbHVkZSIsImluY2x1ZGVEYXRhIiwiYXBwbHkiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImJhc2VuYW1lIiwidmFsdWUiLCJ3cml0YWJsZSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJtYXRjaGVzIiwicGFyc2VUZW1wbGF0ZVRleHQiLCJmb3JFYWNoIiwiaW5kZXgiLCJjbG9zaW5nIiwiaW5kZXhPZiIsInNjYW5MaW5lIiwicGF0IiwiYXJyIiwiZmlyc3RQb3MiLCJwdXNoIiwic3Vic3RyaW5nIiwiX2FkZE91dHB1dCIsIm5ld0xpbmVDb3VudCIsImxhc3RJbmRleE9mIiwiX19leHByZXNzIiwiVkVSU0lPTiIsInJlZ0V4cENoYXJzIiwiaGFzT3duUHJvcGVydHkiLCJoYXNPd24iLCJvYmoiLCJrZXkiLCJzdHJpbmciLCJTdHJpbmciLCJfRU5DT0RFX0hUTUxfUlVMRVMiLCJfTUFUQ0hfSFRNTCIsImVuY29kZV9jaGFyIiwiZXNjYXBlRnVuY1N0ciIsIm1hcmt1cCIsInVuZGVmaW5lZCIsImVzY2FwZVhNTFRvU3RyaW5nIiwidG8iLCJmcm9tIiwibGlzdCIsIl9kYXRhIiwidmFsIiwicmVtb3ZlIiwiaHlwaGVuVG9DYW1lbCIsInRvVXBwZXJDYXNlIiwiY3JlYXRlIiwiX19wcm90b19fIiwicHJvY2VzcyIsIm5vcm1hbGl6ZUFycmF5IiwicGFydHMiLCJhbGxvd0Fib3ZlUm9vdCIsInVwIiwibGFzdCIsInNwbGljZSIsInVuc2hpZnQiLCJyZXNvbHZlZFBhdGgiLCJyZXNvbHZlZEFic29sdXRlIiwiY3dkIiwiVHlwZUVycm9yIiwiY2hhckF0IiwiZmlsdGVyIiwibm9ybWFsaXplIiwiaXNBYnNvbHV0ZSIsInRyYWlsaW5nU2xhc2giLCJzdWJzdHIiLCJyZWxhdGl2ZSIsInRyaW0iLCJmcm9tUGFydHMiLCJ0b1BhcnRzIiwic2FtZVBhcnRzTGVuZ3RoIiwib3V0cHV0UGFydHMiLCJzZXAiLCJjaGFyQ29kZUF0IiwiaGFzUm9vdCIsIm1hdGNoZWRTbGFzaCIsInN0YXJ0RG90Iiwic3RhcnRQYXJ0IiwicHJlRG90U3RhdGUiLCJ4cyIsInJlcyIsImxlbiIsIl9wcm9jZXNzIiwiY2FjaGVkU2V0VGltZW91dCIsImNhY2hlZENsZWFyVGltZW91dCIsImRlZmF1bHRTZXRUaW1vdXQiLCJkZWZhdWx0Q2xlYXJUaW1lb3V0Iiwic2V0VGltZW91dCIsImNsZWFyVGltZW91dCIsInJ1blRpbWVvdXQiLCJmdW4iLCJydW5DbGVhclRpbWVvdXQiLCJtYXJrZXIiLCJxdWV1ZSIsImRyYWluaW5nIiwiY3VycmVudFF1ZXVlIiwicXVldWVJbmRleCIsImNsZWFuVXBOZXh0VGljayIsImRyYWluUXVldWUiLCJ0aW1lb3V0IiwicnVuIiwibmV4dFRpY2siLCJJdGVtIiwiYXJyYXkiLCJ0aXRsZSIsImJyb3dzZXIiLCJlbnYiLCJhcmd2IiwidmVyc2lvbnMiLCJub29wIiwib24iLCJhZGRMaXN0ZW5lciIsIm9uY2UiLCJvZmYiLCJyZW1vdmVMaXN0ZW5lciIsInJlbW92ZUFsbExpc3RlbmVycyIsImVtaXQiLCJwcmVwZW5kTGlzdGVuZXIiLCJwcmVwZW5kT25jZUxpc3RlbmVyIiwibGlzdGVuZXJzIiwiYmluZGluZyIsImNoZGlyIiwiZGlyIiwidW1hc2siLCJkZXNjcmlwdGlvbiIsImtleXdvcmRzIiwiYXV0aG9yIiwibGljZW5zZSIsImJpbiIsIm1haW4iLCJqc2RlbGl2ciIsInVucGtnIiwicmVwb3NpdG9yeSIsInR5cGUiLCJ1cmwiLCJidWdzIiwiaG9tZXBhZ2UiLCJkZXBlbmRlbmNpZXMiLCJqYWtlIiwiZGV2RGVwZW5kZW5jaWVzIiwiYnJvd3NlcmlmeSIsImVzbGludCIsImpzZG9jIiwibW9jaGEiLCJlbmdpbmVzIiwibm9kZSIsInNjcmlwdHMiLCJ0cGwiLCJjb3JldWlUYWJsZVV0aWxzIiwibWVyZ2VBdHRyIiwiYXR0cjEiLCJhdHRyMiIsImFzc2lnbiIsIl90eXBlb2YiLCIkIiwiZWFjaCIsImlzTnVtZXJpYyIsIm51bSIsImlzTmFOIiwiaGFzaENvZGUiLCJjcmMzMiIsIkRhdGUiLCJnZXRUaW1lIiwicmFuZG9tIiwiaXNPYmplY3QiLCJjb3JldWlUYWJsZVJlbmRlciIsInJlbmRlclRhYmxlIiwidGFibGUiLCJnZXRPcHRpb25zIiwicmVjb3Jkc0VsZW1lbnRzIiwiY29sdW1uR3JvdXBzSGVhZGVyIiwiY29sdW1uR3JvdXBzRm9vdGVyIiwiY29sR3JvdXBzIiwiY29sdW1ucyIsIl9jb2x1bW5zIiwiY29sdW1uIiwiaXNTaG93IiwiY29sdW1uT3B0aW9ucyIsImF0dHJpYnV0ZXMiLCJzb3J0YWJsZSIsImZpZWxkIiwiYXR0ckhlYWRlciIsImZpeGVkIiwiYXR0ciIsIl9zb3J0Iiwic29ydEZpZWxkIiwib3JkZXIiLCJzdHlsZSIsIndpZHRoIiwidW5pdCIsIm1pbldpZHRoIiwibWF4V2lkdGgiLCJsYWJlbCIsIl9pc1JlY29yZHNSZXF1ZXN0IiwiX3JlY29yZHMiLCJfcmVjb3Jkc1RvdGFsIiwiZ2V0UmVjb3Jkc0NvdW50IiwiX3JlY29yZHNOdW1iZXIiLCJfcGFnZSIsIl9yZWNvcmRzUGVyUGFnZSIsInJlbmRlclJlY29yZHMiLCJyb3dzIiwiaGVhZGVyUm93IiwiY2VsbHMiLCJoZWFkZXJDb2x1bW4iLCJjb250ZW50IiwiY29yZXVpVGFibGVUcGwiLCJmb290ZXJSb3ciLCJmb290ZXJDb2x1bW4iLCJjbGFzc2VzIiwiaHRtbENvbHVtbnMiLCJ0aGVhZEF0dHIiLCJ0aGVhZFRvcCIsInRhYmxlRWxlbWVudCIsImNvbHVtbkhlYWRlcnMiLCJ0Ym9keSIsImZpbmQiLCJyZWNvcmRFbGVtZW50IiwiYXBwZW5kIiwicmVjb3JkcyIsInRoYXQiLCJncm91cCIsImdyb3VwVmFsdWUiLCJyZWNvcmQiLCJzaG93IiwicmVuZGVyR3JvdXAiLCJyZW5kZXJSZWNvcmQiLCJjb2x1bW5zQ291bnQiLCJfY291bnRDb2x1bW5zU2hvdyIsImxhbmciLCJnZXRMYW5nIiwiZmllbGRzIiwicmVjb3JkQXR0ciIsImV4dGVuZCIsInJlbmRlckZpZWxkIiwib25DbGlja1VybCIsIm1ldGEiLCJodG1sIiwiY29sdW1uRmllbGQiLCJmaWVsZFByb3BzIiwiZmllbGRBdHRyIiwiZmllbGRBdHRyUmVzdWx0IiwiY29sc3BhbiIsInJlbmRlckNvbnRlbnQiLCJyZW5kZXJFeHBhbmQiLCJyZW5kZXJDb21wb25lbnRzIiwiZXhwYW5kUmVjb3JkIiwiaXRlbSIsIkhUTUxFbGVtZW50IiwialF1ZXJ5IiwicmVuZGVyQ29udHJvbCIsImNvbnRyb2wiLCJjb250cm9sRWxlbWVudCIsImlkIiwiZ2V0SWQiLCJpbml0RXZlbnRzIiwiY29tcG9uZW50cyIsImV2ZW50TmFtZSIsImFsbG95Q29tcG9uZW50cyIsImNvbXBvbmVudCIsIkNvcmVVSSIsImluc3RhbmNlIiwiY29yZXVpVGFibGVQcml2YXRlIiwiaW5pdENvbHVtbnMiLCJjb3JldWlUYWJsZSIsIl9vcHRpb25zIiwib3ZlcmZsb3ciLCJjb2x1bW5JbnN0YW5jZSIsImluaXQiLCJpbml0U2VhcmNoIiwic2VhcmNoQ29udHJvbHMiLCJzZWFyY2hWYWx1ZXMiLCJzYXZlU3RhdGUiLCJnZXRTdG9yYWdlRmllbGQiLCJzZWFyY2giLCJjb250cm9sSW5zdGFuY2UiLCJfc2VhcmNoIiwiaW5pdENvbnRyb2xzIiwicG9zaXRpb24iLCJyb3ciLCJjb250cm9sc0xlZnQiLCJjb250cm9sc0NlbnRlciIsImNvbnRyb2xzUmlnaHQiLCJ0b0xvd2VyQ2FzZSIsImxlZnQiLCJpbml0Q29udHJvbCIsImNlbnRlciIsInJpZ2h0IiwiX2NvbnRyb2xzUG9zaXRpb25zIiwiY29udHJvbHMiLCJfY29udHJvbHMiLCJmaWx0ZXJOYW1lIiwiZmlsdGVycyIsImZpbHRlclZhbHVlcyIsIl9maWx0ZXJzIiwiaW5pdFNvcnQiLCJzb3J0Iiwic2V0UmVjb3JkcyIsIl9yZWNvcmRzSW5kZXgiLCJhZGRSZWNvcmQiLCJhZnRlckluZGV4IiwiX21ldGEiLCJzZXEiLCJfc2VxIiwiYWRkUmVjb3JkQmVmb3JlIiwiaXNzZXRLZXkiLCJrZXlCZWZvcmUiLCJpc0ZpbHRlcmVkUmVjb3JkIiwicmVjb3JkRGF0YSIsImFsZyIsImlzc2V0U3RhcnQiLCJpc3NldEVuZCIsIl90cmlnZ2VyIiwicGFyYW1zIiwiX2V2ZW50cyIsImNhbGxiYWNrIiwic2luZ2xlRXhlYyIsInNvcnRSZWNvcmRzQnlTZXEiLCJiIiwic29ydFJlY29yZHNCeUZpZWxkcyIsImlzc2V0QUZpZWxkIiwiaXNzZXRCRmllbGQiLCJnZXRTdG9yYWdlIiwidGFibGVJZCIsInN0b3JhZ2UiLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwicGFyc2UiLCJzZXRTdG9yYWdlIiwic3RvcmFnZUFsbCIsInNldEl0ZW0iLCJzZXRTdG9yYWdlRmllbGQiLCJjb3JldWlUYWJsZUVsZW1lbnRzIiwiZ2V0Q29udGFpbmVyIiwiZ2V0TG9jayIsImdldFdyYXBwZXIiLCJnZXRTZWFyY2hDb250YWluZXIiLCJnZXRDb2x1bW5zQ29udGFpbmVyIiwiZ2V0U2VhcmNoQ29udHJvbCIsImNvbnRyb2xJZCIsImdldENvbnRyb2wiLCJnZXRUYWJsZSIsImdldFRhYmxlVGJvZHkiLCJnZXRUYWJsZVNvcnRhYmxlIiwiZ2V0VHJSZWNvcmRzIiwiZ2V0VHJCeUluZGV4IiwiZ2V0RXhwYW5kUm93IiwibmV4dCIsImhhc0NsYXNzIiwiYWRkRXhwYW5kUm93IiwiYWZ0ZXIiLCJhZGRDbGFzcyIsInJlY29yZEluZGV4IiwiaGlkZUV4cGFuZFJvdyIsInJlY29yZEV4cGFuZGVkIiwiaGlkZSIsInNob3dFeHBhbmRSb3ciLCJyZW1vdmVFeHBhbmRSb3ciLCJnZXRTZWxlY3RlZEluZGV4ZXMiLCJpbmRleGVzIiwiZWxlbWVudCIsImdldFJvd3NTd2l0Y2hlcyIsImdldFJvd3NTZWxlY3RzIiwiZ2V0Um93c1NlbGVjdEFsbCIsImdldE5vV3JhcFRvZ2dsZXMiLCJzZWxlY3RUciIsInRyIiwicHJvcCIsInNlbGVjdFRyQWxsIiwidGFibGVDb250YWluZXIiLCJ1bnNlbGVjdFRyIiwicmVtb3ZlQ2xhc3MiLCJ1bnNlbGVjdFRyQWxsIiwiZml4ZWRDb2xzTGVmdCIsInRhYmxlV3JhcHBlciIsImNvbE9mZnNldCIsImNzcyIsIm91dGVyV2lkdGgiLCJmaXhlZENvbHNSaWdodCIsInJldmVyc2UiLCJjb3JldWlUYWJsZUluc3RhbmNlIiwicHJpbWFyeUtleSIsImhlaWdodCIsIm1pbkhlaWdodCIsIm5heEhlaWdodCIsInBhZ2UiLCJyZWNvcmRzUGVyUGFnZSIsIm5vV3JhcCIsIm5vV3JhcFRvZ2dsZSIsInJlY29yZHNSZXF1ZXN0IiwibWV0aG9kIiwiY291bnQiLCJvbkNsaWNrIiwiaGVhZGVyIiwiZm9vdGVyIiwibGFiZWxXaWR0aCIsIl9pZCIsIl9pbml0IiwiY2xpY2siLCJyZWNvcmRLZXkiLCJnZXRSZWNvcmRCeUluZGV4IiwiZmllbGRRdW90ZSIsImxvY2F0aW9uIiwiaHJlZiIsImV2ZW50IiwiY2FuY2VsQnViYmxlIiwicHJldmVudERlZmF1bHQiLCJwYXJlbnQiLCJzb3J0YWJsZUNvbHVtbnMiLCJzb3J0aW5nIiwiY3VycmVudE9yZGVyIiwic29ydERlZmF1bHQiLCJzb3J0RmllbGRzIiwiZ2V0U2VhcmNoRGF0YSIsImdldEZpbHRlckRhdGEiLCJ3aWR0aFNpemVzIiwiaGVpZ2h0U2l6ZXMiLCJoZWFkZXJzT3V0IiwiaGVhZGVyc0luIiwiZm9vdGVyc0luIiwiZm9vdGVyc091dCIsIm1heEhlaWdodCIsImNvbnRyb2xSZW5kZXIiLCJoZWFkZXJDb250cm9scyIsImZvb3RlckNvbnRyb2xzIiwibG9hZCIsImNvbnRhaW5lckVsZW1lbnQiLCJyZWNvcmRzVG90YWwiLCJwcmVwZW5kIiwiZG9tRWxlbWVudCIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJsb2NrIiwiY29udGFpbmVyIiwidW5sb2NrIiwicGFyYW1QYWdlIiwicGFyYW1Db3VudCIsInBhcmFtU3RhcnQiLCJOdW1iZXIiLCJwYXJhbUVuZCIsInNlYXJjaERhdGEiLCJmaWx0ZXJEYXRhIiwicGFyYW1TZWFyY2giLCJwYXJhbUZpbHRlcnMiLCJwYXJhbVNvcnQiLCJhamF4IiwiZGF0YVR5cGUiLCJiZWZvcmVTZW5kIiwieGhyIiwic3VjY2VzcyIsInRvdGFsIiwiZXJyb3IiLCJ0ZXh0U3RhdHVzIiwiZXJyb3JUaHJvd24iLCJjb21wbGV0ZSIsInJlbG9hZCIsInJlZnJlc2giLCJyZXBsYWNlV2l0aCIsInNldFBhZ2VTaXplIiwic2VsZWN0QWxsIiwidW5zZWxlY3RBbGwiLCJzZWxlY3RSZWNvcmQiLCJnZXRSZWNvcmRCeUlkIiwidW5zZWxlY3RSZWNvcmQiLCJnZXRTZWxlY3RlZFJlY29yZHNJZCIsImdldFNlbGVjdGVkUmVjb3JkcyIsImdldFJlY29yZCIsImdldFJlY29yZHMiLCJwcmV2UGFnZSIsIm5leHRQYWdlIiwidG90YWxQYWdlcyIsImNlaWwiLCJnb1BhZ2UiLCJldmVudE5hbWVzIiwiZ2V0U2V0dGluZyIsImtleXMiLCJzZXRDb2x1bW5zU2hvdyIsInNldFNob3ciLCJnZXRWYWx1ZSIsImdldEFsZ29yaXRobSIsInNlYXJjaFJlY29yZHMiLCJzZWFyY2hDbGVhciIsInNldFZhbHVlIiwiZmlsdGVyc0NsZWFyIiwicmVjb3JkSXRlbSIsImdldFJlY29yZEJ5RmllbGQiLCJnZXRDb250cm9sQnlJZCIsImdldFNlYXJjaENvbnRyb2xCeUlkIiwiY29sdW1uU29ydGFibGUiLCJyZW1vdmVSZWNvcmRCeUluZGV4IiwiZmFkZU91dCIsImFkZFJlY29yZEFmdGVySW5kZXgiLCJhZGRSZWNvcmRCZWZvcmVJbmRleCIsImJlZm9yZSIsImFkZFJlY29yZEZpcnN0IiwiYWRkUmVjb3JkTGFzdCIsInBhcnNlSW50IiwidGFibGVCb2R5IiwiZXhwYW5kUmVjb3JkQ29udGVudCIsImlzUmVidWlsZCIsImNhbGxiYWNrUmVzdWx0IiwidGhlbiIsImV4cGFuZFJlY29yZFVybCIsInJlc3BvbnNlIiwiZ2V0UmVzcG9uc2VIZWFkZXIiLCJfaW5zdGFuY2VzIiwiX3NldHRpbmdzIiwic2V0U2V0dGluZ3MiLCJydSIsImxpbmsiLCJfdGFibGUiLCJidXR0b24iLCJkcm9wZG93biIsIml0ZW1zIiwiQ29yZXVpVGFibGVVdGlscyIsImJ1dHRvbl9ncm91cCIsIl9saW5rIiwiX2J1dHRvbiIsIl9kcm9wZG93biIsImJ1dHRvbnMiLCJjdXN0b20iLCJwYWdlX3NpemUiLCJzZWxlY3RQYWdlU2l6ZSIsImNoYW5nZSIsInJlY29yZHNQZXJQYWdlTGlzdCIsInBhZ2VfanVtcCIsImlucHV0Iiwia2V5dXAiLCJrZXlDb2RlIiwicGFnZXMiLCJwcmV2IiwiX2luaXRFdmVudHMiLCJzaG93UHJldiIsInNob3dOZXh0Iiwic2hvd0RpdmlkZXJTdGFydCIsInNob3dEaXZpZGVyRW5kIiwic2hvd1BhZ2VGaXJzdCIsInNob3dQYWdlTGFzdCIsInBhZ2VzVG90YWwiLCJjb3VudEhhbGYiLCJmbG9vciIsImN1cnJlbnRQYWdlIiwiaXNBY3RpdmVQcmV2IiwiaXNBY3RpdmVOZXh0IiwiYnRuUHJldiIsImJ0bk5leHQiLCJidG4iLCJidG5DbGVhciIsImJ0bkNvbXBsZXRlIiwiY2xlYXIiLCJidXR0b25Ub2dnbGUiLCJidXR0b25DbGVhciIsImNvbHVtbnNDb250YWluZXIiLCJmYWRlVG9nZ2xlIiwiY29udHJvbHNFdmVudHMiLCJidG5Db21wbGV0ZUF0dHIiLCJidG5Db21wbGV0ZUNvbnRlbnQiLCJ3cmFwcGVyIiwidGFibGVPcHRpb25zIiwicHJlZml4IiwiY29udHJvbHNFdmVudCIsIl9yZW5kZXJCdG5DbGVhciIsImluc2VydEFmdGVyIiwiYnRuQXR0ciIsImJ0bkNvbnRlbnQiLCJjb250YWluZXJTZWFyY2giLCJzaG93QWxsIiwiaXMiLCJjYXB0aW9uIiwiX3ZhbHVlIiwiX3JlbmRlciIsImF0dHJCdG4iLCJudW1iZXIiLCJudW1iZXJTdGFydCIsIm51bWJlckVuZCIsImlucHV0U3RhcnQiLCJpbnB1dEVuZCIsInZhbHVlU3RhcnQiLCJ2YWx1ZUVuZCIsInN0YXJ0QXR0ciIsImVuZEF0dHIiLCJhdHRyU3RhcnQiLCJhdHRyRW5kIiwiZGF0ZSIsImRhdGV0aW1lIiwiZGF0ZV9tb250aCIsImRhdGVfcmFuZ2UiLCJkYXRlU3RhcnQiLCJkYXRlRW5kIiwic3RhcnRFbmQiLCJkYXRldGltZV9yYW5nZSIsImNoZWNrYm94IiwiX2NsYXNzIiwiaW5wdXRzIiwib3B0aW9uIiwiY2hlY2tlZCIsInJhZGlvIiwic2VsZWN0Iiwic2VsZWN0T3B0aW9ucyIsIl9idWlsZE9wdGlvbiIsInJlbmRlckF0dHIiLCJncm91cEF0dHIiLCJncm91cE9wdGlvbnMiLCJncm91cE9wdGlvbiIsIm9wdGlvbkF0dHIiLCJvcHRpb25UZXh0IiwiaXRlbVZhbHVlIiwidmFsdWVZIiwiY2hlY2tlZEFsbCIsImZvcm1hdCIsIl9zdHJQYWRMZWZ0IiwiZ2V0RnVsbFllYXIiLCJnZXRNb250aCIsImdldERhdGUiLCJyZXBlYXQiLCJnZXRIb3VycyIsImdldE1pbnV0ZXMiLCJnZXRTZWNvbmRzIiwibW9uZXkiLCJjdXJyZW5jeSIsInRvRml4ZWQiLCJudW1iZXJzIiwiX21lcmdlQXR0ciIsInNlbGVjdHMiLCJzdG9wUHJvcGFnYXRpb24iLCJkaXNhYmxlZCIsInZhbHVlTiIsIm9uQ2hhbmdlIiwiY29udGFpbmVycyIsImlzQ2hlY2tlZCIsImZvcm1Td2l0Y2giLCJsaW5rQ29udGVudCIsIm1lbnUiLCJsaW5rQXR0ciIsImxpbmtBdHRyaWJ1dGVzIiwiYnRuQXR0cmlidXRlcyIsIm1lbnVDb250ZW50IiwiYmFkZ2UiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLENBQUMsVUFBU0EsQ0FBQyxFQUFDO0VBQUMsSUFBRyxPQUFPQyxPQUFPLEtBQUcsUUFBUSxJQUFFLE9BQU9DLE1BQU0sS0FB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